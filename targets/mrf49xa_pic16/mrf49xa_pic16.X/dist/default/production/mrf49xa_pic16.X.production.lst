

Microchip Technology PIC PRO Macro Assembler V1.20 build 52243 
                                                                                               Tue May 06 20:55:27 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 52243
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text26,local,class=CODE,merge=1,delta=2
    14                           	psect	pa_nodes,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     	;# 
    17  0001                     	;# 
    18  0002                     	;# 
    19  0003                     	;# 
    20  0004                     	;# 
    21  0005                     	;# 
    22  0006                     	;# 
    23  0007                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0013                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  008C                     	;# 
    44  008D                     	;# 
    45  008E                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0093                     	;# 
    49  0095                     	;# 
    50  0096                     	;# 
    51  0097                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  009F                     	;# 
    60  010C                     	;# 
    61  010D                     	;# 
    62  010E                     	;# 
    63  0111                     	;# 
    64  0112                     	;# 
    65  0113                     	;# 
    66  0114                     	;# 
    67  0115                     	;# 
    68  0116                     	;# 
    69  0117                     	;# 
    70  0118                     	;# 
    71  0119                     	;# 
    72  011D                     	;# 
    73  018C                     	;# 
    74  018D                     	;# 
    75  018E                     	;# 
    76  0191                     	;# 
    77  0191                     	;# 
    78  0192                     	;# 
    79  0193                     	;# 
    80  0193                     	;# 
    81  0194                     	;# 
    82  0195                     	;# 
    83  0196                     	;# 
    84  0199                     	;# 
    85  019A                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019D                     	;# 
    89  019E                     	;# 
    90  019F                     	;# 
    91  020C                     	;# 
    92  020D                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0391                     	;# 
   109  0392                     	;# 
   110  0393                     	;# 
   111  0394                     	;# 
   112  0395                     	;# 
   113  0396                     	;# 
   114  0498                     	;# 
   115  0498                     	;# 
   116  0499                     	;# 
   117  049A                     	;# 
   118  049B                     	;# 
   119  049B                     	;# 
   120  049C                     	;# 
   121  049E                     	;# 
   122  049F                     	;# 
   123  0611                     	;# 
   124  0612                     	;# 
   125  0613                     	;# 
   126  0613                     	;# 
   127  0614                     	;# 
   128  0615                     	;# 
   129  0616                     	;# 
   130  0616                     	;# 
   131  0617                     	;# 
   132  0618                     	;# 
   133  0619                     	;# 
   134  0619                     	;# 
   135  061A                     	;# 
   136  061B                     	;# 
   137  061C                     	;# 
   138  061C                     	;# 
   139  0691                     	;# 
   140  0692                     	;# 
   141  0693                     	;# 
   142  0694                     	;# 
   143  0695                     	;# 
   144  0F0F                     	;# 
   145  0F10                     	;# 
   146  0F11                     	;# 
   147  0F12                     	;# 
   148  0F13                     	;# 
   149  0F14                     	;# 
   150  0F15                     	;# 
   151  0F16                     	;# 
   152  0F17                     	;# 
   153  0F18                     	;# 
   154  0F19                     	;# 
   155  0F1A                     	;# 
   156  0F1B                     	;# 
   157  0F1C                     	;# 
   158  0F1D                     	;# 
   159  0F1E                     	;# 
   160  0F1F                     	;# 
   161  0F20                     	;# 
   162  0F21                     	;# 
   163  0F22                     	;# 
   164  0F23                     	;# 
   165  0F24                     	;# 
   166  0F25                     	;# 
   167  0F26                     	;# 
   168  0F27                     	;# 
   169  0F28                     	;# 
   170  0F29                     	;# 
   171  0F2A                     	;# 
   172  0F2B                     	;# 
   173  0F2C                     	;# 
   174  0F2D                     	;# 
   175  0F2E                     	;# 
   176  0F2F                     	;# 
   177  0F8C                     	;# 
   178  0F8D                     	;# 
   179  0F91                     	;# 
   180  0F95                     	;# 
   181  0F96                     	;# 
   182  0F97                     	;# 
   183  0F9C                     	;# 
   184  0F9D                     	;# 
   185  0F9E                     	;# 
   186  0FE3                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000D                     	;# 
   212  000E                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0013                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0093                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009E                     	;# 
   241  009F                     	;# 
   242  010C                     	;# 
   243  010D                     	;# 
   244  010E                     	;# 
   245  0111                     	;# 
   246  0112                     	;# 
   247  0113                     	;# 
   248  0114                     	;# 
   249  0115                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  0118                     	;# 
   253  0119                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  018E                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020D                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0391                     	;# 
   291  0392                     	;# 
   292  0393                     	;# 
   293  0394                     	;# 
   294  0395                     	;# 
   295  0396                     	;# 
   296  0498                     	;# 
   297  0498                     	;# 
   298  0499                     	;# 
   299  049A                     	;# 
   300  049B                     	;# 
   301  049B                     	;# 
   302  049C                     	;# 
   303  049E                     	;# 
   304  049F                     	;# 
   305  0611                     	;# 
   306  0612                     	;# 
   307  0613                     	;# 
   308  0613                     	;# 
   309  0614                     	;# 
   310  0615                     	;# 
   311  0616                     	;# 
   312  0616                     	;# 
   313  0617                     	;# 
   314  0618                     	;# 
   315  0619                     	;# 
   316  0619                     	;# 
   317  061A                     	;# 
   318  061B                     	;# 
   319  061C                     	;# 
   320  061C                     	;# 
   321  0691                     	;# 
   322  0692                     	;# 
   323  0693                     	;# 
   324  0694                     	;# 
   325  0695                     	;# 
   326  0F0F                     	;# 
   327  0F10                     	;# 
   328  0F11                     	;# 
   329  0F12                     	;# 
   330  0F13                     	;# 
   331  0F14                     	;# 
   332  0F15                     	;# 
   333  0F16                     	;# 
   334  0F17                     	;# 
   335  0F18                     	;# 
   336  0F19                     	;# 
   337  0F1A                     	;# 
   338  0F1B                     	;# 
   339  0F1C                     	;# 
   340  0F1D                     	;# 
   341  0F1E                     	;# 
   342  0F1F                     	;# 
   343  0F20                     	;# 
   344  0F21                     	;# 
   345  0F22                     	;# 
   346  0F23                     	;# 
   347  0F24                     	;# 
   348  0F25                     	;# 
   349  0F26                     	;# 
   350  0F27                     	;# 
   351  0F28                     	;# 
   352  0F29                     	;# 
   353  0F2A                     	;# 
   354  0F2B                     	;# 
   355  0F2C                     	;# 
   356  0F2D                     	;# 
   357  0F2E                     	;# 
   358  0F2F                     	;# 
   359  0F8C                     	;# 
   360  0F8D                     	;# 
   361  0F91                     	;# 
   362  0F95                     	;# 
   363  0F96                     	;# 
   364  0F97                     	;# 
   365  0F9C                     	;# 
   366  0F9D                     	;# 
   367  0F9E                     	;# 
   368  0FE3                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0099                     	;# 
   417  009A                     	;# 
   418  009B                     	;# 
   419  009B                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  009F                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0111                     	;# 
   428  0112                     	;# 
   429  0113                     	;# 
   430  0114                     	;# 
   431  0115                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  0118                     	;# 
   435  0119                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020C                     	;# 
   456  020D                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0391                     	;# 
   473  0392                     	;# 
   474  0393                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0498                     	;# 
   479  0498                     	;# 
   480  0499                     	;# 
   481  049A                     	;# 
   482  049B                     	;# 
   483  049B                     	;# 
   484  049C                     	;# 
   485  049E                     	;# 
   486  049F                     	;# 
   487  0611                     	;# 
   488  0612                     	;# 
   489  0613                     	;# 
   490  0613                     	;# 
   491  0614                     	;# 
   492  0615                     	;# 
   493  0616                     	;# 
   494  0616                     	;# 
   495  0617                     	;# 
   496  0618                     	;# 
   497  0619                     	;# 
   498  0619                     	;# 
   499  061A                     	;# 
   500  061B                     	;# 
   501  061C                     	;# 
   502  061C                     	;# 
   503  0691                     	;# 
   504  0692                     	;# 
   505  0693                     	;# 
   506  0694                     	;# 
   507  0695                     	;# 
   508  0F0F                     	;# 
   509  0F10                     	;# 
   510  0F11                     	;# 
   511  0F12                     	;# 
   512  0F13                     	;# 
   513  0F14                     	;# 
   514  0F15                     	;# 
   515  0F16                     	;# 
   516  0F17                     	;# 
   517  0F18                     	;# 
   518  0F19                     	;# 
   519  0F1A                     	;# 
   520  0F1B                     	;# 
   521  0F1C                     	;# 
   522  0F1D                     	;# 
   523  0F1E                     	;# 
   524  0F1F                     	;# 
   525  0F20                     	;# 
   526  0F21                     	;# 
   527  0F22                     	;# 
   528  0F23                     	;# 
   529  0F24                     	;# 
   530  0F25                     	;# 
   531  0F26                     	;# 
   532  0F27                     	;# 
   533  0F28                     	;# 
   534  0F29                     	;# 
   535  0F2A                     	;# 
   536  0F2B                     	;# 
   537  0F2C                     	;# 
   538  0F2D                     	;# 
   539  0F2E                     	;# 
   540  0F2F                     	;# 
   541  0F8C                     	;# 
   542  0F8D                     	;# 
   543  0F91                     	;# 
   544  0F95                     	;# 
   545  0F96                     	;# 
   546  0F97                     	;# 
   547  0F9C                     	;# 
   548  0F9D                     	;# 
   549  0F9E                     	;# 
   550  0FE3                     	;# 
   551  0FE4                     	;# 
   552  0FE5                     	;# 
   553  0FE6                     	;# 
   554  0FE7                     	;# 
   555  0FE8                     	;# 
   556  0FE9                     	;# 
   557  0FEA                     	;# 
   558  0FEB                     	;# 
   559  0FED                     	;# 
   560  0FEE                     	;# 
   561  0FEF                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0008                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0013                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0093                     	;# 
   595  0095                     	;# 
   596  0096                     	;# 
   597  0097                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  009F                     	;# 
   606  010C                     	;# 
   607  010D                     	;# 
   608  010E                     	;# 
   609  0111                     	;# 
   610  0112                     	;# 
   611  0113                     	;# 
   612  0114                     	;# 
   613  0115                     	;# 
   614  0116                     	;# 
   615  0117                     	;# 
   616  0118                     	;# 
   617  0119                     	;# 
   618  011D                     	;# 
   619  018C                     	;# 
   620  018D                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0194                     	;# 
   628  0195                     	;# 
   629  0196                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019B                     	;# 
   633  019C                     	;# 
   634  019D                     	;# 
   635  019E                     	;# 
   636  019F                     	;# 
   637  020C                     	;# 
   638  020D                     	;# 
   639  0211                     	;# 
   640  0211                     	;# 
   641  0212                     	;# 
   642  0212                     	;# 
   643  0213                     	;# 
   644  0213                     	;# 
   645  0214                     	;# 
   646  0214                     	;# 
   647  0215                     	;# 
   648  0215                     	;# 
   649  0215                     	;# 
   650  0216                     	;# 
   651  0216                     	;# 
   652  0217                     	;# 
   653  0217                     	;# 
   654  0391                     	;# 
   655  0392                     	;# 
   656  0393                     	;# 
   657  0394                     	;# 
   658  0395                     	;# 
   659  0396                     	;# 
   660  0498                     	;# 
   661  0498                     	;# 
   662  0499                     	;# 
   663  049A                     	;# 
   664  049B                     	;# 
   665  049B                     	;# 
   666  049C                     	;# 
   667  049E                     	;# 
   668  049F                     	;# 
   669  0611                     	;# 
   670  0612                     	;# 
   671  0613                     	;# 
   672  0613                     	;# 
   673  0614                     	;# 
   674  0615                     	;# 
   675  0616                     	;# 
   676  0616                     	;# 
   677  0617                     	;# 
   678  0618                     	;# 
   679  0619                     	;# 
   680  0619                     	;# 
   681  061A                     	;# 
   682  061B                     	;# 
   683  061C                     	;# 
   684  061C                     	;# 
   685  0691                     	;# 
   686  0692                     	;# 
   687  0693                     	;# 
   688  0694                     	;# 
   689  0695                     	;# 
   690  0F0F                     	;# 
   691  0F10                     	;# 
   692  0F11                     	;# 
   693  0F12                     	;# 
   694  0F13                     	;# 
   695  0F14                     	;# 
   696  0F15                     	;# 
   697  0F16                     	;# 
   698  0F17                     	;# 
   699  0F18                     	;# 
   700  0F19                     	;# 
   701  0F1A                     	;# 
   702  0F1B                     	;# 
   703  0F1C                     	;# 
   704  0F1D                     	;# 
   705  0F1E                     	;# 
   706  0F1F                     	;# 
   707  0F20                     	;# 
   708  0F21                     	;# 
   709  0F22                     	;# 
   710  0F23                     	;# 
   711  0F24                     	;# 
   712  0F25                     	;# 
   713  0F26                     	;# 
   714  0F27                     	;# 
   715  0F28                     	;# 
   716  0F29                     	;# 
   717  0F2A                     	;# 
   718  0F2B                     	;# 
   719  0F2C                     	;# 
   720  0F2D                     	;# 
   721  0F2E                     	;# 
   722  0F2F                     	;# 
   723  0F8C                     	;# 
   724  0F8D                     	;# 
   725  0F91                     	;# 
   726  0F95                     	;# 
   727  0F96                     	;# 
   728  0F97                     	;# 
   729  0F9C                     	;# 
   730  0F9D                     	;# 
   731  0F9E                     	;# 
   732  0FE3                     	;# 
   733  0FE4                     	;# 
   734  0FE5                     	;# 
   735  0FE6                     	;# 
   736  0FE7                     	;# 
   737  0FE8                     	;# 
   738  0FE9                     	;# 
   739  0FEA                     	;# 
   740  0FEB                     	;# 
   741  0FED                     	;# 
   742  0FEE                     	;# 
   743  0FEF                     	;# 
   744  0000                     	;# 
   745  0001                     	;# 
   746  0002                     	;# 
   747  0003                     	;# 
   748  0004                     	;# 
   749  0005                     	;# 
   750  0006                     	;# 
   751  0007                     	;# 
   752  0008                     	;# 
   753  0009                     	;# 
   754  000A                     	;# 
   755  000B                     	;# 
   756  000C                     	;# 
   757  000D                     	;# 
   758  000E                     	;# 
   759  0011                     	;# 
   760  0012                     	;# 
   761  0013                     	;# 
   762  0015                     	;# 
   763  0016                     	;# 
   764  0016                     	;# 
   765  0017                     	;# 
   766  0018                     	;# 
   767  0019                     	;# 
   768  001A                     	;# 
   769  001B                     	;# 
   770  001C                     	;# 
   771  008C                     	;# 
   772  008D                     	;# 
   773  008E                     	;# 
   774  0091                     	;# 
   775  0092                     	;# 
   776  0093                     	;# 
   777  0095                     	;# 
   778  0096                     	;# 
   779  0097                     	;# 
   780  0099                     	;# 
   781  009A                     	;# 
   782  009B                     	;# 
   783  009B                     	;# 
   784  009C                     	;# 
   785  009D                     	;# 
   786  009E                     	;# 
   787  009F                     	;# 
   788  010C                     	;# 
   789  010D                     	;# 
   790  010E                     	;# 
   791  0111                     	;# 
   792  0112                     	;# 
   793  0113                     	;# 
   794  0114                     	;# 
   795  0115                     	;# 
   796  0116                     	;# 
   797  0117                     	;# 
   798  0118                     	;# 
   799  0119                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018D                     	;# 
   803  018E                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0194                     	;# 
   810  0195                     	;# 
   811  0196                     	;# 
   812  0199                     	;# 
   813  019A                     	;# 
   814  019B                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020C                     	;# 
   820  020D                     	;# 
   821  0211                     	;# 
   822  0211                     	;# 
   823  0212                     	;# 
   824  0212                     	;# 
   825  0213                     	;# 
   826  0213                     	;# 
   827  0214                     	;# 
   828  0214                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0216                     	;# 
   833  0216                     	;# 
   834  0217                     	;# 
   835  0217                     	;# 
   836  0391                     	;# 
   837  0392                     	;# 
   838  0393                     	;# 
   839  0394                     	;# 
   840  0395                     	;# 
   841  0396                     	;# 
   842  0498                     	;# 
   843  0498                     	;# 
   844  0499                     	;# 
   845  049A                     	;# 
   846  049B                     	;# 
   847  049B                     	;# 
   848  049C                     	;# 
   849  049E                     	;# 
   850  049F                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0613                     	;# 
   855  0614                     	;# 
   856  0615                     	;# 
   857  0616                     	;# 
   858  0616                     	;# 
   859  0617                     	;# 
   860  0618                     	;# 
   861  0619                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061C                     	;# 
   867  0691                     	;# 
   868  0692                     	;# 
   869  0693                     	;# 
   870  0694                     	;# 
   871  0695                     	;# 
   872  0F0F                     	;# 
   873  0F10                     	;# 
   874  0F11                     	;# 
   875  0F12                     	;# 
   876  0F13                     	;# 
   877  0F14                     	;# 
   878  0F15                     	;# 
   879  0F16                     	;# 
   880  0F17                     	;# 
   881  0F18                     	;# 
   882  0F19                     	;# 
   883  0F1A                     	;# 
   884  0F1B                     	;# 
   885  0F1C                     	;# 
   886  0F1D                     	;# 
   887  0F1E                     	;# 
   888  0F1F                     	;# 
   889  0F20                     	;# 
   890  0F21                     	;# 
   891  0F22                     	;# 
   892  0F23                     	;# 
   893  0F24                     	;# 
   894  0F25                     	;# 
   895  0F26                     	;# 
   896  0F27                     	;# 
   897  0F28                     	;# 
   898  0F29                     	;# 
   899  0F2A                     	;# 
   900  0F2B                     	;# 
   901  0F2C                     	;# 
   902  0F2D                     	;# 
   903  0F2E                     	;# 
   904  0F2F                     	;# 
   905  0F8C                     	;# 
   906  0F8D                     	;# 
   907  0F91                     	;# 
   908  0F95                     	;# 
   909  0F96                     	;# 
   910  0F97                     	;# 
   911  0F9C                     	;# 
   912  0F9D                     	;# 
   913  0F9E                     	;# 
   914  0FE3                     	;# 
   915  0FE4                     	;# 
   916  0FE5                     	;# 
   917  0FE6                     	;# 
   918  0FE7                     	;# 
   919  0FE8                     	;# 
   920  0FE9                     	;# 
   921  0FEA                     	;# 
   922  0FEB                     	;# 
   923  0FED                     	;# 
   924  0FEE                     	;# 
   925  0FEF                     	;# 
   926  0000                     	;# 
   927  0001                     	;# 
   928  0002                     	;# 
   929  0003                     	;# 
   930  0004                     	;# 
   931  0005                     	;# 
   932  0006                     	;# 
   933  0007                     	;# 
   934  0008                     	;# 
   935  0009                     	;# 
   936  000A                     	;# 
   937  000B                     	;# 
   938  000C                     	;# 
   939  000D                     	;# 
   940  000E                     	;# 
   941  0011                     	;# 
   942  0012                     	;# 
   943  0013                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  008C                     	;# 
   954  008D                     	;# 
   955  008E                     	;# 
   956  0091                     	;# 
   957  0092                     	;# 
   958  0093                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0097                     	;# 
   962  0099                     	;# 
   963  009A                     	;# 
   964  009B                     	;# 
   965  009B                     	;# 
   966  009C                     	;# 
   967  009D                     	;# 
   968  009E                     	;# 
   969  009F                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  0111                     	;# 
   974  0112                     	;# 
   975  0113                     	;# 
   976  0114                     	;# 
   977  0115                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  0118                     	;# 
   981  0119                     	;# 
   982  011D                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  018E                     	;# 
   986  0191                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019D                     	;# 
   999  019E                     	;# 
  1000  019F                     	;# 
  1001  020C                     	;# 
  1002  020D                     	;# 
  1003  0211                     	;# 
  1004  0211                     	;# 
  1005  0212                     	;# 
  1006  0212                     	;# 
  1007  0213                     	;# 
  1008  0213                     	;# 
  1009  0214                     	;# 
  1010  0214                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0216                     	;# 
  1015  0216                     	;# 
  1016  0217                     	;# 
  1017  0217                     	;# 
  1018  0391                     	;# 
  1019  0392                     	;# 
  1020  0393                     	;# 
  1021  0394                     	;# 
  1022  0395                     	;# 
  1023  0396                     	;# 
  1024  0498                     	;# 
  1025  0498                     	;# 
  1026  0499                     	;# 
  1027  049A                     	;# 
  1028  049B                     	;# 
  1029  049B                     	;# 
  1030  049C                     	;# 
  1031  049E                     	;# 
  1032  049F                     	;# 
  1033  0611                     	;# 
  1034  0612                     	;# 
  1035  0613                     	;# 
  1036  0613                     	;# 
  1037  0614                     	;# 
  1038  0615                     	;# 
  1039  0616                     	;# 
  1040  0616                     	;# 
  1041  0617                     	;# 
  1042  0618                     	;# 
  1043  0619                     	;# 
  1044  0619                     	;# 
  1045  061A                     	;# 
  1046  061B                     	;# 
  1047  061C                     	;# 
  1048  061C                     	;# 
  1049  0691                     	;# 
  1050  0692                     	;# 
  1051  0693                     	;# 
  1052  0694                     	;# 
  1053  0695                     	;# 
  1054  0F0F                     	;# 
  1055  0F10                     	;# 
  1056  0F11                     	;# 
  1057  0F12                     	;# 
  1058  0F13                     	;# 
  1059  0F14                     	;# 
  1060  0F15                     	;# 
  1061  0F16                     	;# 
  1062  0F17                     	;# 
  1063  0F18                     	;# 
  1064  0F19                     	;# 
  1065  0F1A                     	;# 
  1066  0F1B                     	;# 
  1067  0F1C                     	;# 
  1068  0F1D                     	;# 
  1069  0F1E                     	;# 
  1070  0F1F                     	;# 
  1071  0F20                     	;# 
  1072  0F21                     	;# 
  1073  0F22                     	;# 
  1074  0F23                     	;# 
  1075  0F24                     	;# 
  1076  0F25                     	;# 
  1077  0F26                     	;# 
  1078  0F27                     	;# 
  1079  0F28                     	;# 
  1080  0F29                     	;# 
  1081  0F2A                     	;# 
  1082  0F2B                     	;# 
  1083  0F2C                     	;# 
  1084  0F2D                     	;# 
  1085  0F2E                     	;# 
  1086  0F2F                     	;# 
  1087  0F8C                     	;# 
  1088  0F8D                     	;# 
  1089  0F91                     	;# 
  1090  0F95                     	;# 
  1091  0F96                     	;# 
  1092  0F97                     	;# 
  1093  0F9C                     	;# 
  1094  0F9D                     	;# 
  1095  0F9E                     	;# 
  1096  0FE3                     	;# 
  1097  0FE4                     	;# 
  1098  0FE5                     	;# 
  1099  0FE6                     	;# 
  1100  0FE7                     	;# 
  1101  0FE8                     	;# 
  1102  0FE9                     	;# 
  1103  0FEA                     	;# 
  1104  0FEB                     	;# 
  1105  0FED                     	;# 
  1106  0FEE                     	;# 
  1107  0FEF                     	;# 
  1108  0000                     	;# 
  1109  0001                     	;# 
  1110  0002                     	;# 
  1111  0003                     	;# 
  1112  0004                     	;# 
  1113  0005                     	;# 
  1114  0006                     	;# 
  1115  0007                     	;# 
  1116  0008                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  008C                     	;# 
  1136  008D                     	;# 
  1137  008E                     	;# 
  1138  0091                     	;# 
  1139  0092                     	;# 
  1140  0093                     	;# 
  1141  0095                     	;# 
  1142  0096                     	;# 
  1143  0097                     	;# 
  1144  0099                     	;# 
  1145  009A                     	;# 
  1146  009B                     	;# 
  1147  009B                     	;# 
  1148  009C                     	;# 
  1149  009D                     	;# 
  1150  009E                     	;# 
  1151  009F                     	;# 
  1152  010C                     	;# 
  1153  010D                     	;# 
  1154  010E                     	;# 
  1155  0111                     	;# 
  1156  0112                     	;# 
  1157  0113                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0117                     	;# 
  1162  0118                     	;# 
  1163  0119                     	;# 
  1164  011D                     	;# 
  1165  018C                     	;# 
  1166  018D                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0194                     	;# 
  1174  0195                     	;# 
  1175  0196                     	;# 
  1176  0199                     	;# 
  1177  019A                     	;# 
  1178  019B                     	;# 
  1179  019C                     	;# 
  1180  019D                     	;# 
  1181  019E                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020D                     	;# 
  1185  0211                     	;# 
  1186  0211                     	;# 
  1187  0212                     	;# 
  1188  0212                     	;# 
  1189  0213                     	;# 
  1190  0213                     	;# 
  1191  0214                     	;# 
  1192  0214                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0216                     	;# 
  1197  0216                     	;# 
  1198  0217                     	;# 
  1199  0217                     	;# 
  1200  0391                     	;# 
  1201  0392                     	;# 
  1202  0393                     	;# 
  1203  0394                     	;# 
  1204  0395                     	;# 
  1205  0396                     	;# 
  1206  0498                     	;# 
  1207  0498                     	;# 
  1208  0499                     	;# 
  1209  049A                     	;# 
  1210  049B                     	;# 
  1211  049B                     	;# 
  1212  049C                     	;# 
  1213  049E                     	;# 
  1214  049F                     	;# 
  1215  0611                     	;# 
  1216  0612                     	;# 
  1217  0613                     	;# 
  1218  0613                     	;# 
  1219  0614                     	;# 
  1220  0615                     	;# 
  1221  0616                     	;# 
  1222  0616                     	;# 
  1223  0617                     	;# 
  1224  0618                     	;# 
  1225  0619                     	;# 
  1226  0619                     	;# 
  1227  061A                     	;# 
  1228  061B                     	;# 
  1229  061C                     	;# 
  1230  061C                     	;# 
  1231  0691                     	;# 
  1232  0692                     	;# 
  1233  0693                     	;# 
  1234  0694                     	;# 
  1235  0695                     	;# 
  1236  0F0F                     	;# 
  1237  0F10                     	;# 
  1238  0F11                     	;# 
  1239  0F12                     	;# 
  1240  0F13                     	;# 
  1241  0F14                     	;# 
  1242  0F15                     	;# 
  1243  0F16                     	;# 
  1244  0F17                     	;# 
  1245  0F18                     	;# 
  1246  0F19                     	;# 
  1247  0F1A                     	;# 
  1248  0F1B                     	;# 
  1249  0F1C                     	;# 
  1250  0F1D                     	;# 
  1251  0F1E                     	;# 
  1252  0F1F                     	;# 
  1253  0F20                     	;# 
  1254  0F21                     	;# 
  1255  0F22                     	;# 
  1256  0F23                     	;# 
  1257  0F24                     	;# 
  1258  0F25                     	;# 
  1259  0F26                     	;# 
  1260  0F27                     	;# 
  1261  0F28                     	;# 
  1262  0F29                     	;# 
  1263  0F2A                     	;# 
  1264  0F2B                     	;# 
  1265  0F2C                     	;# 
  1266  0F2D                     	;# 
  1267  0F2E                     	;# 
  1268  0F2F                     	;# 
  1269  0F8C                     	;# 
  1270  0F8D                     	;# 
  1271  0F91                     	;# 
  1272  0F95                     	;# 
  1273  0F96                     	;# 
  1274  0F97                     	;# 
  1275  0F9C                     	;# 
  1276  0F9D                     	;# 
  1277  0F9E                     	;# 
  1278  0FE3                     	;# 
  1279  0FE4                     	;# 
  1280  0FE5                     	;# 
  1281  0FE6                     	;# 
  1282  0FE7                     	;# 
  1283  0FE8                     	;# 
  1284  0FE9                     	;# 
  1285  0FEA                     	;# 
  1286  0FEB                     	;# 
  1287  0FED                     	;# 
  1288  0FEE                     	;# 
  1289  0FEF                     	;# 
  1290  0000                     	;# 
  1291  0001                     	;# 
  1292  0002                     	;# 
  1293  0003                     	;# 
  1294  0004                     	;# 
  1295  0005                     	;# 
  1296  0006                     	;# 
  1297  0007                     	;# 
  1298  0008                     	;# 
  1299  0009                     	;# 
  1300  000A                     	;# 
  1301  000B                     	;# 
  1302  000C                     	;# 
  1303  000D                     	;# 
  1304  000E                     	;# 
  1305  0011                     	;# 
  1306  0012                     	;# 
  1307  0013                     	;# 
  1308  0015                     	;# 
  1309  0016                     	;# 
  1310  0016                     	;# 
  1311  0017                     	;# 
  1312  0018                     	;# 
  1313  0019                     	;# 
  1314  001A                     	;# 
  1315  001B                     	;# 
  1316  001C                     	;# 
  1317  008C                     	;# 
  1318  008D                     	;# 
  1319  008E                     	;# 
  1320  0091                     	;# 
  1321  0092                     	;# 
  1322  0093                     	;# 
  1323  0095                     	;# 
  1324  0096                     	;# 
  1325  0097                     	;# 
  1326  0099                     	;# 
  1327  009A                     	;# 
  1328  009B                     	;# 
  1329  009B                     	;# 
  1330  009C                     	;# 
  1331  009D                     	;# 
  1332  009E                     	;# 
  1333  009F                     	;# 
  1334  010C                     	;# 
  1335  010D                     	;# 
  1336  010E                     	;# 
  1337  0111                     	;# 
  1338  0112                     	;# 
  1339  0113                     	;# 
  1340  0114                     	;# 
  1341  0115                     	;# 
  1342  0116                     	;# 
  1343  0117                     	;# 
  1344  0118                     	;# 
  1345  0119                     	;# 
  1346  011D                     	;# 
  1347  018C                     	;# 
  1348  018D                     	;# 
  1349  018E                     	;# 
  1350  0191                     	;# 
  1351  0191                     	;# 
  1352  0192                     	;# 
  1353  0193                     	;# 
  1354  0193                     	;# 
  1355  0194                     	;# 
  1356  0195                     	;# 
  1357  0196                     	;# 
  1358  0199                     	;# 
  1359  019A                     	;# 
  1360  019B                     	;# 
  1361  019C                     	;# 
  1362  019D                     	;# 
  1363  019E                     	;# 
  1364  019F                     	;# 
  1365  020C                     	;# 
  1366  020D                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0391                     	;# 
  1383  0392                     	;# 
  1384  0393                     	;# 
  1385  0394                     	;# 
  1386  0395                     	;# 
  1387  0396                     	;# 
  1388  0498                     	;# 
  1389  0498                     	;# 
  1390  0499                     	;# 
  1391  049A                     	;# 
  1392  049B                     	;# 
  1393  049B                     	;# 
  1394  049C                     	;# 
  1395  049E                     	;# 
  1396  049F                     	;# 
  1397  0611                     	;# 
  1398  0612                     	;# 
  1399  0613                     	;# 
  1400  0613                     	;# 
  1401  0614                     	;# 
  1402  0615                     	;# 
  1403  0616                     	;# 
  1404  0616                     	;# 
  1405  0617                     	;# 
  1406  0618                     	;# 
  1407  0619                     	;# 
  1408  0619                     	;# 
  1409  061A                     	;# 
  1410  061B                     	;# 
  1411  061C                     	;# 
  1412  061C                     	;# 
  1413  0691                     	;# 
  1414  0692                     	;# 
  1415  0693                     	;# 
  1416  0694                     	;# 
  1417  0695                     	;# 
  1418  0F0F                     	;# 
  1419  0F10                     	;# 
  1420  0F11                     	;# 
  1421  0F12                     	;# 
  1422  0F13                     	;# 
  1423  0F14                     	;# 
  1424  0F15                     	;# 
  1425  0F16                     	;# 
  1426  0F17                     	;# 
  1427  0F18                     	;# 
  1428  0F19                     	;# 
  1429  0F1A                     	;# 
  1430  0F1B                     	;# 
  1431  0F1C                     	;# 
  1432  0F1D                     	;# 
  1433  0F1E                     	;# 
  1434  0F1F                     	;# 
  1435  0F20                     	;# 
  1436  0F21                     	;# 
  1437  0F22                     	;# 
  1438  0F23                     	;# 
  1439  0F24                     	;# 
  1440  0F25                     	;# 
  1441  0F26                     	;# 
  1442  0F27                     	;# 
  1443  0F28                     	;# 
  1444  0F29                     	;# 
  1445  0F2A                     	;# 
  1446  0F2B                     	;# 
  1447  0F2C                     	;# 
  1448  0F2D                     	;# 
  1449  0F2E                     	;# 
  1450  0F2F                     	;# 
  1451  0F8C                     	;# 
  1452  0F8D                     	;# 
  1453  0F91                     	;# 
  1454  0F95                     	;# 
  1455  0F96                     	;# 
  1456  0F97                     	;# 
  1457  0F9C                     	;# 
  1458  0F9D                     	;# 
  1459  0F9E                     	;# 
  1460  0FE3                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0011                     	;# 
  1488  0012                     	;# 
  1489  0013                     	;# 
  1490  0015                     	;# 
  1491  0016                     	;# 
  1492  0016                     	;# 
  1493  0017                     	;# 
  1494  0018                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  008C                     	;# 
  1500  008D                     	;# 
  1501  008E                     	;# 
  1502  0091                     	;# 
  1503  0092                     	;# 
  1504  0093                     	;# 
  1505  0095                     	;# 
  1506  0096                     	;# 
  1507  0097                     	;# 
  1508  0099                     	;# 
  1509  009A                     	;# 
  1510  009B                     	;# 
  1511  009B                     	;# 
  1512  009C                     	;# 
  1513  009D                     	;# 
  1514  009E                     	;# 
  1515  009F                     	;# 
  1516  010C                     	;# 
  1517  010D                     	;# 
  1518  010E                     	;# 
  1519  0111                     	;# 
  1520  0112                     	;# 
  1521  0113                     	;# 
  1522  0114                     	;# 
  1523  0115                     	;# 
  1524  0116                     	;# 
  1525  0117                     	;# 
  1526  0118                     	;# 
  1527  0119                     	;# 
  1528  011D                     	;# 
  1529  018C                     	;# 
  1530  018D                     	;# 
  1531  018E                     	;# 
  1532  0191                     	;# 
  1533  0191                     	;# 
  1534  0192                     	;# 
  1535  0193                     	;# 
  1536  0193                     	;# 
  1537  0194                     	;# 
  1538  0195                     	;# 
  1539  0196                     	;# 
  1540  0199                     	;# 
  1541  019A                     	;# 
  1542  019B                     	;# 
  1543  019C                     	;# 
  1544  019D                     	;# 
  1545  019E                     	;# 
  1546  019F                     	;# 
  1547  020C                     	;# 
  1548  020D                     	;# 
  1549  0211                     	;# 
  1550  0211                     	;# 
  1551  0212                     	;# 
  1552  0212                     	;# 
  1553  0213                     	;# 
  1554  0213                     	;# 
  1555  0214                     	;# 
  1556  0214                     	;# 
  1557  0215                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0216                     	;# 
  1561  0216                     	;# 
  1562  0217                     	;# 
  1563  0217                     	;# 
  1564  0391                     	;# 
  1565  0392                     	;# 
  1566  0393                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0498                     	;# 
  1571  0498                     	;# 
  1572  0499                     	;# 
  1573  049A                     	;# 
  1574  049B                     	;# 
  1575  049B                     	;# 
  1576  049C                     	;# 
  1577  049E                     	;# 
  1578  049F                     	;# 
  1579  0611                     	;# 
  1580  0612                     	;# 
  1581  0613                     	;# 
  1582  0613                     	;# 
  1583  0614                     	;# 
  1584  0615                     	;# 
  1585  0616                     	;# 
  1586  0616                     	;# 
  1587  0617                     	;# 
  1588  0618                     	;# 
  1589  0619                     	;# 
  1590  0619                     	;# 
  1591  061A                     	;# 
  1592  061B                     	;# 
  1593  061C                     	;# 
  1594  061C                     	;# 
  1595  0691                     	;# 
  1596  0692                     	;# 
  1597  0693                     	;# 
  1598  0694                     	;# 
  1599  0695                     	;# 
  1600  0F0F                     	;# 
  1601  0F10                     	;# 
  1602  0F11                     	;# 
  1603  0F12                     	;# 
  1604  0F13                     	;# 
  1605  0F14                     	;# 
  1606  0F15                     	;# 
  1607  0F16                     	;# 
  1608  0F17                     	;# 
  1609  0F18                     	;# 
  1610  0F19                     	;# 
  1611  0F1A                     	;# 
  1612  0F1B                     	;# 
  1613  0F1C                     	;# 
  1614  0F1D                     	;# 
  1615  0F1E                     	;# 
  1616  0F1F                     	;# 
  1617  0F20                     	;# 
  1618  0F21                     	;# 
  1619  0F22                     	;# 
  1620  0F23                     	;# 
  1621  0F24                     	;# 
  1622  0F25                     	;# 
  1623  0F26                     	;# 
  1624  0F27                     	;# 
  1625  0F28                     	;# 
  1626  0F29                     	;# 
  1627  0F2A                     	;# 
  1628  0F2B                     	;# 
  1629  0F2C                     	;# 
  1630  0F2D                     	;# 
  1631  0F2E                     	;# 
  1632  0F2F                     	;# 
  1633  0F8C                     	;# 
  1634  0F8D                     	;# 
  1635  0F91                     	;# 
  1636  0F95                     	;# 
  1637  0F96                     	;# 
  1638  0F97                     	;# 
  1639  0F9C                     	;# 
  1640  0F9D                     	;# 
  1641  0F9E                     	;# 
  1642  0FE3                     	;# 
  1643  0FE4                     	;# 
  1644  0FE5                     	;# 
  1645  0FE6                     	;# 
  1646  0FE7                     	;# 
  1647  0FE8                     	;# 
  1648  0FE9                     	;# 
  1649  0FEA                     	;# 
  1650  0FEB                     	;# 
  1651  0FED                     	;# 
  1652  0FEE                     	;# 
  1653  0FEF                     	;# 
  1654  0000                     	;# 
  1655  0001                     	;# 
  1656  0002                     	;# 
  1657  0003                     	;# 
  1658  0004                     	;# 
  1659  0005                     	;# 
  1660  0006                     	;# 
  1661  0007                     	;# 
  1662  0008                     	;# 
  1663  0009                     	;# 
  1664  000A                     	;# 
  1665  000B                     	;# 
  1666  000C                     	;# 
  1667  000D                     	;# 
  1668  000E                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0013                     	;# 
  1672  0015                     	;# 
  1673  0016                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  0019                     	;# 
  1678  001A                     	;# 
  1679  001B                     	;# 
  1680  001C                     	;# 
  1681  008C                     	;# 
  1682  008D                     	;# 
  1683  008E                     	;# 
  1684  0091                     	;# 
  1685  0092                     	;# 
  1686  0093                     	;# 
  1687  0095                     	;# 
  1688  0096                     	;# 
  1689  0097                     	;# 
  1690  0099                     	;# 
  1691  009A                     	;# 
  1692  009B                     	;# 
  1693  009B                     	;# 
  1694  009C                     	;# 
  1695  009D                     	;# 
  1696  009E                     	;# 
  1697  009F                     	;# 
  1698  010C                     	;# 
  1699  010D                     	;# 
  1700  010E                     	;# 
  1701  0111                     	;# 
  1702  0112                     	;# 
  1703  0113                     	;# 
  1704  0114                     	;# 
  1705  0115                     	;# 
  1706  0116                     	;# 
  1707  0117                     	;# 
  1708  0118                     	;# 
  1709  0119                     	;# 
  1710  011D                     	;# 
  1711  018C                     	;# 
  1712  018D                     	;# 
  1713  018E                     	;# 
  1714  0191                     	;# 
  1715  0191                     	;# 
  1716  0192                     	;# 
  1717  0193                     	;# 
  1718  0193                     	;# 
  1719  0194                     	;# 
  1720  0195                     	;# 
  1721  0196                     	;# 
  1722  0199                     	;# 
  1723  019A                     	;# 
  1724  019B                     	;# 
  1725  019C                     	;# 
  1726  019D                     	;# 
  1727  019E                     	;# 
  1728  019F                     	;# 
  1729  020C                     	;# 
  1730  020D                     	;# 
  1731  0211                     	;# 
  1732  0211                     	;# 
  1733  0212                     	;# 
  1734  0212                     	;# 
  1735  0213                     	;# 
  1736  0213                     	;# 
  1737  0214                     	;# 
  1738  0214                     	;# 
  1739  0215                     	;# 
  1740  0215                     	;# 
  1741  0215                     	;# 
  1742  0216                     	;# 
  1743  0216                     	;# 
  1744  0217                     	;# 
  1745  0217                     	;# 
  1746  0391                     	;# 
  1747  0392                     	;# 
  1748  0393                     	;# 
  1749  0394                     	;# 
  1750  0395                     	;# 
  1751  0396                     	;# 
  1752  0498                     	;# 
  1753  0498                     	;# 
  1754  0499                     	;# 
  1755  049A                     	;# 
  1756  049B                     	;# 
  1757  049B                     	;# 
  1758  049C                     	;# 
  1759  049E                     	;# 
  1760  049F                     	;# 
  1761  0611                     	;# 
  1762  0612                     	;# 
  1763  0613                     	;# 
  1764  0613                     	;# 
  1765  0614                     	;# 
  1766  0615                     	;# 
  1767  0616                     	;# 
  1768  0616                     	;# 
  1769  0617                     	;# 
  1770  0618                     	;# 
  1771  0619                     	;# 
  1772  0619                     	;# 
  1773  061A                     	;# 
  1774  061B                     	;# 
  1775  061C                     	;# 
  1776  061C                     	;# 
  1777  0691                     	;# 
  1778  0692                     	;# 
  1779  0693                     	;# 
  1780  0694                     	;# 
  1781  0695                     	;# 
  1782  0F0F                     	;# 
  1783  0F10                     	;# 
  1784  0F11                     	;# 
  1785  0F12                     	;# 
  1786  0F13                     	;# 
  1787  0F14                     	;# 
  1788  0F15                     	;# 
  1789  0F16                     	;# 
  1790  0F17                     	;# 
  1791  0F18                     	;# 
  1792  0F19                     	;# 
  1793  0F1A                     	;# 
  1794  0F1B                     	;# 
  1795  0F1C                     	;# 
  1796  0F1D                     	;# 
  1797  0F1E                     	;# 
  1798  0F1F                     	;# 
  1799  0F20                     	;# 
  1800  0F21                     	;# 
  1801  0F22                     	;# 
  1802  0F23                     	;# 
  1803  0F24                     	;# 
  1804  0F25                     	;# 
  1805  0F26                     	;# 
  1806  0F27                     	;# 
  1807  0F28                     	;# 
  1808  0F29                     	;# 
  1809  0F2A                     	;# 
  1810  0F2B                     	;# 
  1811  0F2C                     	;# 
  1812  0F2D                     	;# 
  1813  0F2E                     	;# 
  1814  0F2F                     	;# 
  1815  0F8C                     	;# 
  1816  0F8D                     	;# 
  1817  0F91                     	;# 
  1818  0F95                     	;# 
  1819  0F96                     	;# 
  1820  0F97                     	;# 
  1821  0F9C                     	;# 
  1822  0F9D                     	;# 
  1823  0F9E                     	;# 
  1824  0FE3                     	;# 
  1825  0FE4                     	;# 
  1826  0FE5                     	;# 
  1827  0FE6                     	;# 
  1828  0FE7                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEB                     	;# 
  1833  0FED                     	;# 
  1834  0FEE                     	;# 
  1835  0FEF                     	;# 
  1836  0000                     	;# 
  1837  0001                     	;# 
  1838  0002                     	;# 
  1839  0003                     	;# 
  1840  0004                     	;# 
  1841  0005                     	;# 
  1842  0006                     	;# 
  1843  0007                     	;# 
  1844  0008                     	;# 
  1845  0009                     	;# 
  1846  000A                     	;# 
  1847  000B                     	;# 
  1848  000C                     	;# 
  1849  000D                     	;# 
  1850  000E                     	;# 
  1851  0011                     	;# 
  1852  0012                     	;# 
  1853  0013                     	;# 
  1854  0015                     	;# 
  1855  0016                     	;# 
  1856  0016                     	;# 
  1857  0017                     	;# 
  1858  0018                     	;# 
  1859  0019                     	;# 
  1860  001A                     	;# 
  1861  001B                     	;# 
  1862  001C                     	;# 
  1863  008C                     	;# 
  1864  008D                     	;# 
  1865  008E                     	;# 
  1866  0091                     	;# 
  1867  0092                     	;# 
  1868  0093                     	;# 
  1869  0095                     	;# 
  1870  0096                     	;# 
  1871  0097                     	;# 
  1872  0099                     	;# 
  1873  009A                     	;# 
  1874  009B                     	;# 
  1875  009B                     	;# 
  1876  009C                     	;# 
  1877  009D                     	;# 
  1878  009E                     	;# 
  1879  009F                     	;# 
  1880  010C                     	;# 
  1881  010D                     	;# 
  1882  010E                     	;# 
  1883  0111                     	;# 
  1884  0112                     	;# 
  1885  0113                     	;# 
  1886  0114                     	;# 
  1887  0115                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  0118                     	;# 
  1891  0119                     	;# 
  1892  011D                     	;# 
  1893  018C                     	;# 
  1894  018D                     	;# 
  1895  018E                     	;# 
  1896  0191                     	;# 
  1897  0191                     	;# 
  1898  0192                     	;# 
  1899  0193                     	;# 
  1900  0193                     	;# 
  1901  0194                     	;# 
  1902  0195                     	;# 
  1903  0196                     	;# 
  1904  0199                     	;# 
  1905  019A                     	;# 
  1906  019B                     	;# 
  1907  019C                     	;# 
  1908  019D                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  020C                     	;# 
  1912  020D                     	;# 
  1913  0211                     	;# 
  1914  0211                     	;# 
  1915  0212                     	;# 
  1916  0212                     	;# 
  1917  0213                     	;# 
  1918  0213                     	;# 
  1919  0214                     	;# 
  1920  0214                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0216                     	;# 
  1925  0216                     	;# 
  1926  0217                     	;# 
  1927  0217                     	;# 
  1928  0391                     	;# 
  1929  0392                     	;# 
  1930  0393                     	;# 
  1931  0394                     	;# 
  1932  0395                     	;# 
  1933  0396                     	;# 
  1934  0498                     	;# 
  1935  0498                     	;# 
  1936  0499                     	;# 
  1937  049A                     	;# 
  1938  049B                     	;# 
  1939  049B                     	;# 
  1940  049C                     	;# 
  1941  049E                     	;# 
  1942  049F                     	;# 
  1943  0611                     	;# 
  1944  0612                     	;# 
  1945  0613                     	;# 
  1946  0613                     	;# 
  1947  0614                     	;# 
  1948  0615                     	;# 
  1949  0616                     	;# 
  1950  0616                     	;# 
  1951  0617                     	;# 
  1952  0618                     	;# 
  1953  0619                     	;# 
  1954  0619                     	;# 
  1955  061A                     	;# 
  1956  061B                     	;# 
  1957  061C                     	;# 
  1958  061C                     	;# 
  1959  0691                     	;# 
  1960  0692                     	;# 
  1961  0693                     	;# 
  1962  0694                     	;# 
  1963  0695                     	;# 
  1964  0F0F                     	;# 
  1965  0F10                     	;# 
  1966  0F11                     	;# 
  1967  0F12                     	;# 
  1968  0F13                     	;# 
  1969  0F14                     	;# 
  1970  0F15                     	;# 
  1971  0F16                     	;# 
  1972  0F17                     	;# 
  1973  0F18                     	;# 
  1974  0F19                     	;# 
  1975  0F1A                     	;# 
  1976  0F1B                     	;# 
  1977  0F1C                     	;# 
  1978  0F1D                     	;# 
  1979  0F1E                     	;# 
  1980  0F1F                     	;# 
  1981  0F20                     	;# 
  1982  0F21                     	;# 
  1983  0F22                     	;# 
  1984  0F23                     	;# 
  1985  0F24                     	;# 
  1986  0F25                     	;# 
  1987  0F26                     	;# 
  1988  0F27                     	;# 
  1989  0F28                     	;# 
  1990  0F29                     	;# 
  1991  0F2A                     	;# 
  1992  0F2B                     	;# 
  1993  0F2C                     	;# 
  1994  0F2D                     	;# 
  1995  0F2E                     	;# 
  1996  0F2F                     	;# 
  1997  0F8C                     	;# 
  1998  0F8D                     	;# 
  1999  0F91                     	;# 
  2000  0F95                     	;# 
  2001  0F96                     	;# 
  2002  0F97                     	;# 
  2003  0F9C                     	;# 
  2004  0F9D                     	;# 
  2005  0F9E                     	;# 
  2006  0FE3                     	;# 
  2007  0FE4                     	;# 
  2008  0FE5                     	;# 
  2009  0FE6                     	;# 
  2010  0FE7                     	;# 
  2011  0FE8                     	;# 
  2012  0FE9                     	;# 
  2013  0FEA                     	;# 
  2014  0FEB                     	;# 
  2015  0FED                     	;# 
  2016  0FEE                     	;# 
  2017  0FEF                     	;# 
  2018  0000                     	;# 
  2019  0001                     	;# 
  2020  0002                     	;# 
  2021  0003                     	;# 
  2022  0004                     	;# 
  2023  0005                     	;# 
  2024  0006                     	;# 
  2025  0007                     	;# 
  2026  0008                     	;# 
  2027  0009                     	;# 
  2028  000A                     	;# 
  2029  000B                     	;# 
  2030  000C                     	;# 
  2031  000D                     	;# 
  2032  000E                     	;# 
  2033  0011                     	;# 
  2034  0012                     	;# 
  2035  0013                     	;# 
  2036  0015                     	;# 
  2037  0016                     	;# 
  2038  0016                     	;# 
  2039  0017                     	;# 
  2040  0018                     	;# 
  2041  0019                     	;# 
  2042  001A                     	;# 
  2043  001B                     	;# 
  2044  001C                     	;# 
  2045  008C                     	;# 
  2046  008D                     	;# 
  2047  008E                     	;# 
  2048  0091                     	;# 
  2049  0092                     	;# 
  2050  0093                     	;# 
  2051  0095                     	;# 
  2052  0096                     	;# 
  2053  0097                     	;# 
  2054  0099                     	;# 
  2055  009A                     	;# 
  2056  009B                     	;# 
  2057  009B                     	;# 
  2058  009C                     	;# 
  2059  009D                     	;# 
  2060  009E                     	;# 
  2061  009F                     	;# 
  2062  010C                     	;# 
  2063  010D                     	;# 
  2064  010E                     	;# 
  2065  0111                     	;# 
  2066  0112                     	;# 
  2067  0113                     	;# 
  2068  0114                     	;# 
  2069  0115                     	;# 
  2070  0116                     	;# 
  2071  0117                     	;# 
  2072  0118                     	;# 
  2073  0119                     	;# 
  2074  011D                     	;# 
  2075  018C                     	;# 
  2076  018D                     	;# 
  2077  018E                     	;# 
  2078  0191                     	;# 
  2079  0191                     	;# 
  2080  0192                     	;# 
  2081  0193                     	;# 
  2082  0193                     	;# 
  2083  0194                     	;# 
  2084  0195                     	;# 
  2085  0196                     	;# 
  2086  0199                     	;# 
  2087  019A                     	;# 
  2088  019B                     	;# 
  2089  019C                     	;# 
  2090  019D                     	;# 
  2091  019E                     	;# 
  2092  019F                     	;# 
  2093  020C                     	;# 
  2094  020D                     	;# 
  2095  0211                     	;# 
  2096  0211                     	;# 
  2097  0212                     	;# 
  2098  0212                     	;# 
  2099  0213                     	;# 
  2100  0213                     	;# 
  2101  0214                     	;# 
  2102  0214                     	;# 
  2103  0215                     	;# 
  2104  0215                     	;# 
  2105  0215                     	;# 
  2106  0216                     	;# 
  2107  0216                     	;# 
  2108  0217                     	;# 
  2109  0217                     	;# 
  2110  0391                     	;# 
  2111  0392                     	;# 
  2112  0393                     	;# 
  2113  0394                     	;# 
  2114  0395                     	;# 
  2115  0396                     	;# 
  2116  0498                     	;# 
  2117  0498                     	;# 
  2118  0499                     	;# 
  2119  049A                     	;# 
  2120  049B                     	;# 
  2121  049B                     	;# 
  2122  049C                     	;# 
  2123  049E                     	;# 
  2124  049F                     	;# 
  2125  0611                     	;# 
  2126  0612                     	;# 
  2127  0613                     	;# 
  2128  0613                     	;# 
  2129  0614                     	;# 
  2130  0615                     	;# 
  2131  0616                     	;# 
  2132  0616                     	;# 
  2133  0617                     	;# 
  2134  0618                     	;# 
  2135  0619                     	;# 
  2136  0619                     	;# 
  2137  061A                     	;# 
  2138  061B                     	;# 
  2139  061C                     	;# 
  2140  061C                     	;# 
  2141  0691                     	;# 
  2142  0692                     	;# 
  2143  0693                     	;# 
  2144  0694                     	;# 
  2145  0695                     	;# 
  2146  0F0F                     	;# 
  2147  0F10                     	;# 
  2148  0F11                     	;# 
  2149  0F12                     	;# 
  2150  0F13                     	;# 
  2151  0F14                     	;# 
  2152  0F15                     	;# 
  2153  0F16                     	;# 
  2154  0F17                     	;# 
  2155  0F18                     	;# 
  2156  0F19                     	;# 
  2157  0F1A                     	;# 
  2158  0F1B                     	;# 
  2159  0F1C                     	;# 
  2160  0F1D                     	;# 
  2161  0F1E                     	;# 
  2162  0F1F                     	;# 
  2163  0F20                     	;# 
  2164  0F21                     	;# 
  2165  0F22                     	;# 
  2166  0F23                     	;# 
  2167  0F24                     	;# 
  2168  0F25                     	;# 
  2169  0F26                     	;# 
  2170  0F27                     	;# 
  2171  0F28                     	;# 
  2172  0F29                     	;# 
  2173  0F2A                     	;# 
  2174  0F2B                     	;# 
  2175  0F2C                     	;# 
  2176  0F2D                     	;# 
  2177  0F2E                     	;# 
  2178  0F2F                     	;# 
  2179  0F8C                     	;# 
  2180  0F8D                     	;# 
  2181  0F91                     	;# 
  2182  0F95                     	;# 
  2183  0F96                     	;# 
  2184  0F97                     	;# 
  2185  0F9C                     	;# 
  2186  0F9D                     	;# 
  2187  0F9E                     	;# 
  2188  0FE3                     	;# 
  2189  0FE4                     	;# 
  2190  0FE5                     	;# 
  2191  0FE6                     	;# 
  2192  0FE7                     	;# 
  2193  0FE8                     	;# 
  2194  0FE9                     	;# 
  2195  0FEA                     	;# 
  2196  0FEB                     	;# 
  2197  0FED                     	;# 
  2198  0FEE                     	;# 
  2199  0FEF                     	;# 
  2200                           
  2201                           	psect	strings
  2202  05BF                     __pstrings:	
  2203  05BF                     __stringtab:	
  2204  05BF  3400               	retlw	0
  2205  05C0                     __end_of__stringtab:	
  2206  05C0                     _mrfRegset_InitCnt:	
  2207  05C0  3410               	retlw	16
  2208  05C1                     __end_of_mrfRegset_InitCnt:	
  2209  05C1                     _mrfRegset_RxCnt:	
  2210  05C1  3406               	retlw	6
  2211  05C2                     __end_of_mrfRegset_RxCnt:	
  2212  05C2                     _mrfRegset_TxCnt:	
  2213  05C2  3404               	retlw	4
  2214  05C3                     __end_of_mrfRegset_TxCnt:	
  2215  05C3                     _mrfRegset_Init:	
  2216  05C3  34CA               	retlw	202
  2217  05C4  3471               	retlw	113
  2218  05C5  34CA               	retlw	202
  2219  05C6  3473               	retlw	115
  2220  05C7  3480               	retlw	128
  2221  05C8  3428               	retlw	40
  2222  05C9  34C4               	retlw	196
  2223  05CA  34E7               	retlw	231
  2224  05CB  34A8               	retlw	168
  2225  05CC  3460               	retlw	96
  2226  05CD  34C6               	retlw	198
  2227  05CE  3405               	retlw	5
  2228  05CF  3482               	retlw	130
  2229  05D0  3400               	retlw	0
  2230  05D1  3490               	retlw	144
  2231  05D2  3462               	retlw	98
  2232  05D3  3498               	retlw	152
  2233  05D4  3490               	retlw	144
  2234  05D5  34C2               	retlw	194
  2235  05D6  34AC               	retlw	172
  2236  05D7  3482               	retlw	130
  2237  05D8  3420               	retlw	32
  2238  05D9  3455               	retlw	85
  2239  05DA  3400               	retlw	0
  2240  05DB  3482               	retlw	130
  2241  05DC  3480               	retlw	128
  2242  05DD  3480               	retlw	128
  2243  05DE  3468               	retlw	104
  2244  05DF  34CA               	retlw	202
  2245  05E0  3471               	retlw	113
  2246  05E1  34CA               	retlw	202
  2247  05E2  3473               	retlw	115
  2248  05E3                     __end_of_mrfRegset_Init:	
  2249  05E3                     _mrfRegset_Rx:	
  2250  05E3  3482               	retlw	130
  2251  05E4  3400               	retlw	0
  2252  05E5  34CA               	retlw	202
  2253  05E6  3471               	retlw	113
  2254  05E7  3480               	retlw	128
  2255  05E8  3428               	retlw	40
  2256  05E9  3482               	retlw	130
  2257  05EA  3480               	retlw	128
  2258  05EB  3480               	retlw	128
  2259  05EC  3468               	retlw	104
  2260  05ED  34CA               	retlw	202
  2261  05EE  3473               	retlw	115
  2262  05EF                     __end_of_mrfRegset_Rx:	
  2263  05EF                     _mrfRegset_Tx:	
  2264  05EF  3482               	retlw	130
  2265  05F0  3400               	retlw	0
  2266  05F1  34CA               	retlw	202
  2267  05F2  3471               	retlw	113
  2268  05F3  3480               	retlw	128
  2269  05F4  34A8               	retlw	168
  2270  05F5  3482               	retlw	130
  2271  05F6  3420               	retlw	32
  2272  05F7                     __end_of_mrfRegset_Tx:	
  2273  000B                     _INTCONbits	set	11
  2274  000C                     _PORTAbits	set	12
  2275  000E                     _PORTCbits	set	14
  2276  009D                     _ADCON0	set	157
  2277  009E                     _ADCON1	set	158
  2278  009F                     _ADCON2	set	159
  2279  0095                     _OPTION_REGbits	set	149
  2280  0099                     _OSCCON	set	153
  2281  008C                     _TRISA	set	140
  2282  008C                     _TRISAbits	set	140
  2283  008D                     _TRISB	set	141
  2284  008D                     _TRISBbits	set	141
  2285  008E                     _TRISC	set	142
  2286  008E                     _TRISCbits	set	142
  2287  0117                     _FVRCON	set	279
  2288  010C                     _LATAbits	set	268
  2289  010D                     _LATBbits	set	269
  2290  010E                     _LATCbits	set	270
  2291  018C                     _ANSELA	set	396
  2292  018D                     _ANSELB	set	397
  2293  018E                     _ANSELC	set	398
  2294  020C                     _WPUAbits	set	524
  2295                           
  2296                           ; #config settings
  2297  0000                     
  2298                           	psect	cinit
  2299  0016                     start_initialization:	
  2300  0016                     __initialization:	
  2301                           
  2302                           ; Clear objects allocated to BANK0
  2303  0016  01AE               	clrf	__pbssBANK0& (0+127)
  2304  0017  01AF               	clrf	(__pbssBANK0+1)& (0+127)
  2305                           
  2306                           ; Clear objects allocated to BANK1
  2307  0018  30A0               	movlw	low __pbssBANK1
  2308  0019  0084               	movwf	4
  2309  001A  3000               	movlw	high __pbssBANK1
  2310  001B  0085               	movwf	5
  2311  001C  304F               	movlw	79
  2312  001D  3186  2618  3180   	fcall	clear_ram0
  2313  0020                     end_of_initialization:	
  2314                           ;End of C runtime variable initialization code
  2315                           
  2316  0020                     __end_of__initialization:	
  2317  0020  0020               	movlb	0
  2318  0021  284D               	ljmp	_main	;jump to C main() function
  2319  0022                     __ptext9:	
  2320 ;; *************** function _Mrf49xaModeTx *****************
  2321 ;; Defined at:
  2322 ;;		line 81 in file "../../../src/devices/mrf49xa.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  k               1    3[BANK0 ] unsigned char 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;		None               void
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0, pclath, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 1F/0
  2333 ;;		On exit  : 1F/1
  2334 ;;		Unchanged: FFE00/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2336 ;;      Params:         0       0       0       0
  2337 ;;      Locals:         0       1       0       0
  2338 ;;      Temps:          0       0       0       0
  2339 ;;      Totals:         0       1       0       0
  2340 ;;Total ram usage:        1 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    7
  2343 ;; This function calls:
  2344 ;;		_Mrf49TxCmd
  2345 ;; This function is called by:
  2346 ;;		_Mrf49xaTick
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           
  2351                           ;psect for function _Mrf49xaModeTx
  2352  0022                     _Mrf49xaModeTx:	
  2353  0022  30C2               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2354                           
  2355                           ;mrf49xa.c: 82: UI08_t k;
  2356                           ;mrf49xa.c: 83: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  2357                           
  2358                           ;incstack = 0
  2359                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  2360  0023  01A3               	clrf	Mrf49xaModeTx@k
  2361  0024  3185               	movlp	high __stringtab
  2362  0025  000A               	callw
  2363  0026  3180               	pagesel	$	;select current page
  2364  0027  3800               	iorlw	0
  2365  0028  1903               	btfsc	3,2
  2366  0029  2847               	goto	l1895
  2367  002A                     l1887:	
  2368  002A  3523               	lslf	Mrf49xaModeTx@k,w
  2369  002B  3EEF               	addlw	low (_mrfRegset_Tx| (0+32768))
  2370  002C  3185               	movlp	high __stringtab
  2371  002D  000A               	callw
  2372  002E  3180               	pagesel	$	;select current page
  2373  002F  3A55               	xorlw	85
  2374  0030  1903               	skipnz
  2375  0031  283E               	goto	l1891
  2376  0032  3523               	lslf	Mrf49xaModeTx@k,w
  2377  0033  3EF0               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  2378  0034  3185               	movlp	high __stringtab
  2379  0035  000A               	callw
  2380  0036  3180               	pagesel	$	;select current page
  2381  0037  00A1               	movwf	?_Mrf49TxCmd
  2382  0038  3523               	lslf	Mrf49xaModeTx@k,w
  2383  0039  3EEF               	addlw	low (_mrfRegset_Tx| (0+32768))
  2384  003A  3185               	movlp	high __stringtab
  2385  003B  000A               	callw
  2386  003C  3180               	pagesel	$	;select current page
  2387  003D  2273               	fcall	_Mrf49TxCmd
  2388  003E                     l1891:	
  2389  003E  0020               	movlb	0	; select bank0
  2390  003F  30C2               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2391  0040  0AA3               	incf	Mrf49xaModeTx@k,f
  2392  0041  3185               	movlp	high __stringtab
  2393  0042  000A               	callw
  2394  0043  3180               	pagesel	$	;select current page
  2395  0044  0223               	subwf	Mrf49xaModeTx@k,w
  2396  0045  1C03               	skipc
  2397  0046  282A               	goto	l1887
  2398  0047                     l1895:	
  2399                           
  2400                           ;mrf49xa.c: 85: rfTrcvStatus.state = TX_PACKET;
  2401  0047  3002               	movlw	2
  2402  0048  0021               	movlb	1	; select bank1
  2403  0049  00A0               	movwf	_rfTrcvStatus^(0+128)
  2404                           
  2405                           ;mrf49xa.c: 86: rfTrcvStatus.hwByte = 99;
  2406  004A  3063               	movlw	99
  2407  004B  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  2408  004C  0008               	return
  2409  004D                     __end_of_Mrf49xaModeTx:	
  2410  004D                     __pmaintext:	
  2411 ;;
  2412 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2413 ;;
  2414 ;; *************** function _main *****************
  2415 ;; Defined at:
  2416 ;;		line 42 in file "../../../src/node/main.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;		None               void
  2423 ;; Registers used:
  2424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 17F/0
  2427 ;;		On exit  : 1F/1
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2430 ;;      Params:         0       0       0       0
  2431 ;;      Locals:         0       0       0       0
  2432 ;;      Temps:          0       0       0       0
  2433 ;;      Totals:         0       0       0       0
  2434 ;;Total ram usage:        0 bytes
  2435 ;; Hardware stack levels required when called:   10
  2436 ;; This function calls:
  2437 ;;		_AdcInit
  2438 ;;		_ExtIntInit
  2439 ;;		_Mrf49xaInit
  2440 ;;		_Mrf49xaTick
  2441 ;;		_SysInitGpio
  2442 ;; This function is called by:
  2443 ;;		Startup code after reset
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           
  2448                           ;psect for function _main
  2449  004D                     _main:	
  2450                           
  2451                           ;main.c: 43: TRISA = 0;
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in _main: [allreg]
  2455  004D  0021               	movlb	1	; select bank1
  2456  004E  018C               	clrf	12	;volatile
  2457                           
  2458                           ;main.c: 44: TRISB = 0;
  2459  004F  018D               	clrf	13	;volatile
  2460                           
  2461                           ;main.c: 45: TRISC = 0;
  2462  0050  018E               	clrf	14	;volatile
  2463                           
  2464                           ;main.c: 48: OSCCON = 0b01111000;
  2465  0051  3078               	movlw	120
  2466  0052  0099               	movwf	25	;volatile
  2467                           
  2468                           ;main.c: 49: WPUAbits.WPUA2 = 1;
  2469  0053  0024               	movlb	4	; select bank4
  2470  0054  150C               	bsf	12,2	;volatile
  2471                           
  2472                           ;main.c: 51: SysInitGpio();
  2473  0055  23AA  3180         	fcall	_SysInitGpio
  2474                           
  2475                           ;main.c: 52: AdcInit();
  2476  0057  2334  3180         	fcall	_AdcInit
  2477                           
  2478                           ;main.c: 53: ExtIntInit();
  2479  0059  2343  3180         	fcall	_ExtIntInit
  2480                           
  2481                           ;main.c: 55: Mrf49xaInit();
  2482  005B  2110  3180         	fcall	_Mrf49xaInit
  2483  005D                     l2191:	
  2484                           
  2485                           ;main.c: 58: {
  2486                           ;main.c: 59: Mrf49xaTick();
  2487  005D  2060  3180         	fcall	_Mrf49xaTick
  2488  005F  285D               	goto	l2191
  2489  0060                     __end_of_main:	
  2490  0060                     __ptext2:	
  2491 ;; *************** function _Mrf49xaTick *****************
  2492 ;; Defined at:
  2493 ;;		line 84 in file "../../../src/devices/mrf49xa_packet.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  timeout         1   12[BANK0 ] unsigned char 
  2498 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  2499 ;;		 -> NULL(0), rfTrcvStatus(79), 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;		None               void
  2502 ;; Registers used:
  2503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 1E/0
  2506 ;;		On exit  : 1F/1
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2509 ;;      Params:         0       0       0       0
  2510 ;;      Locals:         0       2       0       0
  2511 ;;      Temps:          0       2       0       0
  2512 ;;      Totals:         0       4       0       0
  2513 ;;Total ram usage:        4 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    8
  2516 ;; This function calls:
  2517 ;;		_Mrf49xaModeTx
  2518 ;;		_Mrf49RxSts
  2519 ;;		_Mrf49xaPacketPending
  2520 ;;		_Mrf49xaFreePacket
  2521 ;;		_Mrf49xaRxPacket
  2522 ;;		_HandlePacket
  2523 ;; This function is called by:
  2524 ;;		_main
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           
  2529                           ;psect for function _Mrf49xaTick
  2530  0060                     _Mrf49xaTick:	
  2531                           
  2532                           ;mrf49xa_packet.c: 85: if (Mrf49xaPacketPending())
  2533                           
  2534                           ;incstack = 0
  2535                           ; Regs used in _Mrf49xaTick: [allreg]
  2536  0060  2348  3180         	fcall	_Mrf49xaPacketPending
  2537  0062  3A00               	xorlw	0
  2538  0063  1903               	skipnz
  2539  0064  2881               	goto	l2095
  2540                           
  2541                           ;mrf49xa_packet.c: 86: {
  2542                           ;mrf49xa_packet.c: 87: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2543  0065  2352  3180         	fcall	_Mrf49xaRxPacket
  2544  0067  0020               	movlb	0	; select bank0
  2545  0068  00AD               	movwf	Mrf49xaTick@packet
  2546                           
  2547                           ;mrf49xa_packet.c: 94: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSta
      +                          tus.src)
  2548  0069  3E03               	addlw	3
  2549  006A  0086               	movwf	6
  2550  006B  0187               	clrf	7
  2551  006C  0801               	movf	1,w
  2552  006D  3AFF               	xorlw	255
  2553  006E  1903               	skipnz
  2554  006F  2878               	goto	l2091
  2555  0070  082D               	movf	Mrf49xaTick@packet,w
  2556  0071  3E03               	addlw	3
  2557  0072  0086               	movwf	6
  2558  0073  0801               	movf	1,w
  2559  0074  0021               	movlb	1	; select bank1
  2560  0075  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  2561  0076  1D03               	skipz
  2562  0077  287D               	goto	l2093
  2563  0078                     l2091:	
  2564                           
  2565                           ;mrf49xa_packet.c: 95: {
  2566                           ;mrf49xa_packet.c: 96: HandlePacket(packet);
  2567  0078  0020               	movlb	0	; select bank0
  2568  0079  082D               	movf	Mrf49xaTick@packet,w
  2569  007A  2365  3180         	fcall	_HandlePacket
  2570                           
  2571                           ;mrf49xa_packet.c: 97: }
  2572  007C  2881               	goto	l2095
  2573  007D                     l2093:	
  2574                           
  2575                           ;mrf49xa_packet.c: 98: else
  2576                           ;mrf49xa_packet.c: 99: {
  2577                           ;mrf49xa_packet.c: 100: Mrf49xaFreePacket(packet);
  2578  007D  0020               	movlb	0	; select bank0
  2579  007E  082D               	movf	Mrf49xaTick@packet,w
  2580  007F  2360  3180         	fcall	_Mrf49xaFreePacket
  2581  0081                     l2095:	
  2582                           
  2583                           ;mrf49xa_packet.c: 101: }
  2584                           ;mrf49xa_packet.c: 102: }
  2585                           ;mrf49xa_packet.c: 104: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  2586  0081  0021               	movlb	1	; select bank1
  2587  0082  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  2588  0083  3A02               	xorlw	2
  2589  0084  1D03               	skipz
  2590  0085  28C0               	goto	l2115
  2591                           
  2592                           ;mrf49xa_packet.c: 105: {
  2593                           ;mrf49xa_packet.c: 106: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  2594  0086  0838               	movf	(_rfTrcvStatus^(0+128)+24),w
  2595  0087  3A02               	xorlw	2
  2596  0088  1D03               	skipz
  2597  0089  288C               	goto	l2101
  2598  008A                     l2099:	
  2599                           
  2600                           ;mrf49xa_packet.c: 107: {
  2601                           ;mrf49xa_packet.c: 108: rfTrcvStatus.txPacket.state = PKT_FREE;
  2602  008A  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2603                           
  2604                           ;mrf49xa_packet.c: 109: }
  2605  008B  28C0               	goto	l2115
  2606  008C                     l2101:	
  2607                           
  2608                           ;mrf49xa_packet.c: 110: else if (rfTrcvStatus.txPacket.retry == 10)
  2609  008C  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2610  008D  390F               	andlw	15
  2611  008E  3A0A               	xorlw	10
  2612  008F  1D03               	skipz
  2613  0090  28A9               	goto	l2111
  2614                           
  2615                           ;mrf49xa_packet.c: 111: {
  2616                           ;mrf49xa_packet.c: 112: if (rfTrcvStatus.txPacket.retransmit == 3)
  2617  0091  0E39               	swapf	(_rfTrcvStatus^(0+128)+25),w
  2618  0092  3903               	andlw	3
  2619  0093  3A03               	xorlw	3
  2620  0094  1903               	btfsc	3,2
  2621  0095  288A               	goto	l2099
  2622                           
  2623                           ;mrf49xa_packet.c: 118: else
  2624                           ;mrf49xa_packet.c: 119: {
  2625                           ;mrf49xa_packet.c: 121: rfTrcvStatus.txPacket.retry = 0;
  2626  0096  30F0               	movlw	-16
  2627  0097  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  2628                           
  2629                           ;mrf49xa_packet.c: 122: rfTrcvStatus.txPacket.retransmit++;
  2630  0098  0E39               	swapf	(_rfTrcvStatus^(0+128)+25),w
  2631  0099  3903               	andlw	3
  2632  009A  0020               	movlb	0	; select bank0
  2633  009B  00AA               	movwf	??_Mrf49xaTick
  2634  009C  0AAA               	incf	??_Mrf49xaTick,f
  2635  009D  0EAA               	swapf	??_Mrf49xaTick,f
  2636  009E  0021               	movlb	1	; select bank1
  2637  009F  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2638  00A0  0020               	movlb	0	; select bank0
  2639  00A1  062A               	xorwf	??_Mrf49xaTick,w
  2640  00A2  39CF               	andlw	-49
  2641  00A3  062A               	xorwf	??_Mrf49xaTick,w
  2642  00A4  0021               	movlb	1	; select bank1
  2643  00A5  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2644                           
  2645                           ;mrf49xa_packet.c: 123: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  2646  00A6  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2647  00A7  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  2648  00A8  28C0               	goto	l2115
  2649  00A9                     l2111:	
  2650                           
  2651                           ;mrf49xa_packet.c: 126: else
  2652                           ;mrf49xa_packet.c: 127: {
  2653                           ;mrf49xa_packet.c: 128: rfTrcvStatus.txPacket.retry++;
  2654  00A9  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2655  00AA  390F               	andlw	15
  2656  00AB  0020               	movlb	0	; select bank0
  2657  00AC  00AA               	movwf	??_Mrf49xaTick
  2658  00AD  0AAA               	incf	??_Mrf49xaTick,f
  2659  00AE  0021               	movlb	1	; select bank1
  2660  00AF  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2661  00B0  0020               	movlb	0	; select bank0
  2662  00B1  062A               	xorwf	??_Mrf49xaTick,w
  2663  00B2  39F0               	andlw	-16
  2664  00B3  062A               	xorwf	??_Mrf49xaTick,w
  2665  00B4  0021               	movlb	1	; select bank1
  2666  00B5  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2667                           
  2668                           ;mrf49xa_packet.c: 129: _delay(40000);
  2669  00B6  3034               	movlw	52
  2670  00B7  0020               	movlb	0	; select bank0
  2671  00B8  00AB               	movwf	??_Mrf49xaTick+1
  2672  00B9  30F1               	movlw	241
  2673  00BA  00AA               	movwf	??_Mrf49xaTick
  2674  00BB                     u2177:	
  2675  00BB  0BAA               	decfsz	??_Mrf49xaTick,f
  2676  00BC  28BB               	goto	u2177
  2677  00BD  0BAB               	decfsz	??_Mrf49xaTick+1,f
  2678  00BE  28BB               	goto	u2177
  2679  00BF  28C0               	nop2
  2680  00C0                     l2115:	
  2681                           
  2682                           ;mrf49xa_packet.c: 130: }
  2683                           ;mrf49xa_packet.c: 131: }
  2684                           ;mrf49xa_packet.c: 133: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2685                           ;mrf49xa_packet.c: 134: rfTrcvStatus.state == RECV_IDLE)
  2686  00C0  0021               	movlb	1	; select bank1
  2687  00C1  0B21               	decfsz	(_rfTrcvStatus^(0+128)+1),w
  2688  00C2  0008               	return
  2689  00C3  08A0               	movf	_rfTrcvStatus^(0+128),f
  2690  00C4  1D03               	skipz
  2691  00C5  0008               	return
  2692                           
  2693                           ;mrf49xa_packet.c: 135: {
  2694                           ;mrf49xa_packet.c: 140: if (rfTrcvStatus.txPacket.retry >= 10)
  2695  00C6  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2696  00C7  390F               	andlw	15
  2697  00C8  0020               	movlb	0	; select bank0
  2698  00C9  00AA               	movwf	??_Mrf49xaTick
  2699  00CA  300A               	movlw	10
  2700  00CB  022A               	subwf	??_Mrf49xaTick,w
  2701  00CC  1C03               	skipc
  2702  00CD  28D4               	goto	l2127
  2703                           
  2704                           ;mrf49xa_packet.c: 141: {
  2705                           ;mrf49xa_packet.c: 143: rfTrcvStatus.txPacket.retry = 0;
  2706  00CE  30F0               	movlw	-16
  2707  00CF  0021               	movlb	1	; select bank1
  2708  00D0  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  2709                           
  2710                           ;mrf49xa_packet.c: 144: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  2711  00D1  3002               	movlw	2
  2712  00D2  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  2713  00D3  0008               	return
  2714  00D4                     l2127:	
  2715                           
  2716                           ;mrf49xa_packet.c: 146: }
  2717                           ;mrf49xa_packet.c: 150: uint8_t timeout = 0;
  2718  00D4  01AC               	clrf	Mrf49xaTick@timeout
  2719  00D5                     l2129:	
  2720                           
  2721                           ;mrf49xa_packet.c: 152: {
  2722                           ;mrf49xa_packet.c: 153: Mrf49RxSts();
  2723  00D5  22E1  3180         	fcall	_Mrf49RxSts
  2724                           
  2725                           ;mrf49xa_packet.c: 155: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  2726  00D7  0021               	movlb	1	; select bank1
  2727  00D8  08A0               	movf	_rfTrcvStatus^(0+128),f
  2728  00D9  1D03               	skipz
  2729  00DA  28DE               	goto	l2137
  2730  00DB  0020               	movlb	0	; select bank0
  2731  00DC  1C2E               	btfss	_mrf49Status,0
  2732  00DD  28FD               	goto	l351
  2733  00DE                     l2137:	
  2734                           
  2735                           ;mrf49xa_packet.c: 159: }
  2736                           ;mrf49xa_packet.c: 161: _delay(40000);
  2737  00DE  3034               	movlw	52
  2738  00DF  0020               	movlb	0	; select bank0
  2739  00E0  00AB               	movwf	??_Mrf49xaTick+1
  2740  00E1  30F1               	movlw	241
  2741  00E2  00AA               	movwf	??_Mrf49xaTick
  2742  00E3                     u2187:	
  2743  00E3  0BAA               	decfsz	??_Mrf49xaTick,f
  2744  00E4  28E3               	goto	u2187
  2745  00E5  0BAB               	decfsz	??_Mrf49xaTick+1,f
  2746  00E6  28E3               	goto	u2187
  2747  00E7  28E8               	nop2
  2748                           
  2749                           ;mrf49xa_packet.c: 162: timeout++;
  2750  00E8  0020               	movlb	0	; select bank0
  2751  00E9  300B               	movlw	11
  2752  00EA  0AAC               	incf	Mrf49xaTick@timeout,f
  2753                           
  2754                           ;mrf49xa_packet.c: 164: if (timeout > 10)
  2755  00EB  022C               	subwf	Mrf49xaTick@timeout,w
  2756  00EC  1C03               	skipc
  2757  00ED  28D5               	goto	l2129
  2758                           
  2759                           ;mrf49xa_packet.c: 165: {
  2760                           ;mrf49xa_packet.c: 166: rfTrcvStatus.txPacket.retry++;
  2761  00EE  0021               	movlb	1	; select bank1
  2762  00EF  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2763  00F0  390F               	andlw	15
  2764  00F1  0020               	movlb	0	; select bank0
  2765  00F2  00AA               	movwf	??_Mrf49xaTick
  2766  00F3  0AAA               	incf	??_Mrf49xaTick,f
  2767  00F4  0021               	movlb	1	; select bank1
  2768  00F5  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2769  00F6  0020               	movlb	0	; select bank0
  2770  00F7  062A               	xorwf	??_Mrf49xaTick,w
  2771  00F8  39F0               	andlw	-16
  2772  00F9  062A               	xorwf	??_Mrf49xaTick,w
  2773  00FA  0021               	movlb	1	; select bank1
  2774  00FB  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2775  00FC  0008               	return
  2776  00FD                     l351:	
  2777                           
  2778                           ;mrf49xa_packet.c: 175: INTCONbits.INTE = 0;;
  2779  00FD  120B               	bcf	11,4	;volatile
  2780                           
  2781                           ;mrf49xa_packet.c: 176: Mrf49xaModeTx();
  2782  00FE  2022               	fcall	_Mrf49xaModeTx
  2783                           
  2784                           ;mrf49xa_packet.c: 177: INTCONbits.INTE = 1;;
  2785  00FF  160B               	bsf	11,4	;volatile
  2786  0100  0008               	return
  2787  0101                     __end_of_Mrf49xaTick:	
  2788  0101                     __ptext14:	
  2789 ;; *************** function _Mrf49RxCmd *****************
  2790 ;; Defined at:
  2791 ;;		line 17 in file "../../../src/devices/mrf49xa_cmd.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  cmd             1    wreg     unsigned char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  cmd             1    1[BANK0 ] unsigned char 
  2796 ;;  val             1    2[BANK0 ] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      unsigned char 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, pclath, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 1E/1
  2803 ;;		On exit  : 1F/0
  2804 ;;		Unchanged: FFE00/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2806 ;;      Params:         0       0       0       0
  2807 ;;      Locals:         0       2       0       0
  2808 ;;      Temps:          0       0       0       0
  2809 ;;      Totals:         0       2       0       0
  2810 ;;Total ram usage:        2 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    6
  2813 ;; This function calls:
  2814 ;;		_Mrf49SpiTx
  2815 ;;		_Mrf49SpiRx
  2816 ;; This function is called by:
  2817 ;;		_Mrf49RxByte
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _Mrf49RxCmd
  2823  0101                     _Mrf49RxCmd:	
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2827                           ;Mrf49RxCmd@cmd stored from wreg
  2828  0101  0020               	movlb	0	; select bank0
  2829  0102  00A1               	movwf	Mrf49RxCmd@cmd
  2830                           
  2831                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  2832  0103  0022               	movlb	2	; select bank2
  2833  0104  130E               	bcf	14,6	;volatile
  2834                           
  2835                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  2836  0105  0020               	movlb	0	; select bank0
  2837  0106  0821               	movf	Mrf49RxCmd@cmd,w
  2838  0107  227F  3180         	fcall	_Mrf49SpiTx
  2839                           
  2840                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  2841  0109  22ED               	fcall	_Mrf49SpiRx
  2842  010A  00A2               	movwf	Mrf49RxCmd@val
  2843                           
  2844                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  2845  010B  0022               	movlb	2	; select bank2
  2846  010C  170E               	bsf	14,6	;volatile
  2847                           
  2848                           ;mrf49xa_cmd.c: 25: return val;
  2849  010D  0020               	movlb	0	; select bank0
  2850  010E  0822               	movf	Mrf49RxCmd@val,w
  2851  010F  0008               	return
  2852  0110                     __end_of_Mrf49RxCmd:	
  2853  0110                     __ptext10:	
  2854 ;; *************** function _Mrf49xaInit *****************
  2855 ;; Defined at:
  2856 ;;		line 115 in file "../../../src/devices/mrf49xa.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;  k               1    9[BANK0 ] unsigned char 
  2861 ;;  j               1    0        unsigned char 
  2862 ;;  i               1    0        unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;		None               void
  2865 ;; Registers used:
  2866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 17F/1
  2869 ;;		On exit  : 1F/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2872 ;;      Params:         0       0       0       0
  2873 ;;      Locals:         0       1       0       0
  2874 ;;      Temps:          0       3       0       0
  2875 ;;      Totals:         0       4       0       0
  2876 ;;Total ram usage:        4 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    9
  2879 ;; This function calls:
  2880 ;;		_Mrf49xaServe
  2881 ;;		_Mrf49xaModeRx
  2882 ;;		_Mrf49TxCmd
  2883 ;; This function is called by:
  2884 ;;		_main
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _Mrf49xaInit
  2890  0110                     _Mrf49xaInit:	
  2891                           
  2892                           ;mrf49xa.c: 116: UI08_t i, j, k;
  2893                           ;mrf49xa.c: 119: LATAbits.LATA4 = 0;
  2894                           
  2895                           ;incstack = 0
  2896                           ; Regs used in _Mrf49xaInit: [allreg]
  2897  0110  0022               	movlb	2	; select bank2
  2898  0111  120C               	bcf	12,4	;volatile
  2899                           
  2900                           ;mrf49xa.c: 120: LATCbits.LATC1 = 1;
  2901  0112  148E               	bsf	14,1	;volatile
  2902                           
  2903                           ;mrf49xa.c: 121: _delay(400000);
  2904  0113  3003               	movlw	3
  2905  0114  0020               	movlb	0	; select bank0
  2906  0115  00A8               	movwf	??_Mrf49xaInit+2
  2907  0116  3008               	movlw	8
  2908  0117  00A7               	movwf	??_Mrf49xaInit+1
  2909  0118  3078               	movlw	120
  2910  0119  00A6               	movwf	??_Mrf49xaInit
  2911  011A                     u2197:	
  2912  011A  0BA6               	decfsz	??_Mrf49xaInit,f
  2913  011B  291A               	goto	u2197
  2914  011C  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2915  011D  291A               	goto	u2197
  2916  011E  0BA8               	decfsz	??_Mrf49xaInit+2,f
  2917  011F  291A               	goto	u2197
  2918                           
  2919                           ;mrf49xa.c: 122: LATAbits.LATA4 = 1;
  2920  0120  0022               	movlb	2	; select bank2
  2921  0121  160C               	bsf	12,4	;volatile
  2922                           
  2923                           ;mrf49xa.c: 123: _delay(400000);
  2924  0122  3003               	movlw	3
  2925  0123  0020               	movlb	0	; select bank0
  2926  0124  00A8               	movwf	??_Mrf49xaInit+2
  2927  0125  3008               	movlw	8
  2928  0126  00A7               	movwf	??_Mrf49xaInit+1
  2929  0127  3078               	movlw	120
  2930  0128  00A6               	movwf	??_Mrf49xaInit
  2931  0129                     u2207:	
  2932  0129  0BA6               	decfsz	??_Mrf49xaInit,f
  2933  012A  2929               	goto	u2207
  2934  012B  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2935  012C  2929               	goto	u2207
  2936  012D  0BA8               	decfsz	??_Mrf49xaInit+2,f
  2937  012E  2929               	goto	u2207
  2938                           
  2939                           ;mrf49xa.c: 124: LATCbits.LATC4 = 1;
  2940  012F  0022               	movlb	2	; select bank2
  2941  0130  160E               	bsf	14,4	;volatile
  2942                           
  2943                           ;mrf49xa.c: 126: LATAbits.LATA5 = 1;
  2944  0131  168C               	bsf	12,5	;volatile
  2945                           
  2946                           ;mrf49xa.c: 129: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { _delay(40000); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val)
      +                          ; } };
  2947  0132  0020               	movlb	0	; select bank0
  2948  0133  30C0               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2949  0134  01A9               	clrf	Mrf49xaInit@k
  2950  0135  3185               	movlp	high __stringtab
  2951  0136  000A               	callw
  2952  0137  3180               	pagesel	$	;select current page
  2953  0138  3800               	iorlw	0
  2954  0139  1903               	btfsc	3,2
  2955  013A  2962               	goto	l1923
  2956  013B                     l1913:	
  2957  013B  3529               	lslf	Mrf49xaInit@k,w
  2958  013C  3EC3               	addlw	low (_mrfRegset_Init| (0+32768))
  2959  013D  3185               	movlp	high __stringtab
  2960  013E  000A               	callw
  2961  013F  3180               	pagesel	$	;select current page
  2962  0140  3A55               	xorlw	85
  2963  0141  1D03               	skipz
  2964  0142  294D               	goto	l1917
  2965  0143  3034               	movlw	52
  2966  0144  00A7               	movwf	??_Mrf49xaInit+1
  2967  0145  30F1               	movlw	241
  2968  0146  00A6               	movwf	??_Mrf49xaInit
  2969  0147                     u2217:	
  2970  0147  0BA6               	decfsz	??_Mrf49xaInit,f
  2971  0148  2947               	goto	u2217
  2972  0149  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2973  014A  2947               	goto	u2217
  2974  014B  294C               	nop2
  2975  014C  2959               	goto	l1919
  2976  014D                     l1917:	
  2977  014D  3529               	lslf	Mrf49xaInit@k,w
  2978  014E  3EC4               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  2979  014F  3185               	movlp	high __stringtab
  2980  0150  000A               	callw
  2981  0151  3180               	pagesel	$	;select current page
  2982  0152  00A1               	movwf	?_Mrf49TxCmd
  2983  0153  3529               	lslf	Mrf49xaInit@k,w
  2984  0154  3EC3               	addlw	low (_mrfRegset_Init| (0+32768))
  2985  0155  3185               	movlp	high __stringtab
  2986  0156  000A               	callw
  2987  0157  3180               	pagesel	$	;select current page
  2988  0158  2273               	fcall	_Mrf49TxCmd
  2989  0159                     l1919:	
  2990  0159  0020               	movlb	0	; select bank0
  2991  015A  30C0               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2992  015B  0AA9               	incf	Mrf49xaInit@k,f
  2993  015C  3185               	movlp	high __stringtab
  2994  015D  000A               	callw
  2995  015E  3180               	pagesel	$	;select current page
  2996  015F  0229               	subwf	Mrf49xaInit@k,w
  2997  0160  1C03               	skipc
  2998  0161  293B               	goto	l1913
  2999  0162                     l1923:	
  3000                           
  3001                           ;mrf49xa.c: 131: Mrf49xaModeRx();
  3002  0162  2247  3180         	fcall	_Mrf49xaModeRx
  3003  0164                     l1927:	
  3004                           ;mrf49xa.c: 138: while(PORTAbits.RA2 == 0)
  3005                           
  3006  0164  0020               	movlb	0	; select bank0
  3007  0165  190C               	btfsc	12,2	;volatile
  3008  0166  0008               	return
  3009                           
  3010                           ;mrf49xa.c: 139: Mrf49xaServe();
  3011  0167  216A  3180         	fcall	_Mrf49xaServe
  3012  0169  2964               	goto	l1927
  3013  016A                     __end_of_Mrf49xaInit:	
  3014  016A                     __ptext11:	
  3015 ;; *************** function _Mrf49xaServe *****************
  3016 ;; Defined at:
  3017 ;;		line 9 in file "../../../src/devices/mrf49xa_data.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  data            1    5[BANK0 ] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      unsigned char 
  3024 ;; Registers used:
  3025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 1E/0
  3028 ;;		On exit  : 1F/0
  3029 ;;		Unchanged: FFE00/0
  3030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3031 ;;      Params:         0       0       0       0
  3032 ;;      Locals:         0       1       0       0
  3033 ;;      Temps:          0       1       0       0
  3034 ;;      Totals:         0       2       0       0
  3035 ;;Total ram usage:        2 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    8
  3038 ;; This function calls:
  3039 ;;		_Mrf49xaModeRx
  3040 ;;		_Mrf49RxSts
  3041 ;;		_Mrf49RxByte
  3042 ;;		_Mrf49TxByte
  3043 ;; This function is called by:
  3044 ;;		_Mrf49xaInit
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           
  3049                           ;psect for function _Mrf49xaServe
  3050  016A                     _Mrf49xaServe:	
  3051                           
  3052                           ;mrf49xa_data.c: 10: uint8_t data;
  3053                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in _Mrf49xaServe: [allreg]
  3057  016A  22E1  3180         	fcall	_Mrf49RxSts
  3058                           
  3059                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  3060  016C  0020               	movlb	0	; select bank0
  3061  016D  082E               	movf	_mrf49Status,w
  3062  016E  3AFF               	xorlw	255
  3063  016F  1D03               	skipz
  3064  0170  2975               	goto	l373
  3065  0171  082F               	movf	_mrf49Status+1,w
  3066  0172  3AFF               	xorlw	255
  3067  0173  1903               	btfsc	3,2
  3068  0174  0008               	return
  3069  0175                     l373:	
  3070                           ;mrf49xa_data.c: 23: {
  3071                           
  3072                           
  3073                           ;mrf49xa_data.c: 25: }
  3074                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  3075  0175  1AAE               	btfsc	_mrf49Status,5
  3076  0176  2981               	goto	l1765
  3077  0177  298D               	goto	l374
  3078  0178                     l1759:	
  3079                           
  3080                           ;mrf49xa_data.c: 33: case RECV_DATA:
  3081                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  3082  0178  2271  3180         	fcall	_Mrf49RxByte
  3083  017A  00A5               	movwf	Mrf49xaServe@data
  3084                           
  3085                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  3086  017B  2271  3180         	fcall	_Mrf49RxByte
  3087  017D  00A5               	movwf	Mrf49xaServe@data
  3088                           
  3089                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  3090  017E  2247  3180         	fcall	_Mrf49xaModeRx
  3091                           
  3092                           ;mrf49xa_data.c: 44: break;
  3093  0180  298D               	goto	l374
  3094  0181                     l1765:	
  3095  0181  0021               	movlb	1	; select bank1
  3096  0182  0820               	movf	_rfTrcvStatus^(0+128),w
  3097                           
  3098                           ; Switch size 1, requested type "speed"
  3099                           ; Number of cases is 3, Range of values is 0 to 2
  3100                           ; switch strategies available:
  3101                           ; Name         Instructions Cycles
  3102                           ; simple_byte           10     6 (average)
  3103                           ; direct_byte           12     6 (fixed)
  3104                           ; jumptable            260     6 (fixed)
  3105                           ; rangetable             7     4 (fixed)
  3106                           ; spacedrange           11     6 (fixed)
  3107                           ; locatedrange           3     3 (fixed)
  3108                           ;	Chosen strategy is simple_byte
  3109  0183  3A00               	xorlw	0	; case 0
  3110  0184  1903               	skipnz
  3111  0185  2978               	goto	l1759
  3112  0186  3A01               	xorlw	1	; case 1
  3113  0187  1903               	skipnz
  3114  0188  2978               	goto	l1759
  3115  0189  3A03               	xorlw	3	; case 2
  3116  018A  1903               	skipnz
  3117  018B  298D               	goto	l374
  3118  018C  298D               	goto	l374
  3119  018D                     l374:	
  3120                           
  3121                           ;mrf49xa_data.c: 52: }
  3122                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  3123  018D  0020               	movlb	0	; select bank0
  3124  018E  1BAE               	btfsc	_mrf49Status,7
  3125  018F  2A31               	goto	l1853
  3126  0190  2A3D               	goto	l1855
  3127  0191                     l1769:	
  3128                           
  3129                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  3130  0191  2271  3180         	fcall	_Mrf49RxByte
  3131  0193  00A5               	movwf	Mrf49xaServe@data
  3132                           
  3133                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3134  0194  1BAF               	btfsc	_mrf49Status+1,7
  3135  0195  2999               	goto	l1775
  3136  0196                     l1773:	
  3137                           
  3138                           ;mrf49xa_data.c: 72: {
  3139                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  3140  0196  2247  3180         	fcall	_Mrf49xaModeRx
  3141                           
  3142                           ;mrf49xa_data.c: 74: break;
  3143  0198  2A3D               	goto	l1855
  3144  0199                     l1775:	
  3145                           
  3146                           ;mrf49xa_data.c: 75: }
  3147                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  3148  0199  0021               	movlb	1	; select bank1
  3149  019A  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3150  019B  1D03               	skipz
  3151  019C  299F               	goto	l1779
  3152  019D  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  3153  019E  29A3               	goto	L1
  3154  019F                     l1779:	
  3155                           
  3156                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3157  019F  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  3158  01A0  1D03               	skipz
  3159  01A1  2996               	goto	l1773
  3160  01A2  30D3               	movlw	(_rfTrcvStatus+51)& (0+255)
  3161  01A3                     L1:	
  3162  01A3  00EC               	movwf	(_rfTrcvStatus+76)^(0+128)
  3163                           
  3164                           ;mrf49xa_data.c: 85: }
  3165                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  3166  01A4  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  3167  01A5  0086               	movwf	6
  3168  01A6  0187               	clrf	7
  3169  01A7  0020               	movlb	0	; select bank0
  3170  01A8  0825               	movf	Mrf49xaServe@data,w
  3171  01A9  0081               	movwf	1
  3172                           
  3173                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  3174  01AA  0021               	movlb	1	; select bank1
  3175  01AB  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3176  01AC  3E16               	addlw	22
  3177  01AD  0086               	movwf	6
  3178  01AE  0181               	clrf	1
  3179                           
  3180                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3181  01AF  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3182  01B0  0086               	movwf	6
  3183  01B1  3003               	movlw	3
  3184  01B2  0081               	movwf	1
  3185                           
  3186                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  3187  01B3  01A0               	clrf	_rfTrcvStatus^(0+128)
  3188  01B4  0AA0               	incf	_rfTrcvStatus^(0+128),f
  3189                           
  3190                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  3191  01B5  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3192  01B6  29E6               	goto	L2
  3193  01B7                     l1795:	
  3194                           ;mrf49xa_data.c: 93: break;
  3195                           
  3196                           
  3197                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  3198  01B7  2271  3180         	fcall	_Mrf49RxByte
  3199  01B9  00A5               	movwf	Mrf49xaServe@data
  3200                           
  3201                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3202  01BA  1BAF               	btfsc	_mrf49Status+1,7
  3203  01BB  29C3               	goto	l1803
  3204                           
  3205                           ;mrf49xa_data.c: 102: {
  3206                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3207  01BC  0021               	movlb	1	; select bank1
  3208  01BD  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3209  01BE  0086               	movwf	6
  3210  01BF  3004               	movlw	4
  3211  01C0  0187               	clrf	7
  3212  01C1  0081               	movwf	1
  3213  01C2  2996               	goto	l1773
  3214  01C3                     l1803:	
  3215                           
  3216                           ;mrf49xa_data.c: 106: }
  3217                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3218  01C3  0021               	movlb	1	; select bank1
  3219  01C4  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  3220  01C5  0086               	movwf	6
  3221  01C6  0187               	clrf	7
  3222  01C7  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3223  01C8  0601               	xorwf	1,w
  3224  01C9  1D03               	skipz
  3225  01CA  29DC               	goto	l1813
  3226                           
  3227                           ;mrf49xa_data.c: 109: {
  3228                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  3229  01CB  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3230  01CC  3E16               	addlw	22
  3231  01CD  0086               	movwf	6
  3232  01CE  0020               	movlb	0	; select bank0
  3233  01CF  0825               	movf	Mrf49xaServe@data,w
  3234  01D0  0081               	movwf	1
  3235                           
  3236                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3237  01D1  0021               	movlb	1	; select bank1
  3238  01D2  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3239  01D3  0086               	movwf	6
  3240  01D4  3004               	movlw	4
  3241  01D5  0081               	movwf	1
  3242                           
  3243                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  3244  01D6  2247  3180         	fcall	_Mrf49xaModeRx
  3245                           
  3246                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  3247  01D8  0022               	movlb	2	; select bank2
  3248  01D9  150E               	bsf	14,2	;volatile
  3249                           
  3250                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  3251  01DA  110E               	bcf	14,2	;volatile
  3252                           
  3253                           ;mrf49xa_data.c: 123: }
  3254  01DB  2A3D               	goto	l1855
  3255  01DC                     l1813:	
  3256                           
  3257                           ;mrf49xa_data.c: 124: else
  3258                           ;mrf49xa_data.c: 125: {
  3259                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3260  01DC  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3261  01DD  076C               	addwf	(_rfTrcvStatus+76)^(0+128),w
  3262  01DE  0020               	movlb	0	; select bank0
  3263  01DF  00A4               	movwf	??_Mrf49xaServe
  3264  01E0  0A24               	incf	??_Mrf49xaServe,w
  3265  01E1  0086               	movwf	6
  3266  01E2  0187               	clrf	7
  3267  01E3  0825               	movf	Mrf49xaServe@data,w
  3268  01E4  0081               	movwf	1
  3269  01E5  0021               	movlb	1	; select bank1
  3270  01E6                     L2:	
  3271  01E6  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3272  01E7  2A3D               	goto	l1855
  3273  01E8                     l1817:	
  3274                           
  3275                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  3276  01E8  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3277                           
  3278                           ;mrf49xa_data.c: 134: switch (rfTrcvStatus.hwByte)
  3279  01E9  2A20               	goto	l1849
  3280  01EA                     l1819:	
  3281                           
  3282                           ;mrf49xa_data.c: 137: Mrf49TxByte(0x2D);
  3283  01EA  302D               	movlw	45
  3284  01EB  2242  3180         	fcall	_Mrf49TxByte
  3285                           
  3286                           ;mrf49xa_data.c: 138: break;
  3287  01ED  2A3D               	goto	l1855
  3288  01EE                     l1821:	
  3289                           
  3290                           ;mrf49xa_data.c: 141: Mrf49TxByte(0xD4);
  3291  01EE  30D4               	movlw	212
  3292  01EF  2242  3180         	fcall	_Mrf49TxByte
  3293                           
  3294                           ;mrf49xa_data.c: 142: rfTrcvStatus.hwByte = -1;
  3295  01F1  30FF               	movlw	255
  3296  01F2  0021               	movlb	1	; select bank1
  3297  01F3  2A08               	goto	L3
  3298  01F4                     l1825:	
  3299                           ;mrf49xa_data.c: 143: break;
  3300                           
  3301                           
  3302                           ;mrf49xa_data.c: 147: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3303  01F4  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3304  01F5  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3305  01F6  0086               	movwf	6
  3306  01F7  0187               	clrf	7
  3307  01F8  0801               	movf	1,w
  3308  01F9  2242  3180         	fcall	_Mrf49TxByte
  3309                           
  3310                           ;mrf49xa_data.c: 148: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStat
      +                          us.txPacket.raw[rfTrcvStatus.hwByte];
  3311  01FB  0021               	movlb	1	; select bank1
  3312  01FC  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3313  01FD  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3314  01FE  0086               	movwf	6
  3315  01FF  0187               	clrf	7
  3316  0200  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3317  0201  0601               	xorwf	1,w
  3318  0202  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  3319                           
  3320                           ;mrf49xa_data.c: 149: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3321  0203  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3322  0204  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  3323  0205  1D03               	skipz
  3324  0206  2A3D               	goto	l1855
  3325                           
  3326                           ;mrf49xa_data.c: 150: {
  3327                           ;mrf49xa_data.c: 151: rfTrcvStatus.hwByte = 48;
  3328  0207  3030               	movlw	48
  3329  0208                     L3:	
  3330  0208  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3331  0209  2A3D               	goto	l1855
  3332  020A                     l1833:	
  3333                           
  3334                           ;mrf49xa_data.c: 156: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3335  020A  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3336  020B  2242  3180         	fcall	_Mrf49TxByte
  3337                           
  3338                           ;mrf49xa_data.c: 157: break;
  3339  020D  2A3D               	goto	l1855
  3340  020E                     l1835:	
  3341                           
  3342                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  3343  020E  3000               	movlw	0
  3344  020F  2242  3180         	fcall	_Mrf49TxByte
  3345                           
  3346                           ;mrf49xa_data.c: 161: break;
  3347  0211  2A3D               	goto	l1855
  3348  0212                     l1837:	
  3349                           
  3350                           ;mrf49xa_data.c: 164: Mrf49TxByte(0x00);
  3351  0212  3000               	movlw	0
  3352  0213  2242  3180         	fcall	_Mrf49TxByte
  3353                           
  3354                           ;mrf49xa_data.c: 165: Mrf49xaModeRx();
  3355  0215  2247  3180         	fcall	_Mrf49xaModeRx
  3356                           
  3357                           ;mrf49xa_data.c: 167: rfTrcvStatus.txPacket.retry = 0;
  3358  0217  30F0               	movlw	-16
  3359  0218  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  3360                           
  3361                           ;mrf49xa_data.c: 169: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  3362  0219  0B38               	decfsz	(_rfTrcvStatus^(0+128)+24),w
  3363  021A  2A1E               	goto	l1845
  3364                           
  3365                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3366  021B  3002               	movlw	2
  3367  021C  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3368  021D  2A3D               	goto	l1855
  3369  021E                     l1845:	
  3370                           
  3371                           ;mrf49xa_data.c: 171: else
  3372                           ;mrf49xa_data.c: 172: rfTrcvStatus.txPacket.state = PKT_FREE;
  3373  021E  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  3374  021F  2A3D               	goto	l1855
  3375  0220                     l1849:	
  3376  0220  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3377                           
  3378                           ; Switch size 1, requested type "speed"
  3379                           ; Number of cases is 5, Range of values is 49 to 101
  3380                           ; switch strategies available:
  3381                           ; Name         Instructions Cycles
  3382                           ; simple_byte           16     9 (average)
  3383                           ; direct_byte          115     9 (fixed)
  3384                           ; jumptable            263     9 (fixed)
  3385                           ;	Chosen strategy is simple_byte
  3386  0221  3A31               	xorlw	49	; case 49
  3387  0222  1903               	skipnz
  3388  0223  2A0A               	goto	l1833
  3389  0224  3A03               	xorlw	3	; case 50
  3390  0225  1903               	skipnz
  3391  0226  2A0E               	goto	l1835
  3392  0227  3A01               	xorlw	1	; case 51
  3393  0228  1903               	skipnz
  3394  0229  2A12               	goto	l1837
  3395  022A  3A57               	xorlw	87	; case 100
  3396  022B  1903               	skipnz
  3397  022C  29EA               	goto	l1819
  3398  022D  3A01               	xorlw	1	; case 101
  3399  022E  1903               	skipnz
  3400  022F  29EE               	goto	l1821
  3401  0230  29F4               	goto	l1825
  3402  0231                     l1853:	
  3403  0231  0021               	movlb	1	; select bank1
  3404  0232  0820               	movf	_rfTrcvStatus^(0+128),w
  3405                           
  3406                           ; Switch size 1, requested type "speed"
  3407                           ; Number of cases is 3, Range of values is 0 to 2
  3408                           ; switch strategies available:
  3409                           ; Name         Instructions Cycles
  3410                           ; simple_byte           10     6 (average)
  3411                           ; direct_byte           12     6 (fixed)
  3412                           ; jumptable            260     6 (fixed)
  3413                           ; rangetable             7     4 (fixed)
  3414                           ; spacedrange           11     6 (fixed)
  3415                           ; locatedrange           3     3 (fixed)
  3416                           ;	Chosen strategy is simple_byte
  3417  0233  3A00               	xorlw	0	; case 0
  3418  0234  1903               	skipnz
  3419  0235  2991               	goto	l1769
  3420  0236  3A01               	xorlw	1	; case 1
  3421  0237  1903               	skipnz
  3422  0238  29B7               	goto	l1795
  3423  0239  3A03               	xorlw	3	; case 2
  3424  023A  1903               	skipnz
  3425  023B  29E8               	goto	l1817
  3426  023C  2A3D               	goto	l1855
  3427  023D                     l1855:	
  3428                           
  3429                           ;mrf49xa_data.c: 179: }
  3430                           ;mrf49xa_data.c: 193: return PORTAbits.RA2 == 1 ? 1 : 0;
  3431  023D  3000               	movlw	0
  3432  023E  0020               	movlb	0	; select bank0
  3433  023F  190C               	btfsc	12,2	;volatile
  3434  0240  3001               	movlw	1
  3435  0241  0008               	return
  3436  0242                     __end_of_Mrf49xaServe:	
  3437  0242                     __ptext12:	
  3438 ;; *************** function _Mrf49TxByte *****************
  3439 ;; Defined at:
  3440 ;;		line 47 in file "../../../src/devices/mrf49xa_cmd.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  byte            1    wreg     unsigned char 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  byte            1    3[BANK0 ] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;		None               void
  3447 ;; Registers used:
  3448 ;;		wreg, status,2, status,0, pclath, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 1E/1
  3451 ;;		On exit  : 1F/2
  3452 ;;		Unchanged: FFE00/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3454 ;;      Params:         0       0       0       0
  3455 ;;      Locals:         0       1       0       0
  3456 ;;      Temps:          0       0       0       0
  3457 ;;      Totals:         0       1       0       0
  3458 ;;Total ram usage:        1 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    7
  3461 ;; This function calls:
  3462 ;;		_Mrf49TxCmd
  3463 ;; This function is called by:
  3464 ;;		_Mrf49xaServe
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _Mrf49TxByte
  3470  0242                     _Mrf49TxByte:	
  3471                           
  3472                           ;incstack = 0
  3473                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  3474                           ;Mrf49TxByte@byte stored from wreg
  3475  0242  0020               	movlb	0	; select bank0
  3476  0243  00A3               	movwf	Mrf49TxByte@byte
  3477                           
  3478                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  3479  0244  00A1               	movwf	?_Mrf49TxCmd
  3480  0245  30B8               	movlw	184
  3481  0246  2A73               	ljmp	_Mrf49TxCmd
  3482  0247                     __end_of_Mrf49TxByte:	
  3483  0247                     __ptext17:	
  3484 ;; *************** function _Mrf49xaModeRx *****************
  3485 ;; Defined at:
  3486 ;;		line 72 in file "../../../src/devices/mrf49xa.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  k               1    3[BANK0 ] unsigned char 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;		None               void
  3493 ;; Registers used:
  3494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 1C/0
  3497 ;;		On exit  : 1F/1
  3498 ;;		Unchanged: FFE00/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3500 ;;      Params:         0       0       0       0
  3501 ;;      Locals:         0       1       0       0
  3502 ;;      Temps:          0       0       0       0
  3503 ;;      Totals:         0       1       0       0
  3504 ;;Total ram usage:        1 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    7
  3507 ;; This function calls:
  3508 ;;		_Mrf49TxCmd
  3509 ;; This function is called by:
  3510 ;;		_Mrf49xaInit
  3511 ;;		_Mrf49xaServe
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function _Mrf49xaModeRx
  3517  0247                     _Mrf49xaModeRx:	
  3518                           
  3519                           ;mrf49xa.c: 73: UI08_t k;
  3520                           ;mrf49xa.c: 74: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3521                           
  3522                           ;incstack = 0
  3523                           ; Regs used in _Mrf49xaModeRx: [allreg]
  3524  0247  0020               	movlb	0	; select bank0
  3525  0248  30C1               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3526  0249  01A3               	clrf	Mrf49xaModeRx@k
  3527  024A  3185               	movlp	high __stringtab
  3528  024B  000A               	callw
  3529  024C  3180               	pagesel	$	;select current page
  3530  024D  3800               	iorlw	0
  3531  024E  1903               	btfsc	3,2
  3532  024F  2A6D               	goto	l1873
  3533  0250                     l1865:	
  3534  0250  3523               	lslf	Mrf49xaModeRx@k,w
  3535  0251  3EE3               	addlw	low (_mrfRegset_Rx| (0+32768))
  3536  0252  3185               	movlp	high __stringtab
  3537  0253  000A               	callw
  3538  0254  3180               	pagesel	$	;select current page
  3539  0255  3A55               	xorlw	85
  3540  0256  1903               	skipnz
  3541  0257  2A64               	goto	l1869
  3542  0258  3523               	lslf	Mrf49xaModeRx@k,w
  3543  0259  3EE4               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3544  025A  3185               	movlp	high __stringtab
  3545  025B  000A               	callw
  3546  025C  3180               	pagesel	$	;select current page
  3547  025D  00A1               	movwf	?_Mrf49TxCmd
  3548  025E  3523               	lslf	Mrf49xaModeRx@k,w
  3549  025F  3EE3               	addlw	low (_mrfRegset_Rx| (0+32768))
  3550  0260  3185               	movlp	high __stringtab
  3551  0261  000A               	callw
  3552  0262  3180               	pagesel	$	;select current page
  3553  0263  2273               	fcall	_Mrf49TxCmd
  3554  0264                     l1869:	
  3555  0264  0020               	movlb	0	; select bank0
  3556  0265  30C1               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3557  0266  0AA3               	incf	Mrf49xaModeRx@k,f
  3558  0267  3185               	movlp	high __stringtab
  3559  0268  000A               	callw
  3560  0269  3180               	pagesel	$	;select current page
  3561  026A  0223               	subwf	Mrf49xaModeRx@k,w
  3562  026B  1C03               	skipc
  3563  026C  2A50               	goto	l1865
  3564  026D                     l1873:	
  3565                           
  3566                           ;mrf49xa.c: 76: rfTrcvStatus.state = RECV_IDLE;
  3567  026D  0021               	movlb	1	; select bank1
  3568  026E  01A0               	clrf	_rfTrcvStatus^(0+128)
  3569                           
  3570                           ;mrf49xa.c: 77: rfTrcvStatus.hwByte = 0;
  3571  026F  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3572  0270  0008               	return
  3573  0271                     __end_of_Mrf49xaModeRx:	
  3574  0271                     __ptext13:	
  3575 ;; *************** function _Mrf49RxByte *****************
  3576 ;; Defined at:
  3577 ;;		line 42 in file "../../../src/devices/mrf49xa_cmd.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      unsigned char 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0, pclath, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 1E/1
  3588 ;;		On exit  : 1F/0
  3589 ;;		Unchanged: FFE00/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3591 ;;      Params:         0       0       0       0
  3592 ;;      Locals:         0       0       0       0
  3593 ;;      Temps:          0       0       0       0
  3594 ;;      Totals:         0       0       0       0
  3595 ;;Total ram usage:        0 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    7
  3598 ;; This function calls:
  3599 ;;		_Mrf49RxCmd
  3600 ;; This function is called by:
  3601 ;;		_Mrf49xaServe
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           
  3606                           ;psect for function _Mrf49RxByte
  3607  0271                     _Mrf49RxByte:	
  3608                           
  3609                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  3610                           
  3611                           ;incstack = 0
  3612                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3613  0271  30B0               	movlw	176
  3614  0272  2901               	ljmp	_Mrf49RxCmd
  3615  0273                     __end_of_Mrf49RxByte:	
  3616  0273                     __ptext18:	
  3617 ;; *************** function _Mrf49TxCmd *****************
  3618 ;; Defined at:
  3619 ;;		line 7 in file "../../../src/devices/mrf49xa_cmd.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  cmd             1    wreg     unsigned char 
  3622 ;;  val             1    1[BANK0 ] unsigned char 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  cmd             1    2[BANK0 ] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;		None               void
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0, pclath, cstack
  3629 ;; Tracked objects:
  3630 ;;		On entry : 1F/0
  3631 ;;		On exit  : 1F/2
  3632 ;;		Unchanged: FFE00/0
  3633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3634 ;;      Params:         0       1       0       0
  3635 ;;      Locals:         0       1       0       0
  3636 ;;      Temps:          0       0       0       0
  3637 ;;      Totals:         0       2       0       0
  3638 ;;Total ram usage:        2 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:    6
  3641 ;; This function calls:
  3642 ;;		_Mrf49SpiTx
  3643 ;; This function is called by:
  3644 ;;		_Mrf49xaModeRx
  3645 ;;		_Mrf49xaModeTx
  3646 ;;		_Mrf49xaInit
  3647 ;;		_Mrf49TxByte
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function _Mrf49TxCmd
  3653  0273                     _Mrf49TxCmd:	
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3657                           ;Mrf49TxCmd@cmd stored from wreg
  3658  0273  00A2               	movwf	Mrf49TxCmd@cmd
  3659                           
  3660                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  3661  0274  0022               	movlb	2	; select bank2
  3662  0275  130E               	bcf	14,6	;volatile
  3663                           
  3664                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3665  0276  0020               	movlb	0	; select bank0
  3666  0277  0822               	movf	Mrf49TxCmd@cmd,w
  3667  0278  227F  3180         	fcall	_Mrf49SpiTx
  3668                           
  3669                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3670  027A  0020               	movlb	0	; select bank0
  3671  027B  0821               	movf	Mrf49TxCmd@val,w
  3672  027C  227F               	fcall	_Mrf49SpiTx
  3673                           
  3674                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  3675  027D  170E               	bsf	14,6	;volatile
  3676  027E  0008               	return
  3677  027F                     __end_of_Mrf49TxCmd:	
  3678  027F                     __ptext19:	
  3679 ;; *************** function _Mrf49SpiTx *****************
  3680 ;; Defined at:
  3681 ;;		line 4 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  byte            1    wreg     unsigned char 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  byte            1    0[BANK0 ] unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;		None               void
  3688 ;; Registers used:
  3689 ;;		wreg
  3690 ;; Tracked objects:
  3691 ;;		On entry : 1F/0
  3692 ;;		On exit  : 1F/2
  3693 ;;		Unchanged: FFE00/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3695 ;;      Params:         0       0       0       0
  3696 ;;      Locals:         0       1       0       0
  3697 ;;      Temps:          0       0       0       0
  3698 ;;      Totals:         0       1       0       0
  3699 ;;Total ram usage:        1 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    5
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_Mrf49TxCmd
  3706 ;;		_Mrf49RxCmd
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _Mrf49SpiTx
  3712  027F                     _Mrf49SpiTx:	
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _Mrf49SpiTx: [wreg]
  3716                           ;Mrf49SpiTx@byte stored from wreg
  3717  027F  00A0               	movwf	Mrf49SpiTx@byte
  3718                           
  3719                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  3720  0280  1FA0               	btfss	Mrf49SpiTx@byte,7
  3721  0281  2A85               	goto	l205
  3722  0282  0022               	movlb	2	; select bank2
  3723  0283  178D               	bsf	13,7	;volatile
  3724  0284  2A87               	goto	l206
  3725  0285                     l205:	
  3726  0285  0022               	movlb	2	; select bank2
  3727  0286  138D               	bcf	13,7	;volatile
  3728  0287                     l206:	
  3729  0287  178E               	bsf	14,7	;volatile
  3730  0288  0000               	nop	;# 
  3731  0289  0022               	movlb	2	; select bank2
  3732  028A  138E               	bcf	14,7	;volatile
  3733  028B  0020               	movlb	0	; select bank0
  3734  028C  1F20               	btfss	Mrf49SpiTx@byte,6
  3735  028D  2A91               	goto	l209
  3736  028E  0022               	movlb	2	; select bank2
  3737  028F  178D               	bsf	13,7	;volatile
  3738  0290  2A93               	goto	l210
  3739  0291                     l209:	
  3740  0291  0022               	movlb	2	; select bank2
  3741  0292  138D               	bcf	13,7	;volatile
  3742  0293                     l210:	
  3743  0293  178E               	bsf	14,7	;volatile
  3744  0294  0000               	nop	;# 
  3745  0295  0022               	movlb	2	; select bank2
  3746  0296  138E               	bcf	14,7	;volatile
  3747  0297  0020               	movlb	0	; select bank0
  3748  0298  1EA0               	btfss	Mrf49SpiTx@byte,5
  3749  0299  2A9D               	goto	l213
  3750  029A  0022               	movlb	2	; select bank2
  3751  029B  178D               	bsf	13,7	;volatile
  3752  029C  2A9F               	goto	l214
  3753  029D                     l213:	
  3754  029D  0022               	movlb	2	; select bank2
  3755  029E  138D               	bcf	13,7	;volatile
  3756  029F                     l214:	
  3757  029F  178E               	bsf	14,7	;volatile
  3758  02A0  0000               	nop	;# 
  3759  02A1  0022               	movlb	2	; select bank2
  3760  02A2  138E               	bcf	14,7	;volatile
  3761  02A3  0020               	movlb	0	; select bank0
  3762  02A4  1E20               	btfss	Mrf49SpiTx@byte,4
  3763  02A5  2AA9               	goto	l217
  3764  02A6  0022               	movlb	2	; select bank2
  3765  02A7  178D               	bsf	13,7	;volatile
  3766  02A8  2AAB               	goto	l218
  3767  02A9                     l217:	
  3768  02A9  0022               	movlb	2	; select bank2
  3769  02AA  138D               	bcf	13,7	;volatile
  3770  02AB                     l218:	
  3771  02AB  178E               	bsf	14,7	;volatile
  3772  02AC  0000               	nop	;# 
  3773  02AD  0022               	movlb	2	; select bank2
  3774  02AE  138E               	bcf	14,7	;volatile
  3775  02AF  0020               	movlb	0	; select bank0
  3776  02B0  1DA0               	btfss	Mrf49SpiTx@byte,3
  3777  02B1  2AB5               	goto	l221
  3778  02B2  0022               	movlb	2	; select bank2
  3779  02B3  178D               	bsf	13,7	;volatile
  3780  02B4  2AB7               	goto	l222
  3781  02B5                     l221:	
  3782  02B5  0022               	movlb	2	; select bank2
  3783  02B6  138D               	bcf	13,7	;volatile
  3784  02B7                     l222:	
  3785  02B7  178E               	bsf	14,7	;volatile
  3786  02B8  0000               	nop	;# 
  3787  02B9  0022               	movlb	2	; select bank2
  3788  02BA  138E               	bcf	14,7	;volatile
  3789  02BB  0020               	movlb	0	; select bank0
  3790  02BC  1D20               	btfss	Mrf49SpiTx@byte,2
  3791  02BD  2AC1               	goto	l225
  3792  02BE  0022               	movlb	2	; select bank2
  3793  02BF  178D               	bsf	13,7	;volatile
  3794  02C0  2AC3               	goto	l226
  3795  02C1                     l225:	
  3796  02C1  0022               	movlb	2	; select bank2
  3797  02C2  138D               	bcf	13,7	;volatile
  3798  02C3                     l226:	
  3799  02C3  178E               	bsf	14,7	;volatile
  3800  02C4  0000               	nop	;# 
  3801  02C5  0022               	movlb	2	; select bank2
  3802  02C6  138E               	bcf	14,7	;volatile
  3803  02C7  0020               	movlb	0	; select bank0
  3804  02C8  1CA0               	btfss	Mrf49SpiTx@byte,1
  3805  02C9  2ACD               	goto	l229
  3806  02CA  0022               	movlb	2	; select bank2
  3807  02CB  178D               	bsf	13,7	;volatile
  3808  02CC  2ACF               	goto	l230
  3809  02CD                     l229:	
  3810  02CD  0022               	movlb	2	; select bank2
  3811  02CE  138D               	bcf	13,7	;volatile
  3812  02CF                     l230:	
  3813  02CF  178E               	bsf	14,7	;volatile
  3814  02D0  0000               	nop	;# 
  3815  02D1  0022               	movlb	2	; select bank2
  3816  02D2  138E               	bcf	14,7	;volatile
  3817  02D3  0020               	movlb	0	; select bank0
  3818  02D4  1C20               	btfss	Mrf49SpiTx@byte,0
  3819  02D5  2AD9               	goto	l233
  3820  02D6  0022               	movlb	2	; select bank2
  3821  02D7  178D               	bsf	13,7	;volatile
  3822  02D8  2ADB               	goto	l234
  3823  02D9                     l233:	
  3824  02D9  0022               	movlb	2	; select bank2
  3825  02DA  138D               	bcf	13,7	;volatile
  3826  02DB                     l234:	
  3827  02DB  178E               	bsf	14,7	;volatile
  3828  02DC  0000               	nop	;# 
  3829  02DD  0022               	movlb	2	; select bank2
  3830  02DE  138E               	bcf	14,7	;volatile
  3831                           
  3832                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  3833  02DF  138D               	bcf	13,7	;volatile
  3834  02E0  0008               	return
  3835  02E1                     __end_of_Mrf49SpiTx:	
  3836  02E1                     __ptext15:	
  3837 ;; *************** function _Mrf49RxSts *****************
  3838 ;; Defined at:
  3839 ;;		line 30 in file "../../../src/devices/mrf49xa_cmd.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;		None
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;		None
  3844 ;; Return value:  Size  Location     Type
  3845 ;;		None               void
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, pclath, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 1E/0
  3850 ;;		On exit  : 1F/2
  3851 ;;		Unchanged: FFE00/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3853 ;;      Params:         0       0       0       0
  3854 ;;      Locals:         0       0       0       0
  3855 ;;      Temps:          0       0       0       0
  3856 ;;      Totals:         0       0       0       0
  3857 ;;Total ram usage:        0 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    6
  3860 ;; This function calls:
  3861 ;;		_Mrf49SpiRx
  3862 ;; This function is called by:
  3863 ;;		_Mrf49xaTick
  3864 ;;		_Mrf49xaServe
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _Mrf49RxSts
  3870  02E1                     _Mrf49RxSts:	
  3871                           
  3872                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  3876  02E1  120B               	bcf	11,4	;volatile
  3877                           
  3878                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  3879  02E2  0022               	movlb	2	; select bank2
  3880  02E3  130E               	bcf	14,6	;volatile
  3881                           
  3882                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  3883  02E4  22ED  3180         	fcall	_Mrf49SpiRx
  3884  02E6  00AE               	movwf	_mrf49Status
  3885                           
  3886                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  3887  02E7  22ED               	fcall	_Mrf49SpiRx
  3888  02E8  00AF               	movwf	_mrf49Status+1
  3889                           
  3890                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  3891  02E9  0022               	movlb	2	; select bank2
  3892  02EA  170E               	bsf	14,6	;volatile
  3893                           
  3894                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  3895  02EB  160B               	bsf	11,4	;volatile
  3896  02EC  0008               	return
  3897  02ED                     __end_of_Mrf49RxSts:	
  3898  02ED                     __ptext16:	
  3899 ;; *************** function _Mrf49SpiRx *****************
  3900 ;; Defined at:
  3901 ;;		line 22 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  data            1    0[BANK0 ] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      unsigned char 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2
  3910 ;; Tracked objects:
  3911 ;;		On entry : 1D/2
  3912 ;;		On exit  : 1F/0
  3913 ;;		Unchanged: FFE00/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3915 ;;      Params:         0       0       0       0
  3916 ;;      Locals:         0       1       0       0
  3917 ;;      Temps:          0       0       0       0
  3918 ;;      Totals:         0       1       0       0
  3919 ;;Total ram usage:        1 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    5
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_Mrf49RxCmd
  3926 ;;		_Mrf49RxSts
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           
  3931                           ;psect for function _Mrf49SpiRx
  3932  02ED                     _Mrf49SpiRx:	
  3933                           
  3934                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  3938  02ED  0020               	movlb	0	; select bank0
  3939  02EE  01A0               	clrf	Mrf49SpiRx@data
  3940                           
  3941                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  3942  02EF  0022               	movlb	2	; select bank2
  3943  02F0  138D               	bcf	13,7	;volatile
  3944  02F1  0020               	movlb	0	; select bank0
  3945  02F2  1A8E               	btfsc	14,5	;volatile
  3946  02F3  17A0               	bsf	Mrf49SpiRx@data,7
  3947  02F4  0022               	movlb	2	; select bank2
  3948  02F5  178E               	bsf	14,7	;volatile
  3949  02F6  0000               	nop	;# 
  3950  02F7  0022               	movlb	2	; select bank2
  3951  02F8  138E               	bcf	14,7	;volatile
  3952                           
  3953                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3954  02F9  0020               	movlb	0	; select bank0
  3955  02FA  1A8E               	btfsc	14,5	;volatile
  3956  02FB  1720               	bsf	Mrf49SpiRx@data,6
  3957  02FC  0022               	movlb	2	; select bank2
  3958  02FD  178E               	bsf	14,7	;volatile
  3959  02FE  0000               	nop	;# 
  3960  02FF  0022               	movlb	2	; select bank2
  3961  0300  138E               	bcf	14,7	;volatile
  3962                           
  3963                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3964  0301  0020               	movlb	0	; select bank0
  3965  0302  1A8E               	btfsc	14,5	;volatile
  3966  0303  16A0               	bsf	Mrf49SpiRx@data,5
  3967  0304  0022               	movlb	2	; select bank2
  3968  0305  178E               	bsf	14,7	;volatile
  3969  0306  0000               	nop	;# 
  3970  0307  0022               	movlb	2	; select bank2
  3971  0308  138E               	bcf	14,7	;volatile
  3972                           
  3973                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3974  0309  0020               	movlb	0	; select bank0
  3975  030A  1A8E               	btfsc	14,5	;volatile
  3976  030B  1620               	bsf	Mrf49SpiRx@data,4
  3977  030C  0022               	movlb	2	; select bank2
  3978  030D  178E               	bsf	14,7	;volatile
  3979  030E  0000               	nop	;# 
  3980  030F  0022               	movlb	2	; select bank2
  3981  0310  138E               	bcf	14,7	;volatile
  3982                           
  3983                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3984  0311  0020               	movlb	0	; select bank0
  3985  0312  1A8E               	btfsc	14,5	;volatile
  3986  0313  15A0               	bsf	Mrf49SpiRx@data,3
  3987  0314  0022               	movlb	2	; select bank2
  3988  0315  178E               	bsf	14,7	;volatile
  3989  0316  0000               	nop	;# 
  3990  0317  0022               	movlb	2	; select bank2
  3991  0318  138E               	bcf	14,7	;volatile
  3992                           
  3993                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3994  0319  0020               	movlb	0	; select bank0
  3995  031A  1A8E               	btfsc	14,5	;volatile
  3996  031B  1520               	bsf	Mrf49SpiRx@data,2
  3997  031C  0022               	movlb	2	; select bank2
  3998  031D  178E               	bsf	14,7	;volatile
  3999  031E  0000               	nop	;# 
  4000  031F  0022               	movlb	2	; select bank2
  4001  0320  138E               	bcf	14,7	;volatile
  4002                           
  4003                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4004  0321  0020               	movlb	0	; select bank0
  4005  0322  1A8E               	btfsc	14,5	;volatile
  4006  0323  14A0               	bsf	Mrf49SpiRx@data,1
  4007  0324  0022               	movlb	2	; select bank2
  4008  0325  178E               	bsf	14,7	;volatile
  4009  0326  0000               	nop	;# 
  4010  0327  0022               	movlb	2	; select bank2
  4011  0328  138E               	bcf	14,7	;volatile
  4012                           
  4013                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4014  0329  0020               	movlb	0	; select bank0
  4015  032A  1A8E               	btfsc	14,5	;volatile
  4016  032B  1420               	bsf	Mrf49SpiRx@data,0
  4017  032C  0022               	movlb	2	; select bank2
  4018  032D  178E               	bsf	14,7	;volatile
  4019  032E  0000               	nop	;# 
  4020  032F  0022               	movlb	2	; select bank2
  4021  0330  138E               	bcf	14,7	;volatile
  4022                           
  4023                           ;mrf49xa_spi_pic16.c: 40: return data;
  4024  0331  0020               	movlb	0	; select bank0
  4025  0332  0820               	movf	Mrf49SpiRx@data,w
  4026  0333  0008               	return
  4027  0334                     __end_of_Mrf49SpiRx:	
  4028  0334                     __ptext21:	
  4029 ;; *************** function _AdcInit *****************
  4030 ;; Defined at:
  4031 ;;		line 5 in file "../../../src/bsp/pic16/adc16.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;		None
  4036 ;; Return value:  Size  Location     Type
  4037 ;;		None               void
  4038 ;; Registers used:
  4039 ;;		wreg, status,2
  4040 ;; Tracked objects:
  4041 ;;		On entry : 17F/2
  4042 ;;		On exit  : 17F/1
  4043 ;;		Unchanged: FFE80/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4045 ;;      Params:         0       0       0       0
  4046 ;;      Locals:         0       0       0       0
  4047 ;;      Temps:          0       0       0       0
  4048 ;;      Totals:         0       0       0       0
  4049 ;;Total ram usage:        0 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    5
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _AdcInit
  4061  0334                     _AdcInit:	
  4062                           
  4063                           ;adc16.c: 6: ANSELA = 0;
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _AdcInit: [wreg+status,2]
  4067  0334  0023               	movlb	3	; select bank3
  4068  0335  018C               	clrf	12	;volatile
  4069                           
  4070                           ;adc16.c: 7: ANSELB = 0;
  4071  0336  018D               	clrf	13	;volatile
  4072                           
  4073                           ;adc16.c: 8: ANSELC = 0;
  4074  0337  018E               	clrf	14	;volatile
  4075                           
  4076                           ;adc16.c: 10: FVRCON = 0b11100001;
  4077  0338  30E1               	movlw	225
  4078  0339  0022               	movlb	2	; select bank2
  4079  033A  0097               	movwf	23	;volatile
  4080                           
  4081                           ;adc16.c: 12: ADCON2 = 0b00000000;
  4082  033B  0021               	movlb	1	; select bank1
  4083  033C  019F               	clrf	31	;volatile
  4084                           
  4085                           ;adc16.c: 13: ADCON1 = 0b11110000;
  4086  033D  30F0               	movlw	240
  4087  033E  009E               	movwf	30	;volatile
  4088                           
  4089                           ;adc16.c: 14: ADCON0 = 0b00000000;
  4090  033F  019D               	clrf	29	;volatile
  4091                           
  4092                           ;adc16.c: 16: ADCON0 = 0b00010011;
  4093  0340  3013               	movlw	19
  4094  0341  009D               	movwf	29	;volatile
  4095  0342  0008               	return
  4096  0343                     __end_of_AdcInit:	
  4097  0343                     __ptext20:	
  4098 ;; *************** function _ExtIntInit *****************
  4099 ;; Defined at:
  4100 ;;		line 9 in file "../../../src/bsp/pic16/interrupt.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		None
  4109 ;; Tracked objects:
  4110 ;;		On entry : 17F/1
  4111 ;;		On exit  : 17F/1
  4112 ;;		Unchanged: FFE80/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4114 ;;      Params:         0       0       0       0
  4115 ;;      Locals:         0       0       0       0
  4116 ;;      Temps:          0       0       0       0
  4117 ;;      Totals:         0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    5
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function _ExtIntInit
  4130  0343                     _ExtIntInit:	
  4131                           
  4132                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4133                           
  4134                           ;incstack = 0
  4135                           ; Regs used in _ExtIntInit: []
  4136  0343  1315               	bcf	21,6	;volatile
  4137                           
  4138                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4139  0344  108B               	bcf	11,1	;volatile
  4140                           
  4141                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4142  0345  160B               	bsf	11,4	;volatile
  4143                           
  4144                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4145  0346  178B               	bsf	11,7	;volatile
  4146  0347  0008               	return
  4147  0348                     __end_of_ExtIntInit:	
  4148  0348                     __ptext8:	
  4149 ;; *************** function _Mrf49xaPacketPending *****************
  4150 ;; Defined at:
  4151 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg
  4160 ;; Tracked objects:
  4161 ;;		On entry : 1E/0
  4162 ;;		On exit  : 1F/1
  4163 ;;		Unchanged: FFFE0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4165 ;;      Params:         0       0       0       0
  4166 ;;      Locals:         0       0       0       0
  4167 ;;      Temps:          0       0       0       0
  4168 ;;      Totals:         0       0       0       0
  4169 ;;Total ram usage:        0 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    5
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_Mrf49xaTick
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _Mrf49xaPacketPending
  4181  0348                     _Mrf49xaPacketPending:	
  4182                           
  4183                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  4184                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4185                           
  4186                           ;incstack = 0
  4187                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  4188  0348  0021               	movlb	1	; select bank1
  4189  0349  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4190  034A  3A04               	xorlw	4
  4191  034B  1903               	skipnz
  4192  034C  3401               	retlw	1
  4193  034D  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4194  034E  3A04               	xorlw	4
  4195  034F  1903               	btfsc	3,2
  4196                           
  4197                           ;mrf49xa_packet.c: 9: return 1;
  4198  0350  3401               	retlw	1
  4199                           
  4200                           ;mrf49xa_packet.c: 10: else
  4201                           ;mrf49xa_packet.c: 11: return 0;
  4202  0351  3400               	retlw	0
  4203  0352                     __end_of_Mrf49xaPacketPending:	
  4204  0352                     __ptext7:	
  4205 ;; *************** function _Mrf49xaRxPacket *****************
  4206 ;; Defined at:
  4207 ;;		line 67 in file "../../../src/devices/mrf49xa_packet.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4214 ;; Registers used:
  4215 ;;		wreg
  4216 ;; Tracked objects:
  4217 ;;		On entry : 1F/1
  4218 ;;		On exit  : 1F/1
  4219 ;;		Unchanged: FFFE0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4221 ;;      Params:         0       0       0       0
  4222 ;;      Locals:         0       0       0       0
  4223 ;;      Temps:          0       0       0       0
  4224 ;;      Totals:         0       0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    5
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_Mrf49xaTick
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           
  4236                           ;psect for function _Mrf49xaRxPacket
  4237  0352                     _Mrf49xaRxPacket:	
  4238                           
  4239                           ;mrf49xa_packet.c: 68: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  4243  0352  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4244  0353  3A04               	xorlw	4
  4245  0354  1D03               	skipz
  4246  0355  2B59               	goto	l2073
  4247                           
  4248                           ;mrf49xa_packet.c: 69: {
  4249                           ;mrf49xa_packet.c: 70: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4250  0356  3005               	movlw	5
  4251  0357  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4252                           
  4253                           ;mrf49xa_packet.c: 71: return &(rfTrcvStatus.rxPacket[0]);
  4254  0358  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4255  0359                     l2073:	
  4256                           
  4257                           ;mrf49xa_packet.c: 72: }
  4258                           ;mrf49xa_packet.c: 74: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4259  0359  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4260  035A  3A04               	xorlw	4
  4261  035B  1D03               	skipz
  4262  035C  3400               	retlw	0
  4263                           
  4264                           ;mrf49xa_packet.c: 75: {
  4265                           ;mrf49xa_packet.c: 76: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4266  035D  3005               	movlw	5
  4267  035E  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4268                           
  4269                           ;mrf49xa_packet.c: 77: return &(rfTrcvStatus.rxPacket[1]);
  4270  035F  34D3               	retlw	(_rfTrcvStatus+51)& (0+255)
  4271  0360                     __end_of_Mrf49xaRxPacket:	
  4272                           ;mrf49xa_packet.c: 78: }
  4273                           ;mrf49xa_packet.c: 80: return (0);
  4274                           
  4275  0360                     __ptext4:	
  4276 ;; *************** function _Mrf49xaFreePacket *****************
  4277 ;; Defined at:
  4278 ;;		line 62 in file "../../../src/devices/mrf49xa_packet.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4281 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  4284 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;		None               void
  4287 ;; Registers used:
  4288 ;;		wreg, fsr1l, fsr1h, status,2
  4289 ;; Tracked objects:
  4290 ;;		On entry : 1F/0
  4291 ;;		On exit  : 1F/0
  4292 ;;		Unchanged: FFFE0/0
  4293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4294 ;;      Params:         0       0       0       0
  4295 ;;      Locals:         0       1       0       0
  4296 ;;      Temps:          0       0       0       0
  4297 ;;      Totals:         0       1       0       0
  4298 ;;Total ram usage:        1 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    5
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_Mrf49xaTick
  4305 ;;		_HandlePacket
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _Mrf49xaFreePacket
  4311  0360                     _Mrf49xaFreePacket:	
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  4315                           ;Mrf49xaFreePacket@packet stored from wreg
  4316  0360  00A0               	movwf	Mrf49xaFreePacket@packet
  4317                           
  4318                           ;mrf49xa_packet.c: 63: packet->state = PKT_FREE;
  4319  0361  0086               	movwf	6
  4320  0362  0187               	clrf	7
  4321  0363  0181               	clrf	1
  4322  0364  0008               	return
  4323  0365                     __end_of_Mrf49xaFreePacket:	
  4324  0365                     __ptext3:	
  4325 ;; *************** function _HandlePacket *****************
  4326 ;; Defined at:
  4327 ;;		line 4 in file "../../../src/rfstack/client.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4330 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  packet          1    9[BANK0 ] PTR struct rfTrcvPacket_
  4333 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4334 ;;  sendAck         1    8[BANK0 ] unsigned char 
  4335 ;;  sendMsg         1    7[BANK0 ] unsigned char 
  4336 ;;  needAck         1    0        unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;		None               void
  4339 ;; Registers used:
  4340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 1F/0
  4343 ;;		On exit  : 1E/0
  4344 ;;		Unchanged: FFFE0/0
  4345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4346 ;;      Params:         0       0       0       0
  4347 ;;      Locals:         0       4       0       0
  4348 ;;      Temps:          0       0       0       0
  4349 ;;      Totals:         0       4       0       0
  4350 ;;Total ram usage:        4 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    7
  4353 ;; This function calls:
  4354 ;;		_Mrf49xaTxAck
  4355 ;;		_Mrf49xaTxPacket
  4356 ;;		_Mrf49xaFreePacket
  4357 ;; This function is called by:
  4358 ;;		_Mrf49xaTick
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _HandlePacket
  4364  0365                     _HandlePacket:	
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4368                           ;HandlePacket@packet stored from wreg
  4369  0365  00A9               	movwf	HandlePacket@packet
  4370                           
  4371                           ;client.c: 5: bool_t sendMsg = 0;
  4372  0366  01A7               	clrf	HandlePacket@sendMsg
  4373                           
  4374                           ;client.c: 6: bool_t sendAck = 0;
  4375  0367  01A8               	clrf	HandlePacket@sendAck
  4376                           
  4377                           ;client.c: 10: switch (packet->packet.id)
  4378  0368  2B8A               	goto	l2165
  4379  0369                     l2153:	
  4380                           
  4381                           ;client.c: 13: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  4382                           ;client.c: 14: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  4383  0369  0829               	movf	HandlePacket@packet,w
  4384  036A  3E07               	addlw	7
  4385  036B  0086               	movwf	6
  4386  036C  0187               	clrf	7
  4387  036D  0021               	movlb	1	; select bank1
  4388  036E  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  4389  036F  0601               	xorwf	1,w
  4390  0370  1D03               	skipz
  4391  0371  2B99               	goto	l2167
  4392  0372  0020               	movlb	0	; select bank0
  4393  0373  0829               	movf	HandlePacket@packet,w
  4394  0374  3E06               	addlw	6
  4395  0375  0086               	movwf	6
  4396  0376  0021               	movlb	1	; select bank1
  4397  0377  0825               	movf	(_rfTrcvStatus^(0+128)+5),w
  4398  0378  0601               	xorwf	1,w
  4399  0379  1D03               	skipz
  4400  037A  2B99               	goto	l2167
  4401                           
  4402                           ;client.c: 15: {
  4403                           ;client.c: 16: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  4404  037B  3002               	movlw	2
  4405  037C  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  4406  037D  2B99               	goto	l2167
  4407  037E                     l2159:	
  4408                           
  4409                           ;client.c: 21: packet->packet.data[0] = 2;
  4410  037E  0829               	movf	HandlePacket@packet,w
  4411  037F  3E06               	addlw	6
  4412  0380  0086               	movwf	6
  4413  0381  3002               	movlw	2
  4414  0382  0187               	clrf	7
  4415  0383  0081               	movwf	1
  4416                           
  4417                           ;client.c: 22: sendMsg = 1;
  4418  0384  01A7               	clrf	HandlePacket@sendMsg
  4419  0385  0AA7               	incf	HandlePacket@sendMsg,f
  4420                           
  4421                           ;client.c: 23: break;
  4422  0386  2B99               	goto	l2167
  4423  0387                     l422:	
  4424                           ;client.c: 26: syncedTime = *((uint32_t*) packet->packet.data);
  4425                           
  4426                           
  4427                           ;client.c: 27: sendAck = 1;
  4428  0387  01A8               	clrf	HandlePacket@sendAck
  4429  0388  0AA8               	incf	HandlePacket@sendAck,f
  4430                           
  4431                           ;client.c: 28: break;
  4432  0389  2B99               	goto	l2167
  4433  038A                     l2165:	
  4434  038A  0829               	movf	HandlePacket@packet,w
  4435  038B  3E04               	addlw	4
  4436  038C  0086               	movwf	6
  4437  038D  0187               	clrf	7
  4438  038E  0801               	movf	1,w
  4439                           
  4440                           ; Switch size 1, requested type "speed"
  4441                           ; Number of cases is 3, Range of values is 160 to 162
  4442                           ; switch strategies available:
  4443                           ; Name         Instructions Cycles
  4444                           ; simple_byte           10     6 (average)
  4445                           ; direct_byte           15     9 (fixed)
  4446                           ; jumptable            263     9 (fixed)
  4447                           ;	Chosen strategy is simple_byte
  4448  038F  3AA0               	xorlw	160	; case 160
  4449  0390  1903               	skipnz
  4450  0391  2B7E               	goto	l2159
  4451  0392  3A01               	xorlw	1	; case 161
  4452  0393  1903               	skipnz
  4453  0394  2B69               	goto	l2153
  4454  0395  3A03               	xorlw	3	; case 162
  4455  0396  1903               	skipnz
  4456  0397  2B87               	goto	l422
  4457  0398  2B99               	goto	l2167
  4458  0399                     l2167:	
  4459                           
  4460                           ;client.c: 32: if (sendMsg)
  4461  0399  0020               	movlb	0	; select bank0
  4462  039A  0827               	movf	HandlePacket@sendMsg,w
  4463  039B  1903               	btfsc	3,2
  4464  039C  2BA2               	goto	l2171
  4465                           
  4466                           ;client.c: 33: Mrf49xaTxPacket(packet, 1, needAck);
  4467  039D  01A0               	clrf	?_Mrf49xaTxPacket
  4468  039E  0AA0               	incf	?_Mrf49xaTxPacket,f
  4469  039F  01A1               	clrf	?_Mrf49xaTxPacket+1
  4470  03A0  0829               	movf	HandlePacket@packet,w
  4471  03A1  2BC7               	ljmp	_Mrf49xaTxPacket
  4472  03A2                     l2171:	
  4473                           
  4474                           ;client.c: 34: else if (sendAck)
  4475  03A2  0828               	movf	HandlePacket@sendAck,w
  4476  03A3  1903               	btfsc	3,2
  4477  03A4  2BA8               	goto	l2175
  4478                           
  4479                           ;client.c: 35: Mrf49xaTxAck(packet);
  4480  03A5  0829               	movf	HandlePacket@packet,w
  4481  03A6  3185  2DF7         	ljmp	_Mrf49xaTxAck
  4482  03A8                     l2175:	
  4483                           
  4484                           ;client.c: 36: else
  4485                           ;client.c: 37: Mrf49xaFreePacket(packet);
  4486  03A8  0829               	movf	HandlePacket@packet,w
  4487  03A9  2B60               	ljmp	_Mrf49xaFreePacket
  4488  03AA                     __end_of_HandlePacket:	
  4489  03AA                     __ptext1:	
  4490 ;; *************** function _SysInitGpio *****************
  4491 ;; Defined at:
  4492 ;;		line 29 in file "../../../src/node/main.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;		None               void
  4499 ;; Registers used:
  4500 ;;		None
  4501 ;; Tracked objects:
  4502 ;;		On entry : 17F/4
  4503 ;;		On exit  : 17F/2
  4504 ;;		Unchanged: FFE80/0
  4505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4506 ;;      Params:         0       0       0       0
  4507 ;;      Locals:         0       0       0       0
  4508 ;;      Temps:          0       0       0       0
  4509 ;;      Totals:         0       0       0       0
  4510 ;;Total ram usage:        0 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    5
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_main
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           
  4521                           ;psect for function _SysInitGpio
  4522  03AA                     _SysInitGpio:	
  4523                           
  4524                           ;incstack = 0
  4525                           ; Regs used in _SysInitGpio: []
  4526                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4527  03AA  0021               	movlb	1	; select bank1
  4528  03AB  150C               	bsf	12,2	;volatile
  4529  03AC  120C               	bcf	12,4	;volatile
  4530  03AD  128C               	bcf	12,5	;volatile
  4531  03AE  0022               	movlb	2	; select bank2
  4532  03AF  120C               	bcf	12,4	;volatile
  4533  03B0  128C               	bcf	12,5	;volatile
  4534                           
  4535                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4536  03B1  0021               	movlb	1	; select bank1
  4537  03B2  120D               	bcf	13,4	;volatile
  4538  03B3  130D               	bcf	13,6	;volatile
  4539  03B4  138D               	bcf	13,7	;volatile
  4540  03B5  168D               	bsf	13,5	;volatile
  4541                           
  4542                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  4543  03B6  108E               	bcf	14,1	;volatile
  4544  03B7  110E               	bcf	14,2	;volatile
  4545  03B8  120E               	bcf	14,4	;volatile
  4546  03B9  130E               	bcf	14,6	;volatile
  4547  03BA  138E               	bcf	14,7	;volatile
  4548  03BB  140E               	bsf	14,0	;volatile
  4549  03BC  158E               	bsf	14,3	;volatile
  4550  03BD  168E               	bsf	14,5	;volatile
  4551  03BE  0022               	movlb	2	; select bank2
  4552  03BF  108E               	bcf	14,1	;volatile
  4553  03C0  110E               	bcf	14,2	;volatile
  4554  03C1  120E               	bcf	14,4	;volatile
  4555  03C2  170E               	bsf	14,6	;volatile
  4556  03C3  138E               	bcf	14,7	;volatile
  4557                           
  4558                           ;main.c: 34: LATCbits.LATC1 = 0;
  4559  03C4  108E               	bcf	14,1	;volatile
  4560                           
  4561                           ;main.c: 35: LATCbits.LATC2 = 0;
  4562  03C5  110E               	bcf	14,2	;volatile
  4563  03C6  0008               	return
  4564  03C7                     __end_of_SysInitGpio:	
  4565  03C7                     __ptext6:	
  4566 ;; *************** function _Mrf49xaTxPacket *****************
  4567 ;; Defined at:
  4568 ;;		line 28 in file "../../../src/devices/mrf49xa_packet.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4571 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4572 ;;  response        1    0[BANK0 ] unsigned char 
  4573 ;;  needAck         1    1[BANK0 ] unsigned char 
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  packet          1    4[BANK0 ] PTR struct rfTrcvPacket_
  4576 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4577 ;;  i               1    3[BANK0 ] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      unsigned char 
  4580 ;; Registers used:
  4581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4582 ;; Tracked objects:
  4583 ;;		On entry : 1F/0
  4584 ;;		On exit  : 1E/0
  4585 ;;		Unchanged: FFFE0/0
  4586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4587 ;;      Params:         0       2       0       0
  4588 ;;      Locals:         0       2       0       0
  4589 ;;      Temps:          0       1       0       0
  4590 ;;      Totals:         0       5       0       0
  4591 ;;Total ram usage:        5 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    5
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_Mrf49xaTxAck
  4598 ;;		_HandlePacket
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           
  4603                           ;psect for function _Mrf49xaTxPacket
  4604  03C7                     _Mrf49xaTxPacket:	
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  4608                           ;Mrf49xaTxPacket@packet stored from wreg
  4609  03C7  00A4               	movwf	Mrf49xaTxPacket@packet
  4610                           
  4611                           ;mrf49xa_packet.c: 29: uint8_t i;
  4612                           ;mrf49xa_packet.c: 32: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4613  03C8  0021               	movlb	1	; select bank1
  4614  03C9  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4615  03CA  1D03               	skipz
  4616  03CB  0008               	return
  4617                           
  4618                           ;mrf49xa_packet.c: 37: else
  4619                           ;mrf49xa_packet.c: 38: {
  4620                           ;mrf49xa_packet.c: 39: if (response)
  4621  03CC  0020               	movlb	0	; select bank0
  4622  03CD  0820               	movf	Mrf49xaTxPacket@response,w
  4623  03CE  1903               	btfsc	3,2
  4624  03CF  2BE0               	goto	l2045
  4625                           
  4626                           ;mrf49xa_packet.c: 40: {
  4627                           ;mrf49xa_packet.c: 41: packet->packet.dst = packet->packet.src;
  4628  03D0  0824               	movf	Mrf49xaTxPacket@packet,w
  4629  03D1  3E03               	addlw	3
  4630  03D2  0086               	movwf	6
  4631  03D3  0187               	clrf	7
  4632  03D4  0824               	movf	Mrf49xaTxPacket@packet,w
  4633  03D5  3E02               	addlw	2
  4634  03D6  0084               	movwf	4
  4635  03D7  0185               	clrf	5
  4636  03D8  0800               	movf	0,w
  4637  03D9  0081               	movwf	1
  4638                           
  4639                           ;mrf49xa_packet.c: 42: packet->packet.src = rfTrcvStatus.src;
  4640  03DA  0824               	movf	Mrf49xaTxPacket@packet,w
  4641  03DB  3E02               	addlw	2
  4642  03DC  0086               	movwf	6
  4643  03DD  0021               	movlb	1	; select bank1
  4644  03DE  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  4645  03DF  0081               	movwf	1
  4646  03E0                     l2045:	
  4647                           
  4648                           ;mrf49xa_packet.c: 43: }
  4649                           ;mrf49xa_packet.c: 45: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4650  03E0  0021               	movlb	1	; select bank1
  4651  03E1  30F0               	movlw	-16
  4652  03E2  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  4653  03E3  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  4654                           
  4655                           ;mrf49xa_packet.c: 46: rfTrcvStatus.txPacket.crc = 0;
  4656  03E4  01B7               	clrf	(_rfTrcvStatus^(0+128)+23)
  4657                           
  4658                           ;mrf49xa_packet.c: 47: rfTrcvStatus.txPacket.retry = 0;
  4659  03E5  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  4660                           
  4661                           ;mrf49xa_packet.c: 48: rfTrcvStatus.txPacket.retransmit = 0;
  4662  03E6  30CF               	movlw	-49
  4663  03E7  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  4664                           
  4665                           ;mrf49xa_packet.c: 49: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4666  03E8  0020               	movlb	0	; select bank0
  4667  03E9  0321               	decf	Mrf49xaTxPacket@needAck,w
  4668  03EA  3000               	movlw	0
  4669  03EB  1903               	skipnz
  4670  03EC  3001               	movlw	1
  4671  03ED  0021               	movlb	1	; select bank1
  4672  03EE  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  4673                           
  4674                           ;mrf49xa_packet.c: 51: packet->state = PKT_FREE;
  4675  03EF  0020               	movlb	0	; select bank0
  4676  03F0  0824               	movf	Mrf49xaTxPacket@packet,w
  4677  03F1  0086               	movwf	6
  4678  03F2  0187               	clrf	7
  4679  03F3  0181               	clrf	1
  4680                           
  4681                           ;mrf49xa_packet.c: 54: for (i = 0; i <= packet->packet.size; i++)
  4682  03F4  01A3               	clrf	Mrf49xaTxPacket@i
  4683  03F5                     l2063:	
  4684  03F5  0A24               	incf	Mrf49xaTxPacket@packet,w
  4685  03F6  0086               	movwf	6
  4686  03F7  0187               	clrf	7
  4687  03F8  0823               	movf	Mrf49xaTxPacket@i,w
  4688  03F9  0201               	subwf	1,w
  4689  03FA  1C03               	btfss	3,0
  4690  03FB  0008               	return
  4691                           
  4692                           ;mrf49xa_packet.c: 55: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4693  03FC  0823               	movf	Mrf49xaTxPacket@i,w
  4694  03FD  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  4695  03FE  0086               	movwf	6
  4696  03FF  0823               	movf	Mrf49xaTxPacket@i,w
  4697  0400  0724               	addwf	Mrf49xaTxPacket@packet,w
  4698  0401  00A2               	movwf	??_Mrf49xaTxPacket
  4699  0402  0A22               	incf	??_Mrf49xaTxPacket,w
  4700  0403  0084               	movwf	4
  4701  0404  0185               	clrf	5
  4702  0405  0800               	movf	0,w
  4703  0406  0081               	movwf	1
  4704  0407  0AA3               	incf	Mrf49xaTxPacket@i,f
  4705  0408  2BF5               	goto	l2063
  4706  0409                     __end_of_Mrf49xaTxPacket:	
  4707                           
  4708                           	psect	bssBANK0
  4709  002E                     __pbssBANK0:	
  4710  002E                     _mrf49Status:	
  4711  002E                     	ds	2
  4712                           
  4713                           	psect	bssBANK1
  4714  00A0                     __pbssBANK1:	
  4715  00A0                     _rfTrcvStatus:	
  4716  00A0                     	ds	79
  4717                           
  4718                           	psect	clrtext
  4719  0618                     clear_ram0:	
  4720                           ;	Called with FSR0 containing the base address, and
  4721                           ;	WREG with the size to clear
  4722                           
  4723  0618  0064               	clrwdt	;clear the watchdog before getting into this loop
  4724  0619                     clrloop0:	
  4725  0619  0180               	clrf	0	;clear RAM location pointed to by FSR
  4726  061A  3101               	addfsr 0,1
  4727  061B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4728  061C  2E19               	goto	clrloop0	;have we reached the end yet?
  4729  061D  3400               	retlw	0	;all done for this memory range, return
  4730                           
  4731                           	psect	cstackCOMMON
  4732  0070                     __pcstackCOMMON:	
  4733  0070                     ?_HandlePacket:	
  4734  0070                     ?_AdcInit:	
  4735                           ; 0 bytes @ 0x0
  4736                           
  4737  0070                     ?_ExtIntInit:	
  4738                           ; 0 bytes @ 0x0
  4739                           
  4740  0070                     ?_extInt:	
  4741                           ; 0 bytes @ 0x0
  4742                           
  4743  0070                     ?_Mrf49xaModeRx:	
  4744                           ; 0 bytes @ 0x0
  4745                           
  4746  0070                     ?_Mrf49xaModeTx:	
  4747                           ; 0 bytes @ 0x0
  4748                           
  4749  0070                     ?_Mrf49xaInit:	
  4750                           ; 0 bytes @ 0x0
  4751                           
  4752  0070                     ?_Mrf49SpiTx:	
  4753                           ; 0 bytes @ 0x0
  4754                           
  4755  0070                     ?_Mrf49RxSts:	
  4756                           ; 0 bytes @ 0x0
  4757                           
  4758  0070                     ?_Mrf49TxByte:	
  4759                           ; 0 bytes @ 0x0
  4760                           
  4761  0070                     ?_Mrf49xaTxAck:	
  4762                           ; 0 bytes @ 0x0
  4763                           
  4764  0070                     ?_Mrf49xaFreePacket:	
  4765                           ; 0 bytes @ 0x0
  4766                           
  4767  0070                     ?_Mrf49xaTick:	
  4768                           ; 0 bytes @ 0x0
  4769                           
  4770  0070                     ?_SysInitGpio:	
  4771                           ; 0 bytes @ 0x0
  4772                           
  4773  0070                     ?_main:	
  4774                           ; 0 bytes @ 0x0
  4775                           
  4776  0070                     ?i1_Mrf49xaModeRx:	
  4777                           ; 0 bytes @ 0x0
  4778                           
  4779  0070                     ?i1_Mrf49SpiTx:	
  4780                           ; 0 bytes @ 0x0
  4781                           
  4782  0070                     ??i1_Mrf49SpiTx:	
  4783                           ; 0 bytes @ 0x0
  4784                           
  4785  0070                     ??i1_Mrf49SpiRx:	
  4786                           ; 0 bytes @ 0x0
  4787                           
  4788  0070                     ?i1_Mrf49RxSts:	
  4789                           ; 0 bytes @ 0x0
  4790                           
  4791  0070                     ?i1_Mrf49TxByte:	
  4792                           ; 0 bytes @ 0x0
  4793                           
  4794  0070                     ?_Mrf49xaServe:	
  4795                           ; 0 bytes @ 0x0
  4796                           
  4797  0070                     ?_Mrf49SpiRx:	
  4798                           ; 1 bytes @ 0x0
  4799                           
  4800  0070                     ?_Mrf49RxCmd:	
  4801                           ; 1 bytes @ 0x0
  4802                           
  4803  0070                     ?_Mrf49RxByte:	
  4804                           ; 1 bytes @ 0x0
  4805                           
  4806  0070                     ?_Mrf49xaPacketPending:	
  4807                           ; 1 bytes @ 0x0
  4808                           
  4809  0070                     ?_Mrf49xaRxPacket:	
  4810                           ; 1 bytes @ 0x0
  4811                           
  4812  0070                     ?i1_Mrf49SpiRx:	
  4813                           ; 1 bytes @ 0x0
  4814                           
  4815  0070                     ?i1_Mrf49RxCmd:	
  4816                           ; 1 bytes @ 0x0
  4817                           
  4818  0070                     ?i1_Mrf49RxByte:	
  4819                           ; 1 bytes @ 0x0
  4820                           
  4821  0070                     ?i1_Mrf49xaServe:	
  4822                           ; 1 bytes @ 0x0
  4823                           
  4824  0070                     i1Mrf49SpiTx@byte:	
  4825                           ; 1 bytes @ 0x0
  4826                           
  4827  0070                     i1Mrf49SpiRx@data:	
  4828                           ; 1 bytes @ 0x0
  4829                           
  4830                           
  4831                           ; 1 bytes @ 0x0
  4832  0070                     	ds	1
  4833  0071                     ?i1_Mrf49TxCmd:	
  4834  0071                     ??i1_Mrf49RxCmd:	
  4835                           ; 0 bytes @ 0x1
  4836                           
  4837  0071                     ??i1_Mrf49RxSts:	
  4838                           ; 0 bytes @ 0x1
  4839                           
  4840  0071                     i1Mrf49TxCmd@val:	
  4841                           ; 0 bytes @ 0x1
  4842                           
  4843  0071                     i1Mrf49RxCmd@cmd:	
  4844                           ; 1 bytes @ 0x1
  4845                           
  4846                           
  4847                           ; 1 bytes @ 0x1
  4848  0071                     	ds	1
  4849  0072                     ??i1_Mrf49TxCmd:	
  4850  0072                     i1Mrf49TxCmd@cmd:	
  4851                           ; 0 bytes @ 0x2
  4852                           
  4853  0072                     i1Mrf49RxCmd@val:	
  4854                           ; 1 bytes @ 0x2
  4855                           
  4856                           
  4857                           ; 1 bytes @ 0x2
  4858  0072                     	ds	1
  4859  0073                     ??i1_Mrf49xaModeRx:	
  4860  0073                     ??i1_Mrf49RxByte:	
  4861                           ; 0 bytes @ 0x3
  4862                           
  4863  0073                     ??i1_Mrf49TxByte:	
  4864                           ; 0 bytes @ 0x3
  4865                           
  4866  0073                     i1Mrf49xaModeRx@k:	
  4867                           ; 0 bytes @ 0x3
  4868                           
  4869  0073                     i1Mrf49TxByte@byte:	
  4870                           ; 1 bytes @ 0x3
  4871                           
  4872                           
  4873                           ; 1 bytes @ 0x3
  4874  0073                     	ds	1
  4875  0074                     ??i1_Mrf49xaServe:	
  4876                           
  4877                           ; 0 bytes @ 0x4
  4878  0074                     	ds	1
  4879  0075                     i1Mrf49xaServe@data:	
  4880                           
  4881                           ; 1 bytes @ 0x5
  4882  0075                     	ds	1
  4883  0076                     ??_extInt:	
  4884                           
  4885                           ; 0 bytes @ 0x6
  4886  0076                     	ds	1
  4887  0077                     ??_Mrf49TxCmd:	
  4888  0077                     ??_HandlePacket:	
  4889                           ; 0 bytes @ 0x7
  4890                           
  4891  0077                     ??_AdcInit:	
  4892                           ; 0 bytes @ 0x7
  4893                           
  4894  0077                     ??_ExtIntInit:	
  4895                           ; 0 bytes @ 0x7
  4896                           
  4897  0077                     ??_Mrf49xaModeRx:	
  4898                           ; 0 bytes @ 0x7
  4899                           
  4900  0077                     ??_Mrf49xaModeTx:	
  4901                           ; 0 bytes @ 0x7
  4902                           
  4903  0077                     ??_Mrf49SpiTx:	
  4904                           ; 0 bytes @ 0x7
  4905                           
  4906  0077                     ??_Mrf49SpiRx:	
  4907                           ; 0 bytes @ 0x7
  4908                           
  4909  0077                     ??_Mrf49RxCmd:	
  4910                           ; 0 bytes @ 0x7
  4911                           
  4912  0077                     ??_Mrf49RxSts:	
  4913                           ; 0 bytes @ 0x7
  4914                           
  4915  0077                     ??_Mrf49RxByte:	
  4916                           ; 0 bytes @ 0x7
  4917                           
  4918  0077                     ??_Mrf49TxByte:	
  4919                           ; 0 bytes @ 0x7
  4920                           
  4921  0077                     ??_Mrf49xaPacketPending:	
  4922                           ; 0 bytes @ 0x7
  4923                           
  4924  0077                     ??_Mrf49xaTxAck:	
  4925                           ; 0 bytes @ 0x7
  4926                           
  4927  0077                     ??_Mrf49xaFreePacket:	
  4928                           ; 0 bytes @ 0x7
  4929                           
  4930  0077                     ??_Mrf49xaRxPacket:	
  4931                           ; 0 bytes @ 0x7
  4932                           
  4933  0077                     ??_SysInitGpio:	
  4934                           ; 0 bytes @ 0x7
  4935                           
  4936  0077                     ??_main:	
  4937                           ; 0 bytes @ 0x7
  4938                           
  4939                           
  4940                           	psect	cstackBANK0
  4941  0020                     __pcstackBANK0:	
  4942                           ; 0 bytes @ 0x7
  4943                           
  4944  0020                     ?_Mrf49xaTxPacket:	
  4945  0020                     Mrf49SpiTx@byte:	
  4946                           ; 1 bytes @ 0x0
  4947                           
  4948  0020                     Mrf49SpiRx@data:	
  4949                           ; 1 bytes @ 0x0
  4950                           
  4951  0020                     Mrf49xaTxPacket@response:	
  4952                           ; 1 bytes @ 0x0
  4953                           
  4954  0020                     Mrf49xaFreePacket@packet:	
  4955                           ; 1 bytes @ 0x0
  4956                           
  4957                           
  4958                           ; 1 bytes @ 0x0
  4959  0020                     	ds	1
  4960  0021                     ?_Mrf49TxCmd:	
  4961  0021                     Mrf49TxCmd@val:	
  4962                           ; 0 bytes @ 0x1
  4963                           
  4964  0021                     Mrf49RxCmd@cmd:	
  4965                           ; 1 bytes @ 0x1
  4966                           
  4967  0021                     Mrf49xaTxPacket@needAck:	
  4968                           ; 1 bytes @ 0x1
  4969                           
  4970                           
  4971                           ; 1 bytes @ 0x1
  4972  0021                     	ds	1
  4973  0022                     ??_Mrf49xaTxPacket:	
  4974  0022                     Mrf49TxCmd@cmd:	
  4975                           ; 0 bytes @ 0x2
  4976                           
  4977  0022                     Mrf49RxCmd@val:	
  4978                           ; 1 bytes @ 0x2
  4979                           
  4980                           
  4981                           ; 1 bytes @ 0x2
  4982  0022                     	ds	1
  4983  0023                     Mrf49xaModeRx@k:	
  4984  0023                     Mrf49xaModeTx@k:	
  4985                           ; 1 bytes @ 0x3
  4986                           
  4987  0023                     Mrf49TxByte@byte:	
  4988                           ; 1 bytes @ 0x3
  4989                           
  4990  0023                     Mrf49xaTxPacket@i:	
  4991                           ; 1 bytes @ 0x3
  4992                           
  4993                           
  4994                           ; 1 bytes @ 0x3
  4995  0023                     	ds	1
  4996  0024                     ??_Mrf49xaServe:	
  4997  0024                     Mrf49xaTxPacket@packet:	
  4998                           ; 0 bytes @ 0x4
  4999                           
  5000                           
  5001                           ; 1 bytes @ 0x4
  5002  0024                     	ds	1
  5003  0025                     Mrf49xaTxAck@packet:	
  5004  0025                     Mrf49xaServe@data:	
  5005                           ; 1 bytes @ 0x5
  5006                           
  5007                           
  5008                           ; 1 bytes @ 0x5
  5009  0025                     	ds	1
  5010  0026                     ??_Mrf49xaInit:	
  5011                           
  5012                           ; 0 bytes @ 0x6
  5013  0026                     	ds	1
  5014  0027                     HandlePacket@sendMsg:	
  5015                           
  5016                           ; 1 bytes @ 0x7
  5017  0027                     	ds	1
  5018  0028                     HandlePacket@sendAck:	
  5019                           
  5020                           ; 1 bytes @ 0x8
  5021  0028                     	ds	1
  5022  0029                     Mrf49xaInit@k:	
  5023  0029                     HandlePacket@packet:	
  5024                           ; 1 bytes @ 0x9
  5025                           
  5026                           
  5027                           ; 1 bytes @ 0x9
  5028  0029                     	ds	1
  5029  002A                     ??_Mrf49xaTick:	
  5030                           
  5031                           ; 0 bytes @ 0xA
  5032  002A                     	ds	2
  5033  002C                     Mrf49xaTick@timeout:	
  5034                           
  5035                           ; 1 bytes @ 0xC
  5036  002C                     	ds	1
  5037  002D                     Mrf49xaTick@packet:	
  5038                           
  5039                           ; 1 bytes @ 0xD
  5040  002D                     	ds	1
  5041                           
  5042                           	psect	text5
  5043  05F7                     __ptext5:	
  5044 ;; *************** function _Mrf49xaTxAck *****************
  5045 ;; Defined at:
  5046 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5049 ;;		 -> NULL(0), rfTrcvStatus(79), 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  5052 ;;		 -> NULL(0), rfTrcvStatus(79), 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 1F/0
  5059 ;;		On exit  : 1E/0
  5060 ;;		Unchanged: FFFE0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5062 ;;      Params:         0       0       0       0
  5063 ;;      Locals:         0       1       0       0
  5064 ;;      Temps:          0       0       0       0
  5065 ;;      Totals:         0       1       0       0
  5066 ;;Total ram usage:        1 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    6
  5069 ;; This function calls:
  5070 ;;		_Mrf49xaTxPacket
  5071 ;; This function is called by:
  5072 ;;		_HandlePacket
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _Mrf49xaTxAck
  5078  05F7                     _Mrf49xaTxAck:	
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5082                           ;Mrf49xaTxAck@packet stored from wreg
  5083  05F7  00A5               	movwf	Mrf49xaTxAck@packet
  5084                           
  5085                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  5086  05F8  3E06               	addlw	6
  5087  05F9  0086               	movwf	6
  5088  05FA  0187               	clrf	7
  5089  05FB  0825               	movf	Mrf49xaTxAck@packet,w
  5090  05FC  3E04               	addlw	4
  5091  05FD  0084               	movwf	4
  5092  05FE  0185               	clrf	5
  5093  05FF  0800               	movf	0,w
  5094  0600  0081               	movwf	1
  5095                           
  5096                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  5097  0601  0825               	movf	Mrf49xaTxAck@packet,w
  5098  0602  3E07               	addlw	7
  5099  0603  0086               	movwf	6
  5100  0604  0825               	movf	Mrf49xaTxAck@packet,w
  5101  0605  3E16               	addlw	22
  5102  0606  0084               	movwf	4
  5103  0607  0800               	movf	0,w
  5104  0608  0081               	movwf	1
  5105                           
  5106                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  5107  0609  0825               	movf	Mrf49xaTxAck@packet,w
  5108  060A  3E04               	addlw	4
  5109  060B  0086               	movwf	6
  5110  060C  30A1               	movlw	161
  5111  060D  0081               	movwf	1
  5112                           
  5113                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  5114  060E  0A25               	incf	Mrf49xaTxAck@packet,w
  5115  060F  0086               	movwf	6
  5116  0610  3002               	movlw	2
  5117  0611  0081               	movwf	1
  5118                           
  5119                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  5120  0612  01A0               	clrf	?_Mrf49xaTxPacket
  5121  0613  0AA0               	incf	?_Mrf49xaTxPacket,f
  5122  0614  01A1               	clrf	?_Mrf49xaTxPacket+1
  5123  0615  0825               	movf	Mrf49xaTxAck@packet,w
  5124  0616  3183  2BC7         	ljmp	_Mrf49xaTxPacket
  5125  0618                     __end_of_Mrf49xaTxAck:	
  5126                           
  5127                           	psect	intentry
  5128  0004                     __pintentry:	
  5129 ;; *************** function _extInt *****************
  5130 ;; Defined at:
  5131 ;;		line 32 in file "../../../src/bsp/pic16/interrupt.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;		None
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;		None
  5136 ;; Return value:  Size  Location     Type
  5137 ;;		None               void
  5138 ;; Registers used:
  5139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 1F/0
  5143 ;;		Unchanged: FFE00/0
  5144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5145 ;;      Params:         0       0       0       0
  5146 ;;      Locals:         0       0       0       0
  5147 ;;      Temps:          1       0       0       0
  5148 ;;      Totals:         1       0       0       0
  5149 ;;Total ram usage:        1 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    4
  5152 ;; This function calls:
  5153 ;;		i1_Mrf49xaServe
  5154 ;; This function is called by:
  5155 ;;		Interrupt level 1
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159  0004                     _extInt:	
  5160                           
  5161                           ;incstack = 0
  5162                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5163  0004  3180               	pagesel	$
  5164  0005  0020               	movlb	0	; select bank0
  5165  0006  087F               	movf	127,w
  5166  0007  00F6               	movwf	??_extInt
  5167                           
  5168                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  5169  0008  1C8B               	btfss	11,1	;volatile
  5170  0009  2811               	goto	i1l131
  5171                           
  5172                           ;interrupt.c: 34: {
  5173                           ;interrupt.c: 35: if (Mrf49xaServe())
  5174  000A  3184  2413  3180   	fcall	i1_Mrf49xaServe
  5175  000D  3A00               	xorlw	0
  5176  000E  1903               	skipnz
  5177  000F  2811               	goto	i1l131
  5178                           
  5179                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  5180  0010  108B               	bcf	11,1	;volatile
  5181  0011                     i1l131:	
  5182  0011  0876               	movf	??_extInt,w
  5183  0012  00FF               	movwf	127
  5184  0013  0009               	retfie
  5185  0014                     __end_of_extInt:	
  5186                           
  5187                           	psect	text26
  5188  0409                     __ptext26:	
  5189 ;; *************** function i1_Mrf49RxCmd *****************
  5190 ;; Defined at:
  5191 ;;		line 17 in file "../../../src/devices/mrf49xa_cmd.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  Mrf49RxCmd      1    wreg     unsigned char 
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  Mrf49RxCmd      1    1[COMMON] unsigned char 
  5196 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      unsigned char 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, pclath, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 1C/1
  5203 ;;		On exit  : 1F/2
  5204 ;;		Unchanged: FFE00/0
  5205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5206 ;;      Params:         0       0       0       0
  5207 ;;      Locals:         2       0       0       0
  5208 ;;      Temps:          0       0       0       0
  5209 ;;      Totals:         2       0       0       0
  5210 ;;Total ram usage:        2 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    1
  5213 ;; This function calls:
  5214 ;;		i1_Mrf49SpiTx
  5215 ;;		i1_Mrf49SpiRx
  5216 ;; This function is called by:
  5217 ;;		i1_Mrf49RxByte
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           
  5222                           ;psect for function i1_Mrf49RxCmd
  5223  0409                     i1_Mrf49RxCmd:	
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  5227                           ;i1Mrf49RxCmd@cmd stored from wreg
  5228  0409  00F1               	movwf	i1Mrf49RxCmd@cmd
  5229                           
  5230                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  5231  040A  0022               	movlb	2	; select bank2
  5232  040B  130E               	bcf	14,6	;volatile
  5233                           
  5234                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  5235  040C  0871               	movf	i1Mrf49RxCmd@cmd,w
  5236  040D  2521  3184         	fcall	i1_Mrf49SpiTx
  5237                           
  5238                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  5239  040F  257A               	fcall	i1_Mrf49SpiRx
  5240  0410  00F2               	movwf	i1Mrf49RxCmd@val
  5241                           
  5242                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  5243  0411  170E               	bsf	14,6	;volatile
  5244                           
  5245                           ;mrf49xa_cmd.c: 25: return val;
  5246  0412  0008               	return
  5247  0413                     __end_ofi1_Mrf49RxCmd:	
  5248  0413                     __ptext23:	
  5249 ;; *************** function i1_Mrf49xaServe *****************
  5250 ;; Defined at:
  5251 ;;		line 9 in file "../../../src/devices/mrf49xa_data.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      unsigned char 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 1F/0
  5262 ;;		On exit  : 1F/0
  5263 ;;		Unchanged: FFE00/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5265 ;;      Params:         0       0       0       0
  5266 ;;      Locals:         1       0       0       0
  5267 ;;      Temps:          1       0       0       0
  5268 ;;      Totals:         2       0       0       0
  5269 ;;Total ram usage:        2 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    3
  5272 ;; This function calls:
  5273 ;;		i1_Mrf49xaModeRx
  5274 ;;		i1_Mrf49RxSts
  5275 ;;		i1_Mrf49RxByte
  5276 ;;		i1_Mrf49TxByte
  5277 ;; This function is called by:
  5278 ;;		_extInt
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function i1_Mrf49xaServe
  5284  0413                     i1_Mrf49xaServe:	
  5285                           
  5286                           ;mrf49xa_data.c: 10: uint8_t data;
  5287                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5291  0413  256C  3184         	fcall	i1_Mrf49RxSts
  5292                           
  5293                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  5294  0415  0020               	movlb	0	; select bank0
  5295  0416  082E               	movf	_mrf49Status,w
  5296  0417  3AFF               	xorlw	255
  5297  0418  1D03               	skipz
  5298  0419  2C1E               	goto	i1l373
  5299  041A  082F               	movf	_mrf49Status+1,w
  5300  041B  3AFF               	xorlw	255
  5301  041C  1903               	btfsc	3,2
  5302  041D  0008               	return
  5303  041E                     i1l373:	
  5304                           ;mrf49xa_data.c: 23: {
  5305                           
  5306                           
  5307                           ;mrf49xa_data.c: 25: }
  5308                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  5309  041E  1AAE               	btfsc	_mrf49Status,5
  5310  041F  2C2A               	goto	i1l2313
  5311  0420  2C36               	goto	i1l374
  5312  0421                     i1l2309:	
  5313                           
  5314                           ;mrf49xa_data.c: 33: case RECV_DATA:
  5315                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  5316  0421  2514  3184         	fcall	i1_Mrf49RxByte
  5317  0423  00F5               	movwf	i1Mrf49xaServe@data
  5318                           
  5319                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  5320  0424  2514  3184         	fcall	i1_Mrf49RxByte
  5321  0426  00F5               	movwf	i1Mrf49xaServe@data
  5322                           
  5323                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  5324  0427  24EC  3184         	fcall	i1_Mrf49xaModeRx
  5325                           
  5326                           ;mrf49xa_data.c: 44: break;
  5327  0429  2C36               	goto	i1l374
  5328  042A                     i1l2313:	
  5329  042A  0021               	movlb	1	; select bank1
  5330  042B  0820               	movf	_rfTrcvStatus^(0+128),w
  5331                           
  5332                           ; Switch size 1, requested type "speed"
  5333                           ; Number of cases is 3, Range of values is 0 to 2
  5334                           ; switch strategies available:
  5335                           ; Name         Instructions Cycles
  5336                           ; simple_byte           10     6 (average)
  5337                           ; direct_byte           12     6 (fixed)
  5338                           ; jumptable            260     6 (fixed)
  5339                           ; rangetable             7     4 (fixed)
  5340                           ; spacedrange           11     6 (fixed)
  5341                           ; locatedrange           3     3 (fixed)
  5342                           ;	Chosen strategy is simple_byte
  5343  042C  3A00               	xorlw	0	; case 0
  5344  042D  1903               	skipnz
  5345  042E  2C21               	goto	i1l2309
  5346  042F  3A01               	xorlw	1	; case 1
  5347  0430  1903               	skipnz
  5348  0431  2C21               	goto	i1l2309
  5349  0432  3A03               	xorlw	3	; case 2
  5350  0433  1903               	skipnz
  5351  0434  2C36               	goto	i1l374
  5352  0435  2C36               	goto	i1l374
  5353  0436                     i1l374:	
  5354                           
  5355                           ;mrf49xa_data.c: 52: }
  5356                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  5357  0436  0020               	movlb	0	; select bank0
  5358  0437  1BAE               	btfsc	_mrf49Status,7
  5359  0438  2CD6               	goto	i1l2401
  5360  0439  2CE2               	goto	i1l2403
  5361  043A                     i1l2317:	
  5362                           
  5363                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  5364  043A  2514  3184         	fcall	i1_Mrf49RxByte
  5365  043C  00F5               	movwf	i1Mrf49xaServe@data
  5366                           
  5367                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5368  043D  0020               	movlb	0	; select bank0
  5369  043E  1BAF               	btfsc	_mrf49Status+1,7
  5370  043F  2C43               	goto	i1l2323
  5371  0440                     i1l2321:	
  5372                           
  5373                           ;mrf49xa_data.c: 72: {
  5374                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  5375  0440  24EC  3184         	fcall	i1_Mrf49xaModeRx
  5376                           
  5377                           ;mrf49xa_data.c: 74: break;
  5378  0442  2CE2               	goto	i1l2403
  5379  0443                     i1l2323:	
  5380                           
  5381                           ;mrf49xa_data.c: 75: }
  5382                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  5383  0443  0021               	movlb	1	; select bank1
  5384  0444  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  5385  0445  1D03               	skipz
  5386  0446  2C49               	goto	i1l2327
  5387  0447  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  5388  0448  2C4D               	goto	L4
  5389  0449                     i1l2327:	
  5390                           
  5391                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  5392  0449  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  5393  044A  1D03               	skipz
  5394  044B  2C40               	goto	i1l2321
  5395  044C  30D3               	movlw	(_rfTrcvStatus+51)& (0+255)
  5396  044D                     L4:	
  5397  044D  00EC               	movwf	(_rfTrcvStatus+76)^(0+128)
  5398                           
  5399                           ;mrf49xa_data.c: 85: }
  5400                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  5401  044E  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  5402  044F  0086               	movwf	6
  5403  0450  0187               	clrf	7
  5404  0451  0875               	movf	i1Mrf49xaServe@data,w
  5405  0452  0081               	movwf	1
  5406                           
  5407                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  5408  0453  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5409  0454  3E16               	addlw	22
  5410  0455  0086               	movwf	6
  5411  0456  0181               	clrf	1
  5412                           
  5413                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  5414  0457  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5415  0458  0086               	movwf	6
  5416  0459  3003               	movlw	3
  5417  045A  0081               	movwf	1
  5418                           
  5419                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  5420  045B  01A0               	clrf	_rfTrcvStatus^(0+128)
  5421  045C  0AA0               	incf	_rfTrcvStatus^(0+128),f
  5422                           
  5423                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  5424  045D  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  5425  045E  2C8B               	goto	i1l2363
  5426  045F                     i1l2343:	
  5427                           ;mrf49xa_data.c: 93: break;
  5428                           
  5429                           
  5430                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  5431  045F  2514  3184         	fcall	i1_Mrf49RxByte
  5432  0461  00F5               	movwf	i1Mrf49xaServe@data
  5433                           
  5434                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5435  0462  0020               	movlb	0	; select bank0
  5436  0463  1BAF               	btfsc	_mrf49Status+1,7
  5437  0464  2C6C               	goto	i1l2351
  5438                           
  5439                           ;mrf49xa_data.c: 102: {
  5440                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5441  0465  0021               	movlb	1	; select bank1
  5442  0466  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5443  0467  0086               	movwf	6
  5444  0468  3004               	movlw	4
  5445  0469  0187               	clrf	7
  5446  046A  0081               	movwf	1
  5447  046B  2C40               	goto	i1l2321
  5448  046C                     i1l2351:	
  5449                           
  5450                           ;mrf49xa_data.c: 106: }
  5451                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  5452  046C  0021               	movlb	1	; select bank1
  5453  046D  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  5454  046E  0086               	movwf	6
  5455  046F  0187               	clrf	7
  5456  0470  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5457  0471  0601               	xorwf	1,w
  5458  0472  1D03               	skipz
  5459  0473  2C83               	goto	i1l2361
  5460                           
  5461                           ;mrf49xa_data.c: 109: {
  5462                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  5463  0474  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5464  0475  3E16               	addlw	22
  5465  0476  0086               	movwf	6
  5466  0477  0875               	movf	i1Mrf49xaServe@data,w
  5467  0478  0081               	movwf	1
  5468                           
  5469                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5470  0479  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5471  047A  0086               	movwf	6
  5472  047B  3004               	movlw	4
  5473  047C  0081               	movwf	1
  5474                           
  5475                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  5476  047D  24EC  3184         	fcall	i1_Mrf49xaModeRx
  5477                           
  5478                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  5479  047F  0022               	movlb	2	; select bank2
  5480  0480  150E               	bsf	14,2	;volatile
  5481                           
  5482                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  5483  0481  110E               	bcf	14,2	;volatile
  5484                           
  5485                           ;mrf49xa_data.c: 123: }
  5486  0482  2CE2               	goto	i1l2403
  5487  0483                     i1l2361:	
  5488                           
  5489                           ;mrf49xa_data.c: 124: else
  5490                           ;mrf49xa_data.c: 125: {
  5491                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  5492  0483  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5493  0484  076C               	addwf	(_rfTrcvStatus+76)^(0+128),w
  5494  0485  00F4               	movwf	??i1_Mrf49xaServe
  5495  0486  0A74               	incf	??i1_Mrf49xaServe,w
  5496  0487  0086               	movwf	6
  5497  0488  0187               	clrf	7
  5498  0489  0875               	movf	i1Mrf49xaServe@data,w
  5499  048A  0081               	movwf	1
  5500  048B                     i1l2363:	
  5501  048B  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  5502  048C  2CE2               	goto	i1l2403
  5503  048D                     i1l2365:	
  5504                           
  5505                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  5506  048D  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  5507                           
  5508                           ;mrf49xa_data.c: 134: switch (rfTrcvStatus.hwByte)
  5509  048E  2CC5               	goto	i1l2397
  5510  048F                     i1l2367:	
  5511                           
  5512                           ;mrf49xa_data.c: 137: Mrf49TxByte(0x2D);
  5513  048F  302D               	movlw	45
  5514  0490  24E7  3184         	fcall	i1_Mrf49TxByte
  5515                           
  5516                           ;mrf49xa_data.c: 138: break;
  5517  0492  2CE2               	goto	i1l2403
  5518  0493                     i1l2369:	
  5519                           
  5520                           ;mrf49xa_data.c: 141: Mrf49TxByte(0xD4);
  5521  0493  30D4               	movlw	212
  5522  0494  24E7  3184         	fcall	i1_Mrf49TxByte
  5523                           
  5524                           ;mrf49xa_data.c: 142: rfTrcvStatus.hwByte = -1;
  5525  0496  30FF               	movlw	255
  5526  0497  0021               	movlb	1	; select bank1
  5527  0498  2CAD               	goto	L5
  5528  0499                     i1l2373:	
  5529                           ;mrf49xa_data.c: 143: break;
  5530                           
  5531                           
  5532                           ;mrf49xa_data.c: 147: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5533  0499  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5534  049A  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5535  049B  0086               	movwf	6
  5536  049C  0187               	clrf	7
  5537  049D  0801               	movf	1,w
  5538  049E  24E7  3184         	fcall	i1_Mrf49TxByte
  5539                           
  5540                           ;mrf49xa_data.c: 148: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStat
      +                          us.txPacket.raw[rfTrcvStatus.hwByte];
  5541  04A0  0021               	movlb	1	; select bank1
  5542  04A1  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5543  04A2  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5544  04A3  0086               	movwf	6
  5545  04A4  0187               	clrf	7
  5546  04A5  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5547  04A6  0601               	xorwf	1,w
  5548  04A7  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  5549                           
  5550                           ;mrf49xa_data.c: 149: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5551  04A8  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5552  04A9  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  5553  04AA  1D03               	skipz
  5554  04AB  2CE2               	goto	i1l2403
  5555                           
  5556                           ;mrf49xa_data.c: 150: {
  5557                           ;mrf49xa_data.c: 151: rfTrcvStatus.hwByte = 48;
  5558  04AC  3030               	movlw	48
  5559  04AD                     L5:	
  5560  04AD  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  5561  04AE  2CE2               	goto	i1l2403
  5562  04AF                     i1l2381:	
  5563                           
  5564                           ;mrf49xa_data.c: 156: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5565  04AF  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5566  04B0  24E7  3184         	fcall	i1_Mrf49TxByte
  5567                           
  5568                           ;mrf49xa_data.c: 157: break;
  5569  04B2  2CE2               	goto	i1l2403
  5570  04B3                     i1l2383:	
  5571                           
  5572                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  5573  04B3  3000               	movlw	0
  5574  04B4  24E7  3184         	fcall	i1_Mrf49TxByte
  5575                           
  5576                           ;mrf49xa_data.c: 161: break;
  5577  04B6  2CE2               	goto	i1l2403
  5578  04B7                     i1l2385:	
  5579                           
  5580                           ;mrf49xa_data.c: 164: Mrf49TxByte(0x00);
  5581  04B7  3000               	movlw	0
  5582  04B8  24E7  3184         	fcall	i1_Mrf49TxByte
  5583                           
  5584                           ;mrf49xa_data.c: 165: Mrf49xaModeRx();
  5585  04BA  24EC  3184         	fcall	i1_Mrf49xaModeRx
  5586                           
  5587                           ;mrf49xa_data.c: 167: rfTrcvStatus.txPacket.retry = 0;
  5588  04BC  30F0               	movlw	-16
  5589  04BD  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  5590                           
  5591                           ;mrf49xa_data.c: 169: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  5592  04BE  0B38               	decfsz	(_rfTrcvStatus^(0+128)+24),w
  5593  04BF  2CC3               	goto	i1l2393
  5594                           
  5595                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5596  04C0  3002               	movlw	2
  5597  04C1  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  5598  04C2  2CE2               	goto	i1l2403
  5599  04C3                     i1l2393:	
  5600                           
  5601                           ;mrf49xa_data.c: 171: else
  5602                           ;mrf49xa_data.c: 172: rfTrcvStatus.txPacket.state = PKT_FREE;
  5603  04C3  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5604  04C4  2CE2               	goto	i1l2403
  5605  04C5                     i1l2397:	
  5606  04C5  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5607                           
  5608                           ; Switch size 1, requested type "speed"
  5609                           ; Number of cases is 5, Range of values is 49 to 101
  5610                           ; switch strategies available:
  5611                           ; Name         Instructions Cycles
  5612                           ; simple_byte           16     9 (average)
  5613                           ; direct_byte          115     9 (fixed)
  5614                           ; jumptable            263     9 (fixed)
  5615                           ;	Chosen strategy is simple_byte
  5616  04C6  3A31               	xorlw	49	; case 49
  5617  04C7  1903               	skipnz
  5618  04C8  2CAF               	goto	i1l2381
  5619  04C9  3A03               	xorlw	3	; case 50
  5620  04CA  1903               	skipnz
  5621  04CB  2CB3               	goto	i1l2383
  5622  04CC  3A01               	xorlw	1	; case 51
  5623  04CD  1903               	skipnz
  5624  04CE  2CB7               	goto	i1l2385
  5625  04CF  3A57               	xorlw	87	; case 100
  5626  04D0  1903               	skipnz
  5627  04D1  2C8F               	goto	i1l2367
  5628  04D2  3A01               	xorlw	1	; case 101
  5629  04D3  1903               	skipnz
  5630  04D4  2C93               	goto	i1l2369
  5631  04D5  2C99               	goto	i1l2373
  5632  04D6                     i1l2401:	
  5633  04D6  0021               	movlb	1	; select bank1
  5634  04D7  0820               	movf	_rfTrcvStatus^(0+128),w
  5635                           
  5636                           ; Switch size 1, requested type "speed"
  5637                           ; Number of cases is 3, Range of values is 0 to 2
  5638                           ; switch strategies available:
  5639                           ; Name         Instructions Cycles
  5640                           ; simple_byte           10     6 (average)
  5641                           ; direct_byte           12     6 (fixed)
  5642                           ; jumptable            260     6 (fixed)
  5643                           ; rangetable             7     4 (fixed)
  5644                           ; spacedrange           11     6 (fixed)
  5645                           ; locatedrange           3     3 (fixed)
  5646                           ;	Chosen strategy is simple_byte
  5647  04D8  3A00               	xorlw	0	; case 0
  5648  04D9  1903               	skipnz
  5649  04DA  2C3A               	goto	i1l2317
  5650  04DB  3A01               	xorlw	1	; case 1
  5651  04DC  1903               	skipnz
  5652  04DD  2C5F               	goto	i1l2343
  5653  04DE  3A03               	xorlw	3	; case 2
  5654  04DF  1903               	skipnz
  5655  04E0  2C8D               	goto	i1l2365
  5656  04E1  2CE2               	goto	i1l2403
  5657  04E2                     i1l2403:	
  5658                           
  5659                           ;mrf49xa_data.c: 179: }
  5660                           ;mrf49xa_data.c: 193: return PORTAbits.RA2 == 1 ? 1 : 0;
  5661  04E2  3000               	movlw	0
  5662  04E3  0020               	movlb	0	; select bank0
  5663  04E4  190C               	btfsc	12,2	;volatile
  5664  04E5  3001               	movlw	1
  5665  04E6  0008               	return
  5666  04E7                     __end_ofi1_Mrf49xaServe:	
  5667  04E7                     __ptext24:	
  5668 ;; *************** function i1_Mrf49TxByte *****************
  5669 ;; Defined at:
  5670 ;;		line 47 in file "../../../src/devices/mrf49xa_cmd.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;  Mrf49TxByte     1    wreg     unsigned char 
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;  Mrf49TxByte     1    3[COMMON] unsigned char 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;		None               void
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0, pclath, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 1E/1
  5681 ;;		On exit  : 1F/2
  5682 ;;		Unchanged: FFE00/0
  5683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5684 ;;      Params:         0       0       0       0
  5685 ;;      Locals:         1       0       0       0
  5686 ;;      Temps:          0       0       0       0
  5687 ;;      Totals:         1       0       0       0
  5688 ;;Total ram usage:        1 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    2
  5691 ;; This function calls:
  5692 ;;		i1_Mrf49TxCmd
  5693 ;; This function is called by:
  5694 ;;		i1_Mrf49xaServe
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           
  5699                           ;psect for function i1_Mrf49TxByte
  5700  04E7                     i1_Mrf49TxByte:	
  5701                           
  5702                           ;incstack = 0
  5703                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5704                           ;i1Mrf49TxByte@byte stored from wreg
  5705  04E7  00F3               	movwf	i1Mrf49TxByte@byte
  5706                           
  5707                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  5708  04E8  00F1               	movwf	?i1_Mrf49TxCmd
  5709  04E9  30B8               	movlw	184
  5710  04EA  2517               	fcall	i1_Mrf49TxCmd
  5711  04EB  0008               	return
  5712  04EC                     __end_ofi1_Mrf49TxByte:	
  5713  04EC                     __ptext29:	
  5714 ;; *************** function i1_Mrf49xaModeRx *****************
  5715 ;; Defined at:
  5716 ;;		line 72 in file "../../../src/devices/mrf49xa.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;		None
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;		None               void
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, pclath, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 1C/2
  5727 ;;		On exit  : 1F/1
  5728 ;;		Unchanged: FFE00/0
  5729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5730 ;;      Params:         0       0       0       0
  5731 ;;      Locals:         1       0       0       0
  5732 ;;      Temps:          0       0       0       0
  5733 ;;      Totals:         1       0       0       0
  5734 ;;Total ram usage:        1 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    2
  5737 ;; This function calls:
  5738 ;;		i1_Mrf49TxCmd
  5739 ;; This function is called by:
  5740 ;;		i1_Mrf49xaServe
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function i1_Mrf49xaModeRx
  5746  04EC                     i1_Mrf49xaModeRx:	
  5747  04EC  30C1               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5748                           
  5749                           ;mrf49xa.c: 73: UI08_t k;
  5750                           ;mrf49xa.c: 74: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  5751                           
  5752                           ;incstack = 0
  5753                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5754  04ED  01F3               	clrf	i1Mrf49xaModeRx@k
  5755  04EE  3185               	movlp	high __stringtab
  5756  04EF  000A               	callw
  5757  04F0  3184               	pagesel	$	;select current page
  5758  04F1  3800               	iorlw	0
  5759  04F2  1903               	btfsc	3,2
  5760  04F3  2D10               	goto	i1l2291
  5761  04F4                     i1l2283:	
  5762  04F4  3573               	lslf	i1Mrf49xaModeRx@k,w
  5763  04F5  3EE3               	addlw	low (_mrfRegset_Rx| (0+32768))
  5764  04F6  3185               	movlp	high __stringtab
  5765  04F7  000A               	callw
  5766  04F8  3184               	pagesel	$	;select current page
  5767  04F9  3A55               	xorlw	85
  5768  04FA  1903               	skipnz
  5769  04FB  2D08               	goto	i1l2287
  5770  04FC  3573               	lslf	i1Mrf49xaModeRx@k,w
  5771  04FD  3EE4               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5772  04FE  3185               	movlp	high __stringtab
  5773  04FF  000A               	callw
  5774  0500  00F1               	movwf	?i1_Mrf49TxCmd
  5775  0501  3573               	lslf	i1Mrf49xaModeRx@k,w
  5776  0502  3EE3               	addlw	low (_mrfRegset_Rx| (0+32768))
  5777  0503  3185               	movlp	high __stringtab
  5778  0504  000A               	callw
  5779  0505  3184               	pagesel	$	;select current page
  5780  0506  3185  2517         	fcall	i1_Mrf49TxCmd
  5781  0508                     i1l2287:	
  5782  0508  30C1               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5783  0509  0AF3               	incf	i1Mrf49xaModeRx@k,f
  5784  050A  3185               	movlp	high __stringtab
  5785  050B  000A               	callw
  5786  050C  3184               	pagesel	$	;select current page
  5787  050D  0273               	subwf	i1Mrf49xaModeRx@k,w
  5788  050E  1C03               	skipc
  5789  050F  2CF4               	goto	i1l2283
  5790  0510                     i1l2291:	
  5791                           
  5792                           ;mrf49xa.c: 76: rfTrcvStatus.state = RECV_IDLE;
  5793  0510  0021               	movlb	1	; select bank1
  5794  0511  01A0               	clrf	_rfTrcvStatus^(0+128)
  5795                           
  5796                           ;mrf49xa.c: 77: rfTrcvStatus.hwByte = 0;
  5797  0512  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  5798  0513  0008               	return
  5799  0514                     __end_ofi1_Mrf49xaModeRx:	
  5800  0514                     __ptext25:	
  5801 ;; *************** function i1_Mrf49RxByte *****************
  5802 ;; Defined at:
  5803 ;;		line 42 in file "../../../src/devices/mrf49xa_cmd.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;		None
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      unsigned char 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0, pclath, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 1C/1
  5814 ;;		On exit  : 1F/2
  5815 ;;		Unchanged: FFE00/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5817 ;;      Params:         0       0       0       0
  5818 ;;      Locals:         0       0       0       0
  5819 ;;      Temps:          0       0       0       0
  5820 ;;      Totals:         0       0       0       0
  5821 ;;Total ram usage:        0 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    2
  5824 ;; This function calls:
  5825 ;;		i1_Mrf49RxCmd
  5826 ;; This function is called by:
  5827 ;;		i1_Mrf49xaServe
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           
  5832                           ;psect for function i1_Mrf49RxByte
  5833  0514                     i1_Mrf49RxByte:	
  5834                           
  5835                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  5836                           
  5837                           ;incstack = 0
  5838                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5839  0514  30B0               	movlw	176
  5840  0515  2409               	fcall	i1_Mrf49RxCmd
  5841  0516  0008               	return
  5842  0517                     __end_ofi1_Mrf49RxByte:	
  5843  0517                     __ptext30:	
  5844 ;; *************** function i1_Mrf49TxCmd *****************
  5845 ;; Defined at:
  5846 ;;		line 7 in file "../../../src/devices/mrf49xa_cmd.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  Mrf49TxCmd      1    wreg     unsigned char 
  5849 ;;  Mrf49TxCmd      1    1[COMMON] unsigned char 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  Mrf49TxCmd      1    2[COMMON] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;		None               void
  5854 ;; Registers used:
  5855 ;;		wreg, status,2, status,0, pclath, cstack
  5856 ;; Tracked objects:
  5857 ;;		On entry : 1C/1
  5858 ;;		On exit  : 1F/2
  5859 ;;		Unchanged: FFE00/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5861 ;;      Params:         1       0       0       0
  5862 ;;      Locals:         1       0       0       0
  5863 ;;      Temps:          0       0       0       0
  5864 ;;      Totals:         2       0       0       0
  5865 ;;Total ram usage:        2 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    1
  5868 ;; This function calls:
  5869 ;;		i1_Mrf49SpiTx
  5870 ;; This function is called by:
  5871 ;;		i1_Mrf49xaModeRx
  5872 ;;		i1_Mrf49TxByte
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function i1_Mrf49TxCmd
  5878  0517                     i1_Mrf49TxCmd:	
  5879                           
  5880                           ;incstack = 0
  5881                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5882                           ;i1Mrf49TxCmd@cmd stored from wreg
  5883  0517  00F2               	movwf	i1Mrf49TxCmd@cmd
  5884                           
  5885                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  5886  0518  0022               	movlb	2	; select bank2
  5887  0519  130E               	bcf	14,6	;volatile
  5888                           
  5889                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5890  051A  0872               	movf	i1Mrf49TxCmd@cmd,w
  5891  051B  2521  3184         	fcall	i1_Mrf49SpiTx
  5892                           
  5893                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5894  051D  0871               	movf	i1Mrf49TxCmd@val,w
  5895  051E  2521               	fcall	i1_Mrf49SpiTx
  5896                           
  5897                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  5898  051F  170E               	bsf	14,6	;volatile
  5899  0520  0008               	return
  5900  0521                     __end_ofi1_Mrf49TxCmd:	
  5901  0521                     __ptext31:	
  5902 ;; *************** function i1_Mrf49SpiTx *****************
  5903 ;; Defined at:
  5904 ;;		line 4 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  Mrf49SpiTx      1    wreg     unsigned char 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  Mrf49SpiTx      1    0[COMMON] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;		None               void
  5911 ;; Registers used:
  5912 ;;		wreg
  5913 ;; Tracked objects:
  5914 ;;		On entry : 1F/2
  5915 ;;		On exit  : 1F/2
  5916 ;;		Unchanged: FFE00/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5918 ;;      Params:         0       0       0       0
  5919 ;;      Locals:         1       0       0       0
  5920 ;;      Temps:          0       0       0       0
  5921 ;;      Totals:         1       0       0       0
  5922 ;;Total ram usage:        1 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		i1_Mrf49TxCmd
  5928 ;;		i1_Mrf49RxCmd
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           
  5933                           ;psect for function i1_Mrf49SpiTx
  5934  0521                     i1_Mrf49SpiTx:	
  5935                           
  5936                           ;incstack = 0
  5937                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  5938                           ;i1Mrf49SpiTx@byte stored from wreg
  5939  0521  00F0               	movwf	i1Mrf49SpiTx@byte
  5940                           
  5941                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  5942  0522  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  5943  0523  2D26               	goto	i1l205
  5944  0524  178D               	bsf	13,7	;volatile
  5945  0525  2D27               	goto	i1l206
  5946  0526                     i1l205:	
  5947  0526  138D               	bcf	13,7	;volatile
  5948  0527                     i1l206:	
  5949  0527  178E               	bsf	14,7	;volatile
  5950  0528  0000               	nop	;# 
  5951  0529  0022               	movlb	2	; select bank2
  5952  052A  138E               	bcf	14,7	;volatile
  5953  052B  1F70               	btfss	i1Mrf49SpiTx@byte,6
  5954  052C  2D2F               	goto	i1l209
  5955  052D  178D               	bsf	13,7	;volatile
  5956  052E  2D30               	goto	i1l210
  5957  052F                     i1l209:	
  5958  052F  138D               	bcf	13,7	;volatile
  5959  0530                     i1l210:	
  5960  0530  178E               	bsf	14,7	;volatile
  5961  0531  0000               	nop	;# 
  5962  0532  0022               	movlb	2	; select bank2
  5963  0533  138E               	bcf	14,7	;volatile
  5964  0534  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  5965  0535  2D38               	goto	i1l213
  5966  0536  178D               	bsf	13,7	;volatile
  5967  0537  2D39               	goto	i1l214
  5968  0538                     i1l213:	
  5969  0538  138D               	bcf	13,7	;volatile
  5970  0539                     i1l214:	
  5971  0539  178E               	bsf	14,7	;volatile
  5972  053A  0000               	nop	;# 
  5973  053B  0022               	movlb	2	; select bank2
  5974  053C  138E               	bcf	14,7	;volatile
  5975  053D  1E70               	btfss	i1Mrf49SpiTx@byte,4
  5976  053E  2D41               	goto	i1l217
  5977  053F  178D               	bsf	13,7	;volatile
  5978  0540  2D42               	goto	i1l218
  5979  0541                     i1l217:	
  5980  0541  138D               	bcf	13,7	;volatile
  5981  0542                     i1l218:	
  5982  0542  178E               	bsf	14,7	;volatile
  5983  0543  0000               	nop	;# 
  5984  0544  0022               	movlb	2	; select bank2
  5985  0545  138E               	bcf	14,7	;volatile
  5986  0546  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  5987  0547  2D4A               	goto	i1l221
  5988  0548  178D               	bsf	13,7	;volatile
  5989  0549  2D4B               	goto	i1l222
  5990  054A                     i1l221:	
  5991  054A  138D               	bcf	13,7	;volatile
  5992  054B                     i1l222:	
  5993  054B  178E               	bsf	14,7	;volatile
  5994  054C  0000               	nop	;# 
  5995  054D  0022               	movlb	2	; select bank2
  5996  054E  138E               	bcf	14,7	;volatile
  5997  054F  1D70               	btfss	i1Mrf49SpiTx@byte,2
  5998  0550  2D53               	goto	i1l225
  5999  0551  178D               	bsf	13,7	;volatile
  6000  0552  2D54               	goto	i1l226
  6001  0553                     i1l225:	
  6002  0553  138D               	bcf	13,7	;volatile
  6003  0554                     i1l226:	
  6004  0554  178E               	bsf	14,7	;volatile
  6005  0555  0000               	nop	;# 
  6006  0556  0022               	movlb	2	; select bank2
  6007  0557  138E               	bcf	14,7	;volatile
  6008  0558  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  6009  0559  2D5C               	goto	i1l229
  6010  055A  178D               	bsf	13,7	;volatile
  6011  055B  2D5D               	goto	i1l230
  6012  055C                     i1l229:	
  6013  055C  138D               	bcf	13,7	;volatile
  6014  055D                     i1l230:	
  6015  055D  178E               	bsf	14,7	;volatile
  6016  055E  0000               	nop	;# 
  6017  055F  0022               	movlb	2	; select bank2
  6018  0560  138E               	bcf	14,7	;volatile
  6019  0561  1C70               	btfss	i1Mrf49SpiTx@byte,0
  6020  0562  2D65               	goto	i1l233
  6021  0563  178D               	bsf	13,7	;volatile
  6022  0564  2D66               	goto	i1l234
  6023  0565                     i1l233:	
  6024  0565  138D               	bcf	13,7	;volatile
  6025  0566                     i1l234:	
  6026  0566  178E               	bsf	14,7	;volatile
  6027  0567  0000               	nop	;# 
  6028  0568  0022               	movlb	2	; select bank2
  6029  0569  138E               	bcf	14,7	;volatile
  6030                           
  6031                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  6032  056A  138D               	bcf	13,7	;volatile
  6033  056B  0008               	return
  6034  056C                     __end_ofi1_Mrf49SpiTx:	
  6035  007E                     btemp	set	126	;btemp
  6036  007E                     wtemp0	set	126
  6037  056C                     __ptext27:	
  6038 ;; *************** function i1_Mrf49RxSts *****************
  6039 ;; Defined at:
  6040 ;;		line 30 in file "../../../src/devices/mrf49xa_cmd.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;		None
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;		None               void
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, pclath, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 1F/0
  6051 ;;		On exit  : 1F/2
  6052 ;;		Unchanged: FFE00/0
  6053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6054 ;;      Params:         0       0       0       0
  6055 ;;      Locals:         0       0       0       0
  6056 ;;      Temps:          0       0       0       0
  6057 ;;      Totals:         0       0       0       0
  6058 ;;Total ram usage:        0 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    1
  6061 ;; This function calls:
  6062 ;;		i1_Mrf49SpiRx
  6063 ;; This function is called by:
  6064 ;;		i1_Mrf49xaServe
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           
  6069                           ;psect for function i1_Mrf49RxSts
  6070  056C                     i1_Mrf49RxSts:	
  6071                           
  6072                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  6073                           
  6074                           ;incstack = 0
  6075                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6076  056C  120B               	bcf	11,4	;volatile
  6077                           
  6078                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  6079  056D  0022               	movlb	2	; select bank2
  6080  056E  130E               	bcf	14,6	;volatile
  6081                           
  6082                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  6083  056F  257A  3184         	fcall	i1_Mrf49SpiRx
  6084  0571  0020               	movlb	0	; select bank0
  6085  0572  00AE               	movwf	_mrf49Status
  6086                           
  6087                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  6088  0573  257A               	fcall	i1_Mrf49SpiRx
  6089  0574  0020               	movlb	0	; select bank0
  6090  0575  00AF               	movwf	_mrf49Status+1
  6091                           
  6092                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  6093  0576  0022               	movlb	2	; select bank2
  6094  0577  170E               	bsf	14,6	;volatile
  6095                           
  6096                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  6097  0578  160B               	bsf	11,4	;volatile
  6098  0579  0008               	return
  6099  057A                     __end_ofi1_Mrf49RxSts:	
  6100  057A                     __ptext28:	
  6101 ;; *************** function i1_Mrf49SpiRx *****************
  6102 ;; Defined at:
  6103 ;;		line 22 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;		None
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      unsigned char 
  6110 ;; Registers used:
  6111 ;;		wreg, status,2
  6112 ;; Tracked objects:
  6113 ;;		On entry : 1D/2
  6114 ;;		On exit  : 1F/2
  6115 ;;		Unchanged: FFE00/0
  6116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6117 ;;      Params:         0       0       0       0
  6118 ;;      Locals:         1       0       0       0
  6119 ;;      Temps:          0       0       0       0
  6120 ;;      Totals:         1       0       0       0
  6121 ;;Total ram usage:        1 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		i1_Mrf49RxCmd
  6127 ;;		i1_Mrf49RxSts
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           
  6132                           ;psect for function i1_Mrf49SpiRx
  6133  057A                     i1_Mrf49SpiRx:	
  6134                           
  6135                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  6139  057A  01F0               	clrf	i1Mrf49SpiRx@data
  6140                           
  6141                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  6142  057B  0022               	movlb	2	; select bank2
  6143  057C  138D               	bcf	13,7	;volatile
  6144  057D  0020               	movlb	0	; select bank0
  6145  057E  1A8E               	btfsc	14,5	;volatile
  6146  057F  17F0               	bsf	i1Mrf49SpiRx@data,7
  6147  0580  0022               	movlb	2	; select bank2
  6148  0581  178E               	bsf	14,7	;volatile
  6149  0582  0000               	nop	;# 
  6150  0583  0022               	movlb	2	; select bank2
  6151  0584  138E               	bcf	14,7	;volatile
  6152                           
  6153                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6154  0585  0020               	movlb	0	; select bank0
  6155  0586  1A8E               	btfsc	14,5	;volatile
  6156  0587  1770               	bsf	i1Mrf49SpiRx@data,6
  6157  0588  0022               	movlb	2	; select bank2
  6158  0589  178E               	bsf	14,7	;volatile
  6159  058A  0000               	nop	;# 
  6160  058B  0022               	movlb	2	; select bank2
  6161  058C  138E               	bcf	14,7	;volatile
  6162                           
  6163                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6164  058D  0020               	movlb	0	; select bank0
  6165  058E  1A8E               	btfsc	14,5	;volatile
  6166  058F  16F0               	bsf	i1Mrf49SpiRx@data,5
  6167  0590  0022               	movlb	2	; select bank2
  6168  0591  178E               	bsf	14,7	;volatile
  6169  0592  0000               	nop	;# 
  6170  0593  0022               	movlb	2	; select bank2
  6171  0594  138E               	bcf	14,7	;volatile
  6172                           
  6173                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6174  0595  0020               	movlb	0	; select bank0
  6175  0596  1A8E               	btfsc	14,5	;volatile
  6176  0597  1670               	bsf	i1Mrf49SpiRx@data,4
  6177  0598  0022               	movlb	2	; select bank2
  6178  0599  178E               	bsf	14,7	;volatile
  6179  059A  0000               	nop	;# 
  6180  059B  0022               	movlb	2	; select bank2
  6181  059C  138E               	bcf	14,7	;volatile
  6182                           
  6183                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6184  059D  0020               	movlb	0	; select bank0
  6185  059E  1A8E               	btfsc	14,5	;volatile
  6186  059F  15F0               	bsf	i1Mrf49SpiRx@data,3
  6187  05A0  0022               	movlb	2	; select bank2
  6188  05A1  178E               	bsf	14,7	;volatile
  6189  05A2  0000               	nop	;# 
  6190  05A3  0022               	movlb	2	; select bank2
  6191  05A4  138E               	bcf	14,7	;volatile
  6192                           
  6193                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6194  05A5  0020               	movlb	0	; select bank0
  6195  05A6  1A8E               	btfsc	14,5	;volatile
  6196  05A7  1570               	bsf	i1Mrf49SpiRx@data,2
  6197  05A8  0022               	movlb	2	; select bank2
  6198  05A9  178E               	bsf	14,7	;volatile
  6199  05AA  0000               	nop	;# 
  6200  05AB  0022               	movlb	2	; select bank2
  6201  05AC  138E               	bcf	14,7	;volatile
  6202                           
  6203                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6204  05AD  0020               	movlb	0	; select bank0
  6205  05AE  1A8E               	btfsc	14,5	;volatile
  6206  05AF  14F0               	bsf	i1Mrf49SpiRx@data,1
  6207  05B0  0022               	movlb	2	; select bank2
  6208  05B1  178E               	bsf	14,7	;volatile
  6209  05B2  0000               	nop	;# 
  6210  05B3  0022               	movlb	2	; select bank2
  6211  05B4  138E               	bcf	14,7	;volatile
  6212                           
  6213                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6214  05B5  0020               	movlb	0	; select bank0
  6215  05B6  1A8E               	btfsc	14,5	;volatile
  6216  05B7  1470               	bsf	i1Mrf49SpiRx@data,0
  6217  05B8  0022               	movlb	2	; select bank2
  6218  05B9  178E               	bsf	14,7	;volatile
  6219  05BA  0000               	nop	;# 
  6220  05BB  0022               	movlb	2	; select bank2
  6221  05BC  138E               	bcf	14,7	;volatile
  6222                           
  6223                           ;mrf49xa_spi_pic16.c: 40: return data;
  6224  05BD  0870               	movf	i1Mrf49SpiRx@data,w
  6225  05BE  0008               	return
  6226  05BF                     __end_ofi1_Mrf49SpiRx:	


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     14      16
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    ?_Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    S327rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _Mrf49xaTick->_HandlePacket
    _HandlePacket->_Mrf49xaTxAck
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiTx
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2989
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0    1398
                                             10 BANK0      4     4      0
                      _Mrf49xaModeTx
                         _Mrf49RxSts
               _Mrf49xaPacketPending
                  _Mrf49xaFreePacket
                    _Mrf49xaRxPacket
                       _HandlePacket
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0     900
                                              6 BANK0      4     4      0
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                  _Mrf49xaFreePacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaFreePacket                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0     398
                                              5 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxPacket                                      5     3      2     244
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     332
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    1591
                                              6 BANK0      4     4      0
                       _Mrf49xaServe
                      _Mrf49xaModeRx
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0     927
                                              4 BANK0      2     2      0
                      _Mrf49xaModeRx
                         _Mrf49RxSts
                        _Mrf49RxByte
                        _Mrf49TxByte
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     242
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiTx
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeRx                                        1     1      0     332
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     220
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               1     1      0    3043
                                              6 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (7) i1_Mrf49xaServe                                       2     2      0    3043
                                              4 COMMON     2     2      0
                    i1_Mrf49xaModeRx
                       i1_Mrf49RxSts
                      i1_Mrf49RxByte
                      i1_Mrf49TxByte
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49TxByte                                        1     1      0     803
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxByte                                        0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxCmd                                         2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiTx
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxSts                                         0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaModeRx                                      1     1      0    1099
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxCmd                                         2     1      1     730
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49xaServe
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiTx
           _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49TxCmd
       _Mrf49SpiTx
   _Mrf49xaTick
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaPacketPending
     _Mrf49xaFreePacket
     _Mrf49xaRxPacket
     _HandlePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _Mrf49xaFreePacket
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiTx
         i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       F       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      66       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      E      10       6       20.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      75      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Tue May 06 20:55:27 2014

                  __CFG_CP$OFF 0000                    __CFG_LVP$ON 0000          Mrf49xaTxPacket@packet 0024  
                          l210 0293                            l221 02B5                            l213 029D  
                          l205 0285                            l230 02CF                            l222 02B7  
                          l214 029F                            l206 0287                            l233 02D9  
                          l225 02C1                            l217 02A9                            l209 0291  
                          l234 02DB                            l226 02C3                            l218 02AB  
                          l229 02CD                            l422 0387                            l351 00FD  
                          l373 0175                            l374 018D                   __CFG_BORV$LO 0000  
                          wreg 0009               i1Mrf49xaModeRx@k 0073                   __CFG_IESO$ON 0000  
       Mrf49xaTxPacket@needAck 0021                           l2101 008C                           l2111 00A9  
                         l2115 00C0                           l2045 03E0                           l2063 03F5  
                         l2127 00D4                           l2073 0359                           l2153 0369  
                         l2137 00DE                           l2129 00D5                           l2171 03A2  
                         l2091 0078                           l2165 038A                           l2093 007D  
                         l2175 03A8                           l2159 037E                           l2167 0399  
                         l2095 0081                           l2191 005D                           l1803 01C3  
                         l2099 008A                           l1821 01EE                           l1813 01DC  
                         l1833 020A                           l1825 01F4                           l1817 01E8  
                         l1913 013B                           l1835 020E                           l1819 01EA  
                         l1923 0162                           l1845 021E                           l1837 0212  
                         l1773 0196                           l1853 0231                           l1765 0181  
                         l1917 014D                           l1775 0199                           l1855 023D  
                         l1759 0178                           l1927 0164                           l1919 0159  
                         l1873 026D                           l1865 0250                           l1849 0220  
                         l1769 0191                           l1795 01B7                           l1779 019F  
                         l1891 003E                           l1869 0264                Mrf49TxByte@byte 0023  
                         l1895 0047                           l1887 002A                           u2207 0129  
                         u2217 0147                           u2177 00BB                           u2187 00E3  
                         u2197 011A                   __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000  
                         _main 004D                __end_of_AdcInit 0343                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         start 0014           __end_of_HandlePacket 03AA        __end_ofi1_Mrf49xaModeRx 0514  
                __CFG_MCLRE$ON 0000            __end_of_Mrf49RxByte 0273            __end_of_Mrf49TxByte 0247  
          __end_of_Mrf49xaInit 016A            __end_of_Mrf49xaTick 0101           _Mrf49xaPacketPending 0348  
                        ?_main 0070                  __CFG_WDTE$OFF 0000                          i1l210 0530  
                        i1l131 0011                          i1l221 054A                          i1l213 0538  
                        i1l205 0526                          i1l230 055D                          i1l222 054B  
                        i1l214 0539                          i1l206 0527                          i1l233 0565  
                        i1l225 0553                          i1l217 0541                          i1l209 052F  
                        i1l234 0566                          i1l226 0554                          i1l218 0542  
                        i1l229 055C                          i1l373 041E                          i1l374 0436  
                   _Mrf49RxCmd 0101                     _Mrf49TxCmd 0273                     _Mrf49SpiRx 02ED  
                   _Mrf49SpiTx 027F                          _TRISA 008C                          _TRISB 008D  
                        _TRISC 008E                     _Mrf49RxSts 02E1        Mrf49xaTxPacket@response 0020  
               __CFG_BOREN$OFF 0000                          wtemp0 007E                __initialization 0016  
                   _ExtIntInit 0343                   __end_of_main 0060                 __CFG_LPBOR$OFF 0000  
        ?_Mrf49xaPacketPending 0070                         ??_main 0077           __end_of_Mrf49xaTxAck 0618  
         __end_of_Mrf49xaServe 0242            HandlePacket@sendAck 0028                         _ADCON0 009D  
                       _ADCON1 009E                         _ADCON2 009F            HandlePacket@sendMsg 0027  
                    ??_AdcInit 0077                         _ANSELA 018C                         _ANSELB 018D  
                       _ANSELC 018E             i1Mrf49xaServe@data 0075                         i1l2321 0440  
                       i1l2401 04D6                         i1l2313 042A                         i1l2323 0443  
                       i1l2403 04E2                         i1l2317 043A                         i1l2309 0421  
                       i1l2351 046C                         i1l2343 045F                         i1l2327 0449  
                       i1l2361 0483                         i1l2291 0510                         i1l2283 04F4  
                       i1l2363 048B                         i1l2381 04AF                         i1l2373 0499  
                       i1l2365 048D                         i1l2287 0508                         i1l2383 04B3  
                       i1l2367 048F                         i1l2393 04C3                         i1l2385 04B7  
                       i1l2369 0493                         i1l2397 04C5                         _FVRCON 0117  
                       _OSCCON 0099                    _Mrf49RxByte 0271                    _Mrf49TxByte 0242  
               __CFG_PWRTE$OFF 0000               ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 0110  
                  _Mrf49xaTick 0060                _Mrf49xaRxPacket 0352                 __CFG_STVREN$ON 0000  
              _Mrf49xaTxPacket 03C7                         _extInt 0004                    ?_Mrf49RxCmd 0070  
                  ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070  
                  ?_Mrf49RxSts 0070          __size_of_HandlePacket 0045        __end_of__initialization 0020  
        __end_ofi1_Mrf49RxByte 0517          __end_ofi1_Mrf49TxByte 04EC                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070         ??_Mrf49xaPacketPending 0077        __size_ofi1_Mrf49xaServe 00D4  
               _OPTION_REGbits 0095                   _HandlePacket 0365        Mrf49xaFreePacket@packet 0020  
                ??_SysInitGpio 0077                     __pbssBANK0 002E                     __pbssBANK1 00A0  
      __end_of_Mrf49xaRxPacket 0360        __end_of_Mrf49xaTxPacket 0409          __end_of_Mrf49xaModeRx 0271  
        __end_of_Mrf49xaModeTx 004D            __size_of_Mrf49RxCmd 000F            __size_of_Mrf49TxCmd 000C  
          __size_of_Mrf49SpiRx 0047            __size_of_Mrf49SpiTx 0062            __size_of_Mrf49RxSts 000C  
                   __pmaintext 004D                     __pintentry 0004                        ?_extInt 0070  
        __size_of_Mrf49xaTxAck 0021          __size_of_Mrf49xaServe 00D8                        _AdcInit 0334  
          __size_of_ExtIntInit 0005                     __stringtab 05BF                  ?i1_Mrf49RxCmd 0070  
                ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070  
                ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 03C7                   _Mrf49xaTxAck 05F7  
                 _Mrf49xaServe 016A                __size_of_extInt 0010              _mrfRegset_InitCnt 05C0  
                      __ptext1 03AA                        __ptext2 0060                        __ptext3 0365  
                      __ptext4 0360                        __ptext5 05F7                        __ptext6 03C7  
                      __ptext7 0352                        __ptext8 0348                        __ptext9 0022  
                      clrloop0 0619           end_of_initialization 0020                   ?_Mrf49RxByte 0070  
                 ?_Mrf49TxByte 0070                 ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072  
               ??i1_Mrf49SpiRx 0070                 ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071  
             ?_Mrf49xaRxPacket 0070               ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070  
         __end_of_mrfRegset_Rx 05EF           __end_of_mrfRegset_Tx 05F7                   ?_Mrf49xaTick 0070  
               i1_Mrf49xaServe 0413      __end_of_mrfRegset_InitCnt 05C1                      _PORTAbits 000C  
                    _PORTCbits 000E                   ??_Mrf49RxCmd 0077                   ??_Mrf49TxCmd 0077  
                 ??_Mrf49SpiRx 0077                   ??_Mrf49SpiTx 0077                   ??_Mrf49RxSts 0077  
             __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C                      _TRISBbits 008D  
                    _TRISCbits 008E                    _SysInitGpio 03AA                 Mrf49SpiRx@data 0020  
               Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 0110             __end_of_Mrf49TxCmd 027F  
       __end_ofi1_Mrf49xaServe 04E7                   ??_ExtIntInit 0077             __end_of_Mrf49SpiRx 0334  
           __end_of_Mrf49SpiTx 02E1             __end_of_Mrf49RxSts 02ED       __size_ofi1_Mrf49xaModeRx 0028  
               __end_of_extInt 0014            start_initialization 0016             __end_of_ExtIntInit 0348  
           HandlePacket@packet 0029                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 05C1  
              _mrfRegset_TxCnt 05C2                       ??_extInt 0076  __size_of_Mrf49xaPacketPending 000A  
       __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 0413  
         __end_ofi1_Mrf49TxCmd 0521           __end_ofi1_Mrf49SpiRx 05BF           __end_ofi1_Mrf49SpiTx 056C  
         __end_ofi1_Mrf49RxSts 057A                  __pcstackBANK0 0020              i1Mrf49TxByte@byte 0073  
                     ?_AdcInit 0070                   _rfTrcvStatus 00A0           __size_of_Mrf49RxByte 0002  
         __size_of_Mrf49TxByte 0005           __size_of_Mrf49xaInit 005A           __size_of_Mrf49xaTick 00A1  
                    __pstrings 05BF         __size_of_Mrf49xaModeRx 002A         __size_of_Mrf49xaModeTx 002B  
                 _mrfRegset_Rx 05E3                   _mrfRegset_Tx 05EF              ??i1_Mrf49xaModeRx 0073  
                     _LATAbits 010C                       _LATBbits 010D                       _LATCbits 010E  
                i1_Mrf49RxByte 0514        __end_of_mrfRegset_RxCnt 05C2                  i1_Mrf49TxByte 04E7  
      __end_of_mrfRegset_TxCnt 05C3                      clear_ram0 0618                    _mrf49Status 002E  
            _Mrf49xaFreePacket 0360                 Mrf49xaModeRx@k 0023                 Mrf49xaModeTx@k 0023  
                Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070                  Mrf49RxCmd@val 0022  
                Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021            ??_Mrf49xaFreePacket 0077  
                     _WPUAbits 020C               __size_of_AdcInit 000F                   ?_SysInitGpio 0070  
               ?i1_Mrf49RxByte 0070                 ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 0365  
                _Mrf49xaModeRx 0247                  _Mrf49xaModeTx 0022                 _mrfRegset_Init 05C3  
     __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000A          __size_ofi1_Mrf49TxCmd 000A  
        __size_ofi1_Mrf49SpiRx 0045          __size_ofi1_Mrf49SpiTx 004B               i1Mrf49SpiRx@data 0070  
        __size_ofi1_Mrf49RxSts 000E       __size_of_Mrf49xaTxPacket 0042               i1Mrf49SpiTx@byte 0070  
           __end_of__stringtab 05C0                  ?_HandlePacket 0070                       __ptext10 0110  
                     __ptext11 016A                       __ptext20 0343                       __ptext12 0242  
                     __ptext21 0334                       __ptext13 0271                       __ptext30 0517  
                     __ptext14 0101                       __ptext31 0521                       __ptext23 0413  
                     __ptext15 02E1                       __ptext24 04E7                       __ptext16 02ED  
                     __ptext25 0514                       __ptext17 0247                       __ptext26 0409  
                     __ptext18 0273                       __ptext27 056C                       __ptext19 027F  
                     __ptext28 057A                       __ptext29 04EC               ??i1_Mrf49xaServe 0074  
                __size_of_main 0013                   i1_Mrf49RxCmd 0409         __end_of_mrfRegset_Init 05E3  
           Mrf49xaTxAck@packet 0025                   i1_Mrf49TxCmd 0517                   i1_Mrf49SpiRx 057A  
                 i1_Mrf49SpiTx 0521                 ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070  
                 i1_Mrf49RxSts 056C                i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072  
               ??_HandlePacket 0077             Mrf49xaTick@timeout 002C                     _INTCONbits 000B  
              i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071                ??i1_Mrf49RxByte 0073  
                     intlevel1 0000                ??i1_Mrf49TxByte 0073   __end_of_Mrf49xaPacketPending 0352  
            __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005                  ?_Mrf49xaTxAck 0070  
                 Mrf49xaInit@k 0029                  ?_Mrf49xaServe 0070              Mrf49xaTick@packet 002D  
              i1_Mrf49xaModeRx 04EC              ??_Mrf49xaRxPacket 0077              ??_Mrf49xaTxPacket 0022  
                ??_Mrf49RxByte 0077                  ??_Mrf49TxByte 0077                ??_Mrf49xaModeRx 0077  
              ??_Mrf49xaModeTx 0077           __size_of_SysInitGpio 001D                 ??_Mrf49xaTxAck 0077  
             Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024                  ??_Mrf49xaInit 0026  
                ??_Mrf49xaTick 002A               Mrf49xaTxPacket@i 0023  

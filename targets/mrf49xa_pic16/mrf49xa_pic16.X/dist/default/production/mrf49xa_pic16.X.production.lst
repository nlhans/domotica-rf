

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Thu Jul 03 17:51:28 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text9,local,class=CODE,merge=1,delta=2
    15                           	psect	text11,local,class=CODE,merge=1,delta=2
    16                           	psect	text14,local,class=CODE,merge=1,delta=2
    17                           	psect	text15,local,class=CODE,merge=1,delta=2
    18                           	psect	text16,local,class=CODE,merge=1,delta=2
    19                           	psect	text18,local,class=CODE,merge=1,delta=2
    20                           	psect	text22,local,class=CODE,merge=1,delta=2
    21                           	psect	text24,local,class=CODE,merge=1,delta=2
    22                           	psect	text33,local,class=CODE,merge=1,delta=2
    23                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text64,local,class=CODE,merge=1,delta=2
    26                           	psect	text67,local,class=CODE,merge=1,delta=2
    27                           	psect	text68,local,class=CODE,merge=1,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000D                     	;# 
    44  000E                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0015                     	;# 
    49  0016                     	;# 
    50  0016                     	;# 
    51  0017                     	;# 
    52  0018                     	;# 
    53  0019                     	;# 
    54  001A                     	;# 
    55  001B                     	;# 
    56  001C                     	;# 
    57  008C                     	;# 
    58  008D                     	;# 
    59  008E                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0093                     	;# 
    63  0095                     	;# 
    64  0096                     	;# 
    65  0097                     	;# 
    66  0099                     	;# 
    67  009A                     	;# 
    68  009B                     	;# 
    69  009B                     	;# 
    70  009C                     	;# 
    71  009D                     	;# 
    72  009E                     	;# 
    73  009F                     	;# 
    74  010C                     	;# 
    75  010D                     	;# 
    76  010E                     	;# 
    77  0111                     	;# 
    78  0112                     	;# 
    79  0113                     	;# 
    80  0114                     	;# 
    81  0115                     	;# 
    82  0116                     	;# 
    83  0117                     	;# 
    84  0118                     	;# 
    85  0119                     	;# 
    86  011D                     	;# 
    87  018C                     	;# 
    88  018D                     	;# 
    89  018E                     	;# 
    90  0191                     	;# 
    91  0191                     	;# 
    92  0192                     	;# 
    93  0193                     	;# 
    94  0193                     	;# 
    95  0194                     	;# 
    96  0195                     	;# 
    97  0196                     	;# 
    98  0199                     	;# 
    99  019A                     	;# 
   100  019B                     	;# 
   101  019B                     	;# 
   102  019C                     	;# 
   103  019D                     	;# 
   104  019E                     	;# 
   105  019F                     	;# 
   106  020C                     	;# 
   107  020D                     	;# 
   108  0211                     	;# 
   109  0211                     	;# 
   110  0212                     	;# 
   111  0212                     	;# 
   112  0213                     	;# 
   113  0213                     	;# 
   114  0214                     	;# 
   115  0214                     	;# 
   116  0215                     	;# 
   117  0215                     	;# 
   118  0215                     	;# 
   119  0216                     	;# 
   120  0216                     	;# 
   121  0217                     	;# 
   122  0217                     	;# 
   123  0391                     	;# 
   124  0392                     	;# 
   125  0393                     	;# 
   126  0394                     	;# 
   127  0395                     	;# 
   128  0396                     	;# 
   129  0498                     	;# 
   130  0498                     	;# 
   131  0499                     	;# 
   132  049A                     	;# 
   133  049B                     	;# 
   134  049B                     	;# 
   135  049C                     	;# 
   136  049E                     	;# 
   137  049F                     	;# 
   138  0611                     	;# 
   139  0612                     	;# 
   140  0613                     	;# 
   141  0613                     	;# 
   142  0614                     	;# 
   143  0615                     	;# 
   144  0616                     	;# 
   145  0616                     	;# 
   146  0617                     	;# 
   147  0618                     	;# 
   148  0619                     	;# 
   149  0619                     	;# 
   150  061A                     	;# 
   151  061B                     	;# 
   152  061C                     	;# 
   153  061C                     	;# 
   154  0691                     	;# 
   155  0692                     	;# 
   156  0693                     	;# 
   157  0694                     	;# 
   158  0695                     	;# 
   159  0F0F                     	;# 
   160  0F10                     	;# 
   161  0F11                     	;# 
   162  0F12                     	;# 
   163  0F13                     	;# 
   164  0F14                     	;# 
   165  0F15                     	;# 
   166  0F16                     	;# 
   167  0F17                     	;# 
   168  0F18                     	;# 
   169  0F19                     	;# 
   170  0F1A                     	;# 
   171  0F1B                     	;# 
   172  0F1C                     	;# 
   173  0F1D                     	;# 
   174  0F1E                     	;# 
   175  0F1F                     	;# 
   176  0F20                     	;# 
   177  0F21                     	;# 
   178  0F22                     	;# 
   179  0F23                     	;# 
   180  0F24                     	;# 
   181  0F25                     	;# 
   182  0F26                     	;# 
   183  0F27                     	;# 
   184  0F28                     	;# 
   185  0F29                     	;# 
   186  0F2A                     	;# 
   187  0F2B                     	;# 
   188  0F2C                     	;# 
   189  0F2D                     	;# 
   190  0F2E                     	;# 
   191  0F2F                     	;# 
   192  0F8C                     	;# 
   193  0F8D                     	;# 
   194  0F91                     	;# 
   195  0F95                     	;# 
   196  0F96                     	;# 
   197  0F97                     	;# 
   198  0F9C                     	;# 
   199  0F9D                     	;# 
   200  0F9E                     	;# 
   201  0FE3                     	;# 
   202  0FE4                     	;# 
   203  0FE5                     	;# 
   204  0FE6                     	;# 
   205  0FE7                     	;# 
   206  0FE8                     	;# 
   207  0FE9                     	;# 
   208  0FEA                     	;# 
   209  0FEB                     	;# 
   210  0FED                     	;# 
   211  0FEE                     	;# 
   212  0FEF                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  008C                     	;# 
   241  008D                     	;# 
   242  008E                     	;# 
   243  0091                     	;# 
   244  0092                     	;# 
   245  0093                     	;# 
   246  0095                     	;# 
   247  0096                     	;# 
   248  0097                     	;# 
   249  0099                     	;# 
   250  009A                     	;# 
   251  009B                     	;# 
   252  009B                     	;# 
   253  009C                     	;# 
   254  009D                     	;# 
   255  009E                     	;# 
   256  009F                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  010E                     	;# 
   260  0111                     	;# 
   261  0112                     	;# 
   262  0113                     	;# 
   263  0114                     	;# 
   264  0115                     	;# 
   265  0116                     	;# 
   266  0117                     	;# 
   267  0118                     	;# 
   268  0119                     	;# 
   269  011D                     	;# 
   270  018C                     	;# 
   271  018D                     	;# 
   272  018E                     	;# 
   273  0191                     	;# 
   274  0191                     	;# 
   275  0192                     	;# 
   276  0193                     	;# 
   277  0193                     	;# 
   278  0194                     	;# 
   279  0195                     	;# 
   280  0196                     	;# 
   281  0199                     	;# 
   282  019A                     	;# 
   283  019B                     	;# 
   284  019B                     	;# 
   285  019C                     	;# 
   286  019D                     	;# 
   287  019E                     	;# 
   288  019F                     	;# 
   289  020C                     	;# 
   290  020D                     	;# 
   291  0211                     	;# 
   292  0211                     	;# 
   293  0212                     	;# 
   294  0212                     	;# 
   295  0213                     	;# 
   296  0213                     	;# 
   297  0214                     	;# 
   298  0214                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0216                     	;# 
   303  0216                     	;# 
   304  0217                     	;# 
   305  0217                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  0393                     	;# 
   309  0394                     	;# 
   310  0395                     	;# 
   311  0396                     	;# 
   312  0498                     	;# 
   313  0498                     	;# 
   314  0499                     	;# 
   315  049A                     	;# 
   316  049B                     	;# 
   317  049B                     	;# 
   318  049C                     	;# 
   319  049E                     	;# 
   320  049F                     	;# 
   321  0611                     	;# 
   322  0612                     	;# 
   323  0613                     	;# 
   324  0613                     	;# 
   325  0614                     	;# 
   326  0615                     	;# 
   327  0616                     	;# 
   328  0616                     	;# 
   329  0617                     	;# 
   330  0618                     	;# 
   331  0619                     	;# 
   332  0619                     	;# 
   333  061A                     	;# 
   334  061B                     	;# 
   335  061C                     	;# 
   336  061C                     	;# 
   337  0691                     	;# 
   338  0692                     	;# 
   339  0693                     	;# 
   340  0694                     	;# 
   341  0695                     	;# 
   342  0F0F                     	;# 
   343  0F10                     	;# 
   344  0F11                     	;# 
   345  0F12                     	;# 
   346  0F13                     	;# 
   347  0F14                     	;# 
   348  0F15                     	;# 
   349  0F16                     	;# 
   350  0F17                     	;# 
   351  0F18                     	;# 
   352  0F19                     	;# 
   353  0F1A                     	;# 
   354  0F1B                     	;# 
   355  0F1C                     	;# 
   356  0F1D                     	;# 
   357  0F1E                     	;# 
   358  0F1F                     	;# 
   359  0F20                     	;# 
   360  0F21                     	;# 
   361  0F22                     	;# 
   362  0F23                     	;# 
   363  0F24                     	;# 
   364  0F25                     	;# 
   365  0F26                     	;# 
   366  0F27                     	;# 
   367  0F28                     	;# 
   368  0F29                     	;# 
   369  0F2A                     	;# 
   370  0F2B                     	;# 
   371  0F2C                     	;# 
   372  0F2D                     	;# 
   373  0F2E                     	;# 
   374  0F2F                     	;# 
   375  0F8C                     	;# 
   376  0F8D                     	;# 
   377  0F91                     	;# 
   378  0F95                     	;# 
   379  0F96                     	;# 
   380  0F97                     	;# 
   381  0F9C                     	;# 
   382  0F9D                     	;# 
   383  0F9E                     	;# 
   384  0FE3                     	;# 
   385  0FE4                     	;# 
   386  0FE5                     	;# 
   387  0FE6                     	;# 
   388  0FE7                     	;# 
   389  0FE8                     	;# 
   390  0FE9                     	;# 
   391  0FEA                     	;# 
   392  0FEB                     	;# 
   393  0FED                     	;# 
   394  0FEE                     	;# 
   395  0FEF                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  0008                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000D                     	;# 
   410  000E                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0013                     	;# 
   414  0015                     	;# 
   415  0016                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001C                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0093                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009B                     	;# 
   436  009C                     	;# 
   437  009D                     	;# 
   438  009E                     	;# 
   439  009F                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0111                     	;# 
   444  0112                     	;# 
   445  0113                     	;# 
   446  0114                     	;# 
   447  0115                     	;# 
   448  0116                     	;# 
   449  0117                     	;# 
   450  0118                     	;# 
   451  0119                     	;# 
   452  011D                     	;# 
   453  018C                     	;# 
   454  018D                     	;# 
   455  018E                     	;# 
   456  0191                     	;# 
   457  0191                     	;# 
   458  0192                     	;# 
   459  0193                     	;# 
   460  0193                     	;# 
   461  0194                     	;# 
   462  0195                     	;# 
   463  0196                     	;# 
   464  0199                     	;# 
   465  019A                     	;# 
   466  019B                     	;# 
   467  019B                     	;# 
   468  019C                     	;# 
   469  019D                     	;# 
   470  019E                     	;# 
   471  019F                     	;# 
   472  020C                     	;# 
   473  020D                     	;# 
   474  0211                     	;# 
   475  0211                     	;# 
   476  0212                     	;# 
   477  0212                     	;# 
   478  0213                     	;# 
   479  0213                     	;# 
   480  0214                     	;# 
   481  0214                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0215                     	;# 
   485  0216                     	;# 
   486  0216                     	;# 
   487  0217                     	;# 
   488  0217                     	;# 
   489  0391                     	;# 
   490  0392                     	;# 
   491  0393                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0498                     	;# 
   496  0498                     	;# 
   497  0499                     	;# 
   498  049A                     	;# 
   499  049B                     	;# 
   500  049B                     	;# 
   501  049C                     	;# 
   502  049E                     	;# 
   503  049F                     	;# 
   504  0611                     	;# 
   505  0612                     	;# 
   506  0613                     	;# 
   507  0613                     	;# 
   508  0614                     	;# 
   509  0615                     	;# 
   510  0616                     	;# 
   511  0616                     	;# 
   512  0617                     	;# 
   513  0618                     	;# 
   514  0619                     	;# 
   515  0619                     	;# 
   516  061A                     	;# 
   517  061B                     	;# 
   518  061C                     	;# 
   519  061C                     	;# 
   520  0691                     	;# 
   521  0692                     	;# 
   522  0693                     	;# 
   523  0694                     	;# 
   524  0695                     	;# 
   525  0F0F                     	;# 
   526  0F10                     	;# 
   527  0F11                     	;# 
   528  0F12                     	;# 
   529  0F13                     	;# 
   530  0F14                     	;# 
   531  0F15                     	;# 
   532  0F16                     	;# 
   533  0F17                     	;# 
   534  0F18                     	;# 
   535  0F19                     	;# 
   536  0F1A                     	;# 
   537  0F1B                     	;# 
   538  0F1C                     	;# 
   539  0F1D                     	;# 
   540  0F1E                     	;# 
   541  0F1F                     	;# 
   542  0F20                     	;# 
   543  0F21                     	;# 
   544  0F22                     	;# 
   545  0F23                     	;# 
   546  0F24                     	;# 
   547  0F25                     	;# 
   548  0F26                     	;# 
   549  0F27                     	;# 
   550  0F28                     	;# 
   551  0F29                     	;# 
   552  0F2A                     	;# 
   553  0F2B                     	;# 
   554  0F2C                     	;# 
   555  0F2D                     	;# 
   556  0F2E                     	;# 
   557  0F2F                     	;# 
   558  0F8C                     	;# 
   559  0F8D                     	;# 
   560  0F91                     	;# 
   561  0F95                     	;# 
   562  0F96                     	;# 
   563  0F97                     	;# 
   564  0F9C                     	;# 
   565  0F9D                     	;# 
   566  0F9E                     	;# 
   567  0FE3                     	;# 
   568  0FE4                     	;# 
   569  0FE5                     	;# 
   570  0FE6                     	;# 
   571  0FE7                     	;# 
   572  0FE8                     	;# 
   573  0FE9                     	;# 
   574  0FEA                     	;# 
   575  0FEB                     	;# 
   576  0FED                     	;# 
   577  0FEE                     	;# 
   578  0FEF                     	;# 
   579  0000                     	;# 
   580  0001                     	;# 
   581  0002                     	;# 
   582  0003                     	;# 
   583  0004                     	;# 
   584  0005                     	;# 
   585  0006                     	;# 
   586  0007                     	;# 
   587  0008                     	;# 
   588  0009                     	;# 
   589  000A                     	;# 
   590  000B                     	;# 
   591  000C                     	;# 
   592  000D                     	;# 
   593  000E                     	;# 
   594  0011                     	;# 
   595  0012                     	;# 
   596  0013                     	;# 
   597  0015                     	;# 
   598  0016                     	;# 
   599  0016                     	;# 
   600  0017                     	;# 
   601  0018                     	;# 
   602  0019                     	;# 
   603  001A                     	;# 
   604  001B                     	;# 
   605  001C                     	;# 
   606  008C                     	;# 
   607  008D                     	;# 
   608  008E                     	;# 
   609  0091                     	;# 
   610  0092                     	;# 
   611  0093                     	;# 
   612  0095                     	;# 
   613  0096                     	;# 
   614  0097                     	;# 
   615  0099                     	;# 
   616  009A                     	;# 
   617  009B                     	;# 
   618  009B                     	;# 
   619  009C                     	;# 
   620  009D                     	;# 
   621  009E                     	;# 
   622  009F                     	;# 
   623  010C                     	;# 
   624  010D                     	;# 
   625  010E                     	;# 
   626  0111                     	;# 
   627  0112                     	;# 
   628  0113                     	;# 
   629  0114                     	;# 
   630  0115                     	;# 
   631  0116                     	;# 
   632  0117                     	;# 
   633  0118                     	;# 
   634  0119                     	;# 
   635  011D                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  018E                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0199                     	;# 
   648  019A                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019C                     	;# 
   652  019D                     	;# 
   653  019E                     	;# 
   654  019F                     	;# 
   655  020C                     	;# 
   656  020D                     	;# 
   657  0211                     	;# 
   658  0211                     	;# 
   659  0212                     	;# 
   660  0212                     	;# 
   661  0213                     	;# 
   662  0213                     	;# 
   663  0214                     	;# 
   664  0214                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0216                     	;# 
   669  0216                     	;# 
   670  0217                     	;# 
   671  0217                     	;# 
   672  0391                     	;# 
   673  0392                     	;# 
   674  0393                     	;# 
   675  0394                     	;# 
   676  0395                     	;# 
   677  0396                     	;# 
   678  0498                     	;# 
   679  0498                     	;# 
   680  0499                     	;# 
   681  049A                     	;# 
   682  049B                     	;# 
   683  049B                     	;# 
   684  049C                     	;# 
   685  049E                     	;# 
   686  049F                     	;# 
   687  0611                     	;# 
   688  0612                     	;# 
   689  0613                     	;# 
   690  0613                     	;# 
   691  0614                     	;# 
   692  0615                     	;# 
   693  0616                     	;# 
   694  0616                     	;# 
   695  0617                     	;# 
   696  0618                     	;# 
   697  0619                     	;# 
   698  0619                     	;# 
   699  061A                     	;# 
   700  061B                     	;# 
   701  061C                     	;# 
   702  061C                     	;# 
   703  0691                     	;# 
   704  0692                     	;# 
   705  0693                     	;# 
   706  0694                     	;# 
   707  0695                     	;# 
   708  0F0F                     	;# 
   709  0F10                     	;# 
   710  0F11                     	;# 
   711  0F12                     	;# 
   712  0F13                     	;# 
   713  0F14                     	;# 
   714  0F15                     	;# 
   715  0F16                     	;# 
   716  0F17                     	;# 
   717  0F18                     	;# 
   718  0F19                     	;# 
   719  0F1A                     	;# 
   720  0F1B                     	;# 
   721  0F1C                     	;# 
   722  0F1D                     	;# 
   723  0F1E                     	;# 
   724  0F1F                     	;# 
   725  0F20                     	;# 
   726  0F21                     	;# 
   727  0F22                     	;# 
   728  0F23                     	;# 
   729  0F24                     	;# 
   730  0F25                     	;# 
   731  0F26                     	;# 
   732  0F27                     	;# 
   733  0F28                     	;# 
   734  0F29                     	;# 
   735  0F2A                     	;# 
   736  0F2B                     	;# 
   737  0F2C                     	;# 
   738  0F2D                     	;# 
   739  0F2E                     	;# 
   740  0F2F                     	;# 
   741  0F8C                     	;# 
   742  0F8D                     	;# 
   743  0F91                     	;# 
   744  0F95                     	;# 
   745  0F96                     	;# 
   746  0F97                     	;# 
   747  0F9C                     	;# 
   748  0F9D                     	;# 
   749  0F9E                     	;# 
   750  0FE3                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  0011                     	;# 
   778  0012                     	;# 
   779  0013                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  008C                     	;# 
   790  008D                     	;# 
   791  008E                     	;# 
   792  0091                     	;# 
   793  0092                     	;# 
   794  0093                     	;# 
   795  0095                     	;# 
   796  0096                     	;# 
   797  0097                     	;# 
   798  0099                     	;# 
   799  009A                     	;# 
   800  009B                     	;# 
   801  009B                     	;# 
   802  009C                     	;# 
   803  009D                     	;# 
   804  009E                     	;# 
   805  009F                     	;# 
   806  010C                     	;# 
   807  010D                     	;# 
   808  010E                     	;# 
   809  0111                     	;# 
   810  0112                     	;# 
   811  0113                     	;# 
   812  0114                     	;# 
   813  0115                     	;# 
   814  0116                     	;# 
   815  0117                     	;# 
   816  0118                     	;# 
   817  0119                     	;# 
   818  011D                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  018E                     	;# 
   822  0191                     	;# 
   823  0191                     	;# 
   824  0192                     	;# 
   825  0193                     	;# 
   826  0193                     	;# 
   827  0194                     	;# 
   828  0195                     	;# 
   829  0196                     	;# 
   830  0199                     	;# 
   831  019A                     	;# 
   832  019B                     	;# 
   833  019B                     	;# 
   834  019C                     	;# 
   835  019D                     	;# 
   836  019E                     	;# 
   837  019F                     	;# 
   838  020C                     	;# 
   839  020D                     	;# 
   840  0211                     	;# 
   841  0211                     	;# 
   842  0212                     	;# 
   843  0212                     	;# 
   844  0213                     	;# 
   845  0213                     	;# 
   846  0214                     	;# 
   847  0214                     	;# 
   848  0215                     	;# 
   849  0215                     	;# 
   850  0215                     	;# 
   851  0216                     	;# 
   852  0216                     	;# 
   853  0217                     	;# 
   854  0217                     	;# 
   855  0391                     	;# 
   856  0392                     	;# 
   857  0393                     	;# 
   858  0394                     	;# 
   859  0395                     	;# 
   860  0396                     	;# 
   861  0498                     	;# 
   862  0498                     	;# 
   863  0499                     	;# 
   864  049A                     	;# 
   865  049B                     	;# 
   866  049B                     	;# 
   867  049C                     	;# 
   868  049E                     	;# 
   869  049F                     	;# 
   870  0611                     	;# 
   871  0612                     	;# 
   872  0613                     	;# 
   873  0613                     	;# 
   874  0614                     	;# 
   875  0615                     	;# 
   876  0616                     	;# 
   877  0616                     	;# 
   878  0617                     	;# 
   879  0618                     	;# 
   880  0619                     	;# 
   881  0619                     	;# 
   882  061A                     	;# 
   883  061B                     	;# 
   884  061C                     	;# 
   885  061C                     	;# 
   886  0691                     	;# 
   887  0692                     	;# 
   888  0693                     	;# 
   889  0694                     	;# 
   890  0695                     	;# 
   891  0F0F                     	;# 
   892  0F10                     	;# 
   893  0F11                     	;# 
   894  0F12                     	;# 
   895  0F13                     	;# 
   896  0F14                     	;# 
   897  0F15                     	;# 
   898  0F16                     	;# 
   899  0F17                     	;# 
   900  0F18                     	;# 
   901  0F19                     	;# 
   902  0F1A                     	;# 
   903  0F1B                     	;# 
   904  0F1C                     	;# 
   905  0F1D                     	;# 
   906  0F1E                     	;# 
   907  0F1F                     	;# 
   908  0F20                     	;# 
   909  0F21                     	;# 
   910  0F22                     	;# 
   911  0F23                     	;# 
   912  0F24                     	;# 
   913  0F25                     	;# 
   914  0F26                     	;# 
   915  0F27                     	;# 
   916  0F28                     	;# 
   917  0F29                     	;# 
   918  0F2A                     	;# 
   919  0F2B                     	;# 
   920  0F2C                     	;# 
   921  0F2D                     	;# 
   922  0F2E                     	;# 
   923  0F2F                     	;# 
   924  0F8C                     	;# 
   925  0F8D                     	;# 
   926  0F91                     	;# 
   927  0F95                     	;# 
   928  0F96                     	;# 
   929  0F97                     	;# 
   930  0F9C                     	;# 
   931  0F9D                     	;# 
   932  0F9E                     	;# 
   933  0FE3                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0013                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0093                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  009F                     	;# 
   989  010C                     	;# 
   990  010D                     	;# 
   991  010E                     	;# 
   992  0111                     	;# 
   993  0112                     	;# 
   994  0113                     	;# 
   995  0114                     	;# 
   996  0115                     	;# 
   997  0116                     	;# 
   998  0117                     	;# 
   999  0118                     	;# 
  1000  0119                     	;# 
  1001  011D                     	;# 
  1002  018C                     	;# 
  1003  018D                     	;# 
  1004  018E                     	;# 
  1005  0191                     	;# 
  1006  0191                     	;# 
  1007  0192                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019D                     	;# 
  1019  019E                     	;# 
  1020  019F                     	;# 
  1021  020C                     	;# 
  1022  020D                     	;# 
  1023  0211                     	;# 
  1024  0211                     	;# 
  1025  0212                     	;# 
  1026  0212                     	;# 
  1027  0213                     	;# 
  1028  0213                     	;# 
  1029  0214                     	;# 
  1030  0214                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0216                     	;# 
  1035  0216                     	;# 
  1036  0217                     	;# 
  1037  0217                     	;# 
  1038  0391                     	;# 
  1039  0392                     	;# 
  1040  0393                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0498                     	;# 
  1045  0498                     	;# 
  1046  0499                     	;# 
  1047  049A                     	;# 
  1048  049B                     	;# 
  1049  049B                     	;# 
  1050  049C                     	;# 
  1051  049E                     	;# 
  1052  049F                     	;# 
  1053  0611                     	;# 
  1054  0612                     	;# 
  1055  0613                     	;# 
  1056  0613                     	;# 
  1057  0614                     	;# 
  1058  0615                     	;# 
  1059  0616                     	;# 
  1060  0616                     	;# 
  1061  0617                     	;# 
  1062  0618                     	;# 
  1063  0619                     	;# 
  1064  0619                     	;# 
  1065  061A                     	;# 
  1066  061B                     	;# 
  1067  061C                     	;# 
  1068  061C                     	;# 
  1069  0691                     	;# 
  1070  0692                     	;# 
  1071  0693                     	;# 
  1072  0694                     	;# 
  1073  0695                     	;# 
  1074  0F0F                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F28                     	;# 
  1100  0F29                     	;# 
  1101  0F2A                     	;# 
  1102  0F2B                     	;# 
  1103  0F2C                     	;# 
  1104  0F2D                     	;# 
  1105  0F2E                     	;# 
  1106  0F2F                     	;# 
  1107  0F8C                     	;# 
  1108  0F8D                     	;# 
  1109  0F91                     	;# 
  1110  0F95                     	;# 
  1111  0F96                     	;# 
  1112  0F97                     	;# 
  1113  0F9C                     	;# 
  1114  0F9D                     	;# 
  1115  0F9E                     	;# 
  1116  0FE3                     	;# 
  1117  0FE4                     	;# 
  1118  0FE5                     	;# 
  1119  0FE6                     	;# 
  1120  0FE7                     	;# 
  1121  0FE8                     	;# 
  1122  0FE9                     	;# 
  1123  0FEA                     	;# 
  1124  0FEB                     	;# 
  1125  0FED                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  000D                     	;# 
  1142  000E                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0015                     	;# 
  1147  0016                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  001A                     	;# 
  1153  001B                     	;# 
  1154  001C                     	;# 
  1155  008C                     	;# 
  1156  008D                     	;# 
  1157  008E                     	;# 
  1158  0091                     	;# 
  1159  0092                     	;# 
  1160  0093                     	;# 
  1161  0095                     	;# 
  1162  0096                     	;# 
  1163  0097                     	;# 
  1164  0099                     	;# 
  1165  009A                     	;# 
  1166  009B                     	;# 
  1167  009B                     	;# 
  1168  009C                     	;# 
  1169  009D                     	;# 
  1170  009E                     	;# 
  1171  009F                     	;# 
  1172  010C                     	;# 
  1173  010D                     	;# 
  1174  010E                     	;# 
  1175  0111                     	;# 
  1176  0112                     	;# 
  1177  0113                     	;# 
  1178  0114                     	;# 
  1179  0115                     	;# 
  1180  0116                     	;# 
  1181  0117                     	;# 
  1182  0118                     	;# 
  1183  0119                     	;# 
  1184  011D                     	;# 
  1185  018C                     	;# 
  1186  018D                     	;# 
  1187  018E                     	;# 
  1188  0191                     	;# 
  1189  0191                     	;# 
  1190  0192                     	;# 
  1191  0193                     	;# 
  1192  0193                     	;# 
  1193  0194                     	;# 
  1194  0195                     	;# 
  1195  0196                     	;# 
  1196  0199                     	;# 
  1197  019A                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019C                     	;# 
  1201  019D                     	;# 
  1202  019E                     	;# 
  1203  019F                     	;# 
  1204  020C                     	;# 
  1205  020D                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0391                     	;# 
  1222  0392                     	;# 
  1223  0393                     	;# 
  1224  0394                     	;# 
  1225  0395                     	;# 
  1226  0396                     	;# 
  1227  0498                     	;# 
  1228  0498                     	;# 
  1229  0499                     	;# 
  1230  049A                     	;# 
  1231  049B                     	;# 
  1232  049B                     	;# 
  1233  049C                     	;# 
  1234  049E                     	;# 
  1235  049F                     	;# 
  1236  0611                     	;# 
  1237  0612                     	;# 
  1238  0613                     	;# 
  1239  0613                     	;# 
  1240  0614                     	;# 
  1241  0615                     	;# 
  1242  0616                     	;# 
  1243  0616                     	;# 
  1244  0617                     	;# 
  1245  0618                     	;# 
  1246  0619                     	;# 
  1247  0619                     	;# 
  1248  061A                     	;# 
  1249  061B                     	;# 
  1250  061C                     	;# 
  1251  061C                     	;# 
  1252  0691                     	;# 
  1253  0692                     	;# 
  1254  0693                     	;# 
  1255  0694                     	;# 
  1256  0695                     	;# 
  1257  0F0F                     	;# 
  1258  0F10                     	;# 
  1259  0F11                     	;# 
  1260  0F12                     	;# 
  1261  0F13                     	;# 
  1262  0F14                     	;# 
  1263  0F15                     	;# 
  1264  0F16                     	;# 
  1265  0F17                     	;# 
  1266  0F18                     	;# 
  1267  0F19                     	;# 
  1268  0F1A                     	;# 
  1269  0F1B                     	;# 
  1270  0F1C                     	;# 
  1271  0F1D                     	;# 
  1272  0F1E                     	;# 
  1273  0F1F                     	;# 
  1274  0F20                     	;# 
  1275  0F21                     	;# 
  1276  0F22                     	;# 
  1277  0F23                     	;# 
  1278  0F24                     	;# 
  1279  0F25                     	;# 
  1280  0F26                     	;# 
  1281  0F27                     	;# 
  1282  0F28                     	;# 
  1283  0F29                     	;# 
  1284  0F2A                     	;# 
  1285  0F2B                     	;# 
  1286  0F2C                     	;# 
  1287  0F2D                     	;# 
  1288  0F2E                     	;# 
  1289  0F2F                     	;# 
  1290  0F8C                     	;# 
  1291  0F8D                     	;# 
  1292  0F91                     	;# 
  1293  0F95                     	;# 
  1294  0F96                     	;# 
  1295  0F97                     	;# 
  1296  0F9C                     	;# 
  1297  0F9D                     	;# 
  1298  0F9E                     	;# 
  1299  0FE3                     	;# 
  1300  0FE4                     	;# 
  1301  0FE5                     	;# 
  1302  0FE6                     	;# 
  1303  0FE7                     	;# 
  1304  0FE8                     	;# 
  1305  0FE9                     	;# 
  1306  0FEA                     	;# 
  1307  0FEB                     	;# 
  1308  0FED                     	;# 
  1309  0FEE                     	;# 
  1310  0FEF                     	;# 
  1311  0000                     	;# 
  1312  0001                     	;# 
  1313  0002                     	;# 
  1314  0003                     	;# 
  1315  0004                     	;# 
  1316  0005                     	;# 
  1317  0006                     	;# 
  1318  0007                     	;# 
  1319  0008                     	;# 
  1320  0009                     	;# 
  1321  000A                     	;# 
  1322  000B                     	;# 
  1323  000C                     	;# 
  1324  000D                     	;# 
  1325  000E                     	;# 
  1326  0011                     	;# 
  1327  0012                     	;# 
  1328  0013                     	;# 
  1329  0015                     	;# 
  1330  0016                     	;# 
  1331  0016                     	;# 
  1332  0017                     	;# 
  1333  0018                     	;# 
  1334  0019                     	;# 
  1335  001A                     	;# 
  1336  001B                     	;# 
  1337  001C                     	;# 
  1338  008C                     	;# 
  1339  008D                     	;# 
  1340  008E                     	;# 
  1341  0091                     	;# 
  1342  0092                     	;# 
  1343  0093                     	;# 
  1344  0095                     	;# 
  1345  0096                     	;# 
  1346  0097                     	;# 
  1347  0099                     	;# 
  1348  009A                     	;# 
  1349  009B                     	;# 
  1350  009B                     	;# 
  1351  009C                     	;# 
  1352  009D                     	;# 
  1353  009E                     	;# 
  1354  009F                     	;# 
  1355  010C                     	;# 
  1356  010D                     	;# 
  1357  010E                     	;# 
  1358  0111                     	;# 
  1359  0112                     	;# 
  1360  0113                     	;# 
  1361  0114                     	;# 
  1362  0115                     	;# 
  1363  0116                     	;# 
  1364  0117                     	;# 
  1365  0118                     	;# 
  1366  0119                     	;# 
  1367  011D                     	;# 
  1368  018C                     	;# 
  1369  018D                     	;# 
  1370  018E                     	;# 
  1371  0191                     	;# 
  1372  0191                     	;# 
  1373  0192                     	;# 
  1374  0193                     	;# 
  1375  0193                     	;# 
  1376  0194                     	;# 
  1377  0195                     	;# 
  1378  0196                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019C                     	;# 
  1384  019D                     	;# 
  1385  019E                     	;# 
  1386  019F                     	;# 
  1387  020C                     	;# 
  1388  020D                     	;# 
  1389  0211                     	;# 
  1390  0211                     	;# 
  1391  0212                     	;# 
  1392  0212                     	;# 
  1393  0213                     	;# 
  1394  0213                     	;# 
  1395  0214                     	;# 
  1396  0214                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0216                     	;# 
  1401  0216                     	;# 
  1402  0217                     	;# 
  1403  0217                     	;# 
  1404  0391                     	;# 
  1405  0392                     	;# 
  1406  0393                     	;# 
  1407  0394                     	;# 
  1408  0395                     	;# 
  1409  0396                     	;# 
  1410  0498                     	;# 
  1411  0498                     	;# 
  1412  0499                     	;# 
  1413  049A                     	;# 
  1414  049B                     	;# 
  1415  049B                     	;# 
  1416  049C                     	;# 
  1417  049E                     	;# 
  1418  049F                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0613                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0616                     	;# 
  1427  0617                     	;# 
  1428  0618                     	;# 
  1429  0619                     	;# 
  1430  0619                     	;# 
  1431  061A                     	;# 
  1432  061B                     	;# 
  1433  061C                     	;# 
  1434  061C                     	;# 
  1435  0691                     	;# 
  1436  0692                     	;# 
  1437  0693                     	;# 
  1438  0694                     	;# 
  1439  0695                     	;# 
  1440  0F0F                     	;# 
  1441  0F10                     	;# 
  1442  0F11                     	;# 
  1443  0F12                     	;# 
  1444  0F13                     	;# 
  1445  0F14                     	;# 
  1446  0F15                     	;# 
  1447  0F16                     	;# 
  1448  0F17                     	;# 
  1449  0F18                     	;# 
  1450  0F19                     	;# 
  1451  0F1A                     	;# 
  1452  0F1B                     	;# 
  1453  0F1C                     	;# 
  1454  0F1D                     	;# 
  1455  0F1E                     	;# 
  1456  0F1F                     	;# 
  1457  0F20                     	;# 
  1458  0F21                     	;# 
  1459  0F22                     	;# 
  1460  0F23                     	;# 
  1461  0F24                     	;# 
  1462  0F25                     	;# 
  1463  0F26                     	;# 
  1464  0F27                     	;# 
  1465  0F28                     	;# 
  1466  0F29                     	;# 
  1467  0F2A                     	;# 
  1468  0F2B                     	;# 
  1469  0F2C                     	;# 
  1470  0F2D                     	;# 
  1471  0F2E                     	;# 
  1472  0F2F                     	;# 
  1473  0F8C                     	;# 
  1474  0F8D                     	;# 
  1475  0F91                     	;# 
  1476  0F95                     	;# 
  1477  0F96                     	;# 
  1478  0F97                     	;# 
  1479  0F9C                     	;# 
  1480  0F9D                     	;# 
  1481  0F9E                     	;# 
  1482  0FE3                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0011                     	;# 
  1510  0012                     	;# 
  1511  0013                     	;# 
  1512  0015                     	;# 
  1513  0016                     	;# 
  1514  0016                     	;# 
  1515  0017                     	;# 
  1516  0018                     	;# 
  1517  0019                     	;# 
  1518  001A                     	;# 
  1519  001B                     	;# 
  1520  001C                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0091                     	;# 
  1525  0092                     	;# 
  1526  0093                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  009F                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0111                     	;# 
  1542  0112                     	;# 
  1543  0113                     	;# 
  1544  0114                     	;# 
  1545  0115                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  0118                     	;# 
  1549  0119                     	;# 
  1550  011D                     	;# 
  1551  018C                     	;# 
  1552  018D                     	;# 
  1553  018E                     	;# 
  1554  0191                     	;# 
  1555  0191                     	;# 
  1556  0192                     	;# 
  1557  0193                     	;# 
  1558  0193                     	;# 
  1559  0194                     	;# 
  1560  0195                     	;# 
  1561  0196                     	;# 
  1562  0199                     	;# 
  1563  019A                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020C                     	;# 
  1571  020D                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0391                     	;# 
  1588  0392                     	;# 
  1589  0393                     	;# 
  1590  0394                     	;# 
  1591  0395                     	;# 
  1592  0396                     	;# 
  1593  0498                     	;# 
  1594  0498                     	;# 
  1595  0499                     	;# 
  1596  049A                     	;# 
  1597  049B                     	;# 
  1598  049B                     	;# 
  1599  049C                     	;# 
  1600  049E                     	;# 
  1601  049F                     	;# 
  1602  0611                     	;# 
  1603  0612                     	;# 
  1604  0613                     	;# 
  1605  0613                     	;# 
  1606  0614                     	;# 
  1607  0615                     	;# 
  1608  0616                     	;# 
  1609  0616                     	;# 
  1610  0617                     	;# 
  1611  0618                     	;# 
  1612  0619                     	;# 
  1613  0619                     	;# 
  1614  061A                     	;# 
  1615  061B                     	;# 
  1616  061C                     	;# 
  1617  061C                     	;# 
  1618  0691                     	;# 
  1619  0692                     	;# 
  1620  0693                     	;# 
  1621  0694                     	;# 
  1622  0695                     	;# 
  1623  0F0F                     	;# 
  1624  0F10                     	;# 
  1625  0F11                     	;# 
  1626  0F12                     	;# 
  1627  0F13                     	;# 
  1628  0F14                     	;# 
  1629  0F15                     	;# 
  1630  0F16                     	;# 
  1631  0F17                     	;# 
  1632  0F18                     	;# 
  1633  0F19                     	;# 
  1634  0F1A                     	;# 
  1635  0F1B                     	;# 
  1636  0F1C                     	;# 
  1637  0F1D                     	;# 
  1638  0F1E                     	;# 
  1639  0F1F                     	;# 
  1640  0F20                     	;# 
  1641  0F21                     	;# 
  1642  0F22                     	;# 
  1643  0F23                     	;# 
  1644  0F24                     	;# 
  1645  0F25                     	;# 
  1646  0F26                     	;# 
  1647  0F27                     	;# 
  1648  0F28                     	;# 
  1649  0F29                     	;# 
  1650  0F2A                     	;# 
  1651  0F2B                     	;# 
  1652  0F2C                     	;# 
  1653  0F2D                     	;# 
  1654  0F2E                     	;# 
  1655  0F2F                     	;# 
  1656  0F8C                     	;# 
  1657  0F8D                     	;# 
  1658  0F91                     	;# 
  1659  0F95                     	;# 
  1660  0F96                     	;# 
  1661  0F97                     	;# 
  1662  0F9C                     	;# 
  1663  0F9D                     	;# 
  1664  0F9E                     	;# 
  1665  0FE3                     	;# 
  1666  0FE4                     	;# 
  1667  0FE5                     	;# 
  1668  0FE6                     	;# 
  1669  0FE7                     	;# 
  1670  0FE8                     	;# 
  1671  0FE9                     	;# 
  1672  0FEA                     	;# 
  1673  0FEB                     	;# 
  1674  0FED                     	;# 
  1675  0FEE                     	;# 
  1676  0FEF                     	;# 
  1677  0000                     	;# 
  1678  0001                     	;# 
  1679  0002                     	;# 
  1680  0003                     	;# 
  1681  0004                     	;# 
  1682  0005                     	;# 
  1683  0006                     	;# 
  1684  0007                     	;# 
  1685  0008                     	;# 
  1686  0009                     	;# 
  1687  000A                     	;# 
  1688  000B                     	;# 
  1689  000C                     	;# 
  1690  000D                     	;# 
  1691  000E                     	;# 
  1692  0011                     	;# 
  1693  0012                     	;# 
  1694  0013                     	;# 
  1695  0015                     	;# 
  1696  0016                     	;# 
  1697  0016                     	;# 
  1698  0017                     	;# 
  1699  0018                     	;# 
  1700  0019                     	;# 
  1701  001A                     	;# 
  1702  001B                     	;# 
  1703  001C                     	;# 
  1704  008C                     	;# 
  1705  008D                     	;# 
  1706  008E                     	;# 
  1707  0091                     	;# 
  1708  0092                     	;# 
  1709  0093                     	;# 
  1710  0095                     	;# 
  1711  0096                     	;# 
  1712  0097                     	;# 
  1713  0099                     	;# 
  1714  009A                     	;# 
  1715  009B                     	;# 
  1716  009B                     	;# 
  1717  009C                     	;# 
  1718  009D                     	;# 
  1719  009E                     	;# 
  1720  009F                     	;# 
  1721  010C                     	;# 
  1722  010D                     	;# 
  1723  010E                     	;# 
  1724  0111                     	;# 
  1725  0112                     	;# 
  1726  0113                     	;# 
  1727  0114                     	;# 
  1728  0115                     	;# 
  1729  0116                     	;# 
  1730  0117                     	;# 
  1731  0118                     	;# 
  1732  0119                     	;# 
  1733  011D                     	;# 
  1734  018C                     	;# 
  1735  018D                     	;# 
  1736  018E                     	;# 
  1737  0191                     	;# 
  1738  0191                     	;# 
  1739  0192                     	;# 
  1740  0193                     	;# 
  1741  0193                     	;# 
  1742  0194                     	;# 
  1743  0195                     	;# 
  1744  0196                     	;# 
  1745  0199                     	;# 
  1746  019A                     	;# 
  1747  019B                     	;# 
  1748  019B                     	;# 
  1749  019C                     	;# 
  1750  019D                     	;# 
  1751  019E                     	;# 
  1752  019F                     	;# 
  1753  020C                     	;# 
  1754  020D                     	;# 
  1755  0211                     	;# 
  1756  0211                     	;# 
  1757  0212                     	;# 
  1758  0212                     	;# 
  1759  0213                     	;# 
  1760  0213                     	;# 
  1761  0214                     	;# 
  1762  0214                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0215                     	;# 
  1766  0216                     	;# 
  1767  0216                     	;# 
  1768  0217                     	;# 
  1769  0217                     	;# 
  1770  0391                     	;# 
  1771  0392                     	;# 
  1772  0393                     	;# 
  1773  0394                     	;# 
  1774  0395                     	;# 
  1775  0396                     	;# 
  1776  0498                     	;# 
  1777  0498                     	;# 
  1778  0499                     	;# 
  1779  049A                     	;# 
  1780  049B                     	;# 
  1781  049B                     	;# 
  1782  049C                     	;# 
  1783  049E                     	;# 
  1784  049F                     	;# 
  1785  0611                     	;# 
  1786  0612                     	;# 
  1787  0613                     	;# 
  1788  0613                     	;# 
  1789  0614                     	;# 
  1790  0615                     	;# 
  1791  0616                     	;# 
  1792  0616                     	;# 
  1793  0617                     	;# 
  1794  0618                     	;# 
  1795  0619                     	;# 
  1796  0619                     	;# 
  1797  061A                     	;# 
  1798  061B                     	;# 
  1799  061C                     	;# 
  1800  061C                     	;# 
  1801  0691                     	;# 
  1802  0692                     	;# 
  1803  0693                     	;# 
  1804  0694                     	;# 
  1805  0695                     	;# 
  1806  0F0F                     	;# 
  1807  0F10                     	;# 
  1808  0F11                     	;# 
  1809  0F12                     	;# 
  1810  0F13                     	;# 
  1811  0F14                     	;# 
  1812  0F15                     	;# 
  1813  0F16                     	;# 
  1814  0F17                     	;# 
  1815  0F18                     	;# 
  1816  0F19                     	;# 
  1817  0F1A                     	;# 
  1818  0F1B                     	;# 
  1819  0F1C                     	;# 
  1820  0F1D                     	;# 
  1821  0F1E                     	;# 
  1822  0F1F                     	;# 
  1823  0F20                     	;# 
  1824  0F21                     	;# 
  1825  0F22                     	;# 
  1826  0F23                     	;# 
  1827  0F24                     	;# 
  1828  0F25                     	;# 
  1829  0F26                     	;# 
  1830  0F27                     	;# 
  1831  0F28                     	;# 
  1832  0F29                     	;# 
  1833  0F2A                     	;# 
  1834  0F2B                     	;# 
  1835  0F2C                     	;# 
  1836  0F2D                     	;# 
  1837  0F2E                     	;# 
  1838  0F2F                     	;# 
  1839  0F8C                     	;# 
  1840  0F8D                     	;# 
  1841  0F91                     	;# 
  1842  0F95                     	;# 
  1843  0F96                     	;# 
  1844  0F97                     	;# 
  1845  0F9C                     	;# 
  1846  0F9D                     	;# 
  1847  0F9E                     	;# 
  1848  0FE3                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  0011                     	;# 
  1876  0012                     	;# 
  1877  0013                     	;# 
  1878  0015                     	;# 
  1879  0016                     	;# 
  1880  0016                     	;# 
  1881  0017                     	;# 
  1882  0018                     	;# 
  1883  0019                     	;# 
  1884  001A                     	;# 
  1885  001B                     	;# 
  1886  001C                     	;# 
  1887  008C                     	;# 
  1888  008D                     	;# 
  1889  008E                     	;# 
  1890  0091                     	;# 
  1891  0092                     	;# 
  1892  0093                     	;# 
  1893  0095                     	;# 
  1894  0096                     	;# 
  1895  0097                     	;# 
  1896  0099                     	;# 
  1897  009A                     	;# 
  1898  009B                     	;# 
  1899  009B                     	;# 
  1900  009C                     	;# 
  1901  009D                     	;# 
  1902  009E                     	;# 
  1903  009F                     	;# 
  1904  010C                     	;# 
  1905  010D                     	;# 
  1906  010E                     	;# 
  1907  0111                     	;# 
  1908  0112                     	;# 
  1909  0113                     	;# 
  1910  0114                     	;# 
  1911  0115                     	;# 
  1912  0116                     	;# 
  1913  0117                     	;# 
  1914  0118                     	;# 
  1915  0119                     	;# 
  1916  011D                     	;# 
  1917  018C                     	;# 
  1918  018D                     	;# 
  1919  018E                     	;# 
  1920  0191                     	;# 
  1921  0191                     	;# 
  1922  0192                     	;# 
  1923  0193                     	;# 
  1924  0193                     	;# 
  1925  0194                     	;# 
  1926  0195                     	;# 
  1927  0196                     	;# 
  1928  0199                     	;# 
  1929  019A                     	;# 
  1930  019B                     	;# 
  1931  019B                     	;# 
  1932  019C                     	;# 
  1933  019D                     	;# 
  1934  019E                     	;# 
  1935  019F                     	;# 
  1936  020C                     	;# 
  1937  020D                     	;# 
  1938  0211                     	;# 
  1939  0211                     	;# 
  1940  0212                     	;# 
  1941  0212                     	;# 
  1942  0213                     	;# 
  1943  0213                     	;# 
  1944  0214                     	;# 
  1945  0214                     	;# 
  1946  0215                     	;# 
  1947  0215                     	;# 
  1948  0215                     	;# 
  1949  0216                     	;# 
  1950  0216                     	;# 
  1951  0217                     	;# 
  1952  0217                     	;# 
  1953  0391                     	;# 
  1954  0392                     	;# 
  1955  0393                     	;# 
  1956  0394                     	;# 
  1957  0395                     	;# 
  1958  0396                     	;# 
  1959  0498                     	;# 
  1960  0498                     	;# 
  1961  0499                     	;# 
  1962  049A                     	;# 
  1963  049B                     	;# 
  1964  049B                     	;# 
  1965  049C                     	;# 
  1966  049E                     	;# 
  1967  049F                     	;# 
  1968  0611                     	;# 
  1969  0612                     	;# 
  1970  0613                     	;# 
  1971  0613                     	;# 
  1972  0614                     	;# 
  1973  0615                     	;# 
  1974  0616                     	;# 
  1975  0616                     	;# 
  1976  0617                     	;# 
  1977  0618                     	;# 
  1978  0619                     	;# 
  1979  0619                     	;# 
  1980  061A                     	;# 
  1981  061B                     	;# 
  1982  061C                     	;# 
  1983  061C                     	;# 
  1984  0691                     	;# 
  1985  0692                     	;# 
  1986  0693                     	;# 
  1987  0694                     	;# 
  1988  0695                     	;# 
  1989  0F0F                     	;# 
  1990  0F10                     	;# 
  1991  0F11                     	;# 
  1992  0F12                     	;# 
  1993  0F13                     	;# 
  1994  0F14                     	;# 
  1995  0F15                     	;# 
  1996  0F16                     	;# 
  1997  0F17                     	;# 
  1998  0F18                     	;# 
  1999  0F19                     	;# 
  2000  0F1A                     	;# 
  2001  0F1B                     	;# 
  2002  0F1C                     	;# 
  2003  0F1D                     	;# 
  2004  0F1E                     	;# 
  2005  0F1F                     	;# 
  2006  0F20                     	;# 
  2007  0F21                     	;# 
  2008  0F22                     	;# 
  2009  0F23                     	;# 
  2010  0F24                     	;# 
  2011  0F25                     	;# 
  2012  0F26                     	;# 
  2013  0F27                     	;# 
  2014  0F28                     	;# 
  2015  0F29                     	;# 
  2016  0F2A                     	;# 
  2017  0F2B                     	;# 
  2018  0F2C                     	;# 
  2019  0F2D                     	;# 
  2020  0F2E                     	;# 
  2021  0F2F                     	;# 
  2022  0F8C                     	;# 
  2023  0F8D                     	;# 
  2024  0F91                     	;# 
  2025  0F95                     	;# 
  2026  0F96                     	;# 
  2027  0F97                     	;# 
  2028  0F9C                     	;# 
  2029  0F9D                     	;# 
  2030  0F9E                     	;# 
  2031  0FE3                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043  0000                     	;# 
  2044  0001                     	;# 
  2045  0002                     	;# 
  2046  0003                     	;# 
  2047  0004                     	;# 
  2048  0005                     	;# 
  2049  0006                     	;# 
  2050  0007                     	;# 
  2051  0008                     	;# 
  2052  0009                     	;# 
  2053  000A                     	;# 
  2054  000B                     	;# 
  2055  000C                     	;# 
  2056  000D                     	;# 
  2057  000E                     	;# 
  2058  0011                     	;# 
  2059  0012                     	;# 
  2060  0013                     	;# 
  2061  0015                     	;# 
  2062  0016                     	;# 
  2063  0016                     	;# 
  2064  0017                     	;# 
  2065  0018                     	;# 
  2066  0019                     	;# 
  2067  001A                     	;# 
  2068  001B                     	;# 
  2069  001C                     	;# 
  2070  008C                     	;# 
  2071  008D                     	;# 
  2072  008E                     	;# 
  2073  0091                     	;# 
  2074  0092                     	;# 
  2075  0093                     	;# 
  2076  0095                     	;# 
  2077  0096                     	;# 
  2078  0097                     	;# 
  2079  0099                     	;# 
  2080  009A                     	;# 
  2081  009B                     	;# 
  2082  009B                     	;# 
  2083  009C                     	;# 
  2084  009D                     	;# 
  2085  009E                     	;# 
  2086  009F                     	;# 
  2087  010C                     	;# 
  2088  010D                     	;# 
  2089  010E                     	;# 
  2090  0111                     	;# 
  2091  0112                     	;# 
  2092  0113                     	;# 
  2093  0114                     	;# 
  2094  0115                     	;# 
  2095  0116                     	;# 
  2096  0117                     	;# 
  2097  0118                     	;# 
  2098  0119                     	;# 
  2099  011D                     	;# 
  2100  018C                     	;# 
  2101  018D                     	;# 
  2102  018E                     	;# 
  2103  0191                     	;# 
  2104  0191                     	;# 
  2105  0192                     	;# 
  2106  0193                     	;# 
  2107  0193                     	;# 
  2108  0194                     	;# 
  2109  0195                     	;# 
  2110  0196                     	;# 
  2111  0199                     	;# 
  2112  019A                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019C                     	;# 
  2116  019D                     	;# 
  2117  019E                     	;# 
  2118  019F                     	;# 
  2119  020C                     	;# 
  2120  020D                     	;# 
  2121  0211                     	;# 
  2122  0211                     	;# 
  2123  0212                     	;# 
  2124  0212                     	;# 
  2125  0213                     	;# 
  2126  0213                     	;# 
  2127  0214                     	;# 
  2128  0214                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0216                     	;# 
  2133  0216                     	;# 
  2134  0217                     	;# 
  2135  0217                     	;# 
  2136  0391                     	;# 
  2137  0392                     	;# 
  2138  0393                     	;# 
  2139  0394                     	;# 
  2140  0395                     	;# 
  2141  0396                     	;# 
  2142  0498                     	;# 
  2143  0498                     	;# 
  2144  0499                     	;# 
  2145  049A                     	;# 
  2146  049B                     	;# 
  2147  049B                     	;# 
  2148  049C                     	;# 
  2149  049E                     	;# 
  2150  049F                     	;# 
  2151  0611                     	;# 
  2152  0612                     	;# 
  2153  0613                     	;# 
  2154  0613                     	;# 
  2155  0614                     	;# 
  2156  0615                     	;# 
  2157  0616                     	;# 
  2158  0616                     	;# 
  2159  0617                     	;# 
  2160  0618                     	;# 
  2161  0619                     	;# 
  2162  0619                     	;# 
  2163  061A                     	;# 
  2164  061B                     	;# 
  2165  061C                     	;# 
  2166  061C                     	;# 
  2167  0691                     	;# 
  2168  0692                     	;# 
  2169  0693                     	;# 
  2170  0694                     	;# 
  2171  0695                     	;# 
  2172  0F0F                     	;# 
  2173  0F10                     	;# 
  2174  0F11                     	;# 
  2175  0F12                     	;# 
  2176  0F13                     	;# 
  2177  0F14                     	;# 
  2178  0F15                     	;# 
  2179  0F16                     	;# 
  2180  0F17                     	;# 
  2181  0F18                     	;# 
  2182  0F19                     	;# 
  2183  0F1A                     	;# 
  2184  0F1B                     	;# 
  2185  0F1C                     	;# 
  2186  0F1D                     	;# 
  2187  0F1E                     	;# 
  2188  0F1F                     	;# 
  2189  0F20                     	;# 
  2190  0F21                     	;# 
  2191  0F22                     	;# 
  2192  0F23                     	;# 
  2193  0F24                     	;# 
  2194  0F25                     	;# 
  2195  0F26                     	;# 
  2196  0F27                     	;# 
  2197  0F28                     	;# 
  2198  0F29                     	;# 
  2199  0F2A                     	;# 
  2200  0F2B                     	;# 
  2201  0F2C                     	;# 
  2202  0F2D                     	;# 
  2203  0F2E                     	;# 
  2204  0F2F                     	;# 
  2205  0F8C                     	;# 
  2206  0F8D                     	;# 
  2207  0F91                     	;# 
  2208  0F95                     	;# 
  2209  0F96                     	;# 
  2210  0F97                     	;# 
  2211  0F9C                     	;# 
  2212  0F9D                     	;# 
  2213  0F9E                     	;# 
  2214  0FE3                     	;# 
  2215  0FE4                     	;# 
  2216  0FE5                     	;# 
  2217  0FE6                     	;# 
  2218  0FE7                     	;# 
  2219  0FE8                     	;# 
  2220  0FE9                     	;# 
  2221  0FEA                     	;# 
  2222  0FEB                     	;# 
  2223  0FED                     	;# 
  2224  0FEE                     	;# 
  2225  0FEF                     	;# 
  2226  0000                     	;# 
  2227  0001                     	;# 
  2228  0002                     	;# 
  2229  0003                     	;# 
  2230  0004                     	;# 
  2231  0005                     	;# 
  2232  0006                     	;# 
  2233  0007                     	;# 
  2234  0008                     	;# 
  2235  0009                     	;# 
  2236  000A                     	;# 
  2237  000B                     	;# 
  2238  000C                     	;# 
  2239  000D                     	;# 
  2240  000E                     	;# 
  2241  0011                     	;# 
  2242  0012                     	;# 
  2243  0013                     	;# 
  2244  0015                     	;# 
  2245  0016                     	;# 
  2246  0016                     	;# 
  2247  0017                     	;# 
  2248  0018                     	;# 
  2249  0019                     	;# 
  2250  001A                     	;# 
  2251  001B                     	;# 
  2252  001C                     	;# 
  2253  008C                     	;# 
  2254  008D                     	;# 
  2255  008E                     	;# 
  2256  0091                     	;# 
  2257  0092                     	;# 
  2258  0093                     	;# 
  2259  0095                     	;# 
  2260  0096                     	;# 
  2261  0097                     	;# 
  2262  0099                     	;# 
  2263  009A                     	;# 
  2264  009B                     	;# 
  2265  009B                     	;# 
  2266  009C                     	;# 
  2267  009D                     	;# 
  2268  009E                     	;# 
  2269  009F                     	;# 
  2270  010C                     	;# 
  2271  010D                     	;# 
  2272  010E                     	;# 
  2273  0111                     	;# 
  2274  0112                     	;# 
  2275  0113                     	;# 
  2276  0114                     	;# 
  2277  0115                     	;# 
  2278  0116                     	;# 
  2279  0117                     	;# 
  2280  0118                     	;# 
  2281  0119                     	;# 
  2282  011D                     	;# 
  2283  018C                     	;# 
  2284  018D                     	;# 
  2285  018E                     	;# 
  2286  0191                     	;# 
  2287  0191                     	;# 
  2288  0192                     	;# 
  2289  0193                     	;# 
  2290  0193                     	;# 
  2291  0194                     	;# 
  2292  0195                     	;# 
  2293  0196                     	;# 
  2294  0199                     	;# 
  2295  019A                     	;# 
  2296  019B                     	;# 
  2297  019B                     	;# 
  2298  019C                     	;# 
  2299  019D                     	;# 
  2300  019E                     	;# 
  2301  019F                     	;# 
  2302  020C                     	;# 
  2303  020D                     	;# 
  2304  0211                     	;# 
  2305  0211                     	;# 
  2306  0212                     	;# 
  2307  0212                     	;# 
  2308  0213                     	;# 
  2309  0213                     	;# 
  2310  0214                     	;# 
  2311  0214                     	;# 
  2312  0215                     	;# 
  2313  0215                     	;# 
  2314  0215                     	;# 
  2315  0216                     	;# 
  2316  0216                     	;# 
  2317  0217                     	;# 
  2318  0217                     	;# 
  2319  0391                     	;# 
  2320  0392                     	;# 
  2321  0393                     	;# 
  2322  0394                     	;# 
  2323  0395                     	;# 
  2324  0396                     	;# 
  2325  0498                     	;# 
  2326  0498                     	;# 
  2327  0499                     	;# 
  2328  049A                     	;# 
  2329  049B                     	;# 
  2330  049B                     	;# 
  2331  049C                     	;# 
  2332  049E                     	;# 
  2333  049F                     	;# 
  2334  0611                     	;# 
  2335  0612                     	;# 
  2336  0613                     	;# 
  2337  0613                     	;# 
  2338  0614                     	;# 
  2339  0615                     	;# 
  2340  0616                     	;# 
  2341  0616                     	;# 
  2342  0617                     	;# 
  2343  0618                     	;# 
  2344  0619                     	;# 
  2345  0619                     	;# 
  2346  061A                     	;# 
  2347  061B                     	;# 
  2348  061C                     	;# 
  2349  061C                     	;# 
  2350  0691                     	;# 
  2351  0692                     	;# 
  2352  0693                     	;# 
  2353  0694                     	;# 
  2354  0695                     	;# 
  2355  0F0F                     	;# 
  2356  0F10                     	;# 
  2357  0F11                     	;# 
  2358  0F12                     	;# 
  2359  0F13                     	;# 
  2360  0F14                     	;# 
  2361  0F15                     	;# 
  2362  0F16                     	;# 
  2363  0F17                     	;# 
  2364  0F18                     	;# 
  2365  0F19                     	;# 
  2366  0F1A                     	;# 
  2367  0F1B                     	;# 
  2368  0F1C                     	;# 
  2369  0F1D                     	;# 
  2370  0F1E                     	;# 
  2371  0F1F                     	;# 
  2372  0F20                     	;# 
  2373  0F21                     	;# 
  2374  0F22                     	;# 
  2375  0F23                     	;# 
  2376  0F24                     	;# 
  2377  0F25                     	;# 
  2378  0F26                     	;# 
  2379  0F27                     	;# 
  2380  0F28                     	;# 
  2381  0F29                     	;# 
  2382  0F2A                     	;# 
  2383  0F2B                     	;# 
  2384  0F2C                     	;# 
  2385  0F2D                     	;# 
  2386  0F2E                     	;# 
  2387  0F2F                     	;# 
  2388  0F8C                     	;# 
  2389  0F8D                     	;# 
  2390  0F91                     	;# 
  2391  0F95                     	;# 
  2392  0F96                     	;# 
  2393  0F97                     	;# 
  2394  0F9C                     	;# 
  2395  0F9D                     	;# 
  2396  0F9E                     	;# 
  2397  0FE3                     	;# 
  2398  0FE4                     	;# 
  2399  0FE5                     	;# 
  2400  0FE6                     	;# 
  2401  0FE7                     	;# 
  2402  0FE8                     	;# 
  2403  0FE9                     	;# 
  2404  0FEA                     	;# 
  2405  0FEB                     	;# 
  2406  0FED                     	;# 
  2407  0FEE                     	;# 
  2408  0FEF                     	;# 
  2409  0000                     	;# 
  2410  0001                     	;# 
  2411  0002                     	;# 
  2412  0003                     	;# 
  2413  0004                     	;# 
  2414  0005                     	;# 
  2415  0006                     	;# 
  2416  0007                     	;# 
  2417  0008                     	;# 
  2418  0009                     	;# 
  2419  000A                     	;# 
  2420  000B                     	;# 
  2421  000C                     	;# 
  2422  000D                     	;# 
  2423  000E                     	;# 
  2424  0011                     	;# 
  2425  0012                     	;# 
  2426  0013                     	;# 
  2427  0015                     	;# 
  2428  0016                     	;# 
  2429  0016                     	;# 
  2430  0017                     	;# 
  2431  0018                     	;# 
  2432  0019                     	;# 
  2433  001A                     	;# 
  2434  001B                     	;# 
  2435  001C                     	;# 
  2436  008C                     	;# 
  2437  008D                     	;# 
  2438  008E                     	;# 
  2439  0091                     	;# 
  2440  0092                     	;# 
  2441  0093                     	;# 
  2442  0095                     	;# 
  2443  0096                     	;# 
  2444  0097                     	;# 
  2445  0099                     	;# 
  2446  009A                     	;# 
  2447  009B                     	;# 
  2448  009B                     	;# 
  2449  009C                     	;# 
  2450  009D                     	;# 
  2451  009E                     	;# 
  2452  009F                     	;# 
  2453  010C                     	;# 
  2454  010D                     	;# 
  2455  010E                     	;# 
  2456  0111                     	;# 
  2457  0112                     	;# 
  2458  0113                     	;# 
  2459  0114                     	;# 
  2460  0115                     	;# 
  2461  0116                     	;# 
  2462  0117                     	;# 
  2463  0118                     	;# 
  2464  0119                     	;# 
  2465  011D                     	;# 
  2466  018C                     	;# 
  2467  018D                     	;# 
  2468  018E                     	;# 
  2469  0191                     	;# 
  2470  0191                     	;# 
  2471  0192                     	;# 
  2472  0193                     	;# 
  2473  0193                     	;# 
  2474  0194                     	;# 
  2475  0195                     	;# 
  2476  0196                     	;# 
  2477  0199                     	;# 
  2478  019A                     	;# 
  2479  019B                     	;# 
  2480  019B                     	;# 
  2481  019C                     	;# 
  2482  019D                     	;# 
  2483  019E                     	;# 
  2484  019F                     	;# 
  2485  020C                     	;# 
  2486  020D                     	;# 
  2487  0211                     	;# 
  2488  0211                     	;# 
  2489  0212                     	;# 
  2490  0212                     	;# 
  2491  0213                     	;# 
  2492  0213                     	;# 
  2493  0214                     	;# 
  2494  0214                     	;# 
  2495  0215                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0216                     	;# 
  2499  0216                     	;# 
  2500  0217                     	;# 
  2501  0217                     	;# 
  2502  0391                     	;# 
  2503  0392                     	;# 
  2504  0393                     	;# 
  2505  0394                     	;# 
  2506  0395                     	;# 
  2507  0396                     	;# 
  2508  0498                     	;# 
  2509  0498                     	;# 
  2510  0499                     	;# 
  2511  049A                     	;# 
  2512  049B                     	;# 
  2513  049B                     	;# 
  2514  049C                     	;# 
  2515  049E                     	;# 
  2516  049F                     	;# 
  2517  0611                     	;# 
  2518  0612                     	;# 
  2519  0613                     	;# 
  2520  0613                     	;# 
  2521  0614                     	;# 
  2522  0615                     	;# 
  2523  0616                     	;# 
  2524  0616                     	;# 
  2525  0617                     	;# 
  2526  0618                     	;# 
  2527  0619                     	;# 
  2528  0619                     	;# 
  2529  061A                     	;# 
  2530  061B                     	;# 
  2531  061C                     	;# 
  2532  061C                     	;# 
  2533  0691                     	;# 
  2534  0692                     	;# 
  2535  0693                     	;# 
  2536  0694                     	;# 
  2537  0695                     	;# 
  2538  0F0F                     	;# 
  2539  0F10                     	;# 
  2540  0F11                     	;# 
  2541  0F12                     	;# 
  2542  0F13                     	;# 
  2543  0F14                     	;# 
  2544  0F15                     	;# 
  2545  0F16                     	;# 
  2546  0F17                     	;# 
  2547  0F18                     	;# 
  2548  0F19                     	;# 
  2549  0F1A                     	;# 
  2550  0F1B                     	;# 
  2551  0F1C                     	;# 
  2552  0F1D                     	;# 
  2553  0F1E                     	;# 
  2554  0F1F                     	;# 
  2555  0F20                     	;# 
  2556  0F21                     	;# 
  2557  0F22                     	;# 
  2558  0F23                     	;# 
  2559  0F24                     	;# 
  2560  0F25                     	;# 
  2561  0F26                     	;# 
  2562  0F27                     	;# 
  2563  0F28                     	;# 
  2564  0F29                     	;# 
  2565  0F2A                     	;# 
  2566  0F2B                     	;# 
  2567  0F2C                     	;# 
  2568  0F2D                     	;# 
  2569  0F2E                     	;# 
  2570  0F2F                     	;# 
  2571  0F8C                     	;# 
  2572  0F8D                     	;# 
  2573  0F91                     	;# 
  2574  0F95                     	;# 
  2575  0F96                     	;# 
  2576  0F97                     	;# 
  2577  0F9C                     	;# 
  2578  0F9D                     	;# 
  2579  0F9E                     	;# 
  2580  0FE3                     	;# 
  2581  0FE4                     	;# 
  2582  0FE5                     	;# 
  2583  0FE6                     	;# 
  2584  0FE7                     	;# 
  2585  0FE8                     	;# 
  2586  0FE9                     	;# 
  2587  0FEA                     	;# 
  2588  0FEB                     	;# 
  2589  0FED                     	;# 
  2590  0FEE                     	;# 
  2591  0FEF                     	;# 
  2592                           
  2593                           	psect	strings
  2594  0800                     __pstrings:	
  2595  0800                     __stringtab:	
  2596  0800  3400               	retlw	0
  2597  0801                     __end_of__stringtab:	
  2598  0801                     _mrfRegset_InitCnt:	
  2599  0801  3410               	retlw	16
  2600  0802                     __end_of_mrfRegset_InitCnt:	
  2601  0802                     _mrfRegset_RxCnt:	
  2602  0802  3406               	retlw	6
  2603  0803                     __end_of_mrfRegset_RxCnt:	
  2604  0803                     _mrfRegset_SleepCnt:	
  2605  0803  3403               	retlw	3
  2606  0804                     __end_of_mrfRegset_SleepCnt:	
  2607  0804                     _mrfRegset_TxCnt:	
  2608  0804  3404               	retlw	4
  2609  0805                     __end_of_mrfRegset_TxCnt:	
  2610  0805                     _mrfRegset_Init:	
  2611  0805  34CA               	retlw	202
  2612  0806  3471               	retlw	113
  2613  0807  34CA               	retlw	202
  2614  0808  3473               	retlw	115
  2615  0809  3480               	retlw	128
  2616  080A  3428               	retlw	40
  2617  080B  34C4               	retlw	196
  2618  080C  34E7               	retlw	231
  2619  080D  34A8               	retlw	168
  2620  080E  3460               	retlw	96
  2621  080F  34C6               	retlw	198
  2622  0810  3405               	retlw	5
  2623  0811  3482               	retlw	130
  2624  0812  3400               	retlw	0
  2625  0813  3490               	retlw	144
  2626  0814  3462               	retlw	98
  2627  0815  3498               	retlw	152
  2628  0816  3490               	retlw	144
  2629  0817  34C2               	retlw	194
  2630  0818  34AC               	retlw	172
  2631  0819  3482               	retlw	130
  2632  081A  3420               	retlw	32
  2633  081B  3455               	retlw	85
  2634  081C  3400               	retlw	0
  2635  081D  3482               	retlw	130
  2636  081E  3480               	retlw	128
  2637  081F  3480               	retlw	128
  2638  0820  3468               	retlw	104
  2639  0821  34CA               	retlw	202
  2640  0822  3471               	retlw	113
  2641  0823  34CA               	retlw	202
  2642  0824  3473               	retlw	115
  2643  0825                     __end_of_mrfRegset_Init:	
  2644  0825                     _mrfRegset_Rx:	
  2645  0825  3482               	retlw	130
  2646  0826  3400               	retlw	0
  2647  0827  34CA               	retlw	202
  2648  0828  3471               	retlw	113
  2649  0829  3480               	retlw	128
  2650  082A  3428               	retlw	40
  2651  082B  3482               	retlw	130
  2652  082C  3480               	retlw	128
  2653  082D  3480               	retlw	128
  2654  082E  3468               	retlw	104
  2655  082F  34CA               	retlw	202
  2656  0830  3473               	retlw	115
  2657  0831                     __end_of_mrfRegset_Rx:	
  2658  0831                     _mrfRegset_Tx:	
  2659  0831  3482               	retlw	130
  2660  0832  3400               	retlw	0
  2661  0833  34CA               	retlw	202
  2662  0834  3471               	retlw	113
  2663  0835  3480               	retlw	128
  2664  0836  34A8               	retlw	168
  2665  0837  3482               	retlw	130
  2666  0838  3420               	retlw	32
  2667  0839                     __end_of_mrfRegset_Tx:	
  2668  0839                     _mrfRegset_Sleep:	
  2669  0839  3482               	retlw	130
  2670  083A  3400               	retlw	0
  2671  083B  34CA               	retlw	202
  2672  083C  3471               	retlw	113
  2673  083D  3480               	retlw	128
  2674  083E  3468               	retlw	104
  2675  083F                     __end_of_mrfRegset_Sleep:	
  2676  000B                     _INTCONbits	set	11
  2677  000C                     _PORTAbits	set	12
  2678  000D                     _PORTBbits	set	13
  2679  000E                     _PORTCbits	set	14
  2680  009D                     _ADCON0	set	157
  2681  009E                     _ADCON1	set	158
  2682  009F                     _ADCON2	set	159
  2683  009C                     _ADRESH	set	156
  2684  009B                     _ADRESL	set	155
  2685  0095                     _OPTION_REGbits	set	149
  2686  0099                     _OSCCON	set	153
  2687  008C                     _TRISAbits	set	140
  2688  008D                     _TRISBbits	set	141
  2689  008E                     _TRISCbits	set	142
  2690  0097                     _WDTCONbits	set	151
  2691  0117                     _FVRCON	set	279
  2692  010C                     _LATAbits	set	268
  2693  010D                     _LATBbits	set	269
  2694  010E                     _LATCbits	set	270
  2695  018C                     _ANSELA	set	396
  2696  018D                     _ANSELB	set	397
  2697  018E                     _ANSELC	set	398
  2698  020C                     _WPUAbits	set	524
  2699                           
  2700                           ; #config settings
  2701  0000                     
  2702                           	psect	cinit
  2703  0022                     start_initialization:	
  2704  0022                     __initialization:	
  2705  0022  30A0               	movlw	low __pbssBANK1
  2706                           
  2707                           ; Clear objects allocated to BANK0
  2708  0023  01B2               	clrf	__pbssBANK0& (0+127)
  2709  0024  01B3               	clrf	(__pbssBANK0+1)& (0+127)
  2710                           
  2711                           ; Clear objects allocated to BANK1
  2712  0025  0084               	movwf	4
  2713  0026  3000               	movlw	high __pbssBANK1
  2714  0027  0085               	movwf	5
  2715  0028  304F               	movlw	79
  2716  0029  318F  2754         	fcall	clear_ram0
  2717  002B                     end_of_initialization:	
  2718                           ;End of C runtime variable initialization code
  2719                           
  2720  002B                     __end_of__initialization:	
  2721  002B  0020               	movlb	0
  2722  002C  3180  2836         	ljmp	_main	;jump to C main() function
  2723                           
  2724                           	psect	bssBANK0
  2725  0032                     __pbssBANK0:	
  2726  0032                     _mrf49Status:	
  2727  0032                     	ds	2
  2728                           
  2729                           	psect	bssBANK1
  2730  00A0                     __pbssBANK1:	
  2731  00A0                     _rfTrcvStatus:	
  2732  00A0                     	ds	79
  2733                           
  2734                           	psect	clrtext
  2735  0F54                     clear_ram0:	
  2736                           ;	Called with FSR0 containing the base address, and
  2737                           ;	WREG with the size to clear
  2738                           
  2739  0F54  0064               	clrwdt	;clear the watchdog before getting into this loop
  2740  0F55                     clrloop0:	
  2741  0F55  0180               	clrf	0	;clear RAM location pointed to by FSR
  2742  0F56  3101               	addfsr 0,1
  2743  0F57  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2744  0F58  2F55               	goto	clrloop0	;have we reached the end yet?
  2745  0F59  3400               	retlw	0	;all done for this memory range, return
  2746                           
  2747                           	psect	cstackCOMMON
  2748  0070                     __pcstackCOMMON:	
  2749  0070                     ?_SoftI2cStart:	
  2750  0070                     ?_SoftI2cStop:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Mrf49RxSts:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_HandlePacket:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_PwrAdcWake:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_PwrAdcSleep:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_PwrAdcInit:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_PwrSensorInit:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_PwrI2cInit:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_PwrRfInit:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_PwrSensorSleep:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_PwrI2cSleep:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_PwrRfSleep:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_PwrSensorWake:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_PwrI2cWake:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_PwrRfWake:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_SoftI2cNop:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_SoftI2cInit:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_SoftI2cRepeatedStart:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_AdcInit:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_AdcDeinit:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_AdcGo:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_AdcChSelect:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_ExtIntInit:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_ExtIntDeinit:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ??_ExtIntDeinit:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_extInt:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_Mcp9800Start:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_Mrf49xaModeRx:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Mrf49xaModeTx:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Mrf49xaModeSleep:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Mrf49xaShutdown:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Mrf49xaReboot:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Mrf49xaInit:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Mrf49SpiTx:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_Mrf49TxByte:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Mrf49xaTxAck:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_Mrf49xaFreePacket:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Mrf49xaTick:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_handleFwCmd:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_main:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?i1_Mrf49xaModeRx:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ??i1_Mrf49xaNeedsReset:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?i1_Mrf49SpiTx:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ??i1_Mrf49SpiTx:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ??i1_Mrf49SpiRx:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?i1_Mrf49RxSts:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?i1_Mrf49TxByte:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_SoftI2cTxByte:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_Mrf49xaServe:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_SoftI2cRxByte:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_AdcIsBusy:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_Mrf49SpiRx:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_Mrf49RxCmd:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_Mrf49RxByte:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_Mrf49xaPacketPending:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_Mrf49xaRxPacket:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_Mrf49xaAllocPacket:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?i1_Mrf49SpiRx:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?i1_Mrf49RxCmd:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?i1_Mrf49RxByte:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?i1_Mrf49xaServe:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_Mrf49xaNeedsReset:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?i1_Mrf49xaNeedsReset:	
  2937                           ; 2 bytes @ 0x0
  2938                           
  2939  0070                     i1Mrf49SpiTx@byte:	
  2940                           ; 2 bytes @ 0x0
  2941                           
  2942  0070                     i1Mrf49SpiRx@data:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x0
  2947  0070                     	ds	1
  2948  0071                     ?i1_Mrf49TxCmd:	
  2949  0071                     ??i1_Mrf49RxCmd:	
  2950                           ; 0 bytes @ 0x1
  2951                           
  2952  0071                     ??i1_Mrf49RxSts:	
  2953                           ; 0 bytes @ 0x1
  2954                           
  2955  0071                     i1Mrf49TxCmd@val:	
  2956                           ; 0 bytes @ 0x1
  2957                           
  2958  0071                     i1Mrf49RxCmd@cmd:	
  2959                           ; 1 bytes @ 0x1
  2960                           
  2961                           
  2962                           ; 1 bytes @ 0x1
  2963  0071                     	ds	1
  2964  0072                     ??i1_Mrf49TxCmd:	
  2965  0072                     i1Mrf49TxCmd@cmd:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0072                     i1Mrf49RxCmd@val:	
  2969                           ; 1 bytes @ 0x2
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x2
  2973  0072                     	ds	1
  2974  0073                     ??i1_Mrf49xaModeRx:	
  2975  0073                     ??i1_Mrf49RxByte:	
  2976                           ; 0 bytes @ 0x3
  2977                           
  2978  0073                     ??i1_Mrf49TxByte:	
  2979                           ; 0 bytes @ 0x3
  2980                           
  2981  0073                     i1Mrf49xaModeRx@k:	
  2982                           ; 0 bytes @ 0x3
  2983                           
  2984  0073                     i1Mrf49TxByte@byte:	
  2985                           ; 1 bytes @ 0x3
  2986                           
  2987                           
  2988                           ; 1 bytes @ 0x3
  2989  0073                     	ds	1
  2990  0074                     ??i1_Mrf49xaServe:	
  2991                           
  2992                           ; 0 bytes @ 0x4
  2993  0074                     	ds	1
  2994  0075                     i1Mrf49xaServe@data:	
  2995                           
  2996                           ; 1 bytes @ 0x5
  2997  0075                     	ds	1
  2998  0076                     ??_extInt:	
  2999                           
  3000                           ; 0 bytes @ 0x6
  3001  0076                     	ds	1
  3002  0077                     extInt@ofw:	
  3003                           
  3004                           ; 1 bytes @ 0x7
  3005  0077                     	ds	1
  3006                           
  3007                           	psect	cstackBANK0
  3008  0020                     __pcstackBANK0:	
  3009  0020                     ??_Mrf49xaNeedsReset:	
  3010  0020                     ?_Sleepy:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_PwrAdcWake:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_PwrAdcSleep:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_PwrAdcInit:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_PwrSensorInit:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_PwrSensorSleep:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_PwrI2cSleep:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_PwrSensorWake:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_PwrI2cWake:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_SoftI2cNop:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_AdcInit:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_AdcDeinit:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_AdcGo:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_AdcIsBusy:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_AdcChSelect:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_ExtIntInit:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_Mrf49SpiTx:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Mrf49SpiRx:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Mrf49xaPacketPending:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Mrf49xaFreePacket:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_Mrf49xaRxPacket:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_Mrf49xaAllocPacket:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ?_Mrf49xaTxPacket:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ?_AdcGetResult:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0020                     AdcChSelect@channel:	
  3083                           ; 2 bytes @ 0x0
  3084                           
  3085  0020                     Mrf49SpiTx@byte:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0020                     Mrf49SpiRx@data:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0020                     Mrf49xaTxPacket@response:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0020                     Mrf49xaFreePacket@packet:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0020                     Sleepy@ms:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100                           
  3101                           ; 2 bytes @ 0x0
  3102  0020                     	ds	1
  3103  0021                     ??_SoftI2cStart:	
  3104  0021                     ??_SoftI2cTxByte:	
  3105                           ; 0 bytes @ 0x1
  3106                           
  3107  0021                     ??_SoftI2cStop:	
  3108                           ; 0 bytes @ 0x1
  3109                           
  3110  0021                     ?_Mrf49TxCmd:	
  3111                           ; 0 bytes @ 0x1
  3112                           
  3113  0021                     ??_Mrf49RxSts:	
  3114                           ; 0 bytes @ 0x1
  3115                           
  3116  0021                     ??_SoftI2cRepeatedStart:	
  3117                           ; 0 bytes @ 0x1
  3118                           
  3119  0021                     ??_SoftI2cRxByte:	
  3120                           ; 0 bytes @ 0x1
  3121                           
  3122  0021                     ??_Mrf49RxCmd:	
  3123                           ; 0 bytes @ 0x1
  3124                           
  3125  0021                     SoftI2cRxByte@ack:	
  3126                           ; 0 bytes @ 0x1
  3127                           
  3128  0021                     Mrf49TxCmd@val:	
  3129                           ; 1 bytes @ 0x1
  3130                           
  3131  0021                     Mrf49RxCmd@cmd:	
  3132                           ; 1 bytes @ 0x1
  3133                           
  3134  0021                     Mrf49xaTxPacket@needAck:	
  3135                           ; 1 bytes @ 0x1
  3136                           
  3137                           
  3138                           ; 1 bytes @ 0x1
  3139  0021                     	ds	1
  3140  0022                     ??_Sleepy:	
  3141  0022                     ??_Mrf49TxCmd:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0022                     ??_Mrf49xaTxPacket:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0022                     ??_AdcGetResult:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0022                     ?_AdcSample:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0022                     SoftI2cTxByte@data:	
  3154                           ; 2 bytes @ 0x2
  3155                           
  3156  0022                     SoftI2cRxByte@data:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0022                     Mrf49TxCmd@cmd:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0022                     Mrf49RxCmd@val:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165                           
  3166                           ; 1 bytes @ 0x2
  3167  0022                     	ds	1
  3168  0023                     ??_Mrf49xaModeRx:	
  3169  0023                     ??_Mrf49xaModeTx:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_Mrf49xaModeSleep:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_Mrf49RxByte:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_Mrf49TxByte:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     SoftI2cTxByte@i:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     SoftI2cRxByte@i:	
  3185                           ; 1 bytes @ 0x3
  3186                           
  3187  0023                     Mrf49xaModeRx@k:	
  3188                           ; 1 bytes @ 0x3
  3189                           
  3190  0023                     Mrf49xaModeTx@k:	
  3191                           ; 1 bytes @ 0x3
  3192                           
  3193  0023                     Mrf49xaModeSleep@k:	
  3194                           ; 1 bytes @ 0x3
  3195                           
  3196  0023                     Mrf49TxByte@byte:	
  3197                           ; 1 bytes @ 0x3
  3198                           
  3199  0023                     Mrf49xaTxPacket@crc:	
  3200                           ; 1 bytes @ 0x3
  3201                           
  3202  0023                     Sleepy@b:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205                           
  3206                           ; 1 bytes @ 0x3
  3207  0023                     	ds	1
  3208  0024                     ??_Mrf49xaServe:	
  3209  0024                     ??_PwrI2cInit:	
  3210                           ; 0 bytes @ 0x4
  3211                           
  3212  0024                     ??_PwrRfSleep:	
  3213                           ; 0 bytes @ 0x4
  3214                           
  3215  0024                     ??_PwrRfWake:	
  3216                           ; 0 bytes @ 0x4
  3217                           
  3218  0024                     ??_SoftI2cInit:	
  3219                           ; 0 bytes @ 0x4
  3220                           
  3221  0024                     ??_AdcSample:	
  3222                           ; 0 bytes @ 0x4
  3223                           
  3224  0024                     ??_Mcp9800Start:	
  3225                           ; 0 bytes @ 0x4
  3226                           
  3227  0024                     ??_Mrf49xaShutdown:	
  3228                           ; 0 bytes @ 0x4
  3229                           
  3230  0024                     ??_Mrf49xaReboot:	
  3231                           ; 0 bytes @ 0x4
  3232                           
  3233  0024                     ?_eepromRxBytes:	
  3234                           ; 0 bytes @ 0x4
  3235                           
  3236  0024                     ?_Mcp9800Read:	
  3237                           ; 0 bytes @ 0x4
  3238                           
  3239  0024                     Mcp9800Start@resolution:	
  3240                           ; 2 bytes @ 0x4
  3241                           
  3242  0024                     Mrf49xaTxPacket@i:	
  3243                           ; 1 bytes @ 0x4
  3244                           
  3245  0024                     eepromRxBytes@address:	
  3246                           ; 1 bytes @ 0x4
  3247                           
  3248                           
  3249                           ; 2 bytes @ 0x4
  3250  0024                     	ds	1
  3251  0025                     AdcSample@ch:	
  3252  0025                     Mrf49xaTxPacket@packet:	
  3253                           ; 1 bytes @ 0x5
  3254                           
  3255  0025                     Mrf49xaServe@data:	
  3256                           ; 1 bytes @ 0x5
  3257                           
  3258                           
  3259                           ; 1 bytes @ 0x5
  3260  0025                     	ds	1
  3261  0026                     ??_Mcp9800Read:	
  3262  0026                     ??_Mrf49xaInit:	
  3263                           ; 0 bytes @ 0x6
  3264                           
  3265  0026                     ??_Mrf49xaTxAck:	
  3266                           ; 0 bytes @ 0x6
  3267                           
  3268  0026                     ?_RfSendSampleWeatherNode:	
  3269                           ; 0 bytes @ 0x6
  3270                           
  3271  0026                     Mcp9800Read@tempH:	
  3272                           ; 0 bytes @ 0x6
  3273                           
  3274  0026                     Mrf49xaInit@k:	
  3275                           ; 1 bytes @ 0x6
  3276                           
  3277  0026                     Mrf49xaTxAck@packet:	
  3278                           ; 1 bytes @ 0x6
  3279                           
  3280  0026                     eepromRxBytes@data:	
  3281                           ; 1 bytes @ 0x6
  3282                           
  3283  0026                     RfSendSampleWeatherNode@temperature:	
  3284                           ; 1 bytes @ 0x6
  3285                           
  3286                           
  3287                           ; 2 bytes @ 0x6
  3288  0026                     	ds	1
  3289  0027                     ??_PwrRfInit:	
  3290  0027                     Mcp9800Read@tempL:	
  3291                           ; 0 bytes @ 0x7
  3292                           
  3293  0027                     eepromRxBytes@size:	
  3294                           ; 1 bytes @ 0x7
  3295                           
  3296                           
  3297                           ; 1 bytes @ 0x7
  3298  0027                     	ds	1
  3299  0028                     ??_eepromRxBytes:	
  3300  0028                     ??_handleFwCmd:	
  3301                           ; 0 bytes @ 0x8
  3302                           
  3303  0028                     handleFwCmd@packet:	
  3304                           ; 0 bytes @ 0x8
  3305                           
  3306  0028                     RfSendSampleWeatherNode@humidity:	
  3307                           ; 1 bytes @ 0x8
  3308                           
  3309                           
  3310                           ; 2 bytes @ 0x8
  3311  0028                     	ds	1
  3312  0029                     ??_HandlePacket:	
  3313  0029                     HandlePacket@response:	
  3314                           ; 0 bytes @ 0x9
  3315                           
  3316                           
  3317                           ; 1 bytes @ 0x9
  3318  0029                     	ds	1
  3319  002A                     ??_RfSendSampleWeatherNode:	
  3320  002A                     HandlePacket@packet:	
  3321                           ; 0 bytes @ 0xA
  3322                           
  3323  002A                     RfSendSampleWeatherNode@packet:	
  3324                           ; 1 bytes @ 0xA
  3325                           
  3326                           
  3327                           ; 1 bytes @ 0xA
  3328  002A                     	ds	1
  3329  002B                     ??_Mrf49xaTick:	
  3330                           
  3331                           ; 0 bytes @ 0xB
  3332  002B                     	ds	1
  3333  002C                     Mrf49xaTick@timeout:	
  3334                           
  3335                           ; 1 bytes @ 0xC
  3336  002C                     	ds	1
  3337  002D                     Mrf49xaTick@packet:	
  3338                           
  3339                           ; 1 bytes @ 0xD
  3340  002D                     	ds	1
  3341  002E                     ??_main:	
  3342  002E                     main@humidity:	
  3343                           ; 0 bytes @ 0xE
  3344                           
  3345                           
  3346                           ; 2 bytes @ 0xE
  3347  002E                     	ds	2
  3348  0030                     main@temperature:	
  3349                           
  3350                           ; 2 bytes @ 0x10
  3351  0030                     	ds	2
  3352                           
  3353                           	psect	text1
  3354  0602                     __ptext1:	
  3355 ;; *************** function _RfSendSampleWeatherNode *****************
  3356 ;; Defined at:
  3357 ;;		line 33 in file "../../../src/rfstack/packets.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  temperature     2    6[BANK0 ] unsigned int 
  3360 ;;  humidity        2    8[BANK0 ] unsigned int 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  3363 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;		None               void
  3366 ;; Registers used:
  3367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 1F/0
  3370 ;;		On exit  : 1F/1
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3373 ;;      Params:         0       4       0       0
  3374 ;;      Locals:         0       1       0       0
  3375 ;;      Temps:          0       0       0       0
  3376 ;;      Totals:         0       5       0       0
  3377 ;;Total ram usage:        5 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    6
  3380 ;; This function calls:
  3381 ;;		_Mrf49xaAllocPacket
  3382 ;;		_Mrf49xaTxPacket
  3383 ;; This function is called by:
  3384 ;;		_main
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           
  3389                           ;psect for function _RfSendSampleWeatherNode
  3390  0602                     _RfSendSampleWeatherNode:	
  3391                           
  3392                           ;packets.c: 35: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  3393                           
  3394                           ;incstack = 0
  3395                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3396  0602  2646  3186         	fcall	_Mrf49xaAllocPacket
  3397  0604  0020               	movlb	0	; select bank0
  3398  0605  00AA               	movwf	RfSendSampleWeatherNode@packet
  3399                           
  3400                           ;packets.c: 37: packet->packet.size = 10;
  3401  0606  0A2A               	incf	RfSendSampleWeatherNode@packet,w
  3402  0607  0086               	movwf	6
  3403  0608  300A               	movlw	10
  3404  0609  0187               	clrf	7
  3405  060A  0081               	movwf	1
  3406                           
  3407                           ;packets.c: 38: packet->packet.id = RF_APP_SAMPLE;
  3408  060B  082A               	movf	RfSendSampleWeatherNode@packet,w
  3409  060C  3E04               	addlw	4
  3410  060D  0086               	movwf	6
  3411  060E  0181               	clrf	1
  3412                           
  3413                           ;packets.c: 39: packet->packet.dst = 0xFF;
  3414  060F  082A               	movf	RfSendSampleWeatherNode@packet,w
  3415  0610  3E03               	addlw	3
  3416  0611  0086               	movwf	6
  3417  0612  30FF               	movlw	255
  3418  0613  0081               	movwf	1
  3419                           
  3420                           ;packets.c: 41: packet->packet.data[0] = 0;
  3421  0614  082A               	movf	RfSendSampleWeatherNode@packet,w
  3422  0615  3E06               	addlw	6
  3423  0616  0086               	movwf	6
  3424  0617  0181               	clrf	1
  3425                           
  3426                           ;packets.c: 42: packet->packet.data[1] = 0;
  3427  0618  082A               	movf	RfSendSampleWeatherNode@packet,w
  3428  0619  3E07               	addlw	7
  3429  061A  0086               	movwf	6
  3430  061B  0181               	clrf	1
  3431                           
  3432                           ;packets.c: 43: packet->packet.data[2] = 0;
  3433  061C  082A               	movf	RfSendSampleWeatherNode@packet,w
  3434  061D  3E08               	addlw	8
  3435  061E  0086               	movwf	6
  3436  061F  0181               	clrf	1
  3437                           
  3438                           ;packets.c: 44: packet->packet.data[3] = 0;
  3439  0620  082A               	movf	RfSendSampleWeatherNode@packet,w
  3440  0621  3E09               	addlw	9
  3441  0622  0086               	movwf	6
  3442  0623  0181               	clrf	1
  3443                           
  3444                           ;packets.c: 46: packet->packet.data[4] = 0;
  3445  0624  082A               	movf	RfSendSampleWeatherNode@packet,w
  3446  0625  3E0A               	addlw	10
  3447  0626  0086               	movwf	6
  3448  0627  0181               	clrf	1
  3449                           
  3450                           ;packets.c: 48: packet->packet.data[6] = temperature >> 8;
  3451  0628  082A               	movf	RfSendSampleWeatherNode@packet,w
  3452  0629  3E0C               	addlw	12
  3453  062A  0086               	movwf	6
  3454  062B  0827               	movf	RfSendSampleWeatherNode@temperature+1,w
  3455  062C  0081               	movwf	1
  3456                           
  3457                           ;packets.c: 49: packet->packet.data[5] = temperature & 0xFF;
  3458  062D  082A               	movf	RfSendSampleWeatherNode@packet,w
  3459  062E  3E0B               	addlw	11
  3460  062F  0086               	movwf	6
  3461  0630  0826               	movf	RfSendSampleWeatherNode@temperature,w
  3462  0631  0081               	movwf	1
  3463                           
  3464                           ;packets.c: 51: packet->packet.data[7] = 1;
  3465  0632  082A               	movf	RfSendSampleWeatherNode@packet,w
  3466  0633  3E0D               	addlw	13
  3467  0634  0086               	movwf	6
  3468  0635  0181               	clrf	1
  3469  0636  0A81               	incf	1,f
  3470                           
  3471                           ;packets.c: 53: packet->packet.data[9] = humidity >> 8;
  3472  0637  082A               	movf	RfSendSampleWeatherNode@packet,w
  3473  0638  3E0F               	addlw	15
  3474  0639  0086               	movwf	6
  3475  063A  0829               	movf	RfSendSampleWeatherNode@humidity+1,w
  3476  063B  0081               	movwf	1
  3477                           
  3478                           ;packets.c: 54: packet->packet.data[8] = humidity & 0xFF;
  3479  063C  082A               	movf	RfSendSampleWeatherNode@packet,w
  3480  063D  3E0E               	addlw	14
  3481  063E  0086               	movwf	6
  3482  063F  0828               	movf	RfSendSampleWeatherNode@humidity,w
  3483  0640  0081               	movwf	1
  3484                           
  3485                           ;packets.c: 56: Mrf49xaTxPacket(packet, 0, 1);
  3486  0641  01A0               	clrf	Mrf49xaTxPacket@response
  3487  0642  01A1               	clrf	Mrf49xaTxPacket@needAck
  3488  0643  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  3489  0644  082A               	movf	RfSendSampleWeatherNode@packet,w
  3490  0645  2EC8               	ljmp	_Mrf49xaTxPacket
  3491  0646                     __end_of_RfSendSampleWeatherNode:	
  3492  0646                     __ptext2:	
  3493 ;; *************** function _Mrf49xaAllocPacket *****************
  3494 ;; Defined at:
  3495 ;;		line 107 in file "../../../src/devices/mrf49xa_packet.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      PTR struct rfTrcvPacket_
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0
  3504 ;; Tracked objects:
  3505 ;;		On entry : 1F/0
  3506 ;;		On exit  : 1F/1
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3509 ;;      Params:         0       0       0       0
  3510 ;;      Locals:         0       0       0       0
  3511 ;;      Temps:          0       0       0       0
  3512 ;;      Totals:         0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    5
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_RfSendSampleWeatherNode
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           
  3524                           ;psect for function _Mrf49xaAllocPacket
  3525  0646                     _Mrf49xaAllocPacket:	
  3526                           
  3527                           ;mrf49xa_packet.c: 109: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  3531  0646  0021               	movlb	1	; select bank1
  3532  0647  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  3533  0648  1D03               	skipz
  3534  0649  2E4D               	goto	l2865
  3535                           
  3536                           ;mrf49xa_packet.c: 110: {
  3537                           ;mrf49xa_packet.c: 111: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  3538  064A  3006               	movlw	6
  3539  064B  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3540                           
  3541                           ;mrf49xa_packet.c: 112: return &(rfTrcvStatus.rxPacket[0]);
  3542  064C  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  3543  064D                     l2865:	
  3544                           
  3545                           ;mrf49xa_packet.c: 113: }
  3546                           ;mrf49xa_packet.c: 115: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  3547  064D  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3548  064E  1D03               	skipz
  3549  064F  3400               	retlw	0
  3550                           
  3551                           ;mrf49xa_packet.c: 116: {
  3552                           ;mrf49xa_packet.c: 117: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  3553  0650  3006               	movlw	6
  3554  0651  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  3555                           
  3556                           ;mrf49xa_packet.c: 118: return &(rfTrcvStatus.rxPacket[1]);
  3557  0652  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  3558  0653                     __end_of_Mrf49xaAllocPacket:	
  3559                           ;mrf49xa_packet.c: 119: }
  3560                           ;mrf49xa_packet.c: 121: return (0);
  3561                           
  3562  0653                     __ptext36:	
  3563 ;; *************** function _HandlePacket *****************
  3564 ;; Defined at:
  3565 ;;		line 99 in file "../../../src/rfstack/client.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3568 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  3571 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3572 ;;  response        1    9[BANK0 ] struct .
  3573 ;; Return value:  Size  Location     Type
  3574 ;;		None               void
  3575 ;; Registers used:
  3576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 1F/0
  3579 ;;		On exit  : 1E/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3582 ;;      Params:         0       0       0       0
  3583 ;;      Locals:         0       2       0       0
  3584 ;;      Temps:          0       0       0       0
  3585 ;;      Totals:         0       2       0       0
  3586 ;;Total ram usage:        2 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    9
  3589 ;; This function calls:
  3590 ;;		_Mrf49xaFreePacket
  3591 ;;		_Mrf49xaTxAck
  3592 ;;		_Mrf49xaTxPacket
  3593 ;;		_handleFwCmd
  3594 ;; This function is called by:
  3595 ;;		_Mrf49xaTick
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function _HandlePacket
  3601  0653                     _HandlePacket:	
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3605                           ;HandlePacket@packet stored from wreg
  3606  0653  00AA               	movwf	HandlePacket@packet
  3607                           
  3608                           ;client.c: 102: struct
  3609                           ;client.c: 103: {
  3610                           ;client.c: 104: bool_t needAck:1;
  3611                           ;client.c: 105: bool_t sendAck:1;
  3612                           ;client.c: 106: bool_t sendMsg:1;
  3613                           ;client.c: 107: } response;
  3614                           ;client.c: 110: switch (packet->packet.id)
  3615  0654  2E79               	goto	l2893
  3616  0655                     l2877:	
  3617                           
  3618                           ;client.c: 113: packet->packet.data[0] = 2;
  3619  0655  082A               	movf	HandlePacket@packet,w
  3620  0656  3E06               	addlw	6
  3621  0657  0086               	movwf	6
  3622  0658  3002               	movlw	2
  3623  0659  0187               	clrf	7
  3624  065A  0081               	movwf	1
  3625  065B                     l2879:	
  3626                           
  3627                           ;client.c: 114: response.sendMsg = 1;
  3628  065B  0020               	movlb	0	; select bank0
  3629  065C  1529               	bsf	HandlePacket@response,2
  3630                           
  3631                           ;client.c: 115: break;
  3632  065D  2E8E               	goto	l520
  3633  065E                     l2881:	
  3634                           
  3635                           ;client.c: 118: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  3636                           ;client.c: 119: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  3637  065E  082A               	movf	HandlePacket@packet,w
  3638  065F  3E07               	addlw	7
  3639  0660  0086               	movwf	6
  3640  0661  0187               	clrf	7
  3641  0662  0021               	movlb	1	; select bank1
  3642  0663  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  3643  0664  0601               	xorwf	1,w
  3644  0665  1D03               	skipz
  3645  0666  2E8E               	goto	l520
  3646  0667  0020               	movlb	0	; select bank0
  3647  0668  082A               	movf	HandlePacket@packet,w
  3648  0669  3E06               	addlw	6
  3649  066A  0086               	movwf	6
  3650  066B  0021               	movlb	1	; select bank1
  3651  066C  0857               	movf	(_rfTrcvStatus^(0+128)+55),w
  3652  066D  0601               	xorwf	1,w
  3653  066E  1D03               	skipz
  3654  066F  2E8E               	goto	l520
  3655                           
  3656                           ;client.c: 120: {
  3657                           ;client.c: 121: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  3658  0670  3002               	movlw	2
  3659  0671  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  3660  0672  2E8E               	goto	l520
  3661  0673                     l523:	
  3662                           ;client.c: 126: syncedTime = *((uint32_t*) packet->packet.data);
  3663                           
  3664                           
  3665                           ;client.c: 127: response.sendAck = 1;
  3666  0673  14A9               	bsf	HandlePacket@response,1
  3667                           
  3668                           ;client.c: 128: break;
  3669  0674  2E8E               	goto	l520
  3670  0675                     l2887:	
  3671                           
  3672                           ;client.c: 136: handleFwCmd(packet);
  3673  0675  082A               	movf	HandlePacket@packet,w
  3674  0676  269F  3186         	fcall	_handleFwCmd
  3675  0678  2E5B               	goto	l2879
  3676  0679                     l2893:	
  3677  0679  082A               	movf	HandlePacket@packet,w
  3678  067A  3E04               	addlw	4
  3679  067B  0086               	movwf	6
  3680  067C  0187               	clrf	7
  3681  067D  0801               	movf	1,w
  3682                           
  3683                           ; Switch size 1, requested type "space"
  3684                           ; Number of cases is 5, Range of values is 160 to 192
  3685                           ; switch strategies available:
  3686                           ; Name         Instructions Cycles
  3687                           ; simple_byte           16     9 (average)
  3688                           ; direct_byte           75     9 (fixed)
  3689                           ; jumptable            263     9 (fixed)
  3690                           ;	Chosen strategy is simple_byte
  3691  067E  3AA0               	xorlw	160	; case 160
  3692  067F  1903               	skipnz
  3693  0680  2E55               	goto	l2877
  3694  0681  3A01               	xorlw	1	; case 161
  3695  0682  1903               	skipnz
  3696  0683  2E5E               	goto	l2881
  3697  0684  3A03               	xorlw	3	; case 162
  3698  0685  1903               	skipnz
  3699  0686  2E73               	goto	l523
  3700  0687  3A01               	xorlw	1	; case 163
  3701  0688  1903               	skipnz
  3702  0689  2E8E               	goto	l520
  3703  068A  3A63               	xorlw	99	; case 192
  3704  068B  1903               	skipnz
  3705  068C  2E75               	goto	l2887
  3706  068D  2E8E               	goto	l520
  3707  068E                     l520:	
  3708                           
  3709                           ;client.c: 160: if (response.sendMsg)
  3710  068E  0020               	movlb	0	; select bank0
  3711  068F  1D29               	btfss	HandlePacket@response,2
  3712  0690  2E99               	goto	l526
  3713  0691  3000               	movlw	0
  3714                           
  3715                           ;client.c: 161: Mrf49xaTxPacket(packet, 1, response.needAck);
  3716  0692  01A0               	clrf	Mrf49xaTxPacket@response
  3717  0693  0AA0               	incf	Mrf49xaTxPacket@response,f
  3718  0694  1829               	btfsc	HandlePacket@response,0
  3719  0695  3001               	movlw	1
  3720  0696  00A1               	movwf	Mrf49xaTxPacket@needAck
  3721  0697  082A               	movf	HandlePacket@packet,w
  3722  0698  2EC8               	ljmp	_Mrf49xaTxPacket
  3723  0699                     l526:	
  3724                           
  3725                           ;client.c: 162: else if (response.sendAck)
  3726  0699  1CA9               	btfss	HandlePacket@response,1
  3727  069A  2E9D               	goto	l2899
  3728                           
  3729                           ;client.c: 163: Mrf49xaTxAck(packet);
  3730  069B  082A               	movf	HandlePacket@packet,w
  3731  069C  2F0E               	ljmp	_Mrf49xaTxAck
  3732  069D                     l2899:	
  3733                           
  3734                           ;client.c: 164: else
  3735                           ;client.c: 165: Mrf49xaFreePacket(packet);
  3736  069D  082A               	movf	HandlePacket@packet,w
  3737  069E  2EC3               	ljmp	_Mrf49xaFreePacket
  3738  069F                     __end_of_HandlePacket:	
  3739  069F                     __ptext37:	
  3740 ;; *************** function _handleFwCmd *****************
  3741 ;; Defined at:
  3742 ;;		line 6 in file "../../../src/rfstack/client.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3745 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  3748 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3749 ;; Return value:  Size  Location     Type
  3750 ;;		None               void
  3751 ;; Registers used:
  3752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3753 ;; Tracked objects:
  3754 ;;		On entry : 1F/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3758 ;;      Params:         0       0       0       0
  3759 ;;      Locals:         0       1       0       0
  3760 ;;      Temps:          0       0       0       0
  3761 ;;      Totals:         0       1       0       0
  3762 ;;Total ram usage:        1 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    8
  3765 ;; This function calls:
  3766 ;;		_eepromRxBytes
  3767 ;; This function is called by:
  3768 ;;		_HandlePacket
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           
  3773                           ;psect for function _handleFwCmd
  3774  069F                     _handleFwCmd:	
  3775                           
  3776                           ;incstack = 0
  3777                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3778                           ;handleFwCmd@packet stored from wreg
  3779  069F  00A8               	movwf	handleFwCmd@packet
  3780                           
  3781                           ;client.c: 21: break;
  3782                           
  3783                           ;client.c: 8: switch(packet->packet.data[0])
  3784  06A0  3E06               	addlw	6
  3785  06A1  0086               	movwf	6
  3786  06A2  0187               	clrf	7
  3787  06A3  0801               	movf	1,w
  3788                           
  3789                           ; Switch size 1, requested type "space"
  3790                           ; Number of cases is 2, Range of values is 0 to 1
  3791                           ; switch strategies available:
  3792                           ; Name         Instructions Cycles
  3793                           ; simple_byte            7     4 (average)
  3794                           ; direct_byte           10     6 (fixed)
  3795                           ; jumptable            260     6 (fixed)
  3796                           ;	Chosen strategy is simple_byte
  3797  06A4  3A00               	xorlw	0	; case 0
  3798  06A5  1903               	skipnz
  3799  06A6  2EC2               	goto	l515
  3800  06A7  3A01               	xorlw	1	; case 1
  3801  06A8  1903               	skipnz
  3802  06A9  2EAB               	goto	l2701
  3803  06AA  2EC2               	goto	l515
  3804  06AB                     l2701:	
  3805                           
  3806                           ;client.c: 15: packet->packet.size = 5;
  3807  06AB  0A28               	incf	handleFwCmd@packet,w
  3808  06AC  0086               	movwf	6
  3809  06AD  3005               	movlw	5
  3810  06AE  0187               	clrf	7
  3811  06AF  0081               	movwf	1
  3812                           
  3813                           ;client.c: 16: packet->packet.data[1] = 0;
  3814  06B0  0828               	movf	handleFwCmd@packet,w
  3815  06B1  3E07               	addlw	7
  3816  06B2  0086               	movwf	6
  3817  06B3  0181               	clrf	1
  3818                           
  3819                           ;client.c: 17: packet->packet.data[2] = 1;
  3820  06B4  0828               	movf	handleFwCmd@packet,w
  3821  06B5  3E08               	addlw	8
  3822  06B6  0086               	movwf	6
  3823  06B7  0181               	clrf	1
  3824  06B8  0A81               	incf	1,f
  3825                           
  3826                           ;client.c: 19: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  3827  06B9  01A4               	clrf	eepromRxBytes@address
  3828  06BA  01A5               	clrf	eepromRxBytes@address+1
  3829  06BB  0828               	movf	handleFwCmd@packet,w
  3830  06BC  3E09               	addlw	9
  3831  06BD  00A6               	movwf	eepromRxBytes@data
  3832  06BE  3002               	movlw	2
  3833  06BF  00A7               	movwf	eepromRxBytes@size
  3834  06C0  3181  29F1         	ljmp	l2477
  3835  06C2                     l515:	
  3836  06C2  0008               	return
  3837  06C3                     __end_of_handleFwCmd:	
  3838  06C3                     __ptext42:	
  3839 ;; *************** function _Mrf49xaFreePacket *****************
  3840 ;; Defined at:
  3841 ;;		line 85 in file "../../../src/devices/mrf49xa_packet.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3844 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  3847 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;		None               void
  3850 ;; Registers used:
  3851 ;;		wreg, fsr1l, fsr1h, status,2
  3852 ;; Tracked objects:
  3853 ;;		On entry : 1F/0
  3854 ;;		On exit  : 1F/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3857 ;;      Params:         0       0       0       0
  3858 ;;      Locals:         0       1       0       0
  3859 ;;      Temps:          0       0       0       0
  3860 ;;      Totals:         0       1       0       0
  3861 ;;Total ram usage:        1 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    5
  3864 ;; This function calls:
  3865 ;;		Nothing
  3866 ;; This function is called by:
  3867 ;;		_Mrf49xaTick
  3868 ;;		_HandlePacket
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           
  3873                           ;psect for function _Mrf49xaFreePacket
  3874  06C3                     _Mrf49xaFreePacket:	
  3875                           
  3876                           ;incstack = 0
  3877                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  3878                           ;Mrf49xaFreePacket@packet stored from wreg
  3879  06C3  00A0               	movwf	Mrf49xaFreePacket@packet
  3880                           
  3881                           ;mrf49xa_packet.c: 87: packet->state = PKT_FREE;
  3882  06C4  0086               	movwf	6
  3883  06C5  0187               	clrf	7
  3884  06C6  0181               	clrf	1
  3885  06C7  0008               	return
  3886  06C8                     __end_of_Mrf49xaFreePacket:	
  3887  06C8                     __ptext41:	
  3888 ;; *************** function _Mrf49xaTxPacket *****************
  3889 ;; Defined at:
  3890 ;;		line 27 in file "../../../src/devices/mrf49xa_packet.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3893 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3894 ;;  response        1    0[BANK0 ] unsigned char 
  3895 ;;  needAck         1    1[BANK0 ] unsigned char 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  3898 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3899 ;;  i               1    4[BANK0 ] unsigned char 
  3900 ;;  crc             1    3[BANK0 ] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      unsigned char 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3905 ;; Tracked objects:
  3906 ;;		On entry : 1F/0
  3907 ;;		On exit  : 1F/1
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3910 ;;      Params:         0       2       0       0
  3911 ;;      Locals:         0       3       0       0
  3912 ;;      Temps:          0       1       0       0
  3913 ;;      Totals:         0       6       0       0
  3914 ;;Total ram usage:        6 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    5
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_Mrf49xaTxAck
  3921 ;;		_HandlePacket
  3922 ;;		_RfSendSampleWeatherNode
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           
  3927                           ;psect for function _Mrf49xaTxPacket
  3928  06C8                     _Mrf49xaTxPacket:	
  3929                           
  3930                           ;incstack = 0
  3931                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  3932                           ;Mrf49xaTxPacket@packet stored from wreg
  3933  06C8  00A5               	movwf	Mrf49xaTxPacket@packet
  3934  06C9  3033               	movlw	51
  3935                           
  3936                           ;mrf49xa_packet.c: 29: uint8_t i, crc = 0;
  3937  06CA  01A3               	clrf	Mrf49xaTxPacket@crc
  3938                           
  3939                           ;mrf49xa_packet.c: 31: if (&(rfTrcvStatus.txPacket) == packet)
  3940  06CB  3EA0               	addlw	_rfTrcvStatus& (0+255)
  3941  06CC  0625               	xorwf	Mrf49xaTxPacket@packet,w
  3942  06CD  1D03               	skipz
  3943  06CE  2ED8               	goto	l2431
  3944                           
  3945                           ;mrf49xa_packet.c: 32: {
  3946                           ;mrf49xa_packet.c: 33: if (response)
  3947  06CF  0820               	movf	Mrf49xaTxPacket@response,w
  3948  06D0  1903               	btfsc	3,2
  3949  06D1  2ED5               	goto	l2415
  3950                           
  3951                           ;mrf49xa_packet.c: 34: {
  3952                           ;mrf49xa_packet.c: 35: packet->packet.dst = packet->packet.src;
  3953  06D2  0825               	movf	Mrf49xaTxPacket@packet,w
  3954  06D3  2749  3186         	fcall	PL14	;call to abstracted procedure
  3955  06D5                     l2415:	
  3956                           
  3957                           ;mrf49xa_packet.c: 36: }
  3958                           ;mrf49xa_packet.c: 37: packet->packet.src = rfTrcvStatus.src;
  3959                           
  3960                           ;mrf49xa_packet.c: 38: packet->packet.size += 5;
  3961                           
  3962                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  3963                           
  3964                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retry = 0;
  3965                           
  3966                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.retransmit = 0;
  3967                           
  3968                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  3969  06D5  272E               	fcall	PL8	;call to abstracted procedure
  3970                           
  3971                           ;mrf49xa_packet.c: 44: rfTrcvStatus.txPacket.crc = 0;
  3972  06D6  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  3973  06D7  0008               	return
  3974  06D8                     l2431:	
  3975                           
  3976                           ;mrf49xa_packet.c: 46: }
  3977                           ;mrf49xa_packet.c: 49: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3978  06D8  0021               	movlb	1	; select bank1
  3979  06D9  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  3980  06DA  1D03               	skipz
  3981  06DB  0008               	return
  3982                           
  3983                           ;mrf49xa_packet.c: 54: else
  3984                           ;mrf49xa_packet.c: 55: {
  3985                           ;mrf49xa_packet.c: 56: if (response)
  3986  06DC  0020               	movlb	0	; select bank0
  3987  06DD  0820               	movf	Mrf49xaTxPacket@response,w
  3988  06DE  1903               	btfsc	3,2
  3989  06DF  2EE3               	goto	l2441
  3990                           
  3991                           ;mrf49xa_packet.c: 57: {
  3992                           ;mrf49xa_packet.c: 58: packet->packet.dst = packet->packet.src;
  3993  06E0  0825               	movf	Mrf49xaTxPacket@packet,w
  3994  06E1  2749  3186         	fcall	PL14	;call to abstracted procedure
  3995  06E3                     l2441:	
  3996                           
  3997                           ;mrf49xa_packet.c: 59: }
  3998                           ;mrf49xa_packet.c: 60: packet->packet.src = rfTrcvStatus.src;
  3999                           
  4000                           ;mrf49xa_packet.c: 61: packet->packet.size += 5;
  4001                           
  4002                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4003                           
  4004                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retry = 0;
  4005                           
  4006                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.retransmit = 0;
  4007                           
  4008                           ;mrf49xa_packet.c: 66: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4009  06E3  272E  3186         	fcall	PL8	;call to abstracted procedure
  4010                           
  4011                           ;mrf49xa_packet.c: 68: packet->state = PKT_FREE;
  4012  06E5  0020               	movlb	0	; select bank0
  4013  06E6  0825               	movf	Mrf49xaTxPacket@packet,w
  4014  06E7  0086               	movwf	6
  4015  06E8  0181               	clrf	1
  4016                           
  4017                           ;mrf49xa_packet.c: 71: for (i = 0; i < (16 + 5); i++)
  4018  06E9  01A4               	clrf	Mrf49xaTxPacket@i
  4019  06EA                     l2461:	
  4020                           
  4021                           ;mrf49xa_packet.c: 72: {
  4022                           ;mrf49xa_packet.c: 73: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4023  06EA  0824               	movf	Mrf49xaTxPacket@i,w
  4024  06EB  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  4025  06EC  0086               	movwf	6
  4026  06ED  0187               	clrf	7
  4027  06EE  0824               	movf	Mrf49xaTxPacket@i,w
  4028  06EF  0725               	addwf	Mrf49xaTxPacket@packet,w
  4029  06F0  00A2               	movwf	??_Mrf49xaTxPacket
  4030  06F1  0A22               	incf	??_Mrf49xaTxPacket,w
  4031  06F2  0084               	movwf	4
  4032  06F3  0185               	clrf	5
  4033  06F4  0800               	movf	0,w
  4034  06F5  0081               	movwf	1
  4035  06F6  3015               	movlw	21
  4036  06F7  0AA4               	incf	Mrf49xaTxPacket@i,f
  4037  06F8  0224               	subwf	Mrf49xaTxPacket@i,w
  4038  06F9  1C03               	skipc
  4039  06FA  2EEA               	goto	l2461
  4040                           
  4041                           ;mrf49xa_packet.c: 74: }
  4042                           ;mrf49xa_packet.c: 75: for (i = 0; i < packet->packet.size; i++)
  4043  06FB  01A4               	clrf	Mrf49xaTxPacket@i
  4044  06FC                     l379:	
  4045  06FC  0A25               	incf	Mrf49xaTxPacket@packet,w
  4046  06FD  0086               	movwf	6
  4047  06FE  0187               	clrf	7
  4048  06FF  0801               	movf	1,w
  4049  0700  0224               	subwf	Mrf49xaTxPacket@i,w
  4050  0701  1803               	btfsc	3,0
  4051  0702  2F0A               	goto	l2473
  4052                           
  4053                           ;mrf49xa_packet.c: 76: {
  4054                           ;mrf49xa_packet.c: 77: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  4055  0703  0824               	movf	Mrf49xaTxPacket@i,w
  4056  0704  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  4057  0705  0086               	movwf	6
  4058  0706  0801               	movf	1,w
  4059  0707  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  4060  0708  0AA4               	incf	Mrf49xaTxPacket@i,f
  4061  0709  2EFC               	goto	l379
  4062  070A                     l2473:	
  4063                           
  4064                           ;mrf49xa_packet.c: 78: }
  4065                           ;mrf49xa_packet.c: 80: rfTrcvStatus.txPacket.crc = crc;
  4066  070A  0823               	movf	Mrf49xaTxPacket@crc,w
  4067  070B  0021               	movlb	1	; select bank1
  4068  070C  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  4069  070D  0008               	return
  4070  070E                     __end_of_Mrf49xaTxPacket:	
  4071  070E                     __ptext40:	
  4072 ;; *************** function _Mrf49xaTxAck *****************
  4073 ;; Defined at:
  4074 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4077 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  4080 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;		None               void
  4083 ;; Registers used:
  4084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 1F/0
  4087 ;;		On exit  : 1F/1
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4090 ;;      Params:         0       0       0       0
  4091 ;;      Locals:         0       1       0       0
  4092 ;;      Temps:          0       0       0       0
  4093 ;;      Totals:         0       1       0       0
  4094 ;;Total ram usage:        1 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    6
  4097 ;; This function calls:
  4098 ;;		_Mrf49xaTxPacket
  4099 ;; This function is called by:
  4100 ;;		_HandlePacket
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           
  4105                           ;psect for function _Mrf49xaTxAck
  4106  070E                     _Mrf49xaTxAck:	
  4107                           
  4108                           ;incstack = 0
  4109                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4110                           ;Mrf49xaTxAck@packet stored from wreg
  4111  070E  00A6               	movwf	Mrf49xaTxAck@packet
  4112                           
  4113                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  4114  070F  3E06               	addlw	6
  4115  0710  0086               	movwf	6
  4116  0711  0187               	clrf	7
  4117  0712  0826               	movf	Mrf49xaTxAck@packet,w
  4118  0713  3E04               	addlw	4
  4119  0714  0084               	movwf	4
  4120  0715  0185               	clrf	5
  4121  0716  0800               	movf	0,w
  4122  0717  0081               	movwf	1
  4123                           
  4124                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  4125  0718  0826               	movf	Mrf49xaTxAck@packet,w
  4126  0719  3E07               	addlw	7
  4127  071A  0086               	movwf	6
  4128  071B  0826               	movf	Mrf49xaTxAck@packet,w
  4129  071C  3E16               	addlw	22
  4130  071D  0084               	movwf	4
  4131  071E  0800               	movf	0,w
  4132  071F  0081               	movwf	1
  4133                           
  4134                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  4135  0720  0826               	movf	Mrf49xaTxAck@packet,w
  4136  0721  3E04               	addlw	4
  4137  0722  0086               	movwf	6
  4138  0723  30A1               	movlw	161
  4139  0724  0081               	movwf	1
  4140                           
  4141                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  4142  0725  0A26               	incf	Mrf49xaTxAck@packet,w
  4143  0726  0086               	movwf	6
  4144  0727  3002               	movlw	2
  4145  0728  0081               	movwf	1
  4146                           
  4147                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  4148  0729  01A0               	clrf	Mrf49xaTxPacket@response
  4149  072A  0AA0               	incf	Mrf49xaTxPacket@response,f
  4150  072B  01A1               	clrf	Mrf49xaTxPacket@needAck
  4151  072C  0826               	movf	Mrf49xaTxAck@packet,w
  4152  072D  2EC8               	ljmp	_Mrf49xaTxPacket
  4153  072E                     __end_of_Mrf49xaTxAck:	
  4154  072E                     PL8:	
  4155  072E  0825               	movf	Mrf49xaTxPacket@packet,w
  4156  072F  3E02               	addlw	2
  4157  0730  0086               	movwf	6
  4158  0731  0187               	clrf	7
  4159  0732  0021               	movlb	1	; select bank1
  4160  0733  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  4161  0734  0081               	movwf	1
  4162  0735  0020               	movlb	0	; select bank0
  4163  0736  0A25               	incf	Mrf49xaTxPacket@packet,w
  4164  0737  0086               	movwf	6
  4165  0738  3005               	movlw	5
  4166  0739  0781               	addwf	1,f
  4167  073A  0021               	movlb	1	; select bank1
  4168  073B  30F0               	movlw	-16
  4169  073C  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  4170  073D  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  4171  073E  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  4172  073F  30CF               	movlw	-49
  4173  0740  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  4174  0741  0020               	movlb	0	; select bank0
  4175  0742  0321               	decf	Mrf49xaTxPacket@needAck,w
  4176  0743  3000               	movlw	0
  4177  0744  1903               	skipnz
  4178  0745  3001               	movlw	1
  4179  0746  0021               	movlb	1	; select bank1
  4180  0747  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4181  0748  0008               	return
  4182  0749                     __end_ofPL8:	
  4183  0749                     PL14:	
  4184  0749  3E03               	addlw	3
  4185  074A  0086               	movwf	6
  4186  074B  0187               	clrf	7
  4187  074C  0825               	movf	Mrf49xaTxPacket@packet,w
  4188  074D  3E02               	addlw	2
  4189  074E  0084               	movwf	4
  4190  074F  0185               	clrf	5
  4191  0750  0800               	movf	0,w
  4192  0751  0081               	movwf	1
  4193  0752  0008               	return
  4194  0753                     __end_ofPL14:	
  4195                           
  4196                           	psect	text5
  4197  07FC                     __ptext5:	
  4198 ;; *************** function _PwrSensorInit *****************
  4199 ;; Defined at:
  4200 ;;		line 132 in file "../../../src/node/power.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		None
  4209 ;; Tracked objects:
  4210 ;;		On entry : 17F/1
  4211 ;;		On exit  : 17F/2
  4212 ;;		Unchanged: 160/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4214 ;;      Params:         0       0       0       0
  4215 ;;      Locals:         0       0       0       0
  4216 ;;      Temps:          0       0       0       0
  4217 ;;      Totals:         0       0       0       0
  4218 ;;Total ram usage:        0 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    5
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _PwrSensorInit
  4230  07FC                     _PwrSensorInit:	
  4231                           
  4232                           ;power.c: 134: TRISCbits.TRISC2 = 0;
  4233                           
  4234                           ;incstack = 0
  4235                           ; Regs used in _PwrSensorInit: []
  4236  07FC  110E               	bcf	14,2	;volatile
  4237                           
  4238                           ;power.c: 136: LATCbits.LATC2 = 0;
  4239  07FD  0022               	movlb	2	; select bank2
  4240  07FE  110E               	bcf	14,2	;volatile
  4241  07FF  0008               	return
  4242  0800                     __end_of_PwrSensorInit:	
  4243                           
  4244                           	psect	text6
  4245  0F4F                     __ptext6:	
  4246 ;; *************** function _PwrRfWake *****************
  4247 ;; Defined at:
  4248 ;;		line 125 in file "../../../src/node/power.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;		None               void
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0, pclath, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 1F/1
  4259 ;;		On exit  : 1F/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4262 ;;      Params:         0       0       0       0
  4263 ;;      Locals:         0       0       0       0
  4264 ;;      Temps:          0       0       0       0
  4265 ;;      Totals:         0       0       0       0
  4266 ;;Total ram usage:        0 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    9
  4269 ;; This function calls:
  4270 ;;		_Mrf49xaReboot
  4271 ;; This function is called by:
  4272 ;;		_main
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _PwrRfWake
  4278  0F4F                     _PwrRfWake:	
  4279                           
  4280                           ;power.c: 127: INTCONbits.INTE = 0;
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  4284  0F4F  120B               	bcf	11,4	;volatile
  4285                           
  4286                           ;power.c: 128: Mrf49xaReboot();
  4287  0F50  3183  2B6F         	ljmp	l2385
  4288  0F52                     __end_of_PwrRfWake:	
  4289  0F52                     __ptext7:	
  4290 ;; *************** function _Mrf49xaReboot *****************
  4291 ;; Defined at:
  4292 ;;		line 139 in file "../../../src/devices/mrf49xa.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;		None
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;		None               void
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0, pclath, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 1F/1
  4303 ;;		On exit  : 1F/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4306 ;;      Params:         0       0       0       0
  4307 ;;      Locals:         0       0       0       0
  4308 ;;      Temps:          0       0       0       0
  4309 ;;      Totals:         0       0       0       0
  4310 ;;Total ram usage:        0 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    8
  4313 ;; This function calls:
  4314 ;;		_Mrf49xaModeRx
  4315 ;; This function is called by:
  4316 ;;		_PwrRfWake
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function _Mrf49xaReboot
  4322  0F52                     _Mrf49xaReboot:	
  4323                           
  4324                           ;mrf49xa.c: 141: Mrf49xaModeRx();
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  4328  0F52  3183  2B6F         	ljmp	l2385
  4329  0F54                     __end_of_Mrf49xaReboot:	
  4330                           
  4331                           	psect	text9
  4332  0F90                     __ptext9:	
  4333 ;; *************** function _Mrf49xaShutdown *****************
  4334 ;; Defined at:
  4335 ;;		line 131 in file "../../../src/devices/mrf49xa.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;		None               void
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 1E/1
  4346 ;;		On exit  : 1F/1
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4349 ;;      Params:         0       0       0       0
  4350 ;;      Locals:         0       0       0       0
  4351 ;;      Temps:          0       0       0       0
  4352 ;;      Totals:         0       0       0       0
  4353 ;;Total ram usage:        0 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    8
  4356 ;; This function calls:
  4357 ;;		_Mrf49xaModeSleep
  4358 ;; This function is called by:
  4359 ;;		_PwrRfSleep
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _Mrf49xaShutdown
  4365  0F90                     _Mrf49xaShutdown:	
  4366                           
  4367                           ;mrf49xa.c: 133: Mrf49xaModeSleep();
  4368                           
  4369                           ;incstack = 0
  4370                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  4371  0F90  2F91               	ljmp	l2673
  4372  0F91                     __end_of_Mrf49xaShutdown:	
  4373  0F91                     __ptext10:	
  4374 ;; *************** function _Mrf49xaModeSleep *****************
  4375 ;; Defined at:
  4376 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;		None
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  k               1    3[BANK0 ] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;		None               void
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0, pclath, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 1E/1
  4387 ;;		On exit  : 1F/1
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4390 ;;      Params:         0       0       0       0
  4391 ;;      Locals:         0       1       0       0
  4392 ;;      Temps:          0       0       0       0
  4393 ;;      Totals:         0       1       0       0
  4394 ;;Total ram usage:        1 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    7
  4397 ;; This function calls:
  4398 ;;		_Mrf49TxCmd
  4399 ;; This function is called by:
  4400 ;;		_Mrf49xaShutdown
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function _Mrf49xaModeSleep
  4406  0F91                     _Mrf49xaModeSleep:	
  4407  0F91                     l2673:	
  4408                           ;incstack = 0
  4409                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  4410                           
  4411                           
  4412                           ;mrf49xa.c: 123: UI08_t k;
  4413                           ;mrf49xa.c: 124: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  4414  0F91  0020               	movlb	0	; select bank0
  4415  0F92  3003               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  4416  0F93  01A3               	clrf	Mrf49xaModeSleep@k
  4417  0F94  3188               	movlp	high __stringtab
  4418  0F95  000A               	callw
  4419  0F96  318F               	pagesel	$	;select current page
  4420  0F97  3800               	iorlw	0
  4421  0F98  1903               	btfsc	3,2
  4422  0F99  2FAE               	goto	l2685
  4423  0F9A                     l2679:	
  4424  0F9A  3523               	lslf	Mrf49xaModeSleep@k,w
  4425  0F9B  3E3A               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  4426  0F9C  3188               	movlp	high __stringtab
  4427  0F9D  000A               	callw
  4428  0F9E  00A1               	movwf	Mrf49TxCmd@val
  4429  0F9F  3523               	lslf	Mrf49xaModeSleep@k,w
  4430  0FA0  3E39               	addlw	low (_mrfRegset_Sleep| (0+32768))
  4431  0FA1  3188               	movlp	high __stringtab
  4432  0FA2  000A               	callw
  4433  0FA3  3183  2394  318F   	fcall	_Mrf49TxCmd
  4434  0FA6  3003               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  4435  0FA7  0AA3               	incf	Mrf49xaModeSleep@k,f
  4436  0FA8  3188               	movlp	high __stringtab
  4437  0FA9  000A               	callw
  4438  0FAA  318F               	pagesel	$	;select current page
  4439  0FAB  0223               	subwf	Mrf49xaModeSleep@k,w
  4440  0FAC  1C03               	skipc
  4441  0FAD  2F9A               	goto	l2679
  4442  0FAE                     l2685:	
  4443                           
  4444                           ;mrf49xa.c: 126: rfTrcvStatus.state = POWERED_OFF;
  4445  0FAE  0021               	movlb	1	; select bank1
  4446  0FAF  3080               	movlw	-128
  4447  0FB0  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  4448                           
  4449                           ;mrf49xa.c: 127: rfTrcvStatus.hwByte = 0;
  4450  0FB1  05ED               	andwf	(_rfTrcvStatus^(0+128)+77),f
  4451  0FB2  0008               	return
  4452  0FB3                     __end_of_Mrf49xaModeSleep:	
  4453                           
  4454                           	psect	text11
  4455  0FD7                     __ptext11:	
  4456 ;; *************** function _PwrRfInit *****************
  4457 ;; Defined at:
  4458 ;;		line 88 in file "../../../src/node/power.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;		None               void
  4465 ;; Registers used:
  4466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 1F/0
  4469 ;;		On exit  : 1F/1
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4472 ;;      Params:         0       0       0       0
  4473 ;;      Locals:         0       0       0       0
  4474 ;;      Temps:          0       0       0       0
  4475 ;;      Totals:         0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:   10
  4479 ;; This function calls:
  4480 ;;		_ExtIntInit
  4481 ;;		_Mrf49xaInit
  4482 ;;		_Sleepy
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           
  4489                           ;psect for function _PwrRfInit
  4490  0FD7                     _PwrRfInit:	
  4491                           
  4492                           ;power.c: 90: TRISAbits.TRISA2 = 1;
  4493                           
  4494                           ;incstack = 0
  4495                           ; Regs used in _PwrRfInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4496  0FD7  0021               	movlb	1	; select bank1
  4497  0FD8  150C               	bsf	12,2	;volatile
  4498                           
  4499                           ;power.c: 91: TRISAbits.TRISA4 = 0;
  4500  0FD9  120C               	bcf	12,4	;volatile
  4501                           
  4502                           ;power.c: 92: TRISAbits.TRISA5 = 0;
  4503  0FDA  128C               	bcf	12,5	;volatile
  4504                           
  4505                           ;power.c: 94: TRISBbits.TRISB7 = 0;
  4506  0FDB  138D               	bcf	13,7	;volatile
  4507                           
  4508                           ;power.c: 96: TRISCbits.TRISC1 = 0;
  4509  0FDC  108E               	bcf	14,1	;volatile
  4510                           
  4511                           ;power.c: 97: TRISCbits.TRISC4 = 0;
  4512  0FDD  120E               	bcf	14,4	;volatile
  4513                           
  4514                           ;power.c: 98: TRISCbits.TRISC6 = 0;
  4515  0FDE  130E               	bcf	14,6	;volatile
  4516                           
  4517                           ;power.c: 99: TRISCbits.TRISC7 = 0;
  4518  0FDF  138E               	bcf	14,7	;volatile
  4519                           
  4520                           ;power.c: 100: TRISCbits.TRISC3 = 1;
  4521  0FE0  158E               	bsf	14,3	;volatile
  4522                           
  4523                           ;power.c: 101: TRISCbits.TRISC5 = 1;
  4524  0FE1  168E               	bsf	14,5	;volatile
  4525                           
  4526                           ;power.c: 103: LATCbits.LATC1 = 0;
  4527  0FE2  0022               	movlb	2	; select bank2
  4528  0FE3  108E               	bcf	14,1	;volatile
  4529                           
  4530                           ;power.c: 105: LATAbits.LATA4 = 0;
  4531  0FE4  120C               	bcf	12,4	;volatile
  4532                           
  4533                           ;power.c: 106: LATAbits.LATA5 = 0;
  4534  0FE5  128C               	bcf	12,5	;volatile
  4535                           
  4536                           ;power.c: 107: LATCbits.LATC4 = 0;
  4537  0FE6  120E               	bcf	14,4	;volatile
  4538                           
  4539                           ;power.c: 108: PORTCbits.RC6 = 1;
  4540  0FE7  0020               	movlb	0	; select bank0
  4541  0FE8  170E               	bsf	14,6	;volatile
  4542                           
  4543                           ;power.c: 109: LATCbits.LATC7 = 0;
  4544  0FE9  0022               	movlb	2	; select bank2
  4545  0FEA  138E               	bcf	14,7	;volatile
  4546                           
  4547                           ;power.c: 110: PORTBbits.RB7 = 0;
  4548  0FEB  0020               	movlb	0	; select bank0
  4549  0FEC  138D               	bcf	13,7	;volatile
  4550                           
  4551                           ;power.c: 112: WPUAbits.WPUA2 = 1;
  4552  0FED  0024               	movlb	4	; select bank4
  4553  0FEE  150C               	bsf	12,2	;volatile
  4554                           
  4555                           ;power.c: 113: Sleepy(10);
  4556  0FEF  300A               	movlw	10
  4557  0FF0  0020               	movlb	0	; select bank0
  4558  0FF1  00A0               	movwf	Sleepy@ms
  4559  0FF2  01A1               	clrf	Sleepy@ms+1
  4560  0FF3  3181  2184  318F   	fcall	_Sleepy
  4561                           
  4562                           ;power.c: 115: Mrf49xaInit();
  4563  0FF6  3181  2124  318F   	fcall	_Mrf49xaInit
  4564                           
  4565                           ;power.c: 116: ExtIntInit();
  4566  0FF9  2FFA               	ljmp	l2757
  4567  0FFA                     __end_of_PwrRfInit:	
  4568  0FFA                     __ptext43:	
  4569 ;; *************** function _ExtIntInit *****************
  4570 ;; Defined at:
  4571 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;		None
  4576 ;; Return value:  Size  Location     Type
  4577 ;;		None               void
  4578 ;; Registers used:
  4579 ;;		None
  4580 ;; Tracked objects:
  4581 ;;		On entry : 1F/0
  4582 ;;		On exit  : 1F/1
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4585 ;;      Params:         0       0       0       0
  4586 ;;      Locals:         0       0       0       0
  4587 ;;      Temps:          0       0       0       0
  4588 ;;      Totals:         0       0       0       0
  4589 ;;Total ram usage:        0 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    5
  4592 ;; This function calls:
  4593 ;;		Nothing
  4594 ;; This function is called by:
  4595 ;;		_Mrf49xaTick
  4596 ;;		_PwrRfInit
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _ExtIntInit
  4602  0FFA                     _ExtIntInit:	
  4603  0FFA                     l2757:	
  4604                           ;incstack = 0
  4605                           ; Regs used in _ExtIntInit: []
  4606                           
  4607                           
  4608                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4609  0FFA  0021               	movlb	1	; select bank1
  4610  0FFB  1315               	bcf	21,6	;volatile
  4611                           
  4612                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4613  0FFC  108B               	bcf	11,1	;volatile
  4614                           
  4615                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4616  0FFD  160B               	bsf	11,4	;volatile
  4617                           
  4618                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4619  0FFE  178B               	bsf	11,7	;volatile
  4620  0FFF  0008               	return
  4621  1000                     __end_of_ExtIntInit:	
  4622                           
  4623                           	psect	text14
  4624  0F5A                     __ptext14:	
  4625 ;; *************** function _PwrI2cInit *****************
  4626 ;; Defined at:
  4627 ;;		line 62 in file "../../../src/node/power.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;		None
  4632 ;; Return value:  Size  Location     Type
  4633 ;;		None               void
  4634 ;; Registers used:
  4635 ;;		wreg, status,2, status,0, pclath, cstack
  4636 ;; Tracked objects:
  4637 ;;		On entry : 17F/2
  4638 ;;		On exit  : 1F/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4641 ;;      Params:         0       0       0       0
  4642 ;;      Locals:         0       0       0       0
  4643 ;;      Temps:          0       0       0       0
  4644 ;;      Totals:         0       0       0       0
  4645 ;;Total ram usage:        0 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    8
  4648 ;; This function calls:
  4649 ;;		_SoftI2cInit
  4650 ;; This function is called by:
  4651 ;;		_main
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function _PwrI2cInit
  4657  0F5A                     _PwrI2cInit:	
  4658                           
  4659                           ;power.c: 64: SoftI2cInit();
  4660                           
  4661                           ;incstack = 0
  4662                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  4663  0F5A  3180  202E         	fcall	_SoftI2cInit
  4664                           
  4665                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  4666  0F5C  0021               	movlb	1	; select bank1
  4667  0F5D  120D               	bcf	13,4	;volatile
  4668                           
  4669                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  4670  0F5E  130D               	bcf	13,6	;volatile
  4671                           
  4672                           ;power.c: 69: TRISBbits.TRISB5 = 1;
  4673  0F5F  168D               	bsf	13,5	;volatile
  4674                           
  4675                           ;power.c: 70: PORTBbits.RB5 = 1;
  4676  0F60  0020               	movlb	0	; select bank0
  4677  0F61  168D               	bsf	13,5	;volatile
  4678  0F62  0008               	return
  4679  0F63                     __end_of_PwrI2cInit:	
  4680                           
  4681                           	psect	text15
  4682  002E                     __ptext15:	
  4683 ;; *************** function _SoftI2cInit *****************
  4684 ;; Defined at:
  4685 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;		None
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;		None               void
  4692 ;; Registers used:
  4693 ;;		wreg, status,2, status,0, pclath, cstack
  4694 ;; Tracked objects:
  4695 ;;		On entry : 17F/2
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4699 ;;      Params:         0       0       0       0
  4700 ;;      Locals:         0       0       0       0
  4701 ;;      Temps:          0       0       0       0
  4702 ;;      Totals:         0       0       0       0
  4703 ;;Total ram usage:        0 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    7
  4706 ;; This function calls:
  4707 ;;		_SoftI2cStart
  4708 ;;		_SoftI2cStop
  4709 ;;		_SoftI2cTxByte
  4710 ;; This function is called by:
  4711 ;;		_PwrI2cInit
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           
  4716                           ;psect for function _SoftI2cInit
  4717  002E                     _SoftI2cInit:	
  4718                           
  4719                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  4720                           
  4721                           ;incstack = 0
  4722                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  4723                           
  4724                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  4725                           
  4726                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  4727                           
  4728                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  4729  002E  240E  3180         	fcall	PL20	;call to abstracted procedure
  4730                           
  4731                           ;softI2c.c: 32: SoftI2cStart();
  4732  0030  2283  3180         	fcall	_SoftI2cStart
  4733                           
  4734                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  4735  0032  3000               	movlw	0
  4736  0033  2215  3180         	fcall	_SoftI2cTxByte
  4737                           
  4738                           ;softI2c.c: 34: SoftI2cStop();
  4739  0035  299F               	ljmp	l2293
  4740  0036                     __end_of_SoftI2cInit:	
  4741  0036                     __pmaintext:	
  4742 ;;
  4743 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4744 ;;
  4745 ;; *************** function _main *****************
  4746 ;; Defined at:
  4747 ;;		line 29 in file "../../../src/node/main.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  temperature     2   16[BANK0 ] unsigned int 
  4752 ;;  humidity        2   14[BANK0 ] unsigned int 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;		None               void
  4755 ;; Registers used:
  4756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4757 ;; Tracked objects:
  4758 ;;		On entry : 17F/0
  4759 ;;		On exit  : 1F/1
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4762 ;;      Params:         0       0       0       0
  4763 ;;      Locals:         0       4       0       0
  4764 ;;      Temps:          0       0       0       0
  4765 ;;      Totals:         0       4       0       0
  4766 ;;Total ram usage:        4 bytes
  4767 ;; Hardware stack levels required when called:   11
  4768 ;; This function calls:
  4769 ;;		_AdcSample
  4770 ;;		_Mcp9800Read
  4771 ;;		_Mcp9800Start
  4772 ;;		_Mrf49xaNeedsReset
  4773 ;;		_Mrf49xaTick
  4774 ;;		_PwrAdcInit
  4775 ;;		_PwrAdcSleep
  4776 ;;		_PwrAdcWake
  4777 ;;		_PwrI2cInit
  4778 ;;		_PwrI2cSleep
  4779 ;;		_PwrI2cWake
  4780 ;;		_PwrRfInit
  4781 ;;		_PwrRfSleep
  4782 ;;		_PwrRfWake
  4783 ;;		_PwrSensorInit
  4784 ;;		_PwrSensorSleep
  4785 ;;		_PwrSensorWake
  4786 ;;		_RfSendSampleWeatherNode
  4787 ;;		_Sleepy
  4788 ;; This function is called by:
  4789 ;;		Startup code after reset
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _main
  4795  0036                     _main:	
  4796                           
  4797                           ;main.c: 32: OSCCON = 0b01111000;
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4801  0036  3078               	movlw	120
  4802  0037  0021               	movlb	1	; select bank1
  4803  0038  0099               	movwf	25	;volatile
  4804                           
  4805                           ;main.c: 34: PwrAdcInit();
  4806  0039  2422               	fcall	_PwrAdcInit
  4807                           
  4808                           ;main.c: 35: PwrSensorInit();
  4809  003A  3187  27FC  3180   	fcall	_PwrSensorInit
  4810                           
  4811                           ;main.c: 36: PwrI2cInit();
  4812  003D  318F  275A  3180   	fcall	_PwrI2cInit
  4813                           
  4814                           ;main.c: 37: PwrRfInit();
  4815  0040  318F  27D7  3180   	fcall	_PwrRfInit
  4816                           
  4817                           ;main.c: 39: PwrAdcSleep();
  4818  0043  318F  2771  3180   	fcall	_PwrAdcSleep
  4819                           
  4820                           ;main.c: 40: PwrSensorSleep();
  4821  0046  23AE  3180         	fcall	_PwrSensorSleep
  4822                           
  4823                           ;main.c: 41: PwrI2cSleep();
  4824  0048  23AC  3180         	fcall	_PwrI2cSleep
  4825  004A                     l3263:	
  4826                           
  4827                           ;main.c: 42: PwrRfSleep();
  4828  004A  23E9  3180         	fcall	_PwrRfSleep
  4829                           
  4830                           ;main.c: 45: {
  4831                           ;main.c: 48: Sleepy(1000);
  4832  004C  30E8               	movlw	232
  4833  004D  0020               	movlb	0	; select bank0
  4834  004E  00A0               	movwf	Sleepy@ms
  4835  004F  3003               	movlw	3
  4836  0050  00A1               	movwf	Sleepy@ms+1
  4837  0051  2184  3180         	fcall	_Sleepy
  4838                           
  4839                           ;main.c: 50: PwrSensorWake();
  4840  0053  242B  3180         	fcall	_PwrSensorWake
  4841                           
  4842                           ;main.c: 51: PwrI2cWake();
  4843  0055  23E8  3180         	fcall	_PwrI2cWake
  4844                           
  4845                           ;main.c: 53: Mcp9800Start(Mcp9800_12bit);
  4846  0057  3060               	movlw	96
  4847  0058  21D8               	fcall	_Mcp9800Start
  4848                           
  4849                           ;main.c: 55: PwrAdcWake();
  4850  0059  318F  277F  3180   	fcall	_PwrAdcWake
  4851                           
  4852                           ;main.c: 56: uint16_t humidity = AdcSample(ADC_AN4);
  4853  005C  3004               	movlw	4
  4854  005D  23B1  3180         	fcall	_AdcSample
  4855  005F  0823               	movf	?_AdcSample+1,w
  4856  0060  00AF               	movwf	main@humidity+1
  4857  0061  0822               	movf	?_AdcSample,w
  4858  0062  00AE               	movwf	main@humidity
  4859                           
  4860                           ;main.c: 57: Sleepy(300);
  4861  0063  302C               	movlw	44
  4862  0064  00A0               	movwf	Sleepy@ms
  4863  0065  3001               	movlw	1
  4864  0066  00A1               	movwf	Sleepy@ms+1
  4865  0067  2184  3180         	fcall	_Sleepy
  4866                           
  4867                           ;main.c: 58: uint16_t temperature = Mcp9800Read();
  4868  0069  21AE  3180         	fcall	_Mcp9800Read
  4869  006B  0825               	movf	?_Mcp9800Read+1,w
  4870  006C  00B1               	movwf	main@temperature+1
  4871  006D  0824               	movf	?_Mcp9800Read,w
  4872  006E  00B0               	movwf	main@temperature
  4873                           
  4874                           ;main.c: 60: PwrSensorSleep();
  4875  006F  23AE  3180         	fcall	_PwrSensorSleep
  4876                           
  4877                           ;main.c: 61: PwrI2cSleep();
  4878  0071  23AC               	fcall	_PwrI2cSleep
  4879                           
  4880                           ;main.c: 63: PwrRfWake();
  4881  0072  318F  274F  3180   	fcall	_PwrRfWake
  4882                           
  4883                           ;main.c: 65: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4884  0075  0021               	movlb	1	; select bank1
  4885  0076  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4886  0077  1903               	btfsc	3,2
  4887  0078  287D               	goto	l3293
  4888                           
  4889                           ;main.c: 66: {
  4890                           ;main.c: 67: Mrf49xaNeedsReset();
  4891  0079  23E6  3180         	fcall	_Mrf49xaNeedsReset
  4892                           
  4893                           ;main.c: 68: Mrf49xaTick();
  4894  007B  2094  3180         	fcall	_Mrf49xaTick
  4895  007D                     l3293:	
  4896                           
  4897                           ;main.c: 73: {
  4898                           ;main.c: 74: Mrf49xaTick();
  4899  007D  2094  3180         	fcall	_Mrf49xaTick
  4900                           
  4901                           ;main.c: 75: }
  4902                           ;main.c: 76: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  4903  007F  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  4904  0080  1D03               	skipz
  4905  0081  287D               	goto	l3293
  4906                           
  4907                           ;main.c: 78: RfSendSampleWeatherNode(temperature, humidity);
  4908  0082  0020               	movlb	0	; select bank0
  4909  0083  0831               	movf	main@temperature+1,w
  4910  0084  00A7               	movwf	RfSendSampleWeatherNode@temperature+1
  4911  0085  0830               	movf	main@temperature,w
  4912  0086  00A6               	movwf	RfSendSampleWeatherNode@temperature
  4913  0087  082F               	movf	main@humidity+1,w
  4914  0088  00A9               	movwf	RfSendSampleWeatherNode@humidity+1
  4915  0089  082E               	movf	main@humidity,w
  4916  008A  00A8               	movwf	RfSendSampleWeatherNode@humidity
  4917  008B  3186  2602  3180   	fcall	_RfSendSampleWeatherNode
  4918  008E                     l599:	
  4919                           ;main.c: 79: do
  4920                           
  4921                           
  4922                           ;main.c: 80: {
  4923                           ;main.c: 81: Mrf49xaTick();
  4924  008E  2094  3180         	fcall	_Mrf49xaTick
  4925                           
  4926                           ;main.c: 82: }
  4927                           ;main.c: 83: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  4928  0090  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  4929  0091  1903               	btfsc	3,2
  4930  0092  284A               	goto	l3263
  4931  0093  288E               	goto	l599
  4932  0094                     __end_of_main:	
  4933  0094                     __ptext21:	
  4934 ;; *************** function _Mrf49xaTick *****************
  4935 ;; Defined at:
  4936 ;;		line 124 in file "../../../src/devices/mrf49xa_packet.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  timeout         1   12[BANK0 ] unsigned char 
  4941 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  4942 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;		None               void
  4945 ;; Registers used:
  4946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 1E/1
  4949 ;;		On exit  : 1F/1
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4952 ;;      Params:         0       0       0       0
  4953 ;;      Locals:         0       2       0       0
  4954 ;;      Temps:          0       1       0       0
  4955 ;;      Totals:         0       3       0       0
  4956 ;;Total ram usage:        3 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:   10
  4959 ;; This function calls:
  4960 ;;		_ExtIntInit
  4961 ;;		_HandlePacket
  4962 ;;		_Mrf49RxSts
  4963 ;;		_Mrf49xaFreePacket
  4964 ;;		_Mrf49xaInit
  4965 ;;		_Mrf49xaModeTx
  4966 ;;		_Mrf49xaPacketPending
  4967 ;;		_Mrf49xaRxPacket
  4968 ;;		_Sleepy
  4969 ;; This function is called by:
  4970 ;;		_main
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           
  4975                           ;psect for function _Mrf49xaTick
  4976  0094                     _Mrf49xaTick:	
  4977                           
  4978                           ;mrf49xa_packet.c: 126: if (rfTrcvStatus.needsReset)
  4979                           
  4980                           ;incstack = 0
  4981                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4982  0094  0021               	movlb	1	; select bank1
  4983  0095  1FED               	btfss	(_rfTrcvStatus^(0+128)+77),7
  4984  0096  289A               	goto	l2965
  4985                           
  4986                           ;mrf49xa_packet.c: 127: {
  4987                           ;mrf49xa_packet.c: 128: Mrf49xaInit();
  4988  0097  2124               	fcall	_Mrf49xaInit
  4989                           
  4990                           ;mrf49xa_packet.c: 129: ExtIntInit();
  4991  0098  318F  2FFA         	ljmp	l2757
  4992  009A                     l2965:	
  4993                           
  4994                           ;mrf49xa_packet.c: 131: }
  4995                           ;mrf49xa_packet.c: 133: if (Mrf49xaPacketPending())
  4996  009A  2419  3180         	fcall	_Mrf49xaPacketPending
  4997  009C  3A00               	xorlw	0
  4998  009D  1903               	skipnz
  4999  009E  28C3               	goto	l2979
  5000                           
  5001                           ;mrf49xa_packet.c: 134: {
  5002                           ;mrf49xa_packet.c: 135: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  5003  009F  318F  2763  3180   	fcall	_Mrf49xaRxPacket
  5004  00A2  0020               	movlb	0	; select bank0
  5005  00A3  00AD               	movwf	Mrf49xaTick@packet
  5006                           
  5007                           ;mrf49xa_packet.c: 143: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  5008  00A4  3E03               	addlw	3
  5009  00A5  0086               	movwf	6
  5010  00A6  0187               	clrf	7
  5011  00A7  0801               	movf	1,w
  5012  00A8  3AFF               	xorlw	255
  5013  00A9  1903               	skipnz
  5014  00AA  28B3               	goto	l2973
  5015  00AB  082D               	movf	Mrf49xaTick@packet,w
  5016  00AC  3E03               	addlw	3
  5017  00AD  0086               	movwf	6
  5018  00AE  0801               	movf	1,w
  5019  00AF  0021               	movlb	1	; select bank1
  5020  00B0  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  5021  00B1  1D03               	skipz
  5022  00B2  28BE               	goto	l2977
  5023  00B3                     l2973:	
  5024                           
  5025                           ;mrf49xa_packet.c: 144: {
  5026                           ;mrf49xa_packet.c: 145: packet->packet.size -= 5;
  5027  00B3  0020               	movlb	0	; select bank0
  5028  00B4  0A2D               	incf	Mrf49xaTick@packet,w
  5029  00B5  0086               	movwf	6
  5030  00B6  3005               	movlw	5
  5031  00B7  0187               	clrf	7
  5032  00B8  0281               	subwf	1,f
  5033                           
  5034                           ;mrf49xa_packet.c: 148: HandlePacket(packet);
  5035  00B9  082D               	movf	Mrf49xaTick@packet,w
  5036  00BA  3186  2653  3180   	fcall	_HandlePacket
  5037                           
  5038                           ;mrf49xa_packet.c: 150: }
  5039  00BD  28C3               	goto	l2979
  5040  00BE                     l2977:	
  5041                           
  5042                           ;mrf49xa_packet.c: 151: else
  5043                           ;mrf49xa_packet.c: 152: {
  5044                           ;mrf49xa_packet.c: 153: Mrf49xaFreePacket(packet);
  5045  00BE  0020               	movlb	0	; select bank0
  5046  00BF  082D               	movf	Mrf49xaTick@packet,w
  5047  00C0  3186  26C3  3180   	fcall	_Mrf49xaFreePacket
  5048  00C3                     l2979:	
  5049                           
  5050                           ;mrf49xa_packet.c: 154: }
  5051                           ;mrf49xa_packet.c: 158: }
  5052                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  5053  00C3  0021               	movlb	1	; select bank1
  5054  00C4  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  5055  00C5  3A03               	xorlw	3
  5056  00C6  1D03               	skipz
  5057  00C7  28F3               	goto	l2999
  5058                           
  5059                           ;mrf49xa_packet.c: 161: {
  5060                           ;mrf49xa_packet.c: 162: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  5061  00C8  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5062  00C9  3A02               	xorlw	2
  5063  00CA  1D03               	skipz
  5064  00CB  28CE               	goto	l2985
  5065  00CC                     l2983:	
  5066                           
  5067                           ;mrf49xa_packet.c: 163: {
  5068                           ;mrf49xa_packet.c: 164: rfTrcvStatus.txPacket.state = PKT_FREE;
  5069  00CC  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  5070                           
  5071                           ;mrf49xa_packet.c: 165: }
  5072  00CD  28F3               	goto	l2999
  5073  00CE                     l2985:	
  5074                           
  5075                           ;mrf49xa_packet.c: 166: else if (rfTrcvStatus.txPacket.retry == 10)
  5076  00CE  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5077  00CF  390F               	andlw	15
  5078  00D0  3A0A               	xorlw	10
  5079  00D1  1D03               	skipz
  5080  00D2  28EB               	goto	l2995
  5081                           
  5082                           ;mrf49xa_packet.c: 167: {
  5083                           ;mrf49xa_packet.c: 168: if (rfTrcvStatus.txPacket.retransmit == 1)
  5084  00D3  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  5085  00D4  3903               	andlw	3
  5086  00D5  3A01               	xorlw	1
  5087  00D6  1903               	btfsc	3,2
  5088  00D7  28CC               	goto	l2983
  5089                           
  5090                           ;mrf49xa_packet.c: 174: else
  5091                           ;mrf49xa_packet.c: 175: {
  5092                           ;mrf49xa_packet.c: 177: rfTrcvStatus.txPacket.retry = 0;
  5093  00D8  30F0               	movlw	-16
  5094  00D9  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  5095                           
  5096                           ;mrf49xa_packet.c: 178: rfTrcvStatus.txPacket.retransmit++;
  5097  00DA  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  5098  00DB  3903               	andlw	3
  5099  00DC  0020               	movlb	0	; select bank0
  5100  00DD  00AB               	movwf	??_Mrf49xaTick
  5101  00DE  0AAB               	incf	??_Mrf49xaTick,f
  5102  00DF  0EAB               	swapf	??_Mrf49xaTick,f
  5103  00E0  0021               	movlb	1	; select bank1
  5104  00E1  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5105  00E2  0020               	movlb	0	; select bank0
  5106  00E3  062B               	xorwf	??_Mrf49xaTick,w
  5107  00E4  39CF               	andlw	-49
  5108  00E5  062B               	xorwf	??_Mrf49xaTick,w
  5109  00E6  0021               	movlb	1	; select bank1
  5110  00E7  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  5111                           
  5112                           ;mrf49xa_packet.c: 179: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  5113  00E8  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  5114  00E9  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  5115  00EA  28F3               	goto	l2999
  5116  00EB                     l2995:	
  5117                           
  5118                           ;mrf49xa_packet.c: 182: else
  5119                           ;mrf49xa_packet.c: 183: {
  5120                           ;mrf49xa_packet.c: 184: rfTrcvStatus.txPacket.retry++;
  5121  00EB  23ED  3180         	fcall	PL10	;call to abstracted procedure
  5122                           
  5123                           ;mrf49xa_packet.c: 185: Sleepy(8);
  5124  00ED  3008               	movlw	8
  5125  00EE  0020               	movlb	0	; select bank0
  5126  00EF  00A0               	movwf	Sleepy@ms
  5127  00F0  01A1               	clrf	Sleepy@ms+1
  5128  00F1  2184  3180         	fcall	_Sleepy
  5129  00F3                     l2999:	
  5130                           
  5131                           ;mrf49xa_packet.c: 186: }
  5132                           ;mrf49xa_packet.c: 187: }
  5133                           ;mrf49xa_packet.c: 189: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  5134                           ;mrf49xa_packet.c: 190: rfTrcvStatus.state == RECV_IDLE)
  5135  00F3  0021               	movlb	1	; select bank1
  5136  00F4  0B53               	decfsz	(_rfTrcvStatus^(0+128)+51),w
  5137  00F5  0008               	return
  5138  00F6  0B6C               	decfsz	(_rfTrcvStatus^(0+128)+76),w
  5139  00F7  0008               	return
  5140                           
  5141                           ;mrf49xa_packet.c: 191: {
  5142                           ;mrf49xa_packet.c: 192: if (rfTrcvStatus.txPacket.retry >= 10)
  5143  00F8  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5144  00F9  390F               	andlw	15
  5145  00FA  0020               	movlb	0	; select bank0
  5146  00FB  00AB               	movwf	??_Mrf49xaTick
  5147  00FC  300A               	movlw	10
  5148  00FD  022B               	subwf	??_Mrf49xaTick,w
  5149  00FE  1C03               	skipc
  5150  00FF  2906               	goto	l3011
  5151                           
  5152                           ;mrf49xa_packet.c: 193: {
  5153                           ;mrf49xa_packet.c: 195: rfTrcvStatus.txPacket.retry = 0;
  5154  0100  30F0               	movlw	-16
  5155  0101  0021               	movlb	1	; select bank1
  5156  0102  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  5157                           
  5158                           ;mrf49xa_packet.c: 196: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5159  0103  3003               	movlw	3
  5160  0104  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  5161  0105  0008               	return
  5162  0106                     l3011:	
  5163                           
  5164                           ;mrf49xa_packet.c: 198: }
  5165                           ;mrf49xa_packet.c: 202: uint8_t timeout = 0;
  5166  0106  01AC               	clrf	Mrf49xaTick@timeout
  5167  0107                     l3013:	
  5168                           
  5169                           ;mrf49xa_packet.c: 206: {
  5170                           ;mrf49xa_packet.c: 207: Mrf49RxSts();
  5171  0107  239F  3180         	fcall	_Mrf49RxSts
  5172                           
  5173                           ;mrf49xa_packet.c: 209: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  5174  0109  0021               	movlb	1	; select bank1
  5175  010A  0B6C               	decfsz	(_rfTrcvStatus^(0+128)+76),w
  5176  010B  290F               	goto	l3021
  5177  010C  0020               	movlb	0	; select bank0
  5178  010D  1C32               	btfss	_mrf49Status,0
  5179  010E  291D               	goto	l415
  5180  010F                     l3021:	
  5181                           
  5182                           ;mrf49xa_packet.c: 213: }
  5183                           ;mrf49xa_packet.c: 215: Sleepy(8);
  5184  010F  3008               	movlw	8
  5185  0110  0020               	movlb	0	; select bank0
  5186  0111  00A0               	movwf	Sleepy@ms
  5187  0112  01A1               	clrf	Sleepy@ms+1
  5188  0113  2184  3180         	fcall	_Sleepy
  5189  0115  300B               	movlw	11
  5190                           
  5191                           ;mrf49xa_packet.c: 216: timeout++;
  5192  0116  0AAC               	incf	Mrf49xaTick@timeout,f
  5193                           
  5194                           ;mrf49xa_packet.c: 218: if (timeout > 10)
  5195  0117  022C               	subwf	Mrf49xaTick@timeout,w
  5196  0118  1C03               	skipc
  5197  0119  2907               	goto	l3013
  5198                           
  5199                           ;mrf49xa_packet.c: 219: {
  5200                           ;mrf49xa_packet.c: 220: rfTrcvStatus.txPacket.retry++;
  5201  011A  0021               	movlb	1	; select bank1
  5202  011B  23ED               	fcall	PL10	;call to abstracted procedure
  5203  011C  0008               	return
  5204  011D                     l415:	
  5205                           
  5206                           ;mrf49xa_packet.c: 234: INTCONbits.INTE = 0;;
  5207  011D  120B               	bcf	11,4	;volatile
  5208                           
  5209                           ;mrf49xa_packet.c: 235: Mrf49xaModeTx();
  5210  011E  318F  27B3         	fcall	_Mrf49xaModeTx
  5211                           
  5212                           ;mrf49xa_packet.c: 236: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  5213  0120  3002               	movlw	2
  5214  0121  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  5215                           
  5216                           ;mrf49xa_packet.c: 237: INTCONbits.INTE = 1;;
  5217  0122  160B               	bsf	11,4	;volatile
  5218  0123  0008               	return
  5219  0124                     __end_of_Mrf49xaTick:	
  5220  0124                     __ptext25:	
  5221 ;; *************** function _Mrf49xaInit *****************
  5222 ;; Defined at:
  5223 ;;		line 150 in file "../../../src/devices/mrf49xa.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;		None
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  k               1    6[BANK0 ] unsigned char 
  5228 ;;  j               1    0        unsigned char 
  5229 ;;  i               1    0        unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 1E/0
  5236 ;;		On exit  : 1F/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5239 ;;      Params:         0       0       0       0
  5240 ;;      Locals:         0       1       0       0
  5241 ;;      Temps:          0       0       0       0
  5242 ;;      Totals:         0       1       0       0
  5243 ;;Total ram usage:        1 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    9
  5246 ;; This function calls:
  5247 ;;		_Mrf49TxCmd
  5248 ;;		_Mrf49xaModeRx
  5249 ;;		_Mrf49xaServe
  5250 ;;		_Sleepy
  5251 ;; This function is called by:
  5252 ;;		_Mrf49xaTick
  5253 ;;		_PwrRfInit
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _Mrf49xaInit
  5259  0124                     _Mrf49xaInit:	
  5260  0124                     l234:	
  5261                           ;incstack = 0
  5262                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5263                           ;mrf49xa.c: 152: UI08_t k;
  5264                           ;mrf49xa.c: 154: UI08_t i, j;
  5265                           ;mrf49xa.c: 156: reset:
  5266                           
  5267                           
  5268                           ;mrf49xa.c: 158: for (k = 0; k < sizeof(rfTrcvStatus_t); k++)
  5269  0124  0020               	movlb	0	; select bank0
  5270  0125  01A6               	clrf	Mrf49xaInit@k
  5271  0126                     l2785:	
  5272                           
  5273                           ;mrf49xa.c: 159: {
  5274                           ;mrf49xa.c: 160: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  5275  0126  0826               	movf	Mrf49xaInit@k,w
  5276  0127  3EA0               	addlw	_rfTrcvStatus& (0+255)
  5277  0128  0086               	movwf	6
  5278  0129  304F               	movlw	79
  5279  012A  0187               	clrf	7
  5280  012B  0181               	clrf	1
  5281  012C  0AA6               	incf	Mrf49xaInit@k,f
  5282  012D  0226               	subwf	Mrf49xaInit@k,w
  5283  012E  1C03               	skipc
  5284  012F  2926               	goto	l2785
  5285                           
  5286                           ;mrf49xa.c: 161: }
  5287                           ;mrf49xa.c: 164: PORTCbits.RC6 = 1;
  5288  0130  170E               	bsf	14,6	;volatile
  5289                           
  5290                           ;mrf49xa.c: 165: LATCbits.LATC7 = 0;
  5291  0131  0022               	movlb	2	; select bank2
  5292  0132  138E               	bcf	14,7	;volatile
  5293                           
  5294                           ;mrf49xa.c: 166: PORTBbits.RB7 = 0;
  5295  0133  0020               	movlb	0	; select bank0
  5296  0134  138D               	bcf	13,7	;volatile
  5297                           
  5298                           ;mrf49xa.c: 168: LATCbits.LATC1 = 0;
  5299  0135  0022               	movlb	2	; select bank2
  5300  0136  108E               	bcf	14,1	;volatile
  5301                           
  5302                           ;mrf49xa.c: 169: LATCbits.LATC4 = 1;
  5303  0137  160E               	bsf	14,4	;volatile
  5304                           
  5305                           ;mrf49xa.c: 171: LATAbits.LATA5 = 1;
  5306  0138  168C               	bsf	12,5	;volatile
  5307                           
  5308                           ;mrf49xa.c: 173: Sleepy(64);
  5309  0139  2414  3180         	fcall	PL22	;call to abstracted procedure
  5310  013B  2184  3180         	fcall	_Sleepy
  5311                           
  5312                           ;mrf49xa.c: 174: LATAbits.LATA4 = 0;
  5313  013D  0022               	movlb	2	; select bank2
  5314  013E  120C               	bcf	12,4	;volatile
  5315                           
  5316                           ;mrf49xa.c: 175: Sleepy(64);
  5317  013F  2414  3180         	fcall	PL22	;call to abstracted procedure
  5318  0141  2184  3180         	fcall	_Sleepy
  5319                           
  5320                           ;mrf49xa.c: 176: LATAbits.LATA4 = 1;
  5321  0143  0022               	movlb	2	; select bank2
  5322  0144  160C               	bsf	12,4	;volatile
  5323                           
  5324                           ;mrf49xa.c: 177: Sleepy(64);
  5325  0145  2414  3180         	fcall	PL22	;call to abstracted procedure
  5326  0147  2184               	fcall	_Sleepy
  5327                           
  5328                           ;mrf49xa.c: 179: rfTrcvStatus.state = RECV_IDLE;
  5329  0148  0021               	movlb	1	; select bank1
  5330  0149  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  5331  014A  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  5332                           
  5333                           ;mrf49xa.c: 181: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(8); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  5334  014B  0020               	movlb	0	; select bank0
  5335  014C  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  5336  014D  01A6               	clrf	Mrf49xaInit@k
  5337  014E  3188               	movlp	high __stringtab
  5338  014F  000A               	callw
  5339  0150  3180               	pagesel	$	;select current page
  5340  0151  3800               	iorlw	0
  5341  0152  1903               	btfsc	3,2
  5342  0153  2976               	goto	l2815
  5343  0154                     l2805:	
  5344  0154  3526               	lslf	Mrf49xaInit@k,w
  5345  0155  3E05               	addlw	low (_mrfRegset_Init| (0+32768))
  5346  0156  3188               	movlp	high __stringtab
  5347  0157  000A               	callw
  5348  0158  3180               	pagesel	$	;select current page
  5349  0159  3A55               	xorlw	85
  5350  015A  1D03               	skipz
  5351  015B  2962               	goto	l2809
  5352  015C  3008               	movlw	8
  5353  015D  00A0               	movwf	Sleepy@ms
  5354  015E  01A1               	clrf	Sleepy@ms+1
  5355  015F  2184  3180         	fcall	_Sleepy
  5356  0161  296E               	goto	l2811
  5357  0162                     l2809:	
  5358  0162  3526               	lslf	Mrf49xaInit@k,w
  5359  0163  3E06               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  5360  0164  3188               	movlp	high __stringtab
  5361  0165  000A               	callw
  5362  0166  00A1               	movwf	Mrf49TxCmd@val
  5363  0167  3526               	lslf	Mrf49xaInit@k,w
  5364  0168  3E05               	addlw	low (_mrfRegset_Init| (0+32768))
  5365  0169  3188               	movlp	high __stringtab
  5366  016A  000A               	callw
  5367  016B  3180               	pagesel	$	;select current page
  5368  016C  3183  2394         	fcall	_Mrf49TxCmd
  5369  016E                     l2811:	
  5370  016E  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  5371  016F  0AA6               	incf	Mrf49xaInit@k,f
  5372  0170  3188               	movlp	high __stringtab
  5373  0171  000A               	callw
  5374  0172  3180               	pagesel	$	;select current page
  5375  0173  0226               	subwf	Mrf49xaInit@k,w
  5376  0174  1C03               	skipc
  5377  0175  2954               	goto	l2805
  5378  0176                     l2815:	
  5379                           
  5380                           ;mrf49xa.c: 184: Mrf49xaModeRx();
  5381  0176  236F  3180         	fcall	_Mrf49xaModeRx
  5382                           
  5383                           ;mrf49xa.c: 186: k = 0;
  5384  0178  01A6               	clrf	Mrf49xaInit@k
  5385  0179                     l2827:	
  5386                           ;mrf49xa.c: 187: while(PORTAbits.RA2 == 0)
  5387                           
  5388  0179  0020               	movlb	0	; select bank0
  5389  017A  190C               	btfsc	12,2	;volatile
  5390  017B  0008               	return
  5391                           
  5392                           ;mrf49xa.c: 188: {
  5393                           ;mrf49xa.c: 189: k++;
  5394  017C  0AA6               	incf	Mrf49xaInit@k,f
  5395                           
  5396                           ;mrf49xa.c: 190: if (k == 255)
  5397  017D  0826               	movf	Mrf49xaInit@k,w
  5398  017E  3AFF               	xorlw	255
  5399  017F  1903               	btfsc	3,2
  5400  0180  2924               	goto	l234
  5401                           
  5402                           ;mrf49xa.c: 195: }
  5403                           ;mrf49xa.c: 200: Mrf49xaServe();
  5404                           
  5405                           ;mrf49xa.c: 194: goto reset;
  5406  0181  2290  3180         	fcall	_Mrf49xaServe
  5407  0183  2979               	goto	l2827
  5408  0184                     __end_of_Mrf49xaInit:	
  5409  0184                     __ptext26:	
  5410 ;; *************** function _Sleepy *****************
  5411 ;; Defined at:
  5412 ;;		line 42 in file "../../../src/node/power.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  ms              2    0[BANK0 ] unsigned int 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  b               1    3[BANK0 ] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;		None               void
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0
  5421 ;; Tracked objects:
  5422 ;;		On entry : 1F/0
  5423 ;;		On exit  : 1F/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5426 ;;      Params:         0       2       0       0
  5427 ;;      Locals:         0       1       0       0
  5428 ;;      Temps:          0       1       0       0
  5429 ;;      Totals:         0       4       0       0
  5430 ;;Total ram usage:        4 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    5
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_Mrf49xaInit
  5437 ;;		_Mrf49xaTick
  5438 ;;		_main
  5439 ;;		_PwrRfInit
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _Sleepy
  5445  0184                     _Sleepy:	
  5446                           
  5447                           ;power.c: 44: uint8_t b = 0;
  5448                           
  5449                           ;incstack = 0
  5450                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  5451  0184  01A3               	clrf	Sleepy@b
  5452  0185                     l2671:	
  5453                           ;power.c: 46: while (ms != 0)
  5454                           
  5455  0185  0821               	movf	Sleepy@ms+1,w
  5456  0186  0420               	iorwf	Sleepy@ms,w
  5457  0187  1903               	btfsc	3,2
  5458  0188  0008               	return
  5459                           
  5460                           ;power.c: 47: {
  5461                           ;power.c: 48: if ((ms & 1) != 0)
  5462  0189  1C20               	btfss	Sleepy@ms,0
  5463  018A  299A               	goto	l2667
  5464                           
  5465                           ;power.c: 49: {
  5466                           ;power.c: 50: WDTCONbits.WDTPS = b;
  5467  018B  0823               	movf	Sleepy@b,w
  5468  018C  00A2               	movwf	??_Sleepy
  5469  018D  0DA2               	rlf	??_Sleepy,f
  5470  018E  0021               	movlb	1	; select bank1
  5471  018F  0817               	movf	23,w	;volatile
  5472  0190  0020               	movlb	0	; select bank0
  5473  0191  0622               	xorwf	??_Sleepy,w
  5474  0192  39C1               	andlw	-63
  5475  0193  0622               	xorwf	??_Sleepy,w
  5476  0194  0021               	movlb	1	; select bank1
  5477  0195  0097               	movwf	23	;volatile
  5478                           
  5479                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  5480  0196  1417               	bsf	23,0	;volatile
  5481  0197  0063               	sleep	;# 
  5482                           
  5483                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  5484  0198  0021               	movlb	1	; select bank1
  5485  0199  1017               	bcf	23,0	;volatile
  5486  019A                     l2667:	
  5487                           
  5488                           ;power.c: 56: }
  5489                           ;power.c: 57: ms = ms >> 1;
  5490  019A  0020               	movlb	0	; select bank0
  5491  019B  36A1               	lsrf	Sleepy@ms+1,f
  5492  019C  0CA0               	rrf	Sleepy@ms,f
  5493                           
  5494                           ;power.c: 58: b++;
  5495  019D  0AA3               	incf	Sleepy@b,f
  5496  019E  2985               	goto	l2671
  5497  019F                     __end_of_Sleepy:	
  5498  019F                     __ptext48:	
  5499 ;; *************** function _SoftI2cStop *****************
  5500 ;; Defined at:
  5501 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;		None               void
  5508 ;; Registers used:
  5509 ;;		wreg, status,2, status,0, pclath, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/1
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5515 ;;      Params:         0       0       0       0
  5516 ;;      Locals:         0       0       0       0
  5517 ;;      Temps:          0       0       0       0
  5518 ;;      Totals:         0       0       0       0
  5519 ;;Total ram usage:        0 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    6
  5522 ;; This function calls:
  5523 ;;		_SoftI2cNop
  5524 ;; This function is called by:
  5525 ;;		_SoftI2cInit
  5526 ;;		_Mcp9800Start
  5527 ;;		_Mcp9800Read
  5528 ;;		_eepromRxBytes
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _SoftI2cStop
  5534  019F                     _SoftI2cStop:	
  5535  019F                     l2293:	
  5536                           ;incstack = 0
  5537                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5538                           
  5539                           
  5540                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  5541  019F  0021               	movlb	1	; select bank1
  5542  01A0  120D               	bcf	13,4	;volatile
  5543                           
  5544                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  5545  01A1  0022               	movlb	2	; select bank2
  5546  01A2  120D               	bcf	13,4	;volatile
  5547                           
  5548                           ;softI2c.c: 78: SoftI2cNop();
  5549  01A3  227C  3180         	fcall	_SoftI2cNop
  5550                           
  5551                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  5552  01A5  0022               	movlb	2	; select bank2
  5553  01A6  170D               	bsf	13,6	;volatile
  5554                           
  5555                           ;softI2c.c: 81: SoftI2cNop();
  5556  01A7  227C  3180         	fcall	_SoftI2cNop
  5557                           
  5558                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  5559  01A9  0022               	movlb	2	; select bank2
  5560  01AA  160D               	bsf	13,4	;volatile
  5561                           
  5562                           ;softI2c.c: 83: SoftI2cNop();
  5563  01AB  227C  3180         	fcall	_SoftI2cNop
  5564                           
  5565                           ;softI2c.c: 84: SoftI2cNop();
  5566  01AD  2A7C               	ljmp	l2191
  5567  01AE                     __end_of_SoftI2cStop:	
  5568  01AE                     __ptext46:	
  5569 ;; *************** function _Mcp9800Read *****************
  5570 ;; Defined at:
  5571 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  tempL           1    7[BANK0 ] unsigned char 
  5576 ;;  tempH           1    6[BANK0 ] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  2    4[BANK0 ] unsigned int 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0, pclath, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 1F/0
  5583 ;;		On exit  : 1F/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5586 ;;      Params:         0       2       0       0
  5587 ;;      Locals:         0       2       0       0
  5588 ;;      Temps:          0       0       0       0
  5589 ;;      Totals:         0       4       0       0
  5590 ;;Total ram usage:        4 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    7
  5593 ;; This function calls:
  5594 ;;		_SoftI2cRxByte
  5595 ;;		_SoftI2cStart
  5596 ;;		_SoftI2cStop
  5597 ;;		_SoftI2cTxByte
  5598 ;; This function is called by:
  5599 ;;		_main
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function _Mcp9800Read
  5605  01AE                     _Mcp9800Read:	
  5606                           
  5607                           ;mcp9800.c: 21: SoftI2cStart();
  5608                           
  5609                           ;incstack = 0
  5610                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  5611  01AE  2283  3180         	fcall	_SoftI2cStart
  5612                           
  5613                           ;mcp9800.c: 25: SoftI2cTxByte(0b10010001);
  5614  01B0  3091               	movlw	145
  5615  01B1  2215  3180         	fcall	_SoftI2cTxByte
  5616                           
  5617                           ;mcp9800.c: 26: UI08_t tempH = SoftI2cRxByte(1);
  5618  01B3  3001               	movlw	1
  5619  01B4  2243  3180         	fcall	_SoftI2cRxByte
  5620  01B6  00A6               	movwf	Mcp9800Read@tempH
  5621                           
  5622                           ;mcp9800.c: 27: UI08_t tempL = SoftI2cRxByte(0);
  5623  01B7  3000               	movlw	0
  5624  01B8  2243  3180         	fcall	_SoftI2cRxByte
  5625  01BA  00A7               	movwf	Mcp9800Read@tempL
  5626                           
  5627                           ;mcp9800.c: 28: SoftI2cStop();
  5628  01BB  219F               	fcall	_SoftI2cStop
  5629                           
  5630                           ;mcp9800.c: 30: return (tempH << 8) | tempL;
  5631  01BC  0020               	movlb	0	; select bank0
  5632  01BD  0826               	movf	Mcp9800Read@tempH,w
  5633  01BE  00A5               	movwf	?_Mcp9800Read+1
  5634  01BF  01A4               	clrf	?_Mcp9800Read
  5635  01C0  0827               	movf	Mcp9800Read@tempL,w
  5636  01C1  04A4               	iorwf	?_Mcp9800Read,f
  5637  01C2  0008               	return
  5638  01C3                     __end_of_Mcp9800Read:	
  5639  01C3                     __ptext39:	
  5640 ;; *************** function _SoftI2cRepeatedStart *****************
  5641 ;; Defined at:
  5642 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;		None               void
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0, pclath, cstack
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5656 ;;      Params:         0       0       0       0
  5657 ;;      Locals:         0       0       0       0
  5658 ;;      Temps:          0       0       0       0
  5659 ;;      Totals:         0       0       0       0
  5660 ;;Total ram usage:        0 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; Hardware stack levels required when called:    6
  5663 ;; This function calls:
  5664 ;;		_SoftI2cNop
  5665 ;; This function is called by:
  5666 ;;		_eepromRxBytes
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           
  5671                           ;psect for function _SoftI2cRepeatedStart
  5672  01C3                     _SoftI2cRepeatedStart:	
  5673                           
  5674                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  5675                           
  5676                           ;incstack = 0
  5677                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5678  01C3  0021               	movlb	1	; select bank1
  5679  01C4  120D               	bcf	13,4	;volatile
  5680                           
  5681                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  5682  01C5  0022               	movlb	2	; select bank2
  5683  01C6  130D               	bcf	13,6	;volatile
  5684                           
  5685                           ;softI2c.c: 57: SoftI2cNop();
  5686  01C7  227C  3180         	fcall	_SoftI2cNop
  5687                           
  5688                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  5689  01C9  0022               	movlb	2	; select bank2
  5690  01CA  160D               	bsf	13,4	;volatile
  5691                           
  5692                           ;softI2c.c: 60: SoftI2cNop();
  5693  01CB  227C  3180         	fcall	_SoftI2cNop
  5694                           
  5695                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  5696  01CD  0022               	movlb	2	; select bank2
  5697  01CE  170D               	bsf	13,6	;volatile
  5698                           
  5699                           ;softI2c.c: 63: SoftI2cNop();
  5700  01CF  227C  3180         	fcall	_SoftI2cNop
  5701                           
  5702                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  5703  01D1  0022               	movlb	2	; select bank2
  5704  01D2  120D               	bcf	13,4	;volatile
  5705                           
  5706                           ;softI2c.c: 66: SoftI2cNop();
  5707  01D3  227C  3180         	fcall	_SoftI2cNop
  5708                           
  5709                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  5710  01D5  0022               	movlb	2	; select bank2
  5711  01D6  130D               	bcf	13,6	;volatile
  5712                           
  5713                           ;softI2c.c: 69: SoftI2cNop();
  5714  01D7  2A7C               	ljmp	l2191
  5715  01D8                     __end_of_SoftI2cRepeatedStart:	
  5716  01D8                     __ptext45:	
  5717 ;; *************** function _Mcp9800Start *****************
  5718 ;; Defined at:
  5719 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  resolution      1    wreg     enum E4252
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  resolution      1    4[BANK0 ] enum E4252
  5724 ;; Return value:  Size  Location     Type
  5725 ;;		None               void
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, pclath, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 1F/2
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5733 ;;      Params:         0       0       0       0
  5734 ;;      Locals:         0       1       0       0
  5735 ;;      Temps:          0       0       0       0
  5736 ;;      Totals:         0       1       0       0
  5737 ;;Total ram usage:        1 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    7
  5740 ;; This function calls:
  5741 ;;		_SoftI2cStart
  5742 ;;		_SoftI2cStop
  5743 ;;		_SoftI2cTxByte
  5744 ;; This function is called by:
  5745 ;;		_main
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _Mcp9800Start
  5751  01D8                     _Mcp9800Start:	
  5752                           
  5753                           ;incstack = 0
  5754                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  5755                           ;Mcp9800Start@resolution stored from wreg
  5756  01D8  0020               	movlb	0	; select bank0
  5757  01D9  00A4               	movwf	Mcp9800Start@resolution
  5758                           
  5759                           ;mcp9800.c: 6: SoftI2cStart();
  5760  01DA  2283  3180         	fcall	_SoftI2cStart
  5761                           
  5762                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  5763  01DC  3090               	movlw	144
  5764  01DD  2215  3180         	fcall	_SoftI2cTxByte
  5765                           
  5766                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  5767  01DF  3001               	movlw	1
  5768  01E0  2215  3180         	fcall	_SoftI2cTxByte
  5769                           
  5770                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  5771  01E2  0020               	movlb	0	; select bank0
  5772  01E3  0824               	movf	Mcp9800Start@resolution,w
  5773  01E4  2215  3180         	fcall	_SoftI2cTxByte
  5774                           
  5775                           ;mcp9800.c: 10: SoftI2cStop();
  5776  01E6  219F  3180         	fcall	_SoftI2cStop
  5777                           
  5778                           ;mcp9800.c: 12: SoftI2cStart();
  5779  01E8  2283  3180         	fcall	_SoftI2cStart
  5780                           
  5781                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  5782  01EA  3090               	movlw	144
  5783  01EB  2215  3180         	fcall	_SoftI2cTxByte
  5784                           
  5785                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  5786  01ED  3000               	movlw	0
  5787  01EE  2215  3180         	fcall	_SoftI2cTxByte
  5788                           
  5789                           ;mcp9800.c: 15: SoftI2cStop();
  5790  01F0  299F               	ljmp	l2293
  5791  01F1                     __end_of_Mcp9800Start:	
  5792  01F1                     __ptext38:	
  5793 ;; *************** function _eepromRxBytes *****************
  5794 ;; Defined at:
  5795 ;;		line 4 in file "../../../src/devices/24aa64.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;  address         2    4[BANK0 ] unsigned int 
  5798 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5799 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  5800 ;;		 -> NULL(0), 
  5801 ;;  size            1    7[BANK0 ] unsigned char 
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;		None
  5804 ;; Return value:  Size  Location     Type
  5805 ;;		None               void
  5806 ;; Registers used:
  5807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 1F/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5813 ;;      Params:         0       4       0       0
  5814 ;;      Locals:         0       0       0       0
  5815 ;;      Temps:          0       0       0       0
  5816 ;;      Totals:         0       4       0       0
  5817 ;;Total ram usage:        4 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    7
  5820 ;; This function calls:
  5821 ;;		_SoftI2cRepeatedStart
  5822 ;;		_SoftI2cRxByte
  5823 ;;		_SoftI2cStart
  5824 ;;		_SoftI2cStop
  5825 ;;		_SoftI2cTxByte
  5826 ;; This function is called by:
  5827 ;;		_handleFwCmd
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           
  5832                           ;psect for function _eepromRxBytes
  5833  01F1                     _eepromRxBytes:	
  5834  01F1                     l2477:	
  5835                           ;incstack = 0
  5836                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5837                           
  5838                           
  5839                           ;24aa64.c: 7: SoftI2cStart();
  5840  01F1  2283  3180         	fcall	_SoftI2cStart
  5841                           
  5842                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  5843  01F3  30A0               	movlw	160
  5844  01F4  2215  3180         	fcall	_SoftI2cTxByte
  5845                           
  5846                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  5847  01F6  0020               	movlb	0	; select bank0
  5848  01F7  0825               	movf	eepromRxBytes@address+1,w
  5849  01F8  2215  3180         	fcall	_SoftI2cTxByte
  5850                           
  5851                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  5852  01FA  0020               	movlb	0	; select bank0
  5853  01FB  0824               	movf	eepromRxBytes@address,w
  5854  01FC  2215  3180         	fcall	_SoftI2cTxByte
  5855                           
  5856                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  5857  01FE  21C3  3180         	fcall	_SoftI2cRepeatedStart
  5858                           
  5859                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  5860  0200  30A1               	movlw	161
  5861  0201  2215  3180         	fcall	_SoftI2cTxByte
  5862  0203                     l2485:	
  5863                           ;24aa64.c: 15: while (size != 0)
  5864                           
  5865  0203  0020               	movlb	0	; select bank0
  5866  0204  08A7               	movf	eepromRxBytes@size,f
  5867  0205  1903               	btfsc	3,2
  5868  0206  2A14               	goto	l2487
  5869                           
  5870                           ;24aa64.c: 16: {
  5871                           ;24aa64.c: 17: size--;
  5872  0207  03A7               	decf	eepromRxBytes@size,f
  5873                           
  5874                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  5875  0208  0826               	movf	eepromRxBytes@data,w
  5876  0209  0086               	movwf	6
  5877  020A  3000               	movlw	0
  5878  020B  0187               	clrf	7
  5879  020C  08A7               	movf	eepromRxBytes@size,f
  5880  020D  1D03               	skipz
  5881  020E  3001               	movlw	1
  5882  020F  2243  3180         	fcall	_SoftI2cRxByte
  5883  0211  0081               	movwf	1
  5884                           
  5885                           ;24aa64.c: 21: data++;
  5886  0212  0AA6               	incf	eepromRxBytes@data,f
  5887  0213  2A03               	goto	l2485
  5888  0214                     l2487:	
  5889                           
  5890                           ;24aa64.c: 22: }
  5891                           ;24aa64.c: 23: SoftI2cStop();
  5892  0214  299F               	ljmp	l2293
  5893  0215                     __end_of_eepromRxBytes:	
  5894  0215                     __ptext47:	
  5895 ;; *************** function _SoftI2cTxByte *****************
  5896 ;; Defined at:
  5897 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  data            1    wreg     unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  data            1    2[BANK0 ] unsigned char 
  5902 ;;  i               1    3[BANK0 ] unsigned char 
  5903 ;;  ack             1    0        unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  1    wreg      unsigned char 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0, pclath, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/1
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5913 ;;      Params:         0       0       0       0
  5914 ;;      Locals:         0       3       0       0
  5915 ;;      Temps:          0       0       0       0
  5916 ;;      Totals:         0       3       0       0
  5917 ;;Total ram usage:        3 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    6
  5920 ;; This function calls:
  5921 ;;		_SoftI2cNop
  5922 ;; This function is called by:
  5923 ;;		_SoftI2cInit
  5924 ;;		_Mcp9800Start
  5925 ;;		_Mcp9800Read
  5926 ;;		_eepromRxBytes
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           
  5931                           ;psect for function _SoftI2cTxByte
  5932  0215                     _SoftI2cTxByte:	
  5933                           
  5934                           ;incstack = 0
  5935                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  5936                           ;SoftI2cTxByte@data stored from wreg
  5937  0215  0020               	movlb	0	; select bank0
  5938  0216  00A2               	movwf	SoftI2cTxByte@data
  5939                           
  5940                           ;softI2c.c: 89: UI08_t i;
  5941                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  5942  0217  3080               	movlw	128
  5943  0218  00A3               	movwf	SoftI2cTxByte@i
  5944  0219                     l32:	
  5945                           
  5946                           ;softI2c.c: 92: {
  5947                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  5948  0219  0022               	movlb	2	; select bank2
  5949  021A  130D               	bcf	13,6	;volatile
  5950                           
  5951                           ;softI2c.c: 94: SoftI2cNop();
  5952  021B  227C  3180         	fcall	_SoftI2cNop
  5953                           
  5954                           ;softI2c.c: 96: if(data & i)
  5955  021D  0020               	movlb	0	; select bank0
  5956  021E  0822               	movf	SoftI2cTxByte@data,w
  5957  021F  0523               	andwf	SoftI2cTxByte@i,w
  5958  0220  1903               	btfsc	3,2
  5959  0221  2A25               	goto	l34
  5960                           
  5961                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  5962  0222  0022               	movlb	2	; select bank2
  5963  0223  160D               	bsf	13,4	;volatile
  5964  0224  2A27               	goto	l35
  5965  0225                     l34:	
  5966                           
  5967                           ;softI2c.c: 98: else
  5968                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  5969  0225  0022               	movlb	2	; select bank2
  5970  0226  120D               	bcf	13,4	;volatile
  5971  0227                     l35:	
  5972                           
  5973                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  5974  0227  0021               	movlb	1	; select bank1
  5975  0228  120D               	bcf	13,4	;volatile
  5976                           
  5977                           ;softI2c.c: 102: SoftI2cNop();
  5978  0229  227C  3180         	fcall	_SoftI2cNop
  5979                           
  5980                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  5981  022B  0022               	movlb	2	; select bank2
  5982  022C  170D               	bsf	13,6	;volatile
  5983                           
  5984                           ;softI2c.c: 105: SoftI2cNop();
  5985  022D  227C  3180         	fcall	_SoftI2cNop
  5986  022F  0020               	movlb	0	; select bank0
  5987  0230  36A3               	lsrf	SoftI2cTxByte@i,f
  5988  0231  08A3               	movf	SoftI2cTxByte@i,f
  5989  0232  1D03               	skipz
  5990  0233  2A19               	goto	l32
  5991                           
  5992                           ;softI2c.c: 109: }
  5993                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  5994  0234  0022               	movlb	2	; select bank2
  5995  0235  130D               	bcf	13,6	;volatile
  5996                           
  5997                           ;softI2c.c: 113: SoftI2cNop();
  5998  0236  227C  3180         	fcall	_SoftI2cNop
  5999                           
  6000                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  6001  0238  0021               	movlb	1	; select bank1
  6002  0239  160D               	bsf	13,4	;volatile
  6003                           
  6004                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  6005  023A  0022               	movlb	2	; select bank2
  6006  023B  170D               	bsf	13,6	;volatile
  6007                           
  6008                           ;softI2c.c: 118: SoftI2cNop();
  6009  023C  227C  3180         	fcall	_SoftI2cNop
  6010  023E  0020               	movlb	0	; select bank0
  6011  023F  080D               	movf	13,w	;volatile
  6012                           
  6013                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  6014  0240  0022               	movlb	2	; select bank2
  6015  0241  130D               	bcf	13,6	;volatile
  6016                           
  6017                           ;softI2c.c: 123: SoftI2cNop();
  6018  0242  2A7C               	ljmp	l2191
  6019  0243                     __end_of_SoftI2cTxByte:	
  6020  0243                     __ptext50:	
  6021 ;; *************** function _SoftI2cRxByte *****************
  6022 ;; Defined at:
  6023 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  ack             1    wreg     unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  ack             1    1[BANK0 ] unsigned char 
  6028 ;;  i               1    3[BANK0 ] unsigned char 
  6029 ;;  data            1    2[BANK0 ] unsigned char 
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      unsigned char 
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, status,0, pclath, cstack
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 1F/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6039 ;;      Params:         0       0       0       0
  6040 ;;      Locals:         0       3       0       0
  6041 ;;      Temps:          0       0       0       0
  6042 ;;      Totals:         0       3       0       0
  6043 ;;Total ram usage:        3 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    6
  6046 ;; This function calls:
  6047 ;;		_SoftI2cNop
  6048 ;; This function is called by:
  6049 ;;		_Mcp9800Read
  6050 ;;		_eepromRxBytes
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _SoftI2cRxByte
  6056  0243                     _SoftI2cRxByte:	
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  6060                           ;SoftI2cRxByte@ack stored from wreg
  6061  0243  0020               	movlb	0	; select bank0
  6062  0244  00A1               	movwf	SoftI2cRxByte@ack
  6063                           
  6064                           ;softI2c.c: 131: UI08_t data=0x00;
  6065  0245  01A2               	clrf	SoftI2cRxByte@data
  6066                           
  6067                           ;softI2c.c: 132: UI08_t i;
  6068                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  6069  0246  0022               	movlb	2	; select bank2
  6070  0247  130D               	bcf	13,6	;volatile
  6071                           
  6072                           ;softI2c.c: 135: SoftI2cNop();
  6073  0248  227C  3180         	fcall	_SoftI2cNop
  6074                           
  6075                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  6076  024A  0021               	movlb	1	; select bank1
  6077  024B  160D               	bsf	13,4	;volatile
  6078                           
  6079                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  6080  024C  0022               	movlb	2	; select bank2
  6081  024D  160D               	bsf	13,4	;volatile
  6082                           
  6083                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  6084  024E  3080               	movlw	128
  6085  024F  0020               	movlb	0	; select bank0
  6086  0250  00A3               	movwf	SoftI2cRxByte@i
  6087  0251                     l39:	
  6088                           
  6089                           ;softI2c.c: 140: {
  6090                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  6091  0251  0022               	movlb	2	; select bank2
  6092  0252  130D               	bcf	13,6	;volatile
  6093                           
  6094                           ;softI2c.c: 142: SoftI2cNop();
  6095  0253  227C  3180         	fcall	_SoftI2cNop
  6096                           
  6097                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  6098  0255  0022               	movlb	2	; select bank2
  6099  0256  170D               	bsf	13,6	;volatile
  6100                           
  6101                           ;softI2c.c: 144: SoftI2cNop();
  6102  0257  227C  3180         	fcall	_SoftI2cNop
  6103                           
  6104                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  6105  0259  0020               	movlb	0	; select bank0
  6106                           
  6107                           ;softI2c.c: 150: data |= i;
  6108  025A  0823               	movf	SoftI2cRxByte@i,w
  6109  025B  1A0D               	btfsc	13,4	;volatile
  6110  025C  04A2               	iorwf	SoftI2cRxByte@data,f
  6111  025D  36A3               	lsrf	SoftI2cRxByte@i,f
  6112  025E  08A3               	movf	SoftI2cRxByte@i,f
  6113  025F  1D03               	skipz
  6114  0260  2A51               	goto	l39
  6115                           
  6116                           ;softI2c.c: 152: }
  6117                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  6118  0261  0022               	movlb	2	; select bank2
  6119  0262  130D               	bcf	13,6	;volatile
  6120                           
  6121                           ;softI2c.c: 155: SoftI2cNop();
  6122  0263  227C  3180         	fcall	_SoftI2cNop
  6123                           
  6124                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  6125  0265  0021               	movlb	1	; select bank1
  6126  0266  120D               	bcf	13,4	;volatile
  6127                           
  6128                           ;softI2c.c: 158: if(ack)
  6129  0267  0020               	movlb	0	; select bank0
  6130  0268  0821               	movf	SoftI2cRxByte@ack,w
  6131  0269  1903               	btfsc	3,2
  6132  026A  2A6E               	goto	l42
  6133                           
  6134                           ;softI2c.c: 159: {
  6135                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  6136  026B  0022               	movlb	2	; select bank2
  6137  026C  120D               	bcf	13,4	;volatile
  6138                           
  6139                           ;softI2c.c: 161: }
  6140  026D  2A70               	goto	l2349
  6141  026E                     l42:	
  6142                           
  6143                           ;softI2c.c: 162: else
  6144                           ;softI2c.c: 163: {
  6145                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  6146  026E  0022               	movlb	2	; select bank2
  6147  026F  160D               	bsf	13,4	;volatile
  6148  0270                     l2349:	
  6149                           
  6150                           ;softI2c.c: 165: }
  6151                           ;softI2c.c: 166: SoftI2cNop();
  6152  0270  227C  3180         	fcall	_SoftI2cNop
  6153                           
  6154                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  6155  0272  0022               	movlb	2	; select bank2
  6156  0273  170D               	bsf	13,6	;volatile
  6157                           
  6158                           ;softI2c.c: 169: SoftI2cNop();
  6159  0274  227C  3180         	fcall	_SoftI2cNop
  6160                           
  6161                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  6162  0276  0022               	movlb	2	; select bank2
  6163  0277  130D               	bcf	13,6	;volatile
  6164                           
  6165                           ;softI2c.c: 172: SoftI2cNop();
  6166  0278  227C               	fcall	_SoftI2cNop
  6167                           
  6168                           ;softI2c.c: 174: return data;
  6169  0279  0020               	movlb	0	; select bank0
  6170  027A  0822               	movf	SoftI2cRxByte@data,w
  6171  027B  0008               	return
  6172  027C                     __end_of_SoftI2cRxByte:	
  6173  027C                     __ptext51:	
  6174 ;; *************** function _SoftI2cNop *****************
  6175 ;; Defined at:
  6176 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;		None
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;		None
  6181 ;; Return value:  Size  Location     Type
  6182 ;;		None               void
  6183 ;; Registers used:
  6184 ;;		wreg
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/2
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6190 ;;      Params:         0       0       0       0
  6191 ;;      Locals:         0       0       0       0
  6192 ;;      Temps:          0       1       0       0
  6193 ;;      Totals:         0       1       0       0
  6194 ;;Total ram usage:        1 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    5
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_SoftI2cStart
  6201 ;;		_SoftI2cRepeatedStart
  6202 ;;		_SoftI2cStop
  6203 ;;		_SoftI2cTxByte
  6204 ;;		_SoftI2cRxByte
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _SoftI2cNop
  6210  027C                     _SoftI2cNop:	
  6211  027C                     l2191:	
  6212                           ;incstack = 0
  6213                           ; Regs used in _SoftI2cNop: [wreg]
  6214                           
  6215                           
  6216                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  6217  027C  300A               	movlw	10
  6218  027D  0020               	movlb	0	; select bank0
  6219  027E  00A0               	movwf	??_SoftI2cNop
  6220  027F                     u2377:	
  6221  027F  0BA0               	decfsz	??_SoftI2cNop,f
  6222  0280  2A7F               	goto	u2377
  6223  0281  0000               	nop
  6224  0282  0008               	return
  6225  0283                     __end_of_SoftI2cNop:	
  6226  0283                     __ptext49:	
  6227 ;; *************** function _SoftI2cStart *****************
  6228 ;; Defined at:
  6229 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;		None
  6234 ;; Return value:  Size  Location     Type
  6235 ;;		None               void
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, status,0, pclath, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/1
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6243 ;;      Params:         0       0       0       0
  6244 ;;      Locals:         0       0       0       0
  6245 ;;      Temps:          0       0       0       0
  6246 ;;      Totals:         0       0       0       0
  6247 ;;Total ram usage:        0 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    6
  6250 ;; This function calls:
  6251 ;;		_SoftI2cNop
  6252 ;; This function is called by:
  6253 ;;		_SoftI2cInit
  6254 ;;		_Mcp9800Start
  6255 ;;		_Mcp9800Read
  6256 ;;		_eepromRxBytes
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _SoftI2cStart
  6262  0283                     _SoftI2cStart:	
  6263                           
  6264                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  6265                           
  6266                           ;incstack = 0
  6267                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  6268  0283  0021               	movlb	1	; select bank1
  6269  0284  120D               	bcf	13,4	;volatile
  6270                           
  6271                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  6272  0285  0022               	movlb	2	; select bank2
  6273  0286  170D               	bsf	13,6	;volatile
  6274                           
  6275                           ;softI2c.c: 43: SoftI2cNop();
  6276  0287  227C  3180         	fcall	_SoftI2cNop
  6277                           
  6278                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  6279  0289  0022               	movlb	2	; select bank2
  6280  028A  120D               	bcf	13,4	;volatile
  6281                           
  6282                           ;softI2c.c: 46: SoftI2cNop();
  6283  028B  227C  3180         	fcall	_SoftI2cNop
  6284                           
  6285                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  6286  028D  0022               	movlb	2	; select bank2
  6287  028E  130D               	bcf	13,6	;volatile
  6288                           
  6289                           ;softI2c.c: 48: SoftI2cNop();
  6290  028F  2A7C               	ljmp	l2191
  6291  0290                     __end_of_SoftI2cStart:	
  6292  0290                     __ptext27:	
  6293 ;; *************** function _Mrf49xaServe *****************
  6294 ;; Defined at:
  6295 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  data            1    5[BANK0 ] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      unsigned char 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 1F/0
  6306 ;;		On exit  : 1E/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6309 ;;      Params:         0       0       0       0
  6310 ;;      Locals:         0       1       0       0
  6311 ;;      Temps:          0       1       0       0
  6312 ;;      Totals:         0       2       0       0
  6313 ;;Total ram usage:        2 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    8
  6316 ;; This function calls:
  6317 ;;		_Mrf49RxByte
  6318 ;;		_Mrf49RxSts
  6319 ;;		_Mrf49TxByte
  6320 ;;		_Mrf49xaModeRx
  6321 ;; This function is called by:
  6322 ;;		_Mrf49xaInit
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           
  6327                           ;psect for function _Mrf49xaServe
  6328  0290                     _Mrf49xaServe:	
  6329                           
  6330                           ;mrf49xa_data.c: 10: uint8_t data;
  6331                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6335  0290  0021               	movlb	1	; select bank1
  6336  0291  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  6337  0292  1903               	btfsc	3,2
  6338                           
  6339                           ;mrf49xa_data.c: 13: return 0;
  6340  0293  3400               	retlw	0
  6341                           
  6342                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  6343  0294  1BED               	btfsc	(_rfTrcvStatus^(0+128)+77),7
  6344  0295  3400               	retlw	0
  6345                           
  6346                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  6347  0296  239F  3180         	fcall	_Mrf49RxSts
  6348                           
  6349                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6350  0298  0832               	movf	_mrf49Status,w
  6351  0299  3AFF               	xorlw	255
  6352  029A  1D03               	skipz
  6353  029B  2AA0               	goto	l437
  6354  029C  0833               	movf	_mrf49Status+1,w
  6355  029D  3AFF               	xorlw	255
  6356  029E  1903               	btfsc	3,2
  6357  029F  3400               	retlw	0
  6358  02A0                     l437:	
  6359                           ;mrf49xa_data.c: 26: {
  6360                           
  6361                           
  6362                           ;mrf49xa_data.c: 28: }
  6363                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  6364  02A0  1AB2               	btfsc	_mrf49Status,5
  6365  02A1  2AAC               	goto	l2573
  6366  02A2  2AB8               	goto	l438
  6367  02A3                     l2569:	
  6368                           
  6369                           ;mrf49xa_data.c: 36: case RECV_DATA:
  6370                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  6371  02A3  236C  3180         	fcall	_Mrf49RxByte
  6372  02A5  00A5               	movwf	Mrf49xaServe@data
  6373                           
  6374                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  6375  02A6  236C  3180         	fcall	_Mrf49RxByte
  6376  02A8  00A5               	movwf	Mrf49xaServe@data
  6377                           
  6378                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  6379  02A9  236F  3180         	fcall	_Mrf49xaModeRx
  6380                           
  6381                           ;mrf49xa_data.c: 47: break;
  6382  02AB  2AB8               	goto	l438
  6383  02AC                     l2573:	
  6384  02AC  0021               	movlb	1	; select bank1
  6385  02AD  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  6386                           
  6387                           ; Switch size 1, requested type "space"
  6388                           ; Number of cases is 3, Range of values is 1 to 3
  6389                           ; switch strategies available:
  6390                           ; Name         Instructions Cycles
  6391                           ; simple_byte           10     6 (average)
  6392                           ; direct_byte           15     9 (fixed)
  6393                           ; jumptable            263     9 (fixed)
  6394                           ;	Chosen strategy is simple_byte
  6395  02AE  3A01               	xorlw	1	; case 1
  6396  02AF  1903               	skipnz
  6397  02B0  2AA3               	goto	l2569
  6398  02B1  3A03               	xorlw	3	; case 2
  6399  02B2  1903               	skipnz
  6400  02B3  2AA3               	goto	l2569
  6401  02B4  3A01               	xorlw	1	; case 3
  6402  02B5  1903               	skipnz
  6403  02B6  2AB8               	goto	l438
  6404  02B7  2AB8               	goto	l438
  6405  02B8                     l438:	
  6406                           
  6407                           ;mrf49xa_data.c: 55: }
  6408                           ;mrf49xa_data.c: 64: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6409  02B8  0020               	movlb	0	; select bank0
  6410  02B9  1BB2               	btfsc	_mrf49Status,7
  6411  02BA  2B56               	goto	l2653
  6412  02BB  2B62               	goto	l2655
  6413  02BC                     l2577:	
  6414                           
  6415                           ;mrf49xa_data.c: 70: data = Mrf49RxByte();
  6416  02BC  236C  3180         	fcall	_Mrf49RxByte
  6417  02BE  00A5               	movwf	Mrf49xaServe@data
  6418                           
  6419                           ;mrf49xa_data.c: 74: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6420  02BF  1BB3               	btfsc	_mrf49Status+1,7
  6421  02C0  2AC4               	goto	l2583
  6422  02C1                     l2581:	
  6423                           
  6424                           ;mrf49xa_data.c: 75: {
  6425                           ;mrf49xa_data.c: 76: Mrf49xaModeRx();
  6426  02C1  236F  3180         	fcall	_Mrf49xaModeRx
  6427                           
  6428                           ;mrf49xa_data.c: 77: break;
  6429  02C3  2B62               	goto	l2655
  6430  02C4                     l2583:	
  6431                           
  6432                           ;mrf49xa_data.c: 78: }
  6433                           ;mrf49xa_data.c: 80: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  6434  02C4  0021               	movlb	1	; select bank1
  6435  02C5  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6436  02C6  1D03               	skipz
  6437  02C7  2ACA               	goto	l2587
  6438  02C8  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  6439  02C9  2ACE               	goto	L1
  6440  02CA                     l2587:	
  6441                           
  6442                           ;mrf49xa_data.c: 81: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  6443  02CA  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  6444  02CB  1D03               	skipz
  6445  02CC  2AC1               	goto	l2581
  6446  02CD  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  6447  02CE                     L1:	
  6448  02CE  00A0               	movwf	_rfTrcvStatus^(0+128)
  6449                           
  6450                           ;mrf49xa_data.c: 88: }
  6451                           ;mrf49xa_data.c: 89: rfTrcvStatus.hwRx->packet.size = data;
  6452  02CF  0A20               	incf	_rfTrcvStatus^(0+128),w
  6453  02D0  0086               	movwf	6
  6454  02D1  0187               	clrf	7
  6455                           
  6456                           ;mrf49xa_data.c: 90: rfTrcvStatus.hwRx->crc = 0;
  6457  02D2  2408  3180         	fcall	PL18	;call to abstracted procedure
  6458  02D4  3E16               	addlw	22
  6459  02D5  0086               	movwf	6
  6460  02D6  0181               	clrf	1
  6461                           
  6462                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  6463  02D7  0820               	movf	_rfTrcvStatus^(0+128),w
  6464  02D8  0086               	movwf	6
  6465  02D9  3004               	movlw	4
  6466  02DA  0081               	movwf	1
  6467                           
  6468                           ;mrf49xa_data.c: 93: rfTrcvStatus.state = RECV_DATA;
  6469  02DB  3002               	movlw	2
  6470  02DC  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  6471                           
  6472                           ;mrf49xa_data.c: 94: rfTrcvStatus.hwByte = 1;
  6473  02DD  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6474  02DE  3980               	andlw	-128
  6475  02DF  3801               	iorlw	1
  6476  02E0  2B0B               	goto	L2
  6477  02E1                     l2603:	
  6478                           ;mrf49xa_data.c: 96: break;
  6479                           
  6480                           
  6481                           ;mrf49xa_data.c: 100: data = Mrf49RxByte();
  6482  02E1  236C  3180         	fcall	_Mrf49RxByte
  6483  02E3  00A5               	movwf	Mrf49xaServe@data
  6484                           
  6485                           ;mrf49xa_data.c: 104: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6486  02E4  1BB3               	btfsc	_mrf49Status+1,7
  6487  02E5  2AEC               	goto	l2611
  6488                           
  6489                           ;mrf49xa_data.c: 105: {
  6490                           ;mrf49xa_data.c: 106: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6491  02E6  0021               	movlb	1	; select bank1
  6492  02E7  0820               	movf	_rfTrcvStatus^(0+128),w
  6493  02E8  0086               	movwf	6
  6494  02E9  3005               	movlw	5
  6495  02EA  0187               	clrf	7
  6496  02EB  2AFC               	goto	L3
  6497  02EC                     l2611:	
  6498                           
  6499                           ;mrf49xa_data.c: 109: }
  6500                           ;mrf49xa_data.c: 111: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  6501  02EC  0021               	movlb	1	; select bank1
  6502  02ED  0A20               	incf	_rfTrcvStatus^(0+128),w
  6503  02EE  0086               	movwf	6
  6504  02EF  0187               	clrf	7
  6505  02F0  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6506  02F1  397F               	andlw	127
  6507  02F2  0601               	xorwf	1,w
  6508  02F3  1D03               	skipz
  6509  02F4  2AFE               	goto	l2617
  6510                           
  6511                           ;mrf49xa_data.c: 112: {
  6512                           ;mrf49xa_data.c: 113: rfTrcvStatus.hwRx->crc = data;
  6513  02F5  0820               	movf	_rfTrcvStatus^(0+128),w
  6514  02F6  3E16               	addlw	22
  6515  02F7  0086               	movwf	6
  6516                           
  6517                           ;mrf49xa_data.c: 117: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6518  02F8  2408  3180         	fcall	PL18	;call to abstracted procedure
  6519  02FA  0086               	movwf	6
  6520  02FB  3005               	movlw	5
  6521  02FC                     L3:	
  6522  02FC  0081               	movwf	1
  6523  02FD  2AC1               	goto	l2581
  6524  02FE                     l2617:	
  6525                           
  6526                           ;mrf49xa_data.c: 126: else
  6527                           ;mrf49xa_data.c: 127: {
  6528                           ;mrf49xa_data.c: 128: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  6529  02FE  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6530  02FF  397F               	andlw	127
  6531  0300  0720               	addwf	_rfTrcvStatus^(0+128),w
  6532  0301  0020               	movlb	0	; select bank0
  6533  0302  00A4               	movwf	??_Mrf49xaServe
  6534  0303  0A24               	incf	??_Mrf49xaServe,w
  6535  0304  0086               	movwf	6
  6536  0305  0187               	clrf	7
  6537  0306  0825               	movf	Mrf49xaServe@data,w
  6538  0307  0081               	movwf	1
  6539  0308  0021               	movlb	1	; select bank1
  6540  0309  23FB  3180         	fcall	PL12	;call to abstracted procedure
  6541  030B                     L2:	
  6542  030B  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6543  030C  2B62               	goto	l2655
  6544  030D                     l2621:	
  6545                           
  6546                           ;mrf49xa_data.c: 134: rfTrcvStatus.hwByte++;
  6547  030D  23FB  3180         	fcall	PL12	;call to abstracted procedure
  6548  030F  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6549                           
  6550                           ;mrf49xa_data.c: 136: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  6551  0310  397F               	andlw	127
  6552  0311  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  6553  0312  1D03               	skipz
  6554  0313  2B44               	goto	l2649
  6555                           
  6556                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwByte = 49;
  6557  0314  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6558  0315  3980               	andlw	-128
  6559  0316  3831               	iorlw	49
  6560  0317  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6561  0318  2B44               	goto	l2649
  6562  0319                     l2625:	
  6563                           
  6564                           ;mrf49xa_data.c: 142: Mrf49TxByte(0x2D);
  6565  0319  302D               	movlw	45
  6566  031A  2367  3180         	fcall	_Mrf49TxByte
  6567                           
  6568                           ;mrf49xa_data.c: 143: break;
  6569  031C  2B62               	goto	l2655
  6570  031D                     l2627:	
  6571                           
  6572                           ;mrf49xa_data.c: 146: Mrf49TxByte(0xD4);
  6573  031D  30D4               	movlw	212
  6574  031E  2367  3180         	fcall	_Mrf49TxByte
  6575                           
  6576                           ;mrf49xa_data.c: 147: rfTrcvStatus.hwByte = 0x7F;
  6577  0320  307F               	movlw	127
  6578  0321  0021               	movlb	1	; select bank1
  6579  0322  04ED               	iorwf	(_rfTrcvStatus^(0+128)+77),f
  6580                           
  6581                           ;mrf49xa_data.c: 148: break;
  6582  0323  2B62               	goto	l2655
  6583  0324                     l2631:	
  6584                           
  6585                           ;mrf49xa_data.c: 152: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  6586  0324  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6587  0325  397F               	andlw	127
  6588  0326  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6589  0327  0086               	movwf	6
  6590  0328  0187               	clrf	7
  6591  0329  0801               	movf	1,w
  6592  032A  2367  3180         	fcall	_Mrf49TxByte
  6593                           
  6594                           ;mrf49xa_data.c: 153: break;
  6595  032C  2B62               	goto	l2655
  6596  032D                     l2633:	
  6597                           
  6598                           ;mrf49xa_data.c: 156: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  6599  032D  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  6600  032E  2367  3180         	fcall	_Mrf49TxByte
  6601                           
  6602                           ;mrf49xa_data.c: 157: break;
  6603  0330  2B62               	goto	l2655
  6604  0331                     l2635:	
  6605                           
  6606                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  6607  0331  3000               	movlw	0
  6608  0332  2367  3180         	fcall	_Mrf49TxByte
  6609                           
  6610                           ;mrf49xa_data.c: 161: break;
  6611  0334  2B62               	goto	l2655
  6612  0335                     l2637:	
  6613                           
  6614                           ;mrf49xa_data.c: 164: Mrf49TxByte(0x00);
  6615  0335  3000               	movlw	0
  6616  0336  2367  3180         	fcall	_Mrf49TxByte
  6617                           
  6618                           ;mrf49xa_data.c: 165: Mrf49xaModeRx();
  6619  0338  236F  3180         	fcall	_Mrf49xaModeRx
  6620                           
  6621                           ;mrf49xa_data.c: 167: rfTrcvStatus.txPacket.retry = 0;
  6622  033A  30F0               	movlw	-16
  6623  033B  0021               	movlb	1	; select bank1
  6624  033C  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6625                           
  6626                           ;mrf49xa_data.c: 169: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  6627  033D  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  6628  033E  2B42               	goto	l2645
  6629                           
  6630                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  6631  033F  3003               	movlw	3
  6632  0340  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  6633  0341  2B62               	goto	l2655
  6634  0342                     l2645:	
  6635                           
  6636                           ;mrf49xa_data.c: 171: else
  6637                           ;mrf49xa_data.c: 172: rfTrcvStatus.txPacket.state = PKT_FREE;
  6638  0342  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  6639  0343  2B62               	goto	l2655
  6640  0344                     l2649:	
  6641  0344  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6642  0345  397F               	andlw	127
  6643                           
  6644                           ; Switch size 1, requested type "space"
  6645                           ; Number of cases is 5, Range of values is 49 to 101
  6646                           ; switch strategies available:
  6647                           ; Name         Instructions Cycles
  6648                           ; simple_byte           16     9 (average)
  6649                           ; direct_byte          115     9 (fixed)
  6650                           ; jumptable            263     9 (fixed)
  6651                           ;	Chosen strategy is simple_byte
  6652  0346  3A31               	xorlw	49	; case 49
  6653  0347  1903               	skipnz
  6654  0348  2B2D               	goto	l2633
  6655  0349  3A03               	xorlw	3	; case 50
  6656  034A  1903               	skipnz
  6657  034B  2B31               	goto	l2635
  6658  034C  3A01               	xorlw	1	; case 51
  6659  034D  1903               	skipnz
  6660  034E  2B35               	goto	l2637
  6661  034F  3A57               	xorlw	87	; case 100
  6662  0350  1903               	skipnz
  6663  0351  2B19               	goto	l2625
  6664  0352  3A01               	xorlw	1	; case 101
  6665  0353  1903               	skipnz
  6666  0354  2B1D               	goto	l2627
  6667  0355  2B24               	goto	l2631
  6668  0356                     l2653:	
  6669  0356  0021               	movlb	1	; select bank1
  6670  0357  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  6671                           
  6672                           ; Switch size 1, requested type "space"
  6673                           ; Number of cases is 3, Range of values is 1 to 3
  6674                           ; switch strategies available:
  6675                           ; Name         Instructions Cycles
  6676                           ; simple_byte           10     6 (average)
  6677                           ; direct_byte           15     9 (fixed)
  6678                           ; jumptable            263     9 (fixed)
  6679                           ;	Chosen strategy is simple_byte
  6680  0358  3A01               	xorlw	1	; case 1
  6681  0359  1903               	skipnz
  6682  035A  2ABC               	goto	l2577
  6683  035B  3A03               	xorlw	3	; case 2
  6684  035C  1903               	skipnz
  6685  035D  2AE1               	goto	l2603
  6686  035E  3A01               	xorlw	1	; case 3
  6687  035F  1903               	skipnz
  6688  0360  2B0D               	goto	l2621
  6689  0361  2B62               	goto	l2655
  6690  0362                     l2655:	
  6691                           
  6692                           ;mrf49xa_data.c: 179: }
  6693                           ;mrf49xa_data.c: 193: return PORTAbits.RA2 == 1 ? 1 : 0;
  6694  0362  0020               	movlb	0	; select bank0
  6695  0363  0C0C               	rrf	12,w	;volatile
  6696  0364  0C89               	rrf	9,f
  6697  0365  3901               	andlw	1
  6698  0366  0008               	return
  6699  0367                     __end_of_Mrf49xaServe:	
  6700  0367                     __ptext29:	
  6701 ;; *************** function _Mrf49TxByte *****************
  6702 ;; Defined at:
  6703 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  byte            1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  byte            1    3[BANK0 ] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;		None               void
  6710 ;; Registers used:
  6711 ;;		wreg, status,2, status,0, pclath, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 1E/1
  6714 ;;		On exit  : 1F/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6717 ;;      Params:         0       0       0       0
  6718 ;;      Locals:         0       1       0       0
  6719 ;;      Temps:          0       0       0       0
  6720 ;;      Totals:         0       1       0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    7
  6724 ;; This function calls:
  6725 ;;		_Mrf49TxCmd
  6726 ;; This function is called by:
  6727 ;;		_Mrf49xaServe
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _Mrf49TxByte
  6733  0367                     _Mrf49TxByte:	
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6737                           ;Mrf49TxByte@byte stored from wreg
  6738  0367  0020               	movlb	0	; select bank0
  6739  0368  00A3               	movwf	Mrf49TxByte@byte
  6740                           
  6741                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6742  0369  00A1               	movwf	Mrf49TxCmd@val
  6743  036A  30B8               	movlw	184
  6744  036B  2B94               	ljmp	_Mrf49TxCmd
  6745  036C                     __end_of_Mrf49TxByte:	
  6746  036C                     __ptext32:	
  6747 ;; *************** function _Mrf49RxByte *****************
  6748 ;; Defined at:
  6749 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      unsigned char 
  6756 ;; Registers used:
  6757 ;;		wreg, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 1E/1
  6760 ;;		On exit  : 1F/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6763 ;;      Params:         0       0       0       0
  6764 ;;      Locals:         0       0       0       0
  6765 ;;      Temps:          0       0       0       0
  6766 ;;      Totals:         0       0       0       0
  6767 ;;Total ram usage:        0 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    7
  6770 ;; This function calls:
  6771 ;;		_Mrf49RxCmd
  6772 ;; This function is called by:
  6773 ;;		_Mrf49xaServe
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _Mrf49RxByte
  6779  036C                     _Mrf49RxByte:	
  6780                           
  6781                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6782                           
  6783                           ;incstack = 0
  6784                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6785  036C  30B0               	movlw	176
  6786  036D  3187  2F53         	ljmp	_Mrf49RxCmd
  6787  036F                     __end_of_Mrf49RxByte:	
  6788  036F                     __ptext28:	
  6789 ;; *************** function _Mrf49xaModeRx *****************
  6790 ;; Defined at:
  6791 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  k               1    3[BANK0 ] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;		None               void
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0, pclath, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : 1E/1
  6802 ;;		On exit  : 1F/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6805 ;;      Params:         0       0       0       0
  6806 ;;      Locals:         0       1       0       0
  6807 ;;      Temps:          0       0       0       0
  6808 ;;      Totals:         0       1       0       0
  6809 ;;Total ram usage:        1 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    7
  6812 ;; This function calls:
  6813 ;;		_Mrf49TxCmd
  6814 ;; This function is called by:
  6815 ;;		_Mrf49xaReboot
  6816 ;;		_Mrf49xaInit
  6817 ;;		_Mrf49xaServe
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           
  6822                           ;psect for function _Mrf49xaModeRx
  6823  036F                     _Mrf49xaModeRx:	
  6824  036F                     l2385:	
  6825                           ;incstack = 0
  6826                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6827                           
  6828                           
  6829                           ;mrf49xa.c: 101: UI08_t k;
  6830                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  6831  036F  0020               	movlb	0	; select bank0
  6832  0370  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6833  0371  01A3               	clrf	Mrf49xaModeRx@k
  6834  0372  3188               	movlp	high __stringtab
  6835  0373  000A               	callw
  6836  0374  3180               	pagesel	$	;select current page
  6837  0375  3800               	iorlw	0
  6838  0376  1903               	btfsc	3,2
  6839  0377  2B8C               	goto	l211
  6840  0378                     l2391:	
  6841  0378  3523               	lslf	Mrf49xaModeRx@k,w
  6842  0379  3E26               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6843  037A  3188               	movlp	high __stringtab
  6844  037B  000A               	callw
  6845  037C  00A1               	movwf	Mrf49TxCmd@val
  6846  037D  3523               	lslf	Mrf49xaModeRx@k,w
  6847  037E  3E25               	addlw	low (_mrfRegset_Rx| (0+32768))
  6848  037F  3188               	movlp	high __stringtab
  6849  0380  000A               	callw
  6850  0381  3180               	pagesel	$	;select current page
  6851  0382  3183  2394         	fcall	_Mrf49TxCmd
  6852  0384  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6853  0385  0AA3               	incf	Mrf49xaModeRx@k,f
  6854  0386  3188               	movlp	high __stringtab
  6855  0387  000A               	callw
  6856  0388  3180               	pagesel	$	;select current page
  6857  0389  0223               	subwf	Mrf49xaModeRx@k,w
  6858  038A  1C03               	skipc
  6859  038B  2B78               	goto	l2391
  6860  038C                     l211:	
  6861                           
  6862                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  6863  038C  0021               	movlb	1	; select bank1
  6864  038D  3080               	movlw	-128
  6865  038E  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  6866  038F  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  6867                           
  6868                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  6869  0390  05ED               	andwf	(_rfTrcvStatus^(0+128)+77),f
  6870                           
  6871                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  6872  0391  0020               	movlb	0	; select bank0
  6873  0392  13B2               	bcf	_mrf49Status,7
  6874  0393  0008               	return
  6875  0394                     __end_of_Mrf49xaModeRx:	
  6876  0394                     __ptext30:	
  6877 ;; *************** function _Mrf49TxCmd *****************
  6878 ;; Defined at:
  6879 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  cmd             1    wreg     unsigned char 
  6882 ;;  val             1    1[BANK0 ] unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  cmd             1    2[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;		None               void
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0, pclath, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 1F/0
  6891 ;;		On exit  : 1F/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6894 ;;      Params:         0       1       0       0
  6895 ;;      Locals:         0       1       0       0
  6896 ;;      Temps:          0       0       0       0
  6897 ;;      Totals:         0       2       0       0
  6898 ;;Total ram usage:        2 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    6
  6901 ;; This function calls:
  6902 ;;		_Mrf49SpiTx
  6903 ;; This function is called by:
  6904 ;;		_Mrf49xaModeRx
  6905 ;;		_Mrf49xaModeTx
  6906 ;;		_Mrf49xaModeSleep
  6907 ;;		_Mrf49xaInit
  6908 ;;		_Mrf49TxByte
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           
  6913                           ;psect for function _Mrf49TxCmd
  6914  0394                     _Mrf49TxCmd:	
  6915                           
  6916                           ;incstack = 0
  6917                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6918                           ;Mrf49TxCmd@cmd stored from wreg
  6919  0394  00A2               	movwf	Mrf49TxCmd@cmd
  6920                           
  6921                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6922  0395  130E               	bcf	14,6	;volatile
  6923                           
  6924                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6925  0396  0822               	movf	Mrf49TxCmd@cmd,w
  6926  0397  3187  275D  3180   	fcall	_Mrf49SpiTx
  6927                           
  6928                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6929  039A  0821               	movf	Mrf49TxCmd@val,w
  6930  039B  3187  275D         	fcall	_Mrf49SpiTx
  6931                           
  6932                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6933  039D  170E               	bsf	14,6	;volatile
  6934  039E  0008               	return
  6935  039F                     __end_of_Mrf49TxCmd:	
  6936  039F                     __ptext31:	
  6937 ;; *************** function _Mrf49RxSts *****************
  6938 ;; Defined at:
  6939 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;		None               void
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, pclath, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 1E/0
  6950 ;;		On exit  : 1F/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6953 ;;      Params:         0       0       0       0
  6954 ;;      Locals:         0       0       0       0
  6955 ;;      Temps:          0       0       0       0
  6956 ;;      Totals:         0       0       0       0
  6957 ;;Total ram usage:        0 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    6
  6960 ;; This function calls:
  6961 ;;		_Mrf49SpiRx
  6962 ;; This function is called by:
  6963 ;;		_Mrf49xaTick
  6964 ;;		_Mrf49xaServe
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _Mrf49RxSts
  6970  039F                     _Mrf49RxSts:	
  6971                           
  6972                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6976  039F  120B               	bcf	11,4	;volatile
  6977                           
  6978                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  6979  03A0  0020               	movlb	0	; select bank0
  6980  03A1  130E               	bcf	14,6	;volatile
  6981                           
  6982                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  6983  03A2  3187  27B8  3180   	fcall	_Mrf49SpiRx
  6984  03A5  00B2               	movwf	_mrf49Status
  6985                           
  6986                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  6987  03A6  3187  27B8         	fcall	_Mrf49SpiRx
  6988  03A8  00B3               	movwf	_mrf49Status+1
  6989                           
  6990                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  6991  03A9  170E               	bsf	14,6	;volatile
  6992                           
  6993                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  6994  03AA  160B               	bsf	11,4	;volatile
  6995  03AB  0008               	return
  6996  03AC                     __end_of_Mrf49RxSts:	
  6997  03AC                     __ptext13:	
  6998 ;; *************** function _PwrI2cSleep *****************
  6999 ;; Defined at:
  7000 ;;		line 73 in file "../../../src/node/power.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;		None               void
  7007 ;; Registers used:
  7008 ;;		None
  7009 ;; Tracked objects:
  7010 ;;		On entry : 1F/2
  7011 ;;		On exit  : 1F/1
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7014 ;;      Params:         0       0       0       0
  7015 ;;      Locals:         0       0       0       0
  7016 ;;      Temps:          0       0       0       0
  7017 ;;      Totals:         0       0       0       0
  7018 ;;Total ram usage:        0 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    5
  7021 ;; This function calls:
  7022 ;;		Nothing
  7023 ;; This function is called by:
  7024 ;;		_main
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           
  7029                           ;psect for function _PwrI2cSleep
  7030  03AC                     _PwrI2cSleep:	
  7031                           
  7032                           ;power.c: 75: LATBbits.LATB6 = 1;
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _PwrI2cSleep: []
  7036                           
  7037                           ;power.c: 76: LATBbits.LATB4 = 1;
  7038                           
  7039                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  7040                           
  7041                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  7042  03AC  240E               	fcall	PL20	;call to abstracted procedure
  7043  03AD  0008               	return
  7044  03AE                     __end_of_PwrI2cSleep:	
  7045  03AE                     __ptext4:	
  7046 ;; *************** function _PwrSensorSleep *****************
  7047 ;; Defined at:
  7048 ;;		line 139 in file "../../../src/node/power.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		None
  7057 ;; Tracked objects:
  7058 ;;		On entry : 1E/1
  7059 ;;		On exit  : 1F/2
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7062 ;;      Params:         0       0       0       0
  7063 ;;      Locals:         0       0       0       0
  7064 ;;      Temps:          0       0       0       0
  7065 ;;      Totals:         0       0       0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    5
  7069 ;; This function calls:
  7070 ;;		Nothing
  7071 ;; This function is called by:
  7072 ;;		_main
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           
  7077                           ;psect for function _PwrSensorSleep
  7078  03AE                     _PwrSensorSleep:	
  7079                           
  7080                           ;power.c: 141: LATCbits.LATC2 = 0;
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _PwrSensorSleep: []
  7084  03AE  0022               	movlb	2	; select bank2
  7085  03AF  110E               	bcf	14,2	;volatile
  7086  03B0  0008               	return
  7087  03B1                     __end_of_PwrSensorSleep:	
  7088  03B1                     __ptext52:	
  7089 ;; *************** function _AdcSample *****************
  7090 ;; Defined at:
  7091 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  ch              1    wreg     unsigned char 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;  ch              1    5[BANK0 ] unsigned char 
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  2    2[BANK0 ] unsigned int 
  7098 ;; Registers used:
  7099 ;;		wreg, status,2, status,0, pclath, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 1F/1
  7102 ;;		On exit  : 1F/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7105 ;;      Params:         0       2       0       0
  7106 ;;      Locals:         0       1       0       0
  7107 ;;      Temps:          0       1       0       0
  7108 ;;      Totals:         0       4       0       0
  7109 ;;Total ram usage:        4 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    6
  7112 ;; This function calls:
  7113 ;;		_AdcChSelect
  7114 ;;		_AdcGetResult
  7115 ;;		_AdcGo
  7116 ;;		_AdcIsBusy
  7117 ;; This function is called by:
  7118 ;;		_main
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           
  7123                           ;psect for function _AdcSample
  7124  03B1                     _AdcSample:	
  7125                           
  7126                           ;incstack = 0
  7127                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  7128                           ;AdcSample@ch stored from wreg
  7129  03B1  0020               	movlb	0	; select bank0
  7130  03B2  00A5               	movwf	AdcSample@ch
  7131                           
  7132                           ;adc16.c: 83: AdcChSelect(ch);
  7133  03B3  0825               	movf	AdcSample@ch,w
  7134  03B4  23DF  3180         	fcall	_AdcChSelect
  7135                           
  7136                           ;adc16.c: 86: AdcGo();
  7137  03B6  23D9  3180         	fcall	_AdcGo
  7138                           
  7139                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7140  03B8  30C7               	movlw	199
  7141  03B9  0020               	movlb	0	; select bank0
  7142  03BA  00A4               	movwf	??_AdcSample
  7143  03BB                     u2387:	
  7144  03BB  0000               	nop
  7145  03BC  0BA4               	decfsz	??_AdcSample,f
  7146  03BD  2BBB               	goto	u2387
  7147  03BE  3200               	nop2	;nop
  7148  03BF  0000               	nop
  7149  03C0                     l2935:	
  7150                           ;adc16.c: 88: while (AdcIsBusy());
  7151                           
  7152  03C0  23DB  3180         	fcall	_AdcIsBusy
  7153  03C2  3800               	iorlw	0
  7154  03C3  1D03               	skipz
  7155  03C4  2BC0               	goto	l2935
  7156                           
  7157                           ;adc16.c: 89: AdcGo();
  7158  03C5  23D9  3180         	fcall	_AdcGo
  7159  03C7                     l2939:	
  7160                           ;adc16.c: 90: while (AdcIsBusy());
  7161                           
  7162  03C7  23DB  3180         	fcall	_AdcIsBusy
  7163  03C9  3800               	iorlw	0
  7164  03CA  1D03               	skipz
  7165  03CB  2BC7               	goto	l2939
  7166                           
  7167                           ;psect for function _AdcGetResult
  7168                           
  7169                           ;adc16.c: 92: return AdcGetResult();
  7170  03CC                     i1L_AdcGetResult:	
  7171  03CC                     i1Ll2745:	
  7172                           
  7173                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  7174  03CC  081C               	movf	28,w	;volatile
  7175  03CD  0020               	movlb	0	; select bank0
  7176  03CE  00A1               	movwf	?_AdcGetResult+1
  7177  03CF  01A0               	clrf	?_AdcGetResult
  7178  03D0  0021               	movlb	1	; select bank1
  7179  03D1  081B               	movf	27,w	;volatile
  7180  03D2  0020               	movlb	0	; select bank0
  7181  03D3  04A0               	iorwf	?_AdcGetResult,f
  7182  03D4                     i1Ll79:	
  7183  03D4  0821               	movf	?_AdcGetResult+1,w
  7184  03D5  00A3               	movwf	?_AdcSample+1
  7185  03D6  0820               	movf	?_AdcGetResult,w
  7186  03D7  00A2               	movwf	?_AdcSample
  7187  03D8  0008               	return
  7188  03D9                     __end_of_AdcSample:	
  7189  03D9                     __ptext54:	
  7190 ;; *************** function _AdcGo *****************
  7191 ;; Defined at:
  7192 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		None
  7201 ;; Tracked objects:
  7202 ;;		On entry : 1F/1
  7203 ;;		On exit  : 1F/1
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7206 ;;      Params:         0       0       0       0
  7207 ;;      Locals:         0       0       0       0
  7208 ;;      Temps:          0       0       0       0
  7209 ;;      Totals:         0       0       0       0
  7210 ;;Total ram usage:        0 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    5
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_AdcSample
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           
  7221                           ;psect for function _AdcGo
  7222  03D9                     _AdcGo:	
  7223                           
  7224                           ;adc16.c: 31: ADCON0 |= 1<<1;
  7225                           
  7226                           ;incstack = 0
  7227                           ; Regs used in _AdcGo: []
  7228  03D9  149D               	bsf	29,1	;volatile
  7229  03DA  0008               	return
  7230  03DB                     __end_of_AdcGo:	
  7231  03DB                     __ptext53:	
  7232 ;; *************** function _AdcIsBusy *****************
  7233 ;; Defined at:
  7234 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;		None
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;		None
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      unsigned char 
  7241 ;; Registers used:
  7242 ;;		wreg, status,2, status,0
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/1
  7245 ;;		On exit  : 1F/1
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7248 ;;      Params:         0       0       0       0
  7249 ;;      Locals:         0       0       0       0
  7250 ;;      Temps:          0       0       0       0
  7251 ;;      Totals:         0       0       0       0
  7252 ;;Total ram usage:        0 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    5
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_AdcSample
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function _AdcIsBusy
  7264  03DB                     _AdcIsBusy:	
  7265                           
  7266                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  7270  03DB  0021               	movlb	1	; select bank1
  7271  03DC  361D               	lsrf	29,w	;volatile
  7272  03DD  3901               	andlw	1
  7273  03DE  0008               	return
  7274  03DF                     __end_of_AdcIsBusy:	
  7275  03DF                     __ptext56:	
  7276 ;; *************** function _AdcChSelect *****************
  7277 ;; Defined at:
  7278 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  channel         1    wreg     enum E4222
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  channel         1    0[BANK0 ] enum E4222
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0
  7287 ;; Tracked objects:
  7288 ;;		On entry : 1F/0
  7289 ;;		On exit  : 1F/1
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7292 ;;      Params:         0       0       0       0
  7293 ;;      Locals:         0       1       0       0
  7294 ;;      Temps:          0       0       0       0
  7295 ;;      Totals:         0       1       0       0
  7296 ;;Total ram usage:        1 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    5
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_AdcSample
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _AdcChSelect
  7308  03DF                     _AdcChSelect:	
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  7312                           ;AdcChSelect@channel stored from wreg
  7313  03DF  00A0               	movwf	AdcChSelect@channel
  7314                           
  7315                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  7316  03E0  0709               	addwf	9,w
  7317  03E1  0709               	addwf	9,w
  7318  03E2  3801               	iorlw	1
  7319  03E3  0021               	movlb	1	; select bank1
  7320  03E4  009D               	movwf	29	;volatile
  7321  03E5  0008               	return
  7322  03E6                     __end_of_AdcChSelect:	
  7323  03E6                     __ptext44:	
  7324 ;; *************** function _Mrf49xaNeedsReset *****************
  7325 ;; Defined at:
  7326 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  2  119[COMMON] int 
  7333 ;; Registers used:
  7334 ;;		None
  7335 ;; Tracked objects:
  7336 ;;		On entry : 1F/1
  7337 ;;		On exit  : 1F/1
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7340 ;;      Params:         0       0       0       0
  7341 ;;      Locals:         0       0       0       0
  7342 ;;      Temps:          0       0       0       0
  7343 ;;      Totals:         0       0       0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    5
  7347 ;; This function calls:
  7348 ;;		Nothing
  7349 ;; This function is called by:
  7350 ;;		_main
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           
  7355                           ;psect for function _Mrf49xaNeedsReset
  7356  03E6                     _Mrf49xaNeedsReset:	
  7357                           
  7358                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _Mrf49xaNeedsReset: []
  7362  03E6  17ED               	bsf	(_rfTrcvStatus^(0+128)+77),7
  7363  03E7  0008               	return
  7364  03E8                     __end_of_Mrf49xaNeedsReset:	
  7365  03E8                     __ptext12:	
  7366 ;; *************** function _PwrI2cWake *****************
  7367 ;; Defined at:
  7368 ;;		line 82 in file "../../../src/node/power.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;		None
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;		None
  7373 ;; Return value:  Size  Location     Type
  7374 ;;		None               void
  7375 ;; Registers used:
  7376 ;;		None
  7377 ;; Tracked objects:
  7378 ;;		On entry : 1F/2
  7379 ;;		On exit  : 1F/2
  7380 ;;		Unchanged: 1F/0
  7381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7382 ;;      Params:         0       0       0       0
  7383 ;;      Locals:         0       0       0       0
  7384 ;;      Temps:          0       0       0       0
  7385 ;;      Totals:         0       0       0       0
  7386 ;;Total ram usage:        0 bytes
  7387 ;; Hardware stack levels used:    1
  7388 ;; Hardware stack levels required when called:    5
  7389 ;; This function calls:
  7390 ;;		Nothing
  7391 ;; This function is called by:
  7392 ;;		_main
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           
  7397                           ;psect for function _PwrI2cWake
  7398  03E8                     _PwrI2cWake:	
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _PwrI2cWake: []
  7402  03E8  0008               	return
  7403  03E9                     __end_of_PwrI2cWake:	
  7404  03E9                     __ptext8:	
  7405 ;; *************** function _PwrRfSleep *****************
  7406 ;; Defined at:
  7407 ;;		line 119 in file "../../../src/node/power.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;		None               void
  7414 ;; Registers used:
  7415 ;;		wreg, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 1E/1
  7418 ;;		On exit  : 1F/1
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7421 ;;      Params:         0       0       0       0
  7422 ;;      Locals:         0       0       0       0
  7423 ;;      Temps:          0       0       0       0
  7424 ;;      Totals:         0       0       0       0
  7425 ;;Total ram usage:        0 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    9
  7428 ;; This function calls:
  7429 ;;		_Mrf49xaShutdown
  7430 ;; This function is called by:
  7431 ;;		_main
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _PwrRfSleep
  7437  03E9                     _PwrRfSleep:	
  7438                           
  7439                           ;power.c: 121: Mrf49xaShutdown();
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  7443  03E9  318F  2790         	fcall	_Mrf49xaShutdown
  7444                           
  7445                           ;power.c: 122: INTCONbits.INTE = 1;
  7446  03EB  160B               	bsf	11,4	;volatile
  7447  03EC  0008               	return
  7448  03ED                     __end_of_PwrRfSleep:	
  7449  03ED                     PL10:	
  7450  03ED  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  7451  03EE  390F               	andlw	15
  7452  03EF  0020               	movlb	0	; select bank0
  7453  03F0  00AB               	movwf	??_Mrf49xaTick
  7454  03F1  0AAB               	incf	??_Mrf49xaTick,f
  7455  03F2  0021               	movlb	1	; select bank1
  7456  03F3  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  7457  03F4  0020               	movlb	0	; select bank0
  7458  03F5  062B               	xorwf	??_Mrf49xaTick,w
  7459  03F6  39F0               	andlw	-16
  7460  03F7  062B               	xorwf	??_Mrf49xaTick,w
  7461  03F8  0021               	movlb	1	; select bank1
  7462  03F9  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  7463  03FA  0008               	return
  7464  03FB                     __end_ofPL10:	
  7465  03FB                     PL12:	
  7466  03FB  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7467  03FC  397F               	andlw	127
  7468  03FD  0020               	movlb	0	; select bank0
  7469  03FE  00A4               	movwf	??_Mrf49xaServe
  7470  03FF  0AA4               	incf	??_Mrf49xaServe,f
  7471  0400  0021               	movlb	1	; select bank1
  7472  0401  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7473  0402  0020               	movlb	0	; select bank0
  7474  0403  0624               	xorwf	??_Mrf49xaServe,w
  7475  0404  3980               	andlw	-128
  7476  0405  0624               	xorwf	??_Mrf49xaServe,w
  7477  0406  0021               	movlb	1	; select bank1
  7478  0407  0008               	return
  7479  0408                     __end_ofPL12:	
  7480  0408                     PL18:	
  7481  0408  0020               	movlb	0	; select bank0
  7482  0409  0825               	movf	Mrf49xaServe@data,w
  7483  040A  0081               	movwf	1
  7484  040B  0021               	movlb	1	; select bank1
  7485  040C  0820               	movf	_rfTrcvStatus^(0+128),w
  7486  040D  0008               	return
  7487  040E                     __end_ofPL18:	
  7488  040E                     PL20:	
  7489  040E  170D               	bsf	13,6	;volatile
  7490  040F  160D               	bsf	13,4	;volatile
  7491  0410  0021               	movlb	1	; select bank1
  7492  0411  130D               	bcf	13,6	;volatile
  7493  0412  120D               	bcf	13,4	;volatile
  7494  0413  0008               	return
  7495  0414                     __end_ofPL20:	
  7496  0414                     PL22:	
  7497  0414  3040               	movlw	64
  7498  0415  0020               	movlb	0	; select bank0
  7499  0416  00A0               	movwf	Sleepy@ms
  7500  0417  01A1               	clrf	Sleepy@ms+1
  7501  0418  0008               	return
  7502  0419                     __end_ofPL22:	
  7503  0419                     __ptext23:	
  7504 ;; *************** function _Mrf49xaPacketPending *****************
  7505 ;; Defined at:
  7506 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;		None
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;		None
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  1    wreg      unsigned char 
  7513 ;; Registers used:
  7514 ;;		wreg
  7515 ;; Tracked objects:
  7516 ;;		On entry : 1F/1
  7517 ;;		On exit  : 1F/1
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7520 ;;      Params:         0       0       0       0
  7521 ;;      Locals:         0       0       0       0
  7522 ;;      Temps:          0       0       0       0
  7523 ;;      Totals:         0       0       0       0
  7524 ;;Total ram usage:        0 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    5
  7527 ;; This function calls:
  7528 ;;		Nothing
  7529 ;; This function is called by:
  7530 ;;		_Mrf49xaTick
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _Mrf49xaPacketPending
  7536  0419                     _Mrf49xaPacketPending:	
  7537                           
  7538                           ;mrf49xa_packet.c: 8: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  7539                           ;mrf49xa_packet.c: 9: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  7543  0419  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  7544  041A  3A05               	xorlw	5
  7545  041B  1903               	skipnz
  7546  041C  3401               	retlw	1
  7547  041D  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  7548  041E  3A05               	xorlw	5
  7549  041F  1903               	btfsc	3,2
  7550                           
  7551                           ;mrf49xa_packet.c: 10: return 1;
  7552  0420  3401               	retlw	1
  7553                           
  7554                           ;mrf49xa_packet.c: 11: else
  7555                           ;mrf49xa_packet.c: 12: return 0;
  7556  0421  3400               	retlw	0
  7557  0422                     __end_of_Mrf49xaPacketPending:	
  7558  0422                     __ptext20:	
  7559 ;; *************** function _PwrAdcInit *****************
  7560 ;; Defined at:
  7561 ;;		line 150 in file "../../../src/node/power.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;		None               void
  7568 ;; Registers used:
  7569 ;;		status,2
  7570 ;; Tracked objects:
  7571 ;;		On entry : 17F/1
  7572 ;;		On exit  : 17F/1
  7573 ;;		Unchanged: 160/0
  7574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7575 ;;      Params:         0       0       0       0
  7576 ;;      Locals:         0       0       0       0
  7577 ;;      Temps:          0       0       0       0
  7578 ;;      Totals:         0       0       0       0
  7579 ;;Total ram usage:        0 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    5
  7582 ;; This function calls:
  7583 ;;		Nothing
  7584 ;; This function is called by:
  7585 ;;		_main
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           
  7590                           ;psect for function _PwrAdcInit
  7591  0422                     _PwrAdcInit:	
  7592                           
  7593                           ;power.c: 152: ANSELA = 0;
  7594                           
  7595                           ;incstack = 0
  7596                           ; Regs used in _PwrAdcInit: [status,2]
  7597  0422  0023               	movlb	3	; select bank3
  7598  0423  018C               	clrf	12	;volatile
  7599                           
  7600                           ;power.c: 153: ANSELB = 0;
  7601  0424  018D               	clrf	13	;volatile
  7602                           
  7603                           ;power.c: 154: ANSELC = 0;
  7604  0425  018E               	clrf	14	;volatile
  7605                           
  7606                           ;power.c: 156: PORTCbits.RC0 = 1;
  7607  0426  0020               	movlb	0	; select bank0
  7608  0427  140E               	bsf	14,0	;volatile
  7609                           
  7610                           ;power.c: 157: TRISCbits.TRISC0 = 0;
  7611  0428  0021               	movlb	1	; select bank1
  7612  0429  100E               	bcf	14,0	;volatile
  7613  042A  0008               	return
  7614  042B                     __end_of_PwrAdcInit:	
  7615  042B                     __ptext3:	
  7616 ;; *************** function _PwrSensorWake *****************
  7617 ;; Defined at:
  7618 ;;		line 144 in file "../../../src/node/power.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;		None
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;		None
  7623 ;; Return value:  Size  Location     Type
  7624 ;;		None               void
  7625 ;; Registers used:
  7626 ;;		None
  7627 ;; Tracked objects:
  7628 ;;		On entry : 1F/0
  7629 ;;		On exit  : 1F/2
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7632 ;;      Params:         0       0       0       0
  7633 ;;      Locals:         0       0       0       0
  7634 ;;      Temps:          0       0       0       0
  7635 ;;      Totals:         0       0       0       0
  7636 ;;Total ram usage:        0 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    5
  7639 ;; This function calls:
  7640 ;;		Nothing
  7641 ;; This function is called by:
  7642 ;;		_main
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _PwrSensorWake
  7648  042B                     _PwrSensorWake:	
  7649                           
  7650                           ;power.c: 146: LATCbits.LATC2 = 1;
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in _PwrSensorWake: []
  7654  042B  0022               	movlb	2	; select bank2
  7655  042C  150E               	bsf	14,2	;volatile
  7656  042D  0008               	return
  7657  042E                     __end_of_PwrSensorWake:	
  7658                           
  7659                           	psect	text16
  7660  0F7F                     __ptext16:	
  7661 ;; *************** function _PwrAdcWake *****************
  7662 ;; Defined at:
  7663 ;;		line 169 in file "../../../src/node/power.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;		None               void
  7670 ;; Registers used:
  7671 ;;		wreg, status,2, status,0, pclath, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/2
  7674 ;;		On exit  : 1F/1
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7677 ;;      Params:         0       0       0       0
  7678 ;;      Locals:         0       0       0       0
  7679 ;;      Temps:          0       0       0       0
  7680 ;;      Totals:         0       0       0       0
  7681 ;;Total ram usage:        0 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    6
  7684 ;; This function calls:
  7685 ;;		_AdcInit
  7686 ;; This function is called by:
  7687 ;;		_main
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _PwrAdcWake
  7693  0F7F                     _PwrAdcWake:	
  7694                           
  7695                           ;power.c: 171: ANSELC = (1<<0);
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7699  0F7F  3001               	movlw	1
  7700  0F80  0023               	movlb	3	; select bank3
  7701  0F81  008E               	movwf	14	;volatile
  7702                           
  7703                           ;power.c: 172: TRISCbits.TRISC0 = 1;
  7704  0F82  0021               	movlb	1	; select bank1
  7705  0F83  140E               	bsf	14,0	;volatile
  7706                           
  7707                           ;power.c: 174: AdcInit();
  7708  0F84  2F85               	ljmp	l2735
  7709  0F85                     __end_of_PwrAdcWake:	
  7710  0F85                     __ptext17:	
  7711 ;; *************** function _AdcInit *****************
  7712 ;; Defined at:
  7713 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;		None               void
  7720 ;; Registers used:
  7721 ;;		wreg, status,2
  7722 ;; Tracked objects:
  7723 ;;		On entry : 1F/1
  7724 ;;		On exit  : 1F/1
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7727 ;;      Params:         0       0       0       0
  7728 ;;      Locals:         0       0       0       0
  7729 ;;      Temps:          0       0       0       0
  7730 ;;      Totals:         0       0       0       0
  7731 ;;Total ram usage:        0 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    5
  7734 ;; This function calls:
  7735 ;;		Nothing
  7736 ;; This function is called by:
  7737 ;;		_PwrAdcWake
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function _AdcInit
  7743  0F85                     _AdcInit:	
  7744  0F85                     l2735:	
  7745                           ;incstack = 0
  7746                           ; Regs used in _AdcInit: [wreg+status,2]
  7747                           
  7748                           
  7749                           ;adc16.c: 6: FVRCON = 0b11100001;
  7750  0F85  30E1               	movlw	225
  7751  0F86  0022               	movlb	2	; select bank2
  7752  0F87  0097               	movwf	23	;volatile
  7753                           
  7754                           ;adc16.c: 8: ADCON2 = 0b00000000;
  7755  0F88  0021               	movlb	1	; select bank1
  7756  0F89  019F               	clrf	31	;volatile
  7757                           
  7758                           ;adc16.c: 9: ADCON1 = 0b11110000;
  7759  0F8A  30F0               	movlw	240
  7760  0F8B  009E               	movwf	30	;volatile
  7761                           
  7762                           ;adc16.c: 10: ADCON0 = 0b00000000;
  7763  0F8C  019D               	clrf	29	;volatile
  7764                           
  7765                           ;adc16.c: 12: ADCON0 = 0b00010011;
  7766  0F8D  3013               	movlw	19
  7767  0F8E  009D               	movwf	29	;volatile
  7768  0F8F  0008               	return
  7769  0F90                     __end_of_AdcInit:	
  7770                           
  7771                           	psect	text18
  7772  0F71                     __ptext18:	
  7773 ;; *************** function _PwrAdcSleep *****************
  7774 ;; Defined at:
  7775 ;;		line 160 in file "../../../src/node/power.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;		None
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;		None
  7780 ;; Return value:  Size  Location     Type
  7781 ;;		None               void
  7782 ;; Registers used:
  7783 ;;		status,2, status,0, pclath, cstack
  7784 ;; Tracked objects:
  7785 ;;		On entry : 1F/1
  7786 ;;		On exit  : 1F/1
  7787 ;;		Unchanged: 0/0
  7788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7789 ;;      Params:         0       0       0       0
  7790 ;;      Locals:         0       0       0       0
  7791 ;;      Temps:          0       0       0       0
  7792 ;;      Totals:         0       0       0       0
  7793 ;;Total ram usage:        0 bytes
  7794 ;; Hardware stack levels used:    1
  7795 ;; Hardware stack levels required when called:    6
  7796 ;; This function calls:
  7797 ;;		_AdcDeinit
  7798 ;; This function is called by:
  7799 ;;		_main
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           
  7804                           ;psect for function _PwrAdcSleep
  7805  0F71                     _PwrAdcSleep:	
  7806                           
  7807                           ;power.c: 162: ANSELC = 0;
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7811  0F71  0023               	movlb	3	; select bank3
  7812  0F72  018E               	clrf	14	;volatile
  7813                           
  7814                           ;power.c: 163: PORTCbits.RC0 = 1;
  7815  0F73  0020               	movlb	0	; select bank0
  7816  0F74  140E               	bsf	14,0	;volatile
  7817                           
  7818                           ;power.c: 164: TRISCbits.TRISC0 = 0;
  7819  0F75  0021               	movlb	1	; select bank1
  7820  0F76  100E               	bcf	14,0	;volatile
  7821                           
  7822                           ;power.c: 166: AdcDeinit();
  7823  0F77  2F78               	ljmp	l2743
  7824  0F78                     __end_of_PwrAdcSleep:	
  7825  0F78                     __ptext19:	
  7826 ;; *************** function _AdcDeinit *****************
  7827 ;; Defined at:
  7828 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;		None
  7833 ;; Return value:  Size  Location     Type
  7834 ;;		None               void
  7835 ;; Registers used:
  7836 ;;		status,2
  7837 ;; Tracked objects:
  7838 ;;		On entry : 1F/1
  7839 ;;		On exit  : 1F/1
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7842 ;;      Params:         0       0       0       0
  7843 ;;      Locals:         0       0       0       0
  7844 ;;      Temps:          0       0       0       0
  7845 ;;      Totals:         0       0       0       0
  7846 ;;Total ram usage:        0 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    5
  7849 ;; This function calls:
  7850 ;;		Nothing
  7851 ;; This function is called by:
  7852 ;;		_PwrAdcSleep
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _AdcDeinit
  7858  0F78                     _AdcDeinit:	
  7859  0F78                     l2743:	
  7860                           ;incstack = 0
  7861                           ; Regs used in _AdcDeinit: [status,2]
  7862                           
  7863                           
  7864                           ;adc16.c: 17: FVRCON = 0;
  7865  0F78  0022               	movlb	2	; select bank2
  7866  0F79  0197               	clrf	23	;volatile
  7867                           
  7868                           ;adc16.c: 19: ADCON2 = 0;
  7869  0F7A  0021               	movlb	1	; select bank1
  7870  0F7B  019F               	clrf	31	;volatile
  7871                           
  7872                           ;adc16.c: 20: ADCON1 = 0;
  7873  0F7C  019E               	clrf	30	;volatile
  7874                           
  7875                           ;adc16.c: 21: ADCON0 = 0;
  7876  0F7D  019D               	clrf	29	;volatile
  7877  0F7E  0008               	return
  7878  0F7F                     __end_of_AdcDeinit:	
  7879                           
  7880                           	psect	text22
  7881  0F63                     __ptext22:	
  7882 ;; *************** function _Mrf49xaRxPacket *****************
  7883 ;; Defined at:
  7884 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;		None
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7891 ;; Registers used:
  7892 ;;		wreg
  7893 ;; Tracked objects:
  7894 ;;		On entry : 1F/1
  7895 ;;		On exit  : 1F/1
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7898 ;;      Params:         0       0       0       0
  7899 ;;      Locals:         0       0       0       0
  7900 ;;      Temps:          0       0       0       0
  7901 ;;      Totals:         0       0       0       0
  7902 ;;Total ram usage:        0 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    5
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_Mrf49xaTick
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           
  7913                           ;psect for function _Mrf49xaRxPacket
  7914  0F63                     _Mrf49xaRxPacket:	
  7915                           
  7916                           ;mrf49xa_packet.c: 92: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  7920  0F63  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  7921  0F64  3A05               	xorlw	5
  7922  0F65  1D03               	skipz
  7923  0F66  2F6A               	goto	l2849
  7924                           
  7925                           ;mrf49xa_packet.c: 93: {
  7926                           ;mrf49xa_packet.c: 94: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  7927  0F67  3006               	movlw	6
  7928  0F68  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  7929                           
  7930                           ;mrf49xa_packet.c: 95: return &(rfTrcvStatus.rxPacket[0]);
  7931  0F69  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  7932  0F6A                     l2849:	
  7933                           
  7934                           ;mrf49xa_packet.c: 96: }
  7935                           ;mrf49xa_packet.c: 98: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  7936  0F6A  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  7937  0F6B  3A05               	xorlw	5
  7938  0F6C  1D03               	skipz
  7939  0F6D  3400               	retlw	0
  7940                           
  7941                           ;mrf49xa_packet.c: 99: {
  7942                           ;mrf49xa_packet.c: 100: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  7943  0F6E  3006               	movlw	6
  7944  0F6F  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  7945                           
  7946                           ;mrf49xa_packet.c: 101: return &(rfTrcvStatus.rxPacket[1]);
  7947  0F70  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  7948  0F71                     __end_of_Mrf49xaRxPacket:	
  7949                           ;mrf49xa_packet.c: 102: }
  7950                           ;mrf49xa_packet.c: 104: return (0);
  7951                           
  7952                           
  7953                           	psect	text24
  7954  0FB3                     __ptext24:	
  7955 ;; *************** function _Mrf49xaModeTx *****************
  7956 ;; Defined at:
  7957 ;;		line 111 in file "../../../src/devices/mrf49xa.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  k               1    3[BANK0 ] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;		None               void
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, pclath, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 1F/0
  7968 ;;		On exit  : 1F/1
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7971 ;;      Params:         0       0       0       0
  7972 ;;      Locals:         0       1       0       0
  7973 ;;      Temps:          0       0       0       0
  7974 ;;      Totals:         0       1       0       0
  7975 ;;Total ram usage:        1 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    7
  7978 ;; This function calls:
  7979 ;;		_Mrf49TxCmd
  7980 ;; This function is called by:
  7981 ;;		_Mrf49xaTick
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _Mrf49xaModeTx
  7987  0FB3                     _Mrf49xaModeTx:	
  7988  0FB3  3004               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  7989                           
  7990                           ;mrf49xa.c: 113: UI08_t k;
  7991                           ;mrf49xa.c: 114: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  7995  0FB4  01A3               	clrf	Mrf49xaModeTx@k
  7996  0FB5  3188               	movlp	high __stringtab
  7997  0FB6  000A               	callw
  7998  0FB7  318F               	pagesel	$	;select current page
  7999  0FB8  3800               	iorlw	0
  8000  0FB9  1903               	btfsc	3,2
  8001  0FBA  2FCF               	goto	l2771
  8002  0FBB                     l2765:	
  8003  0FBB  3523               	lslf	Mrf49xaModeTx@k,w
  8004  0FBC  3E32               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  8005  0FBD  3188               	movlp	high __stringtab
  8006  0FBE  000A               	callw
  8007  0FBF  00A1               	movwf	Mrf49TxCmd@val
  8008  0FC0  3523               	lslf	Mrf49xaModeTx@k,w
  8009  0FC1  3E31               	addlw	low (_mrfRegset_Tx| (0+32768))
  8010  0FC2  3188               	movlp	high __stringtab
  8011  0FC3  000A               	callw
  8012  0FC4  3183  2394  318F   	fcall	_Mrf49TxCmd
  8013  0FC7  3004               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8014  0FC8  0AA3               	incf	Mrf49xaModeTx@k,f
  8015  0FC9  3188               	movlp	high __stringtab
  8016  0FCA  000A               	callw
  8017  0FCB  318F               	pagesel	$	;select current page
  8018  0FCC  0223               	subwf	Mrf49xaModeTx@k,w
  8019  0FCD  1C03               	skipc
  8020  0FCE  2FBB               	goto	l2765
  8021  0FCF                     l2771:	
  8022                           
  8023                           ;mrf49xa.c: 117: rfTrcvStatus.state = TX_PACKET;
  8024  0FCF  3003               	movlw	3
  8025  0FD0  0021               	movlb	1	; select bank1
  8026  0FD1  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  8027                           
  8028                           ;mrf49xa.c: 118: rfTrcvStatus.hwByte = 99;
  8029  0FD2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8030  0FD3  3980               	andlw	-128
  8031  0FD4  3863               	iorlw	99
  8032  0FD5  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  8033  0FD6  0008               	return
  8034  0FD7                     __end_of_Mrf49xaModeTx:	
  8035                           
  8036                           	psect	text33
  8037  0753                     __ptext33:	
  8038 ;; *************** function _Mrf49RxCmd *****************
  8039 ;; Defined at:
  8040 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  cmd             1    wreg     unsigned char 
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;  cmd             1    1[BANK0 ] unsigned char 
  8045 ;;  val             1    2[BANK0 ] unsigned char 
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      unsigned char 
  8048 ;; Registers used:
  8049 ;;		wreg, status,2, status,0, pclath, cstack
  8050 ;; Tracked objects:
  8051 ;;		On entry : 1E/1
  8052 ;;		On exit  : 1F/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8055 ;;      Params:         0       0       0       0
  8056 ;;      Locals:         0       2       0       0
  8057 ;;      Temps:          0       0       0       0
  8058 ;;      Totals:         0       2       0       0
  8059 ;;Total ram usage:        2 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    6
  8062 ;; This function calls:
  8063 ;;		_Mrf49SpiRx
  8064 ;;		_Mrf49SpiTx
  8065 ;; This function is called by:
  8066 ;;		_Mrf49RxByte
  8067 ;; This function uses a non-reentrant model
  8068 ;;
  8069                           
  8070                           
  8071                           ;psect for function _Mrf49RxCmd
  8072  0753                     _Mrf49RxCmd:	
  8073                           
  8074                           ;incstack = 0
  8075                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8076                           ;Mrf49RxCmd@cmd stored from wreg
  8077  0753  0020               	movlb	0	; select bank0
  8078  0754  00A1               	movwf	Mrf49RxCmd@cmd
  8079                           
  8080                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8081  0755  130E               	bcf	14,6	;volatile
  8082                           
  8083                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8084  0756  0821               	movf	Mrf49RxCmd@cmd,w
  8085  0757  275D  3187         	fcall	_Mrf49SpiTx
  8086                           
  8087                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8088  0759  27B8               	fcall	_Mrf49SpiRx
  8089  075A  00A2               	movwf	Mrf49RxCmd@val
  8090                           
  8091                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8092  075B  170E               	bsf	14,6	;volatile
  8093                           
  8094                           ;mrf49xa_cmd.c: 27: return val;
  8095  075C  0008               	return
  8096  075D                     __end_of_Mrf49RxCmd:	
  8097  075D                     __ptext34:	
  8098 ;; *************** function _Mrf49SpiTx *****************
  8099 ;; Defined at:
  8100 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  byte            1    wreg     unsigned char 
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  byte            1    0[BANK0 ] unsigned char 
  8105 ;; Return value:  Size  Location     Type
  8106 ;;		None               void
  8107 ;; Registers used:
  8108 ;;		wreg
  8109 ;; Tracked objects:
  8110 ;;		On entry : 1F/0
  8111 ;;		On exit  : 1F/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8114 ;;      Params:         0       0       0       0
  8115 ;;      Locals:         0       1       0       0
  8116 ;;      Temps:          0       0       0       0
  8117 ;;      Totals:         0       1       0       0
  8118 ;;Total ram usage:        1 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    5
  8121 ;; This function calls:
  8122 ;;		Nothing
  8123 ;; This function is called by:
  8124 ;;		_Mrf49TxCmd
  8125 ;;		_Mrf49RxCmd
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129                           
  8130                           ;psect for function _Mrf49SpiTx
  8131  075D                     _Mrf49SpiTx:	
  8132                           
  8133                           ;incstack = 0
  8134                           ; Regs used in _Mrf49SpiTx: [wreg]
  8135                           ;Mrf49SpiTx@byte stored from wreg
  8136  075D  00A0               	movwf	Mrf49SpiTx@byte
  8137                           
  8138                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  8139  075E  1FA0               	btfss	Mrf49SpiTx@byte,7
  8140  075F  2F62               	goto	l255
  8141  0760  178D               	bsf	13,7	;volatile
  8142  0761  2F63               	goto	l256
  8143  0762                     l255:	
  8144  0762  138D               	bcf	13,7	;volatile
  8145  0763                     l256:	
  8146  0763  0022               	movlb	2	; select bank2
  8147  0764  178E               	bsf	14,7	;volatile
  8148  0765  0000               	nop	;# 
  8149  0766  0022               	movlb	2	; select bank2
  8150  0767  138E               	bcf	14,7	;volatile
  8151  0768  0020               	movlb	0	; select bank0
  8152  0769  1F20               	btfss	Mrf49SpiTx@byte,6
  8153  076A  2F6D               	goto	l259
  8154  076B  178D               	bsf	13,7	;volatile
  8155  076C  2F6E               	goto	l260
  8156  076D                     l259:	
  8157  076D  138D               	bcf	13,7	;volatile
  8158  076E                     l260:	
  8159  076E  0022               	movlb	2	; select bank2
  8160  076F  178E               	bsf	14,7	;volatile
  8161  0770  0000               	nop	;# 
  8162  0771  0022               	movlb	2	; select bank2
  8163  0772  138E               	bcf	14,7	;volatile
  8164  0773  0020               	movlb	0	; select bank0
  8165  0774  1EA0               	btfss	Mrf49SpiTx@byte,5
  8166  0775  2F78               	goto	l263
  8167  0776  178D               	bsf	13,7	;volatile
  8168  0777  2F79               	goto	l264
  8169  0778                     l263:	
  8170  0778  138D               	bcf	13,7	;volatile
  8171  0779                     l264:	
  8172  0779  0022               	movlb	2	; select bank2
  8173  077A  178E               	bsf	14,7	;volatile
  8174  077B  0000               	nop	;# 
  8175  077C  0022               	movlb	2	; select bank2
  8176  077D  138E               	bcf	14,7	;volatile
  8177  077E  0020               	movlb	0	; select bank0
  8178  077F  1E20               	btfss	Mrf49SpiTx@byte,4
  8179  0780  2F83               	goto	l267
  8180  0781  178D               	bsf	13,7	;volatile
  8181  0782  2F84               	goto	l268
  8182  0783                     l267:	
  8183  0783  138D               	bcf	13,7	;volatile
  8184  0784                     l268:	
  8185  0784  0022               	movlb	2	; select bank2
  8186  0785  178E               	bsf	14,7	;volatile
  8187  0786  0000               	nop	;# 
  8188  0787  0022               	movlb	2	; select bank2
  8189  0788  138E               	bcf	14,7	;volatile
  8190  0789  0020               	movlb	0	; select bank0
  8191  078A  1DA0               	btfss	Mrf49SpiTx@byte,3
  8192  078B  2F8E               	goto	l271
  8193  078C  178D               	bsf	13,7	;volatile
  8194  078D  2F8F               	goto	l272
  8195  078E                     l271:	
  8196  078E  138D               	bcf	13,7	;volatile
  8197  078F                     l272:	
  8198  078F  0022               	movlb	2	; select bank2
  8199  0790  178E               	bsf	14,7	;volatile
  8200  0791  0000               	nop	;# 
  8201  0792  0022               	movlb	2	; select bank2
  8202  0793  138E               	bcf	14,7	;volatile
  8203  0794  0020               	movlb	0	; select bank0
  8204  0795  1D20               	btfss	Mrf49SpiTx@byte,2
  8205  0796  2F99               	goto	l275
  8206  0797  178D               	bsf	13,7	;volatile
  8207  0798  2F9A               	goto	l276
  8208  0799                     l275:	
  8209  0799  138D               	bcf	13,7	;volatile
  8210  079A                     l276:	
  8211  079A  0022               	movlb	2	; select bank2
  8212  079B  178E               	bsf	14,7	;volatile
  8213  079C  0000               	nop	;# 
  8214  079D  0022               	movlb	2	; select bank2
  8215  079E  138E               	bcf	14,7	;volatile
  8216  079F  0020               	movlb	0	; select bank0
  8217  07A0  1CA0               	btfss	Mrf49SpiTx@byte,1
  8218  07A1  2FA4               	goto	l279
  8219  07A2  178D               	bsf	13,7	;volatile
  8220  07A3  2FA5               	goto	l280
  8221  07A4                     l279:	
  8222  07A4  138D               	bcf	13,7	;volatile
  8223  07A5                     l280:	
  8224  07A5  0022               	movlb	2	; select bank2
  8225  07A6  178E               	bsf	14,7	;volatile
  8226  07A7  0000               	nop	;# 
  8227  07A8  0022               	movlb	2	; select bank2
  8228  07A9  138E               	bcf	14,7	;volatile
  8229  07AA  0020               	movlb	0	; select bank0
  8230  07AB  1C20               	btfss	Mrf49SpiTx@byte,0
  8231  07AC  2FAF               	goto	l283
  8232  07AD  178D               	bsf	13,7	;volatile
  8233  07AE  2FB0               	goto	l284
  8234  07AF                     l283:	
  8235  07AF  138D               	bcf	13,7	;volatile
  8236  07B0                     l284:	
  8237  07B0  0022               	movlb	2	; select bank2
  8238  07B1  178E               	bsf	14,7	;volatile
  8239  07B2  0000               	nop	;# 
  8240  07B3  0022               	movlb	2	; select bank2
  8241  07B4  138E               	bcf	14,7	;volatile
  8242                           
  8243                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  8244  07B5  0020               	movlb	0	; select bank0
  8245  07B6  138D               	bcf	13,7	;volatile
  8246  07B7  0008               	return
  8247  07B8                     __end_of_Mrf49SpiTx:	
  8248  07B8                     __ptext35:	
  8249 ;; *************** function _Mrf49SpiRx *****************
  8250 ;; Defined at:
  8251 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;		None
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  data            1    0[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      unsigned char 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2
  8260 ;; Tracked objects:
  8261 ;;		On entry : 1F/0
  8262 ;;		On exit  : 1F/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8265 ;;      Params:         0       0       0       0
  8266 ;;      Locals:         0       1       0       0
  8267 ;;      Temps:          0       0       0       0
  8268 ;;      Totals:         0       1       0       0
  8269 ;;Total ram usage:        1 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    5
  8272 ;; This function calls:
  8273 ;;		Nothing
  8274 ;; This function is called by:
  8275 ;;		_Mrf49RxCmd
  8276 ;;		_Mrf49RxSts
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _Mrf49SpiRx
  8282  07B8                     _Mrf49SpiRx:	
  8283                           
  8284                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  8288  07B8  01A0               	clrf	Mrf49SpiRx@data
  8289                           
  8290                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  8291  07B9  138D               	bcf	13,7	;volatile
  8292  07BA  1A8E               	btfsc	14,5	;volatile
  8293  07BB  17A0               	bsf	Mrf49SpiRx@data,7
  8294  07BC  0022               	movlb	2	; select bank2
  8295  07BD  178E               	bsf	14,7	;volatile
  8296  07BE  0000               	nop	;# 
  8297  07BF  0022               	movlb	2	; select bank2
  8298  07C0  138E               	bcf	14,7	;volatile
  8299                           
  8300                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8301  07C1  0020               	movlb	0	; select bank0
  8302  07C2  1A8E               	btfsc	14,5	;volatile
  8303  07C3  1720               	bsf	Mrf49SpiRx@data,6
  8304  07C4  0022               	movlb	2	; select bank2
  8305  07C5  178E               	bsf	14,7	;volatile
  8306  07C6  0000               	nop	;# 
  8307  07C7  0022               	movlb	2	; select bank2
  8308  07C8  138E               	bcf	14,7	;volatile
  8309                           
  8310                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8311  07C9  0020               	movlb	0	; select bank0
  8312  07CA  1A8E               	btfsc	14,5	;volatile
  8313  07CB  16A0               	bsf	Mrf49SpiRx@data,5
  8314  07CC  0022               	movlb	2	; select bank2
  8315  07CD  178E               	bsf	14,7	;volatile
  8316  07CE  0000               	nop	;# 
  8317  07CF  0022               	movlb	2	; select bank2
  8318  07D0  138E               	bcf	14,7	;volatile
  8319                           
  8320                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8321  07D1  0020               	movlb	0	; select bank0
  8322  07D2  1A8E               	btfsc	14,5	;volatile
  8323  07D3  1620               	bsf	Mrf49SpiRx@data,4
  8324  07D4  0022               	movlb	2	; select bank2
  8325  07D5  178E               	bsf	14,7	;volatile
  8326  07D6  0000               	nop	;# 
  8327  07D7  0022               	movlb	2	; select bank2
  8328  07D8  138E               	bcf	14,7	;volatile
  8329                           
  8330                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8331  07D9  0020               	movlb	0	; select bank0
  8332  07DA  1A8E               	btfsc	14,5	;volatile
  8333  07DB  15A0               	bsf	Mrf49SpiRx@data,3
  8334  07DC  0022               	movlb	2	; select bank2
  8335  07DD  178E               	bsf	14,7	;volatile
  8336  07DE  0000               	nop	;# 
  8337  07DF  0022               	movlb	2	; select bank2
  8338  07E0  138E               	bcf	14,7	;volatile
  8339                           
  8340                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8341  07E1  0020               	movlb	0	; select bank0
  8342  07E2  1A8E               	btfsc	14,5	;volatile
  8343  07E3  1520               	bsf	Mrf49SpiRx@data,2
  8344  07E4  0022               	movlb	2	; select bank2
  8345  07E5  178E               	bsf	14,7	;volatile
  8346  07E6  0000               	nop	;# 
  8347  07E7  0022               	movlb	2	; select bank2
  8348  07E8  138E               	bcf	14,7	;volatile
  8349                           
  8350                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8351  07E9  0020               	movlb	0	; select bank0
  8352  07EA  1A8E               	btfsc	14,5	;volatile
  8353  07EB  14A0               	bsf	Mrf49SpiRx@data,1
  8354  07EC  0022               	movlb	2	; select bank2
  8355  07ED  178E               	bsf	14,7	;volatile
  8356  07EE  0000               	nop	;# 
  8357  07EF  0022               	movlb	2	; select bank2
  8358  07F0  138E               	bcf	14,7	;volatile
  8359                           
  8360                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8361  07F1  0020               	movlb	0	; select bank0
  8362  07F2  1A8E               	btfsc	14,5	;volatile
  8363  07F3  1420               	bsf	Mrf49SpiRx@data,0
  8364  07F4  0022               	movlb	2	; select bank2
  8365  07F5  178E               	bsf	14,7	;volatile
  8366  07F6  0000               	nop	;# 
  8367  07F7  0022               	movlb	2	; select bank2
  8368  07F8  138E               	bcf	14,7	;volatile
  8369                           
  8370                           ;mrf49xa_spi_pic16.c: 40: return data;
  8371  07F9  0020               	movlb	0	; select bank0
  8372  07FA  0820               	movf	Mrf49SpiRx@data,w
  8373  07FB  0008               	return
  8374  07FC                     __end_of_Mrf49SpiRx:	
  8375                           
  8376                           	psect	text55
  8377  0000                     __ptext55:	
  8378 ;; *************** function _AdcGetResult *****************
  8379 ;; Defined at:
  8380 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;		None
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;		None
  8385 ;; Return value:  Size  Location     Type
  8386 ;;                  2    0[BANK0 ] unsigned int 
  8387 ;; Registers used:
  8388 ;;		wreg
  8389 ;; Tracked objects:
  8390 ;;		On entry : 1F/1
  8391 ;;		On exit  : 1F/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8394 ;;      Params:         0       2       0       0
  8395 ;;      Locals:         0       0       0       0
  8396 ;;      Temps:          0       0       0       0
  8397 ;;      Totals:         0       2       0       0
  8398 ;;Total ram usage:        2 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    5
  8401 ;; This function calls:
  8402 ;;		Nothing
  8403 ;; This function is called by:
  8404 ;;		_AdcSample
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408  0000                     _AdcGetResult:	
  8409                           ;psect for function _AdcGetResult
  8410                           
  8411  0000                     __end_of_AdcGetResult:	
  8412                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _AdcGetResult: [wreg]
  8416                           
  8417                           
  8418                           	psect	intentry
  8419  0004                     __pintentry:	
  8420 ;; *************** function _extInt *****************
  8421 ;; Defined at:
  8422 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  ofw             1    7[COMMON] unsigned char 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;		None               void
  8429 ;; Registers used:
  8430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 1F/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8436 ;;      Params:         0       0       0       0
  8437 ;;      Locals:         1       0       0       0
  8438 ;;      Temps:          1       0       0       0
  8439 ;;      Totals:         2       0       0       0
  8440 ;;Total ram usage:        2 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    4
  8443 ;; This function calls:
  8444 ;;		_ExtIntDeinit
  8445 ;;		i1_Mrf49xaNeedsReset
  8446 ;;		i1_Mrf49xaServe
  8447 ;; This function is called by:
  8448 ;;		Interrupt level 1
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452  0004                     _extInt:	
  8453                           
  8454                           ;incstack = 0
  8455                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8456  0004  3180               	pagesel	$
  8457  0005  0020               	movlb	0	; select bank0
  8458  0006  087F               	movf	127,w
  8459  0007  00F6               	movwf	??_extInt
  8460                           
  8461                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  8462  0008  1C8B               	btfss	11,1	;volatile
  8463  0009  281C               	goto	i1l142
  8464                           
  8465                           ;interrupt.c: 39: {
  8466                           ;interrupt.c: 40: uint8_t ofw = 0;
  8467  000A  01F7               	clrf	extInt@ofw
  8468  000B                     i1l3245:	
  8469                           ;interrupt.c: 41: while (!Mrf49xaServe())
  8470                           
  8471  000B  3184  243A  3180   	fcall	i1_Mrf49xaServe
  8472  000E  3A00               	xorlw	0
  8473  000F  1D03               	btfss	3,2
  8474  0010  281B               	goto	i1l141
  8475                           
  8476                           ;interrupt.c: 42: {
  8477                           ;interrupt.c: 43: ofw++;
  8478  0011  0AF7               	incf	extInt@ofw,f
  8479                           
  8480                           ;interrupt.c: 44: if (ofw == 255)
  8481  0012  0877               	movf	extInt@ofw,w
  8482  0013  3AFF               	xorlw	255
  8483  0014  1D03               	skipz
  8484  0015  280B               	goto	i1l3245
  8485                           
  8486                           ;interrupt.c: 45: {
  8487                           ;interrupt.c: 46: ExtIntDeinit();
  8488  0016  3180  2002  3180   	fcall	_ExtIntDeinit
  8489                           
  8490                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  8491  0019  318F  274C         	fcall	i1_Mrf49xaNeedsReset
  8492  001B                     i1l141:	
  8493                           ;interrupt.c: 48: break;
  8494                           
  8495                           
  8496                           ;interrupt.c: 49: }
  8497                           ;interrupt.c: 50: }
  8498                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  8499  001B  108B               	bcf	11,1	;volatile
  8500  001C                     i1l142:	
  8501  001C  0876               	movf	??_extInt,w
  8502  001D  0020               	movlb	0	; select bank0
  8503  001E  00FF               	movwf	127
  8504  001F  0009               	retfie
  8505  0020                     __end_of_extInt:	
  8506                           
  8507                           	psect	text64
  8508  042E                     __ptext64:	
  8509 ;; *************** function i1_Mrf49RxCmd *****************
  8510 ;; Defined at:
  8511 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;  cmd             1    wreg     unsigned char 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  cmd             1    1[COMMON] unsigned char 
  8516 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  1    wreg      unsigned char 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0, pclath, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 1E/1
  8523 ;;		On exit  : 1F/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8526 ;;      Params:         0       0       0       0
  8527 ;;      Locals:         2       0       0       0
  8528 ;;      Temps:          0       0       0       0
  8529 ;;      Totals:         2       0       0       0
  8530 ;;Total ram usage:        2 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    1
  8533 ;; This function calls:
  8534 ;;		i1_Mrf49SpiRx
  8535 ;;		i1_Mrf49SpiTx
  8536 ;; This function is called by:
  8537 ;;		i1_Mrf49RxByte
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function i1_Mrf49RxCmd
  8543  042E                     i1_Mrf49RxCmd:	
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8547                           ;i1Mrf49RxCmd@cmd stored from wreg
  8548  042E  00F1               	movwf	i1Mrf49RxCmd@cmd
  8549                           
  8550                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8551  042F  0020               	movlb	0	; select bank0
  8552  0430  130E               	bcf	14,6	;volatile
  8553                           
  8554                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8555  0431  0871               	movf	i1Mrf49RxCmd@cmd,w
  8556  0432  2547  3184         	fcall	i1_Mrf49SpiTx
  8557                           
  8558                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8559  0434  25B6               	fcall	i1_Mrf49SpiRx
  8560  0435  00F2               	movwf	i1Mrf49RxCmd@val
  8561                           
  8562                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8563  0436  0020               	movlb	0	; select bank0
  8564  0437  170E               	bsf	14,6	;volatile
  8565                           
  8566                           ;mrf49xa_cmd.c: 27: return val;
  8567  0438  0872               	movf	i1Mrf49RxCmd@val,w
  8568  0439  0008               	return
  8569  043A                     __end_ofi1_Mrf49RxCmd:	
  8570  043A                     __ptext58:	
  8571 ;; *************** function i1_Mrf49xaServe *****************
  8572 ;; Defined at:
  8573 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;		None
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      unsigned char 
  8580 ;; Registers used:
  8581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 1E/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8587 ;;      Params:         0       0       0       0
  8588 ;;      Locals:         1       0       0       0
  8589 ;;      Temps:          1       0       0       0
  8590 ;;      Totals:         2       0       0       0
  8591 ;;Total ram usage:        2 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    3
  8594 ;; This function calls:
  8595 ;;		i1_Mrf49RxByte
  8596 ;;		i1_Mrf49RxSts
  8597 ;;		i1_Mrf49TxByte
  8598 ;;		i1_Mrf49xaModeRx
  8599 ;; This function is called by:
  8600 ;;		_extInt
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           
  8605                           ;psect for function i1_Mrf49xaServe
  8606  043A                     i1_Mrf49xaServe:	
  8607                           
  8608                           ;mrf49xa_data.c: 10: uint8_t data;
  8609                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8613  043A  0021               	movlb	1	; select bank1
  8614  043B  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  8615  043C  1903               	btfsc	3,2
  8616                           
  8617                           ;mrf49xa_data.c: 13: return 0;
  8618  043D  3400               	retlw	0
  8619                           
  8620                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  8621  043E  1BED               	btfsc	(_rfTrcvStatus^(0+128)+77),7
  8622  043F  3400               	retlw	0
  8623                           
  8624                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  8625  0440  25A9  3184         	fcall	i1_Mrf49RxSts
  8626                           
  8627                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  8628  0442  0832               	movf	_mrf49Status,w
  8629  0443  3AFF               	xorlw	255
  8630  0444  1D03               	skipz
  8631  0445  2C4A               	goto	i1l437
  8632  0446  0833               	movf	_mrf49Status+1,w
  8633  0447  3AFF               	xorlw	255
  8634  0448  1903               	btfsc	3,2
  8635  0449  3400               	retlw	0
  8636  044A                     i1l437:	
  8637                           ;mrf49xa_data.c: 26: {
  8638                           
  8639                           
  8640                           ;mrf49xa_data.c: 28: }
  8641                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  8642  044A  1AB2               	btfsc	_mrf49Status,5
  8643  044B  2C56               	goto	i1l3149
  8644  044C  2C62               	goto	i1l438
  8645  044D                     i1l3145:	
  8646                           
  8647                           ;mrf49xa_data.c: 36: case RECV_DATA:
  8648                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  8649  044D  2516  3184         	fcall	i1_Mrf49RxByte
  8650  044F  00F5               	movwf	i1Mrf49xaServe@data
  8651                           
  8652                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  8653  0450  2516  3184         	fcall	i1_Mrf49RxByte
  8654  0452  00F5               	movwf	i1Mrf49xaServe@data
  8655                           
  8656                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  8657  0453  2519  3184         	fcall	i1_Mrf49xaModeRx
  8658                           
  8659                           ;mrf49xa_data.c: 47: break;
  8660  0455  2C62               	goto	i1l438
  8661  0456                     i1l3149:	
  8662  0456  0021               	movlb	1	; select bank1
  8663  0457  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  8664                           
  8665                           ; Switch size 1, requested type "space"
  8666                           ; Number of cases is 3, Range of values is 1 to 3
  8667                           ; switch strategies available:
  8668                           ; Name         Instructions Cycles
  8669                           ; simple_byte           10     6 (average)
  8670                           ; direct_byte           15     9 (fixed)
  8671                           ; jumptable            263     9 (fixed)
  8672                           ;	Chosen strategy is simple_byte
  8673  0458  3A01               	xorlw	1	; case 1
  8674  0459  1903               	skipnz
  8675  045A  2C4D               	goto	i1l3145
  8676  045B  3A03               	xorlw	3	; case 2
  8677  045C  1903               	skipnz
  8678  045D  2C4D               	goto	i1l3145
  8679  045E  3A01               	xorlw	1	; case 3
  8680  045F  1903               	skipnz
  8681  0460  2C62               	goto	i1l438
  8682  0461  2C62               	goto	i1l438
  8683  0462                     i1l438:	
  8684                           
  8685                           ;mrf49xa_data.c: 55: }
  8686                           ;mrf49xa_data.c: 64: if (mrf49Status.flags.msb.fifoTxRx == 1)
  8687  0462  0020               	movlb	0	; select bank0
  8688  0463  1BB2               	btfsc	_mrf49Status,7
  8689  0464  2D00               	goto	i1l3229
  8690  0465  2D0C               	goto	i1l3231
  8691  0466                     i1l3153:	
  8692                           
  8693                           ;mrf49xa_data.c: 70: data = Mrf49RxByte();
  8694  0466  2516  3184         	fcall	i1_Mrf49RxByte
  8695  0468  00F5               	movwf	i1Mrf49xaServe@data
  8696                           
  8697                           ;mrf49xa_data.c: 74: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  8698  0469  1BB3               	btfsc	_mrf49Status+1,7
  8699  046A  2C6E               	goto	i1l3159
  8700  046B                     i1l3157:	
  8701                           
  8702                           ;mrf49xa_data.c: 75: {
  8703                           ;mrf49xa_data.c: 76: Mrf49xaModeRx();
  8704  046B  2519  3184         	fcall	i1_Mrf49xaModeRx
  8705                           
  8706                           ;mrf49xa_data.c: 77: break;
  8707  046D  2D0C               	goto	i1l3231
  8708  046E                     i1l3159:	
  8709                           
  8710                           ;mrf49xa_data.c: 78: }
  8711                           ;mrf49xa_data.c: 80: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  8712  046E  0021               	movlb	1	; select bank1
  8713  046F  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  8714  0470  1D03               	skipz
  8715  0471  2C74               	goto	i1l3163
  8716  0472  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  8717  0473  2C78               	goto	L4
  8718  0474                     i1l3163:	
  8719                           
  8720                           ;mrf49xa_data.c: 81: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  8721  0474  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  8722  0475  1D03               	skipz
  8723  0476  2C6B               	goto	i1l3157
  8724  0477  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  8725  0478                     L4:	
  8726  0478  00A0               	movwf	_rfTrcvStatus^(0+128)
  8727                           
  8728                           ;mrf49xa_data.c: 88: }
  8729                           ;mrf49xa_data.c: 89: rfTrcvStatus.hwRx->packet.size = data;
  8730  0479  0A20               	incf	_rfTrcvStatus^(0+128),w
  8731  047A  0086               	movwf	6
  8732  047B  0187               	clrf	7
  8733  047C  0875               	movf	i1Mrf49xaServe@data,w
  8734  047D  0081               	movwf	1
  8735                           
  8736                           ;mrf49xa_data.c: 90: rfTrcvStatus.hwRx->crc = 0;
  8737  047E  0820               	movf	_rfTrcvStatus^(0+128),w
  8738  047F  3E16               	addlw	22
  8739  0480  0086               	movwf	6
  8740  0481  0181               	clrf	1
  8741                           
  8742                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  8743  0482  0820               	movf	_rfTrcvStatus^(0+128),w
  8744  0483  0086               	movwf	6
  8745  0484  3004               	movlw	4
  8746  0485  0081               	movwf	1
  8747                           
  8748                           ;mrf49xa_data.c: 93: rfTrcvStatus.state = RECV_DATA;
  8749  0486  3002               	movlw	2
  8750  0487  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  8751                           
  8752                           ;mrf49xa_data.c: 94: rfTrcvStatus.hwByte = 1;
  8753  0488  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8754  0489  3980               	andlw	-128
  8755  048A  3801               	iorlw	1
  8756  048B  2CB5               	goto	L5
  8757  048C                     i1l3179:	
  8758                           ;mrf49xa_data.c: 96: break;
  8759                           
  8760                           
  8761                           ;mrf49xa_data.c: 100: data = Mrf49RxByte();
  8762  048C  2516  3184         	fcall	i1_Mrf49RxByte
  8763  048E  00F5               	movwf	i1Mrf49xaServe@data
  8764                           
  8765                           ;mrf49xa_data.c: 104: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  8766  048F  1BB3               	btfsc	_mrf49Status+1,7
  8767  0490  2C97               	goto	i1l3187
  8768                           
  8769                           ;mrf49xa_data.c: 105: {
  8770                           ;mrf49xa_data.c: 106: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  8771  0491  0021               	movlb	1	; select bank1
  8772  0492  0820               	movf	_rfTrcvStatus^(0+128),w
  8773  0493  0086               	movwf	6
  8774  0494  3005               	movlw	5
  8775  0495  0187               	clrf	7
  8776  0496  2CA8               	goto	L6
  8777  0497                     i1l3187:	
  8778                           
  8779                           ;mrf49xa_data.c: 109: }
  8780                           ;mrf49xa_data.c: 111: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  8781  0497  0021               	movlb	1	; select bank1
  8782  0498  0A20               	incf	_rfTrcvStatus^(0+128),w
  8783  0499  0086               	movwf	6
  8784  049A  0187               	clrf	7
  8785  049B  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8786  049C  397F               	andlw	127
  8787  049D  0601               	xorwf	1,w
  8788  049E  1D03               	skipz
  8789  049F  2CAA               	goto	i1l3193
  8790                           
  8791                           ;mrf49xa_data.c: 112: {
  8792                           ;mrf49xa_data.c: 113: rfTrcvStatus.hwRx->crc = data;
  8793  04A0  0820               	movf	_rfTrcvStatus^(0+128),w
  8794  04A1  3E16               	addlw	22
  8795  04A2  0086               	movwf	6
  8796  04A3  0875               	movf	i1Mrf49xaServe@data,w
  8797  04A4  0081               	movwf	1
  8798                           
  8799                           ;mrf49xa_data.c: 117: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  8800  04A5  0820               	movf	_rfTrcvStatus^(0+128),w
  8801  04A6  0086               	movwf	6
  8802  04A7  3005               	movlw	5
  8803  04A8                     L6:	
  8804  04A8  0081               	movwf	1
  8805  04A9  2C6B               	goto	i1l3157
  8806  04AA                     i1l3193:	
  8807                           
  8808                           ;mrf49xa_data.c: 126: else
  8809                           ;mrf49xa_data.c: 127: {
  8810                           ;mrf49xa_data.c: 128: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  8811  04AA  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8812  04AB  397F               	andlw	127
  8813  04AC  0720               	addwf	_rfTrcvStatus^(0+128),w
  8814  04AD  00F4               	movwf	??i1_Mrf49xaServe
  8815  04AE  0A74               	incf	??i1_Mrf49xaServe,w
  8816  04AF  0086               	movwf	6
  8817  04B0  0187               	clrf	7
  8818  04B1  0875               	movf	i1Mrf49xaServe@data,w
  8819  04B2  0081               	movwf	1
  8820  04B3  25F9  3184         	fcall	PL16	;call to abstracted procedure
  8821  04B5                     L5:	
  8822  04B5  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  8823  04B6  2D0C               	goto	i1l3231
  8824  04B7                     i1l3197:	
  8825                           
  8826                           ;mrf49xa_data.c: 134: rfTrcvStatus.hwByte++;
  8827  04B7  25F9  3184         	fcall	PL16	;call to abstracted procedure
  8828  04B9  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  8829                           
  8830                           ;mrf49xa_data.c: 136: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  8831  04BA  397F               	andlw	127
  8832  04BB  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  8833  04BC  1D03               	skipz
  8834  04BD  2CEE               	goto	i1l3225
  8835                           
  8836                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwByte = 49;
  8837  04BE  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8838  04BF  3980               	andlw	-128
  8839  04C0  3831               	iorlw	49
  8840  04C1  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  8841  04C2  2CEE               	goto	i1l3225
  8842  04C3                     i1l3201:	
  8843                           
  8844                           ;mrf49xa_data.c: 142: Mrf49TxByte(0x2D);
  8845  04C3  302D               	movlw	45
  8846  04C4  2511  3184         	fcall	i1_Mrf49TxByte
  8847                           
  8848                           ;mrf49xa_data.c: 143: break;
  8849  04C6  2D0C               	goto	i1l3231
  8850  04C7                     i1l3203:	
  8851                           
  8852                           ;mrf49xa_data.c: 146: Mrf49TxByte(0xD4);
  8853  04C7  30D4               	movlw	212
  8854  04C8  2511  3184         	fcall	i1_Mrf49TxByte
  8855                           
  8856                           ;mrf49xa_data.c: 147: rfTrcvStatus.hwByte = 0x7F;
  8857  04CA  307F               	movlw	127
  8858  04CB  0021               	movlb	1	; select bank1
  8859  04CC  04ED               	iorwf	(_rfTrcvStatus^(0+128)+77),f
  8860                           
  8861                           ;mrf49xa_data.c: 148: break;
  8862  04CD  2D0C               	goto	i1l3231
  8863  04CE                     i1l3207:	
  8864                           
  8865                           ;mrf49xa_data.c: 152: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  8866  04CE  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8867  04CF  397F               	andlw	127
  8868  04D0  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  8869  04D1  0086               	movwf	6
  8870  04D2  0187               	clrf	7
  8871  04D3  0801               	movf	1,w
  8872  04D4  2511  3184         	fcall	i1_Mrf49TxByte
  8873                           
  8874                           ;mrf49xa_data.c: 153: break;
  8875  04D6  2D0C               	goto	i1l3231
  8876  04D7                     i1l3209:	
  8877                           
  8878                           ;mrf49xa_data.c: 156: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  8879  04D7  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  8880  04D8  2511  3184         	fcall	i1_Mrf49TxByte
  8881                           
  8882                           ;mrf49xa_data.c: 157: break;
  8883  04DA  2D0C               	goto	i1l3231
  8884  04DB                     i1l3211:	
  8885                           
  8886                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  8887  04DB  3000               	movlw	0
  8888  04DC  2511  3184         	fcall	i1_Mrf49TxByte
  8889                           
  8890                           ;mrf49xa_data.c: 161: break;
  8891  04DE  2D0C               	goto	i1l3231
  8892  04DF                     i1l3213:	
  8893                           
  8894                           ;mrf49xa_data.c: 164: Mrf49TxByte(0x00);
  8895  04DF  3000               	movlw	0
  8896  04E0  2511  3184         	fcall	i1_Mrf49TxByte
  8897                           
  8898                           ;mrf49xa_data.c: 165: Mrf49xaModeRx();
  8899  04E2  2519  3184         	fcall	i1_Mrf49xaModeRx
  8900                           
  8901                           ;mrf49xa_data.c: 167: rfTrcvStatus.txPacket.retry = 0;
  8902  04E4  30F0               	movlw	-16
  8903  04E5  0021               	movlb	1	; select bank1
  8904  04E6  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  8905                           
  8906                           ;mrf49xa_data.c: 169: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  8907  04E7  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  8908  04E8  2CEC               	goto	i1l3221
  8909                           
  8910                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  8911  04E9  3003               	movlw	3
  8912  04EA  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  8913  04EB  2D0C               	goto	i1l3231
  8914  04EC                     i1l3221:	
  8915                           
  8916                           ;mrf49xa_data.c: 171: else
  8917                           ;mrf49xa_data.c: 172: rfTrcvStatus.txPacket.state = PKT_FREE;
  8918  04EC  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  8919  04ED  2D0C               	goto	i1l3231
  8920  04EE                     i1l3225:	
  8921  04EE  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  8922  04EF  397F               	andlw	127
  8923                           
  8924                           ; Switch size 1, requested type "space"
  8925                           ; Number of cases is 5, Range of values is 49 to 101
  8926                           ; switch strategies available:
  8927                           ; Name         Instructions Cycles
  8928                           ; simple_byte           16     9 (average)
  8929                           ; direct_byte          115     9 (fixed)
  8930                           ; jumptable            263     9 (fixed)
  8931                           ;	Chosen strategy is simple_byte
  8932  04F0  3A31               	xorlw	49	; case 49
  8933  04F1  1903               	skipnz
  8934  04F2  2CD7               	goto	i1l3209
  8935  04F3  3A03               	xorlw	3	; case 50
  8936  04F4  1903               	skipnz
  8937  04F5  2CDB               	goto	i1l3211
  8938  04F6  3A01               	xorlw	1	; case 51
  8939  04F7  1903               	skipnz
  8940  04F8  2CDF               	goto	i1l3213
  8941  04F9  3A57               	xorlw	87	; case 100
  8942  04FA  1903               	skipnz
  8943  04FB  2CC3               	goto	i1l3201
  8944  04FC  3A01               	xorlw	1	; case 101
  8945  04FD  1903               	skipnz
  8946  04FE  2CC7               	goto	i1l3203
  8947  04FF  2CCE               	goto	i1l3207
  8948  0500                     i1l3229:	
  8949  0500  0021               	movlb	1	; select bank1
  8950  0501  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  8951                           
  8952                           ; Switch size 1, requested type "space"
  8953                           ; Number of cases is 3, Range of values is 1 to 3
  8954                           ; switch strategies available:
  8955                           ; Name         Instructions Cycles
  8956                           ; simple_byte           10     6 (average)
  8957                           ; direct_byte           15     9 (fixed)
  8958                           ; jumptable            263     9 (fixed)
  8959                           ;	Chosen strategy is simple_byte
  8960  0502  3A01               	xorlw	1	; case 1
  8961  0503  1903               	skipnz
  8962  0504  2C66               	goto	i1l3153
  8963  0505  3A03               	xorlw	3	; case 2
  8964  0506  1903               	skipnz
  8965  0507  2C8C               	goto	i1l3179
  8966  0508  3A01               	xorlw	1	; case 3
  8967  0509  1903               	skipnz
  8968  050A  2CB7               	goto	i1l3197
  8969  050B  2D0C               	goto	i1l3231
  8970  050C                     i1l3231:	
  8971                           
  8972                           ;mrf49xa_data.c: 179: }
  8973                           ;mrf49xa_data.c: 193: return PORTAbits.RA2 == 1 ? 1 : 0;
  8974  050C  0020               	movlb	0	; select bank0
  8975  050D  0C0C               	rrf	12,w	;volatile
  8976  050E  0C89               	rrf	9,f
  8977  050F  3901               	andlw	1
  8978  0510  0008               	return
  8979  0511                     __end_ofi1_Mrf49xaServe:	
  8980  0511                     __ptext60:	
  8981 ;; *************** function i1_Mrf49TxByte *****************
  8982 ;; Defined at:
  8983 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  8984 ;; Parameters:    Size  Location     Type
  8985 ;;  byte            1    wreg     unsigned char 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  byte            1    3[COMMON] unsigned char 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;		None               void
  8990 ;; Registers used:
  8991 ;;		wreg, status,2, status,0, pclath, cstack
  8992 ;; Tracked objects:
  8993 ;;		On entry : 1E/1
  8994 ;;		On exit  : 1F/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8997 ;;      Params:         0       0       0       0
  8998 ;;      Locals:         1       0       0       0
  8999 ;;      Temps:          0       0       0       0
  9000 ;;      Totals:         1       0       0       0
  9001 ;;Total ram usage:        1 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    2
  9004 ;; This function calls:
  9005 ;;		i1_Mrf49TxCmd
  9006 ;; This function is called by:
  9007 ;;		i1_Mrf49xaServe
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           
  9012                           ;psect for function i1_Mrf49TxByte
  9013  0511                     i1_Mrf49TxByte:	
  9014                           
  9015                           ;incstack = 0
  9016                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  9017                           ;i1Mrf49TxByte@byte stored from wreg
  9018  0511  00F3               	movwf	i1Mrf49TxByte@byte
  9019                           
  9020                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  9021  0512  00F1               	movwf	i1Mrf49TxCmd@val
  9022  0513  30B8               	movlw	184
  9023  0514  253D               	fcall	i1_Mrf49TxCmd
  9024  0515  0008               	return
  9025  0516                     __end_ofi1_Mrf49TxByte:	
  9026  0516                     __ptext63:	
  9027 ;; *************** function i1_Mrf49RxByte *****************
  9028 ;; Defined at:
  9029 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  9030 ;; Parameters:    Size  Location     Type
  9031 ;;		None
  9032 ;; Auto vars:     Size  Location     Type
  9033 ;;		None
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  1    wreg      unsigned char 
  9036 ;; Registers used:
  9037 ;;		wreg, status,2, status,0, pclath, cstack
  9038 ;; Tracked objects:
  9039 ;;		On entry : 1E/1
  9040 ;;		On exit  : 1F/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9043 ;;      Params:         0       0       0       0
  9044 ;;      Locals:         0       0       0       0
  9045 ;;      Temps:          0       0       0       0
  9046 ;;      Totals:         0       0       0       0
  9047 ;;Total ram usage:        0 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; Hardware stack levels required when called:    2
  9050 ;; This function calls:
  9051 ;;		i1_Mrf49RxCmd
  9052 ;; This function is called by:
  9053 ;;		i1_Mrf49xaServe
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           
  9058                           ;psect for function i1_Mrf49RxByte
  9059  0516                     i1_Mrf49RxByte:	
  9060                           
  9061                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  9062                           
  9063                           ;incstack = 0
  9064                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  9065  0516  30B0               	movlw	176
  9066  0517  242E               	fcall	i1_Mrf49RxCmd
  9067  0518  0008               	return
  9068  0519                     __end_ofi1_Mrf49RxByte:	
  9069  0519                     __ptext59:	
  9070 ;; *************** function i1_Mrf49xaModeRx *****************
  9071 ;; Defined at:
  9072 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;		None
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  9077 ;; Return value:  Size  Location     Type
  9078 ;;		None               void
  9079 ;; Registers used:
  9080 ;;		wreg, status,2, status,0, pclath, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 1E/0
  9083 ;;		On exit  : 1F/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9086 ;;      Params:         0       0       0       0
  9087 ;;      Locals:         1       0       0       0
  9088 ;;      Temps:          0       0       0       0
  9089 ;;      Totals:         1       0       0       0
  9090 ;;Total ram usage:        1 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    2
  9093 ;; This function calls:
  9094 ;;		i1_Mrf49TxCmd
  9095 ;; This function is called by:
  9096 ;;		i1_Mrf49xaServe
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           
  9101                           ;psect for function i1_Mrf49xaModeRx
  9102  0519                     i1_Mrf49xaModeRx:	
  9103  0519  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  9104                           
  9105                           ;mrf49xa.c: 101: UI08_t k;
  9106                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  9107                           
  9108                           ;incstack = 0
  9109                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  9110  051A  01F3               	clrf	i1Mrf49xaModeRx@k
  9111  051B  3188               	movlp	high __stringtab
  9112  051C  000A               	callw
  9113  051D  3184               	pagesel	$	;select current page
  9114  051E  3800               	iorlw	0
  9115  051F  1903               	btfsc	3,2
  9116  0520  2D35               	goto	i1l211
  9117  0521                     i1l2907:	
  9118  0521  3573               	lslf	i1Mrf49xaModeRx@k,w
  9119  0522  3E26               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  9120  0523  3188               	movlp	high __stringtab
  9121  0524  000A               	callw
  9122  0525  00F1               	movwf	i1Mrf49TxCmd@val
  9123  0526  3573               	lslf	i1Mrf49xaModeRx@k,w
  9124  0527  3E25               	addlw	low (_mrfRegset_Rx| (0+32768))
  9125  0528  3188               	movlp	high __stringtab
  9126  0529  000A               	callw
  9127  052A  3184               	pagesel	$	;select current page
  9128  052B  3185  253D         	fcall	i1_Mrf49TxCmd
  9129  052D  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  9130  052E  0AF3               	incf	i1Mrf49xaModeRx@k,f
  9131  052F  3188               	movlp	high __stringtab
  9132  0530  000A               	callw
  9133  0531  3184               	pagesel	$	;select current page
  9134  0532  0273               	subwf	i1Mrf49xaModeRx@k,w
  9135  0533  1C03               	skipc
  9136  0534  2D21               	goto	i1l2907
  9137  0535                     i1l211:	
  9138                           
  9139                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  9140  0535  0021               	movlb	1	; select bank1
  9141  0536  3080               	movlw	-128
  9142  0537  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  9143  0538  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  9144                           
  9145                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  9146  0539  05ED               	andwf	(_rfTrcvStatus^(0+128)+77),f
  9147                           
  9148                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  9149  053A  0020               	movlb	0	; select bank0
  9150  053B  13B2               	bcf	_mrf49Status,7
  9151  053C  0008               	return
  9152  053D                     __end_ofi1_Mrf49xaModeRx:	
  9153  053D                     __ptext61:	
  9154 ;; *************** function i1_Mrf49TxCmd *****************
  9155 ;; Defined at:
  9156 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  cmd             1    wreg     unsigned char 
  9159 ;;  val             1    1[COMMON] unsigned char 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  cmd             1    2[COMMON] unsigned char 
  9162 ;; Return value:  Size  Location     Type
  9163 ;;		None               void
  9164 ;; Registers used:
  9165 ;;		wreg, status,2, status,0, pclath, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 1E/0
  9168 ;;		On exit  : 1F/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9171 ;;      Params:         1       0       0       0
  9172 ;;      Locals:         1       0       0       0
  9173 ;;      Temps:          0       0       0       0
  9174 ;;      Totals:         2       0       0       0
  9175 ;;Total ram usage:        2 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    1
  9178 ;; This function calls:
  9179 ;;		i1_Mrf49SpiTx
  9180 ;; This function is called by:
  9181 ;;		i1_Mrf49xaModeRx
  9182 ;;		i1_Mrf49TxByte
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function i1_Mrf49TxCmd
  9188  053D                     i1_Mrf49TxCmd:	
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  9192                           ;i1Mrf49TxCmd@cmd stored from wreg
  9193  053D  00F2               	movwf	i1Mrf49TxCmd@cmd
  9194                           
  9195                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  9196  053E  0020               	movlb	0	; select bank0
  9197  053F  130E               	bcf	14,6	;volatile
  9198                           
  9199                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  9200  0540  0872               	movf	i1Mrf49TxCmd@cmd,w
  9201  0541  2547  3184         	fcall	i1_Mrf49SpiTx
  9202                           
  9203                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  9204  0543  0871               	movf	i1Mrf49TxCmd@val,w
  9205  0544  2547               	fcall	i1_Mrf49SpiTx
  9206                           
  9207                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  9208  0545  170E               	bsf	14,6	;volatile
  9209  0546  0008               	return
  9210  0547                     __end_ofi1_Mrf49TxCmd:	
  9211  0547                     __ptext65:	
  9212 ;; *************** function i1_Mrf49SpiTx *****************
  9213 ;; Defined at:
  9214 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  byte            1    wreg     unsigned char 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  byte            1    0[COMMON] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;		None               void
  9221 ;; Registers used:
  9222 ;;		wreg
  9223 ;; Tracked objects:
  9224 ;;		On entry : 1F/0
  9225 ;;		On exit  : 1F/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9228 ;;      Params:         0       0       0       0
  9229 ;;      Locals:         1       0       0       0
  9230 ;;      Temps:          0       0       0       0
  9231 ;;      Totals:         1       0       0       0
  9232 ;;Total ram usage:        1 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; This function calls:
  9235 ;;		Nothing
  9236 ;; This function is called by:
  9237 ;;		i1_Mrf49TxCmd
  9238 ;;		i1_Mrf49RxCmd
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           
  9243                           ;psect for function i1_Mrf49SpiTx
  9244  0547                     i1_Mrf49SpiTx:	
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  9248                           ;i1Mrf49SpiTx@byte stored from wreg
  9249  0547  00F0               	movwf	i1Mrf49SpiTx@byte
  9250                           
  9251                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  9252  0548  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  9253  0549  2D4C               	goto	i1l255
  9254  054A  178D               	bsf	13,7	;volatile
  9255  054B  2D4D               	goto	i1l256
  9256  054C                     i1l255:	
  9257  054C  138D               	bcf	13,7	;volatile
  9258  054D                     i1l256:	
  9259  054D  0022               	movlb	2	; select bank2
  9260  054E  178E               	bsf	14,7	;volatile
  9261  054F  0000               	nop	;# 
  9262  0550  0022               	movlb	2	; select bank2
  9263  0551  138E               	bcf	14,7	;volatile
  9264  0552  1F70               	btfss	i1Mrf49SpiTx@byte,6
  9265  0553  2D57               	goto	i1l259
  9266  0554  0020               	movlb	0	; select bank0
  9267  0555  178D               	bsf	13,7	;volatile
  9268  0556  2D59               	goto	i1l260
  9269  0557                     i1l259:	
  9270  0557  0020               	movlb	0	; select bank0
  9271  0558  138D               	bcf	13,7	;volatile
  9272  0559                     i1l260:	
  9273  0559  0022               	movlb	2	; select bank2
  9274  055A  178E               	bsf	14,7	;volatile
  9275  055B  0000               	nop	;# 
  9276  055C  0022               	movlb	2	; select bank2
  9277  055D  138E               	bcf	14,7	;volatile
  9278  055E  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  9279  055F  2D63               	goto	i1l263
  9280  0560  0020               	movlb	0	; select bank0
  9281  0561  178D               	bsf	13,7	;volatile
  9282  0562  2D65               	goto	i1l264
  9283  0563                     i1l263:	
  9284  0563  0020               	movlb	0	; select bank0
  9285  0564  138D               	bcf	13,7	;volatile
  9286  0565                     i1l264:	
  9287  0565  0022               	movlb	2	; select bank2
  9288  0566  178E               	bsf	14,7	;volatile
  9289  0567  0000               	nop	;# 
  9290  0568  0022               	movlb	2	; select bank2
  9291  0569  138E               	bcf	14,7	;volatile
  9292  056A  1E70               	btfss	i1Mrf49SpiTx@byte,4
  9293  056B  2D6F               	goto	i1l267
  9294  056C  0020               	movlb	0	; select bank0
  9295  056D  178D               	bsf	13,7	;volatile
  9296  056E  2D71               	goto	i1l268
  9297  056F                     i1l267:	
  9298  056F  0020               	movlb	0	; select bank0
  9299  0570  138D               	bcf	13,7	;volatile
  9300  0571                     i1l268:	
  9301  0571  0022               	movlb	2	; select bank2
  9302  0572  178E               	bsf	14,7	;volatile
  9303  0573  0000               	nop	;# 
  9304  0574  0022               	movlb	2	; select bank2
  9305  0575  138E               	bcf	14,7	;volatile
  9306  0576  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  9307  0577  2D7B               	goto	i1l271
  9308  0578  0020               	movlb	0	; select bank0
  9309  0579  178D               	bsf	13,7	;volatile
  9310  057A  2D7D               	goto	i1l272
  9311  057B                     i1l271:	
  9312  057B  0020               	movlb	0	; select bank0
  9313  057C  138D               	bcf	13,7	;volatile
  9314  057D                     i1l272:	
  9315  057D  0022               	movlb	2	; select bank2
  9316  057E  178E               	bsf	14,7	;volatile
  9317  057F  0000               	nop	;# 
  9318  0580  0022               	movlb	2	; select bank2
  9319  0581  138E               	bcf	14,7	;volatile
  9320  0582  1D70               	btfss	i1Mrf49SpiTx@byte,2
  9321  0583  2D87               	goto	i1l275
  9322  0584  0020               	movlb	0	; select bank0
  9323  0585  178D               	bsf	13,7	;volatile
  9324  0586  2D89               	goto	i1l276
  9325  0587                     i1l275:	
  9326  0587  0020               	movlb	0	; select bank0
  9327  0588  138D               	bcf	13,7	;volatile
  9328  0589                     i1l276:	
  9329  0589  0022               	movlb	2	; select bank2
  9330  058A  178E               	bsf	14,7	;volatile
  9331  058B  0000               	nop	;# 
  9332  058C  0022               	movlb	2	; select bank2
  9333  058D  138E               	bcf	14,7	;volatile
  9334  058E  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  9335  058F  2D93               	goto	i1l279
  9336  0590  0020               	movlb	0	; select bank0
  9337  0591  178D               	bsf	13,7	;volatile
  9338  0592  2D95               	goto	i1l280
  9339  0593                     i1l279:	
  9340  0593  0020               	movlb	0	; select bank0
  9341  0594  138D               	bcf	13,7	;volatile
  9342  0595                     i1l280:	
  9343  0595  0022               	movlb	2	; select bank2
  9344  0596  178E               	bsf	14,7	;volatile
  9345  0597  0000               	nop	;# 
  9346  0598  0022               	movlb	2	; select bank2
  9347  0599  138E               	bcf	14,7	;volatile
  9348  059A  1C70               	btfss	i1Mrf49SpiTx@byte,0
  9349  059B  2D9F               	goto	i1l283
  9350  059C  0020               	movlb	0	; select bank0
  9351  059D  178D               	bsf	13,7	;volatile
  9352  059E  2DA1               	goto	i1l284
  9353  059F                     i1l283:	
  9354  059F  0020               	movlb	0	; select bank0
  9355  05A0  138D               	bcf	13,7	;volatile
  9356  05A1                     i1l284:	
  9357  05A1  0022               	movlb	2	; select bank2
  9358  05A2  178E               	bsf	14,7	;volatile
  9359  05A3  0000               	nop	;# 
  9360  05A4  0022               	movlb	2	; select bank2
  9361  05A5  138E               	bcf	14,7	;volatile
  9362                           
  9363                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  9364  05A6  0020               	movlb	0	; select bank0
  9365  05A7  138D               	bcf	13,7	;volatile
  9366  05A8  0008               	return
  9367  05A9                     __end_ofi1_Mrf49SpiTx:	
  9368  05A9                     __ptext62:	
  9369 ;; *************** function i1_Mrf49RxSts *****************
  9370 ;; Defined at:
  9371 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;		None
  9376 ;; Return value:  Size  Location     Type
  9377 ;;		None               void
  9378 ;; Registers used:
  9379 ;;		wreg, status,2, pclath, cstack
  9380 ;; Tracked objects:
  9381 ;;		On entry : 1F/1
  9382 ;;		On exit  : 1F/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9385 ;;      Params:         0       0       0       0
  9386 ;;      Locals:         0       0       0       0
  9387 ;;      Temps:          0       0       0       0
  9388 ;;      Totals:         0       0       0       0
  9389 ;;Total ram usage:        0 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:    1
  9392 ;; This function calls:
  9393 ;;		i1_Mrf49SpiRx
  9394 ;; This function is called by:
  9395 ;;		i1_Mrf49xaServe
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           
  9400                           ;psect for function i1_Mrf49RxSts
  9401  05A9                     i1_Mrf49RxSts:	
  9402                           
  9403                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  9404                           
  9405                           ;incstack = 0
  9406                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  9407  05A9  120B               	bcf	11,4	;volatile
  9408                           
  9409                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  9410  05AA  0020               	movlb	0	; select bank0
  9411  05AB  130E               	bcf	14,6	;volatile
  9412                           
  9413                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  9414  05AC  25B6  3184         	fcall	i1_Mrf49SpiRx
  9415  05AE  0020               	movlb	0	; select bank0
  9416  05AF  00B2               	movwf	_mrf49Status
  9417                           
  9418                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  9419  05B0  25B6               	fcall	i1_Mrf49SpiRx
  9420  05B1  0020               	movlb	0	; select bank0
  9421  05B2  00B3               	movwf	_mrf49Status+1
  9422                           
  9423                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  9424  05B3  170E               	bsf	14,6	;volatile
  9425                           
  9426                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  9427  05B4  160B               	bsf	11,4	;volatile
  9428  05B5  0008               	return
  9429  05B6                     __end_ofi1_Mrf49RxSts:	
  9430  05B6                     __ptext66:	
  9431 ;; *************** function i1_Mrf49SpiRx *****************
  9432 ;; Defined at:
  9433 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;		None
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      unsigned char 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2
  9442 ;; Tracked objects:
  9443 ;;		On entry : 1F/0
  9444 ;;		On exit  : 1F/2
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9447 ;;      Params:         0       0       0       0
  9448 ;;      Locals:         1       0       0       0
  9449 ;;      Temps:          0       0       0       0
  9450 ;;      Totals:         1       0       0       0
  9451 ;;Total ram usage:        1 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; This function calls:
  9454 ;;		Nothing
  9455 ;; This function is called by:
  9456 ;;		i1_Mrf49RxCmd
  9457 ;;		i1_Mrf49RxSts
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           
  9462                           ;psect for function i1_Mrf49SpiRx
  9463  05B6                     i1_Mrf49SpiRx:	
  9464                           
  9465                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  9466                           
  9467                           ;incstack = 0
  9468                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  9469  05B6  01F0               	clrf	i1Mrf49SpiRx@data
  9470                           
  9471                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  9472  05B7  138D               	bcf	13,7	;volatile
  9473  05B8  1A8E               	btfsc	14,5	;volatile
  9474  05B9  17F0               	bsf	i1Mrf49SpiRx@data,7
  9475  05BA  0022               	movlb	2	; select bank2
  9476  05BB  178E               	bsf	14,7	;volatile
  9477  05BC  0000               	nop	;# 
  9478  05BD  0022               	movlb	2	; select bank2
  9479  05BE  138E               	bcf	14,7	;volatile
  9480                           
  9481                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9482  05BF  0020               	movlb	0	; select bank0
  9483  05C0  1A8E               	btfsc	14,5	;volatile
  9484  05C1  1770               	bsf	i1Mrf49SpiRx@data,6
  9485  05C2  0022               	movlb	2	; select bank2
  9486  05C3  178E               	bsf	14,7	;volatile
  9487  05C4  0000               	nop	;# 
  9488  05C5  0022               	movlb	2	; select bank2
  9489  05C6  138E               	bcf	14,7	;volatile
  9490                           
  9491                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9492  05C7  0020               	movlb	0	; select bank0
  9493  05C8  1A8E               	btfsc	14,5	;volatile
  9494  05C9  16F0               	bsf	i1Mrf49SpiRx@data,5
  9495  05CA  0022               	movlb	2	; select bank2
  9496  05CB  178E               	bsf	14,7	;volatile
  9497  05CC  0000               	nop	;# 
  9498  05CD  0022               	movlb	2	; select bank2
  9499  05CE  138E               	bcf	14,7	;volatile
  9500                           
  9501                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9502  05CF  0020               	movlb	0	; select bank0
  9503  05D0  1A8E               	btfsc	14,5	;volatile
  9504  05D1  1670               	bsf	i1Mrf49SpiRx@data,4
  9505  05D2  0022               	movlb	2	; select bank2
  9506  05D3  178E               	bsf	14,7	;volatile
  9507  05D4  0000               	nop	;# 
  9508  05D5  0022               	movlb	2	; select bank2
  9509  05D6  138E               	bcf	14,7	;volatile
  9510                           
  9511                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9512  05D7  0020               	movlb	0	; select bank0
  9513  05D8  1A8E               	btfsc	14,5	;volatile
  9514  05D9  15F0               	bsf	i1Mrf49SpiRx@data,3
  9515  05DA  0022               	movlb	2	; select bank2
  9516  05DB  178E               	bsf	14,7	;volatile
  9517  05DC  0000               	nop	;# 
  9518  05DD  0022               	movlb	2	; select bank2
  9519  05DE  138E               	bcf	14,7	;volatile
  9520                           
  9521                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9522  05DF  0020               	movlb	0	; select bank0
  9523  05E0  1A8E               	btfsc	14,5	;volatile
  9524  05E1  1570               	bsf	i1Mrf49SpiRx@data,2
  9525  05E2  0022               	movlb	2	; select bank2
  9526  05E3  178E               	bsf	14,7	;volatile
  9527  05E4  0000               	nop	;# 
  9528  05E5  0022               	movlb	2	; select bank2
  9529  05E6  138E               	bcf	14,7	;volatile
  9530                           
  9531                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9532  05E7  0020               	movlb	0	; select bank0
  9533  05E8  1A8E               	btfsc	14,5	;volatile
  9534  05E9  14F0               	bsf	i1Mrf49SpiRx@data,1
  9535  05EA  0022               	movlb	2	; select bank2
  9536  05EB  178E               	bsf	14,7	;volatile
  9537  05EC  0000               	nop	;# 
  9538  05ED  0022               	movlb	2	; select bank2
  9539  05EE  138E               	bcf	14,7	;volatile
  9540                           
  9541                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9542  05EF  0020               	movlb	0	; select bank0
  9543  05F0  1A8E               	btfsc	14,5	;volatile
  9544  05F1  1470               	bsf	i1Mrf49SpiRx@data,0
  9545  05F2  0022               	movlb	2	; select bank2
  9546  05F3  178E               	bsf	14,7	;volatile
  9547  05F4  0000               	nop	;# 
  9548  05F5  0022               	movlb	2	; select bank2
  9549  05F6  138E               	bcf	14,7	;volatile
  9550                           
  9551                           ;mrf49xa_spi_pic16.c: 40: return data;
  9552  05F7  0870               	movf	i1Mrf49SpiRx@data,w
  9553  05F8  0008               	return
  9554  05F9                     __end_ofi1_Mrf49SpiRx:	
  9555  05F9                     PL16:	
  9556  05F9  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9557  05FA  397F               	andlw	127
  9558  05FB  00F4               	movwf	??i1_Mrf49xaServe
  9559  05FC  0AF4               	incf	??i1_Mrf49xaServe,f
  9560  05FD  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9561  05FE  0674               	xorwf	??i1_Mrf49xaServe,w
  9562  05FF  3980               	andlw	-128
  9563  0600  0674               	xorwf	??i1_Mrf49xaServe,w
  9564  0601  0008               	return
  9565  0602                     __end_ofPL16:	
  9566                           
  9567                           	psect	text67
  9568  0F4C                     __ptext67:	
  9569 ;; *************** function i1_Mrf49xaNeedsReset *****************
  9570 ;; Defined at:
  9571 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  2    0[COMMON] int 
  9578 ;; Registers used:
  9579 ;;		None
  9580 ;; Tracked objects:
  9581 ;;		On entry : 1E/0
  9582 ;;		On exit  : 1F/1
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9585 ;;      Params:         0       0       0       0
  9586 ;;      Locals:         0       0       0       0
  9587 ;;      Temps:          0       0       0       0
  9588 ;;      Totals:         0       0       0       0
  9589 ;;Total ram usage:        0 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_extInt
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           
  9599                           ;psect for function i1_Mrf49xaNeedsReset
  9600  0F4C                     i1_Mrf49xaNeedsReset:	
  9601                           
  9602                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in i1_Mrf49xaNeedsReset: []
  9606  0F4C  0021               	movlb	1	; select bank1
  9607  0F4D  17ED               	bsf	(_rfTrcvStatus^(0+128)+77),7
  9608  0F4E  0008               	return
  9609  0F4F                     __end_ofi1_Mrf49xaNeedsReset:	
  9610                           
  9611                           	psect	text68
  9612  0002                     __ptext68:	
  9613 ;; *************** function _ExtIntDeinit *****************
  9614 ;; Defined at:
  9615 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;		None
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;		None
  9620 ;; Return value:  Size  Location     Type
  9621 ;;		None               void
  9622 ;; Registers used:
  9623 ;;		None
  9624 ;; Tracked objects:
  9625 ;;		On entry : 1E/0
  9626 ;;		On exit  : 1E/0
  9627 ;;		Unchanged: 1E/0
  9628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9629 ;;      Params:         0       0       0       0
  9630 ;;      Locals:         0       0       0       0
  9631 ;;      Temps:          0       0       0       0
  9632 ;;      Totals:         0       0       0       0
  9633 ;;Total ram usage:        0 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; This function calls:
  9636 ;;		Nothing
  9637 ;; This function is called by:
  9638 ;;		_extInt
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           
  9643                           ;psect for function _ExtIntDeinit
  9644  0002                     _ExtIntDeinit:	
  9645                           
  9646                           ;interrupt.c: 19: INTCONbits.INTE = 0;
  9647                           
  9648                           ;incstack = 0
  9649                           ; Regs used in _ExtIntDeinit: []
  9650  0002  120B               	bcf	11,4	;volatile
  9651  0003  0008               	return
  9652  0004                     __end_of_ExtIntDeinit:	
  9653  007E                     btemp	set	126	;btemp
  9654  007E                     wtemp	set	126
  9655  007E                     wtemp0	set	126
  9656  0080                     wtemp1	set	128
  9657  0082                     wtemp2	set	130
  9658  0084                     wtemp3	set	132
  9659  0086                     wtemp4	set	134
  9660  0088                     wtemp5	set	136
  9661  007F                     wtemp6	set	127
  9662  007E                     ttemp	set	126
  9663  007E                     ttemp0	set	126
  9664  0081                     ttemp1	set	129
  9665  0084                     ttemp2	set	132
  9666  0087                     ttemp3	set	135
  9667  007F                     ttemp4	set	127
  9668  007E                     ltemp	set	126
  9669  007E                     ltemp0	set	126
  9670  0082                     ltemp1	set	130
  9671  0086                     ltemp2	set	134
  9672  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    62
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     18      20
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 
		 -> NULL(NULL[0]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    S337rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _AdcSample->_AdcGetResult

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   21635
                                             14 BANK0      4     4      0
                          _AdcSample
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              5     1      4    1917
                                              6 BANK0      5     1      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     831
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     831
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     831
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     831
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    5616
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (2) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (2) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          3     3      0   10931
                                             11 BANK0      3     3      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    4670
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    1947
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         2     2      0    4224
                                              9 BANK0      2     2      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0     964
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4     818
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1532
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1342
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (2) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               2     2      0    1033
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaNeedsReset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     12      14       6       25.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      6B      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Thu Jul 03 17:51:28 2014

                Mrf49xaTxPacket@crc 0023                         __CFG_CP$OFF 0000  
                                PL8 072E                                  l32 0219  
                                l42 026E                                  l34 0225  
                                l35 0227                                  l39 0251  
                                l79 0008                                 PL10 03ED  
                               PL20 040E                                 PL12 03FB  
                               PL22 0414                                 PL14 0749  
                               PL16 05F9                                 PL18 0408  
             Mrf49xaTxPacket@packet 0025                                 l211 038C  
                               l234 0124                                 l260 076E  
                               l271 078E                                 l263 0778  
                               l255 0762                                 l415 011D  
                               l520 068E                                 l280 07A5  
                               l272 078F                                 l264 0779  
                               l256 0763                                 l515 06C2  
                               l523 0673                                 l283 07AF  
                               l275 0799                                 l267 0783  
                               l259 076D                                 l284 07B0  
                               l276 079A                                 l268 0784  
                               l437 02A0                                 l526 0699  
                               l438 02B8                                 l279 07A4  
                               l379 06FC                                 l599 008E  
                   ??_PwrSensorInit 0020                     ??_PwrSensorWake 0020  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                  i1Mrf49xaModeRx@k 0073                        __CFG_IESO$ON 0000  
            ??_SoftI2cRepeatedStart 0021                        __CFG_LVP$OFF 0000  
            Mrf49xaTxPacket@needAck 0021                                l3011 0106  
                              l3021 010F                                l3013 0107  
                              l2191 027C                                l2415 06D5  
                              l2431 06D8                                l2441 06E3  
                              l2611 02EC                                l2603 02E1  
                              l2349 0270                                l2293 019F  
                              l2461 06EA                                l2701 06AB  
                              l2621 030D                                l2391 0378  
                              l2631 0324                                l3263 004A  
                              l2473 070A                                l2385 036F  
                              l2633 032D                                l2625 0319  
                              l2617 02FE                                l2635 0331  
                              l2627 031D                                l2811 016E  
                              l2485 0203                                l2477 01F1  
                              l2645 0342                                l2637 0335  
                              l2581 02C1                                l2653 0356  
                              l2573 02AC                                l2805 0154  
                              l3293 007D                                l2487 0214  
                              l2583 02C4                                l2655 0362  
                              l2671 0185                                l2815 0176  
                              l2743 0F78                                l2735 0F85  
                              l2745 0000                                l2649 0344  
                              l2577 02BC                                l2569 02A3  
                              l2809 0162                                l2673 0F91  
                              l2587 02CA                                l2667 019A  
                              l2827 0179                                l2771 0FCF  
                              l2757 0FFA                                l2765 0FBB  
                              l2685 0FAE                     Mrf49TxByte@byte 0023  
                              l2935 03C0                                l2679 0F9A  
                              l2881 065E                                l2785 0126  
                              l2849 0F6A                                l2865 064D  
                              l2939 03C7                                l2877 0655  
                              l2893 0679                                l2973 00B3  
                              l2965 009A                                l2887 0675  
                              l2879 065B                                l2983 00CC  
                              l2985 00CE                                l2977 00BE  
                              l2899 069D                                l2995 00EB  
                              l2979 00C3                                l2999 00F3  
                              u2377 027F                                u2387 03BB  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _main 0036                     __end_of_AdcInit 0F90  
                              fsr0h 0005                                fsr1h 0007  
                  ??_PwrSensorSleep 0020                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                              ltemp 007E                                start 0020  
                              ttemp 007E                                wtemp 007E  
              __end_of_HandlePacket 069F             __end_ofi1_Mrf49xaModeRx 053D  
                     __CFG_MCLRE$ON 0000                 __end_of_Mrf49RxByte 036F  
                     ?_ExtIntDeinit 0070                 __end_of_Mrf49TxByte 036C  
                   ??_eepromRxBytes 0028                         _Mcp9800Read 01AE  
               __end_of_Mrf49xaInit 0184                 __end_of_Mrf49xaTick 0124  
              _Mrf49xaPacketPending 0419                               ?_main 0070  
                             i1l211 0535                               i1l141 001B  
                             i1l142 001C                               i1l260 0559  
                             i1l271 057B                               i1l263 0563  
                             i1l255 054C                               i1l280 0595  
                             i1l272 057D                               i1l264 0565  
                             i1l256 054D                               i1l283 059F  
                             i1l275 0587                               i1l267 056F  
                             i1l259 0557                               i1l284 05A1  
                             i1l276 0589                               i1l268 0571  
                             i1l437 044A                               i1l438 0462  
                             i1l279 0593                          _Mrf49RxCmd 0753  
                        _Mrf49TxCmd 0394                               _AdcGo 03D9  
                        _Mrf49SpiRx 07B8                          _Mrf49SpiTx 075D  
                        _Mrf49RxSts 039F          __end_of_Mrf49xaAllocPacket 0653  
             __end_of_SoftI2cRxByte 027C               __end_of_SoftI2cTxByte 0243  
                      main@humidity 002E               __size_of_Mcp9800Start 0019  
                __size_of_AdcDeinit 0007             Mrf49xaTxPacket@response 0020  
                __size_of_AdcIsBusy 0004                  __size_of_AdcSample 0028  
                    __CFG_BOREN$OFF 0000                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
            Mcp9800Start@resolution 0024                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 i1_Mrf49xaNeedsReset 0F4C  
                    ??_ExtIntDeinit 0070                     __initialization 0022  
                        _ExtIntInit 0FFA                        __end_of_main 0094  
RfSendSampleWeatherNode@temperature 0026                      __CFG_LPBOR$OFF 0000  
             ?_Mrf49xaPacketPending 0070                        _Mcp9800Start 01D8  
                            ??_main 002E                ?i1_Mrf49xaNeedsReset 0070  
                            ?_AdcGo 0070                __size_of_handleFwCmd 0024  
              __end_of_Mrf49xaTxAck 072E                __end_of_Mrf49xaServe 0367  
                     ??_PwrI2cSleep 0020                              _ADCON0 009D  
                            _ADCON1 009E                              _ADCON2 009F  
                         ??_AdcInit 0020                              _ADRESH 009C  
                            _ADRESL 009B                              _ANSELA 018C  
                            _ANSELB 018D                              _ANSELC 018E  
                i1Mrf49xaServe@data 0075                              i1l3201 04C3  
                            i1l3211 04DB                              i1l3203 04C7  
                            i1l3221 04EC                              i1l3213 04DF  
                            i1l3207 04CE                              i1l3231 050C  
                            i1l3209 04D7                              i1l3225 04EE  
                            i1l3153 0466                              i1l3145 044D  
                            i1l3163 0474                              i1l3157 046B  
                            i1l3229 0500                              i1l3149 0456  
                            i1l3245 000B                              i1l3159 046E  
                            i1l3193 04AA                              i1l3187 0497  
                            i1l3179 048C                              i1l3197 04B7  
                            i1l2907 0521                              _FVRCON 0117  
                            _OSCCON 0099                          _PwrI2cInit 0F5A  
                AdcChSelect@channel 0020                          _PwrI2cWake 03E8  
                       _Mrf49RxByte 036C                         _Mrf49TxByte 0367  
                     ??_SoftI2cInit 0024                       ??_SoftI2cStop 0021  
         __size_of_Mrf49xaModeSleep 0022                      __CFG_PWRTE$OFF 0000  
                        _SoftI2cNop 027C                        ?_AdcChSelect 0070  
                  ?i1_Mrf49xaModeRx 0070                         _Mrf49xaInit 0124  
                            _Sleepy 0184                         _Mrf49xaTick 0094  
                        _PwrAdcInit 0422                          _PwrAdcWake 0F7F  
                     ??_PwrAdcSleep 0020                     _Mrf49xaRxPacket 0F63  
                 __end_of_AdcDeinit 0F7F                      __CFG_STVREN$ON 0000  
                 __end_of_AdcIsBusy 03DF                     _Mrf49xaTxPacket 06C8  
                            _extInt 0004                   __end_of_AdcSample 03D9  
                   _Mrf49xaShutdown 0F90                          _PwrRfSleep 03E9  
             ??i1_Mrf49xaNeedsReset 0070                         ?_Mrf49RxCmd 0070  
                       ?_Mrf49TxCmd 0021                         ?_Mrf49SpiRx 0070  
                       ?_Mrf49SpiTx 0070                         ?_Mrf49RxSts 0070  
                __size_of_PwrRfInit 0023                  __size_of_PwrRfWake 0003  
             __size_of_HandlePacket 004C             __end_of__initialization 002B  
             __end_ofi1_Mrf49RxByte 0519                 __end_of_PwrI2cSleep 03AE  
             __end_ofi1_Mrf49TxByte 0516                       __end_of_AdcGo 03DB  
   RfSendSampleWeatherNode@humidity 0028                         ?_ExtIntInit 0070  
                    __pcstackCOMMON 0070                    SoftI2cRxByte@ack 0021  
               __end_of_SoftI2cInit 0036                 __end_of_SoftI2cStop 01AE  
            ??_Mrf49xaPacketPending 0020             __size_ofi1_Mrf49xaServe 00D7  
                        __end_ofPL8 0749                 __end_of_PwrAdcSleep 0F78  
                           ??_AdcGo 0020                      _OPTION_REGbits 0095  
                      _HandlePacket 0653             Mrf49xaFreePacket@packet 0020  
              __end_of_ExtIntDeinit 0004                          __pbssBANK0 0032  
                        __pbssBANK1 00A0                         ?_PwrI2cInit 0070  
                       ?_PwrI2cWake 0070                       ?_SoftI2cStart 0070  
           __end_of_Mrf49xaRxPacket 0F71             __end_of_Mrf49xaTxPacket 070E  
             __end_of_Mrf49xaModeRx 0394               __end_of_Mrf49xaModeTx 0FD7  
                       ?_SoftI2cNop 0070               __end_of_Mrf49xaReboot 0F54  
               __size_of_Mrf49RxCmd 000A                   __end_of_PwrRfInit 0FFA  
               __size_of_Mrf49TxCmd 000B                   __end_of_PwrRfWake 0F52  
               __size_of_Mrf49SpiRx 0044                 __size_of_Mrf49SpiTx 005B  
               __size_of_Mrf49RxSts 000D                          __pmaintext 0036  
                           ?_Sleepy 0020             __end_of_Mrf49xaShutdown 0F91  
                       ?_PwrAdcInit 0070                         ?_PwrAdcWake 0070  
          ?_RfSendSampleWeatherNode 0026                        ?_Mcp9800Read 0024  
                        __pintentry 0004                             ?_extInt 0070  
             __size_of_Mrf49xaTxAck 0020               __size_of_Mrf49xaServe 00D7  
                       ?_PwrRfSleep 0070                HandlePacket@response 0029  
                 handleFwCmd@packet 0028               __end_of_PwrSensorInit 0800  
             __end_of_PwrSensorWake 042E                         _PwrI2cSleep 03AC  
                           _AdcInit 0F85                 __size_of_ExtIntInit 0006  
     __size_of_SoftI2cRepeatedStart 0015                          __stringtab 0800  
                    ??_SoftI2cStart 0021                  _Mrf49xaAllocPacket 0646  
                  _Mrf49xaModeSleep 0F91                         _SoftI2cInit 002E  
                     ?i1_Mrf49RxCmd 0070                       ?i1_Mrf49TxCmd 0071  
                     ?i1_Mrf49SpiRx 0070                       ?i1_Mrf49SpiTx 0070  
                       _SoftI2cStop 019F                       ?i1_Mrf49RxSts 0070  
                           Sleepy@b 0023                        _Mrf49xaTxAck 070E  
                      _Mrf49xaServe 0290                     __size_of_Sleepy 001B  
              eepromRxBytes@address 0024                         _PwrAdcSleep 0F71  
               ?_Mrf49xaAllocPacket 0070                __size_of_AdcChSelect 0007  
             __end_of_eepromRxBytes 0215                     __size_of_extInt 001C  
                 _mrfRegset_InitCnt 0801                             __ptext1 0602  
                           __ptext2 0646                             __ptext3 042B  
                           __ptext4 03AE                             __ptext5 07FC  
                           __ptext6 0F4F                             __ptext7 0F52  
                           __ptext8 03E9                             __ptext9 0F90  
               __size_of_PwrI2cInit 0009                 __size_of_PwrI2cWake 0001  
                     ?_AdcGetResult 0020                 __size_of_SoftI2cNop 0007  
              ??_Mrf49xaAllocPacket 0020                 __size_of_PwrAdcInit 0009  
               __size_of_PwrAdcWake 0006                             clrloop0 0F55  
              end_of_initialization 002B                        ?_Mrf49RxByte 0070  
                      ?_Mrf49TxByte 0070                      ??i1_Mrf49RxCmd 0071  
                    ??i1_Mrf49TxCmd 0072                      ??i1_Mrf49SpiRx 0070  
                    ??i1_Mrf49SpiTx 0070                      ??i1_Mrf49RxSts 0071  
                  ?_Mrf49xaRxPacket 0070                 __size_of_PwrRfSleep 0004  
   __end_of_RfSendSampleWeatherNode 0646                    ?_Mrf49xaTxPacket 0020  
                      ?_Mrf49xaInit 0070                __end_of_mrfRegset_Rx 0831  
              __end_of_mrfRegset_Tx 0839                        ?_Mrf49xaTick 0070  
                  ?_Mrf49xaShutdown 0070              __size_of_SoftI2cRxByte 0039  
            __size_of_SoftI2cTxByte 002E                      i1_Mrf49xaServe 043A  
         __end_of_mrfRegset_InitCnt 0802             __size_of_PwrSensorSleep 0003  
                     ??_handleFwCmd 0028                           _PORTAbits 000C  
                         _PORTBbits 000D                           _PORTCbits 000E  
                         _AdcDeinit 0F78               __size_of_ExtIntDeinit 0002  
                         _AdcIsBusy 03DB                        ??_Mrf49RxCmd 0021  
                      ??_Mrf49TxCmd 0022                        ??_Mrf49SpiRx 0020  
                      ??_Mrf49SpiTx 0020                        ??_Mrf49RxSts 0021  
                         _AdcSample 03B1                    __CFG_FOSC$INTOSC 0000  
                    ??_AdcGetResult 0022                           _TRISAbits 008C  
                         _TRISBbits 008D                           _TRISCbits 008E  
                       AdcSample@ch 0025                      Mrf49SpiRx@data 0020  
                    Mrf49SpiTx@byte 0020                  __end_of_Mrf49RxCmd 075D  
                __end_of_Mrf49TxCmd 039F              __end_ofi1_Mrf49xaServe 0511  
                      ??_ExtIntInit 0020                  __end_of_Mrf49SpiRx 07FC  
                __end_of_Mrf49SpiTx 07B8                  __end_of_Mrf49RxSts 03AC  
                      _ExtIntDeinit 0002         __end_ofi1_Mrf49xaNeedsReset 0F4F  
                    __end_of_Sleepy 019F                   SoftI2cRxByte@data 0022  
              __size_of_Mcp9800Read 0015                   eepromRxBytes@data 0026  
              __end_of_SoftI2cStart 0290            __size_ofi1_Mrf49xaModeRx 0024  
                        ?_AdcDeinit 0070                      __end_of_extInt 0020  
                 eepromRxBytes@size 0027                          ?_AdcIsBusy 0070  
        __end_of_mrfRegset_SleepCnt 0804                          ?_AdcSample 0022  
                       __end_ofPL10 03FB                         __end_ofPL20 0414  
                       __end_ofPL12 0408                         __end_ofPL22 0419  
                       __end_ofPL14 0753                         __end_ofPL16 0602  
                       __end_ofPL18 040E                 start_initialization 0022  
                     _SoftI2cRxByte 0243                 __end_of_handleFwCmd 06C3  
                     _SoftI2cTxByte 0215                  __end_of_ExtIntInit 1000  
                 SoftI2cTxByte@data 0022                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002A  
                      ??_SoftI2cNop 0020                            ??_Sleepy 0022  
                      ??_PwrAdcInit 0020                        ??_PwrAdcWake 0020  
                   ?i1_Mrf49xaServe 0070                     _mrfRegset_RxCnt 0802  
                   _mrfRegset_TxCnt 0804                     _mrfRegset_Sleep 0839  
                         _PwrRfInit 0FD7                           _PwrRfWake 0F4F  
                          ??_extInt 0076       __size_of_Mrf49xaPacketPending 0009  
                      ??_PwrRfSleep 0024              __size_ofi1_Mrf49RxByte 0003  
            __size_ofi1_Mrf49TxByte 0005            __end_of_Mrf49xaModeSleep 0FB3  
                __end_of_PwrI2cInit 0F63                __end_ofi1_Mrf49RxCmd 043A  
              __end_ofi1_Mrf49TxCmd 0547                  __end_of_PwrI2cWake 03E9  
              __end_ofi1_Mrf49SpiRx 05F9                __end_ofi1_Mrf49SpiTx 05A9  
              __end_ofi1_Mrf49RxSts 05B6                           ___latbits 0001  
                     __pcstackBANK0 0020                      ?_SoftI2cRxByte 0070  
  __size_of_RfSendSampleWeatherNode 0044                      ?_SoftI2cTxByte 0070  
                 i1Mrf49TxByte@byte 0073                        ?_PwrI2cSleep 0070  
                __end_of_SoftI2cNop 0283                            ?_AdcInit 0070  
                __end_of_PwrAdcInit 042B                  __end_of_PwrAdcWake 0F85  
                      _rfTrcvStatus 00A0                        ?_SoftI2cInit 0070  
                      ?_SoftI2cStop 0070                __size_of_Mrf49RxByte 0003  
                __end_of_PwrRfSleep 03ED                __size_of_Mrf49TxByte 0005  
              __end_of_AdcGetResult 0000        __end_of_SoftI2cRepeatedStart 01D8  
                      ?_PwrAdcSleep 0070                __size_of_Mrf49xaInit 0060  
              __size_of_Mrf49xaTick 0090                          ?_PwrRfInit 0070  
                        ?_PwrRfWake 0070                      _PwrSensorSleep 03AE  
                     ?_Mcp9800Start 0070                           __pstrings 0800  
                       ??_AdcDeinit 0020                         ??_AdcIsBusy 0020  
                       _handleFwCmd 069F                         ??_AdcSample 0024  
                    __size_of_AdcGo 0002              __size_of_Mrf49xaModeRx 0025  
            __size_of_Mrf49xaModeTx 0024                        _mrfRegset_Rx 0825  
                      _mrfRegset_Tx 0831              __size_of_Mrf49xaReboot 0002  
                 ??i1_Mrf49xaModeRx 0073                    __CFG_WDTE$SWDTEN 0000  
                          _LATAbits 010C                            _LATBbits 010D  
                          _LATCbits 010E                       i1_Mrf49RxByte 0516  
           __end_of_mrfRegset_RxCnt 0803                       i1_Mrf49TxByte 0511  
           __end_of_mrfRegset_TxCnt 0805             __end_of_mrfRegset_Sleep 083F  
                         clear_ram0 0F54                       ??_AdcChSelect 0020  
                       _mrf49Status 0032                   _Mrf49xaFreePacket 06C3  
                    Mrf49xaModeRx@k 0023                      Mrf49xaModeTx@k 0023  
            __end_of_PwrSensorSleep 03B1               __size_of_SoftI2cStart 000D  
            __size_of_PwrSensorInit 0004              __size_of_PwrSensorWake 0003  
                     Mrf49RxCmd@cmd 0021                  ?_Mrf49xaFreePacket 0070  
                     Mrf49RxCmd@val 0022                      ??_Mcp9800Start 0024  
                     Mrf49TxCmd@cmd 0022                       Mrf49TxCmd@val 0021  
               ??_Mrf49xaFreePacket 0020                     ??_SoftI2cRxByte 0021  
                 _Mrf49xaNeedsReset 03E6                     ??_SoftI2cTxByte 0021  
                          _WPUAbits 020C                  ?_Mrf49xaNeedsReset 0070  
       __size_of_Mrf49xaAllocPacket 000D                    __size_of_AdcInit 000B  
               ??_Mrf49xaNeedsReset 0020              __size_of_eepromRxBytes 0024  
                    ?i1_Mrf49RxByte 0070                        _SoftI2cStart 0283  
                    ?i1_Mrf49TxByte 0070           __end_of_Mrf49xaFreePacket 06C8  
                         extInt@ofw 0077                            Sleepy@ms 0020  
                     _Mrf49xaModeRx 036F                       _Mrf49xaModeTx 0FB3  
                     _Mrf49xaReboot 0F52                      _mrfRegset_Init 0805  
                   ?_PwrSensorSleep 0070                         ??_PwrRfInit 0027  
                       ??_PwrRfWake 0024            __size_of_Mrf49xaRxPacket 000E  
             __size_ofi1_Mrf49RxCmd 000C               __size_ofi1_Mrf49TxCmd 000A  
             __size_ofi1_Mrf49SpiRx 0043               __size_ofi1_Mrf49SpiTx 0062  
                  i1Mrf49SpiRx@data 0070               __size_ofi1_Mrf49RxSts 000D  
               __end_of_AdcChSelect 03E6            __size_of_Mrf49xaTxPacket 0046  
                  i1Mrf49SpiTx@byte 0070                      SoftI2cRxByte@i 0023  
         __end_of_Mrf49xaNeedsReset 03E8                  __end_of__stringtab 0801  
          __size_of_Mrf49xaShutdown 0001                      SoftI2cTxByte@i 0023  
           _RfSendSampleWeatherNode 0602                       ?_HandlePacket 0070  
                          __ptext10 0F91                            __ptext11 0FD7  
                          __ptext20 0422                            __ptext12 03E8  
                          __ptext21 0094                            __ptext13 03AC  
                          __ptext30 0394                            __ptext22 0F63  
                          __ptext14 0F5A                            __ptext31 039F  
                          __ptext23 0419                            __ptext15 002E  
                          __ptext40 070E                            __ptext32 036C  
                          __ptext24 0FB3                            __ptext16 0F7F  
                          __ptext41 06C8                            __ptext33 0753  
                          __ptext25 0124                            __ptext17 0F85  
                          __ptext50 0243                            __ptext42 06C3  
                          __ptext34 075D                            __ptext26 0184  
                          __ptext18 0F71                            __ptext51 027C  
                          __ptext43 0FFA                            __ptext35 07B8  
                          __ptext27 0290                            __ptext19 0F78  
                          __ptext60 0511                            __ptext52 03B1  
                          __ptext44 03E6                            __ptext36 0653  
                          __ptext28 036F                            __ptext61 053D  
                          __ptext53 03DB                            __ptext45 01D8  
                          __ptext37 069F                            __ptext29 0367  
                          __ptext62 05A9                            __ptext54 03D9  
                          __ptext46 01AE                            __ptext38 01F1  
                          __ptext63 0516                            __ptext55 0000  
                          __ptext47 0215                            __ptext39 01C3  
                          __ptext64 042E                            __ptext56 03DF  
                          __ptext48 019F                            __ptext65 0547  
                          __ptext49 0283                       _PwrSensorInit 07FC  
                          __ptext66 05B6                            __ptext58 043A  
                          __ptext67 0F4C                            __ptext59 0519  
                          __ptext68 0002                       _PwrSensorWake 042B  
              _SoftI2cRepeatedStart 01C3                __size_of_PwrI2cSleep 0002  
             __size_of_AdcGetResult 0000                  _mrfRegset_SleepCnt 0803  
                  Mcp9800Read@tempH 0026                    Mcp9800Read@tempL 0027  
                  ??i1_Mrf49xaServe 0074                       __size_of_main 005E  
                      i1_Mrf49RxCmd 042E              __end_of_mrfRegset_Init 0825  
                Mrf49xaTxAck@packet 0026                        i1_Mrf49TxCmd 053D  
                      i1_Mrf49SpiRx 05B6                        i1_Mrf49SpiTx 0547  
                    ?_Mrf49xaModeRx 0070                      ?_Mrf49xaModeTx 0070  
                      i1_Mrf49RxSts 05A9                      ?_Mrf49xaReboot 0070  
              __size_of_SoftI2cInit 0008                __size_of_SoftI2cStop 000F  
                     ??_Mcp9800Read 0026                __size_of_PwrAdcSleep 0007  
                     _eepromRxBytes 01F1                   Mrf49xaModeSleep@k 0023  
                   i1Mrf49RxCmd@cmd 0071                     main@temperature 0030  
                   i1Mrf49RxCmd@val 0072                      ??_HandlePacket 0029  
      __size_ofi1_Mrf49xaNeedsReset 0003                  Mrf49xaTick@timeout 002C  
                        _INTCONbits 000B                   ?_Mrf49xaModeSleep 0070  
                   i1Mrf49TxCmd@cmd 0072                     i1Mrf49TxCmd@val 0071  
                    ?_PwrSensorInit 0070                        _AdcGetResult 0000  
                    ?_PwrSensorWake 0070                  ??_Mrf49xaModeSleep 0023  
             ?_SoftI2cRepeatedStart 0070                     ??i1_Mrf49RxByte 0073  
                          intlevel1 0000                     ??i1_Mrf49TxByte 0073  
      __end_of_Mrf49xaPacketPending 0422                __end_of_Mcp9800Start 01F1  
     RfSendSampleWeatherNode@packet 002A                   __CFG_CLKOUTEN$OFF 0000  
        __size_of_Mrf49xaFreePacket 0005                       ?_Mrf49xaTxAck 0070  
                       _AdcChSelect 03DF                        Mrf49xaInit@k 0026  
                     ?_Mrf49xaServe 0070                   Mrf49xaTick@packet 002D  
                    ?_eepromRxBytes 0024                     i1_Mrf49xaModeRx 0519  
         ??_RfSendSampleWeatherNode 002A          __size_of_Mrf49xaNeedsReset 0002  
                      ?_handleFwCmd 0070                 __end_of_Mcp9800Read 01C3  
                 ??_Mrf49xaRxPacket 0020                   ??_Mrf49xaTxPacket 0022  
                        _WDTCONbits 0097                   ??_Mrf49xaShutdown 0024  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0024                      ??_Mrf49xaTxAck 0026  
                  Mrf49xaServe@data 0025                      ??_Mrf49xaServe 0024  
                     ??_Mrf49xaInit 0026                       ??_Mrf49xaTick 002B  
                  Mrf49xaTxPacket@i 0024  



Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Sat Jul 05 12:58:16 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text74,local,class=CODE,merge=1,delta=2
    16                           	psect	text77,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  008C                     	;# 
    47  008D                     	;# 
    48  008E                     	;# 
    49  0091                     	;# 
    50  0092                     	;# 
    51  0093                     	;# 
    52  0095                     	;# 
    53  0096                     	;# 
    54  0097                     	;# 
    55  0099                     	;# 
    56  009A                     	;# 
    57  009B                     	;# 
    58  009B                     	;# 
    59  009C                     	;# 
    60  009D                     	;# 
    61  009E                     	;# 
    62  009F                     	;# 
    63  010C                     	;# 
    64  010D                     	;# 
    65  010E                     	;# 
    66  0111                     	;# 
    67  0112                     	;# 
    68  0113                     	;# 
    69  0114                     	;# 
    70  0115                     	;# 
    71  0116                     	;# 
    72  0117                     	;# 
    73  0118                     	;# 
    74  0119                     	;# 
    75  011D                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  018E                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0194                     	;# 
    85  0195                     	;# 
    86  0196                     	;# 
    87  0199                     	;# 
    88  019A                     	;# 
    89  019B                     	;# 
    90  019B                     	;# 
    91  019C                     	;# 
    92  019D                     	;# 
    93  019E                     	;# 
    94  019F                     	;# 
    95  020C                     	;# 
    96  020D                     	;# 
    97  0211                     	;# 
    98  0211                     	;# 
    99  0212                     	;# 
   100  0212                     	;# 
   101  0213                     	;# 
   102  0213                     	;# 
   103  0214                     	;# 
   104  0214                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0216                     	;# 
   109  0216                     	;# 
   110  0217                     	;# 
   111  0217                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0394                     	;# 
   116  0395                     	;# 
   117  0396                     	;# 
   118  0498                     	;# 
   119  0498                     	;# 
   120  0499                     	;# 
   121  049A                     	;# 
   122  049B                     	;# 
   123  049B                     	;# 
   124  049C                     	;# 
   125  049E                     	;# 
   126  049F                     	;# 
   127  0611                     	;# 
   128  0612                     	;# 
   129  0613                     	;# 
   130  0613                     	;# 
   131  0614                     	;# 
   132  0615                     	;# 
   133  0616                     	;# 
   134  0616                     	;# 
   135  0617                     	;# 
   136  0618                     	;# 
   137  0619                     	;# 
   138  0619                     	;# 
   139  061A                     	;# 
   140  061B                     	;# 
   141  061C                     	;# 
   142  061C                     	;# 
   143  0691                     	;# 
   144  0692                     	;# 
   145  0693                     	;# 
   146  0694                     	;# 
   147  0695                     	;# 
   148  0F0F                     	;# 
   149  0F10                     	;# 
   150  0F11                     	;# 
   151  0F12                     	;# 
   152  0F13                     	;# 
   153  0F14                     	;# 
   154  0F15                     	;# 
   155  0F16                     	;# 
   156  0F17                     	;# 
   157  0F18                     	;# 
   158  0F19                     	;# 
   159  0F1A                     	;# 
   160  0F1B                     	;# 
   161  0F1C                     	;# 
   162  0F1D                     	;# 
   163  0F1E                     	;# 
   164  0F1F                     	;# 
   165  0F20                     	;# 
   166  0F21                     	;# 
   167  0F22                     	;# 
   168  0F23                     	;# 
   169  0F24                     	;# 
   170  0F25                     	;# 
   171  0F26                     	;# 
   172  0F27                     	;# 
   173  0F28                     	;# 
   174  0F29                     	;# 
   175  0F2A                     	;# 
   176  0F2B                     	;# 
   177  0F2C                     	;# 
   178  0F2D                     	;# 
   179  0F2E                     	;# 
   180  0F2F                     	;# 
   181  0F8C                     	;# 
   182  0F8D                     	;# 
   183  0F91                     	;# 
   184  0F95                     	;# 
   185  0F96                     	;# 
   186  0F97                     	;# 
   187  0F9C                     	;# 
   188  0F9D                     	;# 
   189  0F9E                     	;# 
   190  0FE3                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019C                     	;# 
   275  019D                     	;# 
   276  019E                     	;# 
   277  019F                     	;# 
   278  020C                     	;# 
   279  020D                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0216                     	;# 
   292  0216                     	;# 
   293  0217                     	;# 
   294  0217                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  0393                     	;# 
   298  0394                     	;# 
   299  0395                     	;# 
   300  0396                     	;# 
   301  0498                     	;# 
   302  0498                     	;# 
   303  0499                     	;# 
   304  049A                     	;# 
   305  049B                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0611                     	;# 
   311  0612                     	;# 
   312  0613                     	;# 
   313  0613                     	;# 
   314  0614                     	;# 
   315  0615                     	;# 
   316  0616                     	;# 
   317  0616                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0F0F                     	;# 
   332  0F10                     	;# 
   333  0F11                     	;# 
   334  0F12                     	;# 
   335  0F13                     	;# 
   336  0F14                     	;# 
   337  0F15                     	;# 
   338  0F16                     	;# 
   339  0F17                     	;# 
   340  0F18                     	;# 
   341  0F19                     	;# 
   342  0F1A                     	;# 
   343  0F1B                     	;# 
   344  0F1C                     	;# 
   345  0F1D                     	;# 
   346  0F1E                     	;# 
   347  0F1F                     	;# 
   348  0F20                     	;# 
   349  0F21                     	;# 
   350  0F22                     	;# 
   351  0F23                     	;# 
   352  0F24                     	;# 
   353  0F25                     	;# 
   354  0F26                     	;# 
   355  0F27                     	;# 
   356  0F28                     	;# 
   357  0F29                     	;# 
   358  0F2A                     	;# 
   359  0F2B                     	;# 
   360  0F2C                     	;# 
   361  0F2D                     	;# 
   362  0F2E                     	;# 
   363  0F2F                     	;# 
   364  0F8C                     	;# 
   365  0F8D                     	;# 
   366  0F91                     	;# 
   367  0F95                     	;# 
   368  0F96                     	;# 
   369  0F97                     	;# 
   370  0F9C                     	;# 
   371  0F9D                     	;# 
   372  0F9E                     	;# 
   373  0FE3                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020C                     	;# 
   462  020D                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0391                     	;# 
   479  0392                     	;# 
   480  0393                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0498                     	;# 
   485  0498                     	;# 
   486  0499                     	;# 
   487  049A                     	;# 
   488  049B                     	;# 
   489  049B                     	;# 
   490  049C                     	;# 
   491  049E                     	;# 
   492  049F                     	;# 
   493  0611                     	;# 
   494  0612                     	;# 
   495  0613                     	;# 
   496  0613                     	;# 
   497  0614                     	;# 
   498  0615                     	;# 
   499  0616                     	;# 
   500  0616                     	;# 
   501  0617                     	;# 
   502  0618                     	;# 
   503  0619                     	;# 
   504  0619                     	;# 
   505  061A                     	;# 
   506  061B                     	;# 
   507  061C                     	;# 
   508  061C                     	;# 
   509  0691                     	;# 
   510  0692                     	;# 
   511  0693                     	;# 
   512  0694                     	;# 
   513  0695                     	;# 
   514  0F0F                     	;# 
   515  0F10                     	;# 
   516  0F11                     	;# 
   517  0F12                     	;# 
   518  0F13                     	;# 
   519  0F14                     	;# 
   520  0F15                     	;# 
   521  0F16                     	;# 
   522  0F17                     	;# 
   523  0F18                     	;# 
   524  0F19                     	;# 
   525  0F1A                     	;# 
   526  0F1B                     	;# 
   527  0F1C                     	;# 
   528  0F1D                     	;# 
   529  0F1E                     	;# 
   530  0F1F                     	;# 
   531  0F20                     	;# 
   532  0F21                     	;# 
   533  0F22                     	;# 
   534  0F23                     	;# 
   535  0F24                     	;# 
   536  0F25                     	;# 
   537  0F26                     	;# 
   538  0F27                     	;# 
   539  0F28                     	;# 
   540  0F29                     	;# 
   541  0F2A                     	;# 
   542  0F2B                     	;# 
   543  0F2C                     	;# 
   544  0F2D                     	;# 
   545  0F2E                     	;# 
   546  0F2F                     	;# 
   547  0F8C                     	;# 
   548  0F8D                     	;# 
   549  0F91                     	;# 
   550  0F95                     	;# 
   551  0F96                     	;# 
   552  0F97                     	;# 
   553  0F9C                     	;# 
   554  0F9D                     	;# 
   555  0F9E                     	;# 
   556  0FE3                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011D                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018E                     	;# 
   628  0191                     	;# 
   629  0191                     	;# 
   630  0192                     	;# 
   631  0193                     	;# 
   632  0193                     	;# 
   633  0194                     	;# 
   634  0195                     	;# 
   635  0196                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020D                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0391                     	;# 
   662  0392                     	;# 
   663  0393                     	;# 
   664  0394                     	;# 
   665  0395                     	;# 
   666  0396                     	;# 
   667  0498                     	;# 
   668  0498                     	;# 
   669  0499                     	;# 
   670  049A                     	;# 
   671  049B                     	;# 
   672  049B                     	;# 
   673  049C                     	;# 
   674  049E                     	;# 
   675  049F                     	;# 
   676  0611                     	;# 
   677  0612                     	;# 
   678  0613                     	;# 
   679  0613                     	;# 
   680  0614                     	;# 
   681  0615                     	;# 
   682  0616                     	;# 
   683  0616                     	;# 
   684  0617                     	;# 
   685  0618                     	;# 
   686  0619                     	;# 
   687  0619                     	;# 
   688  061A                     	;# 
   689  061B                     	;# 
   690  061C                     	;# 
   691  061C                     	;# 
   692  0691                     	;# 
   693  0692                     	;# 
   694  0693                     	;# 
   695  0694                     	;# 
   696  0695                     	;# 
   697  0F0F                     	;# 
   698  0F10                     	;# 
   699  0F11                     	;# 
   700  0F12                     	;# 
   701  0F13                     	;# 
   702  0F14                     	;# 
   703  0F15                     	;# 
   704  0F16                     	;# 
   705  0F17                     	;# 
   706  0F18                     	;# 
   707  0F19                     	;# 
   708  0F1A                     	;# 
   709  0F1B                     	;# 
   710  0F1C                     	;# 
   711  0F1D                     	;# 
   712  0F1E                     	;# 
   713  0F1F                     	;# 
   714  0F20                     	;# 
   715  0F21                     	;# 
   716  0F22                     	;# 
   717  0F23                     	;# 
   718  0F24                     	;# 
   719  0F25                     	;# 
   720  0F26                     	;# 
   721  0F27                     	;# 
   722  0F28                     	;# 
   723  0F29                     	;# 
   724  0F2A                     	;# 
   725  0F2B                     	;# 
   726  0F2C                     	;# 
   727  0F2D                     	;# 
   728  0F2E                     	;# 
   729  0F2F                     	;# 
   730  0F8C                     	;# 
   731  0F8D                     	;# 
   732  0F91                     	;# 
   733  0F95                     	;# 
   734  0F96                     	;# 
   735  0F97                     	;# 
   736  0F9C                     	;# 
   737  0F9D                     	;# 
   738  0F9E                     	;# 
   739  0FE3                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  0011                     	;# 
   767  0012                     	;# 
   768  0013                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  0091                     	;# 
   782  0092                     	;# 
   783  0093                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0111                     	;# 
   799  0112                     	;# 
   800  0113                     	;# 
   801  0114                     	;# 
   802  0115                     	;# 
   803  0116                     	;# 
   804  0117                     	;# 
   805  0118                     	;# 
   806  0119                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0199                     	;# 
   820  019A                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019C                     	;# 
   824  019D                     	;# 
   825  019E                     	;# 
   826  019F                     	;# 
   827  020C                     	;# 
   828  020D                     	;# 
   829  0211                     	;# 
   830  0211                     	;# 
   831  0212                     	;# 
   832  0212                     	;# 
   833  0213                     	;# 
   834  0213                     	;# 
   835  0214                     	;# 
   836  0214                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0216                     	;# 
   841  0216                     	;# 
   842  0217                     	;# 
   843  0217                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  0394                     	;# 
   848  0395                     	;# 
   849  0396                     	;# 
   850  0498                     	;# 
   851  0498                     	;# 
   852  0499                     	;# 
   853  049A                     	;# 
   854  049B                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049E                     	;# 
   858  049F                     	;# 
   859  0611                     	;# 
   860  0612                     	;# 
   861  0613                     	;# 
   862  0613                     	;# 
   863  0614                     	;# 
   864  0615                     	;# 
   865  0616                     	;# 
   866  0616                     	;# 
   867  0617                     	;# 
   868  0618                     	;# 
   869  0619                     	;# 
   870  0619                     	;# 
   871  061A                     	;# 
   872  061B                     	;# 
   873  061C                     	;# 
   874  061C                     	;# 
   875  0691                     	;# 
   876  0692                     	;# 
   877  0693                     	;# 
   878  0694                     	;# 
   879  0695                     	;# 
   880  0F0F                     	;# 
   881  0F10                     	;# 
   882  0F11                     	;# 
   883  0F12                     	;# 
   884  0F13                     	;# 
   885  0F14                     	;# 
   886  0F15                     	;# 
   887  0F16                     	;# 
   888  0F17                     	;# 
   889  0F18                     	;# 
   890  0F19                     	;# 
   891  0F1A                     	;# 
   892  0F1B                     	;# 
   893  0F1C                     	;# 
   894  0F1D                     	;# 
   895  0F1E                     	;# 
   896  0F1F                     	;# 
   897  0F20                     	;# 
   898  0F21                     	;# 
   899  0F22                     	;# 
   900  0F23                     	;# 
   901  0F24                     	;# 
   902  0F25                     	;# 
   903  0F26                     	;# 
   904  0F27                     	;# 
   905  0F28                     	;# 
   906  0F29                     	;# 
   907  0F2A                     	;# 
   908  0F2B                     	;# 
   909  0F2C                     	;# 
   910  0F2D                     	;# 
   911  0F2E                     	;# 
   912  0F2F                     	;# 
   913  0F8C                     	;# 
   914  0F8D                     	;# 
   915  0F91                     	;# 
   916  0F95                     	;# 
   917  0F96                     	;# 
   918  0F97                     	;# 
   919  0F9C                     	;# 
   920  0F9D                     	;# 
   921  0F9E                     	;# 
   922  0FE3                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0013                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  009F                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0111                     	;# 
   982  0112                     	;# 
   983  0113                     	;# 
   984  0114                     	;# 
   985  0115                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  0118                     	;# 
   989  0119                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020C                     	;# 
  1011  020D                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0391                     	;# 
  1028  0392                     	;# 
  1029  0393                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0498                     	;# 
  1034  0498                     	;# 
  1035  0499                     	;# 
  1036  049A                     	;# 
  1037  049B                     	;# 
  1038  049B                     	;# 
  1039  049C                     	;# 
  1040  049E                     	;# 
  1041  049F                     	;# 
  1042  0611                     	;# 
  1043  0612                     	;# 
  1044  0613                     	;# 
  1045  0613                     	;# 
  1046  0614                     	;# 
  1047  0615                     	;# 
  1048  0616                     	;# 
  1049  0616                     	;# 
  1050  0617                     	;# 
  1051  0618                     	;# 
  1052  0619                     	;# 
  1053  0619                     	;# 
  1054  061A                     	;# 
  1055  061B                     	;# 
  1056  061C                     	;# 
  1057  061C                     	;# 
  1058  0691                     	;# 
  1059  0692                     	;# 
  1060  0693                     	;# 
  1061  0694                     	;# 
  1062  0695                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F8C                     	;# 
  1097  0F8D                     	;# 
  1098  0F91                     	;# 
  1099  0F95                     	;# 
  1100  0F96                     	;# 
  1101  0F97                     	;# 
  1102  0F9C                     	;# 
  1103  0F9D                     	;# 
  1104  0F9E                     	;# 
  1105  0FE3                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000D                     	;# 
  1131  000E                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  0091                     	;# 
  1148  0092                     	;# 
  1149  0093                     	;# 
  1150  0095                     	;# 
  1151  0096                     	;# 
  1152  0097                     	;# 
  1153  0099                     	;# 
  1154  009A                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  011D                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0391                     	;# 
  1211  0392                     	;# 
  1212  0393                     	;# 
  1213  0394                     	;# 
  1214  0395                     	;# 
  1215  0396                     	;# 
  1216  0498                     	;# 
  1217  0498                     	;# 
  1218  0499                     	;# 
  1219  049A                     	;# 
  1220  049B                     	;# 
  1221  049B                     	;# 
  1222  049C                     	;# 
  1223  049E                     	;# 
  1224  049F                     	;# 
  1225  0611                     	;# 
  1226  0612                     	;# 
  1227  0613                     	;# 
  1228  0613                     	;# 
  1229  0614                     	;# 
  1230  0615                     	;# 
  1231  0616                     	;# 
  1232  0616                     	;# 
  1233  0617                     	;# 
  1234  0618                     	;# 
  1235  0619                     	;# 
  1236  0619                     	;# 
  1237  061A                     	;# 
  1238  061B                     	;# 
  1239  061C                     	;# 
  1240  061C                     	;# 
  1241  0691                     	;# 
  1242  0692                     	;# 
  1243  0693                     	;# 
  1244  0694                     	;# 
  1245  0695                     	;# 
  1246  0F0F                     	;# 
  1247  0F10                     	;# 
  1248  0F11                     	;# 
  1249  0F12                     	;# 
  1250  0F13                     	;# 
  1251  0F14                     	;# 
  1252  0F15                     	;# 
  1253  0F16                     	;# 
  1254  0F17                     	;# 
  1255  0F18                     	;# 
  1256  0F19                     	;# 
  1257  0F1A                     	;# 
  1258  0F1B                     	;# 
  1259  0F1C                     	;# 
  1260  0F1D                     	;# 
  1261  0F1E                     	;# 
  1262  0F1F                     	;# 
  1263  0F20                     	;# 
  1264  0F21                     	;# 
  1265  0F22                     	;# 
  1266  0F23                     	;# 
  1267  0F24                     	;# 
  1268  0F25                     	;# 
  1269  0F26                     	;# 
  1270  0F27                     	;# 
  1271  0F28                     	;# 
  1272  0F29                     	;# 
  1273  0F2A                     	;# 
  1274  0F2B                     	;# 
  1275  0F2C                     	;# 
  1276  0F2D                     	;# 
  1277  0F2E                     	;# 
  1278  0F2F                     	;# 
  1279  0F8C                     	;# 
  1280  0F8D                     	;# 
  1281  0F91                     	;# 
  1282  0F95                     	;# 
  1283  0F96                     	;# 
  1284  0F97                     	;# 
  1285  0F9C                     	;# 
  1286  0F9D                     	;# 
  1287  0F9E                     	;# 
  1288  0FE3                     	;# 
  1289  0FE4                     	;# 
  1290  0FE5                     	;# 
  1291  0FE6                     	;# 
  1292  0FE7                     	;# 
  1293  0FE8                     	;# 
  1294  0FE9                     	;# 
  1295  0FEA                     	;# 
  1296  0FEB                     	;# 
  1297  0FED                     	;# 
  1298  0FEE                     	;# 
  1299  0FEF                     	;# 
  1300  0000                     	;# 
  1301  0001                     	;# 
  1302  0002                     	;# 
  1303  0003                     	;# 
  1304  0004                     	;# 
  1305  0005                     	;# 
  1306  0006                     	;# 
  1307  0007                     	;# 
  1308  0008                     	;# 
  1309  0009                     	;# 
  1310  000A                     	;# 
  1311  000B                     	;# 
  1312  000C                     	;# 
  1313  000D                     	;# 
  1314  000E                     	;# 
  1315  0011                     	;# 
  1316  0012                     	;# 
  1317  0013                     	;# 
  1318  0015                     	;# 
  1319  0016                     	;# 
  1320  0016                     	;# 
  1321  0017                     	;# 
  1322  0018                     	;# 
  1323  0019                     	;# 
  1324  001A                     	;# 
  1325  001B                     	;# 
  1326  001C                     	;# 
  1327  008C                     	;# 
  1328  008D                     	;# 
  1329  008E                     	;# 
  1330  0091                     	;# 
  1331  0092                     	;# 
  1332  0093                     	;# 
  1333  0095                     	;# 
  1334  0096                     	;# 
  1335  0097                     	;# 
  1336  0099                     	;# 
  1337  009A                     	;# 
  1338  009B                     	;# 
  1339  009B                     	;# 
  1340  009C                     	;# 
  1341  009D                     	;# 
  1342  009E                     	;# 
  1343  009F                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0111                     	;# 
  1348  0112                     	;# 
  1349  0113                     	;# 
  1350  0114                     	;# 
  1351  0115                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  0118                     	;# 
  1355  0119                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0498                     	;# 
  1400  0498                     	;# 
  1401  0499                     	;# 
  1402  049A                     	;# 
  1403  049B                     	;# 
  1404  049B                     	;# 
  1405  049C                     	;# 
  1406  049E                     	;# 
  1407  049F                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0613                     	;# 
  1412  0614                     	;# 
  1413  0615                     	;# 
  1414  0616                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  0619                     	;# 
  1420  061A                     	;# 
  1421  061B                     	;# 
  1422  061C                     	;# 
  1423  061C                     	;# 
  1424  0691                     	;# 
  1425  0692                     	;# 
  1426  0693                     	;# 
  1427  0694                     	;# 
  1428  0695                     	;# 
  1429  0F0F                     	;# 
  1430  0F10                     	;# 
  1431  0F11                     	;# 
  1432  0F12                     	;# 
  1433  0F13                     	;# 
  1434  0F14                     	;# 
  1435  0F15                     	;# 
  1436  0F16                     	;# 
  1437  0F17                     	;# 
  1438  0F18                     	;# 
  1439  0F19                     	;# 
  1440  0F1A                     	;# 
  1441  0F1B                     	;# 
  1442  0F1C                     	;# 
  1443  0F1D                     	;# 
  1444  0F1E                     	;# 
  1445  0F1F                     	;# 
  1446  0F20                     	;# 
  1447  0F21                     	;# 
  1448  0F22                     	;# 
  1449  0F23                     	;# 
  1450  0F24                     	;# 
  1451  0F25                     	;# 
  1452  0F26                     	;# 
  1453  0F27                     	;# 
  1454  0F28                     	;# 
  1455  0F29                     	;# 
  1456  0F2A                     	;# 
  1457  0F2B                     	;# 
  1458  0F2C                     	;# 
  1459  0F2D                     	;# 
  1460  0F2E                     	;# 
  1461  0F2F                     	;# 
  1462  0F8C                     	;# 
  1463  0F8D                     	;# 
  1464  0F91                     	;# 
  1465  0F95                     	;# 
  1466  0F96                     	;# 
  1467  0F97                     	;# 
  1468  0F9C                     	;# 
  1469  0F9D                     	;# 
  1470  0F9E                     	;# 
  1471  0FE3                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0011                     	;# 
  1499  0012                     	;# 
  1500  0013                     	;# 
  1501  0015                     	;# 
  1502  0016                     	;# 
  1503  0016                     	;# 
  1504  0017                     	;# 
  1505  0018                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  009F                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020D                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0498                     	;# 
  1583  0498                     	;# 
  1584  0499                     	;# 
  1585  049A                     	;# 
  1586  049B                     	;# 
  1587  049B                     	;# 
  1588  049C                     	;# 
  1589  049E                     	;# 
  1590  049F                     	;# 
  1591  0611                     	;# 
  1592  0612                     	;# 
  1593  0613                     	;# 
  1594  0613                     	;# 
  1595  0614                     	;# 
  1596  0615                     	;# 
  1597  0616                     	;# 
  1598  0616                     	;# 
  1599  0617                     	;# 
  1600  0618                     	;# 
  1601  0619                     	;# 
  1602  0619                     	;# 
  1603  061A                     	;# 
  1604  061B                     	;# 
  1605  061C                     	;# 
  1606  061C                     	;# 
  1607  0691                     	;# 
  1608  0692                     	;# 
  1609  0693                     	;# 
  1610  0694                     	;# 
  1611  0695                     	;# 
  1612  0F0F                     	;# 
  1613  0F10                     	;# 
  1614  0F11                     	;# 
  1615  0F12                     	;# 
  1616  0F13                     	;# 
  1617  0F14                     	;# 
  1618  0F15                     	;# 
  1619  0F16                     	;# 
  1620  0F17                     	;# 
  1621  0F18                     	;# 
  1622  0F19                     	;# 
  1623  0F1A                     	;# 
  1624  0F1B                     	;# 
  1625  0F1C                     	;# 
  1626  0F1D                     	;# 
  1627  0F1E                     	;# 
  1628  0F1F                     	;# 
  1629  0F20                     	;# 
  1630  0F21                     	;# 
  1631  0F22                     	;# 
  1632  0F23                     	;# 
  1633  0F24                     	;# 
  1634  0F25                     	;# 
  1635  0F26                     	;# 
  1636  0F27                     	;# 
  1637  0F28                     	;# 
  1638  0F29                     	;# 
  1639  0F2A                     	;# 
  1640  0F2B                     	;# 
  1641  0F2C                     	;# 
  1642  0F2D                     	;# 
  1643  0F2E                     	;# 
  1644  0F2F                     	;# 
  1645  0F8C                     	;# 
  1646  0F8D                     	;# 
  1647  0F91                     	;# 
  1648  0F95                     	;# 
  1649  0F96                     	;# 
  1650  0F97                     	;# 
  1651  0F9C                     	;# 
  1652  0F9D                     	;# 
  1653  0F9E                     	;# 
  1654  0FE3                     	;# 
  1655  0FE4                     	;# 
  1656  0FE5                     	;# 
  1657  0FE6                     	;# 
  1658  0FE7                     	;# 
  1659  0FE8                     	;# 
  1660  0FE9                     	;# 
  1661  0FEA                     	;# 
  1662  0FEB                     	;# 
  1663  0FED                     	;# 
  1664  0FEE                     	;# 
  1665  0FEF                     	;# 
  1666  0000                     	;# 
  1667  0001                     	;# 
  1668  0002                     	;# 
  1669  0003                     	;# 
  1670  0004                     	;# 
  1671  0005                     	;# 
  1672  0006                     	;# 
  1673  0007                     	;# 
  1674  0008                     	;# 
  1675  0009                     	;# 
  1676  000A                     	;# 
  1677  000B                     	;# 
  1678  000C                     	;# 
  1679  000D                     	;# 
  1680  000E                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  0091                     	;# 
  1697  0092                     	;# 
  1698  0093                     	;# 
  1699  0095                     	;# 
  1700  0096                     	;# 
  1701  0097                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  009F                     	;# 
  1710  010C                     	;# 
  1711  010D                     	;# 
  1712  010E                     	;# 
  1713  0111                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  0118                     	;# 
  1721  0119                     	;# 
  1722  011D                     	;# 
  1723  018C                     	;# 
  1724  018D                     	;# 
  1725  018E                     	;# 
  1726  0191                     	;# 
  1727  0191                     	;# 
  1728  0192                     	;# 
  1729  0193                     	;# 
  1730  0193                     	;# 
  1731  0194                     	;# 
  1732  0195                     	;# 
  1733  0196                     	;# 
  1734  0199                     	;# 
  1735  019A                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019C                     	;# 
  1739  019D                     	;# 
  1740  019E                     	;# 
  1741  019F                     	;# 
  1742  020C                     	;# 
  1743  020D                     	;# 
  1744  0211                     	;# 
  1745  0211                     	;# 
  1746  0212                     	;# 
  1747  0212                     	;# 
  1748  0213                     	;# 
  1749  0213                     	;# 
  1750  0214                     	;# 
  1751  0214                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0216                     	;# 
  1756  0216                     	;# 
  1757  0217                     	;# 
  1758  0217                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0498                     	;# 
  1766  0498                     	;# 
  1767  0499                     	;# 
  1768  049A                     	;# 
  1769  049B                     	;# 
  1770  049B                     	;# 
  1771  049C                     	;# 
  1772  049E                     	;# 
  1773  049F                     	;# 
  1774  0611                     	;# 
  1775  0612                     	;# 
  1776  0613                     	;# 
  1777  0613                     	;# 
  1778  0614                     	;# 
  1779  0615                     	;# 
  1780  0616                     	;# 
  1781  0616                     	;# 
  1782  0617                     	;# 
  1783  0618                     	;# 
  1784  0619                     	;# 
  1785  0619                     	;# 
  1786  061A                     	;# 
  1787  061B                     	;# 
  1788  061C                     	;# 
  1789  061C                     	;# 
  1790  0691                     	;# 
  1791  0692                     	;# 
  1792  0693                     	;# 
  1793  0694                     	;# 
  1794  0695                     	;# 
  1795  0F0F                     	;# 
  1796  0F10                     	;# 
  1797  0F11                     	;# 
  1798  0F12                     	;# 
  1799  0F13                     	;# 
  1800  0F14                     	;# 
  1801  0F15                     	;# 
  1802  0F16                     	;# 
  1803  0F17                     	;# 
  1804  0F18                     	;# 
  1805  0F19                     	;# 
  1806  0F1A                     	;# 
  1807  0F1B                     	;# 
  1808  0F1C                     	;# 
  1809  0F1D                     	;# 
  1810  0F1E                     	;# 
  1811  0F1F                     	;# 
  1812  0F20                     	;# 
  1813  0F21                     	;# 
  1814  0F22                     	;# 
  1815  0F23                     	;# 
  1816  0F24                     	;# 
  1817  0F25                     	;# 
  1818  0F26                     	;# 
  1819  0F27                     	;# 
  1820  0F28                     	;# 
  1821  0F29                     	;# 
  1822  0F2A                     	;# 
  1823  0F2B                     	;# 
  1824  0F2C                     	;# 
  1825  0F2D                     	;# 
  1826  0F2E                     	;# 
  1827  0F2F                     	;# 
  1828  0F8C                     	;# 
  1829  0F8D                     	;# 
  1830  0F91                     	;# 
  1831  0F95                     	;# 
  1832  0F96                     	;# 
  1833  0F97                     	;# 
  1834  0F9C                     	;# 
  1835  0F9D                     	;# 
  1836  0F9E                     	;# 
  1837  0FE3                     	;# 
  1838  0FE4                     	;# 
  1839  0FE5                     	;# 
  1840  0FE6                     	;# 
  1841  0FE7                     	;# 
  1842  0FE8                     	;# 
  1843  0FE9                     	;# 
  1844  0FEA                     	;# 
  1845  0FEB                     	;# 
  1846  0FED                     	;# 
  1847  0FEE                     	;# 
  1848  0FEF                     	;# 
  1849  0000                     	;# 
  1850  0001                     	;# 
  1851  0002                     	;# 
  1852  0003                     	;# 
  1853  0004                     	;# 
  1854  0005                     	;# 
  1855  0006                     	;# 
  1856  0007                     	;# 
  1857  0008                     	;# 
  1858  0009                     	;# 
  1859  000A                     	;# 
  1860  000B                     	;# 
  1861  000C                     	;# 
  1862  000D                     	;# 
  1863  000E                     	;# 
  1864  0011                     	;# 
  1865  0012                     	;# 
  1866  0013                     	;# 
  1867  0015                     	;# 
  1868  0016                     	;# 
  1869  0016                     	;# 
  1870  0017                     	;# 
  1871  0018                     	;# 
  1872  0019                     	;# 
  1873  001A                     	;# 
  1874  001B                     	;# 
  1875  001C                     	;# 
  1876  008C                     	;# 
  1877  008D                     	;# 
  1878  008E                     	;# 
  1879  0091                     	;# 
  1880  0092                     	;# 
  1881  0093                     	;# 
  1882  0095                     	;# 
  1883  0096                     	;# 
  1884  0097                     	;# 
  1885  0099                     	;# 
  1886  009A                     	;# 
  1887  009B                     	;# 
  1888  009B                     	;# 
  1889  009C                     	;# 
  1890  009D                     	;# 
  1891  009E                     	;# 
  1892  009F                     	;# 
  1893  010C                     	;# 
  1894  010D                     	;# 
  1895  010E                     	;# 
  1896  0111                     	;# 
  1897  0112                     	;# 
  1898  0113                     	;# 
  1899  0114                     	;# 
  1900  0115                     	;# 
  1901  0116                     	;# 
  1902  0117                     	;# 
  1903  0118                     	;# 
  1904  0119                     	;# 
  1905  011D                     	;# 
  1906  018C                     	;# 
  1907  018D                     	;# 
  1908  018E                     	;# 
  1909  0191                     	;# 
  1910  0191                     	;# 
  1911  0192                     	;# 
  1912  0193                     	;# 
  1913  0193                     	;# 
  1914  0194                     	;# 
  1915  0195                     	;# 
  1916  0196                     	;# 
  1917  0199                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019C                     	;# 
  1922  019D                     	;# 
  1923  019E                     	;# 
  1924  019F                     	;# 
  1925  020C                     	;# 
  1926  020D                     	;# 
  1927  0211                     	;# 
  1928  0211                     	;# 
  1929  0212                     	;# 
  1930  0212                     	;# 
  1931  0213                     	;# 
  1932  0213                     	;# 
  1933  0214                     	;# 
  1934  0214                     	;# 
  1935  0215                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0216                     	;# 
  1939  0216                     	;# 
  1940  0217                     	;# 
  1941  0217                     	;# 
  1942  0391                     	;# 
  1943  0392                     	;# 
  1944  0393                     	;# 
  1945  0394                     	;# 
  1946  0395                     	;# 
  1947  0396                     	;# 
  1948  0498                     	;# 
  1949  0498                     	;# 
  1950  0499                     	;# 
  1951  049A                     	;# 
  1952  049B                     	;# 
  1953  049B                     	;# 
  1954  049C                     	;# 
  1955  049E                     	;# 
  1956  049F                     	;# 
  1957  0611                     	;# 
  1958  0612                     	;# 
  1959  0613                     	;# 
  1960  0613                     	;# 
  1961  0614                     	;# 
  1962  0615                     	;# 
  1963  0616                     	;# 
  1964  0616                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0F0F                     	;# 
  1979  0F10                     	;# 
  1980  0F11                     	;# 
  1981  0F12                     	;# 
  1982  0F13                     	;# 
  1983  0F14                     	;# 
  1984  0F15                     	;# 
  1985  0F16                     	;# 
  1986  0F17                     	;# 
  1987  0F18                     	;# 
  1988  0F19                     	;# 
  1989  0F1A                     	;# 
  1990  0F1B                     	;# 
  1991  0F1C                     	;# 
  1992  0F1D                     	;# 
  1993  0F1E                     	;# 
  1994  0F1F                     	;# 
  1995  0F20                     	;# 
  1996  0F21                     	;# 
  1997  0F22                     	;# 
  1998  0F23                     	;# 
  1999  0F24                     	;# 
  2000  0F25                     	;# 
  2001  0F26                     	;# 
  2002  0F27                     	;# 
  2003  0F28                     	;# 
  2004  0F29                     	;# 
  2005  0F2A                     	;# 
  2006  0F2B                     	;# 
  2007  0F2C                     	;# 
  2008  0F2D                     	;# 
  2009  0F2E                     	;# 
  2010  0F2F                     	;# 
  2011  0F8C                     	;# 
  2012  0F8D                     	;# 
  2013  0F91                     	;# 
  2014  0F95                     	;# 
  2015  0F96                     	;# 
  2016  0F97                     	;# 
  2017  0F9C                     	;# 
  2018  0F9D                     	;# 
  2019  0F9E                     	;# 
  2020  0FE3                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032  0000                     	;# 
  2033  0001                     	;# 
  2034  0002                     	;# 
  2035  0003                     	;# 
  2036  0004                     	;# 
  2037  0005                     	;# 
  2038  0006                     	;# 
  2039  0007                     	;# 
  2040  0008                     	;# 
  2041  0009                     	;# 
  2042  000A                     	;# 
  2043  000B                     	;# 
  2044  000C                     	;# 
  2045  000D                     	;# 
  2046  000E                     	;# 
  2047  0011                     	;# 
  2048  0012                     	;# 
  2049  0013                     	;# 
  2050  0015                     	;# 
  2051  0016                     	;# 
  2052  0016                     	;# 
  2053  0017                     	;# 
  2054  0018                     	;# 
  2055  0019                     	;# 
  2056  001A                     	;# 
  2057  001B                     	;# 
  2058  001C                     	;# 
  2059  008C                     	;# 
  2060  008D                     	;# 
  2061  008E                     	;# 
  2062  0091                     	;# 
  2063  0092                     	;# 
  2064  0093                     	;# 
  2065  0095                     	;# 
  2066  0096                     	;# 
  2067  0097                     	;# 
  2068  0099                     	;# 
  2069  009A                     	;# 
  2070  009B                     	;# 
  2071  009B                     	;# 
  2072  009C                     	;# 
  2073  009D                     	;# 
  2074  009E                     	;# 
  2075  009F                     	;# 
  2076  010C                     	;# 
  2077  010D                     	;# 
  2078  010E                     	;# 
  2079  0111                     	;# 
  2080  0112                     	;# 
  2081  0113                     	;# 
  2082  0114                     	;# 
  2083  0115                     	;# 
  2084  0116                     	;# 
  2085  0117                     	;# 
  2086  0118                     	;# 
  2087  0119                     	;# 
  2088  011D                     	;# 
  2089  018C                     	;# 
  2090  018D                     	;# 
  2091  018E                     	;# 
  2092  0191                     	;# 
  2093  0191                     	;# 
  2094  0192                     	;# 
  2095  0193                     	;# 
  2096  0193                     	;# 
  2097  0194                     	;# 
  2098  0195                     	;# 
  2099  0196                     	;# 
  2100  0199                     	;# 
  2101  019A                     	;# 
  2102  019B                     	;# 
  2103  019B                     	;# 
  2104  019C                     	;# 
  2105  019D                     	;# 
  2106  019E                     	;# 
  2107  019F                     	;# 
  2108  020C                     	;# 
  2109  020D                     	;# 
  2110  0211                     	;# 
  2111  0211                     	;# 
  2112  0212                     	;# 
  2113  0212                     	;# 
  2114  0213                     	;# 
  2115  0213                     	;# 
  2116  0214                     	;# 
  2117  0214                     	;# 
  2118  0215                     	;# 
  2119  0215                     	;# 
  2120  0215                     	;# 
  2121  0216                     	;# 
  2122  0216                     	;# 
  2123  0217                     	;# 
  2124  0217                     	;# 
  2125  0391                     	;# 
  2126  0392                     	;# 
  2127  0393                     	;# 
  2128  0394                     	;# 
  2129  0395                     	;# 
  2130  0396                     	;# 
  2131  0498                     	;# 
  2132  0498                     	;# 
  2133  0499                     	;# 
  2134  049A                     	;# 
  2135  049B                     	;# 
  2136  049B                     	;# 
  2137  049C                     	;# 
  2138  049E                     	;# 
  2139  049F                     	;# 
  2140  0611                     	;# 
  2141  0612                     	;# 
  2142  0613                     	;# 
  2143  0613                     	;# 
  2144  0614                     	;# 
  2145  0615                     	;# 
  2146  0616                     	;# 
  2147  0616                     	;# 
  2148  0617                     	;# 
  2149  0618                     	;# 
  2150  0619                     	;# 
  2151  0619                     	;# 
  2152  061A                     	;# 
  2153  061B                     	;# 
  2154  061C                     	;# 
  2155  061C                     	;# 
  2156  0691                     	;# 
  2157  0692                     	;# 
  2158  0693                     	;# 
  2159  0694                     	;# 
  2160  0695                     	;# 
  2161  0F0F                     	;# 
  2162  0F10                     	;# 
  2163  0F11                     	;# 
  2164  0F12                     	;# 
  2165  0F13                     	;# 
  2166  0F14                     	;# 
  2167  0F15                     	;# 
  2168  0F16                     	;# 
  2169  0F17                     	;# 
  2170  0F18                     	;# 
  2171  0F19                     	;# 
  2172  0F1A                     	;# 
  2173  0F1B                     	;# 
  2174  0F1C                     	;# 
  2175  0F1D                     	;# 
  2176  0F1E                     	;# 
  2177  0F1F                     	;# 
  2178  0F20                     	;# 
  2179  0F21                     	;# 
  2180  0F22                     	;# 
  2181  0F23                     	;# 
  2182  0F24                     	;# 
  2183  0F25                     	;# 
  2184  0F26                     	;# 
  2185  0F27                     	;# 
  2186  0F28                     	;# 
  2187  0F29                     	;# 
  2188  0F2A                     	;# 
  2189  0F2B                     	;# 
  2190  0F2C                     	;# 
  2191  0F2D                     	;# 
  2192  0F2E                     	;# 
  2193  0F2F                     	;# 
  2194  0F8C                     	;# 
  2195  0F8D                     	;# 
  2196  0F91                     	;# 
  2197  0F95                     	;# 
  2198  0F96                     	;# 
  2199  0F97                     	;# 
  2200  0F9C                     	;# 
  2201  0F9D                     	;# 
  2202  0F9E                     	;# 
  2203  0FE3                     	;# 
  2204  0FE4                     	;# 
  2205  0FE5                     	;# 
  2206  0FE6                     	;# 
  2207  0FE7                     	;# 
  2208  0FE8                     	;# 
  2209  0FE9                     	;# 
  2210  0FEA                     	;# 
  2211  0FEB                     	;# 
  2212  0FED                     	;# 
  2213  0FEE                     	;# 
  2214  0FEF                     	;# 
  2215  0000                     	;# 
  2216  0001                     	;# 
  2217  0002                     	;# 
  2218  0003                     	;# 
  2219  0004                     	;# 
  2220  0005                     	;# 
  2221  0006                     	;# 
  2222  0007                     	;# 
  2223  0008                     	;# 
  2224  0009                     	;# 
  2225  000A                     	;# 
  2226  000B                     	;# 
  2227  000C                     	;# 
  2228  000D                     	;# 
  2229  000E                     	;# 
  2230  0011                     	;# 
  2231  0012                     	;# 
  2232  0013                     	;# 
  2233  0015                     	;# 
  2234  0016                     	;# 
  2235  0016                     	;# 
  2236  0017                     	;# 
  2237  0018                     	;# 
  2238  0019                     	;# 
  2239  001A                     	;# 
  2240  001B                     	;# 
  2241  001C                     	;# 
  2242  008C                     	;# 
  2243  008D                     	;# 
  2244  008E                     	;# 
  2245  0091                     	;# 
  2246  0092                     	;# 
  2247  0093                     	;# 
  2248  0095                     	;# 
  2249  0096                     	;# 
  2250  0097                     	;# 
  2251  0099                     	;# 
  2252  009A                     	;# 
  2253  009B                     	;# 
  2254  009B                     	;# 
  2255  009C                     	;# 
  2256  009D                     	;# 
  2257  009E                     	;# 
  2258  009F                     	;# 
  2259  010C                     	;# 
  2260  010D                     	;# 
  2261  010E                     	;# 
  2262  0111                     	;# 
  2263  0112                     	;# 
  2264  0113                     	;# 
  2265  0114                     	;# 
  2266  0115                     	;# 
  2267  0116                     	;# 
  2268  0117                     	;# 
  2269  0118                     	;# 
  2270  0119                     	;# 
  2271  011D                     	;# 
  2272  018C                     	;# 
  2273  018D                     	;# 
  2274  018E                     	;# 
  2275  0191                     	;# 
  2276  0191                     	;# 
  2277  0192                     	;# 
  2278  0193                     	;# 
  2279  0193                     	;# 
  2280  0194                     	;# 
  2281  0195                     	;# 
  2282  0196                     	;# 
  2283  0199                     	;# 
  2284  019A                     	;# 
  2285  019B                     	;# 
  2286  019B                     	;# 
  2287  019C                     	;# 
  2288  019D                     	;# 
  2289  019E                     	;# 
  2290  019F                     	;# 
  2291  020C                     	;# 
  2292  020D                     	;# 
  2293  0211                     	;# 
  2294  0211                     	;# 
  2295  0212                     	;# 
  2296  0212                     	;# 
  2297  0213                     	;# 
  2298  0213                     	;# 
  2299  0214                     	;# 
  2300  0214                     	;# 
  2301  0215                     	;# 
  2302  0215                     	;# 
  2303  0215                     	;# 
  2304  0216                     	;# 
  2305  0216                     	;# 
  2306  0217                     	;# 
  2307  0217                     	;# 
  2308  0391                     	;# 
  2309  0392                     	;# 
  2310  0393                     	;# 
  2311  0394                     	;# 
  2312  0395                     	;# 
  2313  0396                     	;# 
  2314  0498                     	;# 
  2315  0498                     	;# 
  2316  0499                     	;# 
  2317  049A                     	;# 
  2318  049B                     	;# 
  2319  049B                     	;# 
  2320  049C                     	;# 
  2321  049E                     	;# 
  2322  049F                     	;# 
  2323  0611                     	;# 
  2324  0612                     	;# 
  2325  0613                     	;# 
  2326  0613                     	;# 
  2327  0614                     	;# 
  2328  0615                     	;# 
  2329  0616                     	;# 
  2330  0616                     	;# 
  2331  0617                     	;# 
  2332  0618                     	;# 
  2333  0619                     	;# 
  2334  0619                     	;# 
  2335  061A                     	;# 
  2336  061B                     	;# 
  2337  061C                     	;# 
  2338  061C                     	;# 
  2339  0691                     	;# 
  2340  0692                     	;# 
  2341  0693                     	;# 
  2342  0694                     	;# 
  2343  0695                     	;# 
  2344  0F0F                     	;# 
  2345  0F10                     	;# 
  2346  0F11                     	;# 
  2347  0F12                     	;# 
  2348  0F13                     	;# 
  2349  0F14                     	;# 
  2350  0F15                     	;# 
  2351  0F16                     	;# 
  2352  0F17                     	;# 
  2353  0F18                     	;# 
  2354  0F19                     	;# 
  2355  0F1A                     	;# 
  2356  0F1B                     	;# 
  2357  0F1C                     	;# 
  2358  0F1D                     	;# 
  2359  0F1E                     	;# 
  2360  0F1F                     	;# 
  2361  0F20                     	;# 
  2362  0F21                     	;# 
  2363  0F22                     	;# 
  2364  0F23                     	;# 
  2365  0F24                     	;# 
  2366  0F25                     	;# 
  2367  0F26                     	;# 
  2368  0F27                     	;# 
  2369  0F28                     	;# 
  2370  0F29                     	;# 
  2371  0F2A                     	;# 
  2372  0F2B                     	;# 
  2373  0F2C                     	;# 
  2374  0F2D                     	;# 
  2375  0F2E                     	;# 
  2376  0F2F                     	;# 
  2377  0F8C                     	;# 
  2378  0F8D                     	;# 
  2379  0F91                     	;# 
  2380  0F95                     	;# 
  2381  0F96                     	;# 
  2382  0F97                     	;# 
  2383  0F9C                     	;# 
  2384  0F9D                     	;# 
  2385  0F9E                     	;# 
  2386  0FE3                     	;# 
  2387  0FE4                     	;# 
  2388  0FE5                     	;# 
  2389  0FE6                     	;# 
  2390  0FE7                     	;# 
  2391  0FE8                     	;# 
  2392  0FE9                     	;# 
  2393  0FEA                     	;# 
  2394  0FEB                     	;# 
  2395  0FED                     	;# 
  2396  0FEE                     	;# 
  2397  0FEF                     	;# 
  2398  0000                     	;# 
  2399  0001                     	;# 
  2400  0002                     	;# 
  2401  0003                     	;# 
  2402  0004                     	;# 
  2403  0005                     	;# 
  2404  0006                     	;# 
  2405  0007                     	;# 
  2406  0008                     	;# 
  2407  0009                     	;# 
  2408  000A                     	;# 
  2409  000B                     	;# 
  2410  000C                     	;# 
  2411  000D                     	;# 
  2412  000E                     	;# 
  2413  0011                     	;# 
  2414  0012                     	;# 
  2415  0013                     	;# 
  2416  0015                     	;# 
  2417  0016                     	;# 
  2418  0016                     	;# 
  2419  0017                     	;# 
  2420  0018                     	;# 
  2421  0019                     	;# 
  2422  001A                     	;# 
  2423  001B                     	;# 
  2424  001C                     	;# 
  2425  008C                     	;# 
  2426  008D                     	;# 
  2427  008E                     	;# 
  2428  0091                     	;# 
  2429  0092                     	;# 
  2430  0093                     	;# 
  2431  0095                     	;# 
  2432  0096                     	;# 
  2433  0097                     	;# 
  2434  0099                     	;# 
  2435  009A                     	;# 
  2436  009B                     	;# 
  2437  009B                     	;# 
  2438  009C                     	;# 
  2439  009D                     	;# 
  2440  009E                     	;# 
  2441  009F                     	;# 
  2442  010C                     	;# 
  2443  010D                     	;# 
  2444  010E                     	;# 
  2445  0111                     	;# 
  2446  0112                     	;# 
  2447  0113                     	;# 
  2448  0114                     	;# 
  2449  0115                     	;# 
  2450  0116                     	;# 
  2451  0117                     	;# 
  2452  0118                     	;# 
  2453  0119                     	;# 
  2454  011D                     	;# 
  2455  018C                     	;# 
  2456  018D                     	;# 
  2457  018E                     	;# 
  2458  0191                     	;# 
  2459  0191                     	;# 
  2460  0192                     	;# 
  2461  0193                     	;# 
  2462  0193                     	;# 
  2463  0194                     	;# 
  2464  0195                     	;# 
  2465  0196                     	;# 
  2466  0199                     	;# 
  2467  019A                     	;# 
  2468  019B                     	;# 
  2469  019B                     	;# 
  2470  019C                     	;# 
  2471  019D                     	;# 
  2472  019E                     	;# 
  2473  019F                     	;# 
  2474  020C                     	;# 
  2475  020D                     	;# 
  2476  0211                     	;# 
  2477  0211                     	;# 
  2478  0212                     	;# 
  2479  0212                     	;# 
  2480  0213                     	;# 
  2481  0213                     	;# 
  2482  0214                     	;# 
  2483  0214                     	;# 
  2484  0215                     	;# 
  2485  0215                     	;# 
  2486  0215                     	;# 
  2487  0216                     	;# 
  2488  0216                     	;# 
  2489  0217                     	;# 
  2490  0217                     	;# 
  2491  0391                     	;# 
  2492  0392                     	;# 
  2493  0393                     	;# 
  2494  0394                     	;# 
  2495  0395                     	;# 
  2496  0396                     	;# 
  2497  0498                     	;# 
  2498  0498                     	;# 
  2499  0499                     	;# 
  2500  049A                     	;# 
  2501  049B                     	;# 
  2502  049B                     	;# 
  2503  049C                     	;# 
  2504  049E                     	;# 
  2505  049F                     	;# 
  2506  0611                     	;# 
  2507  0612                     	;# 
  2508  0613                     	;# 
  2509  0613                     	;# 
  2510  0614                     	;# 
  2511  0615                     	;# 
  2512  0616                     	;# 
  2513  0616                     	;# 
  2514  0617                     	;# 
  2515  0618                     	;# 
  2516  0619                     	;# 
  2517  0619                     	;# 
  2518  061A                     	;# 
  2519  061B                     	;# 
  2520  061C                     	;# 
  2521  061C                     	;# 
  2522  0691                     	;# 
  2523  0692                     	;# 
  2524  0693                     	;# 
  2525  0694                     	;# 
  2526  0695                     	;# 
  2527  0F0F                     	;# 
  2528  0F10                     	;# 
  2529  0F11                     	;# 
  2530  0F12                     	;# 
  2531  0F13                     	;# 
  2532  0F14                     	;# 
  2533  0F15                     	;# 
  2534  0F16                     	;# 
  2535  0F17                     	;# 
  2536  0F18                     	;# 
  2537  0F19                     	;# 
  2538  0F1A                     	;# 
  2539  0F1B                     	;# 
  2540  0F1C                     	;# 
  2541  0F1D                     	;# 
  2542  0F1E                     	;# 
  2543  0F1F                     	;# 
  2544  0F20                     	;# 
  2545  0F21                     	;# 
  2546  0F22                     	;# 
  2547  0F23                     	;# 
  2548  0F24                     	;# 
  2549  0F25                     	;# 
  2550  0F26                     	;# 
  2551  0F27                     	;# 
  2552  0F28                     	;# 
  2553  0F29                     	;# 
  2554  0F2A                     	;# 
  2555  0F2B                     	;# 
  2556  0F2C                     	;# 
  2557  0F2D                     	;# 
  2558  0F2E                     	;# 
  2559  0F2F                     	;# 
  2560  0F8C                     	;# 
  2561  0F8D                     	;# 
  2562  0F91                     	;# 
  2563  0F95                     	;# 
  2564  0F96                     	;# 
  2565  0F97                     	;# 
  2566  0F9C                     	;# 
  2567  0F9D                     	;# 
  2568  0F9E                     	;# 
  2569  0FE3                     	;# 
  2570  0FE4                     	;# 
  2571  0FE5                     	;# 
  2572  0FE6                     	;# 
  2573  0FE7                     	;# 
  2574  0FE8                     	;# 
  2575  0FE9                     	;# 
  2576  0FEA                     	;# 
  2577  0FEB                     	;# 
  2578  0FED                     	;# 
  2579  0FEE                     	;# 
  2580  0FEF                     	;# 
  2581  0000                     	;# 
  2582  0001                     	;# 
  2583  0002                     	;# 
  2584  0003                     	;# 
  2585  0004                     	;# 
  2586  0005                     	;# 
  2587  0006                     	;# 
  2588  0007                     	;# 
  2589  0008                     	;# 
  2590  0009                     	;# 
  2591  000A                     	;# 
  2592  000B                     	;# 
  2593  000C                     	;# 
  2594  000D                     	;# 
  2595  000E                     	;# 
  2596  0011                     	;# 
  2597  0012                     	;# 
  2598  0013                     	;# 
  2599  0015                     	;# 
  2600  0016                     	;# 
  2601  0016                     	;# 
  2602  0017                     	;# 
  2603  0018                     	;# 
  2604  0019                     	;# 
  2605  001A                     	;# 
  2606  001B                     	;# 
  2607  001C                     	;# 
  2608  008C                     	;# 
  2609  008D                     	;# 
  2610  008E                     	;# 
  2611  0091                     	;# 
  2612  0092                     	;# 
  2613  0093                     	;# 
  2614  0095                     	;# 
  2615  0096                     	;# 
  2616  0097                     	;# 
  2617  0099                     	;# 
  2618  009A                     	;# 
  2619  009B                     	;# 
  2620  009B                     	;# 
  2621  009C                     	;# 
  2622  009D                     	;# 
  2623  009E                     	;# 
  2624  009F                     	;# 
  2625  010C                     	;# 
  2626  010D                     	;# 
  2627  010E                     	;# 
  2628  0111                     	;# 
  2629  0112                     	;# 
  2630  0113                     	;# 
  2631  0114                     	;# 
  2632  0115                     	;# 
  2633  0116                     	;# 
  2634  0117                     	;# 
  2635  0118                     	;# 
  2636  0119                     	;# 
  2637  011D                     	;# 
  2638  018C                     	;# 
  2639  018D                     	;# 
  2640  018E                     	;# 
  2641  0191                     	;# 
  2642  0191                     	;# 
  2643  0192                     	;# 
  2644  0193                     	;# 
  2645  0193                     	;# 
  2646  0194                     	;# 
  2647  0195                     	;# 
  2648  0196                     	;# 
  2649  0199                     	;# 
  2650  019A                     	;# 
  2651  019B                     	;# 
  2652  019B                     	;# 
  2653  019C                     	;# 
  2654  019D                     	;# 
  2655  019E                     	;# 
  2656  019F                     	;# 
  2657  020C                     	;# 
  2658  020D                     	;# 
  2659  0211                     	;# 
  2660  0211                     	;# 
  2661  0212                     	;# 
  2662  0212                     	;# 
  2663  0213                     	;# 
  2664  0213                     	;# 
  2665  0214                     	;# 
  2666  0214                     	;# 
  2667  0215                     	;# 
  2668  0215                     	;# 
  2669  0215                     	;# 
  2670  0216                     	;# 
  2671  0216                     	;# 
  2672  0217                     	;# 
  2673  0217                     	;# 
  2674  0391                     	;# 
  2675  0392                     	;# 
  2676  0393                     	;# 
  2677  0394                     	;# 
  2678  0395                     	;# 
  2679  0396                     	;# 
  2680  0498                     	;# 
  2681  0498                     	;# 
  2682  0499                     	;# 
  2683  049A                     	;# 
  2684  049B                     	;# 
  2685  049B                     	;# 
  2686  049C                     	;# 
  2687  049E                     	;# 
  2688  049F                     	;# 
  2689  0611                     	;# 
  2690  0612                     	;# 
  2691  0613                     	;# 
  2692  0613                     	;# 
  2693  0614                     	;# 
  2694  0615                     	;# 
  2695  0616                     	;# 
  2696  0616                     	;# 
  2697  0617                     	;# 
  2698  0618                     	;# 
  2699  0619                     	;# 
  2700  0619                     	;# 
  2701  061A                     	;# 
  2702  061B                     	;# 
  2703  061C                     	;# 
  2704  061C                     	;# 
  2705  0691                     	;# 
  2706  0692                     	;# 
  2707  0693                     	;# 
  2708  0694                     	;# 
  2709  0695                     	;# 
  2710  0F0F                     	;# 
  2711  0F10                     	;# 
  2712  0F11                     	;# 
  2713  0F12                     	;# 
  2714  0F13                     	;# 
  2715  0F14                     	;# 
  2716  0F15                     	;# 
  2717  0F16                     	;# 
  2718  0F17                     	;# 
  2719  0F18                     	;# 
  2720  0F19                     	;# 
  2721  0F1A                     	;# 
  2722  0F1B                     	;# 
  2723  0F1C                     	;# 
  2724  0F1D                     	;# 
  2725  0F1E                     	;# 
  2726  0F1F                     	;# 
  2727  0F20                     	;# 
  2728  0F21                     	;# 
  2729  0F22                     	;# 
  2730  0F23                     	;# 
  2731  0F24                     	;# 
  2732  0F25                     	;# 
  2733  0F26                     	;# 
  2734  0F27                     	;# 
  2735  0F28                     	;# 
  2736  0F29                     	;# 
  2737  0F2A                     	;# 
  2738  0F2B                     	;# 
  2739  0F2C                     	;# 
  2740  0F2D                     	;# 
  2741  0F2E                     	;# 
  2742  0F2F                     	;# 
  2743  0F8C                     	;# 
  2744  0F8D                     	;# 
  2745  0F91                     	;# 
  2746  0F95                     	;# 
  2747  0F96                     	;# 
  2748  0F97                     	;# 
  2749  0F9C                     	;# 
  2750  0F9D                     	;# 
  2751  0F9E                     	;# 
  2752  0FE3                     	;# 
  2753  0FE4                     	;# 
  2754  0FE5                     	;# 
  2755  0FE6                     	;# 
  2756  0FE7                     	;# 
  2757  0FE8                     	;# 
  2758  0FE9                     	;# 
  2759  0FEA                     	;# 
  2760  0FEB                     	;# 
  2761  0FED                     	;# 
  2762  0FEE                     	;# 
  2763  0FEF                     	;# 
  2764                           
  2765                           	psect	idataBANK0
  2766  0000                     __pidataBANK0:	
  2767                           
  2768                           	psect	strings
  2769  020A                     __pstrings:	
  2770  020A                     __stringtab:	
  2771  020A  3400               	retlw	0
  2772  020B                     __end_of__stringtab:	
  2773  020B                     _mrfRegset_InitCnt:	
  2774  020B  3410               	retlw	16
  2775  020C                     __end_of_mrfRegset_InitCnt:	
  2776  020C                     _mrfRegset_RxCnt:	
  2777  020C  3406               	retlw	6
  2778  020D                     __end_of_mrfRegset_RxCnt:	
  2779  020D                     _mrfRegset_SleepCnt:	
  2780  020D  3403               	retlw	3
  2781  020E                     __end_of_mrfRegset_SleepCnt:	
  2782  020E                     _mrfRegset_TxCnt:	
  2783  020E  3404               	retlw	4
  2784  020F                     __end_of_mrfRegset_TxCnt:	
  2785  020F                     _mrfRegset_Init:	
  2786  020F  34CA               	retlw	202
  2787  0210  3471               	retlw	113
  2788  0211  34CA               	retlw	202
  2789  0212  3473               	retlw	115
  2790  0213  3480               	retlw	128
  2791  0214  3428               	retlw	40
  2792  0215  34C4               	retlw	196
  2793  0216  34E7               	retlw	231
  2794  0217  34A8               	retlw	168
  2795  0218  3460               	retlw	96
  2796  0219  34C6               	retlw	198
  2797  021A  3405               	retlw	5
  2798  021B  3482               	retlw	130
  2799  021C  3400               	retlw	0
  2800  021D  3490               	retlw	144
  2801  021E  3462               	retlw	98
  2802  021F  3498               	retlw	152
  2803  0220  3490               	retlw	144
  2804  0221  34C2               	retlw	194
  2805  0222  34AC               	retlw	172
  2806  0223  3482               	retlw	130
  2807  0224  3420               	retlw	32
  2808  0225  3455               	retlw	85
  2809  0226  3400               	retlw	0
  2810  0227  3482               	retlw	130
  2811  0228  3480               	retlw	128
  2812  0229  3480               	retlw	128
  2813  022A  3468               	retlw	104
  2814  022B  34CA               	retlw	202
  2815  022C  3471               	retlw	113
  2816  022D  34CA               	retlw	202
  2817  022E  3473               	retlw	115
  2818  022F                     __end_of_mrfRegset_Init:	
  2819  022F                     _mrfRegset_Rx:	
  2820  022F  3482               	retlw	130
  2821  0230  3400               	retlw	0
  2822  0231  34CA               	retlw	202
  2823  0232  3471               	retlw	113
  2824  0233  3480               	retlw	128
  2825  0234  3428               	retlw	40
  2826  0235  3482               	retlw	130
  2827  0236  3480               	retlw	128
  2828  0237  3480               	retlw	128
  2829  0238  3468               	retlw	104
  2830  0239  34CA               	retlw	202
  2831  023A  3473               	retlw	115
  2832  023B                     __end_of_mrfRegset_Rx:	
  2833  023B                     _mrfRegset_Tx:	
  2834  023B  3482               	retlw	130
  2835  023C  3400               	retlw	0
  2836  023D  34CA               	retlw	202
  2837  023E  3471               	retlw	113
  2838  023F  3480               	retlw	128
  2839  0240  34A8               	retlw	168
  2840  0241  3482               	retlw	130
  2841  0242  3420               	retlw	32
  2842  0243                     __end_of_mrfRegset_Tx:	
  2843  0243                     _mrfRegset_Sleep:	
  2844  0243  3482               	retlw	130
  2845  0244  3400               	retlw	0
  2846  0245  34CA               	retlw	202
  2847  0246  3471               	retlw	113
  2848  0247  3480               	retlw	128
  2849  0248  3468               	retlw	104
  2850  0249                     __end_of_mrfRegset_Sleep:	
  2851  0249                     _parameters:	
  2852  0249  3400               	retlw	0
  2853  024A  3401               	retlw	1
  2854  024B  3434               	retlw	_cfgRam& (0+255)
  2855  024C  3401               	retlw	1
  2856  024D  3402               	retlw	2
  2857  024E  343B               	retlw	(_cfgRam+7)& (0+255)
  2858  024F                     __end_of_parameters:	
  2859  000B                     _INTCONbits	set	11
  2860  000C                     _PORTAbits	set	12
  2861  000D                     _PORTBbits	set	13
  2862  000E                     _PORTCbits	set	14
  2863  009D                     _ADCON0	set	157
  2864  009E                     _ADCON1	set	158
  2865  009F                     _ADCON2	set	159
  2866  009C                     _ADRESH	set	156
  2867  009B                     _ADRESL	set	155
  2868  0095                     _OPTION_REGbits	set	149
  2869  0099                     _OSCCON	set	153
  2870  008C                     _TRISAbits	set	140
  2871  008D                     _TRISBbits	set	141
  2872  008E                     _TRISCbits	set	142
  2873  0097                     _WDTCONbits	set	151
  2874  0117                     _FVRCON	set	279
  2875  010C                     _LATAbits	set	268
  2876  010D                     _LATBbits	set	269
  2877  010E                     _LATCbits	set	270
  2878  018C                     _ANSELA	set	396
  2879  018D                     _ANSELB	set	397
  2880  018E                     _ANSELC	set	398
  2881  020C                     _WPUAbits	set	524
  2882                           
  2883                           ; #config settings
  2884  0000                     
  2885                           	psect	cinit
  2886  0802                     start_initialization:	
  2887  0802                     __initialization:	
  2888                           
  2889                           ; Clear objects allocated to BANK0
  2890  0802  3033               	movlw	low __pbssBANK0
  2891  0803  0084               	movwf	4
  2892  0804  3000               	movlw	high __pbssBANK0
  2893  0805  0085               	movwf	5
  2894  0806  300C               	movlw	12
  2895  0807  3182  224F  3188   	fcall	clear_ram0
  2896                           
  2897                           ; Clear objects allocated to BANK1
  2898  080A  30A0               	movlw	low __pbssBANK1
  2899  080B  0084               	movwf	4
  2900  080C  3000               	movlw	high __pbssBANK1
  2901  080D  0085               	movwf	5
  2902  080E  304B               	movlw	75
  2903  080F  3182  224F  3188   	fcall	clear_ram0
  2904                           
  2905                           ;initializer for _coldBoot
  2906  0812  3001               	movlw	1
  2907  0813  00BF               	movwf	__pdataBANK0& (0+127)
  2908  0814                     end_of_initialization:	
  2909                           ;End of C runtime variable initialization code
  2910                           
  2911  0814                     __end_of__initialization:	
  2912  0814  0020               	movlb	0
  2913  0815  2845               	ljmp	_main	;jump to C main() function
  2914  0816                     __ptext25:	
  2915 ;; *************** function _SoftI2cInit *****************
  2916 ;; Defined at:
  2917 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;		None
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;		None
  2922 ;; Return value:  Size  Location     Type
  2923 ;;		None               void
  2924 ;; Registers used:
  2925 ;;		wreg, status,2, status,0, pclath, cstack
  2926 ;; Tracked objects:
  2927 ;;		On entry : 17F/2
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2931 ;;      Params:         0       0       0       0
  2932 ;;      Locals:         0       0       0       0
  2933 ;;      Temps:          0       0       0       0
  2934 ;;      Totals:         0       0       0       0
  2935 ;;Total ram usage:        0 bytes
  2936 ;; Hardware stack levels used:    1
  2937 ;; Hardware stack levels required when called:    7
  2938 ;; This function calls:
  2939 ;;		_SoftI2cStart
  2940 ;;		_SoftI2cStop
  2941 ;;		_SoftI2cTxByte
  2942 ;; This function is called by:
  2943 ;;		_PwrI2cInit
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _SoftI2cInit
  2949  0816                     _SoftI2cInit:	
  2950                           
  2951                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  2952                           
  2953                           ;incstack = 0
  2954                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  2955                           
  2956                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  2957                           
  2958                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  2959                           
  2960                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  2961  0816  27B7  3188         	fcall	PL18	;call to abstracted procedure
  2962                           
  2963                           ;softI2c.c: 32: SoftI2cStart();
  2964  0818  22A1  3188         	fcall	_SoftI2cStart
  2965                           
  2966                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  2967  081A  3000               	movlw	0
  2968  081B  2233  3188         	fcall	_SoftI2cTxByte
  2969                           
  2970                           ;softI2c.c: 34: SoftI2cStop();
  2971  081D  2AAE               	ljmp	l2444
  2972  081E                     __end_of_SoftI2cInit:	
  2973  081E                     __ptext21:	
  2974 ;; *************** function _PwrRfInit *****************
  2975 ;; Defined at:
  2976 ;;		line 88 in file "../../../src/node/power.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;		None               void
  2983 ;; Registers used:
  2984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 1F/0
  2987 ;;		On exit  : 1F/1
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2990 ;;      Params:         0       0       0       0
  2991 ;;      Locals:         0       0       0       0
  2992 ;;      Temps:          0       0       0       0
  2993 ;;      Totals:         0       0       0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:   10
  2997 ;; This function calls:
  2998 ;;		_ExtIntInit
  2999 ;;		_Mrf49xaInit
  3000 ;;		_Sleepy
  3001 ;; This function is called by:
  3002 ;;		_main
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           
  3007                           ;psect for function _PwrRfInit
  3008  081E                     _PwrRfInit:	
  3009                           
  3010                           ;power.c: 90: TRISAbits.TRISA2 = 1;
  3011                           
  3012                           ;incstack = 0
  3013                           ; Regs used in _PwrRfInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3014  081E  0021               	movlb	1	; select bank1
  3015  081F  150C               	bsf	12,2	;volatile
  3016                           
  3017                           ;power.c: 91: TRISAbits.TRISA4 = 0;
  3018  0820  120C               	bcf	12,4	;volatile
  3019                           
  3020                           ;power.c: 92: TRISAbits.TRISA5 = 0;
  3021  0821  128C               	bcf	12,5	;volatile
  3022                           
  3023                           ;power.c: 94: TRISBbits.TRISB7 = 0;
  3024  0822  138D               	bcf	13,7	;volatile
  3025                           
  3026                           ;power.c: 96: TRISCbits.TRISC1 = 0;
  3027  0823  108E               	bcf	14,1	;volatile
  3028                           
  3029                           ;power.c: 97: TRISCbits.TRISC4 = 0;
  3030  0824  120E               	bcf	14,4	;volatile
  3031                           
  3032                           ;power.c: 98: TRISCbits.TRISC6 = 0;
  3033  0825  130E               	bcf	14,6	;volatile
  3034                           
  3035                           ;power.c: 99: TRISCbits.TRISC7 = 0;
  3036  0826  138E               	bcf	14,7	;volatile
  3037                           
  3038                           ;power.c: 100: TRISCbits.TRISC3 = 1;
  3039  0827  158E               	bsf	14,3	;volatile
  3040                           
  3041                           ;power.c: 101: TRISCbits.TRISC5 = 1;
  3042  0828  168E               	bsf	14,5	;volatile
  3043                           
  3044                           ;power.c: 103: LATCbits.LATC1 = 0;
  3045  0829  0022               	movlb	2	; select bank2
  3046  082A  108E               	bcf	14,1	;volatile
  3047                           
  3048                           ;power.c: 105: LATAbits.LATA4 = 0;
  3049  082B  120C               	bcf	12,4	;volatile
  3050                           
  3051                           ;power.c: 106: LATAbits.LATA5 = 0;
  3052  082C  128C               	bcf	12,5	;volatile
  3053                           
  3054                           ;power.c: 107: LATCbits.LATC4 = 0;
  3055  082D  120E               	bcf	14,4	;volatile
  3056                           
  3057                           ;power.c: 108: PORTCbits.RC6 = 1;
  3058  082E  0020               	movlb	0	; select bank0
  3059  082F  170E               	bsf	14,6	;volatile
  3060                           
  3061                           ;power.c: 109: LATCbits.LATC7 = 0;
  3062  0830  0022               	movlb	2	; select bank2
  3063  0831  138E               	bcf	14,7	;volatile
  3064                           
  3065                           ;power.c: 110: PORTBbits.RB7 = 0;
  3066  0832  0020               	movlb	0	; select bank0
  3067  0833  138D               	bcf	13,7	;volatile
  3068                           
  3069                           ;power.c: 112: WPUAbits.WPUA2 = 1;
  3070  0834  0024               	movlb	4	; select bank4
  3071  0835  150C               	bsf	12,2	;volatile
  3072                           
  3073                           ;power.c: 113: Sleepy(10);
  3074  0836  300A               	movlw	10
  3075  0837  0020               	movlb	0	; select bank0
  3076  0838  00A0               	movwf	Sleepy@ms
  3077  0839  01A1               	clrf	Sleepy@ms+1
  3078  083A  2195  3188         	fcall	_Sleepy
  3079                           
  3080                           ;power.c: 115: Mrf49xaInit();
  3081  083C  2135  3188         	fcall	_Mrf49xaInit
  3082                           
  3083                           ;power.c: 116: ExtIntInit();
  3084  083E  283F               	ljmp	l3066
  3085  083F                     __end_of_PwrRfInit:	
  3086  083F                     __ptext58:	
  3087 ;; *************** function _ExtIntInit *****************
  3088 ;; Defined at:
  3089 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;		None               void
  3096 ;; Registers used:
  3097 ;;		None
  3098 ;; Tracked objects:
  3099 ;;		On entry : 1F/0
  3100 ;;		On exit  : 1F/1
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3103 ;;      Params:         0       0       0       0
  3104 ;;      Locals:         0       0       0       0
  3105 ;;      Temps:          0       0       0       0
  3106 ;;      Totals:         0       0       0       0
  3107 ;;Total ram usage:        0 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    5
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_Mrf49xaTick
  3114 ;;		_PwrRfInit
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           
  3119                           ;psect for function _ExtIntInit
  3120  083F                     _ExtIntInit:	
  3121  083F                     l3066:	
  3122                           ;incstack = 0
  3123                           ; Regs used in _ExtIntInit: []
  3124                           
  3125                           
  3126                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3127  083F  0021               	movlb	1	; select bank1
  3128  0840  1315               	bcf	21,6	;volatile
  3129                           
  3130                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3131  0841  108B               	bcf	11,1	;volatile
  3132                           
  3133                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3134  0842  160B               	bsf	11,4	;volatile
  3135                           
  3136                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3137  0843  178B               	bsf	11,7	;volatile
  3138  0844  0008               	return
  3139  0845                     __end_of_ExtIntInit:	
  3140  0845                     __pmaintext:	
  3141 ;;
  3142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3143 ;;
  3144 ;; *************** function _main *****************
  3145 ;; Defined at:
  3146 ;;		line 32 in file "../../../src/node/main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  temperature     2   17[BANK0 ] unsigned int 
  3151 ;;  humidity        2   15[BANK0 ] unsigned int 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;		None               void
  3154 ;; Registers used:
  3155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 17F/0
  3158 ;;		On exit  : 1F/1
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3161 ;;      Params:         0       0       0       0
  3162 ;;      Locals:         0       4       0       0
  3163 ;;      Temps:          0       0       0       0
  3164 ;;      Totals:         0       4       0       0
  3165 ;;Total ram usage:        4 bytes
  3166 ;; Hardware stack levels required when called:   12
  3167 ;; This function calls:
  3168 ;;		_AdcSample
  3169 ;;		_CfgLoad
  3170 ;;		_Mcp9800Read
  3171 ;;		_Mcp9800Start
  3172 ;;		_Mrf49xaNeedsReset
  3173 ;;		_Mrf49xaTick
  3174 ;;		_PwrAdcInit
  3175 ;;		_PwrAdcSleep
  3176 ;;		_PwrAdcWake
  3177 ;;		_PwrI2cInit
  3178 ;;		_PwrI2cSleep
  3179 ;;		_PwrI2cWake
  3180 ;;		_PwrRfInit
  3181 ;;		_PwrRfSleep
  3182 ;;		_PwrRfWake
  3183 ;;		_PwrSensorInit
  3184 ;;		_PwrSensorSleep
  3185 ;;		_PwrSensorWake
  3186 ;;		_RfSendPowerState
  3187 ;;		_RfSendSampleWeatherNode
  3188 ;;		_Sleepy
  3189 ;; This function is called by:
  3190 ;;		Startup code after reset
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _main
  3196  0845                     _main:	
  3197                           
  3198                           ;main.c: 35: OSCCON = 0b01111000;
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3202  0845  3078               	movlw	120
  3203  0846  0021               	movlb	1	; select bank1
  3204  0847  0099               	movwf	25	;volatile
  3205                           
  3206                           ;main.c: 37: PwrAdcInit();
  3207  0848  2731  3188         	fcall	_PwrAdcInit
  3208                           
  3209                           ;main.c: 38: PwrSensorInit();
  3210  084A  2740  3188         	fcall	_PwrSensorInit
  3211                           
  3212                           ;main.c: 39: PwrI2cInit();
  3213  084C  2736  3188         	fcall	_PwrI2cInit
  3214                           
  3215                           ;main.c: 40: PwrRfInit();
  3216  084E  201E  3188         	fcall	_PwrRfInit
  3217                           
  3218                           ;main.c: 42: CfgLoad();
  3219  0850  266C  3188         	fcall	_CfgLoad
  3220                           
  3221                           ;main.c: 44: PwrAdcSleep();
  3222  0852  2464  3188         	fcall	_PwrAdcSleep
  3223                           
  3224                           ;main.c: 45: PwrSensorSleep();
  3225  0854  23EA  3188         	fcall	_PwrSensorSleep
  3226                           
  3227                           ;main.c: 46: PwrI2cSleep();
  3228  0856  23E8  3188         	fcall	_PwrI2cSleep
  3229  0858                     l3596:	
  3230                           
  3231                           ;main.c: 47: PwrRfSleep();
  3232  0858  23F3  3188         	fcall	_PwrRfSleep
  3233                           
  3234                           ;main.c: 50: {
  3235                           ;main.c: 53: Sleepy(5000);
  3236  085A  3088               	movlw	136
  3237  085B  0020               	movlb	0	; select bank0
  3238  085C  00A0               	movwf	Sleepy@ms
  3239  085D  3013               	movlw	19
  3240  085E  00A1               	movwf	Sleepy@ms+1
  3241  085F  2195  3188         	fcall	_Sleepy
  3242                           
  3243                           ;main.c: 55: PwrSensorWake();
  3244  0861  2744  3188         	fcall	_PwrSensorWake
  3245                           
  3246                           ;main.c: 56: PwrI2cWake();
  3247  0863  23F2  3188         	fcall	_PwrI2cWake
  3248                           
  3249                           ;main.c: 58: Mcp9800Start(Mcp9800_9bit);
  3250  0865  3000               	movlw	0
  3251  0866  21F6  3188         	fcall	_Mcp9800Start
  3252                           
  3253                           ;main.c: 60: PwrAdcWake();
  3254  0868  2468  3188         	fcall	_PwrAdcWake
  3255                           
  3256                           ;main.c: 61: uint16_t humidity = AdcSample(ADC_AN4);
  3257  086A  3004               	movlw	4
  3258  086B  242F  3188         	fcall	_AdcSample
  3259  086D  0823               	movf	?_AdcSample+1,w
  3260  086E  00B0               	movwf	main@humidity+1
  3261  086F  0822               	movf	?_AdcSample,w
  3262  0870  00AF               	movwf	main@humidity
  3263                           
  3264                           ;main.c: 62: Sleepy(100);
  3265  0871  3064               	movlw	100
  3266  0872  00A0               	movwf	Sleepy@ms
  3267  0873  01A1               	clrf	Sleepy@ms+1
  3268  0874  2195  3188         	fcall	_Sleepy
  3269                           
  3270                           ;main.c: 63: uint16_t temperature = Mcp9800Read();
  3271  0876  21C5  3188         	fcall	_Mcp9800Read
  3272  0878  0825               	movf	?_Mcp9800Read+1,w
  3273  0879  00B2               	movwf	main@temperature+1
  3274  087A  0824               	movf	?_Mcp9800Read,w
  3275  087B  00B1               	movwf	main@temperature
  3276                           
  3277                           ;main.c: 65: PwrSensorSleep();
  3278  087C  23EA  3188         	fcall	_PwrSensorSleep
  3279                           
  3280                           ;main.c: 66: PwrI2cSleep();
  3281  087E  23E8  3188         	fcall	_PwrI2cSleep
  3282                           
  3283                           ;main.c: 68: PwrRfWake();
  3284  0880  273E  3188         	fcall	_PwrRfWake
  3285                           
  3286                           ;main.c: 70: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3287  0882  0021               	movlb	1	; select bank1
  3288  0883  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3289  0884  1903               	btfsc	3,2
  3290  0885  288A               	goto	l3626
  3291                           
  3292                           ;main.c: 71: {
  3293                           ;main.c: 72: Mrf49xaNeedsReset();
  3294  0886  23D1  3188         	fcall	_Mrf49xaNeedsReset
  3295                           
  3296                           ;main.c: 73: Mrf49xaTick();
  3297  0888  20A9  3188         	fcall	_Mrf49xaTick
  3298  088A                     l3626:	
  3299                           
  3300                           ;main.c: 74: }
  3301                           ;main.c: 76: powerStatusTicker++;
  3302  088A  0020               	movlb	0	; select bank0
  3303  088B  300F               	movlw	15
  3304  088C  0AB3               	incf	_powerStatusTicker,f
  3305                           
  3306                           ;main.c: 78: if (powerStatusTicker >= 15)
  3307  088D  0233               	subwf	_powerStatusTicker,w
  3308  088E  1C03               	skipc
  3309  088F  2898               	goto	l3638
  3310                           
  3311                           ;main.c: 79: {
  3312                           ;main.c: 80: powerStatusTicker = 0;
  3313  0890  01B3               	clrf	_powerStatusTicker
  3314                           
  3315                           ;main.c: 83: RfSendPowerState();
  3316  0891  23F6  3188         	fcall	_RfSendPowerState
  3317  0893                     l3634:	
  3318                           
  3319                           ;main.c: 85: {
  3320                           ;main.c: 86: Mrf49xaTick();
  3321  0893  20A9  3188         	fcall	_Mrf49xaTick
  3322                           
  3323                           ;main.c: 87: }
  3324                           ;main.c: 88: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3325  0895  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3326  0896  1D03               	skipz
  3327  0897  2893               	goto	l3634
  3328  0898                     l3638:	
  3329                           
  3330                           ;main.c: 89: }
  3331                           ;main.c: 91: RfSendSampleWeatherNode(temperature, humidity);
  3332  0898  0020               	movlb	0	; select bank0
  3333  0899  0832               	movf	main@temperature+1,w
  3334  089A  00A7               	movwf	RfSendSampleWeatherNode@temperature+1
  3335  089B  0831               	movf	main@temperature,w
  3336  089C  00A6               	movwf	RfSendSampleWeatherNode@temperature
  3337  089D  0830               	movf	main@humidity+1,w
  3338  089E  00A9               	movwf	RfSendSampleWeatherNode@humidity+1
  3339  089F  082F               	movf	main@humidity,w
  3340  08A0  00A8               	movwf	RfSendSampleWeatherNode@humidity
  3341  08A1  246E  3188         	fcall	_RfSendSampleWeatherNode
  3342  08A3                     l645:	
  3343                           ;main.c: 92: do
  3344                           
  3345                           
  3346                           ;main.c: 93: {
  3347                           ;main.c: 94: Mrf49xaTick();
  3348  08A3  20A9  3188         	fcall	_Mrf49xaTick
  3349                           
  3350                           ;main.c: 95: }
  3351                           ;main.c: 96: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3352  08A5  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3353  08A6  1903               	btfsc	3,2
  3354  08A7  2858               	goto	l3596
  3355  08A8  28A3               	goto	l645
  3356  08A9                     __end_of_main:	
  3357  08A9                     __ptext27:	
  3358 ;; *************** function _Mrf49xaTick *****************
  3359 ;; Defined at:
  3360 ;;		line 124 in file "../../../src/devices/mrf49xa_packet.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  timeout         1   13[BANK0 ] unsigned char 
  3365 ;;  packet          1   14[BANK0 ] PTR struct rfTrcvPacket_
  3366 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;		None               void
  3369 ;; Registers used:
  3370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 1E/1
  3373 ;;		On exit  : 1F/1
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3376 ;;      Params:         0       0       0       0
  3377 ;;      Locals:         0       2       0       0
  3378 ;;      Temps:          0       1       0       0
  3379 ;;      Totals:         0       3       0       0
  3380 ;;Total ram usage:        3 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:   11
  3383 ;; This function calls:
  3384 ;;		_ExtIntInit
  3385 ;;		_HandlePacket
  3386 ;;		_Mrf49RxSts
  3387 ;;		_Mrf49xaFreePacket
  3388 ;;		_Mrf49xaInit
  3389 ;;		_Mrf49xaModeTx
  3390 ;;		_Mrf49xaPacketPending
  3391 ;;		_Mrf49xaRxPacket
  3392 ;;		_Sleepy
  3393 ;; This function is called by:
  3394 ;;		_main
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function _Mrf49xaTick
  3400  08A9                     _Mrf49xaTick:	
  3401                           
  3402                           ;mrf49xa_packet.c: 126: if (rfTrcvStatus.needsReset)
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3406  08A9  0021               	movlb	1	; select bank1
  3407  08AA  1FEA               	btfss	(_rfTrcvStatus^(0+128)+74),7
  3408  08AB  28AF               	goto	l3282
  3409                           
  3410                           ;mrf49xa_packet.c: 127: {
  3411                           ;mrf49xa_packet.c: 128: Mrf49xaInit();
  3412  08AC  2135  3188         	fcall	_Mrf49xaInit
  3413                           
  3414                           ;mrf49xa_packet.c: 129: ExtIntInit();
  3415  08AE  283F               	ljmp	l3066
  3416  08AF                     l3282:	
  3417                           
  3418                           ;mrf49xa_packet.c: 131: }
  3419                           ;mrf49xa_packet.c: 133: if (Mrf49xaPacketPending())
  3420  08AF  271A  3188         	fcall	_Mrf49xaPacketPending
  3421  08B1  3A00               	xorlw	0
  3422  08B2  1903               	skipnz
  3423  08B3  28D2               	goto	l3296
  3424                           
  3425                           ;mrf49xa_packet.c: 134: {
  3426                           ;mrf49xa_packet.c: 135: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  3427  08B4  2723  3188         	fcall	_Mrf49xaRxPacket
  3428  08B6  0020               	movlb	0	; select bank0
  3429  08B7  00AE               	movwf	Mrf49xaTick@packet
  3430                           
  3431                           ;mrf49xa_packet.c: 143: if (packet->packet.dst == 0xFF || packet->packet.dst == cfgRam.n
      +                          odeId)
  3432  08B8  3E03               	addlw	3
  3433  08B9  0086               	movwf	6
  3434  08BA  0187               	clrf	7
  3435  08BB  0801               	movf	1,w
  3436  08BC  3AFF               	xorlw	255
  3437  08BD  1903               	skipnz
  3438  08BE  28C6               	goto	l3290
  3439  08BF  082E               	movf	Mrf49xaTick@packet,w
  3440  08C0  3E03               	addlw	3
  3441  08C1  0086               	movwf	6
  3442  08C2  0801               	movf	1,w
  3443  08C3  0634               	xorwf	_cfgRam,w
  3444  08C4  1D03               	skipz
  3445  08C5  28CF               	goto	l3294
  3446  08C6                     l3290:	
  3447                           
  3448                           ;mrf49xa_packet.c: 144: {
  3449                           ;mrf49xa_packet.c: 145: packet->packet.size -= 5;
  3450  08C6  0A2E               	incf	Mrf49xaTick@packet,w
  3451  08C7  0086               	movwf	6
  3452  08C8  3005               	movlw	5
  3453  08C9  0187               	clrf	7
  3454  08CA  0281               	subwf	1,f
  3455                           
  3456                           ;mrf49xa_packet.c: 148: HandlePacket(packet);
  3457  08CB  082E               	movf	Mrf49xaTick@packet,w
  3458  08CC  24BF  3188         	fcall	_HandlePacket
  3459                           
  3460                           ;mrf49xa_packet.c: 150: }
  3461  08CE  28D2               	goto	l3296
  3462  08CF                     l3294:	
  3463                           
  3464                           ;mrf49xa_packet.c: 151: else
  3465                           ;mrf49xa_packet.c: 152: {
  3466                           ;mrf49xa_packet.c: 153: Mrf49xaFreePacket(packet);
  3467  08CF  082E               	movf	Mrf49xaTick@packet,w
  3468  08D0  23ED  3188         	fcall	_Mrf49xaFreePacket
  3469  08D2                     l3296:	
  3470                           
  3471                           ;mrf49xa_packet.c: 154: }
  3472                           ;mrf49xa_packet.c: 158: }
  3473                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  3474  08D2  0021               	movlb	1	; select bank1
  3475  08D3  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3476  08D4  3A03               	xorlw	3
  3477  08D5  1D03               	skipz
  3478  08D6  2905               	goto	l3316
  3479                           
  3480                           ;mrf49xa_packet.c: 161: {
  3481                           ;mrf49xa_packet.c: 162: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  3482  08D7  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3483  08D8  0C89               	rrf	9,f
  3484  08D9  0C89               	rrf	9,f
  3485  08DA  3903               	andlw	3
  3486  08DB  3A02               	xorlw	2
  3487  08DC  1D03               	skipz
  3488  08DD  28E0               	goto	l3302
  3489  08DE                     l3300:	
  3490                           
  3491                           ;mrf49xa_packet.c: 163: {
  3492                           ;mrf49xa_packet.c: 164: rfTrcvStatus.txPacket.state = PKT_FREE;
  3493  08DE  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  3494                           
  3495                           ;mrf49xa_packet.c: 165: }
  3496  08DF  2905               	goto	l3316
  3497  08E0                     l3302:	
  3498                           
  3499                           ;mrf49xa_packet.c: 166: else if (rfTrcvStatus.txPacket.retry == 10)
  3500  08E0  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3501  08E1  390F               	andlw	15
  3502  08E2  3A0A               	xorlw	10
  3503  08E3  1D03               	skipz
  3504  08E4  28FD               	goto	l3312
  3505                           
  3506                           ;mrf49xa_packet.c: 167: {
  3507                           ;mrf49xa_packet.c: 168: if (rfTrcvStatus.txPacket.retransmit == 1)
  3508  08E5  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3509  08E6  3903               	andlw	3
  3510  08E7  3A01               	xorlw	1
  3511  08E8  1903               	btfsc	3,2
  3512  08E9  28DE               	goto	l3300
  3513                           
  3514                           ;mrf49xa_packet.c: 174: else
  3515                           ;mrf49xa_packet.c: 175: {
  3516                           ;mrf49xa_packet.c: 177: rfTrcvStatus.txPacket.retry = 0;
  3517  08EA  30F0               	movlw	-16
  3518  08EB  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  3519                           
  3520                           ;mrf49xa_packet.c: 178: rfTrcvStatus.txPacket.retransmit++;
  3521  08EC  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3522  08ED  3903               	andlw	3
  3523  08EE  0020               	movlb	0	; select bank0
  3524  08EF  00AC               	movwf	??_Mrf49xaTick
  3525  08F0  0AAC               	incf	??_Mrf49xaTick,f
  3526  08F1  0EAC               	swapf	??_Mrf49xaTick,f
  3527  08F2  0021               	movlb	1	; select bank1
  3528  08F3  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3529  08F4  0020               	movlb	0	; select bank0
  3530  08F5  062C               	xorwf	??_Mrf49xaTick,w
  3531  08F6  39CF               	andlw	-49
  3532  08F7  062C               	xorwf	??_Mrf49xaTick,w
  3533  08F8  0021               	movlb	1	; select bank1
  3534  08F9  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  3535                           
  3536                           ;mrf49xa_packet.c: 179: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  3537  08FA  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  3538  08FB  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  3539  08FC  2905               	goto	l3316
  3540  08FD                     l3312:	
  3541                           
  3542                           ;mrf49xa_packet.c: 182: else
  3543                           ;mrf49xa_packet.c: 183: {
  3544                           ;mrf49xa_packet.c: 184: rfTrcvStatus.txPacket.retry++;
  3545  08FD  2796  3188         	fcall	PL10	;call to abstracted procedure
  3546                           
  3547                           ;mrf49xa_packet.c: 185: Sleepy(5);
  3548  08FF  3005               	movlw	5
  3549  0900  0020               	movlb	0	; select bank0
  3550  0901  00A0               	movwf	Sleepy@ms
  3551  0902  01A1               	clrf	Sleepy@ms+1
  3552  0903  2195  3188         	fcall	_Sleepy
  3553  0905                     l3316:	
  3554                           
  3555                           ;mrf49xa_packet.c: 186: }
  3556                           ;mrf49xa_packet.c: 187: }
  3557                           ;mrf49xa_packet.c: 189: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  3558                           ;mrf49xa_packet.c: 190: rfTrcvStatus.state == RECV_IDLE)
  3559  0905  0021               	movlb	1	; select bank1
  3560  0906  0B51               	decfsz	(_rfTrcvStatus^(0+128)+49),w
  3561  0907  0008               	return
  3562  0908  0B69               	decfsz	(_rfTrcvStatus^(0+128)+73),w
  3563  0909  0008               	return
  3564                           
  3565                           ;mrf49xa_packet.c: 191: {
  3566                           ;mrf49xa_packet.c: 192: if (rfTrcvStatus.txPacket.retry >= 10)
  3567  090A  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3568  090B  390F               	andlw	15
  3569  090C  0020               	movlb	0	; select bank0
  3570  090D  00AC               	movwf	??_Mrf49xaTick
  3571  090E  300A               	movlw	10
  3572  090F  022C               	subwf	??_Mrf49xaTick,w
  3573  0910  1C03               	skipc
  3574  0911  2918               	goto	l3328
  3575                           
  3576                           ;mrf49xa_packet.c: 193: {
  3577                           ;mrf49xa_packet.c: 195: rfTrcvStatus.txPacket.retry = 0;
  3578  0912  30F0               	movlw	-16
  3579  0913  0021               	movlb	1	; select bank1
  3580  0914  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  3581                           
  3582                           ;mrf49xa_packet.c: 196: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3583  0915  3003               	movlw	3
  3584  0916  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3585  0917  0008               	return
  3586  0918                     l3328:	
  3587                           
  3588                           ;mrf49xa_packet.c: 198: }
  3589                           ;mrf49xa_packet.c: 202: uint8_t timeout = 0;
  3590  0918  01AD               	clrf	Mrf49xaTick@timeout
  3591  0919                     l3330:	
  3592                           
  3593                           ;mrf49xa_packet.c: 206: {
  3594                           ;mrf49xa_packet.c: 207: Mrf49RxSts();
  3595  0919  23DD  3188         	fcall	_Mrf49RxSts
  3596                           
  3597                           ;mrf49xa_packet.c: 209: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  3598  091B  0021               	movlb	1	; select bank1
  3599  091C  0B69               	decfsz	(_rfTrcvStatus^(0+128)+73),w
  3600  091D  2921               	goto	l3338
  3601  091E  0020               	movlb	0	; select bank0
  3602  091F  1C3D               	btfss	_mrf49Status,0
  3603  0920  292F               	goto	l417
  3604  0921                     l3338:	
  3605                           
  3606                           ;mrf49xa_packet.c: 213: }
  3607                           ;mrf49xa_packet.c: 215: Sleepy(5);
  3608  0921  3005               	movlw	5
  3609  0922  0020               	movlb	0	; select bank0
  3610  0923  00A0               	movwf	Sleepy@ms
  3611  0924  01A1               	clrf	Sleepy@ms+1
  3612  0925  2195  3188         	fcall	_Sleepy
  3613  0927  300B               	movlw	11
  3614                           
  3615                           ;mrf49xa_packet.c: 216: timeout++;
  3616  0928  0AAD               	incf	Mrf49xaTick@timeout,f
  3617                           
  3618                           ;mrf49xa_packet.c: 218: if (timeout > 10)
  3619  0929  022D               	subwf	Mrf49xaTick@timeout,w
  3620  092A  1C03               	skipc
  3621  092B  2919               	goto	l3330
  3622                           
  3623                           ;mrf49xa_packet.c: 219: {
  3624                           ;mrf49xa_packet.c: 220: rfTrcvStatus.txPacket.retry++;
  3625  092C  0021               	movlb	1	; select bank1
  3626  092D  2796               	fcall	PL10	;call to abstracted procedure
  3627  092E  0008               	return
  3628  092F                     l417:	
  3629                           
  3630                           ;mrf49xa_packet.c: 234: INTCONbits.INTE = 0;;
  3631  092F  120B               	bcf	11,4	;volatile
  3632                           
  3633                           ;mrf49xa_packet.c: 235: Mrf49xaModeTx();
  3634  0930  2751               	fcall	_Mrf49xaModeTx
  3635                           
  3636                           ;mrf49xa_packet.c: 236: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  3637  0931  3002               	movlw	2
  3638  0932  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3639                           
  3640                           ;mrf49xa_packet.c: 237: INTCONbits.INTE = 1;;
  3641  0933  160B               	bsf	11,4	;volatile
  3642  0934  0008               	return
  3643  0935                     __end_of_Mrf49xaTick:	
  3644  0935                     __ptext31:	
  3645 ;; *************** function _Mrf49xaInit *****************
  3646 ;; Defined at:
  3647 ;;		line 150 in file "../../../src/devices/mrf49xa.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  k               1    6[BANK0 ] unsigned char 
  3652 ;;  j               1    0        unsigned char 
  3653 ;;  i               1    0        unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;		None               void
  3656 ;; Registers used:
  3657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 1E/0
  3660 ;;		On exit  : 1F/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3663 ;;      Params:         0       0       0       0
  3664 ;;      Locals:         0       1       0       0
  3665 ;;      Temps:          0       0       0       0
  3666 ;;      Totals:         0       1       0       0
  3667 ;;Total ram usage:        1 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    9
  3670 ;; This function calls:
  3671 ;;		_Mrf49TxCmd
  3672 ;;		_Mrf49xaModeRx
  3673 ;;		_Mrf49xaServe
  3674 ;;		_Sleepy
  3675 ;; This function is called by:
  3676 ;;		_Mrf49xaTick
  3677 ;;		_PwrRfInit
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _Mrf49xaInit
  3683  0935                     _Mrf49xaInit:	
  3684  0935                     l234:	
  3685                           ;incstack = 0
  3686                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3687                           ;mrf49xa.c: 152: UI08_t k;
  3688                           ;mrf49xa.c: 154: UI08_t i, j;
  3689                           ;mrf49xa.c: 156: reset:
  3690                           
  3691                           
  3692                           ;mrf49xa.c: 158: for (k = 0; k < sizeof(rfTrcvStatus_t); k++)
  3693  0935  0020               	movlb	0	; select bank0
  3694  0936  01A6               	clrf	Mrf49xaInit@k
  3695  0937                     l3094:	
  3696                           
  3697                           ;mrf49xa.c: 159: {
  3698                           ;mrf49xa.c: 160: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  3699  0937  0826               	movf	Mrf49xaInit@k,w
  3700  0938  3EA0               	addlw	_rfTrcvStatus& (0+255)
  3701  0939  0086               	movwf	6
  3702  093A  304B               	movlw	75
  3703  093B  0187               	clrf	7
  3704  093C  0181               	clrf	1
  3705  093D  0AA6               	incf	Mrf49xaInit@k,f
  3706  093E  0226               	subwf	Mrf49xaInit@k,w
  3707  093F  1C03               	skipc
  3708  0940  2937               	goto	l3094
  3709                           
  3710                           ;mrf49xa.c: 161: }
  3711                           ;mrf49xa.c: 164: PORTCbits.RC6 = 1;
  3712  0941  170E               	bsf	14,6	;volatile
  3713                           
  3714                           ;mrf49xa.c: 165: LATCbits.LATC7 = 0;
  3715  0942  0022               	movlb	2	; select bank2
  3716  0943  138E               	bcf	14,7	;volatile
  3717                           
  3718                           ;mrf49xa.c: 166: PORTBbits.RB7 = 0;
  3719  0944  0020               	movlb	0	; select bank0
  3720  0945  138D               	bcf	13,7	;volatile
  3721                           
  3722                           ;mrf49xa.c: 168: LATCbits.LATC1 = 0;
  3723  0946  0022               	movlb	2	; select bank2
  3724  0947  108E               	bcf	14,1	;volatile
  3725                           
  3726                           ;mrf49xa.c: 169: LATCbits.LATC4 = 1;
  3727  0948  160E               	bsf	14,4	;volatile
  3728                           
  3729                           ;mrf49xa.c: 171: LATAbits.LATA5 = 1;
  3730  0949  168C               	bsf	12,5	;volatile
  3731                           
  3732                           ;mrf49xa.c: 173: Sleepy(64);
  3733  094A  27C9  3188         	fcall	PL24	;call to abstracted procedure
  3734  094C  2195  3188         	fcall	_Sleepy
  3735                           
  3736                           ;mrf49xa.c: 174: LATAbits.LATA4 = 0;
  3737  094E  0022               	movlb	2	; select bank2
  3738  094F  120C               	bcf	12,4	;volatile
  3739                           
  3740                           ;mrf49xa.c: 175: Sleepy(64);
  3741  0950  27C9  3188         	fcall	PL24	;call to abstracted procedure
  3742  0952  2195  3188         	fcall	_Sleepy
  3743                           
  3744                           ;mrf49xa.c: 176: LATAbits.LATA4 = 1;
  3745  0954  0022               	movlb	2	; select bank2
  3746  0955  160C               	bsf	12,4	;volatile
  3747                           
  3748                           ;mrf49xa.c: 177: Sleepy(64);
  3749  0956  27C9  3188         	fcall	PL24	;call to abstracted procedure
  3750  0958  2195               	fcall	_Sleepy
  3751                           
  3752                           ;mrf49xa.c: 179: rfTrcvStatus.state = RECV_IDLE;
  3753  0959  0021               	movlb	1	; select bank1
  3754  095A  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  3755  095B  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  3756                           
  3757                           ;mrf49xa.c: 181: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(5); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3758  095C  0020               	movlb	0	; select bank0
  3759  095D  300B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3760  095E  01A6               	clrf	Mrf49xaInit@k
  3761  095F  3182               	movlp	high __stringtab
  3762  0960  000A               	callw
  3763  0961  3188               	pagesel	$	;select current page
  3764  0962  3800               	iorlw	0
  3765  0963  1903               	btfsc	3,2
  3766  0964  2987               	goto	l3124
  3767  0965                     l3114:	
  3768  0965  3526               	lslf	Mrf49xaInit@k,w
  3769  0966  3E0F               	addlw	low (_mrfRegset_Init| (0+32768))
  3770  0967  3182               	movlp	high __stringtab
  3771  0968  000A               	callw
  3772  0969  3188               	pagesel	$	;select current page
  3773  096A  3A55               	xorlw	85
  3774  096B  1D03               	skipz
  3775  096C  2973               	goto	l3118
  3776  096D  3005               	movlw	5
  3777  096E  00A0               	movwf	Sleepy@ms
  3778  096F  01A1               	clrf	Sleepy@ms+1
  3779  0970  2195  3188         	fcall	_Sleepy
  3780  0972  297F               	goto	l3120
  3781  0973                     l3118:	
  3782  0973  3526               	lslf	Mrf49xaInit@k,w
  3783  0974  3E10               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3784  0975  3182               	movlp	high __stringtab
  3785  0976  000A               	callw
  3786  0977  3188               	pagesel	$	;select current page
  3787  0978  00A1               	movwf	Mrf49TxCmd@val
  3788  0979  3526               	lslf	Mrf49xaInit@k,w
  3789  097A  3E0F               	addlw	low (_mrfRegset_Init| (0+32768))
  3790  097B  3182               	movlp	high __stringtab
  3791  097C  000A               	callw
  3792  097D  3188               	pagesel	$	;select current page
  3793  097E  23D4               	fcall	_Mrf49TxCmd
  3794  097F                     l3120:	
  3795  097F  300B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3796  0980  0AA6               	incf	Mrf49xaInit@k,f
  3797  0981  3182               	movlp	high __stringtab
  3798  0982  000A               	callw
  3799  0983  3188               	pagesel	$	;select current page
  3800  0984  0226               	subwf	Mrf49xaInit@k,w
  3801  0985  1C03               	skipc
  3802  0986  2965               	goto	l3114
  3803  0987                     l3124:	
  3804                           
  3805                           ;mrf49xa.c: 184: Mrf49xaModeRx();
  3806  0987  23AC  3188         	fcall	_Mrf49xaModeRx
  3807                           
  3808                           ;mrf49xa.c: 186: k = 0;
  3809  0989  01A6               	clrf	Mrf49xaInit@k
  3810  098A                     l3136:	
  3811                           ;mrf49xa.c: 187: while(PORTAbits.RA2 == 0)
  3812                           
  3813  098A  0020               	movlb	0	; select bank0
  3814  098B  190C               	btfsc	12,2	;volatile
  3815  098C  0008               	return
  3816                           
  3817                           ;mrf49xa.c: 188: {
  3818                           ;mrf49xa.c: 189: k++;
  3819  098D  0AA6               	incf	Mrf49xaInit@k,f
  3820                           
  3821                           ;mrf49xa.c: 190: if (k == 255)
  3822  098E  0826               	movf	Mrf49xaInit@k,w
  3823  098F  3AFF               	xorlw	255
  3824  0990  1903               	btfsc	3,2
  3825  0991  2935               	goto	l234
  3826                           
  3827                           ;mrf49xa.c: 195: }
  3828                           ;mrf49xa.c: 200: Mrf49xaServe();
  3829                           
  3830                           ;mrf49xa.c: 194: goto reset;
  3831  0992  22BD  3188         	fcall	_Mrf49xaServe
  3832  0994  298A               	goto	l3136
  3833  0995                     __end_of_Mrf49xaInit:	
  3834  0995                     __ptext32:	
  3835 ;; *************** function _Sleepy *****************
  3836 ;; Defined at:
  3837 ;;		line 42 in file "../../../src/node/power.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  ms              2    0[BANK0 ] unsigned int 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  b               1    3[BANK0 ] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : 1F/0
  3848 ;;		On exit  : 1F/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3851 ;;      Params:         0       2       0       0
  3852 ;;      Locals:         0       1       0       0
  3853 ;;      Temps:          0       1       0       0
  3854 ;;      Totals:         0       4       0       0
  3855 ;;Total ram usage:        4 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    5
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_Mrf49xaInit
  3862 ;;		_Mrf49xaTick
  3863 ;;		_main
  3864 ;;		_PwrRfInit
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           
  3869                           ;psect for function _Sleepy
  3870  0995                     _Sleepy:	
  3871                           
  3872                           ;power.c: 44: uint8_t b = 0;
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  3876  0995  01A3               	clrf	Sleepy@b
  3877  0996                     l2954:	
  3878                           ;power.c: 46: while (ms != 0)
  3879                           
  3880  0996  0821               	movf	Sleepy@ms+1,w
  3881  0997  0420               	iorwf	Sleepy@ms,w
  3882  0998  1903               	btfsc	3,2
  3883  0999  0008               	return
  3884                           
  3885                           ;power.c: 47: {
  3886                           ;power.c: 48: if ((ms & 1) != 0)
  3887  099A  1C20               	btfss	Sleepy@ms,0
  3888  099B  29AB               	goto	l2950
  3889                           
  3890                           ;power.c: 49: {
  3891                           ;power.c: 50: WDTCONbits.WDTPS = b;
  3892  099C  0823               	movf	Sleepy@b,w
  3893  099D  00A2               	movwf	??_Sleepy
  3894  099E  0DA2               	rlf	??_Sleepy,f
  3895  099F  0021               	movlb	1	; select bank1
  3896  09A0  0817               	movf	23,w	;volatile
  3897  09A1  0020               	movlb	0	; select bank0
  3898  09A2  0622               	xorwf	??_Sleepy,w
  3899  09A3  39C1               	andlw	-63
  3900  09A4  0622               	xorwf	??_Sleepy,w
  3901  09A5  0021               	movlb	1	; select bank1
  3902  09A6  0097               	movwf	23	;volatile
  3903                           
  3904                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  3905  09A7  1417               	bsf	23,0	;volatile
  3906  09A8  0063               	sleep	;# 
  3907                           
  3908                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  3909  09A9  0021               	movlb	1	; select bank1
  3910  09AA  1017               	bcf	23,0	;volatile
  3911  09AB                     l2950:	
  3912                           
  3913                           ;power.c: 56: }
  3914                           ;power.c: 57: ms = ms >> 1;
  3915  09AB  0020               	movlb	0	; select bank0
  3916  09AC  36A1               	lsrf	Sleepy@ms+1,f
  3917  09AD  0CA0               	rrf	Sleepy@ms,f
  3918                           
  3919                           ;power.c: 58: b++;
  3920  09AE  0AA3               	incf	Sleepy@b,f
  3921  09AF  2996               	goto	l2954
  3922  09B0                     __end_of_Sleepy:	
  3923  09B0                     __ptext54:	
  3924 ;; *************** function _SoftI2cRepeatedStart *****************
  3925 ;; Defined at:
  3926 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;		None               void
  3933 ;; Registers used:
  3934 ;;		wreg, status,2, status,0, pclath, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3940 ;;      Params:         0       0       0       0
  3941 ;;      Locals:         0       0       0       0
  3942 ;;      Temps:          0       0       0       0
  3943 ;;      Totals:         0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    6
  3947 ;; This function calls:
  3948 ;;		_SoftI2cNop
  3949 ;; This function is called by:
  3950 ;;		_eepromRxBytes
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           
  3955                           ;psect for function _SoftI2cRepeatedStart
  3956  09B0                     _SoftI2cRepeatedStart:	
  3957                           
  3958                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  3962  09B0  0021               	movlb	1	; select bank1
  3963  09B1  120D               	bcf	13,4	;volatile
  3964                           
  3965                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  3966  09B2  0022               	movlb	2	; select bank2
  3967  09B3  130D               	bcf	13,6	;volatile
  3968                           
  3969                           ;softI2c.c: 57: SoftI2cNop();
  3970  09B4  229A  3188         	fcall	_SoftI2cNop
  3971                           
  3972                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  3973  09B6  0022               	movlb	2	; select bank2
  3974  09B7  160D               	bsf	13,4	;volatile
  3975                           
  3976                           ;softI2c.c: 60: SoftI2cNop();
  3977  09B8  229A  3188         	fcall	_SoftI2cNop
  3978                           
  3979                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  3980  09BA  0022               	movlb	2	; select bank2
  3981  09BB  170D               	bsf	13,6	;volatile
  3982                           
  3983                           ;softI2c.c: 63: SoftI2cNop();
  3984  09BC  229A  3188         	fcall	_SoftI2cNop
  3985                           
  3986                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  3987  09BE  0022               	movlb	2	; select bank2
  3988  09BF  120D               	bcf	13,4	;volatile
  3989                           
  3990                           ;softI2c.c: 66: SoftI2cNop();
  3991  09C0  229A  3188         	fcall	_SoftI2cNop
  3992                           
  3993                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  3994  09C2  0022               	movlb	2	; select bank2
  3995  09C3  130D               	bcf	13,6	;volatile
  3996                           
  3997                           ;softI2c.c: 69: SoftI2cNop();
  3998  09C4  2A9A               	ljmp	l2400
  3999  09C5                     __end_of_SoftI2cRepeatedStart:	
  4000  09C5                     __ptext60:	
  4001 ;; *************** function _Mcp9800Read *****************
  4002 ;; Defined at:
  4003 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;		None
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  tempL           1    7[BANK0 ] unsigned char 
  4008 ;;  tempH           1    6[BANK0 ] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  2    4[BANK0 ] unsigned int 
  4011 ;; Registers used:
  4012 ;;		wreg, status,2, status,0, pclath, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 1F/0
  4015 ;;		On exit  : 1F/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4018 ;;      Params:         0       2       0       0
  4019 ;;      Locals:         0       2       0       0
  4020 ;;      Temps:          0       0       0       0
  4021 ;;      Totals:         0       4       0       0
  4022 ;;Total ram usage:        4 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    7
  4025 ;; This function calls:
  4026 ;;		_SoftI2cRxByte
  4027 ;;		_SoftI2cStart
  4028 ;;		_SoftI2cStop
  4029 ;;		_SoftI2cTxByte
  4030 ;; This function is called by:
  4031 ;;		_main
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _Mcp9800Read
  4037  09C5                     _Mcp9800Read:	
  4038                           
  4039                           ;mcp9800.c: 21: SoftI2cStart();
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4043  09C5  22A1  3188         	fcall	_SoftI2cStart
  4044                           
  4045                           ;mcp9800.c: 25: SoftI2cTxByte(0b10010001);
  4046  09C7  3091               	movlw	145
  4047  09C8  2233  3188         	fcall	_SoftI2cTxByte
  4048                           
  4049                           ;mcp9800.c: 26: UI08_t tempH = SoftI2cRxByte(1);
  4050  09CA  3001               	movlw	1
  4051  09CB  2261  3188         	fcall	_SoftI2cRxByte
  4052  09CD  00A6               	movwf	Mcp9800Read@tempH
  4053                           
  4054                           ;mcp9800.c: 27: UI08_t tempL = SoftI2cRxByte(0);
  4055  09CE  3000               	movlw	0
  4056  09CF  2261  3188         	fcall	_SoftI2cRxByte
  4057  09D1  00A7               	movwf	Mcp9800Read@tempL
  4058                           
  4059                           ;mcp9800.c: 28: SoftI2cStop();
  4060  09D2  22AE               	fcall	_SoftI2cStop
  4061                           
  4062                           ;mcp9800.c: 30: return (tempH << 8) | tempL;
  4063  09D3  0020               	movlb	0	; select bank0
  4064  09D4  0826               	movf	Mcp9800Read@tempH,w
  4065  09D5  00A5               	movwf	?_Mcp9800Read+1
  4066  09D6  01A4               	clrf	?_Mcp9800Read
  4067  09D7  0827               	movf	Mcp9800Read@tempL,w
  4068  09D8  04A4               	iorwf	?_Mcp9800Read,f
  4069  09D9  0008               	return
  4070  09DA                     __end_of_Mcp9800Read:	
  4071  09DA                     __ptext51:	
  4072 ;; *************** function _eepromTxBytes *****************
  4073 ;; Defined at:
  4074 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  address         2    4[BANK0 ] unsigned int 
  4077 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4078 ;;		 -> eepromTxByte@byte(1), cfgRam(9), 
  4079 ;;  size            1    7[BANK0 ] unsigned char 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;		None               void
  4084 ;; Registers used:
  4085 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 1F/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4091 ;;      Params:         0       4       0       0
  4092 ;;      Locals:         0       0       0       0
  4093 ;;      Temps:          0       0       0       0
  4094 ;;      Totals:         0       4       0       0
  4095 ;;Total ram usage:        4 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    7
  4098 ;; This function calls:
  4099 ;;		_SoftI2cStart
  4100 ;;		_SoftI2cStop
  4101 ;;		_SoftI2cTxByte
  4102 ;; This function is called by:
  4103 ;;		_CfgSave
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           
  4108                           ;psect for function _eepromTxBytes
  4109  09DA                     _eepromTxBytes:	
  4110  09DA                     l2598:	
  4111                           ;incstack = 0
  4112                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4113                           
  4114                           
  4115                           ;24aa64.c: 28: SoftI2cStart();
  4116  09DA  22A1  3188         	fcall	_SoftI2cStart
  4117                           
  4118                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4119  09DC  30A0               	movlw	160
  4120  09DD  2233  3188         	fcall	_SoftI2cTxByte
  4121                           
  4122                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4123  09DF  0020               	movlb	0	; select bank0
  4124  09E0  0825               	movf	eepromTxBytes@address+1,w
  4125  09E1  2233  3188         	fcall	_SoftI2cTxByte
  4126                           
  4127                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4128  09E3  0020               	movlb	0	; select bank0
  4129  09E4  0824               	movf	eepromTxBytes@address,w
  4130  09E5  2233  3188         	fcall	_SoftI2cTxByte
  4131  09E7                     l2606:	
  4132                           ;24aa64.c: 33: while (size != 0)
  4133                           
  4134  09E7  0020               	movlb	0	; select bank0
  4135  09E8  08A7               	movf	eepromTxBytes@size,f
  4136  09E9  1903               	btfsc	3,2
  4137  09EA  29F5               	goto	l2608
  4138                           
  4139                           ;24aa64.c: 34: {
  4140                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4141  09EB  0826               	movf	eepromTxBytes@data,w
  4142  09EC  0086               	movwf	6
  4143  09ED  0187               	clrf	7
  4144  09EE  0801               	movf	1,w
  4145  09EF  2233  3188         	fcall	_SoftI2cTxByte
  4146                           
  4147                           ;24aa64.c: 37: data++;
  4148  09F1  0020               	movlb	0	; select bank0
  4149  09F2  0AA6               	incf	eepromTxBytes@data,f
  4150                           
  4151                           ;24aa64.c: 38: size--;
  4152  09F3  03A7               	decf	eepromTxBytes@size,f
  4153  09F4  29E7               	goto	l2606
  4154  09F5                     l2608:	
  4155                           
  4156                           ;24aa64.c: 39: }
  4157                           ;24aa64.c: 40: SoftI2cStop();
  4158  09F5  2AAE               	ljmp	l2444
  4159  09F6                     __end_of_eepromTxBytes:	
  4160  09F6                     __ptext59:	
  4161 ;; *************** function _Mcp9800Start *****************
  4162 ;; Defined at:
  4163 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  resolution      1    wreg     enum E4252
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  resolution      1    4[BANK0 ] enum E4252
  4168 ;; Return value:  Size  Location     Type
  4169 ;;		None               void
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0, pclath, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 1F/2
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4177 ;;      Params:         0       0       0       0
  4178 ;;      Locals:         0       1       0       0
  4179 ;;      Temps:          0       0       0       0
  4180 ;;      Totals:         0       1       0       0
  4181 ;;Total ram usage:        1 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    7
  4184 ;; This function calls:
  4185 ;;		_SoftI2cStart
  4186 ;;		_SoftI2cStop
  4187 ;;		_SoftI2cTxByte
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _Mcp9800Start
  4195  09F6                     _Mcp9800Start:	
  4196                           
  4197                           ;incstack = 0
  4198                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4199                           ;Mcp9800Start@resolution stored from wreg
  4200  09F6  0020               	movlb	0	; select bank0
  4201  09F7  00A4               	movwf	Mcp9800Start@resolution
  4202                           
  4203                           ;mcp9800.c: 6: SoftI2cStart();
  4204  09F8  22A1  3188         	fcall	_SoftI2cStart
  4205                           
  4206                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4207  09FA  3090               	movlw	144
  4208  09FB  2233  3188         	fcall	_SoftI2cTxByte
  4209                           
  4210                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4211  09FD  3001               	movlw	1
  4212  09FE  2233  3188         	fcall	_SoftI2cTxByte
  4213                           
  4214                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4215  0A00  0020               	movlb	0	; select bank0
  4216  0A01  0824               	movf	Mcp9800Start@resolution,w
  4217  0A02  2233  3188         	fcall	_SoftI2cTxByte
  4218                           
  4219                           ;mcp9800.c: 10: SoftI2cStop();
  4220  0A04  22AE  3188         	fcall	_SoftI2cStop
  4221                           
  4222                           ;mcp9800.c: 12: SoftI2cStart();
  4223  0A06  22A1  3188         	fcall	_SoftI2cStart
  4224                           
  4225                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4226  0A08  3090               	movlw	144
  4227  0A09  2233  3188         	fcall	_SoftI2cTxByte
  4228                           
  4229                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4230  0A0B  3000               	movlw	0
  4231  0A0C  2233  3188         	fcall	_SoftI2cTxByte
  4232                           
  4233                           ;mcp9800.c: 15: SoftI2cStop();
  4234  0A0E  2AAE               	ljmp	l2444
  4235  0A0F                     __end_of_Mcp9800Start:	
  4236  0A0F                     __ptext53:	
  4237 ;; *************** function _eepromRxBytes *****************
  4238 ;; Defined at:
  4239 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  address         2    4[BANK0 ] unsigned int 
  4242 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4243 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  4244 ;;		 -> NULL(0), cfgRam(9), 
  4245 ;;  size            1    7[BANK0 ] unsigned char 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;		None               void
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 1F/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4257 ;;      Params:         0       4       0       0
  4258 ;;      Locals:         0       0       0       0
  4259 ;;      Temps:          0       0       0       0
  4260 ;;      Totals:         0       4       0       0
  4261 ;;Total ram usage:        4 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    7
  4264 ;; This function calls:
  4265 ;;		_SoftI2cRepeatedStart
  4266 ;;		_SoftI2cRxByte
  4267 ;;		_SoftI2cStart
  4268 ;;		_SoftI2cStop
  4269 ;;		_SoftI2cTxByte
  4270 ;; This function is called by:
  4271 ;;		_handleFwCmd
  4272 ;;		_CfgLoad
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           
  4277                           ;psect for function _eepromRxBytes
  4278  0A0F                     _eepromRxBytes:	
  4279  0A0F                     l2586:	
  4280                           ;incstack = 0
  4281                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4282                           
  4283                           
  4284                           ;24aa64.c: 7: SoftI2cStart();
  4285  0A0F  22A1  3188         	fcall	_SoftI2cStart
  4286                           
  4287                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4288  0A11  30A0               	movlw	160
  4289  0A12  2233  3188         	fcall	_SoftI2cTxByte
  4290                           
  4291                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4292  0A14  0020               	movlb	0	; select bank0
  4293  0A15  0825               	movf	eepromRxBytes@address+1,w
  4294  0A16  2233  3188         	fcall	_SoftI2cTxByte
  4295                           
  4296                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4297  0A18  0020               	movlb	0	; select bank0
  4298  0A19  0824               	movf	eepromRxBytes@address,w
  4299  0A1A  2233  3188         	fcall	_SoftI2cTxByte
  4300                           
  4301                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4302  0A1C  21B0  3188         	fcall	_SoftI2cRepeatedStart
  4303                           
  4304                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4305  0A1E  30A1               	movlw	161
  4306  0A1F  2233  3188         	fcall	_SoftI2cTxByte
  4307  0A21                     l2594:	
  4308                           ;24aa64.c: 15: while (size != 0)
  4309                           
  4310  0A21  0020               	movlb	0	; select bank0
  4311  0A22  08A7               	movf	eepromRxBytes@size,f
  4312  0A23  1903               	btfsc	3,2
  4313  0A24  2A32               	goto	l2596
  4314                           
  4315                           ;24aa64.c: 16: {
  4316                           ;24aa64.c: 17: size--;
  4317  0A25  03A7               	decf	eepromRxBytes@size,f
  4318                           
  4319                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  4320  0A26  0826               	movf	eepromRxBytes@data,w
  4321  0A27  0086               	movwf	6
  4322  0A28  3000               	movlw	0
  4323  0A29  0187               	clrf	7
  4324  0A2A  08A7               	movf	eepromRxBytes@size,f
  4325  0A2B  1D03               	skipz
  4326  0A2C  3001               	movlw	1
  4327  0A2D  2261  3188         	fcall	_SoftI2cRxByte
  4328  0A2F  0081               	movwf	1
  4329                           
  4330                           ;24aa64.c: 21: data++;
  4331  0A30  0AA6               	incf	eepromRxBytes@data,f
  4332  0A31  2A21               	goto	l2594
  4333  0A32                     l2596:	
  4334                           
  4335                           ;24aa64.c: 22: }
  4336                           ;24aa64.c: 23: SoftI2cStop();
  4337  0A32  2AAE               	ljmp	l2444
  4338  0A33                     __end_of_eepromRxBytes:	
  4339  0A33                     __ptext61:	
  4340 ;; *************** function _SoftI2cTxByte *****************
  4341 ;; Defined at:
  4342 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  data            1    wreg     unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  data            1    2[BANK0 ] unsigned char 
  4347 ;;  i               1    3[BANK0 ] unsigned char 
  4348 ;;  ack             1    0        unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      unsigned char 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, pclath, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/1
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4358 ;;      Params:         0       0       0       0
  4359 ;;      Locals:         0       3       0       0
  4360 ;;      Temps:          0       0       0       0
  4361 ;;      Totals:         0       3       0       0
  4362 ;;Total ram usage:        3 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    6
  4365 ;; This function calls:
  4366 ;;		_SoftI2cNop
  4367 ;; This function is called by:
  4368 ;;		_SoftI2cInit
  4369 ;;		_Mcp9800Start
  4370 ;;		_Mcp9800Read
  4371 ;;		_eepromRxBytes
  4372 ;;		_eepromTxBytes
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function _SoftI2cTxByte
  4378  0A33                     _SoftI2cTxByte:	
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  4382                           ;SoftI2cTxByte@data stored from wreg
  4383  0A33  0020               	movlb	0	; select bank0
  4384  0A34  00A2               	movwf	SoftI2cTxByte@data
  4385                           
  4386                           ;softI2c.c: 89: UI08_t i;
  4387                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  4388  0A35  3080               	movlw	128
  4389  0A36  00A3               	movwf	SoftI2cTxByte@i
  4390  0A37                     l32:	
  4391                           
  4392                           ;softI2c.c: 92: {
  4393                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  4394  0A37  0022               	movlb	2	; select bank2
  4395  0A38  130D               	bcf	13,6	;volatile
  4396                           
  4397                           ;softI2c.c: 94: SoftI2cNop();
  4398  0A39  229A  3188         	fcall	_SoftI2cNop
  4399                           
  4400                           ;softI2c.c: 96: if(data & i)
  4401  0A3B  0020               	movlb	0	; select bank0
  4402  0A3C  0822               	movf	SoftI2cTxByte@data,w
  4403  0A3D  0523               	andwf	SoftI2cTxByte@i,w
  4404  0A3E  1903               	btfsc	3,2
  4405  0A3F  2A43               	goto	l34
  4406                           
  4407                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  4408  0A40  0022               	movlb	2	; select bank2
  4409  0A41  160D               	bsf	13,4	;volatile
  4410  0A42  2A45               	goto	l35
  4411  0A43                     l34:	
  4412                           
  4413                           ;softI2c.c: 98: else
  4414                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  4415  0A43  0022               	movlb	2	; select bank2
  4416  0A44  120D               	bcf	13,4	;volatile
  4417  0A45                     l35:	
  4418                           
  4419                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  4420  0A45  0021               	movlb	1	; select bank1
  4421  0A46  120D               	bcf	13,4	;volatile
  4422                           
  4423                           ;softI2c.c: 102: SoftI2cNop();
  4424  0A47  229A  3188         	fcall	_SoftI2cNop
  4425                           
  4426                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  4427  0A49  0022               	movlb	2	; select bank2
  4428  0A4A  170D               	bsf	13,6	;volatile
  4429                           
  4430                           ;softI2c.c: 105: SoftI2cNop();
  4431  0A4B  229A  3188         	fcall	_SoftI2cNop
  4432  0A4D  0020               	movlb	0	; select bank0
  4433  0A4E  36A3               	lsrf	SoftI2cTxByte@i,f
  4434  0A4F  08A3               	movf	SoftI2cTxByte@i,f
  4435  0A50  1D03               	skipz
  4436  0A51  2A37               	goto	l32
  4437                           
  4438                           ;softI2c.c: 109: }
  4439                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  4440  0A52  0022               	movlb	2	; select bank2
  4441  0A53  130D               	bcf	13,6	;volatile
  4442                           
  4443                           ;softI2c.c: 113: SoftI2cNop();
  4444  0A54  229A  3188         	fcall	_SoftI2cNop
  4445                           
  4446                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  4447  0A56  0021               	movlb	1	; select bank1
  4448  0A57  160D               	bsf	13,4	;volatile
  4449                           
  4450                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  4451  0A58  0022               	movlb	2	; select bank2
  4452  0A59  170D               	bsf	13,6	;volatile
  4453                           
  4454                           ;softI2c.c: 118: SoftI2cNop();
  4455  0A5A  229A  3188         	fcall	_SoftI2cNop
  4456  0A5C  0020               	movlb	0	; select bank0
  4457  0A5D  080D               	movf	13,w	;volatile
  4458                           
  4459                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  4460  0A5E  0022               	movlb	2	; select bank2
  4461  0A5F  130D               	bcf	13,6	;volatile
  4462                           
  4463                           ;softI2c.c: 123: SoftI2cNop();
  4464  0A60  2A9A               	ljmp	l2400
  4465  0A61                     __end_of_SoftI2cTxByte:	
  4466  0A61                     __ptext64:	
  4467 ;; *************** function _SoftI2cRxByte *****************
  4468 ;; Defined at:
  4469 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  ack             1    wreg     unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  ack             1    1[BANK0 ] unsigned char 
  4474 ;;  i               1    3[BANK0 ] unsigned char 
  4475 ;;  data            1    2[BANK0 ] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      unsigned char 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0, pclath, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 1F/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4485 ;;      Params:         0       0       0       0
  4486 ;;      Locals:         0       3       0       0
  4487 ;;      Temps:          0       0       0       0
  4488 ;;      Totals:         0       3       0       0
  4489 ;;Total ram usage:        3 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    6
  4492 ;; This function calls:
  4493 ;;		_SoftI2cNop
  4494 ;; This function is called by:
  4495 ;;		_Mcp9800Read
  4496 ;;		_eepromRxBytes
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function _SoftI2cRxByte
  4502  0A61                     _SoftI2cRxByte:	
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  4506                           ;SoftI2cRxByte@ack stored from wreg
  4507  0A61  0020               	movlb	0	; select bank0
  4508  0A62  00A1               	movwf	SoftI2cRxByte@ack
  4509                           
  4510                           ;softI2c.c: 131: UI08_t data=0x00;
  4511  0A63  01A2               	clrf	SoftI2cRxByte@data
  4512                           
  4513                           ;softI2c.c: 132: UI08_t i;
  4514                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  4515  0A64  0022               	movlb	2	; select bank2
  4516  0A65  130D               	bcf	13,6	;volatile
  4517                           
  4518                           ;softI2c.c: 135: SoftI2cNop();
  4519  0A66  229A  3188         	fcall	_SoftI2cNop
  4520                           
  4521                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  4522  0A68  0021               	movlb	1	; select bank1
  4523  0A69  160D               	bsf	13,4	;volatile
  4524                           
  4525                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  4526  0A6A  0022               	movlb	2	; select bank2
  4527  0A6B  160D               	bsf	13,4	;volatile
  4528                           
  4529                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  4530  0A6C  3080               	movlw	128
  4531  0A6D  0020               	movlb	0	; select bank0
  4532  0A6E  00A3               	movwf	SoftI2cRxByte@i
  4533  0A6F                     l39:	
  4534                           
  4535                           ;softI2c.c: 140: {
  4536                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  4537  0A6F  0022               	movlb	2	; select bank2
  4538  0A70  130D               	bcf	13,6	;volatile
  4539                           
  4540                           ;softI2c.c: 142: SoftI2cNop();
  4541  0A71  229A  3188         	fcall	_SoftI2cNop
  4542                           
  4543                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  4544  0A73  0022               	movlb	2	; select bank2
  4545  0A74  170D               	bsf	13,6	;volatile
  4546                           
  4547                           ;softI2c.c: 144: SoftI2cNop();
  4548  0A75  229A  3188         	fcall	_SoftI2cNop
  4549                           
  4550                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  4551  0A77  0020               	movlb	0	; select bank0
  4552                           
  4553                           ;softI2c.c: 150: data |= i;
  4554  0A78  0823               	movf	SoftI2cRxByte@i,w
  4555  0A79  1A0D               	btfsc	13,4	;volatile
  4556  0A7A  04A2               	iorwf	SoftI2cRxByte@data,f
  4557  0A7B  36A3               	lsrf	SoftI2cRxByte@i,f
  4558  0A7C  08A3               	movf	SoftI2cRxByte@i,f
  4559  0A7D  1D03               	skipz
  4560  0A7E  2A6F               	goto	l39
  4561                           
  4562                           ;softI2c.c: 152: }
  4563                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  4564  0A7F  0022               	movlb	2	; select bank2
  4565  0A80  130D               	bcf	13,6	;volatile
  4566                           
  4567                           ;softI2c.c: 155: SoftI2cNop();
  4568  0A81  229A  3188         	fcall	_SoftI2cNop
  4569                           
  4570                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  4571  0A83  0021               	movlb	1	; select bank1
  4572  0A84  120D               	bcf	13,4	;volatile
  4573                           
  4574                           ;softI2c.c: 158: if(ack)
  4575  0A85  0020               	movlb	0	; select bank0
  4576  0A86  0821               	movf	SoftI2cRxByte@ack,w
  4577  0A87  1903               	btfsc	3,2
  4578  0A88  2A8C               	goto	l42
  4579                           
  4580                           ;softI2c.c: 159: {
  4581                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  4582  0A89  0022               	movlb	2	; select bank2
  4583  0A8A  120D               	bcf	13,4	;volatile
  4584                           
  4585                           ;softI2c.c: 161: }
  4586  0A8B  2A8E               	goto	l2500
  4587  0A8C                     l42:	
  4588                           
  4589                           ;softI2c.c: 162: else
  4590                           ;softI2c.c: 163: {
  4591                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  4592  0A8C  0022               	movlb	2	; select bank2
  4593  0A8D  160D               	bsf	13,4	;volatile
  4594  0A8E                     l2500:	
  4595                           
  4596                           ;softI2c.c: 165: }
  4597                           ;softI2c.c: 166: SoftI2cNop();
  4598  0A8E  229A  3188         	fcall	_SoftI2cNop
  4599                           
  4600                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  4601  0A90  0022               	movlb	2	; select bank2
  4602  0A91  170D               	bsf	13,6	;volatile
  4603                           
  4604                           ;softI2c.c: 169: SoftI2cNop();
  4605  0A92  229A  3188         	fcall	_SoftI2cNop
  4606                           
  4607                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  4608  0A94  0022               	movlb	2	; select bank2
  4609  0A95  130D               	bcf	13,6	;volatile
  4610                           
  4611                           ;softI2c.c: 172: SoftI2cNop();
  4612  0A96  229A               	fcall	_SoftI2cNop
  4613                           
  4614                           ;softI2c.c: 174: return data;
  4615  0A97  0020               	movlb	0	; select bank0
  4616  0A98  0822               	movf	SoftI2cRxByte@data,w
  4617  0A99  0008               	return
  4618  0A9A                     __end_of_SoftI2cRxByte:	
  4619  0A9A                     __ptext65:	
  4620 ;; *************** function _SoftI2cNop *****************
  4621 ;; Defined at:
  4622 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/2
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4636 ;;      Params:         0       0       0       0
  4637 ;;      Locals:         0       0       0       0
  4638 ;;      Temps:          0       1       0       0
  4639 ;;      Totals:         0       1       0       0
  4640 ;;Total ram usage:        1 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    5
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		_SoftI2cStart
  4647 ;;		_SoftI2cRepeatedStart
  4648 ;;		_SoftI2cStop
  4649 ;;		_SoftI2cTxByte
  4650 ;;		_SoftI2cRxByte
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function _SoftI2cNop
  4656  0A9A                     _SoftI2cNop:	
  4657  0A9A                     l2400:	
  4658                           ;incstack = 0
  4659                           ; Regs used in _SoftI2cNop: [wreg]
  4660                           
  4661                           
  4662                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  4663  0A9A  300A               	movlw	10
  4664  0A9B  0020               	movlb	0	; select bank0
  4665  0A9C  00A0               	movwf	??_SoftI2cNop
  4666  0A9D                     u2467:	
  4667  0A9D  0BA0               	decfsz	??_SoftI2cNop,f
  4668  0A9E  2A9D               	goto	u2467
  4669  0A9F  0000               	nop
  4670  0AA0  0008               	return
  4671  0AA1                     __end_of_SoftI2cNop:	
  4672  0AA1                     __ptext63:	
  4673 ;; *************** function _SoftI2cStart *****************
  4674 ;; Defined at:
  4675 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;		None               void
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0, pclath, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/1
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4689 ;;      Params:         0       0       0       0
  4690 ;;      Locals:         0       0       0       0
  4691 ;;      Temps:          0       0       0       0
  4692 ;;      Totals:         0       0       0       0
  4693 ;;Total ram usage:        0 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    6
  4696 ;; This function calls:
  4697 ;;		_SoftI2cNop
  4698 ;; This function is called by:
  4699 ;;		_SoftI2cInit
  4700 ;;		_Mcp9800Start
  4701 ;;		_Mcp9800Read
  4702 ;;		_eepromRxBytes
  4703 ;;		_eepromTxBytes
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _SoftI2cStart
  4709  0AA1                     _SoftI2cStart:	
  4710                           
  4711                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  4712                           
  4713                           ;incstack = 0
  4714                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  4715  0AA1  0021               	movlb	1	; select bank1
  4716  0AA2  120D               	bcf	13,4	;volatile
  4717                           
  4718                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  4719  0AA3  0022               	movlb	2	; select bank2
  4720  0AA4  170D               	bsf	13,6	;volatile
  4721                           
  4722                           ;softI2c.c: 43: SoftI2cNop();
  4723  0AA5  229A  3188         	fcall	_SoftI2cNop
  4724                           
  4725                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  4726  0AA7  0022               	movlb	2	; select bank2
  4727  0AA8  120D               	bcf	13,4	;volatile
  4728                           
  4729                           ;softI2c.c: 46: SoftI2cNop();
  4730  0AA9  229A  3188         	fcall	_SoftI2cNop
  4731                           
  4732                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  4733  0AAB  0022               	movlb	2	; select bank2
  4734  0AAC  130D               	bcf	13,6	;volatile
  4735                           
  4736                           ;softI2c.c: 48: SoftI2cNop();
  4737  0AAD  2A9A               	ljmp	l2400
  4738  0AAE                     __end_of_SoftI2cStart:	
  4739  0AAE                     __ptext62:	
  4740 ;; *************** function _SoftI2cStop *****************
  4741 ;; Defined at:
  4742 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;		None               void
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0, pclath, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/1
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4756 ;;      Params:         0       0       0       0
  4757 ;;      Locals:         0       0       0       0
  4758 ;;      Temps:          0       0       0       0
  4759 ;;      Totals:         0       0       0       0
  4760 ;;Total ram usage:        0 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    6
  4763 ;; This function calls:
  4764 ;;		_SoftI2cNop
  4765 ;; This function is called by:
  4766 ;;		_SoftI2cInit
  4767 ;;		_Mcp9800Start
  4768 ;;		_Mcp9800Read
  4769 ;;		_eepromRxBytes
  4770 ;;		_eepromTxBytes
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           
  4775                           ;psect for function _SoftI2cStop
  4776  0AAE                     _SoftI2cStop:	
  4777  0AAE                     l2444:	
  4778                           ;incstack = 0
  4779                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  4780                           
  4781                           
  4782                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  4783  0AAE  0021               	movlb	1	; select bank1
  4784  0AAF  120D               	bcf	13,4	;volatile
  4785                           
  4786                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  4787  0AB0  0022               	movlb	2	; select bank2
  4788  0AB1  120D               	bcf	13,4	;volatile
  4789                           
  4790                           ;softI2c.c: 78: SoftI2cNop();
  4791  0AB2  229A  3188         	fcall	_SoftI2cNop
  4792                           
  4793                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  4794  0AB4  0022               	movlb	2	; select bank2
  4795  0AB5  170D               	bsf	13,6	;volatile
  4796                           
  4797                           ;softI2c.c: 81: SoftI2cNop();
  4798  0AB6  229A  3188         	fcall	_SoftI2cNop
  4799                           
  4800                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  4801  0AB8  0022               	movlb	2	; select bank2
  4802  0AB9  160D               	bsf	13,4	;volatile
  4803                           
  4804                           ;softI2c.c: 83: SoftI2cNop();
  4805  0ABA  229A  3188         	fcall	_SoftI2cNop
  4806                           
  4807                           ;softI2c.c: 84: SoftI2cNop();
  4808  0ABC  2A9A               	ljmp	l2400
  4809  0ABD                     __end_of_SoftI2cStop:	
  4810  0ABD                     __ptext33:	
  4811 ;; *************** function _Mrf49xaServe *****************
  4812 ;; Defined at:
  4813 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  data            1    5[BANK0 ] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      unsigned char 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 1F/0
  4824 ;;		On exit  : 1E/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4827 ;;      Params:         0       0       0       0
  4828 ;;      Locals:         0       1       0       0
  4829 ;;      Temps:          0       1       0       0
  4830 ;;      Totals:         0       2       0       0
  4831 ;;Total ram usage:        2 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    8
  4834 ;; This function calls:
  4835 ;;		_Mrf49RxByte
  4836 ;;		_Mrf49RxSts
  4837 ;;		_Mrf49TxByte
  4838 ;;		_Mrf49xaModeRx
  4839 ;;		_Mrf49xaNeedsReset
  4840 ;; This function is called by:
  4841 ;;		_Mrf49xaInit
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           
  4846                           ;psect for function _Mrf49xaServe
  4847  0ABD                     _Mrf49xaServe:	
  4848                           
  4849                           ;mrf49xa_data.c: 10: uint8_t data;
  4850                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4854  0ABD  0021               	movlb	1	; select bank1
  4855  0ABE  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  4856  0ABF  1903               	btfsc	3,2
  4857                           
  4858                           ;mrf49xa_data.c: 13: return 0;
  4859  0AC0  3400               	retlw	0
  4860                           
  4861                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  4862  0AC1  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  4863  0AC2  3400               	retlw	0
  4864                           
  4865                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  4866  0AC3  23DD  3188         	fcall	_Mrf49RxSts
  4867                           
  4868                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  4869  0AC5  083D               	movf	_mrf49Status,w
  4870  0AC6  3AFF               	xorlw	255
  4871  0AC7  1D03               	skipz
  4872  0AC8  2ACD               	goto	l441
  4873  0AC9  083E               	movf	_mrf49Status+1,w
  4874  0ACA  3AFF               	xorlw	255
  4875  0ACB  1903               	btfsc	3,2
  4876  0ACC  3400               	retlw	0
  4877  0ACD                     l441:	
  4878                           ;mrf49xa_data.c: 26: {
  4879                           
  4880                           
  4881                           ;mrf49xa_data.c: 28: }
  4882                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  4883  0ACD  1ABD               	btfsc	_mrf49Status,5
  4884  0ACE  2ADC               	goto	l2854
  4885  0ACF  2AEB               	goto	l442
  4886  0AD0                     l2848:	
  4887                           
  4888                           ;mrf49xa_data.c: 36: case RECV_DATA:
  4889                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  4890  0AD0  23AA  3188         	fcall	_Mrf49RxByte
  4891  0AD2  00A5               	movwf	Mrf49xaServe@data
  4892                           
  4893                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  4894  0AD3  23AA  3188         	fcall	_Mrf49RxByte
  4895  0AD5  00A5               	movwf	Mrf49xaServe@data
  4896                           
  4897                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  4898  0AD6  23AC  3188         	fcall	_Mrf49xaModeRx
  4899                           
  4900                           ;mrf49xa_data.c: 47: break;
  4901  0AD8  2AEB               	goto	l442
  4902  0AD9                     l2850:	
  4903                           
  4904                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  4905  0AD9  23D1  3188         	fcall	_Mrf49xaNeedsReset
  4906                           
  4907                           ;mrf49xa_data.c: 51: break;
  4908  0ADB  2AEB               	goto	l442
  4909  0ADC                     l2854:	
  4910  0ADC  0021               	movlb	1	; select bank1
  4911  0ADD  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  4912                           
  4913                           ; Switch size 1, requested type "space"
  4914                           ; Number of cases is 4, Range of values is 0 to 3
  4915                           ; switch strategies available:
  4916                           ; Name         Instructions Cycles
  4917                           ; simple_byte           13     7 (average)
  4918                           ; direct_byte           14     6 (fixed)
  4919                           ; jumptable            260     6 (fixed)
  4920                           ;	Chosen strategy is simple_byte
  4921  0ADE  3A00               	xorlw	0	; case 0
  4922  0ADF  1903               	skipnz
  4923  0AE0  2AD9               	goto	l2850
  4924  0AE1  3A01               	xorlw	1	; case 1
  4925  0AE2  1903               	skipnz
  4926  0AE3  2AD0               	goto	l2848
  4927  0AE4  3A03               	xorlw	3	; case 2
  4928  0AE5  1903               	skipnz
  4929  0AE6  2AD0               	goto	l2848
  4930  0AE7  3A01               	xorlw	1	; case 3
  4931  0AE8  1903               	skipnz
  4932  0AE9  2AEB               	goto	l442
  4933  0AEA  2AEB               	goto	l442
  4934  0AEB                     l442:	
  4935                           
  4936                           ;mrf49xa_data.c: 60: }
  4937                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4938  0AEB  0020               	movlb	0	; select bank0
  4939  0AEC  1BBD               	btfsc	_mrf49Status,7
  4940  0AED  2B91               	goto	l2936
  4941  0AEE  2BA0               	goto	l2938
  4942  0AEF                     l2858:	
  4943                           
  4944                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  4945  0AEF  23D1  3188         	fcall	_Mrf49xaNeedsReset
  4946                           
  4947                           ;mrf49xa_data.c: 76: break;
  4948  0AF1  2BA0               	goto	l2938
  4949  0AF2                     l2860:	
  4950                           
  4951                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  4952  0AF2  23AA  3188         	fcall	_Mrf49RxByte
  4953  0AF4  00A5               	movwf	Mrf49xaServe@data
  4954                           
  4955                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4956  0AF5  1BBE               	btfsc	_mrf49Status+1,7
  4957  0AF6  2AFA               	goto	l2866
  4958  0AF7                     l2864:	
  4959                           
  4960                           ;mrf49xa_data.c: 84: {
  4961                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  4962  0AF7  23AC  3188         	fcall	_Mrf49xaModeRx
  4963                           
  4964                           ;mrf49xa_data.c: 86: break;
  4965  0AF9  2BA0               	goto	l2938
  4966  0AFA                     l2866:	
  4967                           
  4968                           ;mrf49xa_data.c: 87: }
  4969                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  4970  0AFA  0021               	movlb	1	; select bank1
  4971  0AFB  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  4972  0AFC  1D03               	skipz
  4973  0AFD  2B00               	goto	l2870
  4974  0AFE  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  4975  0AFF  2B04               	goto	L1
  4976  0B00                     l2870:	
  4977                           
  4978                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  4979  0B00  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  4980  0B01  1D03               	skipz
  4981  0B02  2AF7               	goto	l2864
  4982  0B03  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  4983  0B04                     L1:	
  4984  0B04  00A0               	movwf	_rfTrcvStatus^(0+128)
  4985                           
  4986                           ;mrf49xa_data.c: 97: }
  4987                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  4988  0B05  0A20               	incf	_rfTrcvStatus^(0+128),w
  4989  0B06  0086               	movwf	6
  4990  0B07  0187               	clrf	7
  4991                           
  4992                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  4993  0B08  27C3  3188         	fcall	PL22	;call to abstracted procedure
  4994  0B0A  3E16               	addlw	22
  4995  0B0B  0086               	movwf	6
  4996  0B0C  0181               	clrf	1
  4997                           
  4998                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  4999  0B0D  0820               	movf	_rfTrcvStatus^(0+128),w
  5000  0B0E  0086               	movwf	6
  5001  0B0F  3004               	movlw	4
  5002  0B10  0081               	movwf	1
  5003                           
  5004                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  5005  0B11  3002               	movlw	2
  5006  0B12  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  5007                           
  5008                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  5009  0B13  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5010  0B14  3980               	andlw	-128
  5011  0B15  3801               	iorlw	1
  5012  0B16  2B41               	goto	L2
  5013  0B17                     l2886:	
  5014                           ;mrf49xa_data.c: 105: break;
  5015                           
  5016                           
  5017                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  5018  0B17  23AA  3188         	fcall	_Mrf49RxByte
  5019  0B19  00A5               	movwf	Mrf49xaServe@data
  5020                           
  5021                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5022  0B1A  1BBE               	btfsc	_mrf49Status+1,7
  5023  0B1B  2B22               	goto	l2894
  5024                           
  5025                           ;mrf49xa_data.c: 114: {
  5026                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5027  0B1C  0021               	movlb	1	; select bank1
  5028  0B1D  0820               	movf	_rfTrcvStatus^(0+128),w
  5029  0B1E  0086               	movwf	6
  5030  0B1F  3005               	movlw	5
  5031  0B20  0187               	clrf	7
  5032  0B21  2B32               	goto	L3
  5033  0B22                     l2894:	
  5034                           
  5035                           ;mrf49xa_data.c: 118: }
  5036                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  5037  0B22  0021               	movlb	1	; select bank1
  5038  0B23  0A20               	incf	_rfTrcvStatus^(0+128),w
  5039  0B24  0086               	movwf	6
  5040  0B25  0187               	clrf	7
  5041  0B26  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5042  0B27  397F               	andlw	127
  5043  0B28  0601               	xorwf	1,w
  5044  0B29  1D03               	skipz
  5045  0B2A  2B34               	goto	l2900
  5046                           
  5047                           ;mrf49xa_data.c: 121: {
  5048                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
  5049  0B2B  0820               	movf	_rfTrcvStatus^(0+128),w
  5050  0B2C  3E16               	addlw	22
  5051  0B2D  0086               	movwf	6
  5052                           
  5053                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5054  0B2E  27C3  3188         	fcall	PL22	;call to abstracted procedure
  5055  0B30  0086               	movwf	6
  5056  0B31  3005               	movlw	5
  5057  0B32                     L3:	
  5058  0B32  0081               	movwf	1
  5059  0B33  2AF7               	goto	l2864
  5060  0B34                     l2900:	
  5061                           
  5062                           ;mrf49xa_data.c: 135: else
  5063                           ;mrf49xa_data.c: 136: {
  5064                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  5065  0B34  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5066  0B35  397F               	andlw	127
  5067  0B36  0720               	addwf	_rfTrcvStatus^(0+128),w
  5068  0B37  0020               	movlb	0	; select bank0
  5069  0B38  00A4               	movwf	??_Mrf49xaServe
  5070  0B39  0A24               	incf	??_Mrf49xaServe,w
  5071  0B3A  0086               	movwf	6
  5072  0B3B  0187               	clrf	7
  5073  0B3C  0825               	movf	Mrf49xaServe@data,w
  5074  0B3D  0081               	movwf	1
  5075  0B3E  0021               	movlb	1	; select bank1
  5076  0B3F  27A4  3188         	fcall	PL12	;call to abstracted procedure
  5077  0B41                     L2:	
  5078  0B41  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5079  0B42  2BA0               	goto	l2938
  5080  0B43                     l2904:	
  5081                           
  5082                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
  5083  0B43  27A4  3188         	fcall	PL12	;call to abstracted procedure
  5084  0B45  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5085                           
  5086                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5087  0B46  397F               	andlw	127
  5088  0B47  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  5089  0B48  1D03               	skipz
  5090  0B49  2B7F               	goto	l2932
  5091                           
  5092                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
  5093  0B4A  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5094  0B4B  3980               	andlw	-128
  5095  0B4C  3831               	iorlw	49
  5096  0B4D  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5097  0B4E  2B7F               	goto	l2932
  5098  0B4F                     l2908:	
  5099                           
  5100                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
  5101  0B4F  302D               	movlw	45
  5102  0B50  23A5  3188         	fcall	_Mrf49TxByte
  5103                           
  5104                           ;mrf49xa_data.c: 152: break;
  5105  0B52  2BA0               	goto	l2938
  5106  0B53                     l2910:	
  5107                           
  5108                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
  5109  0B53  30D4               	movlw	212
  5110  0B54  23A5  3188         	fcall	_Mrf49TxByte
  5111                           
  5112                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
  5113  0B56  307F               	movlw	127
  5114  0B57  0021               	movlb	1	; select bank1
  5115  0B58  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
  5116                           
  5117                           ;mrf49xa_data.c: 157: break;
  5118  0B59  2BA0               	goto	l2938
  5119  0B5A                     l2914:	
  5120                           
  5121                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5122  0B5A  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5123  0B5B  397F               	andlw	127
  5124  0B5C  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  5125  0B5D  0086               	movwf	6
  5126  0B5E  0187               	clrf	7
  5127  0B5F  0801               	movf	1,w
  5128  0B60  23A5  3188         	fcall	_Mrf49TxByte
  5129                           
  5130                           ;mrf49xa_data.c: 162: break;
  5131  0B62  2BA0               	goto	l2938
  5132  0B63                     l2916:	
  5133                           
  5134                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5135  0B63  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  5136  0B64  23A5  3188         	fcall	_Mrf49TxByte
  5137                           
  5138                           ;mrf49xa_data.c: 166: break;
  5139  0B66  2BA0               	goto	l2938
  5140  0B67                     l2918:	
  5141                           
  5142                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
  5143  0B67  3000               	movlw	0
  5144  0B68  23A5  3188         	fcall	_Mrf49TxByte
  5145                           
  5146                           ;mrf49xa_data.c: 170: break;
  5147  0B6A  2BA0               	goto	l2938
  5148  0B6B                     l2920:	
  5149                           
  5150                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
  5151  0B6B  3000               	movlw	0
  5152  0B6C  23A5  3188         	fcall	_Mrf49TxByte
  5153                           
  5154                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
  5155  0B6E  23AC  3188         	fcall	_Mrf49xaModeRx
  5156                           
  5157                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
  5158  0B70  30F0               	movlw	-16
  5159  0B71  0021               	movlb	1	; select bank1
  5160  0B72  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  5161                           
  5162                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  5163  0B73  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  5164  0B74  0C89               	rrf	9,f
  5165  0B75  0C89               	rrf	9,f
  5166  0B76  3903               	andlw	3
  5167  0B77  3A01               	xorlw	1
  5168  0B78  1D03               	skipz
  5169  0B79  2B7D               	goto	l2928
  5170                           
  5171                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5172  0B7A  3003               	movlw	3
  5173  0B7B  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  5174  0B7C  2BA0               	goto	l2938
  5175  0B7D                     l2928:	
  5176                           
  5177                           ;mrf49xa_data.c: 180: else
  5178                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
  5179  0B7D  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  5180  0B7E  2BA0               	goto	l2938
  5181  0B7F                     l2932:	
  5182  0B7F  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5183  0B80  397F               	andlw	127
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 5, Range of values is 49 to 101
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte           16     9 (average)
  5190                           ; direct_byte          115     9 (fixed)
  5191                           ; jumptable            263     9 (fixed)
  5192                           ;	Chosen strategy is simple_byte
  5193  0B81  3A31               	xorlw	49	; case 49
  5194  0B82  1903               	skipnz
  5195  0B83  2B63               	goto	l2916
  5196  0B84  3A03               	xorlw	3	; case 50
  5197  0B85  1903               	skipnz
  5198  0B86  2B67               	goto	l2918
  5199  0B87  3A01               	xorlw	1	; case 51
  5200  0B88  1903               	skipnz
  5201  0B89  2B6B               	goto	l2920
  5202  0B8A  3A57               	xorlw	87	; case 100
  5203  0B8B  1903               	skipnz
  5204  0B8C  2B4F               	goto	l2908
  5205  0B8D  3A01               	xorlw	1	; case 101
  5206  0B8E  1903               	skipnz
  5207  0B8F  2B53               	goto	l2910
  5208  0B90  2B5A               	goto	l2914
  5209  0B91                     l2936:	
  5210  0B91  0021               	movlb	1	; select bank1
  5211  0B92  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  5212                           
  5213                           ; Switch size 1, requested type "space"
  5214                           ; Number of cases is 4, Range of values is 0 to 3
  5215                           ; switch strategies available:
  5216                           ; Name         Instructions Cycles
  5217                           ; simple_byte           13     7 (average)
  5218                           ; direct_byte           14     6 (fixed)
  5219                           ; jumptable            260     6 (fixed)
  5220                           ;	Chosen strategy is simple_byte
  5221  0B93  3A00               	xorlw	0	; case 0
  5222  0B94  1903               	skipnz
  5223  0B95  2AEF               	goto	l2858
  5224  0B96  3A01               	xorlw	1	; case 1
  5225  0B97  1903               	skipnz
  5226  0B98  2AF2               	goto	l2860
  5227  0B99  3A03               	xorlw	3	; case 2
  5228  0B9A  1903               	skipnz
  5229  0B9B  2B17               	goto	l2886
  5230  0B9C  3A01               	xorlw	1	; case 3
  5231  0B9D  1903               	skipnz
  5232  0B9E  2B43               	goto	l2904
  5233  0B9F  2BA0               	goto	l2938
  5234  0BA0                     l2938:	
  5235                           
  5236                           ;mrf49xa_data.c: 188: }
  5237                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
  5238  0BA0  0020               	movlb	0	; select bank0
  5239  0BA1  0C0C               	rrf	12,w	;volatile
  5240  0BA2  0C89               	rrf	9,f
  5241  0BA3  3901               	andlw	1
  5242  0BA4  0008               	return
  5243  0BA5                     __end_of_Mrf49xaServe:	
  5244  0BA5                     __ptext36:	
  5245 ;; *************** function _Mrf49TxByte *****************
  5246 ;; Defined at:
  5247 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;  byte            1    wreg     unsigned char 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  byte            1    3[BANK0 ] unsigned char 
  5252 ;; Return value:  Size  Location     Type
  5253 ;;		None               void
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 1E/1
  5258 ;;		On exit  : 1F/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5261 ;;      Params:         0       0       0       0
  5262 ;;      Locals:         0       1       0       0
  5263 ;;      Temps:          0       0       0       0
  5264 ;;      Totals:         0       1       0       0
  5265 ;;Total ram usage:        1 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    7
  5268 ;; This function calls:
  5269 ;;		_Mrf49TxCmd
  5270 ;; This function is called by:
  5271 ;;		_Mrf49xaServe
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _Mrf49TxByte
  5277  0BA5                     _Mrf49TxByte:	
  5278                           
  5279                           ;incstack = 0
  5280                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5281                           ;Mrf49TxByte@byte stored from wreg
  5282  0BA5  0020               	movlb	0	; select bank0
  5283  0BA6  00A3               	movwf	Mrf49TxByte@byte
  5284                           
  5285                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  5286  0BA7  00A1               	movwf	Mrf49TxCmd@val
  5287  0BA8  30B8               	movlw	184
  5288  0BA9  2BD4               	ljmp	_Mrf49TxCmd
  5289  0BAA                     __end_of_Mrf49TxByte:	
  5290  0BAA                     __ptext39:	
  5291 ;; *************** function _Mrf49RxByte *****************
  5292 ;; Defined at:
  5293 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      unsigned char 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2, status,0, pclath, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 1E/1
  5304 ;;		On exit  : 1F/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5307 ;;      Params:         0       0       0       0
  5308 ;;      Locals:         0       0       0       0
  5309 ;;      Temps:          0       0       0       0
  5310 ;;      Totals:         0       0       0       0
  5311 ;;Total ram usage:        0 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:    7
  5314 ;; This function calls:
  5315 ;;		_Mrf49RxCmd
  5316 ;; This function is called by:
  5317 ;;		_Mrf49xaServe
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function _Mrf49RxByte
  5323  0BAA                     _Mrf49RxByte:	
  5324                           
  5325                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  5326                           
  5327                           ;incstack = 0
  5328                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5329  0BAA  30B0               	movlw	176
  5330  0BAB  2F47               	ljmp	_Mrf49RxCmd
  5331  0BAC                     __end_of_Mrf49RxByte:	
  5332  0BAC                     __ptext35:	
  5333 ;; *************** function _Mrf49xaModeRx *****************
  5334 ;; Defined at:
  5335 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;		None
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  k               1    3[BANK0 ] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;		None               void
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 1E/1
  5346 ;;		On exit  : 1F/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5349 ;;      Params:         0       0       0       0
  5350 ;;      Locals:         0       1       0       0
  5351 ;;      Temps:          0       0       0       0
  5352 ;;      Totals:         0       1       0       0
  5353 ;;Total ram usage:        1 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    7
  5356 ;; This function calls:
  5357 ;;		_Mrf49TxCmd
  5358 ;; This function is called by:
  5359 ;;		_Mrf49xaReboot
  5360 ;;		_Mrf49xaInit
  5361 ;;		_Mrf49xaServe
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _Mrf49xaModeRx
  5367  0BAC                     _Mrf49xaModeRx:	
  5368  0BAC                     l2620:	
  5369                           ;incstack = 0
  5370                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5371                           
  5372                           
  5373                           ;mrf49xa.c: 101: UI08_t k;
  5374                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  5375  0BAC  0020               	movlb	0	; select bank0
  5376  0BAD  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5377  0BAE  01A3               	clrf	Mrf49xaModeRx@k
  5378  0BAF  3182               	movlp	high __stringtab
  5379  0BB0  000A               	callw
  5380  0BB1  3188               	pagesel	$	;select current page
  5381  0BB2  3800               	iorlw	0
  5382  0BB3  1903               	btfsc	3,2
  5383  0BB4  2BC9               	goto	l211
  5384  0BB5                     l2626:	
  5385  0BB5  3523               	lslf	Mrf49xaModeRx@k,w
  5386  0BB6  3E30               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5387  0BB7  3182               	movlp	high __stringtab
  5388  0BB8  000A               	callw
  5389  0BB9  3188               	pagesel	$	;select current page
  5390  0BBA  00A1               	movwf	Mrf49TxCmd@val
  5391  0BBB  3523               	lslf	Mrf49xaModeRx@k,w
  5392  0BBC  3E2F               	addlw	low (_mrfRegset_Rx| (0+32768))
  5393  0BBD  3182               	movlp	high __stringtab
  5394  0BBE  000A               	callw
  5395  0BBF  3188               	pagesel	$	;select current page
  5396  0BC0  23D4               	fcall	_Mrf49TxCmd
  5397  0BC1  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5398  0BC2  0AA3               	incf	Mrf49xaModeRx@k,f
  5399  0BC3  3182               	movlp	high __stringtab
  5400  0BC4  000A               	callw
  5401  0BC5  3188               	pagesel	$	;select current page
  5402  0BC6  0223               	subwf	Mrf49xaModeRx@k,w
  5403  0BC7  1C03               	skipc
  5404  0BC8  2BB5               	goto	l2626
  5405  0BC9                     l211:	
  5406                           
  5407                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  5408  0BC9  0021               	movlb	1	; select bank1
  5409  0BCA  3080               	movlw	-128
  5410  0BCB  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  5411  0BCC  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  5412                           
  5413                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  5414  0BCD  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  5415                           
  5416                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  5417  0BCE  0020               	movlb	0	; select bank0
  5418  0BCF  13BD               	bcf	_mrf49Status,7
  5419  0BD0  0008               	return
  5420  0BD1                     __end_of_Mrf49xaModeRx:	
  5421  0BD1                     __ptext34:	
  5422 ;; *************** function _Mrf49xaNeedsReset *****************
  5423 ;; Defined at:
  5424 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		None
  5433 ;; Tracked objects:
  5434 ;;		On entry : 1E/1
  5435 ;;		On exit  : 1F/1
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5438 ;;      Params:         0       0       0       0
  5439 ;;      Locals:         0       0       0       0
  5440 ;;      Temps:          0       0       0       0
  5441 ;;      Totals:         0       0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    5
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_Mrf49xaServe
  5449 ;;		_main
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _Mrf49xaNeedsReset
  5455  0BD1                     _Mrf49xaNeedsReset:	
  5456                           
  5457                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _Mrf49xaNeedsReset: []
  5461  0BD1  0021               	movlb	1	; select bank1
  5462  0BD2  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
  5463  0BD3  0008               	return
  5464  0BD4                     __end_of_Mrf49xaNeedsReset:	
  5465  0BD4                     __ptext37:	
  5466 ;; *************** function _Mrf49TxCmd *****************
  5467 ;; Defined at:
  5468 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  cmd             1    wreg     unsigned char 
  5471 ;;  val             1    1[BANK0 ] unsigned char 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  cmd             1    2[BANK0 ] unsigned char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;		None               void
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, status,0, pclath, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 1F/0
  5480 ;;		On exit  : 1F/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5483 ;;      Params:         0       1       0       0
  5484 ;;      Locals:         0       1       0       0
  5485 ;;      Temps:          0       0       0       0
  5486 ;;      Totals:         0       2       0       0
  5487 ;;Total ram usage:        2 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    6
  5490 ;; This function calls:
  5491 ;;		_Mrf49SpiTx
  5492 ;; This function is called by:
  5493 ;;		_Mrf49xaModeRx
  5494 ;;		_Mrf49xaModeTx
  5495 ;;		_Mrf49xaModeSleep
  5496 ;;		_Mrf49xaInit
  5497 ;;		_Mrf49TxByte
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           
  5502                           ;psect for function _Mrf49TxCmd
  5503  0BD4                     _Mrf49TxCmd:	
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5507                           ;Mrf49TxCmd@cmd stored from wreg
  5508  0BD4  00A2               	movwf	Mrf49TxCmd@cmd
  5509                           
  5510                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  5511  0BD5  130E               	bcf	14,6	;volatile
  5512                           
  5513                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5514  0BD6  0822               	movf	Mrf49TxCmd@cmd,w
  5515  0BD7  26BF  3188         	fcall	_Mrf49SpiTx
  5516                           
  5517                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5518  0BD9  0821               	movf	Mrf49TxCmd@val,w
  5519  0BDA  26BF               	fcall	_Mrf49SpiTx
  5520                           
  5521                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  5522  0BDB  170E               	bsf	14,6	;volatile
  5523  0BDC  0008               	return
  5524  0BDD                     __end_of_Mrf49TxCmd:	
  5525  0BDD                     __ptext38:	
  5526 ;; *************** function _Mrf49RxSts *****************
  5527 ;; Defined at:
  5528 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;		None
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;		None               void
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, pclath, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 1E/0
  5539 ;;		On exit  : 1F/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5542 ;;      Params:         0       0       0       0
  5543 ;;      Locals:         0       0       0       0
  5544 ;;      Temps:          0       0       0       0
  5545 ;;      Totals:         0       0       0       0
  5546 ;;Total ram usage:        0 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    6
  5549 ;; This function calls:
  5550 ;;		_Mrf49SpiRx
  5551 ;; This function is called by:
  5552 ;;		_Mrf49xaTick
  5553 ;;		_Mrf49xaServe
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _Mrf49RxSts
  5559  0BDD                     _Mrf49RxSts:	
  5560                           
  5561                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  5565  0BDD  120B               	bcf	11,4	;volatile
  5566                           
  5567                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  5568  0BDE  0020               	movlb	0	; select bank0
  5569  0BDF  130E               	bcf	14,6	;volatile
  5570                           
  5571                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  5572  0BE0  267B  3188         	fcall	_Mrf49SpiRx
  5573  0BE2  00BD               	movwf	_mrf49Status
  5574                           
  5575                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  5576  0BE3  267B               	fcall	_Mrf49SpiRx
  5577  0BE4  00BE               	movwf	_mrf49Status+1
  5578                           
  5579                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  5580  0BE5  170E               	bsf	14,6	;volatile
  5581                           
  5582                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  5583  0BE6  160B               	bsf	11,4	;volatile
  5584  0BE7  0008               	return
  5585  0BE8                     __end_of_Mrf49RxSts:	
  5586  0BE8                     __ptext23:	
  5587 ;; *************** function _PwrI2cSleep *****************
  5588 ;; Defined at:
  5589 ;;		line 73 in file "../../../src/node/power.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		None
  5598 ;; Tracked objects:
  5599 ;;		On entry : 1F/2
  5600 ;;		On exit  : 1F/1
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5603 ;;      Params:         0       0       0       0
  5604 ;;      Locals:         0       0       0       0
  5605 ;;      Temps:          0       0       0       0
  5606 ;;      Totals:         0       0       0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    5
  5610 ;; This function calls:
  5611 ;;		Nothing
  5612 ;; This function is called by:
  5613 ;;		_main
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           
  5618                           ;psect for function _PwrI2cSleep
  5619  0BE8                     _PwrI2cSleep:	
  5620                           
  5621                           ;power.c: 75: LATBbits.LATB6 = 1;
  5622                           
  5623                           ;incstack = 0
  5624                           ; Regs used in _PwrI2cSleep: []
  5625                           
  5626                           ;power.c: 76: LATBbits.LATB4 = 1;
  5627                           
  5628                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  5629                           
  5630                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  5631  0BE8  27B7               	fcall	PL18	;call to abstracted procedure
  5632  0BE9  0008               	return
  5633  0BEA                     __end_of_PwrI2cSleep:	
  5634  0BEA                     __ptext14:	
  5635 ;; *************** function _PwrSensorSleep *****************
  5636 ;; Defined at:
  5637 ;;		line 139 in file "../../../src/node/power.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;		None
  5642 ;; Return value:  Size  Location     Type
  5643 ;;		None               void
  5644 ;; Registers used:
  5645 ;;		None
  5646 ;; Tracked objects:
  5647 ;;		On entry : 1E/1
  5648 ;;		On exit  : 1F/2
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5651 ;;      Params:         0       0       0       0
  5652 ;;      Locals:         0       0       0       0
  5653 ;;      Temps:          0       0       0       0
  5654 ;;      Totals:         0       0       0       0
  5655 ;;Total ram usage:        0 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    5
  5658 ;; This function calls:
  5659 ;;		Nothing
  5660 ;; This function is called by:
  5661 ;;		_main
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           
  5666                           ;psect for function _PwrSensorSleep
  5667  0BEA                     _PwrSensorSleep:	
  5668                           
  5669                           ;power.c: 141: LATCbits.LATC2 = 0;
  5670                           
  5671                           ;incstack = 0
  5672                           ; Regs used in _PwrSensorSleep: []
  5673  0BEA  0022               	movlb	2	; select bank2
  5674  0BEB  110E               	bcf	14,2	;volatile
  5675  0BEC  0008               	return
  5676  0BED                     __end_of_PwrSensorSleep:	
  5677  0BED                     __ptext57:	
  5678 ;; *************** function _Mrf49xaFreePacket *****************
  5679 ;; Defined at:
  5680 ;;		line 85 in file "../../../src/devices/mrf49xa_packet.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5683 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5686 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;		None               void
  5689 ;; Registers used:
  5690 ;;		wreg, fsr1l, fsr1h, status,2
  5691 ;; Tracked objects:
  5692 ;;		On entry : 1F/0
  5693 ;;		On exit  : 1F/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5696 ;;      Params:         0       0       0       0
  5697 ;;      Locals:         0       1       0       0
  5698 ;;      Temps:          0       0       0       0
  5699 ;;      Totals:         0       1       0       0
  5700 ;;Total ram usage:        1 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    5
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_Mrf49xaTick
  5707 ;;		_HandlePacket
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function _Mrf49xaFreePacket
  5713  0BED                     _Mrf49xaFreePacket:	
  5714                           
  5715                           ;incstack = 0
  5716                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5717                           ;Mrf49xaFreePacket@packet stored from wreg
  5718  0BED  00A0               	movwf	Mrf49xaFreePacket@packet
  5719                           
  5720                           ;mrf49xa_packet.c: 87: packet->state = PKT_FREE;
  5721  0BEE  0086               	movwf	6
  5722  0BEF  0187               	clrf	7
  5723  0BF0  0181               	clrf	1
  5724  0BF1  0008               	return
  5725  0BF2                     __end_of_Mrf49xaFreePacket:	
  5726  0BF2                     __ptext22:	
  5727 ;; *************** function _PwrI2cWake *****************
  5728 ;; Defined at:
  5729 ;;		line 82 in file "../../../src/node/power.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;		None               void
  5736 ;; Registers used:
  5737 ;;		None
  5738 ;; Tracked objects:
  5739 ;;		On entry : 1F/2
  5740 ;;		On exit  : 1F/2
  5741 ;;		Unchanged: 1F/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5743 ;;      Params:         0       0       0       0
  5744 ;;      Locals:         0       0       0       0
  5745 ;;      Temps:          0       0       0       0
  5746 ;;      Totals:         0       0       0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    5
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _PwrI2cWake
  5759  0BF2                     _PwrI2cWake:	
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _PwrI2cWake: []
  5763  0BF2  0008               	return
  5764  0BF3                     __end_of_PwrI2cWake:	
  5765  0BF3                     __ptext18:	
  5766 ;; *************** function _PwrRfSleep *****************
  5767 ;; Defined at:
  5768 ;;		line 119 in file "../../../src/node/power.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;		None               void
  5775 ;; Registers used:
  5776 ;;		wreg, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 1E/1
  5779 ;;		On exit  : 1F/1
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5782 ;;      Params:         0       0       0       0
  5783 ;;      Locals:         0       0       0       0
  5784 ;;      Temps:          0       0       0       0
  5785 ;;      Totals:         0       0       0       0
  5786 ;;Total ram usage:        0 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    9
  5789 ;; This function calls:
  5790 ;;		_Mrf49xaShutdown
  5791 ;; This function is called by:
  5792 ;;		_main
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           
  5797                           ;psect for function _PwrRfSleep
  5798  0BF3                     _PwrRfSleep:	
  5799                           
  5800                           ;power.c: 121: Mrf49xaShutdown();
  5801                           
  5802                           ;incstack = 0
  5803                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  5804  0BF3  2775               	fcall	_Mrf49xaShutdown
  5805                           
  5806                           ;power.c: 122: INTCONbits.INTE = 0;
  5807  0BF4  120B               	bcf	11,4	;volatile
  5808  0BF5  0008               	return
  5809  0BF6                     __end_of_PwrRfSleep:	
  5810  0BF6                     __ptext2:	
  5811 ;; *************** function _RfSendPowerState *****************
  5812 ;; Defined at:
  5813 ;;		line 13 in file "../../../src/rfstack/packets.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  s               2    6[BANK0 ] unsigned int 
  5818 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5819 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;		None               void
  5822 ;; Registers used:
  5823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 1F/0
  5826 ;;		On exit  : 1F/1
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5829 ;;      Params:         0       0       0       0
  5830 ;;      Locals:         0       3       0       0
  5831 ;;      Temps:          0       0       0       0
  5832 ;;      Totals:         0       3       0       0
  5833 ;;Total ram usage:        3 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    7
  5836 ;; This function calls:
  5837 ;;		_AdcSample
  5838 ;;		_Mrf49xaAllocPacket
  5839 ;;		_Mrf49xaTxPacket
  5840 ;;		_PwrAdcSleep
  5841 ;;		_PwrAdcWake
  5842 ;; This function is called by:
  5843 ;;		_main
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           
  5848                           ;psect for function _RfSendPowerState
  5849  0BF6                     _RfSendPowerState:	
  5850                           
  5851                           ;packets.c: 15: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  5852                           
  5853                           ;incstack = 0
  5854                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5855  0BF6  24B2  3188         	fcall	_Mrf49xaAllocPacket
  5856  0BF8  0020               	movlb	0	; select bank0
  5857  0BF9  00A8               	movwf	RfSendPowerState@packet
  5858                           
  5859                           ;packets.c: 17: packet->packet.size = 4;
  5860  0BFA  0A28               	incf	RfSendPowerState@packet,w
  5861  0BFB  0086               	movwf	6
  5862  0BFC  3004               	movlw	4
  5863  0BFD  0187               	clrf	7
  5864  0BFE  0081               	movwf	1
  5865                           
  5866                           ;packets.c: 18: packet->packet.id = RF_POWER_STATUS;
  5867  0BFF  0828               	movf	RfSendPowerState@packet,w
  5868  0C00  3E04               	addlw	4
  5869  0C01  0086               	movwf	6
  5870  0C02  30A3               	movlw	163
  5871  0C03  0081               	movwf	1
  5872                           
  5873                           ;packets.c: 19: packet->packet.dst = 0xFF;
  5874  0C04  0828               	movf	RfSendPowerState@packet,w
  5875  0C05  3E03               	addlw	3
  5876  0C06  0086               	movwf	6
  5877  0C07  30FF               	movlw	255
  5878  0C08  0081               	movwf	1
  5879                           
  5880                           ;packets.c: 21: packet->packet.data[0] = coldBoot; coldBoot = 0;
  5881  0C09  0828               	movf	RfSendPowerState@packet,w
  5882  0C0A  3E06               	addlw	6
  5883  0C0B  0086               	movwf	6
  5884  0C0C  083F               	movf	_coldBoot,w
  5885  0C0D  0081               	movwf	1
  5886  0C0E  01BF               	clrf	_coldBoot
  5887                           
  5888                           ;packets.c: 22: packet->packet.data[1] = 0;
  5889  0C0F  0828               	movf	RfSendPowerState@packet,w
  5890  0C10  3E07               	addlw	7
  5891  0C11  0086               	movwf	6
  5892  0C12  0181               	clrf	1
  5893                           
  5894                           ;packets.c: 24: PwrAdcWake();
  5895  0C13  2468  3188         	fcall	_PwrAdcWake
  5896                           
  5897                           ;packets.c: 25: uint16_t s = AdcSample(ADC_FVR);
  5898  0C15  301F               	movlw	31
  5899  0C16  242F  3188         	fcall	_AdcSample
  5900  0C18  0823               	movf	?_AdcSample+1,w
  5901  0C19  00A7               	movwf	RfSendPowerState@s+1
  5902  0C1A  0822               	movf	?_AdcSample,w
  5903  0C1B  00A6               	movwf	RfSendPowerState@s
  5904                           
  5905                           ;packets.c: 26: PwrAdcSleep();
  5906  0C1C  2464  3188         	fcall	_PwrAdcSleep
  5907                           
  5908                           ;packets.c: 27: packet->packet.data[2] = s & 0xFF;
  5909  0C1E  0020               	movlb	0	; select bank0
  5910  0C1F  0828               	movf	RfSendPowerState@packet,w
  5911  0C20  3E08               	addlw	8
  5912  0C21  0086               	movwf	6
  5913  0C22  0187               	clrf	7
  5914  0C23  0826               	movf	RfSendPowerState@s,w
  5915  0C24  0081               	movwf	1
  5916                           
  5917                           ;packets.c: 28: packet->packet.data[3] = s >> 8;
  5918  0C25  0828               	movf	RfSendPowerState@packet,w
  5919  0C26  3E09               	addlw	9
  5920  0C27  0086               	movwf	6
  5921  0C28  0827               	movf	RfSendPowerState@s+1,w
  5922  0C29  0081               	movwf	1
  5923                           
  5924                           ;packets.c: 30: Mrf49xaTxPacket(packet, 0, 1);
  5925  0C2A  01A0               	clrf	Mrf49xaTxPacket@response
  5926  0C2B  01A1               	clrf	Mrf49xaTxPacket@needAck
  5927  0C2C  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  5928  0C2D  0828               	movf	RfSendPowerState@packet,w
  5929  0C2E  2D2F               	ljmp	_Mrf49xaTxPacket
  5930  0C2F                     __end_of_RfSendPowerState:	
  5931  0C2F                     __ptext8:	
  5932 ;; *************** function _AdcSample *****************
  5933 ;; Defined at:
  5934 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  ch              1    wreg     unsigned char 
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;  ch              1    5[BANK0 ] unsigned char 
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  2    2[BANK0 ] unsigned int 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0, pclath, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 1F/1
  5945 ;;		On exit  : 1F/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5948 ;;      Params:         0       2       0       0
  5949 ;;      Locals:         0       1       0       0
  5950 ;;      Temps:          0       1       0       0
  5951 ;;      Totals:         0       4       0       0
  5952 ;;Total ram usage:        4 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    6
  5955 ;; This function calls:
  5956 ;;		_AdcChSelect
  5957 ;;		_AdcGetResult
  5958 ;;		_AdcGo
  5959 ;;		_AdcIsBusy
  5960 ;; This function is called by:
  5961 ;;		_RfSendPowerState
  5962 ;;		_main
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           
  5967                           ;psect for function _AdcSample
  5968  0C2F                     _AdcSample:	
  5969                           
  5970                           ;incstack = 0
  5971                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  5972                           ;AdcSample@ch stored from wreg
  5973  0C2F  0020               	movlb	0	; select bank0
  5974  0C30  00A5               	movwf	AdcSample@ch
  5975                           
  5976                           ;adc16.c: 83: AdcChSelect(ch);
  5977  0C31  0825               	movf	AdcSample@ch,w
  5978  0C32  245D  3188         	fcall	_AdcChSelect
  5979                           
  5980                           ;adc16.c: 86: AdcGo();
  5981  0C34  2457  3188         	fcall	_AdcGo
  5982                           
  5983                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  5984  0C36  30C7               	movlw	199
  5985  0C37  0020               	movlb	0	; select bank0
  5986  0C38  00A4               	movwf	??_AdcSample
  5987  0C39                     u2457:	
  5988  0C39  0000               	nop
  5989  0C3A  0BA4               	decfsz	??_AdcSample,f
  5990  0C3B  2C39               	goto	u2457
  5991  0C3C  3200               	nop2	;nop
  5992  0C3D  0000               	nop
  5993  0C3E                     l3056:	
  5994                           ;adc16.c: 88: while (AdcIsBusy());
  5995                           
  5996  0C3E  2459  3188         	fcall	_AdcIsBusy
  5997  0C40  3800               	iorlw	0
  5998  0C41  1D03               	skipz
  5999  0C42  2C3E               	goto	l3056
  6000                           
  6001                           ;adc16.c: 89: AdcGo();
  6002  0C43  2457  3188         	fcall	_AdcGo
  6003  0C45                     l3060:	
  6004                           ;adc16.c: 90: while (AdcIsBusy());
  6005                           
  6006  0C45  2459  3188         	fcall	_AdcIsBusy
  6007  0C47  3800               	iorlw	0
  6008  0C48  1D03               	skipz
  6009  0C49  2C45               	goto	l3060
  6010                           
  6011                           ;psect for function _AdcGetResult
  6012                           
  6013                           ;adc16.c: 92: return AdcGetResult();
  6014  0C4A                     i1L_AdcGetResult:	
  6015  0C4A                     i1Ll2814:	
  6016                           
  6017                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  6018  0C4A  081C               	movf	28,w	;volatile
  6019  0C4B  0020               	movlb	0	; select bank0
  6020  0C4C  00A1               	movwf	?_AdcGetResult+1
  6021  0C4D  01A0               	clrf	?_AdcGetResult
  6022  0C4E  0021               	movlb	1	; select bank1
  6023  0C4F  081B               	movf	27,w	;volatile
  6024  0C50  0020               	movlb	0	; select bank0
  6025  0C51  04A0               	iorwf	?_AdcGetResult,f
  6026  0C52                     i1Ll79:	
  6027  0C52  0821               	movf	?_AdcGetResult+1,w
  6028  0C53  00A3               	movwf	?_AdcSample+1
  6029  0C54  0820               	movf	?_AdcGetResult,w
  6030  0C55  00A2               	movwf	?_AdcSample
  6031  0C56  0008               	return
  6032  0C57                     __end_of_AdcSample:	
  6033  0C57                     __ptext10:	
  6034 ;; *************** function _AdcGo *****************
  6035 ;; Defined at:
  6036 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;		None
  6041 ;; Return value:  Size  Location     Type
  6042 ;;		None               void
  6043 ;; Registers used:
  6044 ;;		None
  6045 ;; Tracked objects:
  6046 ;;		On entry : 1F/1
  6047 ;;		On exit  : 1F/1
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6050 ;;      Params:         0       0       0       0
  6051 ;;      Locals:         0       0       0       0
  6052 ;;      Temps:          0       0       0       0
  6053 ;;      Totals:         0       0       0       0
  6054 ;;Total ram usage:        0 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    5
  6057 ;; This function calls:
  6058 ;;		Nothing
  6059 ;; This function is called by:
  6060 ;;		_AdcSample
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           
  6065                           ;psect for function _AdcGo
  6066  0C57                     _AdcGo:	
  6067                           
  6068                           ;adc16.c: 31: ADCON0 |= 1<<1;
  6069                           
  6070                           ;incstack = 0
  6071                           ; Regs used in _AdcGo: []
  6072  0C57  149D               	bsf	29,1	;volatile
  6073  0C58  0008               	return
  6074  0C59                     __end_of_AdcGo:	
  6075  0C59                     __ptext9:	
  6076 ;; *************** function _AdcIsBusy *****************
  6077 ;; Defined at:
  6078 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      unsigned char 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/1
  6089 ;;		On exit  : 1F/1
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6092 ;;      Params:         0       0       0       0
  6093 ;;      Locals:         0       0       0       0
  6094 ;;      Temps:          0       0       0       0
  6095 ;;      Totals:         0       0       0       0
  6096 ;;Total ram usage:        0 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    5
  6099 ;; This function calls:
  6100 ;;		Nothing
  6101 ;; This function is called by:
  6102 ;;		_AdcSample
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _AdcIsBusy
  6108  0C59                     _AdcIsBusy:	
  6109                           
  6110                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  6114  0C59  0021               	movlb	1	; select bank1
  6115  0C5A  361D               	lsrf	29,w	;volatile
  6116  0C5B  3901               	andlw	1
  6117  0C5C  0008               	return
  6118  0C5D                     __end_of_AdcIsBusy:	
  6119  0C5D                     __ptext12:	
  6120 ;; *************** function _AdcChSelect *****************
  6121 ;; Defined at:
  6122 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;  channel         1    wreg     enum E4222
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  channel         1    0[BANK0 ] enum E4222
  6127 ;; Return value:  Size  Location     Type
  6128 ;;		None               void
  6129 ;; Registers used:
  6130 ;;		wreg, status,2, status,0
  6131 ;; Tracked objects:
  6132 ;;		On entry : 1F/0
  6133 ;;		On exit  : 1F/1
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6136 ;;      Params:         0       0       0       0
  6137 ;;      Locals:         0       1       0       0
  6138 ;;      Temps:          0       0       0       0
  6139 ;;      Totals:         0       1       0       0
  6140 ;;Total ram usage:        1 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    5
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_AdcSample
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           
  6151                           ;psect for function _AdcChSelect
  6152  0C5D                     _AdcChSelect:	
  6153                           
  6154                           ;incstack = 0
  6155                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  6156                           ;AdcChSelect@channel stored from wreg
  6157  0C5D  00A0               	movwf	AdcChSelect@channel
  6158                           
  6159                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  6160  0C5E  0709               	addwf	9,w
  6161  0C5F  0709               	addwf	9,w
  6162  0C60  3801               	iorlw	1
  6163  0C61  0021               	movlb	1	; select bank1
  6164  0C62  009D               	movwf	29	;volatile
  6165  0C63  0008               	return
  6166  0C64                     __end_of_AdcChSelect:	
  6167  0C64                     __ptext5:	
  6168 ;; *************** function _PwrAdcSleep *****************
  6169 ;; Defined at:
  6170 ;;		line 160 in file "../../../src/node/power.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;		None
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;		None
  6175 ;; Return value:  Size  Location     Type
  6176 ;;		None               void
  6177 ;; Registers used:
  6178 ;;		status,2, status,0, pclath, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/1
  6181 ;;		On exit  : 1F/1
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6184 ;;      Params:         0       0       0       0
  6185 ;;      Locals:         0       0       0       0
  6186 ;;      Temps:          0       0       0       0
  6187 ;;      Totals:         0       0       0       0
  6188 ;;Total ram usage:        0 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    6
  6191 ;; This function calls:
  6192 ;;		_AdcDeinit
  6193 ;; This function is called by:
  6194 ;;		_RfSendPowerState
  6195 ;;		_main
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           
  6200                           ;psect for function _PwrAdcSleep
  6201  0C64                     _PwrAdcSleep:	
  6202                           
  6203                           ;power.c: 162: ANSELC = 0;
  6204                           
  6205                           ;incstack = 0
  6206                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  6207  0C64  0023               	movlb	3	; select bank3
  6208                           
  6209                           ;power.c: 163: PORTCbits.RC0 = 1;
  6210                           
  6211                           ;power.c: 164: TRISCbits.TRISC0 = 0;
  6212  0C65  27BD  3188         	fcall	PL20	;call to abstracted procedure
  6213                           
  6214                           ;power.c: 166: AdcDeinit();
  6215  0C67  2F77               	ljmp	l2812
  6216  0C68                     __end_of_PwrAdcSleep:	
  6217  0C68                     __ptext3:	
  6218 ;; *************** function _PwrAdcWake *****************
  6219 ;; Defined at:
  6220 ;;		line 169 in file "../../../src/node/power.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;		None               void
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0, pclath, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/2
  6231 ;;		On exit  : 1F/1
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6234 ;;      Params:         0       0       0       0
  6235 ;;      Locals:         0       0       0       0
  6236 ;;      Temps:          0       0       0       0
  6237 ;;      Totals:         0       0       0       0
  6238 ;;Total ram usage:        0 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    6
  6241 ;; This function calls:
  6242 ;;		_AdcInit
  6243 ;; This function is called by:
  6244 ;;		_RfSendPowerState
  6245 ;;		_main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _PwrAdcWake
  6251  0C68                     _PwrAdcWake:	
  6252                           
  6253                           ;power.c: 171: ANSELC = (1<<0);
  6254                           
  6255                           ;incstack = 0
  6256                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  6257  0C68  3001               	movlw	1
  6258  0C69  0023               	movlb	3	; select bank3
  6259  0C6A  008E               	movwf	14	;volatile
  6260                           
  6261                           ;power.c: 172: TRISCbits.TRISC0 = 1;
  6262  0C6B  0021               	movlb	1	; select bank1
  6263  0C6C  140E               	bsf	14,0	;volatile
  6264                           
  6265                           ;power.c: 174: AdcInit();
  6266  0C6D  2FF5               	ljmp	l2804
  6267  0C6E                     __end_of_PwrAdcWake:	
  6268  0C6E                     __ptext1:	
  6269 ;; *************** function _RfSendSampleWeatherNode *****************
  6270 ;; Defined at:
  6271 ;;		line 33 in file "../../../src/rfstack/packets.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  temperature     2    6[BANK0 ] unsigned int 
  6274 ;;  humidity        2    8[BANK0 ] unsigned int 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  6277 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;		None               void
  6280 ;; Registers used:
  6281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 1F/0
  6284 ;;		On exit  : 1F/1
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6287 ;;      Params:         0       4       0       0
  6288 ;;      Locals:         0       1       0       0
  6289 ;;      Temps:          0       0       0       0
  6290 ;;      Totals:         0       5       0       0
  6291 ;;Total ram usage:        5 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    6
  6294 ;; This function calls:
  6295 ;;		_Mrf49xaAllocPacket
  6296 ;;		_Mrf49xaTxPacket
  6297 ;; This function is called by:
  6298 ;;		_main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function _RfSendSampleWeatherNode
  6304  0C6E                     _RfSendSampleWeatherNode:	
  6305                           
  6306                           ;packets.c: 35: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  6307                           
  6308                           ;incstack = 0
  6309                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6310  0C6E  24B2  3188         	fcall	_Mrf49xaAllocPacket
  6311  0C70  0020               	movlb	0	; select bank0
  6312  0C71  00AA               	movwf	RfSendSampleWeatherNode@packet
  6313                           
  6314                           ;packets.c: 37: packet->packet.size = 10;
  6315  0C72  0A2A               	incf	RfSendSampleWeatherNode@packet,w
  6316  0C73  0086               	movwf	6
  6317  0C74  300A               	movlw	10
  6318  0C75  0187               	clrf	7
  6319  0C76  0081               	movwf	1
  6320                           
  6321                           ;packets.c: 38: packet->packet.id = RF_APP_SAMPLE;
  6322  0C77  082A               	movf	RfSendSampleWeatherNode@packet,w
  6323  0C78  3E04               	addlw	4
  6324  0C79  0086               	movwf	6
  6325  0C7A  0181               	clrf	1
  6326                           
  6327                           ;packets.c: 39: packet->packet.dst = 0xFF;
  6328  0C7B  082A               	movf	RfSendSampleWeatherNode@packet,w
  6329  0C7C  3E03               	addlw	3
  6330  0C7D  0086               	movwf	6
  6331  0C7E  30FF               	movlw	255
  6332  0C7F  0081               	movwf	1
  6333                           
  6334                           ;packets.c: 41: packet->packet.data[0] = 0;
  6335  0C80  082A               	movf	RfSendSampleWeatherNode@packet,w
  6336  0C81  3E06               	addlw	6
  6337  0C82  0086               	movwf	6
  6338  0C83  0181               	clrf	1
  6339                           
  6340                           ;packets.c: 42: packet->packet.data[1] = 0;
  6341  0C84  082A               	movf	RfSendSampleWeatherNode@packet,w
  6342  0C85  3E07               	addlw	7
  6343  0C86  0086               	movwf	6
  6344  0C87  0181               	clrf	1
  6345                           
  6346                           ;packets.c: 43: packet->packet.data[2] = 0;
  6347  0C88  082A               	movf	RfSendSampleWeatherNode@packet,w
  6348  0C89  3E08               	addlw	8
  6349  0C8A  0086               	movwf	6
  6350  0C8B  0181               	clrf	1
  6351                           
  6352                           ;packets.c: 44: packet->packet.data[3] = 0;
  6353  0C8C  082A               	movf	RfSendSampleWeatherNode@packet,w
  6354  0C8D  3E09               	addlw	9
  6355  0C8E  0086               	movwf	6
  6356  0C8F  0181               	clrf	1
  6357                           
  6358                           ;packets.c: 46: packet->packet.data[4] = 0;
  6359  0C90  082A               	movf	RfSendSampleWeatherNode@packet,w
  6360  0C91  3E0A               	addlw	10
  6361  0C92  0086               	movwf	6
  6362  0C93  0181               	clrf	1
  6363                           
  6364                           ;packets.c: 48: packet->packet.data[6] = temperature >> 8;
  6365  0C94  082A               	movf	RfSendSampleWeatherNode@packet,w
  6366  0C95  3E0C               	addlw	12
  6367  0C96  0086               	movwf	6
  6368  0C97  0827               	movf	RfSendSampleWeatherNode@temperature+1,w
  6369  0C98  0081               	movwf	1
  6370                           
  6371                           ;packets.c: 49: packet->packet.data[5] = temperature & 0xFF;
  6372  0C99  082A               	movf	RfSendSampleWeatherNode@packet,w
  6373  0C9A  3E0B               	addlw	11
  6374  0C9B  0086               	movwf	6
  6375  0C9C  0826               	movf	RfSendSampleWeatherNode@temperature,w
  6376  0C9D  0081               	movwf	1
  6377                           
  6378                           ;packets.c: 51: packet->packet.data[7] = 1;
  6379  0C9E  082A               	movf	RfSendSampleWeatherNode@packet,w
  6380  0C9F  3E0D               	addlw	13
  6381  0CA0  0086               	movwf	6
  6382  0CA1  0181               	clrf	1
  6383  0CA2  0A81               	incf	1,f
  6384                           
  6385                           ;packets.c: 53: packet->packet.data[9] = humidity >> 8;
  6386  0CA3  082A               	movf	RfSendSampleWeatherNode@packet,w
  6387  0CA4  3E0F               	addlw	15
  6388  0CA5  0086               	movwf	6
  6389  0CA6  0829               	movf	RfSendSampleWeatherNode@humidity+1,w
  6390  0CA7  0081               	movwf	1
  6391                           
  6392                           ;packets.c: 54: packet->packet.data[8] = humidity & 0xFF;
  6393  0CA8  082A               	movf	RfSendSampleWeatherNode@packet,w
  6394  0CA9  3E0E               	addlw	14
  6395  0CAA  0086               	movwf	6
  6396  0CAB  0828               	movf	RfSendSampleWeatherNode@humidity,w
  6397  0CAC  0081               	movwf	1
  6398                           
  6399                           ;packets.c: 56: Mrf49xaTxPacket(packet, 0, 1);
  6400  0CAD  01A0               	clrf	Mrf49xaTxPacket@response
  6401  0CAE  01A1               	clrf	Mrf49xaTxPacket@needAck
  6402  0CAF  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  6403  0CB0  082A               	movf	RfSendSampleWeatherNode@packet,w
  6404  0CB1  2D2F               	ljmp	_Mrf49xaTxPacket
  6405  0CB2                     __end_of_RfSendSampleWeatherNode:	
  6406  0CB2                     __ptext7:	
  6407 ;; *************** function _Mrf49xaAllocPacket *****************
  6408 ;; Defined at:
  6409 ;;		line 107 in file "../../../src/devices/mrf49xa_packet.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  1    wreg      PTR struct rfTrcvPacket_
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0
  6418 ;; Tracked objects:
  6419 ;;		On entry : 1F/0
  6420 ;;		On exit  : 1F/1
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6423 ;;      Params:         0       0       0       0
  6424 ;;      Locals:         0       0       0       0
  6425 ;;      Temps:          0       0       0       0
  6426 ;;      Totals:         0       0       0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    5
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_RfSendPowerState
  6434 ;;		_RfSendSampleWeatherNode
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _Mrf49xaAllocPacket
  6440  0CB2                     _Mrf49xaAllocPacket:	
  6441                           
  6442                           ;mrf49xa_packet.c: 109: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  6446  0CB2  0021               	movlb	1	; select bank1
  6447  0CB3  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6448  0CB4  1D03               	skipz
  6449  0CB5  2CB9               	goto	l3174
  6450                           
  6451                           ;mrf49xa_packet.c: 110: {
  6452                           ;mrf49xa_packet.c: 111: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  6453  0CB6  3006               	movlw	6
  6454  0CB7  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  6455                           
  6456                           ;mrf49xa_packet.c: 112: return &(rfTrcvStatus.rxPacket[0]);
  6457  0CB8  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  6458  0CB9                     l3174:	
  6459                           
  6460                           ;mrf49xa_packet.c: 113: }
  6461                           ;mrf49xa_packet.c: 115: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  6462  0CB9  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  6463  0CBA  1D03               	skipz
  6464  0CBB  3400               	retlw	0
  6465                           
  6466                           ;mrf49xa_packet.c: 116: {
  6467                           ;mrf49xa_packet.c: 117: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  6468  0CBC  3006               	movlw	6
  6469  0CBD  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  6470                           
  6471                           ;mrf49xa_packet.c: 118: return &(rfTrcvStatus.rxPacket[1]);
  6472  0CBE  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  6473  0CBF                     __end_of_Mrf49xaAllocPacket:	
  6474                           ;mrf49xa_packet.c: 119: }
  6475                           ;mrf49xa_packet.c: 121: return (0);
  6476                           
  6477  0CBF                     __ptext43:	
  6478 ;; *************** function _HandlePacket *****************
  6479 ;; Defined at:
  6480 ;;		line 150 in file "../../../src/rfstack/client.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6483 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  packet          1   11[BANK0 ] PTR struct rfTrcvPacket_
  6486 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6487 ;;  response        1   10[BANK0 ] struct .
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 1F/0
  6494 ;;		On exit  : 1F/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6497 ;;      Params:         0       0       0       0
  6498 ;;      Locals:         0       2       0       0
  6499 ;;      Temps:          0       1       0       0
  6500 ;;      Totals:         0       3       0       0
  6501 ;;Total ram usage:        3 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:   10
  6504 ;; This function calls:
  6505 ;;		_Mrf49xaFreePacket
  6506 ;;		_Mrf49xaTxAck
  6507 ;;		_Mrf49xaTxPacket
  6508 ;;		_handleCfgCmd
  6509 ;;		_handleCfgRead
  6510 ;;		_handleCfgWrite
  6511 ;;		_handleFwCmd
  6512 ;; This function is called by:
  6513 ;;		_Mrf49xaTick
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function _HandlePacket
  6519  0CBF                     _HandlePacket:	
  6520                           
  6521                           ;incstack = 0
  6522                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6523                           ;HandlePacket@packet stored from wreg
  6524  0CBF  00AB               	movwf	HandlePacket@packet
  6525                           
  6526                           ;client.c: 153: struct
  6527                           ;client.c: 154: {
  6528                           ;client.c: 155: bool_t reset:1;
  6529                           ;client.c: 156: bool_t needAck:1;
  6530                           ;client.c: 157: bool_t sendAck:1;
  6531                           ;client.c: 158: bool_t sendMsg:1;
  6532                           ;client.c: 159: } response;
  6533                           ;client.c: 162: switch (packet->packet.id)
  6534  0CC0  2CF2               	goto	l3210
  6535  0CC1                     l3186:	
  6536                           
  6537                           ;client.c: 165: packet->packet.data[0] = 2;
  6538  0CC1  082B               	movf	HandlePacket@packet,w
  6539  0CC2  3E06               	addlw	6
  6540  0CC3  0086               	movwf	6
  6541  0CC4  3002               	movlw	2
  6542  0CC5  0187               	clrf	7
  6543  0CC6  0081               	movwf	1
  6544  0CC7                     l3188:	
  6545                           
  6546                           ;client.c: 166: response.sendMsg = 1;
  6547  0CC7  0020               	movlb	0	; select bank0
  6548  0CC8  15AA               	bsf	HandlePacket@response,3
  6549                           
  6550                           ;client.c: 167: break;
  6551  0CC9  2D10               	goto	l555
  6552  0CCA                     l3190:	
  6553                           
  6554                           ;client.c: 170: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  6555                           ;client.c: 171: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  6556  0CCA  082B               	movf	HandlePacket@packet,w
  6557  0CCB  3E07               	addlw	7
  6558  0CCC  0086               	movwf	6
  6559  0CCD  0187               	clrf	7
  6560  0CCE  0021               	movlb	1	; select bank1
  6561  0CCF  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  6562  0CD0  0601               	xorwf	1,w
  6563  0CD1  1D03               	skipz
  6564  0CD2  2D10               	goto	l555
  6565  0CD3  0020               	movlb	0	; select bank0
  6566  0CD4  082B               	movf	HandlePacket@packet,w
  6567  0CD5  3E06               	addlw	6
  6568  0CD6  0086               	movwf	6
  6569  0CD7  0021               	movlb	1	; select bank1
  6570  0CD8  0855               	movf	(_rfTrcvStatus^(0+128)+53),w
  6571  0CD9  0601               	xorwf	1,w
  6572  0CDA  1D03               	skipz
  6573  0CDB  2D10               	goto	l555
  6574                           
  6575                           ;client.c: 172: {
  6576                           ;client.c: 173: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  6577  0CDC  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  6578  0CDD  393F               	andlw	-193
  6579  0CDE  3880               	iorlw	128
  6580  0CDF  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  6581  0CE0  2D10               	goto	l555
  6582  0CE1                     l558:	
  6583                           ;client.c: 178: syncedTime = *((uint32_t*) packet->packet.data);
  6584                           
  6585                           
  6586                           ;client.c: 179: response.sendAck = 1;
  6587  0CE1  152A               	bsf	HandlePacket@response,2
  6588                           
  6589                           ;client.c: 180: break;
  6590  0CE2  2D10               	goto	l555
  6591  0CE3                     l3196:	
  6592                           
  6593                           ;client.c: 190: handleCfgCmd(packet);
  6594  0CE3  082B               	movf	HandlePacket@packet,w
  6595  0CE4  25AC  3188         	fcall	_handleCfgCmd
  6596  0CE6  2CC7               	goto	l3188
  6597  0CE7                     l3200:	
  6598                           
  6599                           ;client.c: 196: handleCfgWrite(packet);
  6600  0CE7  082B               	movf	HandlePacket@packet,w
  6601  0CE8  2617  3188         	fcall	_handleCfgWrite
  6602  0CEA                     l562:	
  6603                           ;client.c: 197: case RF_CFG_READ:
  6604                           
  6605                           
  6606                           ;client.c: 198: handleCfgRead(packet);
  6607  0CEA  082B               	movf	HandlePacket@packet,w
  6608  0CEB  25D4  3188         	fcall	_handleCfgRead
  6609  0CED  2CC7               	goto	l3188
  6610  0CEE                     l3204:	
  6611                           
  6612                           ;client.c: 205: handleFwCmd(packet);
  6613  0CEE  082B               	movf	HandlePacket@packet,w
  6614  0CEF  264B  3188         	fcall	_handleFwCmd
  6615  0CF1  2CC7               	goto	l3188
  6616  0CF2                     l3210:	
  6617  0CF2  082B               	movf	HandlePacket@packet,w
  6618  0CF3  3E04               	addlw	4
  6619  0CF4  0086               	movwf	6
  6620  0CF5  0187               	clrf	7
  6621  0CF6  0801               	movf	1,w
  6622                           
  6623                           ; Switch size 1, requested type "space"
  6624                           ; Number of cases is 8, Range of values is 160 to 192
  6625                           ; switch strategies available:
  6626                           ; Name         Instructions Cycles
  6627                           ; simple_byte           25    13 (average)
  6628                           ; direct_byte           75     9 (fixed)
  6629                           ; jumptable            263     9 (fixed)
  6630                           ;	Chosen strategy is simple_byte
  6631  0CF7  3AA0               	xorlw	160	; case 160
  6632  0CF8  1903               	skipnz
  6633  0CF9  2CC1               	goto	l3186
  6634  0CFA  3A01               	xorlw	1	; case 161
  6635  0CFB  1903               	skipnz
  6636  0CFC  2CCA               	goto	l3190
  6637  0CFD  3A03               	xorlw	3	; case 162
  6638  0CFE  1903               	skipnz
  6639  0CFF  2CE1               	goto	l558
  6640  0D00  3A01               	xorlw	1	; case 163
  6641  0D01  1903               	skipnz
  6642  0D02  2D10               	goto	l555
  6643  0D03  3A13               	xorlw	19	; case 176
  6644  0D04  1903               	skipnz
  6645  0D05  2CE3               	goto	l3196
  6646  0D06  3A01               	xorlw	1	; case 177
  6647  0D07  1903               	skipnz
  6648  0D08  2CE7               	goto	l3200
  6649  0D09  3A03               	xorlw	3	; case 178
  6650  0D0A  1903               	skipnz
  6651  0D0B  2CEA               	goto	l562
  6652  0D0C  3A72               	xorlw	114	; case 192
  6653  0D0D  1903               	skipnz
  6654  0D0E  2CEE               	goto	l3204
  6655  0D0F  2D10               	goto	l555
  6656  0D10                     l555:	
  6657                           
  6658                           ;client.c: 228: response.reset = 1;
  6659  0D10  0020               	movlb	0	; select bank0
  6660  0D11  142A               	bsf	HandlePacket@response,0
  6661                           
  6662                           ;client.c: 231: if (response.sendMsg)
  6663  0D12  1DAA               	btfss	HandlePacket@response,3
  6664  0D13  2D1E               	goto	l564
  6665  0D14  3000               	movlw	0
  6666                           
  6667                           ;client.c: 232: response.reset = Mrf49xaTxPacket(packet, 1, response.needAck);
  6668  0D15  01A0               	clrf	Mrf49xaTxPacket@response
  6669  0D16  0AA0               	incf	Mrf49xaTxPacket@response,f
  6670  0D17  18AA               	btfsc	HandlePacket@response,1
  6671  0D18  3001               	movlw	1
  6672  0D19  00A1               	movwf	Mrf49xaTxPacket@needAck
  6673  0D1A  082B               	movf	HandlePacket@packet,w
  6674  0D1B  252F  3188         	fcall	_Mrf49xaTxPacket
  6675  0D1D  2D23               	goto	L4
  6676  0D1E                     l564:	
  6677                           
  6678                           ;client.c: 233: else if (response.sendAck)
  6679  0D1E  1D2A               	btfss	HandlePacket@response,2
  6680  0D1F  2D2A               	goto	l566
  6681                           
  6682                           ;client.c: 234: response.reset = Mrf49xaTxAck(packet);
  6683  0D20  082B               	movf	HandlePacket@packet,w
  6684  0D21  258C  3188         	fcall	_Mrf49xaTxAck
  6685  0D23                     L4:	
  6686  0D23  0020               	movlb	0	; select bank0
  6687  0D24  00A9               	movwf	??_HandlePacket
  6688  0D25  062A               	xorwf	HandlePacket@response,w
  6689  0D26  39FE               	andlw	-2
  6690  0D27  0629               	xorwf	??_HandlePacket,w
  6691  0D28  00AA               	movwf	HandlePacket@response
  6692  0D29  2D2B               	goto	l565
  6693  0D2A                     l566:	
  6694                           
  6695                           ;client.c: 235: else
  6696                           ;client.c: 236: response.reset = 0;
  6697  0D2A  102A               	bcf	HandlePacket@response,0
  6698  0D2B                     l565:	
  6699                           
  6700                           ;client.c: 238: if (!response.reset)
  6701  0D2B  182A               	btfsc	HandlePacket@response,0
  6702  0D2C  0008               	return
  6703                           
  6704                           ;client.c: 239: Mrf49xaFreePacket(packet);
  6705  0D2D  082B               	movf	HandlePacket@packet,w
  6706  0D2E  2BED               	ljmp	_Mrf49xaFreePacket
  6707  0D2F                     __end_of_HandlePacket:	
  6708  0D2F                     __ptext56:	
  6709 ;; *************** function _Mrf49xaTxPacket *****************
  6710 ;; Defined at:
  6711 ;;		line 27 in file "../../../src/devices/mrf49xa_packet.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6714 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6715 ;;  response        1    0[BANK0 ] unsigned char 
  6716 ;;  needAck         1    1[BANK0 ] unsigned char 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6719 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6720 ;;  i               1    4[BANK0 ] unsigned char 
  6721 ;;  crc             1    3[BANK0 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;                  1    wreg      unsigned char 
  6724 ;; Registers used:
  6725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6726 ;; Tracked objects:
  6727 ;;		On entry : 1F/0
  6728 ;;		On exit  : 1F/1
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6731 ;;      Params:         0       2       0       0
  6732 ;;      Locals:         0       3       0       0
  6733 ;;      Temps:          0       1       0       0
  6734 ;;      Totals:         0       6       0       0
  6735 ;;Total ram usage:        6 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    5
  6738 ;; This function calls:
  6739 ;;		Nothing
  6740 ;; This function is called by:
  6741 ;;		_Mrf49xaTxAck
  6742 ;;		_HandlePacket
  6743 ;;		_RfSendPowerState
  6744 ;;		_RfSendSampleWeatherNode
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           
  6749                           ;psect for function _Mrf49xaTxPacket
  6750  0D2F                     _Mrf49xaTxPacket:	
  6751                           
  6752                           ;incstack = 0
  6753                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6754                           ;Mrf49xaTxPacket@packet stored from wreg
  6755  0D2F  00A5               	movwf	Mrf49xaTxPacket@packet
  6756  0D30  3031               	movlw	49
  6757                           
  6758                           ;mrf49xa_packet.c: 29: uint8_t i, crc = 0;
  6759  0D31  01A3               	clrf	Mrf49xaTxPacket@crc
  6760                           
  6761                           ;mrf49xa_packet.c: 31: if (&(rfTrcvStatus.txPacket) == packet)
  6762  0D32  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6763  0D33  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6764  0D34  1D03               	skipz
  6765  0D35  2D45               	goto	l2666
  6766                           
  6767                           ;mrf49xa_packet.c: 32: {
  6768                           ;mrf49xa_packet.c: 33: if (response)
  6769  0D36  0820               	movf	Mrf49xaTxPacket@response,w
  6770  0D37  1903               	btfsc	3,2
  6771  0D38  2D3C               	goto	l374
  6772                           
  6773                           ;mrf49xa_packet.c: 34: {
  6774                           ;mrf49xa_packet.c: 35: rfTrcvStatus.txPacket.packet.dst = rfTrcvStatus.txPacket.packet.s
      +                          rc;
  6775  0D39  0021               	movlb	1	; select bank1
  6776  0D3A  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  6777  0D3B  00D4               	movwf	(_rfTrcvStatus^(0+128)+52)
  6778  0D3C                     l374:	
  6779                           
  6780                           ;mrf49xa_packet.c: 36: }
  6781                           ;mrf49xa_packet.c: 37: rfTrcvStatus.txPacket.packet.src = cfgRam.nodeId;
  6782  0D3C  0020               	movlb	0	; select bank0
  6783  0D3D  0834               	movf	_cfgRam,w
  6784  0D3E  0021               	movlb	1	; select bank1
  6785  0D3F  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  6786                           
  6787                           ;mrf49xa_packet.c: 38: rfTrcvStatus.txPacket.packet.size += 5;
  6788  0D40  3005               	movlw	5
  6789  0D41  07D2               	addwf	(_rfTrcvStatus^(0+128)+50),f
  6790                           
  6791                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6792                           
  6793                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retry = 0;
  6794                           
  6795                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.retransmit = 0;
  6796                           
  6797                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6798  0D42  277E               	fcall	PL8	;call to abstracted procedure
  6799                           
  6800                           ;mrf49xa_packet.c: 44: rfTrcvStatus.txPacket.crc = 0;
  6801  0D43  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  6802                           
  6803                           ;mrf49xa_packet.c: 45: return 1;
  6804  0D44  3401               	retlw	1
  6805  0D45                     l2666:	
  6806                           
  6807                           ;mrf49xa_packet.c: 46: }
  6808                           ;mrf49xa_packet.c: 49: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6809  0D45  0021               	movlb	1	; select bank1
  6810  0D46  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  6811  0D47  1D03               	skipz
  6812                           
  6813                           ;mrf49xa_packet.c: 50: {
  6814                           ;mrf49xa_packet.c: 52: return 0;
  6815  0D48  3400               	retlw	0
  6816                           
  6817                           ;mrf49xa_packet.c: 54: else
  6818                           ;mrf49xa_packet.c: 55: {
  6819                           ;mrf49xa_packet.c: 56: if (response)
  6820  0D49  0020               	movlb	0	; select bank0
  6821  0D4A  0820               	movf	Mrf49xaTxPacket@response,w
  6822  0D4B  1903               	btfsc	3,2
  6823  0D4C  2D57               	goto	l2678
  6824                           
  6825                           ;mrf49xa_packet.c: 57: {
  6826                           ;mrf49xa_packet.c: 58: packet->packet.dst = packet->packet.src;
  6827  0D4D  0825               	movf	Mrf49xaTxPacket@packet,w
  6828  0D4E  3E03               	addlw	3
  6829  0D4F  0086               	movwf	6
  6830  0D50  0187               	clrf	7
  6831  0D51  0825               	movf	Mrf49xaTxPacket@packet,w
  6832  0D52  3E02               	addlw	2
  6833  0D53  0084               	movwf	4
  6834  0D54  0185               	clrf	5
  6835  0D55  0800               	movf	0,w
  6836  0D56  0081               	movwf	1
  6837  0D57                     l2678:	
  6838                           
  6839                           ;mrf49xa_packet.c: 59: }
  6840                           ;mrf49xa_packet.c: 60: packet->packet.src = cfgRam.nodeId;
  6841  0D57  0825               	movf	Mrf49xaTxPacket@packet,w
  6842  0D58  3E02               	addlw	2
  6843  0D59  0086               	movwf	6
  6844  0D5A  0187               	clrf	7
  6845  0D5B  0834               	movf	_cfgRam,w
  6846  0D5C  0081               	movwf	1
  6847                           
  6848                           ;mrf49xa_packet.c: 61: packet->packet.size += 5;
  6849  0D5D  0A25               	incf	Mrf49xaTxPacket@packet,w
  6850  0D5E  0086               	movwf	6
  6851  0D5F  3005               	movlw	5
  6852  0D60  0781               	addwf	1,f
  6853                           
  6854                           ;mrf49xa_packet.c: 63: packet->state = PKT_FREE;
  6855  0D61  0825               	movf	Mrf49xaTxPacket@packet,w
  6856  0D62  0086               	movwf	6
  6857  0D63  0181               	clrf	1
  6858                           
  6859                           ;mrf49xa_packet.c: 66: for (i = 0; i < (16 + 5); i++)
  6860  0D64  01A4               	clrf	Mrf49xaTxPacket@i
  6861  0D65                     l2690:	
  6862                           
  6863                           ;mrf49xa_packet.c: 67: {
  6864                           ;mrf49xa_packet.c: 68: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6865  0D65  0824               	movf	Mrf49xaTxPacket@i,w
  6866  0D66  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6867  0D67  0086               	movwf	6
  6868  0D68  0187               	clrf	7
  6869  0D69  0824               	movf	Mrf49xaTxPacket@i,w
  6870  0D6A  0725               	addwf	Mrf49xaTxPacket@packet,w
  6871  0D6B  00A2               	movwf	??_Mrf49xaTxPacket
  6872  0D6C  0A22               	incf	??_Mrf49xaTxPacket,w
  6873  0D6D  0084               	movwf	4
  6874  0D6E  0185               	clrf	5
  6875  0D6F  0800               	movf	0,w
  6876  0D70  0081               	movwf	1
  6877  0D71  3015               	movlw	21
  6878  0D72  0AA4               	incf	Mrf49xaTxPacket@i,f
  6879  0D73  0224               	subwf	Mrf49xaTxPacket@i,w
  6880  0D74  1C03               	skipc
  6881  0D75  2D65               	goto	l2690
  6882                           
  6883                           ;mrf49xa_packet.c: 69: }
  6884                           ;mrf49xa_packet.c: 70: for (i = 0; i < packet->packet.size; i++)
  6885  0D76  01A4               	clrf	Mrf49xaTxPacket@i
  6886  0D77                     l381:	
  6887  0D77  0A25               	incf	Mrf49xaTxPacket@packet,w
  6888  0D78  0086               	movwf	6
  6889  0D79  0187               	clrf	7
  6890  0D7A  0801               	movf	1,w
  6891  0D7B  0224               	subwf	Mrf49xaTxPacket@i,w
  6892  0D7C  1803               	btfsc	3,0
  6893  0D7D  2D85               	goto	l383
  6894                           
  6895                           ;mrf49xa_packet.c: 71: {
  6896                           ;mrf49xa_packet.c: 72: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6897  0D7E  0824               	movf	Mrf49xaTxPacket@i,w
  6898  0D7F  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6899  0D80  0086               	movwf	6
  6900  0D81  0801               	movf	1,w
  6901  0D82  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6902  0D83  0AA4               	incf	Mrf49xaTxPacket@i,f
  6903  0D84  2D77               	goto	l381
  6904  0D85                     l383:	
  6905                           
  6906                           ;mrf49xa_packet.c: 73: }
  6907                           ;mrf49xa_packet.c: 75: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6908  0D85  0021               	movlb	1	; select bank1
  6909                           
  6910                           ;mrf49xa_packet.c: 76: rfTrcvStatus.txPacket.retry = 0;
  6911                           
  6912                           ;mrf49xa_packet.c: 77: rfTrcvStatus.txPacket.retransmit = 0;
  6913                           
  6914                           ;mrf49xa_packet.c: 78: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6915  0D86  277E               	fcall	PL8	;call to abstracted procedure
  6916                           
  6917                           ;mrf49xa_packet.c: 80: rfTrcvStatus.txPacket.crc = crc;
  6918  0D87  0020               	movlb	0	; select bank0
  6919  0D88  0823               	movf	Mrf49xaTxPacket@crc,w
  6920  0D89  0021               	movlb	1	; select bank1
  6921  0D8A  00E7               	movwf	(_rfTrcvStatus^(0+128)+71)
  6922  0D8B  3401               	retlw	1
  6923  0D8C                     __end_of_Mrf49xaTxPacket:	
  6924  0D8C                     __ptext55:	
  6925 ;; *************** function _Mrf49xaTxAck *****************
  6926 ;; Defined at:
  6927 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6930 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  6933 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  1    wreg      unsigned char 
  6936 ;; Registers used:
  6937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 1F/0
  6940 ;;		On exit  : 1F/1
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6943 ;;      Params:         0       0       0       0
  6944 ;;      Locals:         0       1       0       0
  6945 ;;      Temps:          0       0       0       0
  6946 ;;      Totals:         0       1       0       0
  6947 ;;Total ram usage:        1 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:    6
  6950 ;; This function calls:
  6951 ;;		_Mrf49xaTxPacket
  6952 ;; This function is called by:
  6953 ;;		_HandlePacket
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _Mrf49xaTxAck
  6959  0D8C                     _Mrf49xaTxAck:	
  6960                           
  6961                           ;incstack = 0
  6962                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6963                           ;Mrf49xaTxAck@packet stored from wreg
  6964  0D8C  00A6               	movwf	Mrf49xaTxAck@packet
  6965                           
  6966                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  6967  0D8D  3E06               	addlw	6
  6968  0D8E  0086               	movwf	6
  6969  0D8F  0187               	clrf	7
  6970  0D90  0826               	movf	Mrf49xaTxAck@packet,w
  6971  0D91  3E04               	addlw	4
  6972  0D92  0084               	movwf	4
  6973  0D93  0185               	clrf	5
  6974  0D94  0800               	movf	0,w
  6975  0D95  0081               	movwf	1
  6976                           
  6977                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  6978  0D96  0826               	movf	Mrf49xaTxAck@packet,w
  6979  0D97  3E07               	addlw	7
  6980  0D98  0086               	movwf	6
  6981  0D99  0826               	movf	Mrf49xaTxAck@packet,w
  6982  0D9A  3E16               	addlw	22
  6983  0D9B  0084               	movwf	4
  6984  0D9C  0800               	movf	0,w
  6985  0D9D  0081               	movwf	1
  6986                           
  6987                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  6988  0D9E  0826               	movf	Mrf49xaTxAck@packet,w
  6989  0D9F  3E04               	addlw	4
  6990  0DA0  0086               	movwf	6
  6991  0DA1  30A1               	movlw	161
  6992  0DA2  0081               	movwf	1
  6993                           
  6994                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  6995  0DA3  0A26               	incf	Mrf49xaTxAck@packet,w
  6996  0DA4  0086               	movwf	6
  6997  0DA5  3002               	movlw	2
  6998  0DA6  0081               	movwf	1
  6999                           
  7000                           ;mrf49xa_packet.c: 24: return Mrf49xaTxPacket(packet, 1, 0);
  7001  0DA7  01A0               	clrf	Mrf49xaTxPacket@response
  7002  0DA8  0AA0               	incf	Mrf49xaTxPacket@response,f
  7003  0DA9  01A1               	clrf	Mrf49xaTxPacket@needAck
  7004  0DAA  0826               	movf	Mrf49xaTxAck@packet,w
  7005  0DAB  2D2F               	ljmp	_Mrf49xaTxPacket
  7006  0DAC                     __end_of_Mrf49xaTxAck:	
  7007  0DAC                     __ptext49:	
  7008 ;; *************** function _handleCfgCmd *****************
  7009 ;; Defined at:
  7010 ;;		line 124 in file "../../../src/rfstack/client.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7013 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7016 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 1F/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7026 ;;      Params:         0       0       0       0
  7027 ;;      Locals:         0       1       0       0
  7028 ;;      Temps:          0       0       0       0
  7029 ;;      Totals:         0       1       0       0
  7030 ;;Total ram usage:        1 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    9
  7033 ;; This function calls:
  7034 ;;		_CfgLoad
  7035 ;;		_CfgSave
  7036 ;; This function is called by:
  7037 ;;		_HandlePacket
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           
  7042                           ;psect for function _handleCfgCmd
  7043  0DAC                     _handleCfgCmd:	
  7044                           
  7045                           ;incstack = 0
  7046                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7047                           ;handleCfgCmd@packet stored from wreg
  7048  0DAC  00A8               	movwf	handleCfgCmd@packet
  7049                           
  7050                           ;client.c: 126: switch (packet->packet.data[0])
  7051  0DAD  2DC3               	goto	l3028
  7052  0DAE                     l3018:	
  7053                           
  7054                           ;client.c: 129: CfgSave();
  7055  0DAE  2E74               	ljmp	l2742
  7056  0DAF                     l3020:	
  7057                           ;client.c: 130: break;
  7058                           
  7059                           
  7060                           ;client.c: 133: CfgLoad();
  7061  0DAF  2E6C               	ljmp	l2744
  7062  0DB0                     l3022:	
  7063                           ;client.c: 134: break;
  7064                           
  7065                           
  7066                           ;client.c: 137: packet->packet.size = 2;
  7067  0DB0  0A28               	incf	handleCfgCmd@packet,w
  7068  0DB1  0086               	movwf	6
  7069  0DB2  3002               	movlw	2
  7070  0DB3  27B1               	fcall	PL16	;call to abstracted procedure
  7071  0DB4  3002               	movlw	2
  7072  0DB5  0081               	movwf	1
  7073                           
  7074                           ;client.c: 139: break;
  7075  0DB6  0008               	return
  7076  0DB7                     l3024:	
  7077                           
  7078                           ;client.c: 142: packet->packet.size = 3;
  7079  0DB7  0A28               	incf	handleCfgCmd@packet,w
  7080  0DB8  0086               	movwf	6
  7081  0DB9  3003               	movlw	3
  7082                           
  7083                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  7084  0DBA  27B1               	fcall	PL16	;call to abstracted procedure
  7085  0DBB  083C               	movf	_cfgRam+8,w
  7086  0DBC  0081               	movwf	1
  7087                           
  7088                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  7089  0DBD  0828               	movf	handleCfgCmd@packet,w
  7090  0DBE  3E08               	addlw	8
  7091  0DBF  0086               	movwf	6
  7092  0DC0  083B               	movf	_cfgRam+7,w
  7093  0DC1  0081               	movwf	1
  7094                           
  7095                           ;client.c: 145: break;
  7096  0DC2  0008               	return
  7097  0DC3                     l3028:	
  7098  0DC3  0828               	movf	handleCfgCmd@packet,w
  7099  0DC4  27CE  3188         	fcall	PL26	;call to abstracted procedure
  7100                           
  7101                           ; Switch size 1, requested type "space"
  7102                           ; Number of cases is 4, Range of values is 1 to 4
  7103                           ; switch strategies available:
  7104                           ; Name         Instructions Cycles
  7105                           ; simple_byte           13     7 (average)
  7106                           ; direct_byte           17     9 (fixed)
  7107                           ; jumptable            263     9 (fixed)
  7108                           ;	Chosen strategy is simple_byte
  7109  0DC6  3A01               	xorlw	1	; case 1
  7110  0DC7  1903               	skipnz
  7111  0DC8  2DAE               	goto	l3018
  7112  0DC9  3A03               	xorlw	3	; case 2
  7113  0DCA  1903               	skipnz
  7114  0DCB  2DAF               	goto	l3020
  7115  0DCC  3A01               	xorlw	1	; case 3
  7116  0DCD  1903               	skipnz
  7117  0DCE  2DB0               	goto	l3022
  7118  0DCF  3A07               	xorlw	7	; case 4
  7119  0DD0  1903               	skipnz
  7120  0DD1  2DB7               	goto	l3024
  7121  0DD2  2DD3               	goto	l550
  7122  0DD3                     l550:	
  7123  0DD3  0008               	return
  7124  0DD4                     __end_of_handleCfgCmd:	
  7125  0DD4                     __ptext46:	
  7126 ;; *************** function _handleCfgRead *****************
  7127 ;; Defined at:
  7128 ;;		line 102 in file "../../../src/rfstack/client.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7131 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7134 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7135 ;;  index           1    7[BANK0 ] unsigned char 
  7136 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7137 ;; Return value:  Size  Location     Type
  7138 ;;		None               void
  7139 ;; Registers used:
  7140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7141 ;; Tracked objects:
  7142 ;;		On entry : 1F/0
  7143 ;;		On exit  : 1F/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7146 ;;      Params:         0       0       0       0
  7147 ;;      Locals:         0       3       0       0
  7148 ;;      Temps:          0       0       0       0
  7149 ;;      Totals:         0       3       0       0
  7150 ;;Total ram usage:        3 bytes
  7151 ;; Hardware stack levels used:    1
  7152 ;; Hardware stack levels required when called:    6
  7153 ;; This function calls:
  7154 ;;		_CfgGetSizeByType
  7155 ;;		_memcpy
  7156 ;; This function is called by:
  7157 ;;		_HandlePacket
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _handleCfgRead
  7163  0DD4                     _handleCfgRead:	
  7164                           
  7165                           ;incstack = 0
  7166                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7167                           ;handleCfgRead@packet stored from wreg
  7168  0DD4  00A8               	movwf	handleCfgRead@packet
  7169                           
  7170                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  7171  0DD5  0086               	movwf	6
  7172  0DD6  0187               	clrf	7
  7173  0DD7  3F46               	moviw [6]fsr1
  7174  0DD8  00A7               	movwf	handleCfgRead@index
  7175                           
  7176                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  7177  0DD9  0727               	addwf	handleCfgRead@index,w
  7178  0DDA  0727               	addwf	handleCfgRead@index,w
  7179  0DDB  3E49               	addlw	low (_parameters| (0+32768))
  7180  0DDC  3182               	movlp	high __stringtab
  7181  0DDD  000A               	callw
  7182  0DDE  3188               	pagesel	$	;select current page
  7183  0DDF  2605               	fcall	_CfgGetSizeByType
  7184  0DE0  00A6               	movwf	handleCfgRead@nrOfBytes
  7185                           
  7186                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  7187  0DE1  0A28               	incf	handleCfgRead@packet,w
  7188  0DE2  0086               	movwf	6
  7189  0DE3  0187               	clrf	7
  7190  0DE4  0826               	movf	handleCfgRead@nrOfBytes,w
  7191  0DE5  3E02               	addlw	2
  7192  0DE6  0081               	movwf	1
  7193                           
  7194                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  7195  0DE7  0828               	movf	handleCfgRead@packet,w
  7196  0DE8  3E04               	addlw	4
  7197  0DE9  0086               	movwf	6
  7198  0DEA  30B2               	movlw	178
  7199  0DEB  0081               	movwf	1
  7200                           
  7201                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  7202  0DEC  0828               	movf	handleCfgRead@packet,w
  7203  0DED  3E07               	addlw	7
  7204  0DEE  0086               	movwf	6
  7205  0DEF  0827               	movf	handleCfgRead@index,w
  7206  0DF0  0727               	addwf	handleCfgRead@index,w
  7207  0DF1  0727               	addwf	handleCfgRead@index,w
  7208  0DF2  3E4A               	addlw	low ((_parameters| (0+32768)+1))
  7209  0DF3  3182               	movlp	high __stringtab
  7210  0DF4  000A               	callw
  7211  0DF5  3188               	pagesel	$	;select current page
  7212  0DF6  0081               	movwf	1
  7213                           
  7214                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  7215  0DF7  0827               	movf	handleCfgRead@index,w
  7216  0DF8  0727               	addwf	handleCfgRead@index,w
  7217  0DF9  0727               	addwf	handleCfgRead@index,w
  7218  0DFA  3E4B               	addlw	low ((_parameters| (0+32768)+2))
  7219  0DFB  3182               	movlp	high __stringtab
  7220  0DFC  000A               	callw
  7221  0DFD  3188               	pagesel	$	;select current page
  7222  0DFE  00A0               	movwf	memcpy@s1
  7223  0DFF  0826               	movf	handleCfgRead@nrOfBytes,w
  7224  0E00  00A1               	movwf	memcpy@n
  7225  0E01  01A2               	clrf	memcpy@n+1
  7226  0E02  0828               	movf	handleCfgRead@packet,w
  7227  0E03  3E08               	addlw	8
  7228  0E04  2E32               	ljmp	_memcpy
  7229  0E05                     __end_of_handleCfgRead:	
  7230  0E05                     __ptext48:	
  7231 ;; *************** function _CfgGetSizeByType *****************
  7232 ;; Defined at:
  7233 ;;		line 29 in file "../../../src/node/config.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;  type            1    wreg     enum E4252
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  type            1    0[BANK0 ] enum E4252
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      unsigned char 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7242 ;; Tracked objects:
  7243 ;;		On entry : 1F/0
  7244 ;;		On exit  : 1F/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7247 ;;      Params:         0       0       0       0
  7248 ;;      Locals:         0       1       0       0
  7249 ;;      Temps:          0       0       0       0
  7250 ;;      Totals:         0       1       0       0
  7251 ;;Total ram usage:        1 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    5
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_handleCfgRead
  7258 ;;		_handleCfgWrite
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function _CfgGetSizeByType
  7264  0E05                     _CfgGetSizeByType:	
  7265                           
  7266                           ;incstack = 0
  7267                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  7268                           ;CfgGetSizeByType@type stored from wreg
  7269  0E05  00A0               	movwf	CfgGetSizeByType@type
  7270                           
  7271                           ;config.c: 31: switch(type)
  7272  0E06  2E0B               	goto	l2730
  7273  0E07                     l2712:	
  7274  0E07  3401               	retlw	1
  7275  0E08                     l2716:	
  7276  0E08  3402               	retlw	2
  7277  0E09                     l2720:	
  7278  0E09  3404               	retlw	4
  7279  0E0A                     l2724:	
  7280  0E0A  3400               	retlw	0
  7281  0E0B                     l2730:	
  7282  0E0B  0820               	movf	CfgGetSizeByType@type,w
  7283                           
  7284                           ; Switch size 1, requested type "space"
  7285                           ; Number of cases is 3, Range of values is 0 to 2
  7286                           ; switch strategies available:
  7287                           ; Name         Instructions Cycles
  7288                           ; simple_byte           10     6 (average)
  7289                           ; direct_byte           12     6 (fixed)
  7290                           ; jumptable            260     6 (fixed)
  7291                           ;	Chosen strategy is simple_byte
  7292  0E0C  3A00               	xorlw	0	; case 0
  7293  0E0D  1903               	skipnz
  7294  0E0E  2E07               	goto	l2712
  7295  0E0F  3A01               	xorlw	1	; case 1
  7296  0E10  1903               	skipnz
  7297  0E11  2E08               	goto	l2716
  7298  0E12  3A03               	xorlw	3	; case 2
  7299  0E13  1903               	skipnz
  7300  0E14  2E09               	goto	l2720
  7301  0E15  2E0A               	goto	l2724
  7302  0E16  0008               	return
  7303  0E17                     __end_of_CfgGetSizeByType:	
  7304  0E17                     __ptext45:	
  7305 ;; *************** function _handleCfgWrite *****************
  7306 ;; Defined at:
  7307 ;;		line 115 in file "../../../src/rfstack/client.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7310 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7313 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7314 ;;  index           1    7[BANK0 ] unsigned char 
  7315 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;		None               void
  7318 ;; Registers used:
  7319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 1F/0
  7322 ;;		On exit  : 1F/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7325 ;;      Params:         0       0       0       0
  7326 ;;      Locals:         0       3       0       0
  7327 ;;      Temps:          0       0       0       0
  7328 ;;      Totals:         0       3       0       0
  7329 ;;Total ram usage:        3 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    6
  7332 ;; This function calls:
  7333 ;;		_CfgGetSizeByType
  7334 ;;		_memcpy
  7335 ;; This function is called by:
  7336 ;;		_HandlePacket
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _handleCfgWrite
  7342  0E17                     _handleCfgWrite:	
  7343                           
  7344                           ;incstack = 0
  7345                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7346                           ;handleCfgWrite@packet stored from wreg
  7347  0E17  00A8               	movwf	handleCfgWrite@packet
  7348                           
  7349                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  7350  0E18  0086               	movwf	6
  7351  0E19  0187               	clrf	7
  7352  0E1A  3F46               	moviw [6]fsr1
  7353  0E1B  00A7               	movwf	handleCfgWrite@index
  7354                           
  7355                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  7356  0E1C  0727               	addwf	handleCfgWrite@index,w
  7357  0E1D  0727               	addwf	handleCfgWrite@index,w
  7358  0E1E  3E49               	addlw	low (_parameters| (0+32768))
  7359  0E1F  3182               	movlp	high __stringtab
  7360  0E20  000A               	callw
  7361  0E21  3188               	pagesel	$	;select current page
  7362  0E22  2605               	fcall	_CfgGetSizeByType
  7363  0E23  00A6               	movwf	handleCfgWrite@nrOfBytes
  7364                           
  7365                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  7366  0E24  0828               	movf	handleCfgWrite@packet,w
  7367  0E25  3E07               	addlw	7
  7368  0E26  00A0               	movwf	memcpy@s1
  7369  0E27  0826               	movf	handleCfgWrite@nrOfBytes,w
  7370  0E28  00A1               	movwf	memcpy@n
  7371  0E29  01A2               	clrf	memcpy@n+1
  7372  0E2A  0827               	movf	handleCfgWrite@index,w
  7373  0E2B  0727               	addwf	handleCfgWrite@index,w
  7374  0E2C  0727               	addwf	handleCfgWrite@index,w
  7375  0E2D  3E4B               	addlw	low ((_parameters| (0+32768)+2))
  7376  0E2E  3182               	movlp	high __stringtab
  7377  0E2F  000A               	callw
  7378  0E30  3188               	pagesel	$	;select current page
  7379  0E31  2E32               	ljmp	_memcpy
  7380  0E32                     __end_of_handleCfgWrite:	
  7381  0E32                     __ptext47:	
  7382 ;; *************** function _memcpy *****************
  7383 ;; Defined at:
  7384 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\memcpy.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  d1              1    wreg     PTR void 
  7387 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  7388 ;;		 -> cfgRam(9), 
  7389 ;;  s1              1    0[BANK0 ] PTR const void 
  7390 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), NULL(0), 
  7391 ;;		 -> cfgRam(9), 
  7392 ;;  n               2    1[BANK0 ] unsigned int 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  d1              1    5[BANK0 ] PTR void 
  7395 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  7396 ;;		 -> cfgRam(9), 
  7397 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  7398 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), NULL(0), 
  7399 ;;		 -> cfgRam(9), 
  7400 ;;  d               1    3[BANK0 ] PTR unsigned char 
  7401 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  7402 ;;		 -> cfgRam(9), 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      PTR void 
  7405 ;; Registers used:
  7406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7407 ;; Tracked objects:
  7408 ;;		On entry : 1F/0
  7409 ;;		On exit  : 1F/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7412 ;;      Params:         0       3       0       0
  7413 ;;      Locals:         0       3       0       0
  7414 ;;      Temps:          0       0       0       0
  7415 ;;      Totals:         0       6       0       0
  7416 ;;Total ram usage:        6 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    5
  7419 ;; This function calls:
  7420 ;;		Nothing
  7421 ;; This function is called by:
  7422 ;;		_handleCfgRead
  7423 ;;		_handleCfgWrite
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           
  7428                           ;psect for function _memcpy
  7429  0E32                     _memcpy:	
  7430                           
  7431                           ;incstack = 0
  7432                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  7433                           ;memcpy@d1 stored from wreg
  7434  0E32  00A5               	movwf	memcpy@d1
  7435  0E33  0820               	movf	memcpy@s1,w
  7436  0E34  00A4               	movwf	memcpy@s
  7437  0E35  0825               	movf	memcpy@d1,w
  7438  0E36  00A3               	movwf	memcpy@d
  7439  0E37                     l2740:	
  7440  0E37  3001               	movlw	1
  7441  0E38  02A1               	subwf	memcpy@n,f
  7442  0E39  3000               	movlw	0
  7443  0E3A  3BA2               	subwfb	memcpy@n+1,f
  7444  0E3B  0A21               	incf	memcpy@n,w
  7445  0E3C  1903               	skipnz
  7446  0E3D  0A22               	incf	memcpy@n+1,w
  7447  0E3E  1903               	btfsc	3,2
  7448  0E3F  0008               	return
  7449  0E40  0823               	movf	memcpy@d,w
  7450  0E41  0086               	movwf	6
  7451  0E42  0187               	clrf	7
  7452  0E43  0824               	movf	memcpy@s,w
  7453  0E44  0084               	movwf	4
  7454  0E45  0185               	clrf	5
  7455  0E46  0800               	movf	0,w
  7456  0E47  0081               	movwf	1
  7457  0E48  0AA4               	incf	memcpy@s,f
  7458  0E49  0AA3               	incf	memcpy@d,f
  7459  0E4A  2E37               	goto	l2740
  7460  0E4B                     __end_of_memcpy:	
  7461  0E4B                     __ptext44:	
  7462 ;; *************** function _handleFwCmd *****************
  7463 ;; Defined at:
  7464 ;;		line 8 in file "../../../src/rfstack/client.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7467 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7470 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  7471 ;; Return value:  Size  Location     Type
  7472 ;;		None               void
  7473 ;; Registers used:
  7474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7475 ;; Tracked objects:
  7476 ;;		On entry : 1F/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7480 ;;      Params:         0       0       0       0
  7481 ;;      Locals:         0       1       0       0
  7482 ;;      Temps:          0       0       0       0
  7483 ;;      Totals:         0       1       0       0
  7484 ;;Total ram usage:        1 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    8
  7487 ;; This function calls:
  7488 ;;		_eepromRxBytes
  7489 ;; This function is called by:
  7490 ;;		_HandlePacket
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           
  7495                           ;psect for function _handleFwCmd
  7496  0E4B                     _handleFwCmd:	
  7497                           
  7498                           ;incstack = 0
  7499                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7500                           ;handleFwCmd@packet stored from wreg
  7501  0E4B  00A8               	movwf	handleFwCmd@packet
  7502                           
  7503                           ;client.c: 23: break;
  7504                           
  7505                           ;client.c: 10: switch(packet->packet.data[0])
  7506  0E4C  27CE  3188         	fcall	PL26	;call to abstracted procedure
  7507                           
  7508                           ; Switch size 1, requested type "space"
  7509                           ; Number of cases is 2, Range of values is 0 to 1
  7510                           ; switch strategies available:
  7511                           ; Name         Instructions Cycles
  7512                           ; simple_byte            7     4 (average)
  7513                           ; direct_byte           10     6 (fixed)
  7514                           ; jumptable            260     6 (fixed)
  7515                           ;	Chosen strategy is simple_byte
  7516  0E4E  3A00               	xorlw	0	; case 0
  7517  0E4F  1903               	skipnz
  7518  0E50  2E6B               	goto	l535
  7519  0E51  3A01               	xorlw	1	; case 1
  7520  0E52  1903               	skipnz
  7521  0E53  2E55               	goto	l2986
  7522  0E54  2E6B               	goto	l535
  7523  0E55                     l2986:	
  7524                           
  7525                           ;client.c: 17: packet->packet.size = 5;
  7526  0E55  0A28               	incf	handleFwCmd@packet,w
  7527  0E56  0086               	movwf	6
  7528  0E57  3005               	movlw	5
  7529  0E58  0187               	clrf	7
  7530  0E59  0081               	movwf	1
  7531                           
  7532                           ;client.c: 18: packet->packet.data[1] = 0;
  7533  0E5A  0828               	movf	handleFwCmd@packet,w
  7534  0E5B  3E07               	addlw	7
  7535  0E5C  0086               	movwf	6
  7536  0E5D  0181               	clrf	1
  7537                           
  7538                           ;client.c: 19: packet->packet.data[2] = 1;
  7539  0E5E  0828               	movf	handleFwCmd@packet,w
  7540  0E5F  3E08               	addlw	8
  7541  0E60  0086               	movwf	6
  7542  0E61  0181               	clrf	1
  7543  0E62  0A81               	incf	1,f
  7544                           
  7545                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  7546  0E63  01A4               	clrf	eepromRxBytes@address
  7547  0E64  01A5               	clrf	eepromRxBytes@address+1
  7548  0E65  0828               	movf	handleFwCmd@packet,w
  7549  0E66  3E09               	addlw	9
  7550  0E67  00A6               	movwf	eepromRxBytes@data
  7551  0E68  3002               	movlw	2
  7552  0E69  00A7               	movwf	eepromRxBytes@size
  7553  0E6A  2A0F               	ljmp	l2586
  7554  0E6B                     l535:	
  7555  0E6B  0008               	return
  7556  0E6C                     __end_of_handleFwCmd:	
  7557  0E6C                     __ptext52:	
  7558 ;; *************** function _CfgLoad *****************
  7559 ;; Defined at:
  7560 ;;		line 19 in file "../../../src/node/config.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;		None
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;		None               void
  7567 ;; Registers used:
  7568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 1E/1
  7571 ;;		On exit  : 0/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7574 ;;      Params:         0       0       0       0
  7575 ;;      Locals:         0       0       0       0
  7576 ;;      Temps:          0       0       0       0
  7577 ;;      Totals:         0       0       0       0
  7578 ;;Total ram usage:        0 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    8
  7581 ;; This function calls:
  7582 ;;		_eepromRxBytes
  7583 ;; This function is called by:
  7584 ;;		_handleCfgCmd
  7585 ;;		_main
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           
  7590                           ;psect for function _CfgLoad
  7591  0E6C                     _CfgLoad:	
  7592  0E6C                     l2744:	
  7593                           ;incstack = 0
  7594                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7595                           
  7596                           
  7597                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  7598  0E6C  0020               	movlb	0	; select bank0
  7599  0E6D  3034               	movlw	_cfgRam& (0+255)
  7600  0E6E  01A4               	clrf	eepromRxBytes@address
  7601  0E6F  01A5               	clrf	eepromRxBytes@address+1
  7602  0E70  00A6               	movwf	eepromRxBytes@data
  7603  0E71  3009               	movlw	9
  7604  0E72  00A7               	movwf	eepromRxBytes@size
  7605  0E73  2A0F               	ljmp	l2586
  7606  0E74                     __end_of_CfgLoad:	
  7607  0E74                     __ptext50:	
  7608 ;; *************** function _CfgSave *****************
  7609 ;; Defined at:
  7610 ;;		line 24 in file "../../../src/node/config.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;		None
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;		None
  7615 ;; Return value:  Size  Location     Type
  7616 ;;		None               void
  7617 ;; Registers used:
  7618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 1F/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7624 ;;      Params:         0       0       0       0
  7625 ;;      Locals:         0       0       0       0
  7626 ;;      Temps:          0       0       0       0
  7627 ;;      Totals:         0       0       0       0
  7628 ;;Total ram usage:        0 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    8
  7631 ;; This function calls:
  7632 ;;		_eepromTxBytes
  7633 ;; This function is called by:
  7634 ;;		_handleCfgCmd
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function _CfgSave
  7640  0E74                     _CfgSave:	
  7641  0E74                     l2742:	
  7642                           ;incstack = 0
  7643                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7644                           
  7645  0E74  3034               	movlw	_cfgRam& (0+255)
  7646                           
  7647                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  7648  0E75  01A4               	clrf	eepromTxBytes@address
  7649  0E76  01A5               	clrf	eepromTxBytes@address+1
  7650  0E77  00A6               	movwf	eepromTxBytes@data
  7651  0E78  3009               	movlw	9
  7652  0E79  00A7               	movwf	eepromTxBytes@size
  7653  0E7A  29DA               	ljmp	l2598
  7654  0E7B                     __end_of_CfgSave:	
  7655  0E7B                     __ptext42:	
  7656 ;; *************** function _Mrf49SpiRx *****************
  7657 ;; Defined at:
  7658 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;		None
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  data            1    0[BANK0 ] unsigned char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;                  1    wreg      unsigned char 
  7665 ;; Registers used:
  7666 ;;		wreg, status,2
  7667 ;; Tracked objects:
  7668 ;;		On entry : 1F/0
  7669 ;;		On exit  : 1F/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7672 ;;      Params:         0       0       0       0
  7673 ;;      Locals:         0       1       0       0
  7674 ;;      Temps:          0       0       0       0
  7675 ;;      Totals:         0       1       0       0
  7676 ;;Total ram usage:        1 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    5
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		_Mrf49RxCmd
  7683 ;;		_Mrf49RxSts
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           
  7688                           ;psect for function _Mrf49SpiRx
  7689  0E7B                     _Mrf49SpiRx:	
  7690                           
  7691                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7692                           
  7693                           ;incstack = 0
  7694                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  7695  0E7B  01A0               	clrf	Mrf49SpiRx@data
  7696                           
  7697                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7698  0E7C  138D               	bcf	13,7	;volatile
  7699  0E7D  1A8E               	btfsc	14,5	;volatile
  7700  0E7E  17A0               	bsf	Mrf49SpiRx@data,7
  7701  0E7F  0022               	movlb	2	; select bank2
  7702  0E80  178E               	bsf	14,7	;volatile
  7703  0E81  0000               	nop	;# 
  7704  0E82  0022               	movlb	2	; select bank2
  7705  0E83  138E               	bcf	14,7	;volatile
  7706                           
  7707                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7708  0E84  0020               	movlb	0	; select bank0
  7709  0E85  1A8E               	btfsc	14,5	;volatile
  7710  0E86  1720               	bsf	Mrf49SpiRx@data,6
  7711  0E87  0022               	movlb	2	; select bank2
  7712  0E88  178E               	bsf	14,7	;volatile
  7713  0E89  0000               	nop	;# 
  7714  0E8A  0022               	movlb	2	; select bank2
  7715  0E8B  138E               	bcf	14,7	;volatile
  7716                           
  7717                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7718  0E8C  0020               	movlb	0	; select bank0
  7719  0E8D  1A8E               	btfsc	14,5	;volatile
  7720  0E8E  16A0               	bsf	Mrf49SpiRx@data,5
  7721  0E8F  0022               	movlb	2	; select bank2
  7722  0E90  178E               	bsf	14,7	;volatile
  7723  0E91  0000               	nop	;# 
  7724  0E92  0022               	movlb	2	; select bank2
  7725  0E93  138E               	bcf	14,7	;volatile
  7726                           
  7727                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7728  0E94  0020               	movlb	0	; select bank0
  7729  0E95  1A8E               	btfsc	14,5	;volatile
  7730  0E96  1620               	bsf	Mrf49SpiRx@data,4
  7731  0E97  0022               	movlb	2	; select bank2
  7732  0E98  178E               	bsf	14,7	;volatile
  7733  0E99  0000               	nop	;# 
  7734  0E9A  0022               	movlb	2	; select bank2
  7735  0E9B  138E               	bcf	14,7	;volatile
  7736                           
  7737                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7738  0E9C  0020               	movlb	0	; select bank0
  7739  0E9D  1A8E               	btfsc	14,5	;volatile
  7740  0E9E  15A0               	bsf	Mrf49SpiRx@data,3
  7741  0E9F  0022               	movlb	2	; select bank2
  7742  0EA0  178E               	bsf	14,7	;volatile
  7743  0EA1  0000               	nop	;# 
  7744  0EA2  0022               	movlb	2	; select bank2
  7745  0EA3  138E               	bcf	14,7	;volatile
  7746                           
  7747                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7748  0EA4  0020               	movlb	0	; select bank0
  7749  0EA5  1A8E               	btfsc	14,5	;volatile
  7750  0EA6  1520               	bsf	Mrf49SpiRx@data,2
  7751  0EA7  0022               	movlb	2	; select bank2
  7752  0EA8  178E               	bsf	14,7	;volatile
  7753  0EA9  0000               	nop	;# 
  7754  0EAA  0022               	movlb	2	; select bank2
  7755  0EAB  138E               	bcf	14,7	;volatile
  7756                           
  7757                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7758  0EAC  0020               	movlb	0	; select bank0
  7759  0EAD  1A8E               	btfsc	14,5	;volatile
  7760  0EAE  14A0               	bsf	Mrf49SpiRx@data,1
  7761  0EAF  0022               	movlb	2	; select bank2
  7762  0EB0  178E               	bsf	14,7	;volatile
  7763  0EB1  0000               	nop	;# 
  7764  0EB2  0022               	movlb	2	; select bank2
  7765  0EB3  138E               	bcf	14,7	;volatile
  7766                           
  7767                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7768  0EB4  0020               	movlb	0	; select bank0
  7769  0EB5  1A8E               	btfsc	14,5	;volatile
  7770  0EB6  1420               	bsf	Mrf49SpiRx@data,0
  7771  0EB7  0022               	movlb	2	; select bank2
  7772  0EB8  178E               	bsf	14,7	;volatile
  7773  0EB9  0000               	nop	;# 
  7774  0EBA  0022               	movlb	2	; select bank2
  7775  0EBB  138E               	bcf	14,7	;volatile
  7776                           
  7777                           ;mrf49xa_spi_pic16.c: 40: return data;
  7778  0EBC  0020               	movlb	0	; select bank0
  7779  0EBD  0820               	movf	Mrf49SpiRx@data,w
  7780  0EBE  0008               	return
  7781  0EBF                     __end_of_Mrf49SpiRx:	
  7782  0EBF                     __ptext41:	
  7783 ;; *************** function _Mrf49SpiTx *****************
  7784 ;; Defined at:
  7785 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  byte            1    wreg     unsigned char 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  byte            1    0[BANK0 ] unsigned char 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;		None               void
  7792 ;; Registers used:
  7793 ;;		wreg
  7794 ;; Tracked objects:
  7795 ;;		On entry : 1F/0
  7796 ;;		On exit  : 1F/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7799 ;;      Params:         0       0       0       0
  7800 ;;      Locals:         0       1       0       0
  7801 ;;      Temps:          0       0       0       0
  7802 ;;      Totals:         0       1       0       0
  7803 ;;Total ram usage:        1 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    5
  7806 ;; This function calls:
  7807 ;;		Nothing
  7808 ;; This function is called by:
  7809 ;;		_Mrf49TxCmd
  7810 ;;		_Mrf49RxCmd
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _Mrf49SpiTx
  7816  0EBF                     _Mrf49SpiTx:	
  7817                           
  7818                           ;incstack = 0
  7819                           ; Regs used in _Mrf49SpiTx: [wreg]
  7820                           ;Mrf49SpiTx@byte stored from wreg
  7821  0EBF  00A0               	movwf	Mrf49SpiTx@byte
  7822                           
  7823                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7824  0EC0  1FA0               	btfss	Mrf49SpiTx@byte,7
  7825  0EC1  2EC4               	goto	l255
  7826  0EC2  178D               	bsf	13,7	;volatile
  7827  0EC3  2EC5               	goto	l256
  7828  0EC4                     l255:	
  7829  0EC4  138D               	bcf	13,7	;volatile
  7830  0EC5                     l256:	
  7831  0EC5  0022               	movlb	2	; select bank2
  7832  0EC6  178E               	bsf	14,7	;volatile
  7833  0EC7  0000               	nop	;# 
  7834  0EC8  0022               	movlb	2	; select bank2
  7835  0EC9  138E               	bcf	14,7	;volatile
  7836  0ECA  0020               	movlb	0	; select bank0
  7837  0ECB  1F20               	btfss	Mrf49SpiTx@byte,6
  7838  0ECC  2ECF               	goto	l259
  7839  0ECD  178D               	bsf	13,7	;volatile
  7840  0ECE  2ED0               	goto	l260
  7841  0ECF                     l259:	
  7842  0ECF  138D               	bcf	13,7	;volatile
  7843  0ED0                     l260:	
  7844  0ED0  0022               	movlb	2	; select bank2
  7845  0ED1  178E               	bsf	14,7	;volatile
  7846  0ED2  0000               	nop	;# 
  7847  0ED3  0022               	movlb	2	; select bank2
  7848  0ED4  138E               	bcf	14,7	;volatile
  7849  0ED5  0020               	movlb	0	; select bank0
  7850  0ED6  1EA0               	btfss	Mrf49SpiTx@byte,5
  7851  0ED7  2EDA               	goto	l263
  7852  0ED8  178D               	bsf	13,7	;volatile
  7853  0ED9  2EDB               	goto	l264
  7854  0EDA                     l263:	
  7855  0EDA  138D               	bcf	13,7	;volatile
  7856  0EDB                     l264:	
  7857  0EDB  0022               	movlb	2	; select bank2
  7858  0EDC  178E               	bsf	14,7	;volatile
  7859  0EDD  0000               	nop	;# 
  7860  0EDE  0022               	movlb	2	; select bank2
  7861  0EDF  138E               	bcf	14,7	;volatile
  7862  0EE0  0020               	movlb	0	; select bank0
  7863  0EE1  1E20               	btfss	Mrf49SpiTx@byte,4
  7864  0EE2  2EE5               	goto	l267
  7865  0EE3  178D               	bsf	13,7	;volatile
  7866  0EE4  2EE6               	goto	l268
  7867  0EE5                     l267:	
  7868  0EE5  138D               	bcf	13,7	;volatile
  7869  0EE6                     l268:	
  7870  0EE6  0022               	movlb	2	; select bank2
  7871  0EE7  178E               	bsf	14,7	;volatile
  7872  0EE8  0000               	nop	;# 
  7873  0EE9  0022               	movlb	2	; select bank2
  7874  0EEA  138E               	bcf	14,7	;volatile
  7875  0EEB  0020               	movlb	0	; select bank0
  7876  0EEC  1DA0               	btfss	Mrf49SpiTx@byte,3
  7877  0EED  2EF0               	goto	l271
  7878  0EEE  178D               	bsf	13,7	;volatile
  7879  0EEF  2EF1               	goto	l272
  7880  0EF0                     l271:	
  7881  0EF0  138D               	bcf	13,7	;volatile
  7882  0EF1                     l272:	
  7883  0EF1  0022               	movlb	2	; select bank2
  7884  0EF2  178E               	bsf	14,7	;volatile
  7885  0EF3  0000               	nop	;# 
  7886  0EF4  0022               	movlb	2	; select bank2
  7887  0EF5  138E               	bcf	14,7	;volatile
  7888  0EF6  0020               	movlb	0	; select bank0
  7889  0EF7  1D20               	btfss	Mrf49SpiTx@byte,2
  7890  0EF8  2EFB               	goto	l275
  7891  0EF9  178D               	bsf	13,7	;volatile
  7892  0EFA  2EFC               	goto	l276
  7893  0EFB                     l275:	
  7894  0EFB  138D               	bcf	13,7	;volatile
  7895  0EFC                     l276:	
  7896  0EFC  0022               	movlb	2	; select bank2
  7897  0EFD  178E               	bsf	14,7	;volatile
  7898  0EFE  0000               	nop	;# 
  7899  0EFF  0022               	movlb	2	; select bank2
  7900  0F00  138E               	bcf	14,7	;volatile
  7901  0F01  0020               	movlb	0	; select bank0
  7902  0F02  1CA0               	btfss	Mrf49SpiTx@byte,1
  7903  0F03  2F06               	goto	l279
  7904  0F04  178D               	bsf	13,7	;volatile
  7905  0F05  2F07               	goto	l280
  7906  0F06                     l279:	
  7907  0F06  138D               	bcf	13,7	;volatile
  7908  0F07                     l280:	
  7909  0F07  0022               	movlb	2	; select bank2
  7910  0F08  178E               	bsf	14,7	;volatile
  7911  0F09  0000               	nop	;# 
  7912  0F0A  0022               	movlb	2	; select bank2
  7913  0F0B  138E               	bcf	14,7	;volatile
  7914  0F0C  0020               	movlb	0	; select bank0
  7915  0F0D  1C20               	btfss	Mrf49SpiTx@byte,0
  7916  0F0E  2F11               	goto	l283
  7917  0F0F  178D               	bsf	13,7	;volatile
  7918  0F10  2F12               	goto	l284
  7919  0F11                     l283:	
  7920  0F11  138D               	bcf	13,7	;volatile
  7921  0F12                     l284:	
  7922  0F12  0022               	movlb	2	; select bank2
  7923  0F13  178E               	bsf	14,7	;volatile
  7924  0F14  0000               	nop	;# 
  7925  0F15  0022               	movlb	2	; select bank2
  7926  0F16  138E               	bcf	14,7	;volatile
  7927                           
  7928                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7929  0F17  0020               	movlb	0	; select bank0
  7930  0F18  138D               	bcf	13,7	;volatile
  7931  0F19  0008               	return
  7932  0F1A                     __end_of_Mrf49SpiTx:	
  7933  0F1A                     __ptext29:	
  7934 ;; *************** function _Mrf49xaPacketPending *****************
  7935 ;; Defined at:
  7936 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;		None
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;		None
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  1    wreg      unsigned char 
  7943 ;; Registers used:
  7944 ;;		wreg
  7945 ;; Tracked objects:
  7946 ;;		On entry : 1F/1
  7947 ;;		On exit  : 1F/1
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7950 ;;      Params:         0       0       0       0
  7951 ;;      Locals:         0       0       0       0
  7952 ;;      Temps:          0       0       0       0
  7953 ;;      Totals:         0       0       0       0
  7954 ;;Total ram usage:        0 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    5
  7957 ;; This function calls:
  7958 ;;		Nothing
  7959 ;; This function is called by:
  7960 ;;		_Mrf49xaTick
  7961 ;; This function uses a non-reentrant model
  7962 ;;
  7963                           
  7964                           
  7965                           ;psect for function _Mrf49xaPacketPending
  7966  0F1A                     _Mrf49xaPacketPending:	
  7967                           
  7968                           ;mrf49xa_packet.c: 8: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  7969                           ;mrf49xa_packet.c: 9: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  7970                           
  7971                           ;incstack = 0
  7972                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  7973  0F1A  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  7974  0F1B  3A05               	xorlw	5
  7975  0F1C  1903               	skipnz
  7976  0F1D  3401               	retlw	1
  7977  0F1E  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  7978  0F1F  3A05               	xorlw	5
  7979  0F20  1903               	btfsc	3,2
  7980                           
  7981                           ;mrf49xa_packet.c: 10: return 1;
  7982  0F21  3401               	retlw	1
  7983                           
  7984                           ;mrf49xa_packet.c: 11: else
  7985                           ;mrf49xa_packet.c: 12: return 0;
  7986  0F22  3400               	retlw	0
  7987  0F23                     __end_of_Mrf49xaPacketPending:	
  7988  0F23                     __ptext28:	
  7989 ;; *************** function _Mrf49xaRxPacket *****************
  7990 ;; Defined at:
  7991 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;		None
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;		None
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7998 ;; Registers used:
  7999 ;;		wreg
  8000 ;; Tracked objects:
  8001 ;;		On entry : 1F/1
  8002 ;;		On exit  : 1F/1
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8005 ;;      Params:         0       0       0       0
  8006 ;;      Locals:         0       0       0       0
  8007 ;;      Temps:          0       0       0       0
  8008 ;;      Totals:         0       0       0       0
  8009 ;;Total ram usage:        0 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    5
  8012 ;; This function calls:
  8013 ;;		Nothing
  8014 ;; This function is called by:
  8015 ;;		_Mrf49xaTick
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           
  8020                           ;psect for function _Mrf49xaRxPacket
  8021  0F23                     _Mrf49xaRxPacket:	
  8022                           
  8023                           ;mrf49xa_packet.c: 92: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  8024                           
  8025                           ;incstack = 0
  8026                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  8027  0F23  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  8028  0F24  3A05               	xorlw	5
  8029  0F25  1D03               	skipz
  8030  0F26  2F2A               	goto	l3158
  8031                           
  8032                           ;mrf49xa_packet.c: 93: {
  8033                           ;mrf49xa_packet.c: 94: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  8034  0F27  3006               	movlw	6
  8035  0F28  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  8036                           
  8037                           ;mrf49xa_packet.c: 95: return &(rfTrcvStatus.rxPacket[0]);
  8038  0F29  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  8039  0F2A                     l3158:	
  8040                           
  8041                           ;mrf49xa_packet.c: 96: }
  8042                           ;mrf49xa_packet.c: 98: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  8043  0F2A  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  8044  0F2B  3A05               	xorlw	5
  8045  0F2C  1D03               	skipz
  8046  0F2D  3400               	retlw	0
  8047                           
  8048                           ;mrf49xa_packet.c: 99: {
  8049                           ;mrf49xa_packet.c: 100: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  8050  0F2E  3006               	movlw	6
  8051  0F2F  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  8052                           
  8053                           ;mrf49xa_packet.c: 101: return &(rfTrcvStatus.rxPacket[1]);
  8054  0F30  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  8055  0F31                     __end_of_Mrf49xaRxPacket:	
  8056                           ;mrf49xa_packet.c: 102: }
  8057                           ;mrf49xa_packet.c: 104: return (0);
  8058                           
  8059  0F31                     __ptext26:	
  8060 ;; *************** function _PwrAdcInit *****************
  8061 ;; Defined at:
  8062 ;;		line 150 in file "../../../src/node/power.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;		None
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;		None
  8067 ;; Return value:  Size  Location     Type
  8068 ;;		None               void
  8069 ;; Registers used:
  8070 ;;		status,2
  8071 ;; Tracked objects:
  8072 ;;		On entry : 17F/1
  8073 ;;		On exit  : 17F/1
  8074 ;;		Unchanged: 160/0
  8075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8076 ;;      Params:         0       0       0       0
  8077 ;;      Locals:         0       0       0       0
  8078 ;;      Temps:          0       0       0       0
  8079 ;;      Totals:         0       0       0       0
  8080 ;;Total ram usage:        0 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    5
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _PwrAdcInit
  8092  0F31                     _PwrAdcInit:	
  8093                           
  8094                           ;power.c: 152: ANSELA = 0;
  8095                           
  8096                           ;incstack = 0
  8097                           ; Regs used in _PwrAdcInit: [status,2]
  8098  0F31  0023               	movlb	3	; select bank3
  8099  0F32  018C               	clrf	12	;volatile
  8100                           
  8101                           ;power.c: 153: ANSELB = 0;
  8102  0F33  018D               	clrf	13	;volatile
  8103                           
  8104                           ;power.c: 154: ANSELC = 0;
  8105                           
  8106                           ;power.c: 156: PORTCbits.RC0 = 1;
  8107                           
  8108                           ;power.c: 157: TRISCbits.TRISC0 = 0;
  8109  0F34  27BD               	fcall	PL20	;call to abstracted procedure
  8110  0F35  0008               	return
  8111  0F36                     __end_of_PwrAdcInit:	
  8112  0F36                     __ptext24:	
  8113 ;; *************** function _PwrI2cInit *****************
  8114 ;; Defined at:
  8115 ;;		line 62 in file "../../../src/node/power.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;		None
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;		None
  8120 ;; Return value:  Size  Location     Type
  8121 ;;		None               void
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0, pclath, cstack
  8124 ;; Tracked objects:
  8125 ;;		On entry : 17F/2
  8126 ;;		On exit  : 1F/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8129 ;;      Params:         0       0       0       0
  8130 ;;      Locals:         0       0       0       0
  8131 ;;      Temps:          0       0       0       0
  8132 ;;      Totals:         0       0       0       0
  8133 ;;Total ram usage:        0 bytes
  8134 ;; Hardware stack levels used:    1
  8135 ;; Hardware stack levels required when called:    8
  8136 ;; This function calls:
  8137 ;;		_SoftI2cInit
  8138 ;; This function is called by:
  8139 ;;		_main
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           
  8144                           ;psect for function _PwrI2cInit
  8145  0F36                     _PwrI2cInit:	
  8146                           
  8147                           ;power.c: 64: SoftI2cInit();
  8148                           
  8149                           ;incstack = 0
  8150                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  8151  0F36  2016               	fcall	_SoftI2cInit
  8152                           
  8153                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  8154  0F37  0021               	movlb	1	; select bank1
  8155  0F38  120D               	bcf	13,4	;volatile
  8156                           
  8157                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  8158  0F39  130D               	bcf	13,6	;volatile
  8159                           
  8160                           ;power.c: 69: TRISBbits.TRISB5 = 1;
  8161  0F3A  168D               	bsf	13,5	;volatile
  8162                           
  8163                           ;power.c: 70: PORTBbits.RB5 = 1;
  8164  0F3B  0020               	movlb	0	; select bank0
  8165  0F3C  168D               	bsf	13,5	;volatile
  8166  0F3D  0008               	return
  8167  0F3E                     __end_of_PwrI2cInit:	
  8168  0F3E                     __ptext16:	
  8169 ;; *************** function _PwrRfWake *****************
  8170 ;; Defined at:
  8171 ;;		line 125 in file "../../../src/node/power.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;		None               void
  8178 ;; Registers used:
  8179 ;;		wreg, status,2, status,0, pclath, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : 1F/1
  8182 ;;		On exit  : 1F/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8185 ;;      Params:         0       0       0       0
  8186 ;;      Locals:         0       0       0       0
  8187 ;;      Temps:          0       0       0       0
  8188 ;;      Totals:         0       0       0       0
  8189 ;;Total ram usage:        0 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:    9
  8192 ;; This function calls:
  8193 ;;		_Mrf49xaReboot
  8194 ;; This function is called by:
  8195 ;;		_main
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           
  8200                           ;psect for function _PwrRfWake
  8201  0F3E                     _PwrRfWake:	
  8202                           
  8203                           ;power.c: 127: INTCONbits.INTE = 1;
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  8207  0F3E  160B               	bsf	11,4	;volatile
  8208                           
  8209                           ;power.c: 128: Mrf49xaReboot();
  8210  0F3F  2BAC               	ljmp	l2620
  8211  0F40                     __end_of_PwrRfWake:	
  8212  0F40                     __ptext15:	
  8213 ;; *************** function _PwrSensorInit *****************
  8214 ;; Defined at:
  8215 ;;		line 132 in file "../../../src/node/power.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;		None
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;		None
  8220 ;; Return value:  Size  Location     Type
  8221 ;;		None               void
  8222 ;; Registers used:
  8223 ;;		None
  8224 ;; Tracked objects:
  8225 ;;		On entry : 17F/1
  8226 ;;		On exit  : 17F/2
  8227 ;;		Unchanged: 160/0
  8228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8229 ;;      Params:         0       0       0       0
  8230 ;;      Locals:         0       0       0       0
  8231 ;;      Temps:          0       0       0       0
  8232 ;;      Totals:         0       0       0       0
  8233 ;;Total ram usage:        0 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:    5
  8236 ;; This function calls:
  8237 ;;		Nothing
  8238 ;; This function is called by:
  8239 ;;		_main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _PwrSensorInit
  8245  0F40                     _PwrSensorInit:	
  8246                           
  8247                           ;power.c: 134: TRISCbits.TRISC2 = 0;
  8248                           
  8249                           ;incstack = 0
  8250                           ; Regs used in _PwrSensorInit: []
  8251  0F40  110E               	bcf	14,2	;volatile
  8252                           
  8253                           ;power.c: 136: LATCbits.LATC2 = 0;
  8254  0F41  0022               	movlb	2	; select bank2
  8255  0F42  110E               	bcf	14,2	;volatile
  8256  0F43  0008               	return
  8257  0F44                     __end_of_PwrSensorInit:	
  8258  0F44                     __ptext13:	
  8259 ;; *************** function _PwrSensorWake *****************
  8260 ;; Defined at:
  8261 ;;		line 144 in file "../../../src/node/power.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;		None
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;		None
  8266 ;; Return value:  Size  Location     Type
  8267 ;;		None               void
  8268 ;; Registers used:
  8269 ;;		None
  8270 ;; Tracked objects:
  8271 ;;		On entry : 1F/0
  8272 ;;		On exit  : 1F/2
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8275 ;;      Params:         0       0       0       0
  8276 ;;      Locals:         0       0       0       0
  8277 ;;      Temps:          0       0       0       0
  8278 ;;      Totals:         0       0       0       0
  8279 ;;Total ram usage:        0 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    5
  8282 ;; This function calls:
  8283 ;;		Nothing
  8284 ;; This function is called by:
  8285 ;;		_main
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           
  8290                           ;psect for function _PwrSensorWake
  8291  0F44                     _PwrSensorWake:	
  8292                           
  8293                           ;power.c: 146: LATCbits.LATC2 = 1;
  8294                           
  8295                           ;incstack = 0
  8296                           ; Regs used in _PwrSensorWake: []
  8297  0F44  0022               	movlb	2	; select bank2
  8298  0F45  150E               	bsf	14,2	;volatile
  8299  0F46  0008               	return
  8300  0F47                     __end_of_PwrSensorWake:	
  8301  0F47                     __ptext40:	
  8302 ;; *************** function _Mrf49RxCmd *****************
  8303 ;; Defined at:
  8304 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;  cmd             1    wreg     unsigned char 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  cmd             1    1[BANK0 ] unsigned char 
  8309 ;;  val             1    2[BANK0 ] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      unsigned char 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0, pclath, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : 1E/1
  8316 ;;		On exit  : 1F/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8319 ;;      Params:         0       0       0       0
  8320 ;;      Locals:         0       2       0       0
  8321 ;;      Temps:          0       0       0       0
  8322 ;;      Totals:         0       2       0       0
  8323 ;;Total ram usage:        2 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:    6
  8326 ;; This function calls:
  8327 ;;		_Mrf49SpiRx
  8328 ;;		_Mrf49SpiTx
  8329 ;; This function is called by:
  8330 ;;		_Mrf49RxByte
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           
  8335                           ;psect for function _Mrf49RxCmd
  8336  0F47                     _Mrf49RxCmd:	
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8340                           ;Mrf49RxCmd@cmd stored from wreg
  8341  0F47  0020               	movlb	0	; select bank0
  8342  0F48  00A1               	movwf	Mrf49RxCmd@cmd
  8343                           
  8344                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8345  0F49  130E               	bcf	14,6	;volatile
  8346                           
  8347                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8348  0F4A  0821               	movf	Mrf49RxCmd@cmd,w
  8349  0F4B  26BF  3188         	fcall	_Mrf49SpiTx
  8350                           
  8351                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8352  0F4D  267B               	fcall	_Mrf49SpiRx
  8353  0F4E  00A2               	movwf	Mrf49RxCmd@val
  8354                           
  8355                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8356  0F4F  170E               	bsf	14,6	;volatile
  8357                           
  8358                           ;mrf49xa_cmd.c: 27: return val;
  8359  0F50  0008               	return
  8360  0F51                     __end_of_Mrf49RxCmd:	
  8361  0F51                     __ptext30:	
  8362 ;; *************** function _Mrf49xaModeTx *****************
  8363 ;; Defined at:
  8364 ;;		line 111 in file "../../../src/devices/mrf49xa.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;		None
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  k               1    3[BANK0 ] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;		None               void
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, pclath, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 1F/0
  8375 ;;		On exit  : 1F/1
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8378 ;;      Params:         0       0       0       0
  8379 ;;      Locals:         0       1       0       0
  8380 ;;      Temps:          0       0       0       0
  8381 ;;      Totals:         0       1       0       0
  8382 ;;Total ram usage:        1 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    7
  8385 ;; This function calls:
  8386 ;;		_Mrf49TxCmd
  8387 ;; This function is called by:
  8388 ;;		_Mrf49xaTick
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _Mrf49xaModeTx
  8394  0F51                     _Mrf49xaModeTx:	
  8395  0F51  300E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8396                           
  8397                           ;mrf49xa.c: 113: UI08_t k;
  8398                           ;mrf49xa.c: 114: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  8399                           
  8400                           ;incstack = 0
  8401                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  8402  0F52  01A3               	clrf	Mrf49xaModeTx@k
  8403  0F53  3182               	movlp	high __stringtab
  8404  0F54  000A               	callw
  8405  0F55  3188               	pagesel	$	;select current page
  8406  0F56  3800               	iorlw	0
  8407  0F57  1903               	btfsc	3,2
  8408  0F58  2F6D               	goto	l3080
  8409  0F59                     l3074:	
  8410  0F59  3523               	lslf	Mrf49xaModeTx@k,w
  8411  0F5A  3E3C               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  8412  0F5B  3182               	movlp	high __stringtab
  8413  0F5C  000A               	callw
  8414  0F5D  3188               	pagesel	$	;select current page
  8415  0F5E  00A1               	movwf	Mrf49TxCmd@val
  8416  0F5F  3523               	lslf	Mrf49xaModeTx@k,w
  8417  0F60  3E3B               	addlw	low (_mrfRegset_Tx| (0+32768))
  8418  0F61  3182               	movlp	high __stringtab
  8419  0F62  000A               	callw
  8420  0F63  3188               	pagesel	$	;select current page
  8421  0F64  23D4               	fcall	_Mrf49TxCmd
  8422  0F65  300E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8423  0F66  0AA3               	incf	Mrf49xaModeTx@k,f
  8424  0F67  3182               	movlp	high __stringtab
  8425  0F68  000A               	callw
  8426  0F69  3188               	pagesel	$	;select current page
  8427  0F6A  0223               	subwf	Mrf49xaModeTx@k,w
  8428  0F6B  1C03               	skipc
  8429  0F6C  2F59               	goto	l3074
  8430  0F6D                     l3080:	
  8431                           
  8432                           ;mrf49xa.c: 117: rfTrcvStatus.state = TX_PACKET;
  8433  0F6D  3003               	movlw	3
  8434  0F6E  0021               	movlb	1	; select bank1
  8435  0F6F  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  8436                           
  8437                           ;mrf49xa.c: 118: rfTrcvStatus.hwByte = 99;
  8438  0F70  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8439  0F71  3980               	andlw	-128
  8440  0F72  3863               	iorlw	99
  8441  0F73  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  8442  0F74  0008               	return
  8443  0F75                     __end_of_Mrf49xaModeTx:	
  8444  0F75                     __ptext19:	
  8445 ;; *************** function _Mrf49xaShutdown *****************
  8446 ;; Defined at:
  8447 ;;		line 131 in file "../../../src/devices/mrf49xa.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;		None
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;		None
  8452 ;; Return value:  Size  Location     Type
  8453 ;;		None               void
  8454 ;; Registers used:
  8455 ;;		wreg, status,2, status,0, pclath, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 1E/1
  8458 ;;		On exit  : 1F/1
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8461 ;;      Params:         0       0       0       0
  8462 ;;      Locals:         0       0       0       0
  8463 ;;      Temps:          0       0       0       0
  8464 ;;      Totals:         0       0       0       0
  8465 ;;Total ram usage:        0 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    8
  8468 ;; This function calls:
  8469 ;;		_Mrf49xaModeSleep
  8470 ;; This function is called by:
  8471 ;;		_PwrRfSleep
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475                           
  8476                           ;psect for function _Mrf49xaShutdown
  8477  0F75                     _Mrf49xaShutdown:	
  8478                           
  8479                           ;mrf49xa.c: 133: Mrf49xaModeSleep();
  8480                           
  8481                           ;incstack = 0
  8482                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  8483  0F75  2FD3               	ljmp	l2956
  8484  0F76                     __end_of_Mrf49xaShutdown:	
  8485  0F76                     __ptext17:	
  8486 ;; *************** function _Mrf49xaReboot *****************
  8487 ;; Defined at:
  8488 ;;		line 139 in file "../../../src/devices/mrf49xa.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;		None
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;		None
  8493 ;; Return value:  Size  Location     Type
  8494 ;;		None               void
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0, pclath, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 1F/1
  8499 ;;		On exit  : 1F/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8502 ;;      Params:         0       0       0       0
  8503 ;;      Locals:         0       0       0       0
  8504 ;;      Temps:          0       0       0       0
  8505 ;;      Totals:         0       0       0       0
  8506 ;;Total ram usage:        0 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    8
  8509 ;; This function calls:
  8510 ;;		_Mrf49xaModeRx
  8511 ;; This function is called by:
  8512 ;;		_PwrRfWake
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           
  8517                           ;psect for function _Mrf49xaReboot
  8518  0F76                     _Mrf49xaReboot:	
  8519                           
  8520                           ;mrf49xa.c: 141: Mrf49xaModeRx();
  8521                           
  8522                           ;incstack = 0
  8523                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  8524  0F76  2BAC               	ljmp	l2620
  8525  0F77                     __end_of_Mrf49xaReboot:	
  8526  0F77                     __ptext6:	
  8527 ;; *************** function _AdcDeinit *****************
  8528 ;; Defined at:
  8529 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;		None               void
  8536 ;; Registers used:
  8537 ;;		status,2
  8538 ;; Tracked objects:
  8539 ;;		On entry : 1F/1
  8540 ;;		On exit  : 1F/1
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8543 ;;      Params:         0       0       0       0
  8544 ;;      Locals:         0       0       0       0
  8545 ;;      Temps:          0       0       0       0
  8546 ;;      Totals:         0       0       0       0
  8547 ;;Total ram usage:        0 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    5
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_PwrAdcSleep
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function _AdcDeinit
  8559  0F77                     _AdcDeinit:	
  8560  0F77                     l2812:	
  8561                           ;incstack = 0
  8562                           ; Regs used in _AdcDeinit: [status,2]
  8563                           
  8564                           
  8565                           ;adc16.c: 17: FVRCON = 0;
  8566  0F77  0022               	movlb	2	; select bank2
  8567  0F78  0197               	clrf	23	;volatile
  8568                           
  8569                           ;adc16.c: 19: ADCON2 = 0;
  8570  0F79  0021               	movlb	1	; select bank1
  8571  0F7A  019F               	clrf	31	;volatile
  8572                           
  8573                           ;adc16.c: 20: ADCON1 = 0;
  8574  0F7B  019E               	clrf	30	;volatile
  8575                           
  8576                           ;adc16.c: 21: ADCON0 = 0;
  8577  0F7C  019D               	clrf	29	;volatile
  8578  0F7D  0008               	return
  8579  0F7E                     __end_of_AdcDeinit:	
  8580  0F7E                     PL8:	
  8581  0F7E  30F0               	movlw	-16
  8582  0F7F  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  8583  0F80  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  8584  0F81  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  8585  0F82  30CF               	movlw	-49
  8586  0F83  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  8587  0F84  0020               	movlb	0	; select bank0
  8588  0F85  0321               	decf	Mrf49xaTxPacket@needAck,w
  8589  0F86  3000               	movlw	0
  8590  0F87  1903               	skipnz
  8591  0F88  3001               	movlw	1
  8592  0F89  00A2               	movwf	??_Mrf49xaTxPacket
  8593  0F8A  0EA2               	swapf	??_Mrf49xaTxPacket,f
  8594  0F8B  0DA2               	rlf	??_Mrf49xaTxPacket,f
  8595  0F8C  0DA2               	rlf	??_Mrf49xaTxPacket,f
  8596  0F8D  0021               	movlb	1	; select bank1
  8597  0F8E  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8598  0F8F  0020               	movlb	0	; select bank0
  8599  0F90  0622               	xorwf	??_Mrf49xaTxPacket,w
  8600  0F91  393F               	andlw	-193
  8601  0F92  0622               	xorwf	??_Mrf49xaTxPacket,w
  8602  0F93  0021               	movlb	1	; select bank1
  8603  0F94  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  8604  0F95  0008               	return
  8605  0F96                     __end_ofPL8:	
  8606  0F96                     PL10:	
  8607  0F96  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8608  0F97  390F               	andlw	15
  8609  0F98  0020               	movlb	0	; select bank0
  8610  0F99  00AC               	movwf	??_Mrf49xaTick
  8611  0F9A  0AAC               	incf	??_Mrf49xaTick,f
  8612  0F9B  0021               	movlb	1	; select bank1
  8613  0F9C  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8614  0F9D  0020               	movlb	0	; select bank0
  8615  0F9E  062C               	xorwf	??_Mrf49xaTick,w
  8616  0F9F  39F0               	andlw	-16
  8617  0FA0  062C               	xorwf	??_Mrf49xaTick,w
  8618  0FA1  0021               	movlb	1	; select bank1
  8619  0FA2  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  8620  0FA3  0008               	return
  8621  0FA4                     __end_ofPL10:	
  8622  0FA4                     PL12:	
  8623  0FA4  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8624  0FA5  397F               	andlw	127
  8625  0FA6  0020               	movlb	0	; select bank0
  8626  0FA7  00A4               	movwf	??_Mrf49xaServe
  8627  0FA8  0AA4               	incf	??_Mrf49xaServe,f
  8628  0FA9  0021               	movlb	1	; select bank1
  8629  0FAA  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8630  0FAB  0020               	movlb	0	; select bank0
  8631  0FAC  0624               	xorwf	??_Mrf49xaServe,w
  8632  0FAD  3980               	andlw	-128
  8633  0FAE  0624               	xorwf	??_Mrf49xaServe,w
  8634  0FAF  0021               	movlb	1	; select bank1
  8635  0FB0  0008               	return
  8636  0FB1                     __end_ofPL12:	
  8637  0FB1                     PL16:	
  8638  0FB1  0187               	clrf	7
  8639  0FB2  0081               	movwf	1
  8640  0FB3  0828               	movf	handleCfgCmd@packet,w
  8641  0FB4  3E07               	addlw	7
  8642  0FB5  0086               	movwf	6
  8643  0FB6  0008               	return
  8644  0FB7                     __end_ofPL16:	
  8645  0FB7                     PL18:	
  8646  0FB7  170D               	bsf	13,6	;volatile
  8647  0FB8  160D               	bsf	13,4	;volatile
  8648  0FB9  0021               	movlb	1	; select bank1
  8649  0FBA  130D               	bcf	13,6	;volatile
  8650  0FBB  120D               	bcf	13,4	;volatile
  8651  0FBC  0008               	return
  8652  0FBD                     __end_ofPL18:	
  8653  0FBD                     PL20:	
  8654  0FBD  018E               	clrf	14	;volatile
  8655  0FBE  0020               	movlb	0	; select bank0
  8656  0FBF  140E               	bsf	14,0	;volatile
  8657  0FC0  0021               	movlb	1	; select bank1
  8658  0FC1  100E               	bcf	14,0	;volatile
  8659  0FC2  0008               	return
  8660  0FC3                     __end_ofPL20:	
  8661  0FC3                     PL22:	
  8662  0FC3  0020               	movlb	0	; select bank0
  8663  0FC4  0825               	movf	Mrf49xaServe@data,w
  8664  0FC5  0081               	movwf	1
  8665  0FC6  0021               	movlb	1	; select bank1
  8666  0FC7  0820               	movf	_rfTrcvStatus^(0+128),w
  8667  0FC8  0008               	return
  8668  0FC9                     __end_ofPL22:	
  8669  0FC9                     PL24:	
  8670  0FC9  3040               	movlw	64
  8671  0FCA  0020               	movlb	0	; select bank0
  8672  0FCB  00A0               	movwf	Sleepy@ms
  8673  0FCC  01A1               	clrf	Sleepy@ms+1
  8674  0FCD  0008               	return
  8675  0FCE                     __end_ofPL24:	
  8676  0FCE                     PL26:	
  8677  0FCE  3E06               	addlw	6
  8678  0FCF  0086               	movwf	6
  8679  0FD0  0187               	clrf	7
  8680  0FD1  0801               	movf	1,w
  8681  0FD2  0008               	return
  8682  0FD3                     __end_ofPL26:	
  8683  0FD3                     __ptext20:	
  8684 ;; *************** function _Mrf49xaModeSleep *****************
  8685 ;; Defined at:
  8686 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  k               1    3[BANK0 ] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;		None               void
  8693 ;; Registers used:
  8694 ;;		wreg, status,2, status,0, pclath, cstack
  8695 ;; Tracked objects:
  8696 ;;		On entry : 1E/1
  8697 ;;		On exit  : 1F/1
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8700 ;;      Params:         0       0       0       0
  8701 ;;      Locals:         0       1       0       0
  8702 ;;      Temps:          0       0       0       0
  8703 ;;      Totals:         0       1       0       0
  8704 ;;Total ram usage:        1 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    7
  8707 ;; This function calls:
  8708 ;;		_Mrf49TxCmd
  8709 ;; This function is called by:
  8710 ;;		_Mrf49xaShutdown
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           
  8715                           ;psect for function _Mrf49xaModeSleep
  8716  0FD3                     _Mrf49xaModeSleep:	
  8717  0FD3                     l2956:	
  8718                           ;incstack = 0
  8719                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  8720                           
  8721                           
  8722                           ;mrf49xa.c: 123: UI08_t k;
  8723                           ;mrf49xa.c: 124: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  8724  0FD3  0020               	movlb	0	; select bank0
  8725  0FD4  300D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  8726  0FD5  01A3               	clrf	Mrf49xaModeSleep@k
  8727  0FD6  3182               	movlp	high __stringtab
  8728  0FD7  000A               	callw
  8729  0FD8  3188               	pagesel	$	;select current page
  8730  0FD9  3800               	iorlw	0
  8731  0FDA  1903               	btfsc	3,2
  8732  0FDB  2FF0               	goto	l2968
  8733  0FDC                     l2962:	
  8734  0FDC  3523               	lslf	Mrf49xaModeSleep@k,w
  8735  0FDD  3E44               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  8736  0FDE  3182               	movlp	high __stringtab
  8737  0FDF  000A               	callw
  8738  0FE0  3188               	pagesel	$	;select current page
  8739  0FE1  00A1               	movwf	Mrf49TxCmd@val
  8740  0FE2  3523               	lslf	Mrf49xaModeSleep@k,w
  8741  0FE3  3E43               	addlw	low (_mrfRegset_Sleep| (0+32768))
  8742  0FE4  3182               	movlp	high __stringtab
  8743  0FE5  000A               	callw
  8744  0FE6  3188               	pagesel	$	;select current page
  8745  0FE7  23D4               	fcall	_Mrf49TxCmd
  8746  0FE8  300D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  8747  0FE9  0AA3               	incf	Mrf49xaModeSleep@k,f
  8748  0FEA  3182               	movlp	high __stringtab
  8749  0FEB  000A               	callw
  8750  0FEC  3188               	pagesel	$	;select current page
  8751  0FED  0223               	subwf	Mrf49xaModeSleep@k,w
  8752  0FEE  1C03               	skipc
  8753  0FEF  2FDC               	goto	l2962
  8754  0FF0                     l2968:	
  8755                           
  8756                           ;mrf49xa.c: 126: rfTrcvStatus.state = POWERED_OFF;
  8757  0FF0  0021               	movlb	1	; select bank1
  8758  0FF1  3080               	movlw	-128
  8759  0FF2  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  8760                           
  8761                           ;mrf49xa.c: 127: rfTrcvStatus.hwByte = 0;
  8762  0FF3  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  8763  0FF4  0008               	return
  8764  0FF5                     __end_of_Mrf49xaModeSleep:	
  8765  0FF5                     __ptext4:	
  8766 ;; *************** function _AdcInit *****************
  8767 ;; Defined at:
  8768 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;		None               void
  8775 ;; Registers used:
  8776 ;;		wreg, status,2
  8777 ;; Tracked objects:
  8778 ;;		On entry : 1F/1
  8779 ;;		On exit  : 1F/1
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8782 ;;      Params:         0       0       0       0
  8783 ;;      Locals:         0       0       0       0
  8784 ;;      Temps:          0       0       0       0
  8785 ;;      Totals:         0       0       0       0
  8786 ;;Total ram usage:        0 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    5
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_PwrAdcWake
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _AdcInit
  8798  0FF5                     _AdcInit:	
  8799  0FF5                     l2804:	
  8800                           ;incstack = 0
  8801                           ; Regs used in _AdcInit: [wreg+status,2]
  8802                           
  8803                           
  8804                           ;adc16.c: 6: FVRCON = 0b11100001;
  8805  0FF5  30E1               	movlw	225
  8806  0FF6  0022               	movlb	2	; select bank2
  8807  0FF7  0097               	movwf	23	;volatile
  8808                           
  8809                           ;adc16.c: 8: ADCON2 = 0b00000000;
  8810  0FF8  0021               	movlb	1	; select bank1
  8811  0FF9  019F               	clrf	31	;volatile
  8812                           
  8813                           ;adc16.c: 9: ADCON1 = 0b11110000;
  8814  0FFA  30F0               	movlw	240
  8815  0FFB  009E               	movwf	30	;volatile
  8816                           
  8817                           ;adc16.c: 10: ADCON0 = 0b00000000;
  8818  0FFC  019D               	clrf	29	;volatile
  8819                           
  8820                           ;adc16.c: 12: ADCON0 = 0b00010011;
  8821  0FFD  3013               	movlw	19
  8822  0FFE  009D               	movwf	29	;volatile
  8823  0FFF  0008               	return
  8824  1000                     __end_of_AdcInit:	
  8825                           
  8826                           	psect	bssBANK0
  8827  0033                     __pbssBANK0:	
  8828  0033                     _powerStatusTicker:	
  8829  0033                     	ds	1
  8830  0034                     _cfgRam:	
  8831  0034                     	ds	9
  8832  003D                     _mrf49Status:	
  8833  003D                     	ds	2
  8834                           
  8835                           	psect	dataBANK0
  8836  003F                     __pdataBANK0:	
  8837  003F                     _coldBoot:	
  8838  003F                     	ds	1
  8839                           
  8840                           	psect	bssBANK1
  8841  00A0                     __pbssBANK1:	
  8842  00A0                     _rfTrcvStatus:	
  8843  00A0                     	ds	75
  8844                           
  8845                           	psect	clrtext
  8846  024F                     clear_ram0:	
  8847                           ;	Called with FSR0 containing the base address, and
  8848                           ;	WREG with the size to clear
  8849                           
  8850  024F  0064               	clrwdt	;clear the watchdog before getting into this loop
  8851  0250                     clrloop0:	
  8852  0250  0180               	clrf	0	;clear RAM location pointed to by FSR
  8853  0251  3101               	addfsr 0,1
  8854  0252  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8855  0253  2A50               	goto	clrloop0	;have we reached the end yet?
  8856  0254  3400               	retlw	0	;all done for this memory range, return
  8857                           
  8858                           	psect	cstackCOMMON
  8859  0070                     __pcstackCOMMON:	
  8860  0070                     ?_SoftI2cStart:	
  8861  0070                     ?_SoftI2cStop:	
  8862                           ; 0 bytes @ 0x0
  8863                           
  8864  0070                     ?_Mrf49xaNeedsReset:	
  8865                           ; 0 bytes @ 0x0
  8866                           
  8867  0070                     ?_Mrf49RxSts:	
  8868                           ; 0 bytes @ 0x0
  8869                           
  8870  0070                     ?_HandlePacket:	
  8871                           ; 0 bytes @ 0x0
  8872                           
  8873  0070                     ?_CfgSave:	
  8874                           ; 0 bytes @ 0x0
  8875                           
  8876  0070                     ?_CfgLoad:	
  8877                           ; 0 bytes @ 0x0
  8878                           
  8879  0070                     ?_PwrAdcWake:	
  8880                           ; 0 bytes @ 0x0
  8881                           
  8882  0070                     ?_PwrAdcSleep:	
  8883                           ; 0 bytes @ 0x0
  8884                           
  8885  0070                     ?_PwrAdcInit:	
  8886                           ; 0 bytes @ 0x0
  8887                           
  8888  0070                     ?_PwrSensorInit:	
  8889                           ; 0 bytes @ 0x0
  8890                           
  8891  0070                     ?_PwrI2cInit:	
  8892                           ; 0 bytes @ 0x0
  8893                           
  8894  0070                     ?_PwrRfInit:	
  8895                           ; 0 bytes @ 0x0
  8896                           
  8897  0070                     ?_PwrSensorSleep:	
  8898                           ; 0 bytes @ 0x0
  8899                           
  8900  0070                     ?_PwrI2cSleep:	
  8901                           ; 0 bytes @ 0x0
  8902                           
  8903  0070                     ?_PwrRfSleep:	
  8904                           ; 0 bytes @ 0x0
  8905                           
  8906  0070                     ?_PwrSensorWake:	
  8907                           ; 0 bytes @ 0x0
  8908                           
  8909  0070                     ?_PwrI2cWake:	
  8910                           ; 0 bytes @ 0x0
  8911                           
  8912  0070                     ?_PwrRfWake:	
  8913                           ; 0 bytes @ 0x0
  8914                           
  8915  0070                     ?_SoftI2cNop:	
  8916                           ; 0 bytes @ 0x0
  8917                           
  8918  0070                     ?_SoftI2cInit:	
  8919                           ; 0 bytes @ 0x0
  8920                           
  8921  0070                     ?_SoftI2cRepeatedStart:	
  8922                           ; 0 bytes @ 0x0
  8923                           
  8924  0070                     ?_AdcInit:	
  8925                           ; 0 bytes @ 0x0
  8926                           
  8927  0070                     ?_AdcDeinit:	
  8928                           ; 0 bytes @ 0x0
  8929                           
  8930  0070                     ?_AdcGo:	
  8931                           ; 0 bytes @ 0x0
  8932                           
  8933  0070                     ?_AdcChSelect:	
  8934                           ; 0 bytes @ 0x0
  8935                           
  8936  0070                     ?_ExtIntInit:	
  8937                           ; 0 bytes @ 0x0
  8938                           
  8939  0070                     ?_ExtIntDeinit:	
  8940                           ; 0 bytes @ 0x0
  8941                           
  8942  0070                     ??_ExtIntDeinit:	
  8943                           ; 0 bytes @ 0x0
  8944                           
  8945  0070                     ?_extInt:	
  8946                           ; 0 bytes @ 0x0
  8947                           
  8948  0070                     ?_Mcp9800Start:	
  8949                           ; 0 bytes @ 0x0
  8950                           
  8951  0070                     ?_Mrf49xaModeRx:	
  8952                           ; 0 bytes @ 0x0
  8953                           
  8954  0070                     ?_Mrf49xaModeTx:	
  8955                           ; 0 bytes @ 0x0
  8956                           
  8957  0070                     ?_Mrf49xaModeSleep:	
  8958                           ; 0 bytes @ 0x0
  8959                           
  8960  0070                     ?_Mrf49xaShutdown:	
  8961                           ; 0 bytes @ 0x0
  8962                           
  8963  0070                     ?_Mrf49xaReboot:	
  8964                           ; 0 bytes @ 0x0
  8965                           
  8966  0070                     ?_Mrf49xaInit:	
  8967                           ; 0 bytes @ 0x0
  8968                           
  8969  0070                     ?_Mrf49SpiTx:	
  8970                           ; 0 bytes @ 0x0
  8971                           
  8972  0070                     ?_Mrf49TxByte:	
  8973                           ; 0 bytes @ 0x0
  8974                           
  8975  0070                     ?_Mrf49xaFreePacket:	
  8976                           ; 0 bytes @ 0x0
  8977                           
  8978  0070                     ?_Mrf49xaTick:	
  8979                           ; 0 bytes @ 0x0
  8980                           
  8981  0070                     ?_handleFwCmd:	
  8982                           ; 0 bytes @ 0x0
  8983                           
  8984  0070                     ?_handleCfgRead:	
  8985                           ; 0 bytes @ 0x0
  8986                           
  8987  0070                     ?_handleCfgWrite:	
  8988                           ; 0 bytes @ 0x0
  8989                           
  8990  0070                     ?_handleCfgCmd:	
  8991                           ; 0 bytes @ 0x0
  8992                           
  8993  0070                     ?_RfSendPowerState:	
  8994                           ; 0 bytes @ 0x0
  8995                           
  8996  0070                     ?_main:	
  8997                           ; 0 bytes @ 0x0
  8998                           
  8999  0070                     ?i1_Mrf49xaModeRx:	
  9000                           ; 0 bytes @ 0x0
  9001                           
  9002  0070                     ?i1_Mrf49xaNeedsReset:	
  9003                           ; 0 bytes @ 0x0
  9004                           
  9005  0070                     ??i1_Mrf49xaNeedsReset:	
  9006                           ; 0 bytes @ 0x0
  9007                           
  9008  0070                     ?i1_Mrf49SpiTx:	
  9009                           ; 0 bytes @ 0x0
  9010                           
  9011  0070                     ??i1_Mrf49SpiTx:	
  9012                           ; 0 bytes @ 0x0
  9013                           
  9014  0070                     ??i1_Mrf49SpiRx:	
  9015                           ; 0 bytes @ 0x0
  9016                           
  9017  0070                     ?i1_Mrf49RxSts:	
  9018                           ; 0 bytes @ 0x0
  9019                           
  9020  0070                     ?i1_Mrf49TxByte:	
  9021                           ; 0 bytes @ 0x0
  9022                           
  9023  0070                     ?_SoftI2cTxByte:	
  9024                           ; 0 bytes @ 0x0
  9025                           
  9026  0070                     ?_Mrf49xaServe:	
  9027                           ; 1 bytes @ 0x0
  9028                           
  9029  0070                     ?_CfgGetSizeByType:	
  9030                           ; 1 bytes @ 0x0
  9031                           
  9032  0070                     ?_SoftI2cRxByte:	
  9033                           ; 1 bytes @ 0x0
  9034                           
  9035  0070                     ?_AdcIsBusy:	
  9036                           ; 1 bytes @ 0x0
  9037                           
  9038  0070                     ?_Mrf49SpiRx:	
  9039                           ; 1 bytes @ 0x0
  9040                           
  9041  0070                     ?_Mrf49RxCmd:	
  9042                           ; 1 bytes @ 0x0
  9043                           
  9044  0070                     ?_Mrf49RxByte:	
  9045                           ; 1 bytes @ 0x0
  9046                           
  9047  0070                     ?_Mrf49xaPacketPending:	
  9048                           ; 1 bytes @ 0x0
  9049                           
  9050  0070                     ?_Mrf49xaTxAck:	
  9051                           ; 1 bytes @ 0x0
  9052                           
  9053  0070                     ?_Mrf49xaRxPacket:	
  9054                           ; 1 bytes @ 0x0
  9055                           
  9056  0070                     ?_Mrf49xaAllocPacket:	
  9057                           ; 1 bytes @ 0x0
  9058                           
  9059  0070                     ?i1_Mrf49SpiRx:	
  9060                           ; 1 bytes @ 0x0
  9061                           
  9062  0070                     ?i1_Mrf49RxCmd:	
  9063                           ; 1 bytes @ 0x0
  9064                           
  9065  0070                     ?i1_Mrf49RxByte:	
  9066                           ; 1 bytes @ 0x0
  9067                           
  9068  0070                     ?i1_Mrf49xaServe:	
  9069                           ; 1 bytes @ 0x0
  9070                           
  9071  0070                     i1Mrf49SpiTx@byte:	
  9072                           ; 1 bytes @ 0x0
  9073                           
  9074  0070                     i1Mrf49SpiRx@data:	
  9075                           ; 1 bytes @ 0x0
  9076                           
  9077                           
  9078                           ; 1 bytes @ 0x0
  9079  0070                     	ds	1
  9080  0071                     ?i1_Mrf49TxCmd:	
  9081  0071                     ??i1_Mrf49RxCmd:	
  9082                           ; 0 bytes @ 0x1
  9083                           
  9084  0071                     ??i1_Mrf49RxSts:	
  9085                           ; 0 bytes @ 0x1
  9086                           
  9087  0071                     i1Mrf49TxCmd@val:	
  9088                           ; 0 bytes @ 0x1
  9089                           
  9090  0071                     i1Mrf49RxCmd@cmd:	
  9091                           ; 1 bytes @ 0x1
  9092                           
  9093                           
  9094                           ; 1 bytes @ 0x1
  9095  0071                     	ds	1
  9096  0072                     ??i1_Mrf49TxCmd:	
  9097  0072                     i1Mrf49TxCmd@cmd:	
  9098                           ; 0 bytes @ 0x2
  9099                           
  9100  0072                     i1Mrf49RxCmd@val:	
  9101                           ; 1 bytes @ 0x2
  9102                           
  9103                           
  9104                           ; 1 bytes @ 0x2
  9105  0072                     	ds	1
  9106  0073                     ??i1_Mrf49xaModeRx:	
  9107  0073                     ??i1_Mrf49RxByte:	
  9108                           ; 0 bytes @ 0x3
  9109                           
  9110  0073                     ??i1_Mrf49TxByte:	
  9111                           ; 0 bytes @ 0x3
  9112                           
  9113  0073                     i1Mrf49xaModeRx@k:	
  9114                           ; 0 bytes @ 0x3
  9115                           
  9116  0073                     i1Mrf49TxByte@byte:	
  9117                           ; 1 bytes @ 0x3
  9118                           
  9119                           
  9120                           ; 1 bytes @ 0x3
  9121  0073                     	ds	1
  9122  0074                     ??i1_Mrf49xaServe:	
  9123                           
  9124                           ; 0 bytes @ 0x4
  9125  0074                     	ds	1
  9126  0075                     i1Mrf49xaServe@data:	
  9127                           
  9128                           ; 1 bytes @ 0x5
  9129  0075                     	ds	1
  9130  0076                     ??_extInt:	
  9131                           
  9132                           ; 0 bytes @ 0x6
  9133  0076                     	ds	1
  9134  0077                     extInt@ofw:	
  9135                           
  9136                           ; 1 bytes @ 0x7
  9137  0077                     	ds	1
  9138                           
  9139                           	psect	cstackBANK0
  9140  0020                     __pcstackBANK0:	
  9141  0020                     ??_Mrf49xaNeedsReset:	
  9142  0020                     ?_Sleepy:	
  9143                           ; 0 bytes @ 0x0
  9144                           
  9145  0020                     ??_CfgGetSizeByType:	
  9146                           ; 0 bytes @ 0x0
  9147                           
  9148  0020                     ??_PwrAdcWake:	
  9149                           ; 0 bytes @ 0x0
  9150                           
  9151  0020                     ??_PwrAdcSleep:	
  9152                           ; 0 bytes @ 0x0
  9153                           
  9154  0020                     ??_PwrAdcInit:	
  9155                           ; 0 bytes @ 0x0
  9156                           
  9157  0020                     ??_PwrSensorInit:	
  9158                           ; 0 bytes @ 0x0
  9159                           
  9160  0020                     ??_PwrSensorSleep:	
  9161                           ; 0 bytes @ 0x0
  9162                           
  9163  0020                     ??_PwrI2cSleep:	
  9164                           ; 0 bytes @ 0x0
  9165                           
  9166  0020                     ??_PwrSensorWake:	
  9167                           ; 0 bytes @ 0x0
  9168                           
  9169  0020                     ??_PwrI2cWake:	
  9170                           ; 0 bytes @ 0x0
  9171                           
  9172  0020                     ??_SoftI2cNop:	
  9173                           ; 0 bytes @ 0x0
  9174                           
  9175  0020                     ??_AdcInit:	
  9176                           ; 0 bytes @ 0x0
  9177                           
  9178  0020                     ??_AdcDeinit:	
  9179                           ; 0 bytes @ 0x0
  9180                           
  9181  0020                     ??_AdcGo:	
  9182                           ; 0 bytes @ 0x0
  9183                           
  9184  0020                     ??_AdcIsBusy:	
  9185                           ; 0 bytes @ 0x0
  9186                           
  9187  0020                     ??_AdcChSelect:	
  9188                           ; 0 bytes @ 0x0
  9189                           
  9190  0020                     ??_ExtIntInit:	
  9191                           ; 0 bytes @ 0x0
  9192                           
  9193  0020                     ??_Mrf49SpiTx:	
  9194                           ; 0 bytes @ 0x0
  9195                           
  9196  0020                     ??_Mrf49SpiRx:	
  9197                           ; 0 bytes @ 0x0
  9198                           
  9199  0020                     ??_Mrf49xaPacketPending:	
  9200                           ; 0 bytes @ 0x0
  9201                           
  9202  0020                     ??_Mrf49xaFreePacket:	
  9203                           ; 0 bytes @ 0x0
  9204                           
  9205  0020                     ??_Mrf49xaRxPacket:	
  9206                           ; 0 bytes @ 0x0
  9207                           
  9208  0020                     ??_Mrf49xaAllocPacket:	
  9209                           ; 0 bytes @ 0x0
  9210                           
  9211  0020                     ?_Mrf49xaTxPacket:	
  9212                           ; 0 bytes @ 0x0
  9213                           
  9214  0020                     ?_memcpy:	
  9215                           ; 1 bytes @ 0x0
  9216                           
  9217  0020                     ?_AdcGetResult:	
  9218                           ; 1 bytes @ 0x0
  9219                           
  9220  0020                     AdcChSelect@channel:	
  9221                           ; 2 bytes @ 0x0
  9222                           
  9223  0020                     Mrf49SpiTx@byte:	
  9224                           ; 1 bytes @ 0x0
  9225                           
  9226  0020                     Mrf49SpiRx@data:	
  9227                           ; 1 bytes @ 0x0
  9228                           
  9229  0020                     Mrf49xaTxPacket@response:	
  9230                           ; 1 bytes @ 0x0
  9231                           
  9232  0020                     Mrf49xaFreePacket@packet:	
  9233                           ; 1 bytes @ 0x0
  9234                           
  9235  0020                     CfgGetSizeByType@type:	
  9236                           ; 1 bytes @ 0x0
  9237                           
  9238  0020                     memcpy@s1:	
  9239                           ; 1 bytes @ 0x0
  9240                           
  9241  0020                     Sleepy@ms:	
  9242                           ; 1 bytes @ 0x0
  9243                           
  9244                           
  9245                           ; 2 bytes @ 0x0
  9246  0020                     	ds	1
  9247  0021                     ??_SoftI2cStart:	
  9248  0021                     ??_SoftI2cTxByte:	
  9249                           ; 0 bytes @ 0x1
  9250                           
  9251  0021                     ??_SoftI2cStop:	
  9252                           ; 0 bytes @ 0x1
  9253                           
  9254  0021                     ?_Mrf49TxCmd:	
  9255                           ; 0 bytes @ 0x1
  9256                           
  9257  0021                     ??_Mrf49RxSts:	
  9258                           ; 0 bytes @ 0x1
  9259                           
  9260  0021                     ??_SoftI2cRepeatedStart:	
  9261                           ; 0 bytes @ 0x1
  9262                           
  9263  0021                     ??_SoftI2cRxByte:	
  9264                           ; 0 bytes @ 0x1
  9265                           
  9266  0021                     ??_Mrf49RxCmd:	
  9267                           ; 0 bytes @ 0x1
  9268                           
  9269  0021                     SoftI2cRxByte@ack:	
  9270                           ; 0 bytes @ 0x1
  9271                           
  9272  0021                     Mrf49TxCmd@val:	
  9273                           ; 1 bytes @ 0x1
  9274                           
  9275  0021                     Mrf49RxCmd@cmd:	
  9276                           ; 1 bytes @ 0x1
  9277                           
  9278  0021                     Mrf49xaTxPacket@needAck:	
  9279                           ; 1 bytes @ 0x1
  9280                           
  9281  0021                     memcpy@n:	
  9282                           ; 1 bytes @ 0x1
  9283                           
  9284                           
  9285                           ; 2 bytes @ 0x1
  9286  0021                     	ds	1
  9287  0022                     ??_Sleepy:	
  9288  0022                     ??_Mrf49TxCmd:	
  9289                           ; 0 bytes @ 0x2
  9290                           
  9291  0022                     ??_Mrf49xaTxPacket:	
  9292                           ; 0 bytes @ 0x2
  9293                           
  9294  0022                     ??_AdcGetResult:	
  9295                           ; 0 bytes @ 0x2
  9296                           
  9297  0022                     ?_AdcSample:	
  9298                           ; 0 bytes @ 0x2
  9299                           
  9300  0022                     SoftI2cTxByte@data:	
  9301                           ; 2 bytes @ 0x2
  9302                           
  9303  0022                     SoftI2cRxByte@data:	
  9304                           ; 1 bytes @ 0x2
  9305                           
  9306  0022                     Mrf49TxCmd@cmd:	
  9307                           ; 1 bytes @ 0x2
  9308                           
  9309  0022                     Mrf49RxCmd@val:	
  9310                           ; 1 bytes @ 0x2
  9311                           
  9312                           
  9313                           ; 1 bytes @ 0x2
  9314  0022                     	ds	1
  9315  0023                     ??_memcpy:	
  9316  0023                     ??_Mrf49xaModeRx:	
  9317                           ; 0 bytes @ 0x3
  9318                           
  9319  0023                     ??_Mrf49xaModeTx:	
  9320                           ; 0 bytes @ 0x3
  9321                           
  9322  0023                     ??_Mrf49xaModeSleep:	
  9323                           ; 0 bytes @ 0x3
  9324                           
  9325  0023                     ??_Mrf49RxByte:	
  9326                           ; 0 bytes @ 0x3
  9327                           
  9328  0023                     ??_Mrf49TxByte:	
  9329                           ; 0 bytes @ 0x3
  9330                           
  9331  0023                     SoftI2cTxByte@i:	
  9332                           ; 0 bytes @ 0x3
  9333                           
  9334  0023                     SoftI2cRxByte@i:	
  9335                           ; 1 bytes @ 0x3
  9336                           
  9337  0023                     Mrf49xaModeRx@k:	
  9338                           ; 1 bytes @ 0x3
  9339                           
  9340  0023                     Mrf49xaModeTx@k:	
  9341                           ; 1 bytes @ 0x3
  9342                           
  9343  0023                     Mrf49xaModeSleep@k:	
  9344                           ; 1 bytes @ 0x3
  9345                           
  9346  0023                     Mrf49TxByte@byte:	
  9347                           ; 1 bytes @ 0x3
  9348                           
  9349  0023                     Mrf49xaTxPacket@crc:	
  9350                           ; 1 bytes @ 0x3
  9351                           
  9352  0023                     Sleepy@b:	
  9353                           ; 1 bytes @ 0x3
  9354                           
  9355  0023                     memcpy@d:	
  9356                           ; 1 bytes @ 0x3
  9357                           
  9358                           
  9359                           ; 1 bytes @ 0x3
  9360  0023                     	ds	1
  9361  0024                     ??_Mrf49xaServe:	
  9362  0024                     ??_PwrI2cInit:	
  9363                           ; 0 bytes @ 0x4
  9364                           
  9365  0024                     ??_PwrRfSleep:	
  9366                           ; 0 bytes @ 0x4
  9367                           
  9368  0024                     ??_PwrRfWake:	
  9369                           ; 0 bytes @ 0x4
  9370                           
  9371  0024                     ??_SoftI2cInit:	
  9372                           ; 0 bytes @ 0x4
  9373                           
  9374  0024                     ??_AdcSample:	
  9375                           ; 0 bytes @ 0x4
  9376                           
  9377  0024                     ??_Mcp9800Start:	
  9378                           ; 0 bytes @ 0x4
  9379                           
  9380  0024                     ??_Mrf49xaShutdown:	
  9381                           ; 0 bytes @ 0x4
  9382                           
  9383  0024                     ??_Mrf49xaReboot:	
  9384                           ; 0 bytes @ 0x4
  9385                           
  9386  0024                     ?_eepromRxBytes:	
  9387                           ; 0 bytes @ 0x4
  9388                           
  9389  0024                     ?_eepromTxBytes:	
  9390                           ; 0 bytes @ 0x4
  9391                           
  9392  0024                     ?_Mcp9800Read:	
  9393                           ; 0 bytes @ 0x4
  9394                           
  9395  0024                     Mcp9800Start@resolution:	
  9396                           ; 2 bytes @ 0x4
  9397                           
  9398  0024                     Mrf49xaTxPacket@i:	
  9399                           ; 1 bytes @ 0x4
  9400                           
  9401  0024                     memcpy@s:	
  9402                           ; 1 bytes @ 0x4
  9403                           
  9404  0024                     eepromRxBytes@address:	
  9405                           ; 1 bytes @ 0x4
  9406                           
  9407  0024                     eepromTxBytes@address:	
  9408                           ; 2 bytes @ 0x4
  9409                           
  9410                           
  9411                           ; 2 bytes @ 0x4
  9412  0024                     	ds	1
  9413  0025                     AdcSample@ch:	
  9414  0025                     Mrf49xaTxPacket@packet:	
  9415                           ; 1 bytes @ 0x5
  9416                           
  9417  0025                     Mrf49xaServe@data:	
  9418                           ; 1 bytes @ 0x5
  9419                           
  9420  0025                     memcpy@d1:	
  9421                           ; 1 bytes @ 0x5
  9422                           
  9423                           
  9424                           ; 1 bytes @ 0x5
  9425  0025                     	ds	1
  9426  0026                     ??_Mcp9800Read:	
  9427  0026                     ??_Mrf49xaInit:	
  9428                           ; 0 bytes @ 0x6
  9429                           
  9430  0026                     ??_Mrf49xaTxAck:	
  9431                           ; 0 bytes @ 0x6
  9432                           
  9433  0026                     ??_handleCfgRead:	
  9434                           ; 0 bytes @ 0x6
  9435                           
  9436  0026                     ??_handleCfgWrite:	
  9437                           ; 0 bytes @ 0x6
  9438                           
  9439  0026                     ??_RfSendPowerState:	
  9440                           ; 0 bytes @ 0x6
  9441                           
  9442  0026                     ?_RfSendSampleWeatherNode:	
  9443                           ; 0 bytes @ 0x6
  9444                           
  9445  0026                     Mcp9800Read@tempH:	
  9446                           ; 0 bytes @ 0x6
  9447                           
  9448  0026                     Mrf49xaInit@k:	
  9449                           ; 1 bytes @ 0x6
  9450                           
  9451  0026                     Mrf49xaTxAck@packet:	
  9452                           ; 1 bytes @ 0x6
  9453                           
  9454  0026                     eepromRxBytes@data:	
  9455                           ; 1 bytes @ 0x6
  9456                           
  9457  0026                     eepromTxBytes@data:	
  9458                           ; 1 bytes @ 0x6
  9459                           
  9460  0026                     handleCfgRead@nrOfBytes:	
  9461                           ; 1 bytes @ 0x6
  9462                           
  9463  0026                     handleCfgWrite@nrOfBytes:	
  9464                           ; 1 bytes @ 0x6
  9465                           
  9466  0026                     RfSendPowerState@s:	
  9467                           ; 1 bytes @ 0x6
  9468                           
  9469  0026                     RfSendSampleWeatherNode@temperature:	
  9470                           ; 2 bytes @ 0x6
  9471                           
  9472                           
  9473                           ; 2 bytes @ 0x6
  9474  0026                     	ds	1
  9475  0027                     ??_PwrRfInit:	
  9476  0027                     Mcp9800Read@tempL:	
  9477                           ; 0 bytes @ 0x7
  9478                           
  9479  0027                     eepromRxBytes@size:	
  9480                           ; 1 bytes @ 0x7
  9481                           
  9482  0027                     eepromTxBytes@size:	
  9483                           ; 1 bytes @ 0x7
  9484                           
  9485  0027                     handleCfgRead@index:	
  9486                           ; 1 bytes @ 0x7
  9487                           
  9488  0027                     handleCfgWrite@index:	
  9489                           ; 1 bytes @ 0x7
  9490                           
  9491                           
  9492                           ; 1 bytes @ 0x7
  9493  0027                     	ds	1
  9494  0028                     ??_CfgSave:	
  9495  0028                     ??_CfgLoad:	
  9496                           ; 0 bytes @ 0x8
  9497                           
  9498  0028                     ??_eepromRxBytes:	
  9499                           ; 0 bytes @ 0x8
  9500                           
  9501  0028                     ??_eepromTxBytes:	
  9502                           ; 0 bytes @ 0x8
  9503                           
  9504  0028                     ??_handleFwCmd:	
  9505                           ; 0 bytes @ 0x8
  9506                           
  9507  0028                     ??_handleCfgCmd:	
  9508                           ; 0 bytes @ 0x8
  9509                           
  9510  0028                     handleFwCmd@packet:	
  9511                           ; 0 bytes @ 0x8
  9512                           
  9513  0028                     handleCfgRead@packet:	
  9514                           ; 1 bytes @ 0x8
  9515                           
  9516  0028                     handleCfgWrite@packet:	
  9517                           ; 1 bytes @ 0x8
  9518                           
  9519  0028                     handleCfgCmd@packet:	
  9520                           ; 1 bytes @ 0x8
  9521                           
  9522  0028                     RfSendPowerState@packet:	
  9523                           ; 1 bytes @ 0x8
  9524                           
  9525  0028                     RfSendSampleWeatherNode@humidity:	
  9526                           ; 1 bytes @ 0x8
  9527                           
  9528                           
  9529                           ; 2 bytes @ 0x8
  9530  0028                     	ds	1
  9531  0029                     ??_HandlePacket:	
  9532                           
  9533                           ; 0 bytes @ 0x9
  9534  0029                     	ds	1
  9535  002A                     ??_RfSendSampleWeatherNode:	
  9536  002A                     HandlePacket@response:	
  9537                           ; 0 bytes @ 0xA
  9538                           
  9539  002A                     RfSendSampleWeatherNode@packet:	
  9540                           ; 1 bytes @ 0xA
  9541                           
  9542                           
  9543                           ; 1 bytes @ 0xA
  9544  002A                     	ds	1
  9545  002B                     HandlePacket@packet:	
  9546                           
  9547                           ; 1 bytes @ 0xB
  9548  002B                     	ds	1
  9549  002C                     ??_Mrf49xaTick:	
  9550                           
  9551                           ; 0 bytes @ 0xC
  9552  002C                     	ds	1
  9553  002D                     Mrf49xaTick@timeout:	
  9554                           
  9555                           ; 1 bytes @ 0xD
  9556  002D                     	ds	1
  9557  002E                     Mrf49xaTick@packet:	
  9558                           
  9559                           ; 1 bytes @ 0xE
  9560  002E                     	ds	1
  9561  002F                     ??_main:	
  9562  002F                     main@humidity:	
  9563                           ; 0 bytes @ 0xF
  9564                           
  9565                           
  9566                           ; 2 bytes @ 0xF
  9567  002F                     	ds	2
  9568  0031                     main@temperature:	
  9569                           
  9570                           ; 2 bytes @ 0x11
  9571  0031                     	ds	2
  9572                           
  9573                           	psect	text11
  9574  0000                     __ptext11:	
  9575 ;; *************** function _AdcGetResult *****************
  9576 ;; Defined at:
  9577 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;		None
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;		None
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  2    0[BANK0 ] unsigned int 
  9584 ;; Registers used:
  9585 ;;		wreg
  9586 ;; Tracked objects:
  9587 ;;		On entry : 1F/1
  9588 ;;		On exit  : 1F/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9591 ;;      Params:         0       2       0       0
  9592 ;;      Locals:         0       0       0       0
  9593 ;;      Temps:          0       0       0       0
  9594 ;;      Totals:         0       2       0       0
  9595 ;;Total ram usage:        2 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    5
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_AdcSample
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605  0000                     _AdcGetResult:	
  9606                           ;psect for function _AdcGetResult
  9607                           
  9608  0000                     __end_of_AdcGetResult:	
  9609                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9610                           
  9611                           ;incstack = 0
  9612                           ; Regs used in _AdcGetResult: [wreg]
  9613                           
  9614                           
  9615                           	psect	intentry
  9616  0004                     __pintentry:	
  9617 ;; *************** function _extInt *****************
  9618 ;; Defined at:
  9619 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;		None
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;  ofw             1    7[COMMON] unsigned char 
  9624 ;; Return value:  Size  Location     Type
  9625 ;;		None               void
  9626 ;; Registers used:
  9627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 1F/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9633 ;;      Params:         0       0       0       0
  9634 ;;      Locals:         1       0       0       0
  9635 ;;      Temps:          1       0       0       0
  9636 ;;      Totals:         2       0       0       0
  9637 ;;Total ram usage:        2 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    4
  9640 ;; This function calls:
  9641 ;;		_ExtIntDeinit
  9642 ;;		i1_Mrf49xaNeedsReset
  9643 ;;		i1_Mrf49xaServe
  9644 ;; This function is called by:
  9645 ;;		Interrupt level 1
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649  0004                     _extInt:	
  9650                           
  9651                           ;incstack = 0
  9652                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9653  0004  3180               	pagesel	$
  9654  0005  0020               	movlb	0	; select bank0
  9655  0006  087F               	movf	127,w
  9656  0007  00F6               	movwf	??_extInt
  9657                           
  9658                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  9659  0008  1C8B               	btfss	11,1	;volatile
  9660  0009  281C               	goto	i1l142
  9661                           
  9662                           ;interrupt.c: 39: {
  9663                           ;interrupt.c: 40: uint8_t ofw = 0;
  9664  000A  01F7               	clrf	extInt@ofw
  9665  000B                     i1l3576:	
  9666                           ;interrupt.c: 41: while (!Mrf49xaServe())
  9667                           
  9668  000B  3180  202E  3180   	fcall	i1_Mrf49xaServe
  9669  000E  3A00               	xorlw	0
  9670  000F  1D03               	btfss	3,2
  9671  0010  281B               	goto	i1l141
  9672                           
  9673                           ;interrupt.c: 42: {
  9674                           ;interrupt.c: 43: ofw++;
  9675  0011  0AF7               	incf	extInt@ofw,f
  9676                           
  9677                           ;interrupt.c: 44: if (ofw == 255)
  9678  0012  0877               	movf	extInt@ofw,w
  9679  0013  3AFF               	xorlw	255
  9680  0014  1D03               	skipz
  9681  0015  280B               	goto	i1l3576
  9682                           
  9683                           ;interrupt.c: 45: {
  9684                           ;interrupt.c: 46: ExtIntDeinit();
  9685  0016  3182  2255  3180   	fcall	_ExtIntDeinit
  9686                           
  9687                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  9688  0019  3181  2142         	fcall	i1_Mrf49xaNeedsReset
  9689  001B                     i1l141:	
  9690                           ;interrupt.c: 48: break;
  9691                           
  9692                           
  9693                           ;interrupt.c: 49: }
  9694                           ;interrupt.c: 50: }
  9695                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  9696  001B  108B               	bcf	11,1	;volatile
  9697  001C                     i1l142:	
  9698  001C  0876               	movf	??_extInt,w
  9699  001D  0020               	movlb	0	; select bank0
  9700  001E  00FF               	movwf	127
  9701  001F  0009               	retfie
  9702  0020                     __end_of_extInt:	
  9703                           
  9704                           	psect	text74
  9705  0022                     __ptext74:	
  9706 ;; *************** function i1_Mrf49RxCmd *****************
  9707 ;; Defined at:
  9708 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  cmd             1    wreg     unsigned char 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;  cmd             1    1[COMMON] unsigned char 
  9713 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;                  1    wreg      unsigned char 
  9716 ;; Registers used:
  9717 ;;		wreg, status,2, status,0, pclath, cstack
  9718 ;; Tracked objects:
  9719 ;;		On entry : 1E/1
  9720 ;;		On exit  : 1F/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9723 ;;      Params:         0       0       0       0
  9724 ;;      Locals:         2       0       0       0
  9725 ;;      Temps:          0       0       0       0
  9726 ;;      Totals:         2       0       0       0
  9727 ;;Total ram usage:        2 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    1
  9730 ;; This function calls:
  9731 ;;		i1_Mrf49SpiRx
  9732 ;;		i1_Mrf49SpiTx
  9733 ;; This function is called by:
  9734 ;;		i1_Mrf49RxByte
  9735 ;; This function uses a non-reentrant model
  9736 ;;
  9737                           
  9738                           
  9739                           ;psect for function i1_Mrf49RxCmd
  9740  0022                     i1_Mrf49RxCmd:	
  9741                           
  9742                           ;incstack = 0
  9743                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  9744                           ;i1Mrf49RxCmd@cmd stored from wreg
  9745  0022  00F1               	movwf	i1Mrf49RxCmd@cmd
  9746                           
  9747                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  9748  0023  0020               	movlb	0	; select bank0
  9749  0024  130E               	bcf	14,6	;volatile
  9750                           
  9751                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  9752  0025  0871               	movf	i1Mrf49RxCmd@cmd,w
  9753  0026  214F  3180         	fcall	i1_Mrf49SpiTx
  9754                           
  9755                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  9756  0028  21BE               	fcall	i1_Mrf49SpiRx
  9757  0029  00F2               	movwf	i1Mrf49RxCmd@val
  9758                           
  9759                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  9760  002A  0020               	movlb	0	; select bank0
  9761  002B  170E               	bsf	14,6	;volatile
  9762                           
  9763                           ;mrf49xa_cmd.c: 27: return val;
  9764  002C  0872               	movf	i1Mrf49RxCmd@val,w
  9765  002D  0008               	return
  9766  002E                     __end_ofi1_Mrf49RxCmd:	
  9767  002E                     __ptext67:	
  9768 ;; *************** function i1_Mrf49xaServe *****************
  9769 ;; Defined at:
  9770 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  9775 ;; Return value:  Size  Location     Type
  9776 ;;                  1    wreg      unsigned char 
  9777 ;; Registers used:
  9778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 1E/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9784 ;;      Params:         0       0       0       0
  9785 ;;      Locals:         1       0       0       0
  9786 ;;      Temps:          1       0       0       0
  9787 ;;      Totals:         2       0       0       0
  9788 ;;Total ram usage:        2 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    3
  9791 ;; This function calls:
  9792 ;;		i1_Mrf49RxByte
  9793 ;;		i1_Mrf49RxSts
  9794 ;;		i1_Mrf49TxByte
  9795 ;;		i1_Mrf49xaModeRx
  9796 ;;		i1_Mrf49xaNeedsReset
  9797 ;; This function is called by:
  9798 ;;		_extInt
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           
  9803                           ;psect for function i1_Mrf49xaServe
  9804  002E                     i1_Mrf49xaServe:	
  9805                           
  9806                           ;mrf49xa_data.c: 10: uint8_t data;
  9807                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9811  002E  0021               	movlb	1	; select bank1
  9812  002F  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  9813  0030  1903               	btfsc	3,2
  9814                           
  9815                           ;mrf49xa_data.c: 13: return 0;
  9816  0031  3400               	retlw	0
  9817                           
  9818                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  9819  0032  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  9820  0033  3400               	retlw	0
  9821                           
  9822                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  9823  0034  21B1  3180         	fcall	i1_Mrf49RxSts
  9824                           
  9825                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  9826  0036  083D               	movf	_mrf49Status,w
  9827  0037  3AFF               	xorlw	255
  9828  0038  1D03               	skipz
  9829  0039  283E               	goto	i1l441
  9830  003A  083E               	movf	_mrf49Status+1,w
  9831  003B  3AFF               	xorlw	255
  9832  003C  1903               	btfsc	3,2
  9833  003D  3400               	retlw	0
  9834  003E                     i1l441:	
  9835                           ;mrf49xa_data.c: 26: {
  9836                           
  9837                           
  9838                           ;mrf49xa_data.c: 28: }
  9839                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  9840  003E  1ABD               	btfsc	_mrf49Status,5
  9841  003F  284D               	goto	i1l3478
  9842  0040  285C               	goto	i1l442
  9843  0041                     i1l3472:	
  9844                           
  9845                           ;mrf49xa_data.c: 36: case RECV_DATA:
  9846                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  9847  0041  211B  3180         	fcall	i1_Mrf49RxByte
  9848  0043  00F5               	movwf	i1Mrf49xaServe@data
  9849                           
  9850                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  9851  0044  211B  3180         	fcall	i1_Mrf49RxByte
  9852  0046  00F5               	movwf	i1Mrf49xaServe@data
  9853                           
  9854                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  9855  0047  211E  3180         	fcall	i1_Mrf49xaModeRx
  9856                           
  9857                           ;mrf49xa_data.c: 47: break;
  9858  0049  285C               	goto	i1l442
  9859  004A                     i1l3474:	
  9860                           
  9861                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  9862  004A  2142  3180         	fcall	i1_Mrf49xaNeedsReset
  9863                           
  9864                           ;mrf49xa_data.c: 51: break;
  9865  004C  285C               	goto	i1l442
  9866  004D                     i1l3478:	
  9867  004D  0021               	movlb	1	; select bank1
  9868  004E  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  9869                           
  9870                           ; Switch size 1, requested type "space"
  9871                           ; Number of cases is 4, Range of values is 0 to 3
  9872                           ; switch strategies available:
  9873                           ; Name         Instructions Cycles
  9874                           ; simple_byte           13     7 (average)
  9875                           ; direct_byte           14     6 (fixed)
  9876                           ; jumptable            260     6 (fixed)
  9877                           ;	Chosen strategy is simple_byte
  9878  004F  3A00               	xorlw	0	; case 0
  9879  0050  1903               	skipnz
  9880  0051  284A               	goto	i1l3474
  9881  0052  3A01               	xorlw	1	; case 1
  9882  0053  1903               	skipnz
  9883  0054  2841               	goto	i1l3472
  9884  0055  3A03               	xorlw	3	; case 2
  9885  0056  1903               	skipnz
  9886  0057  2841               	goto	i1l3472
  9887  0058  3A01               	xorlw	1	; case 3
  9888  0059  1903               	skipnz
  9889  005A  285C               	goto	i1l442
  9890  005B  285C               	goto	i1l442
  9891  005C                     i1l442:	
  9892                           
  9893                           ;mrf49xa_data.c: 60: }
  9894                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  9895  005C  0020               	movlb	0	; select bank0
  9896  005D  1BBD               	btfsc	_mrf49Status,7
  9897  005E  2902               	goto	i1l3560
  9898  005F  2911               	goto	i1l3562
  9899  0060                     i1l3482:	
  9900                           
  9901                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  9902  0060  2142  3180         	fcall	i1_Mrf49xaNeedsReset
  9903                           
  9904                           ;mrf49xa_data.c: 76: break;
  9905  0062  2911               	goto	i1l3562
  9906  0063                     i1l3484:	
  9907                           
  9908                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  9909  0063  211B  3180         	fcall	i1_Mrf49RxByte
  9910  0065  00F5               	movwf	i1Mrf49xaServe@data
  9911                           
  9912                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9913  0066  1BBE               	btfsc	_mrf49Status+1,7
  9914  0067  286B               	goto	i1l3490
  9915  0068                     i1l3488:	
  9916                           
  9917                           ;mrf49xa_data.c: 84: {
  9918                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  9919  0068  211E  3180         	fcall	i1_Mrf49xaModeRx
  9920                           
  9921                           ;mrf49xa_data.c: 86: break;
  9922  006A  2911               	goto	i1l3562
  9923  006B                     i1l3490:	
  9924                           
  9925                           ;mrf49xa_data.c: 87: }
  9926                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  9927  006B  0021               	movlb	1	; select bank1
  9928  006C  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  9929  006D  1D03               	skipz
  9930  006E  2871               	goto	i1l3494
  9931  006F  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  9932  0070  2875               	goto	L5
  9933  0071                     i1l3494:	
  9934                           
  9935                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  9936  0071  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  9937  0072  1D03               	skipz
  9938  0073  2868               	goto	i1l3488
  9939  0074  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  9940  0075                     L5:	
  9941  0075  00A0               	movwf	_rfTrcvStatus^(0+128)
  9942                           
  9943                           ;mrf49xa_data.c: 97: }
  9944                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  9945  0076  0A20               	incf	_rfTrcvStatus^(0+128),w
  9946  0077  0086               	movwf	6
  9947  0078  0187               	clrf	7
  9948  0079  0875               	movf	i1Mrf49xaServe@data,w
  9949  007A  0081               	movwf	1
  9950                           
  9951                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  9952  007B  0820               	movf	_rfTrcvStatus^(0+128),w
  9953  007C  3E16               	addlw	22
  9954  007D  0086               	movwf	6
  9955  007E  0181               	clrf	1
  9956                           
  9957                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  9958  007F  0820               	movf	_rfTrcvStatus^(0+128),w
  9959  0080  0086               	movwf	6
  9960  0081  3004               	movlw	4
  9961  0082  0081               	movwf	1
  9962                           
  9963                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  9964  0083  3002               	movlw	2
  9965  0084  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  9966                           
  9967                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  9968  0085  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9969  0086  3980               	andlw	-128
  9970  0087  3801               	iorlw	1
  9971  0088  28B2               	goto	L6
  9972  0089                     i1l3510:	
  9973                           ;mrf49xa_data.c: 105: break;
  9974                           
  9975                           
  9976                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  9977  0089  211B  3180         	fcall	i1_Mrf49RxByte
  9978  008B  00F5               	movwf	i1Mrf49xaServe@data
  9979                           
  9980                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9981  008C  1BBE               	btfsc	_mrf49Status+1,7
  9982  008D  2894               	goto	i1l3518
  9983                           
  9984                           ;mrf49xa_data.c: 114: {
  9985                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9986  008E  0021               	movlb	1	; select bank1
  9987  008F  0820               	movf	_rfTrcvStatus^(0+128),w
  9988  0090  0086               	movwf	6
  9989  0091  3005               	movlw	5
  9990  0092  0187               	clrf	7
  9991  0093  28A5               	goto	L7
  9992  0094                     i1l3518:	
  9993                           
  9994                           ;mrf49xa_data.c: 118: }
  9995                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  9996  0094  0021               	movlb	1	; select bank1
  9997  0095  0A20               	incf	_rfTrcvStatus^(0+128),w
  9998  0096  0086               	movwf	6
  9999  0097  0187               	clrf	7
 10000  0098  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10001  0099  397F               	andlw	127
 10002  009A  0601               	xorwf	1,w
 10003  009B  1D03               	skipz
 10004  009C  28A7               	goto	i1l3524
 10005                           
 10006                           ;mrf49xa_data.c: 121: {
 10007                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
 10008  009D  0820               	movf	_rfTrcvStatus^(0+128),w
 10009  009E  3E16               	addlw	22
 10010  009F  0086               	movwf	6
 10011  00A0  0875               	movf	i1Mrf49xaServe@data,w
 10012  00A1  0081               	movwf	1
 10013                           
 10014                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
 10015  00A2  0820               	movf	_rfTrcvStatus^(0+128),w
 10016  00A3  0086               	movwf	6
 10017  00A4  3005               	movlw	5
 10018  00A5                     L7:	
 10019  00A5  0081               	movwf	1
 10020  00A6  2868               	goto	i1l3488
 10021  00A7                     i1l3524:	
 10022                           
 10023                           ;mrf49xa_data.c: 135: else
 10024                           ;mrf49xa_data.c: 136: {
 10025                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
 10026  00A7  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10027  00A8  397F               	andlw	127
 10028  00A9  0720               	addwf	_rfTrcvStatus^(0+128),w
 10029  00AA  00F4               	movwf	??i1_Mrf49xaServe
 10030  00AB  0A74               	incf	??i1_Mrf49xaServe,w
 10031  00AC  0086               	movwf	6
 10032  00AD  0187               	clrf	7
 10033  00AE  0875               	movf	i1Mrf49xaServe@data,w
 10034  00AF  0081               	movwf	1
 10035  00B0  2201  3180         	fcall	PL14	;call to abstracted procedure
 10036  00B2                     L6:	
 10037  00B2  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10038  00B3  2911               	goto	i1l3562
 10039  00B4                     i1l3528:	
 10040                           
 10041                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
 10042  00B4  2201  3180         	fcall	PL14	;call to abstracted procedure
 10043  00B6  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10044                           
 10045                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
 10046  00B7  397F               	andlw	127
 10047  00B8  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
 10048  00B9  1D03               	skipz
 10049  00BA  28F0               	goto	i1l3556
 10050                           
 10051                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
 10052  00BB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10053  00BC  3980               	andlw	-128
 10054  00BD  3831               	iorlw	49
 10055  00BE  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10056  00BF  28F0               	goto	i1l3556
 10057  00C0                     i1l3532:	
 10058                           
 10059                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
 10060  00C0  302D               	movlw	45
 10061  00C1  2116  3180         	fcall	i1_Mrf49TxByte
 10062                           
 10063                           ;mrf49xa_data.c: 152: break;
 10064  00C3  2911               	goto	i1l3562
 10065  00C4                     i1l3534:	
 10066                           
 10067                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
 10068  00C4  30D4               	movlw	212
 10069  00C5  2116  3180         	fcall	i1_Mrf49TxByte
 10070                           
 10071                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
 10072  00C7  307F               	movlw	127
 10073  00C8  0021               	movlb	1	; select bank1
 10074  00C9  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
 10075                           
 10076                           ;mrf49xa_data.c: 157: break;
 10077  00CA  2911               	goto	i1l3562
 10078  00CB                     i1l3538:	
 10079                           
 10080                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
 10081  00CB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10082  00CC  397F               	andlw	127
 10083  00CD  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
 10084  00CE  0086               	movwf	6
 10085  00CF  0187               	clrf	7
 10086  00D0  0801               	movf	1,w
 10087  00D1  2116  3180         	fcall	i1_Mrf49TxByte
 10088                           
 10089                           ;mrf49xa_data.c: 162: break;
 10090  00D3  2911               	goto	i1l3562
 10091  00D4                     i1l3540:	
 10092                           
 10093                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
 10094  00D4  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
 10095  00D5  2116  3180         	fcall	i1_Mrf49TxByte
 10096                           
 10097                           ;mrf49xa_data.c: 166: break;
 10098  00D7  2911               	goto	i1l3562
 10099  00D8                     i1l3542:	
 10100                           
 10101                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
 10102  00D8  3000               	movlw	0
 10103  00D9  2116  3180         	fcall	i1_Mrf49TxByte
 10104                           
 10105                           ;mrf49xa_data.c: 170: break;
 10106  00DB  2911               	goto	i1l3562
 10107  00DC                     i1l3544:	
 10108                           
 10109                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
 10110  00DC  3000               	movlw	0
 10111  00DD  2116  3180         	fcall	i1_Mrf49TxByte
 10112                           
 10113                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
 10114  00DF  211E  3180         	fcall	i1_Mrf49xaModeRx
 10115                           
 10116                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
 10117  00E1  30F0               	movlw	-16
 10118  00E2  0021               	movlb	1	; select bank1
 10119  00E3  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
 10120                           
 10121                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
 10122  00E4  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
 10123  00E5  0C89               	rrf	9,f
 10124  00E6  0C89               	rrf	9,f
 10125  00E7  3903               	andlw	3
 10126  00E8  3A01               	xorlw	1
 10127  00E9  1D03               	skipz
 10128  00EA  28EE               	goto	i1l3552
 10129                           
 10130                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
 10131  00EB  3003               	movlw	3
 10132  00EC  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
 10133  00ED  2911               	goto	i1l3562
 10134  00EE                     i1l3552:	
 10135                           
 10136                           ;mrf49xa_data.c: 180: else
 10137                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
 10138  00EE  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
 10139  00EF  2911               	goto	i1l3562
 10140  00F0                     i1l3556:	
 10141  00F0  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10142  00F1  397F               	andlw	127
 10143                           
 10144                           ; Switch size 1, requested type "space"
 10145                           ; Number of cases is 5, Range of values is 49 to 101
 10146                           ; switch strategies available:
 10147                           ; Name         Instructions Cycles
 10148                           ; simple_byte           16     9 (average)
 10149                           ; direct_byte          115     9 (fixed)
 10150                           ; jumptable            263     9 (fixed)
 10151                           ;	Chosen strategy is simple_byte
 10152  00F2  3A31               	xorlw	49	; case 49
 10153  00F3  1903               	skipnz
 10154  00F4  28D4               	goto	i1l3540
 10155  00F5  3A03               	xorlw	3	; case 50
 10156  00F6  1903               	skipnz
 10157  00F7  28D8               	goto	i1l3542
 10158  00F8  3A01               	xorlw	1	; case 51
 10159  00F9  1903               	skipnz
 10160  00FA  28DC               	goto	i1l3544
 10161  00FB  3A57               	xorlw	87	; case 100
 10162  00FC  1903               	skipnz
 10163  00FD  28C0               	goto	i1l3532
 10164  00FE  3A01               	xorlw	1	; case 101
 10165  00FF  1903               	skipnz
 10166  0100  28C4               	goto	i1l3534
 10167  0101  28CB               	goto	i1l3538
 10168  0102                     i1l3560:	
 10169  0102  0021               	movlb	1	; select bank1
 10170  0103  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
 10171                           
 10172                           ; Switch size 1, requested type "space"
 10173                           ; Number of cases is 4, Range of values is 0 to 3
 10174                           ; switch strategies available:
 10175                           ; Name         Instructions Cycles
 10176                           ; simple_byte           13     7 (average)
 10177                           ; direct_byte           14     6 (fixed)
 10178                           ; jumptable            260     6 (fixed)
 10179                           ;	Chosen strategy is simple_byte
 10180  0104  3A00               	xorlw	0	; case 0
 10181  0105  1903               	skipnz
 10182  0106  2860               	goto	i1l3482
 10183  0107  3A01               	xorlw	1	; case 1
 10184  0108  1903               	skipnz
 10185  0109  2863               	goto	i1l3484
 10186  010A  3A03               	xorlw	3	; case 2
 10187  010B  1903               	skipnz
 10188  010C  2889               	goto	i1l3510
 10189  010D  3A01               	xorlw	1	; case 3
 10190  010E  1903               	skipnz
 10191  010F  28B4               	goto	i1l3528
 10192  0110  2911               	goto	i1l3562
 10193  0111                     i1l3562:	
 10194                           
 10195                           ;mrf49xa_data.c: 188: }
 10196                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
 10197  0111  0020               	movlb	0	; select bank0
 10198  0112  0C0C               	rrf	12,w	;volatile
 10199  0113  0C89               	rrf	9,f
 10200  0114  3901               	andlw	1
 10201  0115  0008               	return
 10202  0116                     __end_ofi1_Mrf49xaServe:	
 10203  0116                     __ptext70:	
 10204 ;; *************** function i1_Mrf49TxByte *****************
 10205 ;; Defined at:
 10206 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  byte            1    wreg     unsigned char 
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;  byte            1    3[COMMON] unsigned char 
 10211 ;; Return value:  Size  Location     Type
 10212 ;;		None               void
 10213 ;; Registers used:
 10214 ;;		wreg, status,2, status,0, pclath, cstack
 10215 ;; Tracked objects:
 10216 ;;		On entry : 1E/1
 10217 ;;		On exit  : 1F/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10220 ;;      Params:         0       0       0       0
 10221 ;;      Locals:         1       0       0       0
 10222 ;;      Temps:          0       0       0       0
 10223 ;;      Totals:         1       0       0       0
 10224 ;;Total ram usage:        1 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; Hardware stack levels required when called:    2
 10227 ;; This function calls:
 10228 ;;		i1_Mrf49TxCmd
 10229 ;; This function is called by:
 10230 ;;		i1_Mrf49xaServe
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function i1_Mrf49TxByte
 10236  0116                     i1_Mrf49TxByte:	
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10240                           ;i1Mrf49TxByte@byte stored from wreg
 10241  0116  00F3               	movwf	i1Mrf49TxByte@byte
 10242                           
 10243                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10244  0117  00F1               	movwf	i1Mrf49TxCmd@val
 10245  0118  30B8               	movlw	184
 10246  0119  2145               	fcall	i1_Mrf49TxCmd
 10247  011A  0008               	return
 10248  011B                     __end_ofi1_Mrf49TxByte:	
 10249  011B                     __ptext73:	
 10250 ;; *************** function i1_Mrf49RxByte *****************
 10251 ;; Defined at:
 10252 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      unsigned char 
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, pclath, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 1E/1
 10263 ;;		On exit  : 1F/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10266 ;;      Params:         0       0       0       0
 10267 ;;      Locals:         0       0       0       0
 10268 ;;      Temps:          0       0       0       0
 10269 ;;      Totals:         0       0       0       0
 10270 ;;Total ram usage:        0 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    2
 10273 ;; This function calls:
 10274 ;;		i1_Mrf49RxCmd
 10275 ;; This function is called by:
 10276 ;;		i1_Mrf49xaServe
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           
 10281                           ;psect for function i1_Mrf49RxByte
 10282  011B                     i1_Mrf49RxByte:	
 10283                           
 10284                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10285                           
 10286                           ;incstack = 0
 10287                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10288  011B  30B0               	movlw	176
 10289  011C  2022               	fcall	i1_Mrf49RxCmd
 10290  011D  0008               	return
 10291  011E                     __end_ofi1_Mrf49RxByte:	
 10292  011E                     __ptext69:	
 10293 ;; *************** function i1_Mrf49xaModeRx *****************
 10294 ;; Defined at:
 10295 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;		None
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10300 ;; Return value:  Size  Location     Type
 10301 ;;		None               void
 10302 ;; Registers used:
 10303 ;;		wreg, status,2, status,0, pclath, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 1E/0
 10306 ;;		On exit  : 1F/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10309 ;;      Params:         0       0       0       0
 10310 ;;      Locals:         1       0       0       0
 10311 ;;      Temps:          0       0       0       0
 10312 ;;      Totals:         1       0       0       0
 10313 ;;Total ram usage:        1 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    2
 10316 ;; This function calls:
 10317 ;;		i1_Mrf49TxCmd
 10318 ;; This function is called by:
 10319 ;;		i1_Mrf49xaServe
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           
 10324                           ;psect for function i1_Mrf49xaModeRx
 10325  011E                     i1_Mrf49xaModeRx:	
 10326  011E  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10327                           
 10328                           ;mrf49xa.c: 101: UI08_t k;
 10329                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
 10330                           
 10331                           ;incstack = 0
 10332                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10333  011F  01F3               	clrf	i1Mrf49xaModeRx@k
 10334  0120  3182               	movlp	high __stringtab
 10335  0121  000A               	callw
 10336  0122  3180               	pagesel	$	;select current page
 10337  0123  3800               	iorlw	0
 10338  0124  1903               	btfsc	3,2
 10339  0125  293A               	goto	i1l211
 10340  0126                     i1l3238:	
 10341  0126  3573               	lslf	i1Mrf49xaModeRx@k,w
 10342  0127  3E30               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10343  0128  3182               	movlp	high __stringtab
 10344  0129  000A               	callw
 10345  012A  00F1               	movwf	i1Mrf49TxCmd@val
 10346  012B  3573               	lslf	i1Mrf49xaModeRx@k,w
 10347  012C  3E2F               	addlw	low (_mrfRegset_Rx| (0+32768))
 10348  012D  3182               	movlp	high __stringtab
 10349  012E  000A               	callw
 10350  012F  3180               	pagesel	$	;select current page
 10351  0130  3181  2145         	fcall	i1_Mrf49TxCmd
 10352  0132  300C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10353  0133  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10354  0134  3182               	movlp	high __stringtab
 10355  0135  000A               	callw
 10356  0136  3180               	pagesel	$	;select current page
 10357  0137  0273               	subwf	i1Mrf49xaModeRx@k,w
 10358  0138  1C03               	skipc
 10359  0139  2926               	goto	i1l3238
 10360  013A                     i1l211:	
 10361                           
 10362                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
 10363  013A  0021               	movlb	1	; select bank1
 10364  013B  3080               	movlw	-128
 10365  013C  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
 10366  013D  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
 10367                           
 10368                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
 10369  013E  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
 10370                           
 10371                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
 10372  013F  0020               	movlb	0	; select bank0
 10373  0140  13BD               	bcf	_mrf49Status,7
 10374  0141  0008               	return
 10375  0142                     __end_ofi1_Mrf49xaModeRx:	
 10376  0142                     __ptext68:	
 10377 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10378 ;; Defined at:
 10379 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;		None
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;		None
 10384 ;; Return value:  Size  Location     Type
 10385 ;;		None               void
 10386 ;; Registers used:
 10387 ;;		None
 10388 ;; Tracked objects:
 10389 ;;		On entry : 1E/0
 10390 ;;		On exit  : 1F/1
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10393 ;;      Params:         0       0       0       0
 10394 ;;      Locals:         0       0       0       0
 10395 ;;      Temps:          0       0       0       0
 10396 ;;      Totals:         0       0       0       0
 10397 ;;Total ram usage:        0 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; This function calls:
 10400 ;;		Nothing
 10401 ;; This function is called by:
 10402 ;;		_extInt
 10403 ;;		i1_Mrf49xaServe
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           
 10408                           ;psect for function i1_Mrf49xaNeedsReset
 10409  0142                     i1_Mrf49xaNeedsReset:	
 10410                           
 10411                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
 10412                           
 10413                           ;incstack = 0
 10414                           ; Regs used in i1_Mrf49xaNeedsReset: []
 10415  0142  0021               	movlb	1	; select bank1
 10416  0143  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
 10417  0144  0008               	return
 10418  0145                     __end_ofi1_Mrf49xaNeedsReset:	
 10419  0145                     __ptext71:	
 10420 ;; *************** function i1_Mrf49TxCmd *****************
 10421 ;; Defined at:
 10422 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  cmd             1    wreg     unsigned char 
 10425 ;;  val             1    1[COMMON] unsigned char 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  cmd             1    2[COMMON] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg, status,2, status,0, pclath, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 1E/0
 10434 ;;		On exit  : 1F/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10437 ;;      Params:         1       0       0       0
 10438 ;;      Locals:         1       0       0       0
 10439 ;;      Temps:          0       0       0       0
 10440 ;;      Totals:         2       0       0       0
 10441 ;;Total ram usage:        2 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    1
 10444 ;; This function calls:
 10445 ;;		i1_Mrf49SpiTx
 10446 ;; This function is called by:
 10447 ;;		i1_Mrf49xaModeRx
 10448 ;;		i1_Mrf49TxByte
 10449 ;; This function uses a non-reentrant model
 10450 ;;
 10451                           
 10452                           
 10453                           ;psect for function i1_Mrf49TxCmd
 10454  0145                     i1_Mrf49TxCmd:	
 10455                           
 10456                           ;incstack = 0
 10457                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 10458                           ;i1Mrf49TxCmd@cmd stored from wreg
 10459  0145  00F2               	movwf	i1Mrf49TxCmd@cmd
 10460                           
 10461                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 10462  0146  0020               	movlb	0	; select bank0
 10463  0147  130E               	bcf	14,6	;volatile
 10464                           
 10465                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 10466  0148  0872               	movf	i1Mrf49TxCmd@cmd,w
 10467  0149  214F  3180         	fcall	i1_Mrf49SpiTx
 10468                           
 10469                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 10470  014B  0871               	movf	i1Mrf49TxCmd@val,w
 10471  014C  214F               	fcall	i1_Mrf49SpiTx
 10472                           
 10473                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 10474  014D  170E               	bsf	14,6	;volatile
 10475  014E  0008               	return
 10476  014F                     __end_ofi1_Mrf49TxCmd:	
 10477  014F                     __ptext75:	
 10478 ;; *************** function i1_Mrf49SpiTx *****************
 10479 ;; Defined at:
 10480 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  byte            1    wreg     unsigned char 
 10483 ;; Auto vars:     Size  Location     Type
 10484 ;;  byte            1    0[COMMON] unsigned char 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;		None               void
 10487 ;; Registers used:
 10488 ;;		wreg
 10489 ;; Tracked objects:
 10490 ;;		On entry : 1F/0
 10491 ;;		On exit  : 1F/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10494 ;;      Params:         0       0       0       0
 10495 ;;      Locals:         1       0       0       0
 10496 ;;      Temps:          0       0       0       0
 10497 ;;      Totals:         1       0       0       0
 10498 ;;Total ram usage:        1 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; This function calls:
 10501 ;;		Nothing
 10502 ;; This function is called by:
 10503 ;;		i1_Mrf49TxCmd
 10504 ;;		i1_Mrf49RxCmd
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           
 10509                           ;psect for function i1_Mrf49SpiTx
 10510  014F                     i1_Mrf49SpiTx:	
 10511                           
 10512                           ;incstack = 0
 10513                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 10514                           ;i1Mrf49SpiTx@byte stored from wreg
 10515  014F  00F0               	movwf	i1Mrf49SpiTx@byte
 10516                           
 10517                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 10518  0150  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 10519  0151  2954               	goto	i1l255
 10520  0152  178D               	bsf	13,7	;volatile
 10521  0153  2955               	goto	i1l256
 10522  0154                     i1l255:	
 10523  0154  138D               	bcf	13,7	;volatile
 10524  0155                     i1l256:	
 10525  0155  0022               	movlb	2	; select bank2
 10526  0156  178E               	bsf	14,7	;volatile
 10527  0157  0000               	nop	;# 
 10528  0158  0022               	movlb	2	; select bank2
 10529  0159  138E               	bcf	14,7	;volatile
 10530  015A  1F70               	btfss	i1Mrf49SpiTx@byte,6
 10531  015B  295F               	goto	i1l259
 10532  015C  0020               	movlb	0	; select bank0
 10533  015D  178D               	bsf	13,7	;volatile
 10534  015E  2961               	goto	i1l260
 10535  015F                     i1l259:	
 10536  015F  0020               	movlb	0	; select bank0
 10537  0160  138D               	bcf	13,7	;volatile
 10538  0161                     i1l260:	
 10539  0161  0022               	movlb	2	; select bank2
 10540  0162  178E               	bsf	14,7	;volatile
 10541  0163  0000               	nop	;# 
 10542  0164  0022               	movlb	2	; select bank2
 10543  0165  138E               	bcf	14,7	;volatile
 10544  0166  1EF0               	btfss	i1Mrf49SpiTx@byte,5
 10545  0167  296B               	goto	i1l263
 10546  0168  0020               	movlb	0	; select bank0
 10547  0169  178D               	bsf	13,7	;volatile
 10548  016A  296D               	goto	i1l264
 10549  016B                     i1l263:	
 10550  016B  0020               	movlb	0	; select bank0
 10551  016C  138D               	bcf	13,7	;volatile
 10552  016D                     i1l264:	
 10553  016D  0022               	movlb	2	; select bank2
 10554  016E  178E               	bsf	14,7	;volatile
 10555  016F  0000               	nop	;# 
 10556  0170  0022               	movlb	2	; select bank2
 10557  0171  138E               	bcf	14,7	;volatile
 10558  0172  1E70               	btfss	i1Mrf49SpiTx@byte,4
 10559  0173  2977               	goto	i1l267
 10560  0174  0020               	movlb	0	; select bank0
 10561  0175  178D               	bsf	13,7	;volatile
 10562  0176  2979               	goto	i1l268
 10563  0177                     i1l267:	
 10564  0177  0020               	movlb	0	; select bank0
 10565  0178  138D               	bcf	13,7	;volatile
 10566  0179                     i1l268:	
 10567  0179  0022               	movlb	2	; select bank2
 10568  017A  178E               	bsf	14,7	;volatile
 10569  017B  0000               	nop	;# 
 10570  017C  0022               	movlb	2	; select bank2
 10571  017D  138E               	bcf	14,7	;volatile
 10572  017E  1DF0               	btfss	i1Mrf49SpiTx@byte,3
 10573  017F  2983               	goto	i1l271
 10574  0180  0020               	movlb	0	; select bank0
 10575  0181  178D               	bsf	13,7	;volatile
 10576  0182  2985               	goto	i1l272
 10577  0183                     i1l271:	
 10578  0183  0020               	movlb	0	; select bank0
 10579  0184  138D               	bcf	13,7	;volatile
 10580  0185                     i1l272:	
 10581  0185  0022               	movlb	2	; select bank2
 10582  0186  178E               	bsf	14,7	;volatile
 10583  0187  0000               	nop	;# 
 10584  0188  0022               	movlb	2	; select bank2
 10585  0189  138E               	bcf	14,7	;volatile
 10586  018A  1D70               	btfss	i1Mrf49SpiTx@byte,2
 10587  018B  298F               	goto	i1l275
 10588  018C  0020               	movlb	0	; select bank0
 10589  018D  178D               	bsf	13,7	;volatile
 10590  018E  2991               	goto	i1l276
 10591  018F                     i1l275:	
 10592  018F  0020               	movlb	0	; select bank0
 10593  0190  138D               	bcf	13,7	;volatile
 10594  0191                     i1l276:	
 10595  0191  0022               	movlb	2	; select bank2
 10596  0192  178E               	bsf	14,7	;volatile
 10597  0193  0000               	nop	;# 
 10598  0194  0022               	movlb	2	; select bank2
 10599  0195  138E               	bcf	14,7	;volatile
 10600  0196  1CF0               	btfss	i1Mrf49SpiTx@byte,1
 10601  0197  299B               	goto	i1l279
 10602  0198  0020               	movlb	0	; select bank0
 10603  0199  178D               	bsf	13,7	;volatile
 10604  019A  299D               	goto	i1l280
 10605  019B                     i1l279:	
 10606  019B  0020               	movlb	0	; select bank0
 10607  019C  138D               	bcf	13,7	;volatile
 10608  019D                     i1l280:	
 10609  019D  0022               	movlb	2	; select bank2
 10610  019E  178E               	bsf	14,7	;volatile
 10611  019F  0000               	nop	;# 
 10612  01A0  0022               	movlb	2	; select bank2
 10613  01A1  138E               	bcf	14,7	;volatile
 10614  01A2  1C70               	btfss	i1Mrf49SpiTx@byte,0
 10615  01A3  29A7               	goto	i1l283
 10616  01A4  0020               	movlb	0	; select bank0
 10617  01A5  178D               	bsf	13,7	;volatile
 10618  01A6  29A9               	goto	i1l284
 10619  01A7                     i1l283:	
 10620  01A7  0020               	movlb	0	; select bank0
 10621  01A8  138D               	bcf	13,7	;volatile
 10622  01A9                     i1l284:	
 10623  01A9  0022               	movlb	2	; select bank2
 10624  01AA  178E               	bsf	14,7	;volatile
 10625  01AB  0000               	nop	;# 
 10626  01AC  0022               	movlb	2	; select bank2
 10627  01AD  138E               	bcf	14,7	;volatile
 10628                           
 10629                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 10630  01AE  0020               	movlb	0	; select bank0
 10631  01AF  138D               	bcf	13,7	;volatile
 10632  01B0  0008               	return
 10633  01B1                     __end_ofi1_Mrf49SpiTx:	
 10634  01B1                     __ptext72:	
 10635 ;; *************** function i1_Mrf49RxSts *****************
 10636 ;; Defined at:
 10637 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;		None               void
 10644 ;; Registers used:
 10645 ;;		wreg, status,2, pclath, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 1F/1
 10648 ;;		On exit  : 1F/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10651 ;;      Params:         0       0       0       0
 10652 ;;      Locals:         0       0       0       0
 10653 ;;      Temps:          0       0       0       0
 10654 ;;      Totals:         0       0       0       0
 10655 ;;Total ram usage:        0 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    1
 10658 ;; This function calls:
 10659 ;;		i1_Mrf49SpiRx
 10660 ;; This function is called by:
 10661 ;;		i1_Mrf49xaServe
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function i1_Mrf49RxSts
 10667  01B1                     i1_Mrf49RxSts:	
 10668                           
 10669                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 10670                           
 10671                           ;incstack = 0
 10672                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 10673  01B1  120B               	bcf	11,4	;volatile
 10674                           
 10675                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 10676  01B2  0020               	movlb	0	; select bank0
 10677  01B3  130E               	bcf	14,6	;volatile
 10678                           
 10679                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
 10680  01B4  21BE  3180         	fcall	i1_Mrf49SpiRx
 10681  01B6  0020               	movlb	0	; select bank0
 10682  01B7  00BD               	movwf	_mrf49Status
 10683                           
 10684                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
 10685  01B8  21BE               	fcall	i1_Mrf49SpiRx
 10686  01B9  0020               	movlb	0	; select bank0
 10687  01BA  00BE               	movwf	_mrf49Status+1
 10688                           
 10689                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 10690  01BB  170E               	bsf	14,6	;volatile
 10691                           
 10692                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 10693  01BC  160B               	bsf	11,4	;volatile
 10694  01BD  0008               	return
 10695  01BE                     __end_ofi1_Mrf49RxSts:	
 10696  01BE                     __ptext76:	
 10697 ;; *************** function i1_Mrf49SpiRx *****************
 10698 ;; Defined at:
 10699 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10700 ;; Parameters:    Size  Location     Type
 10701 ;;		None
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  1    wreg      unsigned char 
 10706 ;; Registers used:
 10707 ;;		wreg, status,2
 10708 ;; Tracked objects:
 10709 ;;		On entry : 1F/0
 10710 ;;		On exit  : 1F/2
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10713 ;;      Params:         0       0       0       0
 10714 ;;      Locals:         1       0       0       0
 10715 ;;      Temps:          0       0       0       0
 10716 ;;      Totals:         1       0       0       0
 10717 ;;Total ram usage:        1 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; This function calls:
 10720 ;;		Nothing
 10721 ;; This function is called by:
 10722 ;;		i1_Mrf49RxCmd
 10723 ;;		i1_Mrf49RxSts
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function i1_Mrf49SpiRx
 10729  01BE                     i1_Mrf49SpiRx:	
 10730                           
 10731                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 10732                           
 10733                           ;incstack = 0
 10734                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 10735  01BE  01F0               	clrf	i1Mrf49SpiRx@data
 10736                           
 10737                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 10738  01BF  138D               	bcf	13,7	;volatile
 10739  01C0  1A8E               	btfsc	14,5	;volatile
 10740  01C1  17F0               	bsf	i1Mrf49SpiRx@data,7
 10741  01C2  0022               	movlb	2	; select bank2
 10742  01C3  178E               	bsf	14,7	;volatile
 10743  01C4  0000               	nop	;# 
 10744  01C5  0022               	movlb	2	; select bank2
 10745  01C6  138E               	bcf	14,7	;volatile
 10746                           
 10747                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10748  01C7  0020               	movlb	0	; select bank0
 10749  01C8  1A8E               	btfsc	14,5	;volatile
 10750  01C9  1770               	bsf	i1Mrf49SpiRx@data,6
 10751  01CA  0022               	movlb	2	; select bank2
 10752  01CB  178E               	bsf	14,7	;volatile
 10753  01CC  0000               	nop	;# 
 10754  01CD  0022               	movlb	2	; select bank2
 10755  01CE  138E               	bcf	14,7	;volatile
 10756                           
 10757                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10758  01CF  0020               	movlb	0	; select bank0
 10759  01D0  1A8E               	btfsc	14,5	;volatile
 10760  01D1  16F0               	bsf	i1Mrf49SpiRx@data,5
 10761  01D2  0022               	movlb	2	; select bank2
 10762  01D3  178E               	bsf	14,7	;volatile
 10763  01D4  0000               	nop	;# 
 10764  01D5  0022               	movlb	2	; select bank2
 10765  01D6  138E               	bcf	14,7	;volatile
 10766                           
 10767                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10768  01D7  0020               	movlb	0	; select bank0
 10769  01D8  1A8E               	btfsc	14,5	;volatile
 10770  01D9  1670               	bsf	i1Mrf49SpiRx@data,4
 10771  01DA  0022               	movlb	2	; select bank2
 10772  01DB  178E               	bsf	14,7	;volatile
 10773  01DC  0000               	nop	;# 
 10774  01DD  0022               	movlb	2	; select bank2
 10775  01DE  138E               	bcf	14,7	;volatile
 10776                           
 10777                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10778  01DF  0020               	movlb	0	; select bank0
 10779  01E0  1A8E               	btfsc	14,5	;volatile
 10780  01E1  15F0               	bsf	i1Mrf49SpiRx@data,3
 10781  01E2  0022               	movlb	2	; select bank2
 10782  01E3  178E               	bsf	14,7	;volatile
 10783  01E4  0000               	nop	;# 
 10784  01E5  0022               	movlb	2	; select bank2
 10785  01E6  138E               	bcf	14,7	;volatile
 10786                           
 10787                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10788  01E7  0020               	movlb	0	; select bank0
 10789  01E8  1A8E               	btfsc	14,5	;volatile
 10790  01E9  1570               	bsf	i1Mrf49SpiRx@data,2
 10791  01EA  0022               	movlb	2	; select bank2
 10792  01EB  178E               	bsf	14,7	;volatile
 10793  01EC  0000               	nop	;# 
 10794  01ED  0022               	movlb	2	; select bank2
 10795  01EE  138E               	bcf	14,7	;volatile
 10796                           
 10797                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10798  01EF  0020               	movlb	0	; select bank0
 10799  01F0  1A8E               	btfsc	14,5	;volatile
 10800  01F1  14F0               	bsf	i1Mrf49SpiRx@data,1
 10801  01F2  0022               	movlb	2	; select bank2
 10802  01F3  178E               	bsf	14,7	;volatile
 10803  01F4  0000               	nop	;# 
 10804  01F5  0022               	movlb	2	; select bank2
 10805  01F6  138E               	bcf	14,7	;volatile
 10806                           
 10807                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10808  01F7  0020               	movlb	0	; select bank0
 10809  01F8  1A8E               	btfsc	14,5	;volatile
 10810  01F9  1470               	bsf	i1Mrf49SpiRx@data,0
 10811  01FA  0022               	movlb	2	; select bank2
 10812  01FB  178E               	bsf	14,7	;volatile
 10813  01FC  0000               	nop	;# 
 10814  01FD  0022               	movlb	2	; select bank2
 10815  01FE  138E               	bcf	14,7	;volatile
 10816                           
 10817                           ;mrf49xa_spi_pic16.c: 40: return data;
 10818  01FF  0870               	movf	i1Mrf49SpiRx@data,w
 10819  0200  0008               	return
 10820  0201                     __end_ofi1_Mrf49SpiRx:	
 10821  0201                     PL14:	
 10822  0201  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10823  0202  397F               	andlw	127
 10824  0203  00F4               	movwf	??i1_Mrf49xaServe
 10825  0204  0AF4               	incf	??i1_Mrf49xaServe,f
 10826  0205  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10827  0206  0674               	xorwf	??i1_Mrf49xaServe,w
 10828  0207  3980               	andlw	-128
 10829  0208  0674               	xorwf	??i1_Mrf49xaServe,w
 10830  0209  0008               	return
 10831  020A                     __end_ofPL14:	
 10832                           
 10833                           	psect	text77
 10834  0255                     __ptext77:	
 10835 ;; *************** function _ExtIntDeinit *****************
 10836 ;; Defined at:
 10837 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;		None
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;		None
 10842 ;; Return value:  Size  Location     Type
 10843 ;;		None               void
 10844 ;; Registers used:
 10845 ;;		None
 10846 ;; Tracked objects:
 10847 ;;		On entry : 1E/0
 10848 ;;		On exit  : 1E/0
 10849 ;;		Unchanged: 1E/0
 10850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10851 ;;      Params:         0       0       0       0
 10852 ;;      Locals:         0       0       0       0
 10853 ;;      Temps:          0       0       0       0
 10854 ;;      Totals:         0       0       0       0
 10855 ;;Total ram usage:        0 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; This function calls:
 10858 ;;		Nothing
 10859 ;; This function is called by:
 10860 ;;		_extInt
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           
 10865                           ;psect for function _ExtIntDeinit
 10866  0255                     _ExtIntDeinit:	
 10867                           
 10868                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 10869                           
 10870                           ;incstack = 0
 10871                           ; Regs used in _ExtIntDeinit: []
 10872  0255  120B               	bcf	11,4	;volatile
 10873  0256  0008               	return
 10874  0257                     __end_of_ExtIntDeinit:	
 10875  007E                     btemp	set	126	;btemp
 10876  007E                     wtemp	set	126
 10877  007E                     wtemp0	set	126
 10878  0080                     wtemp1	set	128
 10879  0082                     wtemp2	set	130
 10880  0084                     wtemp3	set	132
 10881  0086                     wtemp4	set	134
 10882  0088                     wtemp5	set	136
 10883  007F                     wtemp6	set	127
 10884  007E                     ttemp	set	126
 10885  007E                     ttemp0	set	126
 10886  0081                     ttemp1	set	129
 10887  0084                     ttemp2	set	132
 10888  0087                     ttemp3	set	135
 10889  007F                     ttemp4	set	127
 10890  007E                     ltemp	set	126
 10891  007E                     ltemp0	set	126
 10892  0082                     ltemp1	set	130
 10893  0086                     ltemp2	set	134
 10894  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    68
    Data        1
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     19      32
    BANK1            80      0      75
    BANK2            80      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    S1054CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> eepromTxByte@byte(COMMON[1]), cfgRam(BANK0[9]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 
		 -> NULL(NULL[0]), cfgRam(BANK0[9]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    S333rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _RfSendPowerState->_AdcSample
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_handleCfgCmd
    _HandlePacket->_handleCfgRead
    _HandlePacket->_handleCfgWrite
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   28030
                                             15 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              5     1      4    1855
                                              6 BANK0      5     1      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     3     3      0    1546
                                              6 BANK0      3     3      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     831
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     831
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     831
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     831
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    5616
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          3     3      0   14757
                                             12 BANK0      3     3      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    4670
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    1947
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         3     3      0    8050
                                              9 BANK0      3     3      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1231
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     772
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     882
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     602
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    1935
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     682
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1085
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1085
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1470
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1280
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    1033
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      73       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     13      20       6       40.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4B       8       93.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      73      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat Jul 05 12:58:16 2014

                Mrf49xaTxPacket@crc 0023                         __CFG_CP$OFF 0000  
                                PL8 0F7E                                  l32 0A37  
                                l42 0A8C                                  l34 0A43  
                                l35 0A45                                  l39 0A6F  
                                l79 0008                                 PL10 0F96  
                               PL20 0FBD                                 PL12 0FA4  
                               PL22 0FC3                                 PL14 0201  
                               PL24 0FC9                                 PL16 0FB1  
                               PL26 0FCE                                 PL18 0FB7  
             Mrf49xaTxPacket@packet 0025                                 l211 0BC9  
                               l234 0935                                 l260 0ED0  
                               l271 0EF0                                 l263 0EDA  
                               l255 0EC4                                 l280 0F07  
                               l272 0EF1                                 l264 0EDB  
                               l256 0EC5                                 l441 0ACD  
                               l417 092F                                 l442 0AEB  
                               l283 0F11                                 l275 0EFB  
                               l267 0EE5                                 l259 0ECF  
                               l284 0F12                                 l276 0EFC  
                               l268 0EE6                                 l381 0D77  
                               l374 0D3C                                 l550 0DD3  
                               l383 0D85                                 l535 0E6B  
                               l279 0F06                                 l562 0CEA  
                               l555 0D10                                 l564 0D1E  
                               l565 0D2B                                 l645 08A3  
                               l566 0D2A                                 l558 0CE1  
                   ??_PwrSensorInit 0020                     ??_PwrSensorWake 0020  
                      __CFG_BORV$LO 0000                 handleCfgWrite@index 0027  
                               wreg 0009                    i1Mrf49xaModeRx@k 0073  
                      __CFG_IESO$ON 0000              ??_SoftI2cRepeatedStart 0021  
                      __CFG_LVP$OFF 0000              Mrf49xaTxPacket@needAck 0021  
                              l3020 0DAF                                l3022 0DB0  
                              l2400 0A9A                                l3024 0DB7  
                              l3200 0CE7                                l3120 097F  
                              l3018 0DAE                                l3210 0CF2  
                              l3114 0965                                l2500 0A8E  
                              l3028 0DC3                                l3204 0CEE  
                              l3124 0987                                l3300 08DE  
                              l3060 0C45                                l3118 0973  
                              l3302 08E0                                l3136 098A  
                              l3080 0F6D                                l3312 08FD  
                              l3056 0C3E                                l3066 083F  
                              l3074 0F59                                l3330 0919  
                              l2444 0AAE                                l2620 0BAC  
                              l3316 0905                                l2606 09E7  
                              l3190 0CCA                                l3094 0937  
                              l3158 0F2A                                l3174 0CB9  
                              l2608 09F5                                l2720 0E09  
                              l2712 0E07                                l3328 0918  
                              l2730 0E0B                                l3186 0CC1  
                              l2626 0BB5                                l3338 0921  
                              l3290 08C6                                l3282 08AF  
                              l2724 0E0A                                l2716 0E08  
                              l2740 0E37                                l3196 0CE3  
                              l3188 0CC7                                l2900 0B34  
                              l2812 0F77                                l2804 0FF5  
                              l2742 0E74                                l2910 0B53  
                              l3294 08CF                                l2814 0000  
                              l2744 0E6C                                l2920 0B6B  
                              l2904 0B43                                l3296 08D2  
                              l2690 0D65                                l2666 0D45  
                              l2594 0A21                                l2586 0A0F  
                              l2914 0B5A                                l2850 0AD9  
                              l3634 0893                                l3626 088A  
                              l2596 0A32                                l2916 0B63  
                              l2908 0B4F                                l2932 0B7F  
                              l2860 0AF2                                l2678 0D57  
                              l2598 09DA                                l2918 0B67  
                              l2870 0B00                                l2854 0ADC  
                              l2950 09AB                                l3638 0898  
                   Mrf49TxByte@byte 0023                                l2928 0B7D  
                              l2864 0AF7                                l2936 0B91  
                              l2848 0AD0                                l2866 0AFA  
                              l2858 0AEF                                l2938 0BA0  
                              l2954 0996                                l2962 0FDC  
                              l2956 0FD3                                l3596 0858  
                              l2894 0B22                                l2886 0B17  
                              l2968 0FF0                                l2986 0E55  
                              u2457 0C39                                u2467 0A9D  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _main 0845                     __end_of_AdcInit 1000  
                              fsr0h 0005                                fsr1h 0007  
                  ??_PwrSensorSleep 0020                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                   __end_of_CfgLoad 0E74                                ltemp 007E  
                   __end_of_CfgSave 0E7B                handleCfgWrite@packet 0028  
                              start 0020                                ttemp 007E  
                              wtemp 007E                __end_of_HandlePacket 0D2F  
           __end_ofi1_Mrf49xaModeRx 0142                       __CFG_MCLRE$ON 0000  
               __end_of_Mrf49RxByte 0BAC                       ?_ExtIntDeinit 0070  
               __end_of_Mrf49TxByte 0BAA                     ??_eepromRxBytes 0028  
                       _Mcp9800Read 09C5                     ??_eepromTxBytes 0028  
                  _RfSendPowerState 0BF6                 __end_of_Mrf49xaInit 0995  
               __end_of_Mrf49xaTick 0935                _Mrf49xaPacketPending 0F1A  
                 ?_CfgGetSizeByType 0070                               ?_main 0070  
                             i1l211 013A                               i1l141 001B  
                             i1l142 001C                               i1l260 0161  
                             i1l271 0183                               i1l263 016B  
                             i1l255 0154                               i1l280 019D  
                             i1l272 0185                               i1l264 016D  
                             i1l256 0155                               i1l441 003E  
                             i1l442 005C                               i1l283 01A7  
                             i1l275 018F                               i1l267 0177  
                             i1l259 015F                               i1l284 01A9  
                             i1l276 0191                               i1l268 0179  
                             i1l279 019B                          _Mrf49RxCmd 0F47  
                        _Mrf49TxCmd 0BD4                               _AdcGo 0C57  
                        _Mrf49SpiRx 0E7B                          _Mrf49SpiTx 0EBF  
                        _Mrf49RxSts 0BDD                  ??_CfgGetSizeByType 0020  
        __end_of_Mrf49xaAllocPacket 0CBF               __end_of_SoftI2cRxByte 0A9A  
             __end_of_SoftI2cTxByte 0A61                        main@humidity 002F  
             __size_of_Mcp9800Start 0019                  __size_of_AdcDeinit 0007  
           Mrf49xaTxPacket@response 0020                  __size_of_AdcIsBusy 0004  
                __size_of_AdcSample 0028                      __CFG_BOREN$OFF 0000  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F              Mcp9800Start@resolution 0024  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
               i1_Mrf49xaNeedsReset 0142                      ??_ExtIntDeinit 0070  
                   __initialization 0802                          _ExtIntInit 083F  
              __end_of_handleCfgCmd 0DD4                        __end_of_main 08A9  
RfSendSampleWeatherNode@temperature 0026                      __CFG_LPBOR$OFF 0000  
             ?_Mrf49xaPacketPending 0070                        _Mcp9800Start 09F6  
                            ??_main 002F                ?i1_Mrf49xaNeedsReset 0070  
                            ?_AdcGo 0070                __size_of_handleFwCmd 0021  
              __end_of_Mrf49xaTxAck 0DAC                __end_of_Mrf49xaServe 0BA5  
                     ??_PwrI2cSleep 0020                              _ADCON0 009D  
                            _ADCON1 009E                              _ADCON2 009F  
                         ??_AdcInit 0020                              _ADRESH 009C  
                            _ADRESL 009B                              _ANSELA 018C  
                            _ANSELB 018D                              _ANSELC 018E  
                         ??_CfgLoad 0028                           ??_CfgSave 0028  
                i1Mrf49xaServe@data 0075                              i1l3238 0126  
                            i1l3510 0089                              i1l3540 00D4  
                            i1l3532 00C0                              i1l3524 00A7  
                            i1l3542 00D8                              i1l3534 00C4  
                            i1l3518 0094                              i1l3552 00EE  
                            i1l3544 00DC                              i1l3528 00B4  
                            i1l3560 0102                              i1l3472 0041  
                            i1l3538 00CB                              i1l3490 006B  
                            i1l3482 0060                              i1l3562 0111  
                            i1l3474 004A                              i1l3556 00F0  
                            i1l3484 0063                              i1l3494 0071  
                            i1l3478 004D                              i1l3488 0068  
                            i1l3576 000B                              _FVRCON 0117  
                            _OSCCON 0099                CfgGetSizeByType@type 0020  
                        _PwrI2cInit 0F36                  AdcChSelect@channel 0020  
                        _PwrI2cWake 0BF2                         _Mrf49RxByte 0BAA  
                       _Mrf49TxByte 0BA5                       ??_SoftI2cInit 0024  
                     ??_SoftI2cStop 0021           __size_of_Mrf49xaModeSleep 0022  
                    __CFG_PWRTE$OFF 0000                          _SoftI2cNop 0A9A  
                      ?_AdcChSelect 0070                    ?i1_Mrf49xaModeRx 0070  
                       _Mrf49xaInit 0935                              _Sleepy 0995  
                       _Mrf49xaTick 08A9                          _PwrAdcInit 0F31  
                        _PwrAdcWake 0C68                       ??_PwrAdcSleep 0020  
                            _cfgRam 0034                     _Mrf49xaRxPacket 0F23  
                 __end_of_AdcDeinit 0F7E                      __CFG_STVREN$ON 0000  
                 __end_of_AdcIsBusy 0C5D                     _Mrf49xaTxPacket 0D2F  
                            _extInt 0004                              _memcpy 0E32  
                 __end_of_AdcSample 0C57                     _Mrf49xaShutdown 0F75  
                        _PwrRfSleep 0BF3               ??i1_Mrf49xaNeedsReset 0070  
                       ?_Mrf49RxCmd 0070                         ?_Mrf49TxCmd 0021  
                       ?_Mrf49SpiRx 0070                         ?_Mrf49SpiTx 0070  
                       ?_Mrf49RxSts 0070                  __size_of_PwrRfInit 0021  
                __size_of_PwrRfWake 0002               __size_of_HandlePacket 0070  
           __end_of__initialization 0814               __end_ofi1_Mrf49RxByte 011E  
               __end_of_PwrI2cSleep 0BEA               __end_ofi1_Mrf49TxByte 011B  
                     __end_of_AdcGo 0C59     RfSendSampleWeatherNode@humidity 0028  
                       ?_ExtIntInit 0070                      __pcstackCOMMON 0070  
                  SoftI2cRxByte@ack 0021                        __pidataBANK0 0000  
                handleCfgCmd@packet 0028                 __end_of_SoftI2cInit 081E  
             __end_of_handleCfgRead 0E05                 __end_of_SoftI2cStop 0ABD  
            ??_Mrf49xaPacketPending 0020             __size_ofi1_Mrf49xaServe 00E8  
                        __end_ofPL8 0F96                 __end_of_PwrAdcSleep 0C68  
                           ??_AdcGo 0020                      _OPTION_REGbits 0095  
                      _HandlePacket 0CBF             Mrf49xaFreePacket@packet 0020  
           __size_of_handleCfgWrite 001B                __end_of_ExtIntDeinit 0257  
          __end_of_RfSendPowerState 0C2F                          __pbssBANK0 0033  
                        __pbssBANK1 00A0                         ?_PwrI2cInit 0070  
                       ?_PwrI2cWake 0070                       ?_SoftI2cStart 0070  
             __size_of_handleCfgCmd 0028             __end_of_Mrf49xaRxPacket 0F31  
           __end_of_Mrf49xaTxPacket 0D8C               __end_of_Mrf49xaModeRx 0BD1  
             __end_of_Mrf49xaModeTx 0F75                         ?_SoftI2cNop 0070  
             __end_of_Mrf49xaReboot 0F77                 __size_of_Mrf49RxCmd 000A  
                 __end_of_PwrRfInit 083F                 __size_of_Mrf49TxCmd 0009  
                 __end_of_PwrRfWake 0F40                 __size_of_Mrf49SpiRx 0044  
               __size_of_Mrf49SpiTx 005B                 __size_of_Mrf49RxSts 000B  
                        __pmaintext 0845                             ?_Sleepy 0020  
           __end_of_Mrf49xaShutdown 0F76                         ?_PwrAdcInit 0070  
                       ?_PwrAdcWake 0070            ?_RfSendSampleWeatherNode 0026  
                      ?_Mcp9800Read 0024                          __pintentry 0004  
                           ?_extInt 0070                             ?_memcpy 0020  
             __size_of_Mrf49xaTxAck 0020               __size_of_Mrf49xaServe 00E8  
                       ?_PwrRfSleep 0070                HandlePacket@response 002A  
                 handleFwCmd@packet 0028               __end_of_PwrSensorInit 0F44  
             __end_of_PwrSensorWake 0F47                         _PwrI2cSleep 0BE8  
                      _handleCfgCmd 0DAC                             _AdcInit 0FF5  
               __size_of_ExtIntInit 0006       __size_of_SoftI2cRepeatedStart 0015  
                handleCfgRead@index 0027                             _CfgLoad 0E6C  
                        __stringtab 020A                             _CfgSave 0E74  
                    ??_SoftI2cStart 0021           __size_of_CfgGetSizeByType 0012  
                _Mrf49xaAllocPacket 0CB2                    _Mrf49xaModeSleep 0FD3  
                       _SoftI2cInit 0816                       ?i1_Mrf49RxCmd 0070  
                     ?i1_Mrf49TxCmd 0071                       ?i1_Mrf49SpiRx 0070  
                     ?i1_Mrf49SpiTx 0070                         _SoftI2cStop 0AAE  
                     ?i1_Mrf49RxSts 0070                             Sleepy@b 0023  
                      _Mrf49xaTxAck 0D8C                        _Mrf49xaServe 0ABD  
                   __size_of_Sleepy 001B                eepromRxBytes@address 0024  
                       _PwrAdcSleep 0C64                 ?_Mrf49xaAllocPacket 0070  
              __size_of_AdcChSelect 0007               __end_of_eepromRxBytes 0A33  
             __end_of_eepromTxBytes 09F6                     __size_of_extInt 001C  
                   __size_of_memcpy 0019                   _mrfRegset_InitCnt 020B  
                           __ptext1 0C6E                             __ptext2 0BF6  
                           __ptext3 0C68                             __ptext4 0FF5  
                           __ptext5 0C64                             __ptext6 0F77  
                           __ptext7 0CB2                             __ptext8 0C2F  
                           __ptext9 0C59                 __size_of_PwrI2cInit 0008  
               __size_of_PwrI2cWake 0001                          _parameters 0249  
                     ?_AdcGetResult 0020                 __size_of_SoftI2cNop 0007  
              ??_Mrf49xaAllocPacket 0020                 __size_of_PwrAdcInit 0005  
               __size_of_PwrAdcWake 0006                             clrloop0 0250  
              end_of_initialization 0814                             memcpy@d 0023  
                           memcpy@n 0021                             memcpy@s 0024  
                      ?_Mrf49RxByte 0070                        ?_Mrf49TxByte 0070  
                    ??i1_Mrf49RxCmd 0071                      ??i1_Mrf49TxCmd 0072  
                    ??i1_Mrf49SpiRx 0070                      ??i1_Mrf49SpiTx 0070  
                    ??i1_Mrf49RxSts 0071                    ?_Mrf49xaRxPacket 0070  
               __size_of_PwrRfSleep 0003     __end_of_RfSendSampleWeatherNode 0CB2  
                  ?_Mrf49xaTxPacket 0020                        ?_Mrf49xaInit 0070  
              __end_of_mrfRegset_Rx 023B                __end_of_mrfRegset_Tx 0243  
                      ?_Mrf49xaTick 0070                    ?_Mrf49xaShutdown 0070  
           handleCfgWrite@nrOfBytes 0026              __size_of_SoftI2cRxByte 0039  
            __size_of_SoftI2cTxByte 002E                      i1_Mrf49xaServe 002E  
         __end_of_mrfRegset_InitCnt 020C             __size_of_PwrSensorSleep 0003  
                 _powerStatusTicker 0033                       ??_handleFwCmd 0028  
                         _PORTAbits 000C                           _PORTBbits 000D  
                         _PORTCbits 000E                           _AdcDeinit 0F77  
             __size_of_ExtIntDeinit 0002                           _AdcIsBusy 0C59  
                      ??_Mrf49RxCmd 0021                        ??_Mrf49TxCmd 0022  
                      ??_Mrf49SpiRx 0020                        ??_Mrf49SpiTx 0020  
                      ??_Mrf49RxSts 0021                           _AdcSample 0C2F  
                  __CFG_FOSC$INTOSC 0000                      ??_AdcGetResult 0022  
                    _handleCfgWrite 0E17                           _TRISAbits 008C  
                         _TRISBbits 008D                           _TRISCbits 008E  
                       AdcSample@ch 0025                      Mrf49SpiRx@data 0020  
                    Mrf49SpiTx@byte 0020                  __end_of_Mrf49RxCmd 0F51  
                __end_of_Mrf49TxCmd 0BDD              __end_ofi1_Mrf49xaServe 0116  
                      ??_ExtIntInit 0020                  __end_of_Mrf49SpiRx 0EBF  
                __end_of_Mrf49SpiTx 0F1A                  __end_of_Mrf49RxSts 0BE8  
                      _ExtIntDeinit 0255         __end_ofi1_Mrf49xaNeedsReset 0145  
                    __end_of_Sleepy 09B0                   SoftI2cRxByte@data 0022  
              __size_of_Mcp9800Read 0015                   eepromRxBytes@data 0026  
              __end_of_SoftI2cStart 0AAE            __size_ofi1_Mrf49xaModeRx 0024  
                        ?_AdcDeinit 0070                      __end_of_extInt 0020  
                    __end_of_memcpy 0E4B                   eepromRxBytes@size 0027  
            __end_of_handleCfgWrite 0E32                          ?_AdcIsBusy 0070  
        __end_of_mrfRegset_SleepCnt 020E                          ?_AdcSample 0022  
                       __end_ofPL10 0FA4                         __end_ofPL20 0FC3  
                       __end_ofPL12 0FB1                         __end_ofPL22 0FC9  
                       __end_ofPL14 020A                         __end_ofPL24 0FCE  
                       __end_ofPL16 0FB7                         __end_ofPL26 0FD3  
                       __end_ofPL18 0FBD                 start_initialization 0802  
                     _SoftI2cRxByte 0A61                 __end_of_handleFwCmd 0E6C  
                     _SoftI2cTxByte 0A33                  __end_of_ExtIntInit 0845  
                 SoftI2cTxByte@data 0022                   ?_RfSendPowerState 0070  
                  _CfgGetSizeByType 0E05                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002B  
                ??_RfSendPowerState 0026                        ??_SoftI2cNop 0020  
                          ??_Sleepy 0022                        ??_PwrAdcInit 0020  
                      ??_PwrAdcWake 0020                     ?i1_Mrf49xaServe 0070  
                   _mrfRegset_RxCnt 020C                     _mrfRegset_TxCnt 020E  
                   _mrfRegset_Sleep 0243                           _PwrRfInit 081E  
                         _PwrRfWake 0F3E                         __pdataBANK0 003F  
                          ??_extInt 0076                            ??_memcpy 0023  
     __size_of_Mrf49xaPacketPending 0009                   eepromTxBytes@data 0026  
                      ??_PwrRfSleep 0024                   eepromTxBytes@size 0027  
                   ?_handleCfgWrite 0070                   RfSendPowerState@s 0026  
            __size_ofi1_Mrf49RxByte 0003              __size_ofi1_Mrf49TxByte 0005  
          __end_of_Mrf49xaModeSleep 0FF5                  __end_of_PwrI2cInit 0F3E  
              __end_ofi1_Mrf49RxCmd 002E                __end_ofi1_Mrf49TxCmd 014F  
                __end_of_PwrI2cWake 0BF3                __end_ofi1_Mrf49SpiRx 0201  
              __end_ofi1_Mrf49SpiTx 01B1                __end_ofi1_Mrf49RxSts 01BE  
                         ___latbits 0001                       __pcstackBANK0 0020  
                    ?_SoftI2cRxByte 0070    __size_of_RfSendSampleWeatherNode 0044  
                    ?_SoftI2cTxByte 0070                   i1Mrf49TxByte@byte 0073  
                      ?_PwrI2cSleep 0070                  __end_of_SoftI2cNop 0AA1  
                          ?_AdcInit 0070                  __end_of_PwrAdcInit 0F36  
                          ?_CfgLoad 0070                  __end_of_PwrAdcWake 0C6E  
                          ?_CfgSave 0070              __size_of_handleCfgRead 0031  
                      _rfTrcvStatus 00A0                        ?_SoftI2cInit 0070  
                      ?_SoftI2cStop 0070                __size_of_Mrf49RxByte 0002  
                __end_of_PwrRfSleep 0BF6                __size_of_Mrf49TxByte 0005  
              __end_of_AdcGetResult 0000        __end_of_SoftI2cRepeatedStart 09C5  
                      ?_PwrAdcSleep 0070                __size_of_Mrf49xaInit 0060  
              __size_of_Mrf49xaTick 008C                          ?_PwrRfInit 0070  
                        ?_PwrRfWake 0070                      _PwrSensorSleep 0BEA  
                     ?_Mcp9800Start 0070                           __pstrings 020A  
                       ??_AdcDeinit 0020                         ??_AdcIsBusy 0020  
                       _handleFwCmd 0E4B                         ??_AdcSample 0024  
                    __size_of_AdcGo 0002              __size_of_Mrf49xaModeRx 0025  
            __size_of_Mrf49xaModeTx 0024                        _mrfRegset_Rx 022F  
                      _mrfRegset_Tx 023B              __size_of_Mrf49xaReboot 0001  
                 ??i1_Mrf49xaModeRx 0073                    __CFG_WDTE$SWDTEN 0000  
                          _LATAbits 010C                            _LATBbits 010D  
                          _LATCbits 010E                       i1_Mrf49RxByte 011B  
           __end_of_mrfRegset_RxCnt 020D                       i1_Mrf49TxByte 0116  
           __end_of_mrfRegset_TxCnt 020F             __end_of_mrfRegset_Sleep 0249  
                         clear_ram0 024F                       ??_AdcChSelect 0020  
                       _mrf49Status 003D                   _Mrf49xaFreePacket 0BED  
                    Mrf49xaModeRx@k 0023                      Mrf49xaModeTx@k 0023  
            __end_of_PwrSensorSleep 0BED               __size_of_SoftI2cStart 000D  
            __size_of_PwrSensorInit 0004              __size_of_PwrSensorWake 0003  
                     Mrf49RxCmd@cmd 0021                  ?_Mrf49xaFreePacket 0070  
                     Mrf49RxCmd@val 0022                      ??_Mcp9800Start 0024  
                     _handleCfgRead 0DD4                       Mrf49TxCmd@cmd 0022  
                     Mrf49TxCmd@val 0021                 handleCfgRead@packet 0028  
               ??_Mrf49xaFreePacket 0020                     ??_SoftI2cRxByte 0021  
                 _Mrf49xaNeedsReset 0BD1                     ??_SoftI2cTxByte 0021  
                          _WPUAbits 020C                  ?_Mrf49xaNeedsReset 0070  
       __size_of_Mrf49xaAllocPacket 000D                    __size_of_AdcInit 000B  
                  __size_of_CfgLoad 0008                    __size_of_CfgSave 0007  
               ??_Mrf49xaNeedsReset 0020              __size_of_eepromRxBytes 0024  
                    ?i1_Mrf49RxByte 0070              __size_of_eepromTxBytes 001C  
                      _SoftI2cStart 0AA1                      ?i1_Mrf49TxByte 0070  
         __end_of_Mrf49xaFreePacket 0BF2                           extInt@ofw 0077  
                          Sleepy@ms 0020                       _Mrf49xaModeRx 0BAC  
                     _Mrf49xaModeTx 0F51                       _Mrf49xaReboot 0F76  
                    _mrfRegset_Init 020F                     ?_PwrSensorSleep 0070  
                       ??_PwrRfInit 0027                      ?_handleCfgRead 0070  
                       ??_PwrRfWake 0024            __size_of_Mrf49xaRxPacket 000E  
             __size_ofi1_Mrf49RxCmd 000C               __size_ofi1_Mrf49TxCmd 000A  
             __size_ofi1_Mrf49SpiRx 0043               __size_ofi1_Mrf49SpiTx 0062  
                  i1Mrf49SpiRx@data 0070               __size_ofi1_Mrf49RxSts 000D  
               __end_of_AdcChSelect 0C64            __size_of_Mrf49xaTxPacket 005D  
          __end_of_CfgGetSizeByType 0E17                    i1Mrf49SpiTx@byte 0070  
                    SoftI2cRxByte@i 0023           __end_of_Mrf49xaNeedsReset 0BD4  
                __end_of__stringtab 020B            __size_of_Mrf49xaShutdown 0001  
                    SoftI2cTxByte@i 0023             _RfSendSampleWeatherNode 0C6E  
                     ?_HandlePacket 0070                            _coldBoot 003F  
                          __ptext10 0C57                            __ptext11 0000  
                          __ptext20 0FD3                            __ptext12 0C5D  
                          __ptext21 081E                            __ptext13 0F44  
                          __ptext30 0F51                            __ptext22 0BF2  
                          __ptext14 0BEA                            __ptext31 0935  
                          __ptext23 0BE8                            __ptext15 0F40  
                          __ptext40 0F47                            __ptext32 0995  
                          __ptext24 0F36                            __ptext16 0F3E  
                          __ptext41 0EBF                            __ptext33 0ABD  
                          __ptext25 0816                            __ptext17 0F76  
                          __ptext50 0E74                            __ptext42 0E7B  
                          __ptext34 0BD1                            __ptext26 0F31  
                          __ptext18 0BF3                            __ptext51 09DA  
                          __ptext43 0CBF                            __ptext35 0BAC  
                          __ptext27 08A9                            __ptext19 0F75  
                          __ptext60 09C5                            __ptext52 0E6C  
                          __ptext44 0E4B                            __ptext36 0BA5  
                          __ptext28 0F23                            __ptext61 0A33  
                          __ptext53 0A0F                            __ptext45 0E17  
                          __ptext37 0BD4                            __ptext29 0F1A  
                          __ptext70 0116                            __ptext62 0AAE  
                          __ptext54 09B0                            __ptext46 0DD4  
                          __ptext38 0BDD                            __ptext71 0145  
                          __ptext63 0AA1                            __ptext55 0D8C  
                          __ptext47 0E32                            __ptext39 0BAA  
                          __ptext72 01B1                            __ptext64 0A61  
                          __ptext56 0D2F                            __ptext48 0E05  
                          __ptext73 011B                            __ptext65 0A9A  
                          __ptext57 0BED                            __ptext49 0DAC  
                     _PwrSensorInit 0F40                            __ptext74 0022  
                          __ptext58 083F                            __ptext75 014F  
                          __ptext67 002E                            __ptext59 09F6  
                          __ptext76 01BE                            __ptext68 0142  
                          __ptext77 0255                            __ptext69 011E  
                     _PwrSensorWake 0F44                _SoftI2cRepeatedStart 09B0  
              __size_of_PwrI2cSleep 0002               __size_of_AdcGetResult 0000  
                _mrfRegset_SleepCnt 020D                    Mcp9800Read@tempH 0026  
                  Mcp9800Read@tempL 0027                    ??i1_Mrf49xaServe 0074  
                     __size_of_main 0064                        i1_Mrf49RxCmd 0022  
            __end_of_mrfRegset_Init 022F                  Mrf49xaTxAck@packet 0026  
                      i1_Mrf49TxCmd 0145                        i1_Mrf49SpiRx 01BE  
                      i1_Mrf49SpiTx 014F                      ?_Mrf49xaModeRx 0070  
                    ?_Mrf49xaModeTx 0070                        i1_Mrf49RxSts 01B1  
                    ?_Mrf49xaReboot 0070                  __end_of_parameters 024F  
              __size_of_SoftI2cInit 0008                __size_of_SoftI2cStop 000F  
                     ??_Mcp9800Read 0026                    ??_handleCfgWrite 0026  
         __size_of_RfSendPowerState 0039                __size_of_PwrAdcSleep 0004  
                     _eepromRxBytes 0A0F                   Mrf49xaModeSleep@k 0023  
                     _eepromTxBytes 09DA                     i1Mrf49RxCmd@cmd 0071  
                   main@temperature 0031                     i1Mrf49RxCmd@val 0072  
                    ??_HandlePacket 0029        __size_ofi1_Mrf49xaNeedsReset 0003  
                Mrf49xaTick@timeout 002D                          _INTCONbits 000B  
                 ?_Mrf49xaModeSleep 0070                     i1Mrf49TxCmd@cmd 0072  
                   i1Mrf49TxCmd@val 0071                            memcpy@d1 0025  
                          memcpy@s1 0020                      ?_PwrSensorInit 0070  
                      _AdcGetResult 0000                      ?_PwrSensorWake 0070  
                ??_Mrf49xaModeSleep 0023                       ?_handleCfgCmd 0070  
             ?_SoftI2cRepeatedStart 0070                     ??i1_Mrf49RxByte 0073  
                          intlevel1 0000                     ??i1_Mrf49TxByte 0073  
      __end_of_Mrf49xaPacketPending 0F23                __end_of_Mcp9800Start 0A0F  
     RfSendSampleWeatherNode@packet 002A                   __CFG_CLKOUTEN$OFF 0000  
        __size_of_Mrf49xaFreePacket 0005              RfSendPowerState@packet 0028  
                     ?_Mrf49xaTxAck 0070                         _AdcChSelect 0C5D  
                      Mrf49xaInit@k 0026                       ?_Mrf49xaServe 0070  
                   ??_handleCfgRead 0026                   Mrf49xaTick@packet 002E  
                    ?_eepromRxBytes 0024                eepromTxBytes@address 0024  
                   i1_Mrf49xaModeRx 011E                      ?_eepromTxBytes 0024  
         ??_RfSendSampleWeatherNode 002A          __size_of_Mrf49xaNeedsReset 0003  
                      ?_handleFwCmd 0070                 __end_of_Mcp9800Read 09DA  
                 ??_Mrf49xaRxPacket 0020                   ??_Mrf49xaTxPacket 0022  
                    ??_handleCfgCmd 0028                          _WDTCONbits 0097  
                 ??_Mrf49xaShutdown 0024                       ??_Mrf49RxByte 0023  
                     ??_Mrf49TxByte 0023                     ??_Mrf49xaModeRx 0023  
                   ??_Mrf49xaModeTx 0023                     ??_Mrf49xaReboot 0024  
                    ??_Mrf49xaTxAck 0026                    Mrf49xaServe@data 0025  
                    ??_Mrf49xaServe 0024                       ??_Mrf49xaInit 0026  
                     ??_Mrf49xaTick 002C              handleCfgRead@nrOfBytes 0026  
                  Mrf49xaTxPacket@i 0024  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Wed Apr  9 08:46:54 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	swtext2,local,class=CONST,delta=2
    21                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text47,local,class=CODE,merge=1,delta=2
    23                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	functab,global,reloc=256,class=CODE,delta=2
    25                           	psect	pa_nodes,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001C                     	;# 
    54  008C                     	;# 
    55  008D                     	;# 
    56  008E                     	;# 
    57  0091                     	;# 
    58  0092                     	;# 
    59  0093                     	;# 
    60  0095                     	;# 
    61  0096                     	;# 
    62  0097                     	;# 
    63  0099                     	;# 
    64  009A                     	;# 
    65  009B                     	;# 
    66  009B                     	;# 
    67  009C                     	;# 
    68  009D                     	;# 
    69  009E                     	;# 
    70  009F                     	;# 
    71  010C                     	;# 
    72  010D                     	;# 
    73  010E                     	;# 
    74  0111                     	;# 
    75  0112                     	;# 
    76  0113                     	;# 
    77  0114                     	;# 
    78  0115                     	;# 
    79  0116                     	;# 
    80  0117                     	;# 
    81  0118                     	;# 
    82  0119                     	;# 
    83  011D                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  018E                     	;# 
    87  0191                     	;# 
    88  0191                     	;# 
    89  0192                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0199                     	;# 
    96  019A                     	;# 
    97  019B                     	;# 
    98  019B                     	;# 
    99  019C                     	;# 
   100  019D                     	;# 
   101  019E                     	;# 
   102  019F                     	;# 
   103  020C                     	;# 
   104  020D                     	;# 
   105  0211                     	;# 
   106  0211                     	;# 
   107  0212                     	;# 
   108  0212                     	;# 
   109  0213                     	;# 
   110  0213                     	;# 
   111  0214                     	;# 
   112  0214                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0215                     	;# 
   116  0216                     	;# 
   117  0216                     	;# 
   118  0217                     	;# 
   119  0217                     	;# 
   120  0391                     	;# 
   121  0392                     	;# 
   122  0393                     	;# 
   123  0394                     	;# 
   124  0395                     	;# 
   125  0396                     	;# 
   126  0498                     	;# 
   127  0498                     	;# 
   128  0499                     	;# 
   129  049A                     	;# 
   130  049B                     	;# 
   131  049B                     	;# 
   132  049C                     	;# 
   133  049E                     	;# 
   134  049F                     	;# 
   135  0611                     	;# 
   136  0612                     	;# 
   137  0613                     	;# 
   138  0613                     	;# 
   139  0614                     	;# 
   140  0615                     	;# 
   141  0616                     	;# 
   142  0616                     	;# 
   143  0617                     	;# 
   144  0618                     	;# 
   145  0619                     	;# 
   146  0619                     	;# 
   147  061A                     	;# 
   148  061B                     	;# 
   149  061C                     	;# 
   150  061C                     	;# 
   151  0691                     	;# 
   152  0692                     	;# 
   153  0693                     	;# 
   154  0694                     	;# 
   155  0695                     	;# 
   156  0F0F                     	;# 
   157  0F10                     	;# 
   158  0F11                     	;# 
   159  0F12                     	;# 
   160  0F13                     	;# 
   161  0F14                     	;# 
   162  0F15                     	;# 
   163  0F16                     	;# 
   164  0F17                     	;# 
   165  0F18                     	;# 
   166  0F19                     	;# 
   167  0F1A                     	;# 
   168  0F1B                     	;# 
   169  0F1C                     	;# 
   170  0F1D                     	;# 
   171  0F1E                     	;# 
   172  0F1F                     	;# 
   173  0F20                     	;# 
   174  0F21                     	;# 
   175  0F22                     	;# 
   176  0F23                     	;# 
   177  0F24                     	;# 
   178  0F25                     	;# 
   179  0F26                     	;# 
   180  0F27                     	;# 
   181  0F28                     	;# 
   182  0F29                     	;# 
   183  0F2A                     	;# 
   184  0F2B                     	;# 
   185  0F2C                     	;# 
   186  0F2D                     	;# 
   187  0F2E                     	;# 
   188  0F2F                     	;# 
   189  0F8C                     	;# 
   190  0F8D                     	;# 
   191  0F91                     	;# 
   192  0F95                     	;# 
   193  0F96                     	;# 
   194  0F97                     	;# 
   195  0F9C                     	;# 
   196  0F9D                     	;# 
   197  0F9E                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0111                     	;# 
   258  0112                     	;# 
   259  0113                     	;# 
   260  0114                     	;# 
   261  0115                     	;# 
   262  0116                     	;# 
   263  0117                     	;# 
   264  0118                     	;# 
   265  0119                     	;# 
   266  011D                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  018E                     	;# 
   270  0191                     	;# 
   271  0191                     	;# 
   272  0192                     	;# 
   273  0193                     	;# 
   274  0193                     	;# 
   275  0194                     	;# 
   276  0195                     	;# 
   277  0196                     	;# 
   278  0199                     	;# 
   279  019A                     	;# 
   280  019B                     	;# 
   281  019B                     	;# 
   282  019C                     	;# 
   283  019D                     	;# 
   284  019E                     	;# 
   285  019F                     	;# 
   286  020C                     	;# 
   287  020D                     	;# 
   288  0211                     	;# 
   289  0211                     	;# 
   290  0212                     	;# 
   291  0212                     	;# 
   292  0213                     	;# 
   293  0213                     	;# 
   294  0214                     	;# 
   295  0214                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0216                     	;# 
   300  0216                     	;# 
   301  0217                     	;# 
   302  0217                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  0393                     	;# 
   306  0394                     	;# 
   307  0395                     	;# 
   308  0396                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049E                     	;# 
   317  049F                     	;# 
   318  0611                     	;# 
   319  0612                     	;# 
   320  0613                     	;# 
   321  0613                     	;# 
   322  0614                     	;# 
   323  0615                     	;# 
   324  0616                     	;# 
   325  0616                     	;# 
   326  0617                     	;# 
   327  0618                     	;# 
   328  0619                     	;# 
   329  0619                     	;# 
   330  061A                     	;# 
   331  061B                     	;# 
   332  061C                     	;# 
   333  061C                     	;# 
   334  0691                     	;# 
   335  0692                     	;# 
   336  0693                     	;# 
   337  0694                     	;# 
   338  0695                     	;# 
   339  0F0F                     	;# 
   340  0F10                     	;# 
   341  0F11                     	;# 
   342  0F12                     	;# 
   343  0F13                     	;# 
   344  0F14                     	;# 
   345  0F15                     	;# 
   346  0F16                     	;# 
   347  0F17                     	;# 
   348  0F18                     	;# 
   349  0F19                     	;# 
   350  0F1A                     	;# 
   351  0F1B                     	;# 
   352  0F1C                     	;# 
   353  0F1D                     	;# 
   354  0F1E                     	;# 
   355  0F1F                     	;# 
   356  0F20                     	;# 
   357  0F21                     	;# 
   358  0F22                     	;# 
   359  0F23                     	;# 
   360  0F24                     	;# 
   361  0F25                     	;# 
   362  0F26                     	;# 
   363  0F27                     	;# 
   364  0F28                     	;# 
   365  0F29                     	;# 
   366  0F2A                     	;# 
   367  0F2B                     	;# 
   368  0F2C                     	;# 
   369  0F2D                     	;# 
   370  0F2E                     	;# 
   371  0F2F                     	;# 
   372  0F8C                     	;# 
   373  0F8D                     	;# 
   374  0F91                     	;# 
   375  0F95                     	;# 
   376  0F96                     	;# 
   377  0F97                     	;# 
   378  0F9C                     	;# 
   379  0F9D                     	;# 
   380  0F9E                     	;# 
   381  0FE3                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000D                     	;# 
   407  000E                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0093                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009E                     	;# 
   436  009F                     	;# 
   437  010C                     	;# 
   438  010D                     	;# 
   439  010E                     	;# 
   440  0111                     	;# 
   441  0112                     	;# 
   442  0113                     	;# 
   443  0114                     	;# 
   444  0115                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  0118                     	;# 
   448  0119                     	;# 
   449  011D                     	;# 
   450  018C                     	;# 
   451  018D                     	;# 
   452  018E                     	;# 
   453  0191                     	;# 
   454  0191                     	;# 
   455  0192                     	;# 
   456  0193                     	;# 
   457  0193                     	;# 
   458  0194                     	;# 
   459  0195                     	;# 
   460  0196                     	;# 
   461  0199                     	;# 
   462  019A                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019C                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019F                     	;# 
   469  020C                     	;# 
   470  020D                     	;# 
   471  0211                     	;# 
   472  0211                     	;# 
   473  0212                     	;# 
   474  0212                     	;# 
   475  0213                     	;# 
   476  0213                     	;# 
   477  0214                     	;# 
   478  0214                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0216                     	;# 
   483  0216                     	;# 
   484  0217                     	;# 
   485  0217                     	;# 
   486  0391                     	;# 
   487  0392                     	;# 
   488  0393                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  0498                     	;# 
   493  0498                     	;# 
   494  0499                     	;# 
   495  049A                     	;# 
   496  049B                     	;# 
   497  049B                     	;# 
   498  049C                     	;# 
   499  049E                     	;# 
   500  049F                     	;# 
   501  0611                     	;# 
   502  0612                     	;# 
   503  0613                     	;# 
   504  0613                     	;# 
   505  0614                     	;# 
   506  0615                     	;# 
   507  0616                     	;# 
   508  0616                     	;# 
   509  0617                     	;# 
   510  0618                     	;# 
   511  0619                     	;# 
   512  0619                     	;# 
   513  061A                     	;# 
   514  061B                     	;# 
   515  061C                     	;# 
   516  061C                     	;# 
   517  0691                     	;# 
   518  0692                     	;# 
   519  0693                     	;# 
   520  0694                     	;# 
   521  0695                     	;# 
   522  0F0F                     	;# 
   523  0F10                     	;# 
   524  0F11                     	;# 
   525  0F12                     	;# 
   526  0F13                     	;# 
   527  0F14                     	;# 
   528  0F15                     	;# 
   529  0F16                     	;# 
   530  0F17                     	;# 
   531  0F18                     	;# 
   532  0F19                     	;# 
   533  0F1A                     	;# 
   534  0F1B                     	;# 
   535  0F1C                     	;# 
   536  0F1D                     	;# 
   537  0F1E                     	;# 
   538  0F1F                     	;# 
   539  0F20                     	;# 
   540  0F21                     	;# 
   541  0F22                     	;# 
   542  0F23                     	;# 
   543  0F24                     	;# 
   544  0F25                     	;# 
   545  0F26                     	;# 
   546  0F27                     	;# 
   547  0F28                     	;# 
   548  0F29                     	;# 
   549  0F2A                     	;# 
   550  0F2B                     	;# 
   551  0F2C                     	;# 
   552  0F2D                     	;# 
   553  0F2E                     	;# 
   554  0F2F                     	;# 
   555  0F8C                     	;# 
   556  0F8D                     	;# 
   557  0F91                     	;# 
   558  0F95                     	;# 
   559  0F96                     	;# 
   560  0F97                     	;# 
   561  0F9C                     	;# 
   562  0F9D                     	;# 
   563  0F9E                     	;# 
   564  0FE3                     	;# 
   565  0FE4                     	;# 
   566  0FE5                     	;# 
   567  0FE6                     	;# 
   568  0FE7                     	;# 
   569  0FE8                     	;# 
   570  0FE9                     	;# 
   571  0FEA                     	;# 
   572  0FEB                     	;# 
   573  0FED                     	;# 
   574  0FEE                     	;# 
   575  0FEF                     	;# 
   576  0000                     	;# 
   577  0001                     	;# 
   578  0002                     	;# 
   579  0003                     	;# 
   580  0004                     	;# 
   581  0005                     	;# 
   582  0006                     	;# 
   583  0007                     	;# 
   584  0008                     	;# 
   585  0009                     	;# 
   586  000A                     	;# 
   587  000B                     	;# 
   588  000C                     	;# 
   589  000D                     	;# 
   590  000E                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0015                     	;# 
   595  0016                     	;# 
   596  0016                     	;# 
   597  0017                     	;# 
   598  0018                     	;# 
   599  0019                     	;# 
   600  001A                     	;# 
   601  001B                     	;# 
   602  001C                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0095                     	;# 
   610  0096                     	;# 
   611  0097                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  009F                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010E                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0113                     	;# 
   626  0114                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011D                     	;# 
   633  018C                     	;# 
   634  018D                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0199                     	;# 
   645  019A                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0391                     	;# 
   670  0392                     	;# 
   671  0393                     	;# 
   672  0394                     	;# 
   673  0395                     	;# 
   674  0396                     	;# 
   675  0498                     	;# 
   676  0498                     	;# 
   677  0499                     	;# 
   678  049A                     	;# 
   679  049B                     	;# 
   680  049B                     	;# 
   681  049C                     	;# 
   682  049E                     	;# 
   683  049F                     	;# 
   684  0611                     	;# 
   685  0612                     	;# 
   686  0613                     	;# 
   687  0613                     	;# 
   688  0614                     	;# 
   689  0615                     	;# 
   690  0616                     	;# 
   691  0616                     	;# 
   692  0617                     	;# 
   693  0618                     	;# 
   694  0619                     	;# 
   695  0619                     	;# 
   696  061A                     	;# 
   697  061B                     	;# 
   698  061C                     	;# 
   699  061C                     	;# 
   700  0691                     	;# 
   701  0692                     	;# 
   702  0693                     	;# 
   703  0694                     	;# 
   704  0695                     	;# 
   705  0F0F                     	;# 
   706  0F10                     	;# 
   707  0F11                     	;# 
   708  0F12                     	;# 
   709  0F13                     	;# 
   710  0F14                     	;# 
   711  0F15                     	;# 
   712  0F16                     	;# 
   713  0F17                     	;# 
   714  0F18                     	;# 
   715  0F19                     	;# 
   716  0F1A                     	;# 
   717  0F1B                     	;# 
   718  0F1C                     	;# 
   719  0F1D                     	;# 
   720  0F1E                     	;# 
   721  0F1F                     	;# 
   722  0F20                     	;# 
   723  0F21                     	;# 
   724  0F22                     	;# 
   725  0F23                     	;# 
   726  0F24                     	;# 
   727  0F25                     	;# 
   728  0F26                     	;# 
   729  0F27                     	;# 
   730  0F28                     	;# 
   731  0F29                     	;# 
   732  0F2A                     	;# 
   733  0F2B                     	;# 
   734  0F2C                     	;# 
   735  0F2D                     	;# 
   736  0F2E                     	;# 
   737  0F2F                     	;# 
   738  0F8C                     	;# 
   739  0F8D                     	;# 
   740  0F91                     	;# 
   741  0F95                     	;# 
   742  0F96                     	;# 
   743  0F97                     	;# 
   744  0F9C                     	;# 
   745  0F9D                     	;# 
   746  0F9E                     	;# 
   747  0FE3                     	;# 
   748  0FE4                     	;# 
   749  0FE5                     	;# 
   750  0FE6                     	;# 
   751  0FE7                     	;# 
   752  0FE8                     	;# 
   753  0FE9                     	;# 
   754  0FEA                     	;# 
   755  0FEB                     	;# 
   756  0FED                     	;# 
   757  0FEE                     	;# 
   758  0FEF                     	;# 
   759  0000                     	;# 
   760  0001                     	;# 
   761  0002                     	;# 
   762  0003                     	;# 
   763  0004                     	;# 
   764  0005                     	;# 
   765  0006                     	;# 
   766  0007                     	;# 
   767  0008                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  0011                     	;# 
   775  0012                     	;# 
   776  0013                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  008C                     	;# 
   787  008D                     	;# 
   788  008E                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0093                     	;# 
   792  0095                     	;# 
   793  0096                     	;# 
   794  0097                     	;# 
   795  0099                     	;# 
   796  009A                     	;# 
   797  009B                     	;# 
   798  009B                     	;# 
   799  009C                     	;# 
   800  009D                     	;# 
   801  009E                     	;# 
   802  009F                     	;# 
   803  010C                     	;# 
   804  010D                     	;# 
   805  010E                     	;# 
   806  0111                     	;# 
   807  0112                     	;# 
   808  0113                     	;# 
   809  0114                     	;# 
   810  0115                     	;# 
   811  0116                     	;# 
   812  0117                     	;# 
   813  0118                     	;# 
   814  0119                     	;# 
   815  011D                     	;# 
   816  018C                     	;# 
   817  018D                     	;# 
   818  018E                     	;# 
   819  0191                     	;# 
   820  0191                     	;# 
   821  0192                     	;# 
   822  0193                     	;# 
   823  0193                     	;# 
   824  0194                     	;# 
   825  0195                     	;# 
   826  0196                     	;# 
   827  0199                     	;# 
   828  019A                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019E                     	;# 
   834  019F                     	;# 
   835  020C                     	;# 
   836  020D                     	;# 
   837  0211                     	;# 
   838  0211                     	;# 
   839  0212                     	;# 
   840  0212                     	;# 
   841  0213                     	;# 
   842  0213                     	;# 
   843  0214                     	;# 
   844  0214                     	;# 
   845  0215                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0216                     	;# 
   849  0216                     	;# 
   850  0217                     	;# 
   851  0217                     	;# 
   852  0391                     	;# 
   853  0392                     	;# 
   854  0393                     	;# 
   855  0394                     	;# 
   856  0395                     	;# 
   857  0396                     	;# 
   858  0498                     	;# 
   859  0498                     	;# 
   860  0499                     	;# 
   861  049A                     	;# 
   862  049B                     	;# 
   863  049B                     	;# 
   864  049C                     	;# 
   865  049E                     	;# 
   866  049F                     	;# 
   867  0611                     	;# 
   868  0612                     	;# 
   869  0613                     	;# 
   870  0613                     	;# 
   871  0614                     	;# 
   872  0615                     	;# 
   873  0616                     	;# 
   874  0616                     	;# 
   875  0617                     	;# 
   876  0618                     	;# 
   877  0619                     	;# 
   878  0619                     	;# 
   879  061A                     	;# 
   880  061B                     	;# 
   881  061C                     	;# 
   882  061C                     	;# 
   883  0691                     	;# 
   884  0692                     	;# 
   885  0693                     	;# 
   886  0694                     	;# 
   887  0695                     	;# 
   888  0F0F                     	;# 
   889  0F10                     	;# 
   890  0F11                     	;# 
   891  0F12                     	;# 
   892  0F13                     	;# 
   893  0F14                     	;# 
   894  0F15                     	;# 
   895  0F16                     	;# 
   896  0F17                     	;# 
   897  0F18                     	;# 
   898  0F19                     	;# 
   899  0F1A                     	;# 
   900  0F1B                     	;# 
   901  0F1C                     	;# 
   902  0F1D                     	;# 
   903  0F1E                     	;# 
   904  0F1F                     	;# 
   905  0F20                     	;# 
   906  0F21                     	;# 
   907  0F22                     	;# 
   908  0F23                     	;# 
   909  0F24                     	;# 
   910  0F25                     	;# 
   911  0F26                     	;# 
   912  0F27                     	;# 
   913  0F28                     	;# 
   914  0F29                     	;# 
   915  0F2A                     	;# 
   916  0F2B                     	;# 
   917  0F2C                     	;# 
   918  0F2D                     	;# 
   919  0F2E                     	;# 
   920  0F2F                     	;# 
   921  0F8C                     	;# 
   922  0F8D                     	;# 
   923  0F91                     	;# 
   924  0F95                     	;# 
   925  0F96                     	;# 
   926  0F97                     	;# 
   927  0F9C                     	;# 
   928  0F9D                     	;# 
   929  0F9E                     	;# 
   930  0FE3                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0013                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0093                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  009F                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0111                     	;# 
   990  0112                     	;# 
   991  0113                     	;# 
   992  0114                     	;# 
   993  0115                     	;# 
   994  0116                     	;# 
   995  0117                     	;# 
   996  0118                     	;# 
   997  0119                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0199                     	;# 
  1011  019A                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019C                     	;# 
  1015  019D                     	;# 
  1016  019E                     	;# 
  1017  019F                     	;# 
  1018  020C                     	;# 
  1019  020D                     	;# 
  1020  0211                     	;# 
  1021  0211                     	;# 
  1022  0212                     	;# 
  1023  0212                     	;# 
  1024  0213                     	;# 
  1025  0213                     	;# 
  1026  0214                     	;# 
  1027  0214                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0216                     	;# 
  1032  0216                     	;# 
  1033  0217                     	;# 
  1034  0217                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0498                     	;# 
  1042  0498                     	;# 
  1043  0499                     	;# 
  1044  049A                     	;# 
  1045  049B                     	;# 
  1046  049B                     	;# 
  1047  049C                     	;# 
  1048  049E                     	;# 
  1049  049F                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0613                     	;# 
  1054  0614                     	;# 
  1055  0615                     	;# 
  1056  0616                     	;# 
  1057  0616                     	;# 
  1058  0617                     	;# 
  1059  0618                     	;# 
  1060  0619                     	;# 
  1061  0619                     	;# 
  1062  061A                     	;# 
  1063  061B                     	;# 
  1064  061C                     	;# 
  1065  061C                     	;# 
  1066  0691                     	;# 
  1067  0692                     	;# 
  1068  0693                     	;# 
  1069  0694                     	;# 
  1070  0695                     	;# 
  1071  0F0F                     	;# 
  1072  0F10                     	;# 
  1073  0F11                     	;# 
  1074  0F12                     	;# 
  1075  0F13                     	;# 
  1076  0F14                     	;# 
  1077  0F15                     	;# 
  1078  0F16                     	;# 
  1079  0F17                     	;# 
  1080  0F18                     	;# 
  1081  0F19                     	;# 
  1082  0F1A                     	;# 
  1083  0F1B                     	;# 
  1084  0F1C                     	;# 
  1085  0F1D                     	;# 
  1086  0F1E                     	;# 
  1087  0F1F                     	;# 
  1088  0F20                     	;# 
  1089  0F21                     	;# 
  1090  0F22                     	;# 
  1091  0F23                     	;# 
  1092  0F24                     	;# 
  1093  0F25                     	;# 
  1094  0F26                     	;# 
  1095  0F27                     	;# 
  1096  0F28                     	;# 
  1097  0F29                     	;# 
  1098  0F2A                     	;# 
  1099  0F2B                     	;# 
  1100  0F2C                     	;# 
  1101  0F2D                     	;# 
  1102  0F2E                     	;# 
  1103  0F2F                     	;# 
  1104  0F8C                     	;# 
  1105  0F8D                     	;# 
  1106  0F91                     	;# 
  1107  0F95                     	;# 
  1108  0F96                     	;# 
  1109  0F97                     	;# 
  1110  0F9C                     	;# 
  1111  0F9D                     	;# 
  1112  0F9E                     	;# 
  1113  0FE3                     	;# 
  1114  0FE4                     	;# 
  1115  0FE5                     	;# 
  1116  0FE6                     	;# 
  1117  0FE7                     	;# 
  1118  0FE8                     	;# 
  1119  0FE9                     	;# 
  1120  0FEA                     	;# 
  1121  0FEB                     	;# 
  1122  0FED                     	;# 
  1123  0FEE                     	;# 
  1124  0FEF                     	;# 
  1125  0000                     	;# 
  1126  0001                     	;# 
  1127  0002                     	;# 
  1128  0003                     	;# 
  1129  0004                     	;# 
  1130  0005                     	;# 
  1131  0006                     	;# 
  1132  0007                     	;# 
  1133  0008                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  0011                     	;# 
  1141  0012                     	;# 
  1142  0013                     	;# 
  1143  0015                     	;# 
  1144  0016                     	;# 
  1145  0016                     	;# 
  1146  0017                     	;# 
  1147  0018                     	;# 
  1148  0019                     	;# 
  1149  001A                     	;# 
  1150  001B                     	;# 
  1151  001C                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0095                     	;# 
  1159  0096                     	;# 
  1160  0097                     	;# 
  1161  0099                     	;# 
  1162  009A                     	;# 
  1163  009B                     	;# 
  1164  009B                     	;# 
  1165  009C                     	;# 
  1166  009D                     	;# 
  1167  009E                     	;# 
  1168  009F                     	;# 
  1169  010C                     	;# 
  1170  010D                     	;# 
  1171  010E                     	;# 
  1172  0111                     	;# 
  1173  0112                     	;# 
  1174  0113                     	;# 
  1175  0114                     	;# 
  1176  0115                     	;# 
  1177  0116                     	;# 
  1178  0117                     	;# 
  1179  0118                     	;# 
  1180  0119                     	;# 
  1181  011D                     	;# 
  1182  018C                     	;# 
  1183  018D                     	;# 
  1184  018E                     	;# 
  1185  0191                     	;# 
  1186  0191                     	;# 
  1187  0192                     	;# 
  1188  0193                     	;# 
  1189  0193                     	;# 
  1190  0194                     	;# 
  1191  0195                     	;# 
  1192  0196                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019D                     	;# 
  1199  019E                     	;# 
  1200  019F                     	;# 
  1201  020C                     	;# 
  1202  020D                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0391                     	;# 
  1219  0392                     	;# 
  1220  0393                     	;# 
  1221  0394                     	;# 
  1222  0395                     	;# 
  1223  0396                     	;# 
  1224  0498                     	;# 
  1225  0498                     	;# 
  1226  0499                     	;# 
  1227  049A                     	;# 
  1228  049B                     	;# 
  1229  049B                     	;# 
  1230  049C                     	;# 
  1231  049E                     	;# 
  1232  049F                     	;# 
  1233  0611                     	;# 
  1234  0612                     	;# 
  1235  0613                     	;# 
  1236  0613                     	;# 
  1237  0614                     	;# 
  1238  0615                     	;# 
  1239  0616                     	;# 
  1240  0616                     	;# 
  1241  0617                     	;# 
  1242  0618                     	;# 
  1243  0619                     	;# 
  1244  0619                     	;# 
  1245  061A                     	;# 
  1246  061B                     	;# 
  1247  061C                     	;# 
  1248  061C                     	;# 
  1249  0691                     	;# 
  1250  0692                     	;# 
  1251  0693                     	;# 
  1252  0694                     	;# 
  1253  0695                     	;# 
  1254  0F0F                     	;# 
  1255  0F10                     	;# 
  1256  0F11                     	;# 
  1257  0F12                     	;# 
  1258  0F13                     	;# 
  1259  0F14                     	;# 
  1260  0F15                     	;# 
  1261  0F16                     	;# 
  1262  0F17                     	;# 
  1263  0F18                     	;# 
  1264  0F19                     	;# 
  1265  0F1A                     	;# 
  1266  0F1B                     	;# 
  1267  0F1C                     	;# 
  1268  0F1D                     	;# 
  1269  0F1E                     	;# 
  1270  0F1F                     	;# 
  1271  0F20                     	;# 
  1272  0F21                     	;# 
  1273  0F22                     	;# 
  1274  0F23                     	;# 
  1275  0F24                     	;# 
  1276  0F25                     	;# 
  1277  0F26                     	;# 
  1278  0F27                     	;# 
  1279  0F28                     	;# 
  1280  0F29                     	;# 
  1281  0F2A                     	;# 
  1282  0F2B                     	;# 
  1283  0F2C                     	;# 
  1284  0F2D                     	;# 
  1285  0F2E                     	;# 
  1286  0F2F                     	;# 
  1287  0F8C                     	;# 
  1288  0F8D                     	;# 
  1289  0F91                     	;# 
  1290  0F95                     	;# 
  1291  0F96                     	;# 
  1292  0F97                     	;# 
  1293  0F9C                     	;# 
  1294  0F9D                     	;# 
  1295  0F9E                     	;# 
  1296  0FE3                     	;# 
  1297  0FE4                     	;# 
  1298  0FE5                     	;# 
  1299  0FE6                     	;# 
  1300  0FE7                     	;# 
  1301  0FE8                     	;# 
  1302  0FE9                     	;# 
  1303  0FEA                     	;# 
  1304  0FEB                     	;# 
  1305  0FED                     	;# 
  1306  0FEE                     	;# 
  1307  0FEF                     	;# 
  1308  0000                     	;# 
  1309  0001                     	;# 
  1310  0002                     	;# 
  1311  0003                     	;# 
  1312  0004                     	;# 
  1313  0005                     	;# 
  1314  0006                     	;# 
  1315  0007                     	;# 
  1316  0008                     	;# 
  1317  0009                     	;# 
  1318  000A                     	;# 
  1319  000B                     	;# 
  1320  000C                     	;# 
  1321  000D                     	;# 
  1322  000E                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0013                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0111                     	;# 
  1356  0112                     	;# 
  1357  0113                     	;# 
  1358  0114                     	;# 
  1359  0115                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  0118                     	;# 
  1363  0119                     	;# 
  1364  011D                     	;# 
  1365  018C                     	;# 
  1366  018D                     	;# 
  1367  018E                     	;# 
  1368  0191                     	;# 
  1369  0191                     	;# 
  1370  0192                     	;# 
  1371  0193                     	;# 
  1372  0193                     	;# 
  1373  0194                     	;# 
  1374  0195                     	;# 
  1375  0196                     	;# 
  1376  0199                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019E                     	;# 
  1383  019F                     	;# 
  1384  020C                     	;# 
  1385  020D                     	;# 
  1386  0211                     	;# 
  1387  0211                     	;# 
  1388  0212                     	;# 
  1389  0212                     	;# 
  1390  0213                     	;# 
  1391  0213                     	;# 
  1392  0214                     	;# 
  1393  0214                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0216                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0217                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  0498                     	;# 
  1408  0498                     	;# 
  1409  0499                     	;# 
  1410  049A                     	;# 
  1411  049B                     	;# 
  1412  049B                     	;# 
  1413  049C                     	;# 
  1414  049E                     	;# 
  1415  049F                     	;# 
  1416  0611                     	;# 
  1417  0612                     	;# 
  1418  0613                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0615                     	;# 
  1422  0616                     	;# 
  1423  0616                     	;# 
  1424  0617                     	;# 
  1425  0618                     	;# 
  1426  0619                     	;# 
  1427  0619                     	;# 
  1428  061A                     	;# 
  1429  061B                     	;# 
  1430  061C                     	;# 
  1431  061C                     	;# 
  1432  0691                     	;# 
  1433  0692                     	;# 
  1434  0693                     	;# 
  1435  0694                     	;# 
  1436  0695                     	;# 
  1437  0F0F                     	;# 
  1438  0F10                     	;# 
  1439  0F11                     	;# 
  1440  0F12                     	;# 
  1441  0F13                     	;# 
  1442  0F14                     	;# 
  1443  0F15                     	;# 
  1444  0F16                     	;# 
  1445  0F17                     	;# 
  1446  0F18                     	;# 
  1447  0F19                     	;# 
  1448  0F1A                     	;# 
  1449  0F1B                     	;# 
  1450  0F1C                     	;# 
  1451  0F1D                     	;# 
  1452  0F1E                     	;# 
  1453  0F1F                     	;# 
  1454  0F20                     	;# 
  1455  0F21                     	;# 
  1456  0F22                     	;# 
  1457  0F23                     	;# 
  1458  0F24                     	;# 
  1459  0F25                     	;# 
  1460  0F26                     	;# 
  1461  0F27                     	;# 
  1462  0F28                     	;# 
  1463  0F29                     	;# 
  1464  0F2A                     	;# 
  1465  0F2B                     	;# 
  1466  0F2C                     	;# 
  1467  0F2D                     	;# 
  1468  0F2E                     	;# 
  1469  0F2F                     	;# 
  1470  0F8C                     	;# 
  1471  0F8D                     	;# 
  1472  0F91                     	;# 
  1473  0F95                     	;# 
  1474  0F96                     	;# 
  1475  0F97                     	;# 
  1476  0F9C                     	;# 
  1477  0F9D                     	;# 
  1478  0F9E                     	;# 
  1479  0FE3                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0011                     	;# 
  1507  0012                     	;# 
  1508  0013                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0093                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  009F                     	;# 
  1535  010C                     	;# 
  1536  010D                     	;# 
  1537  010E                     	;# 
  1538  0111                     	;# 
  1539  0112                     	;# 
  1540  0113                     	;# 
  1541  0114                     	;# 
  1542  0115                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  0118                     	;# 
  1546  0119                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020C                     	;# 
  1568  020D                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0391                     	;# 
  1585  0392                     	;# 
  1586  0393                     	;# 
  1587  0394                     	;# 
  1588  0395                     	;# 
  1589  0396                     	;# 
  1590  0498                     	;# 
  1591  0498                     	;# 
  1592  0499                     	;# 
  1593  049A                     	;# 
  1594  049B                     	;# 
  1595  049B                     	;# 
  1596  049C                     	;# 
  1597  049E                     	;# 
  1598  049F                     	;# 
  1599  0611                     	;# 
  1600  0612                     	;# 
  1601  0613                     	;# 
  1602  0613                     	;# 
  1603  0614                     	;# 
  1604  0615                     	;# 
  1605  0616                     	;# 
  1606  0616                     	;# 
  1607  0617                     	;# 
  1608  0618                     	;# 
  1609  0619                     	;# 
  1610  0619                     	;# 
  1611  061A                     	;# 
  1612  061B                     	;# 
  1613  061C                     	;# 
  1614  061C                     	;# 
  1615  0691                     	;# 
  1616  0692                     	;# 
  1617  0693                     	;# 
  1618  0694                     	;# 
  1619  0695                     	;# 
  1620  0F0F                     	;# 
  1621  0F10                     	;# 
  1622  0F11                     	;# 
  1623  0F12                     	;# 
  1624  0F13                     	;# 
  1625  0F14                     	;# 
  1626  0F15                     	;# 
  1627  0F16                     	;# 
  1628  0F17                     	;# 
  1629  0F18                     	;# 
  1630  0F19                     	;# 
  1631  0F1A                     	;# 
  1632  0F1B                     	;# 
  1633  0F1C                     	;# 
  1634  0F1D                     	;# 
  1635  0F1E                     	;# 
  1636  0F1F                     	;# 
  1637  0F20                     	;# 
  1638  0F21                     	;# 
  1639  0F22                     	;# 
  1640  0F23                     	;# 
  1641  0F24                     	;# 
  1642  0F25                     	;# 
  1643  0F26                     	;# 
  1644  0F27                     	;# 
  1645  0F28                     	;# 
  1646  0F29                     	;# 
  1647  0F2A                     	;# 
  1648  0F2B                     	;# 
  1649  0F2C                     	;# 
  1650  0F2D                     	;# 
  1651  0F2E                     	;# 
  1652  0F2F                     	;# 
  1653  0F8C                     	;# 
  1654  0F8D                     	;# 
  1655  0F91                     	;# 
  1656  0F95                     	;# 
  1657  0F96                     	;# 
  1658  0F97                     	;# 
  1659  0F9C                     	;# 
  1660  0F9D                     	;# 
  1661  0F9E                     	;# 
  1662  0FE3                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674                           
  1675                           	psect	idataBANK0
  1676  0000                     __pidataBANK0:	
  1677  000B                     _INTCONbits	set	11
  1678  000C                     _PORTAbits	set	12
  1679  000E                     _PORTCbits	set	14
  1680  009D                     _ADCON0	set	157
  1681  009E                     _ADCON1	set	158
  1682  009F                     _ADCON2	set	159
  1683  0095                     _OPTION_REGbits	set	149
  1684  0099                     _OSCCON	set	153
  1685  008C                     _TRISAbits	set	140
  1686  008D                     _TRISBbits	set	141
  1687  008E                     _TRISCbits	set	142
  1688  0117                     _FVRCON	set	279
  1689  010C                     _LATAbits	set	268
  1690  010D                     _LATBbits	set	269
  1691  010E                     _LATCbits	set	270
  1692  018C                     _ANSELA	set	396
  1693  018D                     _ANSELB	set	397
  1694  018E                     _ANSELC	set	398
  1695  020C                     _WPUAbits	set	524
  1696                           
  1697                           	psect	bssBANK0
  1698  0020                     __pbssBANK0:	
  1699  0020                     _rfStatus:	
  1700  0020                     	ds	4
  1701  0024                     RfHalTickRxTh@packet:	
  1702  0024                     	ds	1
  1703  0025                     RfHalTickRxTh@pktRxByteIndex:	
  1704  0025                     	ds	1
  1705  0026                     RfHalTickRxTh@rxByteTimeout:	
  1706  0026                     	ds	1
  1707  0027                     RfPacketsTickTh@packet:	
  1708  0027                     	ds	1
  1709  0028                     RfPacketsTickTh@timeout:	
  1710  0028                     	ds	1
  1711  0029                     _dl1:	
  1712  0029                     	ds	1
  1713  002A                     _dl2:	
  1714  002A                     	ds	1
  1715  002B                     _isr:	
  1716  002B                     	ds	1
  1717  002C                     _rfPk:	
  1718  002C                     	ds	1
  1719  002D                     _rfPkCrc:	
  1720  002D                     	ds	1
  1721  002E                     _rfPkResets:	
  1722  002E                     	ds	1
  1723  002F                     _rfPkTime:	
  1724  002F                     	ds	1
  1725  0030                     _worried:	
  1726  0030                     	ds	1
  1727  0031                     _halPkTh:	
  1728  0031                     	ds	2
  1729  0033                     _halRxBfTh:	
  1730  0033                     	ds	2
  1731  0035                     _halTxBfTh:	
  1732  0035                     	ds	2
  1733  0037                     _rfTrcvStatus:	
  1734  0037                     	ds	2
  1735                           
  1736                           	psect	dataBANK0
  1737  0044                     __pdataBANK0:	
  1738  0044                     _rfRxCC:	
  1739  0044                     	ds	4
  1740                           
  1741                           	psect	bssBANK1
  1742  00A0                     __pbssBANK1:	
  1743  00A0                     _rfPackets:	
  1744  00A0                     	ds	56
  1745                           
  1746                           	psect	bssBANK2
  1747  0120                     __pbssBANK2:	
  1748  0120                     _rfRxBf:	
  1749  0120                     	ds	64
  1750                           
  1751                           	psect	clrtext
  1752  0105                     clear_ram0:	
  1753                           ;	Called with FSR0 containing the base address, and
  1754                           ;	WREG with the size to clear
  1755                           
  1756  0105  0064               	clrwdt	;clear the watchdog before getting into this loop
  1757  0106                     clrloop0:	
  1758  0106  0180               	clrf	0	;clear RAM location pointed to by FSR
  1759  0107  3101               	addfsr 0,1
  1760  0108  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1761  0109  2906               	goto	clrloop0	;have we reached the end yet?
  1762  010A  3400               	retlw	0	;all done for this memory range, return
  1763                           
  1764                           	psect	cstackCOMMON
  1765  0070                     __pcstackCOMMON:	
  1766  0070                     ?_SPI_Write:	
  1767  0070                     ?__CCBufInit:	
  1768                           ; 0 bytes @ 0x0
  1769                           
  1770  0070                     ?_RfTrcvMode:	
  1771                           ; 0 bytes @ 0x0
  1772                           
  1773  0070                     ?_RfHalGetReturn:	
  1774                           ; 0 bytes @ 0x0
  1775                           
  1776  0070                     ?__CCBufRdReverse:	
  1777                           ; 0 bytes @ 0x0
  1778                           
  1779  0070                     ?__CCBufWrByte:	
  1780                           ; 0 bytes @ 0x0
  1781                           
  1782  0070                     ?__CCBufReset:	
  1783                           ; 0 bytes @ 0x0
  1784                           
  1785  0070                     ?_AdcInit:	
  1786                           ; 0 bytes @ 0x0
  1787                           
  1788  0070                     ?_ExtIntInit:	
  1789                           ; 0 bytes @ 0x0
  1790                           
  1791  0070                     ?_extInt:	
  1792                           ; 0 bytes @ 0x0
  1793                           
  1794  0070                     ?_RfTrcvPut:	
  1795                           ; 0 bytes @ 0x0
  1796                           
  1797  0070                     ?_RfTrcvStatus:	
  1798                           ; 0 bytes @ 0x0
  1799                           
  1800  0070                     ?_RfTrcvSetup:	
  1801                           ; 0 bytes @ 0x0
  1802                           
  1803  0070                     ?_MRF49XAInit:	
  1804                           ; 0 bytes @ 0x0
  1805                           
  1806  0070                     ?_RfHalInit:	
  1807                           ; 0 bytes @ 0x0
  1808                           
  1809  0070                     ?_RfHalStatemachine:	
  1810                           ; 0 bytes @ 0x0
  1811                           
  1812  0070                     ?_RfPacketsHandleClient:	
  1813                           ; 0 bytes @ 0x0
  1814                           
  1815  0070                     ?_SysInitGpio:	
  1816                           ; 0 bytes @ 0x0
  1817                           
  1818  0070                     ?_main:	
  1819                           ; 0 bytes @ 0x0
  1820                           
  1821  0070                     ?i1_RfTrcvPut:	
  1822                           ; 0 bytes @ 0x0
  1823                           
  1824  0070                     ?i1_RfTrcvStatus:	
  1825                           ; 0 bytes @ 0x0
  1826                           
  1827  0070                     ?i1_RfTrcvSetup:	
  1828                           ; 0 bytes @ 0x0
  1829                           
  1830  0070                     ??i1_SPI_Read:	
  1831                           ; 0 bytes @ 0x0
  1832                           
  1833  0070                     ?i1_SPI_Write:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0070                     ??i1_SPI_Write:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0070                     ?i1_RfTrcvMode:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0070                     ?i1_RfHalStatemachine:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0070                     ??i1__CCBufCanWr:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0070                     ?i1__CCBufWrByte:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  0070                     ?_mrf49XaIsr:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0070                     ?_SPI_Read:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0070                     ?_RfHalTxGet:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0070                     ?_RfHalAnyFree:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0070                     ?_RfHalGetFree:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0070                     ?__CCBufCanRd:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0070                     ?__CCBufRdByte:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0070                     ?_RfHalRxPut:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0070                     ?_RfTrcvGet:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0070                     ?_RfTrcvCarrierPresent:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0070                     ?_RfHalTickTxTh:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0070                     ?_RfHalTickRxTh:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0070                     ?_RfHalRxGet:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_RfPacketsTickTh:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?__CCBufCanWr:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?i1_RfTrcvGet:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?i1_RfTrcvCrcTick:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?i1_SPI_Read:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?i1__CCBufCalcPt:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?i1__CCBufCanWr:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?i1_mrf49XaIsr:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     i1RfTrcvCrcTick@data:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     i1SPI_Read@data:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     i1SPI_Write@data:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     i1__CCBufCalcPt@move:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0x0
  1928  0070                     	ds	1
  1929  0071                     ??i1_RfTrcvGet:	
  1930  0071                     ?i1_MRF49XACommand:	
  1931                           ; 0 bytes @ 0x1
  1932                           
  1933  0071                     ??i1_RfTrcvStatus:	
  1934                           ; 0 bytes @ 0x1
  1935                           
  1936  0071                     ??i1_RfTrcvCrcTick:	
  1937                           ; 0 bytes @ 0x1
  1938                           
  1939  0071                     ??i1__CCBufCalcPt:	
  1940                           ; 0 bytes @ 0x1
  1941                           
  1942  0071                     i1RfTrcvGet@b:	
  1943                           ; 0 bytes @ 0x1
  1944                           
  1945  0071                     i1RfTrcvCrcTick@initial:	
  1946                           ; 1 bytes @ 0x1
  1947                           
  1948  0071                     i1__CCBufCalcPt@entry:	
  1949                           ; 1 bytes @ 0x1
  1950                           
  1951  0071                     i1MRF49XACommand@cmd:	
  1952                           ; 1 bytes @ 0x1
  1953                           
  1954                           
  1955                           ; 2 bytes @ 0x1
  1956  0071                     	ds	1
  1957  0072                     i1__CCBufCalcPt@result:	
  1958                           
  1959                           ; 1 bytes @ 0x2
  1960  0072                     	ds	1
  1961  0073                     ??i1_RfTrcvPut:	
  1962  0073                     ??i1_MRF49XACommand:	
  1963                           ; 0 bytes @ 0x3
  1964                           
  1965  0073                     ??i1__CCBufWrByte:	
  1966                           ; 0 bytes @ 0x3
  1967                           
  1968  0073                     i1RfTrcvPut@byte:	
  1969                           ; 0 bytes @ 0x3
  1970                           
  1971                           
  1972                           ; 1 bytes @ 0x3
  1973  0073                     	ds	1
  1974  0074                     ??i1_RfTrcvSetup:	
  1975  0074                     i1RfTrcvSetup@tx:	
  1976                           ; 0 bytes @ 0x4
  1977                           
  1978  0074                     i1__CCBufWrByte@data:	
  1979                           ; 1 bytes @ 0x4
  1980                           
  1981                           
  1982                           ; 1 bytes @ 0x4
  1983  0074                     	ds	1
  1984  0075                     ??i1_RfTrcvMode:	
  1985  0075                     i1RfTrcvMode@tx:	
  1986                           ; 0 bytes @ 0x5
  1987                           
  1988                           
  1989                           ; 1 bytes @ 0x5
  1990  0075                     	ds	1
  1991  0076                     ??i1_RfHalStatemachine:	
  1992                           
  1993                           ; 0 bytes @ 0x6
  1994  0076                     	ds	1
  1995  0077                     ??i1_mrf49XaIsr:	
  1996  0077                     i1mrf49XaIsr@retry:	
  1997                           ; 0 bytes @ 0x7
  1998                           
  1999                           
  2000                           ; 1 bytes @ 0x7
  2001  0077                     	ds	1
  2002  0078                     ??_extInt:	
  2003                           
  2004                           	psect	cstackBANK0
  2005  0039                     __pcstackBANK0:	
  2006                           ; 0 bytes @ 0x8
  2007                           
  2008  0039                     ??_SPI_Write:	
  2009  0039                     ??_SPI_Read:	
  2010                           ; 0 bytes @ 0x0
  2011                           
  2012  0039                     ??_RfHalGetReturn:	
  2013                           ; 0 bytes @ 0x0
  2014                           
  2015  0039                     ??_RfHalAnyFree:	
  2016                           ; 0 bytes @ 0x0
  2017                           
  2018  0039                     ??_RfHalGetFree:	
  2019                           ; 0 bytes @ 0x0
  2020                           
  2021  0039                     ??_RfHalRxPut:	
  2022                           ; 0 bytes @ 0x0
  2023                           
  2024  0039                     ??__CCBufReset:	
  2025                           ; 0 bytes @ 0x0
  2026                           
  2027  0039                     ??_AdcInit:	
  2028                           ; 0 bytes @ 0x0
  2029                           
  2030  0039                     ??_ExtIntInit:	
  2031                           ; 0 bytes @ 0x0
  2032                           
  2033  0039                     ??_RfHalRxGet:	
  2034                           ; 0 bytes @ 0x0
  2035                           
  2036  0039                     ??__CCBufCanWr:	
  2037                           ; 0 bytes @ 0x0
  2038                           
  2039  0039                     ??_SysInitGpio:	
  2040                           ; 0 bytes @ 0x0
  2041                           
  2042  0039                     ?_RfTrcvCrcTick:	
  2043                           ; 0 bytes @ 0x0
  2044                           
  2045  0039                     ?_RfHalTxPut:	
  2046                           ; 1 bytes @ 0x0
  2047                           
  2048  0039                     ?__CCBufCalcPt:	
  2049                           ; 1 bytes @ 0x0
  2050                           
  2051  0039                     ?___bmul:	
  2052                           ; 1 bytes @ 0x0
  2053                           
  2054  0039                     ?___lbmod:	
  2055                           ; 1 bytes @ 0x0
  2056                           
  2057  0039                     RfTrcvCrcTick@data:	
  2058                           ; 1 bytes @ 0x0
  2059                           
  2060  0039                     SPI_Read@data:	
  2061                           ; 1 bytes @ 0x0
  2062                           
  2063  0039                     SPI_Write@data:	
  2064                           ; 1 bytes @ 0x0
  2065                           
  2066  0039                     RfHalGetReturn@packet:	
  2067                           ; 1 bytes @ 0x0
  2068                           
  2069  0039                     RfHalRxPut@packet:	
  2070                           ; 1 bytes @ 0x0
  2071                           
  2072  0039                     RfHalTxPut@needAck:	
  2073                           ; 1 bytes @ 0x0
  2074                           
  2075  0039                     __CCBufCalcPt@move:	
  2076                           ; 1 bytes @ 0x0
  2077                           
  2078  0039                     ___bmul@multiplicand:	
  2079                           ; 1 bytes @ 0x0
  2080                           
  2081  0039                     ___lbmod@divisor:	
  2082                           ; 1 bytes @ 0x0
  2083                           
  2084                           
  2085                           ; 1 bytes @ 0x0
  2086  0039                     	ds	1
  2087  003A                     ?_MRF49XACommand:	
  2088  003A                     ??_RfTrcvGet:	
  2089                           ; 0 bytes @ 0x1
  2090                           
  2091  003A                     ??_RfTrcvStatus:	
  2092                           ; 0 bytes @ 0x1
  2093                           
  2094  003A                     ??_RfTrcvCarrierPresent:	
  2095                           ; 0 bytes @ 0x1
  2096                           
  2097  003A                     ??_RfTrcvCrcTick:	
  2098                           ; 0 bytes @ 0x1
  2099                           
  2100  003A                     ??_RfHalTxPut:	
  2101                           ; 0 bytes @ 0x1
  2102                           
  2103  003A                     ??__CCBufCalcPt:	
  2104                           ; 0 bytes @ 0x1
  2105                           
  2106  003A                     ??___bmul:	
  2107                           ; 0 bytes @ 0x1
  2108                           
  2109  003A                     ??___lbmod:	
  2110                           ; 0 bytes @ 0x1
  2111                           
  2112  003A                     RfTrcvGet@b:	
  2113                           ; 0 bytes @ 0x1
  2114                           
  2115  003A                     RfTrcvCrcTick@initial:	
  2116                           ; 1 bytes @ 0x1
  2117                           
  2118  003A                     __CCBufReset@i:	
  2119                           ; 1 bytes @ 0x1
  2120                           
  2121  003A                     __CCBufCalcPt@entry:	
  2122                           ; 1 bytes @ 0x1
  2123                           
  2124  003A                     ___bmul@product:	
  2125                           ; 1 bytes @ 0x1
  2126                           
  2127  003A                     MRF49XACommand@cmd:	
  2128                           ; 1 bytes @ 0x1
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x1
  2132  003A                     	ds	1
  2133  003B                     ??__CCBufInit:	
  2134  003B                     RfHalTxPut@packet:	
  2135                           ; 0 bytes @ 0x2
  2136                           
  2137  003B                     __CCBufCalcPt@result:	
  2138                           ; 1 bytes @ 0x2
  2139                           
  2140  003B                     ___bmul@multiplier:	
  2141                           ; 1 bytes @ 0x2
  2142                           
  2143  003B                     ___lbmod@dividend:	
  2144                           ; 1 bytes @ 0x2
  2145                           
  2146                           
  2147                           ; 1 bytes @ 0x2
  2148  003B                     	ds	1
  2149  003C                     ??_MRF49XACommand:	
  2150  003C                     ??_RfHalTxGet:	
  2151                           ; 0 bytes @ 0x3
  2152                           
  2153  003C                     ??__CCBufCanRd:	
  2154                           ; 0 bytes @ 0x3
  2155                           
  2156  003C                     ??__CCBufRdByte:	
  2157                           ; 0 bytes @ 0x3
  2158                           
  2159  003C                     ??__CCBufRdReverse:	
  2160                           ; 0 bytes @ 0x3
  2161                           
  2162  003C                     ??__CCBufWrByte:	
  2163                           ; 0 bytes @ 0x3
  2164                           
  2165  003C                     ??_RfTrcvPut:	
  2166                           ; 0 bytes @ 0x3
  2167                           
  2168  003C                     ?_RfPacketSimpleReply:	
  2169                           ; 0 bytes @ 0x3
  2170                           
  2171  003C                     RfTrcvPut@byte:	
  2172                           ; 0 bytes @ 0x3
  2173                           
  2174  003C                     RfHalTxGet@i:	
  2175                           ; 1 bytes @ 0x3
  2176                           
  2177  003C                     RfPacketSimpleReply@msg:	
  2178                           ; 1 bytes @ 0x3
  2179                           
  2180  003C                     __CCBufRdReverse@qty:	
  2181                           ; 1 bytes @ 0x3
  2182                           
  2183  003C                     ___lbmod@counter:	
  2184                           ; 1 bytes @ 0x3
  2185                           
  2186                           
  2187                           ; 1 bytes @ 0x3
  2188  003C                     	ds	1
  2189  003D                     ??_RfTrcvSetup:	
  2190  003D                     RfTrcvSetup@tx:	
  2191                           ; 0 bytes @ 0x4
  2192                           
  2193  003D                     RfPacketSimpleReply@needAck:	
  2194                           ; 1 bytes @ 0x4
  2195                           
  2196  003D                     __CCBufRdByte@res:	
  2197                           ; 1 bytes @ 0x4
  2198                           
  2199  003D                     __CCBufWrByte@data:	
  2200                           ; 1 bytes @ 0x4
  2201                           
  2202  003D                     ___lbmod@rem:	
  2203                           ; 1 bytes @ 0x4
  2204                           
  2205                           
  2206                           ; 1 bytes @ 0x4
  2207  003D                     	ds	1
  2208  003E                     ??_RfTrcvMode:	
  2209  003E                     ??_MRF49XAInit:	
  2210                           ; 0 bytes @ 0x5
  2211                           
  2212  003E                     ??_RfHalTickRxTh:	
  2213                           ; 0 bytes @ 0x5
  2214                           
  2215  003E                     ??_RfPacketSimpleReply:	
  2216                           ; 0 bytes @ 0x5
  2217                           
  2218  003E                     MRF49XAInit@i:	
  2219                           ; 0 bytes @ 0x5
  2220                           
  2221  003E                     RfTrcvMode@tx:	
  2222                           ; 1 bytes @ 0x5
  2223                           
  2224  003E                     RfPacketSimpleReply@nodeTmp:	
  2225                           ; 1 bytes @ 0x5
  2226                           
  2227                           
  2228                           ; 1 bytes @ 0x5
  2229  003E                     	ds	1
  2230  003F                     ??_RfHalInit:	
  2231  003F                     ??_RfHalTickTxTh:	
  2232                           ; 0 bytes @ 0x6
  2233                           
  2234  003F                     ??_RfHalStatemachine:	
  2235                           ; 0 bytes @ 0x6
  2236                           
  2237  003F                     MRF49XAInit@j:	
  2238                           ; 0 bytes @ 0x6
  2239                           
  2240  003F                     RfHalInit@i:	
  2241                           ; 1 bytes @ 0x6
  2242                           
  2243  003F                     RfPacketSimpleReply@packet:	
  2244                           ; 1 bytes @ 0x6
  2245                           
  2246                           
  2247                           ; 1 bytes @ 0x6
  2248  003F                     	ds	1
  2249  0040                     ??_mrf49XaIsr:	
  2250  0040                     ??_RfPacketsHandleClient:	
  2251                           ; 0 bytes @ 0x7
  2252                           
  2253  0040                     RfHalTickRxTh@pktLength:	
  2254                           ; 0 bytes @ 0x7
  2255                           
  2256  0040                     RfPacketsHandleClient@packet:	
  2257                           ; 1 bytes @ 0x7
  2258                           
  2259  0040                     mrf49XaIsr@retry:	
  2260                           ; 1 bytes @ 0x7
  2261                           
  2262                           
  2263                           ; 1 bytes @ 0x7
  2264  0040                     	ds	1
  2265  0041                     ??_RfPacketsTickTh:	
  2266  0041                     RfHalTickTxTh@pt:	
  2267                           ; 0 bytes @ 0x8
  2268                           
  2269  0041                     RfHalTickRxTh@pt:	
  2270                           ; 1 bytes @ 0x8
  2271                           
  2272                           
  2273                           ; 1 bytes @ 0x8
  2274  0041                     	ds	2
  2275  0043                     RfPacketsTickTh@pt:	
  2276                           
  2277                           ; 1 bytes @ 0xA
  2278  0043                     	ds	1
  2279  0044                     ??_main:	
  2280                           
  2281                           	psect	swtext1
  2282  000F                     __pswtext1:	
  2283  000F                     S3687:	
  2284  000F  318A  2A86         	ljmp	l3099
  2285  0011  318A  2A8B         	ljmp	l3101
  2286  0013  318A  2A89         	ljmp	l3103
  2287  0015  318A  2A8E         	ljmp	l3107
  2288  0017  318A  2A90         	ljmp	l3111
  2289  0019  318A  2A92         	ljmp	l3115
  2290  001B  318A  2A95         	ljmp	l3119
  2291  001D  318A  2ABB         	ljmp	l3129
  2292  001F  318A  2AC1         	ljmp	l3133
  2293  0021  318A  2AC1         	ljmp	l3133
  2294  0023  318A  2AC3         	ljmp	l3137
  2295                           
  2296                           	psect	text4
  2297  0000                     __ptext4:	
  2298 ;; *************** function __CCBufCanWr *****************
  2299 ;; Defined at:
  2300 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      unsigned char 
  2307 ;; Registers used:
  2308 ;;		wreg
  2309 ;; Tracked objects:
  2310 ;;		On entry : 1F/0
  2311 ;;		On exit  : 1F/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2314 ;;      Params:         0       0       0       0
  2315 ;;      Locals:         0       0       0       0
  2316 ;;      Temps:          0       0       0       0
  2317 ;;      Totals:         0       0       0       0
  2318 ;;Total ram usage:        0 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    8
  2321 ;; This function calls:
  2322 ;;		Nothing
  2323 ;; This function is called by:
  2324 ;;		__CCBufWrByte
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328  0000                     __CCBufCanWr:	
  2329                           ;psect for function __CCBufCanWr
  2330                           
  2331  0000                     __end_of__CCBufCanWr:	
  2332                           ;ccbuf_static.c: 37: else return 1;
  2333                           
  2334                           ;incstack = 0
  2335                           ; Regs used in __CCBufCanWr: [wreg]
  2336                           
  2337                           
  2338                           	psect	text20
  2339  0000                     __ptext20:	
  2340 ;; *************** function __CCBufRdReverse *****************
  2341 ;; Defined at:
  2342 ;;		line 41 in file "../../../src/utilities/ccbuf_static.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  qty             1    wreg     unsigned char 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;  qty             1    3[BANK0 ] unsigned char 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;		None               void
  2349 ;; Registers used:
  2350 ;;		wreg, status,2, status,0, pclath, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 1F/0
  2353 ;;		On exit  : 1F/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2356 ;;      Params:         0       0       0       0
  2357 ;;      Locals:         0       1       0       0
  2358 ;;      Temps:          0       0       0       0
  2359 ;;      Totals:         0       1       0       0
  2360 ;;Total ram usage:        1 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    9
  2363 ;; This function calls:
  2364 ;;		__CCBufCalcPt
  2365 ;; This function is called by:
  2366 ;;		_RfHalTickRxTh
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370  0000                     __CCBufRdReverse:	
  2371                           ;psect for function __CCBufRdReverse
  2372                           
  2373  0000                     __end_of__CCBufRdReverse:	
  2374                           ;incstack = 0
  2375                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  2376                           ;__CCBufRdReverse@qty stored from wreg
  2377                           
  2378                           
  2379                           	psect	text22
  2380  0000                     __ptext22:	
  2381 ;; *************** function __CCBufCanRd *****************
  2382 ;; Defined at:
  2383 ;;		line 51 in file "../../../src/utilities/ccbuf_static.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      unsigned char 
  2390 ;; Registers used:
  2391 ;;		wreg, status,2, status,0, pclath, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 1F/0
  2394 ;;		On exit  : 1F/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2397 ;;      Params:         0       0       0       0
  2398 ;;      Locals:         0       0       0       0
  2399 ;;      Temps:          0       0       0       0
  2400 ;;      Totals:         0       0       0       0
  2401 ;;Total ram usage:        0 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    9
  2404 ;; This function calls:
  2405 ;;		__CCBufCalcPt
  2406 ;; This function is called by:
  2407 ;;		_RfHalTickRxTh
  2408 ;;		__CCBufRdByte
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412  0000                     __CCBufCanRd:	
  2413                           ;psect for function __CCBufCanRd
  2414                           
  2415  0000                     __end_of__CCBufCanRd:	
  2416                           ;ccbuf_static.c: 56: else return 1;
  2417                           
  2418                           ;incstack = 0
  2419                           ; Regs used in __CCBufCanRd: [wreg+status,2+status,0+pclath+cstack]
  2420                           
  2421                           
  2422                           	psect	text24
  2423  0000                     __ptext24:	
  2424 ;; *************** function _RfTrcvCrcTick *****************
  2425 ;; Defined at:
  2426 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  initial         1    wreg     unsigned char 
  2429 ;;  data            1    0[BANK0 ] unsigned char 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  initial         1    1[BANK0 ] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      unsigned char 
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0
  2436 ;; Tracked objects:
  2437 ;;		On entry : 1F/0
  2438 ;;		On exit  : 1F/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2441 ;;      Params:         0       1       0       0
  2442 ;;      Locals:         0       1       0       0
  2443 ;;      Temps:          0       0       0       0
  2444 ;;      Totals:         0       2       0       0
  2445 ;;Total ram usage:        2 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    8
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_RfHalTickRxTh
  2452 ;;		_RfHalStatemachine
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456  0000                     _RfTrcvCrcTick:	
  2457                           ;psect for function _RfTrcvCrcTick
  2458                           
  2459  0000                     __end_of_RfTrcvCrcTick:	
  2460                           ;mrf49xa.c: 59: return (initial ^ data);
  2461                           
  2462                           ;incstack = 0
  2463                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  2464                           ;RfTrcvCrcTick@initial stored from wreg
  2465                           
  2466                           
  2467                           	psect	text30
  2468  0000                     __ptext30:	
  2469 ;; *************** function __CCBufInit *****************
  2470 ;; Defined at:
  2471 ;;		line 5 in file "../../../src/utilities/ccbuf_static.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;		None
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;		None
  2476 ;; Return value:  Size  Location     Type
  2477 ;;		None               void
  2478 ;; Registers used:
  2479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 1F/0
  2482 ;;		On exit  : 1F/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2485 ;;      Params:         0       0       0       0
  2486 ;;      Locals:         0       0       0       0
  2487 ;;      Temps:          0       0       0       0
  2488 ;;      Totals:         0       0       0       0
  2489 ;;Total ram usage:        0 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:    9
  2492 ;; This function calls:
  2493 ;;		__CCBufReset
  2494 ;; This function is called by:
  2495 ;;		_RfHalInit
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499  0000                     __CCBufInit:	
  2500                           ;psect for function __CCBufInit
  2501                           
  2502  0000                     __end_of__CCBufInit:	
  2503                           ;ccbuf_static.c: 15: {
  2504                           ;ccbuf_static.c: 16: i--;
  2505                           
  2506                           ;psect for function __CCBufReset
  2507                           
  2508                           ;ccbuf_static.c: 7: _CCBufReset();
  2509                           
  2510                           ;incstack = 0
  2511                           ; Regs used in __CCBufInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2512                           
  2513                           
  2514                           	psect	text31
  2515  0000                     __ptext31:	
  2516 ;; *************** function __CCBufReset *****************
  2517 ;; Defined at:
  2518 ;;		line 10 in file "../../../src/utilities/ccbuf_static.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  i               1    1[BANK0 ] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;		None               void
  2525 ;; Registers used:
  2526 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : 1F/0
  2529 ;;		On exit  : 1F/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2532 ;;      Params:         0       0       0       0
  2533 ;;      Locals:         0       1       0       0
  2534 ;;      Temps:          0       1       0       0
  2535 ;;      Totals:         0       2       0       0
  2536 ;;Total ram usage:        2 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    8
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		__CCBufInit
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546  0000                     __CCBufReset:	
  2547                           ;psect for function __CCBufReset
  2548                           
  2549  0000                     __end_of__CCBufReset:	
  2550                           ;ccbuf_static.c: 15: {
  2551                           ;ccbuf_static.c: 16: i--;
  2552                           
  2553                           ;ccbuf_static.c: 14: while (i > 0)
  2554                           
  2555                           ;incstack = 0
  2556                           ; Regs used in __CCBufReset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2557                           
  2558                           
  2559                           	psect	intentry
  2560  0004                     __pintentry:	
  2561 ;; *************** function _extInt *****************
  2562 ;; Defined at:
  2563 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;		None
  2568 ;; Return value:  Size  Location     Type
  2569 ;;		None               void
  2570 ;; Registers used:
  2571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2577 ;;      Params:         0       0       0       0
  2578 ;;      Locals:         0       0       0       0
  2579 ;;      Temps:          0       0       0       0
  2580 ;;      Totals:         0       0       0       0
  2581 ;;Total ram usage:        0 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    7
  2584 ;; This function calls:
  2585 ;;		i1_mrf49XaIsr
  2586 ;; This function is called by:
  2587 ;;		Interrupt level 1
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591  0004                     _extInt:	
  2592                           
  2593                           ;incstack = 0
  2594                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2595  0004  3180               	pagesel	$
  2596                           
  2597                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  2598  0005  1C8B               	btfss	11,1	;volatile
  2599  0006  0009               	retfie
  2600                           
  2601                           ;interrupt.c: 34: {
  2602                           ;interrupt.c: 35: if (mrf49XaIsr())
  2603  0007  3188  20C4         	fcall	i1_mrf49XaIsr
  2604  0009  3A00               	xorlw	0
  2605  000A  1D03               	btfss	3,2
  2606                           
  2607                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  2608  000B  108B               	bcf	11,1	;volatile
  2609  000C  0009               	retfie
  2610  000D                     __end_of_extInt:	
  2611                           
  2612                           	psect	swtext2
  2613  0025                     __pswtext2:	
  2614  0025                     i1S3695:	
  2615  0025  3188  28E9         	ljmp	i1l3489
  2616  0027  3188  28ED         	ljmp	i1l3491
  2617  0029  3188  28F0         	ljmp	i1l3493
  2618  002B  3188  28F4         	ljmp	i1l3497
  2619  002D  3188  28F8         	ljmp	i1l3501
  2620  002F  3188  28FC         	ljmp	i1l3505
  2621  0031  3189  2901         	ljmp	i1l3509
  2622  0033  3189  2927         	ljmp	i1l3519
  2623  0035  3189  292F         	ljmp	i1l3523
  2624  0037  3189  292F         	ljmp	i1l3523
  2625  0039  3189  2933         	ljmp	i1l3527
  2626                           
  2627                           	psect	text45
  2628  0000                     __ptext45:	
  2629 ;; *************** function i1__CCBufCanWr *****************
  2630 ;; Defined at:
  2631 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      unsigned char 
  2638 ;; Registers used:
  2639 ;;		wreg
  2640 ;; Tracked objects:
  2641 ;;		On entry : 1F/2
  2642 ;;		On exit  : 1F/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2645 ;;      Params:         0       0       0       0
  2646 ;;      Locals:         0       0       0       0
  2647 ;;      Temps:          0       0       0       0
  2648 ;;      Totals:         0       0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		i1__CCBufWrByte
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658  0000                     __end_ofi1__CCBufCanWr:	
  2659                           ;ccbuf_static.c: 37: else return 1;
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in i1__CCBufCanWr: [wreg]
  2663                           
  2664                           ;psect for function i1__CCBufCanWr
  2665                           
  2666                           
  2667                           	psect	text47
  2668  08B8                     __ptext47:	
  2669 ;; *************** function i1_RfTrcvMode *****************
  2670 ;; Defined at:
  2671 ;;		line 59 in file "../../../src/rfstack/hal.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  tx              1    wreg     unsigned char 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  tx              1    5[COMMON] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;		None               void
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 1F/0
  2682 ;;		On exit  : 1F/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2685 ;;      Params:         0       0       0       0
  2686 ;;      Locals:         1       0       0       0
  2687 ;;      Temps:          0       0       0       0
  2688 ;;      Totals:         1       0       0       0
  2689 ;;Total ram usage:        1 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    4
  2692 ;; This function calls:
  2693 ;;		i1_RfTrcvSetup
  2694 ;; This function is called by:
  2695 ;;		i1_RfHalStatemachine
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function i1_RfTrcvMode
  2701  08B8                     i1_RfTrcvMode:	
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in i1_RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  2705                           ;i1RfTrcvMode@tx stored from wreg
  2706  08B8  00F5               	movwf	i1RfTrcvMode@tx
  2707                           
  2708                           ;hal.c: 61: rfStatus.inRx = 1 - tx;
  2709  08B9  3C01               	sublw	1
  2710  08BA  00A3               	movwf	_rfStatus+3
  2711                           
  2712                           ;hal.c: 62: RfTrcvSetup(tx);
  2713  08BB  0875               	movf	i1RfTrcvMode@tx,w
  2714  08BC  2158  3188         	fcall	i1_RfTrcvSetup
  2715                           
  2716                           ;hal.c: 64: if (tx == 1)
  2717  08BE  0B75               	decfsz	i1RfTrcvMode@tx,w
  2718  08BF  0008               	return
  2719                           
  2720                           ;hal.c: 65: {
  2721                           ;hal.c: 66: rfStatus.isr.state = TX_PREAMBLE1;
  2722  08C0  01A2               	clrf	_rfStatus+2
  2723  08C1  0AA2               	incf	_rfStatus+2,f
  2724                           
  2725                           ;hal.c: 67: rfStatus.isr.byteCounter = 0;
  2726  08C2  01A0               	clrf	_rfStatus
  2727  08C3  0008               	return
  2728  08C4                     __end_ofi1_RfTrcvMode:	
  2729  08C4                     __ptext41:	
  2730 ;; *************** function i1_mrf49XaIsr *****************
  2731 ;; Defined at:
  2732 ;;		line 28 in file "../../../src/node/main.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;  mrf49XaIsr      1    7[COMMON] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      unsigned char 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 1F/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2746 ;;      Params:         0       0       0       0
  2747 ;;      Locals:         1       0       0       0
  2748 ;;      Temps:          0       0       0       0
  2749 ;;      Totals:         1       0       0       0
  2750 ;;Total ram usage:        1 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    6
  2753 ;; This function calls:
  2754 ;;		i1_RfHalStatemachine
  2755 ;;		i1_RfTrcvSetup
  2756 ;;		i1_RfTrcvStatus
  2757 ;; This function is called by:
  2758 ;;		_extInt
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function i1_mrf49XaIsr
  2764  08C4                     i1_mrf49XaIsr:	
  2765  08C4                     i1l647:	
  2766                           ;incstack = 0
  2767                           ; Regs used in i1_mrf49XaIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2768                           ;main.c: 30: UI08_t retry;
  2769                           ;main.c: 32: do
  2770                           
  2771                           
  2772                           ;main.c: 33: {
  2773                           ;main.c: 34: retry = 0;
  2774  08C4  01F7               	clrf	i1mrf49XaIsr@retry
  2775                           
  2776                           ;main.c: 35: RfTrcvStatus();
  2777  08C5  21ED  3188         	fcall	i1_RfTrcvStatus
  2778                           
  2779                           ;main.c: 38: if (rfTrcvStatus.flags.msb.fifoTxRx || (!rfStatus.inRx && rfTrcvStatus.flag
      +                          s.msb.overflow))
  2780  08C7  0020               	movlb	0	; select bank0
  2781  08C8  1BB7               	btfsc	_rfTrcvStatus,7
  2782  08C9  28CE               	goto	i1l3551
  2783  08CA  08A3               	movf	_rfStatus+3,f
  2784  08CB  1903               	btfsc	3,2
  2785  08CC  1EB7               	btfss	_rfTrcvStatus,5
  2786  08CD  28D6               	goto	i1l3563
  2787  08CE                     i1l3551:	
  2788                           
  2789                           ;main.c: 39: {
  2790                           ;main.c: 40: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  2791  08CE  0B23               	decfsz	_rfStatus+3,w
  2792  08CF  28D2               	goto	i1l3557
  2793  08D0  1FB8               	btfss	_rfTrcvStatus+1,7
  2794  08D1  28D5               	goto	i1l3561
  2795  08D2                     i1l3557:	
  2796                           
  2797                           ;main.c: 44: else
  2798                           ;main.c: 45: {
  2799                           ;main.c: 46: RfHalStatemachine();
  2800  08D2  20E8  3188         	fcall	i1_RfHalStatemachine
  2801                           
  2802                           ;main.c: 47: isr++;
  2803  08D4  0AAB               	incf	_isr,f	;volatile
  2804  08D5                     i1l3561:	
  2805                           
  2806                           ;main.c: 48: }
  2807                           ;main.c: 49: retry++;
  2808  08D5  0AF7               	incf	i1mrf49XaIsr@retry,f
  2809  08D6                     i1l3563:	
  2810                           
  2811                           ;main.c: 50: }
  2812                           ;main.c: 53: if (rfTrcvStatus.flags.msb.por || (rfStatus.inRx && rfTrcvStatus.flags.msb.
      +                          overflow))
  2813  08D6  1B37               	btfsc	_rfTrcvStatus,6
  2814  08D7  28DC               	goto	i1l3569
  2815  08D8  0823               	movf	_rfStatus+3,w
  2816  08D9  1D03               	skipz
  2817  08DA  1EB7               	btfss	_rfTrcvStatus,5
  2818  08DB  28E1               	goto	i1l3575
  2819  08DC                     i1l3569:	
  2820                           
  2821                           ;main.c: 54: {
  2822                           ;main.c: 55: RfTrcvSetup(0);
  2823  08DC  3000               	movlw	0
  2824  08DD  2158  3188         	fcall	i1_RfTrcvSetup
  2825                           
  2826                           ;main.c: 56: rfPkResets++;
  2827  08DF  0AAE               	incf	_rfPkResets,f	;volatile
  2828                           
  2829                           ;main.c: 57: retry++;
  2830  08E0  0AF7               	incf	i1mrf49XaIsr@retry,f
  2831  08E1                     i1l3575:	
  2832                           
  2833                           ;main.c: 58: }
  2834                           ;main.c: 60: } while (retry);
  2835  08E1  08F7               	movf	i1mrf49XaIsr@retry,f
  2836  08E2  1D03               	skipz
  2837  08E3  28C4               	goto	i1l647
  2838                           
  2839                           ;main.c: 62: return (PORTAbits.RA2 == 1) ? 1 : 0;
  2840  08E4  0C0C               	rrf	12,w	;volatile
  2841  08E5  0C89               	rrf	9,f
  2842  08E6  3901               	andlw	1
  2843  08E7  0008               	return
  2844  08E8                     __end_ofi1_mrf49XaIsr:	
  2845  08E8                     __ptext43:	
  2846 ;; *************** function i1_RfHalStatemachine *****************
  2847 ;; Defined at:
  2848 ;;		line 379 in file "../../../src/rfstack/hal.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;		None               void
  2855 ;; Registers used:
  2856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 1F/0
  2859 ;;		On exit  : 1F/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2862 ;;      Params:         0       0       0       0
  2863 ;;      Locals:         0       0       0       0
  2864 ;;      Temps:          1       0       0       0
  2865 ;;      Totals:         1       0       0       0
  2866 ;;Total ram usage:        1 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    5
  2869 ;; This function calls:
  2870 ;;		i1_RfTrcvCrcTick
  2871 ;;		i1_RfTrcvGet
  2872 ;;		i1_RfTrcvMode
  2873 ;;		i1_RfTrcvPut
  2874 ;;		i1__CCBufWrByte
  2875 ;; This function is called by:
  2876 ;;		i1_mrf49XaIsr
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function i1_RfHalStatemachine
  2882  08E8                     i1_RfHalStatemachine:	
  2883                           
  2884                           ;hal.c: 381: switch (rfStatus.isr.state)
  2885                           
  2886                           ;incstack = 0
  2887                           ; Regs used in i1_RfHalStatemachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2888  08E8  293B               	goto	i1l3535
  2889  08E9                     i1l3489:	
  2890                           
  2891                           ;hal.c: 385: _CCBufWrByte(RfTrcvGet());
  2892  08E9  214F  3188         	fcall	i1_RfTrcvGet
  2893  08EB  222F               	fcall	i1__CCBufWrByte
  2894                           
  2895                           ;hal.c: 386: break;
  2896  08EC  0008               	return
  2897  08ED                     i1l3491:	
  2898                           
  2899                           ;hal.c: 390: rfStatus.isr.state++;
  2900  08ED  0020               	movlb	0	; select bank0
  2901  08EE  0AA2               	incf	_rfStatus+2,f
  2902                           
  2903                           ;hal.c: 391: break;
  2904  08EF  0008               	return
  2905  08F0                     i1l3493:	
  2906                           
  2907                           ;hal.c: 394: RfTrcvPut(0xAA);
  2908  08F0  30AA               	movlw	170
  2909  08F1  2146  3188         	fcall	i1_RfTrcvPut
  2910  08F3  28ED               	goto	i1l3491
  2911  08F4                     i1l3497:	
  2912                           
  2913                           ;hal.c: 399: RfTrcvPut(0x2D);
  2914  08F4  302D               	movlw	45
  2915  08F5  2146  3188         	fcall	i1_RfTrcvPut
  2916  08F7  28ED               	goto	i1l3491
  2917  08F8                     i1l3501:	
  2918                           
  2919                           ;hal.c: 403: RfTrcvPut(0xD4);
  2920  08F8  30D4               	movlw	212
  2921  08F9  2146  3188         	fcall	i1_RfTrcvPut
  2922  08FB  28ED               	goto	i1l3491
  2923  08FC                     i1l3505:	
  2924                           
  2925                           ;hal.c: 407: RfTrcvPut(rfStatus.isr.txPacket->size);
  2926  08FC  22F1  3188         	fcall	PL128	;call to abstracted procedure
  2927  08FE  2146  3188         	fcall	i1_RfTrcvPut
  2928  0900  28ED               	goto	i1l3491
  2929  0901                     i1l3509:	
  2930                           
  2931                           ;hal.c: 411: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  2932  0901  0820               	movf	_rfStatus,w
  2933  0902  0721               	addwf	_rfStatus+1,w
  2934  0903  00F6               	movwf	??i1_RfHalStatemachine
  2935  0904  0A76               	incf	??i1_RfHalStatemachine,w
  2936  0905  0086               	movwf	6
  2937  0906  0187               	clrf	7
  2938  0907  0801               	movf	1,w
  2939  0908  2146  3188         	fcall	i1_RfTrcvPut
  2940                           
  2941                           ;hal.c: 412: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  2942  090A  0020               	movlb	0	; select bank0
  2943  090B  0821               	movf	_rfStatus+1,w
  2944  090C  3E19               	addlw	25
  2945  090D  0086               	movwf	6
  2946  090E  0187               	clrf	7
  2947  090F  0820               	movf	_rfStatus,w
  2948  0910  0721               	addwf	_rfStatus+1,w
  2949  0911  00F6               	movwf	??i1_RfHalStatemachine
  2950  0912  0084               	movwf	4
  2951  0913  0185               	clrf	5
  2952  0914  3F01               	moviw [1]fsr0
  2953  0915  00F0               	movwf	i1RfTrcvCrcTick@data
  2954  0916  0821               	movf	_rfStatus+1,w
  2955  0917  3E19               	addlw	25
  2956  0918  0084               	movwf	4
  2957  0919  0800               	movf	0,w
  2958  091A                     i12L__ptext54:	
  2959                           
  2960                           ;psect for function i1_RfTrcvCrcTick
  2961  091A                     i12Li1_RfTrcvCrcTick:	
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  2965                           ;i1RfTrcvCrcTick@initial stored from wreg
  2966  091A  00F1               	movwf	i1RfTrcvCrcTick@initial
  2967  091B                     i12Li1l3345:	
  2968                           
  2969                           ;mrf49xa.c: 59: return (initial ^ data);
  2970  091B  0871               	movf	i1RfTrcvCrcTick@initial,w
  2971  091C  0670               	xorwf	i1RfTrcvCrcTick@data,w
  2972  091D                     i12Li1l183:	
  2973  091D  0081               	movwf	1
  2974                           
  2975                           ;hal.c: 413: rfStatus.isr.byteCounter++;
  2976  091E  0AA0               	incf	_rfStatus,f
  2977                           
  2978                           ;hal.c: 414: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  2979  091F  22F1  3188         	fcall	PL128	;call to abstracted procedure
  2980  0921  0220               	subwf	_rfStatus,w
  2981  0922  1C03               	skipc
  2982  0923  0008               	return
  2983                           
  2984                           ;hal.c: 415: rfStatus.isr.state = TX_CRC;
  2985  0924  3007               	movlw	7
  2986  0925  00A2               	movwf	_rfStatus+2
  2987  0926  0008               	return
  2988  0927                     i1l3519:	
  2989                           
  2990                           ;hal.c: 418: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  2991  0927  0821               	movf	_rfStatus+1,w
  2992  0928  3E19               	addlw	25
  2993  0929  0086               	movwf	6
  2994  092A  0187               	clrf	7
  2995  092B  0801               	movf	1,w
  2996  092C  2146  3188         	fcall	i1_RfTrcvPut
  2997  092E  28ED               	goto	i1l3491
  2998  092F                     i1l3523:	
  2999                           
  3000                           ;hal.c: 423: case TX_NULL2:
  3001                           ;hal.c: 424: RfTrcvPut(0);
  3002  092F  3000               	movlw	0
  3003  0930  2146  3188         	fcall	i1_RfTrcvPut
  3004  0932  28ED               	goto	i1l3491
  3005  0933                     i1l3527:	
  3006                           
  3007                           ;hal.c: 428: RfTrcvPut(0);
  3008  0933  3000               	movlw	0
  3009  0934  2146  3188         	fcall	i1_RfTrcvPut
  3010                           
  3011                           ;hal.c: 429: rfStatus.isr.state = RX_RECV;
  3012  0936  0020               	movlb	0	; select bank0
  3013  0937  3000               	movlw	0
  3014  0938  01A2               	clrf	_rfStatus+2
  3015                           
  3016                           ;hal.c: 435: RfTrcvMode(0);
  3017  0939  20B8               	fcall	i1_RfTrcvMode
  3018                           
  3019                           ;hal.c: 436: break;
  3020  093A  0008               	return
  3021  093B                     i1l3535:	
  3022  093B  0822               	movf	_rfStatus+2,w
  3023                           
  3024                           ; Switch size 1, requested type "space"
  3025                           ; Number of cases is 11, Range of values is 0 to 10
  3026                           ; switch strategies available:
  3027                           ; Name         Instructions Cycles
  3028                           ; direct_byte           28     6 (fixed)
  3029                           ; simple_byte           34    18 (average)
  3030                           ; jumptable            260     6 (fixed)
  3031                           ;	Chosen strategy is direct_byte
  3032  093C  0084               	movwf	4
  3033  093D  300B               	movlw	11
  3034  093E  0204               	subwf	4,w
  3035  093F  1803               	skipnc
  3036  0940  0008               	return
  3037  0941  3180               	movlp	high i1S3695
  3038  0942  3504               	lslf	4,w
  3039  0943  3E25               	addlw	low i1S3695
  3040  0944  0082               	movwf	2
  3041  0945  0008               	return
  3042  0946                     __end_ofi1_RfHalStatemachine:	
  3043  0946                     __ptext49:	
  3044 ;; *************** function i1_RfTrcvPut *****************
  3045 ;; Defined at:
  3046 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  byte            1    wreg     unsigned char 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  byte            1    3[COMMON] unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;		None               void
  3053 ;; Registers used:
  3054 ;;		wreg, status,2, status,0, pclath, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 1D/0
  3057 ;;		On exit  : 1F/2
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3060 ;;      Params:         0       0       0       0
  3061 ;;      Locals:         1       0       0       0
  3062 ;;      Temps:          0       0       0       0
  3063 ;;      Totals:         1       0       0       0
  3064 ;;Total ram usage:        1 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    2
  3067 ;; This function calls:
  3068 ;;		i1_MRF49XACommand
  3069 ;; This function is called by:
  3070 ;;		i1_RfTrcvSetup
  3071 ;;		i1_RfHalStatemachine
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           
  3076                           ;psect for function i1_RfTrcvPut
  3077  0946                     i1_RfTrcvPut:	
  3078                           
  3079                           ;incstack = 0
  3080                           ; Regs used in i1_RfTrcvPut: [wreg+status,2+status,0+pclath+cstack]
  3081                           ;i1RfTrcvPut@byte stored from wreg
  3082  0946  00F3               	movwf	i1RfTrcvPut@byte
  3083                           
  3084                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  3085  0947  00F1               	movwf	i1MRF49XACommand@cmd
  3086  0948  3000               	movlw	0
  3087  0949  01F2               	clrf	i1MRF49XACommand@cmd+1
  3088  094A  04F1               	iorwf	i1MRF49XACommand@cmd,f
  3089  094B  30B8               	movlw	184
  3090  094C  04F2               	iorwf	i1MRF49XACommand@cmd+1,f
  3091  094D  2199               	fcall	i1_MRF49XACommand
  3092  094E  0008               	return
  3093  094F                     __end_ofi1_RfTrcvPut:	
  3094  094F                     __ptext51:	
  3095 ;; *************** function i1_RfTrcvGet *****************
  3096 ;; Defined at:
  3097 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  RfTrcvGet       1    1[COMMON] unsigned char 
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      unsigned char 
  3104 ;; Registers used:
  3105 ;;		wreg, status,2, status,0, pclath, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 1F/0
  3108 ;;		On exit  : 1F/2
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3111 ;;      Params:         0       0       0       0
  3112 ;;      Locals:         1       0       0       0
  3113 ;;      Temps:          0       0       0       0
  3114 ;;      Totals:         1       0       0       0
  3115 ;;Total ram usage:        1 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    1
  3118 ;; This function calls:
  3119 ;;		i1_SPI_Read
  3120 ;;		i1_SPI_Write
  3121 ;; This function is called by:
  3122 ;;		i1_RfHalStatemachine
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           
  3127                           ;psect for function i1_RfTrcvGet
  3128  094F                     i1_RfTrcvGet:	
  3129                           
  3130                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  3131                           
  3132                           ;incstack = 0
  3133                           ; Regs used in i1_RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  3134  094F  0022               	movlb	2	; select bank2
  3135  0950  130E               	bcf	14,6	;volatile
  3136                           
  3137                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  3138  0951  30B0               	movlw	176
  3139  0952  21A2  3188         	fcall	i1_SPI_Write
  3140                           
  3141                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  3142  0954  21F9               	fcall	i1_SPI_Read
  3143  0955  00F1               	movwf	i1RfTrcvGet@b
  3144                           
  3145                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  3146  0956  170E               	bsf	14,6	;volatile
  3147                           
  3148                           ;mrf49xa.c: 26: return b;
  3149  0957  0008               	return
  3150  0958                     __end_ofi1_RfTrcvGet:	
  3151  0958                     __ptext48:	
  3152 ;; *************** function i1_RfTrcvSetup *****************
  3153 ;; Defined at:
  3154 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  tx              1    wreg     unsigned char 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  tx              1    4[COMMON] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;		None               void
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, pclath, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 1F/0
  3165 ;;		On exit  : 1F/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3168 ;;      Params:         0       0       0       0
  3169 ;;      Locals:         1       0       0       0
  3170 ;;      Temps:          0       0       0       0
  3171 ;;      Totals:         1       0       0       0
  3172 ;;Total ram usage:        1 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    3
  3175 ;; This function calls:
  3176 ;;		i1_MRF49XACommand
  3177 ;;		i1_RfTrcvPut
  3178 ;; This function is called by:
  3179 ;;		i1_RfTrcvMode
  3180 ;;		i1_mrf49XaIsr
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function i1_RfTrcvSetup
  3186  0958                     i1_RfTrcvSetup:	
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in i1_RfTrcvSetup: [wreg+status,2+status,0+pclath+cstack]
  3190                           ;i1RfTrcvSetup@tx stored from wreg
  3191  0958  00F4               	movwf	i1RfTrcvSetup@tx
  3192                           
  3193                           ;mrf49xa.c: 63: if (tx)
  3194  0959  0874               	movf	i1RfTrcvSetup@tx,w
  3195  095A  1903               	btfsc	3,2
  3196  095B  2972               	goto	i1l3473
  3197                           
  3198                           ;mrf49xa.c: 64: {
  3199                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  3200  095C  3082               	movlw	130
  3201  095D  01F1               	clrf	i1MRF49XACommand@cmd
  3202  095E  00F2               	movwf	i1MRF49XACommand@cmd+1
  3203  095F  2199  3188         	fcall	i1_MRF49XACommand
  3204                           
  3205                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  3206  0961  30A8               	movlw	168
  3207  0962  00F1               	movwf	i1MRF49XACommand@cmd
  3208  0963  3080               	movlw	128
  3209  0964  00F2               	movwf	i1MRF49XACommand@cmd+1
  3210  0965  2199  3188         	fcall	i1_MRF49XACommand
  3211                           
  3212                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  3213  0967  3020               	movlw	32
  3214  0968  00F1               	movwf	i1MRF49XACommand@cmd
  3215  0969  3082               	movlw	130
  3216  096A  00F2               	movwf	i1MRF49XACommand@cmd+1
  3217  096B  2199  3188         	fcall	i1_MRF49XACommand
  3218                           
  3219                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  3220  096D  3055               	movlw	85
  3221  096E  2146               	fcall	i1_RfTrcvPut
  3222                           
  3223                           ;mrf49xa.c: 71: rfStatus.inRx = 0;
  3224  096F  0020               	movlb	0	; select bank0
  3225  0970  01A3               	clrf	_rfStatus+3
  3226                           
  3227                           ;mrf49xa.c: 72: }
  3228  0971  0008               	return
  3229  0972                     i1l3473:	
  3230                           
  3231                           ;mrf49xa.c: 73: else
  3232                           ;mrf49xa.c: 74: {
  3233                           ;mrf49xa.c: 75: MRF49XACommand(0x8200);
  3234  0972  3000               	movlw	0
  3235  0973  00F1               	movwf	i1MRF49XACommand@cmd
  3236  0974  3082               	movlw	130
  3237  0975  00F2               	movwf	i1MRF49XACommand@cmd+1
  3238  0976  2199  3188         	fcall	i1_MRF49XACommand
  3239                           
  3240                           ;mrf49xa.c: 76: MRF49XACommand(0xCA81);
  3241  0978  3081               	movlw	129
  3242  0979  00F1               	movwf	i1MRF49XACommand@cmd
  3243  097A  30CA               	movlw	202
  3244  097B  00F2               	movwf	i1MRF49XACommand@cmd+1
  3245  097C  2199  3188         	fcall	i1_MRF49XACommand
  3246                           
  3247                           ;mrf49xa.c: 77: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  3248  097E  3028               	movlw	40
  3249  097F  00F1               	movwf	i1MRF49XACommand@cmd
  3250  0980  3080               	movlw	128
  3251  0981  00F2               	movwf	i1MRF49XACommand@cmd+1
  3252  0982  2199  3188         	fcall	i1_MRF49XACommand
  3253                           
  3254                           ;mrf49xa.c: 78: MRF49XACommand(0x8200 | 0x0080);
  3255  0984  3080               	movlw	128
  3256  0985  00F1               	movwf	i1MRF49XACommand@cmd
  3257  0986  3082               	movlw	130
  3258  0987  00F2               	movwf	i1MRF49XACommand@cmd+1
  3259  0988  2199  3188         	fcall	i1_MRF49XACommand
  3260                           
  3261                           ;mrf49xa.c: 79: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  3262  098A  3068               	movlw	104
  3263  098B  00F1               	movwf	i1MRF49XACommand@cmd
  3264  098C  3080               	movlw	128
  3265  098D  00F2               	movwf	i1MRF49XACommand@cmd+1
  3266  098E  2199  3188         	fcall	i1_MRF49XACommand
  3267                           
  3268                           ;mrf49xa.c: 80: MRF49XACommand(0xCA81 | 0x0002);
  3269  0990  3083               	movlw	131
  3270  0991  00F1               	movwf	i1MRF49XACommand@cmd
  3271  0992  30CA               	movlw	202
  3272  0993  00F2               	movwf	i1MRF49XACommand@cmd+1
  3273  0994  2199               	fcall	i1_MRF49XACommand
  3274                           
  3275                           ;mrf49xa.c: 81: rfStatus.inRx = 1;
  3276  0995  0020               	movlb	0	; select bank0
  3277  0996  01A3               	clrf	_rfStatus+3
  3278  0997  0AA3               	incf	_rfStatus+3,f
  3279  0998  0008               	return
  3280  0999                     __end_ofi1_RfTrcvSetup:	
  3281  0999                     __ptext50:	
  3282 ;; *************** function i1_MRF49XACommand *****************
  3283 ;; Defined at:
  3284 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  cmd             2    1[COMMON] unsigned int 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;		None               void
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, pclath, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 1D/0
  3295 ;;		On exit  : 1F/2
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3298 ;;      Params:         2       0       0       0
  3299 ;;      Locals:         0       0       0       0
  3300 ;;      Temps:          0       0       0       0
  3301 ;;      Totals:         2       0       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    1
  3305 ;; This function calls:
  3306 ;;		i1_SPI_Write
  3307 ;; This function is called by:
  3308 ;;		i1_RfTrcvPut
  3309 ;;		i1_RfTrcvSetup
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           
  3314                           ;psect for function i1_MRF49XACommand
  3315  0999                     i1_MRF49XACommand:	
  3316                           
  3317                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  3318                           
  3319                           ;incstack = 0
  3320                           ; Regs used in i1_MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  3321  0999  0022               	movlb	2	; select bank2
  3322  099A  130E               	bcf	14,6	;volatile
  3323                           
  3324                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  3325  099B  0872               	movf	i1MRF49XACommand@cmd+1,w
  3326  099C  21A2  3188         	fcall	i1_SPI_Write
  3327                           
  3328                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  3329  099E  0871               	movf	i1MRF49XACommand@cmd,w
  3330  099F  21A2               	fcall	i1_SPI_Write
  3331                           
  3332                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  3333  09A0  170E               	bsf	14,6	;volatile
  3334  09A1  0008               	return
  3335  09A2                     __end_ofi1_MRF49XACommand:	
  3336  09A2                     __ptext52:	
  3337 ;; *************** function i1_SPI_Write *****************
  3338 ;; Defined at:
  3339 ;;		line 193 in file "../../../src/devices/mrf49xa.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  data            1    wreg     unsigned char 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  data            1    0[COMMON] unsigned char 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;		None               void
  3346 ;; Registers used:
  3347 ;;		wreg
  3348 ;; Tracked objects:
  3349 ;;		On entry : 1F/2
  3350 ;;		On exit  : 1F/2
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3353 ;;      Params:         0       0       0       0
  3354 ;;      Locals:         1       0       0       0
  3355 ;;      Temps:          0       0       0       0
  3356 ;;      Totals:         1       0       0       0
  3357 ;;Total ram usage:        1 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; This function calls:
  3360 ;;		Nothing
  3361 ;; This function is called by:
  3362 ;;		i1_RfTrcvGet
  3363 ;;		i1_MRF49XACommand
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function i1_SPI_Write
  3369  09A2                     i1_SPI_Write:	
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in i1_SPI_Write: [wreg]
  3373                           ;i1SPI_Write@data stored from wreg
  3374  09A2  00F0               	movwf	i1SPI_Write@data
  3375                           
  3376                           ;mrf49xa.c: 200: LATCbits.LATC7 = 0;
  3377  09A3  138E               	bcf	14,7	;volatile
  3378  09A4  1BF0               	btfsc	i1SPI_Write@data,7
  3379  09A5  29A8               	goto	i1l3381
  3380  09A6  0020               	movlb	0	; select bank0
  3381  09A7  29AA               	goto	i1l230
  3382  09A8                     i1l3381:	
  3383  09A8  178D               	bsf	13,7	;volatile
  3384  09A9  29AB               	goto	i1l231
  3385  09AA                     i1l230:	
  3386  09AA  138D               	bcf	13,7	;volatile
  3387  09AB                     i1l231:	
  3388  09AB  178E               	bsf	14,7	;volatile
  3389  09AC  138E               	bcf	14,7	;volatile
  3390  09AD  1B70               	btfsc	i1SPI_Write@data,6
  3391  09AE  29B1               	goto	i1l3385
  3392  09AF  0020               	movlb	0	; select bank0
  3393  09B0  29B3               	goto	i1l234
  3394  09B1                     i1l3385:	
  3395  09B1  178D               	bsf	13,7	;volatile
  3396  09B2  29B4               	goto	i1l235
  3397  09B3                     i1l234:	
  3398  09B3  138D               	bcf	13,7	;volatile
  3399  09B4                     i1l235:	
  3400  09B4  178E               	bsf	14,7	;volatile
  3401  09B5  138E               	bcf	14,7	;volatile
  3402  09B6  1AF0               	btfsc	i1SPI_Write@data,5
  3403  09B7  29BA               	goto	i1l3389
  3404  09B8  0020               	movlb	0	; select bank0
  3405  09B9  29BC               	goto	i1l238
  3406  09BA                     i1l3389:	
  3407  09BA  178D               	bsf	13,7	;volatile
  3408  09BB  29BD               	goto	i1l239
  3409  09BC                     i1l238:	
  3410  09BC  138D               	bcf	13,7	;volatile
  3411  09BD                     i1l239:	
  3412  09BD  178E               	bsf	14,7	;volatile
  3413  09BE  138E               	bcf	14,7	;volatile
  3414  09BF  1A70               	btfsc	i1SPI_Write@data,4
  3415  09C0  29C3               	goto	i1l3393
  3416  09C1  0020               	movlb	0	; select bank0
  3417  09C2  29C5               	goto	i1l242
  3418  09C3                     i1l3393:	
  3419  09C3  178D               	bsf	13,7	;volatile
  3420  09C4  29C6               	goto	i1l243
  3421  09C5                     i1l242:	
  3422  09C5  138D               	bcf	13,7	;volatile
  3423  09C6                     i1l243:	
  3424  09C6  178E               	bsf	14,7	;volatile
  3425  09C7  138E               	bcf	14,7	;volatile
  3426  09C8  19F0               	btfsc	i1SPI_Write@data,3
  3427  09C9  29CC               	goto	i1l3397
  3428  09CA  0020               	movlb	0	; select bank0
  3429  09CB  29CE               	goto	i1l246
  3430  09CC                     i1l3397:	
  3431  09CC  178D               	bsf	13,7	;volatile
  3432  09CD  29CF               	goto	i1l247
  3433  09CE                     i1l246:	
  3434  09CE  138D               	bcf	13,7	;volatile
  3435  09CF                     i1l247:	
  3436  09CF  178E               	bsf	14,7	;volatile
  3437  09D0  138E               	bcf	14,7	;volatile
  3438  09D1  1970               	btfsc	i1SPI_Write@data,2
  3439  09D2  29D5               	goto	i1l3401
  3440  09D3  0020               	movlb	0	; select bank0
  3441  09D4  29D7               	goto	i1l250
  3442  09D5                     i1l3401:	
  3443  09D5  178D               	bsf	13,7	;volatile
  3444  09D6  29D8               	goto	i1l251
  3445  09D7                     i1l250:	
  3446  09D7  138D               	bcf	13,7	;volatile
  3447  09D8                     i1l251:	
  3448  09D8  178E               	bsf	14,7	;volatile
  3449  09D9  138E               	bcf	14,7	;volatile
  3450  09DA  18F0               	btfsc	i1SPI_Write@data,1
  3451  09DB  29DE               	goto	i1l3405
  3452  09DC  0020               	movlb	0	; select bank0
  3453  09DD  29E0               	goto	i1l254
  3454  09DE                     i1l3405:	
  3455  09DE  178D               	bsf	13,7	;volatile
  3456  09DF  29E1               	goto	i1l255
  3457  09E0                     i1l254:	
  3458  09E0  138D               	bcf	13,7	;volatile
  3459  09E1                     i1l255:	
  3460  09E1  178E               	bsf	14,7	;volatile
  3461  09E2  138E               	bcf	14,7	;volatile
  3462  09E3  1870               	btfsc	i1SPI_Write@data,0
  3463  09E4  29E7               	goto	i1l3409
  3464  09E5  0020               	movlb	0	; select bank0
  3465  09E6  29E9               	goto	i1l258
  3466  09E7                     i1l3409:	
  3467  09E7  178D               	bsf	13,7	;volatile
  3468  09E8  29EA               	goto	i1l259
  3469  09E9                     i1l258:	
  3470  09E9  138D               	bcf	13,7	;volatile
  3471  09EA                     i1l259:	
  3472  09EA  178E               	bsf	14,7	;volatile
  3473  09EB  138E               	bcf	14,7	;volatile
  3474  09EC  0008               	return
  3475  09ED                     __end_ofi1_SPI_Write:	
  3476  09ED                     __ptext42:	
  3477 ;; *************** function i1_RfTrcvStatus *****************
  3478 ;; Defined at:
  3479 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;		None               void
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, pclath, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 1F/2
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3493 ;;      Params:         0       0       0       0
  3494 ;;      Locals:         0       0       0       0
  3495 ;;      Temps:          0       0       0       0
  3496 ;;      Totals:         0       0       0       0
  3497 ;;Total ram usage:        0 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    1
  3500 ;; This function calls:
  3501 ;;		i1_SPI_Read
  3502 ;; This function is called by:
  3503 ;;		i1_mrf49XaIsr
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           
  3508                           ;psect for function i1_RfTrcvStatus
  3509  09ED                     i1_RfTrcvStatus:	
  3510                           
  3511                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  3512                           
  3513                           ;incstack = 0
  3514                           ; Regs used in i1_RfTrcvStatus: [wreg+status,2+pclath+cstack]
  3515  09ED  0022               	movlb	2	; select bank2
  3516  09EE  130E               	bcf	14,6	;volatile
  3517                           
  3518                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  3519  09EF  21F9  3188         	fcall	i1_SPI_Read
  3520  09F1  0020               	movlb	0	; select bank0
  3521  09F2  00B7               	movwf	_rfTrcvStatus
  3522                           
  3523                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  3524  09F3  21F9               	fcall	i1_SPI_Read
  3525  09F4  0020               	movlb	0	; select bank0
  3526  09F5  00B8               	movwf	_rfTrcvStatus+1
  3527                           
  3528                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  3529  09F6  0022               	movlb	2	; select bank2
  3530  09F7  170E               	bsf	14,6	;volatile
  3531  09F8  0008               	return
  3532  09F9                     __end_ofi1_RfTrcvStatus:	
  3533  09F9                     __ptext53:	
  3534 ;; *************** function i1_SPI_Read *****************
  3535 ;; Defined at:
  3536 ;;		line 147 in file "../../../src/devices/mrf49xa.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;  SPI_Read        1    0[COMMON] unsigned char 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2
  3545 ;; Tracked objects:
  3546 ;;		On entry : 1D/2
  3547 ;;		On exit  : 1F/2
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3550 ;;      Params:         0       0       0       0
  3551 ;;      Locals:         1       0       0       0
  3552 ;;      Temps:          0       0       0       0
  3553 ;;      Totals:         1       0       0       0
  3554 ;;Total ram usage:        1 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		i1_RfTrcvGet
  3560 ;;		i1_RfTrcvStatus
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           
  3565                           ;psect for function i1_SPI_Read
  3566  09F9                     i1_SPI_Read:	
  3567                           
  3568                           ;mrf49xa.c: 152: UI08_t data = 0;
  3569                           
  3570                           ;incstack = 0
  3571                           ; Regs used in i1_SPI_Read: [wreg+status,2]
  3572  09F9  01F0               	clrf	i1SPI_Read@data
  3573                           
  3574                           ;mrf49xa.c: 153: LATCbits.LATC7 = 0;
  3575  09FA  0022               	movlb	2	; select bank2
  3576  09FB  138E               	bcf	14,7	;volatile
  3577                           
  3578                           ;mrf49xa.c: 154: LATBbits.LATB7 = 0;
  3579  09FC  138D               	bcf	13,7	;volatile
  3580  09FD  0020               	movlb	0	; select bank0
  3581  09FE  1A8E               	btfsc	14,5	;volatile
  3582  09FF  17F0               	bsf	i1SPI_Read@data,7
  3583  0A00  0022               	movlb	2	; select bank2
  3584  0A01  178E               	bsf	14,7	;volatile
  3585  0A02  138E               	bcf	14,7	;volatile
  3586                           
  3587                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3588  0A03  0020               	movlb	0	; select bank0
  3589  0A04  1A8E               	btfsc	14,5	;volatile
  3590  0A05  1770               	bsf	i1SPI_Read@data,6
  3591  0A06  0022               	movlb	2	; select bank2
  3592  0A07  178E               	bsf	14,7	;volatile
  3593  0A08  138E               	bcf	14,7	;volatile
  3594                           
  3595                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3596  0A09  0020               	movlb	0	; select bank0
  3597  0A0A  1A8E               	btfsc	14,5	;volatile
  3598  0A0B  16F0               	bsf	i1SPI_Read@data,5
  3599  0A0C  0022               	movlb	2	; select bank2
  3600  0A0D  178E               	bsf	14,7	;volatile
  3601  0A0E  138E               	bcf	14,7	;volatile
  3602                           
  3603                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3604  0A0F  0020               	movlb	0	; select bank0
  3605  0A10  1A8E               	btfsc	14,5	;volatile
  3606  0A11  1670               	bsf	i1SPI_Read@data,4
  3607  0A12  0022               	movlb	2	; select bank2
  3608  0A13  178E               	bsf	14,7	;volatile
  3609  0A14  138E               	bcf	14,7	;volatile
  3610                           
  3611                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3612  0A15  0020               	movlb	0	; select bank0
  3613  0A16  1A8E               	btfsc	14,5	;volatile
  3614  0A17  15F0               	bsf	i1SPI_Read@data,3
  3615  0A18  0022               	movlb	2	; select bank2
  3616  0A19  178E               	bsf	14,7	;volatile
  3617  0A1A  138E               	bcf	14,7	;volatile
  3618                           
  3619                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3620  0A1B  0020               	movlb	0	; select bank0
  3621  0A1C  1A8E               	btfsc	14,5	;volatile
  3622  0A1D  1570               	bsf	i1SPI_Read@data,2
  3623  0A1E  0022               	movlb	2	; select bank2
  3624  0A1F  178E               	bsf	14,7	;volatile
  3625  0A20  138E               	bcf	14,7	;volatile
  3626                           
  3627                           ;mrf49xa.c: 166: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3628  0A21  0020               	movlb	0	; select bank0
  3629  0A22  1A8E               	btfsc	14,5	;volatile
  3630  0A23  14F0               	bsf	i1SPI_Read@data,1
  3631  0A24  0022               	movlb	2	; select bank2
  3632  0A25  178E               	bsf	14,7	;volatile
  3633  0A26  138E               	bcf	14,7	;volatile
  3634                           
  3635                           ;mrf49xa.c: 167: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3636  0A27  0020               	movlb	0	; select bank0
  3637  0A28  1A8E               	btfsc	14,5	;volatile
  3638  0A29  1470               	bsf	i1SPI_Read@data,0
  3639  0A2A  0022               	movlb	2	; select bank2
  3640  0A2B  178E               	bsf	14,7	;volatile
  3641  0A2C  138E               	bcf	14,7	;volatile
  3642                           
  3643                           ;mrf49xa.c: 190: return data;
  3644  0A2D  0870               	movf	i1SPI_Read@data,w
  3645  0A2E  0008               	return
  3646  0A2F                     __end_ofi1_SPI_Read:	
  3647  0A2F                     __ptext44:	
  3648 ;; *************** function i1__CCBufWrByte *****************
  3649 ;; Defined at:
  3650 ;;		line 94 in file "../../../src/utilities/ccbuf_static.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  data            1    wreg     unsigned char 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;  data            1    4[COMMON] unsigned char 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;		None               void
  3657 ;; Registers used:
  3658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 1F/2
  3661 ;;		On exit  : 1F/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3664 ;;      Params:         0       0       0       0
  3665 ;;      Locals:         1       0       0       0
  3666 ;;      Temps:          1       0       0       0
  3667 ;;      Totals:         2       0       0       0
  3668 ;;Total ram usage:        2 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    1
  3671 ;; This function calls:
  3672 ;;		i1__CCBufCalcPt
  3673 ;;		i1__CCBufCanWr
  3674 ;; This function is called by:
  3675 ;;		i1_RfHalStatemachine
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function i1__CCBufWrByte
  3681  0A2F                     i1__CCBufWrByte:	
  3682                           
  3683                           ;incstack = 0
  3684                           ; Regs used in i1__CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3685                           ;i1__CCBufWrByte@data stored from wreg
  3686  0A2F  00F4               	movwf	i1__CCBufWrByte@data
  3687  0A30                     i13L__ptext45:	
  3688                           ;ccbuf_static.c: 96: if (_CCBufCanWr())
  3689                           
  3690                           
  3691                           ;psect for function i1__CCBufCanWr
  3692  0A30                     i13Li1__CCBufCanWr:	
  3693  0A30                     i13Li1l3423:	
  3694  0A30  0020               	movlb	0	; select bank0
  3695  0A31  0846               	movf	_rfRxCC+2,w
  3696  0A32  0647               	xorwf	_rfRxCC+3,w
  3697  0A33  1D03               	btfss	3,2
  3698  0A34  2A39               	ljmp	i13Li1l3431
  3699  0A35  2A37               	ljmp	i13Li1l3425
  3700  0A36                     i13Lu272_21:	
  3701  0A36  2A39               	ljmp	i13Li1l3431
  3702  0A37                     i13Lu272_20:	
  3703  0A37                     i13Li1l3425:	
  3704  0A37  3000               	movlw	0
  3705  0A38  2A3A               	ljmp	iL112
  3706  0A39                     i13Li1l3431:	
  3707                           
  3708                           ;ccbuf_static.c: 37: else return 1;
  3709  0A39  3001               	movlw	1
  3710  0A3A                     i13Li1l541:	
  3711  0A3A                     iL112:	
  3712  0A3A  3A00               	xorlw	0
  3713  0A3B  1903               	skipnz
  3714  0A3C  0008               	return
  3715  0A3D  0846               	movf	_rfRxCC+2,w
  3716  0A3E  0744               	addwf	_rfRxCC,w
  3717  0A3F  00F3               	movwf	??i1__CCBufWrByte
  3718  0A40  0086               	movwf	6
  3719  0A41  3001               	movlw	1	; select bank2/3
  3720  0A42  0087               	movwf	7
  3721  0A43  0874               	movf	i1__CCBufWrByte@data,w
  3722  0A44  0081               	movwf	1
  3723  0A45  01F0               	clrf	i1__CCBufCalcPt@move
  3724  0A46  0AF0               	incf	i1__CCBufCalcPt@move,f
  3725  0A47  0846               	movf	_rfRxCC+2,w
  3726  0A48  224B               	fcall	i1__CCBufCalcPt
  3727  0A49  00C6               	movwf	_rfRxCC+2
  3728  0A4A  0008               	return
  3729  0A4B                     __end_ofi1__CCBufWrByte:	
  3730  0A4B                     __ptext46:	
  3731 ;; *************** function i1__CCBufCalcPt *****************
  3732 ;; Defined at:
  3733 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  entry           1    wreg     unsigned char 
  3736 ;;  move            1    0[COMMON] unsigned char 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  entry           1    1[COMMON] unsigned char 
  3739 ;;  _CCBufCalcPt    1    2[COMMON] unsigned char 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      unsigned char 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0
  3744 ;; Tracked objects:
  3745 ;;		On entry : 1F/0
  3746 ;;		On exit  : 1F/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3749 ;;      Params:         1       0       0       0
  3750 ;;      Locals:         2       0       0       0
  3751 ;;      Temps:          0       0       0       0
  3752 ;;      Totals:         3       0       0       0
  3753 ;;Total ram usage:        3 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		i1__CCBufWrByte
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           
  3763                           ;psect for function i1__CCBufCalcPt
  3764  0A4B                     i1__CCBufCalcPt:	
  3765                           
  3766                           ;incstack = 0
  3767                           ; Regs used in i1__CCBufCalcPt: [wreg+status,2+status,0]
  3768                           ;i1__CCBufCalcPt@entry stored from wreg
  3769  0A4B  00F1               	movwf	i1__CCBufCalcPt@entry
  3770                           
  3771                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  3772  0A4C  0770               	addwf	i1__CCBufCalcPt@move,w
  3773  0A4D  00F2               	movwf	i1__CCBufCalcPt@result
  3774  0A4E                     i1l3417:	
  3775                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  3776                           
  3777  0A4E  0845               	movf	_rfRxCC+1,w
  3778  0A4F  0272               	subwf	i1__CCBufCalcPt@result,w
  3779  0A50  1C03               	btfss	3,0
  3780  0A51  2A55               	goto	i1l3419
  3781  0A52  0845               	movf	_rfRxCC+1,w
  3782  0A53  02F2               	subwf	i1__CCBufCalcPt@result,f
  3783  0A54  2A4E               	goto	i1l3417
  3784  0A55                     i1l3419:	
  3785                           
  3786                           ;ccbuf_static.c: 31: return (UI08_t) result;
  3787  0A55  0872               	movf	i1__CCBufCalcPt@result,w
  3788  0A56  0008               	return
  3789  0A57                     __end_ofi1__CCBufCalcPt:	
  3790  0A57                     __ptext1:	
  3791 ;; *************** function _mrf49XaIsr *****************
  3792 ;; Defined at:
  3793 ;;		line 28 in file "../../../src/node/main.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;		None
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  retry           1    7[BANK0 ] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      unsigned char 
  3800 ;; Registers used:
  3801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 1F/0
  3804 ;;		On exit  : 1F/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3807 ;;      Params:         0       0       0       0
  3808 ;;      Locals:         0       1       0       0
  3809 ;;      Temps:          0       0       0       0
  3810 ;;      Totals:         0       1       0       0
  3811 ;;Total ram usage:        1 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:   14
  3814 ;; This function calls:
  3815 ;;		_RfHalStatemachine
  3816 ;;		_RfTrcvSetup
  3817 ;;		_RfTrcvStatus
  3818 ;; This function is called by:
  3819 ;;		_main
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           
  3824                           ;psect for function _mrf49XaIsr
  3825  0A57                     _mrf49XaIsr:	
  3826  0A57                     l647:	
  3827                           ;incstack = 0
  3828                           ; Regs used in _mrf49XaIsr: [allreg]
  3829                           ;main.c: 30: UI08_t retry;
  3830                           ;main.c: 32: do
  3831                           
  3832                           
  3833                           ;main.c: 33: {
  3834                           ;main.c: 34: retry = 0;
  3835  0A57  01C0               	clrf	mrf49XaIsr@retry
  3836                           
  3837                           ;main.c: 35: RfTrcvStatus();
  3838  0A58  2435  3188         	fcall	_RfTrcvStatus
  3839                           
  3840                           ;main.c: 38: if (rfTrcvStatus.flags.msb.fifoTxRx || (!rfStatus.inRx && rfTrcvStatus.flag
      +                          s.msb.overflow))
  3841  0A5A  0020               	movlb	0	; select bank0
  3842  0A5B  1BB7               	btfsc	_rfTrcvStatus,7
  3843  0A5C  2A61               	goto	l2599
  3844  0A5D  08A3               	movf	_rfStatus+3,f
  3845  0A5E  1903               	btfsc	3,2
  3846  0A5F  1EB7               	btfss	_rfTrcvStatus,5
  3847  0A60  2A69               	goto	l2611
  3848  0A61                     l2599:	
  3849                           
  3850                           ;main.c: 39: {
  3851                           ;main.c: 40: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  3852  0A61  0B23               	decfsz	_rfStatus+3,w
  3853  0A62  2A65               	goto	l2605
  3854  0A63  1FB8               	btfss	_rfTrcvStatus+1,7
  3855  0A64  2A68               	goto	l2609
  3856  0A65                     l2605:	
  3857                           
  3858                           ;main.c: 44: else
  3859                           ;main.c: 45: {
  3860                           ;main.c: 46: RfHalStatemachine();
  3861  0A65  227B  3188         	fcall	_RfHalStatemachine
  3862                           
  3863                           ;main.c: 47: isr++;
  3864  0A67  0AAB               	incf	_isr,f	;volatile
  3865  0A68                     l2609:	
  3866                           
  3867                           ;main.c: 48: }
  3868                           ;main.c: 49: retry++;
  3869  0A68  0AC0               	incf	mrf49XaIsr@retry,f
  3870  0A69                     l2611:	
  3871                           
  3872                           ;main.c: 50: }
  3873                           ;main.c: 53: if (rfTrcvStatus.flags.msb.por || (rfStatus.inRx && rfTrcvStatus.flags.msb.
      +                          overflow))
  3874  0A69  1B37               	btfsc	_rfTrcvStatus,6
  3875  0A6A  2A6F               	goto	l2617
  3876  0A6B  0823               	movf	_rfStatus+3,w
  3877  0A6C  1D03               	skipz
  3878  0A6D  1EB7               	btfss	_rfTrcvStatus,5
  3879  0A6E  2A74               	goto	l2623
  3880  0A6F                     l2617:	
  3881                           
  3882                           ;main.c: 54: {
  3883                           ;main.c: 55: RfTrcvSetup(0);
  3884  0A6F  3000               	movlw	0
  3885  0A70  2371  3188         	fcall	_RfTrcvSetup
  3886                           
  3887                           ;main.c: 56: rfPkResets++;
  3888  0A72  0AAE               	incf	_rfPkResets,f	;volatile
  3889                           
  3890                           ;main.c: 57: retry++;
  3891  0A73  0AC0               	incf	mrf49XaIsr@retry,f
  3892  0A74                     l2623:	
  3893                           
  3894                           ;main.c: 58: }
  3895                           ;main.c: 60: } while (retry);
  3896  0A74  08C0               	movf	mrf49XaIsr@retry,f
  3897  0A75  1D03               	skipz
  3898  0A76  2A57               	goto	l647
  3899                           
  3900                           ;main.c: 62: return (PORTAbits.RA2 == 1) ? 1 : 0;
  3901  0A77  0C0C               	rrf	12,w	;volatile
  3902  0A78  0C89               	rrf	9,f
  3903  0A79  3901               	andlw	1
  3904  0A7A  0008               	return
  3905  0A7B                     __end_of_mrf49XaIsr:	
  3906  0A7B                     __ptext2:	
  3907 ;; *************** function _RfHalStatemachine *****************
  3908 ;; Defined at:
  3909 ;;		line 379 in file "../../../src/rfstack/hal.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 1F/0
  3920 ;;		On exit  : 1F/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3923 ;;      Params:         0       0       0       0
  3924 ;;      Locals:         0       0       0       0
  3925 ;;      Temps:          0       1       0       0
  3926 ;;      Totals:         0       1       0       0
  3927 ;;Total ram usage:        1 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:   13
  3930 ;; This function calls:
  3931 ;;		_RfTrcvCrcTick
  3932 ;;		_RfTrcvGet
  3933 ;;		_RfTrcvMode
  3934 ;;		_RfTrcvPut
  3935 ;;		__CCBufWrByte
  3936 ;; This function is called by:
  3937 ;;		_mrf49XaIsr
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           
  3942                           ;psect for function _RfHalStatemachine
  3943  0A7B                     _RfHalStatemachine:	
  3944                           
  3945                           ;hal.c: 436: break;
  3946                           
  3947                           ;hal.c: 381: switch (rfStatus.isr.state)
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _RfHalStatemachine: [allreg]
  3951  0A7B  0822               	movf	_rfStatus+2,w
  3952                           
  3953                           ; Switch size 1, requested type "space"
  3954                           ; Number of cases is 11, Range of values is 0 to 10
  3955                           ; switch strategies available:
  3956                           ; Name         Instructions Cycles
  3957                           ; direct_byte           28     6 (fixed)
  3958                           ; simple_byte           34    18 (average)
  3959                           ; jumptable            260     6 (fixed)
  3960                           ;	Chosen strategy is direct_byte
  3961  0A7C  0084               	movwf	4
  3962  0A7D  300B               	movlw	11
  3963  0A7E  0204               	subwf	4,w
  3964  0A7F  1803               	skipnc
  3965  0A80  0008               	return
  3966  0A81  3180               	movlp	high S3687
  3967  0A82  3504               	lslf	4,w
  3968  0A83  3E0F               	addlw	low S3687
  3969  0A84  0082               	movwf	2
  3970  0A85  0008               	return
  3971  0A86                     l3099:	
  3972                           
  3973                           ;hal.c: 385: _CCBufWrByte(RfTrcvGet());
  3974  0A86  22CA  3188         	fcall	_RfTrcvGet
  3975  0A88  2AD6               	ljmp	__CCBufWrByte
  3976  0A89                     l3103:	
  3977                           
  3978                           ;hal.c: 394: RfTrcvPut(0xAA);
  3979  0A89  30AA               	movlw	170
  3980  0A8A                     L1:	
  3981  0A8A  26A9               	fcall	_RfTrcvPut
  3982  0A8B                     l3101:	
  3983                           ;hal.c: 386: break;
  3984                           
  3985                           
  3986                           ;hal.c: 390: rfStatus.isr.state++;
  3987  0A8B  0020               	movlb	0	; select bank0
  3988  0A8C  0AA2               	incf	_rfStatus+2,f
  3989                           
  3990                           ;hal.c: 391: break;
  3991  0A8D  0008               	return
  3992  0A8E                     l3107:	
  3993                           
  3994                           ;hal.c: 399: RfTrcvPut(0x2D);
  3995  0A8E  302D               	movlw	45
  3996  0A8F  2A8A               	goto	L1
  3997  0A90                     l3111:	
  3998                           
  3999                           ;hal.c: 403: RfTrcvPut(0xD4);
  4000  0A90  30D4               	movlw	212
  4001  0A91  2A8A               	goto	L1
  4002  0A92                     l3115:	
  4003                           
  4004                           ;hal.c: 407: RfTrcvPut(rfStatus.isr.txPacket->size);
  4005  0A92  0821               	movf	_rfStatus+1,w
  4006  0A93  3E1B               	addlw	27
  4007  0A94  2ABD               	goto	L2
  4008  0A95                     l3119:	
  4009                           
  4010                           ;hal.c: 411: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  4011  0A95  0820               	movf	_rfStatus,w
  4012  0A96  0721               	addwf	_rfStatus+1,w
  4013  0A97  00BF               	movwf	??_RfHalStatemachine
  4014  0A98  0A3F               	incf	??_RfHalStatemachine,w
  4015  0A99  0086               	movwf	6
  4016  0A9A  0187               	clrf	7
  4017  0A9B  0801               	movf	1,w
  4018  0A9C  26A9  3188         	fcall	_RfTrcvPut
  4019                           
  4020                           ;hal.c: 412: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  4021  0A9E  0020               	movlb	0	; select bank0
  4022  0A9F  0821               	movf	_rfStatus+1,w
  4023  0AA0  3E19               	addlw	25
  4024  0AA1  0086               	movwf	6
  4025  0AA2  0187               	clrf	7
  4026  0AA3  0820               	movf	_rfStatus,w
  4027  0AA4  0721               	addwf	_rfStatus+1,w
  4028  0AA5  00BF               	movwf	??_RfHalStatemachine
  4029  0AA6  0084               	movwf	4
  4030  0AA7  0185               	clrf	5
  4031  0AA8  3F01               	moviw [1]fsr0
  4032  0AA9  00B9               	movwf	RfTrcvCrcTick@data
  4033  0AAA  0821               	movf	_rfStatus+1,w
  4034  0AAB  3E19               	addlw	25
  4035  0AAC  0084               	movwf	4
  4036  0AAD  0800               	movf	0,w
  4037  0AAE                     i1L__ptext24:	
  4038                           
  4039                           ;psect for function _RfTrcvCrcTick
  4040  0AAE                     i1L_RfTrcvCrcTick:	
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  4044                           ;RfTrcvCrcTick@initial stored from wreg
  4045  0AAE  00BA               	movwf	RfTrcvCrcTick@initial
  4046  0AAF                     i1Ll2723:	
  4047                           
  4048                           ;mrf49xa.c: 59: return (initial ^ data);
  4049  0AAF  083A               	movf	RfTrcvCrcTick@initial,w
  4050  0AB0  0639               	xorwf	RfTrcvCrcTick@data,w
  4051  0AB1                     i1Ll183:	
  4052  0AB1  0081               	movwf	1
  4053                           
  4054                           ;hal.c: 413: rfStatus.isr.byteCounter++;
  4055  0AB2  0AA0               	incf	_rfStatus,f
  4056                           
  4057                           ;hal.c: 414: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  4058  0AB3  22F1  3188         	fcall	PL128	;call to abstracted procedure
  4059  0AB5  0220               	subwf	_rfStatus,w
  4060  0AB6  1C03               	skipc
  4061  0AB7  0008               	return
  4062                           
  4063                           ;hal.c: 415: rfStatus.isr.state = TX_CRC;
  4064  0AB8  3007               	movlw	7
  4065  0AB9  00A2               	movwf	_rfStatus+2
  4066  0ABA  0008               	return
  4067  0ABB                     l3129:	
  4068                           
  4069                           ;hal.c: 418: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  4070  0ABB  0821               	movf	_rfStatus+1,w
  4071  0ABC  3E19               	addlw	25
  4072  0ABD                     L2:	
  4073  0ABD  0086               	movwf	6
  4074  0ABE  0187               	clrf	7
  4075  0ABF  0801               	movf	1,w
  4076  0AC0  2A8A               	goto	L1
  4077  0AC1                     l3133:	
  4078                           
  4079                           ;hal.c: 423: case TX_NULL2:
  4080                           ;hal.c: 424: RfTrcvPut(0);
  4081  0AC1  3000               	movlw	0
  4082  0AC2  2A8A               	goto	L1
  4083  0AC3                     l3137:	
  4084                           
  4085                           ;hal.c: 428: RfTrcvPut(0);
  4086  0AC3  3000               	movlw	0
  4087  0AC4  26A9  3188         	fcall	_RfTrcvPut
  4088                           
  4089                           ;hal.c: 429: rfStatus.isr.state = RX_RECV;
  4090  0AC6  0020               	movlb	0	; select bank0
  4091  0AC7  3000               	movlw	0
  4092  0AC8  01A2               	clrf	_rfStatus+2
  4093                           
  4094                           ;hal.c: 435: RfTrcvMode(0);
  4095  0AC9  2E98               	ljmp	_RfTrcvMode
  4096  0ACA                     __end_of_RfHalStatemachine:	
  4097  0ACA                     __ptext5:	
  4098 ;; *************** function _RfTrcvGet *****************
  4099 ;; Defined at:
  4100 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  b               1    1[BANK0 ] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      unsigned char 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2, status,0, pclath, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 1F/0
  4111 ;;		On exit  : 1F/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4114 ;;      Params:         0       0       0       0
  4115 ;;      Locals:         0       1       0       0
  4116 ;;      Temps:          0       0       0       0
  4117 ;;      Totals:         0       1       0       0
  4118 ;;Total ram usage:        1 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    9
  4121 ;; This function calls:
  4122 ;;		_SPI_Read
  4123 ;;		_SPI_Write
  4124 ;; This function is called by:
  4125 ;;		_RfHalStatemachine
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           
  4130                           ;psect for function _RfTrcvGet
  4131  0ACA                     _RfTrcvGet:	
  4132                           
  4133                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in _RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  4137  0ACA  0022               	movlb	2	; select bank2
  4138  0ACB  130E               	bcf	14,6	;volatile
  4139                           
  4140                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  4141  0ACC  30B0               	movlw	176
  4142  0ACD  243F  3188         	fcall	_SPI_Write
  4143                           
  4144                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  4145  0ACF  2494               	fcall	_SPI_Read
  4146  0AD0  00BA               	movwf	RfTrcvGet@b
  4147                           
  4148                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  4149  0AD1  0022               	movlb	2	; select bank2
  4150  0AD2  170E               	bsf	14,6	;volatile
  4151                           
  4152                           ;mrf49xa.c: 26: return b;
  4153  0AD3  0020               	movlb	0	; select bank0
  4154  0AD4  083A               	movf	RfTrcvGet@b,w
  4155  0AD5  0008               	return
  4156  0AD6                     __end_of_RfTrcvGet:	
  4157  0AD6                     __ptext3:	
  4158 ;; *************** function __CCBufWrByte *****************
  4159 ;; Defined at:
  4160 ;;		line 94 in file "../../../src/utilities/ccbuf_static.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;  data            1    wreg     unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  data            1    4[BANK0 ] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;		None               void
  4167 ;; Registers used:
  4168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 1F/0
  4171 ;;		On exit  : 1F/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4174 ;;      Params:         0       0       0       0
  4175 ;;      Locals:         0       1       0       0
  4176 ;;      Temps:          0       1       0       0
  4177 ;;      Totals:         0       2       0       0
  4178 ;;Total ram usage:        2 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    9
  4181 ;; This function calls:
  4182 ;;		__CCBufCalcPt
  4183 ;;		__CCBufCanWr
  4184 ;; This function is called by:
  4185 ;;		_RfHalStatemachine
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function __CCBufWrByte
  4191  0AD6                     __CCBufWrByte:	
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in __CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4195                           ;__CCBufWrByte@data stored from wreg
  4196  0AD6  00BD               	movwf	__CCBufWrByte@data
  4197  0AD7                     i2L__ptext4:	
  4198                           ;ccbuf_static.c: 96: if (_CCBufCanWr())
  4199                           
  4200                           
  4201                           ;psect for function __CCBufCanWr
  4202  0AD7                     i2L__CCBufCanWr:	
  4203  0AD7                     i2Ll3233:	
  4204  0AD7  0846               	movf	_rfRxCC+2,w
  4205  0AD8  0647               	xorwf	_rfRxCC+3,w
  4206  0AD9  1D03               	btfss	3,2
  4207  0ADA  2ADF               	ljmp	i2Ll3241
  4208  0ADB  2ADD               	ljmp	i2Ll3235
  4209  0ADC                     i2Lu2371:	
  4210  0ADC  2ADF               	ljmp	i2Ll3241
  4211  0ADD                     i2Lu2370:	
  4212  0ADD                     i2Ll3235:	
  4213  0ADD  3000               	movlw	0
  4214  0ADE  2AE0               	ljmp	iL8
  4215  0ADF                     i2Ll3241:	
  4216                           
  4217                           ;ccbuf_static.c: 37: else return 1;
  4218  0ADF  3001               	movlw	1
  4219  0AE0                     i2Ll541:	
  4220  0AE0                     iL8:	
  4221  0AE0  3A00               	xorlw	0
  4222  0AE1  1903               	skipnz
  4223  0AE2  0008               	return
  4224  0AE3  0846               	movf	_rfRxCC+2,w
  4225  0AE4  0744               	addwf	_rfRxCC,w
  4226  0AE5  00BC               	movwf	??__CCBufWrByte
  4227  0AE6  0086               	movwf	6
  4228  0AE7  3001               	movlw	1	; select bank2/3
  4229  0AE8  0087               	movwf	7
  4230  0AE9  083D               	movf	__CCBufWrByte@data,w
  4231  0AEA  0081               	movwf	1
  4232  0AEB  01B9               	clrf	__CCBufCalcPt@move
  4233  0AEC  0AB9               	incf	__CCBufCalcPt@move,f
  4234  0AED  0846               	movf	_rfRxCC+2,w
  4235  0AEE  2601               	fcall	__CCBufCalcPt
  4236  0AEF  00C6               	movwf	_rfRxCC+2
  4237  0AF0  0008               	return
  4238  0AF1                     __end_of__CCBufWrByte:	
  4239  0AF1                     PL128:	
  4240  0AF1  0821               	movf	_rfStatus+1,w
  4241  0AF2  3E1B               	addlw	27
  4242  0AF3  0086               	movwf	6
  4243  0AF4  0187               	clrf	7
  4244  0AF5  0801               	movf	1,w
  4245  0AF6  0008               	return
  4246  0AF7                     __end_ofPL128:	
  4247  0AF7                     start_initialization:	
  4248                           ; #config settings
  4249                           
  4250  0AF7                     __initialization:	
  4251                           
  4252                           ; Clear objects allocated to BANK0
  4253  0AF7  3020               	movlw	low __pbssBANK0
  4254  0AF8  0084               	movwf	4
  4255  0AF9  3000               	movlw	high __pbssBANK0
  4256  0AFA  0085               	movwf	5
  4257  0AFB  3019               	movlw	25
  4258  0AFC  3181  2105  3188   	fcall	clear_ram0
  4259                           
  4260                           ; Clear objects allocated to BANK1
  4261  0AFF  30A0               	movlw	low __pbssBANK1
  4262  0B00  0084               	movwf	4
  4263  0B01  3000               	movlw	high __pbssBANK1
  4264  0B02  0085               	movwf	5
  4265  0B03  3038               	movlw	56
  4266  0B04  3181  2105  3188   	fcall	clear_ram0
  4267                           
  4268                           ; Clear objects allocated to BANK2
  4269  0B07  3020               	movlw	low __pbssBANK2
  4270  0B08  0084               	movwf	4
  4271  0B09  3001               	movlw	high __pbssBANK2
  4272  0B0A  0085               	movwf	5
  4273  0B0B  3040               	movlw	64
  4274  0B0C  3181  2105  3188   	fcall	clear_ram0
  4275                           
  4276                           ;initializer for _rfRxCC
  4277  0B0F  3020               	movlw	_rfRxBf& (0+255)
  4278  0B10  00C4               	movwf	__pdataBANK0& (0+127)
  4279  0B11  3040               	movlw	64
  4280  0B12  00C5               	movwf	(__pdataBANK0+1)& (0+127)
  4281  0B13  3000               	movlw	0
  4282  0B14  00C6               	movwf	(__pdataBANK0+2)& (0+127)
  4283  0B15  00C7               	movwf	(__pdataBANK0+3)& (0+127)
  4284  0B16                     end_of_initialization:	
  4285                           ;End of C runtime variable initialization code
  4286                           
  4287  0B16                     __end_of__initialization:	
  4288  0B16  0020               	movlb	0
  4289  0B17  2B18               	ljmp	_main	;jump to C main() function
  4290  0B18                     __pmaintext:	
  4291                           ; 0 bytes @ 0xB
  4292 ;;
  4293 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4294 ;;
  4295 ;; *************** function _main *****************
  4296 ;; Defined at:
  4297 ;;		line 65 in file "../../../src/node/main.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;		None               void
  4304 ;; Registers used:
  4305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 17F/0
  4308 ;;		On exit  : 1F/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4311 ;;      Params:         0       0       0       0
  4312 ;;      Locals:         0       0       0       0
  4313 ;;      Temps:          0       0       0       0
  4314 ;;      Totals:         0       0       0       0
  4315 ;;Total ram usage:        0 bytes
  4316 ;; Hardware stack levels required when called:   15
  4317 ;; This function calls:
  4318 ;;		_AdcInit
  4319 ;;		_ExtIntInit
  4320 ;;		_MRF49XAInit
  4321 ;;		_RfHalInit
  4322 ;;		_RfHalTickRxTh
  4323 ;;		_RfHalTickTxTh
  4324 ;;		_RfPacketsTickTh
  4325 ;;		_RfTrcvSetup
  4326 ;;		_RfTrcvStatus
  4327 ;;		_SysInitGpio
  4328 ;;		___lbmod
  4329 ;;		_mrf49XaIsr
  4330 ;; This function is called by:
  4331 ;;		Startup code after reset
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function _main
  4337  0B18                     _main:	
  4338                           
  4339                           ;main.c: 68: OSCCON = 0b01111000;
  4340                           
  4341                           ;incstack = 0
  4342                           ; Regs used in _main: [allreg]
  4343  0B18  3078               	movlw	120
  4344  0B19  0021               	movlb	1	; select bank1
  4345  0B1A  0099               	movwf	25	;volatile
  4346                           
  4347                           ;main.c: 70: SysInitGpio();
  4348  0B1B  27E4  3188         	fcall	_SysInitGpio
  4349                           
  4350                           ;main.c: 71: AdcInit();
  4351  0B1D  24CC  3188         	fcall	_AdcInit
  4352                           
  4353                           ;main.c: 73: ExtIntInit();
  4354  0B1F  24DB  3188         	fcall	_ExtIntInit
  4355                           
  4356                           ;main.c: 75: MRF49XAInit();
  4357  0B21  23AB  3188         	fcall	_MRF49XAInit
  4358                           
  4359                           ;main.c: 76: RfHalInit();
  4360  0B23  24E0  3188         	fcall	_RfHalInit
  4361  0B25                     l3255:	
  4362                           
  4363                           ;main.c: 79: {
  4364                           ;main.c: 80: if (PORTAbits.RA2 == 0) mrf49XaIsr();
  4365  0B25  190C               	btfsc	12,2	;volatile
  4366  0B26  2B29               	goto	l661
  4367  0B27  2257  3188         	fcall	_mrf49XaIsr
  4368  0B29                     l661:	
  4369                           
  4370                           ;main.c: 82: RfHalTickRxTh(&halRxBfTh);
  4371  0B29  3033               	movlw	_halRxBfTh& (0+255)
  4372  0B2A  250B  3188         	fcall	_RfHalTickRxTh
  4373                           
  4374                           ;main.c: 84: RfPacketsTickTh(&halPkTh);
  4375  0B2C  3031               	movlw	_halPkTh& (0+255)
  4376  0B2D  26EF  3188         	fcall	_RfPacketsTickTh
  4377                           
  4378                           ;main.c: 86: RfHalTickTxTh(&halTxBfTh);
  4379  0B2F  3035               	movlw	_halTxBfTh& (0+255)
  4380  0B30  2656  3188         	fcall	_RfHalTickTxTh
  4381                           
  4382                           ;main.c: 88: RfTrcvStatus();
  4383  0B32  2435  3188         	fcall	_RfTrcvStatus
  4384                           
  4385                           ;main.c: 89: if (rfTrcvStatus.flags.lsb.clockLock == 0 && rfStatus.inRx == 1)
  4386  0B34  0020               	movlb	0	; select bank0
  4387  0B35  1B38               	btfsc	_rfTrcvStatus+1,6
  4388  0B36  2B3A               	goto	l3271
  4389  0B37  0B23               	decfsz	_rfStatus+3,w
  4390  0B38  2B3A               	goto	l3271
  4391                           
  4392                           ;main.c: 90: worried++;
  4393  0B39  0AB0               	incf	_worried,f
  4394  0B3A                     l3271:	
  4395                           
  4396                           ;main.c: 92: dl1 = 33;
  4397  0B3A  3021               	movlw	33
  4398  0B3B  00A9               	movwf	_dl1
  4399                           
  4400                           ;main.c: 93: isr = 0;
  4401  0B3C  01AB               	clrf	_isr	;volatile
  4402                           
  4403                           ;main.c: 94: while (dl1 > 0 && isr == 0)
  4404  0B3D  2B49               	goto	l3285
  4405  0B3E                     l3275:	
  4406                           
  4407                           ;main.c: 95: {
  4408                           ;main.c: 96: dl2 = 0xFF;
  4409  0B3E  30FF               	movlw	255
  4410  0B3F  00AA               	movwf	_dl2
  4411                           
  4412                           ;main.c: 97: while (dl2 != 1 && isr == 0) dl2--;
  4413  0B40  2B42               	goto	l3279
  4414  0B41                     l3277:	
  4415  0B41  03AA               	decf	_dl2,f
  4416  0B42                     l3279:	
  4417  0B42  032A               	decf	_dl2,w
  4418  0B43  1903               	skipnz
  4419  0B44  2B48               	goto	l3283
  4420  0B45  082B               	movf	_isr,w	;volatile
  4421  0B46  1903               	btfsc	3,2
  4422  0B47  2B41               	goto	l3277
  4423  0B48                     l3283:	
  4424                           
  4425                           ;main.c: 98: dl1--;
  4426  0B48  03A9               	decf	_dl1,f
  4427  0B49                     l3285:	
  4428  0B49  0829               	movf	_dl1,w
  4429  0B4A  1903               	btfsc	3,2
  4430  0B4B  2B4F               	goto	l3289
  4431  0B4C  082B               	movf	_isr,w	;volatile
  4432  0B4D  1903               	btfsc	3,2
  4433  0B4E  2B3E               	goto	l3275
  4434  0B4F                     l3289:	
  4435                           
  4436                           ;main.c: 99: }
  4437                           ;main.c: 101: if (isr == 0)
  4438  0B4F  08AB               	movf	_isr,f	;volatile
  4439  0B50  1D03               	skipz
  4440  0B51  2B5E               	goto	l3299
  4441                           
  4442                           ;main.c: 102: {
  4443                           ;main.c: 103: RfTrcvStatus();
  4444  0B52  2435  3188         	fcall	_RfTrcvStatus
  4445                           
  4446                           ;main.c: 104: if (worried == 75)
  4447  0B54  0020               	movlb	0	; select bank0
  4448  0B55  0830               	movf	_worried,w
  4449  0B56  3A4B               	xorlw	75
  4450  0B57  1D03               	skipz
  4451  0B58  2B61               	goto	l3301
  4452                           
  4453                           ;main.c: 105: {
  4454                           ;main.c: 107: LATAbits.LATA4 = 0;
  4455  0B59  0022               	movlb	2	; select bank2
  4456  0B5A  120C               	bcf	12,4	;volatile
  4457  0B5B  0000               	nop	;# 
  4458                           
  4459                           ;main.c: 110: MRF49XAInit();
  4460  0B5C  23AB  3188         	fcall	_MRF49XAInit
  4461  0B5E                     l3299:	
  4462                           
  4463                           ;main.c: 112: worried = 0;
  4464  0B5E  0020               	movlb	0	; select bank0
  4465  0B5F  01B0               	clrf	_worried
  4466                           
  4467                           ;main.c: 113: }
  4468  0B60  2B25               	goto	l3255
  4469  0B61                     l3301:	
  4470                           
  4471                           ;main.c: 114: else
  4472                           ;main.c: 115: if (worried % 15 == 0 && rfTrcvStatus.flags.lsb.clockLock == 0 && rfStatus
      +                          .inRx == 1)
  4473  0B61  300F               	movlw	15
  4474  0B62  00B9               	movwf	___lbmod@divisor
  4475  0B63  0830               	movf	_worried,w
  4476  0B64  26D7  3188         	fcall	___lbmod
  4477  0B66  3800               	iorlw	0
  4478  0B67  1903               	btfsc	3,2
  4479  0B68  1B38               	btfsc	_rfTrcvStatus+1,6
  4480  0B69  2B25               	goto	l3255
  4481  0B6A  0323               	decf	_rfStatus+3,w
  4482  0B6B  1D03               	skipz
  4483  0B6C  2B25               	goto	l3255
  4484                           
  4485                           ;main.c: 116: {
  4486                           ;main.c: 117: RfTrcvSetup(0);
  4487  0B6D  3000               	movlw	0
  4488  0B6E  2371  3188         	fcall	_RfTrcvSetup
  4489  0B70  2B25               	goto	l3255
  4490  0B71                     __end_of_main:	
  4491  0B71                     __ptext34:	
  4492 ;; *************** function _RfTrcvSetup *****************
  4493 ;; Defined at:
  4494 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  tx              1    wreg     unsigned char 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  tx              1    4[BANK0 ] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;		None               void
  4501 ;; Registers used:
  4502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 1D/0
  4505 ;;		On exit  : 1F/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4508 ;;      Params:         0       0       0       0
  4509 ;;      Locals:         0       1       0       0
  4510 ;;      Temps:          0       0       0       0
  4511 ;;      Totals:         0       1       0       0
  4512 ;;Total ram usage:        1 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:   11
  4515 ;; This function calls:
  4516 ;;		_MRF49XACommand
  4517 ;;		_RfTrcvPut
  4518 ;; This function is called by:
  4519 ;;		_MRF49XAInit
  4520 ;;		_RfTrcvMode
  4521 ;;		_mrf49XaIsr
  4522 ;;		_main
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           
  4527                           ;psect for function _RfTrcvSetup
  4528  0B71                     _RfTrcvSetup:	
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _RfTrcvSetup: [allreg]
  4532                           ;RfTrcvSetup@tx stored from wreg
  4533  0B71  0020               	movlb	0	; select bank0
  4534  0B72  00BD               	movwf	RfTrcvSetup@tx
  4535                           
  4536                           ;mrf49xa.c: 63: if (tx)
  4537  0B73  083D               	movf	RfTrcvSetup@tx,w
  4538  0B74  1903               	btfsc	3,2
  4539  0B75  2B8A               	goto	l2735
  4540                           
  4541                           ;mrf49xa.c: 64: {
  4542                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  4543  0B76  3082               	movlw	130
  4544  0B77  01BA               	clrf	MRF49XACommand@cmd
  4545  0B78  00BB               	movwf	MRF49XACommand@cmd+1
  4546  0B79  242A  3188         	fcall	_MRF49XACommand
  4547                           
  4548                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  4549  0B7B  30A8               	movlw	168
  4550  0B7C  26C2  3188         	fcall	PL132	;call to abstracted procedure
  4551  0B7E  242A  3188         	fcall	_MRF49XACommand
  4552                           
  4553                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  4554  0B80  3020               	movlw	32
  4555  0B81  26C7  3188         	fcall	PL134	;call to abstracted procedure
  4556  0B83  242A  3188         	fcall	_MRF49XACommand
  4557                           
  4558                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  4559  0B85  3055               	movlw	85
  4560  0B86  26A9               	fcall	_RfTrcvPut
  4561                           
  4562                           ;mrf49xa.c: 71: rfStatus.inRx = 0;
  4563  0B87  0020               	movlb	0	; select bank0
  4564  0B88  01A3               	clrf	_rfStatus+3
  4565                           
  4566                           ;mrf49xa.c: 72: }
  4567  0B89  0008               	return
  4568  0B8A                     l2735:	
  4569                           
  4570                           ;mrf49xa.c: 73: else
  4571                           ;mrf49xa.c: 74: {
  4572                           ;mrf49xa.c: 75: MRF49XACommand(0x8200);
  4573  0B8A  3000               	movlw	0
  4574  0B8B  00BA               	movwf	MRF49XACommand@cmd
  4575  0B8C  3082               	movlw	130
  4576  0B8D  00BB               	movwf	MRF49XACommand@cmd+1
  4577  0B8E  242A  3188         	fcall	_MRF49XACommand
  4578                           
  4579                           ;mrf49xa.c: 76: MRF49XACommand(0xCA81);
  4580  0B90  3081               	movlw	129
  4581  0B91  26BD  3188         	fcall	PL130	;call to abstracted procedure
  4582  0B93  242A  3188         	fcall	_MRF49XACommand
  4583                           
  4584                           ;mrf49xa.c: 77: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  4585  0B95  3028               	movlw	40
  4586  0B96  26C2  3188         	fcall	PL132	;call to abstracted procedure
  4587  0B98  242A  3188         	fcall	_MRF49XACommand
  4588                           
  4589                           ;mrf49xa.c: 78: MRF49XACommand(0x8200 | 0x0080);
  4590  0B9A  3080               	movlw	128
  4591  0B9B  26C7  3188         	fcall	PL134	;call to abstracted procedure
  4592  0B9D  242A  3188         	fcall	_MRF49XACommand
  4593                           
  4594                           ;mrf49xa.c: 79: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  4595  0B9F  3068               	movlw	104
  4596  0BA0  26C2  3188         	fcall	PL132	;call to abstracted procedure
  4597  0BA2  242A  3188         	fcall	_MRF49XACommand
  4598                           
  4599                           ;mrf49xa.c: 80: MRF49XACommand(0xCA81 | 0x0002);
  4600  0BA4  26B2  3188         	fcall	PL124	;call to abstracted procedure
  4601  0BA6  242A               	fcall	_MRF49XACommand
  4602                           
  4603                           ;mrf49xa.c: 81: rfStatus.inRx = 1;
  4604  0BA7  0020               	movlb	0	; select bank0
  4605  0BA8  01A3               	clrf	_rfStatus+3
  4606  0BA9  0AA3               	incf	_rfStatus+3,f
  4607  0BAA  0008               	return
  4608  0BAB                     __end_of_RfTrcvSetup:	
  4609  0BAB                     __ptext33:	
  4610 ;; *************** function _MRF49XAInit *****************
  4611 ;; Defined at:
  4612 ;;		line 85 in file "../../../src/devices/mrf49xa.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  j               1    6[BANK0 ] unsigned char 
  4617 ;;  i               1    5[BANK0 ] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;		None               void
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/1
  4624 ;;		On exit  : 1F/4
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4627 ;;      Params:         0       0       0       0
  4628 ;;      Locals:         0       2       0       0
  4629 ;;      Temps:          0       0       0       0
  4630 ;;      Totals:         0       2       0       0
  4631 ;;Total ram usage:        2 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:   12
  4634 ;; This function calls:
  4635 ;;		_MRF49XACommand
  4636 ;;		_RfTrcvSetup
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _MRF49XAInit
  4644  0BAB                     _MRF49XAInit:	
  4645                           
  4646                           ;mrf49xa.c: 88: UI08_t i, j;
  4647                           ;mrf49xa.c: 91: LATCbits.LATC1 = 1;
  4648                           
  4649                           ;incstack = 0
  4650                           ; Regs used in _MRF49XAInit: [allreg]
  4651  0BAB  0022               	movlb	2	; select bank2
  4652  0BAC  148E               	bsf	14,1	;volatile
  4653                           
  4654                           ;mrf49xa.c: 92: LATAbits.LATA4 = 0;
  4655  0BAD  120C               	bcf	12,4	;volatile
  4656                           
  4657                           ;mrf49xa.c: 93: LATAbits.LATA5 = 0;
  4658  0BAE  128C               	bcf	12,5	;volatile
  4659  0BAF  0000               	nop	;# 
  4660                           
  4661                           ;mrf49xa.c: 95: LATAbits.LATA4 = 1;
  4662  0BB0  0022               	movlb	2	; select bank2
  4663  0BB1  160C               	bsf	12,4	;volatile
  4664                           
  4665                           ;mrf49xa.c: 96: LATAbits.LATA5 = 1;
  4666  0BB2  168C               	bsf	12,5	;volatile
  4667                           
  4668                           ;mrf49xa.c: 98: LATCbits.LATC4 = 1;
  4669  0BB3  160E               	bsf	14,4	;volatile
  4670                           
  4671                           ;mrf49xa.c: 103: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  4672  0BB4  0020               	movlb	0	; select bank0
  4673  0BB5  01BE               	clrf	MRF49XAInit@i
  4674  0BB6                     l2747:	
  4675  0BB6  01BF               	clrf	MRF49XAInit@j
  4676  0BB7                     l193:	
  4677  0BB7  0000               	nop	;# 
  4678  0BB8  26D2  3188         	fcall	PL138	;call to abstracted procedure
  4679  0BBA  1C03               	skipc
  4680  0BBB  2BB7               	goto	l193
  4681  0BBC  30FA               	movlw	250
  4682  0BBD  0ABE               	incf	MRF49XAInit@i,f
  4683  0BBE  023E               	subwf	MRF49XAInit@i,w
  4684  0BBF  1C03               	skipc
  4685  0BC0  2BB6               	goto	l2747
  4686                           
  4687                           ;mrf49xa.c: 106: MRF49XACommand(0xCA81);
  4688  0BC1  3081               	movlw	129
  4689  0BC2  00BA               	movwf	MRF49XACommand@cmd
  4690  0BC3  30CA               	movlw	202
  4691  0BC4  00BB               	movwf	MRF49XACommand@cmd+1
  4692  0BC5  242A  3188         	fcall	_MRF49XACommand
  4693                           
  4694                           ;mrf49xa.c: 107: MRF49XACommand(0xCA81 | 0x0002);
  4695  0BC7  26B2  3188         	fcall	PL124	;call to abstracted procedure
  4696  0BC9  242A  3188         	fcall	_MRF49XACommand
  4697                           
  4698                           ;mrf49xa.c: 108: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  4699  0BCB  3028               	movlw	40
  4700  0BCC  26C2  3188         	fcall	PL132	;call to abstracted procedure
  4701  0BCE  242A  3188         	fcall	_MRF49XACommand
  4702                           
  4703                           ;mrf49xa.c: 109: MRF49XACommand(0xC4D7);
  4704  0BD0  30D7               	movlw	215
  4705  0BD1  0020               	movlb	0	; select bank0
  4706  0BD2  00BA               	movwf	MRF49XACommand@cmd
  4707  0BD3  30C4               	movlw	196
  4708  0BD4  00BB               	movwf	MRF49XACommand@cmd+1
  4709  0BD5  242A  3188         	fcall	_MRF49XACommand
  4710                           
  4711                           ;mrf49xa.c: 110: MRF49XACommand(0xA860);
  4712  0BD7  3060               	movlw	96
  4713  0BD8  0020               	movlb	0	; select bank0
  4714  0BD9  00BA               	movwf	MRF49XACommand@cmd
  4715  0BDA  30A8               	movlw	168
  4716  0BDB  00BB               	movwf	MRF49XACommand@cmd+1
  4717  0BDC  242A  3188         	fcall	_MRF49XACommand
  4718                           
  4719                           ;mrf49xa.c: 111: MRF49XACommand(0xC611);
  4720  0BDE  3011               	movlw	17
  4721  0BDF  0020               	movlb	0	; select bank0
  4722  0BE0  00BA               	movwf	MRF49XACommand@cmd
  4723  0BE1  30C6               	movlw	198
  4724  0BE2  00BB               	movwf	MRF49XACommand@cmd+1
  4725  0BE3  242A  3188         	fcall	_MRF49XACommand
  4726                           
  4727                           ;mrf49xa.c: 112: MRF49XACommand(0x8200);
  4728  0BE5  3000               	movlw	0
  4729  0BE6  26C7  3188         	fcall	PL134	;call to abstracted procedure
  4730  0BE8  242A  3188         	fcall	_MRF49XACommand
  4731                           
  4732                           ;mrf49xa.c: 113: MRF49XACommand((0x9460 | 0x0000 | 0x0003));
  4733  0BEA  3063               	movlw	99
  4734  0BEB  0020               	movlb	0	; select bank0
  4735  0BEC  00BA               	movwf	MRF49XACommand@cmd
  4736  0BED  3094               	movlw	148
  4737  0BEE  00BB               	movwf	MRF49XACommand@cmd+1
  4738  0BEF  242A  3188         	fcall	_MRF49XACommand
  4739                           
  4740                           ;mrf49xa.c: 114: MRF49XACommand(0x9890);
  4741  0BF1  3090               	movlw	144
  4742  0BF2  0020               	movlb	0	; select bank0
  4743  0BF3  00BA               	movwf	MRF49XACommand@cmd
  4744  0BF4  3098               	movlw	152
  4745  0BF5  00BB               	movwf	MRF49XACommand@cmd+1
  4746  0BF6  242A  3188         	fcall	_MRF49XACommand
  4747                           
  4748                           ;mrf49xa.c: 115: MRF49XACommand(0xC2AC);
  4749  0BF8  30AC               	movlw	172
  4750  0BF9  0020               	movlb	0	; select bank0
  4751  0BFA  00BA               	movwf	MRF49XACommand@cmd
  4752  0BFB  30C2               	movlw	194
  4753  0BFC  00BB               	movwf	MRF49XACommand@cmd+1
  4754  0BFD  242A  3188         	fcall	_MRF49XACommand
  4755                           
  4756                           ;mrf49xa.c: 116: MRF49XACommand(0x8200 | 0x0020);
  4757  0BFF  3020               	movlw	32
  4758  0C00  26C7  3188         	fcall	PL134	;call to abstracted procedure
  4759  0C02  242A  3188         	fcall	_MRF49XACommand
  4760                           
  4761                           ;mrf49xa.c: 121: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  4762  0C04  0020               	movlb	0	; select bank0
  4763  0C05  01BE               	clrf	MRF49XAInit@i
  4764  0C06                     l2769:	
  4765  0C06  01BF               	clrf	MRF49XAInit@j
  4766  0C07                     l197:	
  4767  0C07  0000               	nop	;# 
  4768  0C08  26D2  3188         	fcall	PL138	;call to abstracted procedure
  4769  0C0A  1C03               	skipc
  4770  0C0B  2C07               	goto	l197
  4771  0C0C  30FA               	movlw	250
  4772  0C0D  0ABE               	incf	MRF49XAInit@i,f
  4773  0C0E  023E               	subwf	MRF49XAInit@i,w
  4774  0C0F  1C03               	skipc
  4775  0C10  2C06               	goto	l2769
  4776                           
  4777                           ;mrf49xa.c: 124: MRF49XACommand(0x8200 | 0x0080);
  4778  0C11  3080               	movlw	128
  4779  0C12  00BA               	movwf	MRF49XACommand@cmd
  4780  0C13  3082               	movlw	130
  4781  0C14  00BB               	movwf	MRF49XACommand@cmd+1
  4782  0C15  242A  3188         	fcall	_MRF49XACommand
  4783                           
  4784                           ;mrf49xa.c: 125: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  4785  0C17  3068               	movlw	104
  4786  0C18  26C2  3188         	fcall	PL132	;call to abstracted procedure
  4787  0C1A  242A  3188         	fcall	_MRF49XACommand
  4788                           
  4789                           ;mrf49xa.c: 126: MRF49XACommand(0xCA81);
  4790  0C1C  3081               	movlw	129
  4791  0C1D  26BD  3188         	fcall	PL130	;call to abstracted procedure
  4792  0C1F  242A  3188         	fcall	_MRF49XACommand
  4793                           
  4794                           ;mrf49xa.c: 127: MRF49XACommand(0xCA81 | 0x0002);
  4795  0C21  26B2  3188         	fcall	PL124	;call to abstracted procedure
  4796  0C23  242A  3188         	fcall	_MRF49XACommand
  4797                           
  4798                           ;mrf49xa.c: 129: RfTrcvSetup(0);
  4799  0C25  3000               	movlw	0
  4800  0C26  2371               	fcall	_RfTrcvSetup
  4801                           
  4802                           ;mrf49xa.c: 137: WPUAbits.WPUA2 = 1;
  4803  0C27  0024               	movlb	4	; select bank4
  4804  0C28  150C               	bsf	12,2	;volatile
  4805  0C29  0008               	return
  4806  0C2A                     __end_of_MRF49XAInit:	
  4807  0C2A                     __ptext36:	
  4808 ;; *************** function _MRF49XACommand *****************
  4809 ;; Defined at:
  4810 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  cmd             2    1[BANK0 ] unsigned int 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 1F/0
  4821 ;;		On exit  : 1F/2
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4824 ;;      Params:         0       2       0       0
  4825 ;;      Locals:         0       0       0       0
  4826 ;;      Temps:          0       0       0       0
  4827 ;;      Totals:         0       2       0       0
  4828 ;;Total ram usage:        2 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    9
  4831 ;; This function calls:
  4832 ;;		_SPI_Write
  4833 ;; This function is called by:
  4834 ;;		_RfTrcvPut
  4835 ;;		_RfTrcvSetup
  4836 ;;		_MRF49XAInit
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           
  4841                           ;psect for function _MRF49XACommand
  4842  0C2A                     _MRF49XACommand:	
  4843  0C2A                     l2631:	
  4844                           ;incstack = 0
  4845                           ; Regs used in _MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  4846                           
  4847                           
  4848                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  4849  0C2A  0022               	movlb	2	; select bank2
  4850  0C2B  130E               	bcf	14,6	;volatile
  4851                           
  4852                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  4853  0C2C  0020               	movlb	0	; select bank0
  4854  0C2D  083B               	movf	MRF49XACommand@cmd+1,w
  4855  0C2E  243F  3188         	fcall	_SPI_Write
  4856                           
  4857                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  4858  0C30  0020               	movlb	0	; select bank0
  4859  0C31  083A               	movf	MRF49XACommand@cmd,w
  4860  0C32  243F               	fcall	_SPI_Write
  4861                           
  4862                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  4863  0C33  170E               	bsf	14,6	;volatile
  4864  0C34  0008               	return
  4865  0C35                     __end_of_MRF49XACommand:	
  4866  0C35                     __ptext15:	
  4867 ;; *************** function _RfTrcvStatus *****************
  4868 ;; Defined at:
  4869 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;		None               void
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, pclath, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 1F/0
  4880 ;;		On exit  : 1F/2
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4883 ;;      Params:         0       0       0       0
  4884 ;;      Locals:         0       0       0       0
  4885 ;;      Temps:          0       0       0       0
  4886 ;;      Totals:         0       0       0       0
  4887 ;;Total ram usage:        0 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    9
  4890 ;; This function calls:
  4891 ;;		_SPI_Read
  4892 ;; This function is called by:
  4893 ;;		_RfTrcvCarrierPresent
  4894 ;;		_mrf49XaIsr
  4895 ;;		_main
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function _RfTrcvStatus
  4901  0C35                     _RfTrcvStatus:	
  4902                           
  4903                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _RfTrcvStatus: [wreg+status,2+pclath+cstack]
  4907  0C35  0022               	movlb	2	; select bank2
  4908  0C36  130E               	bcf	14,6	;volatile
  4909                           
  4910                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  4911  0C37  2494  3188         	fcall	_SPI_Read
  4912  0C39  00B7               	movwf	_rfTrcvStatus
  4913                           
  4914                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  4915  0C3A  2494               	fcall	_SPI_Read
  4916  0C3B  00B8               	movwf	_rfTrcvStatus+1
  4917                           
  4918                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  4919  0C3C  0022               	movlb	2	; select bank2
  4920  0C3D  170E               	bsf	14,6	;volatile
  4921  0C3E  0008               	return
  4922  0C3F                     __end_of_RfTrcvStatus:	
  4923  0C3F                     __ptext37:	
  4924 ;; *************** function _SPI_Write *****************
  4925 ;; Defined at:
  4926 ;;		line 193 in file "../../../src/devices/mrf49xa.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  data            1    wreg     unsigned char 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  data            1    0[BANK0 ] unsigned char 
  4931 ;; Return value:  Size  Location     Type
  4932 ;;		None               void
  4933 ;; Registers used:
  4934 ;;		wreg
  4935 ;; Tracked objects:
  4936 ;;		On entry : 1D/2
  4937 ;;		On exit  : 1F/2
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4940 ;;      Params:         0       0       0       0
  4941 ;;      Locals:         0       1       0       0
  4942 ;;      Temps:          0       0       0       0
  4943 ;;      Totals:         0       1       0       0
  4944 ;;Total ram usage:        1 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    8
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_RfTrcvGet
  4951 ;;		_MRF49XACommand
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           
  4956                           ;psect for function _SPI_Write
  4957  0C3F                     _SPI_Write:	
  4958                           
  4959                           ;incstack = 0
  4960                           ; Regs used in _SPI_Write: [wreg]
  4961                           ;SPI_Write@data stored from wreg
  4962  0C3F  0020               	movlb	0	; select bank0
  4963  0C40  00B9               	movwf	SPI_Write@data
  4964                           
  4965                           ;mrf49xa.c: 200: LATCbits.LATC7 = 0;
  4966  0C41  0022               	movlb	2	; select bank2
  4967  0C42  138E               	bcf	14,7	;volatile
  4968  0C43  0020               	movlb	0	; select bank0
  4969  0C44  1FB9               	btfss	SPI_Write@data,7
  4970  0C45  2C49               	goto	l230
  4971  0C46  0022               	movlb	2	; select bank2
  4972  0C47  178D               	bsf	13,7	;volatile
  4973  0C48  2C4B               	goto	l231
  4974  0C49                     l230:	
  4975  0C49  0022               	movlb	2	; select bank2
  4976  0C4A  138D               	bcf	13,7	;volatile
  4977  0C4B                     l231:	
  4978  0C4B  178E               	bsf	14,7	;volatile
  4979  0C4C  138E               	bcf	14,7	;volatile
  4980  0C4D  0020               	movlb	0	; select bank0
  4981  0C4E  1F39               	btfss	SPI_Write@data,6
  4982  0C4F  2C53               	goto	l234
  4983  0C50  0022               	movlb	2	; select bank2
  4984  0C51  178D               	bsf	13,7	;volatile
  4985  0C52  2C55               	goto	l235
  4986  0C53                     l234:	
  4987  0C53  0022               	movlb	2	; select bank2
  4988  0C54  138D               	bcf	13,7	;volatile
  4989  0C55                     l235:	
  4990  0C55  178E               	bsf	14,7	;volatile
  4991  0C56  138E               	bcf	14,7	;volatile
  4992  0C57  0020               	movlb	0	; select bank0
  4993  0C58  1EB9               	btfss	SPI_Write@data,5
  4994  0C59  2C5D               	goto	l238
  4995  0C5A  0022               	movlb	2	; select bank2
  4996  0C5B  178D               	bsf	13,7	;volatile
  4997  0C5C  2C5F               	goto	l239
  4998  0C5D                     l238:	
  4999  0C5D  0022               	movlb	2	; select bank2
  5000  0C5E  138D               	bcf	13,7	;volatile
  5001  0C5F                     l239:	
  5002  0C5F  178E               	bsf	14,7	;volatile
  5003  0C60  138E               	bcf	14,7	;volatile
  5004  0C61  0020               	movlb	0	; select bank0
  5005  0C62  1E39               	btfss	SPI_Write@data,4
  5006  0C63  2C67               	goto	l242
  5007  0C64  0022               	movlb	2	; select bank2
  5008  0C65  178D               	bsf	13,7	;volatile
  5009  0C66  2C69               	goto	l243
  5010  0C67                     l242:	
  5011  0C67  0022               	movlb	2	; select bank2
  5012  0C68  138D               	bcf	13,7	;volatile
  5013  0C69                     l243:	
  5014  0C69  178E               	bsf	14,7	;volatile
  5015  0C6A  138E               	bcf	14,7	;volatile
  5016  0C6B  0020               	movlb	0	; select bank0
  5017  0C6C  1DB9               	btfss	SPI_Write@data,3
  5018  0C6D  2C71               	goto	l246
  5019  0C6E  0022               	movlb	2	; select bank2
  5020  0C6F  178D               	bsf	13,7	;volatile
  5021  0C70  2C73               	goto	l247
  5022  0C71                     l246:	
  5023  0C71  0022               	movlb	2	; select bank2
  5024  0C72  138D               	bcf	13,7	;volatile
  5025  0C73                     l247:	
  5026  0C73  178E               	bsf	14,7	;volatile
  5027  0C74  138E               	bcf	14,7	;volatile
  5028  0C75  0020               	movlb	0	; select bank0
  5029  0C76  1D39               	btfss	SPI_Write@data,2
  5030  0C77  2C7B               	goto	l250
  5031  0C78  0022               	movlb	2	; select bank2
  5032  0C79  178D               	bsf	13,7	;volatile
  5033  0C7A  2C7D               	goto	l251
  5034  0C7B                     l250:	
  5035  0C7B  0022               	movlb	2	; select bank2
  5036  0C7C  138D               	bcf	13,7	;volatile
  5037  0C7D                     l251:	
  5038  0C7D  178E               	bsf	14,7	;volatile
  5039  0C7E  138E               	bcf	14,7	;volatile
  5040  0C7F  0020               	movlb	0	; select bank0
  5041  0C80  1CB9               	btfss	SPI_Write@data,1
  5042  0C81  2C85               	goto	l254
  5043  0C82  0022               	movlb	2	; select bank2
  5044  0C83  178D               	bsf	13,7	;volatile
  5045  0C84  2C87               	goto	l255
  5046  0C85                     l254:	
  5047  0C85  0022               	movlb	2	; select bank2
  5048  0C86  138D               	bcf	13,7	;volatile
  5049  0C87                     l255:	
  5050  0C87  178E               	bsf	14,7	;volatile
  5051  0C88  138E               	bcf	14,7	;volatile
  5052  0C89  0020               	movlb	0	; select bank0
  5053  0C8A  1C39               	btfss	SPI_Write@data,0
  5054  0C8B  2C8F               	goto	l258
  5055  0C8C  0022               	movlb	2	; select bank2
  5056  0C8D  178D               	bsf	13,7	;volatile
  5057  0C8E  2C91               	goto	l259
  5058  0C8F                     l258:	
  5059  0C8F  0022               	movlb	2	; select bank2
  5060  0C90  138D               	bcf	13,7	;volatile
  5061  0C91                     l259:	
  5062  0C91  178E               	bsf	14,7	;volatile
  5063  0C92  138E               	bcf	14,7	;volatile
  5064  0C93  0008               	return
  5065  0C94                     __end_of_SPI_Write:	
  5066  0C94                     __ptext16:	
  5067 ;; *************** function _SPI_Read *****************
  5068 ;; Defined at:
  5069 ;;		line 147 in file "../../../src/devices/mrf49xa.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;		None
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  data            1    0[BANK0 ] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      unsigned char 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2
  5078 ;; Tracked objects:
  5079 ;;		On entry : 1D/2
  5080 ;;		On exit  : 1F/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5083 ;;      Params:         0       0       0       0
  5084 ;;      Locals:         0       1       0       0
  5085 ;;      Temps:          0       0       0       0
  5086 ;;      Totals:         0       1       0       0
  5087 ;;Total ram usage:        1 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    8
  5090 ;; This function calls:
  5091 ;;		Nothing
  5092 ;; This function is called by:
  5093 ;;		_RfTrcvGet
  5094 ;;		_RfTrcvStatus
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function _SPI_Read
  5100  0C94                     _SPI_Read:	
  5101                           
  5102                           ;mrf49xa.c: 152: UI08_t data = 0;
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _SPI_Read: [wreg+status,2]
  5106  0C94  0020               	movlb	0	; select bank0
  5107  0C95  01B9               	clrf	SPI_Read@data
  5108                           
  5109                           ;mrf49xa.c: 153: LATCbits.LATC7 = 0;
  5110  0C96  0022               	movlb	2	; select bank2
  5111  0C97  138E               	bcf	14,7	;volatile
  5112                           
  5113                           ;mrf49xa.c: 154: LATBbits.LATB7 = 0;
  5114  0C98  138D               	bcf	13,7	;volatile
  5115  0C99  0020               	movlb	0	; select bank0
  5116  0C9A  1A8E               	btfsc	14,5	;volatile
  5117  0C9B  17B9               	bsf	SPI_Read@data,7
  5118  0C9C  0022               	movlb	2	; select bank2
  5119  0C9D  178E               	bsf	14,7	;volatile
  5120  0C9E  138E               	bcf	14,7	;volatile
  5121                           
  5122                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5123  0C9F  0020               	movlb	0	; select bank0
  5124  0CA0  1A8E               	btfsc	14,5	;volatile
  5125  0CA1  1739               	bsf	SPI_Read@data,6
  5126  0CA2  0022               	movlb	2	; select bank2
  5127  0CA3  178E               	bsf	14,7	;volatile
  5128  0CA4  138E               	bcf	14,7	;volatile
  5129                           
  5130                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5131  0CA5  0020               	movlb	0	; select bank0
  5132  0CA6  1A8E               	btfsc	14,5	;volatile
  5133  0CA7  16B9               	bsf	SPI_Read@data,5
  5134  0CA8  0022               	movlb	2	; select bank2
  5135  0CA9  178E               	bsf	14,7	;volatile
  5136  0CAA  138E               	bcf	14,7	;volatile
  5137                           
  5138                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5139  0CAB  0020               	movlb	0	; select bank0
  5140  0CAC  1A8E               	btfsc	14,5	;volatile
  5141  0CAD  1639               	bsf	SPI_Read@data,4
  5142  0CAE  0022               	movlb	2	; select bank2
  5143  0CAF  178E               	bsf	14,7	;volatile
  5144  0CB0  138E               	bcf	14,7	;volatile
  5145                           
  5146                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5147  0CB1  0020               	movlb	0	; select bank0
  5148  0CB2  1A8E               	btfsc	14,5	;volatile
  5149  0CB3  15B9               	bsf	SPI_Read@data,3
  5150  0CB4  0022               	movlb	2	; select bank2
  5151  0CB5  178E               	bsf	14,7	;volatile
  5152  0CB6  138E               	bcf	14,7	;volatile
  5153                           
  5154                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5155  0CB7  0020               	movlb	0	; select bank0
  5156  0CB8  1A8E               	btfsc	14,5	;volatile
  5157  0CB9  1539               	bsf	SPI_Read@data,2
  5158  0CBA  0022               	movlb	2	; select bank2
  5159  0CBB  178E               	bsf	14,7	;volatile
  5160  0CBC  138E               	bcf	14,7	;volatile
  5161                           
  5162                           ;mrf49xa.c: 166: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5163  0CBD  0020               	movlb	0	; select bank0
  5164  0CBE  1A8E               	btfsc	14,5	;volatile
  5165  0CBF  14B9               	bsf	SPI_Read@data,1
  5166  0CC0  0022               	movlb	2	; select bank2
  5167  0CC1  178E               	bsf	14,7	;volatile
  5168  0CC2  138E               	bcf	14,7	;volatile
  5169                           
  5170                           ;mrf49xa.c: 167: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5171  0CC3  0020               	movlb	0	; select bank0
  5172  0CC4  1A8E               	btfsc	14,5	;volatile
  5173  0CC5  1439               	bsf	SPI_Read@data,0
  5174  0CC6  0022               	movlb	2	; select bank2
  5175  0CC7  178E               	bsf	14,7	;volatile
  5176  0CC8  138E               	bcf	14,7	;volatile
  5177                           
  5178                           ;mrf49xa.c: 190: return data;
  5179  0CC9  0020               	movlb	0	; select bank0
  5180  0CCA  0839               	movf	SPI_Read@data,w
  5181  0CCB  0008               	return
  5182  0CCC                     __end_of_SPI_Read:	
  5183  0CCC                     __ptext39:	
  5184 ;; *************** function _AdcInit *****************
  5185 ;; Defined at:
  5186 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;		None               void
  5193 ;; Registers used:
  5194 ;;		wreg, status,2
  5195 ;; Tracked objects:
  5196 ;;		On entry : 17F/2
  5197 ;;		On exit  : 17F/1
  5198 ;;		Unchanged: 160/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5200 ;;      Params:         0       0       0       0
  5201 ;;      Locals:         0       0       0       0
  5202 ;;      Temps:          0       0       0       0
  5203 ;;      Totals:         0       0       0       0
  5204 ;;Total ram usage:        0 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    8
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_main
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           
  5215                           ;psect for function _AdcInit
  5216  0CCC                     _AdcInit:	
  5217                           
  5218                           ;adc16.c: 6: ANSELA = 0;
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _AdcInit: [wreg+status,2]
  5222  0CCC  0023               	movlb	3	; select bank3
  5223  0CCD  018C               	clrf	12	;volatile
  5224                           
  5225                           ;adc16.c: 7: ANSELB = 0;
  5226  0CCE  018D               	clrf	13	;volatile
  5227                           
  5228                           ;adc16.c: 8: ANSELC = 0;
  5229  0CCF  018E               	clrf	14	;volatile
  5230                           
  5231                           ;adc16.c: 10: FVRCON = 0b11100001;
  5232  0CD0  30E1               	movlw	225
  5233  0CD1  0022               	movlb	2	; select bank2
  5234  0CD2  0097               	movwf	23	;volatile
  5235                           
  5236                           ;adc16.c: 12: ADCON2 = 0b00000000;
  5237  0CD3  0021               	movlb	1	; select bank1
  5238  0CD4  019F               	clrf	31	;volatile
  5239                           
  5240                           ;adc16.c: 13: ADCON1 = 0b11110000;
  5241  0CD5  30F0               	movlw	240
  5242  0CD6  009E               	movwf	30	;volatile
  5243                           
  5244                           ;adc16.c: 14: ADCON0 = 0b00000000;
  5245  0CD7  019D               	clrf	29	;volatile
  5246                           
  5247                           ;adc16.c: 16: ADCON0 = 0b00010011;
  5248  0CD8  3013               	movlw	19
  5249  0CD9  009D               	movwf	29	;volatile
  5250  0CDA  0008               	return
  5251  0CDB                     __end_of_AdcInit:	
  5252  0CDB                     __ptext38:	
  5253 ;; *************** function _ExtIntInit *****************
  5254 ;; Defined at:
  5255 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		None
  5264 ;; Tracked objects:
  5265 ;;		On entry : 17F/1
  5266 ;;		On exit  : 17F/1
  5267 ;;		Unchanged: 160/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5269 ;;      Params:         0       0       0       0
  5270 ;;      Locals:         0       0       0       0
  5271 ;;      Temps:          0       0       0       0
  5272 ;;      Totals:         0       0       0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    8
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _ExtIntInit
  5285  0CDB                     _ExtIntInit:	
  5286                           
  5287                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _ExtIntInit: []
  5291  0CDB  1315               	bcf	21,6	;volatile
  5292                           
  5293                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  5294  0CDC  108B               	bcf	11,1	;volatile
  5295                           
  5296                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  5297  0CDD  160B               	bsf	11,4	;volatile
  5298                           
  5299                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  5300  0CDE  178B               	bsf	11,7	;volatile
  5301  0CDF  0008               	return
  5302  0CE0                     __end_of_ExtIntInit:	
  5303  0CE0                     __ptext29:	
  5304 ;; *************** function _RfHalInit *****************
  5305 ;; Defined at:
  5306 ;;		line 40 in file "../../../src/rfstack/hal.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;		None
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  i               1    6[BANK0 ] unsigned char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;		None               void
  5313 ;; Registers used:
  5314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 1F/4
  5317 ;;		On exit  : 1F/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5320 ;;      Params:         0       0       0       0
  5321 ;;      Locals:         0       1       0       0
  5322 ;;      Temps:          0       0       0       0
  5323 ;;      Totals:         0       1       0       0
  5324 ;;Total ram usage:        1 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:   13
  5327 ;; This function calls:
  5328 ;;		_RfTrcvMode
  5329 ;;		__CCBufInit
  5330 ;; This function is called by:
  5331 ;;		_main
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           
  5336                           ;psect for function _RfHalInit
  5337  0CE0                     _RfHalInit:	
  5338                           
  5339                           ;hal.c: 43: rfStatus.isr.byteCounter = 0;
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _RfHalInit: [allreg]
  5343  0CE0  0020               	movlb	0	; select bank0
  5344  0CE1  30A0               	movlw	_rfPackets& (0+255)
  5345  0CE2  01A0               	clrf	_rfStatus
  5346                           
  5347                           ;hal.c: 44: rfStatus.isr.txPacket = rfPackets;
  5348  0CE3  00A1               	movwf	_rfStatus+1
  5349                           
  5350                           ;hal.c: 45: rfStatus.isr.state = RX_RECV;
  5351  0CE4  01A2               	clrf	_rfStatus+2
  5352                           
  5353                           ;hal.c: 48: for (i = 0; i < 2 * sizeof(RfTransceiverPacket_t); i++)
  5354  0CE5  01BF               	clrf	RfHalInit@i
  5355  0CE6                     l2801:	
  5356                           
  5357                           ;hal.c: 49: ((UI08_t*) rfPackets)[i] = 0;
  5358  0CE6  083F               	movf	RfHalInit@i,w
  5359  0CE7  3EA0               	addlw	_rfPackets& (0+255)
  5360  0CE8  0086               	movwf	6
  5361  0CE9  3038               	movlw	56
  5362  0CEA  0187               	clrf	7
  5363  0CEB  0181               	clrf	1
  5364  0CEC  0ABF               	incf	RfHalInit@i,f
  5365  0CED  023F               	subwf	RfHalInit@i,w
  5366  0CEE  1C03               	skipc
  5367  0CEF  2CE6               	goto	l2801
  5368                           
  5369                           ;psect for function __CCBufInit
  5370                           
  5371                           ;hal.c: 51: _CCBufInit();
  5372  0CF0                     i9L__CCBufInit:	
  5373  0CF0                     i9Ll2813:	
  5374  0CF0                     i10L__ptext31:	
  5375                           ;ccbuf_static.c: 7: _CCBufReset();
  5376                           
  5377                           
  5378                           ;psect for function __CCBufReset
  5379  0CF0                     i10L__CCBufReset:	
  5380  0CF0                     i10Ll3209:	
  5381  0CF0  0845               	movf	_rfRxCC+1,w
  5382  0CF1  00BA               	movwf	__CCBufReset@i
  5383  0CF2  2CFB               	ljmp	i10Ll3215
  5384  0CF3                     i10Ll3211:	
  5385                           
  5386                           ;ccbuf_static.c: 15: {
  5387                           ;ccbuf_static.c: 16: i--;
  5388  0CF3  03BA               	decf	__CCBufReset@i,f
  5389  0CF4                     i10Ll3213:	
  5390  0CF4  083A               	movf	__CCBufReset@i,w
  5391  0CF5  0744               	addwf	_rfRxCC,w
  5392  0CF6  00B9               	movwf	??__CCBufReset
  5393  0CF7  0086               	movwf	6
  5394  0CF8  3001               	movlw	1	; select bank2/3
  5395  0CF9  0087               	movwf	7
  5396  0CFA  0181               	clrf	1
  5397  0CFB                     i10Ll3215:	
  5398  0CFB  08BA               	movf	__CCBufReset@i,f
  5399  0CFC  1D03               	btfss	3,2
  5400  0CFD  2CF3               	ljmp	i10Ll3211
  5401  0CFE  2D00               	ljmp	i10Ll3217
  5402  0CFF                     i10Lu2351:	
  5403  0CFF  2CF3               	ljmp	i10Ll3211
  5404  0D00                     i10Lu2350:	
  5405  0D00                     i10Ll3217:	
  5406  0D00  0845               	movf	_rfRxCC+1,w
  5407  0D01  3EFF               	addlw	255
  5408  0D02  00C7               	movwf	_rfRxCC+3
  5409  0D03                     i10Ll3219:	
  5410  0D03  01C6               	clrf	_rfRxCC+2
  5411  0D04                     i10Ll528:	
  5412  0D04  2D05               	ljmp	iL74
  5413  0D05                     i9Ll522:	
  5414  0D05                     iL74:	
  5415  0D05  3000               	movlw	0
  5416                           
  5417                           ;hal.c: 53: (&halRxBfTh)->lc = 0;;
  5418  0D06  01B3               	clrf	_halRxBfTh
  5419  0D07  01B4               	clrf	_halRxBfTh+1
  5420  0D08  01B1               	clrf	_halPkTh
  5421  0D09  01B2               	clrf	_halPkTh+1
  5422                           
  5423                           ;hal.c: 56: RfTrcvMode(0);
  5424  0D0A  2E98               	ljmp	_RfTrcvMode
  5425  0D0B                     __end_of_RfHalInit:	
  5426  0D0B                     __ptext19:	
  5427 ;; *************** function _RfHalTickRxTh *****************
  5428 ;; Defined at:
  5429 ;;		line 99 in file "../../../src/rfstack/hal.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  pt              1    wreg     PTR struct pt
  5432 ;;		 -> halRxBfTh(2), 
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  pt              1    8[BANK0 ] PTR struct pt
  5435 ;;		 -> halRxBfTh(2), 
  5436 ;;  pktLength       1    7[BANK0 ] unsigned char 
  5437 ;;  PT_YIELD_FLA    1    0        unsigned char 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      unsigned char 
  5440 ;; Registers used:
  5441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 1F/0
  5444 ;;		On exit  : 1E/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5447 ;;      Params:         0       0       0       0
  5448 ;;      Locals:         0       2       0       0
  5449 ;;      Temps:          0       2       0       0
  5450 ;;      Totals:         0       4       0       0
  5451 ;;Total ram usage:        4 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:   11
  5454 ;; This function calls:
  5455 ;;		_RfHalAnyFree
  5456 ;;		_RfHalGetFree
  5457 ;;		_RfHalGetReturn
  5458 ;;		_RfHalRxPut
  5459 ;;		_RfTrcvCrcTick
  5460 ;;		__CCBufCanRd
  5461 ;;		__CCBufRdByte
  5462 ;;		__CCBufRdReverse
  5463 ;; This function is called by:
  5464 ;;		_main
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _RfHalTickRxTh
  5470  0D0B                     _RfHalTickRxTh:	
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _RfHalTickRxTh: [allreg]
  5474                           ;RfHalTickRxTh@pt stored from wreg
  5475  0D0B  00C1               	movwf	RfHalTickRxTh@pt
  5476                           
  5477                           ;hal.c: 107: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  5478  0D0C  0AA6               	incf	RfHalTickRxTh@rxByteTimeout,f
  5479  0D0D  2DE1               	goto	l2981
  5480  0D0E                     l2893:	
  5481                           
  5482                           ;hal.c: 110: {
  5483                           ;hal.c: 111: if (packet == (0))
  5484  0D0E  08A4               	movf	RfHalTickRxTh@packet,f
  5485  0D0F  1D03               	skipz
  5486  0D10  2D1F               	goto	l2903
  5487  0D11  0841               	movf	RfHalTickRxTh@pt,w
  5488  0D12  0086               	movwf	6
  5489  0D13  3071               	movlw	113
  5490  0D14  26B8  3188         	fcall	PL126	;call to abstracted procedure
  5491  0D16                     l2897:	
  5492  0D16  262A  3188         	fcall	_RfHalAnyFree
  5493  0D18  3A01               	xorlw	1
  5494  0D19  1D03               	btfss	3,2
  5495  0D1A  0008               	return
  5496                           
  5497                           ;hal.c: 114: packet = RfHalGetFree();
  5498  0D1B  2633  3188         	fcall	_RfHalGetFree
  5499  0D1D  0020               	movlb	0	; select bank0
  5500  0D1E  00A4               	movwf	RfHalTickRxTh@packet
  5501  0D1F                     l2903:	
  5502  0D1F  0841               	movf	RfHalTickRxTh@pt,w
  5503  0D20  0086               	movwf	6
  5504  0D21  3076               	movlw	118
  5505  0D22  26B8  3188         	fcall	PL126	;call to abstracted procedure
  5506  0D24                     l2905:	
  5507  0D24                     i3L__ptext22:	
  5508                           
  5509                           ;psect for function __CCBufCanRd
  5510  0D24                     i3L__CCBufCanRd:	
  5511  0D24                     i3Ll3029:	
  5512  0D24  01B9               	clrf	__CCBufCalcPt@move
  5513  0D25  0AB9               	incf	__CCBufCalcPt@move,f
  5514  0D26  0847               	movf	_rfRxCC+3,w
  5515  0D27  2601  3188         	fcall	__CCBufCalcPt
  5516  0D29  0646               	xorwf	_rfRxCC+2,w
  5517  0D2A  1D03               	btfss	3,2
  5518  0D2B  2D30               	ljmp	i3Ll3037
  5519  0D2C  2D2E               	ljmp	i3Ll3031
  5520  0D2D                     i3Lu2221:	
  5521  0D2D  2D30               	ljmp	i3Ll3037
  5522  0D2E                     i3Lu2220:	
  5523  0D2E                     i3Ll3031:	
  5524  0D2E  3000               	movlw	0
  5525  0D2F  2D31               	ljmp	iL18
  5526  0D30                     i3Ll3037:	
  5527                           
  5528                           ;ccbuf_static.c: 56: else return 1;
  5529  0D30  3001               	movlw	1
  5530  0D31                     i3Ll550:	
  5531  0D31                     iL18:	
  5532  0D31  3800               	iorlw	0
  5533  0D32  1903               	btfsc	3,2
  5534  0D33  0008               	return
  5535                           
  5536                           ;hal.c: 120: UI08_t pktLength = _CCBufRdByte();
  5537  0D34  260D  3188         	fcall	__CCBufRdByte
  5538  0D36  00C0               	movwf	RfHalTickRxTh@pktLength
  5539                           
  5540                           ;hal.c: 122: if (pktLength > 5 && pktLength <= sizeof(packet->data) + 1)
  5541  0D37  3006               	movlw	6
  5542  0D38  0240               	subwf	RfHalTickRxTh@pktLength,w
  5543  0D39  1C03               	skipc
  5544  0D3A  2DDE               	goto	l2979
  5545  0D3B  301A               	movlw	26
  5546  0D3C  0240               	subwf	RfHalTickRxTh@pktLength,w
  5547  0D3D  1803               	skipnc
  5548  0D3E  2DDE               	goto	l2979
  5549                           
  5550                           ;hal.c: 123: {
  5551                           ;hal.c: 124: rfPk++;
  5552  0D3F  0AAC               	incf	_rfPk,f	;volatile
  5553                           
  5554                           ;hal.c: 127: packet->size = pktLength - 1;
  5555  0D40  0824               	movf	RfHalTickRxTh@packet,w
  5556  0D41  3E1B               	addlw	27
  5557  0D42  0086               	movwf	6
  5558  0D43  0187               	clrf	7
  5559  0D44  0840               	movf	RfHalTickRxTh@pktLength,w
  5560  0D45  3EFF               	addlw	255
  5561  0D46  0081               	movwf	1
  5562                           
  5563                           ;hal.c: 128: packet->crcTx = 0;
  5564  0D47  0824               	movf	RfHalTickRxTh@packet,w
  5565  0D48  3E19               	addlw	25
  5566  0D49  0086               	movwf	6
  5567  0D4A  0181               	clrf	1
  5568                           
  5569                           ;hal.c: 129: rxByteTimeout = 0;
  5570  0D4B  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  5571                           
  5572                           ;hal.c: 132: for (pktRxByteIndex = 0; pktRxByteIndex < packet->size; pktRxByteIndex++)
  5573  0D4C  01A5               	clrf	RfHalTickRxTh@pktRxByteIndex
  5574  0D4D                     l2941:	
  5575  0D4D  26CC  3188         	fcall	PL136	;call to abstracted procedure
  5576  0D4F  0225               	subwf	RfHalTickRxTh@pktRxByteIndex,w
  5577  0D50  1803               	btfsc	3,0
  5578  0D51  2D90               	goto	l2943
  5579  0D52  0841               	movf	RfHalTickRxTh@pt,w
  5580  0D53  0086               	movwf	6
  5581  0D54  3086               	movlw	134
  5582  0D55  3FC0               	movwi [0]fsr1
  5583  0D56  3000               	movlw	0
  5584  0D57  3FC1               	movwi [1]fsr1
  5585  0D58                     l2923:	
  5586  0D58                     i4L__ptext22:	
  5587                           
  5588                           ;psect for function __CCBufCanRd
  5589  0D58                     i4L__CCBufCanRd:	
  5590  0D58                     i4Ll3029:	
  5591  0D58  01B9               	clrf	__CCBufCalcPt@move
  5592  0D59  0AB9               	incf	__CCBufCalcPt@move,f
  5593  0D5A  0847               	movf	_rfRxCC+3,w
  5594  0D5B  2601  3188         	fcall	__CCBufCalcPt
  5595  0D5D  0646               	xorwf	_rfRxCC+2,w
  5596  0D5E  1D03               	btfss	3,2
  5597  0D5F  2D64               	ljmp	i4Ll3037
  5598  0D60  2D62               	ljmp	i4Ll3031
  5599  0D61                     i4Lu2221:	
  5600  0D61  2D64               	ljmp	i4Ll3037
  5601  0D62                     i4Lu2220:	
  5602  0D62                     i4Ll3031:	
  5603  0D62  3000               	movlw	0
  5604  0D63  2D65               	ljmp	iL28
  5605  0D64                     i4Ll3037:	
  5606                           
  5607                           ;ccbuf_static.c: 56: else return 1;
  5608  0D64  3001               	movlw	1
  5609  0D65                     i4Ll550:	
  5610  0D65                     iL28:	
  5611  0D65  3800               	iorlw	0
  5612  0D66  301A               	movlw	26
  5613  0D67  1D03               	skipz
  5614  0D68  2D6D               	goto	L4
  5615  0D69  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5616  0D6A  1C03               	btfss	3,0
  5617  0D6B  0008               	return
  5618                           
  5619                           ;hal.c: 135: if(rxByteTimeout > 25) break;
  5620  0D6C  301A               	movlw	26
  5621  0D6D                     L4:	
  5622  0D6D  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5623  0D6E  1803               	btfsc	3,0
  5624  0D6F  2D90               	goto	l2943
  5625                           
  5626                           ;hal.c: 136: rxByteTimeout = 0;
  5627  0D70  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  5628                           
  5629                           ;hal.c: 137: packet->data[pktRxByteIndex] = _CCBufRdByte();
  5630  0D71  260D  3188         	fcall	__CCBufRdByte
  5631  0D73  00BE               	movwf	??_RfHalTickRxTh
  5632  0D74  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  5633  0D75  0724               	addwf	RfHalTickRxTh@packet,w
  5634  0D76  00BF               	movwf	??_RfHalTickRxTh+1
  5635  0D77  0A3F               	incf	??_RfHalTickRxTh+1,w
  5636  0D78  0086               	movwf	6
  5637  0D79  0187               	clrf	7
  5638  0D7A  083E               	movf	??_RfHalTickRxTh,w
  5639  0D7B  0081               	movwf	1
  5640                           
  5641                           ;hal.c: 138: packet->crcTx = RfTrcvCrcTick(packet->crcTx, packet->data[pktRxByteIndex]);
  5642  0D7C  0824               	movf	RfHalTickRxTh@packet,w
  5643  0D7D  3E19               	addlw	25
  5644  0D7E  0086               	movwf	6
  5645  0D7F  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  5646  0D80  0724               	addwf	RfHalTickRxTh@packet,w
  5647  0D81  00BE               	movwf	??_RfHalTickRxTh
  5648  0D82  0084               	movwf	4
  5649  0D83  0185               	clrf	5
  5650  0D84  3F01               	moviw [1]fsr0
  5651  0D85  00B9               	movwf	RfTrcvCrcTick@data
  5652  0D86  0824               	movf	RfHalTickRxTh@packet,w
  5653  0D87  3E19               	addlw	25
  5654  0D88  0084               	movwf	4
  5655  0D89  0800               	movf	0,w
  5656  0D8A                     i5L__ptext24:	
  5657                           
  5658                           ;psect for function _RfTrcvCrcTick
  5659  0D8A                     i5L_RfTrcvCrcTick:	
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  5663                           ;RfTrcvCrcTick@initial stored from wreg
  5664  0D8A  00BA               	movwf	RfTrcvCrcTick@initial
  5665  0D8B                     i5Ll2723:	
  5666                           
  5667                           ;mrf49xa.c: 59: return (initial ^ data);
  5668  0D8B  083A               	movf	RfTrcvCrcTick@initial,w
  5669  0D8C  0639               	xorwf	RfTrcvCrcTick@data,w
  5670  0D8D                     i5Ll183:	
  5671  0D8D  0081               	movwf	1
  5672  0D8E  0AA5               	incf	RfHalTickRxTh@pktRxByteIndex,f
  5673  0D8F  2D4D               	goto	l2941
  5674  0D90                     l2943:	
  5675                           
  5676                           ;hal.c: 139: }
  5677                           ;hal.c: 141: if (pktRxByteIndex == packet->size)
  5678  0D90  26CC  3188         	fcall	PL136	;call to abstracted procedure
  5679  0D92  0625               	xorwf	RfHalTickRxTh@pktRxByteIndex,w
  5680  0D93  1D03               	skipz
  5681  0D94  2DB8               	goto	l2955
  5682  0D95  0841               	movf	RfHalTickRxTh@pt,w
  5683  0D96  0086               	movwf	6
  5684  0D97  3090               	movlw	144
  5685  0D98  3FC0               	movwi [0]fsr1
  5686  0D99  3000               	movlw	0
  5687  0D9A  3FC1               	movwi [1]fsr1
  5688  0D9B                     l2947:	
  5689  0D9B                     i6L__ptext22:	
  5690                           
  5691                           ;psect for function __CCBufCanRd
  5692  0D9B                     i6L__CCBufCanRd:	
  5693  0D9B                     i6Ll3029:	
  5694  0D9B  01B9               	clrf	__CCBufCalcPt@move
  5695  0D9C  0AB9               	incf	__CCBufCalcPt@move,f
  5696  0D9D  0847               	movf	_rfRxCC+3,w
  5697  0D9E  2601  3188         	fcall	__CCBufCalcPt
  5698  0DA0  0646               	xorwf	_rfRxCC+2,w
  5699  0DA1  1D03               	btfss	3,2
  5700  0DA2  2DA7               	ljmp	i6Ll3037
  5701  0DA3  2DA5               	ljmp	i6Ll3031
  5702  0DA4                     i6Lu2221:	
  5703  0DA4  2DA7               	ljmp	i6Ll3037
  5704  0DA5                     i6Lu2220:	
  5705  0DA5                     i6Ll3031:	
  5706  0DA5  3000               	movlw	0
  5707  0DA6  2DA8               	ljmp	iL44
  5708  0DA7                     i6Ll3037:	
  5709                           
  5710                           ;ccbuf_static.c: 56: else return 1;
  5711  0DA7  3001               	movlw	1
  5712  0DA8                     i6Ll550:	
  5713  0DA8                     iL44:	
  5714  0DA8  3800               	iorlw	0
  5715  0DA9  1D03               	skipz
  5716  0DAA  2DAF               	goto	l2953
  5717  0DAB  301A               	movlw	26
  5718  0DAC  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5719  0DAD  1C03               	btfss	3,0
  5720  0DAE  0008               	return
  5721  0DAF                     l2953:	
  5722                           
  5723                           ;hal.c: 145: packet->crcRx = _CCBufRdByte();
  5724  0DAF  260D  3188         	fcall	__CCBufRdByte
  5725  0DB1  00BE               	movwf	??_RfHalTickRxTh
  5726  0DB2  0824               	movf	RfHalTickRxTh@packet,w
  5727  0DB3  3E1A               	addlw	26
  5728  0DB4  0086               	movwf	6
  5729  0DB5  0187               	clrf	7
  5730  0DB6  083E               	movf	??_RfHalTickRxTh,w
  5731  0DB7  0081               	movwf	1
  5732  0DB8                     l2955:	
  5733                           
  5734                           ;hal.c: 146: }
  5735                           ;hal.c: 149: if(rxByteTimeout > 25)
  5736  0DB8  301A               	movlw	26
  5737  0DB9  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5738  0DBA  1C03               	skipc
  5739  0DBB  2DD1               	goto	l2971
  5740                           
  5741                           ;hal.c: 150: {
  5742                           ;hal.c: 154: _CCBufRdReverse(pktRxByteIndex);
  5743  0DBC  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  5744  0DBD                     i7L__ptext20:	
  5745                           
  5746                           ;psect for function __CCBufRdReverse
  5747  0DBD                     i7L__CCBufRdReverse:	
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  5751                           ;__CCBufRdReverse@qty stored from wreg
  5752  0DBD  00BC               	movwf	__CCBufRdReverse@qty
  5753  0DBE                     i7Ll3055:	
  5754  0DBE  083C               	movf	__CCBufRdReverse@qty,w
  5755  0DBF  3C00               	sublw	0
  5756  0DC0  00B9               	movwf	__CCBufCalcPt@move
  5757  0DC1  0847               	movf	_rfRxCC+3,w
  5758  0DC2  2601  3188         	fcall	__CCBufCalcPt
  5759  0DC4  00C7               	movwf	_rfRxCC+3
  5760  0DC5                     i7Ll3057:	
  5761  0DC5  0847               	movf	_rfRxCC+3,w
  5762  0DC6  0646               	xorwf	_rfRxCC+2,w
  5763  0DC7  1D03               	btfss	3,2
  5764  0DC8  2DCC               	ljmp	iL54
  5765  0DC9  2DCB               	ljmp	i7Ll3059
  5766  0DCA                     i7Lu2241:	
  5767  0DCA  2DCC               	ljmp	iL54
  5768  0DCB                     i7Lu2240:	
  5769  0DCB                     i7Ll3059:	
  5770  0DCB  0AC7               	incf	_rfRxCC+3,f
  5771  0DCC                     i7Ll546:	
  5772  0DCC                     iL54:	
  5773                           
  5774                           ;hal.c: 155: RfHalGetReturn(packet);
  5775  0DCC  0824               	movf	RfHalTickRxTh@packet,w
  5776  0DCD  263F  3188         	fcall	_RfHalGetReturn
  5777                           
  5778                           ;hal.c: 156: rfPkTime++;
  5779  0DCF  0AAF               	incf	_rfPkTime,f	;volatile
  5780                           
  5781                           ;hal.c: 157: }
  5782  0DD0  2D0E               	goto	l2893
  5783  0DD1                     l2971:	
  5784  0DD1  0841               	movf	RfHalTickRxTh@pt,w
  5785  0DD2  0086               	movwf	6
  5786  0DD3  30AD               	movlw	173
  5787  0DD4  26B8  3188         	fcall	PL126	;call to abstracted procedure
  5788  0DD6                     l2973:	
  5789  0DD6  0824               	movf	RfHalTickRxTh@packet,w
  5790  0DD7  264A  3188         	fcall	_RfHalRxPut
  5791  0DD9  3800               	iorlw	0
  5792  0DDA  1903               	btfsc	3,2
  5793  0DDB  0008               	return
  5794                           
  5795                           ;hal.c: 175: packet = (0);
  5796  0DDC  01A4               	clrf	RfHalTickRxTh@packet
  5797  0DDD  2D0E               	goto	l2893
  5798  0DDE                     l2979:	
  5799                           
  5800                           ;hal.c: 183: else
  5801                           ;hal.c: 184: {
  5802                           ;hal.c: 185: _CCBufRdByte();
  5803  0DDE  260D  3188         	fcall	__CCBufRdByte
  5804  0DE0  2D0E               	goto	l2893
  5805  0DE1                     l2981:	
  5806  0DE1  0841               	movf	RfHalTickRxTh@pt,w
  5807  0DE2  0086               	movwf	6
  5808  0DE3  0187               	clrf	7
  5809  0DE4  3F40               	moviw [0]fsr1
  5810  0DE5  00BE               	movwf	??_RfHalTickRxTh
  5811  0DE6  3F41               	moviw [1]fsr1
  5812  0DE7  00BF               	movwf	??_RfHalTickRxTh+1
  5813                           
  5814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5815                           ; Switch size 1, requested type "space"
  5816                           ; Number of cases is 1, Range of values is 0 to 0
  5817                           ; switch strategies available:
  5818                           ; Name         Instructions Cycles
  5819                           ; simple_byte            4     3 (average)
  5820                           ; direct_byte            8     6 (fixed)
  5821                           ; jumptable            260     6 (fixed)
  5822                           ;	Chosen strategy is simple_byte
  5823  0DE8  1903               	skipnz
  5824  0DE9  2DEB               	goto	l3693
  5825  0DEA  2DFF               	goto	l2983
  5826  0DEB                     l3693:	
  5827                           
  5828                           ; Switch size 1, requested type "space"
  5829                           ; Number of cases is 6, Range of values is 0 to 173
  5830                           ; switch strategies available:
  5831                           ; Name         Instructions Cycles
  5832                           ; simple_byte           19    10 (average)
  5833                           ; jumptable            260     6 (fixed)
  5834                           ;	Chosen strategy is simple_byte
  5835  0DEB  083E               	movf	??_RfHalTickRxTh,w
  5836  0DEC  3A00               	xorlw	0	; case 0
  5837  0DED  1903               	skipnz
  5838  0DEE  2D0E               	goto	l2893
  5839  0DEF  3A71               	xorlw	113	; case 113
  5840  0DF0  1903               	skipnz
  5841  0DF1  2D16               	goto	l2897
  5842  0DF2  3A07               	xorlw	7	; case 118
  5843  0DF3  1903               	skipnz
  5844  0DF4  2D24               	goto	l2905
  5845  0DF5  3AF0               	xorlw	240	; case 134
  5846  0DF6  1903               	skipnz
  5847  0DF7  2D58               	goto	l2923
  5848  0DF8  3A16               	xorlw	22	; case 144
  5849  0DF9  1903               	skipnz
  5850  0DFA  2D9B               	goto	l2947
  5851  0DFB  3A3D               	xorlw	61	; case 173
  5852  0DFC  1903               	skipnz
  5853  0DFD  2DD6               	goto	l2973
  5854  0DFE  2DFF               	goto	l2983
  5855  0DFF                     l2983:	
  5856  0DFF  0841               	movf	RfHalTickRxTh@pt,w
  5857  0E00  2F93               	ljmp	PL122	;call to abstracted procedure
  5858  0E01                     __end_of_RfHalTickRxTh:	
  5859  0E01                     __ptext23:	
  5860 ;; *************** function __CCBufCalcPt *****************
  5861 ;; Defined at:
  5862 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  entry           1    wreg     unsigned char 
  5865 ;;  move            1    0[BANK0 ] unsigned char 
  5866 ;; Auto vars:     Size  Location     Type
  5867 ;;  entry           1    1[BANK0 ] unsigned char 
  5868 ;;  result          1    2[BANK0 ] unsigned char 
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  1    wreg      unsigned char 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0
  5873 ;; Tracked objects:
  5874 ;;		On entry : 1F/0
  5875 ;;		On exit  : 1F/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5878 ;;      Params:         0       1       0       0
  5879 ;;      Locals:         0       2       0       0
  5880 ;;      Temps:          0       0       0       0
  5881 ;;      Totals:         0       3       0       0
  5882 ;;Total ram usage:        3 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    8
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		__CCBufRdReverse
  5889 ;;		__CCBufCanRd
  5890 ;;		__CCBufRdByte
  5891 ;;		__CCBufWrByte
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           
  5896                           ;psect for function __CCBufCalcPt
  5897  0E01                     __CCBufCalcPt:	
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in __CCBufCalcPt: [wreg+status,2+status,0]
  5901                           ;__CCBufCalcPt@entry stored from wreg
  5902  0E01  00BA               	movwf	__CCBufCalcPt@entry
  5903                           
  5904                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  5905  0E02  0739               	addwf	__CCBufCalcPt@move,w
  5906  0E03  00BB               	movwf	__CCBufCalcPt@result
  5907  0E04                     l3227:	
  5908                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  5909                           
  5910  0E04  0845               	movf	_rfRxCC+1,w
  5911  0E05  023B               	subwf	__CCBufCalcPt@result,w
  5912  0E06  1C03               	btfss	3,0
  5913  0E07  2E0B               	goto	l3229
  5914  0E08  0845               	movf	_rfRxCC+1,w
  5915  0E09  02BB               	subwf	__CCBufCalcPt@result,f
  5916  0E0A  2E04               	goto	l3227
  5917  0E0B                     l3229:	
  5918                           
  5919                           ;ccbuf_static.c: 31: return (UI08_t) result;
  5920  0E0B  083B               	movf	__CCBufCalcPt@result,w
  5921  0E0C  0008               	return
  5922  0E0D                     __end_of__CCBufCalcPt:	
  5923  0E0D                     __ptext21:	
  5924 ;; *************** function __CCBufRdByte *****************
  5925 ;; Defined at:
  5926 ;;		line 59 in file "../../../src/utilities/ccbuf_static.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;		None
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;  res             1    4[BANK0 ] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      unsigned char 
  5933 ;; Registers used:
  5934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 1F/0
  5937 ;;		On exit  : 1F/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5940 ;;      Params:         0       0       0       0
  5941 ;;      Locals:         0       1       0       0
  5942 ;;      Temps:          0       1       0       0
  5943 ;;      Totals:         0       2       0       0
  5944 ;;Total ram usage:        2 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:   10
  5947 ;; This function calls:
  5948 ;;		__CCBufCalcPt
  5949 ;;		__CCBufCanRd
  5950 ;; This function is called by:
  5951 ;;		_RfHalTickRxTh
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           
  5956                           ;psect for function __CCBufRdByte
  5957  0E0D                     __CCBufRdByte:	
  5958  0E0D                     i8L__ptext22:	
  5959                           ;ccbuf_static.c: 61: if (_CCBufCanRd())
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in __CCBufRdByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5963                           
  5964                           
  5965                           ;psect for function __CCBufCanRd
  5966  0E0D                     i8L__CCBufCanRd:	
  5967  0E0D                     i8Ll3029:	
  5968  0E0D  01B9               	clrf	__CCBufCalcPt@move
  5969  0E0E  0AB9               	incf	__CCBufCalcPt@move,f
  5970  0E0F  0847               	movf	_rfRxCC+3,w
  5971  0E10  2601  3188         	fcall	__CCBufCalcPt
  5972  0E12  0646               	xorwf	_rfRxCC+2,w
  5973  0E13  1D03               	btfss	3,2
  5974  0E14  2E19               	ljmp	i8Ll3037
  5975  0E15  2E17               	ljmp	i8Ll3031
  5976  0E16                     i8Lu2221:	
  5977  0E16  2E19               	ljmp	i8Ll3037
  5978  0E17                     i8Lu2220:	
  5979  0E17                     i8Ll3031:	
  5980  0E17  3000               	movlw	0
  5981  0E18  2E1A               	ljmp	iL64
  5982  0E19                     i8Ll3037:	
  5983                           
  5984                           ;ccbuf_static.c: 56: else return 1;
  5985  0E19  3001               	movlw	1
  5986  0E1A                     i8Ll550:	
  5987  0E1A                     iL64:	
  5988  0E1A  3A00               	xorlw	0
  5989  0E1B  1903               	skipnz
  5990  0E1C  3400               	retlw	0
  5991  0E1D  01B9               	clrf	__CCBufCalcPt@move
  5992  0E1E  0AB9               	incf	__CCBufCalcPt@move,f
  5993  0E1F  0847               	movf	_rfRxCC+3,w
  5994  0E20  2601               	fcall	__CCBufCalcPt
  5995  0E21  00C7               	movwf	_rfRxCC+3
  5996  0E22  0744               	addwf	_rfRxCC,w
  5997  0E23  00BC               	movwf	??__CCBufRdByte
  5998  0E24  0086               	movwf	6
  5999  0E25  3001               	movlw	1	; select bank2/3
  6000  0E26  0087               	movwf	7
  6001  0E27  0801               	movf	1,w
  6002  0E28  00BD               	movwf	__CCBufRdByte@res
  6003                           
  6004                           ;ccbuf_static.c: 66: return res;
  6005  0E29  0008               	return
  6006  0E2A                     __end_of__CCBufRdByte:	
  6007                           ;ccbuf_static.c: 67: }
  6008                           ;ccbuf_static.c: 68: return 0;
  6009                           
  6010  0E2A                     __ptext28:	
  6011 ;; *************** function _RfHalAnyFree *****************
  6012 ;; Defined at:
  6013 ;;		line 202 in file "../../../src/rfstack/hal.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      unsigned char 
  6020 ;; Registers used:
  6021 ;;		wreg
  6022 ;; Tracked objects:
  6023 ;;		On entry : 1F/0
  6024 ;;		On exit  : 1F/1
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6027 ;;      Params:         0       0       0       0
  6028 ;;      Locals:         0       0       0       0
  6029 ;;      Temps:          0       0       0       0
  6030 ;;      Totals:         0       0       0       0
  6031 ;;Total ram usage:        0 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    8
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_RfHalTickRxTh
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _RfHalAnyFree
  6043  0E2A                     _RfHalAnyFree:	
  6044                           
  6045                           ;hal.c: 207: if ((rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  6046                           ;hal.c: 208: || (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0))
  6047                           
  6048                           ;incstack = 0
  6049                           ; Regs used in _RfHalAnyFree: [wreg]
  6050  0E2A  0021               	movlb	1	; select bank1
  6051  0E2B  1AA0               	btfsc	_rfPackets^(0+128),5
  6052  0E2C  2E2F               	goto	l404
  6053  0E2D  1DA0               	btfss	_rfPackets^(0+128),3
  6054  0E2E  3401               	retlw	1
  6055  0E2F                     l404:	
  6056  0E2F  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  6057  0E30  19A0               	btfsc	_rfPackets^(0+128),3
  6058  0E31  3400               	retlw	0
  6059                           
  6060                           ;hal.c: 209: return 1;
  6061  0E32  3401               	retlw	1
  6062  0E33                     __end_of_RfHalAnyFree:	
  6063                           ;hal.c: 210: else
  6064                           ;hal.c: 211: return 0;
  6065                           
  6066  0E33                     __ptext27:	
  6067 ;; *************** function _RfHalGetFree *****************
  6068 ;; Defined at:
  6069 ;;		line 215 in file "../../../src/rfstack/hal.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;		None
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;		None
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      PTR struct RfTransceiver
  6076 ;; Registers used:
  6077 ;;		wreg
  6078 ;; Tracked objects:
  6079 ;;		On entry : 1F/1
  6080 ;;		On exit  : 1F/1
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6083 ;;      Params:         0       0       0       0
  6084 ;;      Locals:         0       0       0       0
  6085 ;;      Temps:          0       0       0       0
  6086 ;;      Totals:         0       0       0       0
  6087 ;;Total ram usage:        0 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    8
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		_RfHalTickRxTh
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _RfHalGetFree
  6099  0E33                     _RfHalGetFree:	
  6100                           
  6101                           ;hal.c: 230: if (rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in _RfHalGetFree: [wreg]
  6105  0E33  1EA0               	btfss	_rfPackets^(0+128),5
  6106  0E34  19A0               	btfsc	_rfPackets^(0+128),3
  6107  0E35  2E39               	goto	l409
  6108  0E36  30A0               	movlw	_rfPackets& (0+255)
  6109                           
  6110                           ;hal.c: 231: {
  6111                           ;hal.c: 232: rfPackets[0].flags.acq = 1;
  6112  0E37  15A0               	bsf	_rfPackets^(0+128),3
  6113                           
  6114                           ;hal.c: 233: return &(rfPackets[0]);
  6115  0E38  0008               	return
  6116  0E39                     l409:	
  6117                           
  6118                           ;hal.c: 234: }
  6119                           ;hal.c: 235: if (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  6120  0E39  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  6121  0E3A  19A0               	btfsc	_rfPackets^(0+128),3
  6122  0E3B  3400               	retlw	0
  6123  0E3C  30BC               	movlw	(_rfPackets+28)& (0+255)
  6124                           
  6125                           ;hal.c: 236: {
  6126                           ;hal.c: 237: rfPackets[0].flags.acq = 1;
  6127  0E3D  15A0               	bsf	_rfPackets^(0+128),3
  6128                           
  6129                           ;hal.c: 238: return &(rfPackets[1]);
  6130  0E3E  0008               	return
  6131  0E3F                     __end_of_RfHalGetFree:	
  6132                           ;hal.c: 239: }
  6133                           ;hal.c: 240: return 0;
  6134                           
  6135  0E3F                     __ptext26:	
  6136 ;; *************** function _RfHalGetReturn *****************
  6137 ;; Defined at:
  6138 ;;		line 195 in file "../../../src/rfstack/hal.c"
  6139 ;; Parameters:    Size  Location     Type
  6140 ;;  packet          1    wreg     PTR struct RfTransceiver
  6141 ;;		 -> NULL(0), rfPackets(56), 
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  6144 ;;		 -> NULL(0), rfPackets(56), 
  6145 ;; Return value:  Size  Location     Type
  6146 ;;		None               void
  6147 ;; Registers used:
  6148 ;;		wreg, fsr1l, fsr1h
  6149 ;; Tracked objects:
  6150 ;;		On entry : 1F/0
  6151 ;;		On exit  : 1F/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6154 ;;      Params:         0       0       0       0
  6155 ;;      Locals:         0       1       0       0
  6156 ;;      Temps:          0       0       0       0
  6157 ;;      Totals:         0       1       0       0
  6158 ;;Total ram usage:        1 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    8
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_RfHalTickTxTh
  6165 ;;		_RfHalTickRxTh
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           
  6170                           ;psect for function _RfHalGetReturn
  6171  0E3F                     _RfHalGetReturn:	
  6172                           
  6173                           ;incstack = 0
  6174                           ; Regs used in _RfHalGetReturn: [wregfsr1]
  6175                           ;RfHalGetReturn@packet stored from wreg
  6176  0E3F  00B9               	movwf	RfHalGetReturn@packet
  6177                           
  6178                           ;hal.c: 197: packet->flags.acq = 0;
  6179  0E40  0086               	movwf	6
  6180  0E41  0187               	clrf	7
  6181  0E42  1181               	bcf	1,3
  6182                           
  6183                           ;hal.c: 198: packet->flags.tx = 0;
  6184  0E43  0839               	movf	RfHalGetReturn@packet,w
  6185  0E44  0086               	movwf	6
  6186  0E45  1201               	bcf	1,4
  6187                           
  6188                           ;hal.c: 199: packet->flags.proc = PCKT_NO_PROC;
  6189  0E46  0839               	movf	RfHalGetReturn@packet,w
  6190  0E47  0086               	movwf	6
  6191  0E48  1281               	bcf	1,5
  6192  0E49  0008               	return
  6193  0E4A                     __end_of_RfHalGetReturn:	
  6194  0E4A                     __ptext25:	
  6195 ;; *************** function _RfHalRxPut *****************
  6196 ;; Defined at:
  6197 ;;		line 244 in file "../../../src/rfstack/hal.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  packet          1    wreg     PTR struct RfTransceiver
  6200 ;;		 -> NULL(0), rfPackets(56), 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  6203 ;;		 -> NULL(0), rfPackets(56), 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      unsigned char 
  6206 ;; Registers used:
  6207 ;;		wreg, fsr1l, fsr1h
  6208 ;; Tracked objects:
  6209 ;;		On entry : 1F/0
  6210 ;;		On exit  : 1F/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6213 ;;      Params:         0       0       0       0
  6214 ;;      Locals:         0       1       0       0
  6215 ;;      Temps:          0       0       0       0
  6216 ;;      Totals:         0       1       0       0
  6217 ;;Total ram usage:        1 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    8
  6220 ;; This function calls:
  6221 ;;		Nothing
  6222 ;; This function is called by:
  6223 ;;		_RfHalTickRxTh
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _RfHalRxPut
  6229  0E4A                     _RfHalRxPut:	
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in _RfHalRxPut: [wregfsr1]
  6233                           ;RfHalRxPut@packet stored from wreg
  6234  0E4A  00B9               	movwf	RfHalRxPut@packet
  6235                           
  6236                           ;hal.c: 263: packet->flags.proc = PCKT_NEED_PROC;
  6237  0E4B  0086               	movwf	6
  6238  0E4C  0187               	clrf	7
  6239  0E4D  1681               	bsf	1,5
  6240                           
  6241                           ;hal.c: 264: packet->flags.acq = 0;
  6242  0E4E  0839               	movf	RfHalRxPut@packet,w
  6243  0E4F  0086               	movwf	6
  6244  0E50  1181               	bcf	1,3
  6245                           
  6246                           ;hal.c: 265: packet->flags.tx = 0;
  6247  0E51  0839               	movf	RfHalRxPut@packet,w
  6248  0E52  0086               	movwf	6
  6249  0E53  3001               	movlw	1
  6250  0E54  1201               	bcf	1,4
  6251                           
  6252                           ;hal.c: 266: return 1;
  6253  0E55  0008               	return
  6254  0E56                     __end_of_RfHalRxPut:	
  6255  0E56                     __ptext13:	
  6256 ;; *************** function _RfHalTickTxTh *****************
  6257 ;; Defined at:
  6258 ;;		line 71 in file "../../../src/rfstack/hal.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  pt              1    wreg     PTR struct pt
  6261 ;;		 -> halTxBfTh(2), 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  pt              1    8[BANK0 ] PTR struct pt
  6264 ;;		 -> halTxBfTh(2), 
  6265 ;;  PT_YIELD_FLA    1    0        unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      unsigned char 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 1F/0
  6272 ;;		On exit  : 1F/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6275 ;;      Params:         0       0       0       0
  6276 ;;      Locals:         0       1       0       0
  6277 ;;      Temps:          0       2       0       0
  6278 ;;      Totals:         0       3       0       0
  6279 ;;Total ram usage:        3 bytes
  6280 ;; Hardware stack levels used:    1
  6281 ;; Hardware stack levels required when called:   13
  6282 ;; This function calls:
  6283 ;;		_RfHalGetReturn
  6284 ;;		_RfHalTxGet
  6285 ;;		_RfTrcvCarrierPresent
  6286 ;;		_RfTrcvMode
  6287 ;; This function is called by:
  6288 ;;		_main
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           
  6293                           ;psect for function _RfHalTickTxTh
  6294  0E56                     _RfHalTickTxTh:	
  6295                           
  6296                           ;incstack = 0
  6297                           ; Regs used in _RfHalTickTxTh: [allreg]
  6298                           ;RfHalTickTxTh@pt stored from wreg
  6299  0E56  00C1               	movwf	RfHalTickTxTh@pt
  6300  0E57  2E7E               	goto	l2851
  6301  0E58                     l2827:	
  6302  0E58  0841               	movf	RfHalTickTxTh@pt,w
  6303  0E59  0086               	movwf	6
  6304  0E5A  304F               	movlw	79
  6305  0E5B  26B8  3188         	fcall	PL126	;call to abstracted procedure
  6306  0E5D                     l2829:	
  6307  0E5D  2799  3188         	fcall	_RfHalTxGet
  6308  0E5F  3A01               	xorlw	1
  6309  0E60  1D03               	btfss	3,2
  6310  0E61  0008               	return
  6311  0E62                     l2833:	
  6312                           ;hal.c: 81: do
  6313                           
  6314  0E62  0841               	movf	RfHalTickTxTh@pt,w
  6315  0E63  0086               	movwf	6
  6316  0E64  3053               	movlw	83
  6317  0E65  26B8  3188         	fcall	PL126	;call to abstracted procedure
  6318  0E67                     l2835:	
  6319  0E67  26A4  3188         	fcall	_RfTrcvCarrierPresent
  6320  0E69  3A00               	xorlw	0
  6321  0E6A  1D03               	btfss	3,2
  6322  0E6B  0008               	return
  6323                           
  6324                           ;hal.c: 84: } while (rfStatus.isr.state != RX_RECV);
  6325  0E6C  08A2               	movf	_rfStatus+2,f
  6326  0E6D  1D03               	skipz
  6327  0E6E  2E62               	goto	l2833
  6328                           
  6329                           ;hal.c: 87: RfTrcvMode(1);
  6330  0E6F  3001               	movlw	1
  6331  0E70  2698  3188         	fcall	_RfTrcvMode
  6332  0E72  0841               	movf	RfHalTickTxTh@pt,w
  6333  0E73  0086               	movwf	6
  6334  0E74  305A               	movlw	90
  6335  0E75  26B8  3188         	fcall	PL126	;call to abstracted procedure
  6336  0E77                     l2845:	
  6337  0E77  0822               	movf	_rfStatus+2,w
  6338  0E78  1D03               	skipz
  6339  0E79  0008               	return
  6340                           
  6341                           ;hal.c: 92: RfHalGetReturn(rfStatus.isr.txPacket);
  6342  0E7A  0821               	movf	_rfStatus+1,w
  6343  0E7B  263F  3188         	fcall	_RfHalGetReturn
  6344  0E7D  2E58               	goto	l2827
  6345  0E7E                     l2851:	
  6346  0E7E  0841               	movf	RfHalTickTxTh@pt,w
  6347  0E7F  0086               	movwf	6
  6348  0E80  0187               	clrf	7
  6349  0E81  3F40               	moviw [0]fsr1
  6350  0E82  00BF               	movwf	??_RfHalTickTxTh
  6351  0E83  3F41               	moviw [1]fsr1
  6352  0E84  00C0               	movwf	??_RfHalTickTxTh+1
  6353                           
  6354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6355                           ; Switch size 1, requested type "space"
  6356                           ; Number of cases is 1, Range of values is 0 to 0
  6357                           ; switch strategies available:
  6358                           ; Name         Instructions Cycles
  6359                           ; simple_byte            4     3 (average)
  6360                           ; direct_byte            8     6 (fixed)
  6361                           ; jumptable            260     6 (fixed)
  6362                           ;	Chosen strategy is simple_byte
  6363  0E85  1903               	skipnz
  6364  0E86  2E88               	goto	l3691
  6365  0E87  2E96               	goto	l2853
  6366  0E88                     l3691:	
  6367                           
  6368                           ; Switch size 1, requested type "space"
  6369                           ; Number of cases is 4, Range of values is 0 to 90
  6370                           ; switch strategies available:
  6371                           ; Name         Instructions Cycles
  6372                           ; simple_byte           13     7 (average)
  6373                           ; direct_byte          188     6 (fixed)
  6374                           ; jumptable            260     6 (fixed)
  6375                           ;	Chosen strategy is simple_byte
  6376  0E88  083F               	movf	??_RfHalTickTxTh,w
  6377  0E89  3A00               	xorlw	0	; case 0
  6378  0E8A  1903               	skipnz
  6379  0E8B  2E58               	goto	l2827
  6380  0E8C  3A4F               	xorlw	79	; case 79
  6381  0E8D  1903               	skipnz
  6382  0E8E  2E5D               	goto	l2829
  6383  0E8F  3A1C               	xorlw	28	; case 83
  6384  0E90  1903               	skipnz
  6385  0E91  2E67               	goto	l2835
  6386  0E92  3A09               	xorlw	9	; case 90
  6387  0E93  1903               	skipnz
  6388  0E94  2E77               	goto	l2845
  6389  0E95  2E96               	goto	l2853
  6390  0E96                     l2853:	
  6391  0E96  0841               	movf	RfHalTickTxTh@pt,w
  6392  0E97  2F93               	ljmp	PL122	;call to abstracted procedure
  6393  0E98                     __end_of_RfHalTickTxTh:	
  6394  0E98                     __ptext32:	
  6395 ;; *************** function _RfTrcvMode *****************
  6396 ;; Defined at:
  6397 ;;		line 59 in file "../../../src/rfstack/hal.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  tx              1    wreg     unsigned char 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  tx              1    5[BANK0 ] unsigned char 
  6402 ;; Return value:  Size  Location     Type
  6403 ;;		None               void
  6404 ;; Registers used:
  6405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 1F/0
  6408 ;;		On exit  : 1F/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6411 ;;      Params:         0       0       0       0
  6412 ;;      Locals:         0       1       0       0
  6413 ;;      Temps:          0       0       0       0
  6414 ;;      Totals:         0       1       0       0
  6415 ;;Total ram usage:        1 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:   12
  6418 ;; This function calls:
  6419 ;;		_RfTrcvSetup
  6420 ;; This function is called by:
  6421 ;;		_RfHalInit
  6422 ;;		_RfHalTickTxTh
  6423 ;;		_RfHalStatemachine
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           
  6428                           ;psect for function _RfTrcvMode
  6429  0E98                     _RfTrcvMode:	
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in _RfTrcvMode: [allreg]
  6433                           ;RfTrcvMode@tx stored from wreg
  6434  0E98  00BE               	movwf	RfTrcvMode@tx
  6435                           
  6436                           ;hal.c: 61: rfStatus.inRx = 1 - tx;
  6437  0E99  3C01               	sublw	1
  6438  0E9A  00A3               	movwf	_rfStatus+3
  6439                           
  6440                           ;hal.c: 62: RfTrcvSetup(tx);
  6441  0E9B  083E               	movf	RfTrcvMode@tx,w
  6442  0E9C  2371  3188         	fcall	_RfTrcvSetup
  6443                           
  6444                           ;hal.c: 64: if (tx == 1)
  6445  0E9E  0B3E               	decfsz	RfTrcvMode@tx,w
  6446  0E9F  0008               	return
  6447                           
  6448                           ;hal.c: 65: {
  6449                           ;hal.c: 66: rfStatus.isr.state = TX_PREAMBLE1;
  6450  0EA0  01A2               	clrf	_rfStatus+2
  6451  0EA1  0AA2               	incf	_rfStatus+2,f
  6452                           
  6453                           ;hal.c: 67: rfStatus.isr.byteCounter = 0;
  6454  0EA2  01A0               	clrf	_rfStatus
  6455  0EA3  0008               	return
  6456  0EA4                     __end_of_RfTrcvMode:	
  6457  0EA4                     __ptext14:	
  6458 ;; *************** function _RfTrcvCarrierPresent *****************
  6459 ;; Defined at:
  6460 ;;		line 51 in file "../../../src/devices/mrf49xa.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      unsigned char 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 1F/0
  6471 ;;		On exit  : 1F/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6474 ;;      Params:         0       0       0       0
  6475 ;;      Locals:         0       0       0       0
  6476 ;;      Temps:          0       0       0       0
  6477 ;;      Totals:         0       0       0       0
  6478 ;;Total ram usage:        0 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:   10
  6481 ;; This function calls:
  6482 ;;		_RfTrcvStatus
  6483 ;; This function is called by:
  6484 ;;		_RfHalTickTxTh
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _RfTrcvCarrierPresent
  6490  0EA4                     _RfTrcvCarrierPresent:	
  6491                           
  6492                           ;mrf49xa.c: 53: RfTrcvStatus();
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in _RfTrcvCarrierPresent: [wreg+status,2+status,0+pclath+cstack]
  6496  0EA4  2435               	fcall	_RfTrcvStatus
  6497                           
  6498                           ;mrf49xa.c: 54: return rfTrcvStatus.flags.msb.signalPresent;
  6499  0EA5  0020               	movlb	0	; select bank0
  6500  0EA6  0837               	movf	_rfTrcvStatus,w
  6501  0EA7  3901               	andlw	1
  6502  0EA8  0008               	return
  6503  0EA9                     __end_of_RfTrcvCarrierPresent:	
  6504  0EA9                     __ptext35:	
  6505 ;; *************** function _RfTrcvPut *****************
  6506 ;; Defined at:
  6507 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  byte            1    wreg     unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  byte            1    3[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;		None               void
  6514 ;; Registers used:
  6515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 1D/0
  6518 ;;		On exit  : 1F/2
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6521 ;;      Params:         0       0       0       0
  6522 ;;      Locals:         0       1       0       0
  6523 ;;      Temps:          0       0       0       0
  6524 ;;      Totals:         0       1       0       0
  6525 ;;Total ram usage:        1 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:   10
  6528 ;; This function calls:
  6529 ;;		_MRF49XACommand
  6530 ;; This function is called by:
  6531 ;;		_RfTrcvSetup
  6532 ;;		_RfHalStatemachine
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           
  6537                           ;psect for function _RfTrcvPut
  6538  0EA9                     _RfTrcvPut:	
  6539                           
  6540                           ;incstack = 0
  6541                           ; Regs used in _RfTrcvPut: [allreg]
  6542                           ;RfTrcvPut@byte stored from wreg
  6543  0EA9  0020               	movlb	0	; select bank0
  6544  0EAA  00BC               	movwf	RfTrcvPut@byte
  6545                           
  6546                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  6547  0EAB  00BA               	movwf	MRF49XACommand@cmd
  6548  0EAC  3000               	movlw	0
  6549  0EAD  01BB               	clrf	MRF49XACommand@cmd+1
  6550  0EAE  04BA               	iorwf	MRF49XACommand@cmd,f
  6551  0EAF  30B8               	movlw	184
  6552  0EB0  04BB               	iorwf	MRF49XACommand@cmd+1,f
  6553  0EB1  2C2A               	ljmp	l2631
  6554  0EB2                     __end_of_RfTrcvPut:	
  6555  0EB2                     PL124:	
  6556  0EB2  3083               	movlw	131
  6557  0EB3  0020               	movlb	0	; select bank0
  6558  0EB4  00BA               	movwf	MRF49XACommand@cmd
  6559  0EB5  30CA               	movlw	202
  6560  0EB6  00BB               	movwf	MRF49XACommand@cmd+1
  6561  0EB7  0008               	return
  6562  0EB8                     __end_ofPL124:	
  6563  0EB8                     PL126:	
  6564  0EB8  0187               	clrf	7
  6565  0EB9  3FC0               	movwi [0]fsr1
  6566  0EBA  3000               	movlw	0
  6567  0EBB  3FC1               	movwi [1]fsr1
  6568  0EBC  0008               	return
  6569  0EBD                     __end_ofPL126:	
  6570  0EBD                     PL130:	
  6571  0EBD  0020               	movlb	0	; select bank0
  6572  0EBE  00BA               	movwf	MRF49XACommand@cmd
  6573  0EBF  30CA               	movlw	202
  6574  0EC0  00BB               	movwf	MRF49XACommand@cmd+1
  6575  0EC1  0008               	return
  6576  0EC2                     __end_ofPL130:	
  6577  0EC2                     PL132:	
  6578  0EC2  0020               	movlb	0	; select bank0
  6579  0EC3  00BA               	movwf	MRF49XACommand@cmd
  6580  0EC4  3080               	movlw	128
  6581  0EC5  00BB               	movwf	MRF49XACommand@cmd+1
  6582  0EC6  0008               	return
  6583  0EC7                     __end_ofPL132:	
  6584  0EC7                     PL134:	
  6585  0EC7  0020               	movlb	0	; select bank0
  6586  0EC8  00BA               	movwf	MRF49XACommand@cmd
  6587  0EC9  3082               	movlw	130
  6588  0ECA  00BB               	movwf	MRF49XACommand@cmd+1
  6589  0ECB  0008               	return
  6590  0ECC                     __end_ofPL134:	
  6591  0ECC                     PL136:	
  6592  0ECC  0824               	movf	RfHalTickRxTh@packet,w
  6593  0ECD  3E1B               	addlw	27
  6594  0ECE  0086               	movwf	6
  6595  0ECF  0187               	clrf	7
  6596  0ED0  0801               	movf	1,w
  6597  0ED1  0008               	return
  6598  0ED2                     __end_ofPL136:	
  6599  0ED2                     PL138:	
  6600  0ED2  0020               	movlb	0	; select bank0
  6601  0ED3  30FA               	movlw	250
  6602  0ED4  0ABF               	incf	MRF49XAInit@j,f
  6603  0ED5  023F               	subwf	MRF49XAInit@j,w
  6604  0ED6  0008               	return
  6605  0ED7                     __end_ofPL138:	
  6606  0ED7                     __ptext6:	
  6607 ;; *************** function ___lbmod *****************
  6608 ;; Defined at:
  6609 ;;		line 4 in file "/opt/microchip/xc8/v1.30/sources/common/lbmod.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;  dividend        1    wreg     unsigned char 
  6612 ;;  divisor         1    0[BANK0 ] unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  dividend        1    2[BANK0 ] unsigned char 
  6615 ;;  rem             1    4[BANK0 ] unsigned char 
  6616 ;;  counter         1    3[BANK0 ] unsigned char 
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      unsigned char 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0
  6621 ;; Tracked objects:
  6622 ;;		On entry : 1F/0
  6623 ;;		On exit  : 1F/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6626 ;;      Params:         0       1       0       0
  6627 ;;      Locals:         0       3       0       0
  6628 ;;      Temps:          0       1       0       0
  6629 ;;      Totals:         0       5       0       0
  6630 ;;Total ram usage:        5 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    8
  6633 ;; This function calls:
  6634 ;;		Nothing
  6635 ;; This function is called by:
  6636 ;;		_main
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           
  6641                           ;psect for function ___lbmod
  6642  0ED7                     ___lbmod:	
  6643                           
  6644                           ;incstack = 0
  6645                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  6646                           ;___lbmod@dividend stored from wreg
  6647  0ED7  00BB               	movwf	___lbmod@dividend
  6648  0ED8  3008               	movlw	8
  6649  0ED9  00BC               	movwf	___lbmod@counter
  6650  0EDA  01BD               	clrf	___lbmod@rem
  6651  0EDB                     l3331:	
  6652  0EDB  083B               	movf	___lbmod@dividend,w
  6653  0EDC  00BA               	movwf	??___lbmod
  6654  0EDD  3007               	movlw	7
  6655  0EDE                     u2525:	
  6656  0EDE  36BA               	lsrf	??___lbmod,f
  6657  0EDF  0B89               	decfsz	9,f
  6658  0EE0  2EDE               	goto	u2525
  6659  0EE1  353D               	lslf	___lbmod@rem,w
  6660  0EE2  043A               	iorwf	??___lbmod,w
  6661  0EE3  00BD               	movwf	___lbmod@rem
  6662  0EE4  35BB               	lslf	___lbmod@dividend,f
  6663  0EE5  0839               	movf	___lbmod@divisor,w
  6664  0EE6  023D               	subwf	___lbmod@rem,w
  6665  0EE7  1C03               	skipc
  6666  0EE8  2EEB               	goto	l3339
  6667  0EE9  0839               	movf	___lbmod@divisor,w
  6668  0EEA  02BD               	subwf	___lbmod@rem,f
  6669  0EEB                     l3339:	
  6670  0EEB  0BBC               	decfsz	___lbmod@counter,f
  6671  0EEC  2EDB               	goto	l3331
  6672  0EED  083D               	movf	___lbmod@rem,w
  6673  0EEE  0008               	return
  6674  0EEF                     __end_of___lbmod:	
  6675  0EEF                     __ptext8:	
  6676 ;; *************** function _RfPacketsTickTh *****************
  6677 ;; Defined at:
  6678 ;;		line 158 in file "../../../src/rfstack/packets.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  pt              1    wreg     PTR struct pt
  6681 ;;		 -> halPkTh(2), 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  pt              1   10[BANK0 ] PTR struct pt
  6684 ;;		 -> halPkTh(2), 
  6685 ;;  PT_YIELD_FLA    1    0        unsigned char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      unsigned char 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 1E/0
  6692 ;;		On exit  : 1F/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6695 ;;      Params:         0       0       0       0
  6696 ;;      Locals:         0       1       0       0
  6697 ;;      Temps:          0       2       0       0
  6698 ;;      Totals:         0       3       0       0
  6699 ;;Total ram usage:        3 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:   11
  6702 ;; This function calls:
  6703 ;;		_RfHalRxGet
  6704 ;;		_RfPacketsHandleClient
  6705 ;; This function is called by:
  6706 ;;		_main
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           
  6711                           ;psect for function _RfPacketsTickTh
  6712  0EEF                     _RfPacketsTickTh:	
  6713                           
  6714                           ;incstack = 0
  6715                           ; Regs used in _RfPacketsTickTh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6716                           ;RfPacketsTickTh@pt stored from wreg
  6717  0EEF  0020               	movlb	0	; select bank0
  6718  0EF0  00C3               	movwf	RfPacketsTickTh@pt
  6719                           
  6720                           ;packets.c: 165: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  6721  0EF1  0AA8               	incf	RfPacketsTickTh@timeout,f
  6722  0EF2  2F0B               	goto	l3199
  6723  0EF3                     l3183:	
  6724  0EF3  0843               	movf	RfPacketsTickTh@pt,w
  6725  0EF4  0086               	movwf	6
  6726  0EF5  30AA               	movlw	170
  6727  0EF6  26B8  3188         	fcall	PL126	;call to abstracted procedure
  6728  0EF8                     l3185:	
  6729  0EF8  271F  3188         	fcall	_RfHalRxGet
  6730  0EFA  0020               	movlb	0	; select bank0
  6731  0EFB  00A7               	movwf	RfPacketsTickTh@packet
  6732  0EFC  08A7               	movf	RfPacketsTickTh@packet,f
  6733  0EFD  1D03               	skipz
  6734  0EFE  2F03               	goto	l3191
  6735  0EFF  301A               	movlw	26
  6736  0F00  0228               	subwf	RfPacketsTickTh@timeout,w
  6737  0F01  1C03               	btfss	3,0
  6738  0F02  0008               	return
  6739  0F03                     l3191:	
  6740                           
  6741                           ;packets.c: 172: if (packet)
  6742  0F03  0827               	movf	RfPacketsTickTh@packet,w
  6743  0F04  1903               	btfsc	3,2
  6744  0F05  2F09               	goto	l3197
  6745                           
  6746                           ;packets.c: 173: {
  6747                           ;packets.c: 184: RfPacketsHandleClient(packet);
  6748  0F06  0827               	movf	RfPacketsTickTh@packet,w
  6749  0F07  272C  3188         	fcall	_RfPacketsHandleClient
  6750  0F09                     l3197:	
  6751                           
  6752                           ;packets.c: 195: }
  6753                           ;packets.c: 197: timeout = 0;
  6754  0F09  01A8               	clrf	RfPacketsTickTh@timeout
  6755  0F0A  2EF3               	goto	l3183
  6756  0F0B                     l3199:	
  6757  0F0B  0843               	movf	RfPacketsTickTh@pt,w
  6758  0F0C  0086               	movwf	6
  6759  0F0D  0187               	clrf	7
  6760  0F0E  3F40               	moviw [0]fsr1
  6761  0F0F  00C1               	movwf	??_RfPacketsTickTh
  6762  0F10  3F41               	moviw [1]fsr1
  6763  0F11  00C2               	movwf	??_RfPacketsTickTh+1
  6764                           
  6765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6766                           ; Switch size 1, requested type "space"
  6767                           ; Number of cases is 1, Range of values is 0 to 0
  6768                           ; switch strategies available:
  6769                           ; Name         Instructions Cycles
  6770                           ; simple_byte            4     3 (average)
  6771                           ; direct_byte            8     6 (fixed)
  6772                           ; jumptable            260     6 (fixed)
  6773                           ;	Chosen strategy is simple_byte
  6774  0F12  1903               	skipnz
  6775  0F13  2F15               	goto	l3689
  6776  0F14  2F1D               	goto	l3201
  6777  0F15                     l3689:	
  6778                           
  6779                           ; Switch size 1, requested type "space"
  6780                           ; Number of cases is 2, Range of values is 0 to 170
  6781                           ; switch strategies available:
  6782                           ; Name         Instructions Cycles
  6783                           ; simple_byte            7     4 (average)
  6784                           ; jumptable            260     6 (fixed)
  6785                           ;	Chosen strategy is simple_byte
  6786  0F15  0841               	movf	??_RfPacketsTickTh,w
  6787  0F16  3A00               	xorlw	0	; case 0
  6788  0F17  1903               	skipnz
  6789  0F18  2EF3               	goto	l3183
  6790  0F19  3AAA               	xorlw	170	; case 170
  6791  0F1A  1903               	skipnz
  6792  0F1B  2EF8               	goto	l3185
  6793  0F1C  2F1D               	goto	l3201
  6794  0F1D                     l3201:	
  6795  0F1D  0843               	movf	RfPacketsTickTh@pt,w
  6796  0F1E  2F93               	ljmp	PL122	;call to abstracted procedure
  6797  0F1F                     __end_of_RfPacketsTickTh:	
  6798  0F1F                     __ptext12:	
  6799 ;; *************** function _RfHalRxGet *****************
  6800 ;; Defined at:
  6801 ;;		line 270 in file "../../../src/rfstack/hal.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;		None
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;		None
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  1    wreg      PTR struct RfTransceiver
  6808 ;; Registers used:
  6809 ;;		wreg
  6810 ;; Tracked objects:
  6811 ;;		On entry : 1F/0
  6812 ;;		On exit  : 1F/1
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6815 ;;      Params:         0       0       0       0
  6816 ;;      Locals:         0       0       0       0
  6817 ;;      Temps:          0       0       0       0
  6818 ;;      Totals:         0       0       0       0
  6819 ;;Total ram usage:        0 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    8
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_RfPacketsTickTh
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function _RfHalRxGet
  6831  0F1F                     _RfHalRxGet:	
  6832                           
  6833                           ;hal.c: 286: if (rfPackets[0].flags.proc == PCKT_NEED_PROC && rfPackets[0].flags.tx == 0)
  6834                           
  6835                           ;incstack = 0
  6836                           ; Regs used in _RfHalRxGet: [wreg]
  6837  0F1F  0021               	movlb	1	; select bank1
  6838  0F20  1AA0               	btfsc	_rfPackets^(0+128),5
  6839  0F21  1A20               	btfsc	_rfPackets^(0+128),4
  6840  0F22  2F26               	goto	l417
  6841  0F23  30A0               	movlw	_rfPackets& (0+255)
  6842                           
  6843                           ;hal.c: 287: {
  6844                           ;hal.c: 288: rfPackets[0].flags.proc = PCKT_NO_PROC;
  6845  0F24  12A0               	bcf	_rfPackets^(0+128),5
  6846                           
  6847                           ;hal.c: 289: return &(rfPackets[0]);
  6848  0F25  0008               	return
  6849  0F26                     l417:	
  6850                           
  6851                           ;hal.c: 290: }
  6852                           ;hal.c: 291: if (rfPackets[1].flags.proc == PCKT_NEED_PROC && rfPackets[1].flags.tx == 0)
  6853  0F26  1ABC               	btfsc	(_rfPackets^(0+128)+28),5
  6854  0F27  1A3C               	btfsc	(_rfPackets^(0+128)+28),4
  6855  0F28  3400               	retlw	0
  6856  0F29  30BC               	movlw	(_rfPackets+28)& (0+255)
  6857                           
  6858                           ;hal.c: 292: {
  6859                           ;hal.c: 293: rfPackets[1].flags.proc = PCKT_NO_PROC;
  6860  0F2A  12BC               	bcf	(_rfPackets^(0+128)+28),5
  6861                           
  6862                           ;hal.c: 294: return &(rfPackets[1]);
  6863  0F2B  0008               	return
  6864  0F2C                     __end_of_RfHalRxGet:	
  6865                           ;hal.c: 295: }
  6866                           ;hal.c: 296: return 0;
  6867                           
  6868  0F2C                     __ptext9:	
  6869 ;; *************** function _RfPacketsHandleClient *****************
  6870 ;; Defined at:
  6871 ;;		line 133 in file "../../../src/rfstack/packets.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;  packet          1    wreg     PTR struct RfTransceiver
  6874 ;;		 -> NULL(0), rfPackets(56), 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  packet          1    7[BANK0 ] PTR struct RfTransceiver
  6877 ;;		 -> NULL(0), rfPackets(56), 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;		None               void
  6880 ;; Registers used:
  6881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 1F/0
  6884 ;;		On exit  : 1F/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6887 ;;      Params:         0       0       0       0
  6888 ;;      Locals:         0       1       0       0
  6889 ;;      Temps:          0       0       0       0
  6890 ;;      Totals:         0       1       0       0
  6891 ;;Total ram usage:        1 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:   10
  6894 ;; This function calls:
  6895 ;;		_RfPacketSimpleReply
  6896 ;; This function is called by:
  6897 ;;		_RfPacketsTickTh
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           
  6902                           ;psect for function _RfPacketsHandleClient
  6903  0F2C                     _RfPacketsHandleClient:	
  6904                           
  6905                           ;incstack = 0
  6906                           ; Regs used in _RfPacketsHandleClient: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6907                           ;RfPacketsHandleClient@packet stored from wreg
  6908  0F2C  00C0               	movwf	RfPacketsHandleClient@packet
  6909                           
  6910                           ;packets.c: 135: switch(packet->frame.id)
  6911  0F2D  2F4E               	goto	l3179
  6912  0F2E                     l3169:	
  6913                           
  6914                           ;packets.c: 138: packet->data[4] = 2;
  6915  0F2E  0840               	movf	RfPacketsHandleClient@packet,w
  6916  0F2F  3E05               	addlw	5
  6917  0F30  0086               	movwf	6
  6918  0F31  3002               	movlw	2
  6919  0F32  0187               	clrf	7
  6920  0F33  0081               	movwf	1
  6921                           
  6922                           ;packets.c: 139: RfPacketSimpleReply(packet, RF_PING, 0);
  6923  0F34  30A0               	movlw	160
  6924  0F35  00BC               	movwf	RfPacketSimpleReply@msg
  6925  0F36  01BD               	clrf	RfPacketSimpleReply@needAck
  6926  0F37  0840               	movf	RfPacketsHandleClient@packet,w
  6927  0F38  2F5B               	ljmp	_RfPacketSimpleReply
  6928  0F39                     l3173:	
  6929                           ;packets.c: 140: break;
  6930                           
  6931                           
  6932                           ;packets.c: 144: if (packet->frame.data[0] == rfStatus.isr.txPacket->crcTx)
  6933  0F39  0821               	movf	_rfStatus+1,w
  6934  0F3A  3E19               	addlw	25
  6935  0F3B  0086               	movwf	6
  6936  0F3C  0187               	clrf	7
  6937  0F3D  0840               	movf	RfPacketsHandleClient@packet,w
  6938  0F3E  3E05               	addlw	5
  6939  0F3F  0084               	movwf	4
  6940  0F40  0185               	clrf	5
  6941  0F41  0800               	movf	0,w
  6942  0F42  0084               	movwf	4
  6943  0F43  0800               	movf	0,w
  6944  0F44  0601               	xorwf	1,w
  6945  0F45  1D03               	skipz
  6946  0F46  0008               	return
  6947                           
  6948                           ;packets.c: 145: {
  6949                           ;packets.c: 147: packet->flags.wait_for_ack = 0;
  6950  0F47  0840               	movf	RfPacketsHandleClient@packet,w
  6951  0F48  0086               	movwf	6
  6952  0F49  1101               	bcf	1,2
  6953                           
  6954                           ;packets.c: 148: packet->flags.proc = PCKT_NO_PROC;
  6955  0F4A  0840               	movf	RfPacketsHandleClient@packet,w
  6956  0F4B  0086               	movwf	6
  6957  0F4C  1281               	bcf	1,5
  6958                           
  6959                           ;packets.c: 149: }
  6960  0F4D  0008               	return
  6961  0F4E                     l3179:	
  6962  0F4E  0840               	movf	RfPacketsHandleClient@packet,w
  6963  0F4F  3E03               	addlw	3
  6964  0F50  0086               	movwf	6
  6965  0F51  0187               	clrf	7
  6966  0F52  0801               	movf	1,w
  6967                           
  6968                           ; Switch size 1, requested type "space"
  6969                           ; Number of cases is 2, Range of values is 160 to 161
  6970                           ; switch strategies available:
  6971                           ; Name         Instructions Cycles
  6972                           ; simple_byte            7     4 (average)
  6973                           ; direct_byte           13     9 (fixed)
  6974                           ; jumptable            263     9 (fixed)
  6975                           ;	Chosen strategy is simple_byte
  6976  0F53  3AA0               	xorlw	160	; case 160
  6977  0F54  1903               	skipnz
  6978  0F55  2F2E               	goto	l3169
  6979  0F56  3A01               	xorlw	1	; case 161
  6980  0F57  1903               	skipnz
  6981  0F58  2F39               	goto	l3173
  6982  0F59  2F5A               	goto	l493
  6983  0F5A                     l493:	
  6984  0F5A  0008               	return
  6985  0F5B                     __end_of_RfPacketsHandleClient:	
  6986  0F5B                     __ptext10:	
  6987 ;; *************** function _RfPacketSimpleReply *****************
  6988 ;; Defined at:
  6989 ;;		line 27 in file "../../../src/rfstack/packets.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;  packet          1    wreg     PTR struct RfTransceiver
  6992 ;;		 -> NULL(0), rfPackets(56), 
  6993 ;;  msg             1    3[BANK0 ] enum E4234
  6994 ;;  needAck         1    4[BANK0 ] unsigned char 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  packet          1    6[BANK0 ] PTR struct RfTransceiver
  6997 ;;		 -> NULL(0), rfPackets(56), 
  6998 ;;  nodeTmp         1    5[BANK0 ] unsigned char 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;		None               void
  7001 ;; Registers used:
  7002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 1F/0
  7005 ;;		On exit  : 1F/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7008 ;;      Params:         0       2       0       0
  7009 ;;      Locals:         0       2       0       0
  7010 ;;      Temps:          0       0       0       0
  7011 ;;      Totals:         0       4       0       0
  7012 ;;Total ram usage:        4 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    9
  7015 ;; This function calls:
  7016 ;;		_RfHalTxPut
  7017 ;; This function is called by:
  7018 ;;		_RfPacketsHandleClient
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _RfPacketSimpleReply
  7024  0F5B                     _RfPacketSimpleReply:	
  7025                           
  7026                           ;incstack = 0
  7027                           ; Regs used in _RfPacketSimpleReply: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7028                           ;RfPacketSimpleReply@packet stored from wreg
  7029  0F5B  00BF               	movwf	RfPacketSimpleReply@packet
  7030                           
  7031                           ;packets.c: 30: UI08_t nodeTmp = packet->frame.src;
  7032  0F5C  0086               	movwf	6
  7033  0F5D  0187               	clrf	7
  7034  0F5E  3F41               	moviw [1]fsr1
  7035  0F5F  00BE               	movwf	RfPacketSimpleReply@nodeTmp
  7036                           
  7037                           ;packets.c: 31: packet->frame.src = packet->frame.dst;
  7038  0F60  0A3F               	incf	RfPacketSimpleReply@packet,w
  7039  0F61  0086               	movwf	6
  7040  0F62  083F               	movf	RfPacketSimpleReply@packet,w
  7041  0F63  3E02               	addlw	2
  7042  0F64  0084               	movwf	4
  7043  0F65  0185               	clrf	5
  7044  0F66  0800               	movf	0,w
  7045  0F67  0081               	movwf	1
  7046                           
  7047                           ;packets.c: 32: packet->frame.dst = nodeTmp;
  7048  0F68  083F               	movf	RfPacketSimpleReply@packet,w
  7049  0F69  3E02               	addlw	2
  7050  0F6A  0086               	movwf	6
  7051  0F6B  083E               	movf	RfPacketSimpleReply@nodeTmp,w
  7052  0F6C  0081               	movwf	1
  7053                           
  7054                           ;packets.c: 34: packet->frame.id = msg;
  7055  0F6D  083F               	movf	RfPacketSimpleReply@packet,w
  7056  0F6E  3E03               	addlw	3
  7057  0F6F  0086               	movwf	6
  7058  0F70  083C               	movf	RfPacketSimpleReply@msg,w
  7059  0F71  0081               	movwf	1
  7060                           
  7061                           ;packets.c: 41: RfHalTxPut(packet, needAck);
  7062  0F72  083D               	movf	RfPacketSimpleReply@needAck,w
  7063  0F73  00B9               	movwf	RfHalTxPut@needAck
  7064  0F74  083F               	movf	RfPacketSimpleReply@packet,w
  7065  0F75  2F76               	ljmp	_RfHalTxPut
  7066  0F76                     __end_of_RfPacketSimpleReply:	
  7067  0F76                     __ptext11:	
  7068 ;; *************** function _RfHalTxPut *****************
  7069 ;; Defined at:
  7070 ;;		line 339 in file "../../../src/rfstack/hal.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  packet          1    wreg     PTR struct RfTransceiver
  7073 ;;		 -> NULL(0), rfPackets(56), 
  7074 ;;  needAck         1    0[BANK0 ] unsigned char 
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  packet          1    2[BANK0 ] PTR struct RfTransceiver
  7077 ;;		 -> NULL(0), rfPackets(56), 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      unsigned char 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7082 ;; Tracked objects:
  7083 ;;		On entry : 1F/0
  7084 ;;		On exit  : 1F/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7087 ;;      Params:         0       1       0       0
  7088 ;;      Locals:         0       1       0       0
  7089 ;;      Temps:          0       1       0       0
  7090 ;;      Totals:         0       3       0       0
  7091 ;;Total ram usage:        3 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    8
  7094 ;; This function calls:
  7095 ;;		Nothing
  7096 ;; This function is called by:
  7097 ;;		_RfPacketSimpleReply
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           
  7102                           ;psect for function _RfHalTxPut
  7103  0F76                     _RfHalTxPut:	
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in _RfHalTxPut: [wreg+fsr1l+fsr1h+status,2+status,0]
  7107                           ;RfHalTxPut@packet stored from wreg
  7108  0F76  00BB               	movwf	RfHalTxPut@packet
  7109                           
  7110                           ;hal.c: 362: packet->flags.acq = 0;
  7111  0F77  0086               	movwf	6
  7112  0F78  0187               	clrf	7
  7113  0F79  1181               	bcf	1,3
  7114                           
  7115                           ;hal.c: 363: packet->flags.proc = PCKT_NEED_PROC;
  7116  0F7A  083B               	movf	RfHalTxPut@packet,w
  7117  0F7B  0086               	movwf	6
  7118  0F7C  1681               	bsf	1,5
  7119                           
  7120                           ;hal.c: 364: packet->flags.tx = 1;
  7121  0F7D  083B               	movf	RfHalTxPut@packet,w
  7122  0F7E  0086               	movwf	6
  7123  0F7F  1601               	bsf	1,4
  7124                           
  7125                           ;hal.c: 365: packet->flags.resends = 0;
  7126  0F80  083B               	movf	RfHalTxPut@packet,w
  7127  0F81  0086               	movwf	6
  7128  0F82  30FC               	movlw	-4
  7129  0F83  0581               	andwf	1,f
  7130                           
  7131                           ;hal.c: 366: packet->flags.wait_for_ack = (needAck != 0 ? 1 : 0);
  7132  0F84  3000               	movlw	0
  7133  0F85  08B9               	movf	RfHalTxPut@needAck,f
  7134  0F86  1D03               	skipz
  7135  0F87  3001               	movlw	1
  7136  0F88  00BA               	movwf	??_RfHalTxPut
  7137  0F89  083B               	movf	RfHalTxPut@packet,w
  7138  0F8A  0086               	movwf	6
  7139  0F8B  0DBA               	rlf	??_RfHalTxPut,f
  7140  0F8C  0DBA               	rlf	??_RfHalTxPut,f
  7141  0F8D  0801               	movf	1,w
  7142  0F8E  063A               	xorwf	??_RfHalTxPut,w
  7143  0F8F  39FB               	andlw	-5
  7144  0F90  063A               	xorwf	??_RfHalTxPut,w
  7145  0F91  0081               	movwf	1
  7146  0F92  0008               	return
  7147  0F93                     __end_of_RfHalTxPut:	
  7148  0F93                     PL122:	
  7149  0F93  0086               	movwf	6
  7150  0F94  3000               	movlw	0
  7151  0F95  0187               	clrf	7
  7152  0F96  3FC0               	movwi [0]fsr1
  7153  0F97  3FC1               	movwi [1]fsr1
  7154  0F98  0008               	return
  7155  0F99                     __end_ofPL122:	
  7156  0F99                     __ptext17:	
  7157 ;; *************** function _RfHalTxGet *****************
  7158 ;; Defined at:
  7159 ;;		line 300 in file "../../../src/rfstack/hal.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;		None
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  i               1    3[BANK0 ] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      unsigned char 
  7166 ;; Registers used:
  7167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 1F/0
  7170 ;;		On exit  : 1F/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7173 ;;      Params:         0       0       0       0
  7174 ;;      Locals:         0       1       0       0
  7175 ;;      Temps:          0       0       0       0
  7176 ;;      Totals:         0       1       0       0
  7177 ;;Total ram usage:        1 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    9
  7180 ;; This function calls:
  7181 ;;		___bmul
  7182 ;; This function is called by:
  7183 ;;		_RfHalTickTxTh
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           
  7188                           ;psect for function _RfHalTxGet
  7189  0F99                     _RfHalTxGet:	
  7190                           
  7191                           ;hal.c: 303: UI08_t i = 0;
  7192                           
  7193                           ;incstack = 0
  7194                           ; Regs used in _RfHalTxGet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7195  0F99  01BC               	clrf	RfHalTxGet@i
  7196                           
  7197                           ;hal.c: 305: for (i = 0; i < 2; i++)
  7198  0F9A  01BC               	clrf	RfHalTxGet@i
  7199  0F9B                     l2867:	
  7200                           
  7201                           ;hal.c: 306: {
  7202                           ;hal.c: 307: if (rfPackets[i].flags.proc == PCKT_NEED_PROC && rfPackets[i].flags.tx == 1)
  7203  0F9B  301C               	movlw	28
  7204  0F9C  00B9               	movwf	___bmul@multiplicand
  7205  0F9D  083C               	movf	RfHalTxGet@i,w
  7206  0F9E  27D8  3188         	fcall	___bmul
  7207  0FA0  3EA0               	addlw	_rfPackets& (0+255)
  7208  0FA1  0086               	movwf	6
  7209  0FA2  0187               	clrf	7
  7210  0FA3  1E81               	btfss	1,5
  7211  0FA4  2FD2               	goto	l2881
  7212  0FA5  301C               	movlw	28
  7213  0FA6  00B9               	movwf	___bmul@multiplicand
  7214  0FA7  083C               	movf	RfHalTxGet@i,w
  7215  0FA8  27D8  3188         	fcall	___bmul
  7216  0FAA  3EA0               	addlw	_rfPackets& (0+255)
  7217  0FAB  0086               	movwf	6
  7218  0FAC  0187               	clrf	7
  7219  0FAD  1E01               	btfss	1,4
  7220  0FAE  2FD2               	goto	l2881
  7221                           
  7222                           ;hal.c: 308: {
  7223                           ;hal.c: 309: if (rfPackets[i].flags.wait_for_ack == 0)
  7224  0FAF  301C               	movlw	28
  7225  0FB0  00B9               	movwf	___bmul@multiplicand
  7226  0FB1  083C               	movf	RfHalTxGet@i,w
  7227  0FB2  27D8  3188         	fcall	___bmul
  7228  0FB4  3EA0               	addlw	_rfPackets& (0+255)
  7229  0FB5  0086               	movwf	6
  7230  0FB6  301C               	movlw	28
  7231  0FB7  0187               	clrf	7
  7232                           
  7233                           ;hal.c: 310: rfPackets[i].flags.proc = PCKT_NO_PROC;
  7234  0FB8  00B9               	movwf	___bmul@multiplicand
  7235  0FB9  083C               	movf	RfHalTxGet@i,w
  7236  0FBA  1901               	btfsc	1,2
  7237  0FBB  2FC5               	goto	L3
  7238  0FBC  27D8  3188         	fcall	___bmul
  7239  0FBE  3EA0               	addlw	_rfPackets& (0+255)
  7240  0FBF  0086               	movwf	6
  7241  0FC0  301C               	movlw	28
  7242  0FC1  0187               	clrf	7
  7243  0FC2  1281               	bcf	1,5
  7244                           
  7245                           ;hal.c: 311: rfPackets[i].flags.acq = 1;
  7246  0FC3  00B9               	movwf	___bmul@multiplicand
  7247  0FC4  083C               	movf	RfHalTxGet@i,w
  7248  0FC5                     L3:	
  7249  0FC5  27D8  3188         	fcall	___bmul
  7250  0FC7  3EA0               	addlw	_rfPackets& (0+255)
  7251  0FC8  0086               	movwf	6
  7252  0FC9  301C               	movlw	28
  7253  0FCA  0187               	clrf	7
  7254  0FCB  1581               	bsf	1,3
  7255                           
  7256                           ;hal.c: 312: rfStatus.isr.txPacket = &(rfPackets[i]);
  7257  0FCC  00B9               	movwf	___bmul@multiplicand
  7258  0FCD  083C               	movf	RfHalTxGet@i,w
  7259  0FCE  27D8               	fcall	___bmul
  7260  0FCF  3EA0               	addlw	_rfPackets& (0+255)
  7261  0FD0  00A1               	movwf	_rfStatus+1
  7262                           
  7263                           ;hal.c: 313: return 1;
  7264  0FD1  3401               	retlw	1
  7265  0FD2                     l2881:	
  7266  0FD2  3002               	movlw	2
  7267  0FD3  0ABC               	incf	RfHalTxGet@i,f
  7268  0FD4  023C               	subwf	RfHalTxGet@i,w
  7269  0FD5  1803               	btfsc	3,0
  7270                           
  7271                           ;hal.c: 314: }
  7272                           ;hal.c: 315: }
  7273                           ;hal.c: 317: return 0;
  7274  0FD6  3400               	retlw	0
  7275  0FD7  2F9B               	goto	l2867
  7276  0FD8                     __end_of_RfHalTxGet:	
  7277  0FD8                     __ptext18:	
  7278 ;; *************** function ___bmul *****************
  7279 ;; Defined at:
  7280 ;;		line 2 in file "/opt/microchip/xc8/v1.30/sources/common/bmul.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;  multiplier      1    wreg     unsigned char 
  7283 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  multiplier      1    2[BANK0 ] unsigned char 
  7286 ;;  product         1    1[BANK0 ] unsigned char 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      unsigned char 
  7289 ;; Registers used:
  7290 ;;		wreg, status,2, status,0
  7291 ;; Tracked objects:
  7292 ;;		On entry : 1F/0
  7293 ;;		On exit  : 1F/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7296 ;;      Params:         0       1       0       0
  7297 ;;      Locals:         0       2       0       0
  7298 ;;      Temps:          0       0       0       0
  7299 ;;      Totals:         0       3       0       0
  7300 ;;Total ram usage:        3 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    8
  7303 ;; This function calls:
  7304 ;;		Nothing
  7305 ;; This function is called by:
  7306 ;;		_RfHalTxGet
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           
  7311                           ;psect for function ___bmul
  7312  0FD8                     ___bmul:	
  7313                           
  7314                           ;incstack = 0
  7315                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7316                           ;___bmul@multiplier stored from wreg
  7317  0FD8  00BB               	movwf	___bmul@multiplier
  7318  0FD9  01BA               	clrf	___bmul@product
  7319  0FDA                     l3313:	
  7320  0FDA  0839               	movf	___bmul@multiplicand,w
  7321  0FDB  183B               	btfsc	___bmul@multiplier,0
  7322  0FDC  07BA               	addwf	___bmul@product,f
  7323  0FDD  35B9               	lslf	___bmul@multiplicand,f
  7324  0FDE  36BB               	lsrf	___bmul@multiplier,f
  7325  0FDF  08BB               	movf	___bmul@multiplier,f
  7326  0FE0  1D03               	skipz
  7327  0FE1  2FDA               	goto	l3313
  7328  0FE2  083A               	movf	___bmul@product,w
  7329  0FE3  0008               	return
  7330  0FE4                     __end_of___bmul:	
  7331  0FE4                     __ptext7:	
  7332 ;; *************** function _SysInitGpio *****************
  7333 ;; Defined at:
  7334 ;;		line 14 in file "../../../src/node/main.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;		None
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;		None
  7339 ;; Return value:  Size  Location     Type
  7340 ;;		None               void
  7341 ;; Registers used:
  7342 ;;		None
  7343 ;; Tracked objects:
  7344 ;;		On entry : 17F/1
  7345 ;;		On exit  : 17F/2
  7346 ;;		Unchanged: 160/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7348 ;;      Params:         0       0       0       0
  7349 ;;      Locals:         0       0       0       0
  7350 ;;      Temps:          0       0       0       0
  7351 ;;      Totals:         0       0       0       0
  7352 ;;Total ram usage:        0 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    8
  7355 ;; This function calls:
  7356 ;;		Nothing
  7357 ;; This function is called by:
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           
  7363                           ;psect for function _SysInitGpio
  7364  0FE4                     _SysInitGpio:	
  7365                           
  7366                           ;incstack = 0
  7367                           ; Regs used in _SysInitGpio: []
  7368                           ;main.c: 16: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  7369  0FE4  150C               	bsf	12,2	;volatile
  7370  0FE5  120C               	bcf	12,4	;volatile
  7371  0FE6  128C               	bcf	12,5	;volatile
  7372  0FE7  0022               	movlb	2	; select bank2
  7373  0FE8  120C               	bcf	12,4	;volatile
  7374  0FE9  128C               	bcf	12,5	;volatile
  7375                           
  7376                           ;main.c: 17: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  7377  0FEA  0021               	movlb	1	; select bank1
  7378  0FEB  120D               	bcf	13,4	;volatile
  7379  0FEC  130D               	bcf	13,6	;volatile
  7380  0FED  138D               	bcf	13,7	;volatile
  7381  0FEE  168D               	bsf	13,5	;volatile
  7382                           
  7383                           ;main.c: 18: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  7384  0FEF  108E               	bcf	14,1	;volatile
  7385  0FF0  110E               	bcf	14,2	;volatile
  7386  0FF1  120E               	bcf	14,4	;volatile
  7387  0FF2  130E               	bcf	14,6	;volatile
  7388  0FF3  138E               	bcf	14,7	;volatile
  7389  0FF4  140E               	bsf	14,0	;volatile
  7390  0FF5  158E               	bsf	14,3	;volatile
  7391  0FF6  168E               	bsf	14,5	;volatile
  7392  0FF7  0022               	movlb	2	; select bank2
  7393  0FF8  108E               	bcf	14,1	;volatile
  7394  0FF9  110E               	bcf	14,2	;volatile
  7395  0FFA  120E               	bcf	14,4	;volatile
  7396  0FFB  170E               	bsf	14,6	;volatile
  7397  0FFC  138E               	bcf	14,7	;volatile
  7398                           
  7399                           ;main.c: 20: LATCbits.LATC1 = 0;
  7400  0FFD  108E               	bcf	14,1	;volatile
  7401                           
  7402                           ;main.c: 21: LATCbits.LATC2 = 0;
  7403  0FFE  110E               	bcf	14,2	;volatile
  7404  0FFF  0008               	return
  7405  1000                     __end_of_SysInitGpio:	
  7406                           
  7407                           	psect	text54
  7408  0000                     __ptext54:	
  7409 ;; *************** function i1_RfTrcvCrcTick *****************
  7410 ;; Defined at:
  7411 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  initial         1    wreg     unsigned char 
  7414 ;;  data            1    0[COMMON] unsigned char 
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;  initial         1    1[COMMON] unsigned char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      unsigned char 
  7419 ;; Registers used:
  7420 ;;		wreg, status,2, status,0
  7421 ;; Tracked objects:
  7422 ;;		On entry : 1F/0
  7423 ;;		On exit  : 1F/0
  7424 ;;		Unchanged: 1F/0
  7425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7426 ;;      Params:         1       0       0       0
  7427 ;;      Locals:         1       0       0       0
  7428 ;;      Temps:          0       0       0       0
  7429 ;;      Totals:         2       0       0       0
  7430 ;;Total ram usage:        2 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; This function calls:
  7433 ;;		Nothing
  7434 ;; This function is called by:
  7435 ;;		i1_RfHalStatemachine
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439  0000                     __end_ofi1_RfTrcvCrcTick:	
  7440                           ;mrf49xa.c: 59: return (initial ^ data);
  7441                           
  7442                           ;incstack = 0
  7443                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  7444                           ;i1RfTrcvCrcTick@initial stored from wreg
  7445                           
  7446                           ;psect for function i1_RfTrcvCrcTick
  7447                           
  7448                           
  7449                           	psect	functab
  7450  0100                     __pfunctab:	
  7451  0100                     __fptable:	
  7452  0100                     fptable:	
  7453  0100  3181               	movlp	high fptable
  7454  0101  0782               	addwf	2,f
  7455  0102                     fpbase:	
  7456  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7457  0103                     fp__mrf49XaIsr:	
  7458  0103                     entry__mrf49XaIsr:	
  7459  0103  318A  2A57         	ljmp	_mrf49XaIsr
  7460  0105                     __end_of__fptable:	
  7461  007E                     btemp	set	126	;btemp
  7462  007E                     wtemp	set	126
  7463  007E                     wtemp0	set	126
  7464  0080                     wtemp1	set	128
  7465  0082                     wtemp2	set	130
  7466  0084                     wtemp3	set	132
  7467  0086                     wtemp4	set	134
  7468  0088                     wtemp5	set	136
  7469  007F                     wtemp6	set	127
  7470  007E                     ttemp	set	126
  7471  007E                     ttemp0	set	126
  7472  0081                     ttemp1	set	129
  7473  0084                     ttemp2	set	132
  7474  0087                     ttemp3	set	135
  7475  007F                     ttemp4	set	127
  7476  007E                     ltemp	set	126
  7477  007E                     ltemp0	set	126
  7478  0082                     ltemp1	set	130
  7479  0086                     ltemp2	set	134
  7480  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         145
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     11      40
    BANK1            80      0      56
    BANK2            80      0      64

Pointer List with Targets:

    rfPackets.data	PTR unsigned char  size(1) Largest target is 0

    NULL.data	PTR unsigned char  size(1) Largest target is 0

    NULL...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsTickTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsTickTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halPkTh(BANK0[2]), 

    RfPacketsHandleClient@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsHandleServer@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleServer@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalRxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalRxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalRxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfPackets...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    S338$data	PTR unsigned char  size(1) Largest target is 0

    RfHalTickRxTh@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    sp__RfHalGetFree	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickRxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halRxBfTh(BANK0[2]), 

    RfHalTickRxTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickTxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halTxBfTh(BANK0[2]), 

    CCDef	const PTR struct CircBufDef_s size(1) Largest target is 5
		 -> rfRxCC(BANK0[4]), 

    S572CircBufDef_s$bf	const PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    rfRxCC.bf	const PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    S365$txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> mrf49XaIsr(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_mrf49XaIsr
    i1_mrf49XaIsr->i1_RfHalStatemachine
    i1_RfTrcvStatus->i1_SPI_Read
    i1_RfHalStatemachine->i1_RfTrcvMode
    i1__CCBufWrByte->i1__CCBufCalcPt
    i1_RfTrcvMode->i1_RfTrcvSetup
    i1_RfTrcvSetup->i1_RfTrcvPut
    i1_RfTrcvPut->i1_MRF49XACommand
    i1_MRF49XACommand->i1_SPI_Write
    i1_RfTrcvGet->i1_SPI_Read
    i1_RfTrcvGet->i1_SPI_Write

Critical Paths under _main in BANK0

    _main->_RfPacketsTickTh
    _mrf49XaIsr->_RfHalStatemachine
    _RfHalStatemachine->_RfTrcvMode
    __CCBufWrByte->__CCBufCalcPt
    _RfTrcvGet->_SPI_Read
    _RfTrcvGet->_SPI_Write
    _RfPacketsTickTh->_RfPacketsHandleClient
    _RfPacketsHandleClient->_RfPacketSimpleReply
    _RfPacketSimpleReply->_RfHalTxPut
    _RfHalTickTxTh->_RfTrcvMode
    _RfTrcvStatus->_SPI_Read
    _RfHalTxGet->___bmul
    _RfHalTickRxTh->__CCBufRdByte
    __CCBufRdReverse->__CCBufCalcPt
    __CCBufRdByte->__CCBufCalcPt
    __CCBufCanRd->__CCBufCalcPt
    _RfHalInit->_RfTrcvMode
    __CCBufInit->__CCBufReset
    _RfTrcvMode->_RfTrcvSetup
    _MRF49XAInit->_RfTrcvSetup
    _RfTrcvSetup->_RfTrcvPut
    _RfTrcvPut->_MRF49XACommand
    _MRF49XACommand->_SPI_Write

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   36647
                            _AdcInit
                         _ExtIntInit
                        _MRF49XAInit
                          _RfHalInit
                      _RfHalTickRxTh
                      _RfHalTickTxTh
                    _RfPacketsTickTh
                        _RfTrcvSetup
                       _RfTrcvStatus
                        _SysInitGpio
                            ___lbmod
                         _mrf49XaIsr
 ---------------------------------------------------------------------------------
 (1) _mrf49XaIsr                                           1     1      0   11848
                                              7 BANK0      1     1      0
                  _RfHalStatemachine
                        _RfTrcvSetup
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfHalStatemachine                                    1     1      0    7464
                                              6 BANK0      1     1      0
                      _RfTrcvCrcTick
                          _RfTrcvGet
                         _RfTrcvMode
                          _RfTrcvPut
                       __CCBufWrByte
 ---------------------------------------------------------------------------------
 (3) __CCBufWrByte                                         2     2      0     480
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanWr
 ---------------------------------------------------------------------------------
 (4) __CCBufCanWr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvGet                                            1     1      0     230
                                              1 BANK0      1     1      0
                           _SPI_Read
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) ___lbmod                                              5     4      1     235
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfPacketsTickTh                                      4     4      0    1257
                                              8 BANK0      3     3      0
                         _RfHalRxGet
              _RfPacketsHandleClient
 ---------------------------------------------------------------------------------
 (2) _RfPacketsHandleClient                                1     1      0    1141
                                              7 BANK0      1     1      0
                _RfPacketSimpleReply
 ---------------------------------------------------------------------------------
 (3) _RfPacketSimpleReply                                  4     2      2     976
                                              3 BANK0      4     2      2
                         _RfHalTxPut
 ---------------------------------------------------------------------------------
 (4) _RfHalTxPut                                           3     2      1     433
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxGet                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalTickTxTh                                        4     4      0    5177
                                              6 BANK0      3     3      0
                     _RfHalGetReturn
                         _RfHalTxGet
               _RfTrcvCarrierPresent
                         _RfTrcvMode
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCarrierPresent                                 0     0      0      31
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfTrcvStatus                                         0     0      0      31
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SPI_Read                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalTxGet                                           1     1      0     427
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     248
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _RfHalTickRxTh                                        5     5      0    2608
                                              5 BANK0      4     4      0
                       _RfHalAnyFree
                       _RfHalGetFree
                     _RfHalGetReturn
                         _RfHalRxPut
                      _RfTrcvCrcTick
                        __CCBufCanRd
                       __CCBufRdByte
                    __CCBufRdReverse
 ---------------------------------------------------------------------------------
 (2) __CCBufRdReverse                                      1     1      0     480
                                              3 BANK0      1     1      0
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (2) __CCBufRdByte                                         2     2      0     939
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (3) __CCBufCanRd                                          0     0      0     458
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (4) __CCBufCalcPt                                         3     2      1     458
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _RfTrcvCrcTick                                        2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxPut                                           1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetReturn                                       1     1      0     165
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RfHalAnyFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalInit                                            1     1      0    4509
                                              6 BANK0      1     1      0
                         _RfTrcvMode
                         __CCBufInit
 ---------------------------------------------------------------------------------
 (2) __CCBufInit                                           0     0      0      46
                        __CCBufReset
 ---------------------------------------------------------------------------------
 (3) __CCBufReset                                          2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvMode                                           1     1      0    4394
                                              5 BANK0      1     1      0
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (1) _MRF49XAInit                                          2     2      0    6654
                                              5 BANK0      2     2      0
                     _MRF49XACommand
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (2) _RfTrcvSetup                                          1     1      0    4328
                                              4 BANK0      1     1      0
                     _MRF49XACommand
                          _RfTrcvPut
 ---------------------------------------------------------------------------------
 (3) _RfTrcvPut                                            1     1      0    2164
                                              3 BANK0      1     1      0
                     _MRF49XACommand
 ---------------------------------------------------------------------------------
 (4) _MRF49XACommand                                       2     0      2    2142
                                              1 BANK0      2     0      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               0     0      0   10664
                       i1_mrf49XaIsr
 ---------------------------------------------------------------------------------
 (9) i1_mrf49XaIsr                                         1     1      0   10664
                                              7 COMMON     1     1      0
                i1_RfHalStatemachine
                      i1_RfTrcvSetup
                     i1_RfTrcvStatus
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvStatus                                      0     0      0      91
                         i1_SPI_Read
 ---------------------------------------------------------------------------------
 (10) i1_RfHalStatemachine                                 1     1      0    6962
                                              6 COMMON     1     1      0
                    i1_RfTrcvCrcTick
                        i1_RfTrcvGet
                       i1_RfTrcvMode
                        i1_RfTrcvPut
                     i1__CCBufWrByte
 ---------------------------------------------------------------------------------
 (11) i1__CCBufWrByte                                      2     2      0     460
                                              3 COMMON     2     2      0
                     i1__CCBufCalcPt
                      i1__CCBufCanWr
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCanWr                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCalcPt                                      3     2      1     387
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvMode                                        1     1      0    3751
                                              5 COMMON     1     1      0
                      i1_RfTrcvSetup
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvSetup                                       1     1      0    3532
                                              4 COMMON     1     1      0
                   i1_MRF49XACommand
                        i1_RfTrcvPut
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvPut                                         1     1      0    1766
                                              3 COMMON     1     1      0
                   i1_MRF49XACommand
 ---------------------------------------------------------------------------------
 (12) i1_MRF49XACommand                                    2     0      2    1693
                                              1 COMMON     2     0      2
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvGet                                         1     1      0     750
                                              1 COMMON     1     1      0
                         i1_SPI_Read
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (13) i1_SPI_Write                                         1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_SPI_Read                                          1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvCrcTick                                     2     1      1     235
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _MRF49XAInit
     _MRF49XACommand
       _SPI_Write
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
   _RfHalInit
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
     __CCBufInit
       __CCBufReset
   _RfHalTickRxTh
     _RfHalAnyFree
     _RfHalGetFree
     _RfHalGetReturn
     _RfHalRxPut
     _RfTrcvCrcTick
     __CCBufCanRd
       __CCBufCalcPt
     __CCBufRdByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdReverse
       __CCBufCalcPt
   _RfHalTickTxTh
     _RfHalGetReturn
     _RfHalTxGet
       ___bmul
     _RfTrcvCarrierPresent
       _RfTrcvStatus
         _SPI_Read
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
   _RfPacketsTickTh
     _RfHalRxGet
     _RfPacketsHandleClient
       _RfPacketSimpleReply
         _RfHalTxPut
   _RfTrcvSetup
     _MRF49XACommand
       _SPI_Write
     _RfTrcvPut
       _MRF49XACommand
         _SPI_Write
   _RfTrcvStatus
     _SPI_Read
   _SysInitGpio
   ___lbmod
   _mrf49XaIsr
     _RfHalStatemachine
       _RfTrcvCrcTick
       _RfTrcvGet
         _SPI_Read
         _SPI_Write
       _RfTrcvMode
         _RfTrcvSetup
           _MRF49XACommand
             _SPI_Write
           _RfTrcvPut
             _MRF49XACommand
               _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
       __CCBufWrByte
         __CCBufCalcPt
         __CCBufCanWr
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
     _RfTrcvStatus
       _SPI_Read

 _extInt (ROOT)
   i1_mrf49XaIsr
     i1_RfHalStatemachine
       i1_RfTrcvCrcTick
       i1_RfTrcvGet
         i1_SPI_Read
         i1_SPI_Write
       i1_RfTrcvMode
         i1_RfTrcvSetup
           i1_MRF49XACommand
             i1_SPI_Write
           i1_RfTrcvPut
             i1_MRF49XACommand
               i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
       i1__CCBufWrByte
         i1__CCBufCalcPt
         i1__CCBufCanWr
     i1_RfTrcvSetup
       i1_MRF49XACommand
         i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
     i1_RfTrcvStatus
       i1_SPI_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      B      28       6       50.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      38       8       70.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      A8      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Wed Apr  9 08:46:54 2014

        RfHalTickRxTh@pktLength 0040                               pc 0002                 ??i1_RfTrcvSetup 0074  
                ___bmul@product 003A          __size_of_RfTrcvCrcTick 0000               ??i1_RfTrcvCrcTick 0071  
             RfHalTxPut@needAck 0039                ??i1_RfTrcvStatus 0071                      __CCBufInit 0000  
                           l230 0C49                             l231 0C4B                             l250 0C7B  
                           l242 0C67                             l234 0C53                             l251 0C7D  
                           l243 0C69                             l235 0C55                             l404 0E2F  
                           l254 0C85                             l246 0C71                             l238 0C5D  
                           l255 0C87                             l247 0C73                             l239 0C5F  
                           l183 0003                             l193 0BB7                             l409 0E39  
                           l417 0F26                             l258 0C8F                             l522 0002  
                           l259 0C91                             l197 0C07                             l528 0015  
                           l493 0F5A                             l661 0B29                             l647 0A57  
         __size_of__CCBufCalcPt 000C                             _dl1 0029                             _dl2 002A  
                           _isr 002B           __size_of__CCBufRdByte 001D                             wreg 0009  
                  ?_MRF49XAInit 0070           __size_of__CCBufWrByte 001B                     __CCBufCanRd 0000  
                   __CCBufCanWr 0000                            S3687 000F                            PL130 0EBD  
                          PL122 0F93                            PL132 0EC2                            PL124 0EB2  
                          PL134 0EC7                            PL126 0EB8                            PL136 0ECC  
                          PL128 0AF1                            PL138 0ED2                     __CCBufReset 0000  
                          l3101 0A8B                            l3031 000B                            l3111 0A90  
                          l3103 0A89                            l3201 0F1D                            l3115 0A92  
                          l3107 0A8E                            l3213 0004                            l3029 0000  
                          l3133 0AC1                            l3301 0B61                            l3055 0001  
                          l3119 0A95                            l3217 0011                            l3209 0000  
                          l3057 0009                            l3313 0FDA                            l3233 0000  
                          l3137 0AC3                            l3129 0ABB                            l3219 0014  
                          l3227 0E04                            l3059 000F                            l3331 0EDB  
                          l3235 0006                            l2611 0A69                            l3229 0E0B  
                          l3173 0F39                            l2605 0A65                            l2631 0C2A  
                          l3191 0F03                            l3183 0EF3                            l2623 0A74  
                          l3271 0B3A                            l3255 0B25                            l2801 0CE6  
                          l3169 0F2E                            l3185 0EF8                            l2617 0A6F  
                          l2609 0A68                            l2723 0001                            l3179 0F4E  
                          l3339 0EEB                            l3099 0A86                            l3283 0B48  
                          l3275 0B3E                            l2813 0000                            l3197 0F09  
                          l3277 0B41                            l3285 0B49                            l2735 0B8A  
                          l2903 0D1F                            l3199 0F0B                            l3279 0B42  
                          l2905 0D24                            l2833 0E62                            l3289 0B4F  
                          l2747 0BB6                            l2923 0D58                            l2835 0E67  
                          l2827 0E58                            l2851 0E7E                            l3299 0B5E  
                          l2941 0D4D                            l2853 0E96                            l2845 0E77  
                          l2829 0E5D                            l2943 0D90                            l2599 0A61  
                          l2769 0C06                            l2953 0DAF                            l2881 0FD2  
                          l2971 0DD1                            l2947 0D9B                            l2955 0DB8  
                          l2867 0F9B                            l3691 0E88                            l3693 0DEB  
                          l2973 0DD6                            l2893 0D0E                            l2981 0DE1  
                          l2983 0DFF                            l2897 0D16                            l3689 0F15  
                          l2979 0DDE                            u2525 0EDE                            _main 0B18  
               __end_of_AdcInit 0CDB                            _rfPk 002C                            fsr0h 0005  
                          fsr1h 0007                            fsr0l 0004                            indf0 0000  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          ltemp 007E                            start 000D                            ttemp 007E  
                    RfTrcvGet@b 003A                            wtemp 007E               ___bmul@multiplier 003B  
           i1__CCBufWrByte@data 0074                    __CCBufCalcPt 0E01                     ?i1_SPI_Read 0070  
                  __CCBufRdByte 0E0D                   ??_RfTrcvSetup 003D          i1RfTrcvCrcTick@initial 0071  
         __size_ofi1_mrf49XaIsr 0024                    __CCBufWrByte 0AD6                           ?_main 0070  
               __end_of___lbmod 0EEF                           i1l230 09AA                           i1l231 09AB  
                         i1l250 09D7                           i1l242 09C5                           i1l234 09B3  
                         i1l251 09D8                           i1l243 09C6                           i1l235 09B4  
                         i1l254 09E0                           i1l246 09CE                           i1l238 09BC  
                         i1l183 0003                           i1l255 09E1                           i1l247 09CF  
                         i1l239 09BD                           i1l258 09E9                           i1l259 09EA  
                         i1l647 08C4                      _RfHalRxGet 0F1F                      _RfHalTxGet 0F99  
                    _RfHalRxPut 0E4A                      _RfHalTxPut 0F76                   ?_RfTrcvStatus 0070  
         __end_ofi1__CCBufCanWr 0000                   _RfTrcvCrcTick 0000                           fpbase 0102  
              __end_of_SPI_Read 0CCC                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F              __size_of_SPI_Write 0055  
                  __end_ofPL130 0EC2                    __end_ofPL122 0F99                    __end_ofPL132 0EC7  
                  __end_ofPL124 0EB8                    __end_ofPL134 0ECC                    __end_ofPL126 0EBD  
                  __end_ofPL136 0ED2                    __end_ofPL128 0AF7                    __end_ofPL138 0ED7  
                  SPI_Read@data 0039            __end_of_RfHalAnyFree 0E33                    i1_mrf49XaIsr 08C4  
          __end_of_RfHalGetFree 0E3F             i1RfTrcvCrcTick@data 0070                 __initialization 0AF7  
                    _ExtIntInit 0CDB                    __end_of_main 0B71                  _MRF49XACommand 0C2A  
                    _RfTrcvMode 0E98                  i1__CCBufCalcPt 0A4B            RfTrcvCrcTick@initial 003A  
                        ??_main 0044                     ?__CCBufInit 0070                    ?i1_SPI_Write 0070  
                i1__CCBufWrByte 0A2F                  ??_RfTrcvStatus 003A             __end_of_RfTrcvSetup 0BAB  
            __size_of_RfHalInit 002B                   __CCBufReset@i 003A             __CCBufRdReverse@qty 003C  
                ?_RfTrcvCrcTick 0039                          _ADCON0 009D                 RfHalTickRxTh@pt 0041  
                        _ADCON1 009E                          _ADCON2 009F                       ??_AdcInit 0039  
                        i1S3695 0025                 RfHalTickTxTh@pt 0041     __end_ofi1_RfHalStatemachine 0946  
                        _ANSELA 018C                          _ANSELB 018D                          _ANSELC 018E  
                        i1l3401 09D5             __size_ofi1_SPI_Read 0036                          i1l3405 09DE  
                        i1l3501 08F8                          i1l3423 0000                          i1l3345 0001  
                        i1l3409 09E7                          i1l3417 0A4E                          i1l3425 0007  
                        i1l3505 08FC                          i1l3419 0A55                          i1l3523 092F  
                        i1l3381 09A8                          i1l3509 0901                          i1l3527 0933  
                        i1l3519 0927                          i1l3535 093B                          i1l3551 08CE  
                        i1l3393 09C3                          i1l3385 09B1                          i1l3473 0972  
                        i1l3561 08D5                          i1l3491 08ED                          i1l3563 08D6  
                        i1l3397 09CC                          i1l3389 09BA                          i1l3493 08F0  
                        i1l3557 08D2                          i1l3575 08E1                          i1l3497 08F4  
                        i1l3489 08E9                          i1l3569 08DC                          _FVRCON 0117  
                        _OSCCON 0099     RfHalTickRxTh@pktRxByteIndex 0025                __end_of__fptable 0105  
            __size_of_RfTrcvGet 000C              __size_of_RfTrcvPut 0009          __end_of_MRF49XACommand 0C35  
           _RfPacketSimpleReply 0F5B                  i1SPI_Read@data 0070                          ___bmul 0FD8  
        __end_ofi1__CCBufCalcPt 0A57                    MRF49XAInit@i 003E                    MRF49XAInit@j 003F  
         RfPacketsTickTh@packet 0027                       ??___lbmod 003A                          _rfRxCC 0044  
                        _rfRxBf 0120                          _extInt 0004          __end_ofi1__CCBufWrByte 0A4B  
                  ?i1_RfTrcvGet 0070                    ?i1_RfTrcvPut 0070                          fptable 0100  
     RfPacketSimpleReply@packet 003F               __end_of_SPI_Write 0C94                          fptotal 0001  
                   ?_RfHalRxGet 0070                     ?_RfHalTxGet 0070                     ?_RfHalRxPut 0070  
                   ?_RfHalTxPut 0039            ?_RfPacketSimpleReply 003C   __size_of_RfTrcvCarrierPresent 0005  
     __size_ofi1_MRF49XACommand 0009        __size_of__CCBufRdReverse 0000            __size_of_MRF49XAInit 007F  
               ___lbmod@divisor 0039         __end_of__initialization 0B16                __CCBufRdByte@res 003D  
               ___lbmod@counter 003C                    RfTrcvMode@tx 003E                 i1_RfTrcvCrcTick 0000  
           __size_of__CCBufInit 0000                 mrf49XaIsr@retry 0040  __size_of_RfPacketsHandleClient 002F  
      __size_of_RfPacketsTickTh 0030   __end_of_RfPacketsHandleClient 0F5B             ___bmul@multiplicand 0039  
               ?_MRF49XACommand 003A               __end_of_RfHalInit 0D0B                     ?_ExtIntInit 0070  
                __pcstackCOMMON 0070                    __pidataBANK0 0000                     ?_RfTrcvMode 0070  
               ?i1__CCBufCalcPt 0070         __size_of_RfHalGetReturn 000B                     _RfTrcvSetup 0B71  
                     ?_SPI_Read 0070                 ?i1__CCBufWrByte 0070               __end_of_RfTrcvGet 0AD6  
         __end_of_RfHalTickRxTh 0E01               __end_of_RfTrcvPut 0EB2           __end_of_RfHalTickTxTh 0E98  
                _OPTION_REGbits 0095           ??_RfPacketSimpleReply 003E                 ??_RfTrcvCrcTick 003A  
           __CCBufCalcPt@result 003B                    ?__CCBufCanRd 0070                    ?__CCBufCanWr 0070  
   RfPacketsHandleClient@packet 0040                    ?__CCBufReset 0070                   ??_SysInitGpio 0039  
                    __pbssBANK0 0020                      __pbssBANK1 00A0                      __pbssBANK2 0120  
         __size_of_RfHalAnyFree 0009           __size_of_RfHalGetFree 000C               __CCBufCalcPt@move 0039  
                i1RfTrcvMode@tx 0075            __end_of_RfTrcvStatus 0C3F             __size_of_RfHalRxGet 000D  
           __size_of_RfHalTxGet 003F                      __pmaintext 0B18             __size_of_RfHalRxPut 000C  
           __size_of_RfHalTxPut 001D                         ?___bmul 0039                    ??i1_SPI_Read 0070  
                    __pintentry 0004                         ?_extInt 0070           __end_ofi1_RfTrcvSetup 0999  
                    ??_SPI_Read 0039                      _mrf49XaIsr 0A57            __size_ofi1_SPI_Write 004B  
                  _RfHalAnyFree 0E2A                    _RfHalGetFree 0E33                         _AdcInit 0CCC  
       __end_ofi1_RfTrcvCrcTick 0000             __size_of_ExtIntInit 0005      RfHalTickRxTh@rxByteTimeout 0026  
           __size_of_RfTrcvMode 000C            i1__CCBufCalcPt@entry 0071              __end_ofi1_SPI_Read 0A2F  
                    _rfPkResets 002E               ??__CCBufRdReverse 003C             __end_of_SysInitGpio 1000  
             _RfHalStatemachine 0A7B                   SPI_Write@data 0039              ?_RfHalStatemachine 0070  
               __size_of___bmul 000C                         ___lbmod 0ED7               ??_RfPacketsTickTh 0041  
                       _halPkTh 0031                 __size_of_extInt 0009                    ??__CCBufInit 003B  
                       __ptext1 0A57                         __ptext2 0A7B                         __ptext3 0AD6  
                       __ptext4 0000                         __ptext5 0ACA                         __ptext6 0ED7  
                       __ptext7 0FE4                         __ptext8 0EEF                         __ptext9 0F2C  
           ??_RfHalStatemachine 003F                         _rfPkCrc 002D          RfPacketsTickTh@timeout 0028  
          __size_ofi1_RfTrcvGet 0009            __size_ofi1_RfTrcvPut 0009                i1_MRF49XACommand 0999  
                 ?i1_RfTrcvMode 0070                         clrloop0 0106                RfHalRxPut@packet 0039  
       __size_ofi1_RfTrcvStatus 000C            end_of_initialization 0B16                         _worried 0030  
    RfPacketSimpleReply@needAck 003D      RfPacketSimpleReply@nodeTmp 003E       __end_of_RfHalStatemachine 0ACA  
        RfPacketSimpleReply@msg 003C              __end_of__CCBufInit 0000                  _RfHalGetReturn 0E3F  
        __size_ofi1__CCBufCanWr 0000                       _PORTAbits 000C                       _PORTCbits 000E  
                  ??_RfHalRxGet 0039                    ??_RfHalTxGet 003C                    ??_RfHalRxPut 0039  
                   ?_mrf49XaIsr 0070                    ??_RfHalTxPut 003A                ___lbmod@dividend 003B  
                     _TRISAbits 008C                       _TRISBbits 008D                       _TRISCbits 008E  
                ??i1_RfTrcvMode 0075                       _SPI_Write 0C3F                ?i1_RfTrcvCrcTick 0070  
              RfHalTxPut@packet 003B            __size_of__CCBufCanRd 0000            __size_of__CCBufCanWr 0000  
                   _SysInitGpio 0FE4           __size_of_RfTrcvStatus 000A                     ___lbmod@rem 003D  
              ??_MRF49XACommand 003C            __size_of__CCBufReset 0000                   RfTrcvPut@byte 003C  
                 RfTrcvSetup@tx 003D                ??i1__CCBufCalcPt 0071    __end_of_RfTrcvCarrierPresent 0EA9  
  __size_ofi1_RfHalStatemachine 005E               MRF49XACommand@cmd 003A          __end_of_RfHalGetReturn 0E4A  
                  ??_ExtIntInit 0039              __end_of_RfHalRxGet 0F2C                ??i1__CCBufWrByte 0073  
            __end_of_RfHalTxGet 0FD8              __end_of_RfHalRxPut 0E56              __end_of_RfHalTxPut 0F93  
                  ??_RfTrcvMode 003E                  __end_of___bmul 0FE4                 i1SPI_Write@data 0070  
                     _RfHalInit 0CE0                    ?_RfTrcvSetup 0070                  __end_of_extInt 000D  
             __size_of_SPI_Read 0038             start_initialization 0AF7                   ??_MRF49XAInit 003E  
                  _RfTrcvStatus 0C35                       _RfTrcvGet 0ACA                       _RfTrcvPut 0EA9  
                    ?_SPI_Write 0070                   i1__CCBufCanWr 0000               RfPacketsTickTh@pt 0043  
            __end_of_ExtIntInit 0CE0              __end_of_RfTrcvMode 0EA4      __size_of_RfHalStatemachine 004F  
               ?_RfHalGetReturn 0070             __size_of_mrf49XaIsr 0024                        ??___bmul 003A  
                 ?__CCBufCalcPt 0039           _RfPacketsHandleClient 0F2C                   ?__CCBufRdByte 0070  
                   __pdataBANK0 0044                        ??_extInt 0078     __end_of_RfPacketSimpleReply 0F76  
                    ?_RfHalInit 0070                   ?__CCBufWrByte 0070                       ___latbits 0001  
                 __pcstackBANK0 0039                entry__mrf49XaIsr 0103                 __CCBufRdReverse 0000  
                    ?_RfTrcvGet 0070               __size_of__fptable 0005                  ?i1__CCBufCanWr 0070  
                    ?_RfTrcvPut 0070           __end_of_RfTrcvCrcTick 0000                  i1_RfTrcvStatus 09ED  
                      ?_AdcInit 0070              __CCBufCalcPt@entry 003A                    _rfTrcvStatus 0037  
           __end_of_MRF49XAInit 0C2A                 _RfPacketsTickTh 0EEF                       _halRxBfTh 0033  
                     _halTxBfTh 0035                   ?i1_mrf49XaIsr 0070          __size_of_RfHalTickRxTh 00F6  
        __size_of_RfHalTickTxTh 0042                  ??__CCBufCalcPt 003A        __end_ofi1_MRF49XACommand 09A2  
               i1RfTrcvPut@byte 0073                       __pfunctab 0100                 i1RfTrcvSetup@tx 0074  
                ??__CCBufRdByte 003C            __end_ofi1_RfTrcvMode 08C4                        ?___lbmod 0039  
                ??__CCBufWrByte 003C                   ??i1_SPI_Write 0070                       __pswtext1 000F  
                     __pswtext2 0025             i1__CCBufCalcPt@move 0070                       _rfPackets 00A0  
        __end_ofi1_RfTrcvStatus 09F9            _RfTrcvCarrierPresent 0EA4                     ??_SPI_Write 0039  
             __CCBufWrByte@data 003D          __size_ofi1_RfTrcvSetup 0041                        _LATAbits 010C  
                      _LATBbits 010D                        _LATCbits 010E                       clear_ram0 0105  
                ??i1_mrf49XaIsr 0077          ?_RfPacketsHandleClient 0070                     ??_RfHalInit 003F  
           RfHalTickRxTh@packet 0024                        _SPI_Read 0C94                   ??i1_RfTrcvGet 0071  
                 ??i1_RfTrcvPut 0073         __end_of__CCBufRdReverse 0000            __size_of_RfTrcvSetup 003A  
                      _WPUAbits 020C                    ??_mrf49XaIsr 0040                   _RfHalTickRxTh 0D0B  
           i1_RfHalStatemachine 08E8                   _RfHalTickTxTh 0E56           ?_RfTrcvCarrierPresent 0070  
               ??i1__CCBufCanWr 0070           i1__CCBufCalcPt@result 0072                 ?i1_RfTrcvStatus 0070  
             RfTrcvCrcTick@data 0039                     _MRF49XAInit 0BAB                     ??_RfTrcvGet 003A  
                   ??_RfTrcvPut 003C             __end_ofi1_SPI_Write 09ED         __end_of_RfPacketsTickTh 0F1F  
              __size_of_AdcInit 000F                    ?_SysInitGpio 0070            ?i1_RfHalStatemachine 0070  
            __end_of_mrf49XaIsr 0A7B                __size_of___lbmod 0018                   i1_RfTrcvSetup 0958  
                ?_RfHalTickRxTh 0070                  ?_RfHalTickTxTh 0070                        __fptable 0100  
                  i1RfTrcvGet@b 0071                   ??__CCBufCanRd 003C                   ??__CCBufCanWr 0039  
           __end_ofi1_RfTrcvGet 0958             __end_ofi1_RfTrcvPut 094F                        __ptext10 0F5B  
                      __ptext11 0F76                        __ptext20 0000                        __ptext12 0F1F  
                      __ptext21 0E0D                        __ptext13 0E56                        __ptext30 0000  
                      __ptext22 0000                        __ptext14 0EA4                        __ptext31 0000  
                      __ptext23 0E01                        __ptext15 0C35                        __ptext32 0E98  
                      __ptext24 0000                        __ptext16 0C94                        __ptext41 08C4  
                      __ptext33 0BAB                        __ptext25 0E4A                        __ptext17 0F99  
                      __ptext50 0999                        __ptext42 09ED                        __ptext34 0B71  
                      __ptext26 0E3F                        __ptext18 0FD8                        __ptext51 094F  
                      __ptext43 08E8                        __ptext35 0EA9                        __ptext27 0E33  
                      __ptext19 0D0B                        __ptext52 09A2                        __ptext44 0A2F  
                      __ptext36 0C2A                        __ptext28 0E2A                        __ptext53 09F9  
                      __ptext45 0000                        __ptext37 0C3F                        __ptext29 0CE0  
                      __ptext54 0000                        __ptext46 0A4B                        __ptext38 0CDB  
                      __ptext47 08B8                        __ptext39 0CCC                        __ptext48 0958  
                      __ptext49 0946            __end_of__CCBufCalcPt 0E0D                   ??__CCBufReset 0039  
          __end_of__CCBufRdByte 0E2A                        _rfPkTime 002F            __end_of__CCBufWrByte 0AF1  
              ??_RfHalGetReturn 0039               i1mrf49XaIsr@retry 0077                   __size_of_main 0059  
                      _rfStatus 0020           ??i1_RfHalStatemachine 0076           __size_ofi1_RfTrcvMode 000C  
      __size_ofi1_RfTrcvCrcTick 0000                  ?i1_RfTrcvSetup 0070                ?__CCBufRdReverse 0070  
                   i1_SPI_Write 09A2          ??_RfTrcvCarrierPresent 003A                      _INTCONbits 000B  
           i1MRF49XACommand@cmd 0071            __end_ofi1_mrf49XaIsr 08E8                   ?_RfHalAnyFree 0070  
                 ?_RfHalGetFree 0070                    i1_RfTrcvMode 08B8                ?_RfPacketsTickTh 0070  
                      intlevel1 0100             __end_of__CCBufCanRd 0000             __end_of__CCBufCanWr 0000  
           __end_of__CCBufReset 0000            RfHalGetReturn@packet 0039               ?i1_MRF49XACommand 0071  
       __size_of_MRF49XACommand 000B                      i1_SPI_Read 09F9              ??i1_MRF49XACommand 0073  
                   RfHalTxGet@i 003C         __size_ofi1__CCBufCalcPt 000C                 ??_RfHalTickRxTh 003E  
               ??_RfHalTickTxTh 003F                     i1_RfTrcvGet 094F                     i1_RfTrcvPut 0946  
                ??_RfHalAnyFree 0039                  ??_RfHalGetFree 0039         __size_ofi1__CCBufWrByte 001C  
  __size_of_RfPacketSimpleReply 001B                      RfHalInit@i 003F                   fp__mrf49XaIsr 0103  
       ??_RfPacketsHandleClient 0040            __size_of_SysInitGpio 001C  

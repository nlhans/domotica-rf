

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Tue Aug 26 14:19:25 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text16,local,class=CODE,merge=1,delta=2
    18                           	psect	text18,local,class=CODE,merge=1,delta=2
    19                           	psect	text28,local,class=CODE,merge=1,delta=2
    20                           	psect	text29,local,class=CODE,merge=1,delta=2
    21                           	psect	text44,local,class=CODE,merge=1,delta=2
    22                           	psect	text47,local,class=CODE,merge=1,delta=2
    23                           	psect	text50,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text74,local,class=CODE,merge=1,delta=2
    26                           	psect	text77,local,class=CODE,merge=1,delta=2
    27                           	psect	pa_nodes,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  0091                     	;# 
    60  0092                     	;# 
    61  0093                     	;# 
    62  0095                     	;# 
    63  0096                     	;# 
    64  0097                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  0111                     	;# 
    77  0112                     	;# 
    78  0113                     	;# 
    79  0114                     	;# 
    80  0115                     	;# 
    81  0116                     	;# 
    82  0117                     	;# 
    83  0118                     	;# 
    84  0119                     	;# 
    85  011D                     	;# 
    86  018C                     	;# 
    87  018D                     	;# 
    88  018E                     	;# 
    89  0191                     	;# 
    90  0191                     	;# 
    91  0192                     	;# 
    92  0193                     	;# 
    93  0193                     	;# 
    94  0194                     	;# 
    95  0195                     	;# 
    96  0196                     	;# 
    97  0199                     	;# 
    98  019A                     	;# 
    99  019B                     	;# 
   100  019B                     	;# 
   101  019C                     	;# 
   102  019D                     	;# 
   103  019E                     	;# 
   104  019F                     	;# 
   105  020C                     	;# 
   106  020D                     	;# 
   107  0211                     	;# 
   108  0211                     	;# 
   109  0212                     	;# 
   110  0212                     	;# 
   111  0213                     	;# 
   112  0213                     	;# 
   113  0214                     	;# 
   114  0214                     	;# 
   115  0215                     	;# 
   116  0215                     	;# 
   117  0215                     	;# 
   118  0216                     	;# 
   119  0216                     	;# 
   120  0217                     	;# 
   121  0217                     	;# 
   122  0391                     	;# 
   123  0392                     	;# 
   124  0393                     	;# 
   125  0394                     	;# 
   126  0395                     	;# 
   127  0396                     	;# 
   128  0498                     	;# 
   129  0498                     	;# 
   130  0499                     	;# 
   131  049A                     	;# 
   132  049B                     	;# 
   133  049B                     	;# 
   134  049C                     	;# 
   135  049E                     	;# 
   136  049F                     	;# 
   137  0611                     	;# 
   138  0612                     	;# 
   139  0613                     	;# 
   140  0613                     	;# 
   141  0614                     	;# 
   142  0615                     	;# 
   143  0616                     	;# 
   144  0616                     	;# 
   145  0617                     	;# 
   146  0618                     	;# 
   147  0619                     	;# 
   148  0619                     	;# 
   149  061A                     	;# 
   150  061B                     	;# 
   151  061C                     	;# 
   152  061C                     	;# 
   153  0691                     	;# 
   154  0692                     	;# 
   155  0693                     	;# 
   156  0694                     	;# 
   157  0695                     	;# 
   158  0F0F                     	;# 
   159  0F10                     	;# 
   160  0F11                     	;# 
   161  0F12                     	;# 
   162  0F13                     	;# 
   163  0F14                     	;# 
   164  0F15                     	;# 
   165  0F16                     	;# 
   166  0F17                     	;# 
   167  0F18                     	;# 
   168  0F19                     	;# 
   169  0F1A                     	;# 
   170  0F1B                     	;# 
   171  0F1C                     	;# 
   172  0F1D                     	;# 
   173  0F1E                     	;# 
   174  0F1F                     	;# 
   175  0F20                     	;# 
   176  0F21                     	;# 
   177  0F22                     	;# 
   178  0F23                     	;# 
   179  0F24                     	;# 
   180  0F25                     	;# 
   181  0F26                     	;# 
   182  0F27                     	;# 
   183  0F28                     	;# 
   184  0F29                     	;# 
   185  0F2A                     	;# 
   186  0F2B                     	;# 
   187  0F2C                     	;# 
   188  0F2D                     	;# 
   189  0F2E                     	;# 
   190  0F2F                     	;# 
   191  0F8C                     	;# 
   192  0F8D                     	;# 
   193  0F91                     	;# 
   194  0F95                     	;# 
   195  0F96                     	;# 
   196  0F97                     	;# 
   197  0F9C                     	;# 
   198  0F9D                     	;# 
   199  0F9E                     	;# 
   200  0FE3                     	;# 
   201  0FE4                     	;# 
   202  0FE5                     	;# 
   203  0FE6                     	;# 
   204  0FE7                     	;# 
   205  0FE8                     	;# 
   206  0FE9                     	;# 
   207  0FEA                     	;# 
   208  0FEB                     	;# 
   209  0FED                     	;# 
   210  0FEE                     	;# 
   211  0FEF                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  008C                     	;# 
   240  008D                     	;# 
   241  008E                     	;# 
   242  0091                     	;# 
   243  0092                     	;# 
   244  0093                     	;# 
   245  0095                     	;# 
   246  0096                     	;# 
   247  0097                     	;# 
   248  0099                     	;# 
   249  009A                     	;# 
   250  009B                     	;# 
   251  009B                     	;# 
   252  009C                     	;# 
   253  009D                     	;# 
   254  009E                     	;# 
   255  009F                     	;# 
   256  010C                     	;# 
   257  010D                     	;# 
   258  010E                     	;# 
   259  0111                     	;# 
   260  0112                     	;# 
   261  0113                     	;# 
   262  0114                     	;# 
   263  0115                     	;# 
   264  0116                     	;# 
   265  0117                     	;# 
   266  0118                     	;# 
   267  0119                     	;# 
   268  011D                     	;# 
   269  018C                     	;# 
   270  018D                     	;# 
   271  018E                     	;# 
   272  0191                     	;# 
   273  0191                     	;# 
   274  0192                     	;# 
   275  0193                     	;# 
   276  0193                     	;# 
   277  0194                     	;# 
   278  0195                     	;# 
   279  0196                     	;# 
   280  0199                     	;# 
   281  019A                     	;# 
   282  019B                     	;# 
   283  019B                     	;# 
   284  019C                     	;# 
   285  019D                     	;# 
   286  019E                     	;# 
   287  019F                     	;# 
   288  020C                     	;# 
   289  020D                     	;# 
   290  0211                     	;# 
   291  0211                     	;# 
   292  0212                     	;# 
   293  0212                     	;# 
   294  0213                     	;# 
   295  0213                     	;# 
   296  0214                     	;# 
   297  0214                     	;# 
   298  0215                     	;# 
   299  0215                     	;# 
   300  0215                     	;# 
   301  0216                     	;# 
   302  0216                     	;# 
   303  0217                     	;# 
   304  0217                     	;# 
   305  0391                     	;# 
   306  0392                     	;# 
   307  0393                     	;# 
   308  0394                     	;# 
   309  0395                     	;# 
   310  0396                     	;# 
   311  0498                     	;# 
   312  0498                     	;# 
   313  0499                     	;# 
   314  049A                     	;# 
   315  049B                     	;# 
   316  049B                     	;# 
   317  049C                     	;# 
   318  049E                     	;# 
   319  049F                     	;# 
   320  0611                     	;# 
   321  0612                     	;# 
   322  0613                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0615                     	;# 
   326  0616                     	;# 
   327  0616                     	;# 
   328  0617                     	;# 
   329  0618                     	;# 
   330  0619                     	;# 
   331  0619                     	;# 
   332  061A                     	;# 
   333  061B                     	;# 
   334  061C                     	;# 
   335  061C                     	;# 
   336  0691                     	;# 
   337  0692                     	;# 
   338  0693                     	;# 
   339  0694                     	;# 
   340  0695                     	;# 
   341  0F0F                     	;# 
   342  0F10                     	;# 
   343  0F11                     	;# 
   344  0F12                     	;# 
   345  0F13                     	;# 
   346  0F14                     	;# 
   347  0F15                     	;# 
   348  0F16                     	;# 
   349  0F17                     	;# 
   350  0F18                     	;# 
   351  0F19                     	;# 
   352  0F1A                     	;# 
   353  0F1B                     	;# 
   354  0F1C                     	;# 
   355  0F1D                     	;# 
   356  0F1E                     	;# 
   357  0F1F                     	;# 
   358  0F20                     	;# 
   359  0F21                     	;# 
   360  0F22                     	;# 
   361  0F23                     	;# 
   362  0F24                     	;# 
   363  0F25                     	;# 
   364  0F26                     	;# 
   365  0F27                     	;# 
   366  0F28                     	;# 
   367  0F29                     	;# 
   368  0F2A                     	;# 
   369  0F2B                     	;# 
   370  0F2C                     	;# 
   371  0F2D                     	;# 
   372  0F2E                     	;# 
   373  0F2F                     	;# 
   374  0F8C                     	;# 
   375  0F8D                     	;# 
   376  0F91                     	;# 
   377  0F95                     	;# 
   378  0F96                     	;# 
   379  0F97                     	;# 
   380  0F9C                     	;# 
   381  0F9D                     	;# 
   382  0F9E                     	;# 
   383  0FE3                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0013                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  010C                     	;# 
   440  010D                     	;# 
   441  010E                     	;# 
   442  0111                     	;# 
   443  0112                     	;# 
   444  0113                     	;# 
   445  0114                     	;# 
   446  0115                     	;# 
   447  0116                     	;# 
   448  0117                     	;# 
   449  0118                     	;# 
   450  0119                     	;# 
   451  011D                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454  018E                     	;# 
   455  0191                     	;# 
   456  0191                     	;# 
   457  0192                     	;# 
   458  0193                     	;# 
   459  0193                     	;# 
   460  0194                     	;# 
   461  0195                     	;# 
   462  0196                     	;# 
   463  0199                     	;# 
   464  019A                     	;# 
   465  019B                     	;# 
   466  019B                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020C                     	;# 
   472  020D                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0391                     	;# 
   489  0392                     	;# 
   490  0393                     	;# 
   491  0394                     	;# 
   492  0395                     	;# 
   493  0396                     	;# 
   494  0498                     	;# 
   495  0498                     	;# 
   496  0499                     	;# 
   497  049A                     	;# 
   498  049B                     	;# 
   499  049B                     	;# 
   500  049C                     	;# 
   501  049E                     	;# 
   502  049F                     	;# 
   503  0611                     	;# 
   504  0612                     	;# 
   505  0613                     	;# 
   506  0613                     	;# 
   507  0614                     	;# 
   508  0615                     	;# 
   509  0616                     	;# 
   510  0616                     	;# 
   511  0617                     	;# 
   512  0618                     	;# 
   513  0619                     	;# 
   514  0619                     	;# 
   515  061A                     	;# 
   516  061B                     	;# 
   517  061C                     	;# 
   518  061C                     	;# 
   519  0691                     	;# 
   520  0692                     	;# 
   521  0693                     	;# 
   522  0694                     	;# 
   523  0695                     	;# 
   524  0F0F                     	;# 
   525  0F10                     	;# 
   526  0F11                     	;# 
   527  0F12                     	;# 
   528  0F13                     	;# 
   529  0F14                     	;# 
   530  0F15                     	;# 
   531  0F16                     	;# 
   532  0F17                     	;# 
   533  0F18                     	;# 
   534  0F19                     	;# 
   535  0F1A                     	;# 
   536  0F1B                     	;# 
   537  0F1C                     	;# 
   538  0F1D                     	;# 
   539  0F1E                     	;# 
   540  0F1F                     	;# 
   541  0F20                     	;# 
   542  0F21                     	;# 
   543  0F22                     	;# 
   544  0F23                     	;# 
   545  0F24                     	;# 
   546  0F25                     	;# 
   547  0F26                     	;# 
   548  0F27                     	;# 
   549  0F28                     	;# 
   550  0F29                     	;# 
   551  0F2A                     	;# 
   552  0F2B                     	;# 
   553  0F2C                     	;# 
   554  0F2D                     	;# 
   555  0F2E                     	;# 
   556  0F2F                     	;# 
   557  0F8C                     	;# 
   558  0F8D                     	;# 
   559  0F91                     	;# 
   560  0F95                     	;# 
   561  0F96                     	;# 
   562  0F97                     	;# 
   563  0F9C                     	;# 
   564  0F9D                     	;# 
   565  0F9E                     	;# 
   566  0FE3                     	;# 
   567  0FE4                     	;# 
   568  0FE5                     	;# 
   569  0FE6                     	;# 
   570  0FE7                     	;# 
   571  0FE8                     	;# 
   572  0FE9                     	;# 
   573  0FEA                     	;# 
   574  0FEB                     	;# 
   575  0FED                     	;# 
   576  0FEE                     	;# 
   577  0FEF                     	;# 
   578  0000                     	;# 
   579  0001                     	;# 
   580  0002                     	;# 
   581  0003                     	;# 
   582  0004                     	;# 
   583  0005                     	;# 
   584  0006                     	;# 
   585  0007                     	;# 
   586  0008                     	;# 
   587  0009                     	;# 
   588  000A                     	;# 
   589  000B                     	;# 
   590  000C                     	;# 
   591  000D                     	;# 
   592  000E                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0013                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0016                     	;# 
   599  0017                     	;# 
   600  0018                     	;# 
   601  0019                     	;# 
   602  001A                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  008C                     	;# 
   606  008D                     	;# 
   607  008E                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0093                     	;# 
   611  0095                     	;# 
   612  0096                     	;# 
   613  0097                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  009F                     	;# 
   622  010C                     	;# 
   623  010D                     	;# 
   624  010E                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0113                     	;# 
   628  0114                     	;# 
   629  0115                     	;# 
   630  0116                     	;# 
   631  0117                     	;# 
   632  0118                     	;# 
   633  0119                     	;# 
   634  011D                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  018E                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0199                     	;# 
   647  019A                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020C                     	;# 
   655  020D                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0391                     	;# 
   672  0392                     	;# 
   673  0393                     	;# 
   674  0394                     	;# 
   675  0395                     	;# 
   676  0396                     	;# 
   677  0498                     	;# 
   678  0498                     	;# 
   679  0499                     	;# 
   680  049A                     	;# 
   681  049B                     	;# 
   682  049B                     	;# 
   683  049C                     	;# 
   684  049E                     	;# 
   685  049F                     	;# 
   686  0611                     	;# 
   687  0612                     	;# 
   688  0613                     	;# 
   689  0613                     	;# 
   690  0614                     	;# 
   691  0615                     	;# 
   692  0616                     	;# 
   693  0616                     	;# 
   694  0617                     	;# 
   695  0618                     	;# 
   696  0619                     	;# 
   697  0619                     	;# 
   698  061A                     	;# 
   699  061B                     	;# 
   700  061C                     	;# 
   701  061C                     	;# 
   702  0691                     	;# 
   703  0692                     	;# 
   704  0693                     	;# 
   705  0694                     	;# 
   706  0695                     	;# 
   707  0F0F                     	;# 
   708  0F10                     	;# 
   709  0F11                     	;# 
   710  0F12                     	;# 
   711  0F13                     	;# 
   712  0F14                     	;# 
   713  0F15                     	;# 
   714  0F16                     	;# 
   715  0F17                     	;# 
   716  0F18                     	;# 
   717  0F19                     	;# 
   718  0F1A                     	;# 
   719  0F1B                     	;# 
   720  0F1C                     	;# 
   721  0F1D                     	;# 
   722  0F1E                     	;# 
   723  0F1F                     	;# 
   724  0F20                     	;# 
   725  0F21                     	;# 
   726  0F22                     	;# 
   727  0F23                     	;# 
   728  0F24                     	;# 
   729  0F25                     	;# 
   730  0F26                     	;# 
   731  0F27                     	;# 
   732  0F28                     	;# 
   733  0F29                     	;# 
   734  0F2A                     	;# 
   735  0F2B                     	;# 
   736  0F2C                     	;# 
   737  0F2D                     	;# 
   738  0F2E                     	;# 
   739  0F2F                     	;# 
   740  0F8C                     	;# 
   741  0F8D                     	;# 
   742  0F91                     	;# 
   743  0F95                     	;# 
   744  0F96                     	;# 
   745  0F97                     	;# 
   746  0F9C                     	;# 
   747  0F9D                     	;# 
   748  0F9E                     	;# 
   749  0FE3                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  0091                     	;# 
   792  0092                     	;# 
   793  0093                     	;# 
   794  0095                     	;# 
   795  0096                     	;# 
   796  0097                     	;# 
   797  0099                     	;# 
   798  009A                     	;# 
   799  009B                     	;# 
   800  009B                     	;# 
   801  009C                     	;# 
   802  009D                     	;# 
   803  009E                     	;# 
   804  009F                     	;# 
   805  010C                     	;# 
   806  010D                     	;# 
   807  010E                     	;# 
   808  0111                     	;# 
   809  0112                     	;# 
   810  0113                     	;# 
   811  0114                     	;# 
   812  0115                     	;# 
   813  0116                     	;# 
   814  0117                     	;# 
   815  0118                     	;# 
   816  0119                     	;# 
   817  011D                     	;# 
   818  018C                     	;# 
   819  018D                     	;# 
   820  018E                     	;# 
   821  0191                     	;# 
   822  0191                     	;# 
   823  0192                     	;# 
   824  0193                     	;# 
   825  0193                     	;# 
   826  0194                     	;# 
   827  0195                     	;# 
   828  0196                     	;# 
   829  0199                     	;# 
   830  019A                     	;# 
   831  019B                     	;# 
   832  019B                     	;# 
   833  019C                     	;# 
   834  019D                     	;# 
   835  019E                     	;# 
   836  019F                     	;# 
   837  020C                     	;# 
   838  020D                     	;# 
   839  0211                     	;# 
   840  0211                     	;# 
   841  0212                     	;# 
   842  0212                     	;# 
   843  0213                     	;# 
   844  0213                     	;# 
   845  0214                     	;# 
   846  0214                     	;# 
   847  0215                     	;# 
   848  0215                     	;# 
   849  0215                     	;# 
   850  0216                     	;# 
   851  0216                     	;# 
   852  0217                     	;# 
   853  0217                     	;# 
   854  0391                     	;# 
   855  0392                     	;# 
   856  0393                     	;# 
   857  0394                     	;# 
   858  0395                     	;# 
   859  0396                     	;# 
   860  0498                     	;# 
   861  0498                     	;# 
   862  0499                     	;# 
   863  049A                     	;# 
   864  049B                     	;# 
   865  049B                     	;# 
   866  049C                     	;# 
   867  049E                     	;# 
   868  049F                     	;# 
   869  0611                     	;# 
   870  0612                     	;# 
   871  0613                     	;# 
   872  0613                     	;# 
   873  0614                     	;# 
   874  0615                     	;# 
   875  0616                     	;# 
   876  0616                     	;# 
   877  0617                     	;# 
   878  0618                     	;# 
   879  0619                     	;# 
   880  0619                     	;# 
   881  061A                     	;# 
   882  061B                     	;# 
   883  061C                     	;# 
   884  061C                     	;# 
   885  0691                     	;# 
   886  0692                     	;# 
   887  0693                     	;# 
   888  0694                     	;# 
   889  0695                     	;# 
   890  0F0F                     	;# 
   891  0F10                     	;# 
   892  0F11                     	;# 
   893  0F12                     	;# 
   894  0F13                     	;# 
   895  0F14                     	;# 
   896  0F15                     	;# 
   897  0F16                     	;# 
   898  0F17                     	;# 
   899  0F18                     	;# 
   900  0F19                     	;# 
   901  0F1A                     	;# 
   902  0F1B                     	;# 
   903  0F1C                     	;# 
   904  0F1D                     	;# 
   905  0F1E                     	;# 
   906  0F1F                     	;# 
   907  0F20                     	;# 
   908  0F21                     	;# 
   909  0F22                     	;# 
   910  0F23                     	;# 
   911  0F24                     	;# 
   912  0F25                     	;# 
   913  0F26                     	;# 
   914  0F27                     	;# 
   915  0F28                     	;# 
   916  0F29                     	;# 
   917  0F2A                     	;# 
   918  0F2B                     	;# 
   919  0F2C                     	;# 
   920  0F2D                     	;# 
   921  0F2E                     	;# 
   922  0F2F                     	;# 
   923  0F8C                     	;# 
   924  0F8D                     	;# 
   925  0F91                     	;# 
   926  0F95                     	;# 
   927  0F96                     	;# 
   928  0F97                     	;# 
   929  0F9C                     	;# 
   930  0F9D                     	;# 
   931  0F9E                     	;# 
   932  0FE3                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0013                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0093                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  009F                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0111                     	;# 
   992  0112                     	;# 
   993  0113                     	;# 
   994  0114                     	;# 
   995  0115                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  0118                     	;# 
   999  0119                     	;# 
  1000  011D                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0194                     	;# 
  1010  0195                     	;# 
  1011  0196                     	;# 
  1012  0199                     	;# 
  1013  019A                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019C                     	;# 
  1017  019D                     	;# 
  1018  019E                     	;# 
  1019  019F                     	;# 
  1020  020C                     	;# 
  1021  020D                     	;# 
  1022  0211                     	;# 
  1023  0211                     	;# 
  1024  0212                     	;# 
  1025  0212                     	;# 
  1026  0213                     	;# 
  1027  0213                     	;# 
  1028  0214                     	;# 
  1029  0214                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0215                     	;# 
  1033  0216                     	;# 
  1034  0216                     	;# 
  1035  0217                     	;# 
  1036  0217                     	;# 
  1037  0391                     	;# 
  1038  0392                     	;# 
  1039  0393                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0498                     	;# 
  1044  0498                     	;# 
  1045  0499                     	;# 
  1046  049A                     	;# 
  1047  049B                     	;# 
  1048  049B                     	;# 
  1049  049C                     	;# 
  1050  049E                     	;# 
  1051  049F                     	;# 
  1052  0611                     	;# 
  1053  0612                     	;# 
  1054  0613                     	;# 
  1055  0613                     	;# 
  1056  0614                     	;# 
  1057  0615                     	;# 
  1058  0616                     	;# 
  1059  0616                     	;# 
  1060  0617                     	;# 
  1061  0618                     	;# 
  1062  0619                     	;# 
  1063  0619                     	;# 
  1064  061A                     	;# 
  1065  061B                     	;# 
  1066  061C                     	;# 
  1067  061C                     	;# 
  1068  0691                     	;# 
  1069  0692                     	;# 
  1070  0693                     	;# 
  1071  0694                     	;# 
  1072  0695                     	;# 
  1073  0F0F                     	;# 
  1074  0F10                     	;# 
  1075  0F11                     	;# 
  1076  0F12                     	;# 
  1077  0F13                     	;# 
  1078  0F14                     	;# 
  1079  0F15                     	;# 
  1080  0F16                     	;# 
  1081  0F17                     	;# 
  1082  0F18                     	;# 
  1083  0F19                     	;# 
  1084  0F1A                     	;# 
  1085  0F1B                     	;# 
  1086  0F1C                     	;# 
  1087  0F1D                     	;# 
  1088  0F1E                     	;# 
  1089  0F1F                     	;# 
  1090  0F20                     	;# 
  1091  0F21                     	;# 
  1092  0F22                     	;# 
  1093  0F23                     	;# 
  1094  0F24                     	;# 
  1095  0F25                     	;# 
  1096  0F26                     	;# 
  1097  0F27                     	;# 
  1098  0F28                     	;# 
  1099  0F29                     	;# 
  1100  0F2A                     	;# 
  1101  0F2B                     	;# 
  1102  0F2C                     	;# 
  1103  0F2D                     	;# 
  1104  0F2E                     	;# 
  1105  0F2F                     	;# 
  1106  0F8C                     	;# 
  1107  0F8D                     	;# 
  1108  0F91                     	;# 
  1109  0F95                     	;# 
  1110  0F96                     	;# 
  1111  0F97                     	;# 
  1112  0F9C                     	;# 
  1113  0F9D                     	;# 
  1114  0F9E                     	;# 
  1115  0FE3                     	;# 
  1116  0FE4                     	;# 
  1117  0FE5                     	;# 
  1118  0FE6                     	;# 
  1119  0FE7                     	;# 
  1120  0FE8                     	;# 
  1121  0FE9                     	;# 
  1122  0FEA                     	;# 
  1123  0FEB                     	;# 
  1124  0FED                     	;# 
  1125  0FEE                     	;# 
  1126  0FEF                     	;# 
  1127  0000                     	;# 
  1128  0001                     	;# 
  1129  0002                     	;# 
  1130  0003                     	;# 
  1131  0004                     	;# 
  1132  0005                     	;# 
  1133  0006                     	;# 
  1134  0007                     	;# 
  1135  0008                     	;# 
  1136  0009                     	;# 
  1137  000A                     	;# 
  1138  000B                     	;# 
  1139  000C                     	;# 
  1140  000D                     	;# 
  1141  000E                     	;# 
  1142  0011                     	;# 
  1143  0012                     	;# 
  1144  0013                     	;# 
  1145  0015                     	;# 
  1146  0016                     	;# 
  1147  0016                     	;# 
  1148  0017                     	;# 
  1149  0018                     	;# 
  1150  0019                     	;# 
  1151  001A                     	;# 
  1152  001B                     	;# 
  1153  001C                     	;# 
  1154  008C                     	;# 
  1155  008D                     	;# 
  1156  008E                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0095                     	;# 
  1161  0096                     	;# 
  1162  0097                     	;# 
  1163  0099                     	;# 
  1164  009A                     	;# 
  1165  009B                     	;# 
  1166  009B                     	;# 
  1167  009C                     	;# 
  1168  009D                     	;# 
  1169  009E                     	;# 
  1170  009F                     	;# 
  1171  010C                     	;# 
  1172  010D                     	;# 
  1173  010E                     	;# 
  1174  0111                     	;# 
  1175  0112                     	;# 
  1176  0113                     	;# 
  1177  0114                     	;# 
  1178  0115                     	;# 
  1179  0116                     	;# 
  1180  0117                     	;# 
  1181  0118                     	;# 
  1182  0119                     	;# 
  1183  011D                     	;# 
  1184  018C                     	;# 
  1185  018D                     	;# 
  1186  018E                     	;# 
  1187  0191                     	;# 
  1188  0191                     	;# 
  1189  0192                     	;# 
  1190  0193                     	;# 
  1191  0193                     	;# 
  1192  0194                     	;# 
  1193  0195                     	;# 
  1194  0196                     	;# 
  1195  0199                     	;# 
  1196  019A                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019D                     	;# 
  1201  019E                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020D                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0391                     	;# 
  1221  0392                     	;# 
  1222  0393                     	;# 
  1223  0394                     	;# 
  1224  0395                     	;# 
  1225  0396                     	;# 
  1226  0498                     	;# 
  1227  0498                     	;# 
  1228  0499                     	;# 
  1229  049A                     	;# 
  1230  049B                     	;# 
  1231  049B                     	;# 
  1232  049C                     	;# 
  1233  049E                     	;# 
  1234  049F                     	;# 
  1235  0611                     	;# 
  1236  0612                     	;# 
  1237  0613                     	;# 
  1238  0613                     	;# 
  1239  0614                     	;# 
  1240  0615                     	;# 
  1241  0616                     	;# 
  1242  0616                     	;# 
  1243  0617                     	;# 
  1244  0618                     	;# 
  1245  0619                     	;# 
  1246  0619                     	;# 
  1247  061A                     	;# 
  1248  061B                     	;# 
  1249  061C                     	;# 
  1250  061C                     	;# 
  1251  0691                     	;# 
  1252  0692                     	;# 
  1253  0693                     	;# 
  1254  0694                     	;# 
  1255  0695                     	;# 
  1256  0F0F                     	;# 
  1257  0F10                     	;# 
  1258  0F11                     	;# 
  1259  0F12                     	;# 
  1260  0F13                     	;# 
  1261  0F14                     	;# 
  1262  0F15                     	;# 
  1263  0F16                     	;# 
  1264  0F17                     	;# 
  1265  0F18                     	;# 
  1266  0F19                     	;# 
  1267  0F1A                     	;# 
  1268  0F1B                     	;# 
  1269  0F1C                     	;# 
  1270  0F1D                     	;# 
  1271  0F1E                     	;# 
  1272  0F1F                     	;# 
  1273  0F20                     	;# 
  1274  0F21                     	;# 
  1275  0F22                     	;# 
  1276  0F23                     	;# 
  1277  0F24                     	;# 
  1278  0F25                     	;# 
  1279  0F26                     	;# 
  1280  0F27                     	;# 
  1281  0F28                     	;# 
  1282  0F29                     	;# 
  1283  0F2A                     	;# 
  1284  0F2B                     	;# 
  1285  0F2C                     	;# 
  1286  0F2D                     	;# 
  1287  0F2E                     	;# 
  1288  0F2F                     	;# 
  1289  0F8C                     	;# 
  1290  0F8D                     	;# 
  1291  0F91                     	;# 
  1292  0F95                     	;# 
  1293  0F96                     	;# 
  1294  0F97                     	;# 
  1295  0F9C                     	;# 
  1296  0F9D                     	;# 
  1297  0F9E                     	;# 
  1298  0FE3                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  0011                     	;# 
  1326  0012                     	;# 
  1327  0013                     	;# 
  1328  0015                     	;# 
  1329  0016                     	;# 
  1330  0016                     	;# 
  1331  0017                     	;# 
  1332  0018                     	;# 
  1333  0019                     	;# 
  1334  001A                     	;# 
  1335  001B                     	;# 
  1336  001C                     	;# 
  1337  008C                     	;# 
  1338  008D                     	;# 
  1339  008E                     	;# 
  1340  0091                     	;# 
  1341  0092                     	;# 
  1342  0093                     	;# 
  1343  0095                     	;# 
  1344  0096                     	;# 
  1345  0097                     	;# 
  1346  0099                     	;# 
  1347  009A                     	;# 
  1348  009B                     	;# 
  1349  009B                     	;# 
  1350  009C                     	;# 
  1351  009D                     	;# 
  1352  009E                     	;# 
  1353  009F                     	;# 
  1354  010C                     	;# 
  1355  010D                     	;# 
  1356  010E                     	;# 
  1357  0111                     	;# 
  1358  0112                     	;# 
  1359  0113                     	;# 
  1360  0114                     	;# 
  1361  0115                     	;# 
  1362  0116                     	;# 
  1363  0117                     	;# 
  1364  0118                     	;# 
  1365  0119                     	;# 
  1366  011D                     	;# 
  1367  018C                     	;# 
  1368  018D                     	;# 
  1369  018E                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0194                     	;# 
  1376  0195                     	;# 
  1377  0196                     	;# 
  1378  0199                     	;# 
  1379  019A                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019C                     	;# 
  1383  019D                     	;# 
  1384  019E                     	;# 
  1385  019F                     	;# 
  1386  020C                     	;# 
  1387  020D                     	;# 
  1388  0211                     	;# 
  1389  0211                     	;# 
  1390  0212                     	;# 
  1391  0212                     	;# 
  1392  0213                     	;# 
  1393  0213                     	;# 
  1394  0214                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0216                     	;# 
  1400  0216                     	;# 
  1401  0217                     	;# 
  1402  0217                     	;# 
  1403  0391                     	;# 
  1404  0392                     	;# 
  1405  0393                     	;# 
  1406  0394                     	;# 
  1407  0395                     	;# 
  1408  0396                     	;# 
  1409  0498                     	;# 
  1410  0498                     	;# 
  1411  0499                     	;# 
  1412  049A                     	;# 
  1413  049B                     	;# 
  1414  049B                     	;# 
  1415  049C                     	;# 
  1416  049E                     	;# 
  1417  049F                     	;# 
  1418  0611                     	;# 
  1419  0612                     	;# 
  1420  0613                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0615                     	;# 
  1424  0616                     	;# 
  1425  0616                     	;# 
  1426  0617                     	;# 
  1427  0618                     	;# 
  1428  0619                     	;# 
  1429  0619                     	;# 
  1430  061A                     	;# 
  1431  061B                     	;# 
  1432  061C                     	;# 
  1433  061C                     	;# 
  1434  0691                     	;# 
  1435  0692                     	;# 
  1436  0693                     	;# 
  1437  0694                     	;# 
  1438  0695                     	;# 
  1439  0F0F                     	;# 
  1440  0F10                     	;# 
  1441  0F11                     	;# 
  1442  0F12                     	;# 
  1443  0F13                     	;# 
  1444  0F14                     	;# 
  1445  0F15                     	;# 
  1446  0F16                     	;# 
  1447  0F17                     	;# 
  1448  0F18                     	;# 
  1449  0F19                     	;# 
  1450  0F1A                     	;# 
  1451  0F1B                     	;# 
  1452  0F1C                     	;# 
  1453  0F1D                     	;# 
  1454  0F1E                     	;# 
  1455  0F1F                     	;# 
  1456  0F20                     	;# 
  1457  0F21                     	;# 
  1458  0F22                     	;# 
  1459  0F23                     	;# 
  1460  0F24                     	;# 
  1461  0F25                     	;# 
  1462  0F26                     	;# 
  1463  0F27                     	;# 
  1464  0F28                     	;# 
  1465  0F29                     	;# 
  1466  0F2A                     	;# 
  1467  0F2B                     	;# 
  1468  0F2C                     	;# 
  1469  0F2D                     	;# 
  1470  0F2E                     	;# 
  1471  0F2F                     	;# 
  1472  0F8C                     	;# 
  1473  0F8D                     	;# 
  1474  0F91                     	;# 
  1475  0F95                     	;# 
  1476  0F96                     	;# 
  1477  0F97                     	;# 
  1478  0F9C                     	;# 
  1479  0F9D                     	;# 
  1480  0F9E                     	;# 
  1481  0FE3                     	;# 
  1482  0FE4                     	;# 
  1483  0FE5                     	;# 
  1484  0FE6                     	;# 
  1485  0FE7                     	;# 
  1486  0FE8                     	;# 
  1487  0FE9                     	;# 
  1488  0FEA                     	;# 
  1489  0FEB                     	;# 
  1490  0FED                     	;# 
  1491  0FEE                     	;# 
  1492  0FEF                     	;# 
  1493  0000                     	;# 
  1494  0001                     	;# 
  1495  0002                     	;# 
  1496  0003                     	;# 
  1497  0004                     	;# 
  1498  0005                     	;# 
  1499  0006                     	;# 
  1500  0007                     	;# 
  1501  0008                     	;# 
  1502  0009                     	;# 
  1503  000A                     	;# 
  1504  000B                     	;# 
  1505  000C                     	;# 
  1506  000D                     	;# 
  1507  000E                     	;# 
  1508  0011                     	;# 
  1509  0012                     	;# 
  1510  0013                     	;# 
  1511  0015                     	;# 
  1512  0016                     	;# 
  1513  0016                     	;# 
  1514  0017                     	;# 
  1515  0018                     	;# 
  1516  0019                     	;# 
  1517  001A                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  008C                     	;# 
  1521  008D                     	;# 
  1522  008E                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0093                     	;# 
  1526  0095                     	;# 
  1527  0096                     	;# 
  1528  0097                     	;# 
  1529  0099                     	;# 
  1530  009A                     	;# 
  1531  009B                     	;# 
  1532  009B                     	;# 
  1533  009C                     	;# 
  1534  009D                     	;# 
  1535  009E                     	;# 
  1536  009F                     	;# 
  1537  010C                     	;# 
  1538  010D                     	;# 
  1539  010E                     	;# 
  1540  0111                     	;# 
  1541  0112                     	;# 
  1542  0113                     	;# 
  1543  0114                     	;# 
  1544  0115                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  0118                     	;# 
  1548  0119                     	;# 
  1549  011D                     	;# 
  1550  018C                     	;# 
  1551  018D                     	;# 
  1552  018E                     	;# 
  1553  0191                     	;# 
  1554  0191                     	;# 
  1555  0192                     	;# 
  1556  0193                     	;# 
  1557  0193                     	;# 
  1558  0194                     	;# 
  1559  0195                     	;# 
  1560  0196                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020C                     	;# 
  1570  020D                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0391                     	;# 
  1587  0392                     	;# 
  1588  0393                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  0498                     	;# 
  1593  0498                     	;# 
  1594  0499                     	;# 
  1595  049A                     	;# 
  1596  049B                     	;# 
  1597  049B                     	;# 
  1598  049C                     	;# 
  1599  049E                     	;# 
  1600  049F                     	;# 
  1601  0611                     	;# 
  1602  0612                     	;# 
  1603  0613                     	;# 
  1604  0613                     	;# 
  1605  0614                     	;# 
  1606  0615                     	;# 
  1607  0616                     	;# 
  1608  0616                     	;# 
  1609  0617                     	;# 
  1610  0618                     	;# 
  1611  0619                     	;# 
  1612  0619                     	;# 
  1613  061A                     	;# 
  1614  061B                     	;# 
  1615  061C                     	;# 
  1616  061C                     	;# 
  1617  0691                     	;# 
  1618  0692                     	;# 
  1619  0693                     	;# 
  1620  0694                     	;# 
  1621  0695                     	;# 
  1622  0F0F                     	;# 
  1623  0F10                     	;# 
  1624  0F11                     	;# 
  1625  0F12                     	;# 
  1626  0F13                     	;# 
  1627  0F14                     	;# 
  1628  0F15                     	;# 
  1629  0F16                     	;# 
  1630  0F17                     	;# 
  1631  0F18                     	;# 
  1632  0F19                     	;# 
  1633  0F1A                     	;# 
  1634  0F1B                     	;# 
  1635  0F1C                     	;# 
  1636  0F1D                     	;# 
  1637  0F1E                     	;# 
  1638  0F1F                     	;# 
  1639  0F20                     	;# 
  1640  0F21                     	;# 
  1641  0F22                     	;# 
  1642  0F23                     	;# 
  1643  0F24                     	;# 
  1644  0F25                     	;# 
  1645  0F26                     	;# 
  1646  0F27                     	;# 
  1647  0F28                     	;# 
  1648  0F29                     	;# 
  1649  0F2A                     	;# 
  1650  0F2B                     	;# 
  1651  0F2C                     	;# 
  1652  0F2D                     	;# 
  1653  0F2E                     	;# 
  1654  0F2F                     	;# 
  1655  0F8C                     	;# 
  1656  0F8D                     	;# 
  1657  0F91                     	;# 
  1658  0F95                     	;# 
  1659  0F96                     	;# 
  1660  0F97                     	;# 
  1661  0F9C                     	;# 
  1662  0F9D                     	;# 
  1663  0F9E                     	;# 
  1664  0FE3                     	;# 
  1665  0FE4                     	;# 
  1666  0FE5                     	;# 
  1667  0FE6                     	;# 
  1668  0FE7                     	;# 
  1669  0FE8                     	;# 
  1670  0FE9                     	;# 
  1671  0FEA                     	;# 
  1672  0FEB                     	;# 
  1673  0FED                     	;# 
  1674  0FEE                     	;# 
  1675  0FEF                     	;# 
  1676  0000                     	;# 
  1677  0001                     	;# 
  1678  0002                     	;# 
  1679  0003                     	;# 
  1680  0004                     	;# 
  1681  0005                     	;# 
  1682  0006                     	;# 
  1683  0007                     	;# 
  1684  0008                     	;# 
  1685  0009                     	;# 
  1686  000A                     	;# 
  1687  000B                     	;# 
  1688  000C                     	;# 
  1689  000D                     	;# 
  1690  000E                     	;# 
  1691  0011                     	;# 
  1692  0012                     	;# 
  1693  0013                     	;# 
  1694  0015                     	;# 
  1695  0016                     	;# 
  1696  0016                     	;# 
  1697  0017                     	;# 
  1698  0018                     	;# 
  1699  0019                     	;# 
  1700  001A                     	;# 
  1701  001B                     	;# 
  1702  001C                     	;# 
  1703  008C                     	;# 
  1704  008D                     	;# 
  1705  008E                     	;# 
  1706  0091                     	;# 
  1707  0092                     	;# 
  1708  0093                     	;# 
  1709  0095                     	;# 
  1710  0096                     	;# 
  1711  0097                     	;# 
  1712  0099                     	;# 
  1713  009A                     	;# 
  1714  009B                     	;# 
  1715  009B                     	;# 
  1716  009C                     	;# 
  1717  009D                     	;# 
  1718  009E                     	;# 
  1719  009F                     	;# 
  1720  010C                     	;# 
  1721  010D                     	;# 
  1722  010E                     	;# 
  1723  0111                     	;# 
  1724  0112                     	;# 
  1725  0113                     	;# 
  1726  0114                     	;# 
  1727  0115                     	;# 
  1728  0116                     	;# 
  1729  0117                     	;# 
  1730  0118                     	;# 
  1731  0119                     	;# 
  1732  011D                     	;# 
  1733  018C                     	;# 
  1734  018D                     	;# 
  1735  018E                     	;# 
  1736  0191                     	;# 
  1737  0191                     	;# 
  1738  0192                     	;# 
  1739  0193                     	;# 
  1740  0193                     	;# 
  1741  0194                     	;# 
  1742  0195                     	;# 
  1743  0196                     	;# 
  1744  0199                     	;# 
  1745  019A                     	;# 
  1746  019B                     	;# 
  1747  019B                     	;# 
  1748  019C                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019F                     	;# 
  1752  020C                     	;# 
  1753  020D                     	;# 
  1754  0211                     	;# 
  1755  0211                     	;# 
  1756  0212                     	;# 
  1757  0212                     	;# 
  1758  0213                     	;# 
  1759  0213                     	;# 
  1760  0214                     	;# 
  1761  0214                     	;# 
  1762  0215                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0216                     	;# 
  1766  0216                     	;# 
  1767  0217                     	;# 
  1768  0217                     	;# 
  1769  0391                     	;# 
  1770  0392                     	;# 
  1771  0393                     	;# 
  1772  0394                     	;# 
  1773  0395                     	;# 
  1774  0396                     	;# 
  1775  0498                     	;# 
  1776  0498                     	;# 
  1777  0499                     	;# 
  1778  049A                     	;# 
  1779  049B                     	;# 
  1780  049B                     	;# 
  1781  049C                     	;# 
  1782  049E                     	;# 
  1783  049F                     	;# 
  1784  0611                     	;# 
  1785  0612                     	;# 
  1786  0613                     	;# 
  1787  0613                     	;# 
  1788  0614                     	;# 
  1789  0615                     	;# 
  1790  0616                     	;# 
  1791  0616                     	;# 
  1792  0617                     	;# 
  1793  0618                     	;# 
  1794  0619                     	;# 
  1795  0619                     	;# 
  1796  061A                     	;# 
  1797  061B                     	;# 
  1798  061C                     	;# 
  1799  061C                     	;# 
  1800  0691                     	;# 
  1801  0692                     	;# 
  1802  0693                     	;# 
  1803  0694                     	;# 
  1804  0695                     	;# 
  1805  0F0F                     	;# 
  1806  0F10                     	;# 
  1807  0F11                     	;# 
  1808  0F12                     	;# 
  1809  0F13                     	;# 
  1810  0F14                     	;# 
  1811  0F15                     	;# 
  1812  0F16                     	;# 
  1813  0F17                     	;# 
  1814  0F18                     	;# 
  1815  0F19                     	;# 
  1816  0F1A                     	;# 
  1817  0F1B                     	;# 
  1818  0F1C                     	;# 
  1819  0F1D                     	;# 
  1820  0F1E                     	;# 
  1821  0F1F                     	;# 
  1822  0F20                     	;# 
  1823  0F21                     	;# 
  1824  0F22                     	;# 
  1825  0F23                     	;# 
  1826  0F24                     	;# 
  1827  0F25                     	;# 
  1828  0F26                     	;# 
  1829  0F27                     	;# 
  1830  0F28                     	;# 
  1831  0F29                     	;# 
  1832  0F2A                     	;# 
  1833  0F2B                     	;# 
  1834  0F2C                     	;# 
  1835  0F2D                     	;# 
  1836  0F2E                     	;# 
  1837  0F2F                     	;# 
  1838  0F8C                     	;# 
  1839  0F8D                     	;# 
  1840  0F91                     	;# 
  1841  0F95                     	;# 
  1842  0F96                     	;# 
  1843  0F97                     	;# 
  1844  0F9C                     	;# 
  1845  0F9D                     	;# 
  1846  0F9E                     	;# 
  1847  0FE3                     	;# 
  1848  0FE4                     	;# 
  1849  0FE5                     	;# 
  1850  0FE6                     	;# 
  1851  0FE7                     	;# 
  1852  0FE8                     	;# 
  1853  0FE9                     	;# 
  1854  0FEA                     	;# 
  1855  0FEB                     	;# 
  1856  0FED                     	;# 
  1857  0FEE                     	;# 
  1858  0FEF                     	;# 
  1859  0000                     	;# 
  1860  0001                     	;# 
  1861  0002                     	;# 
  1862  0003                     	;# 
  1863  0004                     	;# 
  1864  0005                     	;# 
  1865  0006                     	;# 
  1866  0007                     	;# 
  1867  0008                     	;# 
  1868  0009                     	;# 
  1869  000A                     	;# 
  1870  000B                     	;# 
  1871  000C                     	;# 
  1872  000D                     	;# 
  1873  000E                     	;# 
  1874  0011                     	;# 
  1875  0012                     	;# 
  1876  0013                     	;# 
  1877  0015                     	;# 
  1878  0016                     	;# 
  1879  0016                     	;# 
  1880  0017                     	;# 
  1881  0018                     	;# 
  1882  0019                     	;# 
  1883  001A                     	;# 
  1884  001B                     	;# 
  1885  001C                     	;# 
  1886  008C                     	;# 
  1887  008D                     	;# 
  1888  008E                     	;# 
  1889  0091                     	;# 
  1890  0092                     	;# 
  1891  0093                     	;# 
  1892  0095                     	;# 
  1893  0096                     	;# 
  1894  0097                     	;# 
  1895  0099                     	;# 
  1896  009A                     	;# 
  1897  009B                     	;# 
  1898  009B                     	;# 
  1899  009C                     	;# 
  1900  009D                     	;# 
  1901  009E                     	;# 
  1902  009F                     	;# 
  1903  010C                     	;# 
  1904  010D                     	;# 
  1905  010E                     	;# 
  1906  0111                     	;# 
  1907  0112                     	;# 
  1908  0113                     	;# 
  1909  0114                     	;# 
  1910  0115                     	;# 
  1911  0116                     	;# 
  1912  0117                     	;# 
  1913  0118                     	;# 
  1914  0119                     	;# 
  1915  011D                     	;# 
  1916  018C                     	;# 
  1917  018D                     	;# 
  1918  018E                     	;# 
  1919  0191                     	;# 
  1920  0191                     	;# 
  1921  0192                     	;# 
  1922  0193                     	;# 
  1923  0193                     	;# 
  1924  0194                     	;# 
  1925  0195                     	;# 
  1926  0196                     	;# 
  1927  0199                     	;# 
  1928  019A                     	;# 
  1929  019B                     	;# 
  1930  019B                     	;# 
  1931  019C                     	;# 
  1932  019D                     	;# 
  1933  019E                     	;# 
  1934  019F                     	;# 
  1935  020C                     	;# 
  1936  020D                     	;# 
  1937  0211                     	;# 
  1938  0211                     	;# 
  1939  0212                     	;# 
  1940  0212                     	;# 
  1941  0213                     	;# 
  1942  0213                     	;# 
  1943  0214                     	;# 
  1944  0214                     	;# 
  1945  0215                     	;# 
  1946  0215                     	;# 
  1947  0215                     	;# 
  1948  0216                     	;# 
  1949  0216                     	;# 
  1950  0217                     	;# 
  1951  0217                     	;# 
  1952  0391                     	;# 
  1953  0392                     	;# 
  1954  0393                     	;# 
  1955  0394                     	;# 
  1956  0395                     	;# 
  1957  0396                     	;# 
  1958  0498                     	;# 
  1959  0498                     	;# 
  1960  0499                     	;# 
  1961  049A                     	;# 
  1962  049B                     	;# 
  1963  049B                     	;# 
  1964  049C                     	;# 
  1965  049E                     	;# 
  1966  049F                     	;# 
  1967  0611                     	;# 
  1968  0612                     	;# 
  1969  0613                     	;# 
  1970  0613                     	;# 
  1971  0614                     	;# 
  1972  0615                     	;# 
  1973  0616                     	;# 
  1974  0616                     	;# 
  1975  0617                     	;# 
  1976  0618                     	;# 
  1977  0619                     	;# 
  1978  0619                     	;# 
  1979  061A                     	;# 
  1980  061B                     	;# 
  1981  061C                     	;# 
  1982  061C                     	;# 
  1983  0691                     	;# 
  1984  0692                     	;# 
  1985  0693                     	;# 
  1986  0694                     	;# 
  1987  0695                     	;# 
  1988  0F0F                     	;# 
  1989  0F10                     	;# 
  1990  0F11                     	;# 
  1991  0F12                     	;# 
  1992  0F13                     	;# 
  1993  0F14                     	;# 
  1994  0F15                     	;# 
  1995  0F16                     	;# 
  1996  0F17                     	;# 
  1997  0F18                     	;# 
  1998  0F19                     	;# 
  1999  0F1A                     	;# 
  2000  0F1B                     	;# 
  2001  0F1C                     	;# 
  2002  0F1D                     	;# 
  2003  0F1E                     	;# 
  2004  0F1F                     	;# 
  2005  0F20                     	;# 
  2006  0F21                     	;# 
  2007  0F22                     	;# 
  2008  0F23                     	;# 
  2009  0F24                     	;# 
  2010  0F25                     	;# 
  2011  0F26                     	;# 
  2012  0F27                     	;# 
  2013  0F28                     	;# 
  2014  0F29                     	;# 
  2015  0F2A                     	;# 
  2016  0F2B                     	;# 
  2017  0F2C                     	;# 
  2018  0F2D                     	;# 
  2019  0F2E                     	;# 
  2020  0F2F                     	;# 
  2021  0F8C                     	;# 
  2022  0F8D                     	;# 
  2023  0F91                     	;# 
  2024  0F95                     	;# 
  2025  0F96                     	;# 
  2026  0F97                     	;# 
  2027  0F9C                     	;# 
  2028  0F9D                     	;# 
  2029  0F9E                     	;# 
  2030  0FE3                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042  0000                     	;# 
  2043  0001                     	;# 
  2044  0002                     	;# 
  2045  0003                     	;# 
  2046  0004                     	;# 
  2047  0005                     	;# 
  2048  0006                     	;# 
  2049  0007                     	;# 
  2050  0008                     	;# 
  2051  0009                     	;# 
  2052  000A                     	;# 
  2053  000B                     	;# 
  2054  000C                     	;# 
  2055  000D                     	;# 
  2056  000E                     	;# 
  2057  0011                     	;# 
  2058  0012                     	;# 
  2059  0013                     	;# 
  2060  0015                     	;# 
  2061  0016                     	;# 
  2062  0016                     	;# 
  2063  0017                     	;# 
  2064  0018                     	;# 
  2065  0019                     	;# 
  2066  001A                     	;# 
  2067  001B                     	;# 
  2068  001C                     	;# 
  2069  008C                     	;# 
  2070  008D                     	;# 
  2071  008E                     	;# 
  2072  0091                     	;# 
  2073  0092                     	;# 
  2074  0093                     	;# 
  2075  0095                     	;# 
  2076  0096                     	;# 
  2077  0097                     	;# 
  2078  0099                     	;# 
  2079  009A                     	;# 
  2080  009B                     	;# 
  2081  009B                     	;# 
  2082  009C                     	;# 
  2083  009D                     	;# 
  2084  009E                     	;# 
  2085  009F                     	;# 
  2086  010C                     	;# 
  2087  010D                     	;# 
  2088  010E                     	;# 
  2089  0111                     	;# 
  2090  0112                     	;# 
  2091  0113                     	;# 
  2092  0114                     	;# 
  2093  0115                     	;# 
  2094  0116                     	;# 
  2095  0117                     	;# 
  2096  0118                     	;# 
  2097  0119                     	;# 
  2098  011D                     	;# 
  2099  018C                     	;# 
  2100  018D                     	;# 
  2101  018E                     	;# 
  2102  0191                     	;# 
  2103  0191                     	;# 
  2104  0192                     	;# 
  2105  0193                     	;# 
  2106  0193                     	;# 
  2107  0194                     	;# 
  2108  0195                     	;# 
  2109  0196                     	;# 
  2110  0199                     	;# 
  2111  019A                     	;# 
  2112  019B                     	;# 
  2113  019B                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020C                     	;# 
  2119  020D                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0391                     	;# 
  2136  0392                     	;# 
  2137  0393                     	;# 
  2138  0394                     	;# 
  2139  0395                     	;# 
  2140  0396                     	;# 
  2141  0498                     	;# 
  2142  0498                     	;# 
  2143  0499                     	;# 
  2144  049A                     	;# 
  2145  049B                     	;# 
  2146  049B                     	;# 
  2147  049C                     	;# 
  2148  049E                     	;# 
  2149  049F                     	;# 
  2150  0611                     	;# 
  2151  0612                     	;# 
  2152  0613                     	;# 
  2153  0613                     	;# 
  2154  0614                     	;# 
  2155  0615                     	;# 
  2156  0616                     	;# 
  2157  0616                     	;# 
  2158  0617                     	;# 
  2159  0618                     	;# 
  2160  0619                     	;# 
  2161  0619                     	;# 
  2162  061A                     	;# 
  2163  061B                     	;# 
  2164  061C                     	;# 
  2165  061C                     	;# 
  2166  0691                     	;# 
  2167  0692                     	;# 
  2168  0693                     	;# 
  2169  0694                     	;# 
  2170  0695                     	;# 
  2171  0F0F                     	;# 
  2172  0F10                     	;# 
  2173  0F11                     	;# 
  2174  0F12                     	;# 
  2175  0F13                     	;# 
  2176  0F14                     	;# 
  2177  0F15                     	;# 
  2178  0F16                     	;# 
  2179  0F17                     	;# 
  2180  0F18                     	;# 
  2181  0F19                     	;# 
  2182  0F1A                     	;# 
  2183  0F1B                     	;# 
  2184  0F1C                     	;# 
  2185  0F1D                     	;# 
  2186  0F1E                     	;# 
  2187  0F1F                     	;# 
  2188  0F20                     	;# 
  2189  0F21                     	;# 
  2190  0F22                     	;# 
  2191  0F23                     	;# 
  2192  0F24                     	;# 
  2193  0F25                     	;# 
  2194  0F26                     	;# 
  2195  0F27                     	;# 
  2196  0F28                     	;# 
  2197  0F29                     	;# 
  2198  0F2A                     	;# 
  2199  0F2B                     	;# 
  2200  0F2C                     	;# 
  2201  0F2D                     	;# 
  2202  0F2E                     	;# 
  2203  0F2F                     	;# 
  2204  0F8C                     	;# 
  2205  0F8D                     	;# 
  2206  0F91                     	;# 
  2207  0F95                     	;# 
  2208  0F96                     	;# 
  2209  0F97                     	;# 
  2210  0F9C                     	;# 
  2211  0F9D                     	;# 
  2212  0F9E                     	;# 
  2213  0FE3                     	;# 
  2214  0FE4                     	;# 
  2215  0FE5                     	;# 
  2216  0FE6                     	;# 
  2217  0FE7                     	;# 
  2218  0FE8                     	;# 
  2219  0FE9                     	;# 
  2220  0FEA                     	;# 
  2221  0FEB                     	;# 
  2222  0FED                     	;# 
  2223  0FEE                     	;# 
  2224  0FEF                     	;# 
  2225  0000                     	;# 
  2226  0001                     	;# 
  2227  0002                     	;# 
  2228  0003                     	;# 
  2229  0004                     	;# 
  2230  0005                     	;# 
  2231  0006                     	;# 
  2232  0007                     	;# 
  2233  0008                     	;# 
  2234  0009                     	;# 
  2235  000A                     	;# 
  2236  000B                     	;# 
  2237  000C                     	;# 
  2238  000D                     	;# 
  2239  000E                     	;# 
  2240  0011                     	;# 
  2241  0012                     	;# 
  2242  0013                     	;# 
  2243  0015                     	;# 
  2244  0016                     	;# 
  2245  0016                     	;# 
  2246  0017                     	;# 
  2247  0018                     	;# 
  2248  0019                     	;# 
  2249  001A                     	;# 
  2250  001B                     	;# 
  2251  001C                     	;# 
  2252  008C                     	;# 
  2253  008D                     	;# 
  2254  008E                     	;# 
  2255  0091                     	;# 
  2256  0092                     	;# 
  2257  0093                     	;# 
  2258  0095                     	;# 
  2259  0096                     	;# 
  2260  0097                     	;# 
  2261  0099                     	;# 
  2262  009A                     	;# 
  2263  009B                     	;# 
  2264  009B                     	;# 
  2265  009C                     	;# 
  2266  009D                     	;# 
  2267  009E                     	;# 
  2268  009F                     	;# 
  2269  010C                     	;# 
  2270  010D                     	;# 
  2271  010E                     	;# 
  2272  0111                     	;# 
  2273  0112                     	;# 
  2274  0113                     	;# 
  2275  0114                     	;# 
  2276  0115                     	;# 
  2277  0116                     	;# 
  2278  0117                     	;# 
  2279  0118                     	;# 
  2280  0119                     	;# 
  2281  011D                     	;# 
  2282  018C                     	;# 
  2283  018D                     	;# 
  2284  018E                     	;# 
  2285  0191                     	;# 
  2286  0191                     	;# 
  2287  0192                     	;# 
  2288  0193                     	;# 
  2289  0193                     	;# 
  2290  0194                     	;# 
  2291  0195                     	;# 
  2292  0196                     	;# 
  2293  0199                     	;# 
  2294  019A                     	;# 
  2295  019B                     	;# 
  2296  019B                     	;# 
  2297  019C                     	;# 
  2298  019D                     	;# 
  2299  019E                     	;# 
  2300  019F                     	;# 
  2301  020C                     	;# 
  2302  020D                     	;# 
  2303  0211                     	;# 
  2304  0211                     	;# 
  2305  0212                     	;# 
  2306  0212                     	;# 
  2307  0213                     	;# 
  2308  0213                     	;# 
  2309  0214                     	;# 
  2310  0214                     	;# 
  2311  0215                     	;# 
  2312  0215                     	;# 
  2313  0215                     	;# 
  2314  0216                     	;# 
  2315  0216                     	;# 
  2316  0217                     	;# 
  2317  0217                     	;# 
  2318  0391                     	;# 
  2319  0392                     	;# 
  2320  0393                     	;# 
  2321  0394                     	;# 
  2322  0395                     	;# 
  2323  0396                     	;# 
  2324  0498                     	;# 
  2325  0498                     	;# 
  2326  0499                     	;# 
  2327  049A                     	;# 
  2328  049B                     	;# 
  2329  049B                     	;# 
  2330  049C                     	;# 
  2331  049E                     	;# 
  2332  049F                     	;# 
  2333  0611                     	;# 
  2334  0612                     	;# 
  2335  0613                     	;# 
  2336  0613                     	;# 
  2337  0614                     	;# 
  2338  0615                     	;# 
  2339  0616                     	;# 
  2340  0616                     	;# 
  2341  0617                     	;# 
  2342  0618                     	;# 
  2343  0619                     	;# 
  2344  0619                     	;# 
  2345  061A                     	;# 
  2346  061B                     	;# 
  2347  061C                     	;# 
  2348  061C                     	;# 
  2349  0691                     	;# 
  2350  0692                     	;# 
  2351  0693                     	;# 
  2352  0694                     	;# 
  2353  0695                     	;# 
  2354  0F0F                     	;# 
  2355  0F10                     	;# 
  2356  0F11                     	;# 
  2357  0F12                     	;# 
  2358  0F13                     	;# 
  2359  0F14                     	;# 
  2360  0F15                     	;# 
  2361  0F16                     	;# 
  2362  0F17                     	;# 
  2363  0F18                     	;# 
  2364  0F19                     	;# 
  2365  0F1A                     	;# 
  2366  0F1B                     	;# 
  2367  0F1C                     	;# 
  2368  0F1D                     	;# 
  2369  0F1E                     	;# 
  2370  0F1F                     	;# 
  2371  0F20                     	;# 
  2372  0F21                     	;# 
  2373  0F22                     	;# 
  2374  0F23                     	;# 
  2375  0F24                     	;# 
  2376  0F25                     	;# 
  2377  0F26                     	;# 
  2378  0F27                     	;# 
  2379  0F28                     	;# 
  2380  0F29                     	;# 
  2381  0F2A                     	;# 
  2382  0F2B                     	;# 
  2383  0F2C                     	;# 
  2384  0F2D                     	;# 
  2385  0F2E                     	;# 
  2386  0F2F                     	;# 
  2387  0F8C                     	;# 
  2388  0F8D                     	;# 
  2389  0F91                     	;# 
  2390  0F95                     	;# 
  2391  0F96                     	;# 
  2392  0F97                     	;# 
  2393  0F9C                     	;# 
  2394  0F9D                     	;# 
  2395  0F9E                     	;# 
  2396  0FE3                     	;# 
  2397  0FE4                     	;# 
  2398  0FE5                     	;# 
  2399  0FE6                     	;# 
  2400  0FE7                     	;# 
  2401  0FE8                     	;# 
  2402  0FE9                     	;# 
  2403  0FEA                     	;# 
  2404  0FEB                     	;# 
  2405  0FED                     	;# 
  2406  0FEE                     	;# 
  2407  0FEF                     	;# 
  2408  0000                     	;# 
  2409  0001                     	;# 
  2410  0002                     	;# 
  2411  0003                     	;# 
  2412  0004                     	;# 
  2413  0005                     	;# 
  2414  0006                     	;# 
  2415  0007                     	;# 
  2416  0008                     	;# 
  2417  0009                     	;# 
  2418  000A                     	;# 
  2419  000B                     	;# 
  2420  000C                     	;# 
  2421  000D                     	;# 
  2422  000E                     	;# 
  2423  0011                     	;# 
  2424  0012                     	;# 
  2425  0013                     	;# 
  2426  0015                     	;# 
  2427  0016                     	;# 
  2428  0016                     	;# 
  2429  0017                     	;# 
  2430  0018                     	;# 
  2431  0019                     	;# 
  2432  001A                     	;# 
  2433  001B                     	;# 
  2434  001C                     	;# 
  2435  008C                     	;# 
  2436  008D                     	;# 
  2437  008E                     	;# 
  2438  0091                     	;# 
  2439  0092                     	;# 
  2440  0093                     	;# 
  2441  0095                     	;# 
  2442  0096                     	;# 
  2443  0097                     	;# 
  2444  0099                     	;# 
  2445  009A                     	;# 
  2446  009B                     	;# 
  2447  009B                     	;# 
  2448  009C                     	;# 
  2449  009D                     	;# 
  2450  009E                     	;# 
  2451  009F                     	;# 
  2452  010C                     	;# 
  2453  010D                     	;# 
  2454  010E                     	;# 
  2455  0111                     	;# 
  2456  0112                     	;# 
  2457  0113                     	;# 
  2458  0114                     	;# 
  2459  0115                     	;# 
  2460  0116                     	;# 
  2461  0117                     	;# 
  2462  0118                     	;# 
  2463  0119                     	;# 
  2464  011D                     	;# 
  2465  018C                     	;# 
  2466  018D                     	;# 
  2467  018E                     	;# 
  2468  0191                     	;# 
  2469  0191                     	;# 
  2470  0192                     	;# 
  2471  0193                     	;# 
  2472  0193                     	;# 
  2473  0194                     	;# 
  2474  0195                     	;# 
  2475  0196                     	;# 
  2476  0199                     	;# 
  2477  019A                     	;# 
  2478  019B                     	;# 
  2479  019B                     	;# 
  2480  019C                     	;# 
  2481  019D                     	;# 
  2482  019E                     	;# 
  2483  019F                     	;# 
  2484  020C                     	;# 
  2485  020D                     	;# 
  2486  0211                     	;# 
  2487  0211                     	;# 
  2488  0212                     	;# 
  2489  0212                     	;# 
  2490  0213                     	;# 
  2491  0213                     	;# 
  2492  0214                     	;# 
  2493  0214                     	;# 
  2494  0215                     	;# 
  2495  0215                     	;# 
  2496  0215                     	;# 
  2497  0216                     	;# 
  2498  0216                     	;# 
  2499  0217                     	;# 
  2500  0217                     	;# 
  2501  0391                     	;# 
  2502  0392                     	;# 
  2503  0393                     	;# 
  2504  0394                     	;# 
  2505  0395                     	;# 
  2506  0396                     	;# 
  2507  0498                     	;# 
  2508  0498                     	;# 
  2509  0499                     	;# 
  2510  049A                     	;# 
  2511  049B                     	;# 
  2512  049B                     	;# 
  2513  049C                     	;# 
  2514  049E                     	;# 
  2515  049F                     	;# 
  2516  0611                     	;# 
  2517  0612                     	;# 
  2518  0613                     	;# 
  2519  0613                     	;# 
  2520  0614                     	;# 
  2521  0615                     	;# 
  2522  0616                     	;# 
  2523  0616                     	;# 
  2524  0617                     	;# 
  2525  0618                     	;# 
  2526  0619                     	;# 
  2527  0619                     	;# 
  2528  061A                     	;# 
  2529  061B                     	;# 
  2530  061C                     	;# 
  2531  061C                     	;# 
  2532  0691                     	;# 
  2533  0692                     	;# 
  2534  0693                     	;# 
  2535  0694                     	;# 
  2536  0695                     	;# 
  2537  0F0F                     	;# 
  2538  0F10                     	;# 
  2539  0F11                     	;# 
  2540  0F12                     	;# 
  2541  0F13                     	;# 
  2542  0F14                     	;# 
  2543  0F15                     	;# 
  2544  0F16                     	;# 
  2545  0F17                     	;# 
  2546  0F18                     	;# 
  2547  0F19                     	;# 
  2548  0F1A                     	;# 
  2549  0F1B                     	;# 
  2550  0F1C                     	;# 
  2551  0F1D                     	;# 
  2552  0F1E                     	;# 
  2553  0F1F                     	;# 
  2554  0F20                     	;# 
  2555  0F21                     	;# 
  2556  0F22                     	;# 
  2557  0F23                     	;# 
  2558  0F24                     	;# 
  2559  0F25                     	;# 
  2560  0F26                     	;# 
  2561  0F27                     	;# 
  2562  0F28                     	;# 
  2563  0F29                     	;# 
  2564  0F2A                     	;# 
  2565  0F2B                     	;# 
  2566  0F2C                     	;# 
  2567  0F2D                     	;# 
  2568  0F2E                     	;# 
  2569  0F2F                     	;# 
  2570  0F8C                     	;# 
  2571  0F8D                     	;# 
  2572  0F91                     	;# 
  2573  0F95                     	;# 
  2574  0F96                     	;# 
  2575  0F97                     	;# 
  2576  0F9C                     	;# 
  2577  0F9D                     	;# 
  2578  0F9E                     	;# 
  2579  0FE3                     	;# 
  2580  0FE4                     	;# 
  2581  0FE5                     	;# 
  2582  0FE6                     	;# 
  2583  0FE7                     	;# 
  2584  0FE8                     	;# 
  2585  0FE9                     	;# 
  2586  0FEA                     	;# 
  2587  0FEB                     	;# 
  2588  0FED                     	;# 
  2589  0FEE                     	;# 
  2590  0FEF                     	;# 
  2591  0000                     	;# 
  2592  0001                     	;# 
  2593  0002                     	;# 
  2594  0003                     	;# 
  2595  0004                     	;# 
  2596  0005                     	;# 
  2597  0006                     	;# 
  2598  0007                     	;# 
  2599  0008                     	;# 
  2600  0009                     	;# 
  2601  000A                     	;# 
  2602  000B                     	;# 
  2603  000C                     	;# 
  2604  000D                     	;# 
  2605  000E                     	;# 
  2606  0011                     	;# 
  2607  0012                     	;# 
  2608  0013                     	;# 
  2609  0015                     	;# 
  2610  0016                     	;# 
  2611  0016                     	;# 
  2612  0017                     	;# 
  2613  0018                     	;# 
  2614  0019                     	;# 
  2615  001A                     	;# 
  2616  001B                     	;# 
  2617  001C                     	;# 
  2618  008C                     	;# 
  2619  008D                     	;# 
  2620  008E                     	;# 
  2621  0091                     	;# 
  2622  0092                     	;# 
  2623  0093                     	;# 
  2624  0095                     	;# 
  2625  0096                     	;# 
  2626  0097                     	;# 
  2627  0099                     	;# 
  2628  009A                     	;# 
  2629  009B                     	;# 
  2630  009B                     	;# 
  2631  009C                     	;# 
  2632  009D                     	;# 
  2633  009E                     	;# 
  2634  009F                     	;# 
  2635  010C                     	;# 
  2636  010D                     	;# 
  2637  010E                     	;# 
  2638  0111                     	;# 
  2639  0112                     	;# 
  2640  0113                     	;# 
  2641  0114                     	;# 
  2642  0115                     	;# 
  2643  0116                     	;# 
  2644  0117                     	;# 
  2645  0118                     	;# 
  2646  0119                     	;# 
  2647  011D                     	;# 
  2648  018C                     	;# 
  2649  018D                     	;# 
  2650  018E                     	;# 
  2651  0191                     	;# 
  2652  0191                     	;# 
  2653  0192                     	;# 
  2654  0193                     	;# 
  2655  0193                     	;# 
  2656  0194                     	;# 
  2657  0195                     	;# 
  2658  0196                     	;# 
  2659  0199                     	;# 
  2660  019A                     	;# 
  2661  019B                     	;# 
  2662  019B                     	;# 
  2663  019C                     	;# 
  2664  019D                     	;# 
  2665  019E                     	;# 
  2666  019F                     	;# 
  2667  020C                     	;# 
  2668  020D                     	;# 
  2669  0211                     	;# 
  2670  0211                     	;# 
  2671  0212                     	;# 
  2672  0212                     	;# 
  2673  0213                     	;# 
  2674  0213                     	;# 
  2675  0214                     	;# 
  2676  0214                     	;# 
  2677  0215                     	;# 
  2678  0215                     	;# 
  2679  0215                     	;# 
  2680  0216                     	;# 
  2681  0216                     	;# 
  2682  0217                     	;# 
  2683  0217                     	;# 
  2684  0391                     	;# 
  2685  0392                     	;# 
  2686  0393                     	;# 
  2687  0394                     	;# 
  2688  0395                     	;# 
  2689  0396                     	;# 
  2690  0498                     	;# 
  2691  0498                     	;# 
  2692  0499                     	;# 
  2693  049A                     	;# 
  2694  049B                     	;# 
  2695  049B                     	;# 
  2696  049C                     	;# 
  2697  049E                     	;# 
  2698  049F                     	;# 
  2699  0611                     	;# 
  2700  0612                     	;# 
  2701  0613                     	;# 
  2702  0613                     	;# 
  2703  0614                     	;# 
  2704  0615                     	;# 
  2705  0616                     	;# 
  2706  0616                     	;# 
  2707  0617                     	;# 
  2708  0618                     	;# 
  2709  0619                     	;# 
  2710  0619                     	;# 
  2711  061A                     	;# 
  2712  061B                     	;# 
  2713  061C                     	;# 
  2714  061C                     	;# 
  2715  0691                     	;# 
  2716  0692                     	;# 
  2717  0693                     	;# 
  2718  0694                     	;# 
  2719  0695                     	;# 
  2720  0F0F                     	;# 
  2721  0F10                     	;# 
  2722  0F11                     	;# 
  2723  0F12                     	;# 
  2724  0F13                     	;# 
  2725  0F14                     	;# 
  2726  0F15                     	;# 
  2727  0F16                     	;# 
  2728  0F17                     	;# 
  2729  0F18                     	;# 
  2730  0F19                     	;# 
  2731  0F1A                     	;# 
  2732  0F1B                     	;# 
  2733  0F1C                     	;# 
  2734  0F1D                     	;# 
  2735  0F1E                     	;# 
  2736  0F1F                     	;# 
  2737  0F20                     	;# 
  2738  0F21                     	;# 
  2739  0F22                     	;# 
  2740  0F23                     	;# 
  2741  0F24                     	;# 
  2742  0F25                     	;# 
  2743  0F26                     	;# 
  2744  0F27                     	;# 
  2745  0F28                     	;# 
  2746  0F29                     	;# 
  2747  0F2A                     	;# 
  2748  0F2B                     	;# 
  2749  0F2C                     	;# 
  2750  0F2D                     	;# 
  2751  0F2E                     	;# 
  2752  0F2F                     	;# 
  2753  0F8C                     	;# 
  2754  0F8D                     	;# 
  2755  0F91                     	;# 
  2756  0F95                     	;# 
  2757  0F96                     	;# 
  2758  0F97                     	;# 
  2759  0F9C                     	;# 
  2760  0F9D                     	;# 
  2761  0F9E                     	;# 
  2762  0FE3                     	;# 
  2763  0FE4                     	;# 
  2764  0FE5                     	;# 
  2765  0FE6                     	;# 
  2766  0FE7                     	;# 
  2767  0FE8                     	;# 
  2768  0FE9                     	;# 
  2769  0FEA                     	;# 
  2770  0FEB                     	;# 
  2771  0FED                     	;# 
  2772  0FEE                     	;# 
  2773  0FEF                     	;# 
  2774                           
  2775                           	psect	idataCOMMON
  2776  0000                     __pidataCOMMON:	
  2777                           
  2778                           	psect	idataBANK0
  2779  0000                     __pidataBANK0:	
  2780                           
  2781                           	psect	strings
  2782  021A                     __pstrings:	
  2783  021A                     __stringtab:	
  2784  021A  3400               	retlw	0
  2785  021B                     __end_of__stringtab:	
  2786  021B                     _mrfRegset_InitCnt:	
  2787  021B  3410               	retlw	16
  2788  021C                     __end_of_mrfRegset_InitCnt:	
  2789  021C                     _mrfRegset_RxCnt:	
  2790  021C  3406               	retlw	6
  2791  021D                     __end_of_mrfRegset_RxCnt:	
  2792  021D                     _mrfRegset_SleepCnt:	
  2793  021D  3403               	retlw	3
  2794  021E                     __end_of_mrfRegset_SleepCnt:	
  2795  021E                     _mrfRegset_TxCnt:	
  2796  021E  3404               	retlw	4
  2797  021F                     __end_of_mrfRegset_TxCnt:	
  2798  021F                     _mrfRegset_Init:	
  2799  021F  34CA               	retlw	202
  2800  0220  3471               	retlw	113
  2801  0221  34CA               	retlw	202
  2802  0222  3473               	retlw	115
  2803  0223  3480               	retlw	128
  2804  0224  3428               	retlw	40
  2805  0225  34C4               	retlw	196
  2806  0226  34E7               	retlw	231
  2807  0227  34A8               	retlw	168
  2808  0228  3460               	retlw	96
  2809  0229  34C6               	retlw	198
  2810  022A  3405               	retlw	5
  2811  022B  3482               	retlw	130
  2812  022C  3400               	retlw	0
  2813  022D  3490               	retlw	144
  2814  022E  3462               	retlw	98
  2815  022F  3498               	retlw	152
  2816  0230  3490               	retlw	144
  2817  0231  34C2               	retlw	194
  2818  0232  34AC               	retlw	172
  2819  0233  3482               	retlw	130
  2820  0234  3420               	retlw	32
  2821  0235  3455               	retlw	85
  2822  0236  3400               	retlw	0
  2823  0237  3482               	retlw	130
  2824  0238  3480               	retlw	128
  2825  0239  3480               	retlw	128
  2826  023A  3468               	retlw	104
  2827  023B  34CA               	retlw	202
  2828  023C  3471               	retlw	113
  2829  023D  34CA               	retlw	202
  2830  023E  3473               	retlw	115
  2831  023F                     __end_of_mrfRegset_Init:	
  2832  023F                     _mrfRegset_Rx:	
  2833  023F  3482               	retlw	130
  2834  0240  3400               	retlw	0
  2835  0241  34CA               	retlw	202
  2836  0242  3471               	retlw	113
  2837  0243  3480               	retlw	128
  2838  0244  3428               	retlw	40
  2839  0245  3482               	retlw	130
  2840  0246  3480               	retlw	128
  2841  0247  3480               	retlw	128
  2842  0248  3468               	retlw	104
  2843  0249  34CA               	retlw	202
  2844  024A  3473               	retlw	115
  2845  024B                     __end_of_mrfRegset_Rx:	
  2846  024B                     _mrfRegset_Tx:	
  2847  024B  3482               	retlw	130
  2848  024C  3400               	retlw	0
  2849  024D  34CA               	retlw	202
  2850  024E  3471               	retlw	113
  2851  024F  3480               	retlw	128
  2852  0250  34A8               	retlw	168
  2853  0251  3482               	retlw	130
  2854  0252  3420               	retlw	32
  2855  0253                     __end_of_mrfRegset_Tx:	
  2856  0253                     _mrfRegset_Sleep:	
  2857  0253  3482               	retlw	130
  2858  0254  3400               	retlw	0
  2859  0255  34CA               	retlw	202
  2860  0256  3471               	retlw	113
  2861  0257  3480               	retlw	128
  2862  0258  3468               	retlw	104
  2863  0259                     __end_of_mrfRegset_Sleep:	
  2864  0259                     _parameters:	
  2865  0259  3400               	retlw	0
  2866  025A  3401               	retlw	1
  2867  025B  3437               	retlw	_cfgRam& (0+255)
  2868  025C  3401               	retlw	1
  2869  025D  3402               	retlw	2
  2870  025E  343E               	retlw	(_cfgRam+7)& (0+255)
  2871  025F                     __end_of_parameters:	
  2872  000B                     _INTCONbits	set	11
  2873  000C                     _PORTAbits	set	12
  2874  000D                     _PORTBbits	set	13
  2875  000E                     _PORTCbits	set	14
  2876  009D                     _ADCON0	set	157
  2877  009E                     _ADCON1	set	158
  2878  009F                     _ADCON2	set	159
  2879  009C                     _ADRESH	set	156
  2880  009B                     _ADRESL	set	155
  2881  0095                     _OPTION_REGbits	set	149
  2882  0099                     _OSCCON	set	153
  2883  008C                     _TRISAbits	set	140
  2884  008D                     _TRISBbits	set	141
  2885  008E                     _TRISCbits	set	142
  2886  0097                     _WDTCONbits	set	151
  2887  0117                     _FVRCON	set	279
  2888  010C                     _LATAbits	set	268
  2889  010D                     _LATBbits	set	269
  2890  010E                     _LATCbits	set	270
  2891  018C                     _ANSELA	set	396
  2892  018D                     _ANSELB	set	397
  2893  018E                     _ANSELC	set	398
  2894  018E                     _ANSELCbits	set	398
  2895  020C                     _WPUAbits	set	524
  2896                           
  2897                           ; #config settings
  2898  0000                     
  2899                           	psect	cinit
  2900  0801                     start_initialization:	
  2901  0801                     __initialization:	
  2902                           
  2903                           ; Clear objects allocated to BANK0
  2904  0801  3036               	movlw	low __pbssBANK0
  2905  0802  0084               	movwf	4
  2906  0803  3000               	movlw	high __pbssBANK0
  2907  0804  0085               	movwf	5
  2908  0805  300C               	movlw	12
  2909  0806  3183  231B  3188   	fcall	clear_ram0
  2910                           
  2911                           ; Clear objects allocated to BANK1
  2912  0809  30A0               	movlw	low __pbssBANK1
  2913  080A  0084               	movwf	4
  2914  080B  3000               	movlw	high __pbssBANK1
  2915  080C  0085               	movwf	5
  2916  080D  304B               	movlw	75
  2917  080E  3183  231B  3188   	fcall	clear_ram0
  2918                           
  2919                           ;initializer for _macPtr
  2920  0811  30A0               	movlw	_rfTrcvStatus& (0+255)
  2921  0812  00F8               	movwf	__pdataCOMMON& (0+127)
  2922                           
  2923                           ;initializer for _coldBoot
  2924  0813  3001               	movlw	1
  2925  0814  00C2               	movwf	__pdataBANK0& (0+127)
  2926  0815                     end_of_initialization:	
  2927                           ;End of C runtime variable initialization code
  2928                           
  2929  0815                     __end_of__initialization:	
  2930  0815  0020               	movlb	0
  2931  0816  2851               	ljmp	_main	;jump to C main() function
  2932  0817                     __ptext24:	
  2933 ;; *************** function _PwrI2cInit *****************
  2934 ;; Defined at:
  2935 ;;		line 62 in file "../../../src/node/power.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;		None               void
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0, pclath, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 17F/2
  2946 ;;		On exit  : 1F/2
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2949 ;;      Params:         0       0       0       0
  2950 ;;      Locals:         0       0       0       0
  2951 ;;      Temps:          0       0       0       0
  2952 ;;      Totals:         0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    8
  2956 ;; This function calls:
  2957 ;;		_SoftI2cInit
  2958 ;; This function is called by:
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           
  2964                           ;psect for function _PwrI2cInit
  2965  0817                     _PwrI2cInit:	
  2966                           
  2967                           ;power.c: 64: SoftI2cInit();
  2968                           
  2969                           ;incstack = 0
  2970                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  2971  0817  201F               	fcall	_SoftI2cInit
  2972                           
  2973                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  2974  0818  0021               	movlb	1	; select bank1
  2975  0819  120D               	bcf	13,4	;volatile
  2976                           
  2977                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  2978  081A  130D               	bcf	13,6	;volatile
  2979                           
  2980                           ;power.c: 69: TRISBbits.TRISB5 = 0;
  2981  081B  128D               	bcf	13,5	;volatile
  2982                           
  2983                           ;power.c: 70: LATBbits.LATB5 = 1;
  2984  081C  0022               	movlb	2	; select bank2
  2985  081D  168D               	bsf	13,5	;volatile
  2986  081E  0008               	return
  2987  081F                     __end_of_PwrI2cInit:	
  2988  081F                     __ptext25:	
  2989 ;; *************** function _SoftI2cInit *****************
  2990 ;; Defined at:
  2991 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;		None
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;		None               void
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0, pclath, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 17F/2
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3005 ;;      Params:         0       0       0       0
  3006 ;;      Locals:         0       0       0       0
  3007 ;;      Temps:          0       0       0       0
  3008 ;;      Totals:         0       0       0       0
  3009 ;;Total ram usage:        0 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    7
  3012 ;; This function calls:
  3013 ;;		_SoftI2cStart
  3014 ;;		_SoftI2cStop
  3015 ;;		_SoftI2cTxByte
  3016 ;; This function is called by:
  3017 ;;		_PwrI2cInit
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _SoftI2cInit
  3023  081F                     _SoftI2cInit:	
  3024                           
  3025                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  3026                           
  3027                           ;incstack = 0
  3028                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  3029  081F  170D               	bsf	13,6	;volatile
  3030                           
  3031                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  3032  0820  160D               	bsf	13,4	;volatile
  3033                           
  3034                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  3035  0821  0021               	movlb	1	; select bank1
  3036  0822  130D               	bcf	13,6	;volatile
  3037                           
  3038                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  3039  0823  120D               	bcf	13,4	;volatile
  3040                           
  3041                           ;softI2c.c: 32: SoftI2cStart();
  3042  0824  22FA  3188         	fcall	_SoftI2cStart
  3043                           
  3044                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  3045  0826  3000               	movlw	0
  3046  0827  228C  3188         	fcall	_SoftI2cTxByte
  3047                           
  3048                           ;softI2c.c: 34: SoftI2cStop();
  3049  0829  2B07               	ljmp	l2709
  3050  082A                     __end_of_SoftI2cInit:	
  3051  082A                     __ptext21:	
  3052 ;; *************** function _PwrRfInit *****************
  3053 ;; Defined at:
  3054 ;;		line 87 in file "../../../src/node/power.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;		None
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;		None
  3059 ;; Return value:  Size  Location     Type
  3060 ;;		None               void
  3061 ;; Registers used:
  3062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 1F/2
  3065 ;;		On exit  : 1F/1
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3068 ;;      Params:         0       0       0       0
  3069 ;;      Locals:         0       0       0       0
  3070 ;;      Temps:          0       0       0       0
  3071 ;;      Totals:         0       0       0       0
  3072 ;;Total ram usage:        0 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:   10
  3075 ;; This function calls:
  3076 ;;		_ExtIntInit
  3077 ;;		_Mrf49xaInit
  3078 ;;		_Sleepy
  3079 ;; This function is called by:
  3080 ;;		_main
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function _PwrRfInit
  3086  082A                     _PwrRfInit:	
  3087                           
  3088                           ;power.c: 89: TRISAbits.TRISA2 = 1;
  3089                           
  3090                           ;incstack = 0
  3091                           ; Regs used in _PwrRfInit: [allreg]
  3092  082A  0021               	movlb	1	; select bank1
  3093  082B  150C               	bsf	12,2	;volatile
  3094                           
  3095                           ;power.c: 90: TRISAbits.TRISA4 = 0;
  3096  082C  120C               	bcf	12,4	;volatile
  3097                           
  3098                           ;power.c: 91: TRISAbits.TRISA5 = 0;
  3099  082D  128C               	bcf	12,5	;volatile
  3100                           
  3101                           ;power.c: 93: TRISBbits.TRISB7 = 0;
  3102  082E  138D               	bcf	13,7	;volatile
  3103                           
  3104                           ;power.c: 95: TRISCbits.TRISC1 = 0;
  3105  082F  108E               	bcf	14,1	;volatile
  3106                           
  3107                           ;power.c: 96: TRISCbits.TRISC4 = 0;
  3108  0830  120E               	bcf	14,4	;volatile
  3109                           
  3110                           ;power.c: 97: TRISCbits.TRISC6 = 0;
  3111  0831  130E               	bcf	14,6	;volatile
  3112                           
  3113                           ;power.c: 98: TRISCbits.TRISC7 = 0;
  3114  0832  138E               	bcf	14,7	;volatile
  3115                           
  3116                           ;power.c: 99: TRISCbits.TRISC3 = 1;
  3117  0833  158E               	bsf	14,3	;volatile
  3118                           
  3119                           ;power.c: 100: TRISCbits.TRISC5 = 1;
  3120  0834  168E               	bsf	14,5	;volatile
  3121                           
  3122                           ;power.c: 102: LATCbits.LATC1 = 0;
  3123  0835  0022               	movlb	2	; select bank2
  3124  0836  108E               	bcf	14,1	;volatile
  3125                           
  3126                           ;power.c: 104: LATAbits.LATA4 = 0;
  3127  0837  120C               	bcf	12,4	;volatile
  3128                           
  3129                           ;power.c: 105: LATAbits.LATA5 = 0;
  3130  0838  128C               	bcf	12,5	;volatile
  3131                           
  3132                           ;power.c: 106: LATCbits.LATC4 = 0;
  3133  0839  120E               	bcf	14,4	;volatile
  3134                           
  3135                           ;power.c: 107: PORTCbits.RC6 = 1;
  3136  083A  0020               	movlb	0	; select bank0
  3137  083B  170E               	bsf	14,6	;volatile
  3138                           
  3139                           ;power.c: 108: LATCbits.LATC7 = 0;
  3140  083C  0022               	movlb	2	; select bank2
  3141  083D  138E               	bcf	14,7	;volatile
  3142                           
  3143                           ;power.c: 109: PORTBbits.RB7 = 0;
  3144  083E  0020               	movlb	0	; select bank0
  3145  083F  138D               	bcf	13,7	;volatile
  3146                           
  3147                           ;power.c: 111: WPUAbits.WPUA2 = 1;
  3148  0840  0024               	movlb	4	; select bank4
  3149  0841  150C               	bsf	12,2	;volatile
  3150                           
  3151                           ;power.c: 112: Sleepy(10);
  3152  0842  300A               	movlw	10
  3153  0843  0020               	movlb	0	; select bank0
  3154  0844  00A0               	movwf	Sleepy@ms
  3155  0845  01A1               	clrf	Sleepy@ms+1
  3156  0846  21EE  3188         	fcall	_Sleepy
  3157                           
  3158                           ;power.c: 114: Mrf49xaInit();
  3159  0848  218F  3188         	fcall	_Mrf49xaInit
  3160                           
  3161                           ;power.c: 115: ExtIntInit();
  3162  084A  284B               	ljmp	l2811
  3163  084B                     __end_of_PwrRfInit:	
  3164  084B                     __ptext58:	
  3165 ;; *************** function _ExtIntInit *****************
  3166 ;; Defined at:
  3167 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;		None               void
  3174 ;; Registers used:
  3175 ;;		None
  3176 ;; Tracked objects:
  3177 ;;		On entry : 1F/0
  3178 ;;		On exit  : 1F/1
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3181 ;;      Params:         0       0       0       0
  3182 ;;      Locals:         0       0       0       0
  3183 ;;      Temps:          0       0       0       0
  3184 ;;      Totals:         0       0       0       0
  3185 ;;Total ram usage:        0 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    5
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_Mrf49xaTick
  3192 ;;		_PwrRfInit
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _ExtIntInit
  3198  084B                     _ExtIntInit:	
  3199  084B                     l2811:	
  3200                           ;incstack = 0
  3201                           ; Regs used in _ExtIntInit: []
  3202                           
  3203                           
  3204                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3205  084B  0021               	movlb	1	; select bank1
  3206  084C  1315               	bcf	21,6	;volatile
  3207                           
  3208                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3209  084D  108B               	bcf	11,1	;volatile
  3210                           
  3211                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3212  084E  160B               	bsf	11,4	;volatile
  3213                           
  3214                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3215  084F  178B               	bsf	11,7	;volatile
  3216  0850  0008               	return
  3217  0851                     __end_of_ExtIntInit:	
  3218  0851                     __pmaintext:	
  3219 ;;
  3220 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3221 ;;
  3222 ;; *************** function _main *****************
  3223 ;; Defined at:
  3224 ;;		line 35 in file "../../../src/node/main.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  temperature     2   20[BANK0 ] unsigned int 
  3229 ;;  humidity        2   18[BANK0 ] unsigned int 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;		None               void
  3232 ;; Registers used:
  3233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3234 ;; Tracked objects:
  3235 ;;		On entry : 17F/0
  3236 ;;		On exit  : 1F/1
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3239 ;;      Params:         0       0       0       0
  3240 ;;      Locals:         0       4       0       0
  3241 ;;      Temps:          0       0       0       0
  3242 ;;      Totals:         0       4       0       0
  3243 ;;Total ram usage:        4 bytes
  3244 ;; Hardware stack levels required when called:   12
  3245 ;; This function calls:
  3246 ;;		_AdcSample
  3247 ;;		_CfgLoad
  3248 ;;		_Mcp9800Read
  3249 ;;		_Mcp9800Start
  3250 ;;		_Mrf49xaNeedsReset
  3251 ;;		_Mrf49xaTick
  3252 ;;		_PwrAdcInit
  3253 ;;		_PwrAdcSleep
  3254 ;;		_PwrAdcWake
  3255 ;;		_PwrI2cInit
  3256 ;;		_PwrI2cSleep
  3257 ;;		_PwrI2cWake
  3258 ;;		_PwrRfInit
  3259 ;;		_PwrRfSleep
  3260 ;;		_PwrRfWake
  3261 ;;		_PwrSensorInit
  3262 ;;		_PwrSensorSleep
  3263 ;;		_PwrSensorWake
  3264 ;;		_RfSendPowerState
  3265 ;;		_RfSendSampleWeatherNode
  3266 ;;		_Sleepy
  3267 ;; This function is called by:
  3268 ;;		Startup code after reset
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           
  3273                           ;psect for function _main
  3274  0851                     _main:	
  3275                           
  3276                           ;main.c: 39: OSCCON = 0b01111000;
  3277                           
  3278                           ;incstack = 0
  3279                           ; Regs used in _main: [allreg]
  3280  0851  3078               	movlw	120
  3281  0852  0021               	movlb	1	; select bank1
  3282  0853  0099               	movwf	25	;volatile
  3283                           
  3284                           ;main.c: 41: PwrAdcInit();
  3285  0854  2414  3188         	fcall	_PwrAdcInit
  3286                           
  3287                           ;main.c: 42: PwrSensorInit();
  3288  0856  27A6  3188         	fcall	_PwrSensorInit
  3289                           
  3290                           ;main.c: 43: PwrI2cInit();
  3291  0858  2017  3188         	fcall	_PwrI2cInit
  3292                           
  3293                           ;main.c: 44: PwrRfInit();
  3294  085A  202A  3188         	fcall	_PwrRfInit
  3295                           
  3296                           ;main.c: 46: CfgLoad();
  3297  085C  2327  3188         	fcall	_CfgLoad
  3298                           
  3299                           ;main.c: 48: PwrAdcSleep();
  3300  085E  2686  3188         	fcall	_PwrAdcSleep
  3301                           
  3302                           ;main.c: 49: PwrSensorSleep();
  3303  0860  231F  3188         	fcall	_PwrSensorSleep
  3304                           
  3305                           ;main.c: 50: PwrI2cSleep();
  3306  0862  2319               	fcall	_PwrI2cSleep
  3307  0863                     l3601:	
  3308                           
  3309                           ;main.c: 51: PwrRfSleep();
  3310  0863  3182  225F  3188   	fcall	_PwrRfSleep
  3311                           
  3312                           ;main.c: 54: {
  3313                           ;main.c: 57: Sleepy(5000);
  3314  0866  3088               	movlw	136
  3315  0867  0020               	movlb	0	; select bank0
  3316  0868  00A0               	movwf	Sleepy@ms
  3317  0869  3013               	movlw	19
  3318  086A  00A1               	movwf	Sleepy@ms+1
  3319  086B  21EE  3188         	fcall	_Sleepy
  3320                           
  3321                           ;main.c: 59: PwrSensorWake();
  3322  086D  241E  3188         	fcall	_PwrSensorWake
  3323                           
  3324                           ;main.c: 60: PwrI2cWake();
  3325  086F  241D  3188         	fcall	_PwrI2cWake
  3326                           
  3327                           ;main.c: 62: Mcp9800Start(Mcp9800_9bit);
  3328  0871  3000               	movlw	0
  3329  0872  224F  3188         	fcall	_Mcp9800Start
  3330                           
  3331                           ;main.c: 64: PwrAdcWake();
  3332  0874  268B  3188         	fcall	_PwrAdcWake
  3333                           
  3334                           ;main.c: 65: uint16_t humidity = AdcSample(ADC_AN4);
  3335  0876  3004               	movlw	4
  3336  0877  2651  3188         	fcall	_AdcSample
  3337  0879  0823               	movf	?_AdcSample+1,w
  3338  087A  00B3               	movwf	main@humidity+1
  3339  087B  0822               	movf	?_AdcSample,w
  3340  087C  00B2               	movwf	main@humidity
  3341                           
  3342                           ;main.c: 66: Sleepy(100);
  3343  087D  3064               	movlw	100
  3344  087E  00A0               	movwf	Sleepy@ms
  3345  087F  01A1               	clrf	Sleepy@ms+1
  3346  0880  21EE  3188         	fcall	_Sleepy
  3347                           
  3348                           ;main.c: 67: uint16_t temperature = Mcp9800Read();
  3349  0882  221E  3188         	fcall	_Mcp9800Read
  3350  0884  0825               	movf	?_Mcp9800Read+1,w
  3351  0885  00B5               	movwf	main@temperature+1
  3352  0886  0824               	movf	?_Mcp9800Read,w
  3353  0887  00B4               	movwf	main@temperature
  3354                           
  3355                           ;main.c: 69: PwrSensorSleep();
  3356  0888  231F  3188         	fcall	_PwrSensorSleep
  3357                           
  3358                           ;main.c: 70: PwrI2cSleep();
  3359  088A  2319               	fcall	_PwrI2cSleep
  3360                           
  3361                           ;main.c: 72: PwrRfWake();
  3362  088B  3182  22FB  3188   	fcall	_PwrRfWake
  3363                           
  3364                           ;main.c: 74: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3365  088E  0021               	movlb	1	; select bank1
  3366  088F  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3367  0890  1903               	btfsc	3,2
  3368  0891  2897               	goto	l3631
  3369                           
  3370                           ;main.c: 75: {
  3371                           ;main.c: 76: Mrf49xaNeedsReset();
  3372  0892  2316  3188         	fcall	_Mrf49xaNeedsReset
  3373                           
  3374                           ;main.c: 77: Mrf49xaTick(macPtr);
  3375  0894  30A0               	movlw	_rfTrcvStatus& (0+255)
  3376  0895  20BC  3188         	fcall	_Mrf49xaTick
  3377  0897                     l3631:	
  3378                           
  3379                           ;main.c: 78: }
  3380                           ;main.c: 80: powerStatusTicker++;
  3381  0897  0020               	movlb	0	; select bank0
  3382  0898  300F               	movlw	15
  3383  0899  0AB6               	incf	_powerStatusTicker,f
  3384                           
  3385                           ;main.c: 82: if (powerStatusTicker >= 15)
  3386  089A  0236               	subwf	_powerStatusTicker,w
  3387  089B  1C03               	skipc
  3388  089C  28A8               	goto	l3643
  3389  089D  30A0               	movlw	_rfTrcvStatus& (0+255)
  3390                           
  3391                           ;main.c: 83: {
  3392                           ;main.c: 84: powerStatusTicker = 0;
  3393  089E  01B6               	clrf	_powerStatusTicker
  3394                           
  3395                           ;main.c: 87: RfSendPowerState(macPtr);
  3396  089F  2616  3188         	fcall	_RfSendPowerState
  3397  08A1                     l3639:	
  3398                           
  3399                           ;main.c: 89: {
  3400                           ;main.c: 90: Mrf49xaTick(macPtr);
  3401  08A1  30A0               	movlw	_rfTrcvStatus& (0+255)
  3402  08A2  20BC  3188         	fcall	_Mrf49xaTick
  3403                           
  3404                           ;main.c: 91: }
  3405                           ;main.c: 92: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3406  08A4  0021               	movlb	1	; select bank1
  3407  08A5  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3408  08A6  1D03               	skipz
  3409  08A7  28A1               	goto	l3639
  3410  08A8                     l3643:	
  3411                           
  3412                           ;main.c: 93: }
  3413                           ;main.c: 95: RfSendSampleWeatherNode(macPtr, temperature, humidity);
  3414  08A8  0020               	movlb	0	; select bank0
  3415  08A9  0835               	movf	main@temperature+1,w
  3416  08AA  00A9               	movwf	RfSendSampleWeatherNode@temperature+1
  3417  08AB  0834               	movf	main@temperature,w
  3418  08AC  00A8               	movwf	RfSendSampleWeatherNode@temperature
  3419  08AD  0833               	movf	main@humidity+1,w
  3420  08AE  00AB               	movwf	RfSendSampleWeatherNode@humidity+1
  3421  08AF  0832               	movf	main@humidity,w
  3422  08B0  00AA               	movwf	RfSendSampleWeatherNode@humidity
  3423  08B1  30A0               	movlw	_rfTrcvStatus& (0+255)
  3424  08B2  2691  3188         	fcall	_RfSendSampleWeatherNode
  3425  08B4                     l3645:	
  3426                           
  3427                           ;main.c: 97: {
  3428                           ;main.c: 98: Mrf49xaTick(macPtr);
  3429  08B4  30A0               	movlw	_rfTrcvStatus& (0+255)
  3430  08B5  20BC  3188         	fcall	_Mrf49xaTick
  3431                           
  3432                           ;main.c: 99: }
  3433                           ;main.c: 100: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3434  08B7  0021               	movlb	1	; select bank1
  3435  08B8  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3436  08B9  1903               	btfsc	3,2
  3437  08BA  2863               	goto	l3601
  3438  08BB  28B4               	goto	l3645
  3439  08BC                     __end_of_main:	
  3440  08BC                     __ptext27:	
  3441 ;; *************** function _Mrf49xaTick *****************
  3442 ;; Defined at:
  3443 ;;		line 130 in file "../../../src/devices/mrf49xa_mac.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  3446 ;;		 -> rfTrcvStatus(75), 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  inst            1   17[BANK0 ] PTR struct rfTrcvStatus_
  3449 ;;		 -> rfTrcvStatus(75), 
  3450 ;;  timeout         1   15[BANK0 ] unsigned char 
  3451 ;;  packet          1   16[BANK0 ] PTR struct rfTrcvPacket_
  3452 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;		None               void
  3455 ;; Registers used:
  3456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 1E/1
  3459 ;;		On exit  : 1E/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3462 ;;      Params:         0       0       0       0
  3463 ;;      Locals:         0       3       0       0
  3464 ;;      Temps:          0       1       0       0
  3465 ;;      Totals:         0       4       0       0
  3466 ;;Total ram usage:        4 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:   11
  3469 ;; This function calls:
  3470 ;;		_ExtIntInit
  3471 ;;		_HandlePacket
  3472 ;;		_Mrf49RxSts
  3473 ;;		_Mrf49xaFreePacket
  3474 ;;		_Mrf49xaInit
  3475 ;;		_Mrf49xaModeTx
  3476 ;;		_Mrf49xaNeedsReset
  3477 ;;		_Mrf49xaPacketPending
  3478 ;;		_Mrf49xaRxPacket
  3479 ;;		_Sleepy
  3480 ;; This function is called by:
  3481 ;;		_main
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           
  3486                           ;psect for function _Mrf49xaTick
  3487  08BC                     _Mrf49xaTick:	
  3488                           
  3489                           ;incstack = 0
  3490                           ; Regs used in _Mrf49xaTick: [allreg]
  3491                           ;Mrf49xaTick@inst stored from wreg
  3492  08BC  0020               	movlb	0	; select bank0
  3493  08BD  00B1               	movwf	Mrf49xaTick@inst
  3494                           
  3495                           ;mrf49xa_mac.c: 139: if (inst->rxPacket[0].state == PKT_HW_BUSY_RX &&
  3496                           ;mrf49xa_mac.c: 140: inst->rxPacket[1].state == PKT_HW_BUSY_RX)
  3497  08BE  0A31               	incf	Mrf49xaTick@inst,w
  3498  08BF  0086               	movwf	6
  3499  08C0  0187               	clrf	7
  3500  08C1  0801               	movf	1,w
  3501  08C2  3A04               	xorlw	4
  3502  08C3  1D03               	skipz
  3503  08C4  28CE               	goto	l3321
  3504  08C5  0831               	movf	Mrf49xaTick@inst,w
  3505  08C6  3E19               	addlw	25
  3506  08C7  0086               	movwf	6
  3507  08C8  0801               	movf	1,w
  3508  08C9  3A04               	xorlw	4
  3509  08CA  1D03               	skipz
  3510  08CB  28CE               	goto	l3321
  3511                           
  3512                           ;mrf49xa_mac.c: 141: {
  3513                           ;mrf49xa_mac.c: 142: Mrf49xaNeedsReset();
  3514  08CC  2316  3188         	fcall	_Mrf49xaNeedsReset
  3515  08CE                     l3321:	
  3516                           
  3517                           ;mrf49xa_mac.c: 143: }
  3518                           ;mrf49xa_mac.c: 144: if (inst->needsReset)
  3519  08CE  0020               	movlb	0	; select bank0
  3520  08CF  0831               	movf	Mrf49xaTick@inst,w
  3521  08D0  3E4A               	addlw	74
  3522  08D1  0086               	movwf	6
  3523  08D2  0187               	clrf	7
  3524  08D3  1F81               	btfss	1,7
  3525  08D4  28D8               	goto	l3329
  3526                           
  3527                           ;mrf49xa_mac.c: 145: {
  3528                           ;mrf49xa_mac.c: 146: Mrf49xaInit();
  3529  08D5  218F  3188         	fcall	_Mrf49xaInit
  3530                           
  3531                           ;mrf49xa_mac.c: 147: ExtIntInit();
  3532  08D7  284B               	ljmp	l2811
  3533  08D8                     l3329:	
  3534                           
  3535                           ;mrf49xa_mac.c: 149: }
  3536                           ;mrf49xa_mac.c: 152: if (Mrf49xaPacketPending(inst))
  3537  08D8  0831               	movf	Mrf49xaTick@inst,w
  3538  08D9  3182  22EB  3188   	fcall	_Mrf49xaPacketPending
  3539  08DC  3A00               	xorlw	0
  3540  08DD  1903               	skipnz
  3541  08DE  2901               	goto	l3343
  3542                           
  3543                           ;mrf49xa_mac.c: 153: {
  3544                           ;mrf49xa_mac.c: 154: rfTrcvPacket_t* packet = Mrf49xaRxPacket(inst);
  3545  08DF  0831               	movf	Mrf49xaTick@inst,w
  3546  08E0  3182  22B3  3188   	fcall	_Mrf49xaRxPacket
  3547  08E3  00B0               	movwf	Mrf49xaTick@packet
  3548                           
  3549                           ;mrf49xa_mac.c: 162: if (packet->packet.dst == 0xFF || packet->packet.dst == cfgRam.node
      +                          Id)
  3550  08E4  3E03               	addlw	3
  3551  08E5  0086               	movwf	6
  3552  08E6  0187               	clrf	7
  3553  08E7  0801               	movf	1,w
  3554  08E8  3AFF               	xorlw	255
  3555  08E9  1903               	skipnz
  3556  08EA  28F2               	goto	l3337
  3557  08EB  0830               	movf	Mrf49xaTick@packet,w
  3558  08EC  3E03               	addlw	3
  3559  08ED  0086               	movwf	6
  3560  08EE  0801               	movf	1,w
  3561  08EF  0637               	xorwf	_cfgRam,w
  3562  08F0  1D03               	skipz
  3563  08F1  28FD               	goto	l3341
  3564  08F2                     l3337:	
  3565                           
  3566                           ;mrf49xa_mac.c: 163: {
  3567                           ;mrf49xa_mac.c: 164: packet->packet.size -= 5;
  3568  08F2  0A30               	incf	Mrf49xaTick@packet,w
  3569  08F3  0086               	movwf	6
  3570  08F4  3005               	movlw	5
  3571  08F5  0187               	clrf	7
  3572  08F6  0281               	subwf	1,f
  3573                           
  3574                           ;mrf49xa_mac.c: 167: HandlePacket(inst, packet);
  3575  08F7  0830               	movf	Mrf49xaTick@packet,w
  3576  08F8  00AA               	movwf	HandlePacket@packet
  3577  08F9  0831               	movf	Mrf49xaTick@inst,w
  3578  08FA  232F  3188         	fcall	_HandlePacket
  3579                           
  3580                           ;mrf49xa_mac.c: 169: }
  3581  08FC  2901               	goto	l3343
  3582  08FD                     l3341:	
  3583                           
  3584                           ;mrf49xa_mac.c: 170: else
  3585                           ;mrf49xa_mac.c: 171: {
  3586                           ;mrf49xa_mac.c: 172: Mrf49xaFreePacket(inst, packet);
  3587  08FD  0830               	movf	Mrf49xaTick@packet,w
  3588  08FE  00A0               	movwf	Mrf49xaFreePacket@packet
  3589  08FF  2322  3188         	fcall	_Mrf49xaFreePacket
  3590  0901                     l3343:	
  3591                           
  3592                           ;mrf49xa_mac.c: 173: }
  3593                           ;mrf49xa_mac.c: 177: }
  3594                           ;mrf49xa_mac.c: 179: if (inst->txPacket.state == PKT_WAITING_FOR_ACK)
  3595  0901  0831               	movf	Mrf49xaTick@inst,w
  3596  0902  3E31               	addlw	49
  3597  0903  0086               	movwf	6
  3598  0904  0187               	clrf	7
  3599  0905  0801               	movf	1,w
  3600  0906  3A03               	xorlw	3
  3601  0907  1D03               	skipz
  3602  0908  294B               	goto	l3363
  3603                           
  3604                           ;mrf49xa_mac.c: 180: {
  3605                           ;mrf49xa_mac.c: 181: if (inst->txPacket.needAck == ACK_RECEIVED)
  3606  0909  0831               	movf	Mrf49xaTick@inst,w
  3607  090A  3E48               	addlw	72
  3608  090B  0086               	movwf	6
  3609  090C  0E01               	swapf	1,w
  3610  090D  0C89               	rrf	9,f
  3611  090E  0C89               	rrf	9,f
  3612  090F  3903               	andlw	3
  3613  0910  3A02               	xorlw	2
  3614  0911  1D03               	skipz
  3615  0912  2919               	goto	l3349
  3616  0913                     l3347:	
  3617                           
  3618                           ;mrf49xa_mac.c: 182: {
  3619                           ;mrf49xa_mac.c: 183: inst->txPacket.state = PKT_FREE;
  3620  0913  0831               	movf	Mrf49xaTick@inst,w
  3621  0914  3E31               	addlw	49
  3622  0915  0086               	movwf	6
  3623  0916  0187               	clrf	7
  3624  0917  0181               	clrf	1
  3625                           
  3626                           ;mrf49xa_mac.c: 184: }
  3627  0918  294B               	goto	l3363
  3628  0919                     l3349:	
  3629                           
  3630                           ;mrf49xa_mac.c: 185: else if (inst->txPacket.retry == 10)
  3631  0919  0831               	movf	Mrf49xaTick@inst,w
  3632  091A  3E48               	addlw	72
  3633  091B  0086               	movwf	6
  3634  091C  0187               	clrf	7
  3635  091D  0801               	movf	1,w
  3636  091E  390F               	andlw	15
  3637  091F  3A0A               	xorlw	10
  3638  0920  1D03               	skipz
  3639  0921  2942               	goto	l3359
  3640                           
  3641                           ;mrf49xa_mac.c: 186: {
  3642                           ;mrf49xa_mac.c: 187: if (inst->txPacket.retransmit == 1)
  3643  0922  0831               	movf	Mrf49xaTick@inst,w
  3644  0923  3E48               	addlw	72
  3645  0924  0086               	movwf	6
  3646  0925  0E01               	swapf	1,w
  3647  0926  3903               	andlw	3
  3648  0927  3A01               	xorlw	1
  3649  0928  1903               	btfsc	3,2
  3650  0929  2913               	goto	l3347
  3651                           
  3652                           ;mrf49xa_mac.c: 193: else
  3653                           ;mrf49xa_mac.c: 194: {
  3654                           ;mrf49xa_mac.c: 196: inst->txPacket.retry = 0;
  3655  092A  0831               	movf	Mrf49xaTick@inst,w
  3656  092B  3E48               	addlw	72
  3657  092C  0086               	movwf	6
  3658  092D  30F0               	movlw	-16
  3659  092E  0581               	andwf	1,f
  3660                           
  3661                           ;mrf49xa_mac.c: 197: inst->txPacket.retransmit++;
  3662  092F  0831               	movf	Mrf49xaTick@inst,w
  3663  0930  3E48               	addlw	72
  3664  0931  0086               	movwf	6
  3665  0932  0E01               	swapf	1,w
  3666  0933  3903               	andlw	3
  3667  0934  00AE               	movwf	??_Mrf49xaTick
  3668  0935  0AAE               	incf	??_Mrf49xaTick,f
  3669  0936  0EAE               	swapf	??_Mrf49xaTick,f
  3670  0937  0801               	movf	1,w
  3671  0938  062E               	xorwf	??_Mrf49xaTick,w
  3672  0939  39CF               	andlw	-49
  3673  093A  062E               	xorwf	??_Mrf49xaTick,w
  3674  093B  0081               	movwf	1
  3675                           
  3676                           ;mrf49xa_mac.c: 198: inst->txPacket.state = PKT_READY_FOR_TX;
  3677  093C  0831               	movf	Mrf49xaTick@inst,w
  3678  093D  3E31               	addlw	49
  3679  093E  0086               	movwf	6
  3680  093F  0181               	clrf	1
  3681  0940  0A81               	incf	1,f
  3682  0941  294B               	goto	l3363
  3683  0942                     l3359:	
  3684                           
  3685                           ;mrf49xa_mac.c: 201: else
  3686                           ;mrf49xa_mac.c: 202: {
  3687                           ;mrf49xa_mac.c: 203: inst->txPacket.retry++;
  3688  0942  0831               	movf	Mrf49xaTick@inst,w
  3689  0943  3E48               	addlw	72
  3690  0944  27D7  3188         	fcall	PL12	;call to abstracted procedure
  3691                           
  3692                           ;mrf49xa_mac.c: 204: Sleepy(5);
  3693  0946  3005               	movlw	5
  3694  0947  00A0               	movwf	Sleepy@ms
  3695  0948  01A1               	clrf	Sleepy@ms+1
  3696  0949  21EE  3188         	fcall	_Sleepy
  3697  094B                     l3363:	
  3698                           
  3699                           ;mrf49xa_mac.c: 205: }
  3700                           ;mrf49xa_mac.c: 206: }
  3701                           ;mrf49xa_mac.c: 208: if (inst->txPacket.state == PKT_READY_FOR_TX &&
  3702                           ;mrf49xa_mac.c: 209: inst->state == RECV_IDLE)
  3703  094B  0831               	movf	Mrf49xaTick@inst,w
  3704  094C  3E31               	addlw	49
  3705  094D  0086               	movwf	6
  3706  094E  0187               	clrf	7
  3707  094F  0B01               	decfsz	1,w
  3708  0950  0008               	return
  3709  0951  0831               	movf	Mrf49xaTick@inst,w
  3710  0952  3E49               	addlw	73
  3711  0953  0086               	movwf	6
  3712  0954  0B01               	decfsz	1,w
  3713  0955  0008               	return
  3714                           
  3715                           ;mrf49xa_mac.c: 210: {
  3716                           ;mrf49xa_mac.c: 211: if (inst->txPacket.retry >= 10)
  3717  0956  0831               	movf	Mrf49xaTick@inst,w
  3718  0957  3E48               	addlw	72
  3719  0958  0086               	movwf	6
  3720  0959  0801               	movf	1,w
  3721  095A  390F               	andlw	15
  3722  095B  00AE               	movwf	??_Mrf49xaTick
  3723  095C  300A               	movlw	10
  3724  095D  022E               	subwf	??_Mrf49xaTick,w
  3725  095E  1C03               	skipc
  3726  095F  296B               	goto	l3375
  3727                           
  3728                           ;mrf49xa_mac.c: 212: {
  3729                           ;mrf49xa_mac.c: 214: inst->txPacket.retry = 0;
  3730  0960  0831               	movf	Mrf49xaTick@inst,w
  3731  0961  3E48               	addlw	72
  3732  0962  0086               	movwf	6
  3733  0963  30F0               	movlw	-16
  3734  0964  0581               	andwf	1,f
  3735                           
  3736                           ;mrf49xa_mac.c: 215: inst->txPacket.state = PKT_WAITING_FOR_ACK;
  3737  0965  0831               	movf	Mrf49xaTick@inst,w
  3738  0966  3E31               	addlw	49
  3739  0967  0086               	movwf	6
  3740  0968  3003               	movlw	3
  3741  0969  0081               	movwf	1
  3742  096A  0008               	return
  3743  096B                     l3375:	
  3744                           
  3745                           ;mrf49xa_mac.c: 217: }
  3746                           ;mrf49xa_mac.c: 221: uint8_t timeout = 0;
  3747  096B  01AF               	clrf	Mrf49xaTick@timeout
  3748  096C                     l3377:	
  3749                           
  3750                           ;mrf49xa_mac.c: 225: {
  3751                           ;mrf49xa_mac.c: 226: Mrf49RxSts();
  3752  096C  25BD  3188         	fcall	_Mrf49RxSts
  3753                           
  3754                           ;mrf49xa_mac.c: 228: if (inst->state == RECV_IDLE && mrf49Status.flags.msb.signalPresent
      +                           == 0)
  3755  096E  0831               	movf	Mrf49xaTick@inst,w
  3756  096F  3E49               	addlw	73
  3757  0970  0086               	movwf	6
  3758  0971  0187               	clrf	7
  3759  0972  0B01               	decfsz	1,w
  3760  0973  2976               	goto	l3385
  3761  0974  1C40               	btfss	_mrf49Status,0
  3762  0975  2984               	goto	l444
  3763  0976                     l3385:	
  3764                           
  3765                           ;mrf49xa_mac.c: 232: }
  3766                           ;mrf49xa_mac.c: 234: Sleepy(5);
  3767  0976  3005               	movlw	5
  3768  0977  00A0               	movwf	Sleepy@ms
  3769  0978  01A1               	clrf	Sleepy@ms+1
  3770  0979  21EE  3188         	fcall	_Sleepy
  3771  097B  300B               	movlw	11
  3772                           
  3773                           ;mrf49xa_mac.c: 235: timeout++;
  3774  097C  0AAF               	incf	Mrf49xaTick@timeout,f
  3775                           
  3776                           ;mrf49xa_mac.c: 237: if (timeout > 10)
  3777  097D  022F               	subwf	Mrf49xaTick@timeout,w
  3778  097E  1C03               	skipc
  3779  097F  296C               	goto	l3377
  3780                           
  3781                           ;mrf49xa_mac.c: 238: {
  3782                           ;mrf49xa_mac.c: 239: inst->txPacket.retry++;
  3783  0980  0831               	movf	Mrf49xaTick@inst,w
  3784  0981  3E48               	addlw	72
  3785  0982  27D7               	fcall	PL12	;call to abstracted procedure
  3786  0983  0008               	return
  3787  0984                     l444:	
  3788                           
  3789                           ;mrf49xa_mac.c: 253: INTCONbits.INTE = 0;;
  3790  0984  120B               	bcf	11,4	;volatile
  3791                           
  3792                           ;mrf49xa_mac.c: 254: Mrf49xaModeTx();
  3793  0985  2421               	fcall	_Mrf49xaModeTx
  3794                           
  3795                           ;mrf49xa_mac.c: 255: inst->txPacket.state = PKT_HW_BUSY_TX;
  3796  0986  0020               	movlb	0	; select bank0
  3797  0987  0831               	movf	Mrf49xaTick@inst,w
  3798  0988  3E31               	addlw	49
  3799  0989  0086               	movwf	6
  3800  098A  3002               	movlw	2
  3801  098B  0187               	clrf	7
  3802  098C  0081               	movwf	1
  3803                           
  3804                           ;mrf49xa_mac.c: 259: INTCONbits.INTE = 1;;
  3805  098D  160B               	bsf	11,4	;volatile
  3806  098E  0008               	return
  3807  098F                     __end_of_Mrf49xaTick:	
  3808  098F                     __ptext31:	
  3809 ;; *************** function _Mrf49xaInit *****************
  3810 ;; Defined at:
  3811 ;;		line 151 in file "../../../src/devices/mrf49xa.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;		None
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  k               1    6[BANK0 ] unsigned char 
  3816 ;;  j               1    0        unsigned char 
  3817 ;;  i               1    0        unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      PTR struct rfTrcvStatus_
  3820 ;; Registers used:
  3821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 1F/0
  3824 ;;		On exit  : 1F/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3827 ;;      Params:         0       0       0       0
  3828 ;;      Locals:         0       1       0       0
  3829 ;;      Temps:          0       0       0       0
  3830 ;;      Totals:         0       1       0       0
  3831 ;;Total ram usage:        1 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    9
  3834 ;; This function calls:
  3835 ;;		_Mrf49TxCmd
  3836 ;;		_Mrf49xaModeRx
  3837 ;;		_Mrf49xaServe
  3838 ;;		_Sleepy
  3839 ;; This function is called by:
  3840 ;;		_Mrf49xaTick
  3841 ;;		_PwrRfInit
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           
  3846                           ;psect for function _Mrf49xaInit
  3847  098F                     _Mrf49xaInit:	
  3848  098F                     l234:	
  3849                           ;incstack = 0
  3850                           ; Regs used in _Mrf49xaInit: [allreg]
  3851                           ;mrf49xa.c: 153: UI08_t k;
  3852                           ;mrf49xa.c: 155: UI08_t i, j;
  3853                           ;mrf49xa.c: 157: reset:
  3854                           
  3855                           
  3856                           ;mrf49xa.c: 159: for (k = 0; k < sizeof(Mrf49xaMac_t); k++)
  3857  098F  01A6               	clrf	Mrf49xaInit@k
  3858  0990                     l3029:	
  3859                           
  3860                           ;mrf49xa.c: 160: {
  3861                           ;mrf49xa.c: 161: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  3862  0990  0826               	movf	Mrf49xaInit@k,w
  3863  0991  3EA0               	addlw	_rfTrcvStatus& (0+255)
  3864  0992  0086               	movwf	6
  3865  0993  304B               	movlw	75
  3866  0994  0187               	clrf	7
  3867  0995  0181               	clrf	1
  3868  0996  0AA6               	incf	Mrf49xaInit@k,f
  3869  0997  0226               	subwf	Mrf49xaInit@k,w
  3870  0998  1C03               	skipc
  3871  0999  2990               	goto	l3029
  3872                           
  3873                           ;mrf49xa.c: 162: }
  3874                           ;mrf49xa.c: 165: PORTCbits.RC6 = 1;
  3875  099A  170E               	bsf	14,6	;volatile
  3876                           
  3877                           ;mrf49xa.c: 166: LATCbits.LATC7 = 0;
  3878  099B  0022               	movlb	2	; select bank2
  3879  099C  138E               	bcf	14,7	;volatile
  3880                           
  3881                           ;mrf49xa.c: 167: PORTBbits.RB7 = 0;
  3882  099D  0020               	movlb	0	; select bank0
  3883  099E  138D               	bcf	13,7	;volatile
  3884                           
  3885                           ;mrf49xa.c: 169: LATCbits.LATC1 = 0;
  3886  099F  0022               	movlb	2	; select bank2
  3887  09A0  108E               	bcf	14,1	;volatile
  3888                           
  3889                           ;mrf49xa.c: 170: LATCbits.LATC4 = 1;
  3890  09A1  160E               	bsf	14,4	;volatile
  3891                           
  3892                           ;mrf49xa.c: 172: LATAbits.LATA5 = 1;
  3893  09A2  168C               	bsf	12,5	;volatile
  3894                           
  3895                           ;mrf49xa.c: 174: Sleepy(64);
  3896  09A3  27EF  3188         	fcall	PL20	;call to abstracted procedure
  3897  09A5  21EE  3188         	fcall	_Sleepy
  3898                           
  3899                           ;mrf49xa.c: 175: LATAbits.LATA4 = 0;
  3900  09A7  0022               	movlb	2	; select bank2
  3901  09A8  120C               	bcf	12,4	;volatile
  3902                           
  3903                           ;mrf49xa.c: 176: Sleepy(64);
  3904  09A9  27EF  3188         	fcall	PL20	;call to abstracted procedure
  3905  09AB  21EE  3188         	fcall	_Sleepy
  3906                           
  3907                           ;mrf49xa.c: 177: LATAbits.LATA4 = 1;
  3908  09AD  0022               	movlb	2	; select bank2
  3909  09AE  160C               	bsf	12,4	;volatile
  3910                           
  3911                           ;mrf49xa.c: 178: Sleepy(64);
  3912  09AF  27EF  3188         	fcall	PL20	;call to abstracted procedure
  3913  09B1  21EE               	fcall	_Sleepy
  3914                           
  3915                           ;mrf49xa.c: 180: rfTrcvStatus.state = RECV_IDLE;
  3916  09B2  0021               	movlb	1	; select bank1
  3917  09B3  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  3918  09B4  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  3919                           
  3920                           ;mrf49xa.c: 182: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(5); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3921  09B5  0020               	movlb	0	; select bank0
  3922  09B6  301B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3923  09B7  01A6               	clrf	Mrf49xaInit@k
  3924  09B8  3182               	movlp	high __stringtab
  3925  09B9  000A               	callw
  3926  09BA  3188               	pagesel	$	;select current page
  3927  09BB  3800               	iorlw	0
  3928  09BC  1903               	btfsc	3,2
  3929  09BD  29E0               	goto	l3059
  3930  09BE                     l3049:	
  3931  09BE  3526               	lslf	Mrf49xaInit@k,w
  3932  09BF  3E1F               	addlw	low (_mrfRegset_Init| (0+32768))
  3933  09C0  3182               	movlp	high __stringtab
  3934  09C1  000A               	callw
  3935  09C2  3188               	pagesel	$	;select current page
  3936  09C3  3A55               	xorlw	85
  3937  09C4  1D03               	skipz
  3938  09C5  29CC               	goto	l3053
  3939  09C6  3005               	movlw	5
  3940  09C7  00A0               	movwf	Sleepy@ms
  3941  09C8  01A1               	clrf	Sleepy@ms+1
  3942  09C9  21EE  3188         	fcall	_Sleepy
  3943  09CB  29D8               	goto	l3055
  3944  09CC                     l3053:	
  3945  09CC  3526               	lslf	Mrf49xaInit@k,w
  3946  09CD  3E20               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3947  09CE  3182               	movlp	high __stringtab
  3948  09CF  000A               	callw
  3949  09D0  3188               	pagesel	$	;select current page
  3950  09D1  00A1               	movwf	Mrf49TxCmd@val
  3951  09D2  3526               	lslf	Mrf49xaInit@k,w
  3952  09D3  3E1F               	addlw	low (_mrfRegset_Init| (0+32768))
  3953  09D4  3182               	movlp	high __stringtab
  3954  09D5  000A               	callw
  3955  09D6  3188               	pagesel	$	;select current page
  3956  09D7  2559               	fcall	_Mrf49TxCmd
  3957  09D8                     l3055:	
  3958  09D8  301B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3959  09D9  0AA6               	incf	Mrf49xaInit@k,f
  3960  09DA  3182               	movlp	high __stringtab
  3961  09DB  000A               	callw
  3962  09DC  3188               	pagesel	$	;select current page
  3963  09DD  0226               	subwf	Mrf49xaInit@k,w
  3964  09DE  1C03               	skipc
  3965  09DF  29BE               	goto	l3049
  3966  09E0                     l3059:	
  3967                           
  3968                           ;mrf49xa.c: 185: Mrf49xaModeRx();
  3969  09E0  2534  3188         	fcall	_Mrf49xaModeRx
  3970                           
  3971                           ;mrf49xa.c: 187: k = 0;
  3972  09E2  01A6               	clrf	Mrf49xaInit@k
  3973  09E3                     l3071:	
  3974                           ;mrf49xa.c: 188: while(PORTAbits.RA2 == 0)
  3975                           
  3976  09E3  0020               	movlb	0	; select bank0
  3977  09E4  190C               	btfsc	12,2	;volatile
  3978  09E5  0008               	return
  3979                           
  3980                           ;mrf49xa.c: 189: {
  3981                           ;mrf49xa.c: 190: k++;
  3982  09E6  0AA6               	incf	Mrf49xaInit@k,f
  3983                           
  3984                           ;mrf49xa.c: 191: if (k == 255)
  3985  09E7  0826               	movf	Mrf49xaInit@k,w
  3986  09E8  3AFF               	xorlw	255
  3987  09E9  1903               	btfsc	3,2
  3988  09EA  298F               	goto	l234
  3989                           
  3990                           ;mrf49xa.c: 196: }
  3991                           ;mrf49xa.c: 201: Mrf49xaServe();
  3992                           
  3993                           ;mrf49xa.c: 195: goto reset;
  3994  09EB  2445  3188         	fcall	_Mrf49xaServe
  3995  09ED  29E3               	goto	l3071
  3996  09EE                     __end_of_Mrf49xaInit:	
  3997  09EE                     __ptext32:	
  3998 ;; *************** function _Sleepy *****************
  3999 ;; Defined at:
  4000 ;;		line 42 in file "../../../src/node/power.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;  ms              2    0[BANK0 ] unsigned int 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;  b               1    3[BANK0 ] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 1F/0
  4011 ;;		On exit  : 1F/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4014 ;;      Params:         0       2       0       0
  4015 ;;      Locals:         0       1       0       0
  4016 ;;      Temps:          0       1       0       0
  4017 ;;      Totals:         0       4       0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    5
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_Mrf49xaInit
  4025 ;;		_Mrf49xaTick
  4026 ;;		_main
  4027 ;;		_PwrRfInit
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function _Sleepy
  4033  09EE                     _Sleepy:	
  4034                           
  4035                           ;power.c: 44: uint8_t b = 0;
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  4039  09EE  01A3               	clrf	Sleepy@b
  4040  09EF                     l2955:	
  4041                           ;power.c: 46: while (ms != 0)
  4042                           
  4043  09EF  0821               	movf	Sleepy@ms+1,w
  4044  09F0  0420               	iorwf	Sleepy@ms,w
  4045  09F1  1903               	btfsc	3,2
  4046  09F2  0008               	return
  4047                           
  4048                           ;power.c: 47: {
  4049                           ;power.c: 48: if ((ms & 1) != 0)
  4050  09F3  1C20               	btfss	Sleepy@ms,0
  4051  09F4  2A04               	goto	l2951
  4052                           
  4053                           ;power.c: 49: {
  4054                           ;power.c: 50: WDTCONbits.WDTPS = b;
  4055  09F5  0823               	movf	Sleepy@b,w
  4056  09F6  00A2               	movwf	??_Sleepy
  4057  09F7  0DA2               	rlf	??_Sleepy,f
  4058  09F8  0021               	movlb	1	; select bank1
  4059  09F9  0817               	movf	23,w	;volatile
  4060  09FA  0020               	movlb	0	; select bank0
  4061  09FB  0622               	xorwf	??_Sleepy,w
  4062  09FC  39C1               	andlw	-63
  4063  09FD  0622               	xorwf	??_Sleepy,w
  4064  09FE  0021               	movlb	1	; select bank1
  4065  09FF  0097               	movwf	23	;volatile
  4066                           
  4067                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  4068  0A00  1417               	bsf	23,0	;volatile
  4069  0A01  0063               	sleep	;# 
  4070                           
  4071                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  4072  0A02  0021               	movlb	1	; select bank1
  4073  0A03  1017               	bcf	23,0	;volatile
  4074  0A04                     l2951:	
  4075                           
  4076                           ;power.c: 56: }
  4077                           ;power.c: 57: ms = ms >> 1;
  4078  0A04  0020               	movlb	0	; select bank0
  4079  0A05  36A1               	lsrf	Sleepy@ms+1,f
  4080  0A06  0CA0               	rrf	Sleepy@ms,f
  4081                           
  4082                           ;power.c: 58: b++;
  4083  0A07  0AA3               	incf	Sleepy@b,f
  4084  0A08  29EF               	goto	l2955
  4085  0A09                     __end_of_Sleepy:	
  4086  0A09                     __ptext54:	
  4087 ;; *************** function _SoftI2cRepeatedStart *****************
  4088 ;; Defined at:
  4089 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;		None               void
  4096 ;; Registers used:
  4097 ;;		wreg, status,2, status,0, pclath, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4103 ;;      Params:         0       0       0       0
  4104 ;;      Locals:         0       0       0       0
  4105 ;;      Temps:          0       0       0       0
  4106 ;;      Totals:         0       0       0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    6
  4110 ;; This function calls:
  4111 ;;		_SoftI2cNop
  4112 ;; This function is called by:
  4113 ;;		_eepromRxBytes
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function _SoftI2cRepeatedStart
  4119  0A09                     _SoftI2cRepeatedStart:	
  4120                           
  4121                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4125  0A09  0021               	movlb	1	; select bank1
  4126  0A0A  120D               	bcf	13,4	;volatile
  4127                           
  4128                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  4129  0A0B  0022               	movlb	2	; select bank2
  4130  0A0C  130D               	bcf	13,6	;volatile
  4131                           
  4132                           ;softI2c.c: 57: SoftI2cNop();
  4133  0A0D  22F3  3188         	fcall	_SoftI2cNop
  4134                           
  4135                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  4136  0A0F  0022               	movlb	2	; select bank2
  4137  0A10  160D               	bsf	13,4	;volatile
  4138                           
  4139                           ;softI2c.c: 60: SoftI2cNop();
  4140  0A11  22F3  3188         	fcall	_SoftI2cNop
  4141                           
  4142                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  4143  0A13  0022               	movlb	2	; select bank2
  4144  0A14  170D               	bsf	13,6	;volatile
  4145                           
  4146                           ;softI2c.c: 63: SoftI2cNop();
  4147  0A15  22F3  3188         	fcall	_SoftI2cNop
  4148                           
  4149                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  4150  0A17  0022               	movlb	2	; select bank2
  4151  0A18  120D               	bcf	13,4	;volatile
  4152                           
  4153                           ;softI2c.c: 66: SoftI2cNop();
  4154  0A19  22F3  3188         	fcall	_SoftI2cNop
  4155                           
  4156                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  4157  0A1B  0022               	movlb	2	; select bank2
  4158  0A1C  130D               	bcf	13,6	;volatile
  4159                           
  4160                           ;softI2c.c: 69: SoftI2cNop();
  4161  0A1D  2AF3               	ljmp	l2661
  4162  0A1E                     __end_of_SoftI2cRepeatedStart:	
  4163  0A1E                     __ptext60:	
  4164 ;; *************** function _Mcp9800Read *****************
  4165 ;; Defined at:
  4166 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  tempL           1    7[BANK0 ] unsigned char 
  4171 ;;  tempH           1    6[BANK0 ] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  2    4[BANK0 ] unsigned int 
  4174 ;; Registers used:
  4175 ;;		wreg, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 1F/0
  4178 ;;		On exit  : 1F/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4181 ;;      Params:         0       2       0       0
  4182 ;;      Locals:         0       2       0       0
  4183 ;;      Temps:          0       0       0       0
  4184 ;;      Totals:         0       4       0       0
  4185 ;;Total ram usage:        4 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    7
  4188 ;; This function calls:
  4189 ;;		_SoftI2cRxByte
  4190 ;;		_SoftI2cStart
  4191 ;;		_SoftI2cStop
  4192 ;;		_SoftI2cTxByte
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _Mcp9800Read
  4200  0A1E                     _Mcp9800Read:	
  4201                           
  4202                           ;mcp9800.c: 21: SoftI2cStart();
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4206  0A1E  22FA  3188         	fcall	_SoftI2cStart
  4207                           
  4208                           ;mcp9800.c: 22: SoftI2cTxByte(0b10010001);
  4209  0A20  3091               	movlw	145
  4210  0A21  228C  3188         	fcall	_SoftI2cTxByte
  4211                           
  4212                           ;mcp9800.c: 23: UI08_t tempH = SoftI2cRxByte(1);
  4213  0A23  3001               	movlw	1
  4214  0A24  22BA  3188         	fcall	_SoftI2cRxByte
  4215  0A26  00A6               	movwf	Mcp9800Read@tempH
  4216                           
  4217                           ;mcp9800.c: 24: UI08_t tempL = SoftI2cRxByte(0);
  4218  0A27  3000               	movlw	0
  4219  0A28  22BA  3188         	fcall	_SoftI2cRxByte
  4220  0A2A  00A7               	movwf	Mcp9800Read@tempL
  4221                           
  4222                           ;mcp9800.c: 25: SoftI2cStop();
  4223  0A2B  2307               	fcall	_SoftI2cStop
  4224                           
  4225                           ;mcp9800.c: 27: return (tempH << 8) | tempL;
  4226  0A2C  0020               	movlb	0	; select bank0
  4227  0A2D  0826               	movf	Mcp9800Read@tempH,w
  4228  0A2E  00A5               	movwf	?_Mcp9800Read+1
  4229  0A2F  01A4               	clrf	?_Mcp9800Read
  4230  0A30  0827               	movf	Mcp9800Read@tempL,w
  4231  0A31  04A4               	iorwf	?_Mcp9800Read,f
  4232  0A32  0008               	return
  4233  0A33                     __end_of_Mcp9800Read:	
  4234  0A33                     __ptext51:	
  4235 ;; *************** function _eepromTxBytes *****************
  4236 ;; Defined at:
  4237 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  address         2    4[BANK0 ] unsigned int 
  4240 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4241 ;;		 -> cfgRam(9), eepromTxByte@byte(1), 
  4242 ;;  size            1    7[BANK0 ] unsigned char 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;		None               void
  4247 ;; Registers used:
  4248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 1F/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4254 ;;      Params:         0       4       0       0
  4255 ;;      Locals:         0       0       0       0
  4256 ;;      Temps:          0       0       0       0
  4257 ;;      Totals:         0       4       0       0
  4258 ;;Total ram usage:        4 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    7
  4261 ;; This function calls:
  4262 ;;		_SoftI2cStart
  4263 ;;		_SoftI2cStop
  4264 ;;		_SoftI2cTxByte
  4265 ;; This function is called by:
  4266 ;;		_CfgSave
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _eepromTxBytes
  4272  0A33                     _eepromTxBytes:	
  4273  0A33                     l3161:	
  4274                           ;incstack = 0
  4275                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4276                           
  4277                           
  4278                           ;24aa64.c: 28: SoftI2cStart();
  4279  0A33  22FA  3188         	fcall	_SoftI2cStart
  4280                           
  4281                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4282  0A35  30A0               	movlw	160
  4283  0A36  228C  3188         	fcall	_SoftI2cTxByte
  4284                           
  4285                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4286  0A38  0020               	movlb	0	; select bank0
  4287  0A39  0825               	movf	eepromTxBytes@address+1,w
  4288  0A3A  228C  3188         	fcall	_SoftI2cTxByte
  4289                           
  4290                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4291  0A3C  0020               	movlb	0	; select bank0
  4292  0A3D  0824               	movf	eepromTxBytes@address,w
  4293  0A3E  228C  3188         	fcall	_SoftI2cTxByte
  4294  0A40                     l3169:	
  4295                           ;24aa64.c: 33: while (size != 0)
  4296                           
  4297  0A40  0020               	movlb	0	; select bank0
  4298  0A41  08A7               	movf	eepromTxBytes@size,f
  4299  0A42  1903               	btfsc	3,2
  4300  0A43  2A4E               	goto	l3171
  4301                           
  4302                           ;24aa64.c: 34: {
  4303                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4304  0A44  0826               	movf	eepromTxBytes@data,w
  4305  0A45  0086               	movwf	6
  4306  0A46  0187               	clrf	7
  4307  0A47  0801               	movf	1,w
  4308  0A48  228C  3188         	fcall	_SoftI2cTxByte
  4309                           
  4310                           ;24aa64.c: 37: data++;
  4311  0A4A  0020               	movlb	0	; select bank0
  4312  0A4B  0AA6               	incf	eepromTxBytes@data,f
  4313                           
  4314                           ;24aa64.c: 38: size--;
  4315  0A4C  03A7               	decf	eepromTxBytes@size,f
  4316  0A4D  2A40               	goto	l3169
  4317  0A4E                     l3171:	
  4318                           
  4319                           ;24aa64.c: 39: }
  4320                           ;24aa64.c: 40: SoftI2cStop();
  4321  0A4E  2B07               	ljmp	l2709
  4322  0A4F                     __end_of_eepromTxBytes:	
  4323  0A4F                     __ptext59:	
  4324 ;; *************** function _Mcp9800Start *****************
  4325 ;; Defined at:
  4326 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  resolution      1    wreg     enum E4251
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  resolution      1    4[BANK0 ] enum E4251
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 1F/2
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4340 ;;      Params:         0       0       0       0
  4341 ;;      Locals:         0       1       0       0
  4342 ;;      Temps:          0       0       0       0
  4343 ;;      Totals:         0       1       0       0
  4344 ;;Total ram usage:        1 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    7
  4347 ;; This function calls:
  4348 ;;		_SoftI2cStart
  4349 ;;		_SoftI2cStop
  4350 ;;		_SoftI2cTxByte
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _Mcp9800Start
  4358  0A4F                     _Mcp9800Start:	
  4359                           
  4360                           ;incstack = 0
  4361                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4362                           ;Mcp9800Start@resolution stored from wreg
  4363  0A4F  0020               	movlb	0	; select bank0
  4364  0A50  00A4               	movwf	Mcp9800Start@resolution
  4365                           
  4366                           ;mcp9800.c: 6: SoftI2cStart();
  4367  0A51  22FA  3188         	fcall	_SoftI2cStart
  4368                           
  4369                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4370  0A53  3090               	movlw	144
  4371  0A54  228C  3188         	fcall	_SoftI2cTxByte
  4372                           
  4373                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4374  0A56  3001               	movlw	1
  4375  0A57  228C  3188         	fcall	_SoftI2cTxByte
  4376                           
  4377                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4378  0A59  0020               	movlb	0	; select bank0
  4379  0A5A  0824               	movf	Mcp9800Start@resolution,w
  4380  0A5B  228C  3188         	fcall	_SoftI2cTxByte
  4381                           
  4382                           ;mcp9800.c: 10: SoftI2cStop();
  4383  0A5D  2307  3188         	fcall	_SoftI2cStop
  4384                           
  4385                           ;mcp9800.c: 12: SoftI2cStart();
  4386  0A5F  22FA  3188         	fcall	_SoftI2cStart
  4387                           
  4388                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4389  0A61  3090               	movlw	144
  4390  0A62  228C  3188         	fcall	_SoftI2cTxByte
  4391                           
  4392                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4393  0A64  3000               	movlw	0
  4394  0A65  228C  3188         	fcall	_SoftI2cTxByte
  4395                           
  4396                           ;mcp9800.c: 15: SoftI2cStop();
  4397  0A67  2B07               	ljmp	l2709
  4398  0A68                     __end_of_Mcp9800Start:	
  4399  0A68                     __ptext53:	
  4400 ;; *************** function _eepromRxBytes *****************
  4401 ;; Defined at:
  4402 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  address         2    4[BANK0 ] unsigned int 
  4405 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4406 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), 
  4407 ;;		 -> cfgRam(9), eepromRxByte@dat(1), 
  4408 ;;  size            1    7[BANK0 ] unsigned char 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;		None
  4411 ;; Return value:  Size  Location     Type
  4412 ;;		None               void
  4413 ;; Registers used:
  4414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 1F/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4420 ;;      Params:         0       4       0       0
  4421 ;;      Locals:         0       0       0       0
  4422 ;;      Temps:          0       0       0       0
  4423 ;;      Totals:         0       4       0       0
  4424 ;;Total ram usage:        4 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    7
  4427 ;; This function calls:
  4428 ;;		_SoftI2cRepeatedStart
  4429 ;;		_SoftI2cRxByte
  4430 ;;		_SoftI2cStart
  4431 ;;		_SoftI2cStop
  4432 ;;		_SoftI2cTxByte
  4433 ;; This function is called by:
  4434 ;;		_handleFwCmd
  4435 ;;		_CfgLoad
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           
  4440                           ;psect for function _eepromRxBytes
  4441  0A68                     _eepromRxBytes:	
  4442  0A68                     l3149:	
  4443                           ;incstack = 0
  4444                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4445                           
  4446                           
  4447                           ;24aa64.c: 7: SoftI2cStart();
  4448  0A68  22FA  3188         	fcall	_SoftI2cStart
  4449                           
  4450                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4451  0A6A  30A0               	movlw	160
  4452  0A6B  228C  3188         	fcall	_SoftI2cTxByte
  4453                           
  4454                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4455  0A6D  0020               	movlb	0	; select bank0
  4456  0A6E  0825               	movf	eepromRxBytes@address+1,w
  4457  0A6F  228C  3188         	fcall	_SoftI2cTxByte
  4458                           
  4459                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4460  0A71  0020               	movlb	0	; select bank0
  4461  0A72  0824               	movf	eepromRxBytes@address,w
  4462  0A73  228C  3188         	fcall	_SoftI2cTxByte
  4463                           
  4464                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4465  0A75  2209  3188         	fcall	_SoftI2cRepeatedStart
  4466                           
  4467                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4468  0A77  30A1               	movlw	161
  4469  0A78  228C  3188         	fcall	_SoftI2cTxByte
  4470  0A7A                     l3157:	
  4471                           ;24aa64.c: 15: while (size != 0)
  4472                           
  4473  0A7A  0020               	movlb	0	; select bank0
  4474  0A7B  08A7               	movf	eepromRxBytes@size,f
  4475  0A7C  1903               	btfsc	3,2
  4476  0A7D  2A8B               	goto	l3159
  4477                           
  4478                           ;24aa64.c: 16: {
  4479                           ;24aa64.c: 17: size--;
  4480  0A7E  03A7               	decf	eepromRxBytes@size,f
  4481                           
  4482                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  4483  0A7F  0826               	movf	eepromRxBytes@data,w
  4484  0A80  0086               	movwf	6
  4485  0A81  3000               	movlw	0
  4486  0A82  0187               	clrf	7
  4487  0A83  08A7               	movf	eepromRxBytes@size,f
  4488  0A84  1D03               	skipz
  4489  0A85  3001               	movlw	1
  4490  0A86  22BA  3188         	fcall	_SoftI2cRxByte
  4491  0A88  0081               	movwf	1
  4492                           
  4493                           ;24aa64.c: 21: data++;
  4494  0A89  0AA6               	incf	eepromRxBytes@data,f
  4495  0A8A  2A7A               	goto	l3157
  4496  0A8B                     l3159:	
  4497                           
  4498                           ;24aa64.c: 22: }
  4499                           ;24aa64.c: 23: SoftI2cStop();
  4500  0A8B  2B07               	ljmp	l2709
  4501  0A8C                     __end_of_eepromRxBytes:	
  4502  0A8C                     __ptext61:	
  4503 ;; *************** function _SoftI2cTxByte *****************
  4504 ;; Defined at:
  4505 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  data            1    wreg     unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  data            1    2[BANK0 ] unsigned char 
  4510 ;;  i               1    3[BANK0 ] unsigned char 
  4511 ;;  ack             1    0        unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      unsigned char 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2, status,0, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/1
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4521 ;;      Params:         0       0       0       0
  4522 ;;      Locals:         0       3       0       0
  4523 ;;      Temps:          0       0       0       0
  4524 ;;      Totals:         0       3       0       0
  4525 ;;Total ram usage:        3 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    6
  4528 ;; This function calls:
  4529 ;;		_SoftI2cNop
  4530 ;; This function is called by:
  4531 ;;		_SoftI2cInit
  4532 ;;		_Mcp9800Start
  4533 ;;		_Mcp9800Read
  4534 ;;		_eepromRxBytes
  4535 ;;		_eepromTxBytes
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _SoftI2cTxByte
  4541  0A8C                     _SoftI2cTxByte:	
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  4545                           ;SoftI2cTxByte@data stored from wreg
  4546  0A8C  0020               	movlb	0	; select bank0
  4547  0A8D  00A2               	movwf	SoftI2cTxByte@data
  4548                           
  4549                           ;softI2c.c: 89: UI08_t i;
  4550                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  4551  0A8E  3080               	movlw	128
  4552  0A8F  00A3               	movwf	SoftI2cTxByte@i
  4553  0A90                     l32:	
  4554                           
  4555                           ;softI2c.c: 92: {
  4556                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  4557  0A90  0022               	movlb	2	; select bank2
  4558  0A91  130D               	bcf	13,6	;volatile
  4559                           
  4560                           ;softI2c.c: 94: SoftI2cNop();
  4561  0A92  22F3  3188         	fcall	_SoftI2cNop
  4562                           
  4563                           ;softI2c.c: 96: if(data & i)
  4564  0A94  0020               	movlb	0	; select bank0
  4565  0A95  0822               	movf	SoftI2cTxByte@data,w
  4566  0A96  0523               	andwf	SoftI2cTxByte@i,w
  4567  0A97  1903               	btfsc	3,2
  4568  0A98  2A9C               	goto	l34
  4569                           
  4570                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  4571  0A99  0022               	movlb	2	; select bank2
  4572  0A9A  160D               	bsf	13,4	;volatile
  4573  0A9B  2A9E               	goto	l35
  4574  0A9C                     l34:	
  4575                           
  4576                           ;softI2c.c: 98: else
  4577                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  4578  0A9C  0022               	movlb	2	; select bank2
  4579  0A9D  120D               	bcf	13,4	;volatile
  4580  0A9E                     l35:	
  4581                           
  4582                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  4583  0A9E  0021               	movlb	1	; select bank1
  4584  0A9F  120D               	bcf	13,4	;volatile
  4585                           
  4586                           ;softI2c.c: 102: SoftI2cNop();
  4587  0AA0  22F3  3188         	fcall	_SoftI2cNop
  4588                           
  4589                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  4590  0AA2  0022               	movlb	2	; select bank2
  4591  0AA3  170D               	bsf	13,6	;volatile
  4592                           
  4593                           ;softI2c.c: 105: SoftI2cNop();
  4594  0AA4  22F3  3188         	fcall	_SoftI2cNop
  4595  0AA6  0020               	movlb	0	; select bank0
  4596  0AA7  36A3               	lsrf	SoftI2cTxByte@i,f
  4597  0AA8  08A3               	movf	SoftI2cTxByte@i,f
  4598  0AA9  1D03               	skipz
  4599  0AAA  2A90               	goto	l32
  4600                           
  4601                           ;softI2c.c: 109: }
  4602                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  4603  0AAB  0022               	movlb	2	; select bank2
  4604  0AAC  130D               	bcf	13,6	;volatile
  4605                           
  4606                           ;softI2c.c: 113: SoftI2cNop();
  4607  0AAD  22F3  3188         	fcall	_SoftI2cNop
  4608                           
  4609                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  4610  0AAF  0021               	movlb	1	; select bank1
  4611  0AB0  160D               	bsf	13,4	;volatile
  4612                           
  4613                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  4614  0AB1  0022               	movlb	2	; select bank2
  4615  0AB2  170D               	bsf	13,6	;volatile
  4616                           
  4617                           ;softI2c.c: 118: SoftI2cNop();
  4618  0AB3  22F3  3188         	fcall	_SoftI2cNop
  4619  0AB5  0020               	movlb	0	; select bank0
  4620  0AB6  080D               	movf	13,w	;volatile
  4621                           
  4622                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  4623  0AB7  0022               	movlb	2	; select bank2
  4624  0AB8  130D               	bcf	13,6	;volatile
  4625                           
  4626                           ;softI2c.c: 123: SoftI2cNop();
  4627  0AB9  2AF3               	ljmp	l2661
  4628  0ABA                     __end_of_SoftI2cTxByte:	
  4629  0ABA                     __ptext64:	
  4630 ;; *************** function _SoftI2cRxByte *****************
  4631 ;; Defined at:
  4632 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  ack             1    wreg     unsigned char 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  ack             1    1[BANK0 ] unsigned char 
  4637 ;;  i               1    3[BANK0 ] unsigned char 
  4638 ;;  data            1    2[BANK0 ] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      unsigned char 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2, status,0, pclath, cstack
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 1F/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4648 ;;      Params:         0       0       0       0
  4649 ;;      Locals:         0       3       0       0
  4650 ;;      Temps:          0       0       0       0
  4651 ;;      Totals:         0       3       0       0
  4652 ;;Total ram usage:        3 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    6
  4655 ;; This function calls:
  4656 ;;		_SoftI2cNop
  4657 ;; This function is called by:
  4658 ;;		_Mcp9800Read
  4659 ;;		_eepromRxBytes
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           
  4664                           ;psect for function _SoftI2cRxByte
  4665  0ABA                     _SoftI2cRxByte:	
  4666                           
  4667                           ;incstack = 0
  4668                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  4669                           ;SoftI2cRxByte@ack stored from wreg
  4670  0ABA  0020               	movlb	0	; select bank0
  4671  0ABB  00A1               	movwf	SoftI2cRxByte@ack
  4672                           
  4673                           ;softI2c.c: 131: UI08_t data=0x00;
  4674  0ABC  01A2               	clrf	SoftI2cRxByte@data
  4675                           
  4676                           ;softI2c.c: 132: UI08_t i;
  4677                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  4678  0ABD  0022               	movlb	2	; select bank2
  4679  0ABE  130D               	bcf	13,6	;volatile
  4680                           
  4681                           ;softI2c.c: 135: SoftI2cNop();
  4682  0ABF  22F3  3188         	fcall	_SoftI2cNop
  4683                           
  4684                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  4685  0AC1  0021               	movlb	1	; select bank1
  4686  0AC2  160D               	bsf	13,4	;volatile
  4687                           
  4688                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  4689  0AC3  0022               	movlb	2	; select bank2
  4690  0AC4  160D               	bsf	13,4	;volatile
  4691                           
  4692                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  4693  0AC5  3080               	movlw	128
  4694  0AC6  0020               	movlb	0	; select bank0
  4695  0AC7  00A3               	movwf	SoftI2cRxByte@i
  4696  0AC8                     l39:	
  4697                           
  4698                           ;softI2c.c: 140: {
  4699                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  4700  0AC8  0022               	movlb	2	; select bank2
  4701  0AC9  130D               	bcf	13,6	;volatile
  4702                           
  4703                           ;softI2c.c: 142: SoftI2cNop();
  4704  0ACA  22F3  3188         	fcall	_SoftI2cNop
  4705                           
  4706                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  4707  0ACC  0022               	movlb	2	; select bank2
  4708  0ACD  170D               	bsf	13,6	;volatile
  4709                           
  4710                           ;softI2c.c: 144: SoftI2cNop();
  4711  0ACE  22F3  3188         	fcall	_SoftI2cNop
  4712                           
  4713                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  4714  0AD0  0020               	movlb	0	; select bank0
  4715                           
  4716                           ;softI2c.c: 150: data |= i;
  4717  0AD1  0823               	movf	SoftI2cRxByte@i,w
  4718  0AD2  1A0D               	btfsc	13,4	;volatile
  4719  0AD3  04A2               	iorwf	SoftI2cRxByte@data,f
  4720  0AD4  36A3               	lsrf	SoftI2cRxByte@i,f
  4721  0AD5  08A3               	movf	SoftI2cRxByte@i,f
  4722  0AD6  1D03               	skipz
  4723  0AD7  2AC8               	goto	l39
  4724                           
  4725                           ;softI2c.c: 152: }
  4726                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  4727  0AD8  0022               	movlb	2	; select bank2
  4728  0AD9  130D               	bcf	13,6	;volatile
  4729                           
  4730                           ;softI2c.c: 155: SoftI2cNop();
  4731  0ADA  22F3  3188         	fcall	_SoftI2cNop
  4732                           
  4733                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  4734  0ADC  0021               	movlb	1	; select bank1
  4735  0ADD  120D               	bcf	13,4	;volatile
  4736                           
  4737                           ;softI2c.c: 158: if(ack)
  4738  0ADE  0020               	movlb	0	; select bank0
  4739  0ADF  0821               	movf	SoftI2cRxByte@ack,w
  4740  0AE0  1903               	btfsc	3,2
  4741  0AE1  2AE5               	goto	l42
  4742                           
  4743                           ;softI2c.c: 159: {
  4744                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  4745  0AE2  0022               	movlb	2	; select bank2
  4746  0AE3  120D               	bcf	13,4	;volatile
  4747                           
  4748                           ;softI2c.c: 161: }
  4749  0AE4  2AE7               	goto	l2765
  4750  0AE5                     l42:	
  4751                           
  4752                           ;softI2c.c: 162: else
  4753                           ;softI2c.c: 163: {
  4754                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  4755  0AE5  0022               	movlb	2	; select bank2
  4756  0AE6  160D               	bsf	13,4	;volatile
  4757  0AE7                     l2765:	
  4758                           
  4759                           ;softI2c.c: 165: }
  4760                           ;softI2c.c: 166: SoftI2cNop();
  4761  0AE7  22F3  3188         	fcall	_SoftI2cNop
  4762                           
  4763                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  4764  0AE9  0022               	movlb	2	; select bank2
  4765  0AEA  170D               	bsf	13,6	;volatile
  4766                           
  4767                           ;softI2c.c: 169: SoftI2cNop();
  4768  0AEB  22F3  3188         	fcall	_SoftI2cNop
  4769                           
  4770                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  4771  0AED  0022               	movlb	2	; select bank2
  4772  0AEE  130D               	bcf	13,6	;volatile
  4773                           
  4774                           ;softI2c.c: 172: SoftI2cNop();
  4775  0AEF  22F3               	fcall	_SoftI2cNop
  4776                           
  4777                           ;softI2c.c: 174: return data;
  4778  0AF0  0020               	movlb	0	; select bank0
  4779  0AF1  0822               	movf	SoftI2cRxByte@data,w
  4780  0AF2  0008               	return
  4781  0AF3                     __end_of_SoftI2cRxByte:	
  4782  0AF3                     __ptext65:	
  4783 ;; *************** function _SoftI2cNop *****************
  4784 ;; Defined at:
  4785 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;		None               void
  4792 ;; Registers used:
  4793 ;;		wreg
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/2
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4799 ;;      Params:         0       0       0       0
  4800 ;;      Locals:         0       0       0       0
  4801 ;;      Temps:          0       1       0       0
  4802 ;;      Totals:         0       1       0       0
  4803 ;;Total ram usage:        1 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    5
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_SoftI2cStart
  4810 ;;		_SoftI2cRepeatedStart
  4811 ;;		_SoftI2cStop
  4812 ;;		_SoftI2cTxByte
  4813 ;;		_SoftI2cRxByte
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           
  4818                           ;psect for function _SoftI2cNop
  4819  0AF3                     _SoftI2cNop:	
  4820  0AF3                     l2661:	
  4821                           ;incstack = 0
  4822                           ; Regs used in _SoftI2cNop: [wreg]
  4823                           
  4824                           
  4825                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  4826  0AF3  300A               	movlw	10
  4827  0AF4  0020               	movlb	0	; select bank0
  4828  0AF5  00A0               	movwf	??_SoftI2cNop
  4829  0AF6                     u2817:	
  4830  0AF6  0BA0               	decfsz	??_SoftI2cNop,f
  4831  0AF7  2AF6               	goto	u2817
  4832  0AF8  0000               	nop
  4833  0AF9  0008               	return
  4834  0AFA                     __end_of_SoftI2cNop:	
  4835  0AFA                     __ptext63:	
  4836 ;; *************** function _SoftI2cStart *****************
  4837 ;; Defined at:
  4838 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;		None               void
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, pclath, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/1
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4852 ;;      Params:         0       0       0       0
  4853 ;;      Locals:         0       0       0       0
  4854 ;;      Temps:          0       0       0       0
  4855 ;;      Totals:         0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    6
  4859 ;; This function calls:
  4860 ;;		_SoftI2cNop
  4861 ;; This function is called by:
  4862 ;;		_SoftI2cInit
  4863 ;;		_Mcp9800Start
  4864 ;;		_Mcp9800Read
  4865 ;;		_eepromRxBytes
  4866 ;;		_eepromTxBytes
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           
  4871                           ;psect for function _SoftI2cStart
  4872  0AFA                     _SoftI2cStart:	
  4873                           
  4874                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  4875                           
  4876                           ;incstack = 0
  4877                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  4878  0AFA  0021               	movlb	1	; select bank1
  4879  0AFB  120D               	bcf	13,4	;volatile
  4880                           
  4881                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  4882  0AFC  0022               	movlb	2	; select bank2
  4883  0AFD  170D               	bsf	13,6	;volatile
  4884                           
  4885                           ;softI2c.c: 43: SoftI2cNop();
  4886  0AFE  22F3  3188         	fcall	_SoftI2cNop
  4887                           
  4888                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  4889  0B00  0022               	movlb	2	; select bank2
  4890  0B01  120D               	bcf	13,4	;volatile
  4891                           
  4892                           ;softI2c.c: 46: SoftI2cNop();
  4893  0B02  22F3  3188         	fcall	_SoftI2cNop
  4894                           
  4895                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  4896  0B04  0022               	movlb	2	; select bank2
  4897  0B05  130D               	bcf	13,6	;volatile
  4898                           
  4899                           ;softI2c.c: 48: SoftI2cNop();
  4900  0B06  2AF3               	ljmp	l2661
  4901  0B07                     __end_of_SoftI2cStart:	
  4902  0B07                     __ptext62:	
  4903 ;; *************** function _SoftI2cStop *****************
  4904 ;; Defined at:
  4905 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;		None               void
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, pclath, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/1
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4919 ;;      Params:         0       0       0       0
  4920 ;;      Locals:         0       0       0       0
  4921 ;;      Temps:          0       0       0       0
  4922 ;;      Totals:         0       0       0       0
  4923 ;;Total ram usage:        0 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    6
  4926 ;; This function calls:
  4927 ;;		_SoftI2cNop
  4928 ;; This function is called by:
  4929 ;;		_SoftI2cInit
  4930 ;;		_Mcp9800Start
  4931 ;;		_Mcp9800Read
  4932 ;;		_eepromRxBytes
  4933 ;;		_eepromTxBytes
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           
  4938                           ;psect for function _SoftI2cStop
  4939  0B07                     _SoftI2cStop:	
  4940  0B07                     l2709:	
  4941                           ;incstack = 0
  4942                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  4943                           
  4944                           
  4945                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  4946  0B07  0021               	movlb	1	; select bank1
  4947  0B08  120D               	bcf	13,4	;volatile
  4948                           
  4949                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  4950  0B09  0022               	movlb	2	; select bank2
  4951  0B0A  120D               	bcf	13,4	;volatile
  4952                           
  4953                           ;softI2c.c: 78: SoftI2cNop();
  4954  0B0B  22F3  3188         	fcall	_SoftI2cNop
  4955                           
  4956                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  4957  0B0D  0022               	movlb	2	; select bank2
  4958  0B0E  170D               	bsf	13,6	;volatile
  4959                           
  4960                           ;softI2c.c: 81: SoftI2cNop();
  4961  0B0F  22F3  3188         	fcall	_SoftI2cNop
  4962                           
  4963                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  4964  0B11  0022               	movlb	2	; select bank2
  4965  0B12  160D               	bsf	13,4	;volatile
  4966                           
  4967                           ;softI2c.c: 83: SoftI2cNop();
  4968  0B13  22F3  3188         	fcall	_SoftI2cNop
  4969                           
  4970                           ;softI2c.c: 84: SoftI2cNop();
  4971  0B15  2AF3               	ljmp	l2661
  4972  0B16                     __end_of_SoftI2cStop:	
  4973  0B16                     __ptext34:	
  4974 ;; *************** function _Mrf49xaNeedsReset *****************
  4975 ;; Defined at:
  4976 ;;		line 146 in file "../../../src/devices/mrf49xa.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;		None               void
  4983 ;; Registers used:
  4984 ;;		None
  4985 ;; Tracked objects:
  4986 ;;		On entry : 1E/1
  4987 ;;		On exit  : 1F/1
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4990 ;;      Params:         0       0       0       0
  4991 ;;      Locals:         0       0       0       0
  4992 ;;      Temps:          0       0       0       0
  4993 ;;      Totals:         0       0       0       0
  4994 ;;Total ram usage:        0 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    5
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_Mrf49xaTick
  5001 ;;		_Mrf49xaServe
  5002 ;;		_main
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _Mrf49xaNeedsReset
  5008  0B16                     _Mrf49xaNeedsReset:	
  5009                           
  5010                           ;mrf49xa.c: 148: rfTrcvStatus.needsReset = 1;
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _Mrf49xaNeedsReset: []
  5014  0B16  0021               	movlb	1	; select bank1
  5015  0B17  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
  5016  0B18  0008               	return
  5017  0B19                     __end_of_Mrf49xaNeedsReset:	
  5018  0B19                     __ptext23:	
  5019 ;; *************** function _PwrI2cSleep *****************
  5020 ;; Defined at:
  5021 ;;		line 73 in file "../../../src/node/power.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;		None               void
  5028 ;; Registers used:
  5029 ;;		None
  5030 ;; Tracked objects:
  5031 ;;		On entry : 1F/2
  5032 ;;		On exit  : 1F/1
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5035 ;;      Params:         0       0       0       0
  5036 ;;      Locals:         0       0       0       0
  5037 ;;      Temps:          0       0       0       0
  5038 ;;      Totals:         0       0       0       0
  5039 ;;Total ram usage:        0 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    5
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_main
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           
  5050                           ;psect for function _PwrI2cSleep
  5051  0B19                     _PwrI2cSleep:	
  5052                           
  5053                           ;power.c: 75: LATBbits.LATB6 = 1;
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _PwrI2cSleep: []
  5057  0B19  170D               	bsf	13,6	;volatile
  5058                           
  5059                           ;power.c: 76: LATBbits.LATB4 = 1;
  5060  0B1A  160D               	bsf	13,4	;volatile
  5061                           
  5062                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  5063  0B1B  0021               	movlb	1	; select bank1
  5064  0B1C  130D               	bcf	13,6	;volatile
  5065                           
  5066                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  5067  0B1D  120D               	bcf	13,4	;volatile
  5068  0B1E  0008               	return
  5069  0B1F                     __end_of_PwrI2cSleep:	
  5070  0B1F                     __ptext14:	
  5071 ;; *************** function _PwrSensorSleep *****************
  5072 ;; Defined at:
  5073 ;;		line 157 in file "../../../src/node/power.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;		None               void
  5080 ;; Registers used:
  5081 ;;		None
  5082 ;; Tracked objects:
  5083 ;;		On entry : 1E/1
  5084 ;;		On exit  : 1F/2
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5087 ;;      Params:         0       0       0       0
  5088 ;;      Locals:         0       0       0       0
  5089 ;;      Temps:          0       0       0       0
  5090 ;;      Totals:         0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    5
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_main
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _PwrSensorSleep
  5103  0B1F                     _PwrSensorSleep:	
  5104                           
  5105                           ;power.c: 159: LATCbits.LATC2 = 0;
  5106                           
  5107                           ;incstack = 0
  5108                           ; Regs used in _PwrSensorSleep: []
  5109  0B1F  0022               	movlb	2	; select bank2
  5110  0B20  110E               	bcf	14,2	;volatile
  5111  0B21  0008               	return
  5112  0B22                     __end_of_PwrSensorSleep:	
  5113  0B22                     __ptext57:	
  5114 ;; *************** function _Mrf49xaFreePacket *****************
  5115 ;; Defined at:
  5116 ;;		line 87 in file "../../../src/devices/mrf49xa_mac.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  5119 ;;		 -> rfTrcvStatus(75), 
  5120 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5121 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  inst            1    1[BANK0 ] PTR struct rfTrcvStatus_
  5124 ;;		 -> rfTrcvStatus(75), 
  5125 ;; Return value:  Size  Location     Type
  5126 ;;		None               void
  5127 ;; Registers used:
  5128 ;;		wreg, fsr1l, fsr1h, status,2
  5129 ;; Tracked objects:
  5130 ;;		On entry : 1F/0
  5131 ;;		On exit  : 1F/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5134 ;;      Params:         0       1       0       0
  5135 ;;      Locals:         0       1       0       0
  5136 ;;      Temps:          0       0       0       0
  5137 ;;      Totals:         0       2       0       0
  5138 ;;Total ram usage:        2 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    5
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_Mrf49xaTick
  5145 ;;		_HandlePacket
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _Mrf49xaFreePacket
  5151  0B22                     _Mrf49xaFreePacket:	
  5152  0B22                     l3273:	
  5153                           ;incstack = 0
  5154                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5155                           
  5156                           
  5157                           ;mrf49xa_mac.c: 89: packet->state = PKT_FREE;
  5158  0B22  0820               	movf	Mrf49xaFreePacket@packet,w
  5159  0B23  0086               	movwf	6
  5160  0B24  0187               	clrf	7
  5161  0B25  0181               	clrf	1
  5162  0B26  0008               	return
  5163  0B27                     __end_of_Mrf49xaFreePacket:	
  5164  0B27                     __ptext52:	
  5165 ;; *************** function _CfgLoad *****************
  5166 ;; Defined at:
  5167 ;;		line 19 in file "../../../src/node/config.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 1E/1
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5181 ;;      Params:         0       0       0       0
  5182 ;;      Locals:         0       0       0       0
  5183 ;;      Temps:          0       0       0       0
  5184 ;;      Totals:         0       0       0       0
  5185 ;;Total ram usage:        0 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    8
  5188 ;; This function calls:
  5189 ;;		_eepromRxBytes
  5190 ;; This function is called by:
  5191 ;;		_handleCfgCmd
  5192 ;;		_main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _CfgLoad
  5198  0B27                     _CfgLoad:	
  5199  0B27                     l3517:	
  5200                           ;incstack = 0
  5201                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5202                           
  5203                           
  5204                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  5205  0B27  0020               	movlb	0	; select bank0
  5206  0B28  3037               	movlw	_cfgRam& (0+255)
  5207  0B29  01A4               	clrf	eepromRxBytes@address
  5208  0B2A  01A5               	clrf	eepromRxBytes@address+1
  5209  0B2B  00A6               	movwf	eepromRxBytes@data
  5210  0B2C  3009               	movlw	9
  5211  0B2D  00A7               	movwf	eepromRxBytes@size
  5212  0B2E  2A68               	ljmp	l3149
  5213  0B2F                     __end_of_CfgLoad:	
  5214  0B2F                     __ptext43:	
  5215 ;; *************** function _HandlePacket *****************
  5216 ;; Defined at:
  5217 ;;		line 150 in file "../../../src/rfstack/client.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  5220 ;;		 -> rfTrcvStatus(75), 
  5221 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  5222 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  inst            1   13[BANK0 ] PTR struct rfTrcvStatus_
  5225 ;;		 -> rfTrcvStatus(75), 
  5226 ;;  response        1   12[BANK0 ] struct .
  5227 ;; Return value:  Size  Location     Type
  5228 ;;		None               void
  5229 ;; Registers used:
  5230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 1F/0
  5233 ;;		On exit  : 1F/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5236 ;;      Params:         0       1       0       0
  5237 ;;      Locals:         0       2       0       0
  5238 ;;      Temps:          0       1       0       0
  5239 ;;      Totals:         0       4       0       0
  5240 ;;Total ram usage:        4 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:   10
  5243 ;; This function calls:
  5244 ;;		_Mrf49xaFreePacket
  5245 ;;		_Mrf49xaTxAck
  5246 ;;		_Mrf49xaTxPacket
  5247 ;;		_handleCfgCmd
  5248 ;;		_handleCfgRead
  5249 ;;		_handleCfgWrite
  5250 ;;		_handleFwCmd
  5251 ;; This function is called by:
  5252 ;;		_Mrf49xaTick
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _HandlePacket
  5258  0B2F                     _HandlePacket:	
  5259                           
  5260                           ;incstack = 0
  5261                           ; Regs used in _HandlePacket: [allreg]
  5262                           ;HandlePacket@inst stored from wreg
  5263  0B2F  00AD               	movwf	HandlePacket@inst
  5264                           
  5265                           ;client.c: 153: struct
  5266                           ;client.c: 154: {
  5267                           ;client.c: 155: bool_t reset:1;
  5268                           ;client.c: 156: bool_t needAck:1;
  5269                           ;client.c: 157: bool_t sendAck:1;
  5270                           ;client.c: 158: bool_t sendMsg:1;
  5271                           ;client.c: 159: } response;
  5272                           ;client.c: 162: switch (packet->packet.id)
  5273  0B30  2B6A               	goto	l3429
  5274  0B31                     l3403:	
  5275                           
  5276                           ;client.c: 165: packet->packet.data[0] = 2;
  5277  0B31  082A               	movf	HandlePacket@packet,w
  5278  0B32  3E06               	addlw	6
  5279  0B33  0086               	movwf	6
  5280  0B34  3002               	movlw	2
  5281  0B35  0187               	clrf	7
  5282  0B36  0081               	movwf	1
  5283  0B37                     l3405:	
  5284                           
  5285                           ;client.c: 166: response.sendMsg = 1;
  5286  0B37  0020               	movlb	0	; select bank0
  5287  0B38  15AC               	bsf	HandlePacket@response,3
  5288                           
  5289                           ;client.c: 167: break;
  5290  0B39  2B88               	goto	l552
  5291  0B3A                     l3407:	
  5292                           
  5293                           ;client.c: 170: if (inst->txPacket.crc == packet->packet.data[1] &&
  5294                           ;client.c: 171: inst->txPacket.packet.id == packet->packet.data[0])
  5295  0B3A  082A               	movf	HandlePacket@packet,w
  5296  0B3B  3E07               	addlw	7
  5297  0B3C  0086               	movwf	6
  5298  0B3D  0187               	clrf	7
  5299  0B3E  082D               	movf	HandlePacket@inst,w
  5300  0B3F  3E47               	addlw	71
  5301  0B40  0084               	movwf	4
  5302  0B41  0185               	clrf	5
  5303  0B42  0800               	movf	0,w
  5304  0B43  0601               	xorwf	1,w
  5305  0B44  1D03               	skipz
  5306  0B45  2B88               	goto	l552
  5307  0B46  082A               	movf	HandlePacket@packet,w
  5308  0B47  3E06               	addlw	6
  5309  0B48  0086               	movwf	6
  5310  0B49  082D               	movf	HandlePacket@inst,w
  5311  0B4A  3E35               	addlw	53
  5312  0B4B  0084               	movwf	4
  5313  0B4C  0800               	movf	0,w
  5314  0B4D  0601               	xorwf	1,w
  5315  0B4E  1D03               	skipz
  5316  0B4F  2B88               	goto	l552
  5317                           
  5318                           ;client.c: 172: {
  5319                           ;client.c: 173: inst->txPacket.needAck = ACK_RECEIVED;
  5320  0B50  082D               	movf	HandlePacket@inst,w
  5321  0B51  3E48               	addlw	72
  5322  0B52  0086               	movwf	6
  5323  0B53  0801               	movf	1,w
  5324  0B54  393F               	andlw	-193
  5325  0B55  3880               	iorlw	128
  5326  0B56  0081               	movwf	1
  5327  0B57  2B88               	goto	l552
  5328  0B58                     l555:	
  5329                           ;client.c: 178: syncedTime = *((uint32_t*) packet->packet.data);
  5330                           
  5331                           
  5332                           ;client.c: 179: response.sendAck = 1;
  5333  0B58  152C               	bsf	HandlePacket@response,2
  5334                           
  5335                           ;client.c: 180: break;
  5336  0B59  2B88               	goto	l552
  5337  0B5A                     l3413:	
  5338                           
  5339                           ;client.c: 190: handleCfgCmd(packet);
  5340  0B5A  082A               	movf	HandlePacket@packet,w
  5341  0B5B  23CD  3188         	fcall	_handleCfgCmd
  5342  0B5D  2B37               	goto	l3405
  5343  0B5E                     l3417:	
  5344                           
  5345                           ;client.c: 196: handleCfgWrite(packet);
  5346  0B5E  082A               	movf	HandlePacket@packet,w
  5347  0B5F  23F8  3188         	fcall	_handleCfgWrite
  5348  0B61                     l3419:	
  5349                           
  5350                           ;client.c: 198: handleCfgRead(packet);
  5351  0B61  082A               	movf	HandlePacket@packet,w
  5352  0B62  2762  3188         	fcall	_handleCfgRead
  5353  0B64  2B37               	goto	l3405
  5354  0B65                     l3423:	
  5355                           
  5356                           ;client.c: 205: handleFwCmd(packet);
  5357  0B65  082A               	movf	HandlePacket@packet,w
  5358  0B66  3182  228F  3188   	fcall	_handleFwCmd
  5359  0B69  2B37               	goto	l3405
  5360  0B6A                     l3429:	
  5361  0B6A  082A               	movf	HandlePacket@packet,w
  5362  0B6B  3E04               	addlw	4
  5363  0B6C  0086               	movwf	6
  5364  0B6D  0187               	clrf	7
  5365  0B6E  0801               	movf	1,w
  5366                           
  5367                           ; Switch size 1, requested type "space"
  5368                           ; Number of cases is 8, Range of values is 160 to 192
  5369                           ; switch strategies available:
  5370                           ; Name         Instructions Cycles
  5371                           ; simple_byte           25    13 (average)
  5372                           ; direct_byte           75     9 (fixed)
  5373                           ; jumptable            263     9 (fixed)
  5374                           ;	Chosen strategy is simple_byte
  5375  0B6F  3AA0               	xorlw	160	; case 160
  5376  0B70  1903               	skipnz
  5377  0B71  2B31               	goto	l3403
  5378  0B72  3A01               	xorlw	1	; case 161
  5379  0B73  1903               	skipnz
  5380  0B74  2B3A               	goto	l3407
  5381  0B75  3A03               	xorlw	3	; case 162
  5382  0B76  1903               	skipnz
  5383  0B77  2B58               	goto	l555
  5384  0B78  3A01               	xorlw	1	; case 163
  5385  0B79  1903               	skipnz
  5386  0B7A  2B88               	goto	l552
  5387  0B7B  3A13               	xorlw	19	; case 176
  5388  0B7C  1903               	skipnz
  5389  0B7D  2B5A               	goto	l3413
  5390  0B7E  3A01               	xorlw	1	; case 177
  5391  0B7F  1903               	skipnz
  5392  0B80  2B5E               	goto	l3417
  5393  0B81  3A03               	xorlw	3	; case 178
  5394  0B82  1903               	skipnz
  5395  0B83  2B61               	goto	l3419
  5396  0B84  3A72               	xorlw	114	; case 192
  5397  0B85  1903               	skipnz
  5398  0B86  2B65               	goto	l3423
  5399  0B87  2B88               	goto	l552
  5400  0B88                     l552:	
  5401                           
  5402                           ;client.c: 228: response.reset = 1;
  5403  0B88  142C               	bsf	HandlePacket@response,0
  5404                           
  5405                           ;client.c: 231: if (response.sendMsg)
  5406  0B89  1DAC               	btfss	HandlePacket@response,3
  5407  0B8A  2B97               	goto	l561
  5408                           
  5409                           ;client.c: 232: response.reset = Mrf49xaTxPacket(inst, packet, 1, response.needAck);
  5410  0B8B  082A               	movf	HandlePacket@packet,w
  5411  0B8C  00A0               	movwf	Mrf49xaTxPacket@packet
  5412  0B8D  3000               	movlw	0
  5413  0B8E  01A1               	clrf	Mrf49xaTxPacket@response
  5414  0B8F  0AA1               	incf	Mrf49xaTxPacket@response,f
  5415  0B90  18AC               	btfsc	HandlePacket@response,1
  5416  0B91  3001               	movlw	1
  5417  0B92  00A2               	movwf	Mrf49xaTxPacket@needAck
  5418  0B93  082D               	movf	HandlePacket@inst,w
  5419  0B94  26F4  3188         	fcall	_Mrf49xaTxPacket
  5420  0B96  2B9E               	goto	L3
  5421  0B97                     l561:	
  5422                           
  5423                           ;client.c: 233: else if (response.sendAck)
  5424  0B97  1D2C               	btfss	HandlePacket@response,2
  5425  0B98  2BA4               	goto	l563
  5426                           
  5427                           ;client.c: 234: response.reset = Mrf49xaTxAck(inst, packet);
  5428  0B99  082A               	movf	HandlePacket@packet,w
  5429  0B9A  00A8               	movwf	Mrf49xaTxAck@packet
  5430  0B9B  082D               	movf	HandlePacket@inst,w
  5431  0B9C  23AA  3188         	fcall	_Mrf49xaTxAck
  5432  0B9E                     L3:	
  5433  0B9E  00AB               	movwf	??_HandlePacket
  5434  0B9F  062C               	xorwf	HandlePacket@response,w
  5435  0BA0  39FE               	andlw	-2
  5436  0BA1  062B               	xorwf	??_HandlePacket,w
  5437  0BA2  00AC               	movwf	HandlePacket@response
  5438  0BA3  2BA5               	goto	l562
  5439  0BA4                     l563:	
  5440                           
  5441                           ;client.c: 235: else
  5442                           ;client.c: 236: response.reset = 0;
  5443  0BA4  102C               	bcf	HandlePacket@response,0
  5444  0BA5                     l562:	
  5445                           
  5446                           ;client.c: 238: if (!response.reset)
  5447  0BA5  182C               	btfsc	HandlePacket@response,0
  5448  0BA6  0008               	return
  5449                           
  5450                           ;client.c: 239: Mrf49xaFreePacket(inst, packet);
  5451  0BA7  082A               	movf	HandlePacket@packet,w
  5452  0BA8  00A0               	movwf	Mrf49xaFreePacket@packet
  5453  0BA9  2B22               	ljmp	l3273
  5454  0BAA                     __end_of_HandlePacket:	
  5455  0BAA                     __ptext55:	
  5456 ;; *************** function _Mrf49xaTxAck *****************
  5457 ;; Defined at:
  5458 ;;		line 75 in file "../../../src/devices/mrf49xa_mac.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  5461 ;;		 -> rfTrcvStatus(75), 
  5462 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5463 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  inst            1    9[BANK0 ] PTR struct rfTrcvStatus_
  5466 ;;		 -> rfTrcvStatus(75), 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      unsigned char 
  5469 ;; Registers used:
  5470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 1F/0
  5473 ;;		On exit  : 1F/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5476 ;;      Params:         0       1       0       0
  5477 ;;      Locals:         0       1       0       0
  5478 ;;      Temps:          0       0       0       0
  5479 ;;      Totals:         0       2       0       0
  5480 ;;Total ram usage:        2 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    6
  5483 ;; This function calls:
  5484 ;;		_Mrf49xaTxPacket
  5485 ;; This function is called by:
  5486 ;;		_HandlePacket
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _Mrf49xaTxAck
  5492  0BAA                     _Mrf49xaTxAck:	
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5496                           ;Mrf49xaTxAck@inst stored from wreg
  5497  0BAA  00A9               	movwf	Mrf49xaTxAck@inst
  5498                           
  5499                           ;mrf49xa_mac.c: 77: packet->packet.data[0] = packet->packet.id;
  5500  0BAB  0828               	movf	Mrf49xaTxAck@packet,w
  5501  0BAC  3E06               	addlw	6
  5502  0BAD  0086               	movwf	6
  5503  0BAE  0187               	clrf	7
  5504  0BAF  0828               	movf	Mrf49xaTxAck@packet,w
  5505  0BB0  3E04               	addlw	4
  5506  0BB1  0084               	movwf	4
  5507  0BB2  0185               	clrf	5
  5508  0BB3  0800               	movf	0,w
  5509  0BB4  0081               	movwf	1
  5510                           
  5511                           ;mrf49xa_mac.c: 78: packet->packet.data[1] = packet->crc;
  5512  0BB5  0828               	movf	Mrf49xaTxAck@packet,w
  5513  0BB6  3E07               	addlw	7
  5514  0BB7  0086               	movwf	6
  5515  0BB8  0828               	movf	Mrf49xaTxAck@packet,w
  5516  0BB9  3E16               	addlw	22
  5517  0BBA  0084               	movwf	4
  5518  0BBB  0800               	movf	0,w
  5519  0BBC  0081               	movwf	1
  5520                           
  5521                           ;mrf49xa_mac.c: 81: packet->packet.id = RF_ACK;
  5522  0BBD  0828               	movf	Mrf49xaTxAck@packet,w
  5523  0BBE  3E04               	addlw	4
  5524  0BBF  0086               	movwf	6
  5525  0BC0  30A1               	movlw	161
  5526  0BC1  0081               	movwf	1
  5527                           
  5528                           ;mrf49xa_mac.c: 82: packet->packet.size = 2;
  5529  0BC2  0A28               	incf	Mrf49xaTxAck@packet,w
  5530  0BC3  0086               	movwf	6
  5531  0BC4  3002               	movlw	2
  5532  0BC5  0081               	movwf	1
  5533                           
  5534                           ;mrf49xa_mac.c: 84: return Mrf49xaTxPacket(inst, packet, ((uint8_t)1), ((uint8_t)0));
  5535  0BC6  0828               	movf	Mrf49xaTxAck@packet,w
  5536  0BC7  00A0               	movwf	Mrf49xaTxPacket@packet
  5537  0BC8  01A1               	clrf	Mrf49xaTxPacket@response
  5538  0BC9  0AA1               	incf	Mrf49xaTxPacket@response,f
  5539  0BCA  01A2               	clrf	Mrf49xaTxPacket@needAck
  5540  0BCB  0829               	movf	Mrf49xaTxAck@inst,w
  5541  0BCC  2EF4               	ljmp	_Mrf49xaTxPacket
  5542  0BCD                     __end_of_Mrf49xaTxAck:	
  5543  0BCD                     __ptext49:	
  5544 ;; *************** function _handleCfgCmd *****************
  5545 ;; Defined at:
  5546 ;;		line 124 in file "../../../src/rfstack/client.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5549 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5552 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;		None               void
  5555 ;; Registers used:
  5556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 1F/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5562 ;;      Params:         0       0       0       0
  5563 ;;      Locals:         0       1       0       0
  5564 ;;      Temps:          0       0       0       0
  5565 ;;      Totals:         0       1       0       0
  5566 ;;Total ram usage:        1 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    9
  5569 ;; This function calls:
  5570 ;;		_CfgLoad
  5571 ;;		_CfgSave
  5572 ;; This function is called by:
  5573 ;;		_HandlePacket
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _handleCfgCmd
  5579  0BCD                     _handleCfgCmd:	
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5583                           ;handleCfgCmd@packet stored from wreg
  5584  0BCD  00A8               	movwf	handleCfgCmd@packet
  5585                           
  5586                           ;client.c: 126: switch (packet->packet.data[0])
  5587  0BCE  2BE5               	goto	l3513
  5588  0BCF                     l3503:	
  5589                           
  5590                           ;client.c: 129: CfgSave();
  5591  0BCF  3183  2B13         	ljmp	l3515
  5592  0BD1                     l3505:	
  5593                           ;client.c: 130: break;
  5594                           
  5595                           
  5596                           ;client.c: 133: CfgLoad();
  5597  0BD1  2B27               	ljmp	l3517
  5598  0BD2                     l3507:	
  5599                           ;client.c: 134: break;
  5600                           
  5601                           
  5602                           ;client.c: 137: packet->packet.size = 2;
  5603  0BD2  0A28               	incf	handleCfgCmd@packet,w
  5604  0BD3  0086               	movwf	6
  5605  0BD4  3002               	movlw	2
  5606  0BD5  27E9               	fcall	PL18	;call to abstracted procedure
  5607  0BD6  3002               	movlw	2
  5608  0BD7  0081               	movwf	1
  5609                           
  5610                           ;client.c: 139: break;
  5611  0BD8  0008               	return
  5612  0BD9                     l3509:	
  5613                           
  5614                           ;client.c: 142: packet->packet.size = 3;
  5615  0BD9  0A28               	incf	handleCfgCmd@packet,w
  5616  0BDA  0086               	movwf	6
  5617  0BDB  3003               	movlw	3
  5618                           
  5619                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  5620  0BDC  27E9               	fcall	PL18	;call to abstracted procedure
  5621  0BDD  083F               	movf	_cfgRam+8,w
  5622  0BDE  0081               	movwf	1
  5623                           
  5624                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  5625  0BDF  0828               	movf	handleCfgCmd@packet,w
  5626  0BE0  3E08               	addlw	8
  5627  0BE1  0086               	movwf	6
  5628  0BE2  083E               	movf	_cfgRam+7,w
  5629  0BE3  0081               	movwf	1
  5630                           
  5631                           ;client.c: 145: break;
  5632  0BE4  0008               	return
  5633  0BE5                     l3513:	
  5634  0BE5  0828               	movf	handleCfgCmd@packet,w
  5635  0BE6  3E06               	addlw	6
  5636  0BE7  0086               	movwf	6
  5637  0BE8  0187               	clrf	7
  5638  0BE9  0801               	movf	1,w
  5639                           
  5640                           ; Switch size 1, requested type "space"
  5641                           ; Number of cases is 4, Range of values is 1 to 4
  5642                           ; switch strategies available:
  5643                           ; Name         Instructions Cycles
  5644                           ; simple_byte           13     7 (average)
  5645                           ; direct_byte           17     9 (fixed)
  5646                           ; jumptable            263     9 (fixed)
  5647                           ;	Chosen strategy is simple_byte
  5648  0BEA  3A01               	xorlw	1	; case 1
  5649  0BEB  1903               	skipnz
  5650  0BEC  2BCF               	goto	l3503
  5651  0BED  3A03               	xorlw	3	; case 2
  5652  0BEE  1903               	skipnz
  5653  0BEF  2BD1               	goto	l3505
  5654  0BF0  3A01               	xorlw	1	; case 3
  5655  0BF1  1903               	skipnz
  5656  0BF2  2BD2               	goto	l3507
  5657  0BF3  3A07               	xorlw	7	; case 4
  5658  0BF4  1903               	skipnz
  5659  0BF5  2BD9               	goto	l3509
  5660  0BF6  2BF7               	goto	l547
  5661  0BF7                     l547:	
  5662  0BF7  0008               	return
  5663  0BF8                     __end_of_handleCfgCmd:	
  5664  0BF8                     __ptext45:	
  5665 ;; *************** function _handleCfgWrite *****************
  5666 ;; Defined at:
  5667 ;;		line 115 in file "../../../src/rfstack/client.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5670 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5673 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  5674 ;;  index           1    7[BANK0 ] unsigned char 
  5675 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;		None               void
  5678 ;; Registers used:
  5679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 1F/0
  5682 ;;		On exit  : 1F/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5685 ;;      Params:         0       0       0       0
  5686 ;;      Locals:         0       3       0       0
  5687 ;;      Temps:          0       0       0       0
  5688 ;;      Totals:         0       3       0       0
  5689 ;;Total ram usage:        3 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    6
  5692 ;; This function calls:
  5693 ;;		_CfgGetSizeByType
  5694 ;;		_memcpy
  5695 ;; This function is called by:
  5696 ;;		_HandlePacket
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _handleCfgWrite
  5702  0BF8                     _handleCfgWrite:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5706                           ;handleCfgWrite@packet stored from wreg
  5707  0BF8  00A8               	movwf	handleCfgWrite@packet
  5708                           
  5709                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  5710  0BF9  0086               	movwf	6
  5711  0BFA  0187               	clrf	7
  5712  0BFB  3F46               	moviw [6]fsr1
  5713  0BFC  00A7               	movwf	handleCfgWrite@index
  5714                           
  5715                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  5716  0BFD  0727               	addwf	handleCfgWrite@index,w
  5717  0BFE  0727               	addwf	handleCfgWrite@index,w
  5718  0BFF  3E59               	addlw	low (_parameters| (0+32768))
  5719  0C00  3182               	movlp	high __stringtab
  5720  0C01  000A               	callw
  5721  0C02  3188               	pagesel	$	;select current page
  5722  0C03  2794               	fcall	_CfgGetSizeByType
  5723  0C04  00A6               	movwf	handleCfgWrite@nrOfBytes
  5724                           
  5725                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  5726  0C05  0828               	movf	handleCfgWrite@packet,w
  5727  0C06  3E07               	addlw	7
  5728  0C07  00A0               	movwf	memcpy@s1
  5729  0C08  0826               	movf	handleCfgWrite@nrOfBytes,w
  5730  0C09  00A1               	movwf	memcpy@n
  5731  0C0A  01A2               	clrf	memcpy@n+1
  5732  0C0B  0827               	movf	handleCfgWrite@index,w
  5733  0C0C  0727               	addwf	handleCfgWrite@index,w
  5734  0C0D  0727               	addwf	handleCfgWrite@index,w
  5735  0C0E  3E5B               	addlw	low ((_parameters| (0+32768)+2))
  5736  0C0F  3182               	movlp	high __stringtab
  5737  0C10  000A               	callw
  5738  0C11  3188               	pagesel	$	;select current page
  5739  0C12  3182  2AD2         	ljmp	_memcpy
  5740  0C14                     __end_of_handleCfgWrite:	
  5741  0C14                     __ptext26:	
  5742 ;; *************** function _PwrAdcInit *****************
  5743 ;; Defined at:
  5744 ;;		line 168 in file "../../../src/node/power.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		status,2
  5753 ;; Tracked objects:
  5754 ;;		On entry : 17F/1
  5755 ;;		On exit  : 17F/1
  5756 ;;		Unchanged: 160/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5758 ;;      Params:         0       0       0       0
  5759 ;;      Locals:         0       0       0       0
  5760 ;;      Temps:          0       0       0       0
  5761 ;;      Totals:         0       0       0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    5
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _PwrAdcInit
  5774  0C14                     _PwrAdcInit:	
  5775                           
  5776                           ;power.c: 170: ANSELA = 0;
  5777                           
  5778                           ;incstack = 0
  5779                           ; Regs used in _PwrAdcInit: [status,2]
  5780  0C14  0023               	movlb	3	; select bank3
  5781  0C15  018C               	clrf	12	;volatile
  5782                           
  5783                           ;power.c: 171: ANSELB = 0;
  5784  0C16  018D               	clrf	13	;volatile
  5785                           
  5786                           ;power.c: 172: ANSELC = 0;
  5787  0C17  018E               	clrf	14	;volatile
  5788                           
  5789                           ;power.c: 174: PORTCbits.RC0 = 1;
  5790  0C18  0020               	movlb	0	; select bank0
  5791  0C19  140E               	bsf	14,0	;volatile
  5792                           
  5793                           ;power.c: 175: TRISCbits.TRISC0 = 0;
  5794  0C1A  0021               	movlb	1	; select bank1
  5795  0C1B  100E               	bcf	14,0	;volatile
  5796  0C1C  0008               	return
  5797  0C1D                     __end_of_PwrAdcInit:	
  5798  0C1D                     __ptext22:	
  5799 ;; *************** function _PwrI2cWake *****************
  5800 ;; Defined at:
  5801 ;;		line 82 in file "../../../src/node/power.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;		None
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;		None
  5806 ;; Return value:  Size  Location     Type
  5807 ;;		None               void
  5808 ;; Registers used:
  5809 ;;		None
  5810 ;; Tracked objects:
  5811 ;;		On entry : 1F/2
  5812 ;;		On exit  : 1F/2
  5813 ;;		Unchanged: 1F/0
  5814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5815 ;;      Params:         0       0       0       0
  5816 ;;      Locals:         0       0       0       0
  5817 ;;      Temps:          0       0       0       0
  5818 ;;      Totals:         0       0       0       0
  5819 ;;Total ram usage:        0 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    5
  5822 ;; This function calls:
  5823 ;;		Nothing
  5824 ;; This function is called by:
  5825 ;;		_main
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           
  5830                           ;psect for function _PwrI2cWake
  5831  0C1D                     _PwrI2cWake:	
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in _PwrI2cWake: []
  5835  0C1D  0008               	return
  5836  0C1E                     __end_of_PwrI2cWake:	
  5837  0C1E                     __ptext13:	
  5838 ;; *************** function _PwrSensorWake *****************
  5839 ;; Defined at:
  5840 ;;		line 162 in file "../../../src/node/power.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;		None
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;		None
  5845 ;; Return value:  Size  Location     Type
  5846 ;;		None               void
  5847 ;; Registers used:
  5848 ;;		None
  5849 ;; Tracked objects:
  5850 ;;		On entry : 1F/0
  5851 ;;		On exit  : 1F/2
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5854 ;;      Params:         0       0       0       0
  5855 ;;      Locals:         0       0       0       0
  5856 ;;      Temps:          0       0       0       0
  5857 ;;      Totals:         0       0       0       0
  5858 ;;Total ram usage:        0 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    5
  5861 ;; This function calls:
  5862 ;;		Nothing
  5863 ;; This function is called by:
  5864 ;;		_main
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           
  5869                           ;psect for function _PwrSensorWake
  5870  0C1E                     _PwrSensorWake:	
  5871                           
  5872                           ;power.c: 164: LATCbits.LATC2 = 1;
  5873                           
  5874                           ;incstack = 0
  5875                           ; Regs used in _PwrSensorWake: []
  5876  0C1E  0022               	movlb	2	; select bank2
  5877  0C1F  150E               	bsf	14,2	;volatile
  5878  0C20  0008               	return
  5879  0C21                     __end_of_PwrSensorWake:	
  5880  0C21                     __ptext30:	
  5881 ;; *************** function _Mrf49xaModeTx *****************
  5882 ;; Defined at:
  5883 ;;		line 112 in file "../../../src/devices/mrf49xa.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  k               1    3[BANK0 ] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;		None               void
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0, pclath, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 1F/0
  5894 ;;		On exit  : 1F/1
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5897 ;;      Params:         0       0       0       0
  5898 ;;      Locals:         0       1       0       0
  5899 ;;      Temps:          0       0       0       0
  5900 ;;      Totals:         0       1       0       0
  5901 ;;Total ram usage:        1 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    7
  5904 ;; This function calls:
  5905 ;;		_Mrf49TxCmd
  5906 ;; This function is called by:
  5907 ;;		_Mrf49xaTick
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           
  5912                           ;psect for function _Mrf49xaModeTx
  5913  0C21                     _Mrf49xaModeTx:	
  5914  0C21  301E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5915                           
  5916                           ;mrf49xa.c: 114: UI08_t k;
  5917                           ;mrf49xa.c: 115: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  5918                           
  5919                           ;incstack = 0
  5920                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  5921  0C22  01A3               	clrf	Mrf49xaModeTx@k
  5922  0C23  3182               	movlp	high __stringtab
  5923  0C24  000A               	callw
  5924  0C25  3188               	pagesel	$	;select current page
  5925  0C26  3800               	iorlw	0
  5926  0C27  1903               	btfsc	3,2
  5927  0C28  2C3D               	goto	l2999
  5928  0C29                     l2993:	
  5929  0C29  3523               	lslf	Mrf49xaModeTx@k,w
  5930  0C2A  3E4C               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  5931  0C2B  3182               	movlp	high __stringtab
  5932  0C2C  000A               	callw
  5933  0C2D  3188               	pagesel	$	;select current page
  5934  0C2E  00A1               	movwf	Mrf49TxCmd@val
  5935  0C2F  3523               	lslf	Mrf49xaModeTx@k,w
  5936  0C30  3E4B               	addlw	low (_mrfRegset_Tx| (0+32768))
  5937  0C31  3182               	movlp	high __stringtab
  5938  0C32  000A               	callw
  5939  0C33  3188               	pagesel	$	;select current page
  5940  0C34  2559               	fcall	_Mrf49TxCmd
  5941  0C35  301E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5942  0C36  0AA3               	incf	Mrf49xaModeTx@k,f
  5943  0C37  3182               	movlp	high __stringtab
  5944  0C38  000A               	callw
  5945  0C39  3188               	pagesel	$	;select current page
  5946  0C3A  0223               	subwf	Mrf49xaModeTx@k,w
  5947  0C3B  1C03               	skipc
  5948  0C3C  2C29               	goto	l2993
  5949  0C3D                     l2999:	
  5950                           
  5951                           ;mrf49xa.c: 118: rfTrcvStatus.state = TX_PACKET;
  5952  0C3D  3003               	movlw	3
  5953  0C3E  0021               	movlb	1	; select bank1
  5954  0C3F  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  5955                           
  5956                           ;mrf49xa.c: 119: rfTrcvStatus.hwByte = 99;
  5957  0C40  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5958  0C41  3980               	andlw	-128
  5959  0C42  3863               	iorlw	99
  5960  0C43  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5961  0C44  0008               	return
  5962  0C45                     __end_of_Mrf49xaModeTx:	
  5963  0C45                     __ptext33:	
  5964 ;; *************** function _Mrf49xaServe *****************
  5965 ;; Defined at:
  5966 ;;		line 9 in file "../../../src/devices/mrf49xa_phy.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  data            1    5[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 1F/0
  5977 ;;		On exit  : 1E/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5980 ;;      Params:         0       0       0       0
  5981 ;;      Locals:         0       1       0       0
  5982 ;;      Temps:          0       1       0       0
  5983 ;;      Totals:         0       2       0       0
  5984 ;;Total ram usage:        2 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    8
  5987 ;; This function calls:
  5988 ;;		_Mrf49RxByte
  5989 ;;		_Mrf49RxSts
  5990 ;;		_Mrf49TxByte
  5991 ;;		_Mrf49xaModeRx
  5992 ;;		_Mrf49xaNeedsReset
  5993 ;; This function is called by:
  5994 ;;		_Mrf49xaInit
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           
  5999                           ;psect for function _Mrf49xaServe
  6000  0C45                     _Mrf49xaServe:	
  6001                           
  6002                           ;mrf49xa_phy.c: 12: uint8_t data;
  6003                           ;mrf49xa_phy.c: 14: if (rfTrcvStatus.state == POWERED_OFF)
  6004                           
  6005                           ;incstack = 0
  6006                           ; Regs used in _Mrf49xaServe: [allreg]
  6007  0C45  0021               	movlb	1	; select bank1
  6008  0C46  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  6009  0C47  1903               	btfsc	3,2
  6010                           
  6011                           ;mrf49xa_phy.c: 15: return 0;
  6012  0C48  3400               	retlw	0
  6013                           
  6014                           ;mrf49xa_phy.c: 18: if (rfTrcvStatus.needsReset)
  6015  0C49  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  6016  0C4A  3400               	retlw	0
  6017                           
  6018                           ;mrf49xa_phy.c: 21: Mrf49RxSts();
  6019  0C4B  25BD  3188         	fcall	_Mrf49RxSts
  6020                           
  6021                           ;mrf49xa_phy.c: 23: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6022  0C4D  0840               	movf	_mrf49Status,w
  6023  0C4E  3AFF               	xorlw	255
  6024  0C4F  1D03               	skipz
  6025  0C50  2C55               	goto	l468
  6026  0C51  0841               	movf	_mrf49Status+1,w
  6027  0C52  3AFF               	xorlw	255
  6028  0C53  1903               	btfsc	3,2
  6029  0C54  3400               	retlw	0
  6030  0C55                     l468:	
  6031                           ;mrf49xa_phy.c: 28: {
  6032                           
  6033                           
  6034                           ;mrf49xa_phy.c: 30: }
  6035                           ;mrf49xa_phy.c: 33: if (mrf49Status.flags.msb.overflow == 1)
  6036  0C55  1AC0               	btfsc	_mrf49Status,5
  6037  0C56  2C64               	goto	l2845
  6038  0C57  2C73               	goto	l469
  6039  0C58                     l2837:	
  6040                           
  6041                           ;mrf49xa_phy.c: 38: case RECV_DATA:
  6042                           ;mrf49xa_phy.c: 41: data = Mrf49RxByte();
  6043  0C58  2532  3188         	fcall	_Mrf49RxByte
  6044  0C5A  00A5               	movwf	Mrf49xaServe@data
  6045                           
  6046                           ;mrf49xa_phy.c: 42: data = Mrf49RxByte();
  6047  0C5B  2532  3188         	fcall	_Mrf49RxByte
  6048  0C5D  00A5               	movwf	Mrf49xaServe@data
  6049                           
  6050                           ;mrf49xa_phy.c: 45: Mrf49xaModeRx();
  6051  0C5E  2534  3188         	fcall	_Mrf49xaModeRx
  6052                           
  6053                           ;mrf49xa_phy.c: 49: break;
  6054  0C60  2C73               	goto	l469
  6055  0C61                     l2841:	
  6056                           
  6057                           ;mrf49xa_phy.c: 52: Mrf49xaNeedsReset();
  6058  0C61  2316  3188         	fcall	_Mrf49xaNeedsReset
  6059                           
  6060                           ;mrf49xa_phy.c: 53: break;
  6061  0C63  2C73               	goto	l469
  6062  0C64                     l2845:	
  6063  0C64  0021               	movlb	1	; select bank1
  6064  0C65  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  6065                           
  6066                           ; Switch size 1, requested type "space"
  6067                           ; Number of cases is 4, Range of values is 0 to 3
  6068                           ; switch strategies available:
  6069                           ; Name         Instructions Cycles
  6070                           ; simple_byte           13     7 (average)
  6071                           ; direct_byte           14     6 (fixed)
  6072                           ; jumptable            260     6 (fixed)
  6073                           ;	Chosen strategy is simple_byte
  6074  0C66  3A00               	xorlw	0	; case 0
  6075  0C67  1903               	skipnz
  6076  0C68  2C61               	goto	l2841
  6077  0C69  3A01               	xorlw	1	; case 1
  6078  0C6A  1903               	skipnz
  6079  0C6B  2C58               	goto	l2837
  6080  0C6C  3A03               	xorlw	3	; case 2
  6081  0C6D  1903               	skipnz
  6082  0C6E  2C58               	goto	l2837
  6083  0C6F  3A01               	xorlw	1	; case 3
  6084  0C70  1903               	skipnz
  6085  0C71  2C73               	goto	l469
  6086  0C72  2C73               	goto	l469
  6087  0C73                     l469:	
  6088                           
  6089                           ;mrf49xa_phy.c: 62: }
  6090                           ;mrf49xa_phy.c: 71: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6091  0C73  0020               	movlb	0	; select bank0
  6092  0C74  1BC0               	btfsc	_mrf49Status,7
  6093  0C75  2D19               	goto	l2927
  6094  0C76  2D28               	goto	l2929
  6095  0C77                     l2849:	
  6096                           
  6097                           ;mrf49xa_phy.c: 78: Mrf49xaNeedsReset();
  6098  0C77  2316  3188         	fcall	_Mrf49xaNeedsReset
  6099                           
  6100                           ;mrf49xa_phy.c: 79: break;
  6101  0C79  2D28               	goto	l2929
  6102  0C7A                     l2851:	
  6103                           
  6104                           ;mrf49xa_phy.c: 83: data = Mrf49RxByte();
  6105  0C7A  2532  3188         	fcall	_Mrf49RxByte
  6106  0C7C  00A5               	movwf	Mrf49xaServe@data
  6107                           
  6108                           ;mrf49xa_phy.c: 87: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6109  0C7D  1BC1               	btfsc	_mrf49Status+1,7
  6110  0C7E  2C82               	goto	l2857
  6111  0C7F                     l2855:	
  6112                           
  6113                           ;mrf49xa_phy.c: 88: {
  6114                           ;mrf49xa_phy.c: 89: Mrf49xaModeRx();
  6115  0C7F  2534  3188         	fcall	_Mrf49xaModeRx
  6116                           
  6117                           ;mrf49xa_phy.c: 90: break;
  6118  0C81  2D28               	goto	l2929
  6119  0C82                     l2857:	
  6120                           
  6121                           ;mrf49xa_phy.c: 91: }
  6122                           ;mrf49xa_phy.c: 93: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = 
      +                          &(rfTrcvStatus.rxPacket[0]);
  6123  0C82  0021               	movlb	1	; select bank1
  6124  0C83  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6125  0C84  1D03               	skipz
  6126  0C85  2C88               	goto	l2861
  6127  0C86  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  6128  0C87  2C8C               	goto	L1
  6129  0C88                     l2861:	
  6130                           
  6131                           ;mrf49xa_phy.c: 94: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hw
      +                          Rx = &(rfTrcvStatus.rxPacket[1]);
  6132  0C88  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  6133  0C89  1D03               	skipz
  6134  0C8A  2C7F               	goto	l2855
  6135  0C8B  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  6136  0C8C                     L1:	
  6137  0C8C  00A0               	movwf	_rfTrcvStatus^(0+128)
  6138                           
  6139                           ;mrf49xa_phy.c: 101: }
  6140                           ;mrf49xa_phy.c: 103: rfTrcvStatus.hwRx->packet.size = data;
  6141  0C8D  0A20               	incf	_rfTrcvStatus^(0+128),w
  6142  0C8E  0086               	movwf	6
  6143  0C8F  0187               	clrf	7
  6144                           
  6145                           ;mrf49xa_phy.c: 104: rfTrcvStatus.hwRx->crc = 0;
  6146  0C90  27E3  3188         	fcall	PL16	;call to abstracted procedure
  6147  0C92  3E16               	addlw	22
  6148  0C93  0086               	movwf	6
  6149  0C94  0181               	clrf	1
  6150                           
  6151                           ;mrf49xa_phy.c: 105: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  6152  0C95  0820               	movf	_rfTrcvStatus^(0+128),w
  6153  0C96  0086               	movwf	6
  6154  0C97  3004               	movlw	4
  6155  0C98  0081               	movwf	1
  6156                           
  6157                           ;mrf49xa_phy.c: 107: rfTrcvStatus.state = RECV_DATA;
  6158  0C99  3002               	movlw	2
  6159  0C9A  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  6160                           
  6161                           ;mrf49xa_phy.c: 108: rfTrcvStatus.hwByte = 1;
  6162  0C9B  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  6163  0C9C  3980               	andlw	-128
  6164  0C9D  3801               	iorlw	1
  6165  0C9E  2CC9               	goto	L2
  6166  0C9F                     l2877:	
  6167                           ;mrf49xa_phy.c: 110: break;
  6168                           
  6169                           
  6170                           ;mrf49xa_phy.c: 114: data = Mrf49RxByte();
  6171  0C9F  2532  3188         	fcall	_Mrf49RxByte
  6172  0CA1  00A5               	movwf	Mrf49xaServe@data
  6173                           
  6174                           ;mrf49xa_phy.c: 118: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6175  0CA2  1BC1               	btfsc	_mrf49Status+1,7
  6176  0CA3  2CAA               	goto	l2885
  6177                           
  6178                           ;mrf49xa_phy.c: 119: {
  6179                           ;mrf49xa_phy.c: 120: rfTrcvStatus.hwRx->state = PKT_FREE;
  6180  0CA4  0021               	movlb	1	; select bank1
  6181  0CA5  0820               	movf	_rfTrcvStatus^(0+128),w
  6182  0CA6  0086               	movwf	6
  6183  0CA7  0187               	clrf	7
  6184  0CA8  0181               	clrf	1
  6185  0CA9  2C7F               	goto	l2855
  6186  0CAA                     l2885:	
  6187                           
  6188                           ;mrf49xa_phy.c: 123: }
  6189                           ;mrf49xa_phy.c: 125: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  6190  0CAA  0021               	movlb	1	; select bank1
  6191  0CAB  0A20               	incf	_rfTrcvStatus^(0+128),w
  6192  0CAC  0086               	movwf	6
  6193  0CAD  0187               	clrf	7
  6194  0CAE  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  6195  0CAF  397F               	andlw	127
  6196  0CB0  0601               	xorwf	1,w
  6197  0CB1  1D03               	skipz
  6198  0CB2  2CBC               	goto	l2891
  6199                           
  6200                           ;mrf49xa_phy.c: 126: {
  6201                           ;mrf49xa_phy.c: 127: rfTrcvStatus.hwRx->crc = data;
  6202  0CB3  0820               	movf	_rfTrcvStatus^(0+128),w
  6203  0CB4  3E16               	addlw	22
  6204  0CB5  0086               	movwf	6
  6205                           
  6206                           ;mrf49xa_phy.c: 131: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6207  0CB6  27E3  3188         	fcall	PL16	;call to abstracted procedure
  6208  0CB8  0086               	movwf	6
  6209  0CB9  3005               	movlw	5
  6210  0CBA  0081               	movwf	1
  6211  0CBB  2C7F               	goto	l2855
  6212  0CBC                     l2891:	
  6213                           
  6214                           ;mrf49xa_phy.c: 140: else
  6215                           ;mrf49xa_phy.c: 141: {
  6216                           ;mrf49xa_phy.c: 142: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  6217  0CBC  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  6218  0CBD  397F               	andlw	127
  6219  0CBE  0720               	addwf	_rfTrcvStatus^(0+128),w
  6220  0CBF  0020               	movlb	0	; select bank0
  6221  0CC0  00A4               	movwf	??_Mrf49xaServe
  6222  0CC1  0A24               	incf	??_Mrf49xaServe,w
  6223  0CC2  0086               	movwf	6
  6224  0CC3  0187               	clrf	7
  6225  0CC4  0825               	movf	Mrf49xaServe@data,w
  6226  0CC5  0081               	movwf	1
  6227  0CC6  0021               	movlb	1	; select bank1
  6228  0CC7  27CA  3188         	fcall	PL10	;call to abstracted procedure
  6229  0CC9                     L2:	
  6230  0CC9  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6231  0CCA  2D28               	goto	l2929
  6232  0CCB                     l2895:	
  6233                           
  6234                           ;mrf49xa_phy.c: 148: rfTrcvStatus.hwByte++;
  6235  0CCB  27CA  3188         	fcall	PL10	;call to abstracted procedure
  6236  0CCD  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6237                           
  6238                           ;mrf49xa_phy.c: 150: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  6239  0CCE  397F               	andlw	127
  6240  0CCF  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  6241  0CD0  1D03               	skipz
  6242  0CD1  2D07               	goto	l2923
  6243                           
  6244                           ;mrf49xa_phy.c: 151: rfTrcvStatus.hwByte = 49;
  6245  0CD2  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  6246  0CD3  3980               	andlw	-128
  6247  0CD4  3831               	iorlw	49
  6248  0CD5  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6249  0CD6  2D07               	goto	l2923
  6250  0CD7                     l2899:	
  6251                           
  6252                           ;mrf49xa_phy.c: 156: Mrf49TxByte(0x2D);
  6253  0CD7  302D               	movlw	45
  6254  0CD8  252D  3188         	fcall	_Mrf49TxByte
  6255                           
  6256                           ;mrf49xa_phy.c: 157: break;
  6257  0CDA  2D28               	goto	l2929
  6258  0CDB                     l2901:	
  6259                           
  6260                           ;mrf49xa_phy.c: 160: Mrf49TxByte(0xD4);
  6261  0CDB  30D4               	movlw	212
  6262  0CDC  252D  3188         	fcall	_Mrf49TxByte
  6263                           
  6264                           ;mrf49xa_phy.c: 161: rfTrcvStatus.hwByte = 0x7F;
  6265  0CDE  307F               	movlw	127
  6266  0CDF  0021               	movlb	1	; select bank1
  6267  0CE0  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
  6268                           
  6269                           ;mrf49xa_phy.c: 162: break;
  6270  0CE1  2D28               	goto	l2929
  6271  0CE2                     l2905:	
  6272                           
  6273                           ;mrf49xa_phy.c: 166: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  6274  0CE2  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  6275  0CE3  397F               	andlw	127
  6276  0CE4  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6277  0CE5  0086               	movwf	6
  6278  0CE6  0187               	clrf	7
  6279  0CE7  0801               	movf	1,w
  6280  0CE8  252D  3188         	fcall	_Mrf49TxByte
  6281                           
  6282                           ;mrf49xa_phy.c: 167: break;
  6283  0CEA  2D28               	goto	l2929
  6284  0CEB                     l2907:	
  6285                           
  6286                           ;mrf49xa_phy.c: 170: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  6287  0CEB  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  6288  0CEC  252D  3188         	fcall	_Mrf49TxByte
  6289                           
  6290                           ;mrf49xa_phy.c: 171: break;
  6291  0CEE  2D28               	goto	l2929
  6292  0CEF                     l2909:	
  6293                           
  6294                           ;mrf49xa_phy.c: 174: Mrf49TxByte(0x00);
  6295  0CEF  3000               	movlw	0
  6296  0CF0  252D  3188         	fcall	_Mrf49TxByte
  6297                           
  6298                           ;mrf49xa_phy.c: 175: break;
  6299  0CF2  2D28               	goto	l2929
  6300  0CF3                     l2911:	
  6301                           
  6302                           ;mrf49xa_phy.c: 178: Mrf49TxByte(0x00);
  6303  0CF3  3000               	movlw	0
  6304  0CF4  252D  3188         	fcall	_Mrf49TxByte
  6305                           
  6306                           ;mrf49xa_phy.c: 179: Mrf49xaModeRx();
  6307  0CF6  2534  3188         	fcall	_Mrf49xaModeRx
  6308                           
  6309                           ;mrf49xa_phy.c: 181: rfTrcvStatus.txPacket.retry = 0;
  6310  0CF8  30F0               	movlw	-16
  6311  0CF9  0021               	movlb	1	; select bank1
  6312  0CFA  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  6313                           
  6314                           ;mrf49xa_phy.c: 183: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  6315  0CFB  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  6316  0CFC  0C89               	rrf	9,f
  6317  0CFD  0C89               	rrf	9,f
  6318  0CFE  3903               	andlw	3
  6319  0CFF  3A01               	xorlw	1
  6320  0D00  1D03               	skipz
  6321  0D01  2D05               	goto	l2919
  6322                           
  6323                           ;mrf49xa_phy.c: 184: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  6324  0D02  3003               	movlw	3
  6325  0D03  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  6326  0D04  2D28               	goto	l2929
  6327  0D05                     l2919:	
  6328                           
  6329                           ;mrf49xa_phy.c: 185: else
  6330                           ;mrf49xa_phy.c: 186: rfTrcvStatus.txPacket.state = PKT_FREE;
  6331  0D05  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  6332  0D06  2D28               	goto	l2929
  6333  0D07                     l2923:	
  6334  0D07  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  6335  0D08  397F               	andlw	127
  6336                           
  6337                           ; Switch size 1, requested type "space"
  6338                           ; Number of cases is 5, Range of values is 49 to 101
  6339                           ; switch strategies available:
  6340                           ; Name         Instructions Cycles
  6341                           ; simple_byte           16     9 (average)
  6342                           ; direct_byte          115     9 (fixed)
  6343                           ; jumptable            263     9 (fixed)
  6344                           ;	Chosen strategy is simple_byte
  6345  0D09  3A31               	xorlw	49	; case 49
  6346  0D0A  1903               	skipnz
  6347  0D0B  2CEB               	goto	l2907
  6348  0D0C  3A03               	xorlw	3	; case 50
  6349  0D0D  1903               	skipnz
  6350  0D0E  2CEF               	goto	l2909
  6351  0D0F  3A01               	xorlw	1	; case 51
  6352  0D10  1903               	skipnz
  6353  0D11  2CF3               	goto	l2911
  6354  0D12  3A57               	xorlw	87	; case 100
  6355  0D13  1903               	skipnz
  6356  0D14  2CD7               	goto	l2899
  6357  0D15  3A01               	xorlw	1	; case 101
  6358  0D16  1903               	skipnz
  6359  0D17  2CDB               	goto	l2901
  6360  0D18  2CE2               	goto	l2905
  6361  0D19                     l2927:	
  6362  0D19  0021               	movlb	1	; select bank1
  6363  0D1A  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  6364                           
  6365                           ; Switch size 1, requested type "space"
  6366                           ; Number of cases is 4, Range of values is 0 to 3
  6367                           ; switch strategies available:
  6368                           ; Name         Instructions Cycles
  6369                           ; simple_byte           13     7 (average)
  6370                           ; direct_byte           14     6 (fixed)
  6371                           ; jumptable            260     6 (fixed)
  6372                           ;	Chosen strategy is simple_byte
  6373  0D1B  3A00               	xorlw	0	; case 0
  6374  0D1C  1903               	skipnz
  6375  0D1D  2C77               	goto	l2849
  6376  0D1E  3A01               	xorlw	1	; case 1
  6377  0D1F  1903               	skipnz
  6378  0D20  2C7A               	goto	l2851
  6379  0D21  3A03               	xorlw	3	; case 2
  6380  0D22  1903               	skipnz
  6381  0D23  2C9F               	goto	l2877
  6382  0D24  3A01               	xorlw	1	; case 3
  6383  0D25  1903               	skipnz
  6384  0D26  2CCB               	goto	l2895
  6385  0D27  2D28               	goto	l2929
  6386  0D28                     l2929:	
  6387                           
  6388                           ;mrf49xa_phy.c: 193: }
  6389                           ;mrf49xa_phy.c: 207: return PORTAbits.RA2 == 1 ? 1 : 0;
  6390  0D28  0020               	movlb	0	; select bank0
  6391  0D29  0C0C               	rrf	12,w	;volatile
  6392  0D2A  0C89               	rrf	9,f
  6393  0D2B  3901               	andlw	1
  6394  0D2C  0008               	return
  6395  0D2D                     __end_of_Mrf49xaServe:	
  6396  0D2D                     __ptext36:	
  6397 ;; *************** function _Mrf49TxByte *****************
  6398 ;; Defined at:
  6399 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  byte            1    wreg     unsigned char 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  byte            1    3[BANK0 ] unsigned char 
  6404 ;; Return value:  Size  Location     Type
  6405 ;;		None               void
  6406 ;; Registers used:
  6407 ;;		wreg, status,2, status,0, pclath, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 1E/1
  6410 ;;		On exit  : 1F/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6413 ;;      Params:         0       0       0       0
  6414 ;;      Locals:         0       1       0       0
  6415 ;;      Temps:          0       0       0       0
  6416 ;;      Totals:         0       1       0       0
  6417 ;;Total ram usage:        1 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:    7
  6420 ;; This function calls:
  6421 ;;		_Mrf49TxCmd
  6422 ;; This function is called by:
  6423 ;;		_Mrf49xaServe
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           
  6428                           ;psect for function _Mrf49TxByte
  6429  0D2D                     _Mrf49TxByte:	
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6433                           ;Mrf49TxByte@byte stored from wreg
  6434  0D2D  0020               	movlb	0	; select bank0
  6435  0D2E  00A3               	movwf	Mrf49TxByte@byte
  6436                           
  6437                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6438  0D2F  00A1               	movwf	Mrf49TxCmd@val
  6439  0D30  30B8               	movlw	184
  6440  0D31  2D59               	ljmp	_Mrf49TxCmd
  6441  0D32                     __end_of_Mrf49TxByte:	
  6442  0D32                     __ptext39:	
  6443 ;; *************** function _Mrf49RxByte *****************
  6444 ;; Defined at:
  6445 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      unsigned char 
  6452 ;; Registers used:
  6453 ;;		wreg, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 1E/1
  6456 ;;		On exit  : 1F/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6459 ;;      Params:         0       0       0       0
  6460 ;;      Locals:         0       0       0       0
  6461 ;;      Temps:          0       0       0       0
  6462 ;;      Totals:         0       0       0       0
  6463 ;;Total ram usage:        0 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    7
  6466 ;; This function calls:
  6467 ;;		_Mrf49RxCmd
  6468 ;; This function is called by:
  6469 ;;		_Mrf49xaServe
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           
  6474                           ;psect for function _Mrf49RxByte
  6475  0D32                     _Mrf49RxByte:	
  6476                           
  6477                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6481  0D32  30B0               	movlw	176
  6482  0D33  2E0C               	ljmp	_Mrf49RxCmd
  6483  0D34                     __end_of_Mrf49RxByte:	
  6484  0D34                     __ptext35:	
  6485 ;; *************** function _Mrf49xaModeRx *****************
  6486 ;; Defined at:
  6487 ;;		line 100 in file "../../../src/devices/mrf49xa.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  k               1    3[BANK0 ] unsigned char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, status,2, status,0, pclath, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 1E/1
  6498 ;;		On exit  : 1F/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6501 ;;      Params:         0       0       0       0
  6502 ;;      Locals:         0       1       0       0
  6503 ;;      Temps:          0       0       0       0
  6504 ;;      Totals:         0       1       0       0
  6505 ;;Total ram usage:        1 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    7
  6508 ;; This function calls:
  6509 ;;		_Mrf49TxCmd
  6510 ;; This function is called by:
  6511 ;;		_Mrf49xaReboot
  6512 ;;		_Mrf49xaInit
  6513 ;;		_Mrf49xaServe
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function _Mrf49xaModeRx
  6519  0D34                     _Mrf49xaModeRx:	
  6520  0D34                     l2971:	
  6521                           ;incstack = 0
  6522                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6523                           
  6524                           
  6525                           ;mrf49xa.c: 102: UI08_t k;
  6526                           ;mrf49xa.c: 103: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  6527  0D34  0020               	movlb	0	; select bank0
  6528  0D35  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6529  0D36  01A3               	clrf	Mrf49xaModeRx@k
  6530  0D37  3182               	movlp	high __stringtab
  6531  0D38  000A               	callw
  6532  0D39  3188               	pagesel	$	;select current page
  6533  0D3A  3800               	iorlw	0
  6534  0D3B  1903               	btfsc	3,2
  6535  0D3C  2D51               	goto	l211
  6536  0D3D                     l2977:	
  6537  0D3D  3523               	lslf	Mrf49xaModeRx@k,w
  6538  0D3E  3E40               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6539  0D3F  3182               	movlp	high __stringtab
  6540  0D40  000A               	callw
  6541  0D41  3188               	pagesel	$	;select current page
  6542  0D42  00A1               	movwf	Mrf49TxCmd@val
  6543  0D43  3523               	lslf	Mrf49xaModeRx@k,w
  6544  0D44  3E3F               	addlw	low (_mrfRegset_Rx| (0+32768))
  6545  0D45  3182               	movlp	high __stringtab
  6546  0D46  000A               	callw
  6547  0D47  3188               	pagesel	$	;select current page
  6548  0D48  2559               	fcall	_Mrf49TxCmd
  6549  0D49  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6550  0D4A  0AA3               	incf	Mrf49xaModeRx@k,f
  6551  0D4B  3182               	movlp	high __stringtab
  6552  0D4C  000A               	callw
  6553  0D4D  3188               	pagesel	$	;select current page
  6554  0D4E  0223               	subwf	Mrf49xaModeRx@k,w
  6555  0D4F  1C03               	skipc
  6556  0D50  2D3D               	goto	l2977
  6557  0D51                     l211:	
  6558                           
  6559                           ;mrf49xa.c: 106: rfTrcvStatus.state = RECV_IDLE;
  6560  0D51  0021               	movlb	1	; select bank1
  6561  0D52  3080               	movlw	-128
  6562  0D53  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  6563  0D54  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  6564                           
  6565                           ;mrf49xa.c: 107: rfTrcvStatus.hwByte = 0;
  6566  0D55  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  6567                           
  6568                           ;mrf49xa.c: 109: mrf49Status.flags.msb.fifoTxRx = 0;
  6569  0D56  0020               	movlb	0	; select bank0
  6570  0D57  13C0               	bcf	_mrf49Status,7
  6571  0D58  0008               	return
  6572  0D59                     __end_of_Mrf49xaModeRx:	
  6573  0D59                     __ptext37:	
  6574 ;; *************** function _Mrf49TxCmd *****************
  6575 ;; Defined at:
  6576 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  cmd             1    wreg     unsigned char 
  6579 ;;  val             1    1[BANK0 ] unsigned char 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  cmd             1    2[BANK0 ] unsigned char 
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		wreg, status,2, status,0, pclath, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 1F/0
  6588 ;;		On exit  : 1F/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6591 ;;      Params:         0       1       0       0
  6592 ;;      Locals:         0       1       0       0
  6593 ;;      Temps:          0       0       0       0
  6594 ;;      Totals:         0       2       0       0
  6595 ;;Total ram usage:        2 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    6
  6598 ;; This function calls:
  6599 ;;		_Mrf49SpiTx
  6600 ;; This function is called by:
  6601 ;;		_Mrf49xaModeRx
  6602 ;;		_Mrf49xaModeTx
  6603 ;;		_Mrf49xaModeSleep
  6604 ;;		_Mrf49xaInit
  6605 ;;		_Mrf49TxByte
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _Mrf49TxCmd
  6611  0D59                     _Mrf49TxCmd:	
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6615                           ;Mrf49TxCmd@cmd stored from wreg
  6616  0D59  00A2               	movwf	Mrf49TxCmd@cmd
  6617                           
  6618                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6619  0D5A  130E               	bcf	14,6	;volatile
  6620                           
  6621                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6622  0D5B  0822               	movf	Mrf49TxCmd@cmd,w
  6623  0D5C  2562  3188         	fcall	_Mrf49SpiTx
  6624                           
  6625                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6626  0D5E  0821               	movf	Mrf49TxCmd@val,w
  6627  0D5F  2562               	fcall	_Mrf49SpiTx
  6628                           
  6629                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6630  0D60  170E               	bsf	14,6	;volatile
  6631  0D61  0008               	return
  6632  0D62                     __end_of_Mrf49TxCmd:	
  6633  0D62                     __ptext41:	
  6634 ;; *************** function _Mrf49SpiTx *****************
  6635 ;; Defined at:
  6636 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  byte            1    wreg     unsigned char 
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;  byte            1    0[BANK0 ] unsigned char 
  6641 ;; Return value:  Size  Location     Type
  6642 ;;		None               void
  6643 ;; Registers used:
  6644 ;;		wreg
  6645 ;; Tracked objects:
  6646 ;;		On entry : 1F/0
  6647 ;;		On exit  : 1F/0
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6650 ;;      Params:         0       0       0       0
  6651 ;;      Locals:         0       1       0       0
  6652 ;;      Temps:          0       0       0       0
  6653 ;;      Totals:         0       1       0       0
  6654 ;;Total ram usage:        1 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    5
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_Mrf49TxCmd
  6661 ;;		_Mrf49RxCmd
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _Mrf49SpiTx
  6667  0D62                     _Mrf49SpiTx:	
  6668                           
  6669                           ;incstack = 0
  6670                           ; Regs used in _Mrf49SpiTx: [wreg]
  6671                           ;Mrf49SpiTx@byte stored from wreg
  6672  0D62  00A0               	movwf	Mrf49SpiTx@byte
  6673                           
  6674                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  6675  0D63  1FA0               	btfss	Mrf49SpiTx@byte,7
  6676  0D64  2D67               	goto	l255
  6677  0D65  178D               	bsf	13,7	;volatile
  6678  0D66  2D68               	goto	l256
  6679  0D67                     l255:	
  6680  0D67  138D               	bcf	13,7	;volatile
  6681  0D68                     l256:	
  6682  0D68  0022               	movlb	2	; select bank2
  6683  0D69  178E               	bsf	14,7	;volatile
  6684  0D6A  0000               	nop	;# 
  6685  0D6B  0022               	movlb	2	; select bank2
  6686  0D6C  138E               	bcf	14,7	;volatile
  6687  0D6D  0020               	movlb	0	; select bank0
  6688  0D6E  1F20               	btfss	Mrf49SpiTx@byte,6
  6689  0D6F  2D72               	goto	l259
  6690  0D70  178D               	bsf	13,7	;volatile
  6691  0D71  2D73               	goto	l260
  6692  0D72                     l259:	
  6693  0D72  138D               	bcf	13,7	;volatile
  6694  0D73                     l260:	
  6695  0D73  0022               	movlb	2	; select bank2
  6696  0D74  178E               	bsf	14,7	;volatile
  6697  0D75  0000               	nop	;# 
  6698  0D76  0022               	movlb	2	; select bank2
  6699  0D77  138E               	bcf	14,7	;volatile
  6700  0D78  0020               	movlb	0	; select bank0
  6701  0D79  1EA0               	btfss	Mrf49SpiTx@byte,5
  6702  0D7A  2D7D               	goto	l263
  6703  0D7B  178D               	bsf	13,7	;volatile
  6704  0D7C  2D7E               	goto	l264
  6705  0D7D                     l263:	
  6706  0D7D  138D               	bcf	13,7	;volatile
  6707  0D7E                     l264:	
  6708  0D7E  0022               	movlb	2	; select bank2
  6709  0D7F  178E               	bsf	14,7	;volatile
  6710  0D80  0000               	nop	;# 
  6711  0D81  0022               	movlb	2	; select bank2
  6712  0D82  138E               	bcf	14,7	;volatile
  6713  0D83  0020               	movlb	0	; select bank0
  6714  0D84  1E20               	btfss	Mrf49SpiTx@byte,4
  6715  0D85  2D88               	goto	l267
  6716  0D86  178D               	bsf	13,7	;volatile
  6717  0D87  2D89               	goto	l268
  6718  0D88                     l267:	
  6719  0D88  138D               	bcf	13,7	;volatile
  6720  0D89                     l268:	
  6721  0D89  0022               	movlb	2	; select bank2
  6722  0D8A  178E               	bsf	14,7	;volatile
  6723  0D8B  0000               	nop	;# 
  6724  0D8C  0022               	movlb	2	; select bank2
  6725  0D8D  138E               	bcf	14,7	;volatile
  6726  0D8E  0020               	movlb	0	; select bank0
  6727  0D8F  1DA0               	btfss	Mrf49SpiTx@byte,3
  6728  0D90  2D93               	goto	l271
  6729  0D91  178D               	bsf	13,7	;volatile
  6730  0D92  2D94               	goto	l272
  6731  0D93                     l271:	
  6732  0D93  138D               	bcf	13,7	;volatile
  6733  0D94                     l272:	
  6734  0D94  0022               	movlb	2	; select bank2
  6735  0D95  178E               	bsf	14,7	;volatile
  6736  0D96  0000               	nop	;# 
  6737  0D97  0022               	movlb	2	; select bank2
  6738  0D98  138E               	bcf	14,7	;volatile
  6739  0D99  0020               	movlb	0	; select bank0
  6740  0D9A  1D20               	btfss	Mrf49SpiTx@byte,2
  6741  0D9B  2D9E               	goto	l275
  6742  0D9C  178D               	bsf	13,7	;volatile
  6743  0D9D  2D9F               	goto	l276
  6744  0D9E                     l275:	
  6745  0D9E  138D               	bcf	13,7	;volatile
  6746  0D9F                     l276:	
  6747  0D9F  0022               	movlb	2	; select bank2
  6748  0DA0  178E               	bsf	14,7	;volatile
  6749  0DA1  0000               	nop	;# 
  6750  0DA2  0022               	movlb	2	; select bank2
  6751  0DA3  138E               	bcf	14,7	;volatile
  6752  0DA4  0020               	movlb	0	; select bank0
  6753  0DA5  1CA0               	btfss	Mrf49SpiTx@byte,1
  6754  0DA6  2DA9               	goto	l279
  6755  0DA7  178D               	bsf	13,7	;volatile
  6756  0DA8  2DAA               	goto	l280
  6757  0DA9                     l279:	
  6758  0DA9  138D               	bcf	13,7	;volatile
  6759  0DAA                     l280:	
  6760  0DAA  0022               	movlb	2	; select bank2
  6761  0DAB  178E               	bsf	14,7	;volatile
  6762  0DAC  0000               	nop	;# 
  6763  0DAD  0022               	movlb	2	; select bank2
  6764  0DAE  138E               	bcf	14,7	;volatile
  6765  0DAF  0020               	movlb	0	; select bank0
  6766  0DB0  1C20               	btfss	Mrf49SpiTx@byte,0
  6767  0DB1  2DB4               	goto	l283
  6768  0DB2  178D               	bsf	13,7	;volatile
  6769  0DB3  2DB5               	goto	l284
  6770  0DB4                     l283:	
  6771  0DB4  138D               	bcf	13,7	;volatile
  6772  0DB5                     l284:	
  6773  0DB5  0022               	movlb	2	; select bank2
  6774  0DB6  178E               	bsf	14,7	;volatile
  6775  0DB7  0000               	nop	;# 
  6776  0DB8  0022               	movlb	2	; select bank2
  6777  0DB9  138E               	bcf	14,7	;volatile
  6778                           
  6779                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  6780  0DBA  0020               	movlb	0	; select bank0
  6781  0DBB  138D               	bcf	13,7	;volatile
  6782  0DBC  0008               	return
  6783  0DBD                     __end_of_Mrf49SpiTx:	
  6784  0DBD                     __ptext38:	
  6785 ;; *************** function _Mrf49RxSts *****************
  6786 ;; Defined at:
  6787 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;		None
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;		None
  6792 ;; Return value:  Size  Location     Type
  6793 ;;		None               void
  6794 ;; Registers used:
  6795 ;;		wreg, status,2, pclath, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : 1E/0
  6798 ;;		On exit  : 1F/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6801 ;;      Params:         0       0       0       0
  6802 ;;      Locals:         0       0       0       0
  6803 ;;      Temps:          0       0       0       0
  6804 ;;      Totals:         0       0       0       0
  6805 ;;Total ram usage:        0 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    6
  6808 ;; This function calls:
  6809 ;;		_Mrf49SpiRx
  6810 ;; This function is called by:
  6811 ;;		_Mrf49xaTick
  6812 ;;		_Mrf49xaServe
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           
  6817                           ;psect for function _Mrf49RxSts
  6818  0DBD                     _Mrf49RxSts:	
  6819                           
  6820                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  6821                           
  6822                           ;incstack = 0
  6823                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6824  0DBD  120B               	bcf	11,4	;volatile
  6825                           
  6826                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  6827  0DBE  0020               	movlb	0	; select bank0
  6828  0DBF  130E               	bcf	14,6	;volatile
  6829                           
  6830                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  6831  0DC0  25C8  3188         	fcall	_Mrf49SpiRx
  6832  0DC2  00C0               	movwf	_mrf49Status
  6833                           
  6834                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  6835  0DC3  25C8               	fcall	_Mrf49SpiRx
  6836  0DC4  00C1               	movwf	_mrf49Status+1
  6837                           
  6838                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  6839  0DC5  170E               	bsf	14,6	;volatile
  6840                           
  6841                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  6842  0DC6  160B               	bsf	11,4	;volatile
  6843  0DC7  0008               	return
  6844  0DC8                     __end_of_Mrf49RxSts:	
  6845  0DC8                     __ptext42:	
  6846 ;; *************** function _Mrf49SpiRx *****************
  6847 ;; Defined at:
  6848 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6849 ;; Parameters:    Size  Location     Type
  6850 ;;		None
  6851 ;; Auto vars:     Size  Location     Type
  6852 ;;  data            1    0[BANK0 ] unsigned char 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      unsigned char 
  6855 ;; Registers used:
  6856 ;;		wreg, status,2
  6857 ;; Tracked objects:
  6858 ;;		On entry : 1F/0
  6859 ;;		On exit  : 1F/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6862 ;;      Params:         0       0       0       0
  6863 ;;      Locals:         0       1       0       0
  6864 ;;      Temps:          0       0       0       0
  6865 ;;      Totals:         0       1       0       0
  6866 ;;Total ram usage:        1 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    5
  6869 ;; This function calls:
  6870 ;;		Nothing
  6871 ;; This function is called by:
  6872 ;;		_Mrf49RxCmd
  6873 ;;		_Mrf49RxSts
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           
  6878                           ;psect for function _Mrf49SpiRx
  6879  0DC8                     _Mrf49SpiRx:	
  6880                           
  6881                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  6885  0DC8  01A0               	clrf	Mrf49SpiRx@data
  6886                           
  6887                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  6888  0DC9  138D               	bcf	13,7	;volatile
  6889  0DCA  1A8E               	btfsc	14,5	;volatile
  6890  0DCB  17A0               	bsf	Mrf49SpiRx@data,7
  6891  0DCC  0022               	movlb	2	; select bank2
  6892  0DCD  178E               	bsf	14,7	;volatile
  6893  0DCE  0000               	nop	;# 
  6894  0DCF  0022               	movlb	2	; select bank2
  6895  0DD0  138E               	bcf	14,7	;volatile
  6896                           
  6897                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6898  0DD1  0020               	movlb	0	; select bank0
  6899  0DD2  1A8E               	btfsc	14,5	;volatile
  6900  0DD3  1720               	bsf	Mrf49SpiRx@data,6
  6901  0DD4  0022               	movlb	2	; select bank2
  6902  0DD5  178E               	bsf	14,7	;volatile
  6903  0DD6  0000               	nop	;# 
  6904  0DD7  0022               	movlb	2	; select bank2
  6905  0DD8  138E               	bcf	14,7	;volatile
  6906                           
  6907                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6908  0DD9  0020               	movlb	0	; select bank0
  6909  0DDA  1A8E               	btfsc	14,5	;volatile
  6910  0DDB  16A0               	bsf	Mrf49SpiRx@data,5
  6911  0DDC  0022               	movlb	2	; select bank2
  6912  0DDD  178E               	bsf	14,7	;volatile
  6913  0DDE  0000               	nop	;# 
  6914  0DDF  0022               	movlb	2	; select bank2
  6915  0DE0  138E               	bcf	14,7	;volatile
  6916                           
  6917                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6918  0DE1  0020               	movlb	0	; select bank0
  6919  0DE2  1A8E               	btfsc	14,5	;volatile
  6920  0DE3  1620               	bsf	Mrf49SpiRx@data,4
  6921  0DE4  0022               	movlb	2	; select bank2
  6922  0DE5  178E               	bsf	14,7	;volatile
  6923  0DE6  0000               	nop	;# 
  6924  0DE7  0022               	movlb	2	; select bank2
  6925  0DE8  138E               	bcf	14,7	;volatile
  6926                           
  6927                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6928  0DE9  0020               	movlb	0	; select bank0
  6929  0DEA  1A8E               	btfsc	14,5	;volatile
  6930  0DEB  15A0               	bsf	Mrf49SpiRx@data,3
  6931  0DEC  0022               	movlb	2	; select bank2
  6932  0DED  178E               	bsf	14,7	;volatile
  6933  0DEE  0000               	nop	;# 
  6934  0DEF  0022               	movlb	2	; select bank2
  6935  0DF0  138E               	bcf	14,7	;volatile
  6936                           
  6937                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6938  0DF1  0020               	movlb	0	; select bank0
  6939  0DF2  1A8E               	btfsc	14,5	;volatile
  6940  0DF3  1520               	bsf	Mrf49SpiRx@data,2
  6941  0DF4  0022               	movlb	2	; select bank2
  6942  0DF5  178E               	bsf	14,7	;volatile
  6943  0DF6  0000               	nop	;# 
  6944  0DF7  0022               	movlb	2	; select bank2
  6945  0DF8  138E               	bcf	14,7	;volatile
  6946                           
  6947                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6948  0DF9  0020               	movlb	0	; select bank0
  6949  0DFA  1A8E               	btfsc	14,5	;volatile
  6950  0DFB  14A0               	bsf	Mrf49SpiRx@data,1
  6951  0DFC  0022               	movlb	2	; select bank2
  6952  0DFD  178E               	bsf	14,7	;volatile
  6953  0DFE  0000               	nop	;# 
  6954  0DFF  0022               	movlb	2	; select bank2
  6955  0E00  138E               	bcf	14,7	;volatile
  6956                           
  6957                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6958  0E01  0020               	movlb	0	; select bank0
  6959  0E02  1A8E               	btfsc	14,5	;volatile
  6960  0E03  1420               	bsf	Mrf49SpiRx@data,0
  6961  0E04  0022               	movlb	2	; select bank2
  6962  0E05  178E               	bsf	14,7	;volatile
  6963  0E06  0000               	nop	;# 
  6964  0E07  0022               	movlb	2	; select bank2
  6965  0E08  138E               	bcf	14,7	;volatile
  6966                           
  6967                           ;mrf49xa_spi_pic16.c: 40: return data;
  6968  0E09  0020               	movlb	0	; select bank0
  6969  0E0A  0820               	movf	Mrf49SpiRx@data,w
  6970  0E0B  0008               	return
  6971  0E0C                     __end_of_Mrf49SpiRx:	
  6972  0E0C                     __ptext40:	
  6973 ;; *************** function _Mrf49RxCmd *****************
  6974 ;; Defined at:
  6975 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  cmd             1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  cmd             1    1[BANK0 ] unsigned char 
  6980 ;;  val             1    2[BANK0 ] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      unsigned char 
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, pclath, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 1E/1
  6987 ;;		On exit  : 1F/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6990 ;;      Params:         0       0       0       0
  6991 ;;      Locals:         0       2       0       0
  6992 ;;      Temps:          0       0       0       0
  6993 ;;      Totals:         0       2       0       0
  6994 ;;Total ram usage:        2 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    6
  6997 ;; This function calls:
  6998 ;;		_Mrf49SpiRx
  6999 ;;		_Mrf49SpiTx
  7000 ;; This function is called by:
  7001 ;;		_Mrf49RxByte
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           
  7006                           ;psect for function _Mrf49RxCmd
  7007  0E0C                     _Mrf49RxCmd:	
  7008                           
  7009                           ;incstack = 0
  7010                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  7011                           ;Mrf49RxCmd@cmd stored from wreg
  7012  0E0C  0020               	movlb	0	; select bank0
  7013  0E0D  00A1               	movwf	Mrf49RxCmd@cmd
  7014                           
  7015                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  7016  0E0E  130E               	bcf	14,6	;volatile
  7017                           
  7018                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  7019  0E0F  0821               	movf	Mrf49RxCmd@cmd,w
  7020  0E10  2562  3188         	fcall	_Mrf49SpiTx
  7021                           
  7022                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  7023  0E12  25C8               	fcall	_Mrf49SpiRx
  7024  0E13  00A2               	movwf	Mrf49RxCmd@val
  7025                           
  7026                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  7027  0E14  170E               	bsf	14,6	;volatile
  7028                           
  7029                           ;mrf49xa_cmd.c: 27: return val;
  7030  0E15  0008               	return
  7031  0E16                     __end_of_Mrf49RxCmd:	
  7032  0E16                     __ptext2:	
  7033 ;; *************** function _RfSendPowerState *****************
  7034 ;; Defined at:
  7035 ;;		line 14 in file "../../../src/rfstack/packets.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7038 ;;		 -> rfTrcvStatus(75), 
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  inst            1   10[BANK0 ] PTR struct rfTrcvStatus_
  7041 ;;		 -> rfTrcvStatus(75), 
  7042 ;;  s               2    8[BANK0 ] unsigned int 
  7043 ;;  packet          1   11[BANK0 ] PTR struct rfTrcvPacket_
  7044 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;		None               void
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 1F/0
  7051 ;;		On exit  : 1F/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7054 ;;      Params:         0       0       0       0
  7055 ;;      Locals:         0       4       0       0
  7056 ;;      Temps:          0       0       0       0
  7057 ;;      Totals:         0       4       0       0
  7058 ;;Total ram usage:        4 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    7
  7061 ;; This function calls:
  7062 ;;		_AdcSample
  7063 ;;		_Mrf49xaAllocPacket
  7064 ;;		_Mrf49xaTxPacket
  7065 ;;		_PwrAdcSleep
  7066 ;;		_PwrAdcWake
  7067 ;; This function is called by:
  7068 ;;		_main
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           
  7073                           ;psect for function _RfSendPowerState
  7074  0E16                     _RfSendPowerState:	
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7078                           ;RfSendPowerState@inst stored from wreg
  7079  0E16  00AA               	movwf	RfSendPowerState@inst
  7080                           
  7081                           ;packets.c: 16: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(inst);
  7082  0E17  26D7  3188         	fcall	_Mrf49xaAllocPacket
  7083  0E19  00AB               	movwf	RfSendPowerState@packet
  7084                           
  7085                           ;packets.c: 18: packet->packet.size = 4;
  7086  0E1A  0A2B               	incf	RfSendPowerState@packet,w
  7087  0E1B  0086               	movwf	6
  7088  0E1C  3004               	movlw	4
  7089  0E1D  0187               	clrf	7
  7090  0E1E  0081               	movwf	1
  7091                           
  7092                           ;packets.c: 19: packet->packet.id = RF_POWER_STATUS;
  7093  0E1F  082B               	movf	RfSendPowerState@packet,w
  7094  0E20  3E04               	addlw	4
  7095  0E21  0086               	movwf	6
  7096  0E22  30A3               	movlw	163
  7097  0E23  0081               	movwf	1
  7098                           
  7099                           ;packets.c: 20: packet->packet.dst = 0xFF;
  7100  0E24  082B               	movf	RfSendPowerState@packet,w
  7101  0E25  3E03               	addlw	3
  7102  0E26  0086               	movwf	6
  7103  0E27  30FF               	movlw	255
  7104  0E28  0081               	movwf	1
  7105                           
  7106                           ;packets.c: 22: packet->packet.data[0] = coldBoot; coldBoot = 0;
  7107  0E29  082B               	movf	RfSendPowerState@packet,w
  7108  0E2A  3E06               	addlw	6
  7109  0E2B  0086               	movwf	6
  7110  0E2C  0842               	movf	_coldBoot,w
  7111  0E2D  0081               	movwf	1
  7112  0E2E  01C2               	clrf	_coldBoot
  7113                           
  7114                           ;packets.c: 23: packet->packet.data[1] = 0;
  7115  0E2F  082B               	movf	RfSendPowerState@packet,w
  7116  0E30  3E07               	addlw	7
  7117  0E31  0086               	movwf	6
  7118  0E32  0181               	clrf	1
  7119                           
  7120                           ;packets.c: 25: PwrAdcWake();
  7121  0E33  268B  3188         	fcall	_PwrAdcWake
  7122                           
  7123                           ;packets.c: 26: uint16_t s = AdcSample(ADC_FVR);
  7124  0E35  301F               	movlw	31
  7125  0E36  2651  3188         	fcall	_AdcSample
  7126  0E38  0823               	movf	?_AdcSample+1,w
  7127  0E39  00A9               	movwf	RfSendPowerState@s+1
  7128  0E3A  0822               	movf	?_AdcSample,w
  7129  0E3B  00A8               	movwf	RfSendPowerState@s
  7130                           
  7131                           ;packets.c: 27: PwrAdcSleep();
  7132  0E3C  2686  3188         	fcall	_PwrAdcSleep
  7133                           
  7134                           ;packets.c: 28: packet->packet.data[2] = s & 0xFF;
  7135  0E3E  0020               	movlb	0	; select bank0
  7136  0E3F  082B               	movf	RfSendPowerState@packet,w
  7137  0E40  3E08               	addlw	8
  7138  0E41  0086               	movwf	6
  7139  0E42  0187               	clrf	7
  7140  0E43  0828               	movf	RfSendPowerState@s,w
  7141  0E44  0081               	movwf	1
  7142                           
  7143                           ;packets.c: 29: packet->packet.data[3] = s >> 8;
  7144  0E45  082B               	movf	RfSendPowerState@packet,w
  7145  0E46  3E09               	addlw	9
  7146  0E47  0086               	movwf	6
  7147  0E48  0829               	movf	RfSendPowerState@s+1,w
  7148  0E49  0081               	movwf	1
  7149                           
  7150                           ;packets.c: 31: Mrf49xaTxPacket(inst, packet, 0, 1);
  7151  0E4A  082B               	movf	RfSendPowerState@packet,w
  7152  0E4B  00A0               	movwf	Mrf49xaTxPacket@packet
  7153  0E4C  01A1               	clrf	Mrf49xaTxPacket@response
  7154  0E4D  01A2               	clrf	Mrf49xaTxPacket@needAck
  7155  0E4E  0AA2               	incf	Mrf49xaTxPacket@needAck,f
  7156  0E4F  082A               	movf	RfSendPowerState@inst,w
  7157  0E50  2EF4               	ljmp	_Mrf49xaTxPacket
  7158  0E51                     __end_of_RfSendPowerState:	
  7159  0E51                     __ptext8:	
  7160 ;; *************** function _AdcSample *****************
  7161 ;; Defined at:
  7162 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  ch              1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  ch              1    5[BANK0 ] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  2    2[BANK0 ] unsigned int 
  7169 ;; Registers used:
  7170 ;;		wreg, status,2, status,0, pclath, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : 1F/1
  7173 ;;		On exit  : 1F/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7176 ;;      Params:         0       2       0       0
  7177 ;;      Locals:         0       1       0       0
  7178 ;;      Temps:          0       1       0       0
  7179 ;;      Totals:         0       4       0       0
  7180 ;;Total ram usage:        4 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    6
  7183 ;; This function calls:
  7184 ;;		_AdcChSelect
  7185 ;;		_AdcGetResult
  7186 ;;		_AdcGo
  7187 ;;		_AdcIsBusy
  7188 ;; This function is called by:
  7189 ;;		_RfSendPowerState
  7190 ;;		_main
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           
  7195                           ;psect for function _AdcSample
  7196  0E51                     _AdcSample:	
  7197                           
  7198                           ;incstack = 0
  7199                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  7200                           ;AdcSample@ch stored from wreg
  7201  0E51  0020               	movlb	0	; select bank0
  7202  0E52  00A5               	movwf	AdcSample@ch
  7203                           
  7204                           ;adc16.c: 83: AdcChSelect(ch);
  7205  0E53  0825               	movf	AdcSample@ch,w
  7206  0E54  267F  3188         	fcall	_AdcChSelect
  7207                           
  7208                           ;adc16.c: 86: AdcGo();
  7209  0E56  2679  3188         	fcall	_AdcGo
  7210                           
  7211                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7212  0E58  30C7               	movlw	199
  7213  0E59  0020               	movlb	0	; select bank0
  7214  0E5A  00A4               	movwf	??_AdcSample
  7215  0E5B                     u2807:	
  7216  0E5B  0000               	nop
  7217  0E5C  0BA4               	decfsz	??_AdcSample,f
  7218  0E5D  2E5B               	goto	u2807
  7219  0E5E  2E5F               	nop2	;nop
  7220  0E5F  0000               	nop
  7221  0E60                     l2801:	
  7222                           ;adc16.c: 88: while (AdcIsBusy());
  7223                           
  7224  0E60  267B  3188         	fcall	_AdcIsBusy
  7225  0E62  3800               	iorlw	0
  7226  0E63  1D03               	skipz
  7227  0E64  2E60               	goto	l2801
  7228                           
  7229                           ;adc16.c: 89: AdcGo();
  7230  0E65  2679  3188         	fcall	_AdcGo
  7231  0E67                     l2805:	
  7232                           ;adc16.c: 90: while (AdcIsBusy());
  7233                           
  7234  0E67  267B  3188         	fcall	_AdcIsBusy
  7235  0E69  3800               	iorlw	0
  7236  0E6A  1D03               	skipz
  7237  0E6B  2E67               	goto	l2805
  7238                           
  7239                           ;psect for function _AdcGetResult
  7240                           
  7241                           ;adc16.c: 92: return AdcGetResult();
  7242  0E6C                     i1L_AdcGetResult:	
  7243  0E6C                     i1Ll2785:	
  7244                           
  7245                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  7246  0E6C  081C               	movf	28,w	;volatile
  7247  0E6D  0020               	movlb	0	; select bank0
  7248  0E6E  00A1               	movwf	?_AdcGetResult+1
  7249  0E6F  01A0               	clrf	?_AdcGetResult
  7250  0E70  0021               	movlb	1	; select bank1
  7251  0E71  081B               	movf	27,w	;volatile
  7252  0E72  0020               	movlb	0	; select bank0
  7253  0E73  04A0               	iorwf	?_AdcGetResult,f
  7254  0E74                     i1Ll79:	
  7255  0E74  0821               	movf	?_AdcGetResult+1,w
  7256  0E75  00A3               	movwf	?_AdcSample+1
  7257  0E76  0820               	movf	?_AdcGetResult,w
  7258  0E77  00A2               	movwf	?_AdcSample
  7259  0E78  0008               	return
  7260  0E79                     __end_of_AdcSample:	
  7261  0E79                     __ptext10:	
  7262 ;; *************** function _AdcGo *****************
  7263 ;; Defined at:
  7264 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;		None
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;		None               void
  7271 ;; Registers used:
  7272 ;;		None
  7273 ;; Tracked objects:
  7274 ;;		On entry : 1F/1
  7275 ;;		On exit  : 1F/1
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7278 ;;      Params:         0       0       0       0
  7279 ;;      Locals:         0       0       0       0
  7280 ;;      Temps:          0       0       0       0
  7281 ;;      Totals:         0       0       0       0
  7282 ;;Total ram usage:        0 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    5
  7285 ;; This function calls:
  7286 ;;		Nothing
  7287 ;; This function is called by:
  7288 ;;		_AdcSample
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _AdcGo
  7294  0E79                     _AdcGo:	
  7295                           
  7296                           ;adc16.c: 31: ADCON0 |= 1<<1;
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in _AdcGo: []
  7300  0E79  149D               	bsf	29,1	;volatile
  7301  0E7A  0008               	return
  7302  0E7B                     __end_of_AdcGo:	
  7303  0E7B                     __ptext9:	
  7304 ;; *************** function _AdcIsBusy *****************
  7305 ;; Defined at:
  7306 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;		None
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;		None
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      unsigned char 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/1
  7317 ;;		On exit  : 1F/1
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7320 ;;      Params:         0       0       0       0
  7321 ;;      Locals:         0       0       0       0
  7322 ;;      Temps:          0       0       0       0
  7323 ;;      Totals:         0       0       0       0
  7324 ;;Total ram usage:        0 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    5
  7327 ;; This function calls:
  7328 ;;		Nothing
  7329 ;; This function is called by:
  7330 ;;		_AdcSample
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           
  7335                           ;psect for function _AdcIsBusy
  7336  0E7B                     _AdcIsBusy:	
  7337                           
  7338                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  7339                           
  7340                           ;incstack = 0
  7341                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  7342  0E7B  0021               	movlb	1	; select bank1
  7343  0E7C  361D               	lsrf	29,w	;volatile
  7344  0E7D  3901               	andlw	1
  7345  0E7E  0008               	return
  7346  0E7F                     __end_of_AdcIsBusy:	
  7347  0E7F                     __ptext12:	
  7348 ;; *************** function _AdcChSelect *****************
  7349 ;; Defined at:
  7350 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  channel         1    wreg     enum E4221
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;  channel         1    0[BANK0 ] enum E4221
  7355 ;; Return value:  Size  Location     Type
  7356 ;;		None               void
  7357 ;; Registers used:
  7358 ;;		wreg, status,2, status,0
  7359 ;; Tracked objects:
  7360 ;;		On entry : 1F/0
  7361 ;;		On exit  : 1F/1
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7364 ;;      Params:         0       0       0       0
  7365 ;;      Locals:         0       1       0       0
  7366 ;;      Temps:          0       0       0       0
  7367 ;;      Totals:         0       1       0       0
  7368 ;;Total ram usage:        1 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    5
  7371 ;; This function calls:
  7372 ;;		Nothing
  7373 ;; This function is called by:
  7374 ;;		_AdcSample
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           
  7379                           ;psect for function _AdcChSelect
  7380  0E7F                     _AdcChSelect:	
  7381                           
  7382                           ;incstack = 0
  7383                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  7384                           ;AdcChSelect@channel stored from wreg
  7385  0E7F  00A0               	movwf	AdcChSelect@channel
  7386                           
  7387                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  7388  0E80  0709               	addwf	9,w
  7389  0E81  0709               	addwf	9,w
  7390  0E82  3801               	iorlw	1
  7391  0E83  0021               	movlb	1	; select bank1
  7392  0E84  009D               	movwf	29	;volatile
  7393  0E85  0008               	return
  7394  0E86                     __end_of_AdcChSelect:	
  7395  0E86                     __ptext5:	
  7396 ;; *************** function _PwrAdcSleep *****************
  7397 ;; Defined at:
  7398 ;;		line 178 in file "../../../src/node/power.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;		None
  7401 ;; Auto vars:     Size  Location     Type
  7402 ;;		None
  7403 ;; Return value:  Size  Location     Type
  7404 ;;		None               void
  7405 ;; Registers used:
  7406 ;;		status,2, status,0, pclath, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/1
  7409 ;;		On exit  : 1F/1
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7412 ;;      Params:         0       0       0       0
  7413 ;;      Locals:         0       0       0       0
  7414 ;;      Temps:          0       0       0       0
  7415 ;;      Totals:         0       0       0       0
  7416 ;;Total ram usage:        0 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    6
  7419 ;; This function calls:
  7420 ;;		_AdcDeinit
  7421 ;; This function is called by:
  7422 ;;		_RfSendPowerState
  7423 ;;		_main
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           
  7428                           ;psect for function _PwrAdcSleep
  7429  0E86                     _PwrAdcSleep:	
  7430                           
  7431                           ;power.c: 180: ANSELC = 0;
  7432                           
  7433                           ;incstack = 0
  7434                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7435  0E86  0023               	movlb	3	; select bank3
  7436  0E87  018E               	clrf	14	;volatile
  7437                           
  7438                           ;power.c: 181: TRISCbits.TRISC0 = 0;
  7439  0E88  0021               	movlb	1	; select bank1
  7440  0E89  100E               	bcf	14,0	;volatile
  7441                           
  7442                           ;power.c: 183: AdcDeinit();
  7443  0E8A  2FF9               	ljmp	l2783
  7444  0E8B                     __end_of_PwrAdcSleep:	
  7445  0E8B                     __ptext3:	
  7446 ;; *************** function _PwrAdcWake *****************
  7447 ;; Defined at:
  7448 ;;		line 186 in file "../../../src/node/power.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;		None
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;		None               void
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/2
  7459 ;;		On exit  : 1F/1
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7462 ;;      Params:         0       0       0       0
  7463 ;;      Locals:         0       0       0       0
  7464 ;;      Temps:          0       0       0       0
  7465 ;;      Totals:         0       0       0       0
  7466 ;;Total ram usage:        0 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; Hardware stack levels required when called:    6
  7469 ;; This function calls:
  7470 ;;		_AdcInit
  7471 ;; This function is called by:
  7472 ;;		_RfSendPowerState
  7473 ;;		_main
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           
  7478                           ;psect for function _PwrAdcWake
  7479  0E8B                     _PwrAdcWake:	
  7480                           
  7481                           ;power.c: 188: ANSELCbits.ANSC0 = 1;
  7482                           
  7483                           ;incstack = 0
  7484                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7485  0E8B  0023               	movlb	3	; select bank3
  7486  0E8C  140E               	bsf	14,0	;volatile
  7487                           
  7488                           ;power.c: 189: TRISCbits.TRISC0 = 1;
  7489  0E8D  0021               	movlb	1	; select bank1
  7490  0E8E  140E               	bsf	14,0	;volatile
  7491                           
  7492                           ;power.c: 191: AdcInit();
  7493  0E8F  3183  2B08         	ljmp	l2775
  7494  0E91                     __end_of_PwrAdcWake:	
  7495  0E91                     __ptext1:	
  7496 ;; *************** function _RfSendSampleWeatherNode *****************
  7497 ;; Defined at:
  7498 ;;		line 34 in file "../../../src/rfstack/packets.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7501 ;;		 -> rfTrcvStatus(75), 
  7502 ;;  temperature     2    8[BANK0 ] unsigned int 
  7503 ;;  humidity        2   10[BANK0 ] unsigned int 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  inst            1   12[BANK0 ] PTR struct rfTrcvStatus_
  7506 ;;		 -> rfTrcvStatus(75), 
  7507 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  7508 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;		None               void
  7511 ;; Registers used:
  7512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 1F/0
  7515 ;;		On exit  : 1F/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7518 ;;      Params:         0       4       0       0
  7519 ;;      Locals:         0       2       0       0
  7520 ;;      Temps:          0       0       0       0
  7521 ;;      Totals:         0       6       0       0
  7522 ;;Total ram usage:        6 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    6
  7525 ;; This function calls:
  7526 ;;		_Mrf49xaAllocPacket
  7527 ;;		_Mrf49xaTxPacket
  7528 ;; This function is called by:
  7529 ;;		_main
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _RfSendSampleWeatherNode
  7535  0E91                     _RfSendSampleWeatherNode:	
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7539                           ;RfSendSampleWeatherNode@inst stored from wreg
  7540  0E91  00AC               	movwf	RfSendSampleWeatherNode@inst
  7541                           
  7542                           ;packets.c: 36: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(inst);
  7543  0E92  26D7  3188         	fcall	_Mrf49xaAllocPacket
  7544  0E94  00AD               	movwf	RfSendSampleWeatherNode@packet
  7545                           
  7546                           ;packets.c: 38: packet->packet.size = 10;
  7547  0E95  0A2D               	incf	RfSendSampleWeatherNode@packet,w
  7548  0E96  0086               	movwf	6
  7549  0E97  300A               	movlw	10
  7550  0E98  0187               	clrf	7
  7551  0E99  0081               	movwf	1
  7552                           
  7553                           ;packets.c: 39: packet->packet.id = RF_APP_SAMPLE;
  7554  0E9A  082D               	movf	RfSendSampleWeatherNode@packet,w
  7555  0E9B  3E04               	addlw	4
  7556  0E9C  0086               	movwf	6
  7557  0E9D  0181               	clrf	1
  7558                           
  7559                           ;packets.c: 40: packet->packet.dst = 0xFF;
  7560  0E9E  082D               	movf	RfSendSampleWeatherNode@packet,w
  7561  0E9F  3E03               	addlw	3
  7562  0EA0  0086               	movwf	6
  7563  0EA1  30FF               	movlw	255
  7564  0EA2  0081               	movwf	1
  7565                           
  7566                           ;packets.c: 42: packet->packet.data[0] = 0;
  7567  0EA3  082D               	movf	RfSendSampleWeatherNode@packet,w
  7568  0EA4  3E06               	addlw	6
  7569  0EA5  0086               	movwf	6
  7570  0EA6  0181               	clrf	1
  7571                           
  7572                           ;packets.c: 43: packet->packet.data[1] = 0;
  7573  0EA7  082D               	movf	RfSendSampleWeatherNode@packet,w
  7574  0EA8  3E07               	addlw	7
  7575  0EA9  0086               	movwf	6
  7576  0EAA  0181               	clrf	1
  7577                           
  7578                           ;packets.c: 44: packet->packet.data[2] = 0;
  7579  0EAB  082D               	movf	RfSendSampleWeatherNode@packet,w
  7580  0EAC  3E08               	addlw	8
  7581  0EAD  0086               	movwf	6
  7582  0EAE  0181               	clrf	1
  7583                           
  7584                           ;packets.c: 45: packet->packet.data[3] = 0;
  7585  0EAF  082D               	movf	RfSendSampleWeatherNode@packet,w
  7586  0EB0  3E09               	addlw	9
  7587  0EB1  0086               	movwf	6
  7588  0EB2  0181               	clrf	1
  7589                           
  7590                           ;packets.c: 47: packet->packet.data[4] = 0;
  7591  0EB3  082D               	movf	RfSendSampleWeatherNode@packet,w
  7592  0EB4  3E0A               	addlw	10
  7593  0EB5  0086               	movwf	6
  7594  0EB6  0181               	clrf	1
  7595                           
  7596                           ;packets.c: 49: packet->packet.data[6] = temperature >> 8;
  7597  0EB7  082D               	movf	RfSendSampleWeatherNode@packet,w
  7598  0EB8  3E0C               	addlw	12
  7599  0EB9  0086               	movwf	6
  7600  0EBA  0829               	movf	RfSendSampleWeatherNode@temperature+1,w
  7601  0EBB  0081               	movwf	1
  7602                           
  7603                           ;packets.c: 50: packet->packet.data[5] = temperature & 0xFF;
  7604  0EBC  082D               	movf	RfSendSampleWeatherNode@packet,w
  7605  0EBD  3E0B               	addlw	11
  7606  0EBE  0086               	movwf	6
  7607  0EBF  0828               	movf	RfSendSampleWeatherNode@temperature,w
  7608  0EC0  0081               	movwf	1
  7609                           
  7610                           ;packets.c: 52: packet->packet.data[7] = 1;
  7611  0EC1  082D               	movf	RfSendSampleWeatherNode@packet,w
  7612  0EC2  3E0D               	addlw	13
  7613  0EC3  0086               	movwf	6
  7614  0EC4  0181               	clrf	1
  7615  0EC5  0A81               	incf	1,f
  7616                           
  7617                           ;packets.c: 54: packet->packet.data[9] = humidity >> 8;
  7618  0EC6  082D               	movf	RfSendSampleWeatherNode@packet,w
  7619  0EC7  3E0F               	addlw	15
  7620  0EC8  0086               	movwf	6
  7621  0EC9  082B               	movf	RfSendSampleWeatherNode@humidity+1,w
  7622  0ECA  0081               	movwf	1
  7623                           
  7624                           ;packets.c: 55: packet->packet.data[8] = humidity & 0xFF;
  7625  0ECB  082D               	movf	RfSendSampleWeatherNode@packet,w
  7626  0ECC  3E0E               	addlw	14
  7627  0ECD  0086               	movwf	6
  7628  0ECE  082A               	movf	RfSendSampleWeatherNode@humidity,w
  7629  0ECF  0081               	movwf	1
  7630                           
  7631                           ;packets.c: 57: Mrf49xaTxPacket(inst, packet, 0, 1);
  7632  0ED0  082D               	movf	RfSendSampleWeatherNode@packet,w
  7633  0ED1  00A0               	movwf	Mrf49xaTxPacket@packet
  7634  0ED2  01A1               	clrf	Mrf49xaTxPacket@response
  7635  0ED3  01A2               	clrf	Mrf49xaTxPacket@needAck
  7636  0ED4  0AA2               	incf	Mrf49xaTxPacket@needAck,f
  7637  0ED5  082C               	movf	RfSendSampleWeatherNode@inst,w
  7638  0ED6  2EF4               	ljmp	_Mrf49xaTxPacket
  7639  0ED7                     __end_of_RfSendSampleWeatherNode:	
  7640  0ED7                     __ptext7:	
  7641 ;; *************** function _Mrf49xaAllocPacket *****************
  7642 ;; Defined at:
  7643 ;;		line 109 in file "../../../src/devices/mrf49xa_mac.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7646 ;;		 -> rfTrcvStatus(75), 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  inst            1    0[BANK0 ] PTR struct rfTrcvStatus_
  7649 ;;		 -> rfTrcvStatus(75), 
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7652 ;; Registers used:
  7653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7654 ;; Tracked objects:
  7655 ;;		On entry : 1F/0
  7656 ;;		On exit  : 1F/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7659 ;;      Params:         0       0       0       0
  7660 ;;      Locals:         0       1       0       0
  7661 ;;      Temps:          0       0       0       0
  7662 ;;      Totals:         0       1       0       0
  7663 ;;Total ram usage:        1 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    5
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_RfSendPowerState
  7670 ;;		_RfSendSampleWeatherNode
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _Mrf49xaAllocPacket
  7676  0ED7                     _Mrf49xaAllocPacket:	
  7677                           
  7678                           ;incstack = 0
  7679                           ; Regs used in _Mrf49xaAllocPacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7680                           ;Mrf49xaAllocPacket@inst stored from wreg
  7681  0ED7  00A0               	movwf	Mrf49xaAllocPacket@inst
  7682                           
  7683                           ;mrf49xa_mac.c: 111: if (inst->rxPacket[0].state == PKT_FREE)
  7684  0ED8  0A20               	incf	Mrf49xaAllocPacket@inst,w
  7685  0ED9  0086               	movwf	6
  7686  0EDA  0187               	clrf	7
  7687  0EDB  0881               	movf	1,f
  7688  0EDC  1D03               	skipz
  7689  0EDD  2EE5               	goto	l3303
  7690                           
  7691                           ;mrf49xa_mac.c: 112: {
  7692                           ;mrf49xa_mac.c: 113: inst->rxPacket[0].state = PKT_SW_BUSY;
  7693  0EDE  0A20               	incf	Mrf49xaAllocPacket@inst,w
  7694  0EDF  0086               	movwf	6
  7695  0EE0  3006               	movlw	6
  7696  0EE1  0081               	movwf	1
  7697                           
  7698                           ;mrf49xa_mac.c: 114: return &(inst->rxPacket[0]);
  7699  0EE2  0820               	movf	Mrf49xaAllocPacket@inst,w
  7700  0EE3  3E01               	addlw	1
  7701  0EE4  0008               	return
  7702  0EE5                     l3303:	
  7703                           
  7704                           ;mrf49xa_mac.c: 115: }
  7705                           ;mrf49xa_mac.c: 117: if (inst->rxPacket[1].state == PKT_FREE)
  7706  0EE5  0820               	movf	Mrf49xaAllocPacket@inst,w
  7707  0EE6  3E19               	addlw	25
  7708  0EE7  0086               	movwf	6
  7709  0EE8  0187               	clrf	7
  7710  0EE9  0881               	movf	1,f
  7711  0EEA  1D03               	skipz
  7712  0EEB  3400               	retlw	0
  7713                           
  7714                           ;mrf49xa_mac.c: 118: {
  7715                           ;mrf49xa_mac.c: 119: inst->rxPacket[1].state = PKT_SW_BUSY;
  7716  0EEC  0820               	movf	Mrf49xaAllocPacket@inst,w
  7717  0EED  3E19               	addlw	25
  7718  0EEE  0086               	movwf	6
  7719  0EEF  3006               	movlw	6
  7720  0EF0  0081               	movwf	1
  7721                           
  7722                           ;mrf49xa_mac.c: 120: return &(inst->rxPacket[1]);
  7723  0EF1  0820               	movf	Mrf49xaAllocPacket@inst,w
  7724  0EF2  3E19               	addlw	25
  7725  0EF3  0008               	return
  7726  0EF4                     __end_of_Mrf49xaAllocPacket:	
  7727                           ;mrf49xa_mac.c: 121: }
  7728                           ;mrf49xa_mac.c: 123: return (0);
  7729                           
  7730  0EF4                     __ptext56:	
  7731 ;; *************** function _Mrf49xaTxPacket *****************
  7732 ;; Defined at:
  7733 ;;		line 17 in file "../../../src/devices/mrf49xa_mac.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7736 ;;		 -> rfTrcvStatus(75), 
  7737 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  7738 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  7739 ;;  response        1    1[BANK0 ] unsigned char 
  7740 ;;  needAck         1    2[BANK0 ] unsigned char 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  inst            1    7[BANK0 ] PTR struct rfTrcvStatus_
  7743 ;;		 -> rfTrcvStatus(75), 
  7744 ;;  i               1    6[BANK0 ] unsigned char 
  7745 ;;  crc             1    5[BANK0 ] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      unsigned char 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7750 ;; Tracked objects:
  7751 ;;		On entry : 1F/0
  7752 ;;		On exit  : 1F/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7755 ;;      Params:         0       3       0       0
  7756 ;;      Locals:         0       3       0       0
  7757 ;;      Temps:          0       2       0       0
  7758 ;;      Totals:         0       8       0       0
  7759 ;;Total ram usage:        8 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    5
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_Mrf49xaTxAck
  7766 ;;		_HandlePacket
  7767 ;;		_RfSendPowerState
  7768 ;;		_RfSendSampleWeatherNode
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           
  7773                           ;psect for function _Mrf49xaTxPacket
  7774  0EF4                     _Mrf49xaTxPacket:	
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  7778                           ;Mrf49xaTxPacket@inst stored from wreg
  7779  0EF4  00A7               	movwf	Mrf49xaTxPacket@inst
  7780                           
  7781                           ;mrf49xa_mac.c: 19: uint8_t i, crc = 0;
  7782  0EF5  01A5               	clrf	Mrf49xaTxPacket@crc
  7783                           
  7784                           ;mrf49xa_mac.c: 21: if (&(inst->txPacket) == packet)
  7785  0EF6  3E31               	addlw	49
  7786  0EF7  0620               	xorwf	Mrf49xaTxPacket@packet,w
  7787  0EF8  1D03               	skipz
  7788  0EF9  2F16               	goto	l3213
  7789                           
  7790                           ;mrf49xa_mac.c: 22: {
  7791                           ;mrf49xa_mac.c: 23: if (response)
  7792  0EFA  0821               	movf	Mrf49xaTxPacket@response,w
  7793  0EFB  1903               	btfsc	3,2
  7794  0EFC  2F05               	goto	l3195
  7795                           
  7796                           ;mrf49xa_mac.c: 24: {
  7797                           ;mrf49xa_mac.c: 25: inst->txPacket.packet.dst = inst->txPacket.packet.src;
  7798  0EFD  0827               	movf	Mrf49xaTxPacket@inst,w
  7799  0EFE  3E34               	addlw	52
  7800  0EFF  0086               	movwf	6
  7801  0F00  0187               	clrf	7
  7802  0F01  0827               	movf	Mrf49xaTxPacket@inst,w
  7803  0F02  3E33               	addlw	51
  7804  0F03  27F4  3188         	fcall	PL22	;call to abstracted procedure
  7805  0F05                     l3195:	
  7806                           
  7807                           ;mrf49xa_mac.c: 26: }
  7808                           ;mrf49xa_mac.c: 27: inst->txPacket.packet.src = cfgRam.nodeId;
  7809  0F05  0827               	movf	Mrf49xaTxPacket@inst,w
  7810  0F06  3E33               	addlw	51
  7811  0F07  0086               	movwf	6
  7812  0F08  0187               	clrf	7
  7813  0F09  0837               	movf	_cfgRam,w
  7814  0F0A  0081               	movwf	1
  7815                           
  7816                           ;mrf49xa_mac.c: 28: inst->txPacket.packet.size += 5;
  7817  0F0B  0827               	movf	Mrf49xaTxPacket@inst,w
  7818  0F0C  3E32               	addlw	50
  7819  0F0D  0086               	movwf	6
  7820  0F0E  3005               	movlw	5
  7821  0F0F  0781               	addwf	1,f
  7822                           
  7823                           ;mrf49xa_mac.c: 30: inst->txPacket.state = PKT_READY_FOR_TX;
  7824  0F10  0827               	movf	Mrf49xaTxPacket@inst,w
  7825  0F11  3E31               	addlw	49
  7826  0F12  0086               	movwf	6
  7827                           
  7828                           ;mrf49xa_mac.c: 31: inst->txPacket.retry = 0;
  7829                           
  7830                           ;mrf49xa_mac.c: 32: inst->txPacket.retransmit = 0;
  7831                           
  7832                           ;mrf49xa_mac.c: 33: inst->txPacket.needAck = (needAck == ((uint8_t)1)) ? NEED_ACK : NO_A
      +                          CK;
  7833                           
  7834                           ;mrf49xa_mac.c: 34: inst->txPacket.crc = 0;
  7835  0F13  27AA               	fcall	PL8	;call to abstracted procedure
  7836  0F14  0181               	clrf	1
  7837                           
  7838                           ;mrf49xa_mac.c: 35: return ((uint8_t)1);
  7839  0F15  3401               	retlw	1
  7840  0F16                     l3213:	
  7841                           
  7842                           ;mrf49xa_mac.c: 36: }
  7843                           ;mrf49xa_mac.c: 39: if (inst->txPacket.state != PKT_FREE)
  7844  0F16  0827               	movf	Mrf49xaTxPacket@inst,w
  7845  0F17  3E31               	addlw	49
  7846  0F18  0086               	movwf	6
  7847  0F19  0187               	clrf	7
  7848  0F1A  0801               	movf	1,w
  7849  0F1B  3A00               	xorlw	0
  7850  0F1C  1D03               	btfss	3,2
  7851                           
  7852                           ;mrf49xa_mac.c: 40: {
  7853                           ;mrf49xa_mac.c: 42: return ((uint8_t)0);
  7854  0F1D  3400               	retlw	0
  7855                           
  7856                           ;mrf49xa_mac.c: 44: else
  7857                           ;mrf49xa_mac.c: 45: {
  7858                           ;mrf49xa_mac.c: 46: if (response)
  7859  0F1E  0821               	movf	Mrf49xaTxPacket@response,w
  7860  0F1F  1903               	btfsc	3,2
  7861  0F20  2F28               	goto	l3225
  7862                           
  7863                           ;mrf49xa_mac.c: 47: {
  7864                           ;mrf49xa_mac.c: 48: packet->packet.dst = packet->packet.src;
  7865  0F21  0820               	movf	Mrf49xaTxPacket@packet,w
  7866  0F22  3E03               	addlw	3
  7867  0F23  0086               	movwf	6
  7868  0F24  0820               	movf	Mrf49xaTxPacket@packet,w
  7869  0F25  3E02               	addlw	2
  7870  0F26  27F4  3188         	fcall	PL22	;call to abstracted procedure
  7871  0F28                     l3225:	
  7872                           
  7873                           ;mrf49xa_mac.c: 49: }
  7874                           ;mrf49xa_mac.c: 50: packet->packet.src = cfgRam.nodeId;
  7875  0F28  0820               	movf	Mrf49xaTxPacket@packet,w
  7876  0F29  3E02               	addlw	2
  7877  0F2A  0086               	movwf	6
  7878  0F2B  0187               	clrf	7
  7879  0F2C  0837               	movf	_cfgRam,w
  7880  0F2D  0081               	movwf	1
  7881                           
  7882                           ;mrf49xa_mac.c: 51: packet->packet.size += 5;
  7883  0F2E  0A20               	incf	Mrf49xaTxPacket@packet,w
  7884  0F2F  0086               	movwf	6
  7885  0F30  3005               	movlw	5
  7886  0F31  0781               	addwf	1,f
  7887                           
  7888                           ;mrf49xa_mac.c: 53: packet->state = PKT_FREE;
  7889  0F32  0820               	movf	Mrf49xaTxPacket@packet,w
  7890  0F33  0086               	movwf	6
  7891  0F34  0181               	clrf	1
  7892                           
  7893                           ;mrf49xa_mac.c: 56: for (i = 0; i < (16 + 5); i++)
  7894  0F35  01A6               	clrf	Mrf49xaTxPacket@i
  7895  0F36                     l3237:	
  7896                           
  7897                           ;mrf49xa_mac.c: 57: {
  7898                           ;mrf49xa_mac.c: 58: inst->txPacket.raw[i] = packet->raw[i];
  7899  0F36  0826               	movf	Mrf49xaTxPacket@i,w
  7900  0F37  0727               	addwf	Mrf49xaTxPacket@inst,w
  7901  0F38  00A3               	movwf	??_Mrf49xaTxPacket
  7902  0F39  3E32               	addlw	50
  7903  0F3A  0086               	movwf	6
  7904  0F3B  0187               	clrf	7
  7905  0F3C  0826               	movf	Mrf49xaTxPacket@i,w
  7906  0F3D  0720               	addwf	Mrf49xaTxPacket@packet,w
  7907  0F3E  00A4               	movwf	??_Mrf49xaTxPacket+1
  7908  0F3F  0A24               	incf	??_Mrf49xaTxPacket+1,w
  7909  0F40  0084               	movwf	4
  7910  0F41  0185               	clrf	5
  7911  0F42  0800               	movf	0,w
  7912  0F43  0081               	movwf	1
  7913  0F44  3015               	movlw	21
  7914  0F45  0AA6               	incf	Mrf49xaTxPacket@i,f
  7915  0F46  0226               	subwf	Mrf49xaTxPacket@i,w
  7916  0F47  1C03               	skipc
  7917  0F48  2F36               	goto	l3237
  7918                           
  7919                           ;mrf49xa_mac.c: 59: }
  7920                           ;mrf49xa_mac.c: 60: for (i = 0; i < packet->packet.size; i++)
  7921  0F49  01A6               	clrf	Mrf49xaTxPacket@i
  7922  0F4A                     l404:	
  7923  0F4A  0A20               	incf	Mrf49xaTxPacket@packet,w
  7924  0F4B  0086               	movwf	6
  7925  0F4C  0187               	clrf	7
  7926  0F4D  0801               	movf	1,w
  7927  0F4E  0226               	subwf	Mrf49xaTxPacket@i,w
  7928  0F4F  1803               	btfsc	3,0
  7929  0F50  2F5A               	goto	l3249
  7930                           
  7931                           ;mrf49xa_mac.c: 61: {
  7932                           ;mrf49xa_mac.c: 62: crc = crc ^ inst->txPacket.raw[i];
  7933  0F51  0826               	movf	Mrf49xaTxPacket@i,w
  7934  0F52  0727               	addwf	Mrf49xaTxPacket@inst,w
  7935  0F53  00A3               	movwf	??_Mrf49xaTxPacket
  7936  0F54  3E32               	addlw	50
  7937  0F55  0086               	movwf	6
  7938  0F56  0801               	movf	1,w
  7939  0F57  06A5               	xorwf	Mrf49xaTxPacket@crc,f
  7940  0F58  0AA6               	incf	Mrf49xaTxPacket@i,f
  7941  0F59  2F4A               	goto	l404
  7942  0F5A                     l3249:	
  7943                           
  7944                           ;mrf49xa_mac.c: 63: }
  7945                           ;mrf49xa_mac.c: 65: inst->txPacket.state = PKT_READY_FOR_TX;
  7946  0F5A  0827               	movf	Mrf49xaTxPacket@inst,w
  7947  0F5B  3E31               	addlw	49
  7948  0F5C  0086               	movwf	6
  7949  0F5D  0187               	clrf	7
  7950                           
  7951                           ;mrf49xa_mac.c: 66: inst->txPacket.retry = 0;
  7952                           
  7953                           ;mrf49xa_mac.c: 67: inst->txPacket.retransmit = 0;
  7954                           
  7955                           ;mrf49xa_mac.c: 68: inst->txPacket.needAck = (needAck == ((uint8_t)1)) ? NEED_ACK : NO_A
      +                          CK;
  7956                           
  7957                           ;mrf49xa_mac.c: 70: inst->txPacket.crc = crc;
  7958  0F5E  27AA               	fcall	PL8	;call to abstracted procedure
  7959  0F5F  0825               	movf	Mrf49xaTxPacket@crc,w
  7960  0F60  0081               	movwf	1
  7961  0F61  3401               	retlw	1
  7962  0F62                     __end_of_Mrf49xaTxPacket:	
  7963  0F62                     __ptext46:	
  7964 ;; *************** function _handleCfgRead *****************
  7965 ;; Defined at:
  7966 ;;		line 102 in file "../../../src/rfstack/client.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7969 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7972 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  7973 ;;  index           1    7[BANK0 ] unsigned char 
  7974 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7975 ;; Return value:  Size  Location     Type
  7976 ;;		None               void
  7977 ;; Registers used:
  7978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7979 ;; Tracked objects:
  7980 ;;		On entry : 1F/0
  7981 ;;		On exit  : 1F/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7984 ;;      Params:         0       0       0       0
  7985 ;;      Locals:         0       3       0       0
  7986 ;;      Temps:          0       0       0       0
  7987 ;;      Totals:         0       3       0       0
  7988 ;;Total ram usage:        3 bytes
  7989 ;; Hardware stack levels used:    1
  7990 ;; Hardware stack levels required when called:    6
  7991 ;; This function calls:
  7992 ;;		_CfgGetSizeByType
  7993 ;;		_memcpy
  7994 ;; This function is called by:
  7995 ;;		_HandlePacket
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           
  8000                           ;psect for function _handleCfgRead
  8001  0F62                     _handleCfgRead:	
  8002                           
  8003                           ;incstack = 0
  8004                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8005                           ;handleCfgRead@packet stored from wreg
  8006  0F62  00A8               	movwf	handleCfgRead@packet
  8007                           
  8008                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  8009  0F63  0086               	movwf	6
  8010  0F64  0187               	clrf	7
  8011  0F65  3F46               	moviw [6]fsr1
  8012  0F66  00A7               	movwf	handleCfgRead@index
  8013                           
  8014                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  8015  0F67  0727               	addwf	handleCfgRead@index,w
  8016  0F68  0727               	addwf	handleCfgRead@index,w
  8017  0F69  3E59               	addlw	low (_parameters| (0+32768))
  8018  0F6A  3182               	movlp	high __stringtab
  8019  0F6B  000A               	callw
  8020  0F6C  3188               	pagesel	$	;select current page
  8021  0F6D  2794               	fcall	_CfgGetSizeByType
  8022  0F6E  00A6               	movwf	handleCfgRead@nrOfBytes
  8023                           
  8024                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  8025  0F6F  0A28               	incf	handleCfgRead@packet,w
  8026  0F70  0086               	movwf	6
  8027  0F71  0187               	clrf	7
  8028  0F72  0826               	movf	handleCfgRead@nrOfBytes,w
  8029  0F73  3E02               	addlw	2
  8030  0F74  0081               	movwf	1
  8031                           
  8032                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  8033  0F75  0828               	movf	handleCfgRead@packet,w
  8034  0F76  3E04               	addlw	4
  8035  0F77  0086               	movwf	6
  8036  0F78  30B2               	movlw	178
  8037  0F79  0081               	movwf	1
  8038                           
  8039                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  8040  0F7A  0828               	movf	handleCfgRead@packet,w
  8041  0F7B  3E07               	addlw	7
  8042  0F7C  0086               	movwf	6
  8043  0F7D  0827               	movf	handleCfgRead@index,w
  8044  0F7E  0727               	addwf	handleCfgRead@index,w
  8045  0F7F  0727               	addwf	handleCfgRead@index,w
  8046  0F80  3E5A               	addlw	low ((_parameters| (0+32768)+1))
  8047  0F81  3182               	movlp	high __stringtab
  8048  0F82  000A               	callw
  8049  0F83  3188               	pagesel	$	;select current page
  8050  0F84  0081               	movwf	1
  8051                           
  8052                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  8053  0F85  0827               	movf	handleCfgRead@index,w
  8054  0F86  0727               	addwf	handleCfgRead@index,w
  8055  0F87  0727               	addwf	handleCfgRead@index,w
  8056  0F88  3E5B               	addlw	low ((_parameters| (0+32768)+2))
  8057  0F89  3182               	movlp	high __stringtab
  8058  0F8A  000A               	callw
  8059  0F8B  3188               	pagesel	$	;select current page
  8060  0F8C  00A0               	movwf	memcpy@s1
  8061  0F8D  0826               	movf	handleCfgRead@nrOfBytes,w
  8062  0F8E  00A1               	movwf	memcpy@n
  8063  0F8F  01A2               	clrf	memcpy@n+1
  8064  0F90  0828               	movf	handleCfgRead@packet,w
  8065  0F91  3E08               	addlw	8
  8066  0F92  3182  2AD2         	ljmp	_memcpy
  8067  0F94                     __end_of_handleCfgRead:	
  8068  0F94                     __ptext48:	
  8069 ;; *************** function _CfgGetSizeByType *****************
  8070 ;; Defined at:
  8071 ;;		line 29 in file "../../../src/node/config.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  type            1    wreg     enum E4251
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  type            1    0[BANK0 ] enum E4251
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      unsigned char 
  8078 ;; Registers used:
  8079 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8080 ;; Tracked objects:
  8081 ;;		On entry : 1F/0
  8082 ;;		On exit  : 1F/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8085 ;;      Params:         0       0       0       0
  8086 ;;      Locals:         0       1       0       0
  8087 ;;      Temps:          0       0       0       0
  8088 ;;      Totals:         0       1       0       0
  8089 ;;Total ram usage:        1 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    5
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_handleCfgRead
  8096 ;;		_handleCfgWrite
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _CfgGetSizeByType
  8102  0F94                     _CfgGetSizeByType:	
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  8106                           ;CfgGetSizeByType@type stored from wreg
  8107  0F94  00A0               	movwf	CfgGetSizeByType@type
  8108                           
  8109                           ;config.c: 31: switch(type)
  8110  0F95  2F9A               	goto	l3483
  8111  0F96                     l3465:	
  8112  0F96  3401               	retlw	1
  8113  0F97                     l3469:	
  8114  0F97  3402               	retlw	2
  8115  0F98                     l3473:	
  8116  0F98  3404               	retlw	4
  8117  0F99                     l3477:	
  8118  0F99  3400               	retlw	0
  8119  0F9A                     l3483:	
  8120  0F9A  0820               	movf	CfgGetSizeByType@type,w
  8121                           
  8122                           ; Switch size 1, requested type "space"
  8123                           ; Number of cases is 3, Range of values is 0 to 2
  8124                           ; switch strategies available:
  8125                           ; Name         Instructions Cycles
  8126                           ; simple_byte           10     6 (average)
  8127                           ; direct_byte           12     6 (fixed)
  8128                           ; jumptable            260     6 (fixed)
  8129                           ;	Chosen strategy is simple_byte
  8130  0F9B  3A00               	xorlw	0	; case 0
  8131  0F9C  1903               	skipnz
  8132  0F9D  2F96               	goto	l3465
  8133  0F9E  3A01               	xorlw	1	; case 1
  8134  0F9F  1903               	skipnz
  8135  0FA0  2F97               	goto	l3469
  8136  0FA1  3A03               	xorlw	3	; case 2
  8137  0FA2  1903               	skipnz
  8138  0FA3  2F98               	goto	l3473
  8139  0FA4  2F99               	goto	l3477
  8140  0FA5  0008               	return
  8141  0FA6                     __end_of_CfgGetSizeByType:	
  8142  0FA6                     __ptext15:	
  8143 ;; *************** function _PwrSensorInit *****************
  8144 ;; Defined at:
  8145 ;;		line 150 in file "../../../src/node/power.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;		None
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;		None
  8150 ;; Return value:  Size  Location     Type
  8151 ;;		None               void
  8152 ;; Registers used:
  8153 ;;		None
  8154 ;; Tracked objects:
  8155 ;;		On entry : 17F/1
  8156 ;;		On exit  : 17F/2
  8157 ;;		Unchanged: 160/0
  8158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8159 ;;      Params:         0       0       0       0
  8160 ;;      Locals:         0       0       0       0
  8161 ;;      Temps:          0       0       0       0
  8162 ;;      Totals:         0       0       0       0
  8163 ;;Total ram usage:        0 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    5
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		_main
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           
  8174                           ;psect for function _PwrSensorInit
  8175  0FA6                     _PwrSensorInit:	
  8176                           
  8177                           ;power.c: 152: TRISCbits.TRISC2 = 0;
  8178                           
  8179                           ;incstack = 0
  8180                           ; Regs used in _PwrSensorInit: []
  8181  0FA6  110E               	bcf	14,2	;volatile
  8182                           
  8183                           ;power.c: 154: LATCbits.LATC2 = 0;
  8184  0FA7  0022               	movlb	2	; select bank2
  8185  0FA8  110E               	bcf	14,2	;volatile
  8186  0FA9  0008               	return
  8187  0FAA                     __end_of_PwrSensorInit:	
  8188  0FAA                     PL8:	
  8189  0FAA  0181               	clrf	1
  8190  0FAB  0A81               	incf	1,f
  8191  0FAC  0827               	movf	Mrf49xaTxPacket@inst,w
  8192  0FAD  3E48               	addlw	72
  8193  0FAE  0086               	movwf	6
  8194  0FAF  30F0               	movlw	-16
  8195  0FB0  0581               	andwf	1,f
  8196  0FB1  0827               	movf	Mrf49xaTxPacket@inst,w
  8197  0FB2  3E48               	addlw	72
  8198  0FB3  0086               	movwf	6
  8199  0FB4  30CF               	movlw	-49
  8200  0FB5  0581               	andwf	1,f
  8201  0FB6  0322               	decf	Mrf49xaTxPacket@needAck,w
  8202  0FB7  3000               	movlw	0
  8203  0FB8  1903               	skipnz
  8204  0FB9  3001               	movlw	1
  8205  0FBA  00A3               	movwf	??_Mrf49xaTxPacket
  8206  0FBB  0827               	movf	Mrf49xaTxPacket@inst,w
  8207  0FBC  3E48               	addlw	72
  8208  0FBD  0086               	movwf	6
  8209  0FBE  0EA3               	swapf	??_Mrf49xaTxPacket,f
  8210  0FBF  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8211  0FC0  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8212  0FC1  0801               	movf	1,w
  8213  0FC2  0623               	xorwf	??_Mrf49xaTxPacket,w
  8214  0FC3  393F               	andlw	-193
  8215  0FC4  0623               	xorwf	??_Mrf49xaTxPacket,w
  8216  0FC5  0081               	movwf	1
  8217  0FC6  0827               	movf	Mrf49xaTxPacket@inst,w
  8218  0FC7  3E47               	addlw	71
  8219  0FC8  0086               	movwf	6
  8220  0FC9  0008               	return
  8221  0FCA                     __end_ofPL8:	
  8222  0FCA                     PL10:	
  8223  0FCA  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8224  0FCB  397F               	andlw	127
  8225  0FCC  0020               	movlb	0	; select bank0
  8226  0FCD  00A4               	movwf	??_Mrf49xaServe
  8227  0FCE  0AA4               	incf	??_Mrf49xaServe,f
  8228  0FCF  0021               	movlb	1	; select bank1
  8229  0FD0  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8230  0FD1  0020               	movlb	0	; select bank0
  8231  0FD2  0624               	xorwf	??_Mrf49xaServe,w
  8232  0FD3  3980               	andlw	-128
  8233  0FD4  0624               	xorwf	??_Mrf49xaServe,w
  8234  0FD5  0021               	movlb	1	; select bank1
  8235  0FD6  0008               	return
  8236  0FD7                     __end_ofPL10:	
  8237  0FD7                     PL12:	
  8238  0FD7  0086               	movwf	6
  8239  0FD8  0187               	clrf	7
  8240  0FD9  0801               	movf	1,w
  8241  0FDA  390F               	andlw	15
  8242  0FDB  00AE               	movwf	??_Mrf49xaTick
  8243  0FDC  0AAE               	incf	??_Mrf49xaTick,f
  8244  0FDD  0801               	movf	1,w
  8245  0FDE  062E               	xorwf	??_Mrf49xaTick,w
  8246  0FDF  39F0               	andlw	-16
  8247  0FE0  062E               	xorwf	??_Mrf49xaTick,w
  8248  0FE1  0081               	movwf	1
  8249  0FE2  0008               	return
  8250  0FE3                     __end_ofPL12:	
  8251  0FE3                     PL16:	
  8252  0FE3  0020               	movlb	0	; select bank0
  8253  0FE4  0825               	movf	Mrf49xaServe@data,w
  8254  0FE5  0081               	movwf	1
  8255  0FE6  0021               	movlb	1	; select bank1
  8256  0FE7  0820               	movf	_rfTrcvStatus^(0+128),w
  8257  0FE8  0008               	return
  8258  0FE9                     __end_ofPL16:	
  8259  0FE9                     PL18:	
  8260  0FE9  0187               	clrf	7
  8261  0FEA  0081               	movwf	1
  8262  0FEB  0828               	movf	handleCfgCmd@packet,w
  8263  0FEC  3E07               	addlw	7
  8264  0FED  0086               	movwf	6
  8265  0FEE  0008               	return
  8266  0FEF                     __end_ofPL18:	
  8267  0FEF                     PL20:	
  8268  0FEF  3040               	movlw	64
  8269  0FF0  0020               	movlb	0	; select bank0
  8270  0FF1  00A0               	movwf	Sleepy@ms
  8271  0FF2  01A1               	clrf	Sleepy@ms+1
  8272  0FF3  0008               	return
  8273  0FF4                     __end_ofPL20:	
  8274  0FF4                     PL22:	
  8275  0FF4  0084               	movwf	4
  8276  0FF5  0185               	clrf	5
  8277  0FF6  0800               	movf	0,w
  8278  0FF7  0081               	movwf	1
  8279  0FF8  0008               	return
  8280  0FF9                     __end_ofPL22:	
  8281  0FF9                     __ptext6:	
  8282 ;; *************** function _AdcDeinit *****************
  8283 ;; Defined at:
  8284 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;		None
  8289 ;; Return value:  Size  Location     Type
  8290 ;;		None               void
  8291 ;; Registers used:
  8292 ;;		status,2
  8293 ;; Tracked objects:
  8294 ;;		On entry : 1F/1
  8295 ;;		On exit  : 1F/1
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8298 ;;      Params:         0       0       0       0
  8299 ;;      Locals:         0       0       0       0
  8300 ;;      Temps:          0       0       0       0
  8301 ;;      Totals:         0       0       0       0
  8302 ;;Total ram usage:        0 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    5
  8305 ;; This function calls:
  8306 ;;		Nothing
  8307 ;; This function is called by:
  8308 ;;		_PwrAdcSleep
  8309 ;; This function uses a non-reentrant model
  8310 ;;
  8311                           
  8312                           
  8313                           ;psect for function _AdcDeinit
  8314  0FF9                     _AdcDeinit:	
  8315  0FF9                     l2783:	
  8316                           ;incstack = 0
  8317                           ; Regs used in _AdcDeinit: [status,2]
  8318                           
  8319                           
  8320                           ;adc16.c: 17: FVRCON = 0;
  8321  0FF9  0022               	movlb	2	; select bank2
  8322  0FFA  0197               	clrf	23	;volatile
  8323                           
  8324                           ;adc16.c: 19: ADCON2 = 0;
  8325  0FFB  0021               	movlb	1	; select bank1
  8326  0FFC  019F               	clrf	31	;volatile
  8327                           
  8328                           ;adc16.c: 20: ADCON1 = 0;
  8329  0FFD  019E               	clrf	30	;volatile
  8330                           
  8331                           ;adc16.c: 21: ADCON0 = 0;
  8332  0FFE  019D               	clrf	29	;volatile
  8333  0FFF  0008               	return
  8334  1000                     __end_of_AdcDeinit:	
  8335                           
  8336                           	psect	dataCOMMON
  8337  0078                     __pdataCOMMON:	
  8338  0078                     _macPtr:	
  8339  0078                     	ds	1
  8340                           
  8341                           	psect	bssBANK0
  8342  0036                     __pbssBANK0:	
  8343  0036                     _powerStatusTicker:	
  8344  0036                     	ds	1
  8345  0037                     _cfgRam:	
  8346  0037                     	ds	9
  8347  0040                     _mrf49Status:	
  8348  0040                     	ds	2
  8349                           
  8350                           	psect	dataBANK0
  8351  0042                     __pdataBANK0:	
  8352  0042                     _coldBoot:	
  8353  0042                     	ds	1
  8354                           
  8355                           	psect	bssBANK1
  8356  00A0                     __pbssBANK1:	
  8357  00A0                     _rfTrcvStatus:	
  8358  00A0                     	ds	75
  8359                           
  8360                           	psect	clrtext
  8361  031B                     clear_ram0:	
  8362                           ;	Called with FSR0 containing the base address, and
  8363                           ;	WREG with the size to clear
  8364                           
  8365  031B  0064               	clrwdt	;clear the watchdog before getting into this loop
  8366  031C                     clrloop0:	
  8367  031C  0180               	clrf	0	;clear RAM location pointed to by FSR
  8368  031D  3101               	addfsr 0,1
  8369  031E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8370  031F  2B1C               	goto	clrloop0	;have we reached the end yet?
  8371  0320  3400               	retlw	0	;all done for this memory range, return
  8372                           
  8373                           	psect	cstackCOMMON
  8374  0070                     __pcstackCOMMON:	
  8375  0070                     ?_SoftI2cStart:	
  8376  0070                     ?_SoftI2cStop:	
  8377                           ; 0 bytes @ 0x0
  8378                           
  8379  0070                     ?_Mrf49xaNeedsReset:	
  8380                           ; 0 bytes @ 0x0
  8381                           
  8382  0070                     ?_Mrf49RxSts:	
  8383                           ; 0 bytes @ 0x0
  8384                           
  8385  0070                     ?_CfgSave:	
  8386                           ; 0 bytes @ 0x0
  8387                           
  8388  0070                     ?_CfgLoad:	
  8389                           ; 0 bytes @ 0x0
  8390                           
  8391  0070                     ?_PwrAdcWake:	
  8392                           ; 0 bytes @ 0x0
  8393                           
  8394  0070                     ?_PwrAdcSleep:	
  8395                           ; 0 bytes @ 0x0
  8396                           
  8397  0070                     ?_PwrAdcInit:	
  8398                           ; 0 bytes @ 0x0
  8399                           
  8400  0070                     ?_PwrSensorInit:	
  8401                           ; 0 bytes @ 0x0
  8402                           
  8403  0070                     ?_PwrI2cInit:	
  8404                           ; 0 bytes @ 0x0
  8405                           
  8406  0070                     ?_PwrRfInit:	
  8407                           ; 0 bytes @ 0x0
  8408                           
  8409  0070                     ?_PwrSensorSleep:	
  8410                           ; 0 bytes @ 0x0
  8411                           
  8412  0070                     ?_PwrI2cSleep:	
  8413                           ; 0 bytes @ 0x0
  8414                           
  8415  0070                     ?_PwrRfSleep:	
  8416                           ; 0 bytes @ 0x0
  8417                           
  8418  0070                     ?_PwrSensorWake:	
  8419                           ; 0 bytes @ 0x0
  8420                           
  8421  0070                     ?_PwrI2cWake:	
  8422                           ; 0 bytes @ 0x0
  8423                           
  8424  0070                     ?_PwrRfWake:	
  8425                           ; 0 bytes @ 0x0
  8426                           
  8427  0070                     ?_SoftI2cNop:	
  8428                           ; 0 bytes @ 0x0
  8429                           
  8430  0070                     ?_SoftI2cInit:	
  8431                           ; 0 bytes @ 0x0
  8432                           
  8433  0070                     ?_SoftI2cRepeatedStart:	
  8434                           ; 0 bytes @ 0x0
  8435                           
  8436  0070                     ?_AdcInit:	
  8437                           ; 0 bytes @ 0x0
  8438                           
  8439  0070                     ?_AdcDeinit:	
  8440                           ; 0 bytes @ 0x0
  8441                           
  8442  0070                     ?_AdcGo:	
  8443                           ; 0 bytes @ 0x0
  8444                           
  8445  0070                     ?_AdcChSelect:	
  8446                           ; 0 bytes @ 0x0
  8447                           
  8448  0070                     ?_ExtIntInit:	
  8449                           ; 0 bytes @ 0x0
  8450                           
  8451  0070                     ?_ExtIntDeinit:	
  8452                           ; 0 bytes @ 0x0
  8453                           
  8454  0070                     ??_ExtIntDeinit:	
  8455                           ; 0 bytes @ 0x0
  8456                           
  8457  0070                     ?_extInt:	
  8458                           ; 0 bytes @ 0x0
  8459                           
  8460  0070                     ?_Mcp9800Start:	
  8461                           ; 0 bytes @ 0x0
  8462                           
  8463  0070                     ?_Mrf49xaModeRx:	
  8464                           ; 0 bytes @ 0x0
  8465                           
  8466  0070                     ?_Mrf49xaModeTx:	
  8467                           ; 0 bytes @ 0x0
  8468                           
  8469  0070                     ?_Mrf49xaModeSleep:	
  8470                           ; 0 bytes @ 0x0
  8471                           
  8472  0070                     ?_Mrf49xaShutdown:	
  8473                           ; 0 bytes @ 0x0
  8474                           
  8475  0070                     ?_Mrf49xaReboot:	
  8476                           ; 0 bytes @ 0x0
  8477                           
  8478  0070                     ?_Mrf49SpiTx:	
  8479                           ; 0 bytes @ 0x0
  8480                           
  8481  0070                     ?_Mrf49TxByte:	
  8482                           ; 0 bytes @ 0x0
  8483                           
  8484  0070                     ?_Mrf49xaTick:	
  8485                           ; 0 bytes @ 0x0
  8486                           
  8487  0070                     ?_handleFwCmd:	
  8488                           ; 0 bytes @ 0x0
  8489                           
  8490  0070                     ?_handleCfgRead:	
  8491                           ; 0 bytes @ 0x0
  8492                           
  8493  0070                     ?_handleCfgWrite:	
  8494                           ; 0 bytes @ 0x0
  8495                           
  8496  0070                     ?_handleCfgCmd:	
  8497                           ; 0 bytes @ 0x0
  8498                           
  8499  0070                     ?_RfSendPowerState:	
  8500                           ; 0 bytes @ 0x0
  8501                           
  8502  0070                     ?_main:	
  8503                           ; 0 bytes @ 0x0
  8504                           
  8505  0070                     ?i1_Mrf49xaModeRx:	
  8506                           ; 0 bytes @ 0x0
  8507                           
  8508  0070                     ?i1_Mrf49xaNeedsReset:	
  8509                           ; 0 bytes @ 0x0
  8510                           
  8511  0070                     ??i1_Mrf49xaNeedsReset:	
  8512                           ; 0 bytes @ 0x0
  8513                           
  8514  0070                     ?i1_Mrf49SpiTx:	
  8515                           ; 0 bytes @ 0x0
  8516                           
  8517  0070                     ??i1_Mrf49SpiTx:	
  8518                           ; 0 bytes @ 0x0
  8519                           
  8520  0070                     ??i1_Mrf49SpiRx:	
  8521                           ; 0 bytes @ 0x0
  8522                           
  8523  0070                     ?i1_Mrf49RxSts:	
  8524                           ; 0 bytes @ 0x0
  8525                           
  8526  0070                     ?i1_Mrf49TxByte:	
  8527                           ; 0 bytes @ 0x0
  8528                           
  8529  0070                     ?_SoftI2cTxByte:	
  8530                           ; 0 bytes @ 0x0
  8531                           
  8532  0070                     ?_Mrf49xaServe:	
  8533                           ; 1 bytes @ 0x0
  8534                           
  8535  0070                     ?_CfgGetSizeByType:	
  8536                           ; 1 bytes @ 0x0
  8537                           
  8538  0070                     ?_SoftI2cRxByte:	
  8539                           ; 1 bytes @ 0x0
  8540                           
  8541  0070                     ?_AdcIsBusy:	
  8542                           ; 1 bytes @ 0x0
  8543                           
  8544  0070                     ?_Mrf49xaInit:	
  8545                           ; 1 bytes @ 0x0
  8546                           
  8547  0070                     ?_Mrf49SpiRx:	
  8548                           ; 1 bytes @ 0x0
  8549                           
  8550  0070                     ?_Mrf49RxCmd:	
  8551                           ; 1 bytes @ 0x0
  8552                           
  8553  0070                     ?_Mrf49RxByte:	
  8554                           ; 1 bytes @ 0x0
  8555                           
  8556  0070                     ?_Mrf49xaPacketPending:	
  8557                           ; 1 bytes @ 0x0
  8558                           
  8559  0070                     ?_Mrf49xaRxPacket:	
  8560                           ; 1 bytes @ 0x0
  8561                           
  8562  0070                     ?_Mrf49xaAllocPacket:	
  8563                           ; 1 bytes @ 0x0
  8564                           
  8565  0070                     ?i1_Mrf49SpiRx:	
  8566                           ; 1 bytes @ 0x0
  8567                           
  8568  0070                     ?i1_Mrf49RxCmd:	
  8569                           ; 1 bytes @ 0x0
  8570                           
  8571  0070                     ?i1_Mrf49RxByte:	
  8572                           ; 1 bytes @ 0x0
  8573                           
  8574  0070                     ?i1_Mrf49xaServe:	
  8575                           ; 1 bytes @ 0x0
  8576                           
  8577  0070                     i1Mrf49SpiTx@byte:	
  8578                           ; 1 bytes @ 0x0
  8579                           
  8580  0070                     i1Mrf49SpiRx@data:	
  8581                           ; 1 bytes @ 0x0
  8582                           
  8583                           
  8584                           ; 1 bytes @ 0x0
  8585  0070                     	ds	1
  8586  0071                     ?i1_Mrf49TxCmd:	
  8587  0071                     ??i1_Mrf49RxCmd:	
  8588                           ; 0 bytes @ 0x1
  8589                           
  8590  0071                     ??i1_Mrf49RxSts:	
  8591                           ; 0 bytes @ 0x1
  8592                           
  8593  0071                     i1Mrf49TxCmd@val:	
  8594                           ; 0 bytes @ 0x1
  8595                           
  8596  0071                     i1Mrf49RxCmd@cmd:	
  8597                           ; 1 bytes @ 0x1
  8598                           
  8599                           
  8600                           ; 1 bytes @ 0x1
  8601  0071                     	ds	1
  8602  0072                     ??i1_Mrf49TxCmd:	
  8603  0072                     i1Mrf49TxCmd@cmd:	
  8604                           ; 0 bytes @ 0x2
  8605                           
  8606  0072                     i1Mrf49RxCmd@val:	
  8607                           ; 1 bytes @ 0x2
  8608                           
  8609                           
  8610                           ; 1 bytes @ 0x2
  8611  0072                     	ds	1
  8612  0073                     ??i1_Mrf49xaModeRx:	
  8613  0073                     ??i1_Mrf49RxByte:	
  8614                           ; 0 bytes @ 0x3
  8615                           
  8616  0073                     ??i1_Mrf49TxByte:	
  8617                           ; 0 bytes @ 0x3
  8618                           
  8619  0073                     i1Mrf49xaModeRx@k:	
  8620                           ; 0 bytes @ 0x3
  8621                           
  8622  0073                     i1Mrf49TxByte@byte:	
  8623                           ; 1 bytes @ 0x3
  8624                           
  8625                           
  8626                           ; 1 bytes @ 0x3
  8627  0073                     	ds	1
  8628  0074                     ??i1_Mrf49xaServe:	
  8629                           
  8630                           ; 0 bytes @ 0x4
  8631  0074                     	ds	1
  8632  0075                     i1Mrf49xaServe@data:	
  8633                           
  8634                           ; 1 bytes @ 0x5
  8635  0075                     	ds	1
  8636  0076                     ??_extInt:	
  8637                           
  8638                           ; 0 bytes @ 0x6
  8639  0076                     	ds	1
  8640  0077                     extInt@ofw:	
  8641                           
  8642                           ; 1 bytes @ 0x7
  8643  0077                     	ds	1
  8644                           
  8645                           	psect	cstackBANK0
  8646  0020                     __pcstackBANK0:	
  8647  0020                     ??_Mrf49xaNeedsReset:	
  8648  0020                     ?_Sleepy:	
  8649                           ; 0 bytes @ 0x0
  8650                           
  8651  0020                     ??_CfgGetSizeByType:	
  8652                           ; 0 bytes @ 0x0
  8653                           
  8654  0020                     ??_PwrAdcWake:	
  8655                           ; 0 bytes @ 0x0
  8656                           
  8657  0020                     ??_PwrAdcSleep:	
  8658                           ; 0 bytes @ 0x0
  8659                           
  8660  0020                     ??_PwrAdcInit:	
  8661                           ; 0 bytes @ 0x0
  8662                           
  8663  0020                     ??_PwrSensorInit:	
  8664                           ; 0 bytes @ 0x0
  8665                           
  8666  0020                     ??_PwrSensorSleep:	
  8667                           ; 0 bytes @ 0x0
  8668                           
  8669  0020                     ??_PwrI2cSleep:	
  8670                           ; 0 bytes @ 0x0
  8671                           
  8672  0020                     ??_PwrSensorWake:	
  8673                           ; 0 bytes @ 0x0
  8674                           
  8675  0020                     ??_PwrI2cWake:	
  8676                           ; 0 bytes @ 0x0
  8677                           
  8678  0020                     ??_SoftI2cNop:	
  8679                           ; 0 bytes @ 0x0
  8680                           
  8681  0020                     ??_AdcInit:	
  8682                           ; 0 bytes @ 0x0
  8683                           
  8684  0020                     ??_AdcDeinit:	
  8685                           ; 0 bytes @ 0x0
  8686                           
  8687  0020                     ??_AdcGo:	
  8688                           ; 0 bytes @ 0x0
  8689                           
  8690  0020                     ??_AdcIsBusy:	
  8691                           ; 0 bytes @ 0x0
  8692                           
  8693  0020                     ??_AdcChSelect:	
  8694                           ; 0 bytes @ 0x0
  8695                           
  8696  0020                     ??_ExtIntInit:	
  8697                           ; 0 bytes @ 0x0
  8698                           
  8699  0020                     ??_Mrf49SpiTx:	
  8700                           ; 0 bytes @ 0x0
  8701                           
  8702  0020                     ??_Mrf49SpiRx:	
  8703                           ; 0 bytes @ 0x0
  8704                           
  8705  0020                     ??_Mrf49xaPacketPending:	
  8706                           ; 0 bytes @ 0x0
  8707                           
  8708  0020                     ?_Mrf49xaFreePacket:	
  8709                           ; 0 bytes @ 0x0
  8710                           
  8711  0020                     ??_Mrf49xaRxPacket:	
  8712                           ; 0 bytes @ 0x0
  8713                           
  8714  0020                     ??_Mrf49xaAllocPacket:	
  8715                           ; 0 bytes @ 0x0
  8716                           
  8717  0020                     ?_memcpy:	
  8718                           ; 0 bytes @ 0x0
  8719                           
  8720  0020                     ?_Mrf49xaTxPacket:	
  8721                           ; 1 bytes @ 0x0
  8722                           
  8723  0020                     ?_AdcGetResult:	
  8724                           ; 1 bytes @ 0x0
  8725                           
  8726  0020                     AdcChSelect@channel:	
  8727                           ; 2 bytes @ 0x0
  8728                           
  8729  0020                     Mrf49SpiTx@byte:	
  8730                           ; 1 bytes @ 0x0
  8731                           
  8732  0020                     Mrf49SpiRx@data:	
  8733                           ; 1 bytes @ 0x0
  8734                           
  8735  0020                     Mrf49xaPacketPending@inst:	
  8736                           ; 1 bytes @ 0x0
  8737                           
  8738  0020                     Mrf49xaTxPacket@packet:	
  8739                           ; 1 bytes @ 0x0
  8740                           
  8741  0020                     Mrf49xaFreePacket@packet:	
  8742                           ; 1 bytes @ 0x0
  8743                           
  8744  0020                     Mrf49xaRxPacket@inst:	
  8745                           ; 1 bytes @ 0x0
  8746                           
  8747  0020                     Mrf49xaAllocPacket@inst:	
  8748                           ; 1 bytes @ 0x0
  8749                           
  8750  0020                     CfgGetSizeByType@type:	
  8751                           ; 1 bytes @ 0x0
  8752                           
  8753  0020                     memcpy@s1:	
  8754                           ; 1 bytes @ 0x0
  8755                           
  8756  0020                     Sleepy@ms:	
  8757                           ; 1 bytes @ 0x0
  8758                           
  8759                           
  8760                           ; 2 bytes @ 0x0
  8761  0020                     	ds	1
  8762  0021                     ??_SoftI2cStart:	
  8763  0021                     ??_SoftI2cTxByte:	
  8764                           ; 0 bytes @ 0x1
  8765                           
  8766  0021                     ??_SoftI2cStop:	
  8767                           ; 0 bytes @ 0x1
  8768                           
  8769  0021                     ?_Mrf49TxCmd:	
  8770                           ; 0 bytes @ 0x1
  8771                           
  8772  0021                     ??_Mrf49RxSts:	
  8773                           ; 0 bytes @ 0x1
  8774                           
  8775  0021                     ??_SoftI2cRepeatedStart:	
  8776                           ; 0 bytes @ 0x1
  8777                           
  8778  0021                     ??_SoftI2cRxByte:	
  8779                           ; 0 bytes @ 0x1
  8780                           
  8781  0021                     ??_Mrf49RxCmd:	
  8782                           ; 0 bytes @ 0x1
  8783                           
  8784  0021                     ??_Mrf49xaFreePacket:	
  8785                           ; 0 bytes @ 0x1
  8786                           
  8787  0021                     SoftI2cRxByte@ack:	
  8788                           ; 0 bytes @ 0x1
  8789                           
  8790  0021                     Mrf49TxCmd@val:	
  8791                           ; 1 bytes @ 0x1
  8792                           
  8793  0021                     Mrf49RxCmd@cmd:	
  8794                           ; 1 bytes @ 0x1
  8795                           
  8796  0021                     Mrf49xaTxPacket@response:	
  8797                           ; 1 bytes @ 0x1
  8798                           
  8799  0021                     Mrf49xaFreePacket@inst:	
  8800                           ; 1 bytes @ 0x1
  8801                           
  8802  0021                     memcpy@n:	
  8803                           ; 1 bytes @ 0x1
  8804                           
  8805                           
  8806                           ; 2 bytes @ 0x1
  8807  0021                     	ds	1
  8808  0022                     ??_Sleepy:	
  8809  0022                     ??_Mrf49TxCmd:	
  8810                           ; 0 bytes @ 0x2
  8811                           
  8812  0022                     ??_AdcGetResult:	
  8813                           ; 0 bytes @ 0x2
  8814                           
  8815  0022                     ?_AdcSample:	
  8816                           ; 0 bytes @ 0x2
  8817                           
  8818  0022                     SoftI2cTxByte@data:	
  8819                           ; 2 bytes @ 0x2
  8820                           
  8821  0022                     SoftI2cRxByte@data:	
  8822                           ; 1 bytes @ 0x2
  8823                           
  8824  0022                     Mrf49TxCmd@cmd:	
  8825                           ; 1 bytes @ 0x2
  8826                           
  8827  0022                     Mrf49RxCmd@val:	
  8828                           ; 1 bytes @ 0x2
  8829                           
  8830  0022                     Mrf49xaTxPacket@needAck:	
  8831                           ; 1 bytes @ 0x2
  8832                           
  8833                           
  8834                           ; 1 bytes @ 0x2
  8835  0022                     	ds	1
  8836  0023                     ??_memcpy:	
  8837  0023                     ??_Mrf49xaModeRx:	
  8838                           ; 0 bytes @ 0x3
  8839                           
  8840  0023                     ??_Mrf49xaModeTx:	
  8841                           ; 0 bytes @ 0x3
  8842                           
  8843  0023                     ??_Mrf49xaModeSleep:	
  8844                           ; 0 bytes @ 0x3
  8845                           
  8846  0023                     ??_Mrf49RxByte:	
  8847                           ; 0 bytes @ 0x3
  8848                           
  8849  0023                     ??_Mrf49TxByte:	
  8850                           ; 0 bytes @ 0x3
  8851                           
  8852  0023                     ??_Mrf49xaTxPacket:	
  8853                           ; 0 bytes @ 0x3
  8854                           
  8855  0023                     SoftI2cTxByte@i:	
  8856                           ; 0 bytes @ 0x3
  8857                           
  8858  0023                     SoftI2cRxByte@i:	
  8859                           ; 1 bytes @ 0x3
  8860                           
  8861  0023                     Mrf49xaModeRx@k:	
  8862                           ; 1 bytes @ 0x3
  8863                           
  8864  0023                     Mrf49xaModeTx@k:	
  8865                           ; 1 bytes @ 0x3
  8866                           
  8867  0023                     Mrf49xaModeSleep@k:	
  8868                           ; 1 bytes @ 0x3
  8869                           
  8870  0023                     Mrf49TxByte@byte:	
  8871                           ; 1 bytes @ 0x3
  8872                           
  8873  0023                     Sleepy@b:	
  8874                           ; 1 bytes @ 0x3
  8875                           
  8876  0023                     memcpy@d:	
  8877                           ; 1 bytes @ 0x3
  8878                           
  8879                           
  8880                           ; 1 bytes @ 0x3
  8881  0023                     	ds	1
  8882  0024                     ??_Mrf49xaServe:	
  8883  0024                     ??_PwrI2cInit:	
  8884                           ; 0 bytes @ 0x4
  8885                           
  8886  0024                     ??_PwrRfSleep:	
  8887                           ; 0 bytes @ 0x4
  8888                           
  8889  0024                     ??_PwrRfWake:	
  8890                           ; 0 bytes @ 0x4
  8891                           
  8892  0024                     ??_SoftI2cInit:	
  8893                           ; 0 bytes @ 0x4
  8894                           
  8895  0024                     ??_AdcSample:	
  8896                           ; 0 bytes @ 0x4
  8897                           
  8898  0024                     ??_Mcp9800Start:	
  8899                           ; 0 bytes @ 0x4
  8900                           
  8901  0024                     ??_Mrf49xaShutdown:	
  8902                           ; 0 bytes @ 0x4
  8903                           
  8904  0024                     ??_Mrf49xaReboot:	
  8905                           ; 0 bytes @ 0x4
  8906                           
  8907  0024                     ?_eepromRxBytes:	
  8908                           ; 0 bytes @ 0x4
  8909                           
  8910  0024                     ?_eepromTxBytes:	
  8911                           ; 0 bytes @ 0x4
  8912                           
  8913  0024                     ?_Mcp9800Read:	
  8914                           ; 0 bytes @ 0x4
  8915                           
  8916  0024                     Mcp9800Start@resolution:	
  8917                           ; 2 bytes @ 0x4
  8918                           
  8919  0024                     memcpy@s:	
  8920                           ; 1 bytes @ 0x4
  8921                           
  8922  0024                     eepromRxBytes@address:	
  8923                           ; 1 bytes @ 0x4
  8924                           
  8925  0024                     eepromTxBytes@address:	
  8926                           ; 2 bytes @ 0x4
  8927                           
  8928                           
  8929                           ; 2 bytes @ 0x4
  8930  0024                     	ds	1
  8931  0025                     AdcSample@ch:	
  8932  0025                     Mrf49xaTxPacket@crc:	
  8933                           ; 1 bytes @ 0x5
  8934                           
  8935  0025                     Mrf49xaServe@data:	
  8936                           ; 1 bytes @ 0x5
  8937                           
  8938  0025                     memcpy@d1:	
  8939                           ; 1 bytes @ 0x5
  8940                           
  8941                           
  8942                           ; 1 bytes @ 0x5
  8943  0025                     	ds	1
  8944  0026                     ??_Mcp9800Read:	
  8945  0026                     ??_Mrf49xaInit:	
  8946                           ; 0 bytes @ 0x6
  8947                           
  8948  0026                     ??_handleCfgRead:	
  8949                           ; 0 bytes @ 0x6
  8950                           
  8951  0026                     ??_handleCfgWrite:	
  8952                           ; 0 bytes @ 0x6
  8953                           
  8954  0026                     Mcp9800Read@tempH:	
  8955                           ; 0 bytes @ 0x6
  8956                           
  8957  0026                     Mrf49xaInit@k:	
  8958                           ; 1 bytes @ 0x6
  8959                           
  8960  0026                     eepromRxBytes@data:	
  8961                           ; 1 bytes @ 0x6
  8962                           
  8963  0026                     eepromTxBytes@data:	
  8964                           ; 1 bytes @ 0x6
  8965                           
  8966  0026                     Mrf49xaTxPacket@i:	
  8967                           ; 1 bytes @ 0x6
  8968                           
  8969  0026                     handleCfgRead@nrOfBytes:	
  8970                           ; 1 bytes @ 0x6
  8971                           
  8972  0026                     handleCfgWrite@nrOfBytes:	
  8973                           ; 1 bytes @ 0x6
  8974                           
  8975                           
  8976                           ; 1 bytes @ 0x6
  8977  0026                     	ds	1
  8978  0027                     ??_PwrRfInit:	
  8979  0027                     Mcp9800Read@tempL:	
  8980                           ; 0 bytes @ 0x7
  8981                           
  8982  0027                     eepromRxBytes@size:	
  8983                           ; 1 bytes @ 0x7
  8984                           
  8985  0027                     eepromTxBytes@size:	
  8986                           ; 1 bytes @ 0x7
  8987                           
  8988  0027                     Mrf49xaTxPacket@inst:	
  8989                           ; 1 bytes @ 0x7
  8990                           
  8991  0027                     handleCfgRead@index:	
  8992                           ; 1 bytes @ 0x7
  8993                           
  8994  0027                     handleCfgWrite@index:	
  8995                           ; 1 bytes @ 0x7
  8996                           
  8997                           
  8998                           ; 1 bytes @ 0x7
  8999  0027                     	ds	1
  9000  0028                     ??_CfgSave:	
  9001  0028                     ??_CfgLoad:	
  9002                           ; 0 bytes @ 0x8
  9003                           
  9004  0028                     ??_eepromRxBytes:	
  9005                           ; 0 bytes @ 0x8
  9006                           
  9007  0028                     ??_eepromTxBytes:	
  9008                           ; 0 bytes @ 0x8
  9009                           
  9010  0028                     ??_handleFwCmd:	
  9011                           ; 0 bytes @ 0x8
  9012                           
  9013  0028                     ??_handleCfgCmd:	
  9014                           ; 0 bytes @ 0x8
  9015                           
  9016  0028                     ??_RfSendPowerState:	
  9017                           ; 0 bytes @ 0x8
  9018                           
  9019  0028                     ?_RfSendSampleWeatherNode:	
  9020                           ; 0 bytes @ 0x8
  9021                           
  9022  0028                     ?_Mrf49xaTxAck:	
  9023                           ; 0 bytes @ 0x8
  9024                           
  9025  0028                     Mrf49xaTxAck@packet:	
  9026                           ; 1 bytes @ 0x8
  9027                           
  9028  0028                     handleFwCmd@packet:	
  9029                           ; 1 bytes @ 0x8
  9030                           
  9031  0028                     handleCfgRead@packet:	
  9032                           ; 1 bytes @ 0x8
  9033                           
  9034  0028                     handleCfgWrite@packet:	
  9035                           ; 1 bytes @ 0x8
  9036                           
  9037  0028                     handleCfgCmd@packet:	
  9038                           ; 1 bytes @ 0x8
  9039                           
  9040  0028                     RfSendPowerState@s:	
  9041                           ; 1 bytes @ 0x8
  9042                           
  9043  0028                     RfSendSampleWeatherNode@temperature:	
  9044                           ; 2 bytes @ 0x8
  9045                           
  9046                           
  9047                           ; 2 bytes @ 0x8
  9048  0028                     	ds	1
  9049  0029                     ??_Mrf49xaTxAck:	
  9050  0029                     Mrf49xaTxAck@inst:	
  9051                           ; 0 bytes @ 0x9
  9052                           
  9053                           
  9054                           ; 1 bytes @ 0x9
  9055  0029                     	ds	1
  9056  002A                     ?_HandlePacket:	
  9057  002A                     HandlePacket@packet:	
  9058                           ; 0 bytes @ 0xA
  9059                           
  9060  002A                     RfSendPowerState@inst:	
  9061                           ; 1 bytes @ 0xA
  9062                           
  9063  002A                     RfSendSampleWeatherNode@humidity:	
  9064                           ; 1 bytes @ 0xA
  9065                           
  9066                           
  9067                           ; 2 bytes @ 0xA
  9068  002A                     	ds	1
  9069  002B                     ??_HandlePacket:	
  9070  002B                     RfSendPowerState@packet:	
  9071                           ; 0 bytes @ 0xB
  9072                           
  9073                           
  9074                           ; 1 bytes @ 0xB
  9075  002B                     	ds	1
  9076  002C                     ??_RfSendSampleWeatherNode:	
  9077  002C                     HandlePacket@response:	
  9078                           ; 0 bytes @ 0xC
  9079                           
  9080  002C                     RfSendSampleWeatherNode@inst:	
  9081                           ; 1 bytes @ 0xC
  9082                           
  9083                           
  9084                           ; 1 bytes @ 0xC
  9085  002C                     	ds	1
  9086  002D                     HandlePacket@inst:	
  9087  002D                     RfSendSampleWeatherNode@packet:	
  9088                           ; 1 bytes @ 0xD
  9089                           
  9090                           
  9091                           ; 1 bytes @ 0xD
  9092  002D                     	ds	1
  9093  002E                     ??_Mrf49xaTick:	
  9094                           
  9095                           ; 0 bytes @ 0xE
  9096  002E                     	ds	1
  9097  002F                     Mrf49xaTick@timeout:	
  9098                           
  9099                           ; 1 bytes @ 0xF
  9100  002F                     	ds	1
  9101  0030                     Mrf49xaTick@packet:	
  9102                           
  9103                           ; 1 bytes @ 0x10
  9104  0030                     	ds	1
  9105  0031                     Mrf49xaTick@inst:	
  9106                           
  9107                           ; 1 bytes @ 0x11
  9108  0031                     	ds	1
  9109  0032                     ??_main:	
  9110  0032                     main@humidity:	
  9111                           ; 0 bytes @ 0x12
  9112                           
  9113                           
  9114                           ; 2 bytes @ 0x12
  9115  0032                     	ds	2
  9116  0034                     main@temperature:	
  9117                           
  9118                           ; 2 bytes @ 0x14
  9119  0034                     	ds	2
  9120                           
  9121                           	psect	text4
  9122  0308                     __ptext4:	
  9123 ;; *************** function _AdcInit *****************
  9124 ;; Defined at:
  9125 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;		None
  9130 ;; Return value:  Size  Location     Type
  9131 ;;		None               void
  9132 ;; Registers used:
  9133 ;;		wreg, status,2
  9134 ;; Tracked objects:
  9135 ;;		On entry : 1F/1
  9136 ;;		On exit  : 1F/1
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9139 ;;      Params:         0       0       0       0
  9140 ;;      Locals:         0       0       0       0
  9141 ;;      Temps:          0       0       0       0
  9142 ;;      Totals:         0       0       0       0
  9143 ;;Total ram usage:        0 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    5
  9146 ;; This function calls:
  9147 ;;		Nothing
  9148 ;; This function is called by:
  9149 ;;		_PwrAdcWake
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           
  9154                           ;psect for function _AdcInit
  9155  0308                     _AdcInit:	
  9156  0308                     l2775:	
  9157                           ;incstack = 0
  9158                           ; Regs used in _AdcInit: [wreg+status,2]
  9159                           
  9160                           
  9161                           ;adc16.c: 6: FVRCON = 0b11100001;
  9162  0308  30E1               	movlw	225
  9163  0309  0022               	movlb	2	; select bank2
  9164  030A  0097               	movwf	23	;volatile
  9165                           
  9166                           ;adc16.c: 8: ADCON2 = 0b00000000;
  9167  030B  0021               	movlb	1	; select bank1
  9168  030C  019F               	clrf	31	;volatile
  9169                           
  9170                           ;adc16.c: 9: ADCON1 = 0b11110000;
  9171  030D  30F0               	movlw	240
  9172  030E  009E               	movwf	30	;volatile
  9173                           
  9174                           ;adc16.c: 10: ADCON0 = 0b00000000;
  9175  030F  019D               	clrf	29	;volatile
  9176                           
  9177                           ;adc16.c: 12: ADCON0 = 0b00010011;
  9178  0310  3013               	movlw	19
  9179  0311  009D               	movwf	29	;volatile
  9180  0312  0008               	return
  9181  0313                     __end_of_AdcInit:	
  9182                           
  9183                           	psect	text11
  9184  0000                     __ptext11:	
  9185 ;; *************** function _AdcGetResult *****************
  9186 ;; Defined at:
  9187 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;		None
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;		None
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  2    0[BANK0 ] unsigned int 
  9194 ;; Registers used:
  9195 ;;		wreg
  9196 ;; Tracked objects:
  9197 ;;		On entry : 1F/1
  9198 ;;		On exit  : 1F/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9201 ;;      Params:         0       2       0       0
  9202 ;;      Locals:         0       0       0       0
  9203 ;;      Temps:          0       0       0       0
  9204 ;;      Totals:         0       2       0       0
  9205 ;;Total ram usage:        2 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    5
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_AdcSample
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215  0000                     _AdcGetResult:	
  9216                           ;psect for function _AdcGetResult
  9217                           
  9218  0000                     __end_of_AdcGetResult:	
  9219                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9220                           
  9221                           ;incstack = 0
  9222                           ; Regs used in _AdcGetResult: [wreg]
  9223                           
  9224                           
  9225                           	psect	text16
  9226  02FB                     __ptext16:	
  9227 ;; *************** function _PwrRfWake *****************
  9228 ;; Defined at:
  9229 ;;		line 135 in file "../../../src/node/power.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;		None               void
  9236 ;; Registers used:
  9237 ;;		wreg, status,2, status,0, pclath, cstack
  9238 ;; Tracked objects:
  9239 ;;		On entry : 1F/1
  9240 ;;		On exit  : 1F/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9243 ;;      Params:         0       0       0       0
  9244 ;;      Locals:         0       0       0       0
  9245 ;;      Temps:          0       0       0       0
  9246 ;;      Totals:         0       0       0       0
  9247 ;;Total ram usage:        0 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    9
  9250 ;; This function calls:
  9251 ;;		_Mrf49xaReboot
  9252 ;; This function is called by:
  9253 ;;		_main
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           
  9258                           ;psect for function _PwrRfWake
  9259  02FB                     _PwrRfWake:	
  9260                           
  9261                           ;power.c: 137: WPUAbits.WPUA5 = 1;
  9262                           
  9263                           ;incstack = 0
  9264                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  9265  02FB  0024               	movlb	4	; select bank4
  9266  02FC  168C               	bsf	12,5	;volatile
  9267                           
  9268                           ;power.c: 139: LATBbits.LATB7 = 0;
  9269  02FD  0022               	movlb	2	; select bank2
  9270  02FE  138D               	bcf	13,7	;volatile
  9271                           
  9272                           ;power.c: 140: LATCbits.LATC7 = 0;
  9273  02FF  138E               	bcf	14,7	;volatile
  9274                           
  9275                           ;power.c: 142: TRISAbits.TRISA5 = 1;
  9276  0300  0021               	movlb	1	; select bank1
  9277  0301  168C               	bsf	12,5	;volatile
  9278                           
  9279                           ;power.c: 143: TRISCbits.TRISC5 = 1;
  9280  0302  168E               	bsf	14,5	;volatile
  9281                           
  9282                           ;power.c: 145: INTCONbits.INTE = 1;
  9283  0303  160B               	bsf	11,4	;volatile
  9284                           
  9285                           ;power.c: 146: Mrf49xaReboot();
  9286  0304  318D  2D34         	ljmp	l2971
  9287  0306                     __end_of_PwrRfWake:	
  9288  0306                     __ptext17:	
  9289 ;; *************** function _Mrf49xaReboot *****************
  9290 ;; Defined at:
  9291 ;;		line 140 in file "../../../src/devices/mrf49xa.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;		None
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, status,2, status,0, pclath, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 1F/1
  9302 ;;		On exit  : 1F/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9305 ;;      Params:         0       0       0       0
  9306 ;;      Locals:         0       0       0       0
  9307 ;;      Temps:          0       0       0       0
  9308 ;;      Totals:         0       0       0       0
  9309 ;;Total ram usage:        0 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    8
  9312 ;; This function calls:
  9313 ;;		_Mrf49xaModeRx
  9314 ;; This function is called by:
  9315 ;;		_PwrRfWake
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           
  9320                           ;psect for function _Mrf49xaReboot
  9321  0306                     _Mrf49xaReboot:	
  9322                           
  9323                           ;mrf49xa.c: 142: Mrf49xaModeRx();
  9324                           
  9325                           ;incstack = 0
  9326                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  9327  0306  318D  2D34         	ljmp	l2971
  9328  0308                     __end_of_Mrf49xaReboot:	
  9329                           
  9330                           	psect	text18
  9331  025F                     __ptext18:	
  9332 ;; *************** function _PwrRfSleep *****************
  9333 ;; Defined at:
  9334 ;;		line 118 in file "../../../src/node/power.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;		None
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 1E/1
  9345 ;;		On exit  : 1F/1
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9348 ;;      Params:         0       0       0       0
  9349 ;;      Locals:         0       0       0       0
  9350 ;;      Temps:          0       0       0       0
  9351 ;;      Totals:         0       0       0       0
  9352 ;;Total ram usage:        0 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    9
  9355 ;; This function calls:
  9356 ;;		_Mrf49xaShutdown
  9357 ;; This function is called by:
  9358 ;;		_main
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           
  9363                           ;psect for function _PwrRfSleep
  9364  025F                     _PwrRfSleep:	
  9365                           
  9366                           ;power.c: 120: Mrf49xaShutdown();
  9367                           
  9368                           ;incstack = 0
  9369                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  9370  025F  226C               	fcall	_Mrf49xaShutdown
  9371                           
  9372                           ;power.c: 121: INTCONbits.INTE = 0;
  9373  0260  120B               	bcf	11,4	;volatile
  9374                           
  9375                           ;power.c: 123: LATAbits.LATA5 = 1;
  9376  0261  0022               	movlb	2	; select bank2
  9377  0262  168C               	bsf	12,5	;volatile
  9378                           
  9379                           ;power.c: 124: LATCbits.LATC5 = 1;
  9380  0263  168E               	bsf	14,5	;volatile
  9381                           
  9382                           ;power.c: 126: LATBbits.LATB7 = 1;
  9383  0264  178D               	bsf	13,7	;volatile
  9384                           
  9385                           ;power.c: 127: LATCbits.LATC7 = 1;
  9386  0265  178E               	bsf	14,7	;volatile
  9387                           
  9388                           ;power.c: 129: WPUAbits.WPUA5 = 0;
  9389  0266  0024               	movlb	4	; select bank4
  9390  0267  128C               	bcf	12,5	;volatile
  9391                           
  9392                           ;power.c: 131: TRISAbits.TRISA5 = 0;
  9393  0268  0021               	movlb	1	; select bank1
  9394  0269  128C               	bcf	12,5	;volatile
  9395                           
  9396                           ;power.c: 132: TRISCbits.TRISC5 = 0;
  9397  026A  128E               	bcf	14,5	;volatile
  9398  026B  0008               	return
  9399  026C                     __end_of_PwrRfSleep:	
  9400  026C                     __ptext19:	
  9401 ;; *************** function _Mrf49xaShutdown *****************
  9402 ;; Defined at:
  9403 ;;		line 132 in file "../../../src/devices/mrf49xa.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;		None               void
  9410 ;; Registers used:
  9411 ;;		wreg, status,2, status,0, pclath, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 1E/1
  9414 ;;		On exit  : 1F/1
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9417 ;;      Params:         0       0       0       0
  9418 ;;      Locals:         0       0       0       0
  9419 ;;      Temps:          0       0       0       0
  9420 ;;      Totals:         0       0       0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    8
  9424 ;; This function calls:
  9425 ;;		_Mrf49xaModeSleep
  9426 ;; This function is called by:
  9427 ;;		_PwrRfSleep
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           
  9432                           ;psect for function _Mrf49xaShutdown
  9433  026C                     _Mrf49xaShutdown:	
  9434                           
  9435                           ;mrf49xa.c: 134: Mrf49xaModeSleep();
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  9439  026C  2A6D               	ljmp	l3003
  9440  026D                     __end_of_Mrf49xaShutdown:	
  9441  026D                     __ptext20:	
  9442 ;; *************** function _Mrf49xaModeSleep *****************
  9443 ;; Defined at:
  9444 ;;		line 123 in file "../../../src/devices/mrf49xa.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;		None
  9447 ;; Auto vars:     Size  Location     Type
  9448 ;;  k               1    3[BANK0 ] unsigned char 
  9449 ;; Return value:  Size  Location     Type
  9450 ;;		None               void
  9451 ;; Registers used:
  9452 ;;		wreg, status,2, status,0, pclath, cstack
  9453 ;; Tracked objects:
  9454 ;;		On entry : 1E/1
  9455 ;;		On exit  : 1F/1
  9456 ;;		Unchanged: 0/0
  9457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9458 ;;      Params:         0       0       0       0
  9459 ;;      Locals:         0       1       0       0
  9460 ;;      Temps:          0       0       0       0
  9461 ;;      Totals:         0       1       0       0
  9462 ;;Total ram usage:        1 bytes
  9463 ;; Hardware stack levels used:    1
  9464 ;; Hardware stack levels required when called:    7
  9465 ;; This function calls:
  9466 ;;		_Mrf49TxCmd
  9467 ;; This function is called by:
  9468 ;;		_Mrf49xaShutdown
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           
  9473                           ;psect for function _Mrf49xaModeSleep
  9474  026D                     _Mrf49xaModeSleep:	
  9475  026D                     l3003:	
  9476                           ;incstack = 0
  9477                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  9478                           
  9479                           
  9480                           ;mrf49xa.c: 125: UI08_t k;
  9481                           ;mrf49xa.c: 126: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  9482  026D  0020               	movlb	0	; select bank0
  9483  026E  301D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9484  026F  01A3               	clrf	Mrf49xaModeSleep@k
  9485  0270  3182               	movlp	high __stringtab
  9486  0271  000A               	callw
  9487  0272  3182               	pagesel	$	;select current page
  9488  0273  3800               	iorlw	0
  9489  0274  1903               	btfsc	3,2
  9490  0275  2A8A               	goto	l3015
  9491  0276                     l3009:	
  9492  0276  3523               	lslf	Mrf49xaModeSleep@k,w
  9493  0277  3E54               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  9494  0278  3182               	movlp	high __stringtab
  9495  0279  000A               	callw
  9496  027A  00A1               	movwf	Mrf49TxCmd@val
  9497  027B  3523               	lslf	Mrf49xaModeSleep@k,w
  9498  027C  3E53               	addlw	low (_mrfRegset_Sleep| (0+32768))
  9499  027D  3182               	movlp	high __stringtab
  9500  027E  000A               	callw
  9501  027F  318D  2559  3182   	fcall	_Mrf49TxCmd
  9502  0282  301D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9503  0283  0AA3               	incf	Mrf49xaModeSleep@k,f
  9504  0284  3182               	movlp	high __stringtab
  9505  0285  000A               	callw
  9506  0286  3182               	pagesel	$	;select current page
  9507  0287  0223               	subwf	Mrf49xaModeSleep@k,w
  9508  0288  1C03               	skipc
  9509  0289  2A76               	goto	l3009
  9510  028A                     l3015:	
  9511                           
  9512                           ;mrf49xa.c: 128: rfTrcvStatus.state = POWERED_OFF;
  9513  028A  0021               	movlb	1	; select bank1
  9514  028B  3080               	movlw	-128
  9515  028C  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  9516                           
  9517                           ;mrf49xa.c: 129: rfTrcvStatus.hwByte = 0;
  9518  028D  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  9519  028E  0008               	return
  9520  028F                     __end_of_Mrf49xaModeSleep:	
  9521                           
  9522                           	psect	text28
  9523  02B3                     __ptext28:	
  9524 ;; *************** function _Mrf49xaRxPacket *****************
  9525 ;; Defined at:
  9526 ;;		line 92 in file "../../../src/devices/mrf49xa_mac.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  9529 ;;		 -> rfTrcvStatus(75), 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  inst            1    0[BANK0 ] PTR struct rfTrcvStatus_
  9532 ;;		 -> rfTrcvStatus(75), 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      PTR struct rfTrcvPacket_
  9535 ;; Registers used:
  9536 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9537 ;; Tracked objects:
  9538 ;;		On entry : 1F/0
  9539 ;;		On exit  : 1F/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9542 ;;      Params:         0       0       0       0
  9543 ;;      Locals:         0       1       0       0
  9544 ;;      Temps:          0       0       0       0
  9545 ;;      Totals:         0       1       0       0
  9546 ;;Total ram usage:        1 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    5
  9549 ;; This function calls:
  9550 ;;		Nothing
  9551 ;; This function is called by:
  9552 ;;		_Mrf49xaTick
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           
  9557                           ;psect for function _Mrf49xaRxPacket
  9558  02B3                     _Mrf49xaRxPacket:	
  9559                           
  9560                           ;incstack = 0
  9561                           ; Regs used in _Mrf49xaRxPacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  9562                           ;Mrf49xaRxPacket@inst stored from wreg
  9563  02B3  00A0               	movwf	Mrf49xaRxPacket@inst
  9564                           
  9565                           ;mrf49xa_mac.c: 94: if (inst->rxPacket[0].state == PKT_HW_READY_RX)
  9566  02B4  0A20               	incf	Mrf49xaRxPacket@inst,w
  9567  02B5  0086               	movwf	6
  9568  02B6  0187               	clrf	7
  9569  02B7  0801               	movf	1,w
  9570  02B8  3A05               	xorlw	5
  9571  02B9  1D03               	skipz
  9572  02BA  2AC2               	goto	l3283
  9573                           
  9574                           ;mrf49xa_mac.c: 95: {
  9575                           ;mrf49xa_mac.c: 96: inst->rxPacket[0].state = PKT_SW_BUSY;
  9576  02BB  0A20               	incf	Mrf49xaRxPacket@inst,w
  9577  02BC  0086               	movwf	6
  9578  02BD  3006               	movlw	6
  9579  02BE  0081               	movwf	1
  9580                           
  9581                           ;mrf49xa_mac.c: 97: return &(inst->rxPacket[0]);
  9582  02BF  0820               	movf	Mrf49xaRxPacket@inst,w
  9583  02C0  3E01               	addlw	1
  9584  02C1  0008               	return
  9585  02C2                     l3283:	
  9586                           
  9587                           ;mrf49xa_mac.c: 98: }
  9588                           ;mrf49xa_mac.c: 100: if (inst->rxPacket[1].state == PKT_HW_READY_RX)
  9589  02C2  0820               	movf	Mrf49xaRxPacket@inst,w
  9590  02C3  3E19               	addlw	25
  9591  02C4  0086               	movwf	6
  9592  02C5  0187               	clrf	7
  9593  02C6  0801               	movf	1,w
  9594  02C7  3A05               	xorlw	5
  9595  02C8  1D03               	skipz
  9596  02C9  3400               	retlw	0
  9597                           
  9598                           ;mrf49xa_mac.c: 101: {
  9599                           ;mrf49xa_mac.c: 102: inst->rxPacket[1].state = PKT_SW_BUSY;
  9600  02CA  0820               	movf	Mrf49xaRxPacket@inst,w
  9601  02CB  3E19               	addlw	25
  9602  02CC  0086               	movwf	6
  9603  02CD  3006               	movlw	6
  9604  02CE  0081               	movwf	1
  9605                           
  9606                           ;mrf49xa_mac.c: 103: return &(inst->rxPacket[1]);
  9607  02CF  0820               	movf	Mrf49xaRxPacket@inst,w
  9608  02D0  3E19               	addlw	25
  9609  02D1  0008               	return
  9610  02D2                     __end_of_Mrf49xaRxPacket:	
  9611                           ;mrf49xa_mac.c: 104: }
  9612                           ;mrf49xa_mac.c: 106: return (0);
  9613                           
  9614                           
  9615                           	psect	text29
  9616  02EB                     __ptext29:	
  9617 ;; *************** function _Mrf49xaPacketPending *****************
  9618 ;; Defined at:
  9619 ;;		line 8 in file "../../../src/devices/mrf49xa_mac.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  9622 ;;		 -> rfTrcvStatus(75), 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  inst            1    0[BANK0 ] PTR struct rfTrcvStatus_
  9625 ;;		 -> rfTrcvStatus(75), 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      unsigned char 
  9628 ;; Registers used:
  9629 ;;		wreg, fsr1l, fsr1h
  9630 ;; Tracked objects:
  9631 ;;		On entry : 1F/0
  9632 ;;		On exit  : 1F/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9635 ;;      Params:         0       0       0       0
  9636 ;;      Locals:         0       1       0       0
  9637 ;;      Temps:          0       0       0       0
  9638 ;;      Totals:         0       1       0       0
  9639 ;;Total ram usage:        1 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    5
  9642 ;; This function calls:
  9643 ;;		Nothing
  9644 ;; This function is called by:
  9645 ;;		_Mrf49xaTick
  9646 ;; This function uses a non-reentrant model
  9647 ;;
  9648                           
  9649                           
  9650                           ;psect for function _Mrf49xaPacketPending
  9651  02EB                     _Mrf49xaPacketPending:	
  9652                           
  9653                           ;incstack = 0
  9654                           ; Regs used in _Mrf49xaPacketPending: [wregfsr1]
  9655                           ;Mrf49xaPacketPending@inst stored from wreg
  9656  02EB  00A0               	movwf	Mrf49xaPacketPending@inst
  9657                           
  9658                           ;mrf49xa_mac.c: 10: if (inst->rxPacket[0].state == PKT_HW_READY_RX ||
  9659                           ;mrf49xa_mac.c: 11: inst->rxPacket[1].state == PKT_HW_READY_RX)
  9660  02EC  0A20               	incf	Mrf49xaPacketPending@inst,w
  9661  02ED  0086               	movwf	6
  9662  02EE  0187               	clrf	7
  9663  02EF  0801               	movf	1,w
  9664  02F0  3A05               	xorlw	5
  9665  02F1  1903               	skipnz
  9666  02F2  3401               	retlw	1
  9667  02F3  0820               	movf	Mrf49xaPacketPending@inst,w
  9668  02F4  3E19               	addlw	25
  9669  02F5  0086               	movwf	6
  9670  02F6  0801               	movf	1,w
  9671  02F7  3A05               	xorlw	5
  9672  02F8  1903               	btfsc	3,2
  9673                           
  9674                           ;mrf49xa_mac.c: 12: return ((uint8_t)1);
  9675  02F9  3401               	retlw	1
  9676                           
  9677                           ;mrf49xa_mac.c: 13: else
  9678                           ;mrf49xa_mac.c: 14: return ((uint8_t)0);
  9679  02FA  3400               	retlw	0
  9680  02FB                     __end_of_Mrf49xaPacketPending:	
  9681                           
  9682                           	psect	text44
  9683  028F                     __ptext44:	
  9684 ;; *************** function _handleFwCmd *****************
  9685 ;; Defined at:
  9686 ;;		line 8 in file "../../../src/rfstack/client.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  9689 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  9692 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(75), 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;		None               void
  9695 ;; Registers used:
  9696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 1F/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9702 ;;      Params:         0       0       0       0
  9703 ;;      Locals:         0       1       0       0
  9704 ;;      Temps:          0       0       0       0
  9705 ;;      Totals:         0       1       0       0
  9706 ;;Total ram usage:        1 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    8
  9709 ;; This function calls:
  9710 ;;		_eepromRxBytes
  9711 ;; This function is called by:
  9712 ;;		_HandlePacket
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function _handleFwCmd
  9718  028F                     _handleFwCmd:	
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9722                           ;handleFwCmd@packet stored from wreg
  9723  028F  00A8               	movwf	handleFwCmd@packet
  9724                           
  9725                           ;client.c: 23: break;
  9726                           
  9727                           ;client.c: 10: switch(packet->packet.data[0])
  9728  0290  3E06               	addlw	6
  9729  0291  0086               	movwf	6
  9730  0292  0187               	clrf	7
  9731  0293  0801               	movf	1,w
  9732                           
  9733                           ; Switch size 1, requested type "space"
  9734                           ; Number of cases is 2, Range of values is 0 to 1
  9735                           ; switch strategies available:
  9736                           ; Name         Instructions Cycles
  9737                           ; simple_byte            7     4 (average)
  9738                           ; direct_byte           10     6 (fixed)
  9739                           ; jumptable            260     6 (fixed)
  9740                           ;	Chosen strategy is simple_byte
  9741  0294  3A00               	xorlw	0	; case 0
  9742  0295  1903               	skipnz
  9743  0296  2AB2               	goto	l532
  9744  0297  3A01               	xorlw	1	; case 1
  9745  0298  1903               	skipnz
  9746  0299  2A9B               	goto	l3439
  9747  029A  2AB2               	goto	l532
  9748  029B                     l3439:	
  9749                           
  9750                           ;client.c: 17: packet->packet.size = 5;
  9751  029B  0A28               	incf	handleFwCmd@packet,w
  9752  029C  0086               	movwf	6
  9753  029D  3005               	movlw	5
  9754  029E  0187               	clrf	7
  9755  029F  0081               	movwf	1
  9756                           
  9757                           ;client.c: 18: packet->packet.data[1] = 0;
  9758  02A0  0828               	movf	handleFwCmd@packet,w
  9759  02A1  3E07               	addlw	7
  9760  02A2  0086               	movwf	6
  9761  02A3  0181               	clrf	1
  9762                           
  9763                           ;client.c: 19: packet->packet.data[2] = 1;
  9764  02A4  0828               	movf	handleFwCmd@packet,w
  9765  02A5  3E08               	addlw	8
  9766  02A6  0086               	movwf	6
  9767  02A7  0181               	clrf	1
  9768  02A8  0A81               	incf	1,f
  9769                           
  9770                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  9771  02A9  01A4               	clrf	eepromRxBytes@address
  9772  02AA  01A5               	clrf	eepromRxBytes@address+1
  9773  02AB  0828               	movf	handleFwCmd@packet,w
  9774  02AC  3E09               	addlw	9
  9775  02AD  00A6               	movwf	eepromRxBytes@data
  9776  02AE  3002               	movlw	2
  9777  02AF  00A7               	movwf	eepromRxBytes@size
  9778  02B0  318A  2A68         	ljmp	l3149
  9779  02B2                     l532:	
  9780  02B2  0008               	return
  9781  02B3                     __end_of_handleFwCmd:	
  9782                           
  9783                           	psect	text47
  9784  02D2                     __ptext47:	
  9785 ;; *************** function _memcpy *****************
  9786 ;; Defined at:
  9787 ;;		line 11 in file "/opt/microchip/xc8/v1.30/sources/common/memcpy.c"
  9788 ;; Parameters:    Size  Location     Type
  9789 ;;  d1              1    wreg     PTR void 
  9790 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), 
  9791 ;;		 -> cfgRam(9), 
  9792 ;;  s1              1    0[BANK0 ] PTR const void 
  9793 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), 
  9794 ;;		 -> cfgRam(9), 
  9795 ;;  n               2    1[BANK0 ] unsigned int 
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  d1              1    5[BANK0 ] PTR void 
  9798 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), 
  9799 ;;		 -> cfgRam(9), 
  9800 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  9801 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), 
  9802 ;;		 -> cfgRam(9), 
  9803 ;;  d               1    3[BANK0 ] PTR unsigned char 
  9804 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), 
  9805 ;;		 -> cfgRam(9), 
  9806 ;; Return value:  Size  Location     Type
  9807 ;;                  1    wreg      PTR void 
  9808 ;; Registers used:
  9809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9810 ;; Tracked objects:
  9811 ;;		On entry : 1F/0
  9812 ;;		On exit  : 1F/0
  9813 ;;		Unchanged: 0/0
  9814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9815 ;;      Params:         0       3       0       0
  9816 ;;      Locals:         0       3       0       0
  9817 ;;      Temps:          0       0       0       0
  9818 ;;      Totals:         0       6       0       0
  9819 ;;Total ram usage:        6 bytes
  9820 ;; Hardware stack levels used:    1
  9821 ;; Hardware stack levels required when called:    5
  9822 ;; This function calls:
  9823 ;;		Nothing
  9824 ;; This function is called by:
  9825 ;;		_handleCfgRead
  9826 ;;		_handleCfgWrite
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           
  9831                           ;psect for function _memcpy
  9832  02D2                     _memcpy:	
  9833                           
  9834                           ;incstack = 0
  9835                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  9836                           ;memcpy@d1 stored from wreg
  9837  02D2  00A5               	movwf	memcpy@d1
  9838  02D3  0820               	movf	memcpy@s1,w
  9839  02D4  00A4               	movwf	memcpy@s
  9840  02D5  0825               	movf	memcpy@d1,w
  9841  02D6  00A3               	movwf	memcpy@d
  9842  02D7                     l3493:	
  9843  02D7  3001               	movlw	1
  9844  02D8  02A1               	subwf	memcpy@n,f
  9845  02D9  3000               	movlw	0
  9846  02DA  3BA2               	subwfb	memcpy@n+1,f
  9847  02DB  0A21               	incf	memcpy@n,w
  9848  02DC  1903               	skipnz
  9849  02DD  0A22               	incf	memcpy@n+1,w
  9850  02DE  1903               	btfsc	3,2
  9851  02DF  0008               	return
  9852  02E0  0823               	movf	memcpy@d,w
  9853  02E1  0086               	movwf	6
  9854  02E2  0187               	clrf	7
  9855  02E3  0824               	movf	memcpy@s,w
  9856  02E4  0084               	movwf	4
  9857  02E5  0185               	clrf	5
  9858  02E6  0800               	movf	0,w
  9859  02E7  0081               	movwf	1
  9860  02E8  0AA4               	incf	memcpy@s,f
  9861  02E9  0AA3               	incf	memcpy@d,f
  9862  02EA  2AD7               	goto	l3493
  9863  02EB                     __end_of_memcpy:	
  9864                           
  9865                           	psect	text50
  9866  0313                     __ptext50:	
  9867 ;; *************** function _CfgSave *****************
  9868 ;; Defined at:
  9869 ;;		line 24 in file "../../../src/node/config.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;		None
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;		None
  9874 ;; Return value:  Size  Location     Type
  9875 ;;		None               void
  9876 ;; Registers used:
  9877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9878 ;; Tracked objects:
  9879 ;;		On entry : 1F/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9883 ;;      Params:         0       0       0       0
  9884 ;;      Locals:         0       0       0       0
  9885 ;;      Temps:          0       0       0       0
  9886 ;;      Totals:         0       0       0       0
  9887 ;;Total ram usage:        0 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; Hardware stack levels required when called:    8
  9890 ;; This function calls:
  9891 ;;		_eepromTxBytes
  9892 ;; This function is called by:
  9893 ;;		_handleCfgCmd
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           
  9898                           ;psect for function _CfgSave
  9899  0313                     _CfgSave:	
  9900  0313                     l3515:	
  9901                           ;incstack = 0
  9902                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9903                           
  9904  0313  3037               	movlw	_cfgRam& (0+255)
  9905                           
  9906                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  9907  0314  01A4               	clrf	eepromTxBytes@address
  9908  0315  01A5               	clrf	eepromTxBytes@address+1
  9909  0316  00A6               	movwf	eepromTxBytes@data
  9910  0317  3009               	movlw	9
  9911  0318  00A7               	movwf	eepromTxBytes@size
  9912  0319  318A  2A33         	ljmp	l3161
  9913  031B                     __end_of_CfgSave:	
  9914                           
  9915                           	psect	intentry
  9916  0004                     __pintentry:	
  9917 ;; *************** function _extInt *****************
  9918 ;; Defined at:
  9919 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;		None
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  ofw             1    7[COMMON] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;		None               void
  9926 ;; Registers used:
  9927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 1F/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9933 ;;      Params:         0       0       0       0
  9934 ;;      Locals:         1       0       0       0
  9935 ;;      Temps:          1       0       0       0
  9936 ;;      Totals:         2       0       0       0
  9937 ;;Total ram usage:        2 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    4
  9940 ;; This function calls:
  9941 ;;		_ExtIntDeinit
  9942 ;;		i1_Mrf49xaNeedsReset
  9943 ;;		i1_Mrf49xaServe
  9944 ;; This function is called by:
  9945 ;;		Interrupt level 1
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949  0004                     _extInt:	
  9950                           
  9951                           ;incstack = 0
  9952                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9953  0004  3180               	pagesel	$
  9954  0005  0020               	movlb	0	; select bank0
  9955  0006  087F               	movf	127,w
  9956  0007  00F6               	movwf	??_extInt
  9957                           
  9958                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  9959  0008  1C8B               	btfss	11,1	;volatile
  9960  0009  281C               	goto	i1l142
  9961                           
  9962                           ;interrupt.c: 39: {
  9963                           ;interrupt.c: 40: uint8_t ofw = 0;
  9964  000A  01F7               	clrf	extInt@ofw
  9965  000B                     i1l3939:	
  9966                           ;interrupt.c: 41: while (!Mrf49xaServe())
  9967                           
  9968  000B  3180  202E  3180   	fcall	i1_Mrf49xaServe
  9969  000E  3A00               	xorlw	0
  9970  000F  1D03               	btfss	3,2
  9971  0010  281B               	goto	i1l141
  9972                           
  9973                           ;interrupt.c: 42: {
  9974                           ;interrupt.c: 43: ofw++;
  9975  0011  0AF7               	incf	extInt@ofw,f
  9976                           
  9977                           ;interrupt.c: 44: if (ofw == 255)
  9978  0012  0877               	movf	extInt@ofw,w
  9979  0013  3AFF               	xorlw	255
  9980  0014  1D03               	skipz
  9981  0015  280B               	goto	i1l3939
  9982                           
  9983                           ;interrupt.c: 45: {
  9984                           ;interrupt.c: 46: ExtIntDeinit();
  9985  0016  3183  2321  3180   	fcall	_ExtIntDeinit
  9986                           
  9987                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  9988  0019  3181  2144         	fcall	i1_Mrf49xaNeedsReset
  9989  001B                     i1l141:	
  9990                           ;interrupt.c: 48: break;
  9991                           
  9992                           
  9993                           ;interrupt.c: 49: }
  9994                           ;interrupt.c: 50: }
  9995                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  9996  001B  108B               	bcf	11,1	;volatile
  9997  001C                     i1l142:	
  9998  001C  0876               	movf	??_extInt,w
  9999  001D  0020               	movlb	0	; select bank0
 10000  001E  00FF               	movwf	127
 10001  001F  0009               	retfie
 10002  0020                     __end_of_extInt:	
 10003                           
 10004                           	psect	text74
 10005  0022                     __ptext74:	
 10006 ;; *************** function i1_Mrf49RxCmd *****************
 10007 ;; Defined at:
 10008 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;  cmd             1    wreg     unsigned char 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  cmd             1    1[COMMON] unsigned char 
 10013 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      unsigned char 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0, pclath, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 1E/1
 10020 ;;		On exit  : 1F/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10023 ;;      Params:         0       0       0       0
 10024 ;;      Locals:         2       0       0       0
 10025 ;;      Temps:          0       0       0       0
 10026 ;;      Totals:         2       0       0       0
 10027 ;;Total ram usage:        2 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    1
 10030 ;; This function calls:
 10031 ;;		i1_Mrf49SpiRx
 10032 ;;		i1_Mrf49SpiTx
 10033 ;; This function is called by:
 10034 ;;		i1_Mrf49RxByte
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           
 10039                           ;psect for function i1_Mrf49RxCmd
 10040  0022                     i1_Mrf49RxCmd:	
 10041                           
 10042                           ;incstack = 0
 10043                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
 10044                           ;i1Mrf49RxCmd@cmd stored from wreg
 10045  0022  00F1               	movwf	i1Mrf49RxCmd@cmd
 10046                           
 10047                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
 10048  0023  0020               	movlb	0	; select bank0
 10049  0024  130E               	bcf	14,6	;volatile
 10050                           
 10051                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
 10052  0025  0871               	movf	i1Mrf49RxCmd@cmd,w
 10053  0026  2151  3180         	fcall	i1_Mrf49SpiTx
 10054                           
 10055                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
 10056  0028  21CE               	fcall	i1_Mrf49SpiRx
 10057  0029  00F2               	movwf	i1Mrf49RxCmd@val
 10058                           
 10059                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
 10060  002A  0020               	movlb	0	; select bank0
 10061  002B  170E               	bsf	14,6	;volatile
 10062                           
 10063                           ;mrf49xa_cmd.c: 27: return val;
 10064  002C  0872               	movf	i1Mrf49RxCmd@val,w
 10065  002D  0008               	return
 10066  002E                     __end_ofi1_Mrf49RxCmd:	
 10067  002E                     __ptext67:	
 10068 ;; *************** function i1_Mrf49xaServe *****************
 10069 ;; Defined at:
 10070 ;;		line 9 in file "../../../src/devices/mrf49xa_phy.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;		None
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      unsigned char 
 10077 ;; Registers used:
 10078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10079 ;; Tracked objects:
 10080 ;;		On entry : 0/0
 10081 ;;		On exit  : 1E/0
 10082 ;;		Unchanged: 0/0
 10083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10084 ;;      Params:         0       0       0       0
 10085 ;;      Locals:         1       0       0       0
 10086 ;;      Temps:          1       0       0       0
 10087 ;;      Totals:         2       0       0       0
 10088 ;;Total ram usage:        2 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; Hardware stack levels required when called:    3
 10091 ;; This function calls:
 10092 ;;		i1_Mrf49RxByte
 10093 ;;		i1_Mrf49RxSts
 10094 ;;		i1_Mrf49TxByte
 10095 ;;		i1_Mrf49xaModeRx
 10096 ;;		i1_Mrf49xaNeedsReset
 10097 ;; This function is called by:
 10098 ;;		_extInt
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function i1_Mrf49xaServe
 10104  002E                     i1_Mrf49xaServe:	
 10105                           
 10106                           ;mrf49xa_phy.c: 12: uint8_t data;
 10107                           ;mrf49xa_phy.c: 14: if (rfTrcvStatus.state == POWERED_OFF)
 10108                           
 10109                           ;incstack = 0
 10110                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10111  002E  0021               	movlb	1	; select bank1
 10112  002F  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
 10113  0030  1903               	btfsc	3,2
 10114                           
 10115                           ;mrf49xa_phy.c: 15: return 0;
 10116  0031  3400               	retlw	0
 10117                           
 10118                           ;mrf49xa_phy.c: 18: if (rfTrcvStatus.needsReset)
 10119  0032  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
 10120  0033  3400               	retlw	0
 10121                           
 10122                           ;mrf49xa_phy.c: 21: Mrf49RxSts();
 10123  0034  21C1  3180         	fcall	i1_Mrf49RxSts
 10124                           
 10125                           ;mrf49xa_phy.c: 23: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
 10126  0036  0840               	movf	_mrf49Status,w
 10127  0037  3AFF               	xorlw	255
 10128  0038  1D03               	skipz
 10129  0039  283E               	goto	i1l468
 10130  003A  0841               	movf	_mrf49Status+1,w
 10131  003B  3AFF               	xorlw	255
 10132  003C  1903               	btfsc	3,2
 10133  003D  3400               	retlw	0
 10134  003E                     i1l468:	
 10135                           ;mrf49xa_phy.c: 28: {
 10136                           
 10137                           
 10138                           ;mrf49xa_phy.c: 30: }
 10139                           ;mrf49xa_phy.c: 33: if (mrf49Status.flags.msb.overflow == 1)
 10140  003E  1AC0               	btfsc	_mrf49Status,5
 10141  003F  284D               	goto	i1l3841
 10142  0040  285C               	goto	i1l469
 10143  0041                     i1l3835:	
 10144                           
 10145                           ;mrf49xa_phy.c: 38: case RECV_DATA:
 10146                           ;mrf49xa_phy.c: 41: data = Mrf49RxByte();
 10147  0041  211B  3180         	fcall	i1_Mrf49RxByte
 10148  0043  00F5               	movwf	i1Mrf49xaServe@data
 10149                           
 10150                           ;mrf49xa_phy.c: 42: data = Mrf49RxByte();
 10151  0044  211B  3180         	fcall	i1_Mrf49RxByte
 10152  0046  00F5               	movwf	i1Mrf49xaServe@data
 10153                           
 10154                           ;mrf49xa_phy.c: 45: Mrf49xaModeRx();
 10155  0047  211E  3180         	fcall	i1_Mrf49xaModeRx
 10156                           
 10157                           ;mrf49xa_phy.c: 49: break;
 10158  0049  285C               	goto	i1l469
 10159  004A                     i1l3837:	
 10160                           
 10161                           ;mrf49xa_phy.c: 52: Mrf49xaNeedsReset();
 10162  004A  2144  3180         	fcall	i1_Mrf49xaNeedsReset
 10163                           
 10164                           ;mrf49xa_phy.c: 53: break;
 10165  004C  285C               	goto	i1l469
 10166  004D                     i1l3841:	
 10167  004D  0021               	movlb	1	; select bank1
 10168  004E  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
 10169                           
 10170                           ; Switch size 1, requested type "space"
 10171                           ; Number of cases is 4, Range of values is 0 to 3
 10172                           ; switch strategies available:
 10173                           ; Name         Instructions Cycles
 10174                           ; simple_byte           13     7 (average)
 10175                           ; direct_byte           14     6 (fixed)
 10176                           ; jumptable            260     6 (fixed)
 10177                           ;	Chosen strategy is simple_byte
 10178  004F  3A00               	xorlw	0	; case 0
 10179  0050  1903               	skipnz
 10180  0051  284A               	goto	i1l3837
 10181  0052  3A01               	xorlw	1	; case 1
 10182  0053  1903               	skipnz
 10183  0054  2841               	goto	i1l3835
 10184  0055  3A03               	xorlw	3	; case 2
 10185  0056  1903               	skipnz
 10186  0057  2841               	goto	i1l3835
 10187  0058  3A01               	xorlw	1	; case 3
 10188  0059  1903               	skipnz
 10189  005A  285C               	goto	i1l469
 10190  005B  285C               	goto	i1l469
 10191  005C                     i1l469:	
 10192                           
 10193                           ;mrf49xa_phy.c: 62: }
 10194                           ;mrf49xa_phy.c: 71: if (mrf49Status.flags.msb.fifoTxRx == 1)
 10195  005C  0020               	movlb	0	; select bank0
 10196  005D  1BC0               	btfsc	_mrf49Status,7
 10197  005E  2902               	goto	i1l3923
 10198  005F  2911               	goto	i1l3925
 10199  0060                     i1l3845:	
 10200                           
 10201                           ;mrf49xa_phy.c: 78: Mrf49xaNeedsReset();
 10202  0060  2144  3180         	fcall	i1_Mrf49xaNeedsReset
 10203                           
 10204                           ;mrf49xa_phy.c: 79: break;
 10205  0062  2911               	goto	i1l3925
 10206  0063                     i1l3847:	
 10207                           
 10208                           ;mrf49xa_phy.c: 83: data = Mrf49RxByte();
 10209  0063  211B  3180         	fcall	i1_Mrf49RxByte
 10210  0065  00F5               	movwf	i1Mrf49xaServe@data
 10211                           
 10212                           ;mrf49xa_phy.c: 87: if (mrf49Status.flags.lsb.dataQualityOK == 0)
 10213  0066  1BC1               	btfsc	_mrf49Status+1,7
 10214  0067  286B               	goto	i1l3853
 10215  0068                     i1l3851:	
 10216                           
 10217                           ;mrf49xa_phy.c: 88: {
 10218                           ;mrf49xa_phy.c: 89: Mrf49xaModeRx();
 10219  0068  211E  3180         	fcall	i1_Mrf49xaModeRx
 10220                           
 10221                           ;mrf49xa_phy.c: 90: break;
 10222  006A  2911               	goto	i1l3925
 10223  006B                     i1l3853:	
 10224                           
 10225                           ;mrf49xa_phy.c: 91: }
 10226                           ;mrf49xa_phy.c: 93: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = 
      +                          &(rfTrcvStatus.rxPacket[0]);
 10227  006B  0021               	movlb	1	; select bank1
 10228  006C  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
 10229  006D  1D03               	skipz
 10230  006E  2871               	goto	i1l3857
 10231  006F  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
 10232  0070  2875               	goto	L4
 10233  0071                     i1l3857:	
 10234                           
 10235                           ;mrf49xa_phy.c: 94: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hw
      +                          Rx = &(rfTrcvStatus.rxPacket[1]);
 10236  0071  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
 10237  0072  1D03               	skipz
 10238  0073  2868               	goto	i1l3851
 10239  0074  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
 10240  0075                     L4:	
 10241  0075  00A0               	movwf	_rfTrcvStatus^(0+128)
 10242                           
 10243                           ;mrf49xa_phy.c: 101: }
 10244                           ;mrf49xa_phy.c: 103: rfTrcvStatus.hwRx->packet.size = data;
 10245  0076  0A20               	incf	_rfTrcvStatus^(0+128),w
 10246  0077  0086               	movwf	6
 10247  0078  0187               	clrf	7
 10248  0079  0875               	movf	i1Mrf49xaServe@data,w
 10249  007A  0081               	movwf	1
 10250                           
 10251                           ;mrf49xa_phy.c: 104: rfTrcvStatus.hwRx->crc = 0;
 10252  007B  0820               	movf	_rfTrcvStatus^(0+128),w
 10253  007C  3E16               	addlw	22
 10254  007D  0086               	movwf	6
 10255  007E  0181               	clrf	1
 10256                           
 10257                           ;mrf49xa_phy.c: 105: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
 10258  007F  0820               	movf	_rfTrcvStatus^(0+128),w
 10259  0080  0086               	movwf	6
 10260  0081  3004               	movlw	4
 10261  0082  0081               	movwf	1
 10262                           
 10263                           ;mrf49xa_phy.c: 107: rfTrcvStatus.state = RECV_DATA;
 10264  0083  3002               	movlw	2
 10265  0084  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
 10266                           
 10267                           ;mrf49xa_phy.c: 108: rfTrcvStatus.hwByte = 1;
 10268  0085  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10269  0086  3980               	andlw	-128
 10270  0087  3801               	iorlw	1
 10271  0088  28B2               	goto	L5
 10272  0089                     i1l3873:	
 10273                           ;mrf49xa_phy.c: 110: break;
 10274                           
 10275                           
 10276                           ;mrf49xa_phy.c: 114: data = Mrf49RxByte();
 10277  0089  211B  3180         	fcall	i1_Mrf49RxByte
 10278  008B  00F5               	movwf	i1Mrf49xaServe@data
 10279                           
 10280                           ;mrf49xa_phy.c: 118: if (mrf49Status.flags.lsb.dataQualityOK == 0)
 10281  008C  1BC1               	btfsc	_mrf49Status+1,7
 10282  008D  2894               	goto	i1l3881
 10283                           
 10284                           ;mrf49xa_phy.c: 119: {
 10285                           ;mrf49xa_phy.c: 120: rfTrcvStatus.hwRx->state = PKT_FREE;
 10286  008E  0021               	movlb	1	; select bank1
 10287  008F  0820               	movf	_rfTrcvStatus^(0+128),w
 10288  0090  0086               	movwf	6
 10289  0091  0187               	clrf	7
 10290  0092  0181               	clrf	1
 10291  0093  2868               	goto	i1l3851
 10292  0094                     i1l3881:	
 10293                           
 10294                           ;mrf49xa_phy.c: 123: }
 10295                           ;mrf49xa_phy.c: 125: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
 10296  0094  0021               	movlb	1	; select bank1
 10297  0095  0A20               	incf	_rfTrcvStatus^(0+128),w
 10298  0096  0086               	movwf	6
 10299  0097  0187               	clrf	7
 10300  0098  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10301  0099  397F               	andlw	127
 10302  009A  0601               	xorwf	1,w
 10303  009B  1D03               	skipz
 10304  009C  28A7               	goto	i1l3887
 10305                           
 10306                           ;mrf49xa_phy.c: 126: {
 10307                           ;mrf49xa_phy.c: 127: rfTrcvStatus.hwRx->crc = data;
 10308  009D  0820               	movf	_rfTrcvStatus^(0+128),w
 10309  009E  3E16               	addlw	22
 10310  009F  0086               	movwf	6
 10311  00A0  0875               	movf	i1Mrf49xaServe@data,w
 10312  00A1  0081               	movwf	1
 10313                           
 10314                           ;mrf49xa_phy.c: 131: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
 10315  00A2  0820               	movf	_rfTrcvStatus^(0+128),w
 10316  00A3  0086               	movwf	6
 10317  00A4  3005               	movlw	5
 10318  00A5  0081               	movwf	1
 10319  00A6  2868               	goto	i1l3851
 10320  00A7                     i1l3887:	
 10321                           
 10322                           ;mrf49xa_phy.c: 140: else
 10323                           ;mrf49xa_phy.c: 141: {
 10324                           ;mrf49xa_phy.c: 142: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
 10325  00A7  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10326  00A8  397F               	andlw	127
 10327  00A9  0720               	addwf	_rfTrcvStatus^(0+128),w
 10328  00AA  00F4               	movwf	??i1_Mrf49xaServe
 10329  00AB  0A74               	incf	??i1_Mrf49xaServe,w
 10330  00AC  0086               	movwf	6
 10331  00AD  0187               	clrf	7
 10332  00AE  0875               	movf	i1Mrf49xaServe@data,w
 10333  00AF  0081               	movwf	1
 10334  00B0  2211  3180         	fcall	PL14	;call to abstracted procedure
 10335  00B2                     L5:	
 10336  00B2  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10337  00B3  2911               	goto	i1l3925
 10338  00B4                     i1l3891:	
 10339                           
 10340                           ;mrf49xa_phy.c: 148: rfTrcvStatus.hwByte++;
 10341  00B4  2211  3180         	fcall	PL14	;call to abstracted procedure
 10342  00B6  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10343                           
 10344                           ;mrf49xa_phy.c: 150: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
 10345  00B7  397F               	andlw	127
 10346  00B8  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
 10347  00B9  1D03               	skipz
 10348  00BA  28F0               	goto	i1l3919
 10349                           
 10350                           ;mrf49xa_phy.c: 151: rfTrcvStatus.hwByte = 49;
 10351  00BB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10352  00BC  3980               	andlw	-128
 10353  00BD  3831               	iorlw	49
 10354  00BE  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
 10355  00BF  28F0               	goto	i1l3919
 10356  00C0                     i1l3895:	
 10357                           
 10358                           ;mrf49xa_phy.c: 156: Mrf49TxByte(0x2D);
 10359  00C0  302D               	movlw	45
 10360  00C1  2116  3180         	fcall	i1_Mrf49TxByte
 10361                           
 10362                           ;mrf49xa_phy.c: 157: break;
 10363  00C3  2911               	goto	i1l3925
 10364  00C4                     i1l3897:	
 10365                           
 10366                           ;mrf49xa_phy.c: 160: Mrf49TxByte(0xD4);
 10367  00C4  30D4               	movlw	212
 10368  00C5  2116  3180         	fcall	i1_Mrf49TxByte
 10369                           
 10370                           ;mrf49xa_phy.c: 161: rfTrcvStatus.hwByte = 0x7F;
 10371  00C7  307F               	movlw	127
 10372  00C8  0021               	movlb	1	; select bank1
 10373  00C9  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
 10374                           
 10375                           ;mrf49xa_phy.c: 162: break;
 10376  00CA  2911               	goto	i1l3925
 10377  00CB                     i1l3901:	
 10378                           
 10379                           ;mrf49xa_phy.c: 166: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
 10380  00CB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10381  00CC  397F               	andlw	127
 10382  00CD  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
 10383  00CE  0086               	movwf	6
 10384  00CF  0187               	clrf	7
 10385  00D0  0801               	movf	1,w
 10386  00D1  2116  3180         	fcall	i1_Mrf49TxByte
 10387                           
 10388                           ;mrf49xa_phy.c: 167: break;
 10389  00D3  2911               	goto	i1l3925
 10390  00D4                     i1l3903:	
 10391                           
 10392                           ;mrf49xa_phy.c: 170: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
 10393  00D4  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
 10394  00D5  2116  3180         	fcall	i1_Mrf49TxByte
 10395                           
 10396                           ;mrf49xa_phy.c: 171: break;
 10397  00D7  2911               	goto	i1l3925
 10398  00D8                     i1l3905:	
 10399                           
 10400                           ;mrf49xa_phy.c: 174: Mrf49TxByte(0x00);
 10401  00D8  3000               	movlw	0
 10402  00D9  2116  3180         	fcall	i1_Mrf49TxByte
 10403                           
 10404                           ;mrf49xa_phy.c: 175: break;
 10405  00DB  2911               	goto	i1l3925
 10406  00DC                     i1l3907:	
 10407                           
 10408                           ;mrf49xa_phy.c: 178: Mrf49TxByte(0x00);
 10409  00DC  3000               	movlw	0
 10410  00DD  2116  3180         	fcall	i1_Mrf49TxByte
 10411                           
 10412                           ;mrf49xa_phy.c: 179: Mrf49xaModeRx();
 10413  00DF  211E  3180         	fcall	i1_Mrf49xaModeRx
 10414                           
 10415                           ;mrf49xa_phy.c: 181: rfTrcvStatus.txPacket.retry = 0;
 10416  00E1  30F0               	movlw	-16
 10417  00E2  0021               	movlb	1	; select bank1
 10418  00E3  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
 10419                           
 10420                           ;mrf49xa_phy.c: 183: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
 10421  00E4  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
 10422  00E5  0C89               	rrf	9,f
 10423  00E6  0C89               	rrf	9,f
 10424  00E7  3903               	andlw	3
 10425  00E8  3A01               	xorlw	1
 10426  00E9  1D03               	skipz
 10427  00EA  28EE               	goto	i1l3915
 10428                           
 10429                           ;mrf49xa_phy.c: 184: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
 10430  00EB  3003               	movlw	3
 10431  00EC  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
 10432  00ED  2911               	goto	i1l3925
 10433  00EE                     i1l3915:	
 10434                           
 10435                           ;mrf49xa_phy.c: 185: else
 10436                           ;mrf49xa_phy.c: 186: rfTrcvStatus.txPacket.state = PKT_FREE;
 10437  00EE  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
 10438  00EF  2911               	goto	i1l3925
 10439  00F0                     i1l3919:	
 10440  00F0  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10441  00F1  397F               	andlw	127
 10442                           
 10443                           ; Switch size 1, requested type "space"
 10444                           ; Number of cases is 5, Range of values is 49 to 101
 10445                           ; switch strategies available:
 10446                           ; Name         Instructions Cycles
 10447                           ; simple_byte           16     9 (average)
 10448                           ; direct_byte          115     9 (fixed)
 10449                           ; jumptable            263     9 (fixed)
 10450                           ;	Chosen strategy is simple_byte
 10451  00F2  3A31               	xorlw	49	; case 49
 10452  00F3  1903               	skipnz
 10453  00F4  28D4               	goto	i1l3903
 10454  00F5  3A03               	xorlw	3	; case 50
 10455  00F6  1903               	skipnz
 10456  00F7  28D8               	goto	i1l3905
 10457  00F8  3A01               	xorlw	1	; case 51
 10458  00F9  1903               	skipnz
 10459  00FA  28DC               	goto	i1l3907
 10460  00FB  3A57               	xorlw	87	; case 100
 10461  00FC  1903               	skipnz
 10462  00FD  28C0               	goto	i1l3895
 10463  00FE  3A01               	xorlw	1	; case 101
 10464  00FF  1903               	skipnz
 10465  0100  28C4               	goto	i1l3897
 10466  0101  28CB               	goto	i1l3901
 10467  0102                     i1l3923:	
 10468  0102  0021               	movlb	1	; select bank1
 10469  0103  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
 10470                           
 10471                           ; Switch size 1, requested type "space"
 10472                           ; Number of cases is 4, Range of values is 0 to 3
 10473                           ; switch strategies available:
 10474                           ; Name         Instructions Cycles
 10475                           ; simple_byte           13     7 (average)
 10476                           ; direct_byte           14     6 (fixed)
 10477                           ; jumptable            260     6 (fixed)
 10478                           ;	Chosen strategy is simple_byte
 10479  0104  3A00               	xorlw	0	; case 0
 10480  0105  1903               	skipnz
 10481  0106  2860               	goto	i1l3845
 10482  0107  3A01               	xorlw	1	; case 1
 10483  0108  1903               	skipnz
 10484  0109  2863               	goto	i1l3847
 10485  010A  3A03               	xorlw	3	; case 2
 10486  010B  1903               	skipnz
 10487  010C  2889               	goto	i1l3873
 10488  010D  3A01               	xorlw	1	; case 3
 10489  010E  1903               	skipnz
 10490  010F  28B4               	goto	i1l3891
 10491  0110  2911               	goto	i1l3925
 10492  0111                     i1l3925:	
 10493                           
 10494                           ;mrf49xa_phy.c: 193: }
 10495                           ;mrf49xa_phy.c: 207: return PORTAbits.RA2 == 1 ? 1 : 0;
 10496  0111  0020               	movlb	0	; select bank0
 10497  0112  0C0C               	rrf	12,w	;volatile
 10498  0113  0C89               	rrf	9,f
 10499  0114  3901               	andlw	1
 10500  0115  0008               	return
 10501  0116                     __end_ofi1_Mrf49xaServe:	
 10502  0116                     __ptext70:	
 10503 ;; *************** function i1_Mrf49TxByte *****************
 10504 ;; Defined at:
 10505 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;  byte            1    wreg     unsigned char 
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;  byte            1    3[COMMON] unsigned char 
 10510 ;; Return value:  Size  Location     Type
 10511 ;;		None               void
 10512 ;; Registers used:
 10513 ;;		wreg, status,2, status,0, pclath, cstack
 10514 ;; Tracked objects:
 10515 ;;		On entry : 1E/1
 10516 ;;		On exit  : 1F/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10519 ;;      Params:         0       0       0       0
 10520 ;;      Locals:         1       0       0       0
 10521 ;;      Temps:          0       0       0       0
 10522 ;;      Totals:         1       0       0       0
 10523 ;;Total ram usage:        1 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    2
 10526 ;; This function calls:
 10527 ;;		i1_Mrf49TxCmd
 10528 ;; This function is called by:
 10529 ;;		i1_Mrf49xaServe
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           
 10534                           ;psect for function i1_Mrf49TxByte
 10535  0116                     i1_Mrf49TxByte:	
 10536                           
 10537                           ;incstack = 0
 10538                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10539                           ;i1Mrf49TxByte@byte stored from wreg
 10540  0116  00F3               	movwf	i1Mrf49TxByte@byte
 10541                           
 10542                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10543  0117  00F1               	movwf	i1Mrf49TxCmd@val
 10544  0118  30B8               	movlw	184
 10545  0119  2147               	fcall	i1_Mrf49TxCmd
 10546  011A  0008               	return
 10547  011B                     __end_ofi1_Mrf49TxByte:	
 10548  011B                     __ptext73:	
 10549 ;; *************** function i1_Mrf49RxByte *****************
 10550 ;; Defined at:
 10551 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;		None
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;		None
 10556 ;; Return value:  Size  Location     Type
 10557 ;;                  1    wreg      unsigned char 
 10558 ;; Registers used:
 10559 ;;		wreg, status,2, status,0, pclath, cstack
 10560 ;; Tracked objects:
 10561 ;;		On entry : 1E/1
 10562 ;;		On exit  : 1F/0
 10563 ;;		Unchanged: 0/0
 10564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10565 ;;      Params:         0       0       0       0
 10566 ;;      Locals:         0       0       0       0
 10567 ;;      Temps:          0       0       0       0
 10568 ;;      Totals:         0       0       0       0
 10569 ;;Total ram usage:        0 bytes
 10570 ;; Hardware stack levels used:    1
 10571 ;; Hardware stack levels required when called:    2
 10572 ;; This function calls:
 10573 ;;		i1_Mrf49RxCmd
 10574 ;; This function is called by:
 10575 ;;		i1_Mrf49xaServe
 10576 ;; This function uses a non-reentrant model
 10577 ;;
 10578                           
 10579                           
 10580                           ;psect for function i1_Mrf49RxByte
 10581  011B                     i1_Mrf49RxByte:	
 10582                           
 10583                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10584                           
 10585                           ;incstack = 0
 10586                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10587  011B  30B0               	movlw	176
 10588  011C  2022               	fcall	i1_Mrf49RxCmd
 10589  011D  0008               	return
 10590  011E                     __end_ofi1_Mrf49RxByte:	
 10591  011E                     __ptext69:	
 10592 ;; *************** function i1_Mrf49xaModeRx *****************
 10593 ;; Defined at:
 10594 ;;		line 100 in file "../../../src/devices/mrf49xa.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;		None               void
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0, pclath, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 1E/0
 10605 ;;		On exit  : 1F/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10608 ;;      Params:         0       0       0       0
 10609 ;;      Locals:         1       0       0       0
 10610 ;;      Temps:          0       0       0       0
 10611 ;;      Totals:         1       0       0       0
 10612 ;;Total ram usage:        1 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    2
 10615 ;; This function calls:
 10616 ;;		i1_Mrf49TxCmd
 10617 ;; This function is called by:
 10618 ;;		i1_Mrf49xaServe
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function i1_Mrf49xaModeRx
 10624  011E                     i1_Mrf49xaModeRx:	
 10625  011E  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10626                           
 10627                           ;mrf49xa.c: 102: UI08_t k;
 10628                           ;mrf49xa.c: 103: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
 10629                           
 10630                           ;incstack = 0
 10631                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10632  011F  01F3               	clrf	i1Mrf49xaModeRx@k
 10633  0120  3182               	movlp	high __stringtab
 10634  0121  000A               	callw
 10635  0122  3180               	pagesel	$	;select current page
 10636  0123  3800               	iorlw	0
 10637  0124  1D03               	skipz
 10638  0125  2928               	goto	i1l3797
 10639  0126  0020               	movlb	0	; select bank0
 10640  0127  293C               	goto	i1l211
 10641  0128                     i1l3797:	
 10642  0128  3573               	lslf	i1Mrf49xaModeRx@k,w
 10643  0129  3E40               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10644  012A  3182               	movlp	high __stringtab
 10645  012B  000A               	callw
 10646  012C  00F1               	movwf	i1Mrf49TxCmd@val
 10647  012D  3573               	lslf	i1Mrf49xaModeRx@k,w
 10648  012E  3E3F               	addlw	low (_mrfRegset_Rx| (0+32768))
 10649  012F  3182               	movlp	high __stringtab
 10650  0130  000A               	callw
 10651  0131  3180               	pagesel	$	;select current page
 10652  0132  3181  2147         	fcall	i1_Mrf49TxCmd
 10653  0134  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10654  0135  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10655  0136  3182               	movlp	high __stringtab
 10656  0137  000A               	callw
 10657  0138  3180               	pagesel	$	;select current page
 10658  0139  0273               	subwf	i1Mrf49xaModeRx@k,w
 10659  013A  1C03               	skipc
 10660  013B  2928               	goto	i1l3797
 10661  013C                     i1l211:	
 10662                           
 10663                           ;mrf49xa.c: 106: rfTrcvStatus.state = RECV_IDLE;
 10664  013C  0021               	movlb	1	; select bank1
 10665  013D  3080               	movlw	-128
 10666  013E  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
 10667  013F  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
 10668                           
 10669                           ;mrf49xa.c: 107: rfTrcvStatus.hwByte = 0;
 10670  0140  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
 10671                           
 10672                           ;mrf49xa.c: 109: mrf49Status.flags.msb.fifoTxRx = 0;
 10673  0141  0020               	movlb	0	; select bank0
 10674  0142  13C0               	bcf	_mrf49Status,7
 10675  0143  0008               	return
 10676  0144                     __end_ofi1_Mrf49xaModeRx:	
 10677  0144                     __ptext68:	
 10678 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10679 ;; Defined at:
 10680 ;;		line 146 in file "../../../src/devices/mrf49xa.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;		None
 10685 ;; Return value:  Size  Location     Type
 10686 ;;		None               void
 10687 ;; Registers used:
 10688 ;;		None
 10689 ;; Tracked objects:
 10690 ;;		On entry : 1E/0
 10691 ;;		On exit  : 1F/1
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10694 ;;      Params:         0       0       0       0
 10695 ;;      Locals:         0       0       0       0
 10696 ;;      Temps:          0       0       0       0
 10697 ;;      Totals:         0       0       0       0
 10698 ;;Total ram usage:        0 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; This function calls:
 10701 ;;		Nothing
 10702 ;; This function is called by:
 10703 ;;		_extInt
 10704 ;;		i1_Mrf49xaServe
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           
 10709                           ;psect for function i1_Mrf49xaNeedsReset
 10710  0144                     i1_Mrf49xaNeedsReset:	
 10711                           
 10712                           ;mrf49xa.c: 148: rfTrcvStatus.needsReset = 1;
 10713                           
 10714                           ;incstack = 0
 10715                           ; Regs used in i1_Mrf49xaNeedsReset: []
 10716  0144  0021               	movlb	1	; select bank1
 10717  0145  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
 10718  0146  0008               	return
 10719  0147                     __end_ofi1_Mrf49xaNeedsReset:	
 10720  0147                     __ptext71:	
 10721 ;; *************** function i1_Mrf49TxCmd *****************
 10722 ;; Defined at:
 10723 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;  cmd             1    wreg     unsigned char 
 10726 ;;  val             1    1[COMMON] unsigned char 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;  cmd             1    2[COMMON] unsigned char 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;		None               void
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0, pclath, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 1E/0
 10735 ;;		On exit  : 1F/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10738 ;;      Params:         1       0       0       0
 10739 ;;      Locals:         1       0       0       0
 10740 ;;      Temps:          0       0       0       0
 10741 ;;      Totals:         2       0       0       0
 10742 ;;Total ram usage:        2 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    1
 10745 ;; This function calls:
 10746 ;;		i1_Mrf49SpiTx
 10747 ;; This function is called by:
 10748 ;;		i1_Mrf49xaModeRx
 10749 ;;		i1_Mrf49TxByte
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           
 10754                           ;psect for function i1_Mrf49TxCmd
 10755  0147                     i1_Mrf49TxCmd:	
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 10759                           ;i1Mrf49TxCmd@cmd stored from wreg
 10760  0147  00F2               	movwf	i1Mrf49TxCmd@cmd
 10761                           
 10762                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 10763  0148  0020               	movlb	0	; select bank0
 10764  0149  130E               	bcf	14,6	;volatile
 10765                           
 10766                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 10767  014A  0872               	movf	i1Mrf49TxCmd@cmd,w
 10768  014B  2151  3180         	fcall	i1_Mrf49SpiTx
 10769                           
 10770                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 10771  014D  0871               	movf	i1Mrf49TxCmd@val,w
 10772  014E  2151               	fcall	i1_Mrf49SpiTx
 10773                           
 10774                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 10775  014F  170E               	bsf	14,6	;volatile
 10776  0150  0008               	return
 10777  0151                     __end_ofi1_Mrf49TxCmd:	
 10778  0151                     __ptext75:	
 10779 ;; *************** function i1_Mrf49SpiTx *****************
 10780 ;; Defined at:
 10781 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;  byte            1    wreg     unsigned char 
 10784 ;; Auto vars:     Size  Location     Type
 10785 ;;  byte            1    0[COMMON] unsigned char 
 10786 ;; Return value:  Size  Location     Type
 10787 ;;		None               void
 10788 ;; Registers used:
 10789 ;;		wreg
 10790 ;; Tracked objects:
 10791 ;;		On entry : 1F/0
 10792 ;;		On exit  : 1F/0
 10793 ;;		Unchanged: 0/0
 10794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10795 ;;      Params:         0       0       0       0
 10796 ;;      Locals:         1       0       0       0
 10797 ;;      Temps:          0       0       0       0
 10798 ;;      Totals:         1       0       0       0
 10799 ;;Total ram usage:        1 bytes
 10800 ;; Hardware stack levels used:    1
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		i1_Mrf49TxCmd
 10805 ;;		i1_Mrf49RxCmd
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           
 10810                           ;psect for function i1_Mrf49SpiTx
 10811  0151                     i1_Mrf49SpiTx:	
 10812                           
 10813                           ;incstack = 0
 10814                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 10815                           ;i1Mrf49SpiTx@byte stored from wreg
 10816  0151  00F0               	movwf	i1Mrf49SpiTx@byte
 10817                           
 10818                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 10819  0152  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 10820  0153  2956               	goto	i1l255
 10821  0154  178D               	bsf	13,7	;volatile
 10822  0155  2957               	goto	i1l256
 10823  0156                     i1l255:	
 10824  0156  138D               	bcf	13,7	;volatile
 10825  0157                     i1l256:	
 10826  0157  0022               	movlb	2	; select bank2
 10827  0158  178E               	bsf	14,7	;volatile
 10828  0159  0000               	nop	;# 
 10829  015A  0022               	movlb	2	; select bank2
 10830  015B  138E               	bcf	14,7	;volatile
 10831  015C  1B70               	btfsc	i1Mrf49SpiTx@byte,6
 10832  015D  2960               	goto	i1l3713
 10833  015E  0020               	movlb	0	; select bank0
 10834  015F  2963               	goto	i1l259
 10835  0160                     i1l3713:	
 10836  0160  0020               	movlb	0	; select bank0
 10837  0161  178D               	bsf	13,7	;volatile
 10838  0162  2965               	goto	i1l260
 10839  0163                     i1l259:	
 10840  0163  0020               	movlb	0	; select bank0
 10841  0164  138D               	bcf	13,7	;volatile
 10842  0165                     i1l260:	
 10843  0165  0022               	movlb	2	; select bank2
 10844  0166  178E               	bsf	14,7	;volatile
 10845  0167  0000               	nop	;# 
 10846  0168  0022               	movlb	2	; select bank2
 10847  0169  138E               	bcf	14,7	;volatile
 10848  016A  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
 10849  016B  296E               	goto	i1l3717
 10850  016C  0020               	movlb	0	; select bank0
 10851  016D  2971               	goto	i1l263
 10852  016E                     i1l3717:	
 10853  016E  0020               	movlb	0	; select bank0
 10854  016F  178D               	bsf	13,7	;volatile
 10855  0170  2973               	goto	i1l264
 10856  0171                     i1l263:	
 10857  0171  0020               	movlb	0	; select bank0
 10858  0172  138D               	bcf	13,7	;volatile
 10859  0173                     i1l264:	
 10860  0173  0022               	movlb	2	; select bank2
 10861  0174  178E               	bsf	14,7	;volatile
 10862  0175  0000               	nop	;# 
 10863  0176  0022               	movlb	2	; select bank2
 10864  0177  138E               	bcf	14,7	;volatile
 10865  0178  1A70               	btfsc	i1Mrf49SpiTx@byte,4
 10866  0179  297C               	goto	i1l3721
 10867  017A  0020               	movlb	0	; select bank0
 10868  017B  297F               	goto	i1l267
 10869  017C                     i1l3721:	
 10870  017C  0020               	movlb	0	; select bank0
 10871  017D  178D               	bsf	13,7	;volatile
 10872  017E  2981               	goto	i1l268
 10873  017F                     i1l267:	
 10874  017F  0020               	movlb	0	; select bank0
 10875  0180  138D               	bcf	13,7	;volatile
 10876  0181                     i1l268:	
 10877  0181  0022               	movlb	2	; select bank2
 10878  0182  178E               	bsf	14,7	;volatile
 10879  0183  0000               	nop	;# 
 10880  0184  0022               	movlb	2	; select bank2
 10881  0185  138E               	bcf	14,7	;volatile
 10882  0186  19F0               	btfsc	i1Mrf49SpiTx@byte,3
 10883  0187  298A               	goto	i1l3725
 10884  0188  0020               	movlb	0	; select bank0
 10885  0189  298D               	goto	i1l271
 10886  018A                     i1l3725:	
 10887  018A  0020               	movlb	0	; select bank0
 10888  018B  178D               	bsf	13,7	;volatile
 10889  018C  298F               	goto	i1l272
 10890  018D                     i1l271:	
 10891  018D  0020               	movlb	0	; select bank0
 10892  018E  138D               	bcf	13,7	;volatile
 10893  018F                     i1l272:	
 10894  018F  0022               	movlb	2	; select bank2
 10895  0190  178E               	bsf	14,7	;volatile
 10896  0191  0000               	nop	;# 
 10897  0192  0022               	movlb	2	; select bank2
 10898  0193  138E               	bcf	14,7	;volatile
 10899  0194  1970               	btfsc	i1Mrf49SpiTx@byte,2
 10900  0195  2998               	goto	i1l3729
 10901  0196  0020               	movlb	0	; select bank0
 10902  0197  299B               	goto	i1l275
 10903  0198                     i1l3729:	
 10904  0198  0020               	movlb	0	; select bank0
 10905  0199  178D               	bsf	13,7	;volatile
 10906  019A  299D               	goto	i1l276
 10907  019B                     i1l275:	
 10908  019B  0020               	movlb	0	; select bank0
 10909  019C  138D               	bcf	13,7	;volatile
 10910  019D                     i1l276:	
 10911  019D  0022               	movlb	2	; select bank2
 10912  019E  178E               	bsf	14,7	;volatile
 10913  019F  0000               	nop	;# 
 10914  01A0  0022               	movlb	2	; select bank2
 10915  01A1  138E               	bcf	14,7	;volatile
 10916  01A2  18F0               	btfsc	i1Mrf49SpiTx@byte,1
 10917  01A3  29A6               	goto	i1l3733
 10918  01A4  0020               	movlb	0	; select bank0
 10919  01A5  29A9               	goto	i1l279
 10920  01A6                     i1l3733:	
 10921  01A6  0020               	movlb	0	; select bank0
 10922  01A7  178D               	bsf	13,7	;volatile
 10923  01A8  29AB               	goto	i1l280
 10924  01A9                     i1l279:	
 10925  01A9  0020               	movlb	0	; select bank0
 10926  01AA  138D               	bcf	13,7	;volatile
 10927  01AB                     i1l280:	
 10928  01AB  0022               	movlb	2	; select bank2
 10929  01AC  178E               	bsf	14,7	;volatile
 10930  01AD  0000               	nop	;# 
 10931  01AE  0022               	movlb	2	; select bank2
 10932  01AF  138E               	bcf	14,7	;volatile
 10933  01B0  1870               	btfsc	i1Mrf49SpiTx@byte,0
 10934  01B1  29B4               	goto	i1l3737
 10935  01B2  0020               	movlb	0	; select bank0
 10936  01B3  29B7               	goto	i1l283
 10937  01B4                     i1l3737:	
 10938  01B4  0020               	movlb	0	; select bank0
 10939  01B5  178D               	bsf	13,7	;volatile
 10940  01B6  29B9               	goto	i1l284
 10941  01B7                     i1l283:	
 10942  01B7  0020               	movlb	0	; select bank0
 10943  01B8  138D               	bcf	13,7	;volatile
 10944  01B9                     i1l284:	
 10945  01B9  0022               	movlb	2	; select bank2
 10946  01BA  178E               	bsf	14,7	;volatile
 10947  01BB  0000               	nop	;# 
 10948  01BC  0022               	movlb	2	; select bank2
 10949  01BD  138E               	bcf	14,7	;volatile
 10950                           
 10951                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 10952  01BE  0020               	movlb	0	; select bank0
 10953  01BF  138D               	bcf	13,7	;volatile
 10954  01C0  0008               	return
 10955  01C1                     __end_ofi1_Mrf49SpiTx:	
 10956  01C1                     __ptext72:	
 10957 ;; *************** function i1_Mrf49RxSts *****************
 10958 ;; Defined at:
 10959 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;		None
 10964 ;; Return value:  Size  Location     Type
 10965 ;;		None               void
 10966 ;; Registers used:
 10967 ;;		wreg, status,2, pclath, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 1F/1
 10970 ;;		On exit  : 1F/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10973 ;;      Params:         0       0       0       0
 10974 ;;      Locals:         0       0       0       0
 10975 ;;      Temps:          0       0       0       0
 10976 ;;      Totals:         0       0       0       0
 10977 ;;Total ram usage:        0 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    1
 10980 ;; This function calls:
 10981 ;;		i1_Mrf49SpiRx
 10982 ;; This function is called by:
 10983 ;;		i1_Mrf49xaServe
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           
 10988                           ;psect for function i1_Mrf49RxSts
 10989  01C1                     i1_Mrf49RxSts:	
 10990                           
 10991                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 10992                           
 10993                           ;incstack = 0
 10994                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 10995  01C1  120B               	bcf	11,4	;volatile
 10996                           
 10997                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 10998  01C2  0020               	movlb	0	; select bank0
 10999  01C3  130E               	bcf	14,6	;volatile
 11000                           
 11001                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
 11002  01C4  21CE  3180         	fcall	i1_Mrf49SpiRx
 11003  01C6  0020               	movlb	0	; select bank0
 11004  01C7  00C0               	movwf	_mrf49Status
 11005                           
 11006                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
 11007  01C8  21CE               	fcall	i1_Mrf49SpiRx
 11008  01C9  0020               	movlb	0	; select bank0
 11009  01CA  00C1               	movwf	_mrf49Status+1
 11010                           
 11011                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 11012  01CB  170E               	bsf	14,6	;volatile
 11013                           
 11014                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 11015  01CC  160B               	bsf	11,4	;volatile
 11016  01CD  0008               	return
 11017  01CE                     __end_ofi1_Mrf49RxSts:	
 11018  01CE                     __ptext76:	
 11019 ;; *************** function i1_Mrf49SpiRx *****************
 11020 ;; Defined at:
 11021 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;		None
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      unsigned char 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2
 11030 ;; Tracked objects:
 11031 ;;		On entry : 1F/0
 11032 ;;		On exit  : 1F/2
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11035 ;;      Params:         0       0       0       0
 11036 ;;      Locals:         1       0       0       0
 11037 ;;      Temps:          0       0       0       0
 11038 ;;      Totals:         1       0       0       0
 11039 ;;Total ram usage:        1 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; This function calls:
 11042 ;;		Nothing
 11043 ;; This function is called by:
 11044 ;;		i1_Mrf49RxCmd
 11045 ;;		i1_Mrf49RxSts
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function i1_Mrf49SpiRx
 11051  01CE                     i1_Mrf49SpiRx:	
 11052                           
 11053                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 11054                           
 11055                           ;incstack = 0
 11056                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 11057  01CE  01F0               	clrf	i1Mrf49SpiRx@data
 11058                           
 11059                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 11060  01CF  138D               	bcf	13,7	;volatile
 11061  01D0  1A8E               	btfsc	14,5	;volatile
 11062  01D1  17F0               	bsf	i1Mrf49SpiRx@data,7
 11063  01D2  0022               	movlb	2	; select bank2
 11064  01D3  178E               	bsf	14,7	;volatile
 11065  01D4  0000               	nop	;# 
 11066  01D5  0022               	movlb	2	; select bank2
 11067  01D6  138E               	bcf	14,7	;volatile
 11068                           
 11069                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11070  01D7  0020               	movlb	0	; select bank0
 11071  01D8  1A8E               	btfsc	14,5	;volatile
 11072  01D9  1770               	bsf	i1Mrf49SpiRx@data,6
 11073  01DA  0022               	movlb	2	; select bank2
 11074  01DB  178E               	bsf	14,7	;volatile
 11075  01DC  0000               	nop	;# 
 11076  01DD  0022               	movlb	2	; select bank2
 11077  01DE  138E               	bcf	14,7	;volatile
 11078                           
 11079                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11080  01DF  0020               	movlb	0	; select bank0
 11081  01E0  1A8E               	btfsc	14,5	;volatile
 11082  01E1  16F0               	bsf	i1Mrf49SpiRx@data,5
 11083  01E2  0022               	movlb	2	; select bank2
 11084  01E3  178E               	bsf	14,7	;volatile
 11085  01E4  0000               	nop	;# 
 11086  01E5  0022               	movlb	2	; select bank2
 11087  01E6  138E               	bcf	14,7	;volatile
 11088                           
 11089                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11090  01E7  0020               	movlb	0	; select bank0
 11091  01E8  1A8E               	btfsc	14,5	;volatile
 11092  01E9  1670               	bsf	i1Mrf49SpiRx@data,4
 11093  01EA  0022               	movlb	2	; select bank2
 11094  01EB  178E               	bsf	14,7	;volatile
 11095  01EC  0000               	nop	;# 
 11096  01ED  0022               	movlb	2	; select bank2
 11097  01EE  138E               	bcf	14,7	;volatile
 11098                           
 11099                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11100  01EF  0020               	movlb	0	; select bank0
 11101  01F0  1A8E               	btfsc	14,5	;volatile
 11102  01F1  15F0               	bsf	i1Mrf49SpiRx@data,3
 11103  01F2  0022               	movlb	2	; select bank2
 11104  01F3  178E               	bsf	14,7	;volatile
 11105  01F4  0000               	nop	;# 
 11106  01F5  0022               	movlb	2	; select bank2
 11107  01F6  138E               	bcf	14,7	;volatile
 11108                           
 11109                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11110  01F7  0020               	movlb	0	; select bank0
 11111  01F8  1A8E               	btfsc	14,5	;volatile
 11112  01F9  1570               	bsf	i1Mrf49SpiRx@data,2
 11113  01FA  0022               	movlb	2	; select bank2
 11114  01FB  178E               	bsf	14,7	;volatile
 11115  01FC  0000               	nop	;# 
 11116  01FD  0022               	movlb	2	; select bank2
 11117  01FE  138E               	bcf	14,7	;volatile
 11118                           
 11119                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11120  01FF  0020               	movlb	0	; select bank0
 11121  0200  1A8E               	btfsc	14,5	;volatile
 11122  0201  14F0               	bsf	i1Mrf49SpiRx@data,1
 11123  0202  0022               	movlb	2	; select bank2
 11124  0203  178E               	bsf	14,7	;volatile
 11125  0204  0000               	nop	;# 
 11126  0205  0022               	movlb	2	; select bank2
 11127  0206  138E               	bcf	14,7	;volatile
 11128                           
 11129                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11130  0207  0020               	movlb	0	; select bank0
 11131  0208  1A8E               	btfsc	14,5	;volatile
 11132  0209  1470               	bsf	i1Mrf49SpiRx@data,0
 11133  020A  0022               	movlb	2	; select bank2
 11134  020B  178E               	bsf	14,7	;volatile
 11135  020C  0000               	nop	;# 
 11136  020D  0022               	movlb	2	; select bank2
 11137  020E  138E               	bcf	14,7	;volatile
 11138                           
 11139                           ;mrf49xa_spi_pic16.c: 40: return data;
 11140  020F  0870               	movf	i1Mrf49SpiRx@data,w
 11141  0210  0008               	return
 11142  0211                     __end_ofi1_Mrf49SpiRx:	
 11143  0211                     PL14:	
 11144  0211  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 11145  0212  397F               	andlw	127
 11146  0213  00F4               	movwf	??i1_Mrf49xaServe
 11147  0214  0AF4               	incf	??i1_Mrf49xaServe,f
 11148  0215  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 11149  0216  0674               	xorwf	??i1_Mrf49xaServe,w
 11150  0217  3980               	andlw	-128
 11151  0218  0674               	xorwf	??i1_Mrf49xaServe,w
 11152  0219  0008               	return
 11153  021A                     __end_ofPL14:	
 11154                           
 11155                           	psect	text77
 11156  0321                     __ptext77:	
 11157 ;; *************** function _ExtIntDeinit *****************
 11158 ;; Defined at:
 11159 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;		None
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;		None               void
 11166 ;; Registers used:
 11167 ;;		None
 11168 ;; Tracked objects:
 11169 ;;		On entry : 1E/0
 11170 ;;		On exit  : 1E/0
 11171 ;;		Unchanged: 1E/0
 11172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11173 ;;      Params:         0       0       0       0
 11174 ;;      Locals:         0       0       0       0
 11175 ;;      Temps:          0       0       0       0
 11176 ;;      Totals:         0       0       0       0
 11177 ;;Total ram usage:        0 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; This function calls:
 11180 ;;		Nothing
 11181 ;; This function is called by:
 11182 ;;		_extInt
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           
 11187                           ;psect for function _ExtIntDeinit
 11188  0321                     _ExtIntDeinit:	
 11189                           
 11190                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 11191                           
 11192                           ;incstack = 0
 11193                           ; Regs used in _ExtIntDeinit: []
 11194  0321  120B               	bcf	11,4	;volatile
 11195  0322  0008               	return
 11196  0323                     __end_of_ExtIntDeinit:	
 11197  007E                     btemp	set	126	;btemp
 11198  007E                     wtemp	set	126
 11199  007E                     wtemp0	set	126
 11200  0080                     wtemp1	set	128
 11201  0082                     wtemp2	set	130
 11202  0084                     wtemp3	set	132
 11203  0086                     wtemp4	set	134
 11204  0088                     wtemp5	set	136
 11205  007F                     wtemp6	set	127
 11206  007E                     ttemp	set	126
 11207  007E                     ttemp0	set	126
 11208  0081                     ttemp1	set	129
 11209  0084                     ttemp2	set	132
 11210  0087                     ttemp3	set	135
 11211  007F                     ttemp4	set	127
 11212  007E                     ltemp	set	126
 11213  007E                     ltemp0	set	126
 11214  0082                     ltemp1	set	130
 11215  0086                     ltemp2	set	134
 11216  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    68
    Data        2
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80     22      35
    BANK1            80      0      75
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaFreePacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    macPtr	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    RfSendSampleWeatherNode@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    RfSendPowerState@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    HandlePacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    HandlePacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    S1218CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTick@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaTick@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaAllocPacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaAllocPacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaRxPacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaRxPacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxAck@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxPacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxPacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaPacketPending@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    Mrf49xaPacketPending@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), eepromTxByte@byte(COMMON[1]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), eepromRxByte@dat(COMMON[1]), 

    sp__Mrf49xaInit	PTR struct rfTrcvStatus_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    S333rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_Mrf49xaTxAck
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   36349
                                             18 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              6     2      4    3108
                                              8 BANK0      6     2      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     4     4      0    2771
                                              8 BANK0      4     4      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   1     1      0     210
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     915
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     915
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     915
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     915
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     915
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    6232
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   19548
                                             14 BANK0      4     4      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
                  _Mrf49xaNeedsReset
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      1     1      0     171
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 1     1      0      83
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     915
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    5146
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2    1086
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    2115
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     915
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     847
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     825
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     3      1   10932
                                             10 BANK0      4     3      1
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1360
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     783
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     893
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     610
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    2148
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     766
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     766
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1211
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1211
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         2     1      1    2530
                                              8 BANK0      2     1      1
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      8     5      3    2212
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    2     1      1     382
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    3350
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       2     2      0    3326
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     1     1      0    1204
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaNeedsReset
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      77       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     16      23       6       43.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4B       8       93.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      77      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Tue Aug 26 14:19:25 2014

                Mrf49xaTxPacket@crc 0025                 Mrf49xaTxPacket@inst 0027  
                       __CFG_CP$OFF 0000                                  PL8 0FAA  
                                l32 0A90                                  l42 0AE5  
                                l34 0A9C                                  l35 0A9E  
                                l39 0AC8                                  l79 0008  
                               PL10 0FCA                                 PL20 0FEF  
                               PL12 0FD7                                 PL22 0FF4  
                               PL14 0211                                 PL16 0FE3  
                               PL18 0FE9               Mrf49xaTxPacket@packet 0020  
                               l211 0D51                                 l234 098F  
                               l404 0F4A                                 l260 0D73  
                               l271 0D93                                 l263 0D7D  
                               l255 0D67                                 l280 0DAA  
                               l272 0D94                                 l264 0D7E  
                               l256 0D68                                 l283 0DB4  
                               l275 0D9E                                 l267 0D88  
                               l259 0D72                                 l532 02B2  
                               l284 0DB5                                 l276 0D9F  
                               l268 0D89                                 l444 0984  
                               l279 0DA9                                 l552 0B88  
                               l561 0B97                                 l562 0BA5  
                               l547 0BF7                                 l563 0BA4  
                               l555 0B58                                 l468 0C55  
                               l469 0C73                     ??_PwrSensorInit 0020  
                   ??_PwrSensorWake 0020                        __CFG_BORV$LO 0000  
               handleCfgWrite@index 0027                                 wreg 0009  
                  i1Mrf49xaModeRx@k 0073                        __CFG_IESO$ON 0000  
            ??_SoftI2cRepeatedStart 0021                        __CFG_LVP$OFF 0000  
            Mrf49xaTxPacket@needAck 0022                                l3003 026D  
                              l3015 028A                                l3009 0276  
                              l3213 0F16                                l3053 09CC  
                              l3029 0990                                l3071 09E3  
                              l3055 09D8                                l3303 0EE5  
                              l3225 0F28                                l3161 0A33  
                              l3049 09BE                                l3321 08CE  
                              l3171 0A4E                                l3403 0B31  
                              l3059 09E0                                l3237 0F36  
                              l3157 0A7A                                l3149 0A68  
                              l3413 0B5A                                l3405 0B37  
                              l3341 08FD                                l3159 0A8B  
                              l3503 0BCF                                l3423 0B65  
                              l3407 0B3A                                l3343 0901  
                              l3273 0B22                                l3249 0F5A  
                              l3169 0A40                                l3505 0BD1  
                              l3513 0BE5                                l3417 0B5E  
                              l3337 08F2                                l3329 08D8  
                              l2801 0E60                                l3601 0863  
                              l2811 084B                                l3195 0F05  
                              l3515 0313                                l3507 0BD2  
                              l3419 0B61                                l3283 02C2  
                              l3347 0913                                l3363 094B  
                              l2661 0AF3                                l2709 0B07  
                              l3517 0B27                                l3509 0BD9  
                              l3429 0B6A                                l2901 0CDB  
                              l3349 0919                                l2805 0E67  
                              l3439 029B                                l2911 0CF3  
                              l3375 096B                                l3359 0942  
                              l3631 0897                                l3473 0F98  
                              l3465 0F96                                l2905 0CE2  
                              l2841 0C61                                l3385 0976  
                              l3377 096C                                l3483 0F9A  
                              l2907 0CEB                                l2923 0D07  
                              l2851 0C7A                                l3643 08A8  
                              l2765 0AE7                                l3477 0F99  
                              l3469 0F97                                l3493 02D7  
                              l2909 0CEF                                l2861 0C88  
                              l2837 0C58                                l2845 0C64  
                              l3645 08B4                     Mrf49TxByte@byte 0023  
                              l2919 0D05                                l2855 0C7F  
                              l2927 0D19                                l2951 0A04  
                              l2783 0FF9                                l2775 0308  
                              l3639 08A1                                l2857 0C82  
                              l2849 0C77                                l2929 0D28  
                              l2785 0000                                l2971 0D34  
                              l2891 0CBC                                l2955 09EF  
                              l2885 0CAA                                l2877 0C9F  
                              l2895 0CCB                                l2977 0D3D  
                              l2993 0C29                                l2899 0CD7  
                              l2999 0C3D                                u2807 0E5B  
                              u2817 0AF6                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _main 0851  
                   __end_of_AdcInit 0313                                fsr0h 0005  
                              fsr1h 0007                    ??_PwrSensorSleep 0020  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                     __end_of_CfgLoad 0B2F  
                              ltemp 007E                     __end_of_CfgSave 031B  
              handleCfgWrite@packet 0028                                start 0020  
                              ttemp 007E                                wtemp 007E  
              __end_of_HandlePacket 0BAA             __end_ofi1_Mrf49xaModeRx 0144  
                     __CFG_MCLRE$ON 0000                 __end_of_Mrf49RxByte 0D34  
                     ?_ExtIntDeinit 0070                 __end_of_Mrf49TxByte 0D32  
                   ??_eepromRxBytes 0028                         _Mcp9800Read 0A1E  
                   ??_eepromTxBytes 0028                    _RfSendPowerState 0E16  
               __end_of_Mrf49xaInit 09EE                 __end_of_Mrf49xaTick 098F  
              _Mrf49xaPacketPending 02EB                   ?_CfgGetSizeByType 0070  
                             ?_main 0070                               i1l211 013C  
                             i1l141 001B                               i1l142 001C  
                             i1l260 0165                               i1l271 018D  
                             i1l263 0171                               i1l255 0156  
                             i1l280 01AB                               i1l272 018F  
                             i1l264 0173                               i1l256 0157  
                             i1l283 01B7                               i1l275 019B  
                             i1l267 017F                               i1l259 0163  
                             i1l284 01B9                               i1l276 019D  
                             i1l268 0181                               i1l279 01A9  
                             i1l468 003E                               i1l469 005C  
                        _Mrf49RxCmd 0E0C                          _Mrf49TxCmd 0D59  
                             _AdcGo 0E79                          _Mrf49SpiRx 0DC8  
                        _Mrf49SpiTx 0D62                          _Mrf49RxSts 0DBD  
                ??_CfgGetSizeByType 0020          __end_of_Mrf49xaAllocPacket 0EF4  
             __end_of_SoftI2cRxByte 0AF3               __end_of_SoftI2cTxByte 0ABA  
                      main@humidity 0032               __size_of_Mcp9800Start 0019  
                __size_of_AdcDeinit 0007             Mrf49xaTxPacket@response 0021  
                __size_of_AdcIsBusy 0004                  __size_of_AdcSample 0028  
                    __CFG_BOREN$OFF 0000                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
            Mcp9800Start@resolution 0024                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 i1_Mrf49xaNeedsReset 0144  
                    ??_ExtIntDeinit 0070                     __initialization 0801  
                        _ExtIntInit 084B                __end_of_handleCfgCmd 0BF8  
                      __end_of_main 08BC  RfSendSampleWeatherNode@temperature 0028  
                    __CFG_LPBOR$OFF 0000               ?_Mrf49xaPacketPending 0070  
                      _Mcp9800Start 0A4F                              ??_main 0032  
              ?i1_Mrf49xaNeedsReset 0070                              ?_AdcGo 0070  
              __size_of_handleFwCmd 0024                __end_of_Mrf49xaTxAck 0BCD  
              __end_of_Mrf49xaServe 0D2D                       ??_PwrI2cSleep 0020  
                            _ADCON0 009D                              _ADCON1 009E  
                            _ADCON2 009F                           ??_AdcInit 0020  
                            _ADRESH 009C                              _ADRESL 009B  
                            _ANSELA 018C                              _ANSELB 018D  
                            _ANSELC 018E                           ??_CfgLoad 0028  
                         ??_CfgSave 0028                  i1Mrf49xaServe@data 0075  
                            i1l3721 017C                              i1l3713 0160  
                            i1l3733 01A6                              i1l3725 018A  
                            i1l3717 016E                              i1l3901 00CB  
                            i1l3903 00D4                              i1l3737 01B4  
                            i1l3729 0198                              i1l3905 00D8  
                            i1l3841 004D                              i1l3915 00EE  
                            i1l3907 00DC                              i1l3851 0068  
                            i1l3923 0102                              i1l3835 0041  
                            i1l3853 006B                              i1l3845 0060  
                            i1l3925 0111                              i1l3837 004A  
                            i1l3919 00F0                              i1l3847 0063  
                            i1l3881 0094                              i1l3873 0089  
                            i1l3857 0071                              i1l3891 00B4  
                            i1l3939 000B                              i1l3797 0128  
                            i1l3895 00C0                              i1l3887 00A7  
                            i1l3897 00C4                              _FVRCON 0117  
                            _OSCCON 0099                CfgGetSizeByType@type 0020  
                        _PwrI2cInit 0817                  AdcChSelect@channel 0020  
                        _PwrI2cWake 0C1D                         _Mrf49RxByte 0D32  
                       _Mrf49TxByte 0D2D                       ??_SoftI2cInit 0024  
                     ??_SoftI2cStop 0021           __size_of_Mrf49xaModeSleep 0022  
                    __CFG_PWRTE$OFF 0000                          _SoftI2cNop 0AF3  
                      ?_AdcChSelect 0070                    ?i1_Mrf49xaModeRx 0070  
                       _Mrf49xaInit 098F                              _Sleepy 09EE  
                       _Mrf49xaTick 08BC                          _PwrAdcInit 0C14  
                        _PwrAdcWake 0E8B                       ??_PwrAdcSleep 0020  
                            _cfgRam 0037                     _Mrf49xaRxPacket 02B3  
                 __end_of_AdcDeinit 1000                      __CFG_STVREN$ON 0000  
                 __end_of_AdcIsBusy 0E7F                              _macPtr 0078  
                   _Mrf49xaTxPacket 0EF4                              _extInt 0004  
                            _memcpy 02D2                   __end_of_AdcSample 0E79  
                   _Mrf49xaShutdown 026C                          _PwrRfSleep 025F  
             ??i1_Mrf49xaNeedsReset 0070                         ?_Mrf49RxCmd 0070  
                       ?_Mrf49TxCmd 0021                         ?_Mrf49SpiRx 0070  
                       ?_Mrf49SpiTx 0070                         ?_Mrf49RxSts 0070  
                      __pdataCOMMON 0078                  __size_of_PwrRfInit 0021  
                __size_of_PwrRfWake 000B               __size_of_HandlePacket 007B  
           __end_of__initialization 0815               __end_ofi1_Mrf49RxByte 011E  
               __end_of_PwrI2cSleep 0B1F               __end_ofi1_Mrf49TxByte 011B  
                     __end_of_AdcGo 0E7B     RfSendSampleWeatherNode@humidity 002A  
                       ?_ExtIntInit 0070                      __pcstackCOMMON 0070  
                  SoftI2cRxByte@ack 0021                        __pidataBANK0 0000  
                handleCfgCmd@packet 0028                 __end_of_SoftI2cInit 082A  
             __end_of_handleCfgRead 0F94                 __end_of_SoftI2cStop 0B16  
            ??_Mrf49xaPacketPending 0020             __size_ofi1_Mrf49xaServe 00E8  
                        __end_ofPL8 0FCA                 __end_of_PwrAdcSleep 0E8B  
                           ??_AdcGo 0020                      _OPTION_REGbits 0095  
                      _HandlePacket 0B2F             Mrf49xaFreePacket@packet 0020  
           __size_of_handleCfgWrite 001C                __end_of_ExtIntDeinit 0323  
          __end_of_RfSendPowerState 0E51                          __pbssBANK0 0036  
                        __pbssBANK1 00A0                         ?_PwrI2cInit 0070  
                       ?_PwrI2cWake 0070                       ?_SoftI2cStart 0070  
             __size_of_handleCfgCmd 002B             __end_of_Mrf49xaRxPacket 02D2  
           __end_of_Mrf49xaTxPacket 0F62               __end_of_Mrf49xaModeRx 0D59  
             __end_of_Mrf49xaModeTx 0C45                         ?_SoftI2cNop 0070  
             __end_of_Mrf49xaReboot 0308                 __size_of_Mrf49RxCmd 000A  
                 __end_of_PwrRfInit 084B                 __size_of_Mrf49TxCmd 0009  
                 __end_of_PwrRfWake 0306                 __size_of_Mrf49SpiRx 0044  
               __size_of_Mrf49SpiTx 005B                 __size_of_Mrf49RxSts 000B  
                        __pmaintext 0851                             ?_Sleepy 0020  
           __end_of_Mrf49xaShutdown 026D                         ?_PwrAdcInit 0070  
                       ?_PwrAdcWake 0070            ?_RfSendSampleWeatherNode 0028  
                      ?_Mcp9800Read 0024                          __pintentry 0004  
                           ?_extInt 0070                             ?_memcpy 0020  
             __size_of_Mrf49xaTxAck 0023               __size_of_Mrf49xaServe 00E8  
                       ?_PwrRfSleep 0070                HandlePacket@response 002C  
                 handleFwCmd@packet 0028               __end_of_PwrSensorInit 0FAA  
             __end_of_PwrSensorWake 0C21                         _PwrI2cSleep 0B19  
                      _handleCfgCmd 0BCD                             _AdcInit 0308  
               __size_of_ExtIntInit 0006       __size_of_SoftI2cRepeatedStart 0015  
                handleCfgRead@index 0027                             _CfgLoad 0B27  
                        __stringtab 021A                             _CfgSave 0313  
                    ??_SoftI2cStart 0021           __size_of_CfgGetSizeByType 0012  
                _Mrf49xaAllocPacket 0ED7                    _Mrf49xaModeSleep 026D  
                       _SoftI2cInit 081F                       ?i1_Mrf49RxCmd 0070  
                     ?i1_Mrf49TxCmd 0071                       ?i1_Mrf49SpiRx 0070  
                     ?i1_Mrf49SpiTx 0070                         _SoftI2cStop 0B07  
                     ?i1_Mrf49RxSts 0070                             Sleepy@b 0023  
                      _Mrf49xaTxAck 0BAA                        _Mrf49xaServe 0C45  
                   __size_of_Sleepy 001B                eepromRxBytes@address 0024  
                       _PwrAdcSleep 0E86                 ?_Mrf49xaAllocPacket 0070  
              __size_of_AdcChSelect 0007               __end_of_eepromRxBytes 0A8C  
             __end_of_eepromTxBytes 0A4F                     __size_of_extInt 001C  
                   __size_of_memcpy 0019                   _mrfRegset_InitCnt 021B  
                           __ptext1 0E91                             __ptext2 0E16  
                           __ptext3 0E8B                             __ptext4 0308  
                           __ptext5 0E86                             __ptext6 0FF9  
                           __ptext7 0ED7                             __ptext8 0E51  
                           __ptext9 0E7B                 __size_of_PwrI2cInit 0008  
               __size_of_PwrI2cWake 0001                          _parameters 0259  
                     ?_AdcGetResult 0020                 __size_of_SoftI2cNop 0007  
       RfSendSampleWeatherNode@inst 002C                ??_Mrf49xaAllocPacket 0020  
               __size_of_PwrAdcInit 0009                 __size_of_PwrAdcWake 0006  
                           clrloop0 031C                end_of_initialization 0815  
                           memcpy@d 0023                             memcpy@n 0021  
                           memcpy@s 0024                        ?_Mrf49RxByte 0070  
                      ?_Mrf49TxByte 0070                      ??i1_Mrf49RxCmd 0071  
                    ??i1_Mrf49TxCmd 0072                      ??i1_Mrf49SpiRx 0070  
                    ??i1_Mrf49SpiTx 0070                      ??i1_Mrf49RxSts 0071  
                  ?_Mrf49xaRxPacket 0070                 __size_of_PwrRfSleep 000D  
   __end_of_RfSendSampleWeatherNode 0ED7                    ?_Mrf49xaTxPacket 0020  
                      ?_Mrf49xaInit 0070                __end_of_mrfRegset_Rx 024B  
              __end_of_mrfRegset_Tx 0253                        ?_Mrf49xaTick 0070  
                  ?_Mrf49xaShutdown 0070             handleCfgWrite@nrOfBytes 0026  
            __size_of_SoftI2cRxByte 0039              __size_of_SoftI2cTxByte 002E  
                    i1_Mrf49xaServe 002E           __end_of_mrfRegset_InitCnt 021C  
           __size_of_PwrSensorSleep 0003                   _powerStatusTicker 0036  
                     ??_handleFwCmd 0028                           _PORTAbits 000C  
                         _PORTBbits 000D                     Mrf49xaTick@inst 0031  
                         _PORTCbits 000E                           _AdcDeinit 0FF9  
             __size_of_ExtIntDeinit 0002                           _AdcIsBusy 0E7B  
                      ??_Mrf49RxCmd 0021                        ??_Mrf49TxCmd 0022  
                      ??_Mrf49SpiRx 0020                        ??_Mrf49SpiTx 0020  
                      ??_Mrf49RxSts 0021                           _AdcSample 0E51  
                  __CFG_FOSC$INTOSC 0000                      ??_AdcGetResult 0022  
                    _handleCfgWrite 0BF8                           _TRISAbits 008C  
                         _TRISBbits 008D                           _TRISCbits 008E  
                       AdcSample@ch 0025                      Mrf49SpiRx@data 0020  
                    Mrf49SpiTx@byte 0020                  __end_of_Mrf49RxCmd 0E16  
                __end_of_Mrf49TxCmd 0D62              __end_ofi1_Mrf49xaServe 0116  
                      ??_ExtIntInit 0020                  __end_of_Mrf49SpiRx 0E0C  
                __end_of_Mrf49SpiTx 0DBD                  __end_of_Mrf49RxSts 0DC8  
                      _ExtIntDeinit 0321         __end_ofi1_Mrf49xaNeedsReset 0147  
                    __end_of_Sleepy 0A09                   SoftI2cRxByte@data 0022  
                     __pidataCOMMON 0000                __size_of_Mcp9800Read 0015  
                 eepromRxBytes@data 0026                __end_of_SoftI2cStart 0B07  
          __size_ofi1_Mrf49xaModeRx 0026                          ?_AdcDeinit 0070  
                    __end_of_extInt 0020                      __end_of_memcpy 02EB  
                 eepromRxBytes@size 0027              __end_of_handleCfgWrite 0C14  
                        ?_AdcIsBusy 0070          __end_of_mrfRegset_SleepCnt 021E  
                        ?_AdcSample 0022                         __end_ofPL10 0FD7  
                       __end_ofPL20 0FF4                         __end_ofPL12 0FE3  
                       __end_ofPL22 0FF9                         __end_ofPL14 021A  
                       __end_ofPL16 0FE9                         __end_ofPL18 0FEF  
               start_initialization 0801                       _SoftI2cRxByte 0ABA  
               __end_of_handleFwCmd 02B3                       _SoftI2cTxByte 0A8C  
             Mrf49xaFreePacket@inst 0021                  __end_of_ExtIntInit 0851  
                 SoftI2cTxByte@data 0022                   ?_RfSendPowerState 0070  
                  _CfgGetSizeByType 0F94                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002A  
                ??_RfSendPowerState 0028                        ??_SoftI2cNop 0020  
                          ??_Sleepy 0022                        ??_PwrAdcInit 0020  
                      ??_PwrAdcWake 0020                     ?i1_Mrf49xaServe 0070  
                   _mrfRegset_RxCnt 021C                     _mrfRegset_TxCnt 021E  
                   _mrfRegset_Sleep 0253                           _PwrRfInit 082A  
                         _PwrRfWake 02FB                         __pdataBANK0 0042  
                          ??_extInt 0076                            ??_memcpy 0023  
     __size_of_Mrf49xaPacketPending 0010                   eepromTxBytes@data 0026  
                      ??_PwrRfSleep 0024                   eepromTxBytes@size 0027  
                   ?_handleCfgWrite 0070                   RfSendPowerState@s 0028  
            __size_ofi1_Mrf49RxByte 0003              __size_ofi1_Mrf49TxByte 0005  
          __end_of_Mrf49xaModeSleep 028F                  __end_of_PwrI2cInit 081F  
              __end_ofi1_Mrf49RxCmd 002E                __end_ofi1_Mrf49TxCmd 0151  
                __end_of_PwrI2cWake 0C1E                __end_ofi1_Mrf49SpiRx 0211  
              __end_ofi1_Mrf49SpiTx 01C1                __end_ofi1_Mrf49RxSts 01CE  
                         ___latbits 0001                       __pcstackBANK0 0020  
                    ?_SoftI2cRxByte 0070    __size_of_RfSendSampleWeatherNode 0046  
                    ?_SoftI2cTxByte 0070                   i1Mrf49TxByte@byte 0073  
                      ?_PwrI2cSleep 0070                  __end_of_SoftI2cNop 0AFA  
                          ?_AdcInit 0070                  __end_of_PwrAdcInit 0C1D  
                          ?_CfgLoad 0070                  __end_of_PwrAdcWake 0E91  
                          ?_CfgSave 0070                    HandlePacket@inst 002D  
            __size_of_handleCfgRead 0032                        _rfTrcvStatus 00A0  
                      ?_SoftI2cInit 0070                        ?_SoftI2cStop 0070  
              __size_of_Mrf49RxByte 0002                  __end_of_PwrRfSleep 026C  
              __size_of_Mrf49TxByte 0005                __end_of_AdcGetResult 0000  
      __end_of_SoftI2cRepeatedStart 0A1E                        ?_PwrAdcSleep 0070  
              __size_of_Mrf49xaInit 005F                __size_of_Mrf49xaTick 00D3  
                        ?_PwrRfInit 0070                          ?_PwrRfWake 0070  
                    _PwrSensorSleep 0B1F                       ?_Mcp9800Start 0070  
                         __pstrings 021A                         ??_AdcDeinit 0020  
                       ??_AdcIsBusy 0020                         _handleFwCmd 028F  
                       ??_AdcSample 0024                      __size_of_AdcGo 0002  
            __size_of_Mrf49xaModeRx 0025              __size_of_Mrf49xaModeTx 0024  
                      _mrfRegset_Rx 023F                        _mrfRegset_Tx 024B  
            __size_of_Mrf49xaReboot 0002                   ??i1_Mrf49xaModeRx 0073  
                  __CFG_WDTE$SWDTEN 0000                            _LATAbits 010C  
                          _LATBbits 010D                            _LATCbits 010E  
                     i1_Mrf49RxByte 011B             __end_of_mrfRegset_RxCnt 021D  
                     i1_Mrf49TxByte 0116             __end_of_mrfRegset_TxCnt 021F  
           __end_of_mrfRegset_Sleep 0259                           clear_ram0 031B  
                     ??_AdcChSelect 0020                         _mrf49Status 0040  
                 _Mrf49xaFreePacket 0B22                      Mrf49xaModeRx@k 0023  
                    Mrf49xaModeTx@k 0023              __end_of_PwrSensorSleep 0B22  
             __size_of_SoftI2cStart 000D              __size_of_PwrSensorInit 0004  
            __size_of_PwrSensorWake 0003                       Mrf49RxCmd@cmd 0021  
                ?_Mrf49xaFreePacket 0020                       Mrf49RxCmd@val 0022  
                    ??_Mcp9800Start 0024                       _handleCfgRead 0F62  
                     Mrf49TxCmd@cmd 0022                       Mrf49TxCmd@val 0021  
               handleCfgRead@packet 0028                 ??_Mrf49xaFreePacket 0021  
            Mrf49xaAllocPacket@inst 0020                     ??_SoftI2cRxByte 0021  
                 _Mrf49xaNeedsReset 0B16                     ??_SoftI2cTxByte 0021  
                          _WPUAbits 020C                  ?_Mrf49xaNeedsReset 0070  
       __size_of_Mrf49xaAllocPacket 001D                    __size_of_AdcInit 000B  
                  __size_of_CfgLoad 0008                    __size_of_CfgSave 0008  
               ??_Mrf49xaNeedsReset 0020              __size_of_eepromRxBytes 0024  
                    ?i1_Mrf49RxByte 0070              __size_of_eepromTxBytes 001C  
                      _SoftI2cStart 0AFA                      ?i1_Mrf49TxByte 0070  
         __end_of_Mrf49xaFreePacket 0B27                           extInt@ofw 0077  
                          Sleepy@ms 0020                       _Mrf49xaModeRx 0D34  
                     _Mrf49xaModeTx 0C21                       _Mrf49xaReboot 0306  
                    _mrfRegset_Init 021F                     ?_PwrSensorSleep 0070  
                       ??_PwrRfInit 0027                      ?_handleCfgRead 0070  
                       ??_PwrRfWake 0024            __size_of_Mrf49xaRxPacket 001F  
             __size_ofi1_Mrf49RxCmd 000C               __size_ofi1_Mrf49TxCmd 000A  
             __size_ofi1_Mrf49SpiRx 0043               __size_ofi1_Mrf49SpiTx 0070  
                  i1Mrf49SpiRx@data 0070               __size_ofi1_Mrf49RxSts 000D  
               __end_of_AdcChSelect 0E86            __size_of_Mrf49xaTxPacket 006E  
          __end_of_CfgGetSizeByType 0FA6                    i1Mrf49SpiTx@byte 0070  
                    SoftI2cRxByte@i 0023           __end_of_Mrf49xaNeedsReset 0B19  
                __end_of__stringtab 021B            __size_of_Mrf49xaShutdown 0001  
                    SoftI2cTxByte@i 0023                          _ANSELCbits 018E  
           _RfSendSampleWeatherNode 0E91                       ?_HandlePacket 002A  
                          _coldBoot 0042                            __ptext10 0E79  
                          __ptext11 0000                            __ptext20 026D  
                          __ptext12 0E7F                            __ptext21 082A  
                          __ptext13 0C1E                            __ptext30 0C21  
                          __ptext22 0C1D                            __ptext14 0B1F  
                          __ptext31 098F                            __ptext23 0B19  
                          __ptext15 0FA6                            __ptext40 0E0C  
                          __ptext32 09EE                            __ptext24 0817  
                          __ptext16 02FB                            __ptext41 0D62  
                          __ptext33 0C45                            __ptext25 081F  
                          __ptext17 0306                            __ptext50 0313  
                          __ptext42 0DC8                            __ptext34 0B16  
                          __ptext26 0C14                            __ptext18 025F  
                          __ptext51 0A33                            __ptext43 0B2F  
                          __ptext35 0D34                            __ptext27 08BC  
                          __ptext19 026C                            __ptext60 0A1E  
                          __ptext52 0B27                            __ptext44 028F  
                          __ptext36 0D2D                            __ptext28 02B3  
                          __ptext61 0A8C                            __ptext53 0A68  
                          __ptext45 0BF8                            __ptext37 0D59  
                          __ptext29 02EB                            __ptext70 0116  
                          __ptext62 0B07                            __ptext54 0A09  
                          __ptext46 0F62                            __ptext38 0DBD  
                          __ptext71 0147                            __ptext63 0AFA  
                          __ptext55 0BAA                            __ptext47 02D2  
                          __ptext39 0D32                            __ptext72 01C1  
                          __ptext64 0ABA                            __ptext56 0EF4  
                          __ptext48 0F94                            __ptext73 011B  
                          __ptext65 0AF3                            __ptext57 0B22  
                          __ptext49 0BCD                       _PwrSensorInit 0FA6  
                          __ptext74 0022                            __ptext58 084B  
                          __ptext75 0151                            __ptext67 002E  
                          __ptext59 0A4F                            __ptext76 01CE  
                          __ptext68 0144                            __ptext77 0321  
                          __ptext69 011E                       _PwrSensorWake 0C1E  
              _SoftI2cRepeatedStart 0A09                __size_of_PwrI2cSleep 0006  
             __size_of_AdcGetResult 0000                  _mrfRegset_SleepCnt 021D  
                  Mcp9800Read@tempH 0026                    Mcp9800Read@tempL 0027  
                  ??i1_Mrf49xaServe 0074                       __size_of_main 006B  
          Mrf49xaPacketPending@inst 0020                        i1_Mrf49RxCmd 0022  
            __end_of_mrfRegset_Init 023F                  Mrf49xaTxAck@packet 0028  
                      i1_Mrf49TxCmd 0147                        i1_Mrf49SpiRx 01CE  
                      i1_Mrf49SpiTx 0151                      ?_Mrf49xaModeRx 0070  
                    ?_Mrf49xaModeTx 0070                        i1_Mrf49RxSts 01C1  
                    ?_Mrf49xaReboot 0070                  __end_of_parameters 025F  
              __size_of_SoftI2cInit 000B                __size_of_SoftI2cStop 000F  
               Mrf49xaRxPacket@inst 0020                       ??_Mcp9800Read 0026  
                  ??_handleCfgWrite 0026           __size_of_RfSendPowerState 003B  
              __size_of_PwrAdcSleep 0005                       _eepromRxBytes 0A68  
                 Mrf49xaModeSleep@k 0023                       _eepromTxBytes 0A33  
                   i1Mrf49RxCmd@cmd 0071                     main@temperature 0034  
                   i1Mrf49RxCmd@val 0072                      ??_HandlePacket 002B  
      __size_ofi1_Mrf49xaNeedsReset 0003                  Mrf49xaTick@timeout 002F  
                        _INTCONbits 000B                   ?_Mrf49xaModeSleep 0070  
                   i1Mrf49TxCmd@cmd 0072                     i1Mrf49TxCmd@val 0071  
                          memcpy@d1 0025                            memcpy@s1 0020  
                    ?_PwrSensorInit 0070                        _AdcGetResult 0000  
                    ?_PwrSensorWake 0070                  ??_Mrf49xaModeSleep 0023  
                     ?_handleCfgCmd 0070               ?_SoftI2cRepeatedStart 0070  
                   ??i1_Mrf49RxByte 0073                            intlevel1 0000  
                   ??i1_Mrf49TxByte 0073        __end_of_Mrf49xaPacketPending 02FB  
              __end_of_Mcp9800Start 0A68       RfSendSampleWeatherNode@packet 002D  
                 __CFG_CLKOUTEN$OFF 0000          __size_of_Mrf49xaFreePacket 0005  
            RfSendPowerState@packet 002B                       ?_Mrf49xaTxAck 0028  
                       _AdcChSelect 0E7F                        Mrf49xaInit@k 0026  
                     ?_Mrf49xaServe 0070                     ??_handleCfgRead 0026  
                 Mrf49xaTick@packet 0030                      ?_eepromRxBytes 0024  
              eepromTxBytes@address 0024                     i1_Mrf49xaModeRx 011E  
                    ?_eepromTxBytes 0024           ??_RfSendSampleWeatherNode 002C  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 0A33                   ??_Mrf49xaRxPacket 0020  
                  Mrf49xaTxAck@inst 0029                   ??_Mrf49xaTxPacket 0023  
                    ??_handleCfgCmd 0028                          _WDTCONbits 0097  
                 ??_Mrf49xaShutdown 0024                RfSendPowerState@inst 002A  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0024                      ??_Mrf49xaTxAck 0029  
                  Mrf49xaServe@data 0025                      ??_Mrf49xaServe 0024  
                     ??_Mrf49xaInit 0026                       ??_Mrf49xaTick 002E  
            handleCfgRead@nrOfBytes 0026                    Mrf49xaTxPacket@i 0026  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Mon Apr  7 09:39:52 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	swtext2,local,class=CONST,delta=2
    21                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text46,local,class=CODE,merge=1,delta=2
    23                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	functab,global,reloc=256,class=CODE,delta=2
    25                           	psect	pa_nodes,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0015                     	;# 
    46  0016                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001C                     	;# 
    54  008C                     	;# 
    55  008D                     	;# 
    56  008E                     	;# 
    57  0091                     	;# 
    58  0092                     	;# 
    59  0093                     	;# 
    60  0095                     	;# 
    61  0096                     	;# 
    62  0097                     	;# 
    63  0099                     	;# 
    64  009A                     	;# 
    65  009B                     	;# 
    66  009B                     	;# 
    67  009C                     	;# 
    68  009D                     	;# 
    69  009E                     	;# 
    70  009F                     	;# 
    71  010C                     	;# 
    72  010D                     	;# 
    73  010E                     	;# 
    74  0111                     	;# 
    75  0112                     	;# 
    76  0113                     	;# 
    77  0114                     	;# 
    78  0115                     	;# 
    79  0116                     	;# 
    80  0117                     	;# 
    81  0118                     	;# 
    82  0119                     	;# 
    83  011D                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  018E                     	;# 
    87  0191                     	;# 
    88  0191                     	;# 
    89  0192                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0199                     	;# 
    96  019A                     	;# 
    97  019B                     	;# 
    98  019B                     	;# 
    99  019C                     	;# 
   100  019D                     	;# 
   101  019E                     	;# 
   102  019F                     	;# 
   103  020C                     	;# 
   104  020D                     	;# 
   105  0211                     	;# 
   106  0211                     	;# 
   107  0212                     	;# 
   108  0212                     	;# 
   109  0213                     	;# 
   110  0213                     	;# 
   111  0214                     	;# 
   112  0214                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0215                     	;# 
   116  0216                     	;# 
   117  0216                     	;# 
   118  0217                     	;# 
   119  0217                     	;# 
   120  0391                     	;# 
   121  0392                     	;# 
   122  0393                     	;# 
   123  0394                     	;# 
   124  0395                     	;# 
   125  0396                     	;# 
   126  0498                     	;# 
   127  0498                     	;# 
   128  0499                     	;# 
   129  049A                     	;# 
   130  049B                     	;# 
   131  049B                     	;# 
   132  049C                     	;# 
   133  049E                     	;# 
   134  049F                     	;# 
   135  0611                     	;# 
   136  0612                     	;# 
   137  0613                     	;# 
   138  0613                     	;# 
   139  0614                     	;# 
   140  0615                     	;# 
   141  0616                     	;# 
   142  0616                     	;# 
   143  0617                     	;# 
   144  0618                     	;# 
   145  0619                     	;# 
   146  0619                     	;# 
   147  061A                     	;# 
   148  061B                     	;# 
   149  061C                     	;# 
   150  061C                     	;# 
   151  0691                     	;# 
   152  0692                     	;# 
   153  0693                     	;# 
   154  0694                     	;# 
   155  0695                     	;# 
   156  0F0F                     	;# 
   157  0F10                     	;# 
   158  0F11                     	;# 
   159  0F12                     	;# 
   160  0F13                     	;# 
   161  0F14                     	;# 
   162  0F15                     	;# 
   163  0F16                     	;# 
   164  0F17                     	;# 
   165  0F18                     	;# 
   166  0F19                     	;# 
   167  0F1A                     	;# 
   168  0F1B                     	;# 
   169  0F1C                     	;# 
   170  0F1D                     	;# 
   171  0F1E                     	;# 
   172  0F1F                     	;# 
   173  0F20                     	;# 
   174  0F21                     	;# 
   175  0F22                     	;# 
   176  0F23                     	;# 
   177  0F24                     	;# 
   178  0F25                     	;# 
   179  0F26                     	;# 
   180  0F27                     	;# 
   181  0F28                     	;# 
   182  0F29                     	;# 
   183  0F2A                     	;# 
   184  0F2B                     	;# 
   185  0F2C                     	;# 
   186  0F2D                     	;# 
   187  0F2E                     	;# 
   188  0F2F                     	;# 
   189  0F8C                     	;# 
   190  0F8D                     	;# 
   191  0F91                     	;# 
   192  0F95                     	;# 
   193  0F96                     	;# 
   194  0F97                     	;# 
   195  0F9C                     	;# 
   196  0F9D                     	;# 
   197  0F9E                     	;# 
   198  0FE3                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0015                     	;# 
   229  0016                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001C                     	;# 
   237  008C                     	;# 
   238  008D                     	;# 
   239  008E                     	;# 
   240  0091                     	;# 
   241  0092                     	;# 
   242  0093                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0097                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  0111                     	;# 
   258  0112                     	;# 
   259  0113                     	;# 
   260  0114                     	;# 
   261  0115                     	;# 
   262  0116                     	;# 
   263  0117                     	;# 
   264  0118                     	;# 
   265  0119                     	;# 
   266  011D                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269  018E                     	;# 
   270  0191                     	;# 
   271  0191                     	;# 
   272  0192                     	;# 
   273  0193                     	;# 
   274  0193                     	;# 
   275  0194                     	;# 
   276  0195                     	;# 
   277  0196                     	;# 
   278  0199                     	;# 
   279  019A                     	;# 
   280  019B                     	;# 
   281  019B                     	;# 
   282  019C                     	;# 
   283  019D                     	;# 
   284  019E                     	;# 
   285  019F                     	;# 
   286  020C                     	;# 
   287  020D                     	;# 
   288  0211                     	;# 
   289  0211                     	;# 
   290  0212                     	;# 
   291  0212                     	;# 
   292  0213                     	;# 
   293  0213                     	;# 
   294  0214                     	;# 
   295  0214                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0216                     	;# 
   300  0216                     	;# 
   301  0217                     	;# 
   302  0217                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  0393                     	;# 
   306  0394                     	;# 
   307  0395                     	;# 
   308  0396                     	;# 
   309  0498                     	;# 
   310  0498                     	;# 
   311  0499                     	;# 
   312  049A                     	;# 
   313  049B                     	;# 
   314  049B                     	;# 
   315  049C                     	;# 
   316  049E                     	;# 
   317  049F                     	;# 
   318  0611                     	;# 
   319  0612                     	;# 
   320  0613                     	;# 
   321  0613                     	;# 
   322  0614                     	;# 
   323  0615                     	;# 
   324  0616                     	;# 
   325  0616                     	;# 
   326  0617                     	;# 
   327  0618                     	;# 
   328  0619                     	;# 
   329  0619                     	;# 
   330  061A                     	;# 
   331  061B                     	;# 
   332  061C                     	;# 
   333  061C                     	;# 
   334  0691                     	;# 
   335  0692                     	;# 
   336  0693                     	;# 
   337  0694                     	;# 
   338  0695                     	;# 
   339  0F0F                     	;# 
   340  0F10                     	;# 
   341  0F11                     	;# 
   342  0F12                     	;# 
   343  0F13                     	;# 
   344  0F14                     	;# 
   345  0F15                     	;# 
   346  0F16                     	;# 
   347  0F17                     	;# 
   348  0F18                     	;# 
   349  0F19                     	;# 
   350  0F1A                     	;# 
   351  0F1B                     	;# 
   352  0F1C                     	;# 
   353  0F1D                     	;# 
   354  0F1E                     	;# 
   355  0F1F                     	;# 
   356  0F20                     	;# 
   357  0F21                     	;# 
   358  0F22                     	;# 
   359  0F23                     	;# 
   360  0F24                     	;# 
   361  0F25                     	;# 
   362  0F26                     	;# 
   363  0F27                     	;# 
   364  0F28                     	;# 
   365  0F29                     	;# 
   366  0F2A                     	;# 
   367  0F2B                     	;# 
   368  0F2C                     	;# 
   369  0F2D                     	;# 
   370  0F2E                     	;# 
   371  0F2F                     	;# 
   372  0F8C                     	;# 
   373  0F8D                     	;# 
   374  0F91                     	;# 
   375  0F95                     	;# 
   376  0F96                     	;# 
   377  0F97                     	;# 
   378  0F9C                     	;# 
   379  0F9D                     	;# 
   380  0F9E                     	;# 
   381  0FE3                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000D                     	;# 
   407  000E                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0093                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009E                     	;# 
   436  009F                     	;# 
   437  010C                     	;# 
   438  010D                     	;# 
   439  010E                     	;# 
   440  0111                     	;# 
   441  0112                     	;# 
   442  0113                     	;# 
   443  0114                     	;# 
   444  0115                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  0118                     	;# 
   448  0119                     	;# 
   449  011D                     	;# 
   450  018C                     	;# 
   451  018D                     	;# 
   452  018E                     	;# 
   453  0191                     	;# 
   454  0191                     	;# 
   455  0192                     	;# 
   456  0193                     	;# 
   457  0193                     	;# 
   458  0194                     	;# 
   459  0195                     	;# 
   460  0196                     	;# 
   461  0199                     	;# 
   462  019A                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019C                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019F                     	;# 
   469  020C                     	;# 
   470  020D                     	;# 
   471  0211                     	;# 
   472  0211                     	;# 
   473  0212                     	;# 
   474  0212                     	;# 
   475  0213                     	;# 
   476  0213                     	;# 
   477  0214                     	;# 
   478  0214                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0216                     	;# 
   483  0216                     	;# 
   484  0217                     	;# 
   485  0217                     	;# 
   486  0391                     	;# 
   487  0392                     	;# 
   488  0393                     	;# 
   489  0394                     	;# 
   490  0395                     	;# 
   491  0396                     	;# 
   492  0498                     	;# 
   493  0498                     	;# 
   494  0499                     	;# 
   495  049A                     	;# 
   496  049B                     	;# 
   497  049B                     	;# 
   498  049C                     	;# 
   499  049E                     	;# 
   500  049F                     	;# 
   501  0611                     	;# 
   502  0612                     	;# 
   503  0613                     	;# 
   504  0613                     	;# 
   505  0614                     	;# 
   506  0615                     	;# 
   507  0616                     	;# 
   508  0616                     	;# 
   509  0617                     	;# 
   510  0618                     	;# 
   511  0619                     	;# 
   512  0619                     	;# 
   513  061A                     	;# 
   514  061B                     	;# 
   515  061C                     	;# 
   516  061C                     	;# 
   517  0691                     	;# 
   518  0692                     	;# 
   519  0693                     	;# 
   520  0694                     	;# 
   521  0695                     	;# 
   522  0F0F                     	;# 
   523  0F10                     	;# 
   524  0F11                     	;# 
   525  0F12                     	;# 
   526  0F13                     	;# 
   527  0F14                     	;# 
   528  0F15                     	;# 
   529  0F16                     	;# 
   530  0F17                     	;# 
   531  0F18                     	;# 
   532  0F19                     	;# 
   533  0F1A                     	;# 
   534  0F1B                     	;# 
   535  0F1C                     	;# 
   536  0F1D                     	;# 
   537  0F1E                     	;# 
   538  0F1F                     	;# 
   539  0F20                     	;# 
   540  0F21                     	;# 
   541  0F22                     	;# 
   542  0F23                     	;# 
   543  0F24                     	;# 
   544  0F25                     	;# 
   545  0F26                     	;# 
   546  0F27                     	;# 
   547  0F28                     	;# 
   548  0F29                     	;# 
   549  0F2A                     	;# 
   550  0F2B                     	;# 
   551  0F2C                     	;# 
   552  0F2D                     	;# 
   553  0F2E                     	;# 
   554  0F2F                     	;# 
   555  0F8C                     	;# 
   556  0F8D                     	;# 
   557  0F91                     	;# 
   558  0F95                     	;# 
   559  0F96                     	;# 
   560  0F97                     	;# 
   561  0F9C                     	;# 
   562  0F9D                     	;# 
   563  0F9E                     	;# 
   564  0FE3                     	;# 
   565  0FE4                     	;# 
   566  0FE5                     	;# 
   567  0FE6                     	;# 
   568  0FE7                     	;# 
   569  0FE8                     	;# 
   570  0FE9                     	;# 
   571  0FEA                     	;# 
   572  0FEB                     	;# 
   573  0FED                     	;# 
   574  0FEE                     	;# 
   575  0FEF                     	;# 
   576  0000                     	;# 
   577  0001                     	;# 
   578  0002                     	;# 
   579  0003                     	;# 
   580  0004                     	;# 
   581  0005                     	;# 
   582  0006                     	;# 
   583  0007                     	;# 
   584  0008                     	;# 
   585  0009                     	;# 
   586  000A                     	;# 
   587  000B                     	;# 
   588  000C                     	;# 
   589  000D                     	;# 
   590  000E                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0015                     	;# 
   595  0016                     	;# 
   596  0016                     	;# 
   597  0017                     	;# 
   598  0018                     	;# 
   599  0019                     	;# 
   600  001A                     	;# 
   601  001B                     	;# 
   602  001C                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0095                     	;# 
   610  0096                     	;# 
   611  0097                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  009F                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010E                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0113                     	;# 
   626  0114                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011D                     	;# 
   633  018C                     	;# 
   634  018D                     	;# 
   635  018E                     	;# 
   636  0191                     	;# 
   637  0191                     	;# 
   638  0192                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0199                     	;# 
   645  019A                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  0211                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0212                     	;# 
   658  0213                     	;# 
   659  0213                     	;# 
   660  0214                     	;# 
   661  0214                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  0391                     	;# 
   670  0392                     	;# 
   671  0393                     	;# 
   672  0394                     	;# 
   673  0395                     	;# 
   674  0396                     	;# 
   675  0498                     	;# 
   676  0498                     	;# 
   677  0499                     	;# 
   678  049A                     	;# 
   679  049B                     	;# 
   680  049B                     	;# 
   681  049C                     	;# 
   682  049E                     	;# 
   683  049F                     	;# 
   684  0611                     	;# 
   685  0612                     	;# 
   686  0613                     	;# 
   687  0613                     	;# 
   688  0614                     	;# 
   689  0615                     	;# 
   690  0616                     	;# 
   691  0616                     	;# 
   692  0617                     	;# 
   693  0618                     	;# 
   694  0619                     	;# 
   695  0619                     	;# 
   696  061A                     	;# 
   697  061B                     	;# 
   698  061C                     	;# 
   699  061C                     	;# 
   700  0691                     	;# 
   701  0692                     	;# 
   702  0693                     	;# 
   703  0694                     	;# 
   704  0695                     	;# 
   705  0F0F                     	;# 
   706  0F10                     	;# 
   707  0F11                     	;# 
   708  0F12                     	;# 
   709  0F13                     	;# 
   710  0F14                     	;# 
   711  0F15                     	;# 
   712  0F16                     	;# 
   713  0F17                     	;# 
   714  0F18                     	;# 
   715  0F19                     	;# 
   716  0F1A                     	;# 
   717  0F1B                     	;# 
   718  0F1C                     	;# 
   719  0F1D                     	;# 
   720  0F1E                     	;# 
   721  0F1F                     	;# 
   722  0F20                     	;# 
   723  0F21                     	;# 
   724  0F22                     	;# 
   725  0F23                     	;# 
   726  0F24                     	;# 
   727  0F25                     	;# 
   728  0F26                     	;# 
   729  0F27                     	;# 
   730  0F28                     	;# 
   731  0F29                     	;# 
   732  0F2A                     	;# 
   733  0F2B                     	;# 
   734  0F2C                     	;# 
   735  0F2D                     	;# 
   736  0F2E                     	;# 
   737  0F2F                     	;# 
   738  0F8C                     	;# 
   739  0F8D                     	;# 
   740  0F91                     	;# 
   741  0F95                     	;# 
   742  0F96                     	;# 
   743  0F97                     	;# 
   744  0F9C                     	;# 
   745  0F9D                     	;# 
   746  0F9E                     	;# 
   747  0FE3                     	;# 
   748  0FE4                     	;# 
   749  0FE5                     	;# 
   750  0FE6                     	;# 
   751  0FE7                     	;# 
   752  0FE8                     	;# 
   753  0FE9                     	;# 
   754  0FEA                     	;# 
   755  0FEB                     	;# 
   756  0FED                     	;# 
   757  0FEE                     	;# 
   758  0FEF                     	;# 
   759  0000                     	;# 
   760  0001                     	;# 
   761  0002                     	;# 
   762  0003                     	;# 
   763  0004                     	;# 
   764  0005                     	;# 
   765  0006                     	;# 
   766  0007                     	;# 
   767  0008                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  0011                     	;# 
   775  0012                     	;# 
   776  0013                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  008C                     	;# 
   787  008D                     	;# 
   788  008E                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0093                     	;# 
   792  0095                     	;# 
   793  0096                     	;# 
   794  0097                     	;# 
   795  0099                     	;# 
   796  009A                     	;# 
   797  009B                     	;# 
   798  009B                     	;# 
   799  009C                     	;# 
   800  009D                     	;# 
   801  009E                     	;# 
   802  009F                     	;# 
   803  010C                     	;# 
   804  010D                     	;# 
   805  010E                     	;# 
   806  0111                     	;# 
   807  0112                     	;# 
   808  0113                     	;# 
   809  0114                     	;# 
   810  0115                     	;# 
   811  0116                     	;# 
   812  0117                     	;# 
   813  0118                     	;# 
   814  0119                     	;# 
   815  011D                     	;# 
   816  018C                     	;# 
   817  018D                     	;# 
   818  018E                     	;# 
   819  0191                     	;# 
   820  0191                     	;# 
   821  0192                     	;# 
   822  0193                     	;# 
   823  0193                     	;# 
   824  0194                     	;# 
   825  0195                     	;# 
   826  0196                     	;# 
   827  0199                     	;# 
   828  019A                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019E                     	;# 
   834  019F                     	;# 
   835  020C                     	;# 
   836  020D                     	;# 
   837  0211                     	;# 
   838  0211                     	;# 
   839  0212                     	;# 
   840  0212                     	;# 
   841  0213                     	;# 
   842  0213                     	;# 
   843  0214                     	;# 
   844  0214                     	;# 
   845  0215                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0216                     	;# 
   849  0216                     	;# 
   850  0217                     	;# 
   851  0217                     	;# 
   852  0391                     	;# 
   853  0392                     	;# 
   854  0393                     	;# 
   855  0394                     	;# 
   856  0395                     	;# 
   857  0396                     	;# 
   858  0498                     	;# 
   859  0498                     	;# 
   860  0499                     	;# 
   861  049A                     	;# 
   862  049B                     	;# 
   863  049B                     	;# 
   864  049C                     	;# 
   865  049E                     	;# 
   866  049F                     	;# 
   867  0611                     	;# 
   868  0612                     	;# 
   869  0613                     	;# 
   870  0613                     	;# 
   871  0614                     	;# 
   872  0615                     	;# 
   873  0616                     	;# 
   874  0616                     	;# 
   875  0617                     	;# 
   876  0618                     	;# 
   877  0619                     	;# 
   878  0619                     	;# 
   879  061A                     	;# 
   880  061B                     	;# 
   881  061C                     	;# 
   882  061C                     	;# 
   883  0691                     	;# 
   884  0692                     	;# 
   885  0693                     	;# 
   886  0694                     	;# 
   887  0695                     	;# 
   888  0F0F                     	;# 
   889  0F10                     	;# 
   890  0F11                     	;# 
   891  0F12                     	;# 
   892  0F13                     	;# 
   893  0F14                     	;# 
   894  0F15                     	;# 
   895  0F16                     	;# 
   896  0F17                     	;# 
   897  0F18                     	;# 
   898  0F19                     	;# 
   899  0F1A                     	;# 
   900  0F1B                     	;# 
   901  0F1C                     	;# 
   902  0F1D                     	;# 
   903  0F1E                     	;# 
   904  0F1F                     	;# 
   905  0F20                     	;# 
   906  0F21                     	;# 
   907  0F22                     	;# 
   908  0F23                     	;# 
   909  0F24                     	;# 
   910  0F25                     	;# 
   911  0F26                     	;# 
   912  0F27                     	;# 
   913  0F28                     	;# 
   914  0F29                     	;# 
   915  0F2A                     	;# 
   916  0F2B                     	;# 
   917  0F2C                     	;# 
   918  0F2D                     	;# 
   919  0F2E                     	;# 
   920  0F2F                     	;# 
   921  0F8C                     	;# 
   922  0F8D                     	;# 
   923  0F91                     	;# 
   924  0F95                     	;# 
   925  0F96                     	;# 
   926  0F97                     	;# 
   927  0F9C                     	;# 
   928  0F9D                     	;# 
   929  0F9E                     	;# 
   930  0FE3                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0013                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0093                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  009F                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0111                     	;# 
   990  0112                     	;# 
   991  0113                     	;# 
   992  0114                     	;# 
   993  0115                     	;# 
   994  0116                     	;# 
   995  0117                     	;# 
   996  0118                     	;# 
   997  0119                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0199                     	;# 
  1011  019A                     	;# 
  1012  019B                     	;# 
  1013  019B                     	;# 
  1014  019C                     	;# 
  1015  019D                     	;# 
  1016  019E                     	;# 
  1017  019F                     	;# 
  1018  020C                     	;# 
  1019  020D                     	;# 
  1020  0211                     	;# 
  1021  0211                     	;# 
  1022  0212                     	;# 
  1023  0212                     	;# 
  1024  0213                     	;# 
  1025  0213                     	;# 
  1026  0214                     	;# 
  1027  0214                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0216                     	;# 
  1032  0216                     	;# 
  1033  0217                     	;# 
  1034  0217                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0498                     	;# 
  1042  0498                     	;# 
  1043  0499                     	;# 
  1044  049A                     	;# 
  1045  049B                     	;# 
  1046  049B                     	;# 
  1047  049C                     	;# 
  1048  049E                     	;# 
  1049  049F                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0613                     	;# 
  1054  0614                     	;# 
  1055  0615                     	;# 
  1056  0616                     	;# 
  1057  0616                     	;# 
  1058  0617                     	;# 
  1059  0618                     	;# 
  1060  0619                     	;# 
  1061  0619                     	;# 
  1062  061A                     	;# 
  1063  061B                     	;# 
  1064  061C                     	;# 
  1065  061C                     	;# 
  1066  0691                     	;# 
  1067  0692                     	;# 
  1068  0693                     	;# 
  1069  0694                     	;# 
  1070  0695                     	;# 
  1071  0F0F                     	;# 
  1072  0F10                     	;# 
  1073  0F11                     	;# 
  1074  0F12                     	;# 
  1075  0F13                     	;# 
  1076  0F14                     	;# 
  1077  0F15                     	;# 
  1078  0F16                     	;# 
  1079  0F17                     	;# 
  1080  0F18                     	;# 
  1081  0F19                     	;# 
  1082  0F1A                     	;# 
  1083  0F1B                     	;# 
  1084  0F1C                     	;# 
  1085  0F1D                     	;# 
  1086  0F1E                     	;# 
  1087  0F1F                     	;# 
  1088  0F20                     	;# 
  1089  0F21                     	;# 
  1090  0F22                     	;# 
  1091  0F23                     	;# 
  1092  0F24                     	;# 
  1093  0F25                     	;# 
  1094  0F26                     	;# 
  1095  0F27                     	;# 
  1096  0F28                     	;# 
  1097  0F29                     	;# 
  1098  0F2A                     	;# 
  1099  0F2B                     	;# 
  1100  0F2C                     	;# 
  1101  0F2D                     	;# 
  1102  0F2E                     	;# 
  1103  0F2F                     	;# 
  1104  0F8C                     	;# 
  1105  0F8D                     	;# 
  1106  0F91                     	;# 
  1107  0F95                     	;# 
  1108  0F96                     	;# 
  1109  0F97                     	;# 
  1110  0F9C                     	;# 
  1111  0F9D                     	;# 
  1112  0F9E                     	;# 
  1113  0FE3                     	;# 
  1114  0FE4                     	;# 
  1115  0FE5                     	;# 
  1116  0FE6                     	;# 
  1117  0FE7                     	;# 
  1118  0FE8                     	;# 
  1119  0FE9                     	;# 
  1120  0FEA                     	;# 
  1121  0FEB                     	;# 
  1122  0FED                     	;# 
  1123  0FEE                     	;# 
  1124  0FEF                     	;# 
  1125  0000                     	;# 
  1126  0001                     	;# 
  1127  0002                     	;# 
  1128  0003                     	;# 
  1129  0004                     	;# 
  1130  0005                     	;# 
  1131  0006                     	;# 
  1132  0007                     	;# 
  1133  0008                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  0011                     	;# 
  1141  0012                     	;# 
  1142  0013                     	;# 
  1143  0015                     	;# 
  1144  0016                     	;# 
  1145  0016                     	;# 
  1146  0017                     	;# 
  1147  0018                     	;# 
  1148  0019                     	;# 
  1149  001A                     	;# 
  1150  001B                     	;# 
  1151  001C                     	;# 
  1152  008C                     	;# 
  1153  008D                     	;# 
  1154  008E                     	;# 
  1155  0091                     	;# 
  1156  0092                     	;# 
  1157  0093                     	;# 
  1158  0095                     	;# 
  1159  0096                     	;# 
  1160  0097                     	;# 
  1161  0099                     	;# 
  1162  009A                     	;# 
  1163  009B                     	;# 
  1164  009B                     	;# 
  1165  009C                     	;# 
  1166  009D                     	;# 
  1167  009E                     	;# 
  1168  009F                     	;# 
  1169  010C                     	;# 
  1170  010D                     	;# 
  1171  010E                     	;# 
  1172  0111                     	;# 
  1173  0112                     	;# 
  1174  0113                     	;# 
  1175  0114                     	;# 
  1176  0115                     	;# 
  1177  0116                     	;# 
  1178  0117                     	;# 
  1179  0118                     	;# 
  1180  0119                     	;# 
  1181  011D                     	;# 
  1182  018C                     	;# 
  1183  018D                     	;# 
  1184  018E                     	;# 
  1185  0191                     	;# 
  1186  0191                     	;# 
  1187  0192                     	;# 
  1188  0193                     	;# 
  1189  0193                     	;# 
  1190  0194                     	;# 
  1191  0195                     	;# 
  1192  0196                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019D                     	;# 
  1199  019E                     	;# 
  1200  019F                     	;# 
  1201  020C                     	;# 
  1202  020D                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0391                     	;# 
  1219  0392                     	;# 
  1220  0393                     	;# 
  1221  0394                     	;# 
  1222  0395                     	;# 
  1223  0396                     	;# 
  1224  0498                     	;# 
  1225  0498                     	;# 
  1226  0499                     	;# 
  1227  049A                     	;# 
  1228  049B                     	;# 
  1229  049B                     	;# 
  1230  049C                     	;# 
  1231  049E                     	;# 
  1232  049F                     	;# 
  1233  0611                     	;# 
  1234  0612                     	;# 
  1235  0613                     	;# 
  1236  0613                     	;# 
  1237  0614                     	;# 
  1238  0615                     	;# 
  1239  0616                     	;# 
  1240  0616                     	;# 
  1241  0617                     	;# 
  1242  0618                     	;# 
  1243  0619                     	;# 
  1244  0619                     	;# 
  1245  061A                     	;# 
  1246  061B                     	;# 
  1247  061C                     	;# 
  1248  061C                     	;# 
  1249  0691                     	;# 
  1250  0692                     	;# 
  1251  0693                     	;# 
  1252  0694                     	;# 
  1253  0695                     	;# 
  1254  0F0F                     	;# 
  1255  0F10                     	;# 
  1256  0F11                     	;# 
  1257  0F12                     	;# 
  1258  0F13                     	;# 
  1259  0F14                     	;# 
  1260  0F15                     	;# 
  1261  0F16                     	;# 
  1262  0F17                     	;# 
  1263  0F18                     	;# 
  1264  0F19                     	;# 
  1265  0F1A                     	;# 
  1266  0F1B                     	;# 
  1267  0F1C                     	;# 
  1268  0F1D                     	;# 
  1269  0F1E                     	;# 
  1270  0F1F                     	;# 
  1271  0F20                     	;# 
  1272  0F21                     	;# 
  1273  0F22                     	;# 
  1274  0F23                     	;# 
  1275  0F24                     	;# 
  1276  0F25                     	;# 
  1277  0F26                     	;# 
  1278  0F27                     	;# 
  1279  0F28                     	;# 
  1280  0F29                     	;# 
  1281  0F2A                     	;# 
  1282  0F2B                     	;# 
  1283  0F2C                     	;# 
  1284  0F2D                     	;# 
  1285  0F2E                     	;# 
  1286  0F2F                     	;# 
  1287  0F8C                     	;# 
  1288  0F8D                     	;# 
  1289  0F91                     	;# 
  1290  0F95                     	;# 
  1291  0F96                     	;# 
  1292  0F97                     	;# 
  1293  0F9C                     	;# 
  1294  0F9D                     	;# 
  1295  0F9E                     	;# 
  1296  0FE3                     	;# 
  1297  0FE4                     	;# 
  1298  0FE5                     	;# 
  1299  0FE6                     	;# 
  1300  0FE7                     	;# 
  1301  0FE8                     	;# 
  1302  0FE9                     	;# 
  1303  0FEA                     	;# 
  1304  0FEB                     	;# 
  1305  0FED                     	;# 
  1306  0FEE                     	;# 
  1307  0FEF                     	;# 
  1308  0000                     	;# 
  1309  0001                     	;# 
  1310  0002                     	;# 
  1311  0003                     	;# 
  1312  0004                     	;# 
  1313  0005                     	;# 
  1314  0006                     	;# 
  1315  0007                     	;# 
  1316  0008                     	;# 
  1317  0009                     	;# 
  1318  000A                     	;# 
  1319  000B                     	;# 
  1320  000C                     	;# 
  1321  000D                     	;# 
  1322  000E                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0013                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0111                     	;# 
  1356  0112                     	;# 
  1357  0113                     	;# 
  1358  0114                     	;# 
  1359  0115                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  0118                     	;# 
  1363  0119                     	;# 
  1364  011D                     	;# 
  1365  018C                     	;# 
  1366  018D                     	;# 
  1367  018E                     	;# 
  1368  0191                     	;# 
  1369  0191                     	;# 
  1370  0192                     	;# 
  1371  0193                     	;# 
  1372  0193                     	;# 
  1373  0194                     	;# 
  1374  0195                     	;# 
  1375  0196                     	;# 
  1376  0199                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019E                     	;# 
  1383  019F                     	;# 
  1384  020C                     	;# 
  1385  020D                     	;# 
  1386  0211                     	;# 
  1387  0211                     	;# 
  1388  0212                     	;# 
  1389  0212                     	;# 
  1390  0213                     	;# 
  1391  0213                     	;# 
  1392  0214                     	;# 
  1393  0214                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0216                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0217                     	;# 
  1401  0391                     	;# 
  1402  0392                     	;# 
  1403  0393                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  0498                     	;# 
  1408  0498                     	;# 
  1409  0499                     	;# 
  1410  049A                     	;# 
  1411  049B                     	;# 
  1412  049B                     	;# 
  1413  049C                     	;# 
  1414  049E                     	;# 
  1415  049F                     	;# 
  1416  0611                     	;# 
  1417  0612                     	;# 
  1418  0613                     	;# 
  1419  0613                     	;# 
  1420  0614                     	;# 
  1421  0615                     	;# 
  1422  0616                     	;# 
  1423  0616                     	;# 
  1424  0617                     	;# 
  1425  0618                     	;# 
  1426  0619                     	;# 
  1427  0619                     	;# 
  1428  061A                     	;# 
  1429  061B                     	;# 
  1430  061C                     	;# 
  1431  061C                     	;# 
  1432  0691                     	;# 
  1433  0692                     	;# 
  1434  0693                     	;# 
  1435  0694                     	;# 
  1436  0695                     	;# 
  1437  0F0F                     	;# 
  1438  0F10                     	;# 
  1439  0F11                     	;# 
  1440  0F12                     	;# 
  1441  0F13                     	;# 
  1442  0F14                     	;# 
  1443  0F15                     	;# 
  1444  0F16                     	;# 
  1445  0F17                     	;# 
  1446  0F18                     	;# 
  1447  0F19                     	;# 
  1448  0F1A                     	;# 
  1449  0F1B                     	;# 
  1450  0F1C                     	;# 
  1451  0F1D                     	;# 
  1452  0F1E                     	;# 
  1453  0F1F                     	;# 
  1454  0F20                     	;# 
  1455  0F21                     	;# 
  1456  0F22                     	;# 
  1457  0F23                     	;# 
  1458  0F24                     	;# 
  1459  0F25                     	;# 
  1460  0F26                     	;# 
  1461  0F27                     	;# 
  1462  0F28                     	;# 
  1463  0F29                     	;# 
  1464  0F2A                     	;# 
  1465  0F2B                     	;# 
  1466  0F2C                     	;# 
  1467  0F2D                     	;# 
  1468  0F2E                     	;# 
  1469  0F2F                     	;# 
  1470  0F8C                     	;# 
  1471  0F8D                     	;# 
  1472  0F91                     	;# 
  1473  0F95                     	;# 
  1474  0F96                     	;# 
  1475  0F97                     	;# 
  1476  0F9C                     	;# 
  1477  0F9D                     	;# 
  1478  0F9E                     	;# 
  1479  0FE3                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0011                     	;# 
  1507  0012                     	;# 
  1508  0013                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0093                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  009F                     	;# 
  1535  010C                     	;# 
  1536  010D                     	;# 
  1537  010E                     	;# 
  1538  0111                     	;# 
  1539  0112                     	;# 
  1540  0113                     	;# 
  1541  0114                     	;# 
  1542  0115                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  0118                     	;# 
  1546  0119                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020C                     	;# 
  1568  020D                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0391                     	;# 
  1585  0392                     	;# 
  1586  0393                     	;# 
  1587  0394                     	;# 
  1588  0395                     	;# 
  1589  0396                     	;# 
  1590  0498                     	;# 
  1591  0498                     	;# 
  1592  0499                     	;# 
  1593  049A                     	;# 
  1594  049B                     	;# 
  1595  049B                     	;# 
  1596  049C                     	;# 
  1597  049E                     	;# 
  1598  049F                     	;# 
  1599  0611                     	;# 
  1600  0612                     	;# 
  1601  0613                     	;# 
  1602  0613                     	;# 
  1603  0614                     	;# 
  1604  0615                     	;# 
  1605  0616                     	;# 
  1606  0616                     	;# 
  1607  0617                     	;# 
  1608  0618                     	;# 
  1609  0619                     	;# 
  1610  0619                     	;# 
  1611  061A                     	;# 
  1612  061B                     	;# 
  1613  061C                     	;# 
  1614  061C                     	;# 
  1615  0691                     	;# 
  1616  0692                     	;# 
  1617  0693                     	;# 
  1618  0694                     	;# 
  1619  0695                     	;# 
  1620  0F0F                     	;# 
  1621  0F10                     	;# 
  1622  0F11                     	;# 
  1623  0F12                     	;# 
  1624  0F13                     	;# 
  1625  0F14                     	;# 
  1626  0F15                     	;# 
  1627  0F16                     	;# 
  1628  0F17                     	;# 
  1629  0F18                     	;# 
  1630  0F19                     	;# 
  1631  0F1A                     	;# 
  1632  0F1B                     	;# 
  1633  0F1C                     	;# 
  1634  0F1D                     	;# 
  1635  0F1E                     	;# 
  1636  0F1F                     	;# 
  1637  0F20                     	;# 
  1638  0F21                     	;# 
  1639  0F22                     	;# 
  1640  0F23                     	;# 
  1641  0F24                     	;# 
  1642  0F25                     	;# 
  1643  0F26                     	;# 
  1644  0F27                     	;# 
  1645  0F28                     	;# 
  1646  0F29                     	;# 
  1647  0F2A                     	;# 
  1648  0F2B                     	;# 
  1649  0F2C                     	;# 
  1650  0F2D                     	;# 
  1651  0F2E                     	;# 
  1652  0F2F                     	;# 
  1653  0F8C                     	;# 
  1654  0F8D                     	;# 
  1655  0F91                     	;# 
  1656  0F95                     	;# 
  1657  0F96                     	;# 
  1658  0F97                     	;# 
  1659  0F9C                     	;# 
  1660  0F9D                     	;# 
  1661  0F9E                     	;# 
  1662  0FE3                     	;# 
  1663  0FE4                     	;# 
  1664  0FE5                     	;# 
  1665  0FE6                     	;# 
  1666  0FE7                     	;# 
  1667  0FE8                     	;# 
  1668  0FE9                     	;# 
  1669  0FEA                     	;# 
  1670  0FEB                     	;# 
  1671  0FED                     	;# 
  1672  0FEE                     	;# 
  1673  0FEF                     	;# 
  1674                           
  1675                           	psect	idataBANK0
  1676  0000                     __pidataBANK0:	
  1677  000B                     _INTCONbits	set	11
  1678  000C                     _PORTAbits	set	12
  1679  000E                     _PORTCbits	set	14
  1680  009D                     _ADCON0	set	157
  1681  009E                     _ADCON1	set	158
  1682  009F                     _ADCON2	set	159
  1683  0095                     _OPTION_REGbits	set	149
  1684  0099                     _OSCCON	set	153
  1685  008C                     _TRISAbits	set	140
  1686  008D                     _TRISBbits	set	141
  1687  008E                     _TRISCbits	set	142
  1688  0117                     _FVRCON	set	279
  1689  010C                     _LATAbits	set	268
  1690  010D                     _LATBbits	set	269
  1691  010E                     _LATCbits	set	270
  1692  018C                     _ANSELA	set	396
  1693  018D                     _ANSELB	set	397
  1694  018E                     _ANSELC	set	398
  1695  020C                     _WPUAbits	set	524
  1696                           
  1697                           	psect	bssBANK0
  1698  0020                     __pbssBANK0:	
  1699  0020                     _rfStatus:	
  1700  0020                     	ds	4
  1701  0024                     RfHalTickRxTh@packet:	
  1702  0024                     	ds	1
  1703  0025                     RfHalTickRxTh@pktRxByteIndex:	
  1704  0025                     	ds	1
  1705  0026                     RfHalTickRxTh@rxByteTimeout:	
  1706  0026                     	ds	1
  1707  0027                     RfPacketsTickTh@packet:	
  1708  0027                     	ds	1
  1709  0028                     RfPacketsTickTh@timeout:	
  1710  0028                     	ds	1
  1711  0029                     _dl1:	
  1712  0029                     	ds	1
  1713  002A                     _dl2:	
  1714  002A                     	ds	1
  1715  002B                     _isr:	
  1716  002B                     	ds	1
  1717  002C                     _rfPk:	
  1718  002C                     	ds	1
  1719  002D                     _rfPkCrc:	
  1720  002D                     	ds	1
  1721  002E                     _rfPkResets:	
  1722  002E                     	ds	1
  1723  002F                     _rfPkTime:	
  1724  002F                     	ds	1
  1725  0030                     _worried:	
  1726  0030                     	ds	1
  1727  0031                     _halPkTh:	
  1728  0031                     	ds	2
  1729  0033                     _halRxBfTh:	
  1730  0033                     	ds	2
  1731  0035                     _halTxBfTh:	
  1732  0035                     	ds	2
  1733  0037                     _rfTrcvStatus:	
  1734  0037                     	ds	2
  1735                           
  1736                           	psect	dataBANK0
  1737  0044                     __pdataBANK0:	
  1738  0044                     _rfRxCC:	
  1739  0044                     	ds	4
  1740                           
  1741                           	psect	bssBANK1
  1742  00A0                     __pbssBANK1:	
  1743  00A0                     _rfPackets:	
  1744  00A0                     	ds	56
  1745                           
  1746                           	psect	bssBANK2
  1747  0120                     __pbssBANK2:	
  1748  0120                     _rfRxBf:	
  1749  0120                     	ds	48
  1750                           
  1751                           	psect	clrtext
  1752  0105                     clear_ram0:	
  1753                           ;	Called with FSR0 containing the base address, and
  1754                           ;	WREG with the size to clear
  1755                           
  1756  0105  0064               	clrwdt	;clear the watchdog before getting into this loop
  1757  0106                     clrloop0:	
  1758  0106  0180               	clrf	0	;clear RAM location pointed to by FSR
  1759  0107  3101               	addfsr 0,1
  1760  0108  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1761  0109  2906               	goto	clrloop0	;have we reached the end yet?
  1762  010A  3400               	retlw	0	;all done for this memory range, return
  1763                           
  1764                           	psect	cstackCOMMON
  1765  0070                     __pcstackCOMMON:	
  1766  0070                     ?_SPI_Write:	
  1767  0070                     ?__CCBufInit:	
  1768                           ; 0 bytes @ 0x0
  1769                           
  1770  0070                     ?_RfTrcvMode:	
  1771                           ; 0 bytes @ 0x0
  1772                           
  1773  0070                     ?_RfHalGetReturn:	
  1774                           ; 0 bytes @ 0x0
  1775                           
  1776  0070                     ?__CCBufRdReverse:	
  1777                           ; 0 bytes @ 0x0
  1778                           
  1779  0070                     ?__CCBufWrByte:	
  1780                           ; 0 bytes @ 0x0
  1781                           
  1782  0070                     ?__CCBufReset:	
  1783                           ; 0 bytes @ 0x0
  1784                           
  1785  0070                     ?_AdcInit:	
  1786                           ; 0 bytes @ 0x0
  1787                           
  1788  0070                     ?_ExtIntInit:	
  1789                           ; 0 bytes @ 0x0
  1790                           
  1791  0070                     ?_extInt:	
  1792                           ; 0 bytes @ 0x0
  1793                           
  1794  0070                     ?_RfTrcvPut:	
  1795                           ; 0 bytes @ 0x0
  1796                           
  1797  0070                     ?_RfTrcvStatus:	
  1798                           ; 0 bytes @ 0x0
  1799                           
  1800  0070                     ?_RfTrcvSetup:	
  1801                           ; 0 bytes @ 0x0
  1802                           
  1803  0070                     ?_MRF49XAInit:	
  1804                           ; 0 bytes @ 0x0
  1805                           
  1806  0070                     ?_RfHalInit:	
  1807                           ; 0 bytes @ 0x0
  1808                           
  1809  0070                     ?_RfHalStatemachine:	
  1810                           ; 0 bytes @ 0x0
  1811                           
  1812  0070                     ?_RfPacketsHandleClient:	
  1813                           ; 0 bytes @ 0x0
  1814                           
  1815  0070                     ?_SysInitGpio:	
  1816                           ; 0 bytes @ 0x0
  1817                           
  1818  0070                     ?_main:	
  1819                           ; 0 bytes @ 0x0
  1820                           
  1821  0070                     ?i1_RfTrcvPut:	
  1822                           ; 0 bytes @ 0x0
  1823                           
  1824  0070                     ?i1_RfTrcvStatus:	
  1825                           ; 0 bytes @ 0x0
  1826                           
  1827  0070                     ?i1_RfTrcvSetup:	
  1828                           ; 0 bytes @ 0x0
  1829                           
  1830  0070                     ??i1_SPI_Read:	
  1831                           ; 0 bytes @ 0x0
  1832                           
  1833  0070                     ?i1_SPI_Write:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0070                     ??i1_SPI_Write:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0070                     ?i1_RfTrcvMode:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0070                     ?i1_RfHalStatemachine:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0070                     ??i1__CCBufCanWr:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0070                     ?i1__CCBufWrByte:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  0070                     ?_mrf49XaIsr:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0070                     ?_SPI_Read:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0070                     ?_RfHalTxGet:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0070                     ?_RfHalAnyFree:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0070                     ?_RfHalGetFree:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0070                     ?__CCBufCanRd:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0070                     ?__CCBufRdByte:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0070                     ?_RfHalRxPut:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0070                     ?_RfTrcvGet:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0070                     ?_RfTrcvCarrierPresent:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0070                     ?_RfHalTickTxTh:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0070                     ?_RfHalTickRxTh:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0070                     ?_RfHalRxGet:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890  0070                     ?_RfPacketsTickTh:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0070                     ?__CCBufCanWr:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0070                     ?i1_RfTrcvGet:	
  1897                           ; 1 bytes @ 0x0
  1898                           
  1899  0070                     ?i1_RfTrcvCrcTick:	
  1900                           ; 1 bytes @ 0x0
  1901                           
  1902  0070                     ?i1_SPI_Read:	
  1903                           ; 1 bytes @ 0x0
  1904                           
  1905  0070                     ?i1__CCBufCalcPt:	
  1906                           ; 1 bytes @ 0x0
  1907                           
  1908  0070                     ?i1__CCBufCanWr:	
  1909                           ; 1 bytes @ 0x0
  1910                           
  1911  0070                     ?i1_mrf49XaIsr:	
  1912                           ; 1 bytes @ 0x0
  1913                           
  1914  0070                     i1RfTrcvCrcTick@data:	
  1915                           ; 1 bytes @ 0x0
  1916                           
  1917  0070                     i1SPI_Read@data:	
  1918                           ; 1 bytes @ 0x0
  1919                           
  1920  0070                     i1SPI_Write@data:	
  1921                           ; 1 bytes @ 0x0
  1922                           
  1923  0070                     i1__CCBufCalcPt@move:	
  1924                           ; 1 bytes @ 0x0
  1925                           
  1926                           
  1927                           ; 1 bytes @ 0x0
  1928  0070                     	ds	1
  1929  0071                     ??i1_RfTrcvGet:	
  1930  0071                     ?i1_MRF49XACommand:	
  1931                           ; 0 bytes @ 0x1
  1932                           
  1933  0071                     ??i1_RfTrcvStatus:	
  1934                           ; 0 bytes @ 0x1
  1935                           
  1936  0071                     ??i1_RfTrcvCrcTick:	
  1937                           ; 0 bytes @ 0x1
  1938                           
  1939  0071                     ??i1__CCBufCalcPt:	
  1940                           ; 0 bytes @ 0x1
  1941                           
  1942  0071                     i1RfTrcvGet@b:	
  1943                           ; 0 bytes @ 0x1
  1944                           
  1945  0071                     i1RfTrcvCrcTick@initial:	
  1946                           ; 1 bytes @ 0x1
  1947                           
  1948  0071                     i1__CCBufCalcPt@entry:	
  1949                           ; 1 bytes @ 0x1
  1950                           
  1951  0071                     i1MRF49XACommand@cmd:	
  1952                           ; 1 bytes @ 0x1
  1953                           
  1954                           
  1955                           ; 2 bytes @ 0x1
  1956  0071                     	ds	1
  1957  0072                     i1__CCBufCalcPt@result:	
  1958                           
  1959                           ; 1 bytes @ 0x2
  1960  0072                     	ds	1
  1961  0073                     ??i1_RfTrcvPut:	
  1962  0073                     ??i1_MRF49XACommand:	
  1963                           ; 0 bytes @ 0x3
  1964                           
  1965  0073                     ??i1__CCBufWrByte:	
  1966                           ; 0 bytes @ 0x3
  1967                           
  1968  0073                     i1RfTrcvPut@byte:	
  1969                           ; 0 bytes @ 0x3
  1970                           
  1971                           
  1972                           ; 1 bytes @ 0x3
  1973  0073                     	ds	1
  1974  0074                     ??i1_RfTrcvSetup:	
  1975  0074                     i1RfTrcvSetup@tx:	
  1976                           ; 0 bytes @ 0x4
  1977                           
  1978  0074                     i1__CCBufWrByte@data:	
  1979                           ; 1 bytes @ 0x4
  1980                           
  1981                           
  1982                           ; 1 bytes @ 0x4
  1983  0074                     	ds	1
  1984  0075                     ??i1_RfTrcvMode:	
  1985  0075                     i1RfTrcvMode@tx:	
  1986                           ; 0 bytes @ 0x5
  1987                           
  1988                           
  1989                           ; 1 bytes @ 0x5
  1990  0075                     	ds	1
  1991  0076                     ??i1_RfHalStatemachine:	
  1992                           
  1993                           ; 0 bytes @ 0x6
  1994  0076                     	ds	1
  1995  0077                     ??_mrf49XaIsr:	
  1996  0077                     ??_MRF49XACommand:	
  1997                           ; 0 bytes @ 0x7
  1998                           
  1999  0077                     ??_SPI_Write:	
  2000                           ; 0 bytes @ 0x7
  2001                           
  2002  0077                     ??_SPI_Read:	
  2003                           ; 0 bytes @ 0x7
  2004                           
  2005  0077                     ??__CCBufInit:	
  2006                           ; 0 bytes @ 0x7
  2007                           
  2008  0077                     ??_RfTrcvMode:	
  2009                           ; 0 bytes @ 0x7
  2010                           
  2011  0077                     ??_RfHalTxGet:	
  2012                           ; 0 bytes @ 0x7
  2013                           
  2014  0077                     ??_RfHalGetReturn:	
  2015                           ; 0 bytes @ 0x7
  2016                           
  2017  0077                     ??_RfHalAnyFree:	
  2018                           ; 0 bytes @ 0x7
  2019                           
  2020  0077                     ??_RfHalGetFree:	
  2021                           ; 0 bytes @ 0x7
  2022                           
  2023  0077                     ??__CCBufCanRd:	
  2024                           ; 0 bytes @ 0x7
  2025                           
  2026  0077                     ??__CCBufRdReverse:	
  2027                           ; 0 bytes @ 0x7
  2028                           
  2029  0077                     ??_RfHalRxPut:	
  2030                           ; 0 bytes @ 0x7
  2031                           
  2032  0077                     ??_AdcInit:	
  2033                           ; 0 bytes @ 0x7
  2034                           
  2035  0077                     ??_ExtIntInit:	
  2036                           ; 0 bytes @ 0x7
  2037                           
  2038  0077                     ??_extInt:	
  2039                           ; 0 bytes @ 0x7
  2040                           
  2041  0077                     ??_RfTrcvPut:	
  2042                           ; 0 bytes @ 0x7
  2043                           
  2044  0077                     ??_RfTrcvGet:	
  2045                           ; 0 bytes @ 0x7
  2046                           
  2047  0077                     ??_RfTrcvStatus:	
  2048                           ; 0 bytes @ 0x7
  2049                           
  2050  0077                     ??_RfTrcvCarrierPresent:	
  2051                           ; 0 bytes @ 0x7
  2052                           
  2053  0077                     ??_RfTrcvCrcTick:	
  2054                           ; 0 bytes @ 0x7
  2055                           
  2056  0077                     ??_RfTrcvSetup:	
  2057                           ; 0 bytes @ 0x7
  2058                           
  2059  0077                     ??_MRF49XAInit:	
  2060                           ; 0 bytes @ 0x7
  2061                           
  2062  0077                     ??_RfHalInit:	
  2063                           ; 0 bytes @ 0x7
  2064                           
  2065  0077                     ??_RfHalRxGet:	
  2066                           ; 0 bytes @ 0x7
  2067                           
  2068  0077                     ??_RfPacketSimpleReply:	
  2069                           ; 0 bytes @ 0x7
  2070                           
  2071  0077                     ??_RfPacketsHandleClient:	
  2072                           ; 0 bytes @ 0x7
  2073                           
  2074  0077                     ??__CCBufCalcPt:	
  2075                           ; 0 bytes @ 0x7
  2076                           
  2077  0077                     ??__CCBufCanWr:	
  2078                           ; 0 bytes @ 0x7
  2079                           
  2080  0077                     ??_SysInitGpio:	
  2081                           ; 0 bytes @ 0x7
  2082                           
  2083  0077                     ??_main:	
  2084                           ; 0 bytes @ 0x7
  2085                           
  2086  0077                     ??___bmul:	
  2087                           ; 0 bytes @ 0x7
  2088                           
  2089  0077                     ??i1_mrf49XaIsr:	
  2090                           ; 0 bytes @ 0x7
  2091                           
  2092                           
  2093                           	psect	cstackBANK0
  2094  0039                     __pcstackBANK0:	
  2095                           ; 0 bytes @ 0x7
  2096                           
  2097  0039                     ??__CCBufReset:	
  2098  0039                     ?_RfTrcvCrcTick:	
  2099                           ; 0 bytes @ 0x0
  2100                           
  2101  0039                     ?_RfHalTxPut:	
  2102                           ; 1 bytes @ 0x0
  2103                           
  2104  0039                     ?__CCBufCalcPt:	
  2105                           ; 1 bytes @ 0x0
  2106                           
  2107  0039                     ?___bmul:	
  2108                           ; 1 bytes @ 0x0
  2109                           
  2110  0039                     RfTrcvCrcTick@data:	
  2111                           ; 1 bytes @ 0x0
  2112                           
  2113  0039                     SPI_Read@data:	
  2114                           ; 1 bytes @ 0x0
  2115                           
  2116  0039                     SPI_Write@data:	
  2117                           ; 1 bytes @ 0x0
  2118                           
  2119  0039                     RfHalGetReturn@packet:	
  2120                           ; 1 bytes @ 0x0
  2121                           
  2122  0039                     RfHalRxPut@packet:	
  2123                           ; 1 bytes @ 0x0
  2124                           
  2125  0039                     RfHalTxPut@needAck:	
  2126                           ; 1 bytes @ 0x0
  2127                           
  2128  0039                     __CCBufCalcPt@move:	
  2129                           ; 1 bytes @ 0x0
  2130                           
  2131  0039                     ___bmul@multiplicand:	
  2132                           ; 1 bytes @ 0x0
  2133                           
  2134                           
  2135                           ; 1 bytes @ 0x0
  2136  0039                     	ds	1
  2137  003A                     ?_MRF49XACommand:	
  2138  003A                     ??_RfHalTxPut:	
  2139                           ; 0 bytes @ 0x1
  2140                           
  2141  003A                     RfTrcvGet@b:	
  2142                           ; 0 bytes @ 0x1
  2143                           
  2144  003A                     RfTrcvCrcTick@initial:	
  2145                           ; 1 bytes @ 0x1
  2146                           
  2147  003A                     __CCBufReset@i:	
  2148                           ; 1 bytes @ 0x1
  2149                           
  2150  003A                     __CCBufCalcPt@entry:	
  2151                           ; 1 bytes @ 0x1
  2152                           
  2153  003A                     ___bmul@product:	
  2154                           ; 1 bytes @ 0x1
  2155                           
  2156  003A                     MRF49XACommand@cmd:	
  2157                           ; 1 bytes @ 0x1
  2158                           
  2159                           
  2160                           ; 2 bytes @ 0x1
  2161  003A                     	ds	1
  2162  003B                     RfHalTxPut@packet:	
  2163  003B                     __CCBufCalcPt@result:	
  2164                           ; 1 bytes @ 0x2
  2165                           
  2166  003B                     ___bmul@multiplier:	
  2167                           ; 1 bytes @ 0x2
  2168                           
  2169                           
  2170                           ; 1 bytes @ 0x2
  2171  003B                     	ds	1
  2172  003C                     ??__CCBufRdByte:	
  2173  003C                     ??__CCBufWrByte:	
  2174                           ; 0 bytes @ 0x3
  2175                           
  2176  003C                     ?_RfPacketSimpleReply:	
  2177                           ; 0 bytes @ 0x3
  2178                           
  2179  003C                     RfTrcvPut@byte:	
  2180                           ; 0 bytes @ 0x3
  2181                           
  2182  003C                     RfHalTxGet@i:	
  2183                           ; 1 bytes @ 0x3
  2184                           
  2185  003C                     RfPacketSimpleReply@msg:	
  2186                           ; 1 bytes @ 0x3
  2187                           
  2188  003C                     __CCBufRdReverse@qty:	
  2189                           ; 1 bytes @ 0x3
  2190                           
  2191                           
  2192                           ; 1 bytes @ 0x3
  2193  003C                     	ds	1
  2194  003D                     RfTrcvSetup@tx:	
  2195  003D                     RfPacketSimpleReply@needAck:	
  2196                           ; 1 bytes @ 0x4
  2197                           
  2198  003D                     __CCBufRdByte@res:	
  2199                           ; 1 bytes @ 0x4
  2200                           
  2201  003D                     __CCBufWrByte@data:	
  2202                           ; 1 bytes @ 0x4
  2203                           
  2204                           
  2205                           ; 1 bytes @ 0x4
  2206  003D                     	ds	1
  2207  003E                     ??_RfHalTickRxTh:	
  2208  003E                     MRF49XAInit@i:	
  2209                           ; 0 bytes @ 0x5
  2210                           
  2211  003E                     RfTrcvMode@tx:	
  2212                           ; 1 bytes @ 0x5
  2213                           
  2214  003E                     RfPacketSimpleReply@nodeTmp:	
  2215                           ; 1 bytes @ 0x5
  2216                           
  2217                           
  2218                           ; 1 bytes @ 0x5
  2219  003E                     	ds	1
  2220  003F                     ??_RfHalTickTxTh:	
  2221  003F                     ??_RfHalStatemachine:	
  2222                           ; 0 bytes @ 0x6
  2223                           
  2224  003F                     MRF49XAInit@j:	
  2225                           ; 0 bytes @ 0x6
  2226                           
  2227  003F                     RfHalInit@i:	
  2228                           ; 1 bytes @ 0x6
  2229                           
  2230  003F                     RfPacketSimpleReply@packet:	
  2231                           ; 1 bytes @ 0x6
  2232                           
  2233                           
  2234                           ; 1 bytes @ 0x6
  2235  003F                     	ds	1
  2236  0040                     RfHalTickRxTh@pktLength:	
  2237  0040                     RfPacketsHandleClient@packet:	
  2238                           ; 1 bytes @ 0x7
  2239                           
  2240                           
  2241                           ; 1 bytes @ 0x7
  2242  0040                     	ds	1
  2243  0041                     ??_RfPacketsTickTh:	
  2244  0041                     RfHalTickTxTh@pt:	
  2245                           ; 0 bytes @ 0x8
  2246                           
  2247  0041                     RfHalTickRxTh@pt:	
  2248                           ; 1 bytes @ 0x8
  2249                           
  2250                           
  2251                           ; 1 bytes @ 0x8
  2252  0041                     	ds	2
  2253  0043                     RfPacketsTickTh@pt:	
  2254                           
  2255                           ; 1 bytes @ 0xA
  2256  0043                     	ds	1
  2257                           
  2258                           	psect	swtext1
  2259  000F                     __pswtext1:	
  2260  000F                     S3554:	
  2261  000F  318A  2AB2         	ljmp	l2996
  2262  0011  318A  2AB7         	ljmp	l2998
  2263  0013  318A  2AB5         	ljmp	l3000
  2264  0015  318A  2ABA         	ljmp	l3004
  2265  0017  318A  2ABC         	ljmp	l3008
  2266  0019  318A  2ABE         	ljmp	l3012
  2267  001B  318A  2AC1         	ljmp	l3016
  2268  001D  318A  2AE7         	ljmp	l3026
  2269  001F  318A  2AED         	ljmp	l3030
  2270  0021  318A  2AED         	ljmp	l3030
  2271  0023  318A  2AEF         	ljmp	l3034
  2272                           
  2273                           	psect	text4
  2274  0000                     __ptext4:	
  2275 ;; *************** function __CCBufCanWr *****************
  2276 ;; Defined at:
  2277 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      unsigned char 
  2284 ;; Registers used:
  2285 ;;		wreg
  2286 ;; Tracked objects:
  2287 ;;		On entry : 1F/0
  2288 ;;		On exit  : 1F/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2291 ;;      Params:         0       0       0       0
  2292 ;;      Locals:         0       0       0       0
  2293 ;;      Temps:          0       0       0       0
  2294 ;;      Totals:         0       0       0       0
  2295 ;;Total ram usage:        0 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    8
  2298 ;; This function calls:
  2299 ;;		Nothing
  2300 ;; This function is called by:
  2301 ;;		__CCBufWrByte
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305  0000                     __CCBufCanWr:	
  2306                           ;psect for function __CCBufCanWr
  2307                           
  2308  0000                     __end_of__CCBufCanWr:	
  2309                           ;ccbuf_static.c: 37: else return 1;
  2310                           
  2311                           ;incstack = 0
  2312                           ; Regs used in __CCBufCanWr: [wreg]
  2313                           
  2314                           
  2315                           	psect	text19
  2316  0000                     __ptext19:	
  2317 ;; *************** function __CCBufRdReverse *****************
  2318 ;; Defined at:
  2319 ;;		line 41 in file "../../../src/utilities/ccbuf_static.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  qty             1    wreg     unsigned char 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  qty             1    3[BANK0 ] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0, pclath, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 1F/0
  2330 ;;		On exit  : 1F/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2333 ;;      Params:         0       0       0       0
  2334 ;;      Locals:         0       1       0       0
  2335 ;;      Temps:          0       0       0       0
  2336 ;;      Totals:         0       1       0       0
  2337 ;;Total ram usage:        1 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    9
  2340 ;; This function calls:
  2341 ;;		__CCBufCalcPt
  2342 ;; This function is called by:
  2343 ;;		_RfHalTickRxTh
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347  0000                     __CCBufRdReverse:	
  2348                           ;psect for function __CCBufRdReverse
  2349                           
  2350  0000                     __end_of__CCBufRdReverse:	
  2351                           ;incstack = 0
  2352                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  2353                           ;__CCBufRdReverse@qty stored from wreg
  2354                           
  2355                           
  2356                           	psect	text21
  2357  0000                     __ptext21:	
  2358 ;; *************** function __CCBufCanRd *****************
  2359 ;; Defined at:
  2360 ;;		line 46 in file "../../../src/utilities/ccbuf_static.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      unsigned char 
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0, pclath, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 1F/0
  2371 ;;		On exit  : 1F/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2374 ;;      Params:         0       0       0       0
  2375 ;;      Locals:         0       0       0       0
  2376 ;;      Temps:          0       0       0       0
  2377 ;;      Totals:         0       0       0       0
  2378 ;;Total ram usage:        0 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    9
  2381 ;; This function calls:
  2382 ;;		__CCBufCalcPt
  2383 ;; This function is called by:
  2384 ;;		_RfHalTickRxTh
  2385 ;;		__CCBufRdByte
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389  0000                     __CCBufCanRd:	
  2390                           ;psect for function __CCBufCanRd
  2391                           
  2392  0000                     __end_of__CCBufCanRd:	
  2393                           ;ccbuf_static.c: 51: else return 1;
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in __CCBufCanRd: [wreg+status,2+status,0+pclath+cstack]
  2397                           
  2398                           
  2399                           	psect	text23
  2400  0000                     __ptext23:	
  2401 ;; *************** function _RfTrcvCrcTick *****************
  2402 ;; Defined at:
  2403 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  initial         1    wreg     unsigned char 
  2406 ;;  data            1    0[BANK0 ] unsigned char 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  initial         1    1[BANK0 ] unsigned char 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      unsigned char 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 1F/0
  2415 ;;		On exit  : 1F/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2418 ;;      Params:         0       1       0       0
  2419 ;;      Locals:         0       1       0       0
  2420 ;;      Temps:          0       0       0       0
  2421 ;;      Totals:         0       2       0       0
  2422 ;;Total ram usage:        2 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    8
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_RfHalTickRxTh
  2429 ;;		_RfHalStatemachine
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433  0000                     _RfTrcvCrcTick:	
  2434                           ;psect for function _RfTrcvCrcTick
  2435                           
  2436  0000                     __end_of_RfTrcvCrcTick:	
  2437                           ;mrf49xa.c: 59: return (initial ^ data);
  2438                           
  2439                           ;incstack = 0
  2440                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  2441                           ;RfTrcvCrcTick@initial stored from wreg
  2442                           
  2443                           
  2444                           	psect	text29
  2445  0000                     __ptext29:	
  2446 ;; *************** function __CCBufInit *****************
  2447 ;; Defined at:
  2448 ;;		line 5 in file "../../../src/utilities/ccbuf_static.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;		None               void
  2455 ;; Registers used:
  2456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 1F/0
  2459 ;;		On exit  : 1F/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2462 ;;      Params:         0       0       0       0
  2463 ;;      Locals:         0       0       0       0
  2464 ;;      Temps:          0       0       0       0
  2465 ;;      Totals:         0       0       0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    9
  2469 ;; This function calls:
  2470 ;;		__CCBufReset
  2471 ;; This function is called by:
  2472 ;;		_RfHalInit
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476  0000                     __CCBufInit:	
  2477                           ;psect for function __CCBufInit
  2478                           
  2479  0000                     __end_of__CCBufInit:	
  2480                           ;ccbuf_static.c: 15: {
  2481                           ;ccbuf_static.c: 16: i--;
  2482                           
  2483                           ;psect for function __CCBufReset
  2484                           
  2485                           ;ccbuf_static.c: 7: _CCBufReset();
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in __CCBufInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2489                           
  2490                           
  2491                           	psect	text30
  2492  0000                     __ptext30:	
  2493 ;; *************** function __CCBufReset *****************
  2494 ;; Defined at:
  2495 ;;		line 10 in file "../../../src/utilities/ccbuf_static.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  i               1    1[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;		None               void
  2502 ;; Registers used:
  2503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2504 ;; Tracked objects:
  2505 ;;		On entry : 1F/0
  2506 ;;		On exit  : 1F/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2509 ;;      Params:         0       0       0       0
  2510 ;;      Locals:         0       1       0       0
  2511 ;;      Temps:          0       1       0       0
  2512 ;;      Totals:         0       2       0       0
  2513 ;;Total ram usage:        2 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    8
  2516 ;; This function calls:
  2517 ;;		Nothing
  2518 ;; This function is called by:
  2519 ;;		__CCBufInit
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523  0000                     __CCBufReset:	
  2524                           ;psect for function __CCBufReset
  2525                           
  2526  0000                     __end_of__CCBufReset:	
  2527                           ;ccbuf_static.c: 15: {
  2528                           ;ccbuf_static.c: 16: i--;
  2529                           
  2530                           ;ccbuf_static.c: 14: while (i > 0)
  2531                           
  2532                           ;incstack = 0
  2533                           ; Regs used in __CCBufReset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2534                           
  2535                           
  2536                           	psect	intentry
  2537  0004                     __pintentry:	
  2538 ;; *************** function _extInt *****************
  2539 ;; Defined at:
  2540 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;		None               void
  2547 ;; Registers used:
  2548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2554 ;;      Params:         0       0       0       0
  2555 ;;      Locals:         0       0       0       0
  2556 ;;      Temps:          0       0       0       0
  2557 ;;      Totals:         0       0       0       0
  2558 ;;Total ram usage:        0 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    7
  2561 ;; This function calls:
  2562 ;;		i1_mrf49XaIsr
  2563 ;; This function is called by:
  2564 ;;		Interrupt level 1
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568  0004                     _extInt:	
  2569                           
  2570                           ;incstack = 0
  2571                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2572  0004  3180               	pagesel	$
  2573                           
  2574                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  2575  0005  1C8B               	btfss	11,1	;volatile
  2576  0006  0009               	retfie
  2577                           
  2578                           ;interrupt.c: 34: {
  2579                           ;interrupt.c: 35: if (mrf49XaIsr())
  2580  0007  3188  20FF         	fcall	i1_mrf49XaIsr
  2581  0009  3A00               	xorlw	0
  2582  000A  1D03               	btfss	3,2
  2583                           
  2584                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  2585  000B  108B               	bcf	11,1	;volatile
  2586  000C  0009               	retfie
  2587  000D                     __end_of_extInt:	
  2588                           
  2589                           	psect	swtext2
  2590  0025                     __pswtext2:	
  2591  0025                     i1S3562:	
  2592  0025  3189  291F         	ljmp	i1l3364
  2593  0027  3189  2923         	ljmp	i1l3366
  2594  0029  3189  2926         	ljmp	i1l3368
  2595  002B  3189  292A         	ljmp	i1l3372
  2596  002D  3189  292E         	ljmp	i1l3376
  2597  002F  3189  2932         	ljmp	i1l3380
  2598  0031  3189  2937         	ljmp	i1l3384
  2599  0033  3189  295D         	ljmp	i1l3394
  2600  0035  3189  2965         	ljmp	i1l3398
  2601  0037  3189  2965         	ljmp	i1l3398
  2602  0039  3189  2969         	ljmp	i1l3402
  2603                           
  2604                           	psect	text44
  2605  0000                     __ptext44:	
  2606 ;; *************** function i1__CCBufCanWr *****************
  2607 ;; Defined at:
  2608 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      unsigned char 
  2615 ;; Registers used:
  2616 ;;		wreg
  2617 ;; Tracked objects:
  2618 ;;		On entry : 1F/2
  2619 ;;		On exit  : 1F/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2622 ;;      Params:         0       0       0       0
  2623 ;;      Locals:         0       0       0       0
  2624 ;;      Temps:          0       0       0       0
  2625 ;;      Totals:         0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		i1__CCBufWrByte
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635  0000                     __end_ofi1__CCBufCanWr:	
  2636                           ;ccbuf_static.c: 37: else return 1;
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in i1__CCBufCanWr: [wreg]
  2640                           
  2641                           ;psect for function i1__CCBufCanWr
  2642                           
  2643                           
  2644                           	psect	text46
  2645  08EF                     __ptext46:	
  2646 ;; *************** function i1_RfTrcvMode *****************
  2647 ;; Defined at:
  2648 ;;		line 59 in file "../../../src/rfstack/hal.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  tx              1    wreg     unsigned char 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  tx              1    5[COMMON] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;		None               void
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0, pclath, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 1F/0
  2659 ;;		On exit  : 1D/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2662 ;;      Params:         0       0       0       0
  2663 ;;      Locals:         1       0       0       0
  2664 ;;      Temps:          0       0       0       0
  2665 ;;      Totals:         1       0       0       0
  2666 ;;Total ram usage:        1 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    4
  2669 ;; This function calls:
  2670 ;;		i1_RfTrcvSetup
  2671 ;; This function is called by:
  2672 ;;		i1_RfHalStatemachine
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           
  2677                           ;psect for function i1_RfTrcvMode
  2678  08EF                     i1_RfTrcvMode:	
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in i1_RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  2682                           ;i1RfTrcvMode@tx stored from wreg
  2683  08EF  00F5               	movwf	i1RfTrcvMode@tx
  2684                           
  2685                           ;hal.c: 61: rfStatus.inRx = 1 - tx;
  2686  08F0  3C01               	sublw	1
  2687  08F1  00A3               	movwf	_rfStatus+3
  2688                           
  2689                           ;hal.c: 62: RfTrcvSetup(tx);
  2690  08F2  0875               	movf	i1RfTrcvMode@tx,w
  2691  08F3  218F  3188         	fcall	i1_RfTrcvSetup
  2692                           
  2693                           ;hal.c: 64: if (tx == 1)
  2694  08F5  0B75               	decfsz	i1RfTrcvMode@tx,w
  2695  08F6  28F8               	goto	u263_21
  2696  08F7  28FA               	goto	i1l3358
  2697  08F8                     u263_21:	
  2698  08F8  0020               	movlb	0	; select bank0
  2699  08F9  0008               	return
  2700  08FA                     i1l3358:	
  2701                           
  2702                           ;hal.c: 65: {
  2703                           ;hal.c: 66: rfStatus.isr.state = TX_PREAMBLE1;
  2704  08FA  0020               	movlb	0	; select bank0
  2705  08FB  01A2               	clrf	_rfStatus+2
  2706  08FC  0AA2               	incf	_rfStatus+2,f
  2707                           
  2708                           ;hal.c: 67: rfStatus.isr.byteCounter = 0;
  2709  08FD  01A0               	clrf	_rfStatus
  2710  08FE  0008               	return
  2711  08FF                     __end_ofi1_RfTrcvMode:	
  2712  08FF                     __ptext40:	
  2713 ;; *************** function i1_mrf49XaIsr *****************
  2714 ;; Defined at:
  2715 ;;		line 28 in file "../../../src/node/main.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      unsigned char 
  2722 ;; Registers used:
  2723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 1F/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2729 ;;      Params:         0       0       0       0
  2730 ;;      Locals:         0       0       0       0
  2731 ;;      Temps:          0       0       0       0
  2732 ;;      Totals:         0       0       0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    6
  2736 ;; This function calls:
  2737 ;;		i1_RfHalStatemachine
  2738 ;;		i1_RfTrcvSetup
  2739 ;;		i1_RfTrcvStatus
  2740 ;; This function is called by:
  2741 ;;		_extInt
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           
  2746                           ;psect for function i1_mrf49XaIsr
  2747  08FF                     i1_mrf49XaIsr:	
  2748  08FF                     i1l644:	
  2749                           ;incstack = 0
  2750                           ; Regs used in i1_mrf49XaIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2751                           ;main.c: 30: do
  2752                           
  2753                           
  2754                           ;main.c: 31: {
  2755                           ;main.c: 32: RfTrcvStatus();
  2756  08FF  221F  3188         	fcall	i1_RfTrcvStatus
  2757                           
  2758                           ;main.c: 33: isr++;
  2759  0901  0020               	movlb	0	; select bank0
  2760  0902  0AAB               	incf	_isr,f	;volatile
  2761                           
  2762                           ;main.c: 35: if (rfTrcvStatus.flags.msb.fifoTxRx)
  2763  0903  1FB7               	btfss	_rfTrcvStatus,7
  2764  0904  290C               	goto	i1l3430
  2765                           
  2766                           ;main.c: 36: {
  2767                           ;main.c: 37: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  2768  0905  0323               	decf	_rfStatus+3,w
  2769  0906  1D03               	skipz
  2770  0907  290A               	goto	i1l3428
  2771  0908  1FB8               	btfss	_rfTrcvStatus+1,7
  2772  0909  290C               	goto	i1l3430
  2773  090A                     i1l3428:	
  2774                           
  2775                           ;main.c: 41: else
  2776                           ;main.c: 42: {
  2777                           ;main.c: 43: RfHalStatemachine();
  2778  090A  211E  3188         	fcall	i1_RfHalStatemachine
  2779  090C                     i1l3430:	
  2780                           
  2781                           ;main.c: 44: }
  2782                           ;main.c: 45: }
  2783                           ;main.c: 48: if (rfTrcvStatus.flags.msb.por || (rfTrcvStatus.flags.msb.signalPresent && 
      +                          rfTrcvStatus.flags.msb.overflow))
  2784  090C  0020               	movlb	0	; select bank0
  2785  090D  1B37               	btfsc	_rfTrcvStatus,6
  2786  090E  2912               	goto	i1l3436
  2787  090F  1837               	btfsc	_rfTrcvStatus,0
  2788  0910  1EB7               	btfss	_rfTrcvStatus,5
  2789  0911  2917               	goto	i1l3440
  2790  0912                     i1l3436:	
  2791                           
  2792                           ;main.c: 49: {
  2793                           ;main.c: 50: RfTrcvSetup(0);
  2794  0912  3000               	movlw	0
  2795  0913  218F  3188         	fcall	i1_RfTrcvSetup
  2796                           
  2797                           ;main.c: 51: rfPkResets++;
  2798  0915  0020               	movlb	0	; select bank0
  2799  0916  0AAE               	incf	_rfPkResets,f	;volatile
  2800  0917                     i1l3440:	
  2801                           
  2802                           ;main.c: 52: }
  2803                           ;main.c: 54: } while (rfTrcvStatus.flags.msb.por || rfTrcvStatus.flags.msb.fifoTxRx);
  2804  0917  1F37               	btfss	_rfTrcvStatus,6
  2805  0918  1BB7               	btfsc	_rfTrcvStatus,7
  2806  0919  28FF               	goto	i1l644
  2807                           
  2808                           ;main.c: 56: return (PORTAbits.RA2 == 1) ? 1 : 0;
  2809  091A  0C0C               	rrf	12,w	;volatile
  2810  091B  0C89               	rrf	9,f
  2811  091C  3901               	andlw	1
  2812  091D  0008               	return
  2813  091E                     __end_ofi1_mrf49XaIsr:	
  2814  091E                     __ptext42:	
  2815 ;; *************** function i1_RfHalStatemachine *****************
  2816 ;; Defined at:
  2817 ;;		line 379 in file "../../../src/rfstack/hal.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;		None               void
  2824 ;; Registers used:
  2825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 1F/0
  2828 ;;		On exit  : 1D/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2831 ;;      Params:         0       0       0       0
  2832 ;;      Locals:         0       0       0       0
  2833 ;;      Temps:          1       0       0       0
  2834 ;;      Totals:         1       0       0       0
  2835 ;;Total ram usage:        1 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    5
  2838 ;; This function calls:
  2839 ;;		i1_RfTrcvCrcTick
  2840 ;;		i1_RfTrcvGet
  2841 ;;		i1_RfTrcvMode
  2842 ;;		i1_RfTrcvPut
  2843 ;;		i1__CCBufWrByte
  2844 ;; This function is called by:
  2845 ;;		i1_mrf49XaIsr
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function i1_RfHalStatemachine
  2851  091E                     i1_RfHalStatemachine:	
  2852                           
  2853                           ;hal.c: 381: switch (rfStatus.isr.state)
  2854                           
  2855                           ;incstack = 0
  2856                           ; Regs used in i1_RfHalStatemachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2857  091E  2972               	goto	i1l3410
  2858  091F                     i1l3364:	
  2859                           
  2860                           ;hal.c: 385: _CCBufWrByte(RfTrcvGet());
  2861  091F  2186  3188         	fcall	i1_RfTrcvGet
  2862  0921  2261               	fcall	i1__CCBufWrByte
  2863                           
  2864                           ;hal.c: 386: break;
  2865  0922  0008               	return
  2866  0923                     i1l3366:	
  2867                           
  2868                           ;hal.c: 390: rfStatus.isr.state++;
  2869  0923  0020               	movlb	0	; select bank0
  2870  0924  0AA2               	incf	_rfStatus+2,f
  2871                           
  2872                           ;hal.c: 391: break;
  2873  0925  0008               	return
  2874  0926                     i1l3368:	
  2875                           
  2876                           ;hal.c: 394: RfTrcvPut(0xAA);
  2877  0926  30AA               	movlw	170
  2878  0927  217D  3188         	fcall	i1_RfTrcvPut
  2879  0929  2923               	goto	i1l3366
  2880  092A                     i1l3372:	
  2881                           
  2882                           ;hal.c: 399: RfTrcvPut(0x2D);
  2883  092A  302D               	movlw	45
  2884  092B  217D  3188         	fcall	i1_RfTrcvPut
  2885  092D  2923               	goto	i1l3366
  2886  092E                     i1l3376:	
  2887                           
  2888                           ;hal.c: 403: RfTrcvPut(0xD4);
  2889  092E  30D4               	movlw	212
  2890  092F  217D  3188         	fcall	i1_RfTrcvPut
  2891  0931  2923               	goto	i1l3366
  2892  0932                     i1l3380:	
  2893                           
  2894                           ;hal.c: 407: RfTrcvPut(rfStatus.isr.txPacket->size);
  2895  0932  2326  3188         	fcall	PL124	;call to abstracted procedure
  2896  0934  217D  3188         	fcall	i1_RfTrcvPut
  2897  0936  2923               	goto	i1l3366
  2898  0937                     i1l3384:	
  2899                           
  2900                           ;hal.c: 411: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  2901  0937  0820               	movf	_rfStatus,w
  2902  0938  0721               	addwf	_rfStatus+1,w
  2903  0939  00F6               	movwf	??i1_RfHalStatemachine
  2904  093A  0A76               	incf	??i1_RfHalStatemachine,w
  2905  093B  0086               	movwf	6
  2906  093C  0187               	clrf	7
  2907  093D  0801               	movf	1,w
  2908  093E  217D  3188         	fcall	i1_RfTrcvPut
  2909                           
  2910                           ;hal.c: 412: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  2911  0940  0020               	movlb	0	; select bank0
  2912  0941  0821               	movf	_rfStatus+1,w
  2913  0942  3E19               	addlw	25
  2914  0943  0086               	movwf	6
  2915  0944  0187               	clrf	7
  2916  0945  0820               	movf	_rfStatus,w
  2917  0946  0721               	addwf	_rfStatus+1,w
  2918  0947  00F6               	movwf	??i1_RfHalStatemachine
  2919  0948  0084               	movwf	4
  2920  0949  0185               	clrf	5
  2921  094A  3F01               	moviw [1]fsr0
  2922  094B  00F0               	movwf	i1RfTrcvCrcTick@data
  2923  094C  0821               	movf	_rfStatus+1,w
  2924  094D  3E19               	addlw	25
  2925  094E  0084               	movwf	4
  2926  094F  0800               	movf	0,w
  2927  0950                     i12L__ptext53:	
  2928                           
  2929                           ;psect for function i1_RfTrcvCrcTick
  2930  0950                     i12Li1_RfTrcvCrcTick:	
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  2934                           ;i1RfTrcvCrcTick@initial stored from wreg
  2935  0950  00F1               	movwf	i1RfTrcvCrcTick@initial
  2936  0951                     i12Li1l3224:	
  2937                           
  2938                           ;mrf49xa.c: 59: return (initial ^ data);
  2939  0951  0871               	movf	i1RfTrcvCrcTick@initial,w
  2940  0952  0670               	xorwf	i1RfTrcvCrcTick@data,w
  2941  0953                     i12Li1l181:	
  2942  0953  0081               	movwf	1
  2943                           
  2944                           ;hal.c: 413: rfStatus.isr.byteCounter++;
  2945  0954  0AA0               	incf	_rfStatus,f
  2946                           
  2947                           ;hal.c: 414: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  2948  0955  2326  3188         	fcall	PL124	;call to abstracted procedure
  2949  0957  0220               	subwf	_rfStatus,w
  2950  0958  1C03               	skipc
  2951  0959  0008               	return
  2952                           
  2953                           ;hal.c: 415: rfStatus.isr.state = TX_CRC;
  2954  095A  3007               	movlw	7
  2955  095B  00A2               	movwf	_rfStatus+2
  2956  095C  0008               	return
  2957  095D                     i1l3394:	
  2958                           
  2959                           ;hal.c: 418: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  2960  095D  0821               	movf	_rfStatus+1,w
  2961  095E  3E19               	addlw	25
  2962  095F  0086               	movwf	6
  2963  0960  0187               	clrf	7
  2964  0961  0801               	movf	1,w
  2965  0962  217D  3188         	fcall	i1_RfTrcvPut
  2966  0964  2923               	goto	i1l3366
  2967  0965                     i1l3398:	
  2968                           
  2969                           ;hal.c: 423: case TX_NULL2:
  2970                           ;hal.c: 424: RfTrcvPut(0);
  2971  0965  3000               	movlw	0
  2972  0966  217D  3188         	fcall	i1_RfTrcvPut
  2973  0968  2923               	goto	i1l3366
  2974  0969                     i1l3402:	
  2975                           
  2976                           ;hal.c: 428: RfTrcvPut(0);
  2977  0969  3000               	movlw	0
  2978  096A  217D  3188         	fcall	i1_RfTrcvPut
  2979                           
  2980                           ;hal.c: 429: rfStatus.isr.state = RX_RECV;
  2981  096C  0020               	movlb	0	; select bank0
  2982  096D  3000               	movlw	0
  2983  096E  01A2               	clrf	_rfStatus+2
  2984                           
  2985                           ;hal.c: 435: RfTrcvMode(0);
  2986  096F  20EF               	fcall	i1_RfTrcvMode
  2987                           
  2988                           ;hal.c: 436: break;
  2989  0970  0020               	movlb	0	; select bank0
  2990  0971  0008               	return
  2991  0972                     i1l3410:	
  2992  0972  0822               	movf	_rfStatus+2,w
  2993                           
  2994                           ; Switch size 1, requested type "space"
  2995                           ; Number of cases is 11, Range of values is 0 to 10
  2996                           ; switch strategies available:
  2997                           ; Name         Instructions Cycles
  2998                           ; direct_byte           28     6 (fixed)
  2999                           ; simple_byte           34    18 (average)
  3000                           ; jumptable            260     6 (fixed)
  3001                           ;	Chosen strategy is direct_byte
  3002  0973  0084               	movwf	4
  3003  0974  300B               	movlw	11
  3004  0975  0204               	subwf	4,w
  3005  0976  1803               	skipnc
  3006  0977  0008               	return
  3007  0978  3180               	movlp	high i1S3562
  3008  0979  3504               	lslf	4,w
  3009  097A  3E25               	addlw	low i1S3562
  3010  097B  0082               	movwf	2
  3011  097C  0008               	return
  3012  097D                     __end_ofi1_RfHalStatemachine:	
  3013  097D                     __ptext48:	
  3014 ;; *************** function i1_RfTrcvPut *****************
  3015 ;; Defined at:
  3016 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  byte            1    wreg     unsigned char 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  byte            1    3[COMMON] unsigned char 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;		None               void
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, pclath, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 1D/0
  3027 ;;		On exit  : 1F/2
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3030 ;;      Params:         0       0       0       0
  3031 ;;      Locals:         1       0       0       0
  3032 ;;      Temps:          0       0       0       0
  3033 ;;      Totals:         1       0       0       0
  3034 ;;Total ram usage:        1 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    2
  3037 ;; This function calls:
  3038 ;;		i1_MRF49XACommand
  3039 ;; This function is called by:
  3040 ;;		i1_RfTrcvSetup
  3041 ;;		i1_RfHalStatemachine
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function i1_RfTrcvPut
  3047  097D                     i1_RfTrcvPut:	
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in i1_RfTrcvPut: [wreg+status,2+status,0+pclath+cstack]
  3051                           ;i1RfTrcvPut@byte stored from wreg
  3052  097D  00F3               	movwf	i1RfTrcvPut@byte
  3053                           
  3054                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  3055  097E  00F1               	movwf	i1MRF49XACommand@cmd
  3056  097F  3000               	movlw	0
  3057  0980  01F2               	clrf	i1MRF49XACommand@cmd+1
  3058  0981  04F1               	iorwf	i1MRF49XACommand@cmd,f
  3059  0982  30B8               	movlw	184
  3060  0983  04F2               	iorwf	i1MRF49XACommand@cmd+1,f
  3061  0984  21CB               	fcall	i1_MRF49XACommand
  3062  0985  0008               	return
  3063  0986                     __end_ofi1_RfTrcvPut:	
  3064  0986                     __ptext50:	
  3065 ;; *************** function i1_RfTrcvGet *****************
  3066 ;; Defined at:
  3067 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  RfTrcvGet       1    1[COMMON] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      unsigned char 
  3074 ;; Registers used:
  3075 ;;		wreg, status,2, status,0, pclath, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 1F/0
  3078 ;;		On exit  : 1F/2
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3081 ;;      Params:         0       0       0       0
  3082 ;;      Locals:         1       0       0       0
  3083 ;;      Temps:          0       0       0       0
  3084 ;;      Totals:         1       0       0       0
  3085 ;;Total ram usage:        1 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    1
  3088 ;; This function calls:
  3089 ;;		i1_SPI_Read
  3090 ;;		i1_SPI_Write
  3091 ;; This function is called by:
  3092 ;;		i1_RfHalStatemachine
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function i1_RfTrcvGet
  3098  0986                     i1_RfTrcvGet:	
  3099                           
  3100                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in i1_RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  3104  0986  0022               	movlb	2	; select bank2
  3105  0987  130E               	bcf	14,6	;volatile
  3106                           
  3107                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  3108  0988  30B0               	movlw	176
  3109  0989  21D4  3188         	fcall	i1_SPI_Write
  3110                           
  3111                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  3112  098B  222B               	fcall	i1_SPI_Read
  3113  098C  00F1               	movwf	i1RfTrcvGet@b
  3114                           
  3115                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  3116  098D  170E               	bsf	14,6	;volatile
  3117                           
  3118                           ;mrf49xa.c: 26: return b;
  3119  098E  0008               	return
  3120  098F                     __end_ofi1_RfTrcvGet:	
  3121  098F                     __ptext47:	
  3122 ;; *************** function i1_RfTrcvSetup *****************
  3123 ;; Defined at:
  3124 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  tx              1    wreg     unsigned char 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  tx              1    4[COMMON] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;		None               void
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, status,0, pclath, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 1F/0
  3135 ;;		On exit  : 1F/2
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3138 ;;      Params:         0       0       0       0
  3139 ;;      Locals:         1       0       0       0
  3140 ;;      Temps:          0       0       0       0
  3141 ;;      Totals:         1       0       0       0
  3142 ;;Total ram usage:        1 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    3
  3145 ;; This function calls:
  3146 ;;		i1_MRF49XACommand
  3147 ;;		i1_RfTrcvPut
  3148 ;; This function is called by:
  3149 ;;		i1_RfTrcvMode
  3150 ;;		i1_mrf49XaIsr
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function i1_RfTrcvSetup
  3156  098F                     i1_RfTrcvSetup:	
  3157                           
  3158                           ;incstack = 0
  3159                           ; Regs used in i1_RfTrcvSetup: [wreg+status,2+status,0+pclath+cstack]
  3160                           ;i1RfTrcvSetup@tx stored from wreg
  3161  098F  00F4               	movwf	i1RfTrcvSetup@tx
  3162                           
  3163                           ;mrf49xa.c: 63: if (tx)
  3164  0990  0874               	movf	i1RfTrcvSetup@tx,w
  3165  0991  1903               	btfsc	3,2
  3166  0992  29A7               	goto	i1l3350
  3167                           
  3168                           ;mrf49xa.c: 64: {
  3169                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  3170  0993  3082               	movlw	130
  3171  0994  01F1               	clrf	i1MRF49XACommand@cmd
  3172  0995  00F2               	movwf	i1MRF49XACommand@cmd+1
  3173  0996  21CB  3188         	fcall	i1_MRF49XACommand
  3174                           
  3175                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  3176  0998  30A8               	movlw	168
  3177  0999  00F1               	movwf	i1MRF49XACommand@cmd
  3178  099A  3080               	movlw	128
  3179  099B  00F2               	movwf	i1MRF49XACommand@cmd+1
  3180  099C  21CB  3188         	fcall	i1_MRF49XACommand
  3181                           
  3182                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  3183  099E  3020               	movlw	32
  3184  099F  00F1               	movwf	i1MRF49XACommand@cmd
  3185  09A0  3082               	movlw	130
  3186  09A1  00F2               	movwf	i1MRF49XACommand@cmd+1
  3187  09A2  21CB  3188         	fcall	i1_MRF49XACommand
  3188                           
  3189                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  3190  09A4  3055               	movlw	85
  3191  09A5  217D               	fcall	i1_RfTrcvPut
  3192                           
  3193                           ;mrf49xa.c: 71: }
  3194  09A6  0008               	return
  3195  09A7                     i1l3350:	
  3196                           
  3197                           ;mrf49xa.c: 72: else
  3198                           ;mrf49xa.c: 73: {
  3199                           ;mrf49xa.c: 74: MRF49XACommand(0x8200);
  3200  09A7  3000               	movlw	0
  3201  09A8  00F1               	movwf	i1MRF49XACommand@cmd
  3202  09A9  3082               	movlw	130
  3203  09AA  00F2               	movwf	i1MRF49XACommand@cmd+1
  3204  09AB  21CB  3188         	fcall	i1_MRF49XACommand
  3205                           
  3206                           ;mrf49xa.c: 75: MRF49XACommand(0xCA81);
  3207  09AD  3081               	movlw	129
  3208  09AE  00F1               	movwf	i1MRF49XACommand@cmd
  3209  09AF  30CA               	movlw	202
  3210  09B0  00F2               	movwf	i1MRF49XACommand@cmd+1
  3211  09B1  21CB  3188         	fcall	i1_MRF49XACommand
  3212                           
  3213                           ;mrf49xa.c: 76: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  3214  09B3  3028               	movlw	40
  3215  09B4  00F1               	movwf	i1MRF49XACommand@cmd
  3216  09B5  3080               	movlw	128
  3217  09B6  00F2               	movwf	i1MRF49XACommand@cmd+1
  3218  09B7  21CB  3188         	fcall	i1_MRF49XACommand
  3219                           
  3220                           ;mrf49xa.c: 77: MRF49XACommand(0x8200 | 0x0080);
  3221  09B9  3080               	movlw	128
  3222  09BA  00F1               	movwf	i1MRF49XACommand@cmd
  3223  09BB  3082               	movlw	130
  3224  09BC  00F2               	movwf	i1MRF49XACommand@cmd+1
  3225  09BD  21CB  3188         	fcall	i1_MRF49XACommand
  3226                           
  3227                           ;mrf49xa.c: 78: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  3228  09BF  3068               	movlw	104
  3229  09C0  00F1               	movwf	i1MRF49XACommand@cmd
  3230  09C1  3080               	movlw	128
  3231  09C2  00F2               	movwf	i1MRF49XACommand@cmd+1
  3232  09C3  21CB  3188         	fcall	i1_MRF49XACommand
  3233                           
  3234                           ;mrf49xa.c: 79: MRF49XACommand(0xCA81 | 0x0002);
  3235  09C5  3083               	movlw	131
  3236  09C6  00F1               	movwf	i1MRF49XACommand@cmd
  3237  09C7  30CA               	movlw	202
  3238  09C8  00F2               	movwf	i1MRF49XACommand@cmd+1
  3239  09C9  21CB               	fcall	i1_MRF49XACommand
  3240  09CA  0008               	return
  3241  09CB                     __end_ofi1_RfTrcvSetup:	
  3242  09CB                     __ptext49:	
  3243 ;; *************** function i1_MRF49XACommand *****************
  3244 ;; Defined at:
  3245 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  cmd             2    1[COMMON] unsigned int 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0, pclath, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 1D/0
  3256 ;;		On exit  : 1F/2
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3259 ;;      Params:         2       0       0       0
  3260 ;;      Locals:         0       0       0       0
  3261 ;;      Temps:          0       0       0       0
  3262 ;;      Totals:         2       0       0       0
  3263 ;;Total ram usage:        2 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    1
  3266 ;; This function calls:
  3267 ;;		i1_SPI_Write
  3268 ;; This function is called by:
  3269 ;;		i1_RfTrcvPut
  3270 ;;		i1_RfTrcvSetup
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           
  3275                           ;psect for function i1_MRF49XACommand
  3276  09CB                     i1_MRF49XACommand:	
  3277                           
  3278                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  3279                           
  3280                           ;incstack = 0
  3281                           ; Regs used in i1_MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  3282  09CB  0022               	movlb	2	; select bank2
  3283  09CC  130E               	bcf	14,6	;volatile
  3284                           
  3285                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  3286  09CD  0872               	movf	i1MRF49XACommand@cmd+1,w
  3287  09CE  21D4  3188         	fcall	i1_SPI_Write
  3288                           
  3289                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  3290  09D0  0871               	movf	i1MRF49XACommand@cmd,w
  3291  09D1  21D4               	fcall	i1_SPI_Write
  3292                           
  3293                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  3294  09D2  170E               	bsf	14,6	;volatile
  3295  09D3  0008               	return
  3296  09D4                     __end_ofi1_MRF49XACommand:	
  3297  09D4                     __ptext51:	
  3298 ;; *************** function i1_SPI_Write *****************
  3299 ;; Defined at:
  3300 ;;		line 191 in file "../../../src/devices/mrf49xa.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  data            1    wreg     unsigned char 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;  data            1    0[COMMON] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;		None               void
  3307 ;; Registers used:
  3308 ;;		wreg
  3309 ;; Tracked objects:
  3310 ;;		On entry : 1F/2
  3311 ;;		On exit  : 1F/2
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3314 ;;      Params:         0       0       0       0
  3315 ;;      Locals:         1       0       0       0
  3316 ;;      Temps:          0       0       0       0
  3317 ;;      Totals:         1       0       0       0
  3318 ;;Total ram usage:        1 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		i1_RfTrcvGet
  3324 ;;		i1_MRF49XACommand
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function i1_SPI_Write
  3330  09D4                     i1_SPI_Write:	
  3331                           
  3332                           ;incstack = 0
  3333                           ; Regs used in i1_SPI_Write: [wreg]
  3334                           ;i1SPI_Write@data stored from wreg
  3335  09D4  00F0               	movwf	i1SPI_Write@data
  3336                           
  3337                           ;mrf49xa.c: 198: LATCbits.LATC7 = 0;
  3338  09D5  138E               	bcf	14,7	;volatile
  3339  09D6  1BF0               	btfsc	i1SPI_Write@data,7
  3340  09D7  29DA               	goto	i1l3260
  3341  09D8  0020               	movlb	0	; select bank0
  3342  09D9  29DC               	goto	i1l228
  3343  09DA                     i1l3260:	
  3344  09DA  178D               	bsf	13,7	;volatile
  3345  09DB  29DD               	goto	i1l229
  3346  09DC                     i1l228:	
  3347  09DC  138D               	bcf	13,7	;volatile
  3348  09DD                     i1l229:	
  3349  09DD  178E               	bsf	14,7	;volatile
  3350  09DE  138E               	bcf	14,7	;volatile
  3351  09DF  1B70               	btfsc	i1SPI_Write@data,6
  3352  09E0  29E3               	goto	i1l3264
  3353  09E1  0020               	movlb	0	; select bank0
  3354  09E2  29E5               	goto	i1l232
  3355  09E3                     i1l3264:	
  3356  09E3  178D               	bsf	13,7	;volatile
  3357  09E4  29E6               	goto	i1l233
  3358  09E5                     i1l232:	
  3359  09E5  138D               	bcf	13,7	;volatile
  3360  09E6                     i1l233:	
  3361  09E6  178E               	bsf	14,7	;volatile
  3362  09E7  138E               	bcf	14,7	;volatile
  3363  09E8  1AF0               	btfsc	i1SPI_Write@data,5
  3364  09E9  29EC               	goto	i1l3268
  3365  09EA  0020               	movlb	0	; select bank0
  3366  09EB  29EE               	goto	i1l236
  3367  09EC                     i1l3268:	
  3368  09EC  178D               	bsf	13,7	;volatile
  3369  09ED  29EF               	goto	i1l237
  3370  09EE                     i1l236:	
  3371  09EE  138D               	bcf	13,7	;volatile
  3372  09EF                     i1l237:	
  3373  09EF  178E               	bsf	14,7	;volatile
  3374  09F0  138E               	bcf	14,7	;volatile
  3375  09F1  1A70               	btfsc	i1SPI_Write@data,4
  3376  09F2  29F5               	goto	i1l3272
  3377  09F3  0020               	movlb	0	; select bank0
  3378  09F4  29F7               	goto	i1l240
  3379  09F5                     i1l3272:	
  3380  09F5  178D               	bsf	13,7	;volatile
  3381  09F6  29F8               	goto	i1l241
  3382  09F7                     i1l240:	
  3383  09F7  138D               	bcf	13,7	;volatile
  3384  09F8                     i1l241:	
  3385  09F8  178E               	bsf	14,7	;volatile
  3386  09F9  138E               	bcf	14,7	;volatile
  3387  09FA  19F0               	btfsc	i1SPI_Write@data,3
  3388  09FB  29FE               	goto	i1l3276
  3389  09FC  0020               	movlb	0	; select bank0
  3390  09FD  2A00               	goto	i1l244
  3391  09FE                     i1l3276:	
  3392  09FE  178D               	bsf	13,7	;volatile
  3393  09FF  2A01               	goto	i1l245
  3394  0A00                     i1l244:	
  3395  0A00  138D               	bcf	13,7	;volatile
  3396  0A01                     i1l245:	
  3397  0A01  178E               	bsf	14,7	;volatile
  3398  0A02  138E               	bcf	14,7	;volatile
  3399  0A03  1970               	btfsc	i1SPI_Write@data,2
  3400  0A04  2A07               	goto	i1l3280
  3401  0A05  0020               	movlb	0	; select bank0
  3402  0A06  2A09               	goto	i1l248
  3403  0A07                     i1l3280:	
  3404  0A07  178D               	bsf	13,7	;volatile
  3405  0A08  2A0A               	goto	i1l249
  3406  0A09                     i1l248:	
  3407  0A09  138D               	bcf	13,7	;volatile
  3408  0A0A                     i1l249:	
  3409  0A0A  178E               	bsf	14,7	;volatile
  3410  0A0B  138E               	bcf	14,7	;volatile
  3411  0A0C  18F0               	btfsc	i1SPI_Write@data,1
  3412  0A0D  2A10               	goto	i1l3284
  3413  0A0E  0020               	movlb	0	; select bank0
  3414  0A0F  2A12               	goto	i1l252
  3415  0A10                     i1l3284:	
  3416  0A10  178D               	bsf	13,7	;volatile
  3417  0A11  2A13               	goto	i1l253
  3418  0A12                     i1l252:	
  3419  0A12  138D               	bcf	13,7	;volatile
  3420  0A13                     i1l253:	
  3421  0A13  178E               	bsf	14,7	;volatile
  3422  0A14  138E               	bcf	14,7	;volatile
  3423  0A15  1870               	btfsc	i1SPI_Write@data,0
  3424  0A16  2A19               	goto	i1l3288
  3425  0A17  0020               	movlb	0	; select bank0
  3426  0A18  2A1B               	goto	i1l256
  3427  0A19                     i1l3288:	
  3428  0A19  178D               	bsf	13,7	;volatile
  3429  0A1A  2A1C               	goto	i1l257
  3430  0A1B                     i1l256:	
  3431  0A1B  138D               	bcf	13,7	;volatile
  3432  0A1C                     i1l257:	
  3433  0A1C  178E               	bsf	14,7	;volatile
  3434  0A1D  138E               	bcf	14,7	;volatile
  3435  0A1E  0008               	return
  3436  0A1F                     __end_ofi1_SPI_Write:	
  3437  0A1F                     __ptext41:	
  3438 ;; *************** function i1_RfTrcvStatus *****************
  3439 ;; Defined at:
  3440 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;		None               void
  3447 ;; Registers used:
  3448 ;;		wreg, status,2, pclath, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 1F/2
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3454 ;;      Params:         0       0       0       0
  3455 ;;      Locals:         0       0       0       0
  3456 ;;      Temps:          0       0       0       0
  3457 ;;      Totals:         0       0       0       0
  3458 ;;Total ram usage:        0 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    1
  3461 ;; This function calls:
  3462 ;;		i1_SPI_Read
  3463 ;; This function is called by:
  3464 ;;		i1_mrf49XaIsr
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function i1_RfTrcvStatus
  3470  0A1F                     i1_RfTrcvStatus:	
  3471                           
  3472                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in i1_RfTrcvStatus: [wreg+status,2+pclath+cstack]
  3476  0A1F  0022               	movlb	2	; select bank2
  3477  0A20  130E               	bcf	14,6	;volatile
  3478                           
  3479                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  3480  0A21  222B  3188         	fcall	i1_SPI_Read
  3481  0A23  0020               	movlb	0	; select bank0
  3482  0A24  00B7               	movwf	_rfTrcvStatus
  3483                           
  3484                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  3485  0A25  222B               	fcall	i1_SPI_Read
  3486  0A26  0020               	movlb	0	; select bank0
  3487  0A27  00B8               	movwf	_rfTrcvStatus+1
  3488                           
  3489                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  3490  0A28  0022               	movlb	2	; select bank2
  3491  0A29  170E               	bsf	14,6	;volatile
  3492  0A2A  0008               	return
  3493  0A2B                     __end_ofi1_RfTrcvStatus:	
  3494  0A2B                     __ptext52:	
  3495 ;; *************** function i1_SPI_Read *****************
  3496 ;; Defined at:
  3497 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  SPI_Read        1    0[COMMON] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      unsigned char 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2
  3506 ;; Tracked objects:
  3507 ;;		On entry : 1D/2
  3508 ;;		On exit  : 1F/2
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3511 ;;      Params:         0       0       0       0
  3512 ;;      Locals:         1       0       0       0
  3513 ;;      Temps:          0       0       0       0
  3514 ;;      Totals:         1       0       0       0
  3515 ;;Total ram usage:        1 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; This function calls:
  3518 ;;		Nothing
  3519 ;; This function is called by:
  3520 ;;		i1_RfTrcvGet
  3521 ;;		i1_RfTrcvStatus
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function i1_SPI_Read
  3527  0A2B                     i1_SPI_Read:	
  3528                           
  3529                           ;mrf49xa.c: 150: UI08_t data = 0;
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in i1_SPI_Read: [wreg+status,2]
  3533  0A2B  01F0               	clrf	i1SPI_Read@data
  3534                           
  3535                           ;mrf49xa.c: 151: LATCbits.LATC7 = 0;
  3536  0A2C  0022               	movlb	2	; select bank2
  3537  0A2D  138E               	bcf	14,7	;volatile
  3538                           
  3539                           ;mrf49xa.c: 152: LATBbits.LATB7 = 0;
  3540  0A2E  138D               	bcf	13,7	;volatile
  3541  0A2F  0020               	movlb	0	; select bank0
  3542  0A30  1A8E               	btfsc	14,5	;volatile
  3543  0A31  17F0               	bsf	i1SPI_Read@data,7
  3544  0A32  0022               	movlb	2	; select bank2
  3545  0A33  178E               	bsf	14,7	;volatile
  3546  0A34  138E               	bcf	14,7	;volatile
  3547                           
  3548                           ;mrf49xa.c: 159: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3549  0A35  0020               	movlb	0	; select bank0
  3550  0A36  1A8E               	btfsc	14,5	;volatile
  3551  0A37  1770               	bsf	i1SPI_Read@data,6
  3552  0A38  0022               	movlb	2	; select bank2
  3553  0A39  178E               	bsf	14,7	;volatile
  3554  0A3A  138E               	bcf	14,7	;volatile
  3555                           
  3556                           ;mrf49xa.c: 160: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3557  0A3B  0020               	movlb	0	; select bank0
  3558  0A3C  1A8E               	btfsc	14,5	;volatile
  3559  0A3D  16F0               	bsf	i1SPI_Read@data,5
  3560  0A3E  0022               	movlb	2	; select bank2
  3561  0A3F  178E               	bsf	14,7	;volatile
  3562  0A40  138E               	bcf	14,7	;volatile
  3563                           
  3564                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3565  0A41  0020               	movlb	0	; select bank0
  3566  0A42  1A8E               	btfsc	14,5	;volatile
  3567  0A43  1670               	bsf	i1SPI_Read@data,4
  3568  0A44  0022               	movlb	2	; select bank2
  3569  0A45  178E               	bsf	14,7	;volatile
  3570  0A46  138E               	bcf	14,7	;volatile
  3571                           
  3572                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3573  0A47  0020               	movlb	0	; select bank0
  3574  0A48  1A8E               	btfsc	14,5	;volatile
  3575  0A49  15F0               	bsf	i1SPI_Read@data,3
  3576  0A4A  0022               	movlb	2	; select bank2
  3577  0A4B  178E               	bsf	14,7	;volatile
  3578  0A4C  138E               	bcf	14,7	;volatile
  3579                           
  3580                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3581  0A4D  0020               	movlb	0	; select bank0
  3582  0A4E  1A8E               	btfsc	14,5	;volatile
  3583  0A4F  1570               	bsf	i1SPI_Read@data,2
  3584  0A50  0022               	movlb	2	; select bank2
  3585  0A51  178E               	bsf	14,7	;volatile
  3586  0A52  138E               	bcf	14,7	;volatile
  3587                           
  3588                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3589  0A53  0020               	movlb	0	; select bank0
  3590  0A54  1A8E               	btfsc	14,5	;volatile
  3591  0A55  14F0               	bsf	i1SPI_Read@data,1
  3592  0A56  0022               	movlb	2	; select bank2
  3593  0A57  178E               	bsf	14,7	;volatile
  3594  0A58  138E               	bcf	14,7	;volatile
  3595                           
  3596                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3597  0A59  0020               	movlb	0	; select bank0
  3598  0A5A  1A8E               	btfsc	14,5	;volatile
  3599  0A5B  1470               	bsf	i1SPI_Read@data,0
  3600  0A5C  0022               	movlb	2	; select bank2
  3601  0A5D  178E               	bsf	14,7	;volatile
  3602  0A5E  138E               	bcf	14,7	;volatile
  3603                           
  3604                           ;mrf49xa.c: 188: return data;
  3605  0A5F  0870               	movf	i1SPI_Read@data,w
  3606  0A60  0008               	return
  3607  0A61                     __end_ofi1_SPI_Read:	
  3608  0A61                     __ptext43:	
  3609 ;; *************** function i1__CCBufWrByte *****************
  3610 ;; Defined at:
  3611 ;;		line 89 in file "../../../src/utilities/ccbuf_static.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  data            1    wreg     unsigned char 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  data            1    4[COMMON] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;		None               void
  3618 ;; Registers used:
  3619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 1F/2
  3622 ;;		On exit  : 1F/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3625 ;;      Params:         0       0       0       0
  3626 ;;      Locals:         1       0       0       0
  3627 ;;      Temps:          1       0       0       0
  3628 ;;      Totals:         2       0       0       0
  3629 ;;Total ram usage:        2 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    1
  3632 ;; This function calls:
  3633 ;;		i1__CCBufCalcPt
  3634 ;;		i1__CCBufCanWr
  3635 ;; This function is called by:
  3636 ;;		i1_RfHalStatemachine
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function i1__CCBufWrByte
  3642  0A61                     i1__CCBufWrByte:	
  3643                           
  3644                           ;incstack = 0
  3645                           ; Regs used in i1__CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3646                           ;i1__CCBufWrByte@data stored from wreg
  3647  0A61  00F4               	movwf	i1__CCBufWrByte@data
  3648  0A62                     i13L__ptext44:	
  3649                           ;ccbuf_static.c: 91: if (_CCBufCanWr())
  3650                           
  3651                           
  3652                           ;psect for function i1__CCBufCanWr
  3653  0A62                     i13Li1__CCBufCanWr:	
  3654  0A62                     i13Li1l3302:	
  3655  0A62  0020               	movlb	0	; select bank0
  3656  0A63  0846               	movf	_rfRxCC+2,w
  3657  0A64  0647               	xorwf	_rfRxCC+3,w
  3658  0A65  1D03               	btfss	3,2
  3659  0A66  2A6B               	ljmp	i13Li1l3310
  3660  0A67  2A69               	ljmp	i13Li1l3304
  3661  0A68                     i13Lu260_21:	
  3662  0A68  2A6B               	ljmp	i13Li1l3310
  3663  0A69                     i13Lu260_20:	
  3664  0A69                     i13Li1l3304:	
  3665  0A69  3000               	movlw	0
  3666  0A6A  2A6C               	ljmp	iL108
  3667  0A6B                     i13Li1l3310:	
  3668                           
  3669                           ;ccbuf_static.c: 37: else return 1;
  3670  0A6B  3001               	movlw	1
  3671  0A6C                     i13Li1l539:	
  3672  0A6C                     iL108:	
  3673  0A6C  3A00               	xorlw	0
  3674  0A6D  1903               	skipnz
  3675  0A6E  0008               	return
  3676  0A6F  0846               	movf	_rfRxCC+2,w
  3677  0A70  0744               	addwf	_rfRxCC,w
  3678  0A71  00F3               	movwf	??i1__CCBufWrByte
  3679  0A72  0086               	movwf	6
  3680  0A73  3001               	movlw	1	; select bank2/3
  3681  0A74  0087               	movwf	7
  3682  0A75  0874               	movf	i1__CCBufWrByte@data,w
  3683  0A76  0081               	movwf	1
  3684  0A77  01F0               	clrf	i1__CCBufCalcPt@move
  3685  0A78  0AF0               	incf	i1__CCBufCalcPt@move,f
  3686  0A79  0846               	movf	_rfRxCC+2,w
  3687  0A7A  227D               	fcall	i1__CCBufCalcPt
  3688  0A7B  00C6               	movwf	_rfRxCC+2
  3689  0A7C  0008               	return
  3690  0A7D                     __end_ofi1__CCBufWrByte:	
  3691  0A7D                     __ptext45:	
  3692 ;; *************** function i1__CCBufCalcPt *****************
  3693 ;; Defined at:
  3694 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  entry           1    wreg     unsigned char 
  3697 ;;  move            1    0[COMMON] unsigned char 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  entry           1    1[COMMON] unsigned char 
  3700 ;;  _CCBufCalcPt    1    2[COMMON] unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      unsigned char 
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : 1F/0
  3707 ;;		On exit  : 1F/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3710 ;;      Params:         1       0       0       0
  3711 ;;      Locals:         2       0       0       0
  3712 ;;      Temps:          0       0       0       0
  3713 ;;      Totals:         3       0       0       0
  3714 ;;Total ram usage:        3 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		i1__CCBufWrByte
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           
  3724                           ;psect for function i1__CCBufCalcPt
  3725  0A7D                     i1__CCBufCalcPt:	
  3726                           
  3727                           ;incstack = 0
  3728                           ; Regs used in i1__CCBufCalcPt: [wreg+status,2+status,0]
  3729                           ;i1__CCBufCalcPt@entry stored from wreg
  3730  0A7D  00F1               	movwf	i1__CCBufCalcPt@entry
  3731                           
  3732                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  3733  0A7E  0770               	addwf	i1__CCBufCalcPt@move,w
  3734  0A7F  00F2               	movwf	i1__CCBufCalcPt@result
  3735  0A80                     i1l3296:	
  3736                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  3737                           
  3738  0A80  0845               	movf	_rfRxCC+1,w
  3739  0A81  0272               	subwf	i1__CCBufCalcPt@result,w
  3740  0A82  1C03               	btfss	3,0
  3741  0A83  2A87               	goto	i1l3298
  3742  0A84  0845               	movf	_rfRxCC+1,w
  3743  0A85  02F2               	subwf	i1__CCBufCalcPt@result,f
  3744  0A86  2A80               	goto	i1l3296
  3745  0A87                     i1l3298:	
  3746                           
  3747                           ;ccbuf_static.c: 31: return (UI08_t) result;
  3748  0A87  0872               	movf	i1__CCBufCalcPt@result,w
  3749  0A88  0008               	return
  3750  0A89                     __end_ofi1__CCBufCalcPt:	
  3751  0A89                     __ptext1:	
  3752 ;; *************** function _mrf49XaIsr *****************
  3753 ;; Defined at:
  3754 ;;		line 28 in file "../../../src/node/main.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;		None
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;		None
  3759 ;; Return value:  Size  Location     Type
  3760 ;;                  1    wreg      unsigned char 
  3761 ;; Registers used:
  3762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3763 ;; Tracked objects:
  3764 ;;		On entry : 1F/0
  3765 ;;		On exit  : 1F/0
  3766 ;;		Unchanged: 0/0
  3767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3768 ;;      Params:         0       0       0       0
  3769 ;;      Locals:         0       0       0       0
  3770 ;;      Temps:          0       0       0       0
  3771 ;;      Totals:         0       0       0       0
  3772 ;;Total ram usage:        0 bytes
  3773 ;; Hardware stack levels used:    1
  3774 ;; Hardware stack levels required when called:   14
  3775 ;; This function calls:
  3776 ;;		_RfHalStatemachine
  3777 ;;		_RfTrcvSetup
  3778 ;;		_RfTrcvStatus
  3779 ;; This function is called by:
  3780 ;;		_main
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _mrf49XaIsr
  3786  0A89                     _mrf49XaIsr:	
  3787  0A89                     l644:	
  3788                           ;incstack = 0
  3789                           ; Regs used in _mrf49XaIsr: [allreg]
  3790                           ;main.c: 30: do
  3791                           
  3792                           
  3793                           ;main.c: 31: {
  3794                           ;main.c: 32: RfTrcvStatus();
  3795  0A89  245C  3188         	fcall	_RfTrcvStatus
  3796                           
  3797                           ;main.c: 33: isr++;
  3798  0A8B  0020               	movlb	0	; select bank0
  3799  0A8C  0AAB               	incf	_isr,f	;volatile
  3800                           
  3801                           ;main.c: 35: if (rfTrcvStatus.flags.msb.fifoTxRx)
  3802  0A8D  1FB7               	btfss	_rfTrcvStatus,7
  3803  0A8E  2A96               	goto	l2516
  3804                           
  3805                           ;main.c: 36: {
  3806                           ;main.c: 37: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  3807  0A8F  0323               	decf	_rfStatus+3,w
  3808  0A90  1D03               	skipz
  3809  0A91  2A94               	goto	l2514
  3810  0A92  1FB8               	btfss	_rfTrcvStatus+1,7
  3811  0A93  2A96               	goto	l2516
  3812  0A94                     l2514:	
  3813                           
  3814                           ;main.c: 41: else
  3815                           ;main.c: 42: {
  3816                           ;main.c: 43: RfHalStatemachine();
  3817  0A94  22A7  3188         	fcall	_RfHalStatemachine
  3818  0A96                     l2516:	
  3819                           
  3820                           ;main.c: 44: }
  3821                           ;main.c: 45: }
  3822                           ;main.c: 48: if (rfTrcvStatus.flags.msb.por || (rfTrcvStatus.flags.msb.signalPresent && 
      +                          rfTrcvStatus.flags.msb.overflow))
  3823  0A96  1B37               	btfsc	_rfTrcvStatus,6
  3824  0A97  2A9B               	goto	l2522
  3825  0A98  1837               	btfsc	_rfTrcvStatus,0
  3826  0A99  1EB7               	btfss	_rfTrcvStatus,5
  3827  0A9A  2AA0               	goto	l2526
  3828  0A9B                     l2522:	
  3829                           
  3830                           ;main.c: 49: {
  3831                           ;main.c: 50: RfTrcvSetup(0);
  3832  0A9B  3000               	movlw	0
  3833  0A9C  239F  3188         	fcall	_RfTrcvSetup
  3834                           
  3835                           ;main.c: 51: rfPkResets++;
  3836  0A9E  0020               	movlb	0	; select bank0
  3837  0A9F  0AAE               	incf	_rfPkResets,f	;volatile
  3838  0AA0                     l2526:	
  3839                           
  3840                           ;main.c: 52: }
  3841                           ;main.c: 54: } while (rfTrcvStatus.flags.msb.por || rfTrcvStatus.flags.msb.fifoTxRx);
  3842  0AA0  1F37               	btfss	_rfTrcvStatus,6
  3843  0AA1  1BB7               	btfsc	_rfTrcvStatus,7
  3844  0AA2  2A89               	goto	l644
  3845                           
  3846                           ;main.c: 56: return (PORTAbits.RA2 == 1) ? 1 : 0;
  3847  0AA3  0C0C               	rrf	12,w	;volatile
  3848  0AA4  0C89               	rrf	9,f
  3849  0AA5  3901               	andlw	1
  3850  0AA6  0008               	return
  3851  0AA7                     __end_of_mrf49XaIsr:	
  3852  0AA7                     __ptext2:	
  3853 ;; *************** function _RfHalStatemachine *****************
  3854 ;; Defined at:
  3855 ;;		line 379 in file "../../../src/rfstack/hal.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;		None
  3860 ;; Return value:  Size  Location     Type
  3861 ;;		None               void
  3862 ;; Registers used:
  3863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 1F/0
  3866 ;;		On exit  : 1F/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3869 ;;      Params:         0       0       0       0
  3870 ;;      Locals:         0       0       0       0
  3871 ;;      Temps:          0       1       0       0
  3872 ;;      Totals:         0       1       0       0
  3873 ;;Total ram usage:        1 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:   13
  3876 ;; This function calls:
  3877 ;;		_RfTrcvCrcTick
  3878 ;;		_RfTrcvGet
  3879 ;;		_RfTrcvMode
  3880 ;;		_RfTrcvPut
  3881 ;;		__CCBufWrByte
  3882 ;; This function is called by:
  3883 ;;		_mrf49XaIsr
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function _RfHalStatemachine
  3889  0AA7                     _RfHalStatemachine:	
  3890                           
  3891                           ;hal.c: 436: break;
  3892                           
  3893                           ;hal.c: 381: switch (rfStatus.isr.state)
  3894                           
  3895                           ;incstack = 0
  3896                           ; Regs used in _RfHalStatemachine: [allreg]
  3897  0AA7  0822               	movf	_rfStatus+2,w
  3898                           
  3899                           ; Switch size 1, requested type "space"
  3900                           ; Number of cases is 11, Range of values is 0 to 10
  3901                           ; switch strategies available:
  3902                           ; Name         Instructions Cycles
  3903                           ; direct_byte           28     6 (fixed)
  3904                           ; simple_byte           34    18 (average)
  3905                           ; jumptable            260     6 (fixed)
  3906                           ;	Chosen strategy is direct_byte
  3907  0AA8  0084               	movwf	4
  3908  0AA9  300B               	movlw	11
  3909  0AAA  0204               	subwf	4,w
  3910  0AAB  1803               	skipnc
  3911  0AAC  0008               	return
  3912  0AAD  3180               	movlp	high S3554
  3913  0AAE  3504               	lslf	4,w
  3914  0AAF  3E0F               	addlw	low S3554
  3915  0AB0  0082               	movwf	2
  3916  0AB1  0008               	return
  3917  0AB2                     l2996:	
  3918                           
  3919                           ;hal.c: 385: _CCBufWrByte(RfTrcvGet());
  3920  0AB2  22FF  3188         	fcall	_RfTrcvGet
  3921  0AB4  2B0B               	ljmp	__CCBufWrByte
  3922  0AB5                     l3000:	
  3923                           
  3924                           ;hal.c: 394: RfTrcvPut(0xAA);
  3925  0AB5  30AA               	movlw	170
  3926  0AB6                     L1:	
  3927  0AB6  22F6               	fcall	_RfTrcvPut
  3928  0AB7                     l2998:	
  3929                           ;hal.c: 386: break;
  3930                           
  3931                           
  3932                           ;hal.c: 390: rfStatus.isr.state++;
  3933  0AB7  0020               	movlb	0	; select bank0
  3934  0AB8  0AA2               	incf	_rfStatus+2,f
  3935                           
  3936                           ;hal.c: 391: break;
  3937  0AB9  0008               	return
  3938  0ABA                     l3004:	
  3939                           
  3940                           ;hal.c: 399: RfTrcvPut(0x2D);
  3941  0ABA  302D               	movlw	45
  3942  0ABB  2AB6               	goto	L1
  3943  0ABC                     l3008:	
  3944                           
  3945                           ;hal.c: 403: RfTrcvPut(0xD4);
  3946  0ABC  30D4               	movlw	212
  3947  0ABD  2AB6               	goto	L1
  3948  0ABE                     l3012:	
  3949                           
  3950                           ;hal.c: 407: RfTrcvPut(rfStatus.isr.txPacket->size);
  3951  0ABE  0821               	movf	_rfStatus+1,w
  3952  0ABF  3E1B               	addlw	27
  3953  0AC0  2AE9               	goto	L2
  3954  0AC1                     l3016:	
  3955                           
  3956                           ;hal.c: 411: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  3957  0AC1  0820               	movf	_rfStatus,w
  3958  0AC2  0721               	addwf	_rfStatus+1,w
  3959  0AC3  00BF               	movwf	??_RfHalStatemachine
  3960  0AC4  0A3F               	incf	??_RfHalStatemachine,w
  3961  0AC5  0086               	movwf	6
  3962  0AC6  0187               	clrf	7
  3963  0AC7  0801               	movf	1,w
  3964  0AC8  22F6  3188         	fcall	_RfTrcvPut
  3965                           
  3966                           ;hal.c: 412: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  3967  0ACA  0020               	movlb	0	; select bank0
  3968  0ACB  0821               	movf	_rfStatus+1,w
  3969  0ACC  3E19               	addlw	25
  3970  0ACD  0086               	movwf	6
  3971  0ACE  0187               	clrf	7
  3972  0ACF  0820               	movf	_rfStatus,w
  3973  0AD0  0721               	addwf	_rfStatus+1,w
  3974  0AD1  00BF               	movwf	??_RfHalStatemachine
  3975  0AD2  0084               	movwf	4
  3976  0AD3  0185               	clrf	5
  3977  0AD4  3F01               	moviw [1]fsr0
  3978  0AD5  00B9               	movwf	RfTrcvCrcTick@data
  3979  0AD6  0821               	movf	_rfStatus+1,w
  3980  0AD7  3E19               	addlw	25
  3981  0AD8  0084               	movwf	4
  3982  0AD9  0800               	movf	0,w
  3983  0ADA                     i1L__ptext23:	
  3984                           
  3985                           ;psect for function _RfTrcvCrcTick
  3986  0ADA                     i1L_RfTrcvCrcTick:	
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  3990                           ;RfTrcvCrcTick@initial stored from wreg
  3991  0ADA  00BA               	movwf	RfTrcvCrcTick@initial
  3992  0ADB                     i1Ll2628:	
  3993                           
  3994                           ;mrf49xa.c: 59: return (initial ^ data);
  3995  0ADB  083A               	movf	RfTrcvCrcTick@initial,w
  3996  0ADC  0639               	xorwf	RfTrcvCrcTick@data,w
  3997  0ADD                     i1Ll181:	
  3998  0ADD  0081               	movwf	1
  3999                           
  4000                           ;hal.c: 413: rfStatus.isr.byteCounter++;
  4001  0ADE  0AA0               	incf	_rfStatus,f
  4002                           
  4003                           ;hal.c: 414: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  4004  0ADF  2326  3188         	fcall	PL124	;call to abstracted procedure
  4005  0AE1  0220               	subwf	_rfStatus,w
  4006  0AE2  1C03               	skipc
  4007  0AE3  0008               	return
  4008                           
  4009                           ;hal.c: 415: rfStatus.isr.state = TX_CRC;
  4010  0AE4  3007               	movlw	7
  4011  0AE5  00A2               	movwf	_rfStatus+2
  4012  0AE6  0008               	return
  4013  0AE7                     l3026:	
  4014                           
  4015                           ;hal.c: 418: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  4016  0AE7  0821               	movf	_rfStatus+1,w
  4017  0AE8  3E19               	addlw	25
  4018  0AE9                     L2:	
  4019  0AE9  0086               	movwf	6
  4020  0AEA  0187               	clrf	7
  4021  0AEB  0801               	movf	1,w
  4022  0AEC  2AB6               	goto	L1
  4023  0AED                     l3030:	
  4024                           
  4025                           ;hal.c: 423: case TX_NULL2:
  4026                           ;hal.c: 424: RfTrcvPut(0);
  4027  0AED  3000               	movlw	0
  4028  0AEE  2AB6               	goto	L1
  4029  0AEF                     l3034:	
  4030                           
  4031                           ;hal.c: 428: RfTrcvPut(0);
  4032  0AEF  3000               	movlw	0
  4033  0AF0  22F6  3188         	fcall	_RfTrcvPut
  4034                           
  4035                           ;hal.c: 429: rfStatus.isr.state = RX_RECV;
  4036  0AF2  0020               	movlb	0	; select bank0
  4037  0AF3  3000               	movlw	0
  4038  0AF4  01A2               	clrf	_rfStatus+2
  4039                           
  4040                           ;hal.c: 435: RfTrcvMode(0);
  4041  0AF5  2EB8               	ljmp	_RfTrcvMode
  4042  0AF6                     __end_of_RfHalStatemachine:	
  4043  0AF6                     __ptext34:	
  4044 ;; *************** function _RfTrcvPut *****************
  4045 ;; Defined at:
  4046 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  byte            1    wreg     unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  byte            1    3[BANK0 ] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;		None               void
  4053 ;; Registers used:
  4054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 1D/0
  4057 ;;		On exit  : 1F/2
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4060 ;;      Params:         0       0       0       0
  4061 ;;      Locals:         0       1       0       0
  4062 ;;      Temps:          0       0       0       0
  4063 ;;      Totals:         0       1       0       0
  4064 ;;Total ram usage:        1 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:   10
  4067 ;; This function calls:
  4068 ;;		_MRF49XACommand
  4069 ;; This function is called by:
  4070 ;;		_RfTrcvSetup
  4071 ;;		_RfHalStatemachine
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _RfTrcvPut
  4077  0AF6                     _RfTrcvPut:	
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in _RfTrcvPut: [allreg]
  4081                           ;RfTrcvPut@byte stored from wreg
  4082  0AF6  0020               	movlb	0	; select bank0
  4083  0AF7  00BC               	movwf	RfTrcvPut@byte
  4084                           
  4085                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  4086  0AF8  00BA               	movwf	MRF49XACommand@cmd
  4087  0AF9  3000               	movlw	0
  4088  0AFA  01BB               	clrf	MRF49XACommand@cmd+1
  4089  0AFB  04BA               	iorwf	MRF49XACommand@cmd,f
  4090  0AFC  30B8               	movlw	184
  4091  0AFD  04BB               	iorwf	MRF49XACommand@cmd+1,f
  4092  0AFE  2C51               	ljmp	l2536
  4093  0AFF                     __end_of_RfTrcvPut:	
  4094  0AFF                     __ptext5:	
  4095 ;; *************** function _RfTrcvGet *****************
  4096 ;; Defined at:
  4097 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;		None
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  b               1    1[BANK0 ] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      unsigned char 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0, pclath, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 1F/0
  4108 ;;		On exit  : 1F/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4111 ;;      Params:         0       0       0       0
  4112 ;;      Locals:         0       1       0       0
  4113 ;;      Temps:          0       0       0       0
  4114 ;;      Totals:         0       1       0       0
  4115 ;;Total ram usage:        1 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    9
  4118 ;; This function calls:
  4119 ;;		_SPI_Read
  4120 ;;		_SPI_Write
  4121 ;; This function is called by:
  4122 ;;		_RfHalStatemachine
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _RfTrcvGet
  4128  0AFF                     _RfTrcvGet:	
  4129                           
  4130                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  4134  0AFF  0022               	movlb	2	; select bank2
  4135  0B00  130E               	bcf	14,6	;volatile
  4136                           
  4137                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  4138  0B01  30B0               	movlw	176
  4139  0B02  2466  3188         	fcall	_SPI_Write
  4140                           
  4141                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  4142  0B04  24BB               	fcall	_SPI_Read
  4143  0B05  00BA               	movwf	RfTrcvGet@b
  4144                           
  4145                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  4146  0B06  0022               	movlb	2	; select bank2
  4147  0B07  170E               	bsf	14,6	;volatile
  4148                           
  4149                           ;mrf49xa.c: 26: return b;
  4150  0B08  0020               	movlb	0	; select bank0
  4151  0B09  083A               	movf	RfTrcvGet@b,w
  4152  0B0A  0008               	return
  4153  0B0B                     __end_of_RfTrcvGet:	
  4154  0B0B                     __ptext3:	
  4155 ;; *************** function __CCBufWrByte *****************
  4156 ;; Defined at:
  4157 ;;		line 89 in file "../../../src/utilities/ccbuf_static.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  data            1    wreg     unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  data            1    4[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;		None               void
  4164 ;; Registers used:
  4165 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 1F/0
  4168 ;;		On exit  : 1F/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4171 ;;      Params:         0       0       0       0
  4172 ;;      Locals:         0       1       0       0
  4173 ;;      Temps:          0       1       0       0
  4174 ;;      Totals:         0       2       0       0
  4175 ;;Total ram usage:        2 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    9
  4178 ;; This function calls:
  4179 ;;		__CCBufCalcPt
  4180 ;;		__CCBufCanWr
  4181 ;; This function is called by:
  4182 ;;		_RfHalStatemachine
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           
  4187                           ;psect for function __CCBufWrByte
  4188  0B0B                     __CCBufWrByte:	
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in __CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4192                           ;__CCBufWrByte@data stored from wreg
  4193  0B0B  00BD               	movwf	__CCBufWrByte@data
  4194  0B0C                     i2L__ptext4:	
  4195                           ;ccbuf_static.c: 91: if (_CCBufCanWr())
  4196                           
  4197                           
  4198                           ;psect for function __CCBufCanWr
  4199  0B0C                     i2L__CCBufCanWr:	
  4200  0B0C                     i2Ll3132:	
  4201  0B0C  0846               	movf	_rfRxCC+2,w
  4202  0B0D  0647               	xorwf	_rfRxCC+3,w
  4203  0B0E  1D03               	btfss	3,2
  4204  0B0F  2B14               	ljmp	i2Ll3140
  4205  0B10  2B12               	ljmp	i2Ll3134
  4206  0B11                     i2Lu2281:	
  4207  0B11  2B14               	ljmp	i2Ll3140
  4208  0B12                     i2Lu2280:	
  4209  0B12                     i2Ll3134:	
  4210  0B12  3000               	movlw	0
  4211  0B13  2B15               	ljmp	iL8
  4212  0B14                     i2Ll3140:	
  4213                           
  4214                           ;ccbuf_static.c: 37: else return 1;
  4215  0B14  3001               	movlw	1
  4216  0B15                     i2Ll539:	
  4217  0B15                     iL8:	
  4218  0B15  3A00               	xorlw	0
  4219  0B16  1903               	skipnz
  4220  0B17  0008               	return
  4221  0B18  0846               	movf	_rfRxCC+2,w
  4222  0B19  0744               	addwf	_rfRxCC,w
  4223  0B1A  00BC               	movwf	??__CCBufWrByte
  4224  0B1B  0086               	movwf	6
  4225  0B1C  3001               	movlw	1	; select bank2/3
  4226  0B1D  0087               	movwf	7
  4227  0B1E  083D               	movf	__CCBufWrByte@data,w
  4228  0B1F  0081               	movwf	1
  4229  0B20  01B9               	clrf	__CCBufCalcPt@move
  4230  0B21  0AB9               	incf	__CCBufCalcPt@move,f
  4231  0B22  0846               	movf	_rfRxCC+2,w
  4232  0B23  2621               	fcall	__CCBufCalcPt
  4233  0B24  00C6               	movwf	_rfRxCC+2
  4234  0B25  0008               	return
  4235  0B26                     __end_of__CCBufWrByte:	
  4236  0B26                     PL124:	
  4237  0B26  0821               	movf	_rfStatus+1,w
  4238  0B27  3E1B               	addlw	27
  4239  0B28  0086               	movwf	6
  4240  0B29  0187               	clrf	7
  4241  0B2A  0801               	movf	1,w
  4242  0B2B  0008               	return
  4243  0B2C                     __end_ofPL124:	
  4244  0B2C                     start_initialization:	
  4245                           ; #config settings
  4246                           
  4247  0B2C                     __initialization:	
  4248                           
  4249                           ; Clear objects allocated to BANK0
  4250  0B2C  3020               	movlw	low __pbssBANK0
  4251  0B2D  0084               	movwf	4
  4252  0B2E  3000               	movlw	high __pbssBANK0
  4253  0B2F  0085               	movwf	5
  4254  0B30  3019               	movlw	25
  4255  0B31  3181  2105  3188   	fcall	clear_ram0
  4256                           
  4257                           ; Clear objects allocated to BANK1
  4258  0B34  30A0               	movlw	low __pbssBANK1
  4259  0B35  0084               	movwf	4
  4260  0B36  3000               	movlw	high __pbssBANK1
  4261  0B37  0085               	movwf	5
  4262  0B38  3038               	movlw	56
  4263  0B39  3181  2105  3188   	fcall	clear_ram0
  4264                           
  4265                           ; Clear objects allocated to BANK2
  4266  0B3C  3020               	movlw	low __pbssBANK2
  4267  0B3D  0084               	movwf	4
  4268  0B3E  3001               	movlw	high __pbssBANK2
  4269  0B3F  0085               	movwf	5
  4270  0B40  3030               	movlw	48
  4271  0B41  3181  2105  3188   	fcall	clear_ram0
  4272                           
  4273                           ;initializer for _rfRxCC
  4274  0B44  3020               	movlw	_rfRxBf& (0+255)
  4275  0B45  00C4               	movwf	__pdataBANK0& (0+127)
  4276  0B46  3030               	movlw	48
  4277  0B47  00C5               	movwf	(__pdataBANK0+1)& (0+127)
  4278  0B48  3000               	movlw	0
  4279  0B49  00C6               	movwf	(__pdataBANK0+2)& (0+127)
  4280  0B4A  00C7               	movwf	(__pdataBANK0+3)& (0+127)
  4281  0B4B                     end_of_initialization:	
  4282                           ;End of C runtime variable initialization code
  4283                           
  4284  0B4B                     __end_of__initialization:	
  4285  0B4B  0020               	movlb	0
  4286  0B4C  2B4D               	ljmp	_main	;jump to C main() function
  4287  0B4D                     __pmaintext:	
  4288 ;;
  4289 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4290 ;;
  4291 ;; *************** function _main *****************
  4292 ;; Defined at:
  4293 ;;		line 59 in file "../../../src/node/main.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;		None               void
  4300 ;; Registers used:
  4301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 17F/0
  4304 ;;		On exit  : 1F/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4307 ;;      Params:         0       0       0       0
  4308 ;;      Locals:         0       0       0       0
  4309 ;;      Temps:          0       0       0       0
  4310 ;;      Totals:         0       0       0       0
  4311 ;;Total ram usage:        0 bytes
  4312 ;; Hardware stack levels required when called:   15
  4313 ;; This function calls:
  4314 ;;		_AdcInit
  4315 ;;		_ExtIntInit
  4316 ;;		_MRF49XAInit
  4317 ;;		_RfHalInit
  4318 ;;		_RfHalTickRxTh
  4319 ;;		_RfHalTickTxTh
  4320 ;;		_RfPacketsTickTh
  4321 ;;		_RfTrcvSetup
  4322 ;;		_RfTrcvStatus
  4323 ;;		_SysInitGpio
  4324 ;;		_mrf49XaIsr
  4325 ;; This function is called by:
  4326 ;;		Startup code after reset
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _main
  4332  0B4D                     _main:	
  4333                           
  4334                           ;main.c: 62: OSCCON = 0b01111000;
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _main: [allreg]
  4338  0B4D  3078               	movlw	120
  4339  0B4E  0021               	movlb	1	; select bank1
  4340  0B4F  0099               	movwf	25	;volatile
  4341                           
  4342                           ;main.c: 64: SysInitGpio();
  4343  0B50  26CA  3188         	fcall	_SysInitGpio
  4344                           
  4345                           ;main.c: 65: AdcInit();
  4346  0B52  24F3  3188         	fcall	_AdcInit
  4347                           
  4348                           ;main.c: 67: ExtIntInit();
  4349  0B54  2502  3188         	fcall	_ExtIntInit
  4350                           
  4351                           ;main.c: 69: MRF49XAInit();
  4352  0B56  23D2  3188         	fcall	_MRF49XAInit
  4353                           
  4354                           ;main.c: 70: RfHalInit();
  4355  0B58  2507  3188         	fcall	_RfHalInit
  4356  0B5A                     l3154:	
  4357                           
  4358                           ;main.c: 73: {
  4359                           ;main.c: 74: if (PORTAbits.RA2 == 0) mrf49XaIsr();
  4360  0B5A  190C               	btfsc	12,2	;volatile
  4361  0B5B  2B5E               	goto	l656
  4362  0B5C  2289  3188         	fcall	_mrf49XaIsr
  4363  0B5E                     l656:	
  4364                           
  4365                           ;main.c: 76: RfHalTickRxTh(&halRxBfTh);
  4366  0B5E  3033               	movlw	_halRxBfTh& (0+255)
  4367  0B5F  2532  3188         	fcall	_RfHalTickRxTh
  4368                           
  4369                           ;main.c: 78: RfPacketsTickTh(&halPkTh);
  4370  0B61  3031               	movlw	_halPkTh& (0+255)
  4371  0B62  270B  3188         	fcall	_RfPacketsTickTh
  4372                           
  4373                           ;main.c: 80: RfHalTickTxTh(&halTxBfTh);
  4374  0B64  3035               	movlw	_halTxBfTh& (0+255)
  4375  0B65  2676  3188         	fcall	_RfHalTickTxTh
  4376                           
  4377                           ;main.c: 82: RfTrcvStatus();
  4378  0B67  245C  3188         	fcall	_RfTrcvStatus
  4379                           
  4380                           ;main.c: 83: if (rfTrcvStatus.flags.lsb.clockLock == 0 && rfStatus.inRx == 1)
  4381  0B69  0020               	movlb	0	; select bank0
  4382  0B6A  1B38               	btfsc	_rfTrcvStatus+1,6
  4383  0B6B  2B6F               	goto	l3170
  4384  0B6C  0B23               	decfsz	_rfStatus+3,w
  4385  0B6D  2B6F               	goto	l3170
  4386                           
  4387                           ;main.c: 84: worried++;
  4388  0B6E  0AB0               	incf	_worried,f
  4389  0B6F                     l3170:	
  4390                           
  4391                           ;main.c: 86: dl1 = 33;
  4392  0B6F  3021               	movlw	33
  4393  0B70  00A9               	movwf	_dl1
  4394                           
  4395                           ;main.c: 87: isr = 0;
  4396  0B71  01AB               	clrf	_isr	;volatile
  4397                           
  4398                           ;main.c: 88: while (dl1 > 0 && isr == 0)
  4399  0B72  2B7E               	goto	l3184
  4400  0B73                     l3174:	
  4401                           
  4402                           ;main.c: 89: {
  4403                           ;main.c: 90: dl2 = 0xFF;
  4404  0B73  30FF               	movlw	255
  4405  0B74  00AA               	movwf	_dl2
  4406                           
  4407                           ;main.c: 91: while (dl2 != 1 && isr == 0) dl2--;
  4408  0B75  2B77               	goto	l3178
  4409  0B76                     l3176:	
  4410  0B76  03AA               	decf	_dl2,f
  4411  0B77                     l3178:	
  4412  0B77  032A               	decf	_dl2,w
  4413  0B78  1903               	skipnz
  4414  0B79  2B7D               	goto	l3182
  4415  0B7A  082B               	movf	_isr,w	;volatile
  4416  0B7B  1903               	btfsc	3,2
  4417  0B7C  2B76               	goto	l3176
  4418  0B7D                     l3182:	
  4419                           
  4420                           ;main.c: 92: dl1--;
  4421  0B7D  03A9               	decf	_dl1,f
  4422  0B7E                     l3184:	
  4423  0B7E  0829               	movf	_dl1,w
  4424  0B7F  1903               	btfsc	3,2
  4425  0B80  2B84               	goto	l3188
  4426  0B81  082B               	movf	_isr,w	;volatile
  4427  0B82  1903               	btfsc	3,2
  4428  0B83  2B73               	goto	l3174
  4429  0B84                     l3188:	
  4430                           
  4431                           ;main.c: 93: }
  4432                           ;main.c: 95: if (isr == 0)
  4433  0B84  08AB               	movf	_isr,f	;volatile
  4434  0B85  1D03               	skipz
  4435  0B86  2B9C               	goto	l3206
  4436                           
  4437                           ;main.c: 96: {
  4438                           ;main.c: 97: RfTrcvStatus();
  4439  0B87  245C  3188         	fcall	_RfTrcvStatus
  4440                           
  4441                           ;main.c: 98: if (worried > 0 && rfTrcvStatus.flags.lsb.clockLock == 0 && rfStatus.inRx =
      +                          = 1)
  4442  0B89  0020               	movlb	0	; select bank0
  4443  0B8A  0830               	movf	_worried,w
  4444  0B8B  1D03               	skipz
  4445  0B8C  1B38               	btfsc	_rfTrcvStatus+1,6
  4446  0B8D  2B93               	goto	l3200
  4447  0B8E  0B23               	decfsz	_rfStatus+3,w
  4448  0B8F  2B93               	goto	l3200
  4449                           
  4450                           ;main.c: 99: {
  4451                           ;main.c: 100: RfTrcvSetup(0);
  4452  0B90  3000               	movlw	0
  4453  0B91  239F  3188         	fcall	_RfTrcvSetup
  4454  0B93                     l3200:	
  4455                           
  4456                           ;main.c: 101: }
  4457                           ;main.c: 103: if (rfTrcvStatus.byte[0] == 0)
  4458  0B93  0020               	movlb	0	; select bank0
  4459  0B94  08B7               	movf	_rfTrcvStatus,f
  4460  0B95  1D03               	skipz
  4461  0B96  2B9C               	goto	l3206
  4462                           
  4463                           ;main.c: 104: {
  4464                           ;main.c: 106: LATCbits.LATC1 = 0;
  4465  0B97  0022               	movlb	2	; select bank2
  4466  0B98  108E               	bcf	14,1	;volatile
  4467  0B99  0000               	nop	;# 
  4468                           
  4469                           ;main.c: 109: MRF49XAInit();
  4470  0B9A  23D2  3188         	fcall	_MRF49XAInit
  4471  0B9C                     l3206:	
  4472                           
  4473                           ;main.c: 110: }
  4474                           ;main.c: 111: }
  4475                           ;main.c: 112: worried = 0;
  4476  0B9C  0020               	movlb	0	; select bank0
  4477  0B9D  01B0               	clrf	_worried
  4478  0B9E  2B5A               	goto	l3154
  4479  0B9F                     __end_of_main:	
  4480  0B9F                     __ptext33:	
  4481 ;; *************** function _RfTrcvSetup *****************
  4482 ;; Defined at:
  4483 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  tx              1    wreg     unsigned char 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  tx              1    4[BANK0 ] unsigned char 
  4488 ;; Return value:  Size  Location     Type
  4489 ;;		None               void
  4490 ;; Registers used:
  4491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 1D/0
  4494 ;;		On exit  : 1F/2
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4497 ;;      Params:         0       0       0       0
  4498 ;;      Locals:         0       1       0       0
  4499 ;;      Temps:          0       0       0       0
  4500 ;;      Totals:         0       1       0       0
  4501 ;;Total ram usage:        1 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:   11
  4504 ;; This function calls:
  4505 ;;		_MRF49XACommand
  4506 ;;		_RfTrcvPut
  4507 ;; This function is called by:
  4508 ;;		_MRF49XAInit
  4509 ;;		_RfTrcvMode
  4510 ;;		_mrf49XaIsr
  4511 ;;		_main
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _RfTrcvSetup
  4517  0B9F                     _RfTrcvSetup:	
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _RfTrcvSetup: [allreg]
  4521                           ;RfTrcvSetup@tx stored from wreg
  4522  0B9F  0020               	movlb	0	; select bank0
  4523  0BA0  00BD               	movwf	RfTrcvSetup@tx
  4524                           
  4525                           ;mrf49xa.c: 63: if (tx)
  4526  0BA1  083D               	movf	RfTrcvSetup@tx,w
  4527  0BA2  1903               	btfsc	3,2
  4528  0BA3  2BB5               	goto	l2638
  4529                           
  4530                           ;mrf49xa.c: 64: {
  4531                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  4532  0BA4  3082               	movlw	130
  4533  0BA5  01BA               	clrf	MRF49XACommand@cmd
  4534  0BA6  00BB               	movwf	MRF49XACommand@cmd+1
  4535  0BA7  2451  3188         	fcall	_MRF49XACommand
  4536                           
  4537                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  4538  0BA9  30A8               	movlw	168
  4539  0BAA  26F6  3188         	fcall	PL128	;call to abstracted procedure
  4540  0BAC  2451  3188         	fcall	_MRF49XACommand
  4541                           
  4542                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  4543  0BAE  3020               	movlw	32
  4544  0BAF  26FB  3188         	fcall	PL130	;call to abstracted procedure
  4545  0BB1  2451  3188         	fcall	_MRF49XACommand
  4546                           
  4547                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  4548  0BB3  3055               	movlw	85
  4549  0BB4  2AF6               	ljmp	_RfTrcvPut
  4550  0BB5                     l2638:	
  4551                           ;mrf49xa.c: 71: }
  4552                           
  4553                           
  4554                           ;mrf49xa.c: 72: else
  4555                           ;mrf49xa.c: 73: {
  4556                           ;mrf49xa.c: 74: MRF49XACommand(0x8200);
  4557  0BB5  3000               	movlw	0
  4558  0BB6  00BA               	movwf	MRF49XACommand@cmd
  4559  0BB7  3082               	movlw	130
  4560  0BB8  00BB               	movwf	MRF49XACommand@cmd+1
  4561  0BB9  2451  3188         	fcall	_MRF49XACommand
  4562                           
  4563                           ;mrf49xa.c: 75: MRF49XACommand(0xCA81);
  4564  0BBB  3081               	movlw	129
  4565  0BBC  26F1  3188         	fcall	PL126	;call to abstracted procedure
  4566  0BBE  2451  3188         	fcall	_MRF49XACommand
  4567                           
  4568                           ;mrf49xa.c: 76: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  4569  0BC0  3028               	movlw	40
  4570  0BC1  26F6  3188         	fcall	PL128	;call to abstracted procedure
  4571  0BC3  2451  3188         	fcall	_MRF49XACommand
  4572                           
  4573                           ;mrf49xa.c: 77: MRF49XACommand(0x8200 | 0x0080);
  4574  0BC5  3080               	movlw	128
  4575  0BC6  26FB  3188         	fcall	PL130	;call to abstracted procedure
  4576  0BC8  2451  3188         	fcall	_MRF49XACommand
  4577                           
  4578                           ;mrf49xa.c: 78: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  4579  0BCA  3068               	movlw	104
  4580  0BCB  26F6  3188         	fcall	PL128	;call to abstracted procedure
  4581  0BCD  2451  3188         	fcall	_MRF49XACommand
  4582                           
  4583                           ;mrf49xa.c: 79: MRF49XACommand(0xCA81 | 0x0002);
  4584  0BCF  26E6  3188         	fcall	PL120	;call to abstracted procedure
  4585  0BD1  2C51               	ljmp	l2536
  4586  0BD2                     __end_of_RfTrcvSetup:	
  4587  0BD2                     __ptext32:	
  4588 ;; *************** function _MRF49XAInit *****************
  4589 ;; Defined at:
  4590 ;;		line 83 in file "../../../src/devices/mrf49xa.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;		None
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  j               1    6[BANK0 ] unsigned char 
  4595 ;;  i               1    5[BANK0 ] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;		None               void
  4598 ;; Registers used:
  4599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/1
  4602 ;;		On exit  : 1F/4
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4605 ;;      Params:         0       0       0       0
  4606 ;;      Locals:         0       2       0       0
  4607 ;;      Temps:          0       0       0       0
  4608 ;;      Totals:         0       2       0       0
  4609 ;;Total ram usage:        2 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:   12
  4612 ;; This function calls:
  4613 ;;		_MRF49XACommand
  4614 ;;		_RfTrcvSetup
  4615 ;; This function is called by:
  4616 ;;		_main
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           
  4621                           ;psect for function _MRF49XAInit
  4622  0BD2                     _MRF49XAInit:	
  4623                           
  4624                           ;mrf49xa.c: 86: UI08_t i, j;
  4625                           ;mrf49xa.c: 89: LATCbits.LATC1 = 1;
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _MRF49XAInit: [allreg]
  4629  0BD2  0022               	movlb	2	; select bank2
  4630  0BD3  148E               	bsf	14,1	;volatile
  4631                           
  4632                           ;mrf49xa.c: 90: LATAbits.LATA4 = 0;
  4633  0BD4  120C               	bcf	12,4	;volatile
  4634                           
  4635                           ;mrf49xa.c: 91: LATAbits.LATA5 = 0;
  4636  0BD5  128C               	bcf	12,5	;volatile
  4637  0BD6  0000               	nop	;# 
  4638                           
  4639                           ;mrf49xa.c: 93: LATAbits.LATA4 = 1;
  4640  0BD7  0022               	movlb	2	; select bank2
  4641  0BD8  160C               	bsf	12,4	;volatile
  4642                           
  4643                           ;mrf49xa.c: 94: LATAbits.LATA5 = 1;
  4644  0BD9  168C               	bsf	12,5	;volatile
  4645                           
  4646                           ;mrf49xa.c: 96: LATCbits.LATC4 = 1;
  4647  0BDA  160E               	bsf	14,4	;volatile
  4648                           
  4649                           ;mrf49xa.c: 101: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  4650  0BDB  0020               	movlb	0	; select bank0
  4651  0BDC  01BE               	clrf	MRF49XAInit@i
  4652  0BDD                     l2648:	
  4653  0BDD  01BF               	clrf	MRF49XAInit@j
  4654  0BDE                     l191:	
  4655  0BDE  0000               	nop	;# 
  4656  0BDF  2706  3188         	fcall	PL134	;call to abstracted procedure
  4657  0BE1  1C03               	skipc
  4658  0BE2  2BDE               	goto	l191
  4659  0BE3  30FA               	movlw	250
  4660  0BE4  0ABE               	incf	MRF49XAInit@i,f
  4661  0BE5  023E               	subwf	MRF49XAInit@i,w
  4662  0BE6  1C03               	skipc
  4663  0BE7  2BDD               	goto	l2648
  4664                           
  4665                           ;mrf49xa.c: 104: MRF49XACommand(0xCA81);
  4666  0BE8  3081               	movlw	129
  4667  0BE9  00BA               	movwf	MRF49XACommand@cmd
  4668  0BEA  30CA               	movlw	202
  4669  0BEB  00BB               	movwf	MRF49XACommand@cmd+1
  4670  0BEC  2451  3188         	fcall	_MRF49XACommand
  4671                           
  4672                           ;mrf49xa.c: 105: MRF49XACommand(0xCA81 | 0x0002);
  4673  0BEE  26E6  3188         	fcall	PL120	;call to abstracted procedure
  4674  0BF0  2451  3188         	fcall	_MRF49XACommand
  4675                           
  4676                           ;mrf49xa.c: 106: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  4677  0BF2  3028               	movlw	40
  4678  0BF3  26F6  3188         	fcall	PL128	;call to abstracted procedure
  4679  0BF5  2451  3188         	fcall	_MRF49XACommand
  4680                           
  4681                           ;mrf49xa.c: 107: MRF49XACommand(0xC4D7);
  4682  0BF7  30D7               	movlw	215
  4683  0BF8  0020               	movlb	0	; select bank0
  4684  0BF9  00BA               	movwf	MRF49XACommand@cmd
  4685  0BFA  30C4               	movlw	196
  4686  0BFB  00BB               	movwf	MRF49XACommand@cmd+1
  4687  0BFC  2451  3188         	fcall	_MRF49XACommand
  4688                           
  4689                           ;mrf49xa.c: 108: MRF49XACommand(0xA860);
  4690  0BFE  3060               	movlw	96
  4691  0BFF  0020               	movlb	0	; select bank0
  4692  0C00  00BA               	movwf	MRF49XACommand@cmd
  4693  0C01  30A8               	movlw	168
  4694  0C02  00BB               	movwf	MRF49XACommand@cmd+1
  4695  0C03  2451  3188         	fcall	_MRF49XACommand
  4696                           
  4697                           ;mrf49xa.c: 109: MRF49XACommand(0xC611);
  4698  0C05  3011               	movlw	17
  4699  0C06  0020               	movlb	0	; select bank0
  4700  0C07  00BA               	movwf	MRF49XACommand@cmd
  4701  0C08  30C6               	movlw	198
  4702  0C09  00BB               	movwf	MRF49XACommand@cmd+1
  4703  0C0A  2451  3188         	fcall	_MRF49XACommand
  4704                           
  4705                           ;mrf49xa.c: 110: MRF49XACommand(0x8200);
  4706  0C0C  3000               	movlw	0
  4707  0C0D  26FB  3188         	fcall	PL130	;call to abstracted procedure
  4708  0C0F  2451  3188         	fcall	_MRF49XACommand
  4709                           
  4710                           ;mrf49xa.c: 111: MRF49XACommand((0x9460 | 0x0000 | 0x0003));
  4711  0C11  3063               	movlw	99
  4712  0C12  0020               	movlb	0	; select bank0
  4713  0C13  00BA               	movwf	MRF49XACommand@cmd
  4714  0C14  3094               	movlw	148
  4715  0C15  00BB               	movwf	MRF49XACommand@cmd+1
  4716  0C16  2451  3188         	fcall	_MRF49XACommand
  4717                           
  4718                           ;mrf49xa.c: 112: MRF49XACommand(0x9890);
  4719  0C18  3090               	movlw	144
  4720  0C19  0020               	movlb	0	; select bank0
  4721  0C1A  00BA               	movwf	MRF49XACommand@cmd
  4722  0C1B  3098               	movlw	152
  4723  0C1C  00BB               	movwf	MRF49XACommand@cmd+1
  4724  0C1D  2451  3188         	fcall	_MRF49XACommand
  4725                           
  4726                           ;mrf49xa.c: 113: MRF49XACommand(0xC2AC);
  4727  0C1F  30AC               	movlw	172
  4728  0C20  0020               	movlb	0	; select bank0
  4729  0C21  00BA               	movwf	MRF49XACommand@cmd
  4730  0C22  30C2               	movlw	194
  4731  0C23  00BB               	movwf	MRF49XACommand@cmd+1
  4732  0C24  2451  3188         	fcall	_MRF49XACommand
  4733                           
  4734                           ;mrf49xa.c: 114: MRF49XACommand(0x8200 | 0x0020);
  4735  0C26  3020               	movlw	32
  4736  0C27  26FB  3188         	fcall	PL130	;call to abstracted procedure
  4737  0C29  2451  3188         	fcall	_MRF49XACommand
  4738                           
  4739                           ;mrf49xa.c: 119: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  4740  0C2B  0020               	movlb	0	; select bank0
  4741  0C2C  01BE               	clrf	MRF49XAInit@i
  4742  0C2D                     l2670:	
  4743  0C2D  01BF               	clrf	MRF49XAInit@j
  4744  0C2E                     l195:	
  4745  0C2E  0000               	nop	;# 
  4746  0C2F  2706  3188         	fcall	PL134	;call to abstracted procedure
  4747  0C31  1C03               	skipc
  4748  0C32  2C2E               	goto	l195
  4749  0C33  30FA               	movlw	250
  4750  0C34  0ABE               	incf	MRF49XAInit@i,f
  4751  0C35  023E               	subwf	MRF49XAInit@i,w
  4752  0C36  1C03               	skipc
  4753  0C37  2C2D               	goto	l2670
  4754                           
  4755                           ;mrf49xa.c: 122: MRF49XACommand(0x8200 | 0x0080);
  4756  0C38  3080               	movlw	128
  4757  0C39  00BA               	movwf	MRF49XACommand@cmd
  4758  0C3A  3082               	movlw	130
  4759  0C3B  00BB               	movwf	MRF49XACommand@cmd+1
  4760  0C3C  2451  3188         	fcall	_MRF49XACommand
  4761                           
  4762                           ;mrf49xa.c: 123: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  4763  0C3E  3068               	movlw	104
  4764  0C3F  26F6  3188         	fcall	PL128	;call to abstracted procedure
  4765  0C41  2451  3188         	fcall	_MRF49XACommand
  4766                           
  4767                           ;mrf49xa.c: 124: MRF49XACommand(0xCA81);
  4768  0C43  3081               	movlw	129
  4769  0C44  26F1  3188         	fcall	PL126	;call to abstracted procedure
  4770  0C46  2451  3188         	fcall	_MRF49XACommand
  4771                           
  4772                           ;mrf49xa.c: 125: MRF49XACommand(0xCA81 | 0x0002);
  4773  0C48  26E6  3188         	fcall	PL120	;call to abstracted procedure
  4774  0C4A  2451  3188         	fcall	_MRF49XACommand
  4775                           
  4776                           ;mrf49xa.c: 127: RfTrcvSetup(0);
  4777  0C4C  3000               	movlw	0
  4778  0C4D  239F               	fcall	_RfTrcvSetup
  4779                           
  4780                           ;mrf49xa.c: 135: WPUAbits.WPUA2 = 1;
  4781  0C4E  0024               	movlb	4	; select bank4
  4782  0C4F  150C               	bsf	12,2	;volatile
  4783  0C50  0008               	return
  4784  0C51                     __end_of_MRF49XAInit:	
  4785  0C51                     __ptext35:	
  4786 ;; *************** function _MRF49XACommand *****************
  4787 ;; Defined at:
  4788 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  cmd             2    1[BANK0 ] unsigned int 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0, pclath, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 1F/0
  4799 ;;		On exit  : 1F/2
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4802 ;;      Params:         0       2       0       0
  4803 ;;      Locals:         0       0       0       0
  4804 ;;      Temps:          0       0       0       0
  4805 ;;      Totals:         0       2       0       0
  4806 ;;Total ram usage:        2 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    9
  4809 ;; This function calls:
  4810 ;;		_SPI_Write
  4811 ;; This function is called by:
  4812 ;;		_RfTrcvPut
  4813 ;;		_RfTrcvSetup
  4814 ;;		_MRF49XAInit
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           
  4819                           ;psect for function _MRF49XACommand
  4820  0C51                     _MRF49XACommand:	
  4821  0C51                     l2536:	
  4822                           ;incstack = 0
  4823                           ; Regs used in _MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  4824                           
  4825                           
  4826                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  4827  0C51  0022               	movlb	2	; select bank2
  4828  0C52  130E               	bcf	14,6	;volatile
  4829                           
  4830                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  4831  0C53  0020               	movlb	0	; select bank0
  4832  0C54  083B               	movf	MRF49XACommand@cmd+1,w
  4833  0C55  2466  3188         	fcall	_SPI_Write
  4834                           
  4835                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  4836  0C57  0020               	movlb	0	; select bank0
  4837  0C58  083A               	movf	MRF49XACommand@cmd,w
  4838  0C59  2466               	fcall	_SPI_Write
  4839                           
  4840                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  4841  0C5A  170E               	bsf	14,6	;volatile
  4842  0C5B  0008               	return
  4843  0C5C                     __end_of_MRF49XACommand:	
  4844  0C5C                     __ptext14:	
  4845 ;; *************** function _RfTrcvStatus *****************
  4846 ;; Defined at:
  4847 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;		None
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;		None               void
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, pclath, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 1F/0
  4858 ;;		On exit  : 1F/2
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4861 ;;      Params:         0       0       0       0
  4862 ;;      Locals:         0       0       0       0
  4863 ;;      Temps:          0       0       0       0
  4864 ;;      Totals:         0       0       0       0
  4865 ;;Total ram usage:        0 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    9
  4868 ;; This function calls:
  4869 ;;		_SPI_Read
  4870 ;; This function is called by:
  4871 ;;		_RfTrcvCarrierPresent
  4872 ;;		_mrf49XaIsr
  4873 ;;		_main
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _RfTrcvStatus
  4879  0C5C                     _RfTrcvStatus:	
  4880                           
  4881                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _RfTrcvStatus: [wreg+status,2+pclath+cstack]
  4885  0C5C  0022               	movlb	2	; select bank2
  4886  0C5D  130E               	bcf	14,6	;volatile
  4887                           
  4888                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  4889  0C5E  24BB  3188         	fcall	_SPI_Read
  4890  0C60  00B7               	movwf	_rfTrcvStatus
  4891                           
  4892                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  4893  0C61  24BB               	fcall	_SPI_Read
  4894  0C62  00B8               	movwf	_rfTrcvStatus+1
  4895                           
  4896                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  4897  0C63  0022               	movlb	2	; select bank2
  4898  0C64  170E               	bsf	14,6	;volatile
  4899  0C65  0008               	return
  4900  0C66                     __end_of_RfTrcvStatus:	
  4901  0C66                     __ptext36:	
  4902 ;; *************** function _SPI_Write *****************
  4903 ;; Defined at:
  4904 ;;		line 191 in file "../../../src/devices/mrf49xa.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  data            1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  data            1    0[BANK0 ] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;		None               void
  4911 ;; Registers used:
  4912 ;;		wreg
  4913 ;; Tracked objects:
  4914 ;;		On entry : 1D/2
  4915 ;;		On exit  : 1F/2
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4918 ;;      Params:         0       0       0       0
  4919 ;;      Locals:         0       1       0       0
  4920 ;;      Temps:          0       0       0       0
  4921 ;;      Totals:         0       1       0       0
  4922 ;;Total ram usage:        1 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    8
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_RfTrcvGet
  4929 ;;		_MRF49XACommand
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           
  4934                           ;psect for function _SPI_Write
  4935  0C66                     _SPI_Write:	
  4936                           
  4937                           ;incstack = 0
  4938                           ; Regs used in _SPI_Write: [wreg]
  4939                           ;SPI_Write@data stored from wreg
  4940  0C66  0020               	movlb	0	; select bank0
  4941  0C67  00B9               	movwf	SPI_Write@data
  4942                           
  4943                           ;mrf49xa.c: 198: LATCbits.LATC7 = 0;
  4944  0C68  0022               	movlb	2	; select bank2
  4945  0C69  138E               	bcf	14,7	;volatile
  4946  0C6A  0020               	movlb	0	; select bank0
  4947  0C6B  1FB9               	btfss	SPI_Write@data,7
  4948  0C6C  2C70               	goto	l228
  4949  0C6D  0022               	movlb	2	; select bank2
  4950  0C6E  178D               	bsf	13,7	;volatile
  4951  0C6F  2C72               	goto	l229
  4952  0C70                     l228:	
  4953  0C70  0022               	movlb	2	; select bank2
  4954  0C71  138D               	bcf	13,7	;volatile
  4955  0C72                     l229:	
  4956  0C72  178E               	bsf	14,7	;volatile
  4957  0C73  138E               	bcf	14,7	;volatile
  4958  0C74  0020               	movlb	0	; select bank0
  4959  0C75  1F39               	btfss	SPI_Write@data,6
  4960  0C76  2C7A               	goto	l232
  4961  0C77  0022               	movlb	2	; select bank2
  4962  0C78  178D               	bsf	13,7	;volatile
  4963  0C79  2C7C               	goto	l233
  4964  0C7A                     l232:	
  4965  0C7A  0022               	movlb	2	; select bank2
  4966  0C7B  138D               	bcf	13,7	;volatile
  4967  0C7C                     l233:	
  4968  0C7C  178E               	bsf	14,7	;volatile
  4969  0C7D  138E               	bcf	14,7	;volatile
  4970  0C7E  0020               	movlb	0	; select bank0
  4971  0C7F  1EB9               	btfss	SPI_Write@data,5
  4972  0C80  2C84               	goto	l236
  4973  0C81  0022               	movlb	2	; select bank2
  4974  0C82  178D               	bsf	13,7	;volatile
  4975  0C83  2C86               	goto	l237
  4976  0C84                     l236:	
  4977  0C84  0022               	movlb	2	; select bank2
  4978  0C85  138D               	bcf	13,7	;volatile
  4979  0C86                     l237:	
  4980  0C86  178E               	bsf	14,7	;volatile
  4981  0C87  138E               	bcf	14,7	;volatile
  4982  0C88  0020               	movlb	0	; select bank0
  4983  0C89  1E39               	btfss	SPI_Write@data,4
  4984  0C8A  2C8E               	goto	l240
  4985  0C8B  0022               	movlb	2	; select bank2
  4986  0C8C  178D               	bsf	13,7	;volatile
  4987  0C8D  2C90               	goto	l241
  4988  0C8E                     l240:	
  4989  0C8E  0022               	movlb	2	; select bank2
  4990  0C8F  138D               	bcf	13,7	;volatile
  4991  0C90                     l241:	
  4992  0C90  178E               	bsf	14,7	;volatile
  4993  0C91  138E               	bcf	14,7	;volatile
  4994  0C92  0020               	movlb	0	; select bank0
  4995  0C93  1DB9               	btfss	SPI_Write@data,3
  4996  0C94  2C98               	goto	l244
  4997  0C95  0022               	movlb	2	; select bank2
  4998  0C96  178D               	bsf	13,7	;volatile
  4999  0C97  2C9A               	goto	l245
  5000  0C98                     l244:	
  5001  0C98  0022               	movlb	2	; select bank2
  5002  0C99  138D               	bcf	13,7	;volatile
  5003  0C9A                     l245:	
  5004  0C9A  178E               	bsf	14,7	;volatile
  5005  0C9B  138E               	bcf	14,7	;volatile
  5006  0C9C  0020               	movlb	0	; select bank0
  5007  0C9D  1D39               	btfss	SPI_Write@data,2
  5008  0C9E  2CA2               	goto	l248
  5009  0C9F  0022               	movlb	2	; select bank2
  5010  0CA0  178D               	bsf	13,7	;volatile
  5011  0CA1  2CA4               	goto	l249
  5012  0CA2                     l248:	
  5013  0CA2  0022               	movlb	2	; select bank2
  5014  0CA3  138D               	bcf	13,7	;volatile
  5015  0CA4                     l249:	
  5016  0CA4  178E               	bsf	14,7	;volatile
  5017  0CA5  138E               	bcf	14,7	;volatile
  5018  0CA6  0020               	movlb	0	; select bank0
  5019  0CA7  1CB9               	btfss	SPI_Write@data,1
  5020  0CA8  2CAC               	goto	l252
  5021  0CA9  0022               	movlb	2	; select bank2
  5022  0CAA  178D               	bsf	13,7	;volatile
  5023  0CAB  2CAE               	goto	l253
  5024  0CAC                     l252:	
  5025  0CAC  0022               	movlb	2	; select bank2
  5026  0CAD  138D               	bcf	13,7	;volatile
  5027  0CAE                     l253:	
  5028  0CAE  178E               	bsf	14,7	;volatile
  5029  0CAF  138E               	bcf	14,7	;volatile
  5030  0CB0  0020               	movlb	0	; select bank0
  5031  0CB1  1C39               	btfss	SPI_Write@data,0
  5032  0CB2  2CB6               	goto	l256
  5033  0CB3  0022               	movlb	2	; select bank2
  5034  0CB4  178D               	bsf	13,7	;volatile
  5035  0CB5  2CB8               	goto	l257
  5036  0CB6                     l256:	
  5037  0CB6  0022               	movlb	2	; select bank2
  5038  0CB7  138D               	bcf	13,7	;volatile
  5039  0CB8                     l257:	
  5040  0CB8  178E               	bsf	14,7	;volatile
  5041  0CB9  138E               	bcf	14,7	;volatile
  5042  0CBA  0008               	return
  5043  0CBB                     __end_of_SPI_Write:	
  5044  0CBB                     __ptext15:	
  5045 ;; *************** function _SPI_Read *****************
  5046 ;; Defined at:
  5047 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  data            1    0[BANK0 ] unsigned char 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      unsigned char 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2
  5056 ;; Tracked objects:
  5057 ;;		On entry : 1D/2
  5058 ;;		On exit  : 1F/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5061 ;;      Params:         0       0       0       0
  5062 ;;      Locals:         0       1       0       0
  5063 ;;      Temps:          0       0       0       0
  5064 ;;      Totals:         0       1       0       0
  5065 ;;Total ram usage:        1 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    8
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_RfTrcvGet
  5072 ;;		_RfTrcvStatus
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _SPI_Read
  5078  0CBB                     _SPI_Read:	
  5079                           
  5080                           ;mrf49xa.c: 150: UI08_t data = 0;
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _SPI_Read: [wreg+status,2]
  5084  0CBB  0020               	movlb	0	; select bank0
  5085  0CBC  01B9               	clrf	SPI_Read@data
  5086                           
  5087                           ;mrf49xa.c: 151: LATCbits.LATC7 = 0;
  5088  0CBD  0022               	movlb	2	; select bank2
  5089  0CBE  138E               	bcf	14,7	;volatile
  5090                           
  5091                           ;mrf49xa.c: 152: LATBbits.LATB7 = 0;
  5092  0CBF  138D               	bcf	13,7	;volatile
  5093  0CC0  0020               	movlb	0	; select bank0
  5094  0CC1  1A8E               	btfsc	14,5	;volatile
  5095  0CC2  17B9               	bsf	SPI_Read@data,7
  5096  0CC3  0022               	movlb	2	; select bank2
  5097  0CC4  178E               	bsf	14,7	;volatile
  5098  0CC5  138E               	bcf	14,7	;volatile
  5099                           
  5100                           ;mrf49xa.c: 159: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5101  0CC6  0020               	movlb	0	; select bank0
  5102  0CC7  1A8E               	btfsc	14,5	;volatile
  5103  0CC8  1739               	bsf	SPI_Read@data,6
  5104  0CC9  0022               	movlb	2	; select bank2
  5105  0CCA  178E               	bsf	14,7	;volatile
  5106  0CCB  138E               	bcf	14,7	;volatile
  5107                           
  5108                           ;mrf49xa.c: 160: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5109  0CCC  0020               	movlb	0	; select bank0
  5110  0CCD  1A8E               	btfsc	14,5	;volatile
  5111  0CCE  16B9               	bsf	SPI_Read@data,5
  5112  0CCF  0022               	movlb	2	; select bank2
  5113  0CD0  178E               	bsf	14,7	;volatile
  5114  0CD1  138E               	bcf	14,7	;volatile
  5115                           
  5116                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5117  0CD2  0020               	movlb	0	; select bank0
  5118  0CD3  1A8E               	btfsc	14,5	;volatile
  5119  0CD4  1639               	bsf	SPI_Read@data,4
  5120  0CD5  0022               	movlb	2	; select bank2
  5121  0CD6  178E               	bsf	14,7	;volatile
  5122  0CD7  138E               	bcf	14,7	;volatile
  5123                           
  5124                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5125  0CD8  0020               	movlb	0	; select bank0
  5126  0CD9  1A8E               	btfsc	14,5	;volatile
  5127  0CDA  15B9               	bsf	SPI_Read@data,3
  5128  0CDB  0022               	movlb	2	; select bank2
  5129  0CDC  178E               	bsf	14,7	;volatile
  5130  0CDD  138E               	bcf	14,7	;volatile
  5131                           
  5132                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5133  0CDE  0020               	movlb	0	; select bank0
  5134  0CDF  1A8E               	btfsc	14,5	;volatile
  5135  0CE0  1539               	bsf	SPI_Read@data,2
  5136  0CE1  0022               	movlb	2	; select bank2
  5137  0CE2  178E               	bsf	14,7	;volatile
  5138  0CE3  138E               	bcf	14,7	;volatile
  5139                           
  5140                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5141  0CE4  0020               	movlb	0	; select bank0
  5142  0CE5  1A8E               	btfsc	14,5	;volatile
  5143  0CE6  14B9               	bsf	SPI_Read@data,1
  5144  0CE7  0022               	movlb	2	; select bank2
  5145  0CE8  178E               	bsf	14,7	;volatile
  5146  0CE9  138E               	bcf	14,7	;volatile
  5147                           
  5148                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  5149  0CEA  0020               	movlb	0	; select bank0
  5150  0CEB  1A8E               	btfsc	14,5	;volatile
  5151  0CEC  1439               	bsf	SPI_Read@data,0
  5152  0CED  0022               	movlb	2	; select bank2
  5153  0CEE  178E               	bsf	14,7	;volatile
  5154  0CEF  138E               	bcf	14,7	;volatile
  5155                           
  5156                           ;mrf49xa.c: 188: return data;
  5157  0CF0  0020               	movlb	0	; select bank0
  5158  0CF1  0839               	movf	SPI_Read@data,w
  5159  0CF2  0008               	return
  5160  0CF3                     __end_of_SPI_Read:	
  5161  0CF3                     __ptext38:	
  5162 ;; *************** function _AdcInit *****************
  5163 ;; Defined at:
  5164 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;		None               void
  5171 ;; Registers used:
  5172 ;;		wreg, status,2
  5173 ;; Tracked objects:
  5174 ;;		On entry : 17F/2
  5175 ;;		On exit  : 17F/1
  5176 ;;		Unchanged: 160/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5178 ;;      Params:         0       0       0       0
  5179 ;;      Locals:         0       0       0       0
  5180 ;;      Temps:          0       0       0       0
  5181 ;;      Totals:         0       0       0       0
  5182 ;;Total ram usage:        0 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    8
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_main
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           
  5193                           ;psect for function _AdcInit
  5194  0CF3                     _AdcInit:	
  5195                           
  5196                           ;adc16.c: 6: ANSELA = 0;
  5197                           
  5198                           ;incstack = 0
  5199                           ; Regs used in _AdcInit: [wreg+status,2]
  5200  0CF3  0023               	movlb	3	; select bank3
  5201  0CF4  018C               	clrf	12	;volatile
  5202                           
  5203                           ;adc16.c: 7: ANSELB = 0;
  5204  0CF5  018D               	clrf	13	;volatile
  5205                           
  5206                           ;adc16.c: 8: ANSELC = 0;
  5207  0CF6  018E               	clrf	14	;volatile
  5208                           
  5209                           ;adc16.c: 10: FVRCON = 0b11100001;
  5210  0CF7  30E1               	movlw	225
  5211  0CF8  0022               	movlb	2	; select bank2
  5212  0CF9  0097               	movwf	23	;volatile
  5213                           
  5214                           ;adc16.c: 12: ADCON2 = 0b00000000;
  5215  0CFA  0021               	movlb	1	; select bank1
  5216  0CFB  019F               	clrf	31	;volatile
  5217                           
  5218                           ;adc16.c: 13: ADCON1 = 0b11110000;
  5219  0CFC  30F0               	movlw	240
  5220  0CFD  009E               	movwf	30	;volatile
  5221                           
  5222                           ;adc16.c: 14: ADCON0 = 0b00000000;
  5223  0CFE  019D               	clrf	29	;volatile
  5224                           
  5225                           ;adc16.c: 16: ADCON0 = 0b00010011;
  5226  0CFF  3013               	movlw	19
  5227  0D00  009D               	movwf	29	;volatile
  5228  0D01  0008               	return
  5229  0D02                     __end_of_AdcInit:	
  5230  0D02                     __ptext37:	
  5231 ;; *************** function _ExtIntInit *****************
  5232 ;; Defined at:
  5233 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		None
  5242 ;; Tracked objects:
  5243 ;;		On entry : 17F/1
  5244 ;;		On exit  : 17F/1
  5245 ;;		Unchanged: 160/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5247 ;;      Params:         0       0       0       0
  5248 ;;      Locals:         0       0       0       0
  5249 ;;      Temps:          0       0       0       0
  5250 ;;      Totals:         0       0       0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    8
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_main
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _ExtIntInit
  5263  0D02                     _ExtIntInit:	
  5264                           
  5265                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in _ExtIntInit: []
  5269  0D02  1315               	bcf	21,6	;volatile
  5270                           
  5271                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  5272  0D03  108B               	bcf	11,1	;volatile
  5273                           
  5274                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  5275  0D04  160B               	bsf	11,4	;volatile
  5276                           
  5277                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  5278  0D05  178B               	bsf	11,7	;volatile
  5279  0D06  0008               	return
  5280  0D07                     __end_of_ExtIntInit:	
  5281  0D07                     __ptext28:	
  5282 ;; *************** function _RfHalInit *****************
  5283 ;; Defined at:
  5284 ;;		line 40 in file "../../../src/rfstack/hal.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  i               1    6[BANK0 ] unsigned char 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;		None               void
  5291 ;; Registers used:
  5292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 1F/4
  5295 ;;		On exit  : 1F/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5298 ;;      Params:         0       0       0       0
  5299 ;;      Locals:         0       1       0       0
  5300 ;;      Temps:          0       0       0       0
  5301 ;;      Totals:         0       1       0       0
  5302 ;;Total ram usage:        1 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:   13
  5305 ;; This function calls:
  5306 ;;		_RfTrcvMode
  5307 ;;		__CCBufInit
  5308 ;; This function is called by:
  5309 ;;		_main
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           
  5314                           ;psect for function _RfHalInit
  5315  0D07                     _RfHalInit:	
  5316                           
  5317                           ;hal.c: 43: rfStatus.isr.byteCounter = 0;
  5318                           
  5319                           ;incstack = 0
  5320                           ; Regs used in _RfHalInit: [allreg]
  5321  0D07  0020               	movlb	0	; select bank0
  5322  0D08  30A0               	movlw	_rfPackets& (0+255)
  5323  0D09  01A0               	clrf	_rfStatus
  5324                           
  5325                           ;hal.c: 44: rfStatus.isr.txPacket = rfPackets;
  5326  0D0A  00A1               	movwf	_rfStatus+1
  5327                           
  5328                           ;hal.c: 45: rfStatus.isr.state = RX_RECV;
  5329  0D0B  01A2               	clrf	_rfStatus+2
  5330                           
  5331                           ;hal.c: 48: for (i = 0; i < 2 * sizeof(RfTransceiverPacket_t); i++)
  5332  0D0C  01BF               	clrf	RfHalInit@i
  5333  0D0D                     l2702:	
  5334                           
  5335                           ;hal.c: 49: ((UI08_t*) rfPackets)[i] = 0;
  5336  0D0D  083F               	movf	RfHalInit@i,w
  5337  0D0E  3EA0               	addlw	_rfPackets& (0+255)
  5338  0D0F  0086               	movwf	6
  5339  0D10  3038               	movlw	56
  5340  0D11  0187               	clrf	7
  5341  0D12  0181               	clrf	1
  5342  0D13  0ABF               	incf	RfHalInit@i,f
  5343  0D14  023F               	subwf	RfHalInit@i,w
  5344  0D15  1C03               	skipc
  5345  0D16  2D0D               	goto	l2702
  5346                           
  5347                           ;psect for function __CCBufInit
  5348                           
  5349                           ;hal.c: 51: _CCBufInit();
  5350  0D17                     i9L__CCBufInit:	
  5351  0D17                     i9Ll2714:	
  5352  0D17                     i10L__ptext30:	
  5353                           ;ccbuf_static.c: 7: _CCBufReset();
  5354                           
  5355                           
  5356                           ;psect for function __CCBufReset
  5357  0D17                     i10L__CCBufReset:	
  5358  0D17                     i10Ll3108:	
  5359  0D17  0845               	movf	_rfRxCC+1,w
  5360  0D18  00BA               	movwf	__CCBufReset@i
  5361  0D19  2D22               	ljmp	i10Ll3114
  5362  0D1A                     i10Ll3110:	
  5363                           
  5364                           ;ccbuf_static.c: 15: {
  5365                           ;ccbuf_static.c: 16: i--;
  5366  0D1A  03BA               	decf	__CCBufReset@i,f
  5367  0D1B                     i10Ll3112:	
  5368  0D1B  083A               	movf	__CCBufReset@i,w
  5369  0D1C  0744               	addwf	_rfRxCC,w
  5370  0D1D  00B9               	movwf	??__CCBufReset
  5371  0D1E  0086               	movwf	6
  5372  0D1F  3001               	movlw	1	; select bank2/3
  5373  0D20  0087               	movwf	7
  5374  0D21  0181               	clrf	1
  5375  0D22                     i10Ll3114:	
  5376  0D22  08BA               	movf	__CCBufReset@i,f
  5377  0D23  1D03               	btfss	3,2
  5378  0D24  2D1A               	ljmp	i10Ll3110
  5379  0D25  2D27               	ljmp	i10Ll3116
  5380  0D26                     i10Lu2261:	
  5381  0D26  2D1A               	ljmp	i10Ll3110
  5382  0D27                     i10Lu2260:	
  5383  0D27                     i10Ll3116:	
  5384  0D27  0845               	movf	_rfRxCC+1,w
  5385  0D28  3EFF               	addlw	255
  5386  0D29  00C7               	movwf	_rfRxCC+3
  5387  0D2A                     i10Ll3118:	
  5388  0D2A  01C6               	clrf	_rfRxCC+2
  5389  0D2B                     i10Ll526:	
  5390  0D2B  2D2C               	ljmp	iL70
  5391  0D2C                     i9Ll520:	
  5392  0D2C                     iL70:	
  5393  0D2C  3000               	movlw	0
  5394                           
  5395                           ;hal.c: 53: (&halRxBfTh)->lc = 0;;
  5396  0D2D  01B3               	clrf	_halRxBfTh
  5397  0D2E  01B4               	clrf	_halRxBfTh+1
  5398  0D2F  01B1               	clrf	_halPkTh
  5399  0D30  01B2               	clrf	_halPkTh+1
  5400                           
  5401                           ;hal.c: 56: RfTrcvMode(0);
  5402  0D31  2EB8               	ljmp	_RfTrcvMode
  5403  0D32                     __end_of_RfHalInit:	
  5404  0D32                     __ptext18:	
  5405 ;; *************** function _RfHalTickRxTh *****************
  5406 ;; Defined at:
  5407 ;;		line 99 in file "../../../src/rfstack/hal.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  pt              1    wreg     PTR struct pt
  5410 ;;		 -> halRxBfTh(2), 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  pt              1    8[BANK0 ] PTR struct pt
  5413 ;;		 -> halRxBfTh(2), 
  5414 ;;  pktLength       1    7[BANK0 ] unsigned char 
  5415 ;;  PT_YIELD_FLA    1    0        unsigned char 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      unsigned char 
  5418 ;; Registers used:
  5419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 1F/0
  5422 ;;		On exit  : 1E/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5425 ;;      Params:         0       0       0       0
  5426 ;;      Locals:         0       2       0       0
  5427 ;;      Temps:          0       2       0       0
  5428 ;;      Totals:         0       4       0       0
  5429 ;;Total ram usage:        4 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:   11
  5432 ;; This function calls:
  5433 ;;		_RfHalAnyFree
  5434 ;;		_RfHalGetFree
  5435 ;;		_RfHalGetReturn
  5436 ;;		_RfHalRxPut
  5437 ;;		_RfTrcvCrcTick
  5438 ;;		__CCBufCanRd
  5439 ;;		__CCBufRdByte
  5440 ;;		__CCBufRdReverse
  5441 ;; This function is called by:
  5442 ;;		_main
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           
  5447                           ;psect for function _RfHalTickRxTh
  5448  0D32                     _RfHalTickRxTh:	
  5449                           
  5450                           ;incstack = 0
  5451                           ; Regs used in _RfHalTickRxTh: [allreg]
  5452                           ;RfHalTickRxTh@pt stored from wreg
  5453  0D32  00C1               	movwf	RfHalTickRxTh@pt
  5454                           
  5455                           ;hal.c: 107: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  5456  0D33  0AA6               	incf	RfHalTickRxTh@rxByteTimeout,f
  5457  0D34  2E01               	goto	l2882
  5458  0D35                     l2794:	
  5459                           
  5460                           ;hal.c: 110: {
  5461                           ;hal.c: 111: if (packet == (0))
  5462  0D35  08A4               	movf	RfHalTickRxTh@packet,f
  5463  0D36  1D03               	skipz
  5464  0D37  2D46               	goto	l2804
  5465  0D38  0841               	movf	RfHalTickRxTh@pt,w
  5466  0D39  0086               	movwf	6
  5467  0D3A  3071               	movlw	113
  5468  0D3B  26EC  3188         	fcall	PL122	;call to abstracted procedure
  5469  0D3D                     l2798:	
  5470  0D3D  264A  3188         	fcall	_RfHalAnyFree
  5471  0D3F  3A01               	xorlw	1
  5472  0D40  1D03               	btfss	3,2
  5473  0D41  0008               	return
  5474                           
  5475                           ;hal.c: 114: packet = RfHalGetFree();
  5476  0D42  2653  3188         	fcall	_RfHalGetFree
  5477  0D44  0020               	movlb	0	; select bank0
  5478  0D45  00A4               	movwf	RfHalTickRxTh@packet
  5479  0D46                     l2804:	
  5480  0D46  0841               	movf	RfHalTickRxTh@pt,w
  5481  0D47  0086               	movwf	6
  5482  0D48  3076               	movlw	118
  5483  0D49  26EC  3188         	fcall	PL122	;call to abstracted procedure
  5484  0D4B                     l2806:	
  5485  0D4B                     i3L__ptext21:	
  5486                           
  5487                           ;psect for function __CCBufCanRd
  5488  0D4B                     i3L__CCBufCanRd:	
  5489  0D4B                     i3Ll2930:	
  5490  0D4B  01B9               	clrf	__CCBufCalcPt@move
  5491  0D4C  0AB9               	incf	__CCBufCalcPt@move,f
  5492  0D4D  0847               	movf	_rfRxCC+3,w
  5493  0D4E  2621  3188         	fcall	__CCBufCalcPt
  5494  0D50  0646               	xorwf	_rfRxCC+2,w
  5495  0D51  1D03               	btfss	3,2
  5496  0D52  2D57               	ljmp	i3Ll2938
  5497  0D53  2D55               	ljmp	i3Ll2932
  5498  0D54                     i3Lu2141:	
  5499  0D54  2D57               	ljmp	i3Ll2938
  5500  0D55                     i3Lu2140:	
  5501  0D55                     i3Ll2932:	
  5502  0D55  3000               	movlw	0
  5503  0D56  2D58               	ljmp	iL18
  5504  0D57                     i3Ll2938:	
  5505                           
  5506                           ;ccbuf_static.c: 51: else return 1;
  5507  0D57  3001               	movlw	1
  5508  0D58                     i3Ll547:	
  5509  0D58                     iL18:	
  5510  0D58  3800               	iorlw	0
  5511  0D59  1903               	btfsc	3,2
  5512  0D5A  0008               	return
  5513                           
  5514                           ;hal.c: 120: UI08_t pktLength = _CCBufRdByte();
  5515  0D5B  262D  3188         	fcall	__CCBufRdByte
  5516  0D5D  00C0               	movwf	RfHalTickRxTh@pktLength
  5517                           
  5518                           ;hal.c: 122: if (pktLength > 5 && pktLength <= sizeof(packet->data) + 1)
  5519  0D5E  3006               	movlw	6
  5520  0D5F  0240               	subwf	RfHalTickRxTh@pktLength,w
  5521  0D60  1C03               	skipc
  5522  0D61  2DFE               	goto	l2880
  5523  0D62  301A               	movlw	26
  5524  0D63  0240               	subwf	RfHalTickRxTh@pktLength,w
  5525  0D64  1803               	skipnc
  5526  0D65  2DFE               	goto	l2880
  5527                           
  5528                           ;hal.c: 123: {
  5529                           ;hal.c: 124: rfPk++;
  5530  0D66  0AAC               	incf	_rfPk,f	;volatile
  5531                           
  5532                           ;hal.c: 127: packet->size = pktLength - 1;
  5533  0D67  0824               	movf	RfHalTickRxTh@packet,w
  5534  0D68  3E1B               	addlw	27
  5535  0D69  0086               	movwf	6
  5536  0D6A  0187               	clrf	7
  5537  0D6B  0840               	movf	RfHalTickRxTh@pktLength,w
  5538  0D6C  3EFF               	addlw	255
  5539  0D6D  0081               	movwf	1
  5540                           
  5541                           ;hal.c: 128: packet->crcTx = 0;
  5542  0D6E  0824               	movf	RfHalTickRxTh@packet,w
  5543  0D6F  3E19               	addlw	25
  5544  0D70  0086               	movwf	6
  5545  0D71  0181               	clrf	1
  5546                           
  5547                           ;hal.c: 129: rxByteTimeout = 0;
  5548  0D72  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  5549                           
  5550                           ;hal.c: 132: for (pktRxByteIndex = 0; pktRxByteIndex < packet->size; pktRxByteIndex++)
  5551  0D73  01A5               	clrf	RfHalTickRxTh@pktRxByteIndex
  5552  0D74                     l2842:	
  5553  0D74  2700  3188         	fcall	PL132	;call to abstracted procedure
  5554  0D76  0225               	subwf	RfHalTickRxTh@pktRxByteIndex,w
  5555  0D77  1803               	btfsc	3,0
  5556  0D78  2DB7               	goto	l2844
  5557  0D79  0841               	movf	RfHalTickRxTh@pt,w
  5558  0D7A  0086               	movwf	6
  5559  0D7B  3086               	movlw	134
  5560  0D7C  3FC0               	movwi [0]fsr1
  5561  0D7D  3000               	movlw	0
  5562  0D7E  3FC1               	movwi [1]fsr1
  5563  0D7F                     l2824:	
  5564  0D7F                     i4L__ptext21:	
  5565                           
  5566                           ;psect for function __CCBufCanRd
  5567  0D7F                     i4L__CCBufCanRd:	
  5568  0D7F                     i4Ll2930:	
  5569  0D7F  01B9               	clrf	__CCBufCalcPt@move
  5570  0D80  0AB9               	incf	__CCBufCalcPt@move,f
  5571  0D81  0847               	movf	_rfRxCC+3,w
  5572  0D82  2621  3188         	fcall	__CCBufCalcPt
  5573  0D84  0646               	xorwf	_rfRxCC+2,w
  5574  0D85  1D03               	btfss	3,2
  5575  0D86  2D8B               	ljmp	i4Ll2938
  5576  0D87  2D89               	ljmp	i4Ll2932
  5577  0D88                     i4Lu2141:	
  5578  0D88  2D8B               	ljmp	i4Ll2938
  5579  0D89                     i4Lu2140:	
  5580  0D89                     i4Ll2932:	
  5581  0D89  3000               	movlw	0
  5582  0D8A  2D8C               	ljmp	iL28
  5583  0D8B                     i4Ll2938:	
  5584                           
  5585                           ;ccbuf_static.c: 51: else return 1;
  5586  0D8B  3001               	movlw	1
  5587  0D8C                     i4Ll547:	
  5588  0D8C                     iL28:	
  5589  0D8C  3800               	iorlw	0
  5590  0D8D  301A               	movlw	26
  5591  0D8E  1D03               	skipz
  5592  0D8F  2D94               	goto	L4
  5593  0D90  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5594  0D91  1C03               	btfss	3,0
  5595  0D92  0008               	return
  5596                           
  5597                           ;hal.c: 135: if(rxByteTimeout > 25) break;
  5598  0D93  301A               	movlw	26
  5599  0D94                     L4:	
  5600  0D94  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5601  0D95  1803               	btfsc	3,0
  5602  0D96  2DB7               	goto	l2844
  5603                           
  5604                           ;hal.c: 136: rxByteTimeout = 0;
  5605  0D97  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  5606                           
  5607                           ;hal.c: 137: packet->data[pktRxByteIndex] = _CCBufRdByte();
  5608  0D98  262D  3188         	fcall	__CCBufRdByte
  5609  0D9A  00BE               	movwf	??_RfHalTickRxTh
  5610  0D9B  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  5611  0D9C  0724               	addwf	RfHalTickRxTh@packet,w
  5612  0D9D  00BF               	movwf	??_RfHalTickRxTh+1
  5613  0D9E  0A3F               	incf	??_RfHalTickRxTh+1,w
  5614  0D9F  0086               	movwf	6
  5615  0DA0  0187               	clrf	7
  5616  0DA1  083E               	movf	??_RfHalTickRxTh,w
  5617  0DA2  0081               	movwf	1
  5618                           
  5619                           ;hal.c: 138: packet->crcTx = RfTrcvCrcTick(packet->crcTx, packet->data[pktRxByteIndex]);
  5620  0DA3  0824               	movf	RfHalTickRxTh@packet,w
  5621  0DA4  3E19               	addlw	25
  5622  0DA5  0086               	movwf	6
  5623  0DA6  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  5624  0DA7  0724               	addwf	RfHalTickRxTh@packet,w
  5625  0DA8  00BE               	movwf	??_RfHalTickRxTh
  5626  0DA9  0084               	movwf	4
  5627  0DAA  0185               	clrf	5
  5628  0DAB  3F01               	moviw [1]fsr0
  5629  0DAC  00B9               	movwf	RfTrcvCrcTick@data
  5630  0DAD  0824               	movf	RfHalTickRxTh@packet,w
  5631  0DAE  3E19               	addlw	25
  5632  0DAF  0084               	movwf	4
  5633  0DB0  0800               	movf	0,w
  5634  0DB1                     i5L__ptext23:	
  5635                           
  5636                           ;psect for function _RfTrcvCrcTick
  5637  0DB1                     i5L_RfTrcvCrcTick:	
  5638                           
  5639                           ;incstack = 0
  5640                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  5641                           ;RfTrcvCrcTick@initial stored from wreg
  5642  0DB1  00BA               	movwf	RfTrcvCrcTick@initial
  5643  0DB2                     i5Ll2628:	
  5644                           
  5645                           ;mrf49xa.c: 59: return (initial ^ data);
  5646  0DB2  083A               	movf	RfTrcvCrcTick@initial,w
  5647  0DB3  0639               	xorwf	RfTrcvCrcTick@data,w
  5648  0DB4                     i5Ll181:	
  5649  0DB4  0081               	movwf	1
  5650  0DB5  0AA5               	incf	RfHalTickRxTh@pktRxByteIndex,f
  5651  0DB6  2D74               	goto	l2842
  5652  0DB7                     l2844:	
  5653                           
  5654                           ;hal.c: 139: }
  5655                           ;hal.c: 141: if (pktRxByteIndex == packet->size)
  5656  0DB7  2700  3188         	fcall	PL132	;call to abstracted procedure
  5657  0DB9  0625               	xorwf	RfHalTickRxTh@pktRxByteIndex,w
  5658  0DBA  1D03               	skipz
  5659  0DBB  2DDF               	goto	l2856
  5660  0DBC  0841               	movf	RfHalTickRxTh@pt,w
  5661  0DBD  0086               	movwf	6
  5662  0DBE  3090               	movlw	144
  5663  0DBF  3FC0               	movwi [0]fsr1
  5664  0DC0  3000               	movlw	0
  5665  0DC1  3FC1               	movwi [1]fsr1
  5666  0DC2                     l2848:	
  5667  0DC2                     i6L__ptext21:	
  5668                           
  5669                           ;psect for function __CCBufCanRd
  5670  0DC2                     i6L__CCBufCanRd:	
  5671  0DC2                     i6Ll2930:	
  5672  0DC2  01B9               	clrf	__CCBufCalcPt@move
  5673  0DC3  0AB9               	incf	__CCBufCalcPt@move,f
  5674  0DC4  0847               	movf	_rfRxCC+3,w
  5675  0DC5  2621  3188         	fcall	__CCBufCalcPt
  5676  0DC7  0646               	xorwf	_rfRxCC+2,w
  5677  0DC8  1D03               	btfss	3,2
  5678  0DC9  2DCE               	ljmp	i6Ll2938
  5679  0DCA  2DCC               	ljmp	i6Ll2932
  5680  0DCB                     i6Lu2141:	
  5681  0DCB  2DCE               	ljmp	i6Ll2938
  5682  0DCC                     i6Lu2140:	
  5683  0DCC                     i6Ll2932:	
  5684  0DCC  3000               	movlw	0
  5685  0DCD  2DCF               	ljmp	iL44
  5686  0DCE                     i6Ll2938:	
  5687                           
  5688                           ;ccbuf_static.c: 51: else return 1;
  5689  0DCE  3001               	movlw	1
  5690  0DCF                     i6Ll547:	
  5691  0DCF                     iL44:	
  5692  0DCF  3800               	iorlw	0
  5693  0DD0  1D03               	skipz
  5694  0DD1  2DD6               	goto	l2854
  5695  0DD2  301A               	movlw	26
  5696  0DD3  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5697  0DD4  1C03               	btfss	3,0
  5698  0DD5  0008               	return
  5699  0DD6                     l2854:	
  5700                           
  5701                           ;hal.c: 145: packet->crcRx = _CCBufRdByte();
  5702  0DD6  262D  3188         	fcall	__CCBufRdByte
  5703  0DD8  00BE               	movwf	??_RfHalTickRxTh
  5704  0DD9  0824               	movf	RfHalTickRxTh@packet,w
  5705  0DDA  3E1A               	addlw	26
  5706  0DDB  0086               	movwf	6
  5707  0DDC  0187               	clrf	7
  5708  0DDD  083E               	movf	??_RfHalTickRxTh,w
  5709  0DDE  0081               	movwf	1
  5710  0DDF                     l2856:	
  5711                           
  5712                           ;hal.c: 146: }
  5713                           ;hal.c: 149: if(rxByteTimeout > 25)
  5714  0DDF  301A               	movlw	26
  5715  0DE0  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  5716  0DE1  1C03               	skipc
  5717  0DE2  2DF1               	goto	l2872
  5718                           
  5719                           ;hal.c: 150: {
  5720                           ;hal.c: 154: _CCBufRdReverse(pktRxByteIndex);
  5721  0DE3  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  5722  0DE4                     i7L__ptext19:	
  5723                           
  5724                           ;psect for function __CCBufRdReverse
  5725  0DE4                     i7L__CCBufRdReverse:	
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  5729                           ;__CCBufRdReverse@qty stored from wreg
  5730  0DE4  00BC               	movwf	__CCBufRdReverse@qty
  5731  0DE5                     i7Ll2956:	
  5732  0DE5  083C               	movf	__CCBufRdReverse@qty,w
  5733  0DE6  3C00               	sublw	0
  5734  0DE7  00B9               	movwf	__CCBufCalcPt@move
  5735  0DE8  0847               	movf	_rfRxCC+3,w
  5736  0DE9  2621  3188         	fcall	__CCBufCalcPt
  5737  0DEB  00C7               	movwf	_rfRxCC+3
  5738  0DEC                     i7Ll543:	
  5739                           
  5740                           ;hal.c: 155: RfHalGetReturn(packet);
  5741  0DEC  0824               	movf	RfHalTickRxTh@packet,w
  5742  0DED  265F  3188         	fcall	_RfHalGetReturn
  5743                           
  5744                           ;hal.c: 156: rfPkTime++;
  5745  0DEF  0AAF               	incf	_rfPkTime,f	;volatile
  5746                           
  5747                           ;hal.c: 157: }
  5748  0DF0  2D35               	goto	l2794
  5749  0DF1                     l2872:	
  5750  0DF1  0841               	movf	RfHalTickRxTh@pt,w
  5751  0DF2  0086               	movwf	6
  5752  0DF3  30AD               	movlw	173
  5753  0DF4  26EC  3188         	fcall	PL122	;call to abstracted procedure
  5754  0DF6                     l2874:	
  5755  0DF6  0824               	movf	RfHalTickRxTh@packet,w
  5756  0DF7  266A  3188         	fcall	_RfHalRxPut
  5757  0DF9  3800               	iorlw	0
  5758  0DFA  1903               	btfsc	3,2
  5759  0DFB  0008               	return
  5760                           
  5761                           ;hal.c: 175: packet = (0);
  5762  0DFC  01A4               	clrf	RfHalTickRxTh@packet
  5763  0DFD  2D35               	goto	l2794
  5764  0DFE                     l2880:	
  5765                           
  5766                           ;hal.c: 183: else
  5767                           ;hal.c: 184: {
  5768                           ;hal.c: 185: _CCBufRdByte();
  5769  0DFE  262D  3188         	fcall	__CCBufRdByte
  5770  0E00  2D35               	goto	l2794
  5771  0E01                     l2882:	
  5772  0E01  0841               	movf	RfHalTickRxTh@pt,w
  5773  0E02  0086               	movwf	6
  5774  0E03  0187               	clrf	7
  5775  0E04  3F40               	moviw [0]fsr1
  5776  0E05  00BE               	movwf	??_RfHalTickRxTh
  5777  0E06  3F41               	moviw [1]fsr1
  5778  0E07  00BF               	movwf	??_RfHalTickRxTh+1
  5779                           
  5780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5781                           ; Switch size 1, requested type "space"
  5782                           ; Number of cases is 1, Range of values is 0 to 0
  5783                           ; switch strategies available:
  5784                           ; Name         Instructions Cycles
  5785                           ; simple_byte            4     3 (average)
  5786                           ; direct_byte            8     6 (fixed)
  5787                           ; jumptable            260     6 (fixed)
  5788                           ;	Chosen strategy is simple_byte
  5789  0E08  1903               	skipnz
  5790  0E09  2E0B               	goto	l3560
  5791  0E0A  2E1F               	goto	l2884
  5792  0E0B                     l3560:	
  5793                           
  5794                           ; Switch size 1, requested type "space"
  5795                           ; Number of cases is 6, Range of values is 0 to 173
  5796                           ; switch strategies available:
  5797                           ; Name         Instructions Cycles
  5798                           ; simple_byte           19    10 (average)
  5799                           ; jumptable            260     6 (fixed)
  5800                           ;	Chosen strategy is simple_byte
  5801  0E0B  083E               	movf	??_RfHalTickRxTh,w
  5802  0E0C  3A00               	xorlw	0	; case 0
  5803  0E0D  1903               	skipnz
  5804  0E0E  2D35               	goto	l2794
  5805  0E0F  3A71               	xorlw	113	; case 113
  5806  0E10  1903               	skipnz
  5807  0E11  2D3D               	goto	l2798
  5808  0E12  3A07               	xorlw	7	; case 118
  5809  0E13  1903               	skipnz
  5810  0E14  2D4B               	goto	l2806
  5811  0E15  3AF0               	xorlw	240	; case 134
  5812  0E16  1903               	skipnz
  5813  0E17  2D7F               	goto	l2824
  5814  0E18  3A16               	xorlw	22	; case 144
  5815  0E19  1903               	skipnz
  5816  0E1A  2DC2               	goto	l2848
  5817  0E1B  3A3D               	xorlw	61	; case 173
  5818  0E1C  1903               	skipnz
  5819  0E1D  2DF6               	goto	l2874
  5820  0E1E  2E1F               	goto	l2884
  5821  0E1F                     l2884:	
  5822  0E1F  0841               	movf	RfHalTickRxTh@pt,w
  5823  0E20  2FAF               	ljmp	PL118	;call to abstracted procedure
  5824  0E21                     __end_of_RfHalTickRxTh:	
  5825  0E21                     __ptext22:	
  5826 ;; *************** function __CCBufCalcPt *****************
  5827 ;; Defined at:
  5828 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  entry           1    wreg     unsigned char 
  5831 ;;  move            1    0[BANK0 ] unsigned char 
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  entry           1    1[BANK0 ] unsigned char 
  5834 ;;  result          1    2[BANK0 ] unsigned char 
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      unsigned char 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0
  5839 ;; Tracked objects:
  5840 ;;		On entry : 1F/0
  5841 ;;		On exit  : 1F/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5844 ;;      Params:         0       1       0       0
  5845 ;;      Locals:         0       2       0       0
  5846 ;;      Temps:          0       0       0       0
  5847 ;;      Totals:         0       3       0       0
  5848 ;;Total ram usage:        3 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    8
  5851 ;; This function calls:
  5852 ;;		Nothing
  5853 ;; This function is called by:
  5854 ;;		__CCBufRdReverse
  5855 ;;		__CCBufCanRd
  5856 ;;		__CCBufRdByte
  5857 ;;		__CCBufWrByte
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function __CCBufCalcPt
  5863  0E21                     __CCBufCalcPt:	
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in __CCBufCalcPt: [wreg+status,2+status,0]
  5867                           ;__CCBufCalcPt@entry stored from wreg
  5868  0E21  00BA               	movwf	__CCBufCalcPt@entry
  5869                           
  5870                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  5871  0E22  0739               	addwf	__CCBufCalcPt@move,w
  5872  0E23  00BB               	movwf	__CCBufCalcPt@result
  5873  0E24                     l3126:	
  5874                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  5875                           
  5876  0E24  0845               	movf	_rfRxCC+1,w
  5877  0E25  023B               	subwf	__CCBufCalcPt@result,w
  5878  0E26  1C03               	btfss	3,0
  5879  0E27  2E2B               	goto	l3128
  5880  0E28  0845               	movf	_rfRxCC+1,w
  5881  0E29  02BB               	subwf	__CCBufCalcPt@result,f
  5882  0E2A  2E24               	goto	l3126
  5883  0E2B                     l3128:	
  5884                           
  5885                           ;ccbuf_static.c: 31: return (UI08_t) result;
  5886  0E2B  083B               	movf	__CCBufCalcPt@result,w
  5887  0E2C  0008               	return
  5888  0E2D                     __end_of__CCBufCalcPt:	
  5889  0E2D                     __ptext20:	
  5890 ;; *************** function __CCBufRdByte *****************
  5891 ;; Defined at:
  5892 ;;		line 54 in file "../../../src/utilities/ccbuf_static.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;		None
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  res             1    4[BANK0 ] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  1    wreg      unsigned char 
  5899 ;; Registers used:
  5900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5901 ;; Tracked objects:
  5902 ;;		On entry : 1F/0
  5903 ;;		On exit  : 1F/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5906 ;;      Params:         0       0       0       0
  5907 ;;      Locals:         0       1       0       0
  5908 ;;      Temps:          0       1       0       0
  5909 ;;      Totals:         0       2       0       0
  5910 ;;Total ram usage:        2 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:   10
  5913 ;; This function calls:
  5914 ;;		__CCBufCalcPt
  5915 ;;		__CCBufCanRd
  5916 ;; This function is called by:
  5917 ;;		_RfHalTickRxTh
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           
  5922                           ;psect for function __CCBufRdByte
  5923  0E2D                     __CCBufRdByte:	
  5924  0E2D                     i8L__ptext21:	
  5925                           ;ccbuf_static.c: 56: if (_CCBufCanRd())
  5926                           
  5927                           ;incstack = 0
  5928                           ; Regs used in __CCBufRdByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5929                           
  5930                           
  5931                           ;psect for function __CCBufCanRd
  5932  0E2D                     i8L__CCBufCanRd:	
  5933  0E2D                     i8Ll2930:	
  5934  0E2D  01B9               	clrf	__CCBufCalcPt@move
  5935  0E2E  0AB9               	incf	__CCBufCalcPt@move,f
  5936  0E2F  0847               	movf	_rfRxCC+3,w
  5937  0E30  2621  3188         	fcall	__CCBufCalcPt
  5938  0E32  0646               	xorwf	_rfRxCC+2,w
  5939  0E33  1D03               	btfss	3,2
  5940  0E34  2E39               	ljmp	i8Ll2938
  5941  0E35  2E37               	ljmp	i8Ll2932
  5942  0E36                     i8Lu2141:	
  5943  0E36  2E39               	ljmp	i8Ll2938
  5944  0E37                     i8Lu2140:	
  5945  0E37                     i8Ll2932:	
  5946  0E37  3000               	movlw	0
  5947  0E38  2E3A               	ljmp	iL60
  5948  0E39                     i8Ll2938:	
  5949                           
  5950                           ;ccbuf_static.c: 51: else return 1;
  5951  0E39  3001               	movlw	1
  5952  0E3A                     i8Ll547:	
  5953  0E3A                     iL60:	
  5954  0E3A  3A00               	xorlw	0
  5955  0E3B  1903               	skipnz
  5956  0E3C  3400               	retlw	0
  5957  0E3D  01B9               	clrf	__CCBufCalcPt@move
  5958  0E3E  0AB9               	incf	__CCBufCalcPt@move,f
  5959  0E3F  0847               	movf	_rfRxCC+3,w
  5960  0E40  2621               	fcall	__CCBufCalcPt
  5961  0E41  00C7               	movwf	_rfRxCC+3
  5962  0E42  0744               	addwf	_rfRxCC,w
  5963  0E43  00BC               	movwf	??__CCBufRdByte
  5964  0E44  0086               	movwf	6
  5965  0E45  3001               	movlw	1	; select bank2/3
  5966  0E46  0087               	movwf	7
  5967  0E47  0801               	movf	1,w
  5968  0E48  00BD               	movwf	__CCBufRdByte@res
  5969                           
  5970                           ;ccbuf_static.c: 61: return res;
  5971  0E49  0008               	return
  5972  0E4A                     __end_of__CCBufRdByte:	
  5973                           ;ccbuf_static.c: 62: }
  5974                           ;ccbuf_static.c: 63: return 0;
  5975                           
  5976  0E4A                     __ptext27:	
  5977 ;; *************** function _RfHalAnyFree *****************
  5978 ;; Defined at:
  5979 ;;		line 202 in file "../../../src/rfstack/hal.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;		None
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      unsigned char 
  5986 ;; Registers used:
  5987 ;;		wreg
  5988 ;; Tracked objects:
  5989 ;;		On entry : 1F/0
  5990 ;;		On exit  : 1F/1
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5993 ;;      Params:         0       0       0       0
  5994 ;;      Locals:         0       0       0       0
  5995 ;;      Temps:          0       0       0       0
  5996 ;;      Totals:         0       0       0       0
  5997 ;;Total ram usage:        0 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:    8
  6000 ;; This function calls:
  6001 ;;		Nothing
  6002 ;; This function is called by:
  6003 ;;		_RfHalTickRxTh
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           
  6008                           ;psect for function _RfHalAnyFree
  6009  0E4A                     _RfHalAnyFree:	
  6010                           
  6011                           ;hal.c: 207: if ((rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  6012                           ;hal.c: 208: || (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0))
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in _RfHalAnyFree: [wreg]
  6016  0E4A  0021               	movlb	1	; select bank1
  6017  0E4B  1AA0               	btfsc	_rfPackets^(0+128),5
  6018  0E4C  2E4F               	goto	l402
  6019  0E4D  1DA0               	btfss	_rfPackets^(0+128),3
  6020  0E4E  3401               	retlw	1
  6021  0E4F                     l402:	
  6022  0E4F  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  6023  0E50  19A0               	btfsc	_rfPackets^(0+128),3
  6024  0E51  3400               	retlw	0
  6025                           
  6026                           ;hal.c: 209: return 1;
  6027  0E52  3401               	retlw	1
  6028  0E53                     __end_of_RfHalAnyFree:	
  6029                           ;hal.c: 210: else
  6030                           ;hal.c: 211: return 0;
  6031                           
  6032  0E53                     __ptext26:	
  6033 ;; *************** function _RfHalGetFree *****************
  6034 ;; Defined at:
  6035 ;;		line 215 in file "../../../src/rfstack/hal.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;		None
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      PTR struct RfTransceiver
  6042 ;; Registers used:
  6043 ;;		wreg
  6044 ;; Tracked objects:
  6045 ;;		On entry : 1F/1
  6046 ;;		On exit  : 1F/1
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6049 ;;      Params:         0       0       0       0
  6050 ;;      Locals:         0       0       0       0
  6051 ;;      Temps:          0       0       0       0
  6052 ;;      Totals:         0       0       0       0
  6053 ;;Total ram usage:        0 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:    8
  6056 ;; This function calls:
  6057 ;;		Nothing
  6058 ;; This function is called by:
  6059 ;;		_RfHalTickRxTh
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           
  6064                           ;psect for function _RfHalGetFree
  6065  0E53                     _RfHalGetFree:	
  6066                           
  6067                           ;hal.c: 230: if (rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in _RfHalGetFree: [wreg]
  6071  0E53  1EA0               	btfss	_rfPackets^(0+128),5
  6072  0E54  19A0               	btfsc	_rfPackets^(0+128),3
  6073  0E55  2E59               	goto	l407
  6074  0E56  30A0               	movlw	_rfPackets& (0+255)
  6075                           
  6076                           ;hal.c: 231: {
  6077                           ;hal.c: 232: rfPackets[0].flags.acq = 1;
  6078  0E57  15A0               	bsf	_rfPackets^(0+128),3
  6079                           
  6080                           ;hal.c: 233: return &(rfPackets[0]);
  6081  0E58  0008               	return
  6082  0E59                     l407:	
  6083                           
  6084                           ;hal.c: 234: }
  6085                           ;hal.c: 235: if (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  6086  0E59  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  6087  0E5A  19A0               	btfsc	_rfPackets^(0+128),3
  6088  0E5B  3400               	retlw	0
  6089  0E5C  30BC               	movlw	(_rfPackets+28)& (0+255)
  6090                           
  6091                           ;hal.c: 236: {
  6092                           ;hal.c: 237: rfPackets[0].flags.acq = 1;
  6093  0E5D  15A0               	bsf	_rfPackets^(0+128),3
  6094                           
  6095                           ;hal.c: 238: return &(rfPackets[1]);
  6096  0E5E  0008               	return
  6097  0E5F                     __end_of_RfHalGetFree:	
  6098                           ;hal.c: 239: }
  6099                           ;hal.c: 240: return 0;
  6100                           
  6101  0E5F                     __ptext25:	
  6102 ;; *************** function _RfHalGetReturn *****************
  6103 ;; Defined at:
  6104 ;;		line 195 in file "../../../src/rfstack/hal.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  packet          1    wreg     PTR struct RfTransceiver
  6107 ;;		 -> NULL(0), rfPackets(56), 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  6110 ;;		 -> NULL(0), rfPackets(56), 
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg, fsr1l, fsr1h
  6115 ;; Tracked objects:
  6116 ;;		On entry : 1F/0
  6117 ;;		On exit  : 1F/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6120 ;;      Params:         0       0       0       0
  6121 ;;      Locals:         0       1       0       0
  6122 ;;      Temps:          0       0       0       0
  6123 ;;      Totals:         0       1       0       0
  6124 ;;Total ram usage:        1 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    8
  6127 ;; This function calls:
  6128 ;;		Nothing
  6129 ;; This function is called by:
  6130 ;;		_RfHalTickTxTh
  6131 ;;		_RfHalTickRxTh
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           
  6136                           ;psect for function _RfHalGetReturn
  6137  0E5F                     _RfHalGetReturn:	
  6138                           
  6139                           ;incstack = 0
  6140                           ; Regs used in _RfHalGetReturn: [wregfsr1]
  6141                           ;RfHalGetReturn@packet stored from wreg
  6142  0E5F  00B9               	movwf	RfHalGetReturn@packet
  6143                           
  6144                           ;hal.c: 197: packet->flags.acq = 0;
  6145  0E60  0086               	movwf	6
  6146  0E61  0187               	clrf	7
  6147  0E62  1181               	bcf	1,3
  6148                           
  6149                           ;hal.c: 198: packet->flags.tx = 0;
  6150  0E63  0839               	movf	RfHalGetReturn@packet,w
  6151  0E64  0086               	movwf	6
  6152  0E65  1201               	bcf	1,4
  6153                           
  6154                           ;hal.c: 199: packet->flags.proc = PCKT_NO_PROC;
  6155  0E66  0839               	movf	RfHalGetReturn@packet,w
  6156  0E67  0086               	movwf	6
  6157  0E68  1281               	bcf	1,5
  6158  0E69  0008               	return
  6159  0E6A                     __end_of_RfHalGetReturn:	
  6160  0E6A                     __ptext24:	
  6161 ;; *************** function _RfHalRxPut *****************
  6162 ;; Defined at:
  6163 ;;		line 244 in file "../../../src/rfstack/hal.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  packet          1    wreg     PTR struct RfTransceiver
  6166 ;;		 -> NULL(0), rfPackets(56), 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  6169 ;;		 -> NULL(0), rfPackets(56), 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      unsigned char 
  6172 ;; Registers used:
  6173 ;;		wreg, fsr1l, fsr1h
  6174 ;; Tracked objects:
  6175 ;;		On entry : 1F/0
  6176 ;;		On exit  : 1F/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6179 ;;      Params:         0       0       0       0
  6180 ;;      Locals:         0       1       0       0
  6181 ;;      Temps:          0       0       0       0
  6182 ;;      Totals:         0       1       0       0
  6183 ;;Total ram usage:        1 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    8
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_RfHalTickRxTh
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _RfHalRxPut
  6195  0E6A                     _RfHalRxPut:	
  6196                           
  6197                           ;incstack = 0
  6198                           ; Regs used in _RfHalRxPut: [wregfsr1]
  6199                           ;RfHalRxPut@packet stored from wreg
  6200  0E6A  00B9               	movwf	RfHalRxPut@packet
  6201                           
  6202                           ;hal.c: 263: packet->flags.proc = PCKT_NEED_PROC;
  6203  0E6B  0086               	movwf	6
  6204  0E6C  0187               	clrf	7
  6205  0E6D  1681               	bsf	1,5
  6206                           
  6207                           ;hal.c: 264: packet->flags.acq = 0;
  6208  0E6E  0839               	movf	RfHalRxPut@packet,w
  6209  0E6F  0086               	movwf	6
  6210  0E70  1181               	bcf	1,3
  6211                           
  6212                           ;hal.c: 265: packet->flags.tx = 0;
  6213  0E71  0839               	movf	RfHalRxPut@packet,w
  6214  0E72  0086               	movwf	6
  6215  0E73  3001               	movlw	1
  6216  0E74  1201               	bcf	1,4
  6217                           
  6218                           ;hal.c: 266: return 1;
  6219  0E75  0008               	return
  6220  0E76                     __end_of_RfHalRxPut:	
  6221  0E76                     __ptext12:	
  6222 ;; *************** function _RfHalTickTxTh *****************
  6223 ;; Defined at:
  6224 ;;		line 71 in file "../../../src/rfstack/hal.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  pt              1    wreg     PTR struct pt
  6227 ;;		 -> halTxBfTh(2), 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  pt              1    8[BANK0 ] PTR struct pt
  6230 ;;		 -> halTxBfTh(2), 
  6231 ;;  PT_YIELD_FLA    1    0        unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      unsigned char 
  6234 ;; Registers used:
  6235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 1F/0
  6238 ;;		On exit  : 1F/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6241 ;;      Params:         0       0       0       0
  6242 ;;      Locals:         0       1       0       0
  6243 ;;      Temps:          0       2       0       0
  6244 ;;      Totals:         0       3       0       0
  6245 ;;Total ram usage:        3 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:   13
  6248 ;; This function calls:
  6249 ;;		_RfHalGetReturn
  6250 ;;		_RfHalTxGet
  6251 ;;		_RfTrcvCarrierPresent
  6252 ;;		_RfTrcvMode
  6253 ;; This function is called by:
  6254 ;;		_main
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           
  6259                           ;psect for function _RfHalTickTxTh
  6260  0E76                     _RfHalTickTxTh:	
  6261                           
  6262                           ;incstack = 0
  6263                           ; Regs used in _RfHalTickTxTh: [allreg]
  6264                           ;RfHalTickTxTh@pt stored from wreg
  6265  0E76  00C1               	movwf	RfHalTickTxTh@pt
  6266  0E77  2E9E               	goto	l2752
  6267  0E78                     l2728:	
  6268  0E78  0841               	movf	RfHalTickTxTh@pt,w
  6269  0E79  0086               	movwf	6
  6270  0E7A  304F               	movlw	79
  6271  0E7B  26EC  3188         	fcall	PL122	;call to abstracted procedure
  6272  0E7D                     l2730:	
  6273  0E7D  27B5  3188         	fcall	_RfHalTxGet
  6274  0E7F  3A01               	xorlw	1
  6275  0E80  1D03               	btfss	3,2
  6276  0E81  0008               	return
  6277  0E82                     l2734:	
  6278                           ;hal.c: 81: do
  6279                           
  6280  0E82  0841               	movf	RfHalTickTxTh@pt,w
  6281  0E83  0086               	movwf	6
  6282  0E84  3053               	movlw	83
  6283  0E85  26EC  3188         	fcall	PL122	;call to abstracted procedure
  6284  0E87                     l2736:	
  6285  0E87  26C5  3188         	fcall	_RfTrcvCarrierPresent
  6286  0E89  3A00               	xorlw	0
  6287  0E8A  1D03               	btfss	3,2
  6288  0E8B  0008               	return
  6289                           
  6290                           ;hal.c: 84: } while (rfStatus.isr.state != RX_RECV);
  6291  0E8C  08A2               	movf	_rfStatus+2,f
  6292  0E8D  1D03               	skipz
  6293  0E8E  2E82               	goto	l2734
  6294                           
  6295                           ;hal.c: 87: RfTrcvMode(1);
  6296  0E8F  3001               	movlw	1
  6297  0E90  26B8  3188         	fcall	_RfTrcvMode
  6298  0E92  0841               	movf	RfHalTickTxTh@pt,w
  6299  0E93  0086               	movwf	6
  6300  0E94  305A               	movlw	90
  6301  0E95  26EC  3188         	fcall	PL122	;call to abstracted procedure
  6302  0E97                     l2746:	
  6303  0E97  0822               	movf	_rfStatus+2,w
  6304  0E98  1D03               	skipz
  6305  0E99  0008               	return
  6306                           
  6307                           ;hal.c: 92: RfHalGetReturn(rfStatus.isr.txPacket);
  6308  0E9A  0821               	movf	_rfStatus+1,w
  6309  0E9B  265F  3188         	fcall	_RfHalGetReturn
  6310  0E9D  2E78               	goto	l2728
  6311  0E9E                     l2752:	
  6312  0E9E  0841               	movf	RfHalTickTxTh@pt,w
  6313  0E9F  0086               	movwf	6
  6314  0EA0  0187               	clrf	7
  6315  0EA1  3F40               	moviw [0]fsr1
  6316  0EA2  00BF               	movwf	??_RfHalTickTxTh
  6317  0EA3  3F41               	moviw [1]fsr1
  6318  0EA4  00C0               	movwf	??_RfHalTickTxTh+1
  6319                           
  6320                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6321                           ; Switch size 1, requested type "space"
  6322                           ; Number of cases is 1, Range of values is 0 to 0
  6323                           ; switch strategies available:
  6324                           ; Name         Instructions Cycles
  6325                           ; simple_byte            4     3 (average)
  6326                           ; direct_byte            8     6 (fixed)
  6327                           ; jumptable            260     6 (fixed)
  6328                           ;	Chosen strategy is simple_byte
  6329  0EA5  1903               	skipnz
  6330  0EA6  2EA8               	goto	l3558
  6331  0EA7  2EB6               	goto	l2754
  6332  0EA8                     l3558:	
  6333                           
  6334                           ; Switch size 1, requested type "space"
  6335                           ; Number of cases is 4, Range of values is 0 to 90
  6336                           ; switch strategies available:
  6337                           ; Name         Instructions Cycles
  6338                           ; simple_byte           13     7 (average)
  6339                           ; direct_byte          188     6 (fixed)
  6340                           ; jumptable            260     6 (fixed)
  6341                           ;	Chosen strategy is simple_byte
  6342  0EA8  083F               	movf	??_RfHalTickTxTh,w
  6343  0EA9  3A00               	xorlw	0	; case 0
  6344  0EAA  1903               	skipnz
  6345  0EAB  2E78               	goto	l2728
  6346  0EAC  3A4F               	xorlw	79	; case 79
  6347  0EAD  1903               	skipnz
  6348  0EAE  2E7D               	goto	l2730
  6349  0EAF  3A1C               	xorlw	28	; case 83
  6350  0EB0  1903               	skipnz
  6351  0EB1  2E87               	goto	l2736
  6352  0EB2  3A09               	xorlw	9	; case 90
  6353  0EB3  1903               	skipnz
  6354  0EB4  2E97               	goto	l2746
  6355  0EB5  2EB6               	goto	l2754
  6356  0EB6                     l2754:	
  6357  0EB6  0841               	movf	RfHalTickTxTh@pt,w
  6358  0EB7  2FAF               	ljmp	PL118	;call to abstracted procedure
  6359  0EB8                     __end_of_RfHalTickTxTh:	
  6360  0EB8                     __ptext31:	
  6361 ;; *************** function _RfTrcvMode *****************
  6362 ;; Defined at:
  6363 ;;		line 59 in file "../../../src/rfstack/hal.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  tx              1    wreg     unsigned char 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;  tx              1    5[BANK0 ] unsigned char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 1F/0
  6374 ;;		On exit  : 1F/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6377 ;;      Params:         0       0       0       0
  6378 ;;      Locals:         0       1       0       0
  6379 ;;      Temps:          0       0       0       0
  6380 ;;      Totals:         0       1       0       0
  6381 ;;Total ram usage:        1 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:   12
  6384 ;; This function calls:
  6385 ;;		_RfTrcvSetup
  6386 ;; This function is called by:
  6387 ;;		_RfHalInit
  6388 ;;		_RfHalTickTxTh
  6389 ;;		_RfHalStatemachine
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _RfTrcvMode
  6395  0EB8                     _RfTrcvMode:	
  6396                           
  6397                           ;incstack = 0
  6398                           ; Regs used in _RfTrcvMode: [allreg]
  6399                           ;RfTrcvMode@tx stored from wreg
  6400  0EB8  00BE               	movwf	RfTrcvMode@tx
  6401                           
  6402                           ;hal.c: 61: rfStatus.inRx = 1 - tx;
  6403  0EB9  3C01               	sublw	1
  6404  0EBA  00A3               	movwf	_rfStatus+3
  6405                           
  6406                           ;hal.c: 62: RfTrcvSetup(tx);
  6407  0EBB  083E               	movf	RfTrcvMode@tx,w
  6408  0EBC  239F  3188         	fcall	_RfTrcvSetup
  6409                           
  6410                           ;hal.c: 64: if (tx == 1)
  6411  0EBE  0020               	movlb	0	; select bank0
  6412  0EBF  0B3E               	decfsz	RfTrcvMode@tx,w
  6413  0EC0  0008               	return
  6414                           
  6415                           ;hal.c: 65: {
  6416                           ;hal.c: 66: rfStatus.isr.state = TX_PREAMBLE1;
  6417  0EC1  01A2               	clrf	_rfStatus+2
  6418  0EC2  0AA2               	incf	_rfStatus+2,f
  6419                           
  6420                           ;hal.c: 67: rfStatus.isr.byteCounter = 0;
  6421  0EC3  01A0               	clrf	_rfStatus
  6422  0EC4  0008               	return
  6423  0EC5                     __end_of_RfTrcvMode:	
  6424  0EC5                     __ptext13:	
  6425 ;; *************** function _RfTrcvCarrierPresent *****************
  6426 ;; Defined at:
  6427 ;;		line 51 in file "../../../src/devices/mrf49xa.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;		None
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;		None
  6432 ;; Return value:  Size  Location     Type
  6433 ;;                  1    wreg      unsigned char 
  6434 ;; Registers used:
  6435 ;;		wreg, status,2, status,0, pclath, cstack
  6436 ;; Tracked objects:
  6437 ;;		On entry : 1F/0
  6438 ;;		On exit  : 1F/0
  6439 ;;		Unchanged: 0/0
  6440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6441 ;;      Params:         0       0       0       0
  6442 ;;      Locals:         0       0       0       0
  6443 ;;      Temps:          0       0       0       0
  6444 ;;      Totals:         0       0       0       0
  6445 ;;Total ram usage:        0 bytes
  6446 ;; Hardware stack levels used:    1
  6447 ;; Hardware stack levels required when called:   10
  6448 ;; This function calls:
  6449 ;;		_RfTrcvStatus
  6450 ;; This function is called by:
  6451 ;;		_RfHalTickTxTh
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           
  6456                           ;psect for function _RfTrcvCarrierPresent
  6457  0EC5                     _RfTrcvCarrierPresent:	
  6458                           
  6459                           ;mrf49xa.c: 53: RfTrcvStatus();
  6460                           
  6461                           ;incstack = 0
  6462                           ; Regs used in _RfTrcvCarrierPresent: [wreg+status,2+status,0+pclath+cstack]
  6463  0EC5  245C               	fcall	_RfTrcvStatus
  6464                           
  6465                           ;mrf49xa.c: 54: return rfTrcvStatus.flags.msb.signalPresent;
  6466  0EC6  0020               	movlb	0	; select bank0
  6467  0EC7  0837               	movf	_rfTrcvStatus,w
  6468  0EC8  3901               	andlw	1
  6469  0EC9  0008               	return
  6470  0ECA                     __end_of_RfTrcvCarrierPresent:	
  6471  0ECA                     __ptext6:	
  6472 ;; *************** function _SysInitGpio *****************
  6473 ;; Defined at:
  6474 ;;		line 14 in file "../../../src/node/main.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		None
  6483 ;; Tracked objects:
  6484 ;;		On entry : 17F/1
  6485 ;;		On exit  : 17F/2
  6486 ;;		Unchanged: 160/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6488 ;;      Params:         0       0       0       0
  6489 ;;      Locals:         0       0       0       0
  6490 ;;      Temps:          0       0       0       0
  6491 ;;      Totals:         0       0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    8
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_main
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function _SysInitGpio
  6504  0ECA                     _SysInitGpio:	
  6505                           
  6506                           ;incstack = 0
  6507                           ; Regs used in _SysInitGpio: []
  6508                           ;main.c: 16: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  6509  0ECA  150C               	bsf	12,2	;volatile
  6510  0ECB  120C               	bcf	12,4	;volatile
  6511  0ECC  128C               	bcf	12,5	;volatile
  6512  0ECD  0022               	movlb	2	; select bank2
  6513  0ECE  120C               	bcf	12,4	;volatile
  6514  0ECF  128C               	bcf	12,5	;volatile
  6515                           
  6516                           ;main.c: 17: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  6517  0ED0  0021               	movlb	1	; select bank1
  6518  0ED1  120D               	bcf	13,4	;volatile
  6519  0ED2  130D               	bcf	13,6	;volatile
  6520  0ED3  138D               	bcf	13,7	;volatile
  6521  0ED4  168D               	bsf	13,5	;volatile
  6522                           
  6523                           ;main.c: 18: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  6524  0ED5  108E               	bcf	14,1	;volatile
  6525  0ED6  110E               	bcf	14,2	;volatile
  6526  0ED7  120E               	bcf	14,4	;volatile
  6527  0ED8  130E               	bcf	14,6	;volatile
  6528  0ED9  138E               	bcf	14,7	;volatile
  6529  0EDA  140E               	bsf	14,0	;volatile
  6530  0EDB  158E               	bsf	14,3	;volatile
  6531  0EDC  168E               	bsf	14,5	;volatile
  6532  0EDD  0022               	movlb	2	; select bank2
  6533  0EDE  108E               	bcf	14,1	;volatile
  6534  0EDF  110E               	bcf	14,2	;volatile
  6535  0EE0  120E               	bcf	14,4	;volatile
  6536  0EE1  170E               	bsf	14,6	;volatile
  6537  0EE2  138E               	bcf	14,7	;volatile
  6538                           
  6539                           ;main.c: 20: LATCbits.LATC1 = 0;
  6540  0EE3  108E               	bcf	14,1	;volatile
  6541                           
  6542                           ;main.c: 21: LATCbits.LATC2 = 0;
  6543  0EE4  110E               	bcf	14,2	;volatile
  6544  0EE5  0008               	return
  6545  0EE6                     __end_of_SysInitGpio:	
  6546  0EE6                     PL120:	
  6547  0EE6  3083               	movlw	131
  6548  0EE7  0020               	movlb	0	; select bank0
  6549  0EE8  00BA               	movwf	MRF49XACommand@cmd
  6550  0EE9  30CA               	movlw	202
  6551  0EEA  00BB               	movwf	MRF49XACommand@cmd+1
  6552  0EEB  0008               	return
  6553  0EEC                     __end_ofPL120:	
  6554  0EEC                     PL122:	
  6555  0EEC  0187               	clrf	7
  6556  0EED  3FC0               	movwi [0]fsr1
  6557  0EEE  3000               	movlw	0
  6558  0EEF  3FC1               	movwi [1]fsr1
  6559  0EF0  0008               	return
  6560  0EF1                     __end_ofPL122:	
  6561  0EF1                     PL126:	
  6562  0EF1  0020               	movlb	0	; select bank0
  6563  0EF2  00BA               	movwf	MRF49XACommand@cmd
  6564  0EF3  30CA               	movlw	202
  6565  0EF4  00BB               	movwf	MRF49XACommand@cmd+1
  6566  0EF5  0008               	return
  6567  0EF6                     __end_ofPL126:	
  6568  0EF6                     PL128:	
  6569  0EF6  0020               	movlb	0	; select bank0
  6570  0EF7  00BA               	movwf	MRF49XACommand@cmd
  6571  0EF8  3080               	movlw	128
  6572  0EF9  00BB               	movwf	MRF49XACommand@cmd+1
  6573  0EFA  0008               	return
  6574  0EFB                     __end_ofPL128:	
  6575  0EFB                     PL130:	
  6576  0EFB  0020               	movlb	0	; select bank0
  6577  0EFC  00BA               	movwf	MRF49XACommand@cmd
  6578  0EFD  3082               	movlw	130
  6579  0EFE  00BB               	movwf	MRF49XACommand@cmd+1
  6580  0EFF  0008               	return
  6581  0F00                     __end_ofPL130:	
  6582  0F00                     PL132:	
  6583  0F00  0824               	movf	RfHalTickRxTh@packet,w
  6584  0F01  3E1B               	addlw	27
  6585  0F02  0086               	movwf	6
  6586  0F03  0187               	clrf	7
  6587  0F04  0801               	movf	1,w
  6588  0F05  0008               	return
  6589  0F06                     __end_ofPL132:	
  6590  0F06                     PL134:	
  6591  0F06  0020               	movlb	0	; select bank0
  6592  0F07  30FA               	movlw	250
  6593  0F08  0ABF               	incf	MRF49XAInit@j,f
  6594  0F09  023F               	subwf	MRF49XAInit@j,w
  6595  0F0A  0008               	return
  6596  0F0B                     __end_ofPL134:	
  6597  0F0B                     __ptext7:	
  6598 ;; *************** function _RfPacketsTickTh *****************
  6599 ;; Defined at:
  6600 ;;		line 158 in file "../../../src/rfstack/packets.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  pt              1    wreg     PTR struct pt
  6603 ;;		 -> halPkTh(2), 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  pt              1   10[BANK0 ] PTR struct pt
  6606 ;;		 -> halPkTh(2), 
  6607 ;;  PT_YIELD_FLA    1    0        unsigned char 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      unsigned char 
  6610 ;; Registers used:
  6611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 1E/0
  6614 ;;		On exit  : 1F/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6617 ;;      Params:         0       0       0       0
  6618 ;;      Locals:         0       1       0       0
  6619 ;;      Temps:          0       2       0       0
  6620 ;;      Totals:         0       3       0       0
  6621 ;;Total ram usage:        3 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:   11
  6624 ;; This function calls:
  6625 ;;		_RfHalRxGet
  6626 ;;		_RfPacketsHandleClient
  6627 ;; This function is called by:
  6628 ;;		_main
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           
  6633                           ;psect for function _RfPacketsTickTh
  6634  0F0B                     _RfPacketsTickTh:	
  6635                           
  6636                           ;incstack = 0
  6637                           ; Regs used in _RfPacketsTickTh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6638                           ;RfPacketsTickTh@pt stored from wreg
  6639  0F0B  0020               	movlb	0	; select bank0
  6640  0F0C  00C3               	movwf	RfPacketsTickTh@pt
  6641                           
  6642                           ;packets.c: 165: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  6643  0F0D  0AA8               	incf	RfPacketsTickTh@timeout,f
  6644  0F0E  2F27               	goto	l3098
  6645  0F0F                     l3082:	
  6646  0F0F  0843               	movf	RfPacketsTickTh@pt,w
  6647  0F10  0086               	movwf	6
  6648  0F11  30AA               	movlw	170
  6649  0F12  26EC  3188         	fcall	PL122	;call to abstracted procedure
  6650  0F14                     l3084:	
  6651  0F14  273B  3188         	fcall	_RfHalRxGet
  6652  0F16  0020               	movlb	0	; select bank0
  6653  0F17  00A7               	movwf	RfPacketsTickTh@packet
  6654  0F18  08A7               	movf	RfPacketsTickTh@packet,f
  6655  0F19  1D03               	skipz
  6656  0F1A  2F1F               	goto	l3090
  6657  0F1B  301A               	movlw	26
  6658  0F1C  0228               	subwf	RfPacketsTickTh@timeout,w
  6659  0F1D  1C03               	btfss	3,0
  6660  0F1E  0008               	return
  6661  0F1F                     l3090:	
  6662                           
  6663                           ;packets.c: 172: if (packet)
  6664  0F1F  0827               	movf	RfPacketsTickTh@packet,w
  6665  0F20  1903               	btfsc	3,2
  6666  0F21  2F25               	goto	l3096
  6667                           
  6668                           ;packets.c: 173: {
  6669                           ;packets.c: 184: RfPacketsHandleClient(packet);
  6670  0F22  0827               	movf	RfPacketsTickTh@packet,w
  6671  0F23  2748  3188         	fcall	_RfPacketsHandleClient
  6672  0F25                     l3096:	
  6673                           
  6674                           ;packets.c: 195: }
  6675                           ;packets.c: 197: timeout = 0;
  6676  0F25  01A8               	clrf	RfPacketsTickTh@timeout
  6677  0F26  2F0F               	goto	l3082
  6678  0F27                     l3098:	
  6679  0F27  0843               	movf	RfPacketsTickTh@pt,w
  6680  0F28  0086               	movwf	6
  6681  0F29  0187               	clrf	7
  6682  0F2A  3F40               	moviw [0]fsr1
  6683  0F2B  00C1               	movwf	??_RfPacketsTickTh
  6684  0F2C  3F41               	moviw [1]fsr1
  6685  0F2D  00C2               	movwf	??_RfPacketsTickTh+1
  6686                           
  6687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6688                           ; Switch size 1, requested type "space"
  6689                           ; Number of cases is 1, Range of values is 0 to 0
  6690                           ; switch strategies available:
  6691                           ; Name         Instructions Cycles
  6692                           ; simple_byte            4     3 (average)
  6693                           ; direct_byte            8     6 (fixed)
  6694                           ; jumptable            260     6 (fixed)
  6695                           ;	Chosen strategy is simple_byte
  6696  0F2E  1903               	skipnz
  6697  0F2F  2F31               	goto	l3556
  6698  0F30  2F39               	goto	l3100
  6699  0F31                     l3556:	
  6700                           
  6701                           ; Switch size 1, requested type "space"
  6702                           ; Number of cases is 2, Range of values is 0 to 170
  6703                           ; switch strategies available:
  6704                           ; Name         Instructions Cycles
  6705                           ; simple_byte            7     4 (average)
  6706                           ; jumptable            260     6 (fixed)
  6707                           ;	Chosen strategy is simple_byte
  6708  0F31  0841               	movf	??_RfPacketsTickTh,w
  6709  0F32  3A00               	xorlw	0	; case 0
  6710  0F33  1903               	skipnz
  6711  0F34  2F0F               	goto	l3082
  6712  0F35  3AAA               	xorlw	170	; case 170
  6713  0F36  1903               	skipnz
  6714  0F37  2F14               	goto	l3084
  6715  0F38  2F39               	goto	l3100
  6716  0F39                     l3100:	
  6717  0F39  0843               	movf	RfPacketsTickTh@pt,w
  6718  0F3A  2FAF               	ljmp	PL118	;call to abstracted procedure
  6719  0F3B                     __end_of_RfPacketsTickTh:	
  6720  0F3B                     __ptext11:	
  6721 ;; *************** function _RfHalRxGet *****************
  6722 ;; Defined at:
  6723 ;;		line 270 in file "../../../src/rfstack/hal.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      PTR struct RfTransceiver
  6730 ;; Registers used:
  6731 ;;		wreg
  6732 ;; Tracked objects:
  6733 ;;		On entry : 1F/0
  6734 ;;		On exit  : 1F/1
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6737 ;;      Params:         0       0       0       0
  6738 ;;      Locals:         0       0       0       0
  6739 ;;      Temps:          0       0       0       0
  6740 ;;      Totals:         0       0       0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    8
  6744 ;; This function calls:
  6745 ;;		Nothing
  6746 ;; This function is called by:
  6747 ;;		_RfPacketsTickTh
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _RfHalRxGet
  6753  0F3B                     _RfHalRxGet:	
  6754                           
  6755                           ;hal.c: 286: if (rfPackets[0].flags.proc == PCKT_NEED_PROC && rfPackets[0].flags.tx == 0)
  6756                           
  6757                           ;incstack = 0
  6758                           ; Regs used in _RfHalRxGet: [wreg]
  6759  0F3B  0021               	movlb	1	; select bank1
  6760  0F3C  1AA0               	btfsc	_rfPackets^(0+128),5
  6761  0F3D  1A20               	btfsc	_rfPackets^(0+128),4
  6762  0F3E  2F42               	goto	l415
  6763  0F3F  30A0               	movlw	_rfPackets& (0+255)
  6764                           
  6765                           ;hal.c: 287: {
  6766                           ;hal.c: 288: rfPackets[0].flags.proc = PCKT_NO_PROC;
  6767  0F40  12A0               	bcf	_rfPackets^(0+128),5
  6768                           
  6769                           ;hal.c: 289: return &(rfPackets[0]);
  6770  0F41  0008               	return
  6771  0F42                     l415:	
  6772                           
  6773                           ;hal.c: 290: }
  6774                           ;hal.c: 291: if (rfPackets[1].flags.proc == PCKT_NEED_PROC && rfPackets[1].flags.tx == 0)
  6775  0F42  1ABC               	btfsc	(_rfPackets^(0+128)+28),5
  6776  0F43  1A3C               	btfsc	(_rfPackets^(0+128)+28),4
  6777  0F44  3400               	retlw	0
  6778  0F45  30BC               	movlw	(_rfPackets+28)& (0+255)
  6779                           
  6780                           ;hal.c: 292: {
  6781                           ;hal.c: 293: rfPackets[1].flags.proc = PCKT_NO_PROC;
  6782  0F46  12BC               	bcf	(_rfPackets^(0+128)+28),5
  6783                           
  6784                           ;hal.c: 294: return &(rfPackets[1]);
  6785  0F47  0008               	return
  6786  0F48                     __end_of_RfHalRxGet:	
  6787                           ;hal.c: 295: }
  6788                           ;hal.c: 296: return 0;
  6789                           
  6790  0F48                     __ptext8:	
  6791 ;; *************** function _RfPacketsHandleClient *****************
  6792 ;; Defined at:
  6793 ;;		line 133 in file "../../../src/rfstack/packets.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  packet          1    wreg     PTR struct RfTransceiver
  6796 ;;		 -> NULL(0), rfPackets(56), 
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  packet          1    7[BANK0 ] PTR struct RfTransceiver
  6799 ;;		 -> NULL(0), rfPackets(56), 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;		None               void
  6802 ;; Registers used:
  6803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 1F/0
  6806 ;;		On exit  : 1F/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6809 ;;      Params:         0       0       0       0
  6810 ;;      Locals:         0       1       0       0
  6811 ;;      Temps:          0       0       0       0
  6812 ;;      Totals:         0       1       0       0
  6813 ;;Total ram usage:        1 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:   10
  6816 ;; This function calls:
  6817 ;;		_RfPacketSimpleReply
  6818 ;; This function is called by:
  6819 ;;		_RfPacketsTickTh
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           
  6824                           ;psect for function _RfPacketsHandleClient
  6825  0F48                     _RfPacketsHandleClient:	
  6826                           
  6827                           ;incstack = 0
  6828                           ; Regs used in _RfPacketsHandleClient: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6829                           ;RfPacketsHandleClient@packet stored from wreg
  6830  0F48  00C0               	movwf	RfPacketsHandleClient@packet
  6831                           
  6832                           ;packets.c: 135: switch(packet->frame.id)
  6833  0F49  2F6A               	goto	l3078
  6834  0F4A                     l3068:	
  6835                           
  6836                           ;packets.c: 138: packet->data[4] = 2;
  6837  0F4A  0840               	movf	RfPacketsHandleClient@packet,w
  6838  0F4B  3E05               	addlw	5
  6839  0F4C  0086               	movwf	6
  6840  0F4D  3002               	movlw	2
  6841  0F4E  0187               	clrf	7
  6842  0F4F  0081               	movwf	1
  6843                           
  6844                           ;packets.c: 139: RfPacketSimpleReply(packet, RF_PING, 0);
  6845  0F50  30A0               	movlw	160
  6846  0F51  00BC               	movwf	RfPacketSimpleReply@msg
  6847  0F52  01BD               	clrf	RfPacketSimpleReply@needAck
  6848  0F53  0840               	movf	RfPacketsHandleClient@packet,w
  6849  0F54  2F77               	ljmp	_RfPacketSimpleReply
  6850  0F55                     l3072:	
  6851                           ;packets.c: 140: break;
  6852                           
  6853                           
  6854                           ;packets.c: 144: if (packet->frame.data[0] == rfStatus.isr.txPacket->crcTx)
  6855  0F55  0821               	movf	_rfStatus+1,w
  6856  0F56  3E19               	addlw	25
  6857  0F57  0086               	movwf	6
  6858  0F58  0187               	clrf	7
  6859  0F59  0840               	movf	RfPacketsHandleClient@packet,w
  6860  0F5A  3E05               	addlw	5
  6861  0F5B  0084               	movwf	4
  6862  0F5C  0185               	clrf	5
  6863  0F5D  0800               	movf	0,w
  6864  0F5E  0084               	movwf	4
  6865  0F5F  0800               	movf	0,w
  6866  0F60  0601               	xorwf	1,w
  6867  0F61  1D03               	skipz
  6868  0F62  0008               	return
  6869                           
  6870                           ;packets.c: 145: {
  6871                           ;packets.c: 147: packet->flags.wait_for_ack = 0;
  6872  0F63  0840               	movf	RfPacketsHandleClient@packet,w
  6873  0F64  0086               	movwf	6
  6874  0F65  1101               	bcf	1,2
  6875                           
  6876                           ;packets.c: 148: packet->flags.proc = PCKT_NO_PROC;
  6877  0F66  0840               	movf	RfPacketsHandleClient@packet,w
  6878  0F67  0086               	movwf	6
  6879  0F68  1281               	bcf	1,5
  6880                           
  6881                           ;packets.c: 149: }
  6882  0F69  0008               	return
  6883  0F6A                     l3078:	
  6884  0F6A  0840               	movf	RfPacketsHandleClient@packet,w
  6885  0F6B  3E03               	addlw	3
  6886  0F6C  0086               	movwf	6
  6887  0F6D  0187               	clrf	7
  6888  0F6E  0801               	movf	1,w
  6889                           
  6890                           ; Switch size 1, requested type "space"
  6891                           ; Number of cases is 2, Range of values is 160 to 161
  6892                           ; switch strategies available:
  6893                           ; Name         Instructions Cycles
  6894                           ; simple_byte            7     4 (average)
  6895                           ; direct_byte           13     9 (fixed)
  6896                           ; jumptable            263     9 (fixed)
  6897                           ;	Chosen strategy is simple_byte
  6898  0F6F  3AA0               	xorlw	160	; case 160
  6899  0F70  1903               	skipnz
  6900  0F71  2F4A               	goto	l3068
  6901  0F72  3A01               	xorlw	1	; case 161
  6902  0F73  1903               	skipnz
  6903  0F74  2F55               	goto	l3072
  6904  0F75  2F76               	goto	l491
  6905  0F76                     l491:	
  6906  0F76  0008               	return
  6907  0F77                     __end_of_RfPacketsHandleClient:	
  6908  0F77                     __ptext9:	
  6909 ;; *************** function _RfPacketSimpleReply *****************
  6910 ;; Defined at:
  6911 ;;		line 27 in file "../../../src/rfstack/packets.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  packet          1    wreg     PTR struct RfTransceiver
  6914 ;;		 -> NULL(0), rfPackets(56), 
  6915 ;;  msg             1    3[BANK0 ] enum E4234
  6916 ;;  needAck         1    4[BANK0 ] unsigned char 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  packet          1    6[BANK0 ] PTR struct RfTransceiver
  6919 ;;		 -> NULL(0), rfPackets(56), 
  6920 ;;  nodeTmp         1    5[BANK0 ] unsigned char 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;		None               void
  6923 ;; Registers used:
  6924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 1F/0
  6927 ;;		On exit  : 1F/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6930 ;;      Params:         0       2       0       0
  6931 ;;      Locals:         0       2       0       0
  6932 ;;      Temps:          0       0       0       0
  6933 ;;      Totals:         0       4       0       0
  6934 ;;Total ram usage:        4 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    9
  6937 ;; This function calls:
  6938 ;;		_RfHalTxPut
  6939 ;; This function is called by:
  6940 ;;		_RfPacketsHandleClient
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function _RfPacketSimpleReply
  6946  0F77                     _RfPacketSimpleReply:	
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in _RfPacketSimpleReply: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6950                           ;RfPacketSimpleReply@packet stored from wreg
  6951  0F77  00BF               	movwf	RfPacketSimpleReply@packet
  6952                           
  6953                           ;packets.c: 30: UI08_t nodeTmp = packet->frame.src;
  6954  0F78  0086               	movwf	6
  6955  0F79  0187               	clrf	7
  6956  0F7A  3F41               	moviw [1]fsr1
  6957  0F7B  00BE               	movwf	RfPacketSimpleReply@nodeTmp
  6958                           
  6959                           ;packets.c: 31: packet->frame.src = packet->frame.dst;
  6960  0F7C  0A3F               	incf	RfPacketSimpleReply@packet,w
  6961  0F7D  0086               	movwf	6
  6962  0F7E  083F               	movf	RfPacketSimpleReply@packet,w
  6963  0F7F  3E02               	addlw	2
  6964  0F80  0084               	movwf	4
  6965  0F81  0185               	clrf	5
  6966  0F82  0800               	movf	0,w
  6967  0F83  0081               	movwf	1
  6968                           
  6969                           ;packets.c: 32: packet->frame.dst = nodeTmp;
  6970  0F84  083F               	movf	RfPacketSimpleReply@packet,w
  6971  0F85  3E02               	addlw	2
  6972  0F86  0086               	movwf	6
  6973  0F87  083E               	movf	RfPacketSimpleReply@nodeTmp,w
  6974  0F88  0081               	movwf	1
  6975                           
  6976                           ;packets.c: 34: packet->frame.id = msg;
  6977  0F89  083F               	movf	RfPacketSimpleReply@packet,w
  6978  0F8A  3E03               	addlw	3
  6979  0F8B  0086               	movwf	6
  6980  0F8C  083C               	movf	RfPacketSimpleReply@msg,w
  6981  0F8D  0081               	movwf	1
  6982                           
  6983                           ;packets.c: 41: RfHalTxPut(packet, needAck);
  6984  0F8E  083D               	movf	RfPacketSimpleReply@needAck,w
  6985  0F8F  00B9               	movwf	RfHalTxPut@needAck
  6986  0F90  083F               	movf	RfPacketSimpleReply@packet,w
  6987  0F91  2F92               	ljmp	_RfHalTxPut
  6988  0F92                     __end_of_RfPacketSimpleReply:	
  6989  0F92                     __ptext10:	
  6990 ;; *************** function _RfHalTxPut *****************
  6991 ;; Defined at:
  6992 ;;		line 339 in file "../../../src/rfstack/hal.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;  packet          1    wreg     PTR struct RfTransceiver
  6995 ;;		 -> NULL(0), rfPackets(56), 
  6996 ;;  needAck         1    0[BANK0 ] unsigned char 
  6997 ;; Auto vars:     Size  Location     Type
  6998 ;;  packet          1    2[BANK0 ] PTR struct RfTransceiver
  6999 ;;		 -> NULL(0), rfPackets(56), 
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      unsigned char 
  7002 ;; Registers used:
  7003 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7004 ;; Tracked objects:
  7005 ;;		On entry : 1F/0
  7006 ;;		On exit  : 1F/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7009 ;;      Params:         0       1       0       0
  7010 ;;      Locals:         0       1       0       0
  7011 ;;      Temps:          0       1       0       0
  7012 ;;      Totals:         0       3       0       0
  7013 ;;Total ram usage:        3 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    8
  7016 ;; This function calls:
  7017 ;;		Nothing
  7018 ;; This function is called by:
  7019 ;;		_RfPacketSimpleReply
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           
  7024                           ;psect for function _RfHalTxPut
  7025  0F92                     _RfHalTxPut:	
  7026                           
  7027                           ;incstack = 0
  7028                           ; Regs used in _RfHalTxPut: [wreg+fsr1l+fsr1h+status,2+status,0]
  7029                           ;RfHalTxPut@packet stored from wreg
  7030  0F92  00BB               	movwf	RfHalTxPut@packet
  7031                           
  7032                           ;hal.c: 362: packet->flags.acq = 0;
  7033  0F93  0086               	movwf	6
  7034  0F94  0187               	clrf	7
  7035  0F95  1181               	bcf	1,3
  7036                           
  7037                           ;hal.c: 363: packet->flags.proc = PCKT_NEED_PROC;
  7038  0F96  083B               	movf	RfHalTxPut@packet,w
  7039  0F97  0086               	movwf	6
  7040  0F98  1681               	bsf	1,5
  7041                           
  7042                           ;hal.c: 364: packet->flags.tx = 1;
  7043  0F99  083B               	movf	RfHalTxPut@packet,w
  7044  0F9A  0086               	movwf	6
  7045  0F9B  1601               	bsf	1,4
  7046                           
  7047                           ;hal.c: 365: packet->flags.resends = 0;
  7048  0F9C  083B               	movf	RfHalTxPut@packet,w
  7049  0F9D  0086               	movwf	6
  7050  0F9E  30FC               	movlw	-4
  7051  0F9F  0581               	andwf	1,f
  7052                           
  7053                           ;hal.c: 366: packet->flags.wait_for_ack = (needAck != 0 ? 1 : 0);
  7054  0FA0  3000               	movlw	0
  7055  0FA1  08B9               	movf	RfHalTxPut@needAck,f
  7056  0FA2  1D03               	skipz
  7057  0FA3  3001               	movlw	1
  7058  0FA4  00BA               	movwf	??_RfHalTxPut
  7059  0FA5  083B               	movf	RfHalTxPut@packet,w
  7060  0FA6  0086               	movwf	6
  7061  0FA7  0DBA               	rlf	??_RfHalTxPut,f
  7062  0FA8  0DBA               	rlf	??_RfHalTxPut,f
  7063  0FA9  0801               	movf	1,w
  7064  0FAA  063A               	xorwf	??_RfHalTxPut,w
  7065  0FAB  39FB               	andlw	-5
  7066  0FAC  063A               	xorwf	??_RfHalTxPut,w
  7067  0FAD  0081               	movwf	1
  7068  0FAE  0008               	return
  7069  0FAF                     __end_of_RfHalTxPut:	
  7070  0FAF                     PL118:	
  7071  0FAF  0086               	movwf	6
  7072  0FB0  3000               	movlw	0
  7073  0FB1  0187               	clrf	7
  7074  0FB2  3FC0               	movwi [0]fsr1
  7075  0FB3  3FC1               	movwi [1]fsr1
  7076  0FB4  0008               	return
  7077  0FB5                     __end_ofPL118:	
  7078  0FB5                     __ptext16:	
  7079 ;; *************** function _RfHalTxGet *****************
  7080 ;; Defined at:
  7081 ;;		line 300 in file "../../../src/rfstack/hal.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;  i               1    3[BANK0 ] unsigned char 
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      unsigned char 
  7088 ;; Registers used:
  7089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 1F/0
  7092 ;;		On exit  : 1F/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7095 ;;      Params:         0       0       0       0
  7096 ;;      Locals:         0       1       0       0
  7097 ;;      Temps:          0       0       0       0
  7098 ;;      Totals:         0       1       0       0
  7099 ;;Total ram usage:        1 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    9
  7102 ;; This function calls:
  7103 ;;		___bmul
  7104 ;; This function is called by:
  7105 ;;		_RfHalTickTxTh
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _RfHalTxGet
  7111  0FB5                     _RfHalTxGet:	
  7112                           
  7113                           ;hal.c: 303: UI08_t i = 0;
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _RfHalTxGet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7117  0FB5  01BC               	clrf	RfHalTxGet@i
  7118                           
  7119                           ;hal.c: 305: for (i = 0; i < 2; i++)
  7120  0FB6  01BC               	clrf	RfHalTxGet@i
  7121  0FB7                     l2768:	
  7122                           
  7123                           ;hal.c: 306: {
  7124                           ;hal.c: 307: if (rfPackets[i].flags.proc == PCKT_NEED_PROC && rfPackets[i].flags.tx == 1)
  7125  0FB7  301C               	movlw	28
  7126  0FB8  00B9               	movwf	___bmul@multiplicand
  7127  0FB9  083C               	movf	RfHalTxGet@i,w
  7128  0FBA  27F4  3188         	fcall	___bmul
  7129  0FBC  3EA0               	addlw	_rfPackets& (0+255)
  7130  0FBD  0086               	movwf	6
  7131  0FBE  0187               	clrf	7
  7132  0FBF  1E81               	btfss	1,5
  7133  0FC0  2FEE               	goto	l2782
  7134  0FC1  301C               	movlw	28
  7135  0FC2  00B9               	movwf	___bmul@multiplicand
  7136  0FC3  083C               	movf	RfHalTxGet@i,w
  7137  0FC4  27F4  3188         	fcall	___bmul
  7138  0FC6  3EA0               	addlw	_rfPackets& (0+255)
  7139  0FC7  0086               	movwf	6
  7140  0FC8  0187               	clrf	7
  7141  0FC9  1E01               	btfss	1,4
  7142  0FCA  2FEE               	goto	l2782
  7143                           
  7144                           ;hal.c: 308: {
  7145                           ;hal.c: 309: if (rfPackets[i].flags.wait_for_ack == 0)
  7146  0FCB  301C               	movlw	28
  7147  0FCC  00B9               	movwf	___bmul@multiplicand
  7148  0FCD  083C               	movf	RfHalTxGet@i,w
  7149  0FCE  27F4  3188         	fcall	___bmul
  7150  0FD0  3EA0               	addlw	_rfPackets& (0+255)
  7151  0FD1  0086               	movwf	6
  7152  0FD2  301C               	movlw	28
  7153  0FD3  0187               	clrf	7
  7154                           
  7155                           ;hal.c: 310: rfPackets[i].flags.proc = PCKT_NO_PROC;
  7156  0FD4  00B9               	movwf	___bmul@multiplicand
  7157  0FD5  083C               	movf	RfHalTxGet@i,w
  7158  0FD6  1901               	btfsc	1,2
  7159  0FD7  2FE1               	goto	L3
  7160  0FD8  27F4  3188         	fcall	___bmul
  7161  0FDA  3EA0               	addlw	_rfPackets& (0+255)
  7162  0FDB  0086               	movwf	6
  7163  0FDC  301C               	movlw	28
  7164  0FDD  0187               	clrf	7
  7165  0FDE  1281               	bcf	1,5
  7166                           
  7167                           ;hal.c: 311: rfPackets[i].flags.acq = 1;
  7168  0FDF  00B9               	movwf	___bmul@multiplicand
  7169  0FE0  083C               	movf	RfHalTxGet@i,w
  7170  0FE1                     L3:	
  7171  0FE1  27F4  3188         	fcall	___bmul
  7172  0FE3  3EA0               	addlw	_rfPackets& (0+255)
  7173  0FE4  0086               	movwf	6
  7174  0FE5  301C               	movlw	28
  7175  0FE6  0187               	clrf	7
  7176  0FE7  1581               	bsf	1,3
  7177                           
  7178                           ;hal.c: 312: rfStatus.isr.txPacket = &(rfPackets[i]);
  7179  0FE8  00B9               	movwf	___bmul@multiplicand
  7180  0FE9  083C               	movf	RfHalTxGet@i,w
  7181  0FEA  27F4               	fcall	___bmul
  7182  0FEB  3EA0               	addlw	_rfPackets& (0+255)
  7183  0FEC  00A1               	movwf	_rfStatus+1
  7184                           
  7185                           ;hal.c: 313: return 1;
  7186  0FED  3401               	retlw	1
  7187  0FEE                     l2782:	
  7188  0FEE  3002               	movlw	2
  7189  0FEF  0ABC               	incf	RfHalTxGet@i,f
  7190  0FF0  023C               	subwf	RfHalTxGet@i,w
  7191  0FF1  1803               	btfsc	3,0
  7192                           
  7193                           ;hal.c: 314: }
  7194                           ;hal.c: 315: }
  7195                           ;hal.c: 317: return 0;
  7196  0FF2  3400               	retlw	0
  7197  0FF3  2FB7               	goto	l2768
  7198  0FF4                     __end_of_RfHalTxGet:	
  7199  0FF4                     __ptext17:	
  7200 ;; *************** function ___bmul *****************
  7201 ;; Defined at:
  7202 ;;		line 2 in file "/opt/microchip/xc8/v1.30/sources/common/bmul.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  multiplier      1    wreg     unsigned char 
  7205 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;  multiplier      1    2[BANK0 ] unsigned char 
  7208 ;;  product         1    1[BANK0 ] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      unsigned char 
  7211 ;; Registers used:
  7212 ;;		wreg, status,2, status,0
  7213 ;; Tracked objects:
  7214 ;;		On entry : 1F/0
  7215 ;;		On exit  : 1F/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7218 ;;      Params:         0       1       0       0
  7219 ;;      Locals:         0       2       0       0
  7220 ;;      Temps:          0       0       0       0
  7221 ;;      Totals:         0       3       0       0
  7222 ;;Total ram usage:        3 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    8
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_RfHalTxGet
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           
  7233                           ;psect for function ___bmul
  7234  0FF4                     ___bmul:	
  7235                           
  7236                           ;incstack = 0
  7237                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7238                           ;___bmul@multiplier stored from wreg
  7239  0FF4  00BB               	movwf	___bmul@multiplier
  7240  0FF5  01BA               	clrf	___bmul@product
  7241  0FF6                     l3210:	
  7242  0FF6  0839               	movf	___bmul@multiplicand,w
  7243  0FF7  183B               	btfsc	___bmul@multiplier,0
  7244  0FF8  07BA               	addwf	___bmul@product,f
  7245  0FF9  35B9               	lslf	___bmul@multiplicand,f
  7246  0FFA  36BB               	lsrf	___bmul@multiplier,f
  7247  0FFB  08BB               	movf	___bmul@multiplier,f
  7248  0FFC  1D03               	skipz
  7249  0FFD  2FF6               	goto	l3210
  7250  0FFE  083A               	movf	___bmul@product,w
  7251  0FFF  0008               	return
  7252  1000                     __end_of___bmul:	
  7253                           
  7254                           	psect	text53
  7255  0000                     __ptext53:	
  7256 ;; *************** function i1_RfTrcvCrcTick *****************
  7257 ;; Defined at:
  7258 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;  initial         1    wreg     unsigned char 
  7261 ;;  data            1    0[COMMON] unsigned char 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  initial         1    1[COMMON] unsigned char 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  1    wreg      unsigned char 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 1F/0
  7270 ;;		On exit  : 1F/0
  7271 ;;		Unchanged: 1F/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7273 ;;      Params:         1       0       0       0
  7274 ;;      Locals:         1       0       0       0
  7275 ;;      Temps:          0       0       0       0
  7276 ;;      Totals:         2       0       0       0
  7277 ;;Total ram usage:        2 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		i1_RfHalStatemachine
  7283 ;; This function uses a non-reentrant model
  7284 ;;
  7285                           
  7286  0000                     __end_ofi1_RfTrcvCrcTick:	
  7287                           ;mrf49xa.c: 59: return (initial ^ data);
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  7291                           ;i1RfTrcvCrcTick@initial stored from wreg
  7292                           
  7293                           ;psect for function i1_RfTrcvCrcTick
  7294                           
  7295                           
  7296                           	psect	functab
  7297  0100                     __pfunctab:	
  7298  0100                     __fptable:	
  7299  0100                     fptable:	
  7300  0100  3181               	movlp	high fptable
  7301  0101  0782               	addwf	2,f
  7302  0102                     fpbase:	
  7303  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7304  0103                     fp__mrf49XaIsr:	
  7305  0103                     entry__mrf49XaIsr:	
  7306  0103  318A  2A89         	ljmp	_mrf49XaIsr
  7307  0105                     __end_of__fptable:	
  7308  007E                     btemp	set	126	;btemp
  7309  007E                     wtemp	set	126
  7310  007E                     wtemp0	set	126
  7311  0080                     wtemp1	set	128
  7312  0082                     wtemp2	set	130
  7313  0084                     wtemp3	set	132
  7314  0086                     wtemp4	set	134
  7315  0088                     wtemp5	set	136
  7316  007F                     wtemp6	set	127
  7317  007E                     ttemp	set	126
  7318  007E                     ttemp0	set	126
  7319  0081                     ttemp1	set	129
  7320  0084                     ttemp2	set	132
  7321  0087                     ttemp3	set	135
  7322  007F                     ttemp4	set	127
  7323  007E                     ltemp	set	126
  7324  007E                     ltemp0	set	126
  7325  0082                     ltemp1	set	130
  7326  0086                     ltemp2	set	134
  7327  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         129
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     11      40
    BANK1            80      0      56
    BANK2            80      0      48

Pointer List with Targets:

    rfPackets...data	PTR unsigned char  size(1) Largest target is 0

    NULL...data	PTR unsigned char  size(1) Largest target is 0

    NULL...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsTickTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsTickTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halPkTh(BANK0[2]), 

    RfPacketsHandleClient@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsHandleServer@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleServer@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalRxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalRxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalRxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfPackets...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    S491$data	PTR unsigned char  size(1) Largest target is 0

    RfHalTickRxTh@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    sp__RfHalGetFree	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickRxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halRxBfTh(BANK0[2]), 

    RfHalTickRxTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickTxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halTxBfTh(BANK0[2]), 

    CCDef	const PTR struct CircBufDef_s size(1) Largest target is 5
		 -> rfRxCC(BANK0[4]), 

    S526CircBufDef_s$bf	const PTR unsigned char  size(1) Largest target is 48
		 -> rfRxBf(BANK2[48]), 

    rfRxCC.bf	const PTR unsigned char  size(1) Largest target is 48
		 -> rfRxBf(BANK2[48]), 

    S518$txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> mrf49XaIsr(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    i1_mrf49XaIsr->i1_RfHalStatemachine
    i1_RfTrcvStatus->i1_SPI_Read
    i1_RfHalStatemachine->i1_RfTrcvMode
    i1__CCBufWrByte->i1__CCBufCalcPt
    i1_RfTrcvMode->i1_RfTrcvSetup
    i1_RfTrcvSetup->i1_RfTrcvPut
    i1_RfTrcvPut->i1_MRF49XACommand
    i1_MRF49XACommand->i1_SPI_Write
    i1_RfTrcvGet->i1_SPI_Read
    i1_RfTrcvGet->i1_SPI_Write

Critical Paths under _main in BANK0

    _main->_RfPacketsTickTh
    _mrf49XaIsr->_RfHalStatemachine
    _RfHalStatemachine->_RfTrcvMode
    __CCBufWrByte->__CCBufCalcPt
    _RfTrcvGet->_SPI_Read
    _RfTrcvGet->_SPI_Write
    _RfPacketsTickTh->_RfPacketsHandleClient
    _RfPacketsHandleClient->_RfPacketSimpleReply
    _RfPacketSimpleReply->_RfHalTxPut
    _RfHalTickTxTh->_RfTrcvMode
    _RfTrcvStatus->_SPI_Read
    _RfHalTxGet->___bmul
    _RfHalTickRxTh->__CCBufRdByte
    __CCBufRdReverse->__CCBufCalcPt
    __CCBufRdByte->__CCBufCalcPt
    __CCBufCanRd->__CCBufCalcPt
    _RfHalInit->_RfTrcvMode
    __CCBufInit->__CCBufReset
    _RfTrcvMode->_RfTrcvSetup
    _MRF49XAInit->_RfTrcvSetup
    _RfTrcvSetup->_RfTrcvPut
    _RfTrcvPut->_MRF49XACommand
    _MRF49XACommand->_SPI_Write

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   36387
                            _AdcInit
                         _ExtIntInit
                        _MRF49XAInit
                          _RfHalInit
                      _RfHalTickRxTh
                      _RfHalTickTxTh
                    _RfPacketsTickTh
                        _RfTrcvSetup
                       _RfTrcvStatus
                        _SysInitGpio
                         _mrf49XaIsr
 ---------------------------------------------------------------------------------
 (1) _mrf49XaIsr                                           0     0      0   11823
                  _RfHalStatemachine
                        _RfTrcvSetup
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfHalStatemachine                                    1     1      0    7464
                                              6 BANK0      1     1      0
                      _RfTrcvCrcTick
                          _RfTrcvGet
                         _RfTrcvMode
                          _RfTrcvPut
                       __CCBufWrByte
 ---------------------------------------------------------------------------------
 (3) __CCBufWrByte                                         2     2      0     480
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanWr
 ---------------------------------------------------------------------------------
 (4) __CCBufCanWr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvGet                                            1     1      0     230
                                              1 BANK0      1     1      0
                           _SPI_Read
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfPacketsTickTh                                      4     4      0    1257
                                              8 BANK0      3     3      0
                         _RfHalRxGet
              _RfPacketsHandleClient
 ---------------------------------------------------------------------------------
 (2) _RfPacketsHandleClient                                1     1      0    1141
                                              7 BANK0      1     1      0
                _RfPacketSimpleReply
 ---------------------------------------------------------------------------------
 (3) _RfPacketSimpleReply                                  4     2      2     976
                                              3 BANK0      4     2      2
                         _RfHalTxPut
 ---------------------------------------------------------------------------------
 (4) _RfHalTxPut                                           3     2      1     433
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxGet                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalTickTxTh                                        4     4      0    5177
                                              6 BANK0      3     3      0
                     _RfHalGetReturn
                         _RfHalTxGet
               _RfTrcvCarrierPresent
                         _RfTrcvMode
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCarrierPresent                                 0     0      0      31
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfTrcvStatus                                         0     0      0      31
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SPI_Read                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalTxGet                                           1     1      0     427
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     248
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _RfHalTickRxTh                                        5     5      0    2608
                                              5 BANK0      4     4      0
                       _RfHalAnyFree
                       _RfHalGetFree
                     _RfHalGetReturn
                         _RfHalRxPut
                      _RfTrcvCrcTick
                        __CCBufCanRd
                       __CCBufRdByte
                    __CCBufRdReverse
 ---------------------------------------------------------------------------------
 (2) __CCBufRdReverse                                      1     1      0     480
                                              3 BANK0      1     1      0
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (2) __CCBufRdByte                                         2     2      0     939
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (3) __CCBufCanRd                                          0     0      0     458
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (4) __CCBufCalcPt                                         3     2      1     458
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _RfTrcvCrcTick                                        2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxPut                                           1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetReturn                                       1     1      0     165
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RfHalAnyFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalInit                                            1     1      0    4509
                                              6 BANK0      1     1      0
                         _RfTrcvMode
                         __CCBufInit
 ---------------------------------------------------------------------------------
 (2) __CCBufInit                                           0     0      0      46
                        __CCBufReset
 ---------------------------------------------------------------------------------
 (3) __CCBufReset                                          2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvMode                                           1     1      0    4394
                                              5 BANK0      1     1      0
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (1) _MRF49XAInit                                          2     2      0    6654
                                              5 BANK0      2     2      0
                     _MRF49XACommand
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (2) _RfTrcvSetup                                          1     1      0    4328
                                              4 BANK0      1     1      0
                     _MRF49XACommand
                          _RfTrcvPut
 ---------------------------------------------------------------------------------
 (3) _RfTrcvPut                                            1     1      0    2164
                                              3 BANK0      1     1      0
                     _MRF49XACommand
 ---------------------------------------------------------------------------------
 (4) _MRF49XACommand                                       2     0      2    2142
                                              1 BANK0      2     0      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               0     0      0   10585
                       i1_mrf49XaIsr
 ---------------------------------------------------------------------------------
 (9) i1_mrf49XaIsr                                         0     0      0   10585
                i1_RfHalStatemachine
                      i1_RfTrcvSetup
                     i1_RfTrcvStatus
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvStatus                                      0     0      0      91
                         i1_SPI_Read
 ---------------------------------------------------------------------------------
 (10) i1_RfHalStatemachine                                 1     1      0    6962
                                              6 COMMON     1     1      0
                    i1_RfTrcvCrcTick
                        i1_RfTrcvGet
                       i1_RfTrcvMode
                        i1_RfTrcvPut
                     i1__CCBufWrByte
 ---------------------------------------------------------------------------------
 (11) i1__CCBufWrByte                                      2     2      0     460
                                              3 COMMON     2     2      0
                     i1__CCBufCalcPt
                      i1__CCBufCanWr
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCanWr                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCalcPt                                      3     2      1     387
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvMode                                        1     1      0    3751
                                              5 COMMON     1     1      0
                      i1_RfTrcvSetup
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvSetup                                       1     1      0    3532
                                              4 COMMON     1     1      0
                   i1_MRF49XACommand
                        i1_RfTrcvPut
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvPut                                         1     1      0    1766
                                              3 COMMON     1     1      0
                   i1_MRF49XACommand
 ---------------------------------------------------------------------------------
 (12) i1_MRF49XACommand                                    2     0      2    1693
                                              1 COMMON     2     0      2
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvGet                                         1     1      0     750
                                              1 COMMON     1     1      0
                         i1_SPI_Read
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (13) i1_SPI_Write                                         1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_SPI_Read                                          1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvCrcTick                                     2     1      1     235
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _MRF49XAInit
     _MRF49XACommand
       _SPI_Write
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
   _RfHalInit
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
     __CCBufInit
       __CCBufReset
   _RfHalTickRxTh
     _RfHalAnyFree
     _RfHalGetFree
     _RfHalGetReturn
     _RfHalRxPut
     _RfTrcvCrcTick
     __CCBufCanRd
       __CCBufCalcPt
     __CCBufRdByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdReverse
       __CCBufCalcPt
   _RfHalTickTxTh
     _RfHalGetReturn
     _RfHalTxGet
       ___bmul
     _RfTrcvCarrierPresent
       _RfTrcvStatus
         _SPI_Read
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
   _RfPacketsTickTh
     _RfHalRxGet
     _RfPacketsHandleClient
       _RfPacketSimpleReply
         _RfHalTxPut
   _RfTrcvSetup
     _MRF49XACommand
       _SPI_Write
     _RfTrcvPut
       _MRF49XACommand
         _SPI_Write
   _RfTrcvStatus
     _SPI_Read
   _SysInitGpio
   _mrf49XaIsr
     _RfHalStatemachine
       _RfTrcvCrcTick
       _RfTrcvGet
         _SPI_Read
         _SPI_Write
       _RfTrcvMode
         _RfTrcvSetup
           _MRF49XACommand
             _SPI_Write
           _RfTrcvPut
             _MRF49XACommand
               _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
       __CCBufWrByte
         __CCBufCalcPt
         __CCBufCanWr
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
     _RfTrcvStatus
       _SPI_Read

 _extInt (ROOT)
   i1_mrf49XaIsr
     i1_RfHalStatemachine
       i1_RfTrcvCrcTick
       i1_RfTrcvGet
         i1_SPI_Read
         i1_SPI_Write
       i1_RfTrcvMode
         i1_RfTrcvSetup
           i1_MRF49XACommand
             i1_SPI_Write
           i1_RfTrcvPut
             i1_MRF49XACommand
               i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
       i1__CCBufWrByte
         i1__CCBufCalcPt
         i1__CCBufCanWr
     i1_RfTrcvSetup
       i1_MRF49XACommand
         i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
     i1_RfTrcvStatus
       i1_SPI_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      97       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      B      28       6       50.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      38       8       70.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      30      10       60.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      97      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Apr  7 09:39:52 2014

        RfHalTickRxTh@pktLength 0040                               pc 0002                 ??i1_RfTrcvSetup 0074  
                ___bmul@product 003A          __size_of_RfTrcvCrcTick 0000               ??i1_RfTrcvCrcTick 0071  
             RfHalTxPut@needAck 0039                ??i1_RfTrcvStatus 0071                      __CCBufInit 0000  
                           l240 0C8E                             l232 0C7A                             l241 0C90  
                           l233 0C7C                             l402 0E4F                             l252 0CAC  
                           l244 0C98                             l236 0C84                             l228 0C70  
                           l253 0CAE                             l245 0C9A                             l237 0C86  
                           l229 0C72                             l181 0003                             l191 0BDE  
                           l407 0E59                             l415 0F42                             l256 0CB6  
                           l248 0CA2                             l520 0002                             l257 0CB8  
                           l249 0CA4                             l195 0C2E                             l526 0015  
                           l543 0008                             l491 0F76                             l644 0A89  
                           l656 0B5E           __size_of__CCBufCalcPt 000C                             _dl1 0029  
                           _dl2 002A                             _isr 002B           __size_of__CCBufRdByte 001D  
                           wreg 0009                    ?_MRF49XAInit 0070           __size_of__CCBufWrByte 001B  
                   __CCBufCanRd 0000                            S3554 000F                     __CCBufCanWr 0000  
                          PL120 0EE6                            PL130 0EFB                            PL122 0EEC  
                          PL132 0F00                            PL124 0B26                            PL134 0F06  
                          PL126 0EF1                            PL118 0FAF                            PL128 0EF6  
                   __CCBufReset 0000                            l3000 0AB5                            l3100 0F39  
                          l3012 0ABE                            l3004 0ABA                            l3030 0AED  
                          l3112 0004                            l3016 0AC1                            l3008 0ABC  
                          l3200 0B93                            l3210 0FF6                            l3034 0AEF  
                          l3026 0AE7                            l3116 0011                            l3108 0000  
                          l3132 0000                            l3118 0014                            l3126 0E24  
                          l3134 0006                            l3206 0B9C                            l3128 0E2B  
                          l3072 0F55                            l3090 0F1F                            l3082 0F0F  
                          l2522 0A9B                            l2514 0A94                            l3170 0B6F  
                          l3154 0B5A                            l3068 0F4A                            l3084 0F14  
                          l2516 0A96                            l2702 0D0D                            l3078 0F6A  
                          l2526 0AA0                            l3182 0B7D                            l3174 0B73  
                          l2536 0C51                            l3096 0F25                            l3176 0B76  
                          l3184 0B7E                            l2714 0000                            l2730 0E7D  
                          l3098 0F27                            l3178 0B77                            l2628 0001  
                          l2804 0D46                            l3188 0B84                            l2638 0BB5  
                          l2670 0C2D                            l2806 0D4B                            l2734 0E82  
                          l2648 0BDD                            l3560 0E0B                            l2824 0D7F  
                          l2736 0E87                            l2728 0E78                            l2752 0E9E  
                          l2930 0000                            l2842 0D74                            l2754 0EB6  
                          l2746 0E97                            l2932 000B                            l2844 0DB7  
                          l3556 0F31                            l2854 0DD6                            l2782 0FEE  
                          l3558 0EA8                            l2872 0DF1                            l2848 0DC2  
                          l2856 0DDF                            l2880 0DFE                            l2768 0FB7  
                          l2874 0DF6                            l2794 0D35                            l2882 0E01  
                          l2956 0001                            l2884 0E1F                            l2798 0D3D  
                          l2996 0AB2                            l2998 0AB7                            _main 0B4D  
               __end_of_AdcInit 0D02                            _rfPk 002C                            fsr0h 0005  
                          fsr1h 0007                            fsr0l 0004                            indf0 0000  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          ltemp 007E                            start 000D                            ttemp 007E  
                    RfTrcvGet@b 003A                            wtemp 007E               ___bmul@multiplier 003B  
           i1__CCBufWrByte@data 0074                    __CCBufCalcPt 0E21                     ?i1_SPI_Read 0070  
                  __CCBufRdByte 0E2D                   ??_RfTrcvSetup 0077          i1RfTrcvCrcTick@initial 0071  
         __size_ofi1_mrf49XaIsr 001F                    __CCBufWrByte 0B0B                           ?_main 0070  
                         i1l240 09F7                           i1l232 09E5                           i1l241 09F8  
                         i1l233 09E6                           i1l252 0A12                           i1l244 0A00  
                         i1l236 09EE                           i1l228 09DC                           i1l181 0003  
                         i1l253 0A13                           i1l245 0A01                           i1l237 09EF  
                         i1l229 09DD                           i1l256 0A1B                           i1l248 0A09  
                         i1l257 0A1C                           i1l249 0A0A                           i1l644 08FF  
                    _RfHalRxGet 0F3B                      _RfHalTxGet 0FB5                      _RfHalRxPut 0E6A  
                    _RfHalTxPut 0F92                   ?_RfTrcvStatus 0070           __end_ofi1__CCBufCanWr 0000  
                 _RfTrcvCrcTick 0000                           fpbase 0102                __end_of_SPI_Read 0CF3  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F              __size_of_SPI_Write 0055                    __end_ofPL120 0EEC  
                  __end_ofPL130 0F00                    __end_ofPL122 0EF1                    __end_ofPL132 0F06  
                  __end_ofPL124 0B2C                    __end_ofPL134 0F0B                    __end_ofPL126 0EF6  
                  __end_ofPL118 0FB5                    __end_ofPL128 0EFB                    SPI_Read@data 0039  
          __end_of_RfHalAnyFree 0E53                    i1_mrf49XaIsr 08FF            __end_of_RfHalGetFree 0E5F  
           i1RfTrcvCrcTick@data 0070                 __initialization 0B2C                      _ExtIntInit 0D02  
                  __end_of_main 0B9F                  _MRF49XACommand 0C51                      _RfTrcvMode 0EB8  
                i1__CCBufCalcPt 0A7D            RfTrcvCrcTick@initial 003A                          ??_main 0077  
                   ?__CCBufInit 0070                    ?i1_SPI_Write 0070                  i1__CCBufWrByte 0A61  
                ??_RfTrcvStatus 0077             __end_of_RfTrcvSetup 0BD2              __size_of_RfHalInit 002B  
                 __CCBufReset@i 003A             __CCBufRdReverse@qty 003C                  ?_RfTrcvCrcTick 0039  
                        _ADCON0 009D                 RfHalTickRxTh@pt 0041                          _ADCON1 009E  
                        _ADCON2 009F                       ??_AdcInit 0077                          i1S3562 0025  
               RfHalTickTxTh@pt 0041     __end_ofi1_RfHalStatemachine 097D                          _ANSELA 018C  
                        _ANSELB 018D                          _ANSELC 018E                          i1l3302 0000  
                        i1l3224 0001                          i1l3304 0007                          i1l3402 0969  
                        i1l3410 0972             __size_ofi1_SPI_Read 0036                          i1l3260 09DA  
                        i1l3350 09A7                          i1l3430 090C                          i1l3280 0A07  
                        i1l3272 09F5                          i1l3264 09E3                          i1l3440 0917  
                        i1l3284 0A10                          i1l3276 09FE                          i1l3268 09EC  
                        i1l3380 0932                          i1l3372 092A                          i1l3364 091F  
                        i1l3436 0912                          i1l3428 090A                          i1l3358 08FA  
                        i1l3366 0923                          i1l3288 0A19                          i1l3296 0A80  
                        i1l3384 0937                          i1l3376 092E                          i1l3368 0926  
                        i1l3298 0A87                          i1l3394 095D                          i1l3398 0965  
                        _FVRCON 0117                          u263_21 08F8                          _OSCCON 0099  
   RfHalTickRxTh@pktRxByteIndex 0025                __end_of__fptable 0105              __size_of_RfTrcvGet 000C  
            __size_of_RfTrcvPut 0009          __end_of_MRF49XACommand 0C5C             _RfPacketSimpleReply 0F77  
                i1SPI_Read@data 0070                          ___bmul 0FF4          __end_ofi1__CCBufCalcPt 0A89  
                  MRF49XAInit@i 003E                    MRF49XAInit@j 003F           RfPacketsTickTh@packet 0027  
                        _rfRxCC 0044                          _rfRxBf 0120                          _extInt 0004  
        __end_ofi1__CCBufWrByte 0A7D                    ?i1_RfTrcvGet 0070                    ?i1_RfTrcvPut 0070  
                        fptable 0100       RfPacketSimpleReply@packet 003F               __end_of_SPI_Write 0CBB  
                        fptotal 0001                     ?_RfHalRxGet 0070                     ?_RfHalTxGet 0070  
                   ?_RfHalRxPut 0070                     ?_RfHalTxPut 0039            ?_RfPacketSimpleReply 003C  
 __size_of_RfTrcvCarrierPresent 0005       __size_ofi1_MRF49XACommand 0009        __size_of__CCBufRdReverse 0000  
          __size_of_MRF49XAInit 007F         __end_of__initialization 0B4B                __CCBufRdByte@res 003D  
                  RfTrcvMode@tx 003E                 i1_RfTrcvCrcTick 0000             __size_of__CCBufInit 0000  
__size_of_RfPacketsHandleClient 002F        __size_of_RfPacketsTickTh 0030   __end_of_RfPacketsHandleClient 0F77  
           ___bmul@multiplicand 0039                 ?_MRF49XACommand 003A               __end_of_RfHalInit 0D32  
                   ?_ExtIntInit 0070                  __pcstackCOMMON 0070                    __pidataBANK0 0000  
                   ?_RfTrcvMode 0070                 ?i1__CCBufCalcPt 0070         __size_of_RfHalGetReturn 000B  
                   _RfTrcvSetup 0B9F                       ?_SPI_Read 0070                 ?i1__CCBufWrByte 0070  
             __end_of_RfTrcvGet 0B0B           __end_of_RfHalTickRxTh 0E21               __end_of_RfTrcvPut 0AFF  
         __end_of_RfHalTickTxTh 0EB8                  _OPTION_REGbits 0095           ??_RfPacketSimpleReply 0077  
               ??_RfTrcvCrcTick 0077             __CCBufCalcPt@result 003B                    ?__CCBufCanRd 0070  
                  ?__CCBufCanWr 0070     RfPacketsHandleClient@packet 0040                    ?__CCBufReset 0070  
                 ??_SysInitGpio 0077                      __pbssBANK0 0020                      __pbssBANK1 00A0  
                    __pbssBANK2 0120           __size_of_RfHalAnyFree 0009           __size_of_RfHalGetFree 000C  
             __CCBufCalcPt@move 0039                  i1RfTrcvMode@tx 0075            __end_of_RfTrcvStatus 0C66  
           __size_of_RfHalRxGet 000D             __size_of_RfHalTxGet 003F                      __pmaintext 0B4D  
           __size_of_RfHalRxPut 000C             __size_of_RfHalTxPut 001D                         ?___bmul 0039  
                  ??i1_SPI_Read 0070                      __pintentry 0004                         ?_extInt 0070  
         __end_ofi1_RfTrcvSetup 09CB                      ??_SPI_Read 0077                      _mrf49XaIsr 0A89  
          __size_ofi1_SPI_Write 004B                    _RfHalAnyFree 0E4A                    _RfHalGetFree 0E53  
                       _AdcInit 0CF3         __end_ofi1_RfTrcvCrcTick 0000             __size_of_ExtIntInit 0005  
    RfHalTickRxTh@rxByteTimeout 0026             __size_of_RfTrcvMode 000D            i1__CCBufCalcPt@entry 0071  
            __end_ofi1_SPI_Read 0A61                      _rfPkResets 002E               ??__CCBufRdReverse 0077  
           __end_of_SysInitGpio 0EE6               _RfHalStatemachine 0AA7                   SPI_Write@data 0039  
            ?_RfHalStatemachine 0070                 __size_of___bmul 000C               ??_RfPacketsTickTh 0041  
                       _halPkTh 0031                 __size_of_extInt 0009                    ??__CCBufInit 0077  
                       __ptext1 0A89                         __ptext2 0AA7                         __ptext3 0B0B  
                       __ptext4 0000                         __ptext5 0AFF                         __ptext6 0ECA  
                       __ptext7 0F0B                         __ptext8 0F48                         __ptext9 0F77  
           ??_RfHalStatemachine 003F                         _rfPkCrc 002D          RfPacketsTickTh@timeout 0028  
          __size_ofi1_RfTrcvGet 0009            __size_ofi1_RfTrcvPut 0009                i1_MRF49XACommand 09CB  
                 ?i1_RfTrcvMode 0070                         clrloop0 0106                RfHalRxPut@packet 0039  
       __size_ofi1_RfTrcvStatus 000C            end_of_initialization 0B4B                         _worried 0030  
    RfPacketSimpleReply@needAck 003D      RfPacketSimpleReply@nodeTmp 003E       __end_of_RfHalStatemachine 0AF6  
        RfPacketSimpleReply@msg 003C              __end_of__CCBufInit 0000                  _RfHalGetReturn 0E5F  
        __size_ofi1__CCBufCanWr 0000                       _PORTAbits 000C                       _PORTCbits 000E  
                  ??_RfHalRxGet 0077                    ??_RfHalTxGet 0077                    ??_RfHalRxPut 0077  
                   ?_mrf49XaIsr 0070                    ??_RfHalTxPut 003A                       _TRISAbits 008C  
                     _TRISBbits 008D                       _TRISCbits 008E                  ??i1_RfTrcvMode 0075  
                     _SPI_Write 0C66                ?i1_RfTrcvCrcTick 0070                RfHalTxPut@packet 003B  
          __size_of__CCBufCanRd 0000            __size_of__CCBufCanWr 0000                     _SysInitGpio 0ECA  
         __size_of_RfTrcvStatus 000A                ??_MRF49XACommand 0077            __size_of__CCBufReset 0000  
                 RfTrcvPut@byte 003C                   RfTrcvSetup@tx 003D                ??i1__CCBufCalcPt 0071  
  __end_of_RfTrcvCarrierPresent 0ECA    __size_ofi1_RfHalStatemachine 005F               MRF49XACommand@cmd 003A  
        __end_of_RfHalGetReturn 0E6A                    ??_ExtIntInit 0077              __end_of_RfHalRxGet 0F48  
              ??i1__CCBufWrByte 0073              __end_of_RfHalTxGet 0FF4              __end_of_RfHalRxPut 0E76  
            __end_of_RfHalTxPut 0FAF                    ??_RfTrcvMode 0077                  __end_of___bmul 1000  
               i1SPI_Write@data 0070                       _RfHalInit 0D07                    ?_RfTrcvSetup 0070  
                __end_of_extInt 000D               __size_of_SPI_Read 0038             start_initialization 0B2C  
                 ??_MRF49XAInit 0077                    _RfTrcvStatus 0C5C                       _RfTrcvGet 0AFF  
                     _RfTrcvPut 0AF6                      ?_SPI_Write 0070                   i1__CCBufCanWr 0000  
             RfPacketsTickTh@pt 0043              __end_of_ExtIntInit 0D07              __end_of_RfTrcvMode 0EC5  
    __size_of_RfHalStatemachine 004F                 ?_RfHalGetReturn 0070             __size_of_mrf49XaIsr 001E  
                      ??___bmul 0077                   ?__CCBufCalcPt 0039           _RfPacketsHandleClient 0F48  
                 ?__CCBufRdByte 0070                     __pdataBANK0 0044                        ??_extInt 0077  
   __end_of_RfPacketSimpleReply 0F92                      ?_RfHalInit 0070                   ?__CCBufWrByte 0070  
                     ___latbits 0001                   __pcstackBANK0 0039                entry__mrf49XaIsr 0103  
               __CCBufRdReverse 0000                      ?_RfTrcvGet 0070               __size_of__fptable 0005  
                ?i1__CCBufCanWr 0070                      ?_RfTrcvPut 0070           __end_of_RfTrcvCrcTick 0000  
                i1_RfTrcvStatus 0A1F                        ?_AdcInit 0070              __CCBufCalcPt@entry 003A  
                  _rfTrcvStatus 0037             __end_of_MRF49XAInit 0C51                 _RfPacketsTickTh 0F0B  
                     _halRxBfTh 0033                       _halTxBfTh 0035                   ?i1_mrf49XaIsr 0070  
        __size_of_RfHalTickRxTh 00EF          __size_of_RfHalTickTxTh 0042                  ??__CCBufCalcPt 0077  
      __end_ofi1_MRF49XACommand 09D4                 i1RfTrcvPut@byte 0073                       __pfunctab 0100  
               i1RfTrcvSetup@tx 0074                  ??__CCBufRdByte 003C            __end_ofi1_RfTrcvMode 08FF  
                ??__CCBufWrByte 003C                   ??i1_SPI_Write 0070                       __pswtext1 000F  
                     __pswtext2 0025             i1__CCBufCalcPt@move 0070                       _rfPackets 00A0  
        __end_ofi1_RfTrcvStatus 0A2B            _RfTrcvCarrierPresent 0EC5                     ??_SPI_Write 0077  
             __CCBufWrByte@data 003D          __size_ofi1_RfTrcvSetup 003C                        _LATAbits 010C  
                      _LATBbits 010D                        _LATCbits 010E                       clear_ram0 0105  
                ??i1_mrf49XaIsr 0077          ?_RfPacketsHandleClient 0070                     ??_RfHalInit 0077  
           RfHalTickRxTh@packet 0024                        _SPI_Read 0CBB                   ??i1_RfTrcvGet 0071  
                 ??i1_RfTrcvPut 0073         __end_of__CCBufRdReverse 0000            __size_of_RfTrcvSetup 0033  
                      _WPUAbits 020C                    ??_mrf49XaIsr 0077                   _RfHalTickRxTh 0D32  
           i1_RfHalStatemachine 091E                   _RfHalTickTxTh 0E76           ?_RfTrcvCarrierPresent 0070  
               ??i1__CCBufCanWr 0070           i1__CCBufCalcPt@result 0072                 ?i1_RfTrcvStatus 0070  
             RfTrcvCrcTick@data 0039                     _MRF49XAInit 0BD2                     ??_RfTrcvGet 0077  
                   ??_RfTrcvPut 0077             __end_ofi1_SPI_Write 0A1F         __end_of_RfPacketsTickTh 0F3B  
              __size_of_AdcInit 000F                    ?_SysInitGpio 0070            ?i1_RfHalStatemachine 0070  
            __end_of_mrf49XaIsr 0AA7                   i1_RfTrcvSetup 098F                  ?_RfHalTickRxTh 0070  
                ?_RfHalTickTxTh 0070                        __fptable 0100                    i1RfTrcvGet@b 0071  
                 ??__CCBufCanRd 0077                   ??__CCBufCanWr 0077             __end_ofi1_RfTrcvGet 098F  
           __end_ofi1_RfTrcvPut 0986                        __ptext10 0F92                        __ptext11 0F3B  
                      __ptext20 0E2D                        __ptext12 0E76                        __ptext21 0000  
                      __ptext13 0EC5                        __ptext30 0000                        __ptext22 0E21  
                      __ptext14 0C5C                        __ptext31 0EB8                        __ptext23 0000  
                      __ptext15 0CBB                        __ptext40 08FF                        __ptext32 0BD2  
                      __ptext24 0E6A                        __ptext16 0FB5                        __ptext41 0A1F  
                      __ptext33 0B9F                        __ptext25 0E5F                        __ptext17 0FF4  
                      __ptext50 0986                        __ptext42 091E                        __ptext34 0AF6  
                      __ptext26 0E53                        __ptext18 0D32                        __ptext51 09D4  
                      __ptext43 0A61                        __ptext35 0C51                        __ptext27 0E4A  
                      __ptext19 0000                        __ptext52 0A2B                        __ptext44 0000  
                      __ptext36 0C66                        __ptext28 0D07                        __ptext53 0000  
                      __ptext45 0A7D                        __ptext37 0D02                        __ptext29 0000  
                      __ptext46 08EF                        __ptext38 0CF3                        __ptext47 098F  
                      __ptext48 097D                        __ptext49 09CB            __end_of__CCBufCalcPt 0E2D  
                 ??__CCBufReset 0039            __end_of__CCBufRdByte 0E4A                        _rfPkTime 002F  
          __end_of__CCBufWrByte 0B26                ??_RfHalGetReturn 0077                   __size_of_main 0052  
                      _rfStatus 0020           ??i1_RfHalStatemachine 0076           __size_ofi1_RfTrcvMode 0010  
      __size_ofi1_RfTrcvCrcTick 0000                  ?i1_RfTrcvSetup 0070                ?__CCBufRdReverse 0070  
                   i1_SPI_Write 09D4          ??_RfTrcvCarrierPresent 0077                      _INTCONbits 000B  
           i1MRF49XACommand@cmd 0071            __end_ofi1_mrf49XaIsr 091E                   ?_RfHalAnyFree 0070  
                 ?_RfHalGetFree 0070                    i1_RfTrcvMode 08EF                ?_RfPacketsTickTh 0070  
                      intlevel1 0100             __end_of__CCBufCanRd 0000             __end_of__CCBufCanWr 0000  
           __end_of__CCBufReset 0000            RfHalGetReturn@packet 0039               ?i1_MRF49XACommand 0071  
       __size_of_MRF49XACommand 000B                      i1_SPI_Read 0A2B              ??i1_MRF49XACommand 0073  
                   RfHalTxGet@i 003C         __size_ofi1__CCBufCalcPt 000C                 ??_RfHalTickRxTh 003E  
               ??_RfHalTickTxTh 003F                     i1_RfTrcvGet 0986                     i1_RfTrcvPut 097D  
                ??_RfHalAnyFree 0077                  ??_RfHalGetFree 0077         __size_ofi1__CCBufWrByte 001C  
  __size_of_RfPacketSimpleReply 001B                      RfHalInit@i 003F                   fp__mrf49XaIsr 0103  
       ??_RfPacketsHandleClient 0077            __size_of_SysInitGpio 001C  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Tue Aug 26 14:22:11 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text16,local,class=CODE,merge=1,delta=2
    19                           	psect	text18,local,class=CODE,merge=1,delta=2
    20                           	psect	text26,local,class=CODE,merge=1,delta=2
    21                           	psect	text28,local,class=CODE,merge=1,delta=2
    22                           	psect	text29,local,class=CODE,merge=1,delta=2
    23                           	psect	text44,local,class=CODE,merge=1,delta=2
    24                           	psect	text47,local,class=CODE,merge=1,delta=2
    25                           	psect	text50,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text74,local,class=CODE,merge=1,delta=2
    28                           	psect	text77,local,class=CODE,merge=1,delta=2
    29                           	psect	pa_nodes,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0015                     	;# 
    50  0016                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001C                     	;# 
    58  008C                     	;# 
    59  008D                     	;# 
    60  008E                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0095                     	;# 
    65  0096                     	;# 
    66  0097                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010D                     	;# 
    77  010E                     	;# 
    78  0111                     	;# 
    79  0112                     	;# 
    80  0113                     	;# 
    81  0114                     	;# 
    82  0115                     	;# 
    83  0116                     	;# 
    84  0117                     	;# 
    85  0118                     	;# 
    86  0119                     	;# 
    87  011D                     	;# 
    88  018C                     	;# 
    89  018D                     	;# 
    90  018E                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0199                     	;# 
   100  019A                     	;# 
   101  019B                     	;# 
   102  019B                     	;# 
   103  019C                     	;# 
   104  019D                     	;# 
   105  019E                     	;# 
   106  019F                     	;# 
   107  020C                     	;# 
   108  020D                     	;# 
   109  0211                     	;# 
   110  0211                     	;# 
   111  0212                     	;# 
   112  0212                     	;# 
   113  0213                     	;# 
   114  0213                     	;# 
   115  0214                     	;# 
   116  0214                     	;# 
   117  0215                     	;# 
   118  0215                     	;# 
   119  0215                     	;# 
   120  0216                     	;# 
   121  0216                     	;# 
   122  0217                     	;# 
   123  0217                     	;# 
   124  0391                     	;# 
   125  0392                     	;# 
   126  0393                     	;# 
   127  0394                     	;# 
   128  0395                     	;# 
   129  0396                     	;# 
   130  0498                     	;# 
   131  0498                     	;# 
   132  0499                     	;# 
   133  049A                     	;# 
   134  049B                     	;# 
   135  049B                     	;# 
   136  049C                     	;# 
   137  049E                     	;# 
   138  049F                     	;# 
   139  0611                     	;# 
   140  0612                     	;# 
   141  0613                     	;# 
   142  0613                     	;# 
   143  0614                     	;# 
   144  0615                     	;# 
   145  0616                     	;# 
   146  0616                     	;# 
   147  0617                     	;# 
   148  0618                     	;# 
   149  0619                     	;# 
   150  0619                     	;# 
   151  061A                     	;# 
   152  061B                     	;# 
   153  061C                     	;# 
   154  061C                     	;# 
   155  0691                     	;# 
   156  0692                     	;# 
   157  0693                     	;# 
   158  0694                     	;# 
   159  0695                     	;# 
   160  0F0F                     	;# 
   161  0F10                     	;# 
   162  0F11                     	;# 
   163  0F12                     	;# 
   164  0F13                     	;# 
   165  0F14                     	;# 
   166  0F15                     	;# 
   167  0F16                     	;# 
   168  0F17                     	;# 
   169  0F18                     	;# 
   170  0F19                     	;# 
   171  0F1A                     	;# 
   172  0F1B                     	;# 
   173  0F1C                     	;# 
   174  0F1D                     	;# 
   175  0F1E                     	;# 
   176  0F1F                     	;# 
   177  0F20                     	;# 
   178  0F21                     	;# 
   179  0F22                     	;# 
   180  0F23                     	;# 
   181  0F24                     	;# 
   182  0F25                     	;# 
   183  0F26                     	;# 
   184  0F27                     	;# 
   185  0F28                     	;# 
   186  0F29                     	;# 
   187  0F2A                     	;# 
   188  0F2B                     	;# 
   189  0F2C                     	;# 
   190  0F2D                     	;# 
   191  0F2E                     	;# 
   192  0F2F                     	;# 
   193  0F8C                     	;# 
   194  0F8D                     	;# 
   195  0F91                     	;# 
   196  0F95                     	;# 
   197  0F96                     	;# 
   198  0F97                     	;# 
   199  0F9C                     	;# 
   200  0F9D                     	;# 
   201  0F9E                     	;# 
   202  0FE3                     	;# 
   203  0FE4                     	;# 
   204  0FE5                     	;# 
   205  0FE6                     	;# 
   206  0FE7                     	;# 
   207  0FE8                     	;# 
   208  0FE9                     	;# 
   209  0FEA                     	;# 
   210  0FEB                     	;# 
   211  0FED                     	;# 
   212  0FEE                     	;# 
   213  0FEF                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  008C                     	;# 
   242  008D                     	;# 
   243  008E                     	;# 
   244  0091                     	;# 
   245  0092                     	;# 
   246  0093                     	;# 
   247  0095                     	;# 
   248  0096                     	;# 
   249  0097                     	;# 
   250  0099                     	;# 
   251  009A                     	;# 
   252  009B                     	;# 
   253  009B                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  0111                     	;# 
   262  0112                     	;# 
   263  0113                     	;# 
   264  0114                     	;# 
   265  0115                     	;# 
   266  0116                     	;# 
   267  0117                     	;# 
   268  0118                     	;# 
   269  0119                     	;# 
   270  011D                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273  018E                     	;# 
   274  0191                     	;# 
   275  0191                     	;# 
   276  0192                     	;# 
   277  0193                     	;# 
   278  0193                     	;# 
   279  0194                     	;# 
   280  0195                     	;# 
   281  0196                     	;# 
   282  0199                     	;# 
   283  019A                     	;# 
   284  019B                     	;# 
   285  019B                     	;# 
   286  019C                     	;# 
   287  019D                     	;# 
   288  019E                     	;# 
   289  019F                     	;# 
   290  020C                     	;# 
   291  020D                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  0212                     	;# 
   295  0212                     	;# 
   296  0213                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0214                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  0391                     	;# 
   308  0392                     	;# 
   309  0393                     	;# 
   310  0394                     	;# 
   311  0395                     	;# 
   312  0396                     	;# 
   313  0498                     	;# 
   314  0498                     	;# 
   315  0499                     	;# 
   316  049A                     	;# 
   317  049B                     	;# 
   318  049B                     	;# 
   319  049C                     	;# 
   320  049E                     	;# 
   321  049F                     	;# 
   322  0611                     	;# 
   323  0612                     	;# 
   324  0613                     	;# 
   325  0613                     	;# 
   326  0614                     	;# 
   327  0615                     	;# 
   328  0616                     	;# 
   329  0616                     	;# 
   330  0617                     	;# 
   331  0618                     	;# 
   332  0619                     	;# 
   333  0619                     	;# 
   334  061A                     	;# 
   335  061B                     	;# 
   336  061C                     	;# 
   337  061C                     	;# 
   338  0691                     	;# 
   339  0692                     	;# 
   340  0693                     	;# 
   341  0694                     	;# 
   342  0695                     	;# 
   343  0F0F                     	;# 
   344  0F10                     	;# 
   345  0F11                     	;# 
   346  0F12                     	;# 
   347  0F13                     	;# 
   348  0F14                     	;# 
   349  0F15                     	;# 
   350  0F16                     	;# 
   351  0F17                     	;# 
   352  0F18                     	;# 
   353  0F19                     	;# 
   354  0F1A                     	;# 
   355  0F1B                     	;# 
   356  0F1C                     	;# 
   357  0F1D                     	;# 
   358  0F1E                     	;# 
   359  0F1F                     	;# 
   360  0F20                     	;# 
   361  0F21                     	;# 
   362  0F22                     	;# 
   363  0F23                     	;# 
   364  0F24                     	;# 
   365  0F25                     	;# 
   366  0F26                     	;# 
   367  0F27                     	;# 
   368  0F28                     	;# 
   369  0F29                     	;# 
   370  0F2A                     	;# 
   371  0F2B                     	;# 
   372  0F2C                     	;# 
   373  0F2D                     	;# 
   374  0F2E                     	;# 
   375  0F2F                     	;# 
   376  0F8C                     	;# 
   377  0F8D                     	;# 
   378  0F91                     	;# 
   379  0F95                     	;# 
   380  0F96                     	;# 
   381  0F97                     	;# 
   382  0F9C                     	;# 
   383  0F9D                     	;# 
   384  0F9E                     	;# 
   385  0FE3                     	;# 
   386  0FE4                     	;# 
   387  0FE5                     	;# 
   388  0FE6                     	;# 
   389  0FE7                     	;# 
   390  0FE8                     	;# 
   391  0FE9                     	;# 
   392  0FEA                     	;# 
   393  0FEB                     	;# 
   394  0FED                     	;# 
   395  0FEE                     	;# 
   396  0FEF                     	;# 
   397  0000                     	;# 
   398  0001                     	;# 
   399  0002                     	;# 
   400  0003                     	;# 
   401  0004                     	;# 
   402  0005                     	;# 
   403  0006                     	;# 
   404  0007                     	;# 
   405  0008                     	;# 
   406  0009                     	;# 
   407  000A                     	;# 
   408  000B                     	;# 
   409  000C                     	;# 
   410  000D                     	;# 
   411  000E                     	;# 
   412  0011                     	;# 
   413  0012                     	;# 
   414  0013                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  0111                     	;# 
   445  0112                     	;# 
   446  0113                     	;# 
   447  0114                     	;# 
   448  0115                     	;# 
   449  0116                     	;# 
   450  0117                     	;# 
   451  0118                     	;# 
   452  0119                     	;# 
   453  011D                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456  018E                     	;# 
   457  0191                     	;# 
   458  0191                     	;# 
   459  0192                     	;# 
   460  0193                     	;# 
   461  0193                     	;# 
   462  0194                     	;# 
   463  0195                     	;# 
   464  0196                     	;# 
   465  0199                     	;# 
   466  019A                     	;# 
   467  019B                     	;# 
   468  019B                     	;# 
   469  019C                     	;# 
   470  019D                     	;# 
   471  019E                     	;# 
   472  019F                     	;# 
   473  020C                     	;# 
   474  020D                     	;# 
   475  0211                     	;# 
   476  0211                     	;# 
   477  0212                     	;# 
   478  0212                     	;# 
   479  0213                     	;# 
   480  0213                     	;# 
   481  0214                     	;# 
   482  0214                     	;# 
   483  0215                     	;# 
   484  0215                     	;# 
   485  0215                     	;# 
   486  0216                     	;# 
   487  0216                     	;# 
   488  0217                     	;# 
   489  0217                     	;# 
   490  0391                     	;# 
   491  0392                     	;# 
   492  0393                     	;# 
   493  0394                     	;# 
   494  0395                     	;# 
   495  0396                     	;# 
   496  0498                     	;# 
   497  0498                     	;# 
   498  0499                     	;# 
   499  049A                     	;# 
   500  049B                     	;# 
   501  049B                     	;# 
   502  049C                     	;# 
   503  049E                     	;# 
   504  049F                     	;# 
   505  0611                     	;# 
   506  0612                     	;# 
   507  0613                     	;# 
   508  0613                     	;# 
   509  0614                     	;# 
   510  0615                     	;# 
   511  0616                     	;# 
   512  0616                     	;# 
   513  0617                     	;# 
   514  0618                     	;# 
   515  0619                     	;# 
   516  0619                     	;# 
   517  061A                     	;# 
   518  061B                     	;# 
   519  061C                     	;# 
   520  061C                     	;# 
   521  0691                     	;# 
   522  0692                     	;# 
   523  0693                     	;# 
   524  0694                     	;# 
   525  0695                     	;# 
   526  0F0F                     	;# 
   527  0F10                     	;# 
   528  0F11                     	;# 
   529  0F12                     	;# 
   530  0F13                     	;# 
   531  0F14                     	;# 
   532  0F15                     	;# 
   533  0F16                     	;# 
   534  0F17                     	;# 
   535  0F18                     	;# 
   536  0F19                     	;# 
   537  0F1A                     	;# 
   538  0F1B                     	;# 
   539  0F1C                     	;# 
   540  0F1D                     	;# 
   541  0F1E                     	;# 
   542  0F1F                     	;# 
   543  0F20                     	;# 
   544  0F21                     	;# 
   545  0F22                     	;# 
   546  0F23                     	;# 
   547  0F24                     	;# 
   548  0F25                     	;# 
   549  0F26                     	;# 
   550  0F27                     	;# 
   551  0F28                     	;# 
   552  0F29                     	;# 
   553  0F2A                     	;# 
   554  0F2B                     	;# 
   555  0F2C                     	;# 
   556  0F2D                     	;# 
   557  0F2E                     	;# 
   558  0F2F                     	;# 
   559  0F8C                     	;# 
   560  0F8D                     	;# 
   561  0F91                     	;# 
   562  0F95                     	;# 
   563  0F96                     	;# 
   564  0F97                     	;# 
   565  0F9C                     	;# 
   566  0F9D                     	;# 
   567  0F9E                     	;# 
   568  0FE3                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0011                     	;# 
   596  0012                     	;# 
   597  0013                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  008E                     	;# 
   610  0091                     	;# 
   611  0092                     	;# 
   612  0093                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  0111                     	;# 
   628  0112                     	;# 
   629  0113                     	;# 
   630  0114                     	;# 
   631  0115                     	;# 
   632  0116                     	;# 
   633  0117                     	;# 
   634  0118                     	;# 
   635  0119                     	;# 
   636  011D                     	;# 
   637  018C                     	;# 
   638  018D                     	;# 
   639  018E                     	;# 
   640  0191                     	;# 
   641  0191                     	;# 
   642  0192                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020C                     	;# 
   657  020D                     	;# 
   658  0211                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0212                     	;# 
   662  0213                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0214                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  0391                     	;# 
   674  0392                     	;# 
   675  0393                     	;# 
   676  0394                     	;# 
   677  0395                     	;# 
   678  0396                     	;# 
   679  0498                     	;# 
   680  0498                     	;# 
   681  0499                     	;# 
   682  049A                     	;# 
   683  049B                     	;# 
   684  049B                     	;# 
   685  049C                     	;# 
   686  049E                     	;# 
   687  049F                     	;# 
   688  0611                     	;# 
   689  0612                     	;# 
   690  0613                     	;# 
   691  0613                     	;# 
   692  0614                     	;# 
   693  0615                     	;# 
   694  0616                     	;# 
   695  0616                     	;# 
   696  0617                     	;# 
   697  0618                     	;# 
   698  0619                     	;# 
   699  0619                     	;# 
   700  061A                     	;# 
   701  061B                     	;# 
   702  061C                     	;# 
   703  061C                     	;# 
   704  0691                     	;# 
   705  0692                     	;# 
   706  0693                     	;# 
   707  0694                     	;# 
   708  0695                     	;# 
   709  0F0F                     	;# 
   710  0F10                     	;# 
   711  0F11                     	;# 
   712  0F12                     	;# 
   713  0F13                     	;# 
   714  0F14                     	;# 
   715  0F15                     	;# 
   716  0F16                     	;# 
   717  0F17                     	;# 
   718  0F18                     	;# 
   719  0F19                     	;# 
   720  0F1A                     	;# 
   721  0F1B                     	;# 
   722  0F1C                     	;# 
   723  0F1D                     	;# 
   724  0F1E                     	;# 
   725  0F1F                     	;# 
   726  0F20                     	;# 
   727  0F21                     	;# 
   728  0F22                     	;# 
   729  0F23                     	;# 
   730  0F24                     	;# 
   731  0F25                     	;# 
   732  0F26                     	;# 
   733  0F27                     	;# 
   734  0F28                     	;# 
   735  0F29                     	;# 
   736  0F2A                     	;# 
   737  0F2B                     	;# 
   738  0F2C                     	;# 
   739  0F2D                     	;# 
   740  0F2E                     	;# 
   741  0F2F                     	;# 
   742  0F8C                     	;# 
   743  0F8D                     	;# 
   744  0F91                     	;# 
   745  0F95                     	;# 
   746  0F96                     	;# 
   747  0F97                     	;# 
   748  0F9C                     	;# 
   749  0F9D                     	;# 
   750  0F9E                     	;# 
   751  0FE3                     	;# 
   752  0FE4                     	;# 
   753  0FE5                     	;# 
   754  0FE6                     	;# 
   755  0FE7                     	;# 
   756  0FE8                     	;# 
   757  0FE9                     	;# 
   758  0FEA                     	;# 
   759  0FEB                     	;# 
   760  0FED                     	;# 
   761  0FEE                     	;# 
   762  0FEF                     	;# 
   763  0000                     	;# 
   764  0001                     	;# 
   765  0002                     	;# 
   766  0003                     	;# 
   767  0004                     	;# 
   768  0005                     	;# 
   769  0006                     	;# 
   770  0007                     	;# 
   771  0008                     	;# 
   772  0009                     	;# 
   773  000A                     	;# 
   774  000B                     	;# 
   775  000C                     	;# 
   776  000D                     	;# 
   777  000E                     	;# 
   778  0011                     	;# 
   779  0012                     	;# 
   780  0013                     	;# 
   781  0015                     	;# 
   782  0016                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  001A                     	;# 
   788  001B                     	;# 
   789  001C                     	;# 
   790  008C                     	;# 
   791  008D                     	;# 
   792  008E                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0095                     	;# 
   797  0096                     	;# 
   798  0097                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009B                     	;# 
   803  009C                     	;# 
   804  009D                     	;# 
   805  009E                     	;# 
   806  009F                     	;# 
   807  010C                     	;# 
   808  010D                     	;# 
   809  010E                     	;# 
   810  0111                     	;# 
   811  0112                     	;# 
   812  0113                     	;# 
   813  0114                     	;# 
   814  0115                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  0118                     	;# 
   818  0119                     	;# 
   819  011D                     	;# 
   820  018C                     	;# 
   821  018D                     	;# 
   822  018E                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0199                     	;# 
   832  019A                     	;# 
   833  019B                     	;# 
   834  019B                     	;# 
   835  019C                     	;# 
   836  019D                     	;# 
   837  019E                     	;# 
   838  019F                     	;# 
   839  020C                     	;# 
   840  020D                     	;# 
   841  0211                     	;# 
   842  0211                     	;# 
   843  0212                     	;# 
   844  0212                     	;# 
   845  0213                     	;# 
   846  0213                     	;# 
   847  0214                     	;# 
   848  0214                     	;# 
   849  0215                     	;# 
   850  0215                     	;# 
   851  0215                     	;# 
   852  0216                     	;# 
   853  0216                     	;# 
   854  0217                     	;# 
   855  0217                     	;# 
   856  0391                     	;# 
   857  0392                     	;# 
   858  0393                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  0498                     	;# 
   863  0498                     	;# 
   864  0499                     	;# 
   865  049A                     	;# 
   866  049B                     	;# 
   867  049B                     	;# 
   868  049C                     	;# 
   869  049E                     	;# 
   870  049F                     	;# 
   871  0611                     	;# 
   872  0612                     	;# 
   873  0613                     	;# 
   874  0613                     	;# 
   875  0614                     	;# 
   876  0615                     	;# 
   877  0616                     	;# 
   878  0616                     	;# 
   879  0617                     	;# 
   880  0618                     	;# 
   881  0619                     	;# 
   882  0619                     	;# 
   883  061A                     	;# 
   884  061B                     	;# 
   885  061C                     	;# 
   886  061C                     	;# 
   887  0691                     	;# 
   888  0692                     	;# 
   889  0693                     	;# 
   890  0694                     	;# 
   891  0695                     	;# 
   892  0F0F                     	;# 
   893  0F10                     	;# 
   894  0F11                     	;# 
   895  0F12                     	;# 
   896  0F13                     	;# 
   897  0F14                     	;# 
   898  0F15                     	;# 
   899  0F16                     	;# 
   900  0F17                     	;# 
   901  0F18                     	;# 
   902  0F19                     	;# 
   903  0F1A                     	;# 
   904  0F1B                     	;# 
   905  0F1C                     	;# 
   906  0F1D                     	;# 
   907  0F1E                     	;# 
   908  0F1F                     	;# 
   909  0F20                     	;# 
   910  0F21                     	;# 
   911  0F22                     	;# 
   912  0F23                     	;# 
   913  0F24                     	;# 
   914  0F25                     	;# 
   915  0F26                     	;# 
   916  0F27                     	;# 
   917  0F28                     	;# 
   918  0F29                     	;# 
   919  0F2A                     	;# 
   920  0F2B                     	;# 
   921  0F2C                     	;# 
   922  0F2D                     	;# 
   923  0F2E                     	;# 
   924  0F2F                     	;# 
   925  0F8C                     	;# 
   926  0F8D                     	;# 
   927  0F91                     	;# 
   928  0F95                     	;# 
   929  0F96                     	;# 
   930  0F97                     	;# 
   931  0F9C                     	;# 
   932  0F9D                     	;# 
   933  0F9E                     	;# 
   934  0FE3                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE9                     	;# 
   941  0FEA                     	;# 
   942  0FEB                     	;# 
   943  0FED                     	;# 
   944  0FEE                     	;# 
   945  0FEF                     	;# 
   946  0000                     	;# 
   947  0001                     	;# 
   948  0002                     	;# 
   949  0003                     	;# 
   950  0004                     	;# 
   951  0005                     	;# 
   952  0006                     	;# 
   953  0007                     	;# 
   954  0008                     	;# 
   955  0009                     	;# 
   956  000A                     	;# 
   957  000B                     	;# 
   958  000C                     	;# 
   959  000D                     	;# 
   960  000E                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0013                     	;# 
   964  0015                     	;# 
   965  0016                     	;# 
   966  0016                     	;# 
   967  0017                     	;# 
   968  0018                     	;# 
   969  0019                     	;# 
   970  001A                     	;# 
   971  001B                     	;# 
   972  001C                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0099                     	;# 
   983  009A                     	;# 
   984  009B                     	;# 
   985  009B                     	;# 
   986  009C                     	;# 
   987  009D                     	;# 
   988  009E                     	;# 
   989  009F                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0111                     	;# 
   994  0112                     	;# 
   995  0113                     	;# 
   996  0114                     	;# 
   997  0115                     	;# 
   998  0116                     	;# 
   999  0117                     	;# 
  1000  0118                     	;# 
  1001  0119                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0199                     	;# 
  1015  019A                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020C                     	;# 
  1023  020D                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0391                     	;# 
  1040  0392                     	;# 
  1041  0393                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0498                     	;# 
  1046  0498                     	;# 
  1047  0499                     	;# 
  1048  049A                     	;# 
  1049  049B                     	;# 
  1050  049B                     	;# 
  1051  049C                     	;# 
  1052  049E                     	;# 
  1053  049F                     	;# 
  1054  0611                     	;# 
  1055  0612                     	;# 
  1056  0613                     	;# 
  1057  0613                     	;# 
  1058  0614                     	;# 
  1059  0615                     	;# 
  1060  0616                     	;# 
  1061  0616                     	;# 
  1062  0617                     	;# 
  1063  0618                     	;# 
  1064  0619                     	;# 
  1065  0619                     	;# 
  1066  061A                     	;# 
  1067  061B                     	;# 
  1068  061C                     	;# 
  1069  061C                     	;# 
  1070  0691                     	;# 
  1071  0692                     	;# 
  1072  0693                     	;# 
  1073  0694                     	;# 
  1074  0695                     	;# 
  1075  0F0F                     	;# 
  1076  0F10                     	;# 
  1077  0F11                     	;# 
  1078  0F12                     	;# 
  1079  0F13                     	;# 
  1080  0F14                     	;# 
  1081  0F15                     	;# 
  1082  0F16                     	;# 
  1083  0F17                     	;# 
  1084  0F18                     	;# 
  1085  0F19                     	;# 
  1086  0F1A                     	;# 
  1087  0F1B                     	;# 
  1088  0F1C                     	;# 
  1089  0F1D                     	;# 
  1090  0F1E                     	;# 
  1091  0F1F                     	;# 
  1092  0F20                     	;# 
  1093  0F21                     	;# 
  1094  0F22                     	;# 
  1095  0F23                     	;# 
  1096  0F24                     	;# 
  1097  0F25                     	;# 
  1098  0F26                     	;# 
  1099  0F27                     	;# 
  1100  0F28                     	;# 
  1101  0F29                     	;# 
  1102  0F2A                     	;# 
  1103  0F2B                     	;# 
  1104  0F2C                     	;# 
  1105  0F2D                     	;# 
  1106  0F2E                     	;# 
  1107  0F2F                     	;# 
  1108  0F8C                     	;# 
  1109  0F8D                     	;# 
  1110  0F91                     	;# 
  1111  0F95                     	;# 
  1112  0F96                     	;# 
  1113  0F97                     	;# 
  1114  0F9C                     	;# 
  1115  0F9D                     	;# 
  1116  0F9E                     	;# 
  1117  0FE3                     	;# 
  1118  0FE4                     	;# 
  1119  0FE5                     	;# 
  1120  0FE6                     	;# 
  1121  0FE7                     	;# 
  1122  0FE8                     	;# 
  1123  0FE9                     	;# 
  1124  0FEA                     	;# 
  1125  0FEB                     	;# 
  1126  0FED                     	;# 
  1127  0FEE                     	;# 
  1128  0FEF                     	;# 
  1129  0000                     	;# 
  1130  0001                     	;# 
  1131  0002                     	;# 
  1132  0003                     	;# 
  1133  0004                     	;# 
  1134  0005                     	;# 
  1135  0006                     	;# 
  1136  0007                     	;# 
  1137  0008                     	;# 
  1138  0009                     	;# 
  1139  000A                     	;# 
  1140  000B                     	;# 
  1141  000C                     	;# 
  1142  000D                     	;# 
  1143  000E                     	;# 
  1144  0011                     	;# 
  1145  0012                     	;# 
  1146  0013                     	;# 
  1147  0015                     	;# 
  1148  0016                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001C                     	;# 
  1156  008C                     	;# 
  1157  008D                     	;# 
  1158  008E                     	;# 
  1159  0091                     	;# 
  1160  0092                     	;# 
  1161  0093                     	;# 
  1162  0095                     	;# 
  1163  0096                     	;# 
  1164  0097                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0111                     	;# 
  1177  0112                     	;# 
  1178  0113                     	;# 
  1179  0114                     	;# 
  1180  0115                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  0118                     	;# 
  1184  0119                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0199                     	;# 
  1198  019A                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019E                     	;# 
  1204  019F                     	;# 
  1205  020C                     	;# 
  1206  020D                     	;# 
  1207  0211                     	;# 
  1208  0211                     	;# 
  1209  0212                     	;# 
  1210  0212                     	;# 
  1211  0213                     	;# 
  1212  0213                     	;# 
  1213  0214                     	;# 
  1214  0214                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0391                     	;# 
  1223  0392                     	;# 
  1224  0393                     	;# 
  1225  0394                     	;# 
  1226  0395                     	;# 
  1227  0396                     	;# 
  1228  0498                     	;# 
  1229  0498                     	;# 
  1230  0499                     	;# 
  1231  049A                     	;# 
  1232  049B                     	;# 
  1233  049B                     	;# 
  1234  049C                     	;# 
  1235  049E                     	;# 
  1236  049F                     	;# 
  1237  0611                     	;# 
  1238  0612                     	;# 
  1239  0613                     	;# 
  1240  0613                     	;# 
  1241  0614                     	;# 
  1242  0615                     	;# 
  1243  0616                     	;# 
  1244  0616                     	;# 
  1245  0617                     	;# 
  1246  0618                     	;# 
  1247  0619                     	;# 
  1248  0619                     	;# 
  1249  061A                     	;# 
  1250  061B                     	;# 
  1251  061C                     	;# 
  1252  061C                     	;# 
  1253  0691                     	;# 
  1254  0692                     	;# 
  1255  0693                     	;# 
  1256  0694                     	;# 
  1257  0695                     	;# 
  1258  0F0F                     	;# 
  1259  0F10                     	;# 
  1260  0F11                     	;# 
  1261  0F12                     	;# 
  1262  0F13                     	;# 
  1263  0F14                     	;# 
  1264  0F15                     	;# 
  1265  0F16                     	;# 
  1266  0F17                     	;# 
  1267  0F18                     	;# 
  1268  0F19                     	;# 
  1269  0F1A                     	;# 
  1270  0F1B                     	;# 
  1271  0F1C                     	;# 
  1272  0F1D                     	;# 
  1273  0F1E                     	;# 
  1274  0F1F                     	;# 
  1275  0F20                     	;# 
  1276  0F21                     	;# 
  1277  0F22                     	;# 
  1278  0F23                     	;# 
  1279  0F24                     	;# 
  1280  0F25                     	;# 
  1281  0F26                     	;# 
  1282  0F27                     	;# 
  1283  0F28                     	;# 
  1284  0F29                     	;# 
  1285  0F2A                     	;# 
  1286  0F2B                     	;# 
  1287  0F2C                     	;# 
  1288  0F2D                     	;# 
  1289  0F2E                     	;# 
  1290  0F2F                     	;# 
  1291  0F8C                     	;# 
  1292  0F8D                     	;# 
  1293  0F91                     	;# 
  1294  0F95                     	;# 
  1295  0F96                     	;# 
  1296  0F97                     	;# 
  1297  0F9C                     	;# 
  1298  0F9D                     	;# 
  1299  0F9E                     	;# 
  1300  0FE3                     	;# 
  1301  0FE4                     	;# 
  1302  0FE5                     	;# 
  1303  0FE6                     	;# 
  1304  0FE7                     	;# 
  1305  0FE8                     	;# 
  1306  0FE9                     	;# 
  1307  0FEA                     	;# 
  1308  0FEB                     	;# 
  1309  0FED                     	;# 
  1310  0FEE                     	;# 
  1311  0FEF                     	;# 
  1312  0000                     	;# 
  1313  0001                     	;# 
  1314  0002                     	;# 
  1315  0003                     	;# 
  1316  0004                     	;# 
  1317  0005                     	;# 
  1318  0006                     	;# 
  1319  0007                     	;# 
  1320  0008                     	;# 
  1321  0009                     	;# 
  1322  000A                     	;# 
  1323  000B                     	;# 
  1324  000C                     	;# 
  1325  000D                     	;# 
  1326  000E                     	;# 
  1327  0011                     	;# 
  1328  0012                     	;# 
  1329  0013                     	;# 
  1330  0015                     	;# 
  1331  0016                     	;# 
  1332  0016                     	;# 
  1333  0017                     	;# 
  1334  0018                     	;# 
  1335  0019                     	;# 
  1336  001A                     	;# 
  1337  001B                     	;# 
  1338  001C                     	;# 
  1339  008C                     	;# 
  1340  008D                     	;# 
  1341  008E                     	;# 
  1342  0091                     	;# 
  1343  0092                     	;# 
  1344  0093                     	;# 
  1345  0095                     	;# 
  1346  0096                     	;# 
  1347  0097                     	;# 
  1348  0099                     	;# 
  1349  009A                     	;# 
  1350  009B                     	;# 
  1351  009B                     	;# 
  1352  009C                     	;# 
  1353  009D                     	;# 
  1354  009E                     	;# 
  1355  009F                     	;# 
  1356  010C                     	;# 
  1357  010D                     	;# 
  1358  010E                     	;# 
  1359  0111                     	;# 
  1360  0112                     	;# 
  1361  0113                     	;# 
  1362  0114                     	;# 
  1363  0115                     	;# 
  1364  0116                     	;# 
  1365  0117                     	;# 
  1366  0118                     	;# 
  1367  0119                     	;# 
  1368  011D                     	;# 
  1369  018C                     	;# 
  1370  018D                     	;# 
  1371  018E                     	;# 
  1372  0191                     	;# 
  1373  0191                     	;# 
  1374  0192                     	;# 
  1375  0193                     	;# 
  1376  0193                     	;# 
  1377  0194                     	;# 
  1378  0195                     	;# 
  1379  0196                     	;# 
  1380  0199                     	;# 
  1381  019A                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019C                     	;# 
  1385  019D                     	;# 
  1386  019E                     	;# 
  1387  019F                     	;# 
  1388  020C                     	;# 
  1389  020D                     	;# 
  1390  0211                     	;# 
  1391  0211                     	;# 
  1392  0212                     	;# 
  1393  0212                     	;# 
  1394  0213                     	;# 
  1395  0213                     	;# 
  1396  0214                     	;# 
  1397  0214                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0215                     	;# 
  1401  0216                     	;# 
  1402  0216                     	;# 
  1403  0217                     	;# 
  1404  0217                     	;# 
  1405  0391                     	;# 
  1406  0392                     	;# 
  1407  0393                     	;# 
  1408  0394                     	;# 
  1409  0395                     	;# 
  1410  0396                     	;# 
  1411  0498                     	;# 
  1412  0498                     	;# 
  1413  0499                     	;# 
  1414  049A                     	;# 
  1415  049B                     	;# 
  1416  049B                     	;# 
  1417  049C                     	;# 
  1418  049E                     	;# 
  1419  049F                     	;# 
  1420  0611                     	;# 
  1421  0612                     	;# 
  1422  0613                     	;# 
  1423  0613                     	;# 
  1424  0614                     	;# 
  1425  0615                     	;# 
  1426  0616                     	;# 
  1427  0616                     	;# 
  1428  0617                     	;# 
  1429  0618                     	;# 
  1430  0619                     	;# 
  1431  0619                     	;# 
  1432  061A                     	;# 
  1433  061B                     	;# 
  1434  061C                     	;# 
  1435  061C                     	;# 
  1436  0691                     	;# 
  1437  0692                     	;# 
  1438  0693                     	;# 
  1439  0694                     	;# 
  1440  0695                     	;# 
  1441  0F0F                     	;# 
  1442  0F10                     	;# 
  1443  0F11                     	;# 
  1444  0F12                     	;# 
  1445  0F13                     	;# 
  1446  0F14                     	;# 
  1447  0F15                     	;# 
  1448  0F16                     	;# 
  1449  0F17                     	;# 
  1450  0F18                     	;# 
  1451  0F19                     	;# 
  1452  0F1A                     	;# 
  1453  0F1B                     	;# 
  1454  0F1C                     	;# 
  1455  0F1D                     	;# 
  1456  0F1E                     	;# 
  1457  0F1F                     	;# 
  1458  0F20                     	;# 
  1459  0F21                     	;# 
  1460  0F22                     	;# 
  1461  0F23                     	;# 
  1462  0F24                     	;# 
  1463  0F25                     	;# 
  1464  0F26                     	;# 
  1465  0F27                     	;# 
  1466  0F28                     	;# 
  1467  0F29                     	;# 
  1468  0F2A                     	;# 
  1469  0F2B                     	;# 
  1470  0F2C                     	;# 
  1471  0F2D                     	;# 
  1472  0F2E                     	;# 
  1473  0F2F                     	;# 
  1474  0F8C                     	;# 
  1475  0F8D                     	;# 
  1476  0F91                     	;# 
  1477  0F95                     	;# 
  1478  0F96                     	;# 
  1479  0F97                     	;# 
  1480  0F9C                     	;# 
  1481  0F9D                     	;# 
  1482  0F9E                     	;# 
  1483  0FE3                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0011                     	;# 
  1511  0012                     	;# 
  1512  0013                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0093                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  009F                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0111                     	;# 
  1543  0112                     	;# 
  1544  0113                     	;# 
  1545  0114                     	;# 
  1546  0115                     	;# 
  1547  0116                     	;# 
  1548  0117                     	;# 
  1549  0118                     	;# 
  1550  0119                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0194                     	;# 
  1561  0195                     	;# 
  1562  0196                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020C                     	;# 
  1572  020D                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0498                     	;# 
  1595  0498                     	;# 
  1596  0499                     	;# 
  1597  049A                     	;# 
  1598  049B                     	;# 
  1599  049B                     	;# 
  1600  049C                     	;# 
  1601  049E                     	;# 
  1602  049F                     	;# 
  1603  0611                     	;# 
  1604  0612                     	;# 
  1605  0613                     	;# 
  1606  0613                     	;# 
  1607  0614                     	;# 
  1608  0615                     	;# 
  1609  0616                     	;# 
  1610  0616                     	;# 
  1611  0617                     	;# 
  1612  0618                     	;# 
  1613  0619                     	;# 
  1614  0619                     	;# 
  1615  061A                     	;# 
  1616  061B                     	;# 
  1617  061C                     	;# 
  1618  061C                     	;# 
  1619  0691                     	;# 
  1620  0692                     	;# 
  1621  0693                     	;# 
  1622  0694                     	;# 
  1623  0695                     	;# 
  1624  0F0F                     	;# 
  1625  0F10                     	;# 
  1626  0F11                     	;# 
  1627  0F12                     	;# 
  1628  0F13                     	;# 
  1629  0F14                     	;# 
  1630  0F15                     	;# 
  1631  0F16                     	;# 
  1632  0F17                     	;# 
  1633  0F18                     	;# 
  1634  0F19                     	;# 
  1635  0F1A                     	;# 
  1636  0F1B                     	;# 
  1637  0F1C                     	;# 
  1638  0F1D                     	;# 
  1639  0F1E                     	;# 
  1640  0F1F                     	;# 
  1641  0F20                     	;# 
  1642  0F21                     	;# 
  1643  0F22                     	;# 
  1644  0F23                     	;# 
  1645  0F24                     	;# 
  1646  0F25                     	;# 
  1647  0F26                     	;# 
  1648  0F27                     	;# 
  1649  0F28                     	;# 
  1650  0F29                     	;# 
  1651  0F2A                     	;# 
  1652  0F2B                     	;# 
  1653  0F2C                     	;# 
  1654  0F2D                     	;# 
  1655  0F2E                     	;# 
  1656  0F2F                     	;# 
  1657  0F8C                     	;# 
  1658  0F8D                     	;# 
  1659  0F91                     	;# 
  1660  0F95                     	;# 
  1661  0F96                     	;# 
  1662  0F97                     	;# 
  1663  0F9C                     	;# 
  1664  0F9D                     	;# 
  1665  0F9E                     	;# 
  1666  0FE3                     	;# 
  1667  0FE4                     	;# 
  1668  0FE5                     	;# 
  1669  0FE6                     	;# 
  1670  0FE7                     	;# 
  1671  0FE8                     	;# 
  1672  0FE9                     	;# 
  1673  0FEA                     	;# 
  1674  0FEB                     	;# 
  1675  0FED                     	;# 
  1676  0FEE                     	;# 
  1677  0FEF                     	;# 
  1678  0000                     	;# 
  1679  0001                     	;# 
  1680  0002                     	;# 
  1681  0003                     	;# 
  1682  0004                     	;# 
  1683  0005                     	;# 
  1684  0006                     	;# 
  1685  0007                     	;# 
  1686  0008                     	;# 
  1687  0009                     	;# 
  1688  000A                     	;# 
  1689  000B                     	;# 
  1690  000C                     	;# 
  1691  000D                     	;# 
  1692  000E                     	;# 
  1693  0011                     	;# 
  1694  0012                     	;# 
  1695  0013                     	;# 
  1696  0015                     	;# 
  1697  0016                     	;# 
  1698  0016                     	;# 
  1699  0017                     	;# 
  1700  0018                     	;# 
  1701  0019                     	;# 
  1702  001A                     	;# 
  1703  001B                     	;# 
  1704  001C                     	;# 
  1705  008C                     	;# 
  1706  008D                     	;# 
  1707  008E                     	;# 
  1708  0091                     	;# 
  1709  0092                     	;# 
  1710  0093                     	;# 
  1711  0095                     	;# 
  1712  0096                     	;# 
  1713  0097                     	;# 
  1714  0099                     	;# 
  1715  009A                     	;# 
  1716  009B                     	;# 
  1717  009B                     	;# 
  1718  009C                     	;# 
  1719  009D                     	;# 
  1720  009E                     	;# 
  1721  009F                     	;# 
  1722  010C                     	;# 
  1723  010D                     	;# 
  1724  010E                     	;# 
  1725  0111                     	;# 
  1726  0112                     	;# 
  1727  0113                     	;# 
  1728  0114                     	;# 
  1729  0115                     	;# 
  1730  0116                     	;# 
  1731  0117                     	;# 
  1732  0118                     	;# 
  1733  0119                     	;# 
  1734  011D                     	;# 
  1735  018C                     	;# 
  1736  018D                     	;# 
  1737  018E                     	;# 
  1738  0191                     	;# 
  1739  0191                     	;# 
  1740  0192                     	;# 
  1741  0193                     	;# 
  1742  0193                     	;# 
  1743  0194                     	;# 
  1744  0195                     	;# 
  1745  0196                     	;# 
  1746  0199                     	;# 
  1747  019A                     	;# 
  1748  019B                     	;# 
  1749  019B                     	;# 
  1750  019C                     	;# 
  1751  019D                     	;# 
  1752  019E                     	;# 
  1753  019F                     	;# 
  1754  020C                     	;# 
  1755  020D                     	;# 
  1756  0211                     	;# 
  1757  0211                     	;# 
  1758  0212                     	;# 
  1759  0212                     	;# 
  1760  0213                     	;# 
  1761  0213                     	;# 
  1762  0214                     	;# 
  1763  0214                     	;# 
  1764  0215                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0216                     	;# 
  1768  0216                     	;# 
  1769  0217                     	;# 
  1770  0217                     	;# 
  1771  0391                     	;# 
  1772  0392                     	;# 
  1773  0393                     	;# 
  1774  0394                     	;# 
  1775  0395                     	;# 
  1776  0396                     	;# 
  1777  0498                     	;# 
  1778  0498                     	;# 
  1779  0499                     	;# 
  1780  049A                     	;# 
  1781  049B                     	;# 
  1782  049B                     	;# 
  1783  049C                     	;# 
  1784  049E                     	;# 
  1785  049F                     	;# 
  1786  0611                     	;# 
  1787  0612                     	;# 
  1788  0613                     	;# 
  1789  0613                     	;# 
  1790  0614                     	;# 
  1791  0615                     	;# 
  1792  0616                     	;# 
  1793  0616                     	;# 
  1794  0617                     	;# 
  1795  0618                     	;# 
  1796  0619                     	;# 
  1797  0619                     	;# 
  1798  061A                     	;# 
  1799  061B                     	;# 
  1800  061C                     	;# 
  1801  061C                     	;# 
  1802  0691                     	;# 
  1803  0692                     	;# 
  1804  0693                     	;# 
  1805  0694                     	;# 
  1806  0695                     	;# 
  1807  0F0F                     	;# 
  1808  0F10                     	;# 
  1809  0F11                     	;# 
  1810  0F12                     	;# 
  1811  0F13                     	;# 
  1812  0F14                     	;# 
  1813  0F15                     	;# 
  1814  0F16                     	;# 
  1815  0F17                     	;# 
  1816  0F18                     	;# 
  1817  0F19                     	;# 
  1818  0F1A                     	;# 
  1819  0F1B                     	;# 
  1820  0F1C                     	;# 
  1821  0F1D                     	;# 
  1822  0F1E                     	;# 
  1823  0F1F                     	;# 
  1824  0F20                     	;# 
  1825  0F21                     	;# 
  1826  0F22                     	;# 
  1827  0F23                     	;# 
  1828  0F24                     	;# 
  1829  0F25                     	;# 
  1830  0F26                     	;# 
  1831  0F27                     	;# 
  1832  0F28                     	;# 
  1833  0F29                     	;# 
  1834  0F2A                     	;# 
  1835  0F2B                     	;# 
  1836  0F2C                     	;# 
  1837  0F2D                     	;# 
  1838  0F2E                     	;# 
  1839  0F2F                     	;# 
  1840  0F8C                     	;# 
  1841  0F8D                     	;# 
  1842  0F91                     	;# 
  1843  0F95                     	;# 
  1844  0F96                     	;# 
  1845  0F97                     	;# 
  1846  0F9C                     	;# 
  1847  0F9D                     	;# 
  1848  0F9E                     	;# 
  1849  0FE3                     	;# 
  1850  0FE4                     	;# 
  1851  0FE5                     	;# 
  1852  0FE6                     	;# 
  1853  0FE7                     	;# 
  1854  0FE8                     	;# 
  1855  0FE9                     	;# 
  1856  0FEA                     	;# 
  1857  0FEB                     	;# 
  1858  0FED                     	;# 
  1859  0FEE                     	;# 
  1860  0FEF                     	;# 
  1861  0000                     	;# 
  1862  0001                     	;# 
  1863  0002                     	;# 
  1864  0003                     	;# 
  1865  0004                     	;# 
  1866  0005                     	;# 
  1867  0006                     	;# 
  1868  0007                     	;# 
  1869  0008                     	;# 
  1870  0009                     	;# 
  1871  000A                     	;# 
  1872  000B                     	;# 
  1873  000C                     	;# 
  1874  000D                     	;# 
  1875  000E                     	;# 
  1876  0011                     	;# 
  1877  0012                     	;# 
  1878  0013                     	;# 
  1879  0015                     	;# 
  1880  0016                     	;# 
  1881  0016                     	;# 
  1882  0017                     	;# 
  1883  0018                     	;# 
  1884  0019                     	;# 
  1885  001A                     	;# 
  1886  001B                     	;# 
  1887  001C                     	;# 
  1888  008C                     	;# 
  1889  008D                     	;# 
  1890  008E                     	;# 
  1891  0091                     	;# 
  1892  0092                     	;# 
  1893  0093                     	;# 
  1894  0095                     	;# 
  1895  0096                     	;# 
  1896  0097                     	;# 
  1897  0099                     	;# 
  1898  009A                     	;# 
  1899  009B                     	;# 
  1900  009B                     	;# 
  1901  009C                     	;# 
  1902  009D                     	;# 
  1903  009E                     	;# 
  1904  009F                     	;# 
  1905  010C                     	;# 
  1906  010D                     	;# 
  1907  010E                     	;# 
  1908  0111                     	;# 
  1909  0112                     	;# 
  1910  0113                     	;# 
  1911  0114                     	;# 
  1912  0115                     	;# 
  1913  0116                     	;# 
  1914  0117                     	;# 
  1915  0118                     	;# 
  1916  0119                     	;# 
  1917  011D                     	;# 
  1918  018C                     	;# 
  1919  018D                     	;# 
  1920  018E                     	;# 
  1921  0191                     	;# 
  1922  0191                     	;# 
  1923  0192                     	;# 
  1924  0193                     	;# 
  1925  0193                     	;# 
  1926  0194                     	;# 
  1927  0195                     	;# 
  1928  0196                     	;# 
  1929  0199                     	;# 
  1930  019A                     	;# 
  1931  019B                     	;# 
  1932  019B                     	;# 
  1933  019C                     	;# 
  1934  019D                     	;# 
  1935  019E                     	;# 
  1936  019F                     	;# 
  1937  020C                     	;# 
  1938  020D                     	;# 
  1939  0211                     	;# 
  1940  0211                     	;# 
  1941  0212                     	;# 
  1942  0212                     	;# 
  1943  0213                     	;# 
  1944  0213                     	;# 
  1945  0214                     	;# 
  1946  0214                     	;# 
  1947  0215                     	;# 
  1948  0215                     	;# 
  1949  0215                     	;# 
  1950  0216                     	;# 
  1951  0216                     	;# 
  1952  0217                     	;# 
  1953  0217                     	;# 
  1954  0391                     	;# 
  1955  0392                     	;# 
  1956  0393                     	;# 
  1957  0394                     	;# 
  1958  0395                     	;# 
  1959  0396                     	;# 
  1960  0498                     	;# 
  1961  0498                     	;# 
  1962  0499                     	;# 
  1963  049A                     	;# 
  1964  049B                     	;# 
  1965  049B                     	;# 
  1966  049C                     	;# 
  1967  049E                     	;# 
  1968  049F                     	;# 
  1969  0611                     	;# 
  1970  0612                     	;# 
  1971  0613                     	;# 
  1972  0613                     	;# 
  1973  0614                     	;# 
  1974  0615                     	;# 
  1975  0616                     	;# 
  1976  0616                     	;# 
  1977  0617                     	;# 
  1978  0618                     	;# 
  1979  0619                     	;# 
  1980  0619                     	;# 
  1981  061A                     	;# 
  1982  061B                     	;# 
  1983  061C                     	;# 
  1984  061C                     	;# 
  1985  0691                     	;# 
  1986  0692                     	;# 
  1987  0693                     	;# 
  1988  0694                     	;# 
  1989  0695                     	;# 
  1990  0F0F                     	;# 
  1991  0F10                     	;# 
  1992  0F11                     	;# 
  1993  0F12                     	;# 
  1994  0F13                     	;# 
  1995  0F14                     	;# 
  1996  0F15                     	;# 
  1997  0F16                     	;# 
  1998  0F17                     	;# 
  1999  0F18                     	;# 
  2000  0F19                     	;# 
  2001  0F1A                     	;# 
  2002  0F1B                     	;# 
  2003  0F1C                     	;# 
  2004  0F1D                     	;# 
  2005  0F1E                     	;# 
  2006  0F1F                     	;# 
  2007  0F20                     	;# 
  2008  0F21                     	;# 
  2009  0F22                     	;# 
  2010  0F23                     	;# 
  2011  0F24                     	;# 
  2012  0F25                     	;# 
  2013  0F26                     	;# 
  2014  0F27                     	;# 
  2015  0F28                     	;# 
  2016  0F29                     	;# 
  2017  0F2A                     	;# 
  2018  0F2B                     	;# 
  2019  0F2C                     	;# 
  2020  0F2D                     	;# 
  2021  0F2E                     	;# 
  2022  0F2F                     	;# 
  2023  0F8C                     	;# 
  2024  0F8D                     	;# 
  2025  0F91                     	;# 
  2026  0F95                     	;# 
  2027  0F96                     	;# 
  2028  0F97                     	;# 
  2029  0F9C                     	;# 
  2030  0F9D                     	;# 
  2031  0F9E                     	;# 
  2032  0FE3                     	;# 
  2033  0FE4                     	;# 
  2034  0FE5                     	;# 
  2035  0FE6                     	;# 
  2036  0FE7                     	;# 
  2037  0FE8                     	;# 
  2038  0FE9                     	;# 
  2039  0FEA                     	;# 
  2040  0FEB                     	;# 
  2041  0FED                     	;# 
  2042  0FEE                     	;# 
  2043  0FEF                     	;# 
  2044  0000                     	;# 
  2045  0001                     	;# 
  2046  0002                     	;# 
  2047  0003                     	;# 
  2048  0004                     	;# 
  2049  0005                     	;# 
  2050  0006                     	;# 
  2051  0007                     	;# 
  2052  0008                     	;# 
  2053  0009                     	;# 
  2054  000A                     	;# 
  2055  000B                     	;# 
  2056  000C                     	;# 
  2057  000D                     	;# 
  2058  000E                     	;# 
  2059  0011                     	;# 
  2060  0012                     	;# 
  2061  0013                     	;# 
  2062  0015                     	;# 
  2063  0016                     	;# 
  2064  0016                     	;# 
  2065  0017                     	;# 
  2066  0018                     	;# 
  2067  0019                     	;# 
  2068  001A                     	;# 
  2069  001B                     	;# 
  2070  001C                     	;# 
  2071  008C                     	;# 
  2072  008D                     	;# 
  2073  008E                     	;# 
  2074  0091                     	;# 
  2075  0092                     	;# 
  2076  0093                     	;# 
  2077  0095                     	;# 
  2078  0096                     	;# 
  2079  0097                     	;# 
  2080  0099                     	;# 
  2081  009A                     	;# 
  2082  009B                     	;# 
  2083  009B                     	;# 
  2084  009C                     	;# 
  2085  009D                     	;# 
  2086  009E                     	;# 
  2087  009F                     	;# 
  2088  010C                     	;# 
  2089  010D                     	;# 
  2090  010E                     	;# 
  2091  0111                     	;# 
  2092  0112                     	;# 
  2093  0113                     	;# 
  2094  0114                     	;# 
  2095  0115                     	;# 
  2096  0116                     	;# 
  2097  0117                     	;# 
  2098  0118                     	;# 
  2099  0119                     	;# 
  2100  011D                     	;# 
  2101  018C                     	;# 
  2102  018D                     	;# 
  2103  018E                     	;# 
  2104  0191                     	;# 
  2105  0191                     	;# 
  2106  0192                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0199                     	;# 
  2113  019A                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019C                     	;# 
  2117  019D                     	;# 
  2118  019E                     	;# 
  2119  019F                     	;# 
  2120  020C                     	;# 
  2121  020D                     	;# 
  2122  0211                     	;# 
  2123  0211                     	;# 
  2124  0212                     	;# 
  2125  0212                     	;# 
  2126  0213                     	;# 
  2127  0213                     	;# 
  2128  0214                     	;# 
  2129  0214                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0216                     	;# 
  2134  0216                     	;# 
  2135  0217                     	;# 
  2136  0217                     	;# 
  2137  0391                     	;# 
  2138  0392                     	;# 
  2139  0393                     	;# 
  2140  0394                     	;# 
  2141  0395                     	;# 
  2142  0396                     	;# 
  2143  0498                     	;# 
  2144  0498                     	;# 
  2145  0499                     	;# 
  2146  049A                     	;# 
  2147  049B                     	;# 
  2148  049B                     	;# 
  2149  049C                     	;# 
  2150  049E                     	;# 
  2151  049F                     	;# 
  2152  0611                     	;# 
  2153  0612                     	;# 
  2154  0613                     	;# 
  2155  0613                     	;# 
  2156  0614                     	;# 
  2157  0615                     	;# 
  2158  0616                     	;# 
  2159  0616                     	;# 
  2160  0617                     	;# 
  2161  0618                     	;# 
  2162  0619                     	;# 
  2163  0619                     	;# 
  2164  061A                     	;# 
  2165  061B                     	;# 
  2166  061C                     	;# 
  2167  061C                     	;# 
  2168  0691                     	;# 
  2169  0692                     	;# 
  2170  0693                     	;# 
  2171  0694                     	;# 
  2172  0695                     	;# 
  2173  0F0F                     	;# 
  2174  0F10                     	;# 
  2175  0F11                     	;# 
  2176  0F12                     	;# 
  2177  0F13                     	;# 
  2178  0F14                     	;# 
  2179  0F15                     	;# 
  2180  0F16                     	;# 
  2181  0F17                     	;# 
  2182  0F18                     	;# 
  2183  0F19                     	;# 
  2184  0F1A                     	;# 
  2185  0F1B                     	;# 
  2186  0F1C                     	;# 
  2187  0F1D                     	;# 
  2188  0F1E                     	;# 
  2189  0F1F                     	;# 
  2190  0F20                     	;# 
  2191  0F21                     	;# 
  2192  0F22                     	;# 
  2193  0F23                     	;# 
  2194  0F24                     	;# 
  2195  0F25                     	;# 
  2196  0F26                     	;# 
  2197  0F27                     	;# 
  2198  0F28                     	;# 
  2199  0F29                     	;# 
  2200  0F2A                     	;# 
  2201  0F2B                     	;# 
  2202  0F2C                     	;# 
  2203  0F2D                     	;# 
  2204  0F2E                     	;# 
  2205  0F2F                     	;# 
  2206  0F8C                     	;# 
  2207  0F8D                     	;# 
  2208  0F91                     	;# 
  2209  0F95                     	;# 
  2210  0F96                     	;# 
  2211  0F97                     	;# 
  2212  0F9C                     	;# 
  2213  0F9D                     	;# 
  2214  0F9E                     	;# 
  2215  0FE3                     	;# 
  2216  0FE4                     	;# 
  2217  0FE5                     	;# 
  2218  0FE6                     	;# 
  2219  0FE7                     	;# 
  2220  0FE8                     	;# 
  2221  0FE9                     	;# 
  2222  0FEA                     	;# 
  2223  0FEB                     	;# 
  2224  0FED                     	;# 
  2225  0FEE                     	;# 
  2226  0FEF                     	;# 
  2227  0000                     	;# 
  2228  0001                     	;# 
  2229  0002                     	;# 
  2230  0003                     	;# 
  2231  0004                     	;# 
  2232  0005                     	;# 
  2233  0006                     	;# 
  2234  0007                     	;# 
  2235  0008                     	;# 
  2236  0009                     	;# 
  2237  000A                     	;# 
  2238  000B                     	;# 
  2239  000C                     	;# 
  2240  000D                     	;# 
  2241  000E                     	;# 
  2242  0011                     	;# 
  2243  0012                     	;# 
  2244  0013                     	;# 
  2245  0015                     	;# 
  2246  0016                     	;# 
  2247  0016                     	;# 
  2248  0017                     	;# 
  2249  0018                     	;# 
  2250  0019                     	;# 
  2251  001A                     	;# 
  2252  001B                     	;# 
  2253  001C                     	;# 
  2254  008C                     	;# 
  2255  008D                     	;# 
  2256  008E                     	;# 
  2257  0091                     	;# 
  2258  0092                     	;# 
  2259  0093                     	;# 
  2260  0095                     	;# 
  2261  0096                     	;# 
  2262  0097                     	;# 
  2263  0099                     	;# 
  2264  009A                     	;# 
  2265  009B                     	;# 
  2266  009B                     	;# 
  2267  009C                     	;# 
  2268  009D                     	;# 
  2269  009E                     	;# 
  2270  009F                     	;# 
  2271  010C                     	;# 
  2272  010D                     	;# 
  2273  010E                     	;# 
  2274  0111                     	;# 
  2275  0112                     	;# 
  2276  0113                     	;# 
  2277  0114                     	;# 
  2278  0115                     	;# 
  2279  0116                     	;# 
  2280  0117                     	;# 
  2281  0118                     	;# 
  2282  0119                     	;# 
  2283  011D                     	;# 
  2284  018C                     	;# 
  2285  018D                     	;# 
  2286  018E                     	;# 
  2287  0191                     	;# 
  2288  0191                     	;# 
  2289  0192                     	;# 
  2290  0193                     	;# 
  2291  0193                     	;# 
  2292  0194                     	;# 
  2293  0195                     	;# 
  2294  0196                     	;# 
  2295  0199                     	;# 
  2296  019A                     	;# 
  2297  019B                     	;# 
  2298  019B                     	;# 
  2299  019C                     	;# 
  2300  019D                     	;# 
  2301  019E                     	;# 
  2302  019F                     	;# 
  2303  020C                     	;# 
  2304  020D                     	;# 
  2305  0211                     	;# 
  2306  0211                     	;# 
  2307  0212                     	;# 
  2308  0212                     	;# 
  2309  0213                     	;# 
  2310  0213                     	;# 
  2311  0214                     	;# 
  2312  0214                     	;# 
  2313  0215                     	;# 
  2314  0215                     	;# 
  2315  0215                     	;# 
  2316  0216                     	;# 
  2317  0216                     	;# 
  2318  0217                     	;# 
  2319  0217                     	;# 
  2320  0391                     	;# 
  2321  0392                     	;# 
  2322  0393                     	;# 
  2323  0394                     	;# 
  2324  0395                     	;# 
  2325  0396                     	;# 
  2326  0498                     	;# 
  2327  0498                     	;# 
  2328  0499                     	;# 
  2329  049A                     	;# 
  2330  049B                     	;# 
  2331  049B                     	;# 
  2332  049C                     	;# 
  2333  049E                     	;# 
  2334  049F                     	;# 
  2335  0611                     	;# 
  2336  0612                     	;# 
  2337  0613                     	;# 
  2338  0613                     	;# 
  2339  0614                     	;# 
  2340  0615                     	;# 
  2341  0616                     	;# 
  2342  0616                     	;# 
  2343  0617                     	;# 
  2344  0618                     	;# 
  2345  0619                     	;# 
  2346  0619                     	;# 
  2347  061A                     	;# 
  2348  061B                     	;# 
  2349  061C                     	;# 
  2350  061C                     	;# 
  2351  0691                     	;# 
  2352  0692                     	;# 
  2353  0693                     	;# 
  2354  0694                     	;# 
  2355  0695                     	;# 
  2356  0F0F                     	;# 
  2357  0F10                     	;# 
  2358  0F11                     	;# 
  2359  0F12                     	;# 
  2360  0F13                     	;# 
  2361  0F14                     	;# 
  2362  0F15                     	;# 
  2363  0F16                     	;# 
  2364  0F17                     	;# 
  2365  0F18                     	;# 
  2366  0F19                     	;# 
  2367  0F1A                     	;# 
  2368  0F1B                     	;# 
  2369  0F1C                     	;# 
  2370  0F1D                     	;# 
  2371  0F1E                     	;# 
  2372  0F1F                     	;# 
  2373  0F20                     	;# 
  2374  0F21                     	;# 
  2375  0F22                     	;# 
  2376  0F23                     	;# 
  2377  0F24                     	;# 
  2378  0F25                     	;# 
  2379  0F26                     	;# 
  2380  0F27                     	;# 
  2381  0F28                     	;# 
  2382  0F29                     	;# 
  2383  0F2A                     	;# 
  2384  0F2B                     	;# 
  2385  0F2C                     	;# 
  2386  0F2D                     	;# 
  2387  0F2E                     	;# 
  2388  0F2F                     	;# 
  2389  0F8C                     	;# 
  2390  0F8D                     	;# 
  2391  0F91                     	;# 
  2392  0F95                     	;# 
  2393  0F96                     	;# 
  2394  0F97                     	;# 
  2395  0F9C                     	;# 
  2396  0F9D                     	;# 
  2397  0F9E                     	;# 
  2398  0FE3                     	;# 
  2399  0FE4                     	;# 
  2400  0FE5                     	;# 
  2401  0FE6                     	;# 
  2402  0FE7                     	;# 
  2403  0FE8                     	;# 
  2404  0FE9                     	;# 
  2405  0FEA                     	;# 
  2406  0FEB                     	;# 
  2407  0FED                     	;# 
  2408  0FEE                     	;# 
  2409  0FEF                     	;# 
  2410  0000                     	;# 
  2411  0001                     	;# 
  2412  0002                     	;# 
  2413  0003                     	;# 
  2414  0004                     	;# 
  2415  0005                     	;# 
  2416  0006                     	;# 
  2417  0007                     	;# 
  2418  0008                     	;# 
  2419  0009                     	;# 
  2420  000A                     	;# 
  2421  000B                     	;# 
  2422  000C                     	;# 
  2423  000D                     	;# 
  2424  000E                     	;# 
  2425  0011                     	;# 
  2426  0012                     	;# 
  2427  0013                     	;# 
  2428  0015                     	;# 
  2429  0016                     	;# 
  2430  0016                     	;# 
  2431  0017                     	;# 
  2432  0018                     	;# 
  2433  0019                     	;# 
  2434  001A                     	;# 
  2435  001B                     	;# 
  2436  001C                     	;# 
  2437  008C                     	;# 
  2438  008D                     	;# 
  2439  008E                     	;# 
  2440  0091                     	;# 
  2441  0092                     	;# 
  2442  0093                     	;# 
  2443  0095                     	;# 
  2444  0096                     	;# 
  2445  0097                     	;# 
  2446  0099                     	;# 
  2447  009A                     	;# 
  2448  009B                     	;# 
  2449  009B                     	;# 
  2450  009C                     	;# 
  2451  009D                     	;# 
  2452  009E                     	;# 
  2453  009F                     	;# 
  2454  010C                     	;# 
  2455  010D                     	;# 
  2456  010E                     	;# 
  2457  0111                     	;# 
  2458  0112                     	;# 
  2459  0113                     	;# 
  2460  0114                     	;# 
  2461  0115                     	;# 
  2462  0116                     	;# 
  2463  0117                     	;# 
  2464  0118                     	;# 
  2465  0119                     	;# 
  2466  011D                     	;# 
  2467  018C                     	;# 
  2468  018D                     	;# 
  2469  018E                     	;# 
  2470  0191                     	;# 
  2471  0191                     	;# 
  2472  0192                     	;# 
  2473  0193                     	;# 
  2474  0193                     	;# 
  2475  0194                     	;# 
  2476  0195                     	;# 
  2477  0196                     	;# 
  2478  0199                     	;# 
  2479  019A                     	;# 
  2480  019B                     	;# 
  2481  019B                     	;# 
  2482  019C                     	;# 
  2483  019D                     	;# 
  2484  019E                     	;# 
  2485  019F                     	;# 
  2486  020C                     	;# 
  2487  020D                     	;# 
  2488  0211                     	;# 
  2489  0211                     	;# 
  2490  0212                     	;# 
  2491  0212                     	;# 
  2492  0213                     	;# 
  2493  0213                     	;# 
  2494  0214                     	;# 
  2495  0214                     	;# 
  2496  0215                     	;# 
  2497  0215                     	;# 
  2498  0215                     	;# 
  2499  0216                     	;# 
  2500  0216                     	;# 
  2501  0217                     	;# 
  2502  0217                     	;# 
  2503  0391                     	;# 
  2504  0392                     	;# 
  2505  0393                     	;# 
  2506  0394                     	;# 
  2507  0395                     	;# 
  2508  0396                     	;# 
  2509  0498                     	;# 
  2510  0498                     	;# 
  2511  0499                     	;# 
  2512  049A                     	;# 
  2513  049B                     	;# 
  2514  049B                     	;# 
  2515  049C                     	;# 
  2516  049E                     	;# 
  2517  049F                     	;# 
  2518  0611                     	;# 
  2519  0612                     	;# 
  2520  0613                     	;# 
  2521  0613                     	;# 
  2522  0614                     	;# 
  2523  0615                     	;# 
  2524  0616                     	;# 
  2525  0616                     	;# 
  2526  0617                     	;# 
  2527  0618                     	;# 
  2528  0619                     	;# 
  2529  0619                     	;# 
  2530  061A                     	;# 
  2531  061B                     	;# 
  2532  061C                     	;# 
  2533  061C                     	;# 
  2534  0691                     	;# 
  2535  0692                     	;# 
  2536  0693                     	;# 
  2537  0694                     	;# 
  2538  0695                     	;# 
  2539  0F0F                     	;# 
  2540  0F10                     	;# 
  2541  0F11                     	;# 
  2542  0F12                     	;# 
  2543  0F13                     	;# 
  2544  0F14                     	;# 
  2545  0F15                     	;# 
  2546  0F16                     	;# 
  2547  0F17                     	;# 
  2548  0F18                     	;# 
  2549  0F19                     	;# 
  2550  0F1A                     	;# 
  2551  0F1B                     	;# 
  2552  0F1C                     	;# 
  2553  0F1D                     	;# 
  2554  0F1E                     	;# 
  2555  0F1F                     	;# 
  2556  0F20                     	;# 
  2557  0F21                     	;# 
  2558  0F22                     	;# 
  2559  0F23                     	;# 
  2560  0F24                     	;# 
  2561  0F25                     	;# 
  2562  0F26                     	;# 
  2563  0F27                     	;# 
  2564  0F28                     	;# 
  2565  0F29                     	;# 
  2566  0F2A                     	;# 
  2567  0F2B                     	;# 
  2568  0F2C                     	;# 
  2569  0F2D                     	;# 
  2570  0F2E                     	;# 
  2571  0F2F                     	;# 
  2572  0F8C                     	;# 
  2573  0F8D                     	;# 
  2574  0F91                     	;# 
  2575  0F95                     	;# 
  2576  0F96                     	;# 
  2577  0F97                     	;# 
  2578  0F9C                     	;# 
  2579  0F9D                     	;# 
  2580  0F9E                     	;# 
  2581  0FE3                     	;# 
  2582  0FE4                     	;# 
  2583  0FE5                     	;# 
  2584  0FE6                     	;# 
  2585  0FE7                     	;# 
  2586  0FE8                     	;# 
  2587  0FE9                     	;# 
  2588  0FEA                     	;# 
  2589  0FEB                     	;# 
  2590  0FED                     	;# 
  2591  0FEE                     	;# 
  2592  0FEF                     	;# 
  2593  0000                     	;# 
  2594  0001                     	;# 
  2595  0002                     	;# 
  2596  0003                     	;# 
  2597  0004                     	;# 
  2598  0005                     	;# 
  2599  0006                     	;# 
  2600  0007                     	;# 
  2601  0008                     	;# 
  2602  0009                     	;# 
  2603  000A                     	;# 
  2604  000B                     	;# 
  2605  000C                     	;# 
  2606  000D                     	;# 
  2607  000E                     	;# 
  2608  0011                     	;# 
  2609  0012                     	;# 
  2610  0013                     	;# 
  2611  0015                     	;# 
  2612  0016                     	;# 
  2613  0016                     	;# 
  2614  0017                     	;# 
  2615  0018                     	;# 
  2616  0019                     	;# 
  2617  001A                     	;# 
  2618  001B                     	;# 
  2619  001C                     	;# 
  2620  008C                     	;# 
  2621  008D                     	;# 
  2622  008E                     	;# 
  2623  0091                     	;# 
  2624  0092                     	;# 
  2625  0093                     	;# 
  2626  0095                     	;# 
  2627  0096                     	;# 
  2628  0097                     	;# 
  2629  0099                     	;# 
  2630  009A                     	;# 
  2631  009B                     	;# 
  2632  009B                     	;# 
  2633  009C                     	;# 
  2634  009D                     	;# 
  2635  009E                     	;# 
  2636  009F                     	;# 
  2637  010C                     	;# 
  2638  010D                     	;# 
  2639  010E                     	;# 
  2640  0111                     	;# 
  2641  0112                     	;# 
  2642  0113                     	;# 
  2643  0114                     	;# 
  2644  0115                     	;# 
  2645  0116                     	;# 
  2646  0117                     	;# 
  2647  0118                     	;# 
  2648  0119                     	;# 
  2649  011D                     	;# 
  2650  018C                     	;# 
  2651  018D                     	;# 
  2652  018E                     	;# 
  2653  0191                     	;# 
  2654  0191                     	;# 
  2655  0192                     	;# 
  2656  0193                     	;# 
  2657  0193                     	;# 
  2658  0194                     	;# 
  2659  0195                     	;# 
  2660  0196                     	;# 
  2661  0199                     	;# 
  2662  019A                     	;# 
  2663  019B                     	;# 
  2664  019B                     	;# 
  2665  019C                     	;# 
  2666  019D                     	;# 
  2667  019E                     	;# 
  2668  019F                     	;# 
  2669  020C                     	;# 
  2670  020D                     	;# 
  2671  0211                     	;# 
  2672  0211                     	;# 
  2673  0212                     	;# 
  2674  0212                     	;# 
  2675  0213                     	;# 
  2676  0213                     	;# 
  2677  0214                     	;# 
  2678  0214                     	;# 
  2679  0215                     	;# 
  2680  0215                     	;# 
  2681  0215                     	;# 
  2682  0216                     	;# 
  2683  0216                     	;# 
  2684  0217                     	;# 
  2685  0217                     	;# 
  2686  0391                     	;# 
  2687  0392                     	;# 
  2688  0393                     	;# 
  2689  0394                     	;# 
  2690  0395                     	;# 
  2691  0396                     	;# 
  2692  0498                     	;# 
  2693  0498                     	;# 
  2694  0499                     	;# 
  2695  049A                     	;# 
  2696  049B                     	;# 
  2697  049B                     	;# 
  2698  049C                     	;# 
  2699  049E                     	;# 
  2700  049F                     	;# 
  2701  0611                     	;# 
  2702  0612                     	;# 
  2703  0613                     	;# 
  2704  0613                     	;# 
  2705  0614                     	;# 
  2706  0615                     	;# 
  2707  0616                     	;# 
  2708  0616                     	;# 
  2709  0617                     	;# 
  2710  0618                     	;# 
  2711  0619                     	;# 
  2712  0619                     	;# 
  2713  061A                     	;# 
  2714  061B                     	;# 
  2715  061C                     	;# 
  2716  061C                     	;# 
  2717  0691                     	;# 
  2718  0692                     	;# 
  2719  0693                     	;# 
  2720  0694                     	;# 
  2721  0695                     	;# 
  2722  0F0F                     	;# 
  2723  0F10                     	;# 
  2724  0F11                     	;# 
  2725  0F12                     	;# 
  2726  0F13                     	;# 
  2727  0F14                     	;# 
  2728  0F15                     	;# 
  2729  0F16                     	;# 
  2730  0F17                     	;# 
  2731  0F18                     	;# 
  2732  0F19                     	;# 
  2733  0F1A                     	;# 
  2734  0F1B                     	;# 
  2735  0F1C                     	;# 
  2736  0F1D                     	;# 
  2737  0F1E                     	;# 
  2738  0F1F                     	;# 
  2739  0F20                     	;# 
  2740  0F21                     	;# 
  2741  0F22                     	;# 
  2742  0F23                     	;# 
  2743  0F24                     	;# 
  2744  0F25                     	;# 
  2745  0F26                     	;# 
  2746  0F27                     	;# 
  2747  0F28                     	;# 
  2748  0F29                     	;# 
  2749  0F2A                     	;# 
  2750  0F2B                     	;# 
  2751  0F2C                     	;# 
  2752  0F2D                     	;# 
  2753  0F2E                     	;# 
  2754  0F2F                     	;# 
  2755  0F8C                     	;# 
  2756  0F8D                     	;# 
  2757  0F91                     	;# 
  2758  0F95                     	;# 
  2759  0F96                     	;# 
  2760  0F97                     	;# 
  2761  0F9C                     	;# 
  2762  0F9D                     	;# 
  2763  0F9E                     	;# 
  2764  0FE3                     	;# 
  2765  0FE4                     	;# 
  2766  0FE5                     	;# 
  2767  0FE6                     	;# 
  2768  0FE7                     	;# 
  2769  0FE8                     	;# 
  2770  0FE9                     	;# 
  2771  0FEA                     	;# 
  2772  0FEB                     	;# 
  2773  0FED                     	;# 
  2774  0FEE                     	;# 
  2775  0FEF                     	;# 
  2776                           
  2777                           	psect	idataCOMMON
  2778  0000                     __pidataCOMMON:	
  2779                           
  2780                           	psect	idataBANK0
  2781  0000                     __pidataBANK0:	
  2782                           
  2783                           	psect	strings
  2784  021A                     __pstrings:	
  2785  021A                     __stringtab:	
  2786  021A  3400               	retlw	0
  2787  021B                     __end_of__stringtab:	
  2788  021B                     _mrfRegset_InitCnt:	
  2789  021B  3410               	retlw	16
  2790  021C                     __end_of_mrfRegset_InitCnt:	
  2791  021C                     _mrfRegset_RxCnt:	
  2792  021C  3406               	retlw	6
  2793  021D                     __end_of_mrfRegset_RxCnt:	
  2794  021D                     _mrfRegset_SleepCnt:	
  2795  021D  3403               	retlw	3
  2796  021E                     __end_of_mrfRegset_SleepCnt:	
  2797  021E                     _mrfRegset_TxCnt:	
  2798  021E  3404               	retlw	4
  2799  021F                     __end_of_mrfRegset_TxCnt:	
  2800  021F                     _mrfRegset_Init:	
  2801  021F  34CA               	retlw	202
  2802  0220  3471               	retlw	113
  2803  0221  34CA               	retlw	202
  2804  0222  3473               	retlw	115
  2805  0223  3480               	retlw	128
  2806  0224  3428               	retlw	40
  2807  0225  34C4               	retlw	196
  2808  0226  34E7               	retlw	231
  2809  0227  34A8               	retlw	168
  2810  0228  3460               	retlw	96
  2811  0229  34C6               	retlw	198
  2812  022A  3405               	retlw	5
  2813  022B  3482               	retlw	130
  2814  022C  3400               	retlw	0
  2815  022D  3490               	retlw	144
  2816  022E  3462               	retlw	98
  2817  022F  3498               	retlw	152
  2818  0230  3490               	retlw	144
  2819  0231  34C2               	retlw	194
  2820  0232  34AC               	retlw	172
  2821  0233  3482               	retlw	130
  2822  0234  3420               	retlw	32
  2823  0235  3455               	retlw	85
  2824  0236  3400               	retlw	0
  2825  0237  3482               	retlw	130
  2826  0238  3480               	retlw	128
  2827  0239  3480               	retlw	128
  2828  023A  3468               	retlw	104
  2829  023B  34CA               	retlw	202
  2830  023C  3471               	retlw	113
  2831  023D  34CA               	retlw	202
  2832  023E  3473               	retlw	115
  2833  023F                     __end_of_mrfRegset_Init:	
  2834  023F                     _mrfRegset_Rx:	
  2835  023F  3482               	retlw	130
  2836  0240  3400               	retlw	0
  2837  0241  34CA               	retlw	202
  2838  0242  3471               	retlw	113
  2839  0243  3480               	retlw	128
  2840  0244  3428               	retlw	40
  2841  0245  3482               	retlw	130
  2842  0246  3480               	retlw	128
  2843  0247  3480               	retlw	128
  2844  0248  3468               	retlw	104
  2845  0249  34CA               	retlw	202
  2846  024A  3473               	retlw	115
  2847  024B                     __end_of_mrfRegset_Rx:	
  2848  024B                     _mrfRegset_Tx:	
  2849  024B  3482               	retlw	130
  2850  024C  3400               	retlw	0
  2851  024D  34CA               	retlw	202
  2852  024E  3471               	retlw	113
  2853  024F  3480               	retlw	128
  2854  0250  34A8               	retlw	168
  2855  0251  3482               	retlw	130
  2856  0252  3420               	retlw	32
  2857  0253                     __end_of_mrfRegset_Tx:	
  2858  0253                     _mrfRegset_Sleep:	
  2859  0253  3482               	retlw	130
  2860  0254  3400               	retlw	0
  2861  0255  34CA               	retlw	202
  2862  0256  3471               	retlw	113
  2863  0257  3480               	retlw	128
  2864  0258  3468               	retlw	104
  2865  0259                     __end_of_mrfRegset_Sleep:	
  2866  0259                     _parameters:	
  2867  0259  3400               	retlw	0
  2868  025A  3401               	retlw	1
  2869  025B  3437               	retlw	_cfgRam& (0+255)
  2870  025C  3401               	retlw	1
  2871  025D  3402               	retlw	2
  2872  025E  343E               	retlw	(_cfgRam+7)& (0+255)
  2873  025F                     __end_of_parameters:	
  2874  000B                     _INTCONbits	set	11
  2875  000C                     _PORTAbits	set	12
  2876  000D                     _PORTBbits	set	13
  2877  000E                     _PORTCbits	set	14
  2878  009D                     _ADCON0	set	157
  2879  009E                     _ADCON1	set	158
  2880  009F                     _ADCON2	set	159
  2881  009C                     _ADRESH	set	156
  2882  009B                     _ADRESL	set	155
  2883  0095                     _OPTION_REGbits	set	149
  2884  0099                     _OSCCON	set	153
  2885  008C                     _TRISAbits	set	140
  2886  008D                     _TRISBbits	set	141
  2887  008E                     _TRISCbits	set	142
  2888  0097                     _WDTCONbits	set	151
  2889  0117                     _FVRCON	set	279
  2890  010C                     _LATAbits	set	268
  2891  010D                     _LATBbits	set	269
  2892  010E                     _LATCbits	set	270
  2893  018C                     _ANSELA	set	396
  2894  018D                     _ANSELB	set	397
  2895  018E                     _ANSELC	set	398
  2896  018E                     _ANSELCbits	set	398
  2897  020C                     _WPUAbits	set	524
  2898                           
  2899                           ; #config settings
  2900  0000                     
  2901                           	psect	cinit
  2902  0806                     start_initialization:	
  2903  0806                     __initialization:	
  2904                           
  2905                           ; Clear objects allocated to BANK0
  2906  0806  3036               	movlw	low __pbssBANK0
  2907  0807  0084               	movwf	4
  2908  0808  3000               	movlw	high __pbssBANK0
  2909  0809  0085               	movwf	5
  2910  080A  300C               	movlw	12
  2911  080B  3183  232B  3188   	fcall	clear_ram0
  2912                           
  2913                           ; Clear objects allocated to BANK1
  2914  080E  30A0               	movlw	low __pbssBANK1
  2915  080F  0084               	movwf	4
  2916  0810  3000               	movlw	high __pbssBANK1
  2917  0811  0085               	movwf	5
  2918  0812  304C               	movlw	76
  2919  0813  3183  232B  3188   	fcall	clear_ram0
  2920                           
  2921                           ;initializer for _macPtr
  2922  0816  30A0               	movlw	_rfTrcvStatus& (0+255)
  2923  0817  00F8               	movwf	__pdataCOMMON& (0+127)
  2924                           
  2925                           ;initializer for _coldBoot
  2926  0818  3001               	movlw	1
  2927  0819  00C2               	movwf	__pdataBANK0& (0+127)
  2928  081A                     end_of_initialization:	
  2929                           ;End of C runtime variable initialization code
  2930                           
  2931  081A                     __end_of__initialization:	
  2932  081A  0020               	movlb	0
  2933  081B  2856               	ljmp	_main	;jump to C main() function
  2934  081C                     __ptext24:	
  2935 ;; *************** function _PwrI2cInit *****************
  2936 ;; Defined at:
  2937 ;;		line 62 in file "../../../src/node/power.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;		None               void
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0, pclath, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 17F/2
  2948 ;;		On exit  : 1F/2
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2951 ;;      Params:         0       0       0       0
  2952 ;;      Locals:         0       0       0       0
  2953 ;;      Temps:          0       0       0       0
  2954 ;;      Totals:         0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    8
  2958 ;; This function calls:
  2959 ;;		_SoftI2cInit
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           
  2966                           ;psect for function _PwrI2cInit
  2967  081C                     _PwrI2cInit:	
  2968                           
  2969                           ;power.c: 64: SoftI2cInit();
  2970                           
  2971                           ;incstack = 0
  2972                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  2973  081C  2024               	fcall	_SoftI2cInit
  2974                           
  2975                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  2976  081D  0021               	movlb	1	; select bank1
  2977  081E  120D               	bcf	13,4	;volatile
  2978                           
  2979                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  2980  081F  130D               	bcf	13,6	;volatile
  2981                           
  2982                           ;power.c: 69: TRISBbits.TRISB5 = 0;
  2983  0820  128D               	bcf	13,5	;volatile
  2984                           
  2985                           ;power.c: 70: LATBbits.LATB5 = 1;
  2986  0821  0022               	movlb	2	; select bank2
  2987  0822  168D               	bsf	13,5	;volatile
  2988  0823  0008               	return
  2989  0824                     __end_of_PwrI2cInit:	
  2990  0824                     __ptext25:	
  2991 ;; *************** function _SoftI2cInit *****************
  2992 ;; Defined at:
  2993 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;		None               void
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, pclath, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 17F/2
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3007 ;;      Params:         0       0       0       0
  3008 ;;      Locals:         0       0       0       0
  3009 ;;      Temps:          0       0       0       0
  3010 ;;      Totals:         0       0       0       0
  3011 ;;Total ram usage:        0 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    7
  3014 ;; This function calls:
  3015 ;;		_SoftI2cStart
  3016 ;;		_SoftI2cStop
  3017 ;;		_SoftI2cTxByte
  3018 ;; This function is called by:
  3019 ;;		_PwrI2cInit
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _SoftI2cInit
  3025  0824                     _SoftI2cInit:	
  3026                           
  3027                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  3031  0824  170D               	bsf	13,6	;volatile
  3032                           
  3033                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  3034  0825  160D               	bsf	13,4	;volatile
  3035                           
  3036                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  3037  0826  0021               	movlb	1	; select bank1
  3038  0827  130D               	bcf	13,6	;volatile
  3039                           
  3040                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  3041  0828  120D               	bcf	13,4	;volatile
  3042                           
  3043                           ;softI2c.c: 32: SoftI2cStart();
  3044  0829  2302  3188         	fcall	_SoftI2cStart
  3045                           
  3046                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  3047  082B  3000               	movlw	0
  3048  082C  2294  3188         	fcall	_SoftI2cTxByte
  3049                           
  3050                           ;softI2c.c: 34: SoftI2cStop();
  3051  082E  2B0F               	ljmp	l2707
  3052  082F                     __end_of_SoftI2cInit:	
  3053  082F                     __ptext21:	
  3054 ;; *************** function _PwrRfInit *****************
  3055 ;; Defined at:
  3056 ;;		line 87 in file "../../../src/node/power.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;		None
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;		None               void
  3063 ;; Registers used:
  3064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 1F/2
  3067 ;;		On exit  : 1F/1
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3070 ;;      Params:         0       0       0       0
  3071 ;;      Locals:         0       0       0       0
  3072 ;;      Temps:          0       0       0       0
  3073 ;;      Totals:         0       0       0       0
  3074 ;;Total ram usage:        0 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:   10
  3077 ;; This function calls:
  3078 ;;		_ExtIntInit
  3079 ;;		_Mrf49xaInit
  3080 ;;		_Sleepy
  3081 ;; This function is called by:
  3082 ;;		_main
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           
  3087                           ;psect for function _PwrRfInit
  3088  082F                     _PwrRfInit:	
  3089                           
  3090                           ;power.c: 89: TRISAbits.TRISA2 = 1;
  3091                           
  3092                           ;incstack = 0
  3093                           ; Regs used in _PwrRfInit: [allreg]
  3094  082F  0021               	movlb	1	; select bank1
  3095  0830  150C               	bsf	12,2	;volatile
  3096                           
  3097                           ;power.c: 90: TRISAbits.TRISA4 = 0;
  3098  0831  120C               	bcf	12,4	;volatile
  3099                           
  3100                           ;power.c: 91: TRISAbits.TRISA5 = 0;
  3101  0832  128C               	bcf	12,5	;volatile
  3102                           
  3103                           ;power.c: 93: TRISBbits.TRISB7 = 0;
  3104  0833  138D               	bcf	13,7	;volatile
  3105                           
  3106                           ;power.c: 95: TRISCbits.TRISC1 = 0;
  3107  0834  108E               	bcf	14,1	;volatile
  3108                           
  3109                           ;power.c: 96: TRISCbits.TRISC4 = 0;
  3110  0835  120E               	bcf	14,4	;volatile
  3111                           
  3112                           ;power.c: 97: TRISCbits.TRISC6 = 0;
  3113  0836  130E               	bcf	14,6	;volatile
  3114                           
  3115                           ;power.c: 98: TRISCbits.TRISC7 = 0;
  3116  0837  138E               	bcf	14,7	;volatile
  3117                           
  3118                           ;power.c: 99: TRISCbits.TRISC3 = 1;
  3119  0838  158E               	bsf	14,3	;volatile
  3120                           
  3121                           ;power.c: 100: TRISCbits.TRISC5 = 1;
  3122  0839  168E               	bsf	14,5	;volatile
  3123                           
  3124                           ;power.c: 102: LATCbits.LATC1 = 0;
  3125  083A  0022               	movlb	2	; select bank2
  3126  083B  108E               	bcf	14,1	;volatile
  3127                           
  3128                           ;power.c: 104: LATAbits.LATA4 = 0;
  3129  083C  120C               	bcf	12,4	;volatile
  3130                           
  3131                           ;power.c: 105: LATAbits.LATA5 = 0;
  3132  083D  128C               	bcf	12,5	;volatile
  3133                           
  3134                           ;power.c: 106: LATCbits.LATC4 = 0;
  3135  083E  120E               	bcf	14,4	;volatile
  3136                           
  3137                           ;power.c: 107: PORTCbits.RC6 = 1;
  3138  083F  0020               	movlb	0	; select bank0
  3139  0840  170E               	bsf	14,6	;volatile
  3140                           
  3141                           ;power.c: 108: LATCbits.LATC7 = 0;
  3142  0841  0022               	movlb	2	; select bank2
  3143  0842  138E               	bcf	14,7	;volatile
  3144                           
  3145                           ;power.c: 109: PORTBbits.RB7 = 0;
  3146  0843  0020               	movlb	0	; select bank0
  3147  0844  138D               	bcf	13,7	;volatile
  3148                           
  3149                           ;power.c: 111: WPUAbits.WPUA2 = 1;
  3150  0845  0024               	movlb	4	; select bank4
  3151  0846  150C               	bsf	12,2	;volatile
  3152                           
  3153                           ;power.c: 112: Sleepy(10);
  3154  0847  300A               	movlw	10
  3155  0848  0020               	movlb	0	; select bank0
  3156  0849  00A0               	movwf	Sleepy@ms
  3157  084A  01A1               	clrf	Sleepy@ms+1
  3158  084B  21F6  3188         	fcall	_Sleepy
  3159                           
  3160                           ;power.c: 114: Mrf49xaInit();
  3161  084D  2197  3188         	fcall	_Mrf49xaInit
  3162                           
  3163                           ;power.c: 115: ExtIntInit();
  3164  084F  2850               	ljmp	l2809
  3165  0850                     __end_of_PwrRfInit:	
  3166  0850                     __ptext58:	
  3167 ;; *************** function _ExtIntInit *****************
  3168 ;; Defined at:
  3169 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;		None               void
  3176 ;; Registers used:
  3177 ;;		None
  3178 ;; Tracked objects:
  3179 ;;		On entry : 1F/0
  3180 ;;		On exit  : 1F/1
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3183 ;;      Params:         0       0       0       0
  3184 ;;      Locals:         0       0       0       0
  3185 ;;      Temps:          0       0       0       0
  3186 ;;      Totals:         0       0       0       0
  3187 ;;Total ram usage:        0 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    5
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_Mrf49xaTick
  3194 ;;		_PwrRfInit
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           
  3199                           ;psect for function _ExtIntInit
  3200  0850                     _ExtIntInit:	
  3201  0850                     l2809:	
  3202                           ;incstack = 0
  3203                           ; Regs used in _ExtIntInit: []
  3204                           
  3205                           
  3206                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3207  0850  0021               	movlb	1	; select bank1
  3208  0851  1315               	bcf	21,6	;volatile
  3209                           
  3210                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3211  0852  108B               	bcf	11,1	;volatile
  3212                           
  3213                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3214  0853  160B               	bsf	11,4	;volatile
  3215                           
  3216                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3217  0854  178B               	bsf	11,7	;volatile
  3218  0855  0008               	return
  3219  0856                     __end_of_ExtIntInit:	
  3220  0856                     __pmaintext:	
  3221 ;;
  3222 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3223 ;;
  3224 ;; *************** function _main *****************
  3225 ;; Defined at:
  3226 ;;		line 35 in file "../../../src/node/main.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  temperature     2   20[BANK0 ] unsigned int 
  3231 ;;  humidity        2   18[BANK0 ] unsigned int 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;		None               void
  3234 ;; Registers used:
  3235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3236 ;; Tracked objects:
  3237 ;;		On entry : 17F/0
  3238 ;;		On exit  : 1F/1
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3241 ;;      Params:         0       0       0       0
  3242 ;;      Locals:         0       4       0       0
  3243 ;;      Temps:          0       0       0       0
  3244 ;;      Totals:         0       4       0       0
  3245 ;;Total ram usage:        4 bytes
  3246 ;; Hardware stack levels required when called:   12
  3247 ;; This function calls:
  3248 ;;		_AdcSample
  3249 ;;		_CfgLoad
  3250 ;;		_Mcp9800Read
  3251 ;;		_Mcp9800Start
  3252 ;;		_Mrf49xaNeedsReset
  3253 ;;		_Mrf49xaTick
  3254 ;;		_PwrAdcInit
  3255 ;;		_PwrAdcSleep
  3256 ;;		_PwrAdcWake
  3257 ;;		_PwrI2cInit
  3258 ;;		_PwrI2cSleep
  3259 ;;		_PwrI2cWake
  3260 ;;		_PwrRfInit
  3261 ;;		_PwrRfSleep
  3262 ;;		_PwrRfWake
  3263 ;;		_PwrSensorInit
  3264 ;;		_PwrSensorSleep
  3265 ;;		_PwrSensorWake
  3266 ;;		_RfSendPowerState
  3267 ;;		_RfSendSampleWeatherNode
  3268 ;;		_Sleepy
  3269 ;; This function is called by:
  3270 ;;		Startup code after reset
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           
  3275                           ;psect for function _main
  3276  0856                     _main:	
  3277                           
  3278                           ;main.c: 39: OSCCON = 0b01111000;
  3279                           
  3280                           ;incstack = 0
  3281                           ; Regs used in _main: [allreg]
  3282  0856  3078               	movlw	120
  3283  0857  0021               	movlb	1	; select bank1
  3284  0858  0099               	movwf	25	;volatile
  3285                           
  3286                           ;main.c: 41: PwrAdcInit();
  3287  0859  3183  2313  3188   	fcall	_PwrAdcInit
  3288                           
  3289                           ;main.c: 42: PwrSensorInit();
  3290  085C  241B  3188         	fcall	_PwrSensorInit
  3291                           
  3292                           ;main.c: 43: PwrI2cInit();
  3293  085E  201C  3188         	fcall	_PwrI2cInit
  3294                           
  3295                           ;main.c: 44: PwrRfInit();
  3296  0860  202F  3188         	fcall	_PwrRfInit
  3297                           
  3298                           ;main.c: 46: CfgLoad();
  3299  0862  232F  3188         	fcall	_CfgLoad
  3300                           
  3301                           ;main.c: 48: PwrAdcSleep();
  3302  0864  2687  3188         	fcall	_PwrAdcSleep
  3303                           
  3304                           ;main.c: 49: PwrSensorSleep();
  3305  0866  2327  3188         	fcall	_PwrSensorSleep
  3306                           
  3307                           ;main.c: 50: PwrI2cSleep();
  3308  0868  2321               	fcall	_PwrI2cSleep
  3309  0869                     l3597:	
  3310                           
  3311                           ;main.c: 51: PwrRfSleep();
  3312  0869  3182  225F  3188   	fcall	_PwrRfSleep
  3313                           
  3314                           ;main.c: 54: {
  3315                           ;main.c: 57: Sleepy(5000);
  3316  086C  3088               	movlw	136
  3317  086D  0020               	movlb	0	; select bank0
  3318  086E  00A0               	movwf	Sleepy@ms
  3319  086F  3013               	movlw	19
  3320  0870  00A1               	movwf	Sleepy@ms+1
  3321  0871  21F6  3188         	fcall	_Sleepy
  3322                           
  3323                           ;main.c: 59: PwrSensorWake();
  3324  0873  241F  3188         	fcall	_PwrSensorWake
  3325                           
  3326                           ;main.c: 60: PwrI2cWake();
  3327  0875  241A  3188         	fcall	_PwrI2cWake
  3328                           
  3329                           ;main.c: 62: Mcp9800Start(Mcp9800_9bit);
  3330  0877  3000               	movlw	0
  3331  0878  2257  3188         	fcall	_Mcp9800Start
  3332                           
  3333                           ;main.c: 64: PwrAdcWake();
  3334  087A  268D  3188         	fcall	_PwrAdcWake
  3335                           
  3336                           ;main.c: 65: uint16_t humidity = AdcSample(ADC_AN4);
  3337  087C  3004               	movlw	4
  3338  087D  2652  3188         	fcall	_AdcSample
  3339  087F  0823               	movf	?_AdcSample+1,w
  3340  0880  00B3               	movwf	main@humidity+1
  3341  0881  0822               	movf	?_AdcSample,w
  3342  0882  00B2               	movwf	main@humidity
  3343                           
  3344                           ;main.c: 66: Sleepy(100);
  3345  0883  3064               	movlw	100
  3346  0884  00A0               	movwf	Sleepy@ms
  3347  0885  01A1               	clrf	Sleepy@ms+1
  3348  0886  21F6  3188         	fcall	_Sleepy
  3349                           
  3350                           ;main.c: 67: uint16_t temperature = Mcp9800Read();
  3351  0888  2226  3188         	fcall	_Mcp9800Read
  3352  088A  0825               	movf	?_Mcp9800Read+1,w
  3353  088B  00B5               	movwf	main@temperature+1
  3354  088C  0824               	movf	?_Mcp9800Read,w
  3355  088D  00B4               	movwf	main@temperature
  3356                           
  3357                           ;main.c: 69: PwrSensorSleep();
  3358  088E  2327  3188         	fcall	_PwrSensorSleep
  3359                           
  3360                           ;main.c: 70: PwrI2cSleep();
  3361  0890  2321               	fcall	_PwrI2cSleep
  3362                           
  3363                           ;main.c: 72: PwrRfWake();
  3364  0891  3182  22FB  3188   	fcall	_PwrRfWake
  3365                           
  3366                           ;main.c: 74: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3367  0894  0021               	movlb	1	; select bank1
  3368  0895  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3369  0896  1903               	btfsc	3,2
  3370  0897  289D               	goto	l3627
  3371                           
  3372                           ;main.c: 75: {
  3373                           ;main.c: 76: Mrf49xaNeedsReset();
  3374  0898  231E  3188         	fcall	_Mrf49xaNeedsReset
  3375                           
  3376                           ;main.c: 77: Mrf49xaTick(macPtr);
  3377  089A  30A0               	movlw	_rfTrcvStatus& (0+255)
  3378  089B  20C2  3188         	fcall	_Mrf49xaTick
  3379  089D                     l3627:	
  3380                           
  3381                           ;main.c: 78: }
  3382                           ;main.c: 80: powerStatusTicker++;
  3383  089D  0020               	movlb	0	; select bank0
  3384  089E  300F               	movlw	15
  3385  089F  0AB6               	incf	_powerStatusTicker,f
  3386                           
  3387                           ;main.c: 82: if (powerStatusTicker >= 15)
  3388  08A0  0236               	subwf	_powerStatusTicker,w
  3389  08A1  1C03               	skipc
  3390  08A2  28AE               	goto	l3639
  3391  08A3  30A0               	movlw	_rfTrcvStatus& (0+255)
  3392                           
  3393                           ;main.c: 83: {
  3394                           ;main.c: 84: powerStatusTicker = 0;
  3395  08A4  01B6               	clrf	_powerStatusTicker
  3396                           
  3397                           ;main.c: 87: RfSendPowerState(macPtr);
  3398  08A5  2617  3188         	fcall	_RfSendPowerState
  3399  08A7                     l3635:	
  3400                           
  3401                           ;main.c: 89: {
  3402                           ;main.c: 90: Mrf49xaTick(macPtr);
  3403  08A7  30A0               	movlw	_rfTrcvStatus& (0+255)
  3404  08A8  20C2  3188         	fcall	_Mrf49xaTick
  3405                           
  3406                           ;main.c: 91: }
  3407                           ;main.c: 92: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3408  08AA  0021               	movlb	1	; select bank1
  3409  08AB  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3410  08AC  1D03               	skipz
  3411  08AD  28A7               	goto	l3635
  3412  08AE                     l3639:	
  3413                           
  3414                           ;main.c: 93: }
  3415                           ;main.c: 95: RfSendSampleWeatherNode(macPtr, temperature, humidity);
  3416  08AE  0020               	movlb	0	; select bank0
  3417  08AF  0835               	movf	main@temperature+1,w
  3418  08B0  00A9               	movwf	RfSendSampleWeatherNode@temperature+1
  3419  08B1  0834               	movf	main@temperature,w
  3420  08B2  00A8               	movwf	RfSendSampleWeatherNode@temperature
  3421  08B3  0833               	movf	main@humidity+1,w
  3422  08B4  00AB               	movwf	RfSendSampleWeatherNode@humidity+1
  3423  08B5  0832               	movf	main@humidity,w
  3424  08B6  00AA               	movwf	RfSendSampleWeatherNode@humidity
  3425  08B7  30A0               	movlw	_rfTrcvStatus& (0+255)
  3426  08B8  2693  3188         	fcall	_RfSendSampleWeatherNode
  3427  08BA                     l3641:	
  3428                           
  3429                           ;main.c: 97: {
  3430                           ;main.c: 98: Mrf49xaTick(macPtr);
  3431  08BA  30A0               	movlw	_rfTrcvStatus& (0+255)
  3432  08BB  20C2  3188         	fcall	_Mrf49xaTick
  3433                           
  3434                           ;main.c: 99: }
  3435                           ;main.c: 100: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3436  08BD  0021               	movlb	1	; select bank1
  3437  08BE  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3438  08BF  1903               	btfsc	3,2
  3439  08C0  2869               	goto	l3597
  3440  08C1  28BA               	goto	l3641
  3441  08C2                     __end_of_main:	
  3442  08C2                     __ptext27:	
  3443 ;; *************** function _Mrf49xaTick *****************
  3444 ;; Defined at:
  3445 ;;		line 130 in file "../../../src/devices/mrf49xa_mac.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  3448 ;;		 -> rfTrcvStatus(76), 
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;  inst            1   17[BANK0 ] PTR struct rfTrcvStatus_
  3451 ;;		 -> rfTrcvStatus(76), 
  3452 ;;  timeout         1   15[BANK0 ] unsigned char 
  3453 ;;  packet          1   16[BANK0 ] PTR struct rfTrcvPacket_
  3454 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;		None               void
  3457 ;; Registers used:
  3458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 1E/1
  3461 ;;		On exit  : 1E/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3464 ;;      Params:         0       0       0       0
  3465 ;;      Locals:         0       3       0       0
  3466 ;;      Temps:          0       1       0       0
  3467 ;;      Totals:         0       4       0       0
  3468 ;;Total ram usage:        4 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:   11
  3471 ;; This function calls:
  3472 ;;		_ExtIntInit
  3473 ;;		_HandlePacket
  3474 ;;		_Mrf49RxSts
  3475 ;;		_Mrf49xaFreePacket
  3476 ;;		_Mrf49xaInit
  3477 ;;		_Mrf49xaModeTx
  3478 ;;		_Mrf49xaNeedsReset
  3479 ;;		_Mrf49xaPacketPending
  3480 ;;		_Mrf49xaRxPacket
  3481 ;;		_Sleepy
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _Mrf49xaTick
  3489  08C2                     _Mrf49xaTick:	
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _Mrf49xaTick: [allreg]
  3493                           ;Mrf49xaTick@inst stored from wreg
  3494  08C2  0020               	movlb	0	; select bank0
  3495  08C3  00B1               	movwf	Mrf49xaTick@inst
  3496                           
  3497                           ;mrf49xa_mac.c: 139: if (inst->rxPacket[0].state == PKT_HW_BUSY_RX &&
  3498                           ;mrf49xa_mac.c: 140: inst->rxPacket[1].state == PKT_HW_BUSY_RX)
  3499  08C4  0A31               	incf	Mrf49xaTick@inst,w
  3500  08C5  0086               	movwf	6
  3501  08C6  0187               	clrf	7
  3502  08C7  0801               	movf	1,w
  3503  08C8  3A04               	xorlw	4
  3504  08C9  1D03               	skipz
  3505  08CA  28D4               	goto	l3317
  3506  08CB  0831               	movf	Mrf49xaTick@inst,w
  3507  08CC  3E19               	addlw	25
  3508  08CD  0086               	movwf	6
  3509  08CE  0801               	movf	1,w
  3510  08CF  3A04               	xorlw	4
  3511  08D0  1D03               	skipz
  3512  08D1  28D4               	goto	l3317
  3513                           
  3514                           ;mrf49xa_mac.c: 141: {
  3515                           ;mrf49xa_mac.c: 142: Mrf49xaNeedsReset();
  3516  08D2  231E  3188         	fcall	_Mrf49xaNeedsReset
  3517  08D4                     l3317:	
  3518                           
  3519                           ;mrf49xa_mac.c: 143: }
  3520                           ;mrf49xa_mac.c: 144: if (inst->needsReset)
  3521  08D4  0020               	movlb	0	; select bank0
  3522  08D5  0831               	movf	Mrf49xaTick@inst,w
  3523  08D6  3E4B               	addlw	75
  3524  08D7  0086               	movwf	6
  3525  08D8  0187               	clrf	7
  3526  08D9  1F81               	btfss	1,7
  3527  08DA  28DE               	goto	l3325
  3528                           
  3529                           ;mrf49xa_mac.c: 145: {
  3530                           ;mrf49xa_mac.c: 146: Mrf49xaInit();
  3531  08DB  2197  3188         	fcall	_Mrf49xaInit
  3532                           
  3533                           ;mrf49xa_mac.c: 147: ExtIntInit();
  3534  08DD  2850               	ljmp	l2809
  3535  08DE                     l3325:	
  3536                           
  3537                           ;mrf49xa_mac.c: 149: }
  3538                           ;mrf49xa_mac.c: 152: if (Mrf49xaPacketPending(inst))
  3539  08DE  0831               	movf	Mrf49xaTick@inst,w
  3540  08DF  3182  22EB  3188   	fcall	_Mrf49xaPacketPending
  3541  08E2  3A00               	xorlw	0
  3542  08E3  1903               	skipnz
  3543  08E4  2909               	goto	l3339
  3544                           
  3545                           ;mrf49xa_mac.c: 153: {
  3546                           ;mrf49xa_mac.c: 154: rfTrcvPacket_t* packet = Mrf49xaRxPacket(inst);
  3547  08E5  0831               	movf	Mrf49xaTick@inst,w
  3548  08E6  3182  22B3  3188   	fcall	_Mrf49xaRxPacket
  3549  08E9  00B0               	movwf	Mrf49xaTick@packet
  3550                           
  3551                           ;mrf49xa_mac.c: 162: if (packet->packet.dst == 0xFF || packet->packet.dst == inst->nodeI
      +                          d)
  3552  08EA  3E03               	addlw	3
  3553  08EB  0086               	movwf	6
  3554  08EC  0187               	clrf	7
  3555  08ED  0801               	movf	1,w
  3556  08EE  3AFF               	xorlw	255
  3557  08EF  1903               	skipnz
  3558  08F0  28FA               	goto	l3333
  3559  08F1  0831               	movf	Mrf49xaTick@inst,w
  3560  08F2  3E4A               	addlw	74
  3561  08F3  0086               	movwf	6
  3562  08F4  0830               	movf	Mrf49xaTick@packet,w
  3563  08F5  3E03               	addlw	3
  3564  08F6  27FB  3188         	fcall	PL24	;call to abstracted procedure
  3565  08F8  1D03               	skipz
  3566  08F9  2905               	goto	l3337
  3567  08FA                     l3333:	
  3568                           
  3569                           ;mrf49xa_mac.c: 163: {
  3570                           ;mrf49xa_mac.c: 164: packet->packet.size -= 5;
  3571  08FA  0A30               	incf	Mrf49xaTick@packet,w
  3572  08FB  0086               	movwf	6
  3573  08FC  3005               	movlw	5
  3574  08FD  0187               	clrf	7
  3575  08FE  0281               	subwf	1,f
  3576                           
  3577                           ;mrf49xa_mac.c: 167: HandlePacket(inst, packet);
  3578  08FF  0830               	movf	Mrf49xaTick@packet,w
  3579  0900  00AA               	movwf	HandlePacket@packet
  3580  0901  0831               	movf	Mrf49xaTick@inst,w
  3581  0902  2337  3188         	fcall	_HandlePacket
  3582                           
  3583                           ;mrf49xa_mac.c: 169: }
  3584  0904  2909               	goto	l3339
  3585  0905                     l3337:	
  3586                           
  3587                           ;mrf49xa_mac.c: 170: else
  3588                           ;mrf49xa_mac.c: 171: {
  3589                           ;mrf49xa_mac.c: 172: Mrf49xaFreePacket(inst, packet);
  3590  0905  0830               	movf	Mrf49xaTick@packet,w
  3591  0906  00A0               	movwf	Mrf49xaFreePacket@packet
  3592  0907  232A  3188         	fcall	_Mrf49xaFreePacket
  3593  0909                     l3339:	
  3594                           
  3595                           ;mrf49xa_mac.c: 173: }
  3596                           ;mrf49xa_mac.c: 177: }
  3597                           ;mrf49xa_mac.c: 179: if (inst->txPacket.state == PKT_WAITING_FOR_ACK)
  3598  0909  0831               	movf	Mrf49xaTick@inst,w
  3599  090A  3E31               	addlw	49
  3600  090B  0086               	movwf	6
  3601  090C  0187               	clrf	7
  3602  090D  0801               	movf	1,w
  3603  090E  3A03               	xorlw	3
  3604  090F  1D03               	skipz
  3605  0910  2953               	goto	l3359
  3606                           
  3607                           ;mrf49xa_mac.c: 180: {
  3608                           ;mrf49xa_mac.c: 181: if (inst->txPacket.needAck == ACK_RECEIVED)
  3609  0911  0831               	movf	Mrf49xaTick@inst,w
  3610  0912  3E48               	addlw	72
  3611  0913  0086               	movwf	6
  3612  0914  0E01               	swapf	1,w
  3613  0915  0C89               	rrf	9,f
  3614  0916  0C89               	rrf	9,f
  3615  0917  3903               	andlw	3
  3616  0918  3A02               	xorlw	2
  3617  0919  1D03               	skipz
  3618  091A  2921               	goto	l3345
  3619  091B                     l3343:	
  3620                           
  3621                           ;mrf49xa_mac.c: 182: {
  3622                           ;mrf49xa_mac.c: 183: inst->txPacket.state = PKT_FREE;
  3623  091B  0831               	movf	Mrf49xaTick@inst,w
  3624  091C  3E31               	addlw	49
  3625  091D  0086               	movwf	6
  3626  091E  0187               	clrf	7
  3627  091F  0181               	clrf	1
  3628                           
  3629                           ;mrf49xa_mac.c: 184: }
  3630  0920  2953               	goto	l3359
  3631  0921                     l3345:	
  3632                           
  3633                           ;mrf49xa_mac.c: 185: else if (inst->txPacket.retry == 10)
  3634  0921  0831               	movf	Mrf49xaTick@inst,w
  3635  0922  3E48               	addlw	72
  3636  0923  0086               	movwf	6
  3637  0924  0187               	clrf	7
  3638  0925  0801               	movf	1,w
  3639  0926  390F               	andlw	15
  3640  0927  3A0A               	xorlw	10
  3641  0928  1D03               	skipz
  3642  0929  294A               	goto	l3355
  3643                           
  3644                           ;mrf49xa_mac.c: 186: {
  3645                           ;mrf49xa_mac.c: 187: if (inst->txPacket.retransmit == 1)
  3646  092A  0831               	movf	Mrf49xaTick@inst,w
  3647  092B  3E48               	addlw	72
  3648  092C  0086               	movwf	6
  3649  092D  0E01               	swapf	1,w
  3650  092E  3903               	andlw	3
  3651  092F  3A01               	xorlw	1
  3652  0930  1903               	btfsc	3,2
  3653  0931  291B               	goto	l3343
  3654                           
  3655                           ;mrf49xa_mac.c: 193: else
  3656                           ;mrf49xa_mac.c: 194: {
  3657                           ;mrf49xa_mac.c: 196: inst->txPacket.retry = 0;
  3658  0932  0831               	movf	Mrf49xaTick@inst,w
  3659  0933  3E48               	addlw	72
  3660  0934  0086               	movwf	6
  3661  0935  30F0               	movlw	-16
  3662  0936  0581               	andwf	1,f
  3663                           
  3664                           ;mrf49xa_mac.c: 197: inst->txPacket.retransmit++;
  3665  0937  0831               	movf	Mrf49xaTick@inst,w
  3666  0938  3E48               	addlw	72
  3667  0939  0086               	movwf	6
  3668  093A  0E01               	swapf	1,w
  3669  093B  3903               	andlw	3
  3670  093C  00AE               	movwf	??_Mrf49xaTick
  3671  093D  0AAE               	incf	??_Mrf49xaTick,f
  3672  093E  0EAE               	swapf	??_Mrf49xaTick,f
  3673  093F  0801               	movf	1,w
  3674  0940  062E               	xorwf	??_Mrf49xaTick,w
  3675  0941  39CF               	andlw	-49
  3676  0942  062E               	xorwf	??_Mrf49xaTick,w
  3677  0943  0081               	movwf	1
  3678                           
  3679                           ;mrf49xa_mac.c: 198: inst->txPacket.state = PKT_READY_FOR_TX;
  3680  0944  0831               	movf	Mrf49xaTick@inst,w
  3681  0945  3E31               	addlw	49
  3682  0946  0086               	movwf	6
  3683  0947  0181               	clrf	1
  3684  0948  0A81               	incf	1,f
  3685  0949  2953               	goto	l3359
  3686  094A                     l3355:	
  3687                           
  3688                           ;mrf49xa_mac.c: 201: else
  3689                           ;mrf49xa_mac.c: 202: {
  3690                           ;mrf49xa_mac.c: 203: inst->txPacket.retry++;
  3691  094A  0831               	movf	Mrf49xaTick@inst,w
  3692  094B  3E48               	addlw	72
  3693  094C  27D9  3188         	fcall	PL12	;call to abstracted procedure
  3694                           
  3695                           ;mrf49xa_mac.c: 204: Sleepy(5);
  3696  094E  3005               	movlw	5
  3697  094F  00A0               	movwf	Sleepy@ms
  3698  0950  01A1               	clrf	Sleepy@ms+1
  3699  0951  21F6  3188         	fcall	_Sleepy
  3700  0953                     l3359:	
  3701                           
  3702                           ;mrf49xa_mac.c: 205: }
  3703                           ;mrf49xa_mac.c: 206: }
  3704                           ;mrf49xa_mac.c: 208: if (inst->txPacket.state == PKT_READY_FOR_TX &&
  3705                           ;mrf49xa_mac.c: 209: inst->state == RECV_IDLE)
  3706  0953  0831               	movf	Mrf49xaTick@inst,w
  3707  0954  3E31               	addlw	49
  3708  0955  0086               	movwf	6
  3709  0956  0187               	clrf	7
  3710  0957  0B01               	decfsz	1,w
  3711  0958  0008               	return
  3712  0959  0831               	movf	Mrf49xaTick@inst,w
  3713  095A  3E49               	addlw	73
  3714  095B  0086               	movwf	6
  3715  095C  0B01               	decfsz	1,w
  3716  095D  0008               	return
  3717                           
  3718                           ;mrf49xa_mac.c: 210: {
  3719                           ;mrf49xa_mac.c: 211: if (inst->txPacket.retry >= 10)
  3720  095E  0831               	movf	Mrf49xaTick@inst,w
  3721  095F  3E48               	addlw	72
  3722  0960  0086               	movwf	6
  3723  0961  0801               	movf	1,w
  3724  0962  390F               	andlw	15
  3725  0963  00AE               	movwf	??_Mrf49xaTick
  3726  0964  300A               	movlw	10
  3727  0965  022E               	subwf	??_Mrf49xaTick,w
  3728  0966  1C03               	skipc
  3729  0967  2973               	goto	l3371
  3730                           
  3731                           ;mrf49xa_mac.c: 212: {
  3732                           ;mrf49xa_mac.c: 214: inst->txPacket.retry = 0;
  3733  0968  0831               	movf	Mrf49xaTick@inst,w
  3734  0969  3E48               	addlw	72
  3735  096A  0086               	movwf	6
  3736  096B  30F0               	movlw	-16
  3737  096C  0581               	andwf	1,f
  3738                           
  3739                           ;mrf49xa_mac.c: 215: inst->txPacket.state = PKT_WAITING_FOR_ACK;
  3740  096D  0831               	movf	Mrf49xaTick@inst,w
  3741  096E  3E31               	addlw	49
  3742  096F  0086               	movwf	6
  3743  0970  3003               	movlw	3
  3744  0971  0081               	movwf	1
  3745  0972  0008               	return
  3746  0973                     l3371:	
  3747                           
  3748                           ;mrf49xa_mac.c: 217: }
  3749                           ;mrf49xa_mac.c: 221: uint8_t timeout = 0;
  3750  0973  01AF               	clrf	Mrf49xaTick@timeout
  3751  0974                     l3373:	
  3752                           
  3753                           ;mrf49xa_mac.c: 225: {
  3754                           ;mrf49xa_mac.c: 226: Mrf49RxSts();
  3755  0974  25BE  3188         	fcall	_Mrf49RxSts
  3756                           
  3757                           ;mrf49xa_mac.c: 228: if (inst->state == RECV_IDLE && mrf49Status.flags.msb.signalPresent
      +                           == 0)
  3758  0976  0831               	movf	Mrf49xaTick@inst,w
  3759  0977  3E49               	addlw	73
  3760  0978  0086               	movwf	6
  3761  0979  0187               	clrf	7
  3762  097A  0B01               	decfsz	1,w
  3763  097B  297E               	goto	l3381
  3764  097C  1C40               	btfss	_mrf49Status,0
  3765  097D  298C               	goto	l444
  3766  097E                     l3381:	
  3767                           
  3768                           ;mrf49xa_mac.c: 232: }
  3769                           ;mrf49xa_mac.c: 234: Sleepy(5);
  3770  097E  3005               	movlw	5
  3771  097F  00A0               	movwf	Sleepy@ms
  3772  0980  01A1               	clrf	Sleepy@ms+1
  3773  0981  21F6  3188         	fcall	_Sleepy
  3774  0983  300B               	movlw	11
  3775                           
  3776                           ;mrf49xa_mac.c: 235: timeout++;
  3777  0984  0AAF               	incf	Mrf49xaTick@timeout,f
  3778                           
  3779                           ;mrf49xa_mac.c: 237: if (timeout > 10)
  3780  0985  022F               	subwf	Mrf49xaTick@timeout,w
  3781  0986  1C03               	skipc
  3782  0987  2974               	goto	l3373
  3783                           
  3784                           ;mrf49xa_mac.c: 238: {
  3785                           ;mrf49xa_mac.c: 239: inst->txPacket.retry++;
  3786  0988  0831               	movf	Mrf49xaTick@inst,w
  3787  0989  3E48               	addlw	72
  3788  098A  27D9               	fcall	PL12	;call to abstracted procedure
  3789  098B  0008               	return
  3790  098C                     l444:	
  3791                           
  3792                           ;mrf49xa_mac.c: 253: INTCONbits.INTE = 0;;
  3793  098C  120B               	bcf	11,4	;volatile
  3794                           
  3795                           ;mrf49xa_mac.c: 254: Mrf49xaModeTx();
  3796  098D  2422               	fcall	_Mrf49xaModeTx
  3797                           
  3798                           ;mrf49xa_mac.c: 255: inst->txPacket.state = PKT_HW_BUSY_TX;
  3799  098E  0020               	movlb	0	; select bank0
  3800  098F  0831               	movf	Mrf49xaTick@inst,w
  3801  0990  3E31               	addlw	49
  3802  0991  0086               	movwf	6
  3803  0992  3002               	movlw	2
  3804  0993  0187               	clrf	7
  3805  0994  0081               	movwf	1
  3806                           
  3807                           ;mrf49xa_mac.c: 259: INTCONbits.INTE = 1;;
  3808  0995  160B               	bsf	11,4	;volatile
  3809  0996  0008               	return
  3810  0997                     __end_of_Mrf49xaTick:	
  3811  0997                     __ptext31:	
  3812 ;; *************** function _Mrf49xaInit *****************
  3813 ;; Defined at:
  3814 ;;		line 151 in file "../../../src/devices/mrf49xa.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  k               1    6[BANK0 ] unsigned char 
  3819 ;;  j               1    0        unsigned char 
  3820 ;;  i               1    0        unsigned char 
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      PTR struct rfTrcvStatus_
  3823 ;; Registers used:
  3824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 1F/0
  3827 ;;		On exit  : 1F/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3830 ;;      Params:         0       0       0       0
  3831 ;;      Locals:         0       1       0       0
  3832 ;;      Temps:          0       0       0       0
  3833 ;;      Totals:         0       1       0       0
  3834 ;;Total ram usage:        1 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    9
  3837 ;; This function calls:
  3838 ;;		_Mrf49TxCmd
  3839 ;;		_Mrf49xaModeRx
  3840 ;;		_Mrf49xaServe
  3841 ;;		_Sleepy
  3842 ;; This function is called by:
  3843 ;;		_Mrf49xaTick
  3844 ;;		_PwrRfInit
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _Mrf49xaInit
  3850  0997                     _Mrf49xaInit:	
  3851  0997                     l234:	
  3852                           ;incstack = 0
  3853                           ; Regs used in _Mrf49xaInit: [allreg]
  3854                           ;mrf49xa.c: 153: UI08_t k;
  3855                           ;mrf49xa.c: 155: UI08_t i, j;
  3856                           ;mrf49xa.c: 157: reset:
  3857                           
  3858                           
  3859                           ;mrf49xa.c: 159: for (k = 0; k < sizeof(Mrf49xaMac_t); k++)
  3860  0997  01A6               	clrf	Mrf49xaInit@k
  3861  0998                     l3027:	
  3862                           
  3863                           ;mrf49xa.c: 160: {
  3864                           ;mrf49xa.c: 161: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  3865  0998  0826               	movf	Mrf49xaInit@k,w
  3866  0999  3EA0               	addlw	_rfTrcvStatus& (0+255)
  3867  099A  0086               	movwf	6
  3868  099B  304C               	movlw	76
  3869  099C  0187               	clrf	7
  3870  099D  0181               	clrf	1
  3871  099E  0AA6               	incf	Mrf49xaInit@k,f
  3872  099F  0226               	subwf	Mrf49xaInit@k,w
  3873  09A0  1C03               	skipc
  3874  09A1  2998               	goto	l3027
  3875                           
  3876                           ;mrf49xa.c: 162: }
  3877                           ;mrf49xa.c: 165: PORTCbits.RC6 = 1;
  3878  09A2  170E               	bsf	14,6	;volatile
  3879                           
  3880                           ;mrf49xa.c: 166: LATCbits.LATC7 = 0;
  3881  09A3  0022               	movlb	2	; select bank2
  3882  09A4  138E               	bcf	14,7	;volatile
  3883                           
  3884                           ;mrf49xa.c: 167: PORTBbits.RB7 = 0;
  3885  09A5  0020               	movlb	0	; select bank0
  3886  09A6  138D               	bcf	13,7	;volatile
  3887                           
  3888                           ;mrf49xa.c: 169: LATCbits.LATC1 = 0;
  3889  09A7  0022               	movlb	2	; select bank2
  3890  09A8  108E               	bcf	14,1	;volatile
  3891                           
  3892                           ;mrf49xa.c: 170: LATCbits.LATC4 = 1;
  3893  09A9  160E               	bsf	14,4	;volatile
  3894                           
  3895                           ;mrf49xa.c: 172: LATAbits.LATA5 = 1;
  3896  09AA  168C               	bsf	12,5	;volatile
  3897                           
  3898                           ;mrf49xa.c: 174: Sleepy(64);
  3899  09AB  27F1  3188         	fcall	PL20	;call to abstracted procedure
  3900  09AD  21F6  3188         	fcall	_Sleepy
  3901                           
  3902                           ;mrf49xa.c: 175: LATAbits.LATA4 = 0;
  3903  09AF  0022               	movlb	2	; select bank2
  3904  09B0  120C               	bcf	12,4	;volatile
  3905                           
  3906                           ;mrf49xa.c: 176: Sleepy(64);
  3907  09B1  27F1  3188         	fcall	PL20	;call to abstracted procedure
  3908  09B3  21F6  3188         	fcall	_Sleepy
  3909                           
  3910                           ;mrf49xa.c: 177: LATAbits.LATA4 = 1;
  3911  09B5  0022               	movlb	2	; select bank2
  3912  09B6  160C               	bsf	12,4	;volatile
  3913                           
  3914                           ;mrf49xa.c: 178: Sleepy(64);
  3915  09B7  27F1  3188         	fcall	PL20	;call to abstracted procedure
  3916  09B9  21F6               	fcall	_Sleepy
  3917                           
  3918                           ;mrf49xa.c: 180: rfTrcvStatus.state = RECV_IDLE;
  3919  09BA  0021               	movlb	1	; select bank1
  3920  09BB  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  3921  09BC  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  3922                           
  3923                           ;mrf49xa.c: 182: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(5); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3924  09BD  0020               	movlb	0	; select bank0
  3925  09BE  301B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3926  09BF  01A6               	clrf	Mrf49xaInit@k
  3927  09C0  3182               	movlp	high __stringtab
  3928  09C1  000A               	callw
  3929  09C2  3188               	pagesel	$	;select current page
  3930  09C3  3800               	iorlw	0
  3931  09C4  1903               	btfsc	3,2
  3932  09C5  29E8               	goto	l3057
  3933  09C6                     l3047:	
  3934  09C6  3526               	lslf	Mrf49xaInit@k,w
  3935  09C7  3E1F               	addlw	low (_mrfRegset_Init| (0+32768))
  3936  09C8  3182               	movlp	high __stringtab
  3937  09C9  000A               	callw
  3938  09CA  3188               	pagesel	$	;select current page
  3939  09CB  3A55               	xorlw	85
  3940  09CC  1D03               	skipz
  3941  09CD  29D4               	goto	l3051
  3942  09CE  3005               	movlw	5
  3943  09CF  00A0               	movwf	Sleepy@ms
  3944  09D0  01A1               	clrf	Sleepy@ms+1
  3945  09D1  21F6  3188         	fcall	_Sleepy
  3946  09D3  29E0               	goto	l3053
  3947  09D4                     l3051:	
  3948  09D4  3526               	lslf	Mrf49xaInit@k,w
  3949  09D5  3E20               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3950  09D6  3182               	movlp	high __stringtab
  3951  09D7  000A               	callw
  3952  09D8  3188               	pagesel	$	;select current page
  3953  09D9  00A1               	movwf	Mrf49TxCmd@val
  3954  09DA  3526               	lslf	Mrf49xaInit@k,w
  3955  09DB  3E1F               	addlw	low (_mrfRegset_Init| (0+32768))
  3956  09DC  3182               	movlp	high __stringtab
  3957  09DD  000A               	callw
  3958  09DE  3188               	pagesel	$	;select current page
  3959  09DF  255A               	fcall	_Mrf49TxCmd
  3960  09E0                     l3053:	
  3961  09E0  301B               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3962  09E1  0AA6               	incf	Mrf49xaInit@k,f
  3963  09E2  3182               	movlp	high __stringtab
  3964  09E3  000A               	callw
  3965  09E4  3188               	pagesel	$	;select current page
  3966  09E5  0226               	subwf	Mrf49xaInit@k,w
  3967  09E6  1C03               	skipc
  3968  09E7  29C6               	goto	l3047
  3969  09E8                     l3057:	
  3970                           
  3971                           ;mrf49xa.c: 185: Mrf49xaModeRx();
  3972  09E8  2535  3188         	fcall	_Mrf49xaModeRx
  3973                           
  3974                           ;mrf49xa.c: 187: k = 0;
  3975  09EA  01A6               	clrf	Mrf49xaInit@k
  3976  09EB                     l3069:	
  3977                           ;mrf49xa.c: 188: while(PORTAbits.RA2 == 0)
  3978                           
  3979  09EB  0020               	movlb	0	; select bank0
  3980  09EC  190C               	btfsc	12,2	;volatile
  3981  09ED  0008               	return
  3982                           
  3983                           ;mrf49xa.c: 189: {
  3984                           ;mrf49xa.c: 190: k++;
  3985  09EE  0AA6               	incf	Mrf49xaInit@k,f
  3986                           
  3987                           ;mrf49xa.c: 191: if (k == 255)
  3988  09EF  0826               	movf	Mrf49xaInit@k,w
  3989  09F0  3AFF               	xorlw	255
  3990  09F1  1903               	btfsc	3,2
  3991  09F2  2997               	goto	l234
  3992                           
  3993                           ;mrf49xa.c: 196: }
  3994                           ;mrf49xa.c: 201: Mrf49xaServe();
  3995                           
  3996                           ;mrf49xa.c: 195: goto reset;
  3997  09F3  2446  3188         	fcall	_Mrf49xaServe
  3998  09F5  29EB               	goto	l3069
  3999  09F6                     __end_of_Mrf49xaInit:	
  4000  09F6                     __ptext32:	
  4001 ;; *************** function _Sleepy *****************
  4002 ;; Defined at:
  4003 ;;		line 42 in file "../../../src/node/power.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  ms              2    0[BANK0 ] unsigned int 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  b               1    3[BANK0 ] unsigned char 
  4008 ;; Return value:  Size  Location     Type
  4009 ;;		None               void
  4010 ;; Registers used:
  4011 ;;		wreg, status,2, status,0
  4012 ;; Tracked objects:
  4013 ;;		On entry : 1F/0
  4014 ;;		On exit  : 1F/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4017 ;;      Params:         0       2       0       0
  4018 ;;      Locals:         0       1       0       0
  4019 ;;      Temps:          0       1       0       0
  4020 ;;      Totals:         0       4       0       0
  4021 ;;Total ram usage:        4 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    5
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_Mrf49xaInit
  4028 ;;		_Mrf49xaTick
  4029 ;;		_main
  4030 ;;		_PwrRfInit
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           
  4035                           ;psect for function _Sleepy
  4036  09F6                     _Sleepy:	
  4037                           
  4038                           ;power.c: 44: uint8_t b = 0;
  4039                           
  4040                           ;incstack = 0
  4041                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  4042  09F6  01A3               	clrf	Sleepy@b
  4043  09F7                     l2953:	
  4044                           ;power.c: 46: while (ms != 0)
  4045                           
  4046  09F7  0821               	movf	Sleepy@ms+1,w
  4047  09F8  0420               	iorwf	Sleepy@ms,w
  4048  09F9  1903               	btfsc	3,2
  4049  09FA  0008               	return
  4050                           
  4051                           ;power.c: 47: {
  4052                           ;power.c: 48: if ((ms & 1) != 0)
  4053  09FB  1C20               	btfss	Sleepy@ms,0
  4054  09FC  2A0C               	goto	l2949
  4055                           
  4056                           ;power.c: 49: {
  4057                           ;power.c: 50: WDTCONbits.WDTPS = b;
  4058  09FD  0823               	movf	Sleepy@b,w
  4059  09FE  00A2               	movwf	??_Sleepy
  4060  09FF  0DA2               	rlf	??_Sleepy,f
  4061  0A00  0021               	movlb	1	; select bank1
  4062  0A01  0817               	movf	23,w	;volatile
  4063  0A02  0020               	movlb	0	; select bank0
  4064  0A03  0622               	xorwf	??_Sleepy,w
  4065  0A04  39C1               	andlw	-63
  4066  0A05  0622               	xorwf	??_Sleepy,w
  4067  0A06  0021               	movlb	1	; select bank1
  4068  0A07  0097               	movwf	23	;volatile
  4069                           
  4070                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  4071  0A08  1417               	bsf	23,0	;volatile
  4072  0A09  0063               	sleep	;# 
  4073                           
  4074                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  4075  0A0A  0021               	movlb	1	; select bank1
  4076  0A0B  1017               	bcf	23,0	;volatile
  4077  0A0C                     l2949:	
  4078                           
  4079                           ;power.c: 56: }
  4080                           ;power.c: 57: ms = ms >> 1;
  4081  0A0C  0020               	movlb	0	; select bank0
  4082  0A0D  36A1               	lsrf	Sleepy@ms+1,f
  4083  0A0E  0CA0               	rrf	Sleepy@ms,f
  4084                           
  4085                           ;power.c: 58: b++;
  4086  0A0F  0AA3               	incf	Sleepy@b,f
  4087  0A10  29F7               	goto	l2953
  4088  0A11                     __end_of_Sleepy:	
  4089  0A11                     __ptext54:	
  4090 ;; *************** function _SoftI2cRepeatedStart *****************
  4091 ;; Defined at:
  4092 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;		None               void
  4099 ;; Registers used:
  4100 ;;		wreg, status,2, status,0, pclath, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4106 ;;      Params:         0       0       0       0
  4107 ;;      Locals:         0       0       0       0
  4108 ;;      Temps:          0       0       0       0
  4109 ;;      Totals:         0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    6
  4113 ;; This function calls:
  4114 ;;		_SoftI2cNop
  4115 ;; This function is called by:
  4116 ;;		_eepromRxBytes
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _SoftI2cRepeatedStart
  4122  0A11                     _SoftI2cRepeatedStart:	
  4123                           
  4124                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4128  0A11  0021               	movlb	1	; select bank1
  4129  0A12  120D               	bcf	13,4	;volatile
  4130                           
  4131                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  4132  0A13  0022               	movlb	2	; select bank2
  4133  0A14  130D               	bcf	13,6	;volatile
  4134                           
  4135                           ;softI2c.c: 57: SoftI2cNop();
  4136  0A15  22FB  3188         	fcall	_SoftI2cNop
  4137                           
  4138                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  4139  0A17  0022               	movlb	2	; select bank2
  4140  0A18  160D               	bsf	13,4	;volatile
  4141                           
  4142                           ;softI2c.c: 60: SoftI2cNop();
  4143  0A19  22FB  3188         	fcall	_SoftI2cNop
  4144                           
  4145                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  4146  0A1B  0022               	movlb	2	; select bank2
  4147  0A1C  170D               	bsf	13,6	;volatile
  4148                           
  4149                           ;softI2c.c: 63: SoftI2cNop();
  4150  0A1D  22FB  3188         	fcall	_SoftI2cNop
  4151                           
  4152                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  4153  0A1F  0022               	movlb	2	; select bank2
  4154  0A20  120D               	bcf	13,4	;volatile
  4155                           
  4156                           ;softI2c.c: 66: SoftI2cNop();
  4157  0A21  22FB  3188         	fcall	_SoftI2cNop
  4158                           
  4159                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  4160  0A23  0022               	movlb	2	; select bank2
  4161  0A24  130D               	bcf	13,6	;volatile
  4162                           
  4163                           ;softI2c.c: 69: SoftI2cNop();
  4164  0A25  2AFB               	ljmp	l2659
  4165  0A26                     __end_of_SoftI2cRepeatedStart:	
  4166  0A26                     __ptext60:	
  4167 ;; *************** function _Mcp9800Read *****************
  4168 ;; Defined at:
  4169 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  tempL           1    7[BANK0 ] unsigned char 
  4174 ;;  tempH           1    6[BANK0 ] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2    4[BANK0 ] unsigned int 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 1F/0
  4181 ;;		On exit  : 1F/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4184 ;;      Params:         0       2       0       0
  4185 ;;      Locals:         0       2       0       0
  4186 ;;      Temps:          0       0       0       0
  4187 ;;      Totals:         0       4       0       0
  4188 ;;Total ram usage:        4 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    7
  4191 ;; This function calls:
  4192 ;;		_SoftI2cRxByte
  4193 ;;		_SoftI2cStart
  4194 ;;		_SoftI2cStop
  4195 ;;		_SoftI2cTxByte
  4196 ;; This function is called by:
  4197 ;;		_main
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _Mcp9800Read
  4203  0A26                     _Mcp9800Read:	
  4204                           
  4205                           ;mcp9800.c: 21: SoftI2cStart();
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4209  0A26  2302  3188         	fcall	_SoftI2cStart
  4210                           
  4211                           ;mcp9800.c: 22: SoftI2cTxByte(0b10010001);
  4212  0A28  3091               	movlw	145
  4213  0A29  2294  3188         	fcall	_SoftI2cTxByte
  4214                           
  4215                           ;mcp9800.c: 23: UI08_t tempH = SoftI2cRxByte(1);
  4216  0A2B  3001               	movlw	1
  4217  0A2C  22C2  3188         	fcall	_SoftI2cRxByte
  4218  0A2E  00A6               	movwf	Mcp9800Read@tempH
  4219                           
  4220                           ;mcp9800.c: 24: UI08_t tempL = SoftI2cRxByte(0);
  4221  0A2F  3000               	movlw	0
  4222  0A30  22C2  3188         	fcall	_SoftI2cRxByte
  4223  0A32  00A7               	movwf	Mcp9800Read@tempL
  4224                           
  4225                           ;mcp9800.c: 25: SoftI2cStop();
  4226  0A33  230F               	fcall	_SoftI2cStop
  4227                           
  4228                           ;mcp9800.c: 27: return (tempH << 8) | tempL;
  4229  0A34  0020               	movlb	0	; select bank0
  4230  0A35  0826               	movf	Mcp9800Read@tempH,w
  4231  0A36  00A5               	movwf	?_Mcp9800Read+1
  4232  0A37  01A4               	clrf	?_Mcp9800Read
  4233  0A38  0827               	movf	Mcp9800Read@tempL,w
  4234  0A39  04A4               	iorwf	?_Mcp9800Read,f
  4235  0A3A  0008               	return
  4236  0A3B                     __end_of_Mcp9800Read:	
  4237  0A3B                     __ptext51:	
  4238 ;; *************** function _eepromTxBytes *****************
  4239 ;; Defined at:
  4240 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  address         2    4[BANK0 ] unsigned int 
  4243 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4244 ;;		 -> cfgRam(9), eepromTxByte@byte(1), 
  4245 ;;  size            1    7[BANK0 ] unsigned char 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;		None               void
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 1F/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4257 ;;      Params:         0       4       0       0
  4258 ;;      Locals:         0       0       0       0
  4259 ;;      Temps:          0       0       0       0
  4260 ;;      Totals:         0       4       0       0
  4261 ;;Total ram usage:        4 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    7
  4264 ;; This function calls:
  4265 ;;		_SoftI2cStart
  4266 ;;		_SoftI2cStop
  4267 ;;		_SoftI2cTxByte
  4268 ;; This function is called by:
  4269 ;;		_CfgSave
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _eepromTxBytes
  4275  0A3B                     _eepromTxBytes:	
  4276  0A3B                     l3159:	
  4277                           ;incstack = 0
  4278                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4279                           
  4280                           
  4281                           ;24aa64.c: 28: SoftI2cStart();
  4282  0A3B  2302  3188         	fcall	_SoftI2cStart
  4283                           
  4284                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4285  0A3D  30A0               	movlw	160
  4286  0A3E  2294  3188         	fcall	_SoftI2cTxByte
  4287                           
  4288                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4289  0A40  0020               	movlb	0	; select bank0
  4290  0A41  0825               	movf	eepromTxBytes@address+1,w
  4291  0A42  2294  3188         	fcall	_SoftI2cTxByte
  4292                           
  4293                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4294  0A44  0020               	movlb	0	; select bank0
  4295  0A45  0824               	movf	eepromTxBytes@address,w
  4296  0A46  2294  3188         	fcall	_SoftI2cTxByte
  4297  0A48                     l3167:	
  4298                           ;24aa64.c: 33: while (size != 0)
  4299                           
  4300  0A48  0020               	movlb	0	; select bank0
  4301  0A49  08A7               	movf	eepromTxBytes@size,f
  4302  0A4A  1903               	btfsc	3,2
  4303  0A4B  2A56               	goto	l3169
  4304                           
  4305                           ;24aa64.c: 34: {
  4306                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4307  0A4C  0826               	movf	eepromTxBytes@data,w
  4308  0A4D  0086               	movwf	6
  4309  0A4E  0187               	clrf	7
  4310  0A4F  0801               	movf	1,w
  4311  0A50  2294  3188         	fcall	_SoftI2cTxByte
  4312                           
  4313                           ;24aa64.c: 37: data++;
  4314  0A52  0020               	movlb	0	; select bank0
  4315  0A53  0AA6               	incf	eepromTxBytes@data,f
  4316                           
  4317                           ;24aa64.c: 38: size--;
  4318  0A54  03A7               	decf	eepromTxBytes@size,f
  4319  0A55  2A48               	goto	l3167
  4320  0A56                     l3169:	
  4321                           
  4322                           ;24aa64.c: 39: }
  4323                           ;24aa64.c: 40: SoftI2cStop();
  4324  0A56  2B0F               	ljmp	l2707
  4325  0A57                     __end_of_eepromTxBytes:	
  4326  0A57                     __ptext59:	
  4327 ;; *************** function _Mcp9800Start *****************
  4328 ;; Defined at:
  4329 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  resolution      1    wreg     enum E4251
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  resolution      1    4[BANK0 ] enum E4251
  4334 ;; Return value:  Size  Location     Type
  4335 ;;		None               void
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0, pclath, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 1F/2
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4343 ;;      Params:         0       0       0       0
  4344 ;;      Locals:         0       1       0       0
  4345 ;;      Temps:          0       0       0       0
  4346 ;;      Totals:         0       1       0       0
  4347 ;;Total ram usage:        1 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    7
  4350 ;; This function calls:
  4351 ;;		_SoftI2cStart
  4352 ;;		_SoftI2cStop
  4353 ;;		_SoftI2cTxByte
  4354 ;; This function is called by:
  4355 ;;		_main
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _Mcp9800Start
  4361  0A57                     _Mcp9800Start:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4365                           ;Mcp9800Start@resolution stored from wreg
  4366  0A57  0020               	movlb	0	; select bank0
  4367  0A58  00A4               	movwf	Mcp9800Start@resolution
  4368                           
  4369                           ;mcp9800.c: 6: SoftI2cStart();
  4370  0A59  2302  3188         	fcall	_SoftI2cStart
  4371                           
  4372                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4373  0A5B  3090               	movlw	144
  4374  0A5C  2294  3188         	fcall	_SoftI2cTxByte
  4375                           
  4376                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4377  0A5E  3001               	movlw	1
  4378  0A5F  2294  3188         	fcall	_SoftI2cTxByte
  4379                           
  4380                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4381  0A61  0020               	movlb	0	; select bank0
  4382  0A62  0824               	movf	Mcp9800Start@resolution,w
  4383  0A63  2294  3188         	fcall	_SoftI2cTxByte
  4384                           
  4385                           ;mcp9800.c: 10: SoftI2cStop();
  4386  0A65  230F  3188         	fcall	_SoftI2cStop
  4387                           
  4388                           ;mcp9800.c: 12: SoftI2cStart();
  4389  0A67  2302  3188         	fcall	_SoftI2cStart
  4390                           
  4391                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4392  0A69  3090               	movlw	144
  4393  0A6A  2294  3188         	fcall	_SoftI2cTxByte
  4394                           
  4395                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4396  0A6C  3000               	movlw	0
  4397  0A6D  2294  3188         	fcall	_SoftI2cTxByte
  4398                           
  4399                           ;mcp9800.c: 15: SoftI2cStop();
  4400  0A6F  2B0F               	ljmp	l2707
  4401  0A70                     __end_of_Mcp9800Start:	
  4402  0A70                     __ptext53:	
  4403 ;; *************** function _eepromRxBytes *****************
  4404 ;; Defined at:
  4405 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  address         2    4[BANK0 ] unsigned int 
  4408 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4409 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), 
  4410 ;;		 -> cfgRam(9), eepromRxByte@dat(1), 
  4411 ;;  size            1    7[BANK0 ] unsigned char 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;		None
  4414 ;; Return value:  Size  Location     Type
  4415 ;;		None               void
  4416 ;; Registers used:
  4417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4418 ;; Tracked objects:
  4419 ;;		On entry : 1F/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4423 ;;      Params:         0       4       0       0
  4424 ;;      Locals:         0       0       0       0
  4425 ;;      Temps:          0       0       0       0
  4426 ;;      Totals:         0       4       0       0
  4427 ;;Total ram usage:        4 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    7
  4430 ;; This function calls:
  4431 ;;		_SoftI2cRepeatedStart
  4432 ;;		_SoftI2cRxByte
  4433 ;;		_SoftI2cStart
  4434 ;;		_SoftI2cStop
  4435 ;;		_SoftI2cTxByte
  4436 ;; This function is called by:
  4437 ;;		_handleFwCmd
  4438 ;;		_CfgLoad
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _eepromRxBytes
  4444  0A70                     _eepromRxBytes:	
  4445  0A70                     l3147:	
  4446                           ;incstack = 0
  4447                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4448                           
  4449                           
  4450                           ;24aa64.c: 7: SoftI2cStart();
  4451  0A70  2302  3188         	fcall	_SoftI2cStart
  4452                           
  4453                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4454  0A72  30A0               	movlw	160
  4455  0A73  2294  3188         	fcall	_SoftI2cTxByte
  4456                           
  4457                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4458  0A75  0020               	movlb	0	; select bank0
  4459  0A76  0825               	movf	eepromRxBytes@address+1,w
  4460  0A77  2294  3188         	fcall	_SoftI2cTxByte
  4461                           
  4462                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4463  0A79  0020               	movlb	0	; select bank0
  4464  0A7A  0824               	movf	eepromRxBytes@address,w
  4465  0A7B  2294  3188         	fcall	_SoftI2cTxByte
  4466                           
  4467                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4468  0A7D  2211  3188         	fcall	_SoftI2cRepeatedStart
  4469                           
  4470                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4471  0A7F  30A1               	movlw	161
  4472  0A80  2294  3188         	fcall	_SoftI2cTxByte
  4473  0A82                     l3155:	
  4474                           ;24aa64.c: 15: while (size != 0)
  4475                           
  4476  0A82  0020               	movlb	0	; select bank0
  4477  0A83  08A7               	movf	eepromRxBytes@size,f
  4478  0A84  1903               	btfsc	3,2
  4479  0A85  2A93               	goto	l3157
  4480                           
  4481                           ;24aa64.c: 16: {
  4482                           ;24aa64.c: 17: size--;
  4483  0A86  03A7               	decf	eepromRxBytes@size,f
  4484                           
  4485                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  4486  0A87  0826               	movf	eepromRxBytes@data,w
  4487  0A88  0086               	movwf	6
  4488  0A89  3000               	movlw	0
  4489  0A8A  0187               	clrf	7
  4490  0A8B  08A7               	movf	eepromRxBytes@size,f
  4491  0A8C  1D03               	skipz
  4492  0A8D  3001               	movlw	1
  4493  0A8E  22C2  3188         	fcall	_SoftI2cRxByte
  4494  0A90  0081               	movwf	1
  4495                           
  4496                           ;24aa64.c: 21: data++;
  4497  0A91  0AA6               	incf	eepromRxBytes@data,f
  4498  0A92  2A82               	goto	l3155
  4499  0A93                     l3157:	
  4500                           
  4501                           ;24aa64.c: 22: }
  4502                           ;24aa64.c: 23: SoftI2cStop();
  4503  0A93  2B0F               	ljmp	l2707
  4504  0A94                     __end_of_eepromRxBytes:	
  4505  0A94                     __ptext61:	
  4506 ;; *************** function _SoftI2cTxByte *****************
  4507 ;; Defined at:
  4508 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  data            1    wreg     unsigned char 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  data            1    2[BANK0 ] unsigned char 
  4513 ;;  i               1    3[BANK0 ] unsigned char 
  4514 ;;  ack             1    0        unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      unsigned char 
  4517 ;; Registers used:
  4518 ;;		wreg, status,2, status,0, pclath, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/1
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4524 ;;      Params:         0       0       0       0
  4525 ;;      Locals:         0       3       0       0
  4526 ;;      Temps:          0       0       0       0
  4527 ;;      Totals:         0       3       0       0
  4528 ;;Total ram usage:        3 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    6
  4531 ;; This function calls:
  4532 ;;		_SoftI2cNop
  4533 ;; This function is called by:
  4534 ;;		_SoftI2cInit
  4535 ;;		_Mcp9800Start
  4536 ;;		_Mcp9800Read
  4537 ;;		_eepromRxBytes
  4538 ;;		_eepromTxBytes
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function _SoftI2cTxByte
  4544  0A94                     _SoftI2cTxByte:	
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  4548                           ;SoftI2cTxByte@data stored from wreg
  4549  0A94  0020               	movlb	0	; select bank0
  4550  0A95  00A2               	movwf	SoftI2cTxByte@data
  4551                           
  4552                           ;softI2c.c: 89: UI08_t i;
  4553                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  4554  0A96  3080               	movlw	128
  4555  0A97  00A3               	movwf	SoftI2cTxByte@i
  4556  0A98                     l32:	
  4557                           
  4558                           ;softI2c.c: 92: {
  4559                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  4560  0A98  0022               	movlb	2	; select bank2
  4561  0A99  130D               	bcf	13,6	;volatile
  4562                           
  4563                           ;softI2c.c: 94: SoftI2cNop();
  4564  0A9A  22FB  3188         	fcall	_SoftI2cNop
  4565                           
  4566                           ;softI2c.c: 96: if(data & i)
  4567  0A9C  0020               	movlb	0	; select bank0
  4568  0A9D  0822               	movf	SoftI2cTxByte@data,w
  4569  0A9E  0523               	andwf	SoftI2cTxByte@i,w
  4570  0A9F  1903               	btfsc	3,2
  4571  0AA0  2AA4               	goto	l34
  4572                           
  4573                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  4574  0AA1  0022               	movlb	2	; select bank2
  4575  0AA2  160D               	bsf	13,4	;volatile
  4576  0AA3  2AA6               	goto	l35
  4577  0AA4                     l34:	
  4578                           
  4579                           ;softI2c.c: 98: else
  4580                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  4581  0AA4  0022               	movlb	2	; select bank2
  4582  0AA5  120D               	bcf	13,4	;volatile
  4583  0AA6                     l35:	
  4584                           
  4585                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  4586  0AA6  0021               	movlb	1	; select bank1
  4587  0AA7  120D               	bcf	13,4	;volatile
  4588                           
  4589                           ;softI2c.c: 102: SoftI2cNop();
  4590  0AA8  22FB  3188         	fcall	_SoftI2cNop
  4591                           
  4592                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  4593  0AAA  0022               	movlb	2	; select bank2
  4594  0AAB  170D               	bsf	13,6	;volatile
  4595                           
  4596                           ;softI2c.c: 105: SoftI2cNop();
  4597  0AAC  22FB  3188         	fcall	_SoftI2cNop
  4598  0AAE  0020               	movlb	0	; select bank0
  4599  0AAF  36A3               	lsrf	SoftI2cTxByte@i,f
  4600  0AB0  08A3               	movf	SoftI2cTxByte@i,f
  4601  0AB1  1D03               	skipz
  4602  0AB2  2A98               	goto	l32
  4603                           
  4604                           ;softI2c.c: 109: }
  4605                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  4606  0AB3  0022               	movlb	2	; select bank2
  4607  0AB4  130D               	bcf	13,6	;volatile
  4608                           
  4609                           ;softI2c.c: 113: SoftI2cNop();
  4610  0AB5  22FB  3188         	fcall	_SoftI2cNop
  4611                           
  4612                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  4613  0AB7  0021               	movlb	1	; select bank1
  4614  0AB8  160D               	bsf	13,4	;volatile
  4615                           
  4616                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  4617  0AB9  0022               	movlb	2	; select bank2
  4618  0ABA  170D               	bsf	13,6	;volatile
  4619                           
  4620                           ;softI2c.c: 118: SoftI2cNop();
  4621  0ABB  22FB  3188         	fcall	_SoftI2cNop
  4622  0ABD  0020               	movlb	0	; select bank0
  4623  0ABE  080D               	movf	13,w	;volatile
  4624                           
  4625                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  4626  0ABF  0022               	movlb	2	; select bank2
  4627  0AC0  130D               	bcf	13,6	;volatile
  4628                           
  4629                           ;softI2c.c: 123: SoftI2cNop();
  4630  0AC1  2AFB               	ljmp	l2659
  4631  0AC2                     __end_of_SoftI2cTxByte:	
  4632  0AC2                     __ptext64:	
  4633 ;; *************** function _SoftI2cRxByte *****************
  4634 ;; Defined at:
  4635 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  ack             1    wreg     unsigned char 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  ack             1    1[BANK0 ] unsigned char 
  4640 ;;  i               1    3[BANK0 ] unsigned char 
  4641 ;;  data            1    2[BANK0 ] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      unsigned char 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0, pclath, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 1F/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4651 ;;      Params:         0       0       0       0
  4652 ;;      Locals:         0       3       0       0
  4653 ;;      Temps:          0       0       0       0
  4654 ;;      Totals:         0       3       0       0
  4655 ;;Total ram usage:        3 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    6
  4658 ;; This function calls:
  4659 ;;		_SoftI2cNop
  4660 ;; This function is called by:
  4661 ;;		_Mcp9800Read
  4662 ;;		_eepromRxBytes
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           
  4667                           ;psect for function _SoftI2cRxByte
  4668  0AC2                     _SoftI2cRxByte:	
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  4672                           ;SoftI2cRxByte@ack stored from wreg
  4673  0AC2  0020               	movlb	0	; select bank0
  4674  0AC3  00A1               	movwf	SoftI2cRxByte@ack
  4675                           
  4676                           ;softI2c.c: 131: UI08_t data=0x00;
  4677  0AC4  01A2               	clrf	SoftI2cRxByte@data
  4678                           
  4679                           ;softI2c.c: 132: UI08_t i;
  4680                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  4681  0AC5  0022               	movlb	2	; select bank2
  4682  0AC6  130D               	bcf	13,6	;volatile
  4683                           
  4684                           ;softI2c.c: 135: SoftI2cNop();
  4685  0AC7  22FB  3188         	fcall	_SoftI2cNop
  4686                           
  4687                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  4688  0AC9  0021               	movlb	1	; select bank1
  4689  0ACA  160D               	bsf	13,4	;volatile
  4690                           
  4691                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  4692  0ACB  0022               	movlb	2	; select bank2
  4693  0ACC  160D               	bsf	13,4	;volatile
  4694                           
  4695                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  4696  0ACD  3080               	movlw	128
  4697  0ACE  0020               	movlb	0	; select bank0
  4698  0ACF  00A3               	movwf	SoftI2cRxByte@i
  4699  0AD0                     l39:	
  4700                           
  4701                           ;softI2c.c: 140: {
  4702                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  4703  0AD0  0022               	movlb	2	; select bank2
  4704  0AD1  130D               	bcf	13,6	;volatile
  4705                           
  4706                           ;softI2c.c: 142: SoftI2cNop();
  4707  0AD2  22FB  3188         	fcall	_SoftI2cNop
  4708                           
  4709                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  4710  0AD4  0022               	movlb	2	; select bank2
  4711  0AD5  170D               	bsf	13,6	;volatile
  4712                           
  4713                           ;softI2c.c: 144: SoftI2cNop();
  4714  0AD6  22FB  3188         	fcall	_SoftI2cNop
  4715                           
  4716                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  4717  0AD8  0020               	movlb	0	; select bank0
  4718                           
  4719                           ;softI2c.c: 150: data |= i;
  4720  0AD9  0823               	movf	SoftI2cRxByte@i,w
  4721  0ADA  1A0D               	btfsc	13,4	;volatile
  4722  0ADB  04A2               	iorwf	SoftI2cRxByte@data,f
  4723  0ADC  36A3               	lsrf	SoftI2cRxByte@i,f
  4724  0ADD  08A3               	movf	SoftI2cRxByte@i,f
  4725  0ADE  1D03               	skipz
  4726  0ADF  2AD0               	goto	l39
  4727                           
  4728                           ;softI2c.c: 152: }
  4729                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  4730  0AE0  0022               	movlb	2	; select bank2
  4731  0AE1  130D               	bcf	13,6	;volatile
  4732                           
  4733                           ;softI2c.c: 155: SoftI2cNop();
  4734  0AE2  22FB  3188         	fcall	_SoftI2cNop
  4735                           
  4736                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  4737  0AE4  0021               	movlb	1	; select bank1
  4738  0AE5  120D               	bcf	13,4	;volatile
  4739                           
  4740                           ;softI2c.c: 158: if(ack)
  4741  0AE6  0020               	movlb	0	; select bank0
  4742  0AE7  0821               	movf	SoftI2cRxByte@ack,w
  4743  0AE8  1903               	btfsc	3,2
  4744  0AE9  2AED               	goto	l42
  4745                           
  4746                           ;softI2c.c: 159: {
  4747                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  4748  0AEA  0022               	movlb	2	; select bank2
  4749  0AEB  120D               	bcf	13,4	;volatile
  4750                           
  4751                           ;softI2c.c: 161: }
  4752  0AEC  2AEF               	goto	l2763
  4753  0AED                     l42:	
  4754                           
  4755                           ;softI2c.c: 162: else
  4756                           ;softI2c.c: 163: {
  4757                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  4758  0AED  0022               	movlb	2	; select bank2
  4759  0AEE  160D               	bsf	13,4	;volatile
  4760  0AEF                     l2763:	
  4761                           
  4762                           ;softI2c.c: 165: }
  4763                           ;softI2c.c: 166: SoftI2cNop();
  4764  0AEF  22FB  3188         	fcall	_SoftI2cNop
  4765                           
  4766                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  4767  0AF1  0022               	movlb	2	; select bank2
  4768  0AF2  170D               	bsf	13,6	;volatile
  4769                           
  4770                           ;softI2c.c: 169: SoftI2cNop();
  4771  0AF3  22FB  3188         	fcall	_SoftI2cNop
  4772                           
  4773                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  4774  0AF5  0022               	movlb	2	; select bank2
  4775  0AF6  130D               	bcf	13,6	;volatile
  4776                           
  4777                           ;softI2c.c: 172: SoftI2cNop();
  4778  0AF7  22FB               	fcall	_SoftI2cNop
  4779                           
  4780                           ;softI2c.c: 174: return data;
  4781  0AF8  0020               	movlb	0	; select bank0
  4782  0AF9  0822               	movf	SoftI2cRxByte@data,w
  4783  0AFA  0008               	return
  4784  0AFB                     __end_of_SoftI2cRxByte:	
  4785  0AFB                     __ptext65:	
  4786 ;; *************** function _SoftI2cNop *****************
  4787 ;; Defined at:
  4788 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/2
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4802 ;;      Params:         0       0       0       0
  4803 ;;      Locals:         0       0       0       0
  4804 ;;      Temps:          0       1       0       0
  4805 ;;      Totals:         0       1       0       0
  4806 ;;Total ram usage:        1 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    5
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_SoftI2cStart
  4813 ;;		_SoftI2cRepeatedStart
  4814 ;;		_SoftI2cStop
  4815 ;;		_SoftI2cTxByte
  4816 ;;		_SoftI2cRxByte
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _SoftI2cNop
  4822  0AFB                     _SoftI2cNop:	
  4823  0AFB                     l2659:	
  4824                           ;incstack = 0
  4825                           ; Regs used in _SoftI2cNop: [wreg]
  4826                           
  4827                           
  4828                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  4829  0AFB  300A               	movlw	10
  4830  0AFC  0020               	movlb	0	; select bank0
  4831  0AFD  00A0               	movwf	??_SoftI2cNop
  4832  0AFE                     u2817:	
  4833  0AFE  0BA0               	decfsz	??_SoftI2cNop,f
  4834  0AFF  2AFE               	goto	u2817
  4835  0B00  0000               	nop
  4836  0B01  0008               	return
  4837  0B02                     __end_of_SoftI2cNop:	
  4838  0B02                     __ptext63:	
  4839 ;; *************** function _SoftI2cStart *****************
  4840 ;; Defined at:
  4841 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, status,2, status,0, pclath, cstack
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/1
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4855 ;;      Params:         0       0       0       0
  4856 ;;      Locals:         0       0       0       0
  4857 ;;      Temps:          0       0       0       0
  4858 ;;      Totals:         0       0       0       0
  4859 ;;Total ram usage:        0 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    6
  4862 ;; This function calls:
  4863 ;;		_SoftI2cNop
  4864 ;; This function is called by:
  4865 ;;		_SoftI2cInit
  4866 ;;		_Mcp9800Start
  4867 ;;		_Mcp9800Read
  4868 ;;		_eepromRxBytes
  4869 ;;		_eepromTxBytes
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _SoftI2cStart
  4875  0B02                     _SoftI2cStart:	
  4876                           
  4877                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  4878                           
  4879                           ;incstack = 0
  4880                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  4881  0B02  0021               	movlb	1	; select bank1
  4882  0B03  120D               	bcf	13,4	;volatile
  4883                           
  4884                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  4885  0B04  0022               	movlb	2	; select bank2
  4886  0B05  170D               	bsf	13,6	;volatile
  4887                           
  4888                           ;softI2c.c: 43: SoftI2cNop();
  4889  0B06  22FB  3188         	fcall	_SoftI2cNop
  4890                           
  4891                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  4892  0B08  0022               	movlb	2	; select bank2
  4893  0B09  120D               	bcf	13,4	;volatile
  4894                           
  4895                           ;softI2c.c: 46: SoftI2cNop();
  4896  0B0A  22FB  3188         	fcall	_SoftI2cNop
  4897                           
  4898                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  4899  0B0C  0022               	movlb	2	; select bank2
  4900  0B0D  130D               	bcf	13,6	;volatile
  4901                           
  4902                           ;softI2c.c: 48: SoftI2cNop();
  4903  0B0E  2AFB               	ljmp	l2659
  4904  0B0F                     __end_of_SoftI2cStart:	
  4905  0B0F                     __ptext62:	
  4906 ;; *************** function _SoftI2cStop *****************
  4907 ;; Defined at:
  4908 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;		None               void
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/1
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4922 ;;      Params:         0       0       0       0
  4923 ;;      Locals:         0       0       0       0
  4924 ;;      Temps:          0       0       0       0
  4925 ;;      Totals:         0       0       0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    6
  4929 ;; This function calls:
  4930 ;;		_SoftI2cNop
  4931 ;; This function is called by:
  4932 ;;		_SoftI2cInit
  4933 ;;		_Mcp9800Start
  4934 ;;		_Mcp9800Read
  4935 ;;		_eepromRxBytes
  4936 ;;		_eepromTxBytes
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _SoftI2cStop
  4942  0B0F                     _SoftI2cStop:	
  4943  0B0F                     l2707:	
  4944                           ;incstack = 0
  4945                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  4946                           
  4947                           
  4948                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  4949  0B0F  0021               	movlb	1	; select bank1
  4950  0B10  120D               	bcf	13,4	;volatile
  4951                           
  4952                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  4953  0B11  0022               	movlb	2	; select bank2
  4954  0B12  120D               	bcf	13,4	;volatile
  4955                           
  4956                           ;softI2c.c: 78: SoftI2cNop();
  4957  0B13  22FB  3188         	fcall	_SoftI2cNop
  4958                           
  4959                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  4960  0B15  0022               	movlb	2	; select bank2
  4961  0B16  170D               	bsf	13,6	;volatile
  4962                           
  4963                           ;softI2c.c: 81: SoftI2cNop();
  4964  0B17  22FB  3188         	fcall	_SoftI2cNop
  4965                           
  4966                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  4967  0B19  0022               	movlb	2	; select bank2
  4968  0B1A  160D               	bsf	13,4	;volatile
  4969                           
  4970                           ;softI2c.c: 83: SoftI2cNop();
  4971  0B1B  22FB  3188         	fcall	_SoftI2cNop
  4972                           
  4973                           ;softI2c.c: 84: SoftI2cNop();
  4974  0B1D  2AFB               	ljmp	l2659
  4975  0B1E                     __end_of_SoftI2cStop:	
  4976  0B1E                     __ptext34:	
  4977 ;; *************** function _Mrf49xaNeedsReset *****************
  4978 ;; Defined at:
  4979 ;;		line 146 in file "../../../src/devices/mrf49xa.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		None
  4988 ;; Tracked objects:
  4989 ;;		On entry : 1E/1
  4990 ;;		On exit  : 1F/1
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4993 ;;      Params:         0       0       0       0
  4994 ;;      Locals:         0       0       0       0
  4995 ;;      Temps:          0       0       0       0
  4996 ;;      Totals:         0       0       0       0
  4997 ;;Total ram usage:        0 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    5
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_Mrf49xaTick
  5004 ;;		_Mrf49xaServe
  5005 ;;		_main
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           
  5010                           ;psect for function _Mrf49xaNeedsReset
  5011  0B1E                     _Mrf49xaNeedsReset:	
  5012                           
  5013                           ;mrf49xa.c: 148: rfTrcvStatus.needsReset = 1;
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _Mrf49xaNeedsReset: []
  5017  0B1E  0021               	movlb	1	; select bank1
  5018  0B1F  17EB               	bsf	(_rfTrcvStatus^(0+128)+75),7
  5019  0B20  0008               	return
  5020  0B21                     __end_of_Mrf49xaNeedsReset:	
  5021  0B21                     __ptext23:	
  5022 ;; *************** function _PwrI2cSleep *****************
  5023 ;; Defined at:
  5024 ;;		line 73 in file "../../../src/node/power.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;		None
  5029 ;; Return value:  Size  Location     Type
  5030 ;;		None               void
  5031 ;; Registers used:
  5032 ;;		None
  5033 ;; Tracked objects:
  5034 ;;		On entry : 1F/2
  5035 ;;		On exit  : 1F/1
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5038 ;;      Params:         0       0       0       0
  5039 ;;      Locals:         0       0       0       0
  5040 ;;      Temps:          0       0       0       0
  5041 ;;      Totals:         0       0       0       0
  5042 ;;Total ram usage:        0 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:    5
  5045 ;; This function calls:
  5046 ;;		Nothing
  5047 ;; This function is called by:
  5048 ;;		_main
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _PwrI2cSleep
  5054  0B21                     _PwrI2cSleep:	
  5055                           
  5056                           ;power.c: 75: LATBbits.LATB6 = 1;
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in _PwrI2cSleep: []
  5060  0B21  170D               	bsf	13,6	;volatile
  5061                           
  5062                           ;power.c: 76: LATBbits.LATB4 = 1;
  5063  0B22  160D               	bsf	13,4	;volatile
  5064                           
  5065                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  5066  0B23  0021               	movlb	1	; select bank1
  5067  0B24  130D               	bcf	13,6	;volatile
  5068                           
  5069                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  5070  0B25  120D               	bcf	13,4	;volatile
  5071  0B26  0008               	return
  5072  0B27                     __end_of_PwrI2cSleep:	
  5073  0B27                     __ptext14:	
  5074 ;; *************** function _PwrSensorSleep *****************
  5075 ;; Defined at:
  5076 ;;		line 157 in file "../../../src/node/power.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;		None
  5081 ;; Return value:  Size  Location     Type
  5082 ;;		None               void
  5083 ;; Registers used:
  5084 ;;		None
  5085 ;; Tracked objects:
  5086 ;;		On entry : 1E/1
  5087 ;;		On exit  : 1F/2
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5090 ;;      Params:         0       0       0       0
  5091 ;;      Locals:         0       0       0       0
  5092 ;;      Temps:          0       0       0       0
  5093 ;;      Totals:         0       0       0       0
  5094 ;;Total ram usage:        0 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    5
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_main
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function _PwrSensorSleep
  5106  0B27                     _PwrSensorSleep:	
  5107                           
  5108                           ;power.c: 159: LATCbits.LATC2 = 0;
  5109                           
  5110                           ;incstack = 0
  5111                           ; Regs used in _PwrSensorSleep: []
  5112  0B27  0022               	movlb	2	; select bank2
  5113  0B28  110E               	bcf	14,2	;volatile
  5114  0B29  0008               	return
  5115  0B2A                     __end_of_PwrSensorSleep:	
  5116  0B2A                     __ptext57:	
  5117 ;; *************** function _Mrf49xaFreePacket *****************
  5118 ;; Defined at:
  5119 ;;		line 87 in file "../../../src/devices/mrf49xa_mac.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  5122 ;;		 -> rfTrcvStatus(76), 
  5123 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5124 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  inst            1    1[BANK0 ] PTR struct rfTrcvStatus_
  5127 ;;		 -> rfTrcvStatus(76), 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;		None               void
  5130 ;; Registers used:
  5131 ;;		wreg, fsr1l, fsr1h, status,2
  5132 ;; Tracked objects:
  5133 ;;		On entry : 1F/0
  5134 ;;		On exit  : 1F/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5137 ;;      Params:         0       1       0       0
  5138 ;;      Locals:         0       1       0       0
  5139 ;;      Temps:          0       0       0       0
  5140 ;;      Totals:         0       2       0       0
  5141 ;;Total ram usage:        2 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    5
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_Mrf49xaTick
  5148 ;;		_HandlePacket
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           
  5153                           ;psect for function _Mrf49xaFreePacket
  5154  0B2A                     _Mrf49xaFreePacket:	
  5155  0B2A                     l3269:	
  5156                           ;incstack = 0
  5157                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5158                           
  5159                           
  5160                           ;mrf49xa_mac.c: 89: packet->state = PKT_FREE;
  5161  0B2A  0820               	movf	Mrf49xaFreePacket@packet,w
  5162  0B2B  0086               	movwf	6
  5163  0B2C  0187               	clrf	7
  5164  0B2D  0181               	clrf	1
  5165  0B2E  0008               	return
  5166  0B2F                     __end_of_Mrf49xaFreePacket:	
  5167  0B2F                     __ptext52:	
  5168 ;; *************** function _CfgLoad *****************
  5169 ;; Defined at:
  5170 ;;		line 19 in file "../../../src/node/config.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;		None               void
  5177 ;; Registers used:
  5178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 1E/1
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5184 ;;      Params:         0       0       0       0
  5185 ;;      Locals:         0       0       0       0
  5186 ;;      Temps:          0       0       0       0
  5187 ;;      Totals:         0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    8
  5191 ;; This function calls:
  5192 ;;		_eepromRxBytes
  5193 ;; This function is called by:
  5194 ;;		_handleCfgCmd
  5195 ;;		_main
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           
  5200                           ;psect for function _CfgLoad
  5201  0B2F                     _CfgLoad:	
  5202  0B2F                     l3513:	
  5203                           ;incstack = 0
  5204                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5205                           
  5206                           
  5207                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  5208  0B2F  0020               	movlb	0	; select bank0
  5209  0B30  3037               	movlw	_cfgRam& (0+255)
  5210  0B31  01A4               	clrf	eepromRxBytes@address
  5211  0B32  01A5               	clrf	eepromRxBytes@address+1
  5212  0B33  00A6               	movwf	eepromRxBytes@data
  5213  0B34  3009               	movlw	9
  5214  0B35  00A7               	movwf	eepromRxBytes@size
  5215  0B36  2A70               	ljmp	l3147
  5216  0B37                     __end_of_CfgLoad:	
  5217  0B37                     __ptext43:	
  5218 ;; *************** function _HandlePacket *****************
  5219 ;; Defined at:
  5220 ;;		line 150 in file "../../../src/rfstack/client.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  5223 ;;		 -> rfTrcvStatus(76), 
  5224 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  5225 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  inst            1   13[BANK0 ] PTR struct rfTrcvStatus_
  5228 ;;		 -> rfTrcvStatus(76), 
  5229 ;;  response        1   12[BANK0 ] struct .
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 1F/0
  5236 ;;		On exit  : 1F/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5239 ;;      Params:         0       1       0       0
  5240 ;;      Locals:         0       2       0       0
  5241 ;;      Temps:          0       1       0       0
  5242 ;;      Totals:         0       4       0       0
  5243 ;;Total ram usage:        4 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:   10
  5246 ;; This function calls:
  5247 ;;		_Mrf49xaFreePacket
  5248 ;;		_Mrf49xaTxAck
  5249 ;;		_Mrf49xaTxPacket
  5250 ;;		_handleCfgCmd
  5251 ;;		_handleCfgRead
  5252 ;;		_handleCfgWrite
  5253 ;;		_handleFwCmd
  5254 ;; This function is called by:
  5255 ;;		_Mrf49xaTick
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _HandlePacket
  5261  0B37                     _HandlePacket:	
  5262                           
  5263                           ;incstack = 0
  5264                           ; Regs used in _HandlePacket: [allreg]
  5265                           ;HandlePacket@inst stored from wreg
  5266  0B37  00AD               	movwf	HandlePacket@inst
  5267                           
  5268                           ;client.c: 153: struct
  5269                           ;client.c: 154: {
  5270                           ;client.c: 155: bool_t reset:1;
  5271                           ;client.c: 156: bool_t needAck:1;
  5272                           ;client.c: 157: bool_t sendAck:1;
  5273                           ;client.c: 158: bool_t sendMsg:1;
  5274                           ;client.c: 159: } response;
  5275                           ;client.c: 162: switch (packet->packet.id)
  5276  0B38  2B70               	goto	l3425
  5277  0B39                     l3399:	
  5278                           
  5279                           ;client.c: 165: packet->packet.data[0] = 2;
  5280  0B39  082A               	movf	HandlePacket@packet,w
  5281  0B3A  3E06               	addlw	6
  5282  0B3B  0086               	movwf	6
  5283  0B3C  3002               	movlw	2
  5284  0B3D  0187               	clrf	7
  5285  0B3E  0081               	movwf	1
  5286  0B3F                     l3401:	
  5287                           
  5288                           ;client.c: 166: response.sendMsg = 1;
  5289  0B3F  0020               	movlb	0	; select bank0
  5290  0B40  15AC               	bsf	HandlePacket@response,3
  5291                           
  5292                           ;client.c: 167: break;
  5293  0B41  2B8E               	goto	l552
  5294  0B42                     l3403:	
  5295                           
  5296                           ;client.c: 170: if (inst->txPacket.crc == packet->packet.data[1] &&
  5297                           ;client.c: 171: inst->txPacket.packet.id == packet->packet.data[0])
  5298  0B42  082A               	movf	HandlePacket@packet,w
  5299  0B43  3E07               	addlw	7
  5300  0B44  0086               	movwf	6
  5301  0B45  0187               	clrf	7
  5302  0B46  082D               	movf	HandlePacket@inst,w
  5303  0B47  3E47               	addlw	71
  5304  0B48  27FB  3188         	fcall	PL24	;call to abstracted procedure
  5305  0B4A  1D03               	skipz
  5306  0B4B  2B8E               	goto	l552
  5307  0B4C  082A               	movf	HandlePacket@packet,w
  5308  0B4D  3E06               	addlw	6
  5309  0B4E  0086               	movwf	6
  5310  0B4F  082D               	movf	HandlePacket@inst,w
  5311  0B50  3E35               	addlw	53
  5312  0B51  0084               	movwf	4
  5313  0B52  0800               	movf	0,w
  5314  0B53  0601               	xorwf	1,w
  5315  0B54  1D03               	skipz
  5316  0B55  2B8E               	goto	l552
  5317                           
  5318                           ;client.c: 172: {
  5319                           ;client.c: 173: inst->txPacket.needAck = ACK_RECEIVED;
  5320  0B56  082D               	movf	HandlePacket@inst,w
  5321  0B57  3E48               	addlw	72
  5322  0B58  0086               	movwf	6
  5323  0B59  0801               	movf	1,w
  5324  0B5A  393F               	andlw	-193
  5325  0B5B  3880               	iorlw	128
  5326  0B5C  0081               	movwf	1
  5327  0B5D  2B8E               	goto	l552
  5328  0B5E                     l555:	
  5329                           ;client.c: 178: syncedTime = *((uint32_t*) packet->packet.data);
  5330                           
  5331                           
  5332                           ;client.c: 179: response.sendAck = 1;
  5333  0B5E  152C               	bsf	HandlePacket@response,2
  5334                           
  5335                           ;client.c: 180: break;
  5336  0B5F  2B8E               	goto	l552
  5337  0B60                     l3409:	
  5338                           
  5339                           ;client.c: 190: handleCfgCmd(packet);
  5340  0B60  082A               	movf	HandlePacket@packet,w
  5341  0B61  23D3  3188         	fcall	_handleCfgCmd
  5342  0B63  2B3F               	goto	l3401
  5343  0B64                     l3413:	
  5344                           
  5345                           ;client.c: 196: handleCfgWrite(packet);
  5346  0B64  082A               	movf	HandlePacket@packet,w
  5347  0B65  23FE  3188         	fcall	_handleCfgWrite
  5348  0B67                     l3415:	
  5349                           
  5350                           ;client.c: 198: handleCfgRead(packet);
  5351  0B67  082A               	movf	HandlePacket@packet,w
  5352  0B68  2768  3188         	fcall	_handleCfgRead
  5353  0B6A  2B3F               	goto	l3401
  5354  0B6B                     l3419:	
  5355                           
  5356                           ;client.c: 205: handleFwCmd(packet);
  5357  0B6B  082A               	movf	HandlePacket@packet,w
  5358  0B6C  3182  228F  3188   	fcall	_handleFwCmd
  5359  0B6F  2B3F               	goto	l3401
  5360  0B70                     l3425:	
  5361  0B70  082A               	movf	HandlePacket@packet,w
  5362  0B71  3E04               	addlw	4
  5363  0B72  0086               	movwf	6
  5364  0B73  0187               	clrf	7
  5365  0B74  0801               	movf	1,w
  5366                           
  5367                           ; Switch size 1, requested type "space"
  5368                           ; Number of cases is 8, Range of values is 160 to 192
  5369                           ; switch strategies available:
  5370                           ; Name         Instructions Cycles
  5371                           ; simple_byte           25    13 (average)
  5372                           ; direct_byte           75     9 (fixed)
  5373                           ; jumptable            263     9 (fixed)
  5374                           ;	Chosen strategy is simple_byte
  5375  0B75  3AA0               	xorlw	160	; case 160
  5376  0B76  1903               	skipnz
  5377  0B77  2B39               	goto	l3399
  5378  0B78  3A01               	xorlw	1	; case 161
  5379  0B79  1903               	skipnz
  5380  0B7A  2B42               	goto	l3403
  5381  0B7B  3A03               	xorlw	3	; case 162
  5382  0B7C  1903               	skipnz
  5383  0B7D  2B5E               	goto	l555
  5384  0B7E  3A01               	xorlw	1	; case 163
  5385  0B7F  1903               	skipnz
  5386  0B80  2B8E               	goto	l552
  5387  0B81  3A13               	xorlw	19	; case 176
  5388  0B82  1903               	skipnz
  5389  0B83  2B60               	goto	l3409
  5390  0B84  3A01               	xorlw	1	; case 177
  5391  0B85  1903               	skipnz
  5392  0B86  2B64               	goto	l3413
  5393  0B87  3A03               	xorlw	3	; case 178
  5394  0B88  1903               	skipnz
  5395  0B89  2B67               	goto	l3415
  5396  0B8A  3A72               	xorlw	114	; case 192
  5397  0B8B  1903               	skipnz
  5398  0B8C  2B6B               	goto	l3419
  5399  0B8D  2B8E               	goto	l552
  5400  0B8E                     l552:	
  5401                           
  5402                           ;client.c: 228: response.reset = 1;
  5403  0B8E  142C               	bsf	HandlePacket@response,0
  5404                           
  5405                           ;client.c: 231: if (response.sendMsg)
  5406  0B8F  1DAC               	btfss	HandlePacket@response,3
  5407  0B90  2B9D               	goto	l561
  5408                           
  5409                           ;client.c: 232: response.reset = Mrf49xaTxPacket(inst, packet, 1, response.needAck);
  5410  0B91  082A               	movf	HandlePacket@packet,w
  5411  0B92  00A0               	movwf	Mrf49xaTxPacket@packet
  5412  0B93  3000               	movlw	0
  5413  0B94  01A1               	clrf	Mrf49xaTxPacket@response
  5414  0B95  0AA1               	incf	Mrf49xaTxPacket@response,f
  5415  0B96  18AC               	btfsc	HandlePacket@response,1
  5416  0B97  3001               	movlw	1
  5417  0B98  00A2               	movwf	Mrf49xaTxPacket@needAck
  5418  0B99  082D               	movf	HandlePacket@inst,w
  5419  0B9A  26F6  3188         	fcall	_Mrf49xaTxPacket
  5420  0B9C  2BA4               	goto	L3
  5421  0B9D                     l561:	
  5422                           
  5423                           ;client.c: 233: else if (response.sendAck)
  5424  0B9D  1D2C               	btfss	HandlePacket@response,2
  5425  0B9E  2BAA               	goto	l563
  5426                           
  5427                           ;client.c: 234: response.reset = Mrf49xaTxAck(inst, packet);
  5428  0B9F  082A               	movf	HandlePacket@packet,w
  5429  0BA0  00A8               	movwf	Mrf49xaTxAck@packet
  5430  0BA1  082D               	movf	HandlePacket@inst,w
  5431  0BA2  23B0  3188         	fcall	_Mrf49xaTxAck
  5432  0BA4                     L3:	
  5433  0BA4  00AB               	movwf	??_HandlePacket
  5434  0BA5  062C               	xorwf	HandlePacket@response,w
  5435  0BA6  39FE               	andlw	-2
  5436  0BA7  062B               	xorwf	??_HandlePacket,w
  5437  0BA8  00AC               	movwf	HandlePacket@response
  5438  0BA9  2BAB               	goto	l562
  5439  0BAA                     l563:	
  5440                           
  5441                           ;client.c: 235: else
  5442                           ;client.c: 236: response.reset = 0;
  5443  0BAA  102C               	bcf	HandlePacket@response,0
  5444  0BAB                     l562:	
  5445                           
  5446                           ;client.c: 238: if (!response.reset)
  5447  0BAB  182C               	btfsc	HandlePacket@response,0
  5448  0BAC  0008               	return
  5449                           
  5450                           ;client.c: 239: Mrf49xaFreePacket(inst, packet);
  5451  0BAD  082A               	movf	HandlePacket@packet,w
  5452  0BAE  00A0               	movwf	Mrf49xaFreePacket@packet
  5453  0BAF  2B2A               	ljmp	l3269
  5454  0BB0                     __end_of_HandlePacket:	
  5455  0BB0                     __ptext55:	
  5456 ;; *************** function _Mrf49xaTxAck *****************
  5457 ;; Defined at:
  5458 ;;		line 75 in file "../../../src/devices/mrf49xa_mac.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  5461 ;;		 -> rfTrcvStatus(76), 
  5462 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5463 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  inst            1    9[BANK0 ] PTR struct rfTrcvStatus_
  5466 ;;		 -> rfTrcvStatus(76), 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      unsigned char 
  5469 ;; Registers used:
  5470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 1F/0
  5473 ;;		On exit  : 1F/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5476 ;;      Params:         0       1       0       0
  5477 ;;      Locals:         0       1       0       0
  5478 ;;      Temps:          0       0       0       0
  5479 ;;      Totals:         0       2       0       0
  5480 ;;Total ram usage:        2 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    6
  5483 ;; This function calls:
  5484 ;;		_Mrf49xaTxPacket
  5485 ;; This function is called by:
  5486 ;;		_HandlePacket
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _Mrf49xaTxAck
  5492  0BB0                     _Mrf49xaTxAck:	
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5496                           ;Mrf49xaTxAck@inst stored from wreg
  5497  0BB0  00A9               	movwf	Mrf49xaTxAck@inst
  5498                           
  5499                           ;mrf49xa_mac.c: 77: packet->packet.data[0] = packet->packet.id;
  5500  0BB1  0828               	movf	Mrf49xaTxAck@packet,w
  5501  0BB2  3E06               	addlw	6
  5502  0BB3  0086               	movwf	6
  5503  0BB4  0187               	clrf	7
  5504  0BB5  0828               	movf	Mrf49xaTxAck@packet,w
  5505  0BB6  3E04               	addlw	4
  5506  0BB7  0084               	movwf	4
  5507  0BB8  0185               	clrf	5
  5508  0BB9  0800               	movf	0,w
  5509  0BBA  0081               	movwf	1
  5510                           
  5511                           ;mrf49xa_mac.c: 78: packet->packet.data[1] = packet->crc;
  5512  0BBB  0828               	movf	Mrf49xaTxAck@packet,w
  5513  0BBC  3E07               	addlw	7
  5514  0BBD  0086               	movwf	6
  5515  0BBE  0828               	movf	Mrf49xaTxAck@packet,w
  5516  0BBF  3E16               	addlw	22
  5517  0BC0  0084               	movwf	4
  5518  0BC1  0800               	movf	0,w
  5519  0BC2  0081               	movwf	1
  5520                           
  5521                           ;mrf49xa_mac.c: 81: packet->packet.id = RF_ACK;
  5522  0BC3  0828               	movf	Mrf49xaTxAck@packet,w
  5523  0BC4  3E04               	addlw	4
  5524  0BC5  0086               	movwf	6
  5525  0BC6  30A1               	movlw	161
  5526  0BC7  0081               	movwf	1
  5527                           
  5528                           ;mrf49xa_mac.c: 82: packet->packet.size = 2;
  5529  0BC8  0A28               	incf	Mrf49xaTxAck@packet,w
  5530  0BC9  0086               	movwf	6
  5531  0BCA  3002               	movlw	2
  5532  0BCB  0081               	movwf	1
  5533                           
  5534                           ;mrf49xa_mac.c: 84: return Mrf49xaTxPacket(inst, packet, ((uint8_t)1), ((uint8_t)0));
  5535  0BCC  0828               	movf	Mrf49xaTxAck@packet,w
  5536  0BCD  00A0               	movwf	Mrf49xaTxPacket@packet
  5537  0BCE  01A1               	clrf	Mrf49xaTxPacket@response
  5538  0BCF  0AA1               	incf	Mrf49xaTxPacket@response,f
  5539  0BD0  01A2               	clrf	Mrf49xaTxPacket@needAck
  5540  0BD1  0829               	movf	Mrf49xaTxAck@inst,w
  5541  0BD2  2EF6               	ljmp	_Mrf49xaTxPacket
  5542  0BD3                     __end_of_Mrf49xaTxAck:	
  5543  0BD3                     __ptext49:	
  5544 ;; *************** function _handleCfgCmd *****************
  5545 ;; Defined at:
  5546 ;;		line 124 in file "../../../src/rfstack/client.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5549 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5552 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;		None               void
  5555 ;; Registers used:
  5556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5557 ;; Tracked objects:
  5558 ;;		On entry : 1F/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5562 ;;      Params:         0       0       0       0
  5563 ;;      Locals:         0       1       0       0
  5564 ;;      Temps:          0       0       0       0
  5565 ;;      Totals:         0       1       0       0
  5566 ;;Total ram usage:        1 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    9
  5569 ;; This function calls:
  5570 ;;		_CfgLoad
  5571 ;;		_CfgSave
  5572 ;; This function is called by:
  5573 ;;		_HandlePacket
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _handleCfgCmd
  5579  0BD3                     _handleCfgCmd:	
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5583                           ;handleCfgCmd@packet stored from wreg
  5584  0BD3  00A8               	movwf	handleCfgCmd@packet
  5585                           
  5586                           ;client.c: 126: switch (packet->packet.data[0])
  5587  0BD4  2BEB               	goto	l3509
  5588  0BD5                     l3499:	
  5589                           
  5590                           ;client.c: 129: CfgSave();
  5591  0BD5  3183  2B1C         	ljmp	l3511
  5592  0BD7                     l3501:	
  5593                           ;client.c: 130: break;
  5594                           
  5595                           
  5596                           ;client.c: 133: CfgLoad();
  5597  0BD7  2B2F               	ljmp	l3513
  5598  0BD8                     l3503:	
  5599                           ;client.c: 134: break;
  5600                           
  5601                           
  5602                           ;client.c: 137: packet->packet.size = 2;
  5603  0BD8  0A28               	incf	handleCfgCmd@packet,w
  5604  0BD9  0086               	movwf	6
  5605  0BDA  3002               	movlw	2
  5606  0BDB  27EB               	fcall	PL18	;call to abstracted procedure
  5607  0BDC  3002               	movlw	2
  5608  0BDD  0081               	movwf	1
  5609                           
  5610                           ;client.c: 139: break;
  5611  0BDE  0008               	return
  5612  0BDF                     l3505:	
  5613                           
  5614                           ;client.c: 142: packet->packet.size = 3;
  5615  0BDF  0A28               	incf	handleCfgCmd@packet,w
  5616  0BE0  0086               	movwf	6
  5617  0BE1  3003               	movlw	3
  5618                           
  5619                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  5620  0BE2  27EB               	fcall	PL18	;call to abstracted procedure
  5621  0BE3  083F               	movf	_cfgRam+8,w
  5622  0BE4  0081               	movwf	1
  5623                           
  5624                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  5625  0BE5  0828               	movf	handleCfgCmd@packet,w
  5626  0BE6  3E08               	addlw	8
  5627  0BE7  0086               	movwf	6
  5628  0BE8  083E               	movf	_cfgRam+7,w
  5629  0BE9  0081               	movwf	1
  5630                           
  5631                           ;client.c: 145: break;
  5632  0BEA  0008               	return
  5633  0BEB                     l3509:	
  5634  0BEB  0828               	movf	handleCfgCmd@packet,w
  5635  0BEC  3E06               	addlw	6
  5636  0BED  0086               	movwf	6
  5637  0BEE  0187               	clrf	7
  5638  0BEF  0801               	movf	1,w
  5639                           
  5640                           ; Switch size 1, requested type "space"
  5641                           ; Number of cases is 4, Range of values is 1 to 4
  5642                           ; switch strategies available:
  5643                           ; Name         Instructions Cycles
  5644                           ; simple_byte           13     7 (average)
  5645                           ; direct_byte           17     9 (fixed)
  5646                           ; jumptable            263     9 (fixed)
  5647                           ;	Chosen strategy is simple_byte
  5648  0BF0  3A01               	xorlw	1	; case 1
  5649  0BF1  1903               	skipnz
  5650  0BF2  2BD5               	goto	l3499
  5651  0BF3  3A03               	xorlw	3	; case 2
  5652  0BF4  1903               	skipnz
  5653  0BF5  2BD7               	goto	l3501
  5654  0BF6  3A01               	xorlw	1	; case 3
  5655  0BF7  1903               	skipnz
  5656  0BF8  2BD8               	goto	l3503
  5657  0BF9  3A07               	xorlw	7	; case 4
  5658  0BFA  1903               	skipnz
  5659  0BFB  2BDF               	goto	l3505
  5660  0BFC  2BFD               	goto	l547
  5661  0BFD                     l547:	
  5662  0BFD  0008               	return
  5663  0BFE                     __end_of_handleCfgCmd:	
  5664  0BFE                     __ptext45:	
  5665 ;; *************** function _handleCfgWrite *****************
  5666 ;; Defined at:
  5667 ;;		line 115 in file "../../../src/rfstack/client.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5670 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  5673 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  5674 ;;  index           1    7[BANK0 ] unsigned char 
  5675 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;		None               void
  5678 ;; Registers used:
  5679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 1F/0
  5682 ;;		On exit  : 1F/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5685 ;;      Params:         0       0       0       0
  5686 ;;      Locals:         0       3       0       0
  5687 ;;      Temps:          0       0       0       0
  5688 ;;      Totals:         0       3       0       0
  5689 ;;Total ram usage:        3 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    6
  5692 ;; This function calls:
  5693 ;;		_CfgGetSizeByType
  5694 ;;		_memcpy
  5695 ;; This function is called by:
  5696 ;;		_HandlePacket
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _handleCfgWrite
  5702  0BFE                     _handleCfgWrite:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5706                           ;handleCfgWrite@packet stored from wreg
  5707  0BFE  00A8               	movwf	handleCfgWrite@packet
  5708                           
  5709                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  5710  0BFF  0086               	movwf	6
  5711  0C00  0187               	clrf	7
  5712  0C01  3F46               	moviw [6]fsr1
  5713  0C02  00A7               	movwf	handleCfgWrite@index
  5714                           
  5715                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  5716  0C03  0727               	addwf	handleCfgWrite@index,w
  5717  0C04  0727               	addwf	handleCfgWrite@index,w
  5718  0C05  3E59               	addlw	low (_parameters| (0+32768))
  5719  0C06  3182               	movlp	high __stringtab
  5720  0C07  000A               	callw
  5721  0C08  3188               	pagesel	$	;select current page
  5722  0C09  279A               	fcall	_CfgGetSizeByType
  5723  0C0A  00A6               	movwf	handleCfgWrite@nrOfBytes
  5724                           
  5725                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  5726  0C0B  0828               	movf	handleCfgWrite@packet,w
  5727  0C0C  3E07               	addlw	7
  5728  0C0D  00A0               	movwf	memcpy@s1
  5729  0C0E  0826               	movf	handleCfgWrite@nrOfBytes,w
  5730  0C0F  00A1               	movwf	memcpy@n
  5731  0C10  01A2               	clrf	memcpy@n+1
  5732  0C11  0827               	movf	handleCfgWrite@index,w
  5733  0C12  0727               	addwf	handleCfgWrite@index,w
  5734  0C13  0727               	addwf	handleCfgWrite@index,w
  5735  0C14  3E5B               	addlw	low ((_parameters| (0+32768)+2))
  5736  0C15  3182               	movlp	high __stringtab
  5737  0C16  000A               	callw
  5738  0C17  3188               	pagesel	$	;select current page
  5739  0C18  3182  2AD2         	ljmp	_memcpy
  5740  0C1A                     __end_of_handleCfgWrite:	
  5741  0C1A                     __ptext22:	
  5742 ;; *************** function _PwrI2cWake *****************
  5743 ;; Defined at:
  5744 ;;		line 82 in file "../../../src/node/power.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		None
  5753 ;; Tracked objects:
  5754 ;;		On entry : 1F/2
  5755 ;;		On exit  : 1F/2
  5756 ;;		Unchanged: 1F/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5758 ;;      Params:         0       0       0       0
  5759 ;;      Locals:         0       0       0       0
  5760 ;;      Temps:          0       0       0       0
  5761 ;;      Totals:         0       0       0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    5
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _PwrI2cWake
  5774  0C1A                     _PwrI2cWake:	
  5775                           
  5776                           ;incstack = 0
  5777                           ; Regs used in _PwrI2cWake: []
  5778  0C1A  0008               	return
  5779  0C1B                     __end_of_PwrI2cWake:	
  5780  0C1B                     __ptext15:	
  5781 ;; *************** function _PwrSensorInit *****************
  5782 ;; Defined at:
  5783 ;;		line 150 in file "../../../src/node/power.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;		None               void
  5790 ;; Registers used:
  5791 ;;		None
  5792 ;; Tracked objects:
  5793 ;;		On entry : 17F/1
  5794 ;;		On exit  : 17F/2
  5795 ;;		Unchanged: 160/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5797 ;;      Params:         0       0       0       0
  5798 ;;      Locals:         0       0       0       0
  5799 ;;      Temps:          0       0       0       0
  5800 ;;      Totals:         0       0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    5
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_main
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _PwrSensorInit
  5813  0C1B                     _PwrSensorInit:	
  5814                           
  5815                           ;power.c: 152: TRISCbits.TRISC2 = 0;
  5816                           
  5817                           ;incstack = 0
  5818                           ; Regs used in _PwrSensorInit: []
  5819  0C1B  110E               	bcf	14,2	;volatile
  5820                           
  5821                           ;power.c: 154: LATCbits.LATC2 = 0;
  5822  0C1C  0022               	movlb	2	; select bank2
  5823  0C1D  110E               	bcf	14,2	;volatile
  5824  0C1E  0008               	return
  5825  0C1F                     __end_of_PwrSensorInit:	
  5826  0C1F                     __ptext13:	
  5827 ;; *************** function _PwrSensorWake *****************
  5828 ;; Defined at:
  5829 ;;		line 162 in file "../../../src/node/power.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;		None               void
  5836 ;; Registers used:
  5837 ;;		None
  5838 ;; Tracked objects:
  5839 ;;		On entry : 1F/0
  5840 ;;		On exit  : 1F/2
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5843 ;;      Params:         0       0       0       0
  5844 ;;      Locals:         0       0       0       0
  5845 ;;      Temps:          0       0       0       0
  5846 ;;      Totals:         0       0       0       0
  5847 ;;Total ram usage:        0 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    5
  5850 ;; This function calls:
  5851 ;;		Nothing
  5852 ;; This function is called by:
  5853 ;;		_main
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _PwrSensorWake
  5859  0C1F                     _PwrSensorWake:	
  5860                           
  5861                           ;power.c: 164: LATCbits.LATC2 = 1;
  5862                           
  5863                           ;incstack = 0
  5864                           ; Regs used in _PwrSensorWake: []
  5865  0C1F  0022               	movlb	2	; select bank2
  5866  0C20  150E               	bsf	14,2	;volatile
  5867  0C21  0008               	return
  5868  0C22                     __end_of_PwrSensorWake:	
  5869  0C22                     __ptext30:	
  5870 ;; *************** function _Mrf49xaModeTx *****************
  5871 ;; Defined at:
  5872 ;;		line 112 in file "../../../src/devices/mrf49xa.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  k               1    3[BANK0 ] unsigned char 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;		None               void
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0, pclath, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 1F/0
  5883 ;;		On exit  : 1F/1
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5886 ;;      Params:         0       0       0       0
  5887 ;;      Locals:         0       1       0       0
  5888 ;;      Temps:          0       0       0       0
  5889 ;;      Totals:         0       1       0       0
  5890 ;;Total ram usage:        1 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    7
  5893 ;; This function calls:
  5894 ;;		_Mrf49TxCmd
  5895 ;; This function is called by:
  5896 ;;		_Mrf49xaTick
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           
  5901                           ;psect for function _Mrf49xaModeTx
  5902  0C22                     _Mrf49xaModeTx:	
  5903  0C22  301E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5904                           
  5905                           ;mrf49xa.c: 114: UI08_t k;
  5906                           ;mrf49xa.c: 115: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  5907                           
  5908                           ;incstack = 0
  5909                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  5910  0C23  01A3               	clrf	Mrf49xaModeTx@k
  5911  0C24  3182               	movlp	high __stringtab
  5912  0C25  000A               	callw
  5913  0C26  3188               	pagesel	$	;select current page
  5914  0C27  3800               	iorlw	0
  5915  0C28  1903               	btfsc	3,2
  5916  0C29  2C3E               	goto	l2997
  5917  0C2A                     l2991:	
  5918  0C2A  3523               	lslf	Mrf49xaModeTx@k,w
  5919  0C2B  3E4C               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  5920  0C2C  3182               	movlp	high __stringtab
  5921  0C2D  000A               	callw
  5922  0C2E  3188               	pagesel	$	;select current page
  5923  0C2F  00A1               	movwf	Mrf49TxCmd@val
  5924  0C30  3523               	lslf	Mrf49xaModeTx@k,w
  5925  0C31  3E4B               	addlw	low (_mrfRegset_Tx| (0+32768))
  5926  0C32  3182               	movlp	high __stringtab
  5927  0C33  000A               	callw
  5928  0C34  3188               	pagesel	$	;select current page
  5929  0C35  255A               	fcall	_Mrf49TxCmd
  5930  0C36  301E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5931  0C37  0AA3               	incf	Mrf49xaModeTx@k,f
  5932  0C38  3182               	movlp	high __stringtab
  5933  0C39  000A               	callw
  5934  0C3A  3188               	pagesel	$	;select current page
  5935  0C3B  0223               	subwf	Mrf49xaModeTx@k,w
  5936  0C3C  1C03               	skipc
  5937  0C3D  2C2A               	goto	l2991
  5938  0C3E                     l2997:	
  5939                           
  5940                           ;mrf49xa.c: 118: rfTrcvStatus.state = TX_PACKET;
  5941  0C3E  3003               	movlw	3
  5942  0C3F  0021               	movlb	1	; select bank1
  5943  0C40  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  5944                           
  5945                           ;mrf49xa.c: 119: rfTrcvStatus.hwByte = 99;
  5946  0C41  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5947  0C42  3980               	andlw	-128
  5948  0C43  3863               	iorlw	99
  5949  0C44  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  5950  0C45  0008               	return
  5951  0C46                     __end_of_Mrf49xaModeTx:	
  5952  0C46                     __ptext33:	
  5953 ;; *************** function _Mrf49xaServe *****************
  5954 ;; Defined at:
  5955 ;;		line 9 in file "../../../src/devices/mrf49xa_phy.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;		None
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  data            1    5[BANK0 ] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      unsigned char 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 1F/0
  5966 ;;		On exit  : 1E/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5969 ;;      Params:         0       0       0       0
  5970 ;;      Locals:         0       1       0       0
  5971 ;;      Temps:          0       1       0       0
  5972 ;;      Totals:         0       2       0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    8
  5976 ;; This function calls:
  5977 ;;		_Mrf49RxByte
  5978 ;;		_Mrf49RxSts
  5979 ;;		_Mrf49TxByte
  5980 ;;		_Mrf49xaModeRx
  5981 ;;		_Mrf49xaNeedsReset
  5982 ;; This function is called by:
  5983 ;;		_Mrf49xaInit
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _Mrf49xaServe
  5989  0C46                     _Mrf49xaServe:	
  5990                           
  5991                           ;mrf49xa_phy.c: 12: uint8_t data;
  5992                           ;mrf49xa_phy.c: 14: if (rfTrcvStatus.state == POWERED_OFF)
  5993                           
  5994                           ;incstack = 0
  5995                           ; Regs used in _Mrf49xaServe: [allreg]
  5996  0C46  0021               	movlb	1	; select bank1
  5997  0C47  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  5998  0C48  1903               	btfsc	3,2
  5999                           
  6000                           ;mrf49xa_phy.c: 15: return 0;
  6001  0C49  3400               	retlw	0
  6002                           
  6003                           ;mrf49xa_phy.c: 18: if (rfTrcvStatus.needsReset)
  6004  0C4A  1BEB               	btfsc	(_rfTrcvStatus^(0+128)+75),7
  6005  0C4B  3400               	retlw	0
  6006                           
  6007                           ;mrf49xa_phy.c: 21: Mrf49RxSts();
  6008  0C4C  25BE  3188         	fcall	_Mrf49RxSts
  6009                           
  6010                           ;mrf49xa_phy.c: 23: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6011  0C4E  0840               	movf	_mrf49Status,w
  6012  0C4F  3AFF               	xorlw	255
  6013  0C50  1D03               	skipz
  6014  0C51  2C56               	goto	l468
  6015  0C52  0841               	movf	_mrf49Status+1,w
  6016  0C53  3AFF               	xorlw	255
  6017  0C54  1903               	btfsc	3,2
  6018  0C55  3400               	retlw	0
  6019  0C56                     l468:	
  6020                           ;mrf49xa_phy.c: 28: {
  6021                           
  6022                           
  6023                           ;mrf49xa_phy.c: 30: }
  6024                           ;mrf49xa_phy.c: 33: if (mrf49Status.flags.msb.overflow == 1)
  6025  0C56  1AC0               	btfsc	_mrf49Status,5
  6026  0C57  2C65               	goto	l2843
  6027  0C58  2C74               	goto	l469
  6028  0C59                     l2835:	
  6029                           
  6030                           ;mrf49xa_phy.c: 38: case RECV_DATA:
  6031                           ;mrf49xa_phy.c: 41: data = Mrf49RxByte();
  6032  0C59  2533  3188         	fcall	_Mrf49RxByte
  6033  0C5B  00A5               	movwf	Mrf49xaServe@data
  6034                           
  6035                           ;mrf49xa_phy.c: 42: data = Mrf49RxByte();
  6036  0C5C  2533  3188         	fcall	_Mrf49RxByte
  6037  0C5E  00A5               	movwf	Mrf49xaServe@data
  6038                           
  6039                           ;mrf49xa_phy.c: 45: Mrf49xaModeRx();
  6040  0C5F  2535  3188         	fcall	_Mrf49xaModeRx
  6041                           
  6042                           ;mrf49xa_phy.c: 49: break;
  6043  0C61  2C74               	goto	l469
  6044  0C62                     l2839:	
  6045                           
  6046                           ;mrf49xa_phy.c: 52: Mrf49xaNeedsReset();
  6047  0C62  231E  3188         	fcall	_Mrf49xaNeedsReset
  6048                           
  6049                           ;mrf49xa_phy.c: 53: break;
  6050  0C64  2C74               	goto	l469
  6051  0C65                     l2843:	
  6052  0C65  0021               	movlb	1	; select bank1
  6053  0C66  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  6054                           
  6055                           ; Switch size 1, requested type "space"
  6056                           ; Number of cases is 4, Range of values is 0 to 3
  6057                           ; switch strategies available:
  6058                           ; Name         Instructions Cycles
  6059                           ; simple_byte           13     7 (average)
  6060                           ; direct_byte           14     6 (fixed)
  6061                           ; jumptable            260     6 (fixed)
  6062                           ;	Chosen strategy is simple_byte
  6063  0C67  3A00               	xorlw	0	; case 0
  6064  0C68  1903               	skipnz
  6065  0C69  2C62               	goto	l2839
  6066  0C6A  3A01               	xorlw	1	; case 1
  6067  0C6B  1903               	skipnz
  6068  0C6C  2C59               	goto	l2835
  6069  0C6D  3A03               	xorlw	3	; case 2
  6070  0C6E  1903               	skipnz
  6071  0C6F  2C59               	goto	l2835
  6072  0C70  3A01               	xorlw	1	; case 3
  6073  0C71  1903               	skipnz
  6074  0C72  2C74               	goto	l469
  6075  0C73  2C74               	goto	l469
  6076  0C74                     l469:	
  6077                           
  6078                           ;mrf49xa_phy.c: 62: }
  6079                           ;mrf49xa_phy.c: 71: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6080  0C74  0020               	movlb	0	; select bank0
  6081  0C75  1BC0               	btfsc	_mrf49Status,7
  6082  0C76  2D1A               	goto	l2925
  6083  0C77  2D29               	goto	l2927
  6084  0C78                     l2847:	
  6085                           
  6086                           ;mrf49xa_phy.c: 78: Mrf49xaNeedsReset();
  6087  0C78  231E  3188         	fcall	_Mrf49xaNeedsReset
  6088                           
  6089                           ;mrf49xa_phy.c: 79: break;
  6090  0C7A  2D29               	goto	l2927
  6091  0C7B                     l2849:	
  6092                           
  6093                           ;mrf49xa_phy.c: 83: data = Mrf49RxByte();
  6094  0C7B  2533  3188         	fcall	_Mrf49RxByte
  6095  0C7D  00A5               	movwf	Mrf49xaServe@data
  6096                           
  6097                           ;mrf49xa_phy.c: 87: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6098  0C7E  1BC1               	btfsc	_mrf49Status+1,7
  6099  0C7F  2C83               	goto	l2855
  6100  0C80                     l2853:	
  6101                           
  6102                           ;mrf49xa_phy.c: 88: {
  6103                           ;mrf49xa_phy.c: 89: Mrf49xaModeRx();
  6104  0C80  2535  3188         	fcall	_Mrf49xaModeRx
  6105                           
  6106                           ;mrf49xa_phy.c: 90: break;
  6107  0C82  2D29               	goto	l2927
  6108  0C83                     l2855:	
  6109                           
  6110                           ;mrf49xa_phy.c: 91: }
  6111                           ;mrf49xa_phy.c: 93: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = 
      +                          &(rfTrcvStatus.rxPacket[0]);
  6112  0C83  0021               	movlb	1	; select bank1
  6113  0C84  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6114  0C85  1D03               	skipz
  6115  0C86  2C89               	goto	l2859
  6116  0C87  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  6117  0C88  2C8D               	goto	L1
  6118  0C89                     l2859:	
  6119                           
  6120                           ;mrf49xa_phy.c: 94: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hw
      +                          Rx = &(rfTrcvStatus.rxPacket[1]);
  6121  0C89  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  6122  0C8A  1D03               	skipz
  6123  0C8B  2C80               	goto	l2853
  6124  0C8C  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  6125  0C8D                     L1:	
  6126  0C8D  00A0               	movwf	_rfTrcvStatus^(0+128)
  6127                           
  6128                           ;mrf49xa_phy.c: 101: }
  6129                           ;mrf49xa_phy.c: 103: rfTrcvStatus.hwRx->packet.size = data;
  6130  0C8E  0A20               	incf	_rfTrcvStatus^(0+128),w
  6131  0C8F  0086               	movwf	6
  6132  0C90  0187               	clrf	7
  6133                           
  6134                           ;mrf49xa_phy.c: 104: rfTrcvStatus.hwRx->crc = 0;
  6135  0C91  27E5  3188         	fcall	PL16	;call to abstracted procedure
  6136  0C93  3E16               	addlw	22
  6137  0C94  0086               	movwf	6
  6138  0C95  0181               	clrf	1
  6139                           
  6140                           ;mrf49xa_phy.c: 105: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  6141  0C96  0820               	movf	_rfTrcvStatus^(0+128),w
  6142  0C97  0086               	movwf	6
  6143  0C98  3004               	movlw	4
  6144  0C99  0081               	movwf	1
  6145                           
  6146                           ;mrf49xa_phy.c: 107: rfTrcvStatus.state = RECV_DATA;
  6147  0C9A  3002               	movlw	2
  6148  0C9B  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  6149                           
  6150                           ;mrf49xa_phy.c: 108: rfTrcvStatus.hwByte = 1;
  6151  0C9C  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6152  0C9D  3980               	andlw	-128
  6153  0C9E  3801               	iorlw	1
  6154  0C9F  2CCA               	goto	L2
  6155  0CA0                     l2875:	
  6156                           ;mrf49xa_phy.c: 110: break;
  6157                           
  6158                           
  6159                           ;mrf49xa_phy.c: 114: data = Mrf49RxByte();
  6160  0CA0  2533  3188         	fcall	_Mrf49RxByte
  6161  0CA2  00A5               	movwf	Mrf49xaServe@data
  6162                           
  6163                           ;mrf49xa_phy.c: 118: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6164  0CA3  1BC1               	btfsc	_mrf49Status+1,7
  6165  0CA4  2CAB               	goto	l2883
  6166                           
  6167                           ;mrf49xa_phy.c: 119: {
  6168                           ;mrf49xa_phy.c: 120: rfTrcvStatus.hwRx->state = PKT_FREE;
  6169  0CA5  0021               	movlb	1	; select bank1
  6170  0CA6  0820               	movf	_rfTrcvStatus^(0+128),w
  6171  0CA7  0086               	movwf	6
  6172  0CA8  0187               	clrf	7
  6173  0CA9  0181               	clrf	1
  6174  0CAA  2C80               	goto	l2853
  6175  0CAB                     l2883:	
  6176                           
  6177                           ;mrf49xa_phy.c: 123: }
  6178                           ;mrf49xa_phy.c: 125: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  6179  0CAB  0021               	movlb	1	; select bank1
  6180  0CAC  0A20               	incf	_rfTrcvStatus^(0+128),w
  6181  0CAD  0086               	movwf	6
  6182  0CAE  0187               	clrf	7
  6183  0CAF  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6184  0CB0  397F               	andlw	127
  6185  0CB1  0601               	xorwf	1,w
  6186  0CB2  1D03               	skipz
  6187  0CB3  2CBD               	goto	l2889
  6188                           
  6189                           ;mrf49xa_phy.c: 126: {
  6190                           ;mrf49xa_phy.c: 127: rfTrcvStatus.hwRx->crc = data;
  6191  0CB4  0820               	movf	_rfTrcvStatus^(0+128),w
  6192  0CB5  3E16               	addlw	22
  6193  0CB6  0086               	movwf	6
  6194                           
  6195                           ;mrf49xa_phy.c: 131: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6196  0CB7  27E5  3188         	fcall	PL16	;call to abstracted procedure
  6197  0CB9  0086               	movwf	6
  6198  0CBA  3005               	movlw	5
  6199  0CBB  0081               	movwf	1
  6200  0CBC  2C80               	goto	l2853
  6201  0CBD                     l2889:	
  6202                           
  6203                           ;mrf49xa_phy.c: 140: else
  6204                           ;mrf49xa_phy.c: 141: {
  6205                           ;mrf49xa_phy.c: 142: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  6206  0CBD  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6207  0CBE  397F               	andlw	127
  6208  0CBF  0720               	addwf	_rfTrcvStatus^(0+128),w
  6209  0CC0  0020               	movlb	0	; select bank0
  6210  0CC1  00A4               	movwf	??_Mrf49xaServe
  6211  0CC2  0A24               	incf	??_Mrf49xaServe,w
  6212  0CC3  0086               	movwf	6
  6213  0CC4  0187               	clrf	7
  6214  0CC5  0825               	movf	Mrf49xaServe@data,w
  6215  0CC6  0081               	movwf	1
  6216  0CC7  0021               	movlb	1	; select bank1
  6217  0CC8  27CC  3188         	fcall	PL10	;call to abstracted procedure
  6218  0CCA                     L2:	
  6219  0CCA  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  6220  0CCB  2D29               	goto	l2927
  6221  0CCC                     l2893:	
  6222                           
  6223                           ;mrf49xa_phy.c: 148: rfTrcvStatus.hwByte++;
  6224  0CCC  27CC  3188         	fcall	PL10	;call to abstracted procedure
  6225  0CCE  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  6226                           
  6227                           ;mrf49xa_phy.c: 150: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  6228  0CCF  397F               	andlw	127
  6229  0CD0  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  6230  0CD1  1D03               	skipz
  6231  0CD2  2D08               	goto	l2921
  6232                           
  6233                           ;mrf49xa_phy.c: 151: rfTrcvStatus.hwByte = 49;
  6234  0CD3  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6235  0CD4  3980               	andlw	-128
  6236  0CD5  3831               	iorlw	49
  6237  0CD6  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  6238  0CD7  2D08               	goto	l2921
  6239  0CD8                     l2897:	
  6240                           
  6241                           ;mrf49xa_phy.c: 156: Mrf49TxByte(0x2D);
  6242  0CD8  302D               	movlw	45
  6243  0CD9  252E  3188         	fcall	_Mrf49TxByte
  6244                           
  6245                           ;mrf49xa_phy.c: 157: break;
  6246  0CDB  2D29               	goto	l2927
  6247  0CDC                     l2899:	
  6248                           
  6249                           ;mrf49xa_phy.c: 160: Mrf49TxByte(0xD4);
  6250  0CDC  30D4               	movlw	212
  6251  0CDD  252E  3188         	fcall	_Mrf49TxByte
  6252                           
  6253                           ;mrf49xa_phy.c: 161: rfTrcvStatus.hwByte = 0x7F;
  6254  0CDF  307F               	movlw	127
  6255  0CE0  0021               	movlb	1	; select bank1
  6256  0CE1  04EB               	iorwf	(_rfTrcvStatus^(0+128)+75),f
  6257                           
  6258                           ;mrf49xa_phy.c: 162: break;
  6259  0CE2  2D29               	goto	l2927
  6260  0CE3                     l2903:	
  6261                           
  6262                           ;mrf49xa_phy.c: 166: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  6263  0CE3  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6264  0CE4  397F               	andlw	127
  6265  0CE5  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6266  0CE6  0086               	movwf	6
  6267  0CE7  0187               	clrf	7
  6268  0CE8  0801               	movf	1,w
  6269  0CE9  252E  3188         	fcall	_Mrf49TxByte
  6270                           
  6271                           ;mrf49xa_phy.c: 167: break;
  6272  0CEB  2D29               	goto	l2927
  6273  0CEC                     l2905:	
  6274                           
  6275                           ;mrf49xa_phy.c: 170: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  6276  0CEC  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  6277  0CED  252E  3188         	fcall	_Mrf49TxByte
  6278                           
  6279                           ;mrf49xa_phy.c: 171: break;
  6280  0CEF  2D29               	goto	l2927
  6281  0CF0                     l2907:	
  6282                           
  6283                           ;mrf49xa_phy.c: 174: Mrf49TxByte(0x00);
  6284  0CF0  3000               	movlw	0
  6285  0CF1  252E  3188         	fcall	_Mrf49TxByte
  6286                           
  6287                           ;mrf49xa_phy.c: 175: break;
  6288  0CF3  2D29               	goto	l2927
  6289  0CF4                     l2909:	
  6290                           
  6291                           ;mrf49xa_phy.c: 178: Mrf49TxByte(0x00);
  6292  0CF4  3000               	movlw	0
  6293  0CF5  252E  3188         	fcall	_Mrf49TxByte
  6294                           
  6295                           ;mrf49xa_phy.c: 179: Mrf49xaModeRx();
  6296  0CF7  2535  3188         	fcall	_Mrf49xaModeRx
  6297                           
  6298                           ;mrf49xa_phy.c: 181: rfTrcvStatus.txPacket.retry = 0;
  6299  0CF9  30F0               	movlw	-16
  6300  0CFA  0021               	movlb	1	; select bank1
  6301  0CFB  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  6302                           
  6303                           ;mrf49xa_phy.c: 183: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  6304  0CFC  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  6305  0CFD  0C89               	rrf	9,f
  6306  0CFE  0C89               	rrf	9,f
  6307  0CFF  3903               	andlw	3
  6308  0D00  3A01               	xorlw	1
  6309  0D01  1D03               	skipz
  6310  0D02  2D06               	goto	l2917
  6311                           
  6312                           ;mrf49xa_phy.c: 184: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  6313  0D03  3003               	movlw	3
  6314  0D04  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  6315  0D05  2D29               	goto	l2927
  6316  0D06                     l2917:	
  6317                           
  6318                           ;mrf49xa_phy.c: 185: else
  6319                           ;mrf49xa_phy.c: 186: rfTrcvStatus.txPacket.state = PKT_FREE;
  6320  0D06  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  6321  0D07  2D29               	goto	l2927
  6322  0D08                     l2921:	
  6323  0D08  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6324  0D09  397F               	andlw	127
  6325                           
  6326                           ; Switch size 1, requested type "space"
  6327                           ; Number of cases is 5, Range of values is 49 to 101
  6328                           ; switch strategies available:
  6329                           ; Name         Instructions Cycles
  6330                           ; simple_byte           16     9 (average)
  6331                           ; direct_byte          115     9 (fixed)
  6332                           ; jumptable            263     9 (fixed)
  6333                           ;	Chosen strategy is simple_byte
  6334  0D0A  3A31               	xorlw	49	; case 49
  6335  0D0B  1903               	skipnz
  6336  0D0C  2CEC               	goto	l2905
  6337  0D0D  3A03               	xorlw	3	; case 50
  6338  0D0E  1903               	skipnz
  6339  0D0F  2CF0               	goto	l2907
  6340  0D10  3A01               	xorlw	1	; case 51
  6341  0D11  1903               	skipnz
  6342  0D12  2CF4               	goto	l2909
  6343  0D13  3A57               	xorlw	87	; case 100
  6344  0D14  1903               	skipnz
  6345  0D15  2CD8               	goto	l2897
  6346  0D16  3A01               	xorlw	1	; case 101
  6347  0D17  1903               	skipnz
  6348  0D18  2CDC               	goto	l2899
  6349  0D19  2CE3               	goto	l2903
  6350  0D1A                     l2925:	
  6351  0D1A  0021               	movlb	1	; select bank1
  6352  0D1B  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  6353                           
  6354                           ; Switch size 1, requested type "space"
  6355                           ; Number of cases is 4, Range of values is 0 to 3
  6356                           ; switch strategies available:
  6357                           ; Name         Instructions Cycles
  6358                           ; simple_byte           13     7 (average)
  6359                           ; direct_byte           14     6 (fixed)
  6360                           ; jumptable            260     6 (fixed)
  6361                           ;	Chosen strategy is simple_byte
  6362  0D1C  3A00               	xorlw	0	; case 0
  6363  0D1D  1903               	skipnz
  6364  0D1E  2C78               	goto	l2847
  6365  0D1F  3A01               	xorlw	1	; case 1
  6366  0D20  1903               	skipnz
  6367  0D21  2C7B               	goto	l2849
  6368  0D22  3A03               	xorlw	3	; case 2
  6369  0D23  1903               	skipnz
  6370  0D24  2CA0               	goto	l2875
  6371  0D25  3A01               	xorlw	1	; case 3
  6372  0D26  1903               	skipnz
  6373  0D27  2CCC               	goto	l2893
  6374  0D28  2D29               	goto	l2927
  6375  0D29                     l2927:	
  6376                           
  6377                           ;mrf49xa_phy.c: 193: }
  6378                           ;mrf49xa_phy.c: 207: return PORTAbits.RA2 == 1 ? 1 : 0;
  6379  0D29  0020               	movlb	0	; select bank0
  6380  0D2A  0C0C               	rrf	12,w	;volatile
  6381  0D2B  0C89               	rrf	9,f
  6382  0D2C  3901               	andlw	1
  6383  0D2D  0008               	return
  6384  0D2E                     __end_of_Mrf49xaServe:	
  6385  0D2E                     __ptext36:	
  6386 ;; *************** function _Mrf49TxByte *****************
  6387 ;; Defined at:
  6388 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  byte            1    wreg     unsigned char 
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;  byte            1    3[BANK0 ] unsigned char 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;		None               void
  6395 ;; Registers used:
  6396 ;;		wreg, status,2, status,0, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 1E/1
  6399 ;;		On exit  : 1F/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6402 ;;      Params:         0       0       0       0
  6403 ;;      Locals:         0       1       0       0
  6404 ;;      Temps:          0       0       0       0
  6405 ;;      Totals:         0       1       0       0
  6406 ;;Total ram usage:        1 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    7
  6409 ;; This function calls:
  6410 ;;		_Mrf49TxCmd
  6411 ;; This function is called by:
  6412 ;;		_Mrf49xaServe
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           
  6417                           ;psect for function _Mrf49TxByte
  6418  0D2E                     _Mrf49TxByte:	
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6422                           ;Mrf49TxByte@byte stored from wreg
  6423  0D2E  0020               	movlb	0	; select bank0
  6424  0D2F  00A3               	movwf	Mrf49TxByte@byte
  6425                           
  6426                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6427  0D30  00A1               	movwf	Mrf49TxCmd@val
  6428  0D31  30B8               	movlw	184
  6429  0D32  2D5A               	ljmp	_Mrf49TxCmd
  6430  0D33                     __end_of_Mrf49TxByte:	
  6431  0D33                     __ptext39:	
  6432 ;; *************** function _Mrf49RxByte *****************
  6433 ;; Defined at:
  6434 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;		None
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      unsigned char 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0, pclath, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 1E/1
  6445 ;;		On exit  : 1F/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6448 ;;      Params:         0       0       0       0
  6449 ;;      Locals:         0       0       0       0
  6450 ;;      Temps:          0       0       0       0
  6451 ;;      Totals:         0       0       0       0
  6452 ;;Total ram usage:        0 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    7
  6455 ;; This function calls:
  6456 ;;		_Mrf49RxCmd
  6457 ;; This function is called by:
  6458 ;;		_Mrf49xaServe
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _Mrf49RxByte
  6464  0D33                     _Mrf49RxByte:	
  6465                           
  6466                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6470  0D33  30B0               	movlw	176
  6471  0D34  2E0D               	ljmp	_Mrf49RxCmd
  6472  0D35                     __end_of_Mrf49RxByte:	
  6473  0D35                     __ptext35:	
  6474 ;; *************** function _Mrf49xaModeRx *****************
  6475 ;; Defined at:
  6476 ;;		line 100 in file "../../../src/devices/mrf49xa.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  k               1    3[BANK0 ] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;		None               void
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 1E/1
  6487 ;;		On exit  : 1F/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6490 ;;      Params:         0       0       0       0
  6491 ;;      Locals:         0       1       0       0
  6492 ;;      Temps:          0       0       0       0
  6493 ;;      Totals:         0       1       0       0
  6494 ;;Total ram usage:        1 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    7
  6497 ;; This function calls:
  6498 ;;		_Mrf49TxCmd
  6499 ;; This function is called by:
  6500 ;;		_Mrf49xaReboot
  6501 ;;		_Mrf49xaInit
  6502 ;;		_Mrf49xaServe
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           
  6507                           ;psect for function _Mrf49xaModeRx
  6508  0D35                     _Mrf49xaModeRx:	
  6509  0D35                     l2969:	
  6510                           ;incstack = 0
  6511                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6512                           
  6513                           
  6514                           ;mrf49xa.c: 102: UI08_t k;
  6515                           ;mrf49xa.c: 103: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  6516  0D35  0020               	movlb	0	; select bank0
  6517  0D36  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6518  0D37  01A3               	clrf	Mrf49xaModeRx@k
  6519  0D38  3182               	movlp	high __stringtab
  6520  0D39  000A               	callw
  6521  0D3A  3188               	pagesel	$	;select current page
  6522  0D3B  3800               	iorlw	0
  6523  0D3C  1903               	btfsc	3,2
  6524  0D3D  2D52               	goto	l211
  6525  0D3E                     l2975:	
  6526  0D3E  3523               	lslf	Mrf49xaModeRx@k,w
  6527  0D3F  3E40               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6528  0D40  3182               	movlp	high __stringtab
  6529  0D41  000A               	callw
  6530  0D42  3188               	pagesel	$	;select current page
  6531  0D43  00A1               	movwf	Mrf49TxCmd@val
  6532  0D44  3523               	lslf	Mrf49xaModeRx@k,w
  6533  0D45  3E3F               	addlw	low (_mrfRegset_Rx| (0+32768))
  6534  0D46  3182               	movlp	high __stringtab
  6535  0D47  000A               	callw
  6536  0D48  3188               	pagesel	$	;select current page
  6537  0D49  255A               	fcall	_Mrf49TxCmd
  6538  0D4A  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6539  0D4B  0AA3               	incf	Mrf49xaModeRx@k,f
  6540  0D4C  3182               	movlp	high __stringtab
  6541  0D4D  000A               	callw
  6542  0D4E  3188               	pagesel	$	;select current page
  6543  0D4F  0223               	subwf	Mrf49xaModeRx@k,w
  6544  0D50  1C03               	skipc
  6545  0D51  2D3E               	goto	l2975
  6546  0D52                     l211:	
  6547                           
  6548                           ;mrf49xa.c: 106: rfTrcvStatus.state = RECV_IDLE;
  6549  0D52  0021               	movlb	1	; select bank1
  6550  0D53  3080               	movlw	-128
  6551  0D54  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  6552  0D55  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  6553                           
  6554                           ;mrf49xa.c: 107: rfTrcvStatus.hwByte = 0;
  6555  0D56  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6556                           
  6557                           ;mrf49xa.c: 109: mrf49Status.flags.msb.fifoTxRx = 0;
  6558  0D57  0020               	movlb	0	; select bank0
  6559  0D58  13C0               	bcf	_mrf49Status,7
  6560  0D59  0008               	return
  6561  0D5A                     __end_of_Mrf49xaModeRx:	
  6562  0D5A                     __ptext37:	
  6563 ;; *************** function _Mrf49TxCmd *****************
  6564 ;; Defined at:
  6565 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  cmd             1    wreg     unsigned char 
  6568 ;;  val             1    1[BANK0 ] unsigned char 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  cmd             1    2[BANK0 ] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;		None               void
  6573 ;; Registers used:
  6574 ;;		wreg, status,2, status,0, pclath, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 1F/0
  6577 ;;		On exit  : 1F/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6580 ;;      Params:         0       1       0       0
  6581 ;;      Locals:         0       1       0       0
  6582 ;;      Temps:          0       0       0       0
  6583 ;;      Totals:         0       2       0       0
  6584 ;;Total ram usage:        2 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    6
  6587 ;; This function calls:
  6588 ;;		_Mrf49SpiTx
  6589 ;; This function is called by:
  6590 ;;		_Mrf49xaModeRx
  6591 ;;		_Mrf49xaModeTx
  6592 ;;		_Mrf49xaModeSleep
  6593 ;;		_Mrf49xaInit
  6594 ;;		_Mrf49TxByte
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _Mrf49TxCmd
  6600  0D5A                     _Mrf49TxCmd:	
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6604                           ;Mrf49TxCmd@cmd stored from wreg
  6605  0D5A  00A2               	movwf	Mrf49TxCmd@cmd
  6606                           
  6607                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6608  0D5B  130E               	bcf	14,6	;volatile
  6609                           
  6610                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6611  0D5C  0822               	movf	Mrf49TxCmd@cmd,w
  6612  0D5D  2563  3188         	fcall	_Mrf49SpiTx
  6613                           
  6614                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6615  0D5F  0821               	movf	Mrf49TxCmd@val,w
  6616  0D60  2563               	fcall	_Mrf49SpiTx
  6617                           
  6618                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6619  0D61  170E               	bsf	14,6	;volatile
  6620  0D62  0008               	return
  6621  0D63                     __end_of_Mrf49TxCmd:	
  6622  0D63                     __ptext41:	
  6623 ;; *************** function _Mrf49SpiTx *****************
  6624 ;; Defined at:
  6625 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  byte            1    wreg     unsigned char 
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  byte            1    0[BANK0 ] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;		None               void
  6632 ;; Registers used:
  6633 ;;		wreg
  6634 ;; Tracked objects:
  6635 ;;		On entry : 1F/0
  6636 ;;		On exit  : 1F/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6639 ;;      Params:         0       0       0       0
  6640 ;;      Locals:         0       1       0       0
  6641 ;;      Temps:          0       0       0       0
  6642 ;;      Totals:         0       1       0       0
  6643 ;;Total ram usage:        1 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    5
  6646 ;; This function calls:
  6647 ;;		Nothing
  6648 ;; This function is called by:
  6649 ;;		_Mrf49TxCmd
  6650 ;;		_Mrf49RxCmd
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           
  6655                           ;psect for function _Mrf49SpiTx
  6656  0D63                     _Mrf49SpiTx:	
  6657                           
  6658                           ;incstack = 0
  6659                           ; Regs used in _Mrf49SpiTx: [wreg]
  6660                           ;Mrf49SpiTx@byte stored from wreg
  6661  0D63  00A0               	movwf	Mrf49SpiTx@byte
  6662                           
  6663                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  6664  0D64  1FA0               	btfss	Mrf49SpiTx@byte,7
  6665  0D65  2D68               	goto	l255
  6666  0D66  178D               	bsf	13,7	;volatile
  6667  0D67  2D69               	goto	l256
  6668  0D68                     l255:	
  6669  0D68  138D               	bcf	13,7	;volatile
  6670  0D69                     l256:	
  6671  0D69  0022               	movlb	2	; select bank2
  6672  0D6A  178E               	bsf	14,7	;volatile
  6673  0D6B  0000               	nop	;# 
  6674  0D6C  0022               	movlb	2	; select bank2
  6675  0D6D  138E               	bcf	14,7	;volatile
  6676  0D6E  0020               	movlb	0	; select bank0
  6677  0D6F  1F20               	btfss	Mrf49SpiTx@byte,6
  6678  0D70  2D73               	goto	l259
  6679  0D71  178D               	bsf	13,7	;volatile
  6680  0D72  2D74               	goto	l260
  6681  0D73                     l259:	
  6682  0D73  138D               	bcf	13,7	;volatile
  6683  0D74                     l260:	
  6684  0D74  0022               	movlb	2	; select bank2
  6685  0D75  178E               	bsf	14,7	;volatile
  6686  0D76  0000               	nop	;# 
  6687  0D77  0022               	movlb	2	; select bank2
  6688  0D78  138E               	bcf	14,7	;volatile
  6689  0D79  0020               	movlb	0	; select bank0
  6690  0D7A  1EA0               	btfss	Mrf49SpiTx@byte,5
  6691  0D7B  2D7E               	goto	l263
  6692  0D7C  178D               	bsf	13,7	;volatile
  6693  0D7D  2D7F               	goto	l264
  6694  0D7E                     l263:	
  6695  0D7E  138D               	bcf	13,7	;volatile
  6696  0D7F                     l264:	
  6697  0D7F  0022               	movlb	2	; select bank2
  6698  0D80  178E               	bsf	14,7	;volatile
  6699  0D81  0000               	nop	;# 
  6700  0D82  0022               	movlb	2	; select bank2
  6701  0D83  138E               	bcf	14,7	;volatile
  6702  0D84  0020               	movlb	0	; select bank0
  6703  0D85  1E20               	btfss	Mrf49SpiTx@byte,4
  6704  0D86  2D89               	goto	l267
  6705  0D87  178D               	bsf	13,7	;volatile
  6706  0D88  2D8A               	goto	l268
  6707  0D89                     l267:	
  6708  0D89  138D               	bcf	13,7	;volatile
  6709  0D8A                     l268:	
  6710  0D8A  0022               	movlb	2	; select bank2
  6711  0D8B  178E               	bsf	14,7	;volatile
  6712  0D8C  0000               	nop	;# 
  6713  0D8D  0022               	movlb	2	; select bank2
  6714  0D8E  138E               	bcf	14,7	;volatile
  6715  0D8F  0020               	movlb	0	; select bank0
  6716  0D90  1DA0               	btfss	Mrf49SpiTx@byte,3
  6717  0D91  2D94               	goto	l271
  6718  0D92  178D               	bsf	13,7	;volatile
  6719  0D93  2D95               	goto	l272
  6720  0D94                     l271:	
  6721  0D94  138D               	bcf	13,7	;volatile
  6722  0D95                     l272:	
  6723  0D95  0022               	movlb	2	; select bank2
  6724  0D96  178E               	bsf	14,7	;volatile
  6725  0D97  0000               	nop	;# 
  6726  0D98  0022               	movlb	2	; select bank2
  6727  0D99  138E               	bcf	14,7	;volatile
  6728  0D9A  0020               	movlb	0	; select bank0
  6729  0D9B  1D20               	btfss	Mrf49SpiTx@byte,2
  6730  0D9C  2D9F               	goto	l275
  6731  0D9D  178D               	bsf	13,7	;volatile
  6732  0D9E  2DA0               	goto	l276
  6733  0D9F                     l275:	
  6734  0D9F  138D               	bcf	13,7	;volatile
  6735  0DA0                     l276:	
  6736  0DA0  0022               	movlb	2	; select bank2
  6737  0DA1  178E               	bsf	14,7	;volatile
  6738  0DA2  0000               	nop	;# 
  6739  0DA3  0022               	movlb	2	; select bank2
  6740  0DA4  138E               	bcf	14,7	;volatile
  6741  0DA5  0020               	movlb	0	; select bank0
  6742  0DA6  1CA0               	btfss	Mrf49SpiTx@byte,1
  6743  0DA7  2DAA               	goto	l279
  6744  0DA8  178D               	bsf	13,7	;volatile
  6745  0DA9  2DAB               	goto	l280
  6746  0DAA                     l279:	
  6747  0DAA  138D               	bcf	13,7	;volatile
  6748  0DAB                     l280:	
  6749  0DAB  0022               	movlb	2	; select bank2
  6750  0DAC  178E               	bsf	14,7	;volatile
  6751  0DAD  0000               	nop	;# 
  6752  0DAE  0022               	movlb	2	; select bank2
  6753  0DAF  138E               	bcf	14,7	;volatile
  6754  0DB0  0020               	movlb	0	; select bank0
  6755  0DB1  1C20               	btfss	Mrf49SpiTx@byte,0
  6756  0DB2  2DB5               	goto	l283
  6757  0DB3  178D               	bsf	13,7	;volatile
  6758  0DB4  2DB6               	goto	l284
  6759  0DB5                     l283:	
  6760  0DB5  138D               	bcf	13,7	;volatile
  6761  0DB6                     l284:	
  6762  0DB6  0022               	movlb	2	; select bank2
  6763  0DB7  178E               	bsf	14,7	;volatile
  6764  0DB8  0000               	nop	;# 
  6765  0DB9  0022               	movlb	2	; select bank2
  6766  0DBA  138E               	bcf	14,7	;volatile
  6767                           
  6768                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  6769  0DBB  0020               	movlb	0	; select bank0
  6770  0DBC  138D               	bcf	13,7	;volatile
  6771  0DBD  0008               	return
  6772  0DBE                     __end_of_Mrf49SpiTx:	
  6773  0DBE                     __ptext38:	
  6774 ;; *************** function _Mrf49RxSts *****************
  6775 ;; Defined at:
  6776 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;		None
  6781 ;; Return value:  Size  Location     Type
  6782 ;;		None               void
  6783 ;; Registers used:
  6784 ;;		wreg, status,2, pclath, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 1E/0
  6787 ;;		On exit  : 1F/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6790 ;;      Params:         0       0       0       0
  6791 ;;      Locals:         0       0       0       0
  6792 ;;      Temps:          0       0       0       0
  6793 ;;      Totals:         0       0       0       0
  6794 ;;Total ram usage:        0 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    6
  6797 ;; This function calls:
  6798 ;;		_Mrf49SpiRx
  6799 ;; This function is called by:
  6800 ;;		_Mrf49xaTick
  6801 ;;		_Mrf49xaServe
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function _Mrf49RxSts
  6807  0DBE                     _Mrf49RxSts:	
  6808                           
  6809                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6813  0DBE  120B               	bcf	11,4	;volatile
  6814                           
  6815                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  6816  0DBF  0020               	movlb	0	; select bank0
  6817  0DC0  130E               	bcf	14,6	;volatile
  6818                           
  6819                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  6820  0DC1  25C9  3188         	fcall	_Mrf49SpiRx
  6821  0DC3  00C0               	movwf	_mrf49Status
  6822                           
  6823                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  6824  0DC4  25C9               	fcall	_Mrf49SpiRx
  6825  0DC5  00C1               	movwf	_mrf49Status+1
  6826                           
  6827                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  6828  0DC6  170E               	bsf	14,6	;volatile
  6829                           
  6830                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  6831  0DC7  160B               	bsf	11,4	;volatile
  6832  0DC8  0008               	return
  6833  0DC9                     __end_of_Mrf49RxSts:	
  6834  0DC9                     __ptext42:	
  6835 ;; *************** function _Mrf49SpiRx *****************
  6836 ;; Defined at:
  6837 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  data            1    0[BANK0 ] unsigned char 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      unsigned char 
  6844 ;; Registers used:
  6845 ;;		wreg, status,2
  6846 ;; Tracked objects:
  6847 ;;		On entry : 1F/0
  6848 ;;		On exit  : 1F/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6851 ;;      Params:         0       0       0       0
  6852 ;;      Locals:         0       1       0       0
  6853 ;;      Temps:          0       0       0       0
  6854 ;;      Totals:         0       1       0       0
  6855 ;;Total ram usage:        1 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    5
  6858 ;; This function calls:
  6859 ;;		Nothing
  6860 ;; This function is called by:
  6861 ;;		_Mrf49RxCmd
  6862 ;;		_Mrf49RxSts
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           
  6867                           ;psect for function _Mrf49SpiRx
  6868  0DC9                     _Mrf49SpiRx:	
  6869                           
  6870                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  6871                           
  6872                           ;incstack = 0
  6873                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  6874  0DC9  01A0               	clrf	Mrf49SpiRx@data
  6875                           
  6876                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  6877  0DCA  138D               	bcf	13,7	;volatile
  6878  0DCB  1A8E               	btfsc	14,5	;volatile
  6879  0DCC  17A0               	bsf	Mrf49SpiRx@data,7
  6880  0DCD  0022               	movlb	2	; select bank2
  6881  0DCE  178E               	bsf	14,7	;volatile
  6882  0DCF  0000               	nop	;# 
  6883  0DD0  0022               	movlb	2	; select bank2
  6884  0DD1  138E               	bcf	14,7	;volatile
  6885                           
  6886                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6887  0DD2  0020               	movlb	0	; select bank0
  6888  0DD3  1A8E               	btfsc	14,5	;volatile
  6889  0DD4  1720               	bsf	Mrf49SpiRx@data,6
  6890  0DD5  0022               	movlb	2	; select bank2
  6891  0DD6  178E               	bsf	14,7	;volatile
  6892  0DD7  0000               	nop	;# 
  6893  0DD8  0022               	movlb	2	; select bank2
  6894  0DD9  138E               	bcf	14,7	;volatile
  6895                           
  6896                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6897  0DDA  0020               	movlb	0	; select bank0
  6898  0DDB  1A8E               	btfsc	14,5	;volatile
  6899  0DDC  16A0               	bsf	Mrf49SpiRx@data,5
  6900  0DDD  0022               	movlb	2	; select bank2
  6901  0DDE  178E               	bsf	14,7	;volatile
  6902  0DDF  0000               	nop	;# 
  6903  0DE0  0022               	movlb	2	; select bank2
  6904  0DE1  138E               	bcf	14,7	;volatile
  6905                           
  6906                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6907  0DE2  0020               	movlb	0	; select bank0
  6908  0DE3  1A8E               	btfsc	14,5	;volatile
  6909  0DE4  1620               	bsf	Mrf49SpiRx@data,4
  6910  0DE5  0022               	movlb	2	; select bank2
  6911  0DE6  178E               	bsf	14,7	;volatile
  6912  0DE7  0000               	nop	;# 
  6913  0DE8  0022               	movlb	2	; select bank2
  6914  0DE9  138E               	bcf	14,7	;volatile
  6915                           
  6916                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6917  0DEA  0020               	movlb	0	; select bank0
  6918  0DEB  1A8E               	btfsc	14,5	;volatile
  6919  0DEC  15A0               	bsf	Mrf49SpiRx@data,3
  6920  0DED  0022               	movlb	2	; select bank2
  6921  0DEE  178E               	bsf	14,7	;volatile
  6922  0DEF  0000               	nop	;# 
  6923  0DF0  0022               	movlb	2	; select bank2
  6924  0DF1  138E               	bcf	14,7	;volatile
  6925                           
  6926                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6927  0DF2  0020               	movlb	0	; select bank0
  6928  0DF3  1A8E               	btfsc	14,5	;volatile
  6929  0DF4  1520               	bsf	Mrf49SpiRx@data,2
  6930  0DF5  0022               	movlb	2	; select bank2
  6931  0DF6  178E               	bsf	14,7	;volatile
  6932  0DF7  0000               	nop	;# 
  6933  0DF8  0022               	movlb	2	; select bank2
  6934  0DF9  138E               	bcf	14,7	;volatile
  6935                           
  6936                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6937  0DFA  0020               	movlb	0	; select bank0
  6938  0DFB  1A8E               	btfsc	14,5	;volatile
  6939  0DFC  14A0               	bsf	Mrf49SpiRx@data,1
  6940  0DFD  0022               	movlb	2	; select bank2
  6941  0DFE  178E               	bsf	14,7	;volatile
  6942  0DFF  0000               	nop	;# 
  6943  0E00  0022               	movlb	2	; select bank2
  6944  0E01  138E               	bcf	14,7	;volatile
  6945                           
  6946                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6947  0E02  0020               	movlb	0	; select bank0
  6948  0E03  1A8E               	btfsc	14,5	;volatile
  6949  0E04  1420               	bsf	Mrf49SpiRx@data,0
  6950  0E05  0022               	movlb	2	; select bank2
  6951  0E06  178E               	bsf	14,7	;volatile
  6952  0E07  0000               	nop	;# 
  6953  0E08  0022               	movlb	2	; select bank2
  6954  0E09  138E               	bcf	14,7	;volatile
  6955                           
  6956                           ;mrf49xa_spi_pic16.c: 40: return data;
  6957  0E0A  0020               	movlb	0	; select bank0
  6958  0E0B  0820               	movf	Mrf49SpiRx@data,w
  6959  0E0C  0008               	return
  6960  0E0D                     __end_of_Mrf49SpiRx:	
  6961  0E0D                     __ptext40:	
  6962 ;; *************** function _Mrf49RxCmd *****************
  6963 ;; Defined at:
  6964 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  cmd             1    wreg     unsigned char 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  cmd             1    1[BANK0 ] unsigned char 
  6969 ;;  val             1    2[BANK0 ] unsigned char 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      unsigned char 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0, pclath, cstack
  6974 ;; Tracked objects:
  6975 ;;		On entry : 1E/1
  6976 ;;		On exit  : 1F/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6979 ;;      Params:         0       0       0       0
  6980 ;;      Locals:         0       2       0       0
  6981 ;;      Temps:          0       0       0       0
  6982 ;;      Totals:         0       2       0       0
  6983 ;;Total ram usage:        2 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    6
  6986 ;; This function calls:
  6987 ;;		_Mrf49SpiRx
  6988 ;;		_Mrf49SpiTx
  6989 ;; This function is called by:
  6990 ;;		_Mrf49RxByte
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           
  6995                           ;psect for function _Mrf49RxCmd
  6996  0E0D                     _Mrf49RxCmd:	
  6997                           
  6998                           ;incstack = 0
  6999                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  7000                           ;Mrf49RxCmd@cmd stored from wreg
  7001  0E0D  0020               	movlb	0	; select bank0
  7002  0E0E  00A1               	movwf	Mrf49RxCmd@cmd
  7003                           
  7004                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  7005  0E0F  130E               	bcf	14,6	;volatile
  7006                           
  7007                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  7008  0E10  0821               	movf	Mrf49RxCmd@cmd,w
  7009  0E11  2563  3188         	fcall	_Mrf49SpiTx
  7010                           
  7011                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  7012  0E13  25C9               	fcall	_Mrf49SpiRx
  7013  0E14  00A2               	movwf	Mrf49RxCmd@val
  7014                           
  7015                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  7016  0E15  170E               	bsf	14,6	;volatile
  7017                           
  7018                           ;mrf49xa_cmd.c: 27: return val;
  7019  0E16  0008               	return
  7020  0E17                     __end_of_Mrf49RxCmd:	
  7021  0E17                     __ptext2:	
  7022 ;; *************** function _RfSendPowerState *****************
  7023 ;; Defined at:
  7024 ;;		line 14 in file "../../../src/rfstack/packets.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7027 ;;		 -> rfTrcvStatus(76), 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  inst            1   10[BANK0 ] PTR struct rfTrcvStatus_
  7030 ;;		 -> rfTrcvStatus(76), 
  7031 ;;  s               2    8[BANK0 ] unsigned int 
  7032 ;;  packet          1   11[BANK0 ] PTR struct rfTrcvPacket_
  7033 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  7034 ;; Return value:  Size  Location     Type
  7035 ;;		None               void
  7036 ;; Registers used:
  7037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 1F/0
  7040 ;;		On exit  : 1F/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7043 ;;      Params:         0       0       0       0
  7044 ;;      Locals:         0       4       0       0
  7045 ;;      Temps:          0       0       0       0
  7046 ;;      Totals:         0       4       0       0
  7047 ;;Total ram usage:        4 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    7
  7050 ;; This function calls:
  7051 ;;		_AdcSample
  7052 ;;		_Mrf49xaAllocPacket
  7053 ;;		_Mrf49xaTxPacket
  7054 ;;		_PwrAdcSleep
  7055 ;;		_PwrAdcWake
  7056 ;; This function is called by:
  7057 ;;		_main
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           
  7062                           ;psect for function _RfSendPowerState
  7063  0E17                     _RfSendPowerState:	
  7064                           
  7065                           ;incstack = 0
  7066                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7067                           ;RfSendPowerState@inst stored from wreg
  7068  0E17  00AA               	movwf	RfSendPowerState@inst
  7069                           
  7070                           ;packets.c: 16: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(inst);
  7071  0E18  26D9  3188         	fcall	_Mrf49xaAllocPacket
  7072  0E1A  00AB               	movwf	RfSendPowerState@packet
  7073                           
  7074                           ;packets.c: 18: packet->packet.size = 4;
  7075  0E1B  0A2B               	incf	RfSendPowerState@packet,w
  7076  0E1C  0086               	movwf	6
  7077  0E1D  3004               	movlw	4
  7078  0E1E  0187               	clrf	7
  7079  0E1F  0081               	movwf	1
  7080                           
  7081                           ;packets.c: 19: packet->packet.id = RF_POWER_STATUS;
  7082  0E20  082B               	movf	RfSendPowerState@packet,w
  7083  0E21  3E04               	addlw	4
  7084  0E22  0086               	movwf	6
  7085  0E23  30A3               	movlw	163
  7086  0E24  0081               	movwf	1
  7087                           
  7088                           ;packets.c: 20: packet->packet.dst = 0xFF;
  7089  0E25  082B               	movf	RfSendPowerState@packet,w
  7090  0E26  3E03               	addlw	3
  7091  0E27  0086               	movwf	6
  7092  0E28  30FF               	movlw	255
  7093  0E29  0081               	movwf	1
  7094                           
  7095                           ;packets.c: 22: packet->packet.data[0] = coldBoot; coldBoot = 0;
  7096  0E2A  082B               	movf	RfSendPowerState@packet,w
  7097  0E2B  3E06               	addlw	6
  7098  0E2C  0086               	movwf	6
  7099  0E2D  0842               	movf	_coldBoot,w
  7100  0E2E  0081               	movwf	1
  7101  0E2F  01C2               	clrf	_coldBoot
  7102                           
  7103                           ;packets.c: 23: packet->packet.data[1] = 0;
  7104  0E30  082B               	movf	RfSendPowerState@packet,w
  7105  0E31  3E07               	addlw	7
  7106  0E32  0086               	movwf	6
  7107  0E33  0181               	clrf	1
  7108                           
  7109                           ;packets.c: 25: PwrAdcWake();
  7110  0E34  268D  3188         	fcall	_PwrAdcWake
  7111                           
  7112                           ;packets.c: 26: uint16_t s = AdcSample(ADC_FVR);
  7113  0E36  301F               	movlw	31
  7114  0E37  2652  3188         	fcall	_AdcSample
  7115  0E39  0823               	movf	?_AdcSample+1,w
  7116  0E3A  00A9               	movwf	RfSendPowerState@s+1
  7117  0E3B  0822               	movf	?_AdcSample,w
  7118  0E3C  00A8               	movwf	RfSendPowerState@s
  7119                           
  7120                           ;packets.c: 27: PwrAdcSleep();
  7121  0E3D  2687  3188         	fcall	_PwrAdcSleep
  7122                           
  7123                           ;packets.c: 28: packet->packet.data[2] = s & 0xFF;
  7124  0E3F  0020               	movlb	0	; select bank0
  7125  0E40  082B               	movf	RfSendPowerState@packet,w
  7126  0E41  3E08               	addlw	8
  7127  0E42  0086               	movwf	6
  7128  0E43  0187               	clrf	7
  7129  0E44  0828               	movf	RfSendPowerState@s,w
  7130  0E45  0081               	movwf	1
  7131                           
  7132                           ;packets.c: 29: packet->packet.data[3] = s >> 8;
  7133  0E46  082B               	movf	RfSendPowerState@packet,w
  7134  0E47  3E09               	addlw	9
  7135  0E48  0086               	movwf	6
  7136  0E49  0829               	movf	RfSendPowerState@s+1,w
  7137  0E4A  0081               	movwf	1
  7138                           
  7139                           ;packets.c: 31: Mrf49xaTxPacket(inst, packet, 0, 1);
  7140  0E4B  082B               	movf	RfSendPowerState@packet,w
  7141  0E4C  00A0               	movwf	Mrf49xaTxPacket@packet
  7142  0E4D  01A1               	clrf	Mrf49xaTxPacket@response
  7143  0E4E  01A2               	clrf	Mrf49xaTxPacket@needAck
  7144  0E4F  0AA2               	incf	Mrf49xaTxPacket@needAck,f
  7145  0E50  082A               	movf	RfSendPowerState@inst,w
  7146  0E51  2EF6               	ljmp	_Mrf49xaTxPacket
  7147  0E52                     __end_of_RfSendPowerState:	
  7148  0E52                     __ptext8:	
  7149 ;; *************** function _AdcSample *****************
  7150 ;; Defined at:
  7151 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  ch              1    wreg     unsigned char 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  ch              1    5[BANK0 ] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  2    2[BANK0 ] unsigned int 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0, pclath, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 1F/1
  7162 ;;		On exit  : 1F/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7165 ;;      Params:         0       2       0       0
  7166 ;;      Locals:         0       1       0       0
  7167 ;;      Temps:          0       1       0       0
  7168 ;;      Totals:         0       4       0       0
  7169 ;;Total ram usage:        4 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    6
  7172 ;; This function calls:
  7173 ;;		_AdcChSelect
  7174 ;;		_AdcGetResult
  7175 ;;		_AdcGo
  7176 ;;		_AdcIsBusy
  7177 ;; This function is called by:
  7178 ;;		_RfSendPowerState
  7179 ;;		_main
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _AdcSample
  7185  0E52                     _AdcSample:	
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  7189                           ;AdcSample@ch stored from wreg
  7190  0E52  0020               	movlb	0	; select bank0
  7191  0E53  00A5               	movwf	AdcSample@ch
  7192                           
  7193                           ;adc16.c: 83: AdcChSelect(ch);
  7194  0E54  0825               	movf	AdcSample@ch,w
  7195  0E55  2680  3188         	fcall	_AdcChSelect
  7196                           
  7197                           ;adc16.c: 86: AdcGo();
  7198  0E57  267A  3188         	fcall	_AdcGo
  7199                           
  7200                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7201  0E59  30C7               	movlw	199
  7202  0E5A  0020               	movlb	0	; select bank0
  7203  0E5B  00A4               	movwf	??_AdcSample
  7204  0E5C                     u2807:	
  7205  0E5C  0000               	nop
  7206  0E5D  0BA4               	decfsz	??_AdcSample,f
  7207  0E5E  2E5C               	goto	u2807
  7208  0E5F  2E60               	nop2	;nop
  7209  0E60  0000               	nop
  7210  0E61                     l2799:	
  7211                           ;adc16.c: 88: while (AdcIsBusy());
  7212                           
  7213  0E61  267C  3188         	fcall	_AdcIsBusy
  7214  0E63  3800               	iorlw	0
  7215  0E64  1D03               	skipz
  7216  0E65  2E61               	goto	l2799
  7217                           
  7218                           ;adc16.c: 89: AdcGo();
  7219  0E66  267A  3188         	fcall	_AdcGo
  7220  0E68                     l2803:	
  7221                           ;adc16.c: 90: while (AdcIsBusy());
  7222                           
  7223  0E68  267C  3188         	fcall	_AdcIsBusy
  7224  0E6A  3800               	iorlw	0
  7225  0E6B  1D03               	skipz
  7226  0E6C  2E68               	goto	l2803
  7227                           
  7228                           ;psect for function _AdcGetResult
  7229                           
  7230                           ;adc16.c: 92: return AdcGetResult();
  7231  0E6D                     i1L_AdcGetResult:	
  7232  0E6D                     i1Ll2783:	
  7233                           
  7234                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  7235  0E6D  081C               	movf	28,w	;volatile
  7236  0E6E  0020               	movlb	0	; select bank0
  7237  0E6F  00A1               	movwf	?_AdcGetResult+1
  7238  0E70  01A0               	clrf	?_AdcGetResult
  7239  0E71  0021               	movlb	1	; select bank1
  7240  0E72  081B               	movf	27,w	;volatile
  7241  0E73  0020               	movlb	0	; select bank0
  7242  0E74  04A0               	iorwf	?_AdcGetResult,f
  7243  0E75                     i1Ll79:	
  7244  0E75  0821               	movf	?_AdcGetResult+1,w
  7245  0E76  00A3               	movwf	?_AdcSample+1
  7246  0E77  0820               	movf	?_AdcGetResult,w
  7247  0E78  00A2               	movwf	?_AdcSample
  7248  0E79  0008               	return
  7249  0E7A                     __end_of_AdcSample:	
  7250  0E7A                     __ptext10:	
  7251 ;; *************** function _AdcGo *****************
  7252 ;; Defined at:
  7253 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;		None
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;		None
  7258 ;; Return value:  Size  Location     Type
  7259 ;;		None               void
  7260 ;; Registers used:
  7261 ;;		None
  7262 ;; Tracked objects:
  7263 ;;		On entry : 1F/1
  7264 ;;		On exit  : 1F/1
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7267 ;;      Params:         0       0       0       0
  7268 ;;      Locals:         0       0       0       0
  7269 ;;      Temps:          0       0       0       0
  7270 ;;      Totals:         0       0       0       0
  7271 ;;Total ram usage:        0 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    5
  7274 ;; This function calls:
  7275 ;;		Nothing
  7276 ;; This function is called by:
  7277 ;;		_AdcSample
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           
  7282                           ;psect for function _AdcGo
  7283  0E7A                     _AdcGo:	
  7284                           
  7285                           ;adc16.c: 31: ADCON0 |= 1<<1;
  7286                           
  7287                           ;incstack = 0
  7288                           ; Regs used in _AdcGo: []
  7289  0E7A  149D               	bsf	29,1	;volatile
  7290  0E7B  0008               	return
  7291  0E7C                     __end_of_AdcGo:	
  7292  0E7C                     __ptext9:	
  7293 ;; *************** function _AdcIsBusy *****************
  7294 ;; Defined at:
  7295 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      unsigned char 
  7302 ;; Registers used:
  7303 ;;		wreg, status,2, status,0
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/1
  7306 ;;		On exit  : 1F/1
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7309 ;;      Params:         0       0       0       0
  7310 ;;      Locals:         0       0       0       0
  7311 ;;      Temps:          0       0       0       0
  7312 ;;      Totals:         0       0       0       0
  7313 ;;Total ram usage:        0 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    5
  7316 ;; This function calls:
  7317 ;;		Nothing
  7318 ;; This function is called by:
  7319 ;;		_AdcSample
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _AdcIsBusy
  7325  0E7C                     _AdcIsBusy:	
  7326                           
  7327                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  7328                           
  7329                           ;incstack = 0
  7330                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  7331  0E7C  0021               	movlb	1	; select bank1
  7332  0E7D  361D               	lsrf	29,w	;volatile
  7333  0E7E  3901               	andlw	1
  7334  0E7F  0008               	return
  7335  0E80                     __end_of_AdcIsBusy:	
  7336  0E80                     __ptext12:	
  7337 ;; *************** function _AdcChSelect *****************
  7338 ;; Defined at:
  7339 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  channel         1    wreg     enum E4221
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  channel         1    0[BANK0 ] enum E4221
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 1F/0
  7350 ;;		On exit  : 1F/1
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7353 ;;      Params:         0       0       0       0
  7354 ;;      Locals:         0       1       0       0
  7355 ;;      Temps:          0       0       0       0
  7356 ;;      Totals:         0       1       0       0
  7357 ;;Total ram usage:        1 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    5
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_AdcSample
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           
  7368                           ;psect for function _AdcChSelect
  7369  0E80                     _AdcChSelect:	
  7370                           
  7371                           ;incstack = 0
  7372                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  7373                           ;AdcChSelect@channel stored from wreg
  7374  0E80  00A0               	movwf	AdcChSelect@channel
  7375                           
  7376                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  7377  0E81  0709               	addwf	9,w
  7378  0E82  0709               	addwf	9,w
  7379  0E83  3801               	iorlw	1
  7380  0E84  0021               	movlb	1	; select bank1
  7381  0E85  009D               	movwf	29	;volatile
  7382  0E86  0008               	return
  7383  0E87                     __end_of_AdcChSelect:	
  7384  0E87                     __ptext5:	
  7385 ;; *************** function _PwrAdcSleep *****************
  7386 ;; Defined at:
  7387 ;;		line 178 in file "../../../src/node/power.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;		None               void
  7394 ;; Registers used:
  7395 ;;		status,2, status,0, pclath, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/1
  7398 ;;		On exit  : 1F/1
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7401 ;;      Params:         0       0       0       0
  7402 ;;      Locals:         0       0       0       0
  7403 ;;      Temps:          0       0       0       0
  7404 ;;      Totals:         0       0       0       0
  7405 ;;Total ram usage:        0 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    6
  7408 ;; This function calls:
  7409 ;;		_AdcDeinit
  7410 ;; This function is called by:
  7411 ;;		_RfSendPowerState
  7412 ;;		_main
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           
  7417                           ;psect for function _PwrAdcSleep
  7418  0E87                     _PwrAdcSleep:	
  7419                           
  7420                           ;power.c: 180: ANSELC = 0;
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7424  0E87  0023               	movlb	3	; select bank3
  7425  0E88  018E               	clrf	14	;volatile
  7426                           
  7427                           ;power.c: 181: TRISCbits.TRISC0 = 0;
  7428  0E89  0021               	movlb	1	; select bank1
  7429  0E8A  100E               	bcf	14,0	;volatile
  7430                           
  7431                           ;power.c: 183: AdcDeinit();
  7432  0E8B  3183  2B24         	ljmp	l2781
  7433  0E8D                     __end_of_PwrAdcSleep:	
  7434  0E8D                     __ptext3:	
  7435 ;; *************** function _PwrAdcWake *****************
  7436 ;; Defined at:
  7437 ;;		line 186 in file "../../../src/node/power.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;		None               void
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0, pclath, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/2
  7448 ;;		On exit  : 1F/1
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7451 ;;      Params:         0       0       0       0
  7452 ;;      Locals:         0       0       0       0
  7453 ;;      Temps:          0       0       0       0
  7454 ;;      Totals:         0       0       0       0
  7455 ;;Total ram usage:        0 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    6
  7458 ;; This function calls:
  7459 ;;		_AdcInit
  7460 ;; This function is called by:
  7461 ;;		_RfSendPowerState
  7462 ;;		_main
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _PwrAdcWake
  7468  0E8D                     _PwrAdcWake:	
  7469                           
  7470                           ;power.c: 188: ANSELCbits.ANSC0 = 1;
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7474  0E8D  0023               	movlb	3	; select bank3
  7475  0E8E  140E               	bsf	14,0	;volatile
  7476                           
  7477                           ;power.c: 189: TRISCbits.TRISC0 = 1;
  7478  0E8F  0021               	movlb	1	; select bank1
  7479  0E90  140E               	bsf	14,0	;volatile
  7480                           
  7481                           ;power.c: 191: AdcInit();
  7482  0E91  3183  2B08         	ljmp	l2773
  7483  0E93                     __end_of_PwrAdcWake:	
  7484  0E93                     __ptext1:	
  7485 ;; *************** function _RfSendSampleWeatherNode *****************
  7486 ;; Defined at:
  7487 ;;		line 34 in file "../../../src/rfstack/packets.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7490 ;;		 -> rfTrcvStatus(76), 
  7491 ;;  temperature     2    8[BANK0 ] unsigned int 
  7492 ;;  humidity        2   10[BANK0 ] unsigned int 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  inst            1   12[BANK0 ] PTR struct rfTrcvStatus_
  7495 ;;		 -> rfTrcvStatus(76), 
  7496 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  7497 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;		None               void
  7500 ;; Registers used:
  7501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 1F/0
  7504 ;;		On exit  : 1F/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7507 ;;      Params:         0       4       0       0
  7508 ;;      Locals:         0       2       0       0
  7509 ;;      Temps:          0       0       0       0
  7510 ;;      Totals:         0       6       0       0
  7511 ;;Total ram usage:        6 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    6
  7514 ;; This function calls:
  7515 ;;		_Mrf49xaAllocPacket
  7516 ;;		_Mrf49xaTxPacket
  7517 ;; This function is called by:
  7518 ;;		_main
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _RfSendSampleWeatherNode
  7524  0E93                     _RfSendSampleWeatherNode:	
  7525                           
  7526                           ;incstack = 0
  7527                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7528                           ;RfSendSampleWeatherNode@inst stored from wreg
  7529  0E93  00AC               	movwf	RfSendSampleWeatherNode@inst
  7530                           
  7531                           ;packets.c: 36: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(inst);
  7532  0E94  26D9  3188         	fcall	_Mrf49xaAllocPacket
  7533  0E96  00AD               	movwf	RfSendSampleWeatherNode@packet
  7534                           
  7535                           ;packets.c: 38: packet->packet.size = 10;
  7536  0E97  0A2D               	incf	RfSendSampleWeatherNode@packet,w
  7537  0E98  0086               	movwf	6
  7538  0E99  300A               	movlw	10
  7539  0E9A  0187               	clrf	7
  7540  0E9B  0081               	movwf	1
  7541                           
  7542                           ;packets.c: 39: packet->packet.id = RF_APP_SAMPLE;
  7543  0E9C  082D               	movf	RfSendSampleWeatherNode@packet,w
  7544  0E9D  3E04               	addlw	4
  7545  0E9E  0086               	movwf	6
  7546  0E9F  0181               	clrf	1
  7547                           
  7548                           ;packets.c: 40: packet->packet.dst = 0xFF;
  7549  0EA0  082D               	movf	RfSendSampleWeatherNode@packet,w
  7550  0EA1  3E03               	addlw	3
  7551  0EA2  0086               	movwf	6
  7552  0EA3  30FF               	movlw	255
  7553  0EA4  0081               	movwf	1
  7554                           
  7555                           ;packets.c: 42: packet->packet.data[0] = 0;
  7556  0EA5  082D               	movf	RfSendSampleWeatherNode@packet,w
  7557  0EA6  3E06               	addlw	6
  7558  0EA7  0086               	movwf	6
  7559  0EA8  0181               	clrf	1
  7560                           
  7561                           ;packets.c: 43: packet->packet.data[1] = 0;
  7562  0EA9  082D               	movf	RfSendSampleWeatherNode@packet,w
  7563  0EAA  3E07               	addlw	7
  7564  0EAB  0086               	movwf	6
  7565  0EAC  0181               	clrf	1
  7566                           
  7567                           ;packets.c: 44: packet->packet.data[2] = 0;
  7568  0EAD  082D               	movf	RfSendSampleWeatherNode@packet,w
  7569  0EAE  3E08               	addlw	8
  7570  0EAF  0086               	movwf	6
  7571  0EB0  0181               	clrf	1
  7572                           
  7573                           ;packets.c: 45: packet->packet.data[3] = 0;
  7574  0EB1  082D               	movf	RfSendSampleWeatherNode@packet,w
  7575  0EB2  3E09               	addlw	9
  7576  0EB3  0086               	movwf	6
  7577  0EB4  0181               	clrf	1
  7578                           
  7579                           ;packets.c: 47: packet->packet.data[4] = 0;
  7580  0EB5  082D               	movf	RfSendSampleWeatherNode@packet,w
  7581  0EB6  3E0A               	addlw	10
  7582  0EB7  0086               	movwf	6
  7583  0EB8  0181               	clrf	1
  7584                           
  7585                           ;packets.c: 49: packet->packet.data[6] = temperature >> 8;
  7586  0EB9  082D               	movf	RfSendSampleWeatherNode@packet,w
  7587  0EBA  3E0C               	addlw	12
  7588  0EBB  0086               	movwf	6
  7589  0EBC  0829               	movf	RfSendSampleWeatherNode@temperature+1,w
  7590  0EBD  0081               	movwf	1
  7591                           
  7592                           ;packets.c: 50: packet->packet.data[5] = temperature & 0xFF;
  7593  0EBE  082D               	movf	RfSendSampleWeatherNode@packet,w
  7594  0EBF  3E0B               	addlw	11
  7595  0EC0  0086               	movwf	6
  7596  0EC1  0828               	movf	RfSendSampleWeatherNode@temperature,w
  7597  0EC2  0081               	movwf	1
  7598                           
  7599                           ;packets.c: 52: packet->packet.data[7] = 1;
  7600  0EC3  082D               	movf	RfSendSampleWeatherNode@packet,w
  7601  0EC4  3E0D               	addlw	13
  7602  0EC5  0086               	movwf	6
  7603  0EC6  0181               	clrf	1
  7604  0EC7  0A81               	incf	1,f
  7605                           
  7606                           ;packets.c: 54: packet->packet.data[9] = humidity >> 8;
  7607  0EC8  082D               	movf	RfSendSampleWeatherNode@packet,w
  7608  0EC9  3E0F               	addlw	15
  7609  0ECA  0086               	movwf	6
  7610  0ECB  082B               	movf	RfSendSampleWeatherNode@humidity+1,w
  7611  0ECC  0081               	movwf	1
  7612                           
  7613                           ;packets.c: 55: packet->packet.data[8] = humidity & 0xFF;
  7614  0ECD  082D               	movf	RfSendSampleWeatherNode@packet,w
  7615  0ECE  3E0E               	addlw	14
  7616  0ECF  0086               	movwf	6
  7617  0ED0  082A               	movf	RfSendSampleWeatherNode@humidity,w
  7618  0ED1  0081               	movwf	1
  7619                           
  7620                           ;packets.c: 57: Mrf49xaTxPacket(inst, packet, 0, 1);
  7621  0ED2  082D               	movf	RfSendSampleWeatherNode@packet,w
  7622  0ED3  00A0               	movwf	Mrf49xaTxPacket@packet
  7623  0ED4  01A1               	clrf	Mrf49xaTxPacket@response
  7624  0ED5  01A2               	clrf	Mrf49xaTxPacket@needAck
  7625  0ED6  0AA2               	incf	Mrf49xaTxPacket@needAck,f
  7626  0ED7  082C               	movf	RfSendSampleWeatherNode@inst,w
  7627  0ED8  2EF6               	ljmp	_Mrf49xaTxPacket
  7628  0ED9                     __end_of_RfSendSampleWeatherNode:	
  7629  0ED9                     __ptext7:	
  7630 ;; *************** function _Mrf49xaAllocPacket *****************
  7631 ;; Defined at:
  7632 ;;		line 109 in file "../../../src/devices/mrf49xa_mac.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7635 ;;		 -> rfTrcvStatus(76), 
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;  inst            1    0[BANK0 ] PTR struct rfTrcvStatus_
  7638 ;;		 -> rfTrcvStatus(76), 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7641 ;; Registers used:
  7642 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7643 ;; Tracked objects:
  7644 ;;		On entry : 1F/0
  7645 ;;		On exit  : 1F/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7648 ;;      Params:         0       0       0       0
  7649 ;;      Locals:         0       1       0       0
  7650 ;;      Temps:          0       0       0       0
  7651 ;;      Totals:         0       1       0       0
  7652 ;;Total ram usage:        1 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; Hardware stack levels required when called:    5
  7655 ;; This function calls:
  7656 ;;		Nothing
  7657 ;; This function is called by:
  7658 ;;		_RfSendPowerState
  7659 ;;		_RfSendSampleWeatherNode
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _Mrf49xaAllocPacket
  7665  0ED9                     _Mrf49xaAllocPacket:	
  7666                           
  7667                           ;incstack = 0
  7668                           ; Regs used in _Mrf49xaAllocPacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7669                           ;Mrf49xaAllocPacket@inst stored from wreg
  7670  0ED9  00A0               	movwf	Mrf49xaAllocPacket@inst
  7671                           
  7672                           ;mrf49xa_mac.c: 111: if (inst->rxPacket[0].state == PKT_FREE)
  7673  0EDA  0A20               	incf	Mrf49xaAllocPacket@inst,w
  7674  0EDB  0086               	movwf	6
  7675  0EDC  0187               	clrf	7
  7676  0EDD  0881               	movf	1,f
  7677  0EDE  1D03               	skipz
  7678  0EDF  2EE7               	goto	l3299
  7679                           
  7680                           ;mrf49xa_mac.c: 112: {
  7681                           ;mrf49xa_mac.c: 113: inst->rxPacket[0].state = PKT_SW_BUSY;
  7682  0EE0  0A20               	incf	Mrf49xaAllocPacket@inst,w
  7683  0EE1  0086               	movwf	6
  7684  0EE2  3006               	movlw	6
  7685  0EE3  0081               	movwf	1
  7686                           
  7687                           ;mrf49xa_mac.c: 114: return &(inst->rxPacket[0]);
  7688  0EE4  0820               	movf	Mrf49xaAllocPacket@inst,w
  7689  0EE5  3E01               	addlw	1
  7690  0EE6  0008               	return
  7691  0EE7                     l3299:	
  7692                           
  7693                           ;mrf49xa_mac.c: 115: }
  7694                           ;mrf49xa_mac.c: 117: if (inst->rxPacket[1].state == PKT_FREE)
  7695  0EE7  0820               	movf	Mrf49xaAllocPacket@inst,w
  7696  0EE8  3E19               	addlw	25
  7697  0EE9  0086               	movwf	6
  7698  0EEA  0187               	clrf	7
  7699  0EEB  0881               	movf	1,f
  7700  0EEC  1D03               	skipz
  7701  0EED  3400               	retlw	0
  7702                           
  7703                           ;mrf49xa_mac.c: 118: {
  7704                           ;mrf49xa_mac.c: 119: inst->rxPacket[1].state = PKT_SW_BUSY;
  7705  0EEE  0820               	movf	Mrf49xaAllocPacket@inst,w
  7706  0EEF  3E19               	addlw	25
  7707  0EF0  0086               	movwf	6
  7708  0EF1  3006               	movlw	6
  7709  0EF2  0081               	movwf	1
  7710                           
  7711                           ;mrf49xa_mac.c: 120: return &(inst->rxPacket[1]);
  7712  0EF3  0820               	movf	Mrf49xaAllocPacket@inst,w
  7713  0EF4  3E19               	addlw	25
  7714  0EF5  0008               	return
  7715  0EF6                     __end_of_Mrf49xaAllocPacket:	
  7716                           ;mrf49xa_mac.c: 121: }
  7717                           ;mrf49xa_mac.c: 123: return (0);
  7718                           
  7719  0EF6                     __ptext56:	
  7720 ;; *************** function _Mrf49xaTxPacket *****************
  7721 ;; Defined at:
  7722 ;;		line 17 in file "../../../src/devices/mrf49xa_mac.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  7725 ;;		 -> rfTrcvStatus(76), 
  7726 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  7727 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  7728 ;;  response        1    1[BANK0 ] unsigned char 
  7729 ;;  needAck         1    2[BANK0 ] unsigned char 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  inst            1    7[BANK0 ] PTR struct rfTrcvStatus_
  7732 ;;		 -> rfTrcvStatus(76), 
  7733 ;;  i               1    6[BANK0 ] unsigned char 
  7734 ;;  crc             1    5[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      unsigned char 
  7737 ;; Registers used:
  7738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7739 ;; Tracked objects:
  7740 ;;		On entry : 1F/0
  7741 ;;		On exit  : 1F/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7744 ;;      Params:         0       3       0       0
  7745 ;;      Locals:         0       3       0       0
  7746 ;;      Temps:          0       2       0       0
  7747 ;;      Totals:         0       8       0       0
  7748 ;;Total ram usage:        8 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    5
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_Mrf49xaTxAck
  7755 ;;		_HandlePacket
  7756 ;;		_RfSendPowerState
  7757 ;;		_RfSendSampleWeatherNode
  7758 ;; This function uses a non-reentrant model
  7759 ;;
  7760                           
  7761                           
  7762                           ;psect for function _Mrf49xaTxPacket
  7763  0EF6                     _Mrf49xaTxPacket:	
  7764                           
  7765                           ;incstack = 0
  7766                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  7767                           ;Mrf49xaTxPacket@inst stored from wreg
  7768  0EF6  00A7               	movwf	Mrf49xaTxPacket@inst
  7769                           
  7770                           ;mrf49xa_mac.c: 19: uint8_t i, crc = 0;
  7771  0EF7  01A5               	clrf	Mrf49xaTxPacket@crc
  7772                           
  7773                           ;mrf49xa_mac.c: 21: if (&(inst->txPacket) == packet)
  7774  0EF8  3E31               	addlw	49
  7775  0EF9  0620               	xorwf	Mrf49xaTxPacket@packet,w
  7776  0EFA  1D03               	skipz
  7777  0EFB  2F1C               	goto	l3209
  7778                           
  7779                           ;mrf49xa_mac.c: 22: {
  7780                           ;mrf49xa_mac.c: 23: if (response)
  7781  0EFC  0821               	movf	Mrf49xaTxPacket@response,w
  7782  0EFD  1903               	btfsc	3,2
  7783  0EFE  2F07               	goto	l397
  7784                           
  7785                           ;mrf49xa_mac.c: 24: {
  7786                           ;mrf49xa_mac.c: 25: inst->txPacket.packet.dst = inst->txPacket.packet.src;
  7787  0EFF  0827               	movf	Mrf49xaTxPacket@inst,w
  7788  0F00  3E34               	addlw	52
  7789  0F01  0086               	movwf	6
  7790  0F02  0187               	clrf	7
  7791  0F03  0827               	movf	Mrf49xaTxPacket@inst,w
  7792  0F04  3E33               	addlw	51
  7793  0F05  27F6  3188         	fcall	PL22	;call to abstracted procedure
  7794  0F07                     l397:	
  7795                           
  7796                           ;mrf49xa_mac.c: 26: }
  7797                           ;mrf49xa_mac.c: 27: inst->txPacket.packet.src = inst->nodeId;
  7798  0F07  0827               	movf	Mrf49xaTxPacket@inst,w
  7799  0F08  3E33               	addlw	51
  7800  0F09  0086               	movwf	6
  7801  0F0A  0187               	clrf	7
  7802  0F0B  0827               	movf	Mrf49xaTxPacket@inst,w
  7803  0F0C  3E4A               	addlw	74
  7804  0F0D  0084               	movwf	4
  7805  0F0E  0185               	clrf	5
  7806  0F0F  0800               	movf	0,w
  7807  0F10  0081               	movwf	1
  7808                           
  7809                           ;mrf49xa_mac.c: 28: inst->txPacket.packet.size += 5;
  7810  0F11  0827               	movf	Mrf49xaTxPacket@inst,w
  7811  0F12  3E32               	addlw	50
  7812  0F13  0086               	movwf	6
  7813  0F14  3005               	movlw	5
  7814  0F15  0781               	addwf	1,f
  7815                           
  7816                           ;mrf49xa_mac.c: 30: inst->txPacket.state = PKT_READY_FOR_TX;
  7817  0F16  0827               	movf	Mrf49xaTxPacket@inst,w
  7818  0F17  3E31               	addlw	49
  7819  0F18  0086               	movwf	6
  7820                           
  7821                           ;mrf49xa_mac.c: 31: inst->txPacket.retry = 0;
  7822                           
  7823                           ;mrf49xa_mac.c: 32: inst->txPacket.retransmit = 0;
  7824                           
  7825                           ;mrf49xa_mac.c: 33: inst->txPacket.needAck = (needAck == ((uint8_t)1)) ? NEED_ACK : NO_A
      +                          CK;
  7826                           
  7827                           ;mrf49xa_mac.c: 34: inst->txPacket.crc = 0;
  7828  0F19  27AC               	fcall	PL8	;call to abstracted procedure
  7829  0F1A  0181               	clrf	1
  7830                           
  7831                           ;mrf49xa_mac.c: 35: return ((uint8_t)1);
  7832  0F1B  3401               	retlw	1
  7833  0F1C                     l3209:	
  7834                           
  7835                           ;mrf49xa_mac.c: 36: }
  7836                           ;mrf49xa_mac.c: 39: if (inst->txPacket.state != PKT_FREE)
  7837  0F1C  0827               	movf	Mrf49xaTxPacket@inst,w
  7838  0F1D  3E31               	addlw	49
  7839  0F1E  0086               	movwf	6
  7840  0F1F  0187               	clrf	7
  7841  0F20  0801               	movf	1,w
  7842  0F21  3A00               	xorlw	0
  7843  0F22  1D03               	btfss	3,2
  7844                           
  7845                           ;mrf49xa_mac.c: 40: {
  7846                           ;mrf49xa_mac.c: 42: return ((uint8_t)0);
  7847  0F23  3400               	retlw	0
  7848                           
  7849                           ;mrf49xa_mac.c: 44: else
  7850                           ;mrf49xa_mac.c: 45: {
  7851                           ;mrf49xa_mac.c: 46: if (response)
  7852  0F24  0821               	movf	Mrf49xaTxPacket@response,w
  7853  0F25  1903               	btfsc	3,2
  7854  0F26  2F2E               	goto	l3221
  7855                           
  7856                           ;mrf49xa_mac.c: 47: {
  7857                           ;mrf49xa_mac.c: 48: packet->packet.dst = packet->packet.src;
  7858  0F27  0820               	movf	Mrf49xaTxPacket@packet,w
  7859  0F28  3E03               	addlw	3
  7860  0F29  0086               	movwf	6
  7861  0F2A  0820               	movf	Mrf49xaTxPacket@packet,w
  7862  0F2B  3E02               	addlw	2
  7863  0F2C  27F6  3188         	fcall	PL22	;call to abstracted procedure
  7864  0F2E                     l3221:	
  7865                           
  7866                           ;mrf49xa_mac.c: 49: }
  7867                           ;mrf49xa_mac.c: 50: packet->packet.src = cfgRam.nodeId;
  7868  0F2E  0820               	movf	Mrf49xaTxPacket@packet,w
  7869  0F2F  3E02               	addlw	2
  7870  0F30  0086               	movwf	6
  7871  0F31  0187               	clrf	7
  7872  0F32  0837               	movf	_cfgRam,w
  7873  0F33  0081               	movwf	1
  7874                           
  7875                           ;mrf49xa_mac.c: 51: packet->packet.size += 5;
  7876  0F34  0A20               	incf	Mrf49xaTxPacket@packet,w
  7877  0F35  0086               	movwf	6
  7878  0F36  3005               	movlw	5
  7879  0F37  0781               	addwf	1,f
  7880                           
  7881                           ;mrf49xa_mac.c: 53: packet->state = PKT_FREE;
  7882  0F38  0820               	movf	Mrf49xaTxPacket@packet,w
  7883  0F39  0086               	movwf	6
  7884  0F3A  0181               	clrf	1
  7885                           
  7886                           ;mrf49xa_mac.c: 56: for (i = 0; i < (16 + 5); i++)
  7887  0F3B  01A6               	clrf	Mrf49xaTxPacket@i
  7888  0F3C                     l3233:	
  7889                           
  7890                           ;mrf49xa_mac.c: 57: {
  7891                           ;mrf49xa_mac.c: 58: inst->txPacket.raw[i] = packet->raw[i];
  7892  0F3C  0826               	movf	Mrf49xaTxPacket@i,w
  7893  0F3D  0727               	addwf	Mrf49xaTxPacket@inst,w
  7894  0F3E  00A3               	movwf	??_Mrf49xaTxPacket
  7895  0F3F  3E32               	addlw	50
  7896  0F40  0086               	movwf	6
  7897  0F41  0187               	clrf	7
  7898  0F42  0826               	movf	Mrf49xaTxPacket@i,w
  7899  0F43  0720               	addwf	Mrf49xaTxPacket@packet,w
  7900  0F44  00A4               	movwf	??_Mrf49xaTxPacket+1
  7901  0F45  0A24               	incf	??_Mrf49xaTxPacket+1,w
  7902  0F46  0084               	movwf	4
  7903  0F47  0185               	clrf	5
  7904  0F48  0800               	movf	0,w
  7905  0F49  0081               	movwf	1
  7906  0F4A  3015               	movlw	21
  7907  0F4B  0AA6               	incf	Mrf49xaTxPacket@i,f
  7908  0F4C  0226               	subwf	Mrf49xaTxPacket@i,w
  7909  0F4D  1C03               	skipc
  7910  0F4E  2F3C               	goto	l3233
  7911                           
  7912                           ;mrf49xa_mac.c: 59: }
  7913                           ;mrf49xa_mac.c: 60: for (i = 0; i < packet->packet.size; i++)
  7914  0F4F  01A6               	clrf	Mrf49xaTxPacket@i
  7915  0F50                     l404:	
  7916  0F50  0A20               	incf	Mrf49xaTxPacket@packet,w
  7917  0F51  0086               	movwf	6
  7918  0F52  0187               	clrf	7
  7919  0F53  0801               	movf	1,w
  7920  0F54  0226               	subwf	Mrf49xaTxPacket@i,w
  7921  0F55  1803               	btfsc	3,0
  7922  0F56  2F60               	goto	l3245
  7923                           
  7924                           ;mrf49xa_mac.c: 61: {
  7925                           ;mrf49xa_mac.c: 62: crc = crc ^ inst->txPacket.raw[i];
  7926  0F57  0826               	movf	Mrf49xaTxPacket@i,w
  7927  0F58  0727               	addwf	Mrf49xaTxPacket@inst,w
  7928  0F59  00A3               	movwf	??_Mrf49xaTxPacket
  7929  0F5A  3E32               	addlw	50
  7930  0F5B  0086               	movwf	6
  7931  0F5C  0801               	movf	1,w
  7932  0F5D  06A5               	xorwf	Mrf49xaTxPacket@crc,f
  7933  0F5E  0AA6               	incf	Mrf49xaTxPacket@i,f
  7934  0F5F  2F50               	goto	l404
  7935  0F60                     l3245:	
  7936                           
  7937                           ;mrf49xa_mac.c: 63: }
  7938                           ;mrf49xa_mac.c: 65: inst->txPacket.state = PKT_READY_FOR_TX;
  7939  0F60  0827               	movf	Mrf49xaTxPacket@inst,w
  7940  0F61  3E31               	addlw	49
  7941  0F62  0086               	movwf	6
  7942  0F63  0187               	clrf	7
  7943                           
  7944                           ;mrf49xa_mac.c: 66: inst->txPacket.retry = 0;
  7945                           
  7946                           ;mrf49xa_mac.c: 67: inst->txPacket.retransmit = 0;
  7947                           
  7948                           ;mrf49xa_mac.c: 68: inst->txPacket.needAck = (needAck == ((uint8_t)1)) ? NEED_ACK : NO_A
      +                          CK;
  7949                           
  7950                           ;mrf49xa_mac.c: 70: inst->txPacket.crc = crc;
  7951  0F64  27AC               	fcall	PL8	;call to abstracted procedure
  7952  0F65  0825               	movf	Mrf49xaTxPacket@crc,w
  7953  0F66  0081               	movwf	1
  7954  0F67  3401               	retlw	1
  7955  0F68                     __end_of_Mrf49xaTxPacket:	
  7956  0F68                     __ptext46:	
  7957 ;; *************** function _handleCfgRead *****************
  7958 ;; Defined at:
  7959 ;;		line 102 in file "../../../src/rfstack/client.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7962 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7965 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  7966 ;;  index           1    7[BANK0 ] unsigned char 
  7967 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;		None               void
  7970 ;; Registers used:
  7971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 1F/0
  7974 ;;		On exit  : 1F/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7977 ;;      Params:         0       0       0       0
  7978 ;;      Locals:         0       3       0       0
  7979 ;;      Temps:          0       0       0       0
  7980 ;;      Totals:         0       3       0       0
  7981 ;;Total ram usage:        3 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    6
  7984 ;; This function calls:
  7985 ;;		_CfgGetSizeByType
  7986 ;;		_memcpy
  7987 ;; This function is called by:
  7988 ;;		_HandlePacket
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _handleCfgRead
  7994  0F68                     _handleCfgRead:	
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7998                           ;handleCfgRead@packet stored from wreg
  7999  0F68  00A8               	movwf	handleCfgRead@packet
  8000                           
  8001                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  8002  0F69  0086               	movwf	6
  8003  0F6A  0187               	clrf	7
  8004  0F6B  3F46               	moviw [6]fsr1
  8005  0F6C  00A7               	movwf	handleCfgRead@index
  8006                           
  8007                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  8008  0F6D  0727               	addwf	handleCfgRead@index,w
  8009  0F6E  0727               	addwf	handleCfgRead@index,w
  8010  0F6F  3E59               	addlw	low (_parameters| (0+32768))
  8011  0F70  3182               	movlp	high __stringtab
  8012  0F71  000A               	callw
  8013  0F72  3188               	pagesel	$	;select current page
  8014  0F73  279A               	fcall	_CfgGetSizeByType
  8015  0F74  00A6               	movwf	handleCfgRead@nrOfBytes
  8016                           
  8017                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  8018  0F75  0A28               	incf	handleCfgRead@packet,w
  8019  0F76  0086               	movwf	6
  8020  0F77  0187               	clrf	7
  8021  0F78  0826               	movf	handleCfgRead@nrOfBytes,w
  8022  0F79  3E02               	addlw	2
  8023  0F7A  0081               	movwf	1
  8024                           
  8025                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  8026  0F7B  0828               	movf	handleCfgRead@packet,w
  8027  0F7C  3E04               	addlw	4
  8028  0F7D  0086               	movwf	6
  8029  0F7E  30B2               	movlw	178
  8030  0F7F  0081               	movwf	1
  8031                           
  8032                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  8033  0F80  0828               	movf	handleCfgRead@packet,w
  8034  0F81  3E07               	addlw	7
  8035  0F82  0086               	movwf	6
  8036  0F83  0827               	movf	handleCfgRead@index,w
  8037  0F84  0727               	addwf	handleCfgRead@index,w
  8038  0F85  0727               	addwf	handleCfgRead@index,w
  8039  0F86  3E5A               	addlw	low ((_parameters| (0+32768)+1))
  8040  0F87  3182               	movlp	high __stringtab
  8041  0F88  000A               	callw
  8042  0F89  3188               	pagesel	$	;select current page
  8043  0F8A  0081               	movwf	1
  8044                           
  8045                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  8046  0F8B  0827               	movf	handleCfgRead@index,w
  8047  0F8C  0727               	addwf	handleCfgRead@index,w
  8048  0F8D  0727               	addwf	handleCfgRead@index,w
  8049  0F8E  3E5B               	addlw	low ((_parameters| (0+32768)+2))
  8050  0F8F  3182               	movlp	high __stringtab
  8051  0F90  000A               	callw
  8052  0F91  3188               	pagesel	$	;select current page
  8053  0F92  00A0               	movwf	memcpy@s1
  8054  0F93  0826               	movf	handleCfgRead@nrOfBytes,w
  8055  0F94  00A1               	movwf	memcpy@n
  8056  0F95  01A2               	clrf	memcpy@n+1
  8057  0F96  0828               	movf	handleCfgRead@packet,w
  8058  0F97  3E08               	addlw	8
  8059  0F98  3182  2AD2         	ljmp	_memcpy
  8060  0F9A                     __end_of_handleCfgRead:	
  8061  0F9A                     __ptext48:	
  8062 ;; *************** function _CfgGetSizeByType *****************
  8063 ;; Defined at:
  8064 ;;		line 29 in file "../../../src/node/config.c"
  8065 ;; Parameters:    Size  Location     Type
  8066 ;;  type            1    wreg     enum E4251
  8067 ;; Auto vars:     Size  Location     Type
  8068 ;;  type            1    0[BANK0 ] enum E4251
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      unsigned char 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8073 ;; Tracked objects:
  8074 ;;		On entry : 1F/0
  8075 ;;		On exit  : 1F/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8078 ;;      Params:         0       0       0       0
  8079 ;;      Locals:         0       1       0       0
  8080 ;;      Temps:          0       0       0       0
  8081 ;;      Totals:         0       1       0       0
  8082 ;;Total ram usage:        1 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    5
  8085 ;; This function calls:
  8086 ;;		Nothing
  8087 ;; This function is called by:
  8088 ;;		_handleCfgRead
  8089 ;;		_handleCfgWrite
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           
  8094                           ;psect for function _CfgGetSizeByType
  8095  0F9A                     _CfgGetSizeByType:	
  8096                           
  8097                           ;incstack = 0
  8098                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  8099                           ;CfgGetSizeByType@type stored from wreg
  8100  0F9A  00A0               	movwf	CfgGetSizeByType@type
  8101                           
  8102                           ;config.c: 31: switch(type)
  8103  0F9B  2FA0               	goto	l3479
  8104  0F9C                     l3461:	
  8105  0F9C  3401               	retlw	1
  8106  0F9D                     l3465:	
  8107  0F9D  3402               	retlw	2
  8108  0F9E                     l3469:	
  8109  0F9E  3404               	retlw	4
  8110  0F9F                     l3473:	
  8111  0F9F  3400               	retlw	0
  8112  0FA0                     l3479:	
  8113  0FA0  0820               	movf	CfgGetSizeByType@type,w
  8114                           
  8115                           ; Switch size 1, requested type "space"
  8116                           ; Number of cases is 3, Range of values is 0 to 2
  8117                           ; switch strategies available:
  8118                           ; Name         Instructions Cycles
  8119                           ; simple_byte           10     6 (average)
  8120                           ; direct_byte           12     6 (fixed)
  8121                           ; jumptable            260     6 (fixed)
  8122                           ;	Chosen strategy is simple_byte
  8123  0FA1  3A00               	xorlw	0	; case 0
  8124  0FA2  1903               	skipnz
  8125  0FA3  2F9C               	goto	l3461
  8126  0FA4  3A01               	xorlw	1	; case 1
  8127  0FA5  1903               	skipnz
  8128  0FA6  2F9D               	goto	l3465
  8129  0FA7  3A03               	xorlw	3	; case 2
  8130  0FA8  1903               	skipnz
  8131  0FA9  2F9E               	goto	l3469
  8132  0FAA  2F9F               	goto	l3473
  8133  0FAB  0008               	return
  8134  0FAC                     __end_of_CfgGetSizeByType:	
  8135  0FAC                     PL8:	
  8136  0FAC  0181               	clrf	1
  8137  0FAD  0A81               	incf	1,f
  8138  0FAE  0827               	movf	Mrf49xaTxPacket@inst,w
  8139  0FAF  3E48               	addlw	72
  8140  0FB0  0086               	movwf	6
  8141  0FB1  30F0               	movlw	-16
  8142  0FB2  0581               	andwf	1,f
  8143  0FB3  0827               	movf	Mrf49xaTxPacket@inst,w
  8144  0FB4  3E48               	addlw	72
  8145  0FB5  0086               	movwf	6
  8146  0FB6  30CF               	movlw	-49
  8147  0FB7  0581               	andwf	1,f
  8148  0FB8  0322               	decf	Mrf49xaTxPacket@needAck,w
  8149  0FB9  3000               	movlw	0
  8150  0FBA  1903               	skipnz
  8151  0FBB  3001               	movlw	1
  8152  0FBC  00A3               	movwf	??_Mrf49xaTxPacket
  8153  0FBD  0827               	movf	Mrf49xaTxPacket@inst,w
  8154  0FBE  3E48               	addlw	72
  8155  0FBF  0086               	movwf	6
  8156  0FC0  0EA3               	swapf	??_Mrf49xaTxPacket,f
  8157  0FC1  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8158  0FC2  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8159  0FC3  0801               	movf	1,w
  8160  0FC4  0623               	xorwf	??_Mrf49xaTxPacket,w
  8161  0FC5  393F               	andlw	-193
  8162  0FC6  0623               	xorwf	??_Mrf49xaTxPacket,w
  8163  0FC7  0081               	movwf	1
  8164  0FC8  0827               	movf	Mrf49xaTxPacket@inst,w
  8165  0FC9  3E47               	addlw	71
  8166  0FCA  0086               	movwf	6
  8167  0FCB  0008               	return
  8168  0FCC                     __end_ofPL8:	
  8169  0FCC                     PL10:	
  8170  0FCC  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  8171  0FCD  397F               	andlw	127
  8172  0FCE  0020               	movlb	0	; select bank0
  8173  0FCF  00A4               	movwf	??_Mrf49xaServe
  8174  0FD0  0AA4               	incf	??_Mrf49xaServe,f
  8175  0FD1  0021               	movlb	1	; select bank1
  8176  0FD2  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  8177  0FD3  0020               	movlb	0	; select bank0
  8178  0FD4  0624               	xorwf	??_Mrf49xaServe,w
  8179  0FD5  3980               	andlw	-128
  8180  0FD6  0624               	xorwf	??_Mrf49xaServe,w
  8181  0FD7  0021               	movlb	1	; select bank1
  8182  0FD8  0008               	return
  8183  0FD9                     __end_ofPL10:	
  8184  0FD9                     PL12:	
  8185  0FD9  0086               	movwf	6
  8186  0FDA  0187               	clrf	7
  8187  0FDB  0801               	movf	1,w
  8188  0FDC  390F               	andlw	15
  8189  0FDD  00AE               	movwf	??_Mrf49xaTick
  8190  0FDE  0AAE               	incf	??_Mrf49xaTick,f
  8191  0FDF  0801               	movf	1,w
  8192  0FE0  062E               	xorwf	??_Mrf49xaTick,w
  8193  0FE1  39F0               	andlw	-16
  8194  0FE2  062E               	xorwf	??_Mrf49xaTick,w
  8195  0FE3  0081               	movwf	1
  8196  0FE4  0008               	return
  8197  0FE5                     __end_ofPL12:	
  8198  0FE5                     PL16:	
  8199  0FE5  0020               	movlb	0	; select bank0
  8200  0FE6  0825               	movf	Mrf49xaServe@data,w
  8201  0FE7  0081               	movwf	1
  8202  0FE8  0021               	movlb	1	; select bank1
  8203  0FE9  0820               	movf	_rfTrcvStatus^(0+128),w
  8204  0FEA  0008               	return
  8205  0FEB                     __end_ofPL16:	
  8206  0FEB                     PL18:	
  8207  0FEB  0187               	clrf	7
  8208  0FEC  0081               	movwf	1
  8209  0FED  0828               	movf	handleCfgCmd@packet,w
  8210  0FEE  3E07               	addlw	7
  8211  0FEF  0086               	movwf	6
  8212  0FF0  0008               	return
  8213  0FF1                     __end_ofPL18:	
  8214  0FF1                     PL20:	
  8215  0FF1  3040               	movlw	64
  8216  0FF2  0020               	movlb	0	; select bank0
  8217  0FF3  00A0               	movwf	Sleepy@ms
  8218  0FF4  01A1               	clrf	Sleepy@ms+1
  8219  0FF5  0008               	return
  8220  0FF6                     __end_ofPL20:	
  8221  0FF6                     PL22:	
  8222  0FF6  0084               	movwf	4
  8223  0FF7  0185               	clrf	5
  8224  0FF8  0800               	movf	0,w
  8225  0FF9  0081               	movwf	1
  8226  0FFA  0008               	return
  8227  0FFB                     __end_ofPL22:	
  8228  0FFB                     PL24:	
  8229  0FFB  0084               	movwf	4
  8230  0FFC  0185               	clrf	5
  8231  0FFD  0800               	movf	0,w
  8232  0FFE  0601               	xorwf	1,w
  8233  0FFF  0008               	return
  8234  1000                     __end_ofPL24:	
  8235                           
  8236                           	psect	dataCOMMON
  8237  0078                     __pdataCOMMON:	
  8238  0078                     _macPtr:	
  8239  0078                     	ds	1
  8240                           
  8241                           	psect	bssBANK0
  8242  0036                     __pbssBANK0:	
  8243  0036                     _powerStatusTicker:	
  8244  0036                     	ds	1
  8245  0037                     _cfgRam:	
  8246  0037                     	ds	9
  8247  0040                     _mrf49Status:	
  8248  0040                     	ds	2
  8249                           
  8250                           	psect	dataBANK0
  8251  0042                     __pdataBANK0:	
  8252  0042                     _coldBoot:	
  8253  0042                     	ds	1
  8254                           
  8255                           	psect	bssBANK1
  8256  00A0                     __pbssBANK1:	
  8257  00A0                     _rfTrcvStatus:	
  8258  00A0                     	ds	76
  8259                           
  8260                           	psect	clrtext
  8261  032B                     clear_ram0:	
  8262                           ;	Called with FSR0 containing the base address, and
  8263                           ;	WREG with the size to clear
  8264                           
  8265  032B  0064               	clrwdt	;clear the watchdog before getting into this loop
  8266  032C                     clrloop0:	
  8267  032C  0180               	clrf	0	;clear RAM location pointed to by FSR
  8268  032D  3101               	addfsr 0,1
  8269  032E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8270  032F  2B2C               	goto	clrloop0	;have we reached the end yet?
  8271  0330  3400               	retlw	0	;all done for this memory range, return
  8272                           
  8273                           	psect	cstackCOMMON
  8274  0070                     __pcstackCOMMON:	
  8275  0070                     ?_SoftI2cStart:	
  8276  0070                     ?_SoftI2cStop:	
  8277                           ; 0 bytes @ 0x0
  8278                           
  8279  0070                     ?_Mrf49xaNeedsReset:	
  8280                           ; 0 bytes @ 0x0
  8281                           
  8282  0070                     ?_Mrf49RxSts:	
  8283                           ; 0 bytes @ 0x0
  8284                           
  8285  0070                     ?_CfgSave:	
  8286                           ; 0 bytes @ 0x0
  8287                           
  8288  0070                     ?_CfgLoad:	
  8289                           ; 0 bytes @ 0x0
  8290                           
  8291  0070                     ?_PwrAdcWake:	
  8292                           ; 0 bytes @ 0x0
  8293                           
  8294  0070                     ?_PwrAdcSleep:	
  8295                           ; 0 bytes @ 0x0
  8296                           
  8297  0070                     ?_PwrAdcInit:	
  8298                           ; 0 bytes @ 0x0
  8299                           
  8300  0070                     ?_PwrSensorInit:	
  8301                           ; 0 bytes @ 0x0
  8302                           
  8303  0070                     ?_PwrI2cInit:	
  8304                           ; 0 bytes @ 0x0
  8305                           
  8306  0070                     ?_PwrRfInit:	
  8307                           ; 0 bytes @ 0x0
  8308                           
  8309  0070                     ?_PwrSensorSleep:	
  8310                           ; 0 bytes @ 0x0
  8311                           
  8312  0070                     ?_PwrI2cSleep:	
  8313                           ; 0 bytes @ 0x0
  8314                           
  8315  0070                     ?_PwrRfSleep:	
  8316                           ; 0 bytes @ 0x0
  8317                           
  8318  0070                     ?_PwrSensorWake:	
  8319                           ; 0 bytes @ 0x0
  8320                           
  8321  0070                     ?_PwrI2cWake:	
  8322                           ; 0 bytes @ 0x0
  8323                           
  8324  0070                     ?_PwrRfWake:	
  8325                           ; 0 bytes @ 0x0
  8326                           
  8327  0070                     ?_SoftI2cNop:	
  8328                           ; 0 bytes @ 0x0
  8329                           
  8330  0070                     ?_SoftI2cInit:	
  8331                           ; 0 bytes @ 0x0
  8332                           
  8333  0070                     ?_SoftI2cRepeatedStart:	
  8334                           ; 0 bytes @ 0x0
  8335                           
  8336  0070                     ?_AdcInit:	
  8337                           ; 0 bytes @ 0x0
  8338                           
  8339  0070                     ?_AdcDeinit:	
  8340                           ; 0 bytes @ 0x0
  8341                           
  8342  0070                     ?_AdcGo:	
  8343                           ; 0 bytes @ 0x0
  8344                           
  8345  0070                     ?_AdcChSelect:	
  8346                           ; 0 bytes @ 0x0
  8347                           
  8348  0070                     ?_ExtIntInit:	
  8349                           ; 0 bytes @ 0x0
  8350                           
  8351  0070                     ?_ExtIntDeinit:	
  8352                           ; 0 bytes @ 0x0
  8353                           
  8354  0070                     ??_ExtIntDeinit:	
  8355                           ; 0 bytes @ 0x0
  8356                           
  8357  0070                     ?_extInt:	
  8358                           ; 0 bytes @ 0x0
  8359                           
  8360  0070                     ?_Mcp9800Start:	
  8361                           ; 0 bytes @ 0x0
  8362                           
  8363  0070                     ?_Mrf49xaModeRx:	
  8364                           ; 0 bytes @ 0x0
  8365                           
  8366  0070                     ?_Mrf49xaModeTx:	
  8367                           ; 0 bytes @ 0x0
  8368                           
  8369  0070                     ?_Mrf49xaModeSleep:	
  8370                           ; 0 bytes @ 0x0
  8371                           
  8372  0070                     ?_Mrf49xaShutdown:	
  8373                           ; 0 bytes @ 0x0
  8374                           
  8375  0070                     ?_Mrf49xaReboot:	
  8376                           ; 0 bytes @ 0x0
  8377                           
  8378  0070                     ?_Mrf49SpiTx:	
  8379                           ; 0 bytes @ 0x0
  8380                           
  8381  0070                     ?_Mrf49TxByte:	
  8382                           ; 0 bytes @ 0x0
  8383                           
  8384  0070                     ?_Mrf49xaTick:	
  8385                           ; 0 bytes @ 0x0
  8386                           
  8387  0070                     ?_handleFwCmd:	
  8388                           ; 0 bytes @ 0x0
  8389                           
  8390  0070                     ?_handleCfgRead:	
  8391                           ; 0 bytes @ 0x0
  8392                           
  8393  0070                     ?_handleCfgWrite:	
  8394                           ; 0 bytes @ 0x0
  8395                           
  8396  0070                     ?_handleCfgCmd:	
  8397                           ; 0 bytes @ 0x0
  8398                           
  8399  0070                     ?_RfSendPowerState:	
  8400                           ; 0 bytes @ 0x0
  8401                           
  8402  0070                     ?_main:	
  8403                           ; 0 bytes @ 0x0
  8404                           
  8405  0070                     ?i1_Mrf49xaModeRx:	
  8406                           ; 0 bytes @ 0x0
  8407                           
  8408  0070                     ?i1_Mrf49xaNeedsReset:	
  8409                           ; 0 bytes @ 0x0
  8410                           
  8411  0070                     ??i1_Mrf49xaNeedsReset:	
  8412                           ; 0 bytes @ 0x0
  8413                           
  8414  0070                     ?i1_Mrf49SpiTx:	
  8415                           ; 0 bytes @ 0x0
  8416                           
  8417  0070                     ??i1_Mrf49SpiTx:	
  8418                           ; 0 bytes @ 0x0
  8419                           
  8420  0070                     ??i1_Mrf49SpiRx:	
  8421                           ; 0 bytes @ 0x0
  8422                           
  8423  0070                     ?i1_Mrf49RxSts:	
  8424                           ; 0 bytes @ 0x0
  8425                           
  8426  0070                     ?i1_Mrf49TxByte:	
  8427                           ; 0 bytes @ 0x0
  8428                           
  8429  0070                     ?_SoftI2cTxByte:	
  8430                           ; 0 bytes @ 0x0
  8431                           
  8432  0070                     ?_Mrf49xaServe:	
  8433                           ; 1 bytes @ 0x0
  8434                           
  8435  0070                     ?_CfgGetSizeByType:	
  8436                           ; 1 bytes @ 0x0
  8437                           
  8438  0070                     ?_SoftI2cRxByte:	
  8439                           ; 1 bytes @ 0x0
  8440                           
  8441  0070                     ?_AdcIsBusy:	
  8442                           ; 1 bytes @ 0x0
  8443                           
  8444  0070                     ?_Mrf49xaInit:	
  8445                           ; 1 bytes @ 0x0
  8446                           
  8447  0070                     ?_Mrf49SpiRx:	
  8448                           ; 1 bytes @ 0x0
  8449                           
  8450  0070                     ?_Mrf49RxCmd:	
  8451                           ; 1 bytes @ 0x0
  8452                           
  8453  0070                     ?_Mrf49RxByte:	
  8454                           ; 1 bytes @ 0x0
  8455                           
  8456  0070                     ?_Mrf49xaPacketPending:	
  8457                           ; 1 bytes @ 0x0
  8458                           
  8459  0070                     ?_Mrf49xaRxPacket:	
  8460                           ; 1 bytes @ 0x0
  8461                           
  8462  0070                     ?_Mrf49xaAllocPacket:	
  8463                           ; 1 bytes @ 0x0
  8464                           
  8465  0070                     ?i1_Mrf49SpiRx:	
  8466                           ; 1 bytes @ 0x0
  8467                           
  8468  0070                     ?i1_Mrf49RxCmd:	
  8469                           ; 1 bytes @ 0x0
  8470                           
  8471  0070                     ?i1_Mrf49RxByte:	
  8472                           ; 1 bytes @ 0x0
  8473                           
  8474  0070                     ?i1_Mrf49xaServe:	
  8475                           ; 1 bytes @ 0x0
  8476                           
  8477  0070                     i1Mrf49SpiTx@byte:	
  8478                           ; 1 bytes @ 0x0
  8479                           
  8480  0070                     i1Mrf49SpiRx@data:	
  8481                           ; 1 bytes @ 0x0
  8482                           
  8483                           
  8484                           ; 1 bytes @ 0x0
  8485  0070                     	ds	1
  8486  0071                     ?i1_Mrf49TxCmd:	
  8487  0071                     ??i1_Mrf49RxCmd:	
  8488                           ; 0 bytes @ 0x1
  8489                           
  8490  0071                     ??i1_Mrf49RxSts:	
  8491                           ; 0 bytes @ 0x1
  8492                           
  8493  0071                     i1Mrf49TxCmd@val:	
  8494                           ; 0 bytes @ 0x1
  8495                           
  8496  0071                     i1Mrf49RxCmd@cmd:	
  8497                           ; 1 bytes @ 0x1
  8498                           
  8499                           
  8500                           ; 1 bytes @ 0x1
  8501  0071                     	ds	1
  8502  0072                     ??i1_Mrf49TxCmd:	
  8503  0072                     i1Mrf49TxCmd@cmd:	
  8504                           ; 0 bytes @ 0x2
  8505                           
  8506  0072                     i1Mrf49RxCmd@val:	
  8507                           ; 1 bytes @ 0x2
  8508                           
  8509                           
  8510                           ; 1 bytes @ 0x2
  8511  0072                     	ds	1
  8512  0073                     ??i1_Mrf49xaModeRx:	
  8513  0073                     ??i1_Mrf49RxByte:	
  8514                           ; 0 bytes @ 0x3
  8515                           
  8516  0073                     ??i1_Mrf49TxByte:	
  8517                           ; 0 bytes @ 0x3
  8518                           
  8519  0073                     i1Mrf49xaModeRx@k:	
  8520                           ; 0 bytes @ 0x3
  8521                           
  8522  0073                     i1Mrf49TxByte@byte:	
  8523                           ; 1 bytes @ 0x3
  8524                           
  8525                           
  8526                           ; 1 bytes @ 0x3
  8527  0073                     	ds	1
  8528  0074                     ??i1_Mrf49xaServe:	
  8529                           
  8530                           ; 0 bytes @ 0x4
  8531  0074                     	ds	1
  8532  0075                     i1Mrf49xaServe@data:	
  8533                           
  8534                           ; 1 bytes @ 0x5
  8535  0075                     	ds	1
  8536  0076                     ??_extInt:	
  8537                           
  8538                           ; 0 bytes @ 0x6
  8539  0076                     	ds	1
  8540  0077                     extInt@ofw:	
  8541                           
  8542                           ; 1 bytes @ 0x7
  8543  0077                     	ds	1
  8544                           
  8545                           	psect	cstackBANK0
  8546  0020                     __pcstackBANK0:	
  8547  0020                     ??_Mrf49xaNeedsReset:	
  8548  0020                     ?_Sleepy:	
  8549                           ; 0 bytes @ 0x0
  8550                           
  8551  0020                     ??_CfgGetSizeByType:	
  8552                           ; 0 bytes @ 0x0
  8553                           
  8554  0020                     ??_PwrAdcWake:	
  8555                           ; 0 bytes @ 0x0
  8556                           
  8557  0020                     ??_PwrAdcSleep:	
  8558                           ; 0 bytes @ 0x0
  8559                           
  8560  0020                     ??_PwrAdcInit:	
  8561                           ; 0 bytes @ 0x0
  8562                           
  8563  0020                     ??_PwrSensorInit:	
  8564                           ; 0 bytes @ 0x0
  8565                           
  8566  0020                     ??_PwrSensorSleep:	
  8567                           ; 0 bytes @ 0x0
  8568                           
  8569  0020                     ??_PwrI2cSleep:	
  8570                           ; 0 bytes @ 0x0
  8571                           
  8572  0020                     ??_PwrSensorWake:	
  8573                           ; 0 bytes @ 0x0
  8574                           
  8575  0020                     ??_PwrI2cWake:	
  8576                           ; 0 bytes @ 0x0
  8577                           
  8578  0020                     ??_SoftI2cNop:	
  8579                           ; 0 bytes @ 0x0
  8580                           
  8581  0020                     ??_AdcInit:	
  8582                           ; 0 bytes @ 0x0
  8583                           
  8584  0020                     ??_AdcDeinit:	
  8585                           ; 0 bytes @ 0x0
  8586                           
  8587  0020                     ??_AdcGo:	
  8588                           ; 0 bytes @ 0x0
  8589                           
  8590  0020                     ??_AdcIsBusy:	
  8591                           ; 0 bytes @ 0x0
  8592                           
  8593  0020                     ??_AdcChSelect:	
  8594                           ; 0 bytes @ 0x0
  8595                           
  8596  0020                     ??_ExtIntInit:	
  8597                           ; 0 bytes @ 0x0
  8598                           
  8599  0020                     ??_Mrf49SpiTx:	
  8600                           ; 0 bytes @ 0x0
  8601                           
  8602  0020                     ??_Mrf49SpiRx:	
  8603                           ; 0 bytes @ 0x0
  8604                           
  8605  0020                     ??_Mrf49xaPacketPending:	
  8606                           ; 0 bytes @ 0x0
  8607                           
  8608  0020                     ?_Mrf49xaFreePacket:	
  8609                           ; 0 bytes @ 0x0
  8610                           
  8611  0020                     ??_Mrf49xaRxPacket:	
  8612                           ; 0 bytes @ 0x0
  8613                           
  8614  0020                     ??_Mrf49xaAllocPacket:	
  8615                           ; 0 bytes @ 0x0
  8616                           
  8617  0020                     ?_memcpy:	
  8618                           ; 0 bytes @ 0x0
  8619                           
  8620  0020                     ?_Mrf49xaTxPacket:	
  8621                           ; 1 bytes @ 0x0
  8622                           
  8623  0020                     ?_AdcGetResult:	
  8624                           ; 1 bytes @ 0x0
  8625                           
  8626  0020                     AdcChSelect@channel:	
  8627                           ; 2 bytes @ 0x0
  8628                           
  8629  0020                     Mrf49SpiTx@byte:	
  8630                           ; 1 bytes @ 0x0
  8631                           
  8632  0020                     Mrf49SpiRx@data:	
  8633                           ; 1 bytes @ 0x0
  8634                           
  8635  0020                     Mrf49xaPacketPending@inst:	
  8636                           ; 1 bytes @ 0x0
  8637                           
  8638  0020                     Mrf49xaTxPacket@packet:	
  8639                           ; 1 bytes @ 0x0
  8640                           
  8641  0020                     Mrf49xaFreePacket@packet:	
  8642                           ; 1 bytes @ 0x0
  8643                           
  8644  0020                     Mrf49xaRxPacket@inst:	
  8645                           ; 1 bytes @ 0x0
  8646                           
  8647  0020                     Mrf49xaAllocPacket@inst:	
  8648                           ; 1 bytes @ 0x0
  8649                           
  8650  0020                     CfgGetSizeByType@type:	
  8651                           ; 1 bytes @ 0x0
  8652                           
  8653  0020                     memcpy@s1:	
  8654                           ; 1 bytes @ 0x0
  8655                           
  8656  0020                     Sleepy@ms:	
  8657                           ; 1 bytes @ 0x0
  8658                           
  8659                           
  8660                           ; 2 bytes @ 0x0
  8661  0020                     	ds	1
  8662  0021                     ??_SoftI2cStart:	
  8663  0021                     ??_SoftI2cTxByte:	
  8664                           ; 0 bytes @ 0x1
  8665                           
  8666  0021                     ??_SoftI2cStop:	
  8667                           ; 0 bytes @ 0x1
  8668                           
  8669  0021                     ?_Mrf49TxCmd:	
  8670                           ; 0 bytes @ 0x1
  8671                           
  8672  0021                     ??_Mrf49RxSts:	
  8673                           ; 0 bytes @ 0x1
  8674                           
  8675  0021                     ??_SoftI2cRepeatedStart:	
  8676                           ; 0 bytes @ 0x1
  8677                           
  8678  0021                     ??_SoftI2cRxByte:	
  8679                           ; 0 bytes @ 0x1
  8680                           
  8681  0021                     ??_Mrf49RxCmd:	
  8682                           ; 0 bytes @ 0x1
  8683                           
  8684  0021                     ??_Mrf49xaFreePacket:	
  8685                           ; 0 bytes @ 0x1
  8686                           
  8687  0021                     SoftI2cRxByte@ack:	
  8688                           ; 0 bytes @ 0x1
  8689                           
  8690  0021                     Mrf49TxCmd@val:	
  8691                           ; 1 bytes @ 0x1
  8692                           
  8693  0021                     Mrf49RxCmd@cmd:	
  8694                           ; 1 bytes @ 0x1
  8695                           
  8696  0021                     Mrf49xaTxPacket@response:	
  8697                           ; 1 bytes @ 0x1
  8698                           
  8699  0021                     Mrf49xaFreePacket@inst:	
  8700                           ; 1 bytes @ 0x1
  8701                           
  8702  0021                     memcpy@n:	
  8703                           ; 1 bytes @ 0x1
  8704                           
  8705                           
  8706                           ; 2 bytes @ 0x1
  8707  0021                     	ds	1
  8708  0022                     ??_Sleepy:	
  8709  0022                     ??_Mrf49TxCmd:	
  8710                           ; 0 bytes @ 0x2
  8711                           
  8712  0022                     ??_AdcGetResult:	
  8713                           ; 0 bytes @ 0x2
  8714                           
  8715  0022                     ?_AdcSample:	
  8716                           ; 0 bytes @ 0x2
  8717                           
  8718  0022                     SoftI2cTxByte@data:	
  8719                           ; 2 bytes @ 0x2
  8720                           
  8721  0022                     SoftI2cRxByte@data:	
  8722                           ; 1 bytes @ 0x2
  8723                           
  8724  0022                     Mrf49TxCmd@cmd:	
  8725                           ; 1 bytes @ 0x2
  8726                           
  8727  0022                     Mrf49RxCmd@val:	
  8728                           ; 1 bytes @ 0x2
  8729                           
  8730  0022                     Mrf49xaTxPacket@needAck:	
  8731                           ; 1 bytes @ 0x2
  8732                           
  8733                           
  8734                           ; 1 bytes @ 0x2
  8735  0022                     	ds	1
  8736  0023                     ??_memcpy:	
  8737  0023                     ??_Mrf49xaModeRx:	
  8738                           ; 0 bytes @ 0x3
  8739                           
  8740  0023                     ??_Mrf49xaModeTx:	
  8741                           ; 0 bytes @ 0x3
  8742                           
  8743  0023                     ??_Mrf49xaModeSleep:	
  8744                           ; 0 bytes @ 0x3
  8745                           
  8746  0023                     ??_Mrf49RxByte:	
  8747                           ; 0 bytes @ 0x3
  8748                           
  8749  0023                     ??_Mrf49TxByte:	
  8750                           ; 0 bytes @ 0x3
  8751                           
  8752  0023                     ??_Mrf49xaTxPacket:	
  8753                           ; 0 bytes @ 0x3
  8754                           
  8755  0023                     SoftI2cTxByte@i:	
  8756                           ; 0 bytes @ 0x3
  8757                           
  8758  0023                     SoftI2cRxByte@i:	
  8759                           ; 1 bytes @ 0x3
  8760                           
  8761  0023                     Mrf49xaModeRx@k:	
  8762                           ; 1 bytes @ 0x3
  8763                           
  8764  0023                     Mrf49xaModeTx@k:	
  8765                           ; 1 bytes @ 0x3
  8766                           
  8767  0023                     Mrf49xaModeSleep@k:	
  8768                           ; 1 bytes @ 0x3
  8769                           
  8770  0023                     Mrf49TxByte@byte:	
  8771                           ; 1 bytes @ 0x3
  8772                           
  8773  0023                     Sleepy@b:	
  8774                           ; 1 bytes @ 0x3
  8775                           
  8776  0023                     memcpy@d:	
  8777                           ; 1 bytes @ 0x3
  8778                           
  8779                           
  8780                           ; 1 bytes @ 0x3
  8781  0023                     	ds	1
  8782  0024                     ??_Mrf49xaServe:	
  8783  0024                     ??_PwrI2cInit:	
  8784                           ; 0 bytes @ 0x4
  8785                           
  8786  0024                     ??_PwrRfSleep:	
  8787                           ; 0 bytes @ 0x4
  8788                           
  8789  0024                     ??_PwrRfWake:	
  8790                           ; 0 bytes @ 0x4
  8791                           
  8792  0024                     ??_SoftI2cInit:	
  8793                           ; 0 bytes @ 0x4
  8794                           
  8795  0024                     ??_AdcSample:	
  8796                           ; 0 bytes @ 0x4
  8797                           
  8798  0024                     ??_Mcp9800Start:	
  8799                           ; 0 bytes @ 0x4
  8800                           
  8801  0024                     ??_Mrf49xaShutdown:	
  8802                           ; 0 bytes @ 0x4
  8803                           
  8804  0024                     ??_Mrf49xaReboot:	
  8805                           ; 0 bytes @ 0x4
  8806                           
  8807  0024                     ?_eepromRxBytes:	
  8808                           ; 0 bytes @ 0x4
  8809                           
  8810  0024                     ?_eepromTxBytes:	
  8811                           ; 0 bytes @ 0x4
  8812                           
  8813  0024                     ?_Mcp9800Read:	
  8814                           ; 0 bytes @ 0x4
  8815                           
  8816  0024                     Mcp9800Start@resolution:	
  8817                           ; 2 bytes @ 0x4
  8818                           
  8819  0024                     memcpy@s:	
  8820                           ; 1 bytes @ 0x4
  8821                           
  8822  0024                     eepromRxBytes@address:	
  8823                           ; 1 bytes @ 0x4
  8824                           
  8825  0024                     eepromTxBytes@address:	
  8826                           ; 2 bytes @ 0x4
  8827                           
  8828                           
  8829                           ; 2 bytes @ 0x4
  8830  0024                     	ds	1
  8831  0025                     AdcSample@ch:	
  8832  0025                     Mrf49xaTxPacket@crc:	
  8833                           ; 1 bytes @ 0x5
  8834                           
  8835  0025                     Mrf49xaServe@data:	
  8836                           ; 1 bytes @ 0x5
  8837                           
  8838  0025                     memcpy@d1:	
  8839                           ; 1 bytes @ 0x5
  8840                           
  8841                           
  8842                           ; 1 bytes @ 0x5
  8843  0025                     	ds	1
  8844  0026                     ??_Mcp9800Read:	
  8845  0026                     ??_Mrf49xaInit:	
  8846                           ; 0 bytes @ 0x6
  8847                           
  8848  0026                     ??_handleCfgRead:	
  8849                           ; 0 bytes @ 0x6
  8850                           
  8851  0026                     ??_handleCfgWrite:	
  8852                           ; 0 bytes @ 0x6
  8853                           
  8854  0026                     Mcp9800Read@tempH:	
  8855                           ; 0 bytes @ 0x6
  8856                           
  8857  0026                     Mrf49xaInit@k:	
  8858                           ; 1 bytes @ 0x6
  8859                           
  8860  0026                     eepromRxBytes@data:	
  8861                           ; 1 bytes @ 0x6
  8862                           
  8863  0026                     eepromTxBytes@data:	
  8864                           ; 1 bytes @ 0x6
  8865                           
  8866  0026                     Mrf49xaTxPacket@i:	
  8867                           ; 1 bytes @ 0x6
  8868                           
  8869  0026                     handleCfgRead@nrOfBytes:	
  8870                           ; 1 bytes @ 0x6
  8871                           
  8872  0026                     handleCfgWrite@nrOfBytes:	
  8873                           ; 1 bytes @ 0x6
  8874                           
  8875                           
  8876                           ; 1 bytes @ 0x6
  8877  0026                     	ds	1
  8878  0027                     ??_PwrRfInit:	
  8879  0027                     Mcp9800Read@tempL:	
  8880                           ; 0 bytes @ 0x7
  8881                           
  8882  0027                     eepromRxBytes@size:	
  8883                           ; 1 bytes @ 0x7
  8884                           
  8885  0027                     eepromTxBytes@size:	
  8886                           ; 1 bytes @ 0x7
  8887                           
  8888  0027                     Mrf49xaTxPacket@inst:	
  8889                           ; 1 bytes @ 0x7
  8890                           
  8891  0027                     handleCfgRead@index:	
  8892                           ; 1 bytes @ 0x7
  8893                           
  8894  0027                     handleCfgWrite@index:	
  8895                           ; 1 bytes @ 0x7
  8896                           
  8897                           
  8898                           ; 1 bytes @ 0x7
  8899  0027                     	ds	1
  8900  0028                     ??_CfgSave:	
  8901  0028                     ??_CfgLoad:	
  8902                           ; 0 bytes @ 0x8
  8903                           
  8904  0028                     ??_eepromRxBytes:	
  8905                           ; 0 bytes @ 0x8
  8906                           
  8907  0028                     ??_eepromTxBytes:	
  8908                           ; 0 bytes @ 0x8
  8909                           
  8910  0028                     ??_handleFwCmd:	
  8911                           ; 0 bytes @ 0x8
  8912                           
  8913  0028                     ??_handleCfgCmd:	
  8914                           ; 0 bytes @ 0x8
  8915                           
  8916  0028                     ??_RfSendPowerState:	
  8917                           ; 0 bytes @ 0x8
  8918                           
  8919  0028                     ?_RfSendSampleWeatherNode:	
  8920                           ; 0 bytes @ 0x8
  8921                           
  8922  0028                     ?_Mrf49xaTxAck:	
  8923                           ; 0 bytes @ 0x8
  8924                           
  8925  0028                     Mrf49xaTxAck@packet:	
  8926                           ; 1 bytes @ 0x8
  8927                           
  8928  0028                     handleFwCmd@packet:	
  8929                           ; 1 bytes @ 0x8
  8930                           
  8931  0028                     handleCfgRead@packet:	
  8932                           ; 1 bytes @ 0x8
  8933                           
  8934  0028                     handleCfgWrite@packet:	
  8935                           ; 1 bytes @ 0x8
  8936                           
  8937  0028                     handleCfgCmd@packet:	
  8938                           ; 1 bytes @ 0x8
  8939                           
  8940  0028                     RfSendPowerState@s:	
  8941                           ; 1 bytes @ 0x8
  8942                           
  8943  0028                     RfSendSampleWeatherNode@temperature:	
  8944                           ; 2 bytes @ 0x8
  8945                           
  8946                           
  8947                           ; 2 bytes @ 0x8
  8948  0028                     	ds	1
  8949  0029                     ??_Mrf49xaTxAck:	
  8950  0029                     Mrf49xaTxAck@inst:	
  8951                           ; 0 bytes @ 0x9
  8952                           
  8953                           
  8954                           ; 1 bytes @ 0x9
  8955  0029                     	ds	1
  8956  002A                     ?_HandlePacket:	
  8957  002A                     HandlePacket@packet:	
  8958                           ; 0 bytes @ 0xA
  8959                           
  8960  002A                     RfSendPowerState@inst:	
  8961                           ; 1 bytes @ 0xA
  8962                           
  8963  002A                     RfSendSampleWeatherNode@humidity:	
  8964                           ; 1 bytes @ 0xA
  8965                           
  8966                           
  8967                           ; 2 bytes @ 0xA
  8968  002A                     	ds	1
  8969  002B                     ??_HandlePacket:	
  8970  002B                     RfSendPowerState@packet:	
  8971                           ; 0 bytes @ 0xB
  8972                           
  8973                           
  8974                           ; 1 bytes @ 0xB
  8975  002B                     	ds	1
  8976  002C                     ??_RfSendSampleWeatherNode:	
  8977  002C                     HandlePacket@response:	
  8978                           ; 0 bytes @ 0xC
  8979                           
  8980  002C                     RfSendSampleWeatherNode@inst:	
  8981                           ; 1 bytes @ 0xC
  8982                           
  8983                           
  8984                           ; 1 bytes @ 0xC
  8985  002C                     	ds	1
  8986  002D                     HandlePacket@inst:	
  8987  002D                     RfSendSampleWeatherNode@packet:	
  8988                           ; 1 bytes @ 0xD
  8989                           
  8990                           
  8991                           ; 1 bytes @ 0xD
  8992  002D                     	ds	1
  8993  002E                     ??_Mrf49xaTick:	
  8994                           
  8995                           ; 0 bytes @ 0xE
  8996  002E                     	ds	1
  8997  002F                     Mrf49xaTick@timeout:	
  8998                           
  8999                           ; 1 bytes @ 0xF
  9000  002F                     	ds	1
  9001  0030                     Mrf49xaTick@packet:	
  9002                           
  9003                           ; 1 bytes @ 0x10
  9004  0030                     	ds	1
  9005  0031                     Mrf49xaTick@inst:	
  9006                           
  9007                           ; 1 bytes @ 0x11
  9008  0031                     	ds	1
  9009  0032                     ??_main:	
  9010  0032                     main@humidity:	
  9011                           ; 0 bytes @ 0x12
  9012                           
  9013                           
  9014                           ; 2 bytes @ 0x12
  9015  0032                     	ds	2
  9016  0034                     main@temperature:	
  9017                           
  9018                           ; 2 bytes @ 0x14
  9019  0034                     	ds	2
  9020                           
  9021                           	psect	text4
  9022  0308                     __ptext4:	
  9023 ;; *************** function _AdcInit *****************
  9024 ;; Defined at:
  9025 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;		None
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;		None
  9030 ;; Return value:  Size  Location     Type
  9031 ;;		None               void
  9032 ;; Registers used:
  9033 ;;		wreg, status,2
  9034 ;; Tracked objects:
  9035 ;;		On entry : 1F/1
  9036 ;;		On exit  : 1F/1
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9039 ;;      Params:         0       0       0       0
  9040 ;;      Locals:         0       0       0       0
  9041 ;;      Temps:          0       0       0       0
  9042 ;;      Totals:         0       0       0       0
  9043 ;;Total ram usage:        0 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    5
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_PwrAdcWake
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _AdcInit
  9055  0308                     _AdcInit:	
  9056  0308                     l2773:	
  9057                           ;incstack = 0
  9058                           ; Regs used in _AdcInit: [wreg+status,2]
  9059                           
  9060                           
  9061                           ;adc16.c: 6: FVRCON = 0b11100001;
  9062  0308  30E1               	movlw	225
  9063  0309  0022               	movlb	2	; select bank2
  9064  030A  0097               	movwf	23	;volatile
  9065                           
  9066                           ;adc16.c: 8: ADCON2 = 0b00000000;
  9067  030B  0021               	movlb	1	; select bank1
  9068  030C  019F               	clrf	31	;volatile
  9069                           
  9070                           ;adc16.c: 9: ADCON1 = 0b11110000;
  9071  030D  30F0               	movlw	240
  9072  030E  009E               	movwf	30	;volatile
  9073                           
  9074                           ;adc16.c: 10: ADCON0 = 0b00000000;
  9075  030F  019D               	clrf	29	;volatile
  9076                           
  9077                           ;adc16.c: 12: ADCON0 = 0b00010011;
  9078  0310  3013               	movlw	19
  9079  0311  009D               	movwf	29	;volatile
  9080  0312  0008               	return
  9081  0313                     __end_of_AdcInit:	
  9082                           
  9083                           	psect	text6
  9084  0324                     __ptext6:	
  9085 ;; *************** function _AdcDeinit *****************
  9086 ;; Defined at:
  9087 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;		None               void
  9094 ;; Registers used:
  9095 ;;		status,2
  9096 ;; Tracked objects:
  9097 ;;		On entry : 1F/1
  9098 ;;		On exit  : 1F/1
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9101 ;;      Params:         0       0       0       0
  9102 ;;      Locals:         0       0       0       0
  9103 ;;      Temps:          0       0       0       0
  9104 ;;      Totals:         0       0       0       0
  9105 ;;Total ram usage:        0 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    5
  9108 ;; This function calls:
  9109 ;;		Nothing
  9110 ;; This function is called by:
  9111 ;;		_PwrAdcSleep
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _AdcDeinit
  9117  0324                     _AdcDeinit:	
  9118  0324                     l2781:	
  9119                           ;incstack = 0
  9120                           ; Regs used in _AdcDeinit: [status,2]
  9121                           
  9122                           
  9123                           ;adc16.c: 17: FVRCON = 0;
  9124  0324  0022               	movlb	2	; select bank2
  9125  0325  0197               	clrf	23	;volatile
  9126                           
  9127                           ;adc16.c: 19: ADCON2 = 0;
  9128  0326  0021               	movlb	1	; select bank1
  9129  0327  019F               	clrf	31	;volatile
  9130                           
  9131                           ;adc16.c: 20: ADCON1 = 0;
  9132  0328  019E               	clrf	30	;volatile
  9133                           
  9134                           ;adc16.c: 21: ADCON0 = 0;
  9135  0329  019D               	clrf	29	;volatile
  9136  032A  0008               	return
  9137  032B                     __end_of_AdcDeinit:	
  9138                           
  9139                           	psect	text11
  9140  0000                     __ptext11:	
  9141 ;; *************** function _AdcGetResult *****************
  9142 ;; Defined at:
  9143 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;		None
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;		None
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  2    0[BANK0 ] unsigned int 
  9150 ;; Registers used:
  9151 ;;		wreg
  9152 ;; Tracked objects:
  9153 ;;		On entry : 1F/1
  9154 ;;		On exit  : 1F/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9157 ;;      Params:         0       2       0       0
  9158 ;;      Locals:         0       0       0       0
  9159 ;;      Temps:          0       0       0       0
  9160 ;;      Totals:         0       2       0       0
  9161 ;;Total ram usage:        2 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    5
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		_AdcSample
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171  0000                     _AdcGetResult:	
  9172                           ;psect for function _AdcGetResult
  9173                           
  9174  0000                     __end_of_AdcGetResult:	
  9175                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9176                           
  9177                           ;incstack = 0
  9178                           ; Regs used in _AdcGetResult: [wreg]
  9179                           
  9180                           
  9181                           	psect	text16
  9182  02FB                     __ptext16:	
  9183 ;; *************** function _PwrRfWake *****************
  9184 ;; Defined at:
  9185 ;;		line 135 in file "../../../src/node/power.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;		None               void
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 1F/1
  9196 ;;		On exit  : 1F/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9199 ;;      Params:         0       0       0       0
  9200 ;;      Locals:         0       0       0       0
  9201 ;;      Temps:          0       0       0       0
  9202 ;;      Totals:         0       0       0       0
  9203 ;;Total ram usage:        0 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    9
  9206 ;; This function calls:
  9207 ;;		_Mrf49xaReboot
  9208 ;; This function is called by:
  9209 ;;		_main
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           
  9214                           ;psect for function _PwrRfWake
  9215  02FB                     _PwrRfWake:	
  9216                           
  9217                           ;power.c: 137: WPUAbits.WPUA5 = 1;
  9218                           
  9219                           ;incstack = 0
  9220                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  9221  02FB  0024               	movlb	4	; select bank4
  9222  02FC  168C               	bsf	12,5	;volatile
  9223                           
  9224                           ;power.c: 139: LATBbits.LATB7 = 0;
  9225  02FD  0022               	movlb	2	; select bank2
  9226  02FE  138D               	bcf	13,7	;volatile
  9227                           
  9228                           ;power.c: 140: LATCbits.LATC7 = 0;
  9229  02FF  138E               	bcf	14,7	;volatile
  9230                           
  9231                           ;power.c: 142: TRISAbits.TRISA5 = 1;
  9232  0300  0021               	movlb	1	; select bank1
  9233  0301  168C               	bsf	12,5	;volatile
  9234                           
  9235                           ;power.c: 143: TRISCbits.TRISC5 = 1;
  9236  0302  168E               	bsf	14,5	;volatile
  9237                           
  9238                           ;power.c: 145: INTCONbits.INTE = 1;
  9239  0303  160B               	bsf	11,4	;volatile
  9240                           
  9241                           ;power.c: 146: Mrf49xaReboot();
  9242  0304  318D  2D35         	ljmp	l2969
  9243  0306                     __end_of_PwrRfWake:	
  9244  0306                     __ptext17:	
  9245 ;; *************** function _Mrf49xaReboot *****************
  9246 ;; Defined at:
  9247 ;;		line 140 in file "../../../src/devices/mrf49xa.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;		None
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;		None
  9252 ;; Return value:  Size  Location     Type
  9253 ;;		None               void
  9254 ;; Registers used:
  9255 ;;		wreg, status,2, status,0, pclath, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 1F/1
  9258 ;;		On exit  : 1F/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9261 ;;      Params:         0       0       0       0
  9262 ;;      Locals:         0       0       0       0
  9263 ;;      Temps:          0       0       0       0
  9264 ;;      Totals:         0       0       0       0
  9265 ;;Total ram usage:        0 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    8
  9268 ;; This function calls:
  9269 ;;		_Mrf49xaModeRx
  9270 ;; This function is called by:
  9271 ;;		_PwrRfWake
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           
  9276                           ;psect for function _Mrf49xaReboot
  9277  0306                     _Mrf49xaReboot:	
  9278                           
  9279                           ;mrf49xa.c: 142: Mrf49xaModeRx();
  9280                           
  9281                           ;incstack = 0
  9282                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  9283  0306  318D  2D35         	ljmp	l2969
  9284  0308                     __end_of_Mrf49xaReboot:	
  9285                           
  9286                           	psect	text18
  9287  025F                     __ptext18:	
  9288 ;; *************** function _PwrRfSleep *****************
  9289 ;; Defined at:
  9290 ;;		line 118 in file "../../../src/node/power.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;		None               void
  9297 ;; Registers used:
  9298 ;;		wreg, status,2, status,0, pclath, cstack
  9299 ;; Tracked objects:
  9300 ;;		On entry : 1E/1
  9301 ;;		On exit  : 1F/1
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9304 ;;      Params:         0       0       0       0
  9305 ;;      Locals:         0       0       0       0
  9306 ;;      Temps:          0       0       0       0
  9307 ;;      Totals:         0       0       0       0
  9308 ;;Total ram usage:        0 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    9
  9311 ;; This function calls:
  9312 ;;		_Mrf49xaShutdown
  9313 ;; This function is called by:
  9314 ;;		_main
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           
  9319                           ;psect for function _PwrRfSleep
  9320  025F                     _PwrRfSleep:	
  9321                           
  9322                           ;power.c: 120: Mrf49xaShutdown();
  9323                           
  9324                           ;incstack = 0
  9325                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  9326  025F  226C               	fcall	_Mrf49xaShutdown
  9327                           
  9328                           ;power.c: 121: INTCONbits.INTE = 0;
  9329  0260  120B               	bcf	11,4	;volatile
  9330                           
  9331                           ;power.c: 123: LATAbits.LATA5 = 1;
  9332  0261  0022               	movlb	2	; select bank2
  9333  0262  168C               	bsf	12,5	;volatile
  9334                           
  9335                           ;power.c: 124: LATCbits.LATC5 = 1;
  9336  0263  168E               	bsf	14,5	;volatile
  9337                           
  9338                           ;power.c: 126: LATBbits.LATB7 = 1;
  9339  0264  178D               	bsf	13,7	;volatile
  9340                           
  9341                           ;power.c: 127: LATCbits.LATC7 = 1;
  9342  0265  178E               	bsf	14,7	;volatile
  9343                           
  9344                           ;power.c: 129: WPUAbits.WPUA5 = 0;
  9345  0266  0024               	movlb	4	; select bank4
  9346  0267  128C               	bcf	12,5	;volatile
  9347                           
  9348                           ;power.c: 131: TRISAbits.TRISA5 = 0;
  9349  0268  0021               	movlb	1	; select bank1
  9350  0269  128C               	bcf	12,5	;volatile
  9351                           
  9352                           ;power.c: 132: TRISCbits.TRISC5 = 0;
  9353  026A  128E               	bcf	14,5	;volatile
  9354  026B  0008               	return
  9355  026C                     __end_of_PwrRfSleep:	
  9356  026C                     __ptext19:	
  9357 ;; *************** function _Mrf49xaShutdown *****************
  9358 ;; Defined at:
  9359 ;;		line 132 in file "../../../src/devices/mrf49xa.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;		None
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;		None
  9364 ;; Return value:  Size  Location     Type
  9365 ;;		None               void
  9366 ;; Registers used:
  9367 ;;		wreg, status,2, status,0, pclath, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 1E/1
  9370 ;;		On exit  : 1F/1
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9373 ;;      Params:         0       0       0       0
  9374 ;;      Locals:         0       0       0       0
  9375 ;;      Temps:          0       0       0       0
  9376 ;;      Totals:         0       0       0       0
  9377 ;;Total ram usage:        0 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    8
  9380 ;; This function calls:
  9381 ;;		_Mrf49xaModeSleep
  9382 ;; This function is called by:
  9383 ;;		_PwrRfSleep
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           
  9388                           ;psect for function _Mrf49xaShutdown
  9389  026C                     _Mrf49xaShutdown:	
  9390                           
  9391                           ;mrf49xa.c: 134: Mrf49xaModeSleep();
  9392                           
  9393                           ;incstack = 0
  9394                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  9395  026C  2A6D               	ljmp	l3001
  9396  026D                     __end_of_Mrf49xaShutdown:	
  9397  026D                     __ptext20:	
  9398 ;; *************** function _Mrf49xaModeSleep *****************
  9399 ;; Defined at:
  9400 ;;		line 123 in file "../../../src/devices/mrf49xa.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;		None
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  k               1    3[BANK0 ] unsigned char 
  9405 ;; Return value:  Size  Location     Type
  9406 ;;		None               void
  9407 ;; Registers used:
  9408 ;;		wreg, status,2, status,0, pclath, cstack
  9409 ;; Tracked objects:
  9410 ;;		On entry : 1E/1
  9411 ;;		On exit  : 1F/1
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9414 ;;      Params:         0       0       0       0
  9415 ;;      Locals:         0       1       0       0
  9416 ;;      Temps:          0       0       0       0
  9417 ;;      Totals:         0       1       0       0
  9418 ;;Total ram usage:        1 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; Hardware stack levels required when called:    7
  9421 ;; This function calls:
  9422 ;;		_Mrf49TxCmd
  9423 ;; This function is called by:
  9424 ;;		_Mrf49xaShutdown
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           
  9429                           ;psect for function _Mrf49xaModeSleep
  9430  026D                     _Mrf49xaModeSleep:	
  9431  026D                     l3001:	
  9432                           ;incstack = 0
  9433                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  9434                           
  9435                           
  9436                           ;mrf49xa.c: 125: UI08_t k;
  9437                           ;mrf49xa.c: 126: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  9438  026D  0020               	movlb	0	; select bank0
  9439  026E  301D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9440  026F  01A3               	clrf	Mrf49xaModeSleep@k
  9441  0270  3182               	movlp	high __stringtab
  9442  0271  000A               	callw
  9443  0272  3182               	pagesel	$	;select current page
  9444  0273  3800               	iorlw	0
  9445  0274  1903               	btfsc	3,2
  9446  0275  2A8A               	goto	l3013
  9447  0276                     l3007:	
  9448  0276  3523               	lslf	Mrf49xaModeSleep@k,w
  9449  0277  3E54               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  9450  0278  3182               	movlp	high __stringtab
  9451  0279  000A               	callw
  9452  027A  00A1               	movwf	Mrf49TxCmd@val
  9453  027B  3523               	lslf	Mrf49xaModeSleep@k,w
  9454  027C  3E53               	addlw	low (_mrfRegset_Sleep| (0+32768))
  9455  027D  3182               	movlp	high __stringtab
  9456  027E  000A               	callw
  9457  027F  318D  255A  3182   	fcall	_Mrf49TxCmd
  9458  0282  301D               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9459  0283  0AA3               	incf	Mrf49xaModeSleep@k,f
  9460  0284  3182               	movlp	high __stringtab
  9461  0285  000A               	callw
  9462  0286  3182               	pagesel	$	;select current page
  9463  0287  0223               	subwf	Mrf49xaModeSleep@k,w
  9464  0288  1C03               	skipc
  9465  0289  2A76               	goto	l3007
  9466  028A                     l3013:	
  9467                           
  9468                           ;mrf49xa.c: 128: rfTrcvStatus.state = POWERED_OFF;
  9469  028A  0021               	movlb	1	; select bank1
  9470  028B  3080               	movlw	-128
  9471  028C  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  9472                           
  9473                           ;mrf49xa.c: 129: rfTrcvStatus.hwByte = 0;
  9474  028D  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  9475  028E  0008               	return
  9476  028F                     __end_of_Mrf49xaModeSleep:	
  9477                           
  9478                           	psect	text26
  9479  0313                     __ptext26:	
  9480 ;; *************** function _PwrAdcInit *****************
  9481 ;; Defined at:
  9482 ;;		line 168 in file "../../../src/node/power.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		status,2
  9491 ;; Tracked objects:
  9492 ;;		On entry : 17F/1
  9493 ;;		On exit  : 17F/1
  9494 ;;		Unchanged: 160/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9496 ;;      Params:         0       0       0       0
  9497 ;;      Locals:         0       0       0       0
  9498 ;;      Temps:          0       0       0       0
  9499 ;;      Totals:         0       0       0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    5
  9503 ;; This function calls:
  9504 ;;		Nothing
  9505 ;; This function is called by:
  9506 ;;		_main
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _PwrAdcInit
  9512  0313                     _PwrAdcInit:	
  9513                           
  9514                           ;power.c: 170: ANSELA = 0;
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _PwrAdcInit: [status,2]
  9518  0313  0023               	movlb	3	; select bank3
  9519  0314  018C               	clrf	12	;volatile
  9520                           
  9521                           ;power.c: 171: ANSELB = 0;
  9522  0315  018D               	clrf	13	;volatile
  9523                           
  9524                           ;power.c: 172: ANSELC = 0;
  9525  0316  018E               	clrf	14	;volatile
  9526                           
  9527                           ;power.c: 174: PORTCbits.RC0 = 1;
  9528  0317  0020               	movlb	0	; select bank0
  9529  0318  140E               	bsf	14,0	;volatile
  9530                           
  9531                           ;power.c: 175: TRISCbits.TRISC0 = 0;
  9532  0319  0021               	movlb	1	; select bank1
  9533  031A  100E               	bcf	14,0	;volatile
  9534  031B  0008               	return
  9535  031C                     __end_of_PwrAdcInit:	
  9536                           
  9537                           	psect	text28
  9538  02B3                     __ptext28:	
  9539 ;; *************** function _Mrf49xaRxPacket *****************
  9540 ;; Defined at:
  9541 ;;		line 92 in file "../../../src/devices/mrf49xa_mac.c"
  9542 ;; Parameters:    Size  Location     Type
  9543 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  9544 ;;		 -> rfTrcvStatus(76), 
  9545 ;; Auto vars:     Size  Location     Type
  9546 ;;  inst            1    0[BANK0 ] PTR struct rfTrcvStatus_
  9547 ;;		 -> rfTrcvStatus(76), 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      PTR struct rfTrcvPacket_
  9550 ;; Registers used:
  9551 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9552 ;; Tracked objects:
  9553 ;;		On entry : 1F/0
  9554 ;;		On exit  : 1F/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9557 ;;      Params:         0       0       0       0
  9558 ;;      Locals:         0       1       0       0
  9559 ;;      Temps:          0       0       0       0
  9560 ;;      Totals:         0       1       0       0
  9561 ;;Total ram usage:        1 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    5
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		_Mrf49xaTick
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           
  9572                           ;psect for function _Mrf49xaRxPacket
  9573  02B3                     _Mrf49xaRxPacket:	
  9574                           
  9575                           ;incstack = 0
  9576                           ; Regs used in _Mrf49xaRxPacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  9577                           ;Mrf49xaRxPacket@inst stored from wreg
  9578  02B3  00A0               	movwf	Mrf49xaRxPacket@inst
  9579                           
  9580                           ;mrf49xa_mac.c: 94: if (inst->rxPacket[0].state == PKT_HW_READY_RX)
  9581  02B4  0A20               	incf	Mrf49xaRxPacket@inst,w
  9582  02B5  0086               	movwf	6
  9583  02B6  0187               	clrf	7
  9584  02B7  0801               	movf	1,w
  9585  02B8  3A05               	xorlw	5
  9586  02B9  1D03               	skipz
  9587  02BA  2AC2               	goto	l3279
  9588                           
  9589                           ;mrf49xa_mac.c: 95: {
  9590                           ;mrf49xa_mac.c: 96: inst->rxPacket[0].state = PKT_SW_BUSY;
  9591  02BB  0A20               	incf	Mrf49xaRxPacket@inst,w
  9592  02BC  0086               	movwf	6
  9593  02BD  3006               	movlw	6
  9594  02BE  0081               	movwf	1
  9595                           
  9596                           ;mrf49xa_mac.c: 97: return &(inst->rxPacket[0]);
  9597  02BF  0820               	movf	Mrf49xaRxPacket@inst,w
  9598  02C0  3E01               	addlw	1
  9599  02C1  0008               	return
  9600  02C2                     l3279:	
  9601                           
  9602                           ;mrf49xa_mac.c: 98: }
  9603                           ;mrf49xa_mac.c: 100: if (inst->rxPacket[1].state == PKT_HW_READY_RX)
  9604  02C2  0820               	movf	Mrf49xaRxPacket@inst,w
  9605  02C3  3E19               	addlw	25
  9606  02C4  0086               	movwf	6
  9607  02C5  0187               	clrf	7
  9608  02C6  0801               	movf	1,w
  9609  02C7  3A05               	xorlw	5
  9610  02C8  1D03               	skipz
  9611  02C9  3400               	retlw	0
  9612                           
  9613                           ;mrf49xa_mac.c: 101: {
  9614                           ;mrf49xa_mac.c: 102: inst->rxPacket[1].state = PKT_SW_BUSY;
  9615  02CA  0820               	movf	Mrf49xaRxPacket@inst,w
  9616  02CB  3E19               	addlw	25
  9617  02CC  0086               	movwf	6
  9618  02CD  3006               	movlw	6
  9619  02CE  0081               	movwf	1
  9620                           
  9621                           ;mrf49xa_mac.c: 103: return &(inst->rxPacket[1]);
  9622  02CF  0820               	movf	Mrf49xaRxPacket@inst,w
  9623  02D0  3E19               	addlw	25
  9624  02D1  0008               	return
  9625  02D2                     __end_of_Mrf49xaRxPacket:	
  9626                           ;mrf49xa_mac.c: 104: }
  9627                           ;mrf49xa_mac.c: 106: return (0);
  9628                           
  9629                           
  9630                           	psect	text29
  9631  02EB                     __ptext29:	
  9632 ;; *************** function _Mrf49xaPacketPending *****************
  9633 ;; Defined at:
  9634 ;;		line 8 in file "../../../src/devices/mrf49xa_mac.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;  inst            1    wreg     PTR struct rfTrcvStatus_
  9637 ;;		 -> rfTrcvStatus(76), 
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;  inst            1    0[BANK0 ] PTR struct rfTrcvStatus_
  9640 ;;		 -> rfTrcvStatus(76), 
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  1    wreg      unsigned char 
  9643 ;; Registers used:
  9644 ;;		wreg, fsr1l, fsr1h
  9645 ;; Tracked objects:
  9646 ;;		On entry : 1F/0
  9647 ;;		On exit  : 1F/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9650 ;;      Params:         0       0       0       0
  9651 ;;      Locals:         0       1       0       0
  9652 ;;      Temps:          0       0       0       0
  9653 ;;      Totals:         0       1       0       0
  9654 ;;Total ram usage:        1 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    5
  9657 ;; This function calls:
  9658 ;;		Nothing
  9659 ;; This function is called by:
  9660 ;;		_Mrf49xaTick
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           
  9665                           ;psect for function _Mrf49xaPacketPending
  9666  02EB                     _Mrf49xaPacketPending:	
  9667                           
  9668                           ;incstack = 0
  9669                           ; Regs used in _Mrf49xaPacketPending: [wregfsr1]
  9670                           ;Mrf49xaPacketPending@inst stored from wreg
  9671  02EB  00A0               	movwf	Mrf49xaPacketPending@inst
  9672                           
  9673                           ;mrf49xa_mac.c: 10: if (inst->rxPacket[0].state == PKT_HW_READY_RX ||
  9674                           ;mrf49xa_mac.c: 11: inst->rxPacket[1].state == PKT_HW_READY_RX)
  9675  02EC  0A20               	incf	Mrf49xaPacketPending@inst,w
  9676  02ED  0086               	movwf	6
  9677  02EE  0187               	clrf	7
  9678  02EF  0801               	movf	1,w
  9679  02F0  3A05               	xorlw	5
  9680  02F1  1903               	skipnz
  9681  02F2  3401               	retlw	1
  9682  02F3  0820               	movf	Mrf49xaPacketPending@inst,w
  9683  02F4  3E19               	addlw	25
  9684  02F5  0086               	movwf	6
  9685  02F6  0801               	movf	1,w
  9686  02F7  3A05               	xorlw	5
  9687  02F8  1903               	btfsc	3,2
  9688                           
  9689                           ;mrf49xa_mac.c: 12: return ((uint8_t)1);
  9690  02F9  3401               	retlw	1
  9691                           
  9692                           ;mrf49xa_mac.c: 13: else
  9693                           ;mrf49xa_mac.c: 14: return ((uint8_t)0);
  9694  02FA  3400               	retlw	0
  9695  02FB                     __end_of_Mrf49xaPacketPending:	
  9696                           
  9697                           	psect	text44
  9698  028F                     __ptext44:	
  9699 ;; *************** function _handleFwCmd *****************
  9700 ;; Defined at:
  9701 ;;		line 8 in file "../../../src/rfstack/client.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  9704 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  9707 ;;		 -> rfTrcvStatus.rxPacket(48), NULL(0), rfTrcvStatus(76), 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;		None               void
  9710 ;; Registers used:
  9711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 1F/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9717 ;;      Params:         0       0       0       0
  9718 ;;      Locals:         0       1       0       0
  9719 ;;      Temps:          0       0       0       0
  9720 ;;      Totals:         0       1       0       0
  9721 ;;Total ram usage:        1 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    8
  9724 ;; This function calls:
  9725 ;;		_eepromRxBytes
  9726 ;; This function is called by:
  9727 ;;		_HandlePacket
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           
  9732                           ;psect for function _handleFwCmd
  9733  028F                     _handleFwCmd:	
  9734                           
  9735                           ;incstack = 0
  9736                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9737                           ;handleFwCmd@packet stored from wreg
  9738  028F  00A8               	movwf	handleFwCmd@packet
  9739                           
  9740                           ;client.c: 23: break;
  9741                           
  9742                           ;client.c: 10: switch(packet->packet.data[0])
  9743  0290  3E06               	addlw	6
  9744  0291  0086               	movwf	6
  9745  0292  0187               	clrf	7
  9746  0293  0801               	movf	1,w
  9747                           
  9748                           ; Switch size 1, requested type "space"
  9749                           ; Number of cases is 2, Range of values is 0 to 1
  9750                           ; switch strategies available:
  9751                           ; Name         Instructions Cycles
  9752                           ; simple_byte            7     4 (average)
  9753                           ; direct_byte           10     6 (fixed)
  9754                           ; jumptable            260     6 (fixed)
  9755                           ;	Chosen strategy is simple_byte
  9756  0294  3A00               	xorlw	0	; case 0
  9757  0295  1903               	skipnz
  9758  0296  2AB2               	goto	l532
  9759  0297  3A01               	xorlw	1	; case 1
  9760  0298  1903               	skipnz
  9761  0299  2A9B               	goto	l3435
  9762  029A  2AB2               	goto	l532
  9763  029B                     l3435:	
  9764                           
  9765                           ;client.c: 17: packet->packet.size = 5;
  9766  029B  0A28               	incf	handleFwCmd@packet,w
  9767  029C  0086               	movwf	6
  9768  029D  3005               	movlw	5
  9769  029E  0187               	clrf	7
  9770  029F  0081               	movwf	1
  9771                           
  9772                           ;client.c: 18: packet->packet.data[1] = 0;
  9773  02A0  0828               	movf	handleFwCmd@packet,w
  9774  02A1  3E07               	addlw	7
  9775  02A2  0086               	movwf	6
  9776  02A3  0181               	clrf	1
  9777                           
  9778                           ;client.c: 19: packet->packet.data[2] = 1;
  9779  02A4  0828               	movf	handleFwCmd@packet,w
  9780  02A5  3E08               	addlw	8
  9781  02A6  0086               	movwf	6
  9782  02A7  0181               	clrf	1
  9783  02A8  0A81               	incf	1,f
  9784                           
  9785                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  9786  02A9  01A4               	clrf	eepromRxBytes@address
  9787  02AA  01A5               	clrf	eepromRxBytes@address+1
  9788  02AB  0828               	movf	handleFwCmd@packet,w
  9789  02AC  3E09               	addlw	9
  9790  02AD  00A6               	movwf	eepromRxBytes@data
  9791  02AE  3002               	movlw	2
  9792  02AF  00A7               	movwf	eepromRxBytes@size
  9793  02B0  318A  2A70         	ljmp	l3147
  9794  02B2                     l532:	
  9795  02B2  0008               	return
  9796  02B3                     __end_of_handleFwCmd:	
  9797                           
  9798                           	psect	text47
  9799  02D2                     __ptext47:	
  9800 ;; *************** function _memcpy *****************
  9801 ;; Defined at:
  9802 ;;		line 11 in file "/opt/microchip/xc8/v1.30/sources/common/memcpy.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;  d1              1    wreg     PTR void 
  9805 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), 
  9806 ;;		 -> cfgRam(9), 
  9807 ;;  s1              1    0[BANK0 ] PTR const void 
  9808 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), 
  9809 ;;		 -> cfgRam(9), 
  9810 ;;  n               2    1[BANK0 ] unsigned int 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;  d1              1    5[BANK0 ] PTR void 
  9813 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), 
  9814 ;;		 -> cfgRam(9), 
  9815 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  9816 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), 
  9817 ;;		 -> cfgRam(9), 
  9818 ;;  d               1    3[BANK0 ] PTR unsigned char 
  9819 ;;		 -> rfTrcvStatus.rxPacket...data(16), NULL...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), 
  9820 ;;		 -> cfgRam(9), 
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      PTR void 
  9823 ;; Registers used:
  9824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9825 ;; Tracked objects:
  9826 ;;		On entry : 1F/0
  9827 ;;		On exit  : 1F/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9830 ;;      Params:         0       3       0       0
  9831 ;;      Locals:         0       3       0       0
  9832 ;;      Temps:          0       0       0       0
  9833 ;;      Totals:         0       6       0       0
  9834 ;;Total ram usage:        6 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    5
  9837 ;; This function calls:
  9838 ;;		Nothing
  9839 ;; This function is called by:
  9840 ;;		_handleCfgRead
  9841 ;;		_handleCfgWrite
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function _memcpy
  9847  02D2                     _memcpy:	
  9848                           
  9849                           ;incstack = 0
  9850                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  9851                           ;memcpy@d1 stored from wreg
  9852  02D2  00A5               	movwf	memcpy@d1
  9853  02D3  0820               	movf	memcpy@s1,w
  9854  02D4  00A4               	movwf	memcpy@s
  9855  02D5  0825               	movf	memcpy@d1,w
  9856  02D6  00A3               	movwf	memcpy@d
  9857  02D7                     l3489:	
  9858  02D7  3001               	movlw	1
  9859  02D8  02A1               	subwf	memcpy@n,f
  9860  02D9  3000               	movlw	0
  9861  02DA  3BA2               	subwfb	memcpy@n+1,f
  9862  02DB  0A21               	incf	memcpy@n,w
  9863  02DC  1903               	skipnz
  9864  02DD  0A22               	incf	memcpy@n+1,w
  9865  02DE  1903               	btfsc	3,2
  9866  02DF  0008               	return
  9867  02E0  0823               	movf	memcpy@d,w
  9868  02E1  0086               	movwf	6
  9869  02E2  0187               	clrf	7
  9870  02E3  0824               	movf	memcpy@s,w
  9871  02E4  0084               	movwf	4
  9872  02E5  0185               	clrf	5
  9873  02E6  0800               	movf	0,w
  9874  02E7  0081               	movwf	1
  9875  02E8  0AA4               	incf	memcpy@s,f
  9876  02E9  0AA3               	incf	memcpy@d,f
  9877  02EA  2AD7               	goto	l3489
  9878  02EB                     __end_of_memcpy:	
  9879                           
  9880                           	psect	text50
  9881  031C                     __ptext50:	
  9882 ;; *************** function _CfgSave *****************
  9883 ;; Defined at:
  9884 ;;		line 24 in file "../../../src/node/config.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;		None
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;		None
  9889 ;; Return value:  Size  Location     Type
  9890 ;;		None               void
  9891 ;; Registers used:
  9892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9893 ;; Tracked objects:
  9894 ;;		On entry : 1F/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9898 ;;      Params:         0       0       0       0
  9899 ;;      Locals:         0       0       0       0
  9900 ;;      Temps:          0       0       0       0
  9901 ;;      Totals:         0       0       0       0
  9902 ;;Total ram usage:        0 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    8
  9905 ;; This function calls:
  9906 ;;		_eepromTxBytes
  9907 ;; This function is called by:
  9908 ;;		_handleCfgCmd
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           
  9913                           ;psect for function _CfgSave
  9914  031C                     _CfgSave:	
  9915  031C                     l3511:	
  9916                           ;incstack = 0
  9917                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9918                           
  9919  031C  3037               	movlw	_cfgRam& (0+255)
  9920                           
  9921                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  9922  031D  01A4               	clrf	eepromTxBytes@address
  9923  031E  01A5               	clrf	eepromTxBytes@address+1
  9924  031F  00A6               	movwf	eepromTxBytes@data
  9925  0320  3009               	movlw	9
  9926  0321  00A7               	movwf	eepromTxBytes@size
  9927  0322  318A  2A3B         	ljmp	l3159
  9928  0324                     __end_of_CfgSave:	
  9929                           
  9930                           	psect	intentry
  9931  0004                     __pintentry:	
  9932 ;; *************** function _extInt *****************
  9933 ;; Defined at:
  9934 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;  ofw             1    7[COMMON] unsigned char 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 1F/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9948 ;;      Params:         0       0       0       0
  9949 ;;      Locals:         1       0       0       0
  9950 ;;      Temps:          1       0       0       0
  9951 ;;      Totals:         2       0       0       0
  9952 ;;Total ram usage:        2 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    4
  9955 ;; This function calls:
  9956 ;;		_ExtIntDeinit
  9957 ;;		i1_Mrf49xaNeedsReset
  9958 ;;		i1_Mrf49xaServe
  9959 ;; This function is called by:
  9960 ;;		Interrupt level 1
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964  0004                     _extInt:	
  9965                           
  9966                           ;incstack = 0
  9967                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9968  0004  3180               	pagesel	$
  9969  0005  0020               	movlb	0	; select bank0
  9970  0006  087F               	movf	127,w
  9971  0007  00F6               	movwf	??_extInt
  9972                           
  9973                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  9974  0008  1C8B               	btfss	11,1	;volatile
  9975  0009  281C               	goto	i1l142
  9976                           
  9977                           ;interrupt.c: 39: {
  9978                           ;interrupt.c: 40: uint8_t ofw = 0;
  9979  000A  01F7               	clrf	extInt@ofw
  9980  000B                     i1l3935:	
  9981                           ;interrupt.c: 41: while (!Mrf49xaServe())
  9982                           
  9983  000B  3180  202E  3180   	fcall	i1_Mrf49xaServe
  9984  000E  3A00               	xorlw	0
  9985  000F  1D03               	btfss	3,2
  9986  0010  281B               	goto	i1l141
  9987                           
  9988                           ;interrupt.c: 42: {
  9989                           ;interrupt.c: 43: ofw++;
  9990  0011  0AF7               	incf	extInt@ofw,f
  9991                           
  9992                           ;interrupt.c: 44: if (ofw == 255)
  9993  0012  0877               	movf	extInt@ofw,w
  9994  0013  3AFF               	xorlw	255
  9995  0014  1D03               	skipz
  9996  0015  280B               	goto	i1l3935
  9997                           
  9998                           ;interrupt.c: 45: {
  9999                           ;interrupt.c: 46: ExtIntDeinit();
 10000  0016  3183  2331  3180   	fcall	_ExtIntDeinit
 10001                           
 10002                           ;interrupt.c: 47: Mrf49xaNeedsReset();
 10003  0019  3181  2144         	fcall	i1_Mrf49xaNeedsReset
 10004  001B                     i1l141:	
 10005                           ;interrupt.c: 48: break;
 10006                           
 10007                           
 10008                           ;interrupt.c: 49: }
 10009                           ;interrupt.c: 50: }
 10010                           ;interrupt.c: 51: INTCONbits.INTF = 0;
 10011  001B  108B               	bcf	11,1	;volatile
 10012  001C                     i1l142:	
 10013  001C  0876               	movf	??_extInt,w
 10014  001D  0020               	movlb	0	; select bank0
 10015  001E  00FF               	movwf	127
 10016  001F  0009               	retfie
 10017  0020                     __end_of_extInt:	
 10018                           
 10019                           	psect	text74
 10020  0022                     __ptext74:	
 10021 ;; *************** function i1_Mrf49RxCmd *****************
 10022 ;; Defined at:
 10023 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;  cmd             1    wreg     unsigned char 
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;  cmd             1    1[COMMON] unsigned char 
 10028 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      unsigned char 
 10031 ;; Registers used:
 10032 ;;		wreg, status,2, status,0, pclath, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 1E/1
 10035 ;;		On exit  : 1F/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10038 ;;      Params:         0       0       0       0
 10039 ;;      Locals:         2       0       0       0
 10040 ;;      Temps:          0       0       0       0
 10041 ;;      Totals:         2       0       0       0
 10042 ;;Total ram usage:        2 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    1
 10045 ;; This function calls:
 10046 ;;		i1_Mrf49SpiRx
 10047 ;;		i1_Mrf49SpiTx
 10048 ;; This function is called by:
 10049 ;;		i1_Mrf49RxByte
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           
 10054                           ;psect for function i1_Mrf49RxCmd
 10055  0022                     i1_Mrf49RxCmd:	
 10056                           
 10057                           ;incstack = 0
 10058                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
 10059                           ;i1Mrf49RxCmd@cmd stored from wreg
 10060  0022  00F1               	movwf	i1Mrf49RxCmd@cmd
 10061                           
 10062                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
 10063  0023  0020               	movlb	0	; select bank0
 10064  0024  130E               	bcf	14,6	;volatile
 10065                           
 10066                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
 10067  0025  0871               	movf	i1Mrf49RxCmd@cmd,w
 10068  0026  2151  3180         	fcall	i1_Mrf49SpiTx
 10069                           
 10070                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
 10071  0028  21CE               	fcall	i1_Mrf49SpiRx
 10072  0029  00F2               	movwf	i1Mrf49RxCmd@val
 10073                           
 10074                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
 10075  002A  0020               	movlb	0	; select bank0
 10076  002B  170E               	bsf	14,6	;volatile
 10077                           
 10078                           ;mrf49xa_cmd.c: 27: return val;
 10079  002C  0872               	movf	i1Mrf49RxCmd@val,w
 10080  002D  0008               	return
 10081  002E                     __end_ofi1_Mrf49RxCmd:	
 10082  002E                     __ptext67:	
 10083 ;; *************** function i1_Mrf49xaServe *****************
 10084 ;; Defined at:
 10085 ;;		line 9 in file "../../../src/devices/mrf49xa_phy.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;		None
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  1    wreg      unsigned char 
 10092 ;; Registers used:
 10093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 1E/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10099 ;;      Params:         0       0       0       0
 10100 ;;      Locals:         1       0       0       0
 10101 ;;      Temps:          1       0       0       0
 10102 ;;      Totals:         2       0       0       0
 10103 ;;Total ram usage:        2 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    3
 10106 ;; This function calls:
 10107 ;;		i1_Mrf49RxByte
 10108 ;;		i1_Mrf49RxSts
 10109 ;;		i1_Mrf49TxByte
 10110 ;;		i1_Mrf49xaModeRx
 10111 ;;		i1_Mrf49xaNeedsReset
 10112 ;; This function is called by:
 10113 ;;		_extInt
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function i1_Mrf49xaServe
 10119  002E                     i1_Mrf49xaServe:	
 10120                           
 10121                           ;mrf49xa_phy.c: 12: uint8_t data;
 10122                           ;mrf49xa_phy.c: 14: if (rfTrcvStatus.state == POWERED_OFF)
 10123                           
 10124                           ;incstack = 0
 10125                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10126  002E  0021               	movlb	1	; select bank1
 10127  002F  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
 10128  0030  1903               	btfsc	3,2
 10129                           
 10130                           ;mrf49xa_phy.c: 15: return 0;
 10131  0031  3400               	retlw	0
 10132                           
 10133                           ;mrf49xa_phy.c: 18: if (rfTrcvStatus.needsReset)
 10134  0032  1BEB               	btfsc	(_rfTrcvStatus^(0+128)+75),7
 10135  0033  3400               	retlw	0
 10136                           
 10137                           ;mrf49xa_phy.c: 21: Mrf49RxSts();
 10138  0034  21C1  3180         	fcall	i1_Mrf49RxSts
 10139                           
 10140                           ;mrf49xa_phy.c: 23: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
 10141  0036  0840               	movf	_mrf49Status,w
 10142  0037  3AFF               	xorlw	255
 10143  0038  1D03               	skipz
 10144  0039  283E               	goto	i1l468
 10145  003A  0841               	movf	_mrf49Status+1,w
 10146  003B  3AFF               	xorlw	255
 10147  003C  1903               	btfsc	3,2
 10148  003D  3400               	retlw	0
 10149  003E                     i1l468:	
 10150                           ;mrf49xa_phy.c: 28: {
 10151                           
 10152                           
 10153                           ;mrf49xa_phy.c: 30: }
 10154                           ;mrf49xa_phy.c: 33: if (mrf49Status.flags.msb.overflow == 1)
 10155  003E  1AC0               	btfsc	_mrf49Status,5
 10156  003F  284D               	goto	i1l3837
 10157  0040  285C               	goto	i1l469
 10158  0041                     i1l3831:	
 10159                           
 10160                           ;mrf49xa_phy.c: 38: case RECV_DATA:
 10161                           ;mrf49xa_phy.c: 41: data = Mrf49RxByte();
 10162  0041  211B  3180         	fcall	i1_Mrf49RxByte
 10163  0043  00F5               	movwf	i1Mrf49xaServe@data
 10164                           
 10165                           ;mrf49xa_phy.c: 42: data = Mrf49RxByte();
 10166  0044  211B  3180         	fcall	i1_Mrf49RxByte
 10167  0046  00F5               	movwf	i1Mrf49xaServe@data
 10168                           
 10169                           ;mrf49xa_phy.c: 45: Mrf49xaModeRx();
 10170  0047  211E  3180         	fcall	i1_Mrf49xaModeRx
 10171                           
 10172                           ;mrf49xa_phy.c: 49: break;
 10173  0049  285C               	goto	i1l469
 10174  004A                     i1l3833:	
 10175                           
 10176                           ;mrf49xa_phy.c: 52: Mrf49xaNeedsReset();
 10177  004A  2144  3180         	fcall	i1_Mrf49xaNeedsReset
 10178                           
 10179                           ;mrf49xa_phy.c: 53: break;
 10180  004C  285C               	goto	i1l469
 10181  004D                     i1l3837:	
 10182  004D  0021               	movlb	1	; select bank1
 10183  004E  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
 10184                           
 10185                           ; Switch size 1, requested type "space"
 10186                           ; Number of cases is 4, Range of values is 0 to 3
 10187                           ; switch strategies available:
 10188                           ; Name         Instructions Cycles
 10189                           ; simple_byte           13     7 (average)
 10190                           ; direct_byte           14     6 (fixed)
 10191                           ; jumptable            260     6 (fixed)
 10192                           ;	Chosen strategy is simple_byte
 10193  004F  3A00               	xorlw	0	; case 0
 10194  0050  1903               	skipnz
 10195  0051  284A               	goto	i1l3833
 10196  0052  3A01               	xorlw	1	; case 1
 10197  0053  1903               	skipnz
 10198  0054  2841               	goto	i1l3831
 10199  0055  3A03               	xorlw	3	; case 2
 10200  0056  1903               	skipnz
 10201  0057  2841               	goto	i1l3831
 10202  0058  3A01               	xorlw	1	; case 3
 10203  0059  1903               	skipnz
 10204  005A  285C               	goto	i1l469
 10205  005B  285C               	goto	i1l469
 10206  005C                     i1l469:	
 10207                           
 10208                           ;mrf49xa_phy.c: 62: }
 10209                           ;mrf49xa_phy.c: 71: if (mrf49Status.flags.msb.fifoTxRx == 1)
 10210  005C  0020               	movlb	0	; select bank0
 10211  005D  1BC0               	btfsc	_mrf49Status,7
 10212  005E  2902               	goto	i1l3919
 10213  005F  2911               	goto	i1l3921
 10214  0060                     i1l3841:	
 10215                           
 10216                           ;mrf49xa_phy.c: 78: Mrf49xaNeedsReset();
 10217  0060  2144  3180         	fcall	i1_Mrf49xaNeedsReset
 10218                           
 10219                           ;mrf49xa_phy.c: 79: break;
 10220  0062  2911               	goto	i1l3921
 10221  0063                     i1l3843:	
 10222                           
 10223                           ;mrf49xa_phy.c: 83: data = Mrf49RxByte();
 10224  0063  211B  3180         	fcall	i1_Mrf49RxByte
 10225  0065  00F5               	movwf	i1Mrf49xaServe@data
 10226                           
 10227                           ;mrf49xa_phy.c: 87: if (mrf49Status.flags.lsb.dataQualityOK == 0)
 10228  0066  1BC1               	btfsc	_mrf49Status+1,7
 10229  0067  286B               	goto	i1l3849
 10230  0068                     i1l3847:	
 10231                           
 10232                           ;mrf49xa_phy.c: 88: {
 10233                           ;mrf49xa_phy.c: 89: Mrf49xaModeRx();
 10234  0068  211E  3180         	fcall	i1_Mrf49xaModeRx
 10235                           
 10236                           ;mrf49xa_phy.c: 90: break;
 10237  006A  2911               	goto	i1l3921
 10238  006B                     i1l3849:	
 10239                           
 10240                           ;mrf49xa_phy.c: 91: }
 10241                           ;mrf49xa_phy.c: 93: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = 
      +                          &(rfTrcvStatus.rxPacket[0]);
 10242  006B  0021               	movlb	1	; select bank1
 10243  006C  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
 10244  006D  1D03               	skipz
 10245  006E  2871               	goto	i1l3853
 10246  006F  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
 10247  0070  2875               	goto	L4
 10248  0071                     i1l3853:	
 10249                           
 10250                           ;mrf49xa_phy.c: 94: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hw
      +                          Rx = &(rfTrcvStatus.rxPacket[1]);
 10251  0071  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
 10252  0072  1D03               	skipz
 10253  0073  2868               	goto	i1l3847
 10254  0074  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
 10255  0075                     L4:	
 10256  0075  00A0               	movwf	_rfTrcvStatus^(0+128)
 10257                           
 10258                           ;mrf49xa_phy.c: 101: }
 10259                           ;mrf49xa_phy.c: 103: rfTrcvStatus.hwRx->packet.size = data;
 10260  0076  0A20               	incf	_rfTrcvStatus^(0+128),w
 10261  0077  0086               	movwf	6
 10262  0078  0187               	clrf	7
 10263  0079  0875               	movf	i1Mrf49xaServe@data,w
 10264  007A  0081               	movwf	1
 10265                           
 10266                           ;mrf49xa_phy.c: 104: rfTrcvStatus.hwRx->crc = 0;
 10267  007B  0820               	movf	_rfTrcvStatus^(0+128),w
 10268  007C  3E16               	addlw	22
 10269  007D  0086               	movwf	6
 10270  007E  0181               	clrf	1
 10271                           
 10272                           ;mrf49xa_phy.c: 105: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
 10273  007F  0820               	movf	_rfTrcvStatus^(0+128),w
 10274  0080  0086               	movwf	6
 10275  0081  3004               	movlw	4
 10276  0082  0081               	movwf	1
 10277                           
 10278                           ;mrf49xa_phy.c: 107: rfTrcvStatus.state = RECV_DATA;
 10279  0083  3002               	movlw	2
 10280  0084  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
 10281                           
 10282                           ;mrf49xa_phy.c: 108: rfTrcvStatus.hwByte = 1;
 10283  0085  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 10284  0086  3980               	andlw	-128
 10285  0087  3801               	iorlw	1
 10286  0088  28B2               	goto	L5
 10287  0089                     i1l3869:	
 10288                           ;mrf49xa_phy.c: 110: break;
 10289                           
 10290                           
 10291                           ;mrf49xa_phy.c: 114: data = Mrf49RxByte();
 10292  0089  211B  3180         	fcall	i1_Mrf49RxByte
 10293  008B  00F5               	movwf	i1Mrf49xaServe@data
 10294                           
 10295                           ;mrf49xa_phy.c: 118: if (mrf49Status.flags.lsb.dataQualityOK == 0)
 10296  008C  1BC1               	btfsc	_mrf49Status+1,7
 10297  008D  2894               	goto	i1l3877
 10298                           
 10299                           ;mrf49xa_phy.c: 119: {
 10300                           ;mrf49xa_phy.c: 120: rfTrcvStatus.hwRx->state = PKT_FREE;
 10301  008E  0021               	movlb	1	; select bank1
 10302  008F  0820               	movf	_rfTrcvStatus^(0+128),w
 10303  0090  0086               	movwf	6
 10304  0091  0187               	clrf	7
 10305  0092  0181               	clrf	1
 10306  0093  2868               	goto	i1l3847
 10307  0094                     i1l3877:	
 10308                           
 10309                           ;mrf49xa_phy.c: 123: }
 10310                           ;mrf49xa_phy.c: 125: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
 10311  0094  0021               	movlb	1	; select bank1
 10312  0095  0A20               	incf	_rfTrcvStatus^(0+128),w
 10313  0096  0086               	movwf	6
 10314  0097  0187               	clrf	7
 10315  0098  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 10316  0099  397F               	andlw	127
 10317  009A  0601               	xorwf	1,w
 10318  009B  1D03               	skipz
 10319  009C  28A7               	goto	i1l3883
 10320                           
 10321                           ;mrf49xa_phy.c: 126: {
 10322                           ;mrf49xa_phy.c: 127: rfTrcvStatus.hwRx->crc = data;
 10323  009D  0820               	movf	_rfTrcvStatus^(0+128),w
 10324  009E  3E16               	addlw	22
 10325  009F  0086               	movwf	6
 10326  00A0  0875               	movf	i1Mrf49xaServe@data,w
 10327  00A1  0081               	movwf	1
 10328                           
 10329                           ;mrf49xa_phy.c: 131: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
 10330  00A2  0820               	movf	_rfTrcvStatus^(0+128),w
 10331  00A3  0086               	movwf	6
 10332  00A4  3005               	movlw	5
 10333  00A5  0081               	movwf	1
 10334  00A6  2868               	goto	i1l3847
 10335  00A7                     i1l3883:	
 10336                           
 10337                           ;mrf49xa_phy.c: 140: else
 10338                           ;mrf49xa_phy.c: 141: {
 10339                           ;mrf49xa_phy.c: 142: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
 10340  00A7  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 10341  00A8  397F               	andlw	127
 10342  00A9  0720               	addwf	_rfTrcvStatus^(0+128),w
 10343  00AA  00F4               	movwf	??i1_Mrf49xaServe
 10344  00AB  0A74               	incf	??i1_Mrf49xaServe,w
 10345  00AC  0086               	movwf	6
 10346  00AD  0187               	clrf	7
 10347  00AE  0875               	movf	i1Mrf49xaServe@data,w
 10348  00AF  0081               	movwf	1
 10349  00B0  2211  3180         	fcall	PL14	;call to abstracted procedure
 10350  00B2                     L5:	
 10351  00B2  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
 10352  00B3  2911               	goto	i1l3921
 10353  00B4                     i1l3887:	
 10354                           
 10355                           ;mrf49xa_phy.c: 148: rfTrcvStatus.hwByte++;
 10356  00B4  2211  3180         	fcall	PL14	;call to abstracted procedure
 10357  00B6  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
 10358                           
 10359                           ;mrf49xa_phy.c: 150: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
 10360  00B7  397F               	andlw	127
 10361  00B8  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
 10362  00B9  1D03               	skipz
 10363  00BA  28F0               	goto	i1l3915
 10364                           
 10365                           ;mrf49xa_phy.c: 151: rfTrcvStatus.hwByte = 49;
 10366  00BB  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 10367  00BC  3980               	andlw	-128
 10368  00BD  3831               	iorlw	49
 10369  00BE  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
 10370  00BF  28F0               	goto	i1l3915
 10371  00C0                     i1l3891:	
 10372                           
 10373                           ;mrf49xa_phy.c: 156: Mrf49TxByte(0x2D);
 10374  00C0  302D               	movlw	45
 10375  00C1  2116  3180         	fcall	i1_Mrf49TxByte
 10376                           
 10377                           ;mrf49xa_phy.c: 157: break;
 10378  00C3  2911               	goto	i1l3921
 10379  00C4                     i1l3893:	
 10380                           
 10381                           ;mrf49xa_phy.c: 160: Mrf49TxByte(0xD4);
 10382  00C4  30D4               	movlw	212
 10383  00C5  2116  3180         	fcall	i1_Mrf49TxByte
 10384                           
 10385                           ;mrf49xa_phy.c: 161: rfTrcvStatus.hwByte = 0x7F;
 10386  00C7  307F               	movlw	127
 10387  00C8  0021               	movlb	1	; select bank1
 10388  00C9  04EB               	iorwf	(_rfTrcvStatus^(0+128)+75),f
 10389                           
 10390                           ;mrf49xa_phy.c: 162: break;
 10391  00CA  2911               	goto	i1l3921
 10392  00CB                     i1l3897:	
 10393                           
 10394                           ;mrf49xa_phy.c: 166: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
 10395  00CB  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 10396  00CC  397F               	andlw	127
 10397  00CD  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
 10398  00CE  0086               	movwf	6
 10399  00CF  0187               	clrf	7
 10400  00D0  0801               	movf	1,w
 10401  00D1  2116  3180         	fcall	i1_Mrf49TxByte
 10402                           
 10403                           ;mrf49xa_phy.c: 167: break;
 10404  00D3  2911               	goto	i1l3921
 10405  00D4                     i1l3899:	
 10406                           
 10407                           ;mrf49xa_phy.c: 170: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
 10408  00D4  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
 10409  00D5  2116  3180         	fcall	i1_Mrf49TxByte
 10410                           
 10411                           ;mrf49xa_phy.c: 171: break;
 10412  00D7  2911               	goto	i1l3921
 10413  00D8                     i1l3901:	
 10414                           
 10415                           ;mrf49xa_phy.c: 174: Mrf49TxByte(0x00);
 10416  00D8  3000               	movlw	0
 10417  00D9  2116  3180         	fcall	i1_Mrf49TxByte
 10418                           
 10419                           ;mrf49xa_phy.c: 175: break;
 10420  00DB  2911               	goto	i1l3921
 10421  00DC                     i1l3903:	
 10422                           
 10423                           ;mrf49xa_phy.c: 178: Mrf49TxByte(0x00);
 10424  00DC  3000               	movlw	0
 10425  00DD  2116  3180         	fcall	i1_Mrf49TxByte
 10426                           
 10427                           ;mrf49xa_phy.c: 179: Mrf49xaModeRx();
 10428  00DF  211E  3180         	fcall	i1_Mrf49xaModeRx
 10429                           
 10430                           ;mrf49xa_phy.c: 181: rfTrcvStatus.txPacket.retry = 0;
 10431  00E1  30F0               	movlw	-16
 10432  00E2  0021               	movlb	1	; select bank1
 10433  00E3  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
 10434                           
 10435                           ;mrf49xa_phy.c: 183: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
 10436  00E4  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
 10437  00E5  0C89               	rrf	9,f
 10438  00E6  0C89               	rrf	9,f
 10439  00E7  3903               	andlw	3
 10440  00E8  3A01               	xorlw	1
 10441  00E9  1D03               	skipz
 10442  00EA  28EE               	goto	i1l3911
 10443                           
 10444                           ;mrf49xa_phy.c: 184: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
 10445  00EB  3003               	movlw	3
 10446  00EC  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
 10447  00ED  2911               	goto	i1l3921
 10448  00EE                     i1l3911:	
 10449                           
 10450                           ;mrf49xa_phy.c: 185: else
 10451                           ;mrf49xa_phy.c: 186: rfTrcvStatus.txPacket.state = PKT_FREE;
 10452  00EE  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
 10453  00EF  2911               	goto	i1l3921
 10454  00F0                     i1l3915:	
 10455  00F0  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 10456  00F1  397F               	andlw	127
 10457                           
 10458                           ; Switch size 1, requested type "space"
 10459                           ; Number of cases is 5, Range of values is 49 to 101
 10460                           ; switch strategies available:
 10461                           ; Name         Instructions Cycles
 10462                           ; simple_byte           16     9 (average)
 10463                           ; direct_byte          115     9 (fixed)
 10464                           ; jumptable            263     9 (fixed)
 10465                           ;	Chosen strategy is simple_byte
 10466  00F2  3A31               	xorlw	49	; case 49
 10467  00F3  1903               	skipnz
 10468  00F4  28D4               	goto	i1l3899
 10469  00F5  3A03               	xorlw	3	; case 50
 10470  00F6  1903               	skipnz
 10471  00F7  28D8               	goto	i1l3901
 10472  00F8  3A01               	xorlw	1	; case 51
 10473  00F9  1903               	skipnz
 10474  00FA  28DC               	goto	i1l3903
 10475  00FB  3A57               	xorlw	87	; case 100
 10476  00FC  1903               	skipnz
 10477  00FD  28C0               	goto	i1l3891
 10478  00FE  3A01               	xorlw	1	; case 101
 10479  00FF  1903               	skipnz
 10480  0100  28C4               	goto	i1l3893
 10481  0101  28CB               	goto	i1l3897
 10482  0102                     i1l3919:	
 10483  0102  0021               	movlb	1	; select bank1
 10484  0103  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
 10485                           
 10486                           ; Switch size 1, requested type "space"
 10487                           ; Number of cases is 4, Range of values is 0 to 3
 10488                           ; switch strategies available:
 10489                           ; Name         Instructions Cycles
 10490                           ; simple_byte           13     7 (average)
 10491                           ; direct_byte           14     6 (fixed)
 10492                           ; jumptable            260     6 (fixed)
 10493                           ;	Chosen strategy is simple_byte
 10494  0104  3A00               	xorlw	0	; case 0
 10495  0105  1903               	skipnz
 10496  0106  2860               	goto	i1l3841
 10497  0107  3A01               	xorlw	1	; case 1
 10498  0108  1903               	skipnz
 10499  0109  2863               	goto	i1l3843
 10500  010A  3A03               	xorlw	3	; case 2
 10501  010B  1903               	skipnz
 10502  010C  2889               	goto	i1l3869
 10503  010D  3A01               	xorlw	1	; case 3
 10504  010E  1903               	skipnz
 10505  010F  28B4               	goto	i1l3887
 10506  0110  2911               	goto	i1l3921
 10507  0111                     i1l3921:	
 10508                           
 10509                           ;mrf49xa_phy.c: 193: }
 10510                           ;mrf49xa_phy.c: 207: return PORTAbits.RA2 == 1 ? 1 : 0;
 10511  0111  0020               	movlb	0	; select bank0
 10512  0112  0C0C               	rrf	12,w	;volatile
 10513  0113  0C89               	rrf	9,f
 10514  0114  3901               	andlw	1
 10515  0115  0008               	return
 10516  0116                     __end_ofi1_Mrf49xaServe:	
 10517  0116                     __ptext70:	
 10518 ;; *************** function i1_Mrf49TxByte *****************
 10519 ;; Defined at:
 10520 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;  byte            1    wreg     unsigned char 
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;  byte            1    3[COMMON] unsigned char 
 10525 ;; Return value:  Size  Location     Type
 10526 ;;		None               void
 10527 ;; Registers used:
 10528 ;;		wreg, status,2, status,0, pclath, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 1E/1
 10531 ;;		On exit  : 1F/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10534 ;;      Params:         0       0       0       0
 10535 ;;      Locals:         1       0       0       0
 10536 ;;      Temps:          0       0       0       0
 10537 ;;      Totals:         1       0       0       0
 10538 ;;Total ram usage:        1 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    2
 10541 ;; This function calls:
 10542 ;;		i1_Mrf49TxCmd
 10543 ;; This function is called by:
 10544 ;;		i1_Mrf49xaServe
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           
 10549                           ;psect for function i1_Mrf49TxByte
 10550  0116                     i1_Mrf49TxByte:	
 10551                           
 10552                           ;incstack = 0
 10553                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10554                           ;i1Mrf49TxByte@byte stored from wreg
 10555  0116  00F3               	movwf	i1Mrf49TxByte@byte
 10556                           
 10557                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10558  0117  00F1               	movwf	i1Mrf49TxCmd@val
 10559  0118  30B8               	movlw	184
 10560  0119  2147               	fcall	i1_Mrf49TxCmd
 10561  011A  0008               	return
 10562  011B                     __end_ofi1_Mrf49TxByte:	
 10563  011B                     __ptext73:	
 10564 ;; *************** function i1_Mrf49RxByte *****************
 10565 ;; Defined at:
 10566 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;		None
 10569 ;; Auto vars:     Size  Location     Type
 10570 ;;		None
 10571 ;; Return value:  Size  Location     Type
 10572 ;;                  1    wreg      unsigned char 
 10573 ;; Registers used:
 10574 ;;		wreg, status,2, status,0, pclath, cstack
 10575 ;; Tracked objects:
 10576 ;;		On entry : 1E/1
 10577 ;;		On exit  : 1F/0
 10578 ;;		Unchanged: 0/0
 10579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10580 ;;      Params:         0       0       0       0
 10581 ;;      Locals:         0       0       0       0
 10582 ;;      Temps:          0       0       0       0
 10583 ;;      Totals:         0       0       0       0
 10584 ;;Total ram usage:        0 bytes
 10585 ;; Hardware stack levels used:    1
 10586 ;; Hardware stack levels required when called:    2
 10587 ;; This function calls:
 10588 ;;		i1_Mrf49RxCmd
 10589 ;; This function is called by:
 10590 ;;		i1_Mrf49xaServe
 10591 ;; This function uses a non-reentrant model
 10592 ;;
 10593                           
 10594                           
 10595                           ;psect for function i1_Mrf49RxByte
 10596  011B                     i1_Mrf49RxByte:	
 10597                           
 10598                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10599                           
 10600                           ;incstack = 0
 10601                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10602  011B  30B0               	movlw	176
 10603  011C  2022               	fcall	i1_Mrf49RxCmd
 10604  011D  0008               	return
 10605  011E                     __end_ofi1_Mrf49RxByte:	
 10606  011E                     __ptext69:	
 10607 ;; *************** function i1_Mrf49xaModeRx *****************
 10608 ;; Defined at:
 10609 ;;		line 100 in file "../../../src/devices/mrf49xa.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10614 ;; Return value:  Size  Location     Type
 10615 ;;		None               void
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0, pclath, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 1E/0
 10620 ;;		On exit  : 1F/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10623 ;;      Params:         0       0       0       0
 10624 ;;      Locals:         1       0       0       0
 10625 ;;      Temps:          0       0       0       0
 10626 ;;      Totals:         1       0       0       0
 10627 ;;Total ram usage:        1 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    2
 10630 ;; This function calls:
 10631 ;;		i1_Mrf49TxCmd
 10632 ;; This function is called by:
 10633 ;;		i1_Mrf49xaServe
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function i1_Mrf49xaModeRx
 10639  011E                     i1_Mrf49xaModeRx:	
 10640  011E  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10641                           
 10642                           ;mrf49xa.c: 102: UI08_t k;
 10643                           ;mrf49xa.c: 103: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
 10644                           
 10645                           ;incstack = 0
 10646                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10647  011F  01F3               	clrf	i1Mrf49xaModeRx@k
 10648  0120  3182               	movlp	high __stringtab
 10649  0121  000A               	callw
 10650  0122  3180               	pagesel	$	;select current page
 10651  0123  3800               	iorlw	0
 10652  0124  1D03               	skipz
 10653  0125  2928               	goto	i1l3793
 10654  0126  0020               	movlb	0	; select bank0
 10655  0127  293C               	goto	i1l211
 10656  0128                     i1l3793:	
 10657  0128  3573               	lslf	i1Mrf49xaModeRx@k,w
 10658  0129  3E40               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10659  012A  3182               	movlp	high __stringtab
 10660  012B  000A               	callw
 10661  012C  00F1               	movwf	i1Mrf49TxCmd@val
 10662  012D  3573               	lslf	i1Mrf49xaModeRx@k,w
 10663  012E  3E3F               	addlw	low (_mrfRegset_Rx| (0+32768))
 10664  012F  3182               	movlp	high __stringtab
 10665  0130  000A               	callw
 10666  0131  3180               	pagesel	$	;select current page
 10667  0132  3181  2147         	fcall	i1_Mrf49TxCmd
 10668  0134  301C               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10669  0135  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10670  0136  3182               	movlp	high __stringtab
 10671  0137  000A               	callw
 10672  0138  3180               	pagesel	$	;select current page
 10673  0139  0273               	subwf	i1Mrf49xaModeRx@k,w
 10674  013A  1C03               	skipc
 10675  013B  2928               	goto	i1l3793
 10676  013C                     i1l211:	
 10677                           
 10678                           ;mrf49xa.c: 106: rfTrcvStatus.state = RECV_IDLE;
 10679  013C  0021               	movlb	1	; select bank1
 10680  013D  3080               	movlw	-128
 10681  013E  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
 10682  013F  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
 10683                           
 10684                           ;mrf49xa.c: 107: rfTrcvStatus.hwByte = 0;
 10685  0140  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
 10686                           
 10687                           ;mrf49xa.c: 109: mrf49Status.flags.msb.fifoTxRx = 0;
 10688  0141  0020               	movlb	0	; select bank0
 10689  0142  13C0               	bcf	_mrf49Status,7
 10690  0143  0008               	return
 10691  0144                     __end_ofi1_Mrf49xaModeRx:	
 10692  0144                     __ptext68:	
 10693 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10694 ;; Defined at:
 10695 ;;		line 146 in file "../../../src/devices/mrf49xa.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;		None
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;		None
 10700 ;; Return value:  Size  Location     Type
 10701 ;;		None               void
 10702 ;; Registers used:
 10703 ;;		None
 10704 ;; Tracked objects:
 10705 ;;		On entry : 1E/0
 10706 ;;		On exit  : 1F/1
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10709 ;;      Params:         0       0       0       0
 10710 ;;      Locals:         0       0       0       0
 10711 ;;      Temps:          0       0       0       0
 10712 ;;      Totals:         0       0       0       0
 10713 ;;Total ram usage:        0 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_extInt
 10719 ;;		i1_Mrf49xaServe
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           
 10724                           ;psect for function i1_Mrf49xaNeedsReset
 10725  0144                     i1_Mrf49xaNeedsReset:	
 10726                           
 10727                           ;mrf49xa.c: 148: rfTrcvStatus.needsReset = 1;
 10728                           
 10729                           ;incstack = 0
 10730                           ; Regs used in i1_Mrf49xaNeedsReset: []
 10731  0144  0021               	movlb	1	; select bank1
 10732  0145  17EB               	bsf	(_rfTrcvStatus^(0+128)+75),7
 10733  0146  0008               	return
 10734  0147                     __end_ofi1_Mrf49xaNeedsReset:	
 10735  0147                     __ptext71:	
 10736 ;; *************** function i1_Mrf49TxCmd *****************
 10737 ;; Defined at:
 10738 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;  cmd             1    wreg     unsigned char 
 10741 ;;  val             1    1[COMMON] unsigned char 
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;  cmd             1    2[COMMON] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;		None               void
 10746 ;; Registers used:
 10747 ;;		wreg, status,2, status,0, pclath, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 1E/0
 10750 ;;		On exit  : 1F/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10753 ;;      Params:         1       0       0       0
 10754 ;;      Locals:         1       0       0       0
 10755 ;;      Temps:          0       0       0       0
 10756 ;;      Totals:         2       0       0       0
 10757 ;;Total ram usage:        2 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    1
 10760 ;; This function calls:
 10761 ;;		i1_Mrf49SpiTx
 10762 ;; This function is called by:
 10763 ;;		i1_Mrf49xaModeRx
 10764 ;;		i1_Mrf49TxByte
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function i1_Mrf49TxCmd
 10770  0147                     i1_Mrf49TxCmd:	
 10771                           
 10772                           ;incstack = 0
 10773                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 10774                           ;i1Mrf49TxCmd@cmd stored from wreg
 10775  0147  00F2               	movwf	i1Mrf49TxCmd@cmd
 10776                           
 10777                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 10778  0148  0020               	movlb	0	; select bank0
 10779  0149  130E               	bcf	14,6	;volatile
 10780                           
 10781                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 10782  014A  0872               	movf	i1Mrf49TxCmd@cmd,w
 10783  014B  2151  3180         	fcall	i1_Mrf49SpiTx
 10784                           
 10785                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 10786  014D  0871               	movf	i1Mrf49TxCmd@val,w
 10787  014E  2151               	fcall	i1_Mrf49SpiTx
 10788                           
 10789                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 10790  014F  170E               	bsf	14,6	;volatile
 10791  0150  0008               	return
 10792  0151                     __end_ofi1_Mrf49TxCmd:	
 10793  0151                     __ptext75:	
 10794 ;; *************** function i1_Mrf49SpiTx *****************
 10795 ;; Defined at:
 10796 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  byte            1    wreg     unsigned char 
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  byte            1    0[COMMON] unsigned char 
 10801 ;; Return value:  Size  Location     Type
 10802 ;;		None               void
 10803 ;; Registers used:
 10804 ;;		wreg
 10805 ;; Tracked objects:
 10806 ;;		On entry : 1F/0
 10807 ;;		On exit  : 1F/0
 10808 ;;		Unchanged: 0/0
 10809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10810 ;;      Params:         0       0       0       0
 10811 ;;      Locals:         1       0       0       0
 10812 ;;      Temps:          0       0       0       0
 10813 ;;      Totals:         1       0       0       0
 10814 ;;Total ram usage:        1 bytes
 10815 ;; Hardware stack levels used:    1
 10816 ;; This function calls:
 10817 ;;		Nothing
 10818 ;; This function is called by:
 10819 ;;		i1_Mrf49TxCmd
 10820 ;;		i1_Mrf49RxCmd
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           
 10825                           ;psect for function i1_Mrf49SpiTx
 10826  0151                     i1_Mrf49SpiTx:	
 10827                           
 10828                           ;incstack = 0
 10829                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 10830                           ;i1Mrf49SpiTx@byte stored from wreg
 10831  0151  00F0               	movwf	i1Mrf49SpiTx@byte
 10832                           
 10833                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 10834  0152  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 10835  0153  2956               	goto	i1l255
 10836  0154  178D               	bsf	13,7	;volatile
 10837  0155  2957               	goto	i1l256
 10838  0156                     i1l255:	
 10839  0156  138D               	bcf	13,7	;volatile
 10840  0157                     i1l256:	
 10841  0157  0022               	movlb	2	; select bank2
 10842  0158  178E               	bsf	14,7	;volatile
 10843  0159  0000               	nop	;# 
 10844  015A  0022               	movlb	2	; select bank2
 10845  015B  138E               	bcf	14,7	;volatile
 10846  015C  1B70               	btfsc	i1Mrf49SpiTx@byte,6
 10847  015D  2960               	goto	i1l3709
 10848  015E  0020               	movlb	0	; select bank0
 10849  015F  2963               	goto	i1l259
 10850  0160                     i1l3709:	
 10851  0160  0020               	movlb	0	; select bank0
 10852  0161  178D               	bsf	13,7	;volatile
 10853  0162  2965               	goto	i1l260
 10854  0163                     i1l259:	
 10855  0163  0020               	movlb	0	; select bank0
 10856  0164  138D               	bcf	13,7	;volatile
 10857  0165                     i1l260:	
 10858  0165  0022               	movlb	2	; select bank2
 10859  0166  178E               	bsf	14,7	;volatile
 10860  0167  0000               	nop	;# 
 10861  0168  0022               	movlb	2	; select bank2
 10862  0169  138E               	bcf	14,7	;volatile
 10863  016A  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
 10864  016B  296E               	goto	i1l3713
 10865  016C  0020               	movlb	0	; select bank0
 10866  016D  2971               	goto	i1l263
 10867  016E                     i1l3713:	
 10868  016E  0020               	movlb	0	; select bank0
 10869  016F  178D               	bsf	13,7	;volatile
 10870  0170  2973               	goto	i1l264
 10871  0171                     i1l263:	
 10872  0171  0020               	movlb	0	; select bank0
 10873  0172  138D               	bcf	13,7	;volatile
 10874  0173                     i1l264:	
 10875  0173  0022               	movlb	2	; select bank2
 10876  0174  178E               	bsf	14,7	;volatile
 10877  0175  0000               	nop	;# 
 10878  0176  0022               	movlb	2	; select bank2
 10879  0177  138E               	bcf	14,7	;volatile
 10880  0178  1A70               	btfsc	i1Mrf49SpiTx@byte,4
 10881  0179  297C               	goto	i1l3717
 10882  017A  0020               	movlb	0	; select bank0
 10883  017B  297F               	goto	i1l267
 10884  017C                     i1l3717:	
 10885  017C  0020               	movlb	0	; select bank0
 10886  017D  178D               	bsf	13,7	;volatile
 10887  017E  2981               	goto	i1l268
 10888  017F                     i1l267:	
 10889  017F  0020               	movlb	0	; select bank0
 10890  0180  138D               	bcf	13,7	;volatile
 10891  0181                     i1l268:	
 10892  0181  0022               	movlb	2	; select bank2
 10893  0182  178E               	bsf	14,7	;volatile
 10894  0183  0000               	nop	;# 
 10895  0184  0022               	movlb	2	; select bank2
 10896  0185  138E               	bcf	14,7	;volatile
 10897  0186  19F0               	btfsc	i1Mrf49SpiTx@byte,3
 10898  0187  298A               	goto	i1l3721
 10899  0188  0020               	movlb	0	; select bank0
 10900  0189  298D               	goto	i1l271
 10901  018A                     i1l3721:	
 10902  018A  0020               	movlb	0	; select bank0
 10903  018B  178D               	bsf	13,7	;volatile
 10904  018C  298F               	goto	i1l272
 10905  018D                     i1l271:	
 10906  018D  0020               	movlb	0	; select bank0
 10907  018E  138D               	bcf	13,7	;volatile
 10908  018F                     i1l272:	
 10909  018F  0022               	movlb	2	; select bank2
 10910  0190  178E               	bsf	14,7	;volatile
 10911  0191  0000               	nop	;# 
 10912  0192  0022               	movlb	2	; select bank2
 10913  0193  138E               	bcf	14,7	;volatile
 10914  0194  1970               	btfsc	i1Mrf49SpiTx@byte,2
 10915  0195  2998               	goto	i1l3725
 10916  0196  0020               	movlb	0	; select bank0
 10917  0197  299B               	goto	i1l275
 10918  0198                     i1l3725:	
 10919  0198  0020               	movlb	0	; select bank0
 10920  0199  178D               	bsf	13,7	;volatile
 10921  019A  299D               	goto	i1l276
 10922  019B                     i1l275:	
 10923  019B  0020               	movlb	0	; select bank0
 10924  019C  138D               	bcf	13,7	;volatile
 10925  019D                     i1l276:	
 10926  019D  0022               	movlb	2	; select bank2
 10927  019E  178E               	bsf	14,7	;volatile
 10928  019F  0000               	nop	;# 
 10929  01A0  0022               	movlb	2	; select bank2
 10930  01A1  138E               	bcf	14,7	;volatile
 10931  01A2  18F0               	btfsc	i1Mrf49SpiTx@byte,1
 10932  01A3  29A6               	goto	i1l3729
 10933  01A4  0020               	movlb	0	; select bank0
 10934  01A5  29A9               	goto	i1l279
 10935  01A6                     i1l3729:	
 10936  01A6  0020               	movlb	0	; select bank0
 10937  01A7  178D               	bsf	13,7	;volatile
 10938  01A8  29AB               	goto	i1l280
 10939  01A9                     i1l279:	
 10940  01A9  0020               	movlb	0	; select bank0
 10941  01AA  138D               	bcf	13,7	;volatile
 10942  01AB                     i1l280:	
 10943  01AB  0022               	movlb	2	; select bank2
 10944  01AC  178E               	bsf	14,7	;volatile
 10945  01AD  0000               	nop	;# 
 10946  01AE  0022               	movlb	2	; select bank2
 10947  01AF  138E               	bcf	14,7	;volatile
 10948  01B0  1870               	btfsc	i1Mrf49SpiTx@byte,0
 10949  01B1  29B4               	goto	i1l3733
 10950  01B2  0020               	movlb	0	; select bank0
 10951  01B3  29B7               	goto	i1l283
 10952  01B4                     i1l3733:	
 10953  01B4  0020               	movlb	0	; select bank0
 10954  01B5  178D               	bsf	13,7	;volatile
 10955  01B6  29B9               	goto	i1l284
 10956  01B7                     i1l283:	
 10957  01B7  0020               	movlb	0	; select bank0
 10958  01B8  138D               	bcf	13,7	;volatile
 10959  01B9                     i1l284:	
 10960  01B9  0022               	movlb	2	; select bank2
 10961  01BA  178E               	bsf	14,7	;volatile
 10962  01BB  0000               	nop	;# 
 10963  01BC  0022               	movlb	2	; select bank2
 10964  01BD  138E               	bcf	14,7	;volatile
 10965                           
 10966                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 10967  01BE  0020               	movlb	0	; select bank0
 10968  01BF  138D               	bcf	13,7	;volatile
 10969  01C0  0008               	return
 10970  01C1                     __end_ofi1_Mrf49SpiTx:	
 10971  01C1                     __ptext72:	
 10972 ;; *************** function i1_Mrf49RxSts *****************
 10973 ;; Defined at:
 10974 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;		None
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;		None
 10979 ;; Return value:  Size  Location     Type
 10980 ;;		None               void
 10981 ;; Registers used:
 10982 ;;		wreg, status,2, pclath, cstack
 10983 ;; Tracked objects:
 10984 ;;		On entry : 1F/1
 10985 ;;		On exit  : 1F/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10988 ;;      Params:         0       0       0       0
 10989 ;;      Locals:         0       0       0       0
 10990 ;;      Temps:          0       0       0       0
 10991 ;;      Totals:         0       0       0       0
 10992 ;;Total ram usage:        0 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    1
 10995 ;; This function calls:
 10996 ;;		i1_Mrf49SpiRx
 10997 ;; This function is called by:
 10998 ;;		i1_Mrf49xaServe
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           
 11003                           ;psect for function i1_Mrf49RxSts
 11004  01C1                     i1_Mrf49RxSts:	
 11005                           
 11006                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 11007                           
 11008                           ;incstack = 0
 11009                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 11010  01C1  120B               	bcf	11,4	;volatile
 11011                           
 11012                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 11013  01C2  0020               	movlb	0	; select bank0
 11014  01C3  130E               	bcf	14,6	;volatile
 11015                           
 11016                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
 11017  01C4  21CE  3180         	fcall	i1_Mrf49SpiRx
 11018  01C6  0020               	movlb	0	; select bank0
 11019  01C7  00C0               	movwf	_mrf49Status
 11020                           
 11021                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
 11022  01C8  21CE               	fcall	i1_Mrf49SpiRx
 11023  01C9  0020               	movlb	0	; select bank0
 11024  01CA  00C1               	movwf	_mrf49Status+1
 11025                           
 11026                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 11027  01CB  170E               	bsf	14,6	;volatile
 11028                           
 11029                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 11030  01CC  160B               	bsf	11,4	;volatile
 11031  01CD  0008               	return
 11032  01CE                     __end_ofi1_Mrf49RxSts:	
 11033  01CE                     __ptext76:	
 11034 ;; *************** function i1_Mrf49SpiRx *****************
 11035 ;; Defined at:
 11036 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;		None
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      unsigned char 
 11043 ;; Registers used:
 11044 ;;		wreg, status,2
 11045 ;; Tracked objects:
 11046 ;;		On entry : 1F/0
 11047 ;;		On exit  : 1F/2
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11050 ;;      Params:         0       0       0       0
 11051 ;;      Locals:         1       0       0       0
 11052 ;;      Temps:          0       0       0       0
 11053 ;;      Totals:         1       0       0       0
 11054 ;;Total ram usage:        1 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; This function calls:
 11057 ;;		Nothing
 11058 ;; This function is called by:
 11059 ;;		i1_Mrf49RxCmd
 11060 ;;		i1_Mrf49RxSts
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           
 11065                           ;psect for function i1_Mrf49SpiRx
 11066  01CE                     i1_Mrf49SpiRx:	
 11067                           
 11068                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 11069                           
 11070                           ;incstack = 0
 11071                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 11072  01CE  01F0               	clrf	i1Mrf49SpiRx@data
 11073                           
 11074                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 11075  01CF  138D               	bcf	13,7	;volatile
 11076  01D0  1A8E               	btfsc	14,5	;volatile
 11077  01D1  17F0               	bsf	i1Mrf49SpiRx@data,7
 11078  01D2  0022               	movlb	2	; select bank2
 11079  01D3  178E               	bsf	14,7	;volatile
 11080  01D4  0000               	nop	;# 
 11081  01D5  0022               	movlb	2	; select bank2
 11082  01D6  138E               	bcf	14,7	;volatile
 11083                           
 11084                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11085  01D7  0020               	movlb	0	; select bank0
 11086  01D8  1A8E               	btfsc	14,5	;volatile
 11087  01D9  1770               	bsf	i1Mrf49SpiRx@data,6
 11088  01DA  0022               	movlb	2	; select bank2
 11089  01DB  178E               	bsf	14,7	;volatile
 11090  01DC  0000               	nop	;# 
 11091  01DD  0022               	movlb	2	; select bank2
 11092  01DE  138E               	bcf	14,7	;volatile
 11093                           
 11094                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11095  01DF  0020               	movlb	0	; select bank0
 11096  01E0  1A8E               	btfsc	14,5	;volatile
 11097  01E1  16F0               	bsf	i1Mrf49SpiRx@data,5
 11098  01E2  0022               	movlb	2	; select bank2
 11099  01E3  178E               	bsf	14,7	;volatile
 11100  01E4  0000               	nop	;# 
 11101  01E5  0022               	movlb	2	; select bank2
 11102  01E6  138E               	bcf	14,7	;volatile
 11103                           
 11104                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11105  01E7  0020               	movlb	0	; select bank0
 11106  01E8  1A8E               	btfsc	14,5	;volatile
 11107  01E9  1670               	bsf	i1Mrf49SpiRx@data,4
 11108  01EA  0022               	movlb	2	; select bank2
 11109  01EB  178E               	bsf	14,7	;volatile
 11110  01EC  0000               	nop	;# 
 11111  01ED  0022               	movlb	2	; select bank2
 11112  01EE  138E               	bcf	14,7	;volatile
 11113                           
 11114                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11115  01EF  0020               	movlb	0	; select bank0
 11116  01F0  1A8E               	btfsc	14,5	;volatile
 11117  01F1  15F0               	bsf	i1Mrf49SpiRx@data,3
 11118  01F2  0022               	movlb	2	; select bank2
 11119  01F3  178E               	bsf	14,7	;volatile
 11120  01F4  0000               	nop	;# 
 11121  01F5  0022               	movlb	2	; select bank2
 11122  01F6  138E               	bcf	14,7	;volatile
 11123                           
 11124                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11125  01F7  0020               	movlb	0	; select bank0
 11126  01F8  1A8E               	btfsc	14,5	;volatile
 11127  01F9  1570               	bsf	i1Mrf49SpiRx@data,2
 11128  01FA  0022               	movlb	2	; select bank2
 11129  01FB  178E               	bsf	14,7	;volatile
 11130  01FC  0000               	nop	;# 
 11131  01FD  0022               	movlb	2	; select bank2
 11132  01FE  138E               	bcf	14,7	;volatile
 11133                           
 11134                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11135  01FF  0020               	movlb	0	; select bank0
 11136  0200  1A8E               	btfsc	14,5	;volatile
 11137  0201  14F0               	bsf	i1Mrf49SpiRx@data,1
 11138  0202  0022               	movlb	2	; select bank2
 11139  0203  178E               	bsf	14,7	;volatile
 11140  0204  0000               	nop	;# 
 11141  0205  0022               	movlb	2	; select bank2
 11142  0206  138E               	bcf	14,7	;volatile
 11143                           
 11144                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11145  0207  0020               	movlb	0	; select bank0
 11146  0208  1A8E               	btfsc	14,5	;volatile
 11147  0209  1470               	bsf	i1Mrf49SpiRx@data,0
 11148  020A  0022               	movlb	2	; select bank2
 11149  020B  178E               	bsf	14,7	;volatile
 11150  020C  0000               	nop	;# 
 11151  020D  0022               	movlb	2	; select bank2
 11152  020E  138E               	bcf	14,7	;volatile
 11153                           
 11154                           ;mrf49xa_spi_pic16.c: 40: return data;
 11155  020F  0870               	movf	i1Mrf49SpiRx@data,w
 11156  0210  0008               	return
 11157  0211                     __end_ofi1_Mrf49SpiRx:	
 11158  0211                     PL14:	
 11159  0211  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 11160  0212  397F               	andlw	127
 11161  0213  00F4               	movwf	??i1_Mrf49xaServe
 11162  0214  0AF4               	incf	??i1_Mrf49xaServe,f
 11163  0215  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
 11164  0216  0674               	xorwf	??i1_Mrf49xaServe,w
 11165  0217  3980               	andlw	-128
 11166  0218  0674               	xorwf	??i1_Mrf49xaServe,w
 11167  0219  0008               	return
 11168  021A                     __end_ofPL14:	
 11169                           
 11170                           	psect	text77
 11171  0331                     __ptext77:	
 11172 ;; *************** function _ExtIntDeinit *****************
 11173 ;; Defined at:
 11174 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;		None
 11177 ;; Auto vars:     Size  Location     Type
 11178 ;;		None
 11179 ;; Return value:  Size  Location     Type
 11180 ;;		None               void
 11181 ;; Registers used:
 11182 ;;		None
 11183 ;; Tracked objects:
 11184 ;;		On entry : 1E/0
 11185 ;;		On exit  : 1E/0
 11186 ;;		Unchanged: 1E/0
 11187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11188 ;;      Params:         0       0       0       0
 11189 ;;      Locals:         0       0       0       0
 11190 ;;      Temps:          0       0       0       0
 11191 ;;      Totals:         0       0       0       0
 11192 ;;Total ram usage:        0 bytes
 11193 ;; Hardware stack levels used:    1
 11194 ;; This function calls:
 11195 ;;		Nothing
 11196 ;; This function is called by:
 11197 ;;		_extInt
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           
 11202                           ;psect for function _ExtIntDeinit
 11203  0331                     _ExtIntDeinit:	
 11204                           
 11205                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 11206                           
 11207                           ;incstack = 0
 11208                           ; Regs used in _ExtIntDeinit: []
 11209  0331  120B               	bcf	11,4	;volatile
 11210  0332  0008               	return
 11211  0333                     __end_of_ExtIntDeinit:	
 11212  007E                     btemp	set	126	;btemp
 11213  007E                     wtemp	set	126
 11214  007E                     wtemp0	set	126
 11215  0080                     wtemp1	set	128
 11216  0082                     wtemp2	set	130
 11217  0084                     wtemp3	set	132
 11218  0086                     wtemp4	set	134
 11219  0088                     wtemp5	set	136
 11220  007F                     wtemp6	set	127
 11221  007E                     ttemp	set	126
 11222  007E                     ttemp0	set	126
 11223  0081                     ttemp1	set	129
 11224  0084                     ttemp2	set	132
 11225  0087                     ttemp3	set	135
 11226  007F                     ttemp4	set	127
 11227  007E                     ltemp	set	126
 11228  007E                     ltemp0	set	126
 11229  0082                     ltemp1	set	130
 11230  0086                     ltemp2	set	134
 11231  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    68
    Data        2
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80     22      35
    BANK1            80      0      76
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaFreePacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    macPtr	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    RfSendSampleWeatherNode@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    RfSendPowerState@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    HandlePacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    HandlePacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), 

    S1227CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTick@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaTick@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaAllocPacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaAllocPacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaRxPacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaRxPacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxAck@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxPacket@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), NULL(NULL[0]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxPacket@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaPacketPending@inst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    Mrf49xaPacketPending@inst	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), eepromTxByte@byte(COMMON[1]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), 
		 -> cfgRam(BANK0[9]), eepromRxByte@dat(COMMON[1]), 

    sp__Mrf49xaInit	PTR struct rfTrcvStatus_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    S333rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_Mrf49xaTxAck
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   36459
                                             18 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              6     2      4    3130
                                              8 BANK0      6     2      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     4     4      0    2793
                                              8 BANK0      4     4      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   1     1      0     210
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     915
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     915
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     915
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     915
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     915
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    6232
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   19614
                                             14 BANK0      4     4      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
                  _Mrf49xaNeedsReset
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      1     1      0     171
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 1     1      0      83
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     915
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    5146
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2    1086
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    2115
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     915
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     847
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     825
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     3      1   10976
                                             10 BANK0      4     3      1
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1360
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     783
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     893
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     610
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    2148
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     766
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     766
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1211
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1211
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         2     1      1    2552
                                              8 BANK0      2     1      1
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      8     5      3    2234
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    2     1      1     382
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    3350
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       2     2      0    3326
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     1     1      0    1204
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaNeedsReset
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      78       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     16      23       6       43.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      78      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Tue Aug 26 14:22:11 2014

                Mrf49xaTxPacket@crc 0025                 Mrf49xaTxPacket@inst 0027  
                       __CFG_CP$OFF 0000                                  PL8 0FAC  
                                l32 0A98                                  l42 0AED  
                                l34 0AA4                                  l35 0AA6  
                                l39 0AD0                                  l79 0008  
                               PL10 0FCC                                 PL20 0FF1  
                               PL12 0FD9                                 PL22 0FF6  
                               PL14 0211                                 PL24 0FFB  
                               PL16 0FE5                                 PL18 0FEB  
             Mrf49xaTxPacket@packet 0020                                 l211 0D52  
                               l234 0997                                 l404 0F50  
                               l260 0D74                                 l271 0D94  
                               l263 0D7E                                 l255 0D68  
                               l280 0DAB                                 l272 0D95  
                               l264 0D7F                                 l256 0D69  
                               l283 0DB5                                 l275 0D9F  
                               l267 0D89                                 l259 0D73  
                               l532 02B2                                 l284 0DB6  
                               l276 0DA0                                 l268 0D8A  
                               l444 098C                                 l279 0DAA  
                               l552 0B8E                                 l561 0B9D  
                               l562 0BAB                                 l547 0BFD  
                               l563 0BAA                                 l555 0B5E  
                               l468 0C56                                 l397 0F07  
                               l469 0C74                     ??_PwrSensorInit 0020  
                   ??_PwrSensorWake 0020                        __CFG_BORV$LO 0000  
               handleCfgWrite@index 0027                                 wreg 0009  
                  i1Mrf49xaModeRx@k 0073                        __CFG_IESO$ON 0000  
            ??_SoftI2cRepeatedStart 0021                        __CFG_LVP$OFF 0000  
            Mrf49xaTxPacket@needAck 0022                                l3001 026D  
                              l3013 028A                                l3007 0276  
                              l3051 09D4                                l3027 0998  
                              l3221 0F2E                                l3053 09E0  
                              l3047 09C6                                l3233 0F3C  
                              l3209 0F1C                                l3401 0B3F  
                              l3057 09E8                                l3155 0A82  
                              l3147 0A70                                l3403 0B42  
                              l3245 0F60                                l3157 0A93  
                              l3501 0BD7                                l3413 0B64  
                              l3069 09EB                                l3333 08FA  
                              l3325 08DE                                l3317 08D4  
                              l3167 0A48                                l3159 0A3B  
                              l3511 031C                                l3503 0BD8  
                              l3415 0B67                                l3343 091B  
                              l3513 0B2F                                l3169 0A56  
                              l3505 0BDF                                l3409 0B60  
                              l3425 0B70                                l3345 0921  
                              l3337 0905                                l2707 0B0F  
                              l3435 029B                                l3419 0B6B  
                              l3371 0973                                l3355 094A  
                              l3339 0909                                l2803 0E68  
                              l3269 0B2A                                l3509 0BEB  
                              l3461 0F9C                                l3381 097E  
                              l3373 0974                                l2903 0CE3  
                              l3279 02C2                                l3359 0953  
                              l2809 0850                                l3473 0F9F  
                              l3465 0F9D                                l2905 0CEC  
                              l2921 0D08                                l3641 08BA  
                              l2659 0AFB                                l2763 0AEF  
                              l2907 0CF0                                l2835 0C59  
                              l2843 0C65                                l3299 0EE7  
                              l3635 08A7                                l3627 089D  
                              l3469 0F9E                                l2917 0D06  
                              l2909 0CF4                                l2853 0C80  
                              l2925 0D1A                                l2781 0324  
                              l2773 0308                     Mrf49TxByte@byte 0023  
                              l3479 0FA0                                l3399 0B39  
                              l2855 0C83                                l2847 0C78  
                              l2927 0D29                                l2839 0C62  
                              l2783 0000                                l3639 08AE  
                              l3489 02D7                                l2849 0C7B  
                              l2953 09F7                                l3499 0BD5  
                              l2883 0CAB                                l2875 0CA0  
                              l2859 0C89                                l2893 0CCC  
                              l2949 0A0C                                l3597 0869  
                              l2975 0D3E                                l2991 0C2A  
                              l2799 0E61                                l2969 0D35  
                              l2897 0CD8                                l2889 0CBD  
                              l2899 0CDC                                l2997 0C3E  
                              u2807 0E5C                                u2817 0AFE  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _main 0856                     __end_of_AdcInit 0313  
                              fsr0h 0005                                fsr1h 0007  
                  ??_PwrSensorSleep 0020                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                   __end_of_CfgLoad 0B37                                ltemp 007E  
                   __end_of_CfgSave 0324                handleCfgWrite@packet 0028  
                              start 0020                                ttemp 007E  
                              wtemp 007E                __end_of_HandlePacket 0BB0  
           __end_ofi1_Mrf49xaModeRx 0144                       __CFG_MCLRE$ON 0000  
               __end_of_Mrf49RxByte 0D35                       ?_ExtIntDeinit 0070  
               __end_of_Mrf49TxByte 0D33                     ??_eepromRxBytes 0028  
                       _Mcp9800Read 0A26                     ??_eepromTxBytes 0028  
                  _RfSendPowerState 0E17                 __end_of_Mrf49xaInit 09F6  
               __end_of_Mrf49xaTick 0997                _Mrf49xaPacketPending 02EB  
                 ?_CfgGetSizeByType 0070                               ?_main 0070  
                             i1l211 013C                               i1l141 001B  
                             i1l142 001C                               i1l260 0165  
                             i1l271 018D                               i1l263 0171  
                             i1l255 0156                               i1l280 01AB  
                             i1l272 018F                               i1l264 0173  
                             i1l256 0157                               i1l283 01B7  
                             i1l275 019B                               i1l267 017F  
                             i1l259 0163                               i1l284 01B9  
                             i1l276 019D                               i1l268 0181  
                             i1l279 01A9                               i1l468 003E  
                             i1l469 005C                          _Mrf49RxCmd 0E0D  
                        _Mrf49TxCmd 0D5A                               _AdcGo 0E7A  
                        _Mrf49SpiRx 0DC9                          _Mrf49SpiTx 0D63  
                        _Mrf49RxSts 0DBE                  ??_CfgGetSizeByType 0020  
        __end_of_Mrf49xaAllocPacket 0EF6               __end_of_SoftI2cRxByte 0AFB  
             __end_of_SoftI2cTxByte 0AC2                        main@humidity 0032  
             __size_of_Mcp9800Start 0019                  __size_of_AdcDeinit 0007  
           Mrf49xaTxPacket@response 0021                  __size_of_AdcIsBusy 0004  
                __size_of_AdcSample 0028                      __CFG_BOREN$OFF 0000  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F              Mcp9800Start@resolution 0024  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
               i1_Mrf49xaNeedsReset 0144                      ??_ExtIntDeinit 0070  
                   __initialization 0806                          _ExtIntInit 0850  
              __end_of_handleCfgCmd 0BFE                        __end_of_main 08C2  
RfSendSampleWeatherNode@temperature 0028                      __CFG_LPBOR$OFF 0000  
             ?_Mrf49xaPacketPending 0070                        _Mcp9800Start 0A57  
                            ??_main 0032                ?i1_Mrf49xaNeedsReset 0070  
                            ?_AdcGo 0070                __size_of_handleFwCmd 0024  
              __end_of_Mrf49xaTxAck 0BD3                __end_of_Mrf49xaServe 0D2E  
                     ??_PwrI2cSleep 0020                              _ADCON0 009D  
                            _ADCON1 009E                              _ADCON2 009F  
                         ??_AdcInit 0020                              _ADRESH 009C  
                            _ADRESL 009B                              _ANSELA 018C  
                            _ANSELB 018D                              _ANSELC 018E  
                         ??_CfgLoad 0028                           ??_CfgSave 0028  
                i1Mrf49xaServe@data 0075                              i1l3721 018A  
                            i1l3713 016E                              i1l3733 01B4  
                            i1l3725 0198                              i1l3717 017C  
                            i1l3709 0160                              i1l3901 00D8  
                            i1l3911 00EE                              i1l3903 00DC  
                            i1l3831 0041                              i1l3729 01A6  
                            i1l3841 0060                              i1l3921 0111  
                            i1l3833 004A                              i1l3915 00F0  
                            i1l3843 0063                              i1l3853 0071  
                            i1l3837 004D                              i1l3847 0068  
                            i1l3919 0102                              i1l3935 000B  
                            i1l3793 0128                              i1l3849 006B  
                            i1l3891 00C0                              i1l3883 00A7  
                            i1l3893 00C4                              i1l3877 0094  
                            i1l3869 0089                              i1l3887 00B4  
                            i1l3897 00CB                              i1l3899 00D4  
                            _FVRCON 0117                              _OSCCON 0099  
              CfgGetSizeByType@type 0020                          _PwrI2cInit 081C  
                AdcChSelect@channel 0020                          _PwrI2cWake 0C1A  
                       _Mrf49RxByte 0D33                         _Mrf49TxByte 0D2E  
                     ??_SoftI2cInit 0024                       ??_SoftI2cStop 0021  
         __size_of_Mrf49xaModeSleep 0022                      __CFG_PWRTE$OFF 0000  
                        _SoftI2cNop 0AFB                        ?_AdcChSelect 0070  
                  ?i1_Mrf49xaModeRx 0070                         _Mrf49xaInit 0997  
                            _Sleepy 09F6                         _Mrf49xaTick 08C2  
                        _PwrAdcInit 0313                          _PwrAdcWake 0E8D  
                     ??_PwrAdcSleep 0020                              _cfgRam 0037  
                   _Mrf49xaRxPacket 02B3                   __end_of_AdcDeinit 032B  
                    __CFG_STVREN$ON 0000                   __end_of_AdcIsBusy 0E80  
                            _macPtr 0078                     _Mrf49xaTxPacket 0EF6  
                            _extInt 0004                              _memcpy 02D2  
                 __end_of_AdcSample 0E7A                     _Mrf49xaShutdown 026C  
                        _PwrRfSleep 025F               ??i1_Mrf49xaNeedsReset 0070  
                       ?_Mrf49RxCmd 0070                         ?_Mrf49TxCmd 0021  
                       ?_Mrf49SpiRx 0070                         ?_Mrf49SpiTx 0070  
                       ?_Mrf49RxSts 0070                        __pdataCOMMON 0078  
                __size_of_PwrRfInit 0021                  __size_of_PwrRfWake 000B  
             __size_of_HandlePacket 0079             __end_of__initialization 081A  
             __end_ofi1_Mrf49RxByte 011E                 __end_of_PwrI2cSleep 0B27  
             __end_ofi1_Mrf49TxByte 011B                       __end_of_AdcGo 0E7C  
   RfSendSampleWeatherNode@humidity 002A                         ?_ExtIntInit 0070  
                    __pcstackCOMMON 0070                    SoftI2cRxByte@ack 0021  
                      __pidataBANK0 0000                  handleCfgCmd@packet 0028  
               __end_of_SoftI2cInit 082F               __end_of_handleCfgRead 0F9A  
               __end_of_SoftI2cStop 0B1E              ??_Mrf49xaPacketPending 0020  
           __size_ofi1_Mrf49xaServe 00E8                          __end_ofPL8 0FCC  
               __end_of_PwrAdcSleep 0E8D                             ??_AdcGo 0020  
                    _OPTION_REGbits 0095                        _HandlePacket 0B37  
           Mrf49xaFreePacket@packet 0020             __size_of_handleCfgWrite 001C  
              __end_of_ExtIntDeinit 0333            __end_of_RfSendPowerState 0E52  
                        __pbssBANK0 0036                          __pbssBANK1 00A0  
                       ?_PwrI2cInit 0070                         ?_PwrI2cWake 0070  
                     ?_SoftI2cStart 0070               __size_of_handleCfgCmd 002B  
           __end_of_Mrf49xaRxPacket 02D2             __end_of_Mrf49xaTxPacket 0F68  
             __end_of_Mrf49xaModeRx 0D5A               __end_of_Mrf49xaModeTx 0C46  
                       ?_SoftI2cNop 0070               __end_of_Mrf49xaReboot 0308  
               __size_of_Mrf49RxCmd 000A                   __end_of_PwrRfInit 0850  
               __size_of_Mrf49TxCmd 0009                   __end_of_PwrRfWake 0306  
               __size_of_Mrf49SpiRx 0044                 __size_of_Mrf49SpiTx 005B  
               __size_of_Mrf49RxSts 000B                          __pmaintext 0856  
                           ?_Sleepy 0020             __end_of_Mrf49xaShutdown 026D  
                       ?_PwrAdcInit 0070                         ?_PwrAdcWake 0070  
          ?_RfSendSampleWeatherNode 0028                        ?_Mcp9800Read 0024  
                        __pintentry 0004                             ?_extInt 0070  
                           ?_memcpy 0020               __size_of_Mrf49xaTxAck 0023  
             __size_of_Mrf49xaServe 00E8                         ?_PwrRfSleep 0070  
              HandlePacket@response 002C                   handleFwCmd@packet 0028  
             __end_of_PwrSensorInit 0C1F               __end_of_PwrSensorWake 0C22  
                       _PwrI2cSleep 0B21                        _handleCfgCmd 0BD3  
                           _AdcInit 0308                 __size_of_ExtIntInit 0006  
     __size_of_SoftI2cRepeatedStart 0015                  handleCfgRead@index 0027  
                           _CfgLoad 0B2F                          __stringtab 021A  
                           _CfgSave 031C                      ??_SoftI2cStart 0021  
         __size_of_CfgGetSizeByType 0012                  _Mrf49xaAllocPacket 0ED9  
                  _Mrf49xaModeSleep 026D                         _SoftI2cInit 0824  
                     ?i1_Mrf49RxCmd 0070                       ?i1_Mrf49TxCmd 0071  
                     ?i1_Mrf49SpiRx 0070                       ?i1_Mrf49SpiTx 0070  
                       _SoftI2cStop 0B0F                       ?i1_Mrf49RxSts 0070  
                           Sleepy@b 0023                        _Mrf49xaTxAck 0BB0  
                      _Mrf49xaServe 0C46                     __size_of_Sleepy 001B  
              eepromRxBytes@address 0024                         _PwrAdcSleep 0E87  
               ?_Mrf49xaAllocPacket 0070                __size_of_AdcChSelect 0007  
             __end_of_eepromRxBytes 0A94               __end_of_eepromTxBytes 0A57  
                   __size_of_extInt 001C                     __size_of_memcpy 0019  
                 _mrfRegset_InitCnt 021B                             __ptext1 0E93  
                           __ptext2 0E17                             __ptext3 0E8D  
                           __ptext4 0308                             __ptext5 0E87  
                           __ptext6 0324                             __ptext7 0ED9  
                           __ptext8 0E52                             __ptext9 0E7C  
               __size_of_PwrI2cInit 0008                 __size_of_PwrI2cWake 0001  
                        _parameters 0259                       ?_AdcGetResult 0020  
               __size_of_SoftI2cNop 0007         RfSendSampleWeatherNode@inst 002C  
              ??_Mrf49xaAllocPacket 0020                 __size_of_PwrAdcInit 0009  
               __size_of_PwrAdcWake 0006                             clrloop0 032C  
              end_of_initialization 081A                             memcpy@d 0023  
                           memcpy@n 0021                             memcpy@s 0024  
                      ?_Mrf49RxByte 0070                        ?_Mrf49TxByte 0070  
                    ??i1_Mrf49RxCmd 0071                      ??i1_Mrf49TxCmd 0072  
                    ??i1_Mrf49SpiRx 0070                      ??i1_Mrf49SpiTx 0070  
                    ??i1_Mrf49RxSts 0071                    ?_Mrf49xaRxPacket 0070  
               __size_of_PwrRfSleep 000D     __end_of_RfSendSampleWeatherNode 0ED9  
                  ?_Mrf49xaTxPacket 0020                        ?_Mrf49xaInit 0070  
              __end_of_mrfRegset_Rx 024B                __end_of_mrfRegset_Tx 0253  
                      ?_Mrf49xaTick 0070                    ?_Mrf49xaShutdown 0070  
           handleCfgWrite@nrOfBytes 0026              __size_of_SoftI2cRxByte 0039  
            __size_of_SoftI2cTxByte 002E                      i1_Mrf49xaServe 002E  
         __end_of_mrfRegset_InitCnt 021C             __size_of_PwrSensorSleep 0003  
                 _powerStatusTicker 0036                       ??_handleFwCmd 0028  
                         _PORTAbits 000C                           _PORTBbits 000D  
                   Mrf49xaTick@inst 0031                           _PORTCbits 000E  
                         _AdcDeinit 0324               __size_of_ExtIntDeinit 0002  
                         _AdcIsBusy 0E7C                        ??_Mrf49RxCmd 0021  
                      ??_Mrf49TxCmd 0022                        ??_Mrf49SpiRx 0020  
                      ??_Mrf49SpiTx 0020                        ??_Mrf49RxSts 0021  
                         _AdcSample 0E52                    __CFG_FOSC$INTOSC 0000  
                    ??_AdcGetResult 0022                      _handleCfgWrite 0BFE  
                         _TRISAbits 008C                           _TRISBbits 008D  
                         _TRISCbits 008E                         AdcSample@ch 0025  
                    Mrf49SpiRx@data 0020                      Mrf49SpiTx@byte 0020  
                __end_of_Mrf49RxCmd 0E17                  __end_of_Mrf49TxCmd 0D63  
            __end_ofi1_Mrf49xaServe 0116                        ??_ExtIntInit 0020  
                __end_of_Mrf49SpiRx 0E0D                  __end_of_Mrf49SpiTx 0DBE  
                __end_of_Mrf49RxSts 0DC9                        _ExtIntDeinit 0331  
       __end_ofi1_Mrf49xaNeedsReset 0147                      __end_of_Sleepy 0A11  
                 SoftI2cRxByte@data 0022                       __pidataCOMMON 0000  
              __size_of_Mcp9800Read 0015                   eepromRxBytes@data 0026  
              __end_of_SoftI2cStart 0B0F            __size_ofi1_Mrf49xaModeRx 0026  
                        ?_AdcDeinit 0070                      __end_of_extInt 0020  
                    __end_of_memcpy 02EB                   eepromRxBytes@size 0027  
            __end_of_handleCfgWrite 0C1A                          ?_AdcIsBusy 0070  
        __end_of_mrfRegset_SleepCnt 021E                          ?_AdcSample 0022  
                       __end_ofPL10 0FD9                         __end_ofPL20 0FF6  
                       __end_ofPL12 0FE5                         __end_ofPL22 0FFB  
                       __end_ofPL14 021A                         __end_ofPL24 1000  
                       __end_ofPL16 0FEB                         __end_ofPL18 0FF1  
               start_initialization 0806                       _SoftI2cRxByte 0AC2  
               __end_of_handleFwCmd 02B3                       _SoftI2cTxByte 0A94  
             Mrf49xaFreePacket@inst 0021                  __end_of_ExtIntInit 0856  
                 SoftI2cTxByte@data 0022                   ?_RfSendPowerState 0070  
                  _CfgGetSizeByType 0F9A                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002A  
                ??_RfSendPowerState 0028                        ??_SoftI2cNop 0020  
                          ??_Sleepy 0022                        ??_PwrAdcInit 0020  
                      ??_PwrAdcWake 0020                     ?i1_Mrf49xaServe 0070  
                   _mrfRegset_RxCnt 021C                     _mrfRegset_TxCnt 021E  
                   _mrfRegset_Sleep 0253                           _PwrRfInit 082F  
                         _PwrRfWake 02FB                         __pdataBANK0 0042  
                          ??_extInt 0076                            ??_memcpy 0023  
     __size_of_Mrf49xaPacketPending 0010                   eepromTxBytes@data 0026  
                      ??_PwrRfSleep 0024                   eepromTxBytes@size 0027  
                   ?_handleCfgWrite 0070                   RfSendPowerState@s 0028  
            __size_ofi1_Mrf49RxByte 0003              __size_ofi1_Mrf49TxByte 0005  
          __end_of_Mrf49xaModeSleep 028F                  __end_of_PwrI2cInit 0824  
              __end_ofi1_Mrf49RxCmd 002E                __end_ofi1_Mrf49TxCmd 0151  
                __end_of_PwrI2cWake 0C1B                __end_ofi1_Mrf49SpiRx 0211  
              __end_ofi1_Mrf49SpiTx 01C1                __end_ofi1_Mrf49RxSts 01CE  
                         ___latbits 0001                       __pcstackBANK0 0020  
                    ?_SoftI2cRxByte 0070    __size_of_RfSendSampleWeatherNode 0046  
                    ?_SoftI2cTxByte 0070                   i1Mrf49TxByte@byte 0073  
                      ?_PwrI2cSleep 0070                  __end_of_SoftI2cNop 0B02  
                          ?_AdcInit 0070                  __end_of_PwrAdcInit 031C  
                          ?_CfgLoad 0070                  __end_of_PwrAdcWake 0E93  
                          ?_CfgSave 0070                    HandlePacket@inst 002D  
            __size_of_handleCfgRead 0032                        _rfTrcvStatus 00A0  
                      ?_SoftI2cInit 0070                        ?_SoftI2cStop 0070  
              __size_of_Mrf49RxByte 0002                  __end_of_PwrRfSleep 026C  
              __size_of_Mrf49TxByte 0005                __end_of_AdcGetResult 0000  
      __end_of_SoftI2cRepeatedStart 0A26                        ?_PwrAdcSleep 0070  
              __size_of_Mrf49xaInit 005F                __size_of_Mrf49xaTick 00D5  
                        ?_PwrRfInit 0070                          ?_PwrRfWake 0070  
                    _PwrSensorSleep 0B27                       ?_Mcp9800Start 0070  
                         __pstrings 021A                         ??_AdcDeinit 0020  
                       ??_AdcIsBusy 0020                         _handleFwCmd 028F  
                       ??_AdcSample 0024                      __size_of_AdcGo 0002  
            __size_of_Mrf49xaModeRx 0025              __size_of_Mrf49xaModeTx 0024  
                      _mrfRegset_Rx 023F                        _mrfRegset_Tx 024B  
            __size_of_Mrf49xaReboot 0002                   ??i1_Mrf49xaModeRx 0073  
                  __CFG_WDTE$SWDTEN 0000                            _LATAbits 010C  
                          _LATBbits 010D                            _LATCbits 010E  
                     i1_Mrf49RxByte 011B             __end_of_mrfRegset_RxCnt 021D  
                     i1_Mrf49TxByte 0116             __end_of_mrfRegset_TxCnt 021F  
           __end_of_mrfRegset_Sleep 0259                           clear_ram0 032B  
                     ??_AdcChSelect 0020                         _mrf49Status 0040  
                 _Mrf49xaFreePacket 0B2A                      Mrf49xaModeRx@k 0023  
                    Mrf49xaModeTx@k 0023              __end_of_PwrSensorSleep 0B2A  
             __size_of_SoftI2cStart 000D              __size_of_PwrSensorInit 0004  
            __size_of_PwrSensorWake 0003                       Mrf49RxCmd@cmd 0021  
                ?_Mrf49xaFreePacket 0020                       Mrf49RxCmd@val 0022  
                    ??_Mcp9800Start 0024                       _handleCfgRead 0F68  
                     Mrf49TxCmd@cmd 0022                       Mrf49TxCmd@val 0021  
               handleCfgRead@packet 0028                 ??_Mrf49xaFreePacket 0021  
            Mrf49xaAllocPacket@inst 0020                     ??_SoftI2cRxByte 0021  
                 _Mrf49xaNeedsReset 0B1E                     ??_SoftI2cTxByte 0021  
                          _WPUAbits 020C                  ?_Mrf49xaNeedsReset 0070  
       __size_of_Mrf49xaAllocPacket 001D                    __size_of_AdcInit 000B  
                  __size_of_CfgLoad 0008                    __size_of_CfgSave 0008  
               ??_Mrf49xaNeedsReset 0020              __size_of_eepromRxBytes 0024  
                    ?i1_Mrf49RxByte 0070              __size_of_eepromTxBytes 001C  
                      _SoftI2cStart 0B02                      ?i1_Mrf49TxByte 0070  
         __end_of_Mrf49xaFreePacket 0B2F                           extInt@ofw 0077  
                          Sleepy@ms 0020                       _Mrf49xaModeRx 0D35  
                     _Mrf49xaModeTx 0C22                       _Mrf49xaReboot 0306  
                    _mrfRegset_Init 021F                     ?_PwrSensorSleep 0070  
                       ??_PwrRfInit 0027                      ?_handleCfgRead 0070  
                       ??_PwrRfWake 0024            __size_of_Mrf49xaRxPacket 001F  
             __size_ofi1_Mrf49RxCmd 000C               __size_ofi1_Mrf49TxCmd 000A  
             __size_ofi1_Mrf49SpiRx 0043               __size_ofi1_Mrf49SpiTx 0070  
                  i1Mrf49SpiRx@data 0070               __size_ofi1_Mrf49RxSts 000D  
               __end_of_AdcChSelect 0E87            __size_of_Mrf49xaTxPacket 0072  
          __end_of_CfgGetSizeByType 0FAC                    i1Mrf49SpiTx@byte 0070  
                    SoftI2cRxByte@i 0023           __end_of_Mrf49xaNeedsReset 0B21  
                __end_of__stringtab 021B            __size_of_Mrf49xaShutdown 0001  
                    SoftI2cTxByte@i 0023                          _ANSELCbits 018E  
           _RfSendSampleWeatherNode 0E93                       ?_HandlePacket 002A  
                          _coldBoot 0042                            __ptext10 0E7A  
                          __ptext11 0000                            __ptext20 026D  
                          __ptext12 0E80                            __ptext21 082F  
                          __ptext13 0C1F                            __ptext30 0C22  
                          __ptext22 0C1A                            __ptext14 0B27  
                          __ptext31 0997                            __ptext23 0B21  
                          __ptext15 0C1B                            __ptext40 0E0D  
                          __ptext32 09F6                            __ptext24 081C  
                          __ptext16 02FB                            __ptext41 0D63  
                          __ptext33 0C46                            __ptext25 0824  
                          __ptext17 0306                            __ptext50 031C  
                          __ptext42 0DC9                            __ptext34 0B1E  
                          __ptext26 0313                            __ptext18 025F  
                          __ptext51 0A3B                            __ptext43 0B37  
                          __ptext35 0D35                            __ptext27 08C2  
                          __ptext19 026C                            __ptext60 0A26  
                          __ptext52 0B2F                            __ptext44 028F  
                          __ptext36 0D2E                            __ptext28 02B3  
                          __ptext61 0A94                            __ptext53 0A70  
                          __ptext45 0BFE                            __ptext37 0D5A  
                          __ptext29 02EB                            __ptext70 0116  
                          __ptext62 0B0F                            __ptext54 0A11  
                          __ptext46 0F68                            __ptext38 0DBE  
                          __ptext71 0147                            __ptext63 0B02  
                          __ptext55 0BB0                            __ptext47 02D2  
                          __ptext39 0D33                            __ptext72 01C1  
                          __ptext64 0AC2                            __ptext56 0EF6  
                          __ptext48 0F9A                            __ptext73 011B  
                          __ptext65 0AFB                            __ptext57 0B2A  
                          __ptext49 0BD3                       _PwrSensorInit 0C1B  
                          __ptext74 0022                            __ptext58 0850  
                          __ptext75 0151                            __ptext67 002E  
                          __ptext59 0A57                            __ptext76 01CE  
                          __ptext68 0144                            __ptext77 0331  
                          __ptext69 011E                       _PwrSensorWake 0C1F  
              _SoftI2cRepeatedStart 0A11                __size_of_PwrI2cSleep 0006  
             __size_of_AdcGetResult 0000                  _mrfRegset_SleepCnt 021D  
                  Mcp9800Read@tempH 0026                    Mcp9800Read@tempL 0027  
                  ??i1_Mrf49xaServe 0074                       __size_of_main 006C  
          Mrf49xaPacketPending@inst 0020                        i1_Mrf49RxCmd 0022  
            __end_of_mrfRegset_Init 023F                  Mrf49xaTxAck@packet 0028  
                      i1_Mrf49TxCmd 0147                        i1_Mrf49SpiRx 01CE  
                      i1_Mrf49SpiTx 0151                      ?_Mrf49xaModeRx 0070  
                    ?_Mrf49xaModeTx 0070                        i1_Mrf49RxSts 01C1  
                    ?_Mrf49xaReboot 0070                  __end_of_parameters 025F  
              __size_of_SoftI2cInit 000B                __size_of_SoftI2cStop 000F  
               Mrf49xaRxPacket@inst 0020                       ??_Mcp9800Read 0026  
                  ??_handleCfgWrite 0026           __size_of_RfSendPowerState 003B  
              __size_of_PwrAdcSleep 0006                       _eepromRxBytes 0A70  
                 Mrf49xaModeSleep@k 0023                       _eepromTxBytes 0A3B  
                   i1Mrf49RxCmd@cmd 0071                     main@temperature 0034  
                   i1Mrf49RxCmd@val 0072                      ??_HandlePacket 002B  
      __size_ofi1_Mrf49xaNeedsReset 0003                  Mrf49xaTick@timeout 002F  
                        _INTCONbits 000B                   ?_Mrf49xaModeSleep 0070  
                   i1Mrf49TxCmd@cmd 0072                     i1Mrf49TxCmd@val 0071  
                          memcpy@d1 0025                            memcpy@s1 0020  
                    ?_PwrSensorInit 0070                        _AdcGetResult 0000  
                    ?_PwrSensorWake 0070                  ??_Mrf49xaModeSleep 0023  
                     ?_handleCfgCmd 0070               ?_SoftI2cRepeatedStart 0070  
                   ??i1_Mrf49RxByte 0073                            intlevel1 0000  
                   ??i1_Mrf49TxByte 0073        __end_of_Mrf49xaPacketPending 02FB  
              __end_of_Mcp9800Start 0A70       RfSendSampleWeatherNode@packet 002D  
                 __CFG_CLKOUTEN$OFF 0000          __size_of_Mrf49xaFreePacket 0005  
            RfSendPowerState@packet 002B                       ?_Mrf49xaTxAck 0028  
                       _AdcChSelect 0E80                        Mrf49xaInit@k 0026  
                     ?_Mrf49xaServe 0070                     ??_handleCfgRead 0026  
                 Mrf49xaTick@packet 0030                      ?_eepromRxBytes 0024  
              eepromTxBytes@address 0024                     i1_Mrf49xaModeRx 011E  
                    ?_eepromTxBytes 0024           ??_RfSendSampleWeatherNode 002C  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 0A3B                   ??_Mrf49xaRxPacket 0020  
                  Mrf49xaTxAck@inst 0029                   ??_Mrf49xaTxPacket 0023  
                    ??_handleCfgCmd 0028                          _WDTCONbits 0097  
                 ??_Mrf49xaShutdown 0024                RfSendPowerState@inst 002A  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0024                      ??_Mrf49xaTxAck 0029  
                  Mrf49xaServe@data 0025                      ??_Mrf49xaServe 0024  
                     ??_Mrf49xaInit 0026                       ??_Mrf49xaTick 002E  
            handleCfgRead@nrOfBytes 0026                    Mrf49xaTxPacket@i 0026  

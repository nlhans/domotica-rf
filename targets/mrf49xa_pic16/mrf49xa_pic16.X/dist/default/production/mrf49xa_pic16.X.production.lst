

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Sat May 17 17:36:17 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text20,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text43,local,class=CODE,merge=1,delta=2
    16                           	psect	pa_nodes,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  0008                     	;# 
    27  0009                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  000D                     	;# 
    32  000E                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0013                     	;# 
    36  0015                     	;# 
    37  0016                     	;# 
    38  0016                     	;# 
    39  0017                     	;# 
    40  0018                     	;# 
    41  0019                     	;# 
    42  001A                     	;# 
    43  001B                     	;# 
    44  001C                     	;# 
    45  008C                     	;# 
    46  008D                     	;# 
    47  008E                     	;# 
    48  0091                     	;# 
    49  0092                     	;# 
    50  0093                     	;# 
    51  0095                     	;# 
    52  0096                     	;# 
    53  0097                     	;# 
    54  0099                     	;# 
    55  009A                     	;# 
    56  009B                     	;# 
    57  009B                     	;# 
    58  009C                     	;# 
    59  009D                     	;# 
    60  009E                     	;# 
    61  009F                     	;# 
    62  010C                     	;# 
    63  010D                     	;# 
    64  010E                     	;# 
    65  0111                     	;# 
    66  0112                     	;# 
    67  0113                     	;# 
    68  0114                     	;# 
    69  0115                     	;# 
    70  0116                     	;# 
    71  0117                     	;# 
    72  0118                     	;# 
    73  0119                     	;# 
    74  011D                     	;# 
    75  018C                     	;# 
    76  018D                     	;# 
    77  018E                     	;# 
    78  0191                     	;# 
    79  0191                     	;# 
    80  0192                     	;# 
    81  0193                     	;# 
    82  0193                     	;# 
    83  0194                     	;# 
    84  0195                     	;# 
    85  0196                     	;# 
    86  0199                     	;# 
    87  019A                     	;# 
    88  019B                     	;# 
    89  019B                     	;# 
    90  019C                     	;# 
    91  019D                     	;# 
    92  019E                     	;# 
    93  019F                     	;# 
    94  020C                     	;# 
    95  020D                     	;# 
    96  0211                     	;# 
    97  0211                     	;# 
    98  0212                     	;# 
    99  0212                     	;# 
   100  0213                     	;# 
   101  0213                     	;# 
   102  0214                     	;# 
   103  0214                     	;# 
   104  0215                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0216                     	;# 
   108  0216                     	;# 
   109  0217                     	;# 
   110  0217                     	;# 
   111  0391                     	;# 
   112  0392                     	;# 
   113  0393                     	;# 
   114  0394                     	;# 
   115  0395                     	;# 
   116  0396                     	;# 
   117  0498                     	;# 
   118  0498                     	;# 
   119  0499                     	;# 
   120  049A                     	;# 
   121  049B                     	;# 
   122  049B                     	;# 
   123  049C                     	;# 
   124  049E                     	;# 
   125  049F                     	;# 
   126  0611                     	;# 
   127  0612                     	;# 
   128  0613                     	;# 
   129  0613                     	;# 
   130  0614                     	;# 
   131  0615                     	;# 
   132  0616                     	;# 
   133  0616                     	;# 
   134  0617                     	;# 
   135  0618                     	;# 
   136  0619                     	;# 
   137  0619                     	;# 
   138  061A                     	;# 
   139  061B                     	;# 
   140  061C                     	;# 
   141  061C                     	;# 
   142  0691                     	;# 
   143  0692                     	;# 
   144  0693                     	;# 
   145  0694                     	;# 
   146  0695                     	;# 
   147  0F0F                     	;# 
   148  0F10                     	;# 
   149  0F11                     	;# 
   150  0F12                     	;# 
   151  0F13                     	;# 
   152  0F14                     	;# 
   153  0F15                     	;# 
   154  0F16                     	;# 
   155  0F17                     	;# 
   156  0F18                     	;# 
   157  0F19                     	;# 
   158  0F1A                     	;# 
   159  0F1B                     	;# 
   160  0F1C                     	;# 
   161  0F1D                     	;# 
   162  0F1E                     	;# 
   163  0F1F                     	;# 
   164  0F20                     	;# 
   165  0F21                     	;# 
   166  0F22                     	;# 
   167  0F23                     	;# 
   168  0F24                     	;# 
   169  0F25                     	;# 
   170  0F26                     	;# 
   171  0F27                     	;# 
   172  0F28                     	;# 
   173  0F29                     	;# 
   174  0F2A                     	;# 
   175  0F2B                     	;# 
   176  0F2C                     	;# 
   177  0F2D                     	;# 
   178  0F2E                     	;# 
   179  0F2F                     	;# 
   180  0F8C                     	;# 
   181  0F8D                     	;# 
   182  0F91                     	;# 
   183  0F95                     	;# 
   184  0F96                     	;# 
   185  0F97                     	;# 
   186  0F9C                     	;# 
   187  0F9D                     	;# 
   188  0F9E                     	;# 
   189  0FE3                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE9                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEF                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0008                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  000E                     	;# 
   216  0011                     	;# 
   217  0012                     	;# 
   218  0013                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0016                     	;# 
   222  0017                     	;# 
   223  0018                     	;# 
   224  0019                     	;# 
   225  001A                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  008C                     	;# 
   229  008D                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  010D                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  018E                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0194                     	;# 
   267  0195                     	;# 
   268  0196                     	;# 
   269  0199                     	;# 
   270  019A                     	;# 
   271  019B                     	;# 
   272  019B                     	;# 
   273  019C                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019F                     	;# 
   277  020C                     	;# 
   278  020D                     	;# 
   279  0211                     	;# 
   280  0211                     	;# 
   281  0212                     	;# 
   282  0212                     	;# 
   283  0213                     	;# 
   284  0213                     	;# 
   285  0214                     	;# 
   286  0214                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0216                     	;# 
   291  0216                     	;# 
   292  0217                     	;# 
   293  0217                     	;# 
   294  0391                     	;# 
   295  0392                     	;# 
   296  0393                     	;# 
   297  0394                     	;# 
   298  0395                     	;# 
   299  0396                     	;# 
   300  0498                     	;# 
   301  0498                     	;# 
   302  0499                     	;# 
   303  049A                     	;# 
   304  049B                     	;# 
   305  049B                     	;# 
   306  049C                     	;# 
   307  049E                     	;# 
   308  049F                     	;# 
   309  0611                     	;# 
   310  0612                     	;# 
   311  0613                     	;# 
   312  0613                     	;# 
   313  0614                     	;# 
   314  0615                     	;# 
   315  0616                     	;# 
   316  0616                     	;# 
   317  0617                     	;# 
   318  0618                     	;# 
   319  0619                     	;# 
   320  0619                     	;# 
   321  061A                     	;# 
   322  061B                     	;# 
   323  061C                     	;# 
   324  061C                     	;# 
   325  0691                     	;# 
   326  0692                     	;# 
   327  0693                     	;# 
   328  0694                     	;# 
   329  0695                     	;# 
   330  0F0F                     	;# 
   331  0F10                     	;# 
   332  0F11                     	;# 
   333  0F12                     	;# 
   334  0F13                     	;# 
   335  0F14                     	;# 
   336  0F15                     	;# 
   337  0F16                     	;# 
   338  0F17                     	;# 
   339  0F18                     	;# 
   340  0F19                     	;# 
   341  0F1A                     	;# 
   342  0F1B                     	;# 
   343  0F1C                     	;# 
   344  0F1D                     	;# 
   345  0F1E                     	;# 
   346  0F1F                     	;# 
   347  0F20                     	;# 
   348  0F21                     	;# 
   349  0F22                     	;# 
   350  0F23                     	;# 
   351  0F24                     	;# 
   352  0F25                     	;# 
   353  0F26                     	;# 
   354  0F27                     	;# 
   355  0F28                     	;# 
   356  0F29                     	;# 
   357  0F2A                     	;# 
   358  0F2B                     	;# 
   359  0F2C                     	;# 
   360  0F2D                     	;# 
   361  0F2E                     	;# 
   362  0F2F                     	;# 
   363  0F8C                     	;# 
   364  0F8D                     	;# 
   365  0F91                     	;# 
   366  0F95                     	;# 
   367  0F96                     	;# 
   368  0F97                     	;# 
   369  0F9C                     	;# 
   370  0F9D                     	;# 
   371  0F9E                     	;# 
   372  0FE3                     	;# 
   373  0FE4                     	;# 
   374  0FE5                     	;# 
   375  0FE6                     	;# 
   376  0FE7                     	;# 
   377  0FE8                     	;# 
   378  0FE9                     	;# 
   379  0FEA                     	;# 
   380  0FEB                     	;# 
   381  0FED                     	;# 
   382  0FEE                     	;# 
   383  0FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0013                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0093                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  009F                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0111                     	;# 
   432  0112                     	;# 
   433  0113                     	;# 
   434  0114                     	;# 
   435  0115                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  0118                     	;# 
   439  0119                     	;# 
   440  011D                     	;# 
   441  018C                     	;# 
   442  018D                     	;# 
   443  018E                     	;# 
   444  0191                     	;# 
   445  0191                     	;# 
   446  0192                     	;# 
   447  0193                     	;# 
   448  0193                     	;# 
   449  0194                     	;# 
   450  0195                     	;# 
   451  0196                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020C                     	;# 
   461  020D                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0391                     	;# 
   478  0392                     	;# 
   479  0393                     	;# 
   480  0394                     	;# 
   481  0395                     	;# 
   482  0396                     	;# 
   483  0498                     	;# 
   484  0498                     	;# 
   485  0499                     	;# 
   486  049A                     	;# 
   487  049B                     	;# 
   488  049B                     	;# 
   489  049C                     	;# 
   490  049E                     	;# 
   491  049F                     	;# 
   492  0611                     	;# 
   493  0612                     	;# 
   494  0613                     	;# 
   495  0613                     	;# 
   496  0614                     	;# 
   497  0615                     	;# 
   498  0616                     	;# 
   499  0616                     	;# 
   500  0617                     	;# 
   501  0618                     	;# 
   502  0619                     	;# 
   503  0619                     	;# 
   504  061A                     	;# 
   505  061B                     	;# 
   506  061C                     	;# 
   507  061C                     	;# 
   508  0691                     	;# 
   509  0692                     	;# 
   510  0693                     	;# 
   511  0694                     	;# 
   512  0695                     	;# 
   513  0F0F                     	;# 
   514  0F10                     	;# 
   515  0F11                     	;# 
   516  0F12                     	;# 
   517  0F13                     	;# 
   518  0F14                     	;# 
   519  0F15                     	;# 
   520  0F16                     	;# 
   521  0F17                     	;# 
   522  0F18                     	;# 
   523  0F19                     	;# 
   524  0F1A                     	;# 
   525  0F1B                     	;# 
   526  0F1C                     	;# 
   527  0F1D                     	;# 
   528  0F1E                     	;# 
   529  0F1F                     	;# 
   530  0F20                     	;# 
   531  0F21                     	;# 
   532  0F22                     	;# 
   533  0F23                     	;# 
   534  0F24                     	;# 
   535  0F25                     	;# 
   536  0F26                     	;# 
   537  0F27                     	;# 
   538  0F28                     	;# 
   539  0F29                     	;# 
   540  0F2A                     	;# 
   541  0F2B                     	;# 
   542  0F2C                     	;# 
   543  0F2D                     	;# 
   544  0F2E                     	;# 
   545  0F2F                     	;# 
   546  0F8C                     	;# 
   547  0F8D                     	;# 
   548  0F91                     	;# 
   549  0F95                     	;# 
   550  0F96                     	;# 
   551  0F97                     	;# 
   552  0F9C                     	;# 
   553  0F9D                     	;# 
   554  0F9E                     	;# 
   555  0FE3                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  0011                     	;# 
   583  0012                     	;# 
   584  0013                     	;# 
   585  0015                     	;# 
   586  0016                     	;# 
   587  0016                     	;# 
   588  0017                     	;# 
   589  0018                     	;# 
   590  0019                     	;# 
   591  001A                     	;# 
   592  001B                     	;# 
   593  001C                     	;# 
   594  008C                     	;# 
   595  008D                     	;# 
   596  008E                     	;# 
   597  0091                     	;# 
   598  0092                     	;# 
   599  0093                     	;# 
   600  0095                     	;# 
   601  0096                     	;# 
   602  0097                     	;# 
   603  0099                     	;# 
   604  009A                     	;# 
   605  009B                     	;# 
   606  009B                     	;# 
   607  009C                     	;# 
   608  009D                     	;# 
   609  009E                     	;# 
   610  009F                     	;# 
   611  010C                     	;# 
   612  010D                     	;# 
   613  010E                     	;# 
   614  0111                     	;# 
   615  0112                     	;# 
   616  0113                     	;# 
   617  0114                     	;# 
   618  0115                     	;# 
   619  0116                     	;# 
   620  0117                     	;# 
   621  0118                     	;# 
   622  0119                     	;# 
   623  011D                     	;# 
   624  018C                     	;# 
   625  018D                     	;# 
   626  018E                     	;# 
   627  0191                     	;# 
   628  0191                     	;# 
   629  0192                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019F                     	;# 
   643  020C                     	;# 
   644  020D                     	;# 
   645  0211                     	;# 
   646  0211                     	;# 
   647  0212                     	;# 
   648  0212                     	;# 
   649  0213                     	;# 
   650  0213                     	;# 
   651  0214                     	;# 
   652  0214                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0216                     	;# 
   657  0216                     	;# 
   658  0217                     	;# 
   659  0217                     	;# 
   660  0391                     	;# 
   661  0392                     	;# 
   662  0393                     	;# 
   663  0394                     	;# 
   664  0395                     	;# 
   665  0396                     	;# 
   666  0498                     	;# 
   667  0498                     	;# 
   668  0499                     	;# 
   669  049A                     	;# 
   670  049B                     	;# 
   671  049B                     	;# 
   672  049C                     	;# 
   673  049E                     	;# 
   674  049F                     	;# 
   675  0611                     	;# 
   676  0612                     	;# 
   677  0613                     	;# 
   678  0613                     	;# 
   679  0614                     	;# 
   680  0615                     	;# 
   681  0616                     	;# 
   682  0616                     	;# 
   683  0617                     	;# 
   684  0618                     	;# 
   685  0619                     	;# 
   686  0619                     	;# 
   687  061A                     	;# 
   688  061B                     	;# 
   689  061C                     	;# 
   690  061C                     	;# 
   691  0691                     	;# 
   692  0692                     	;# 
   693  0693                     	;# 
   694  0694                     	;# 
   695  0695                     	;# 
   696  0F0F                     	;# 
   697  0F10                     	;# 
   698  0F11                     	;# 
   699  0F12                     	;# 
   700  0F13                     	;# 
   701  0F14                     	;# 
   702  0F15                     	;# 
   703  0F16                     	;# 
   704  0F17                     	;# 
   705  0F18                     	;# 
   706  0F19                     	;# 
   707  0F1A                     	;# 
   708  0F1B                     	;# 
   709  0F1C                     	;# 
   710  0F1D                     	;# 
   711  0F1E                     	;# 
   712  0F1F                     	;# 
   713  0F20                     	;# 
   714  0F21                     	;# 
   715  0F22                     	;# 
   716  0F23                     	;# 
   717  0F24                     	;# 
   718  0F25                     	;# 
   719  0F26                     	;# 
   720  0F27                     	;# 
   721  0F28                     	;# 
   722  0F29                     	;# 
   723  0F2A                     	;# 
   724  0F2B                     	;# 
   725  0F2C                     	;# 
   726  0F2D                     	;# 
   727  0F2E                     	;# 
   728  0F2F                     	;# 
   729  0F8C                     	;# 
   730  0F8D                     	;# 
   731  0F91                     	;# 
   732  0F95                     	;# 
   733  0F96                     	;# 
   734  0F97                     	;# 
   735  0F9C                     	;# 
   736  0F9D                     	;# 
   737  0F9E                     	;# 
   738  0FE3                     	;# 
   739  0FE4                     	;# 
   740  0FE5                     	;# 
   741  0FE6                     	;# 
   742  0FE7                     	;# 
   743  0FE8                     	;# 
   744  0FE9                     	;# 
   745  0FEA                     	;# 
   746  0FEB                     	;# 
   747  0FED                     	;# 
   748  0FEE                     	;# 
   749  0FEF                     	;# 
   750  0000                     	;# 
   751  0001                     	;# 
   752  0002                     	;# 
   753  0003                     	;# 
   754  0004                     	;# 
   755  0005                     	;# 
   756  0006                     	;# 
   757  0007                     	;# 
   758  0008                     	;# 
   759  0009                     	;# 
   760  000A                     	;# 
   761  000B                     	;# 
   762  000C                     	;# 
   763  000D                     	;# 
   764  000E                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  008C                     	;# 
   778  008D                     	;# 
   779  008E                     	;# 
   780  0091                     	;# 
   781  0092                     	;# 
   782  0093                     	;# 
   783  0095                     	;# 
   784  0096                     	;# 
   785  0097                     	;# 
   786  0099                     	;# 
   787  009A                     	;# 
   788  009B                     	;# 
   789  009B                     	;# 
   790  009C                     	;# 
   791  009D                     	;# 
   792  009E                     	;# 
   793  009F                     	;# 
   794  010C                     	;# 
   795  010D                     	;# 
   796  010E                     	;# 
   797  0111                     	;# 
   798  0112                     	;# 
   799  0113                     	;# 
   800  0114                     	;# 
   801  0115                     	;# 
   802  0116                     	;# 
   803  0117                     	;# 
   804  0118                     	;# 
   805  0119                     	;# 
   806  011D                     	;# 
   807  018C                     	;# 
   808  018D                     	;# 
   809  018E                     	;# 
   810  0191                     	;# 
   811  0191                     	;# 
   812  0192                     	;# 
   813  0193                     	;# 
   814  0193                     	;# 
   815  0194                     	;# 
   816  0195                     	;# 
   817  0196                     	;# 
   818  0199                     	;# 
   819  019A                     	;# 
   820  019B                     	;# 
   821  019B                     	;# 
   822  019C                     	;# 
   823  019D                     	;# 
   824  019E                     	;# 
   825  019F                     	;# 
   826  020C                     	;# 
   827  020D                     	;# 
   828  0211                     	;# 
   829  0211                     	;# 
   830  0212                     	;# 
   831  0212                     	;# 
   832  0213                     	;# 
   833  0213                     	;# 
   834  0214                     	;# 
   835  0214                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0216                     	;# 
   840  0216                     	;# 
   841  0217                     	;# 
   842  0217                     	;# 
   843  0391                     	;# 
   844  0392                     	;# 
   845  0393                     	;# 
   846  0394                     	;# 
   847  0395                     	;# 
   848  0396                     	;# 
   849  0498                     	;# 
   850  0498                     	;# 
   851  0499                     	;# 
   852  049A                     	;# 
   853  049B                     	;# 
   854  049B                     	;# 
   855  049C                     	;# 
   856  049E                     	;# 
   857  049F                     	;# 
   858  0611                     	;# 
   859  0612                     	;# 
   860  0613                     	;# 
   861  0613                     	;# 
   862  0614                     	;# 
   863  0615                     	;# 
   864  0616                     	;# 
   865  0616                     	;# 
   866  0617                     	;# 
   867  0618                     	;# 
   868  0619                     	;# 
   869  0619                     	;# 
   870  061A                     	;# 
   871  061B                     	;# 
   872  061C                     	;# 
   873  061C                     	;# 
   874  0691                     	;# 
   875  0692                     	;# 
   876  0693                     	;# 
   877  0694                     	;# 
   878  0695                     	;# 
   879  0F0F                     	;# 
   880  0F10                     	;# 
   881  0F11                     	;# 
   882  0F12                     	;# 
   883  0F13                     	;# 
   884  0F14                     	;# 
   885  0F15                     	;# 
   886  0F16                     	;# 
   887  0F17                     	;# 
   888  0F18                     	;# 
   889  0F19                     	;# 
   890  0F1A                     	;# 
   891  0F1B                     	;# 
   892  0F1C                     	;# 
   893  0F1D                     	;# 
   894  0F1E                     	;# 
   895  0F1F                     	;# 
   896  0F20                     	;# 
   897  0F21                     	;# 
   898  0F22                     	;# 
   899  0F23                     	;# 
   900  0F24                     	;# 
   901  0F25                     	;# 
   902  0F26                     	;# 
   903  0F27                     	;# 
   904  0F28                     	;# 
   905  0F29                     	;# 
   906  0F2A                     	;# 
   907  0F2B                     	;# 
   908  0F2C                     	;# 
   909  0F2D                     	;# 
   910  0F2E                     	;# 
   911  0F2F                     	;# 
   912  0F8C                     	;# 
   913  0F8D                     	;# 
   914  0F91                     	;# 
   915  0F95                     	;# 
   916  0F96                     	;# 
   917  0F97                     	;# 
   918  0F9C                     	;# 
   919  0F9D                     	;# 
   920  0F9E                     	;# 
   921  0FE3                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0013                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  009F                     	;# 
   977  010C                     	;# 
   978  010D                     	;# 
   979  010E                     	;# 
   980  0111                     	;# 
   981  0112                     	;# 
   982  0113                     	;# 
   983  0114                     	;# 
   984  0115                     	;# 
   985  0116                     	;# 
   986  0117                     	;# 
   987  0118                     	;# 
   988  0119                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020C                     	;# 
  1010  020D                     	;# 
  1011  0211                     	;# 
  1012  0211                     	;# 
  1013  0212                     	;# 
  1014  0212                     	;# 
  1015  0213                     	;# 
  1016  0213                     	;# 
  1017  0214                     	;# 
  1018  0214                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0216                     	;# 
  1023  0216                     	;# 
  1024  0217                     	;# 
  1025  0217                     	;# 
  1026  0391                     	;# 
  1027  0392                     	;# 
  1028  0393                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0498                     	;# 
  1033  0498                     	;# 
  1034  0499                     	;# 
  1035  049A                     	;# 
  1036  049B                     	;# 
  1037  049B                     	;# 
  1038  049C                     	;# 
  1039  049E                     	;# 
  1040  049F                     	;# 
  1041  0611                     	;# 
  1042  0612                     	;# 
  1043  0613                     	;# 
  1044  0613                     	;# 
  1045  0614                     	;# 
  1046  0615                     	;# 
  1047  0616                     	;# 
  1048  0616                     	;# 
  1049  0617                     	;# 
  1050  0618                     	;# 
  1051  0619                     	;# 
  1052  0619                     	;# 
  1053  061A                     	;# 
  1054  061B                     	;# 
  1055  061C                     	;# 
  1056  061C                     	;# 
  1057  0691                     	;# 
  1058  0692                     	;# 
  1059  0693                     	;# 
  1060  0694                     	;# 
  1061  0695                     	;# 
  1062  0F0F                     	;# 
  1063  0F10                     	;# 
  1064  0F11                     	;# 
  1065  0F12                     	;# 
  1066  0F13                     	;# 
  1067  0F14                     	;# 
  1068  0F15                     	;# 
  1069  0F16                     	;# 
  1070  0F17                     	;# 
  1071  0F18                     	;# 
  1072  0F19                     	;# 
  1073  0F1A                     	;# 
  1074  0F1B                     	;# 
  1075  0F1C                     	;# 
  1076  0F1D                     	;# 
  1077  0F1E                     	;# 
  1078  0F1F                     	;# 
  1079  0F20                     	;# 
  1080  0F21                     	;# 
  1081  0F22                     	;# 
  1082  0F23                     	;# 
  1083  0F24                     	;# 
  1084  0F25                     	;# 
  1085  0F26                     	;# 
  1086  0F27                     	;# 
  1087  0F28                     	;# 
  1088  0F29                     	;# 
  1089  0F2A                     	;# 
  1090  0F2B                     	;# 
  1091  0F2C                     	;# 
  1092  0F2D                     	;# 
  1093  0F2E                     	;# 
  1094  0F2F                     	;# 
  1095  0F8C                     	;# 
  1096  0F8D                     	;# 
  1097  0F91                     	;# 
  1098  0F95                     	;# 
  1099  0F96                     	;# 
  1100  0F97                     	;# 
  1101  0F9C                     	;# 
  1102  0F9D                     	;# 
  1103  0F9E                     	;# 
  1104  0FE3                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0015                     	;# 
  1135  0016                     	;# 
  1136  0016                     	;# 
  1137  0017                     	;# 
  1138  0018                     	;# 
  1139  0019                     	;# 
  1140  001A                     	;# 
  1141  001B                     	;# 
  1142  001C                     	;# 
  1143  008C                     	;# 
  1144  008D                     	;# 
  1145  008E                     	;# 
  1146  0091                     	;# 
  1147  0092                     	;# 
  1148  0093                     	;# 
  1149  0095                     	;# 
  1150  0096                     	;# 
  1151  0097                     	;# 
  1152  0099                     	;# 
  1153  009A                     	;# 
  1154  009B                     	;# 
  1155  009B                     	;# 
  1156  009C                     	;# 
  1157  009D                     	;# 
  1158  009E                     	;# 
  1159  009F                     	;# 
  1160  010C                     	;# 
  1161  010D                     	;# 
  1162  010E                     	;# 
  1163  0111                     	;# 
  1164  0112                     	;# 
  1165  0113                     	;# 
  1166  0114                     	;# 
  1167  0115                     	;# 
  1168  0116                     	;# 
  1169  0117                     	;# 
  1170  0118                     	;# 
  1171  0119                     	;# 
  1172  011D                     	;# 
  1173  018C                     	;# 
  1174  018D                     	;# 
  1175  018E                     	;# 
  1176  0191                     	;# 
  1177  0191                     	;# 
  1178  0192                     	;# 
  1179  0193                     	;# 
  1180  0193                     	;# 
  1181  0194                     	;# 
  1182  0195                     	;# 
  1183  0196                     	;# 
  1184  0199                     	;# 
  1185  019A                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019F                     	;# 
  1192  020C                     	;# 
  1193  020D                     	;# 
  1194  0211                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0212                     	;# 
  1198  0213                     	;# 
  1199  0213                     	;# 
  1200  0214                     	;# 
  1201  0214                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0216                     	;# 
  1206  0216                     	;# 
  1207  0217                     	;# 
  1208  0217                     	;# 
  1209  0391                     	;# 
  1210  0392                     	;# 
  1211  0393                     	;# 
  1212  0394                     	;# 
  1213  0395                     	;# 
  1214  0396                     	;# 
  1215  0498                     	;# 
  1216  0498                     	;# 
  1217  0499                     	;# 
  1218  049A                     	;# 
  1219  049B                     	;# 
  1220  049B                     	;# 
  1221  049C                     	;# 
  1222  049E                     	;# 
  1223  049F                     	;# 
  1224  0611                     	;# 
  1225  0612                     	;# 
  1226  0613                     	;# 
  1227  0613                     	;# 
  1228  0614                     	;# 
  1229  0615                     	;# 
  1230  0616                     	;# 
  1231  0616                     	;# 
  1232  0617                     	;# 
  1233  0618                     	;# 
  1234  0619                     	;# 
  1235  0619                     	;# 
  1236  061A                     	;# 
  1237  061B                     	;# 
  1238  061C                     	;# 
  1239  061C                     	;# 
  1240  0691                     	;# 
  1241  0692                     	;# 
  1242  0693                     	;# 
  1243  0694                     	;# 
  1244  0695                     	;# 
  1245  0F0F                     	;# 
  1246  0F10                     	;# 
  1247  0F11                     	;# 
  1248  0F12                     	;# 
  1249  0F13                     	;# 
  1250  0F14                     	;# 
  1251  0F15                     	;# 
  1252  0F16                     	;# 
  1253  0F17                     	;# 
  1254  0F18                     	;# 
  1255  0F19                     	;# 
  1256  0F1A                     	;# 
  1257  0F1B                     	;# 
  1258  0F1C                     	;# 
  1259  0F1D                     	;# 
  1260  0F1E                     	;# 
  1261  0F1F                     	;# 
  1262  0F20                     	;# 
  1263  0F21                     	;# 
  1264  0F22                     	;# 
  1265  0F23                     	;# 
  1266  0F24                     	;# 
  1267  0F25                     	;# 
  1268  0F26                     	;# 
  1269  0F27                     	;# 
  1270  0F28                     	;# 
  1271  0F29                     	;# 
  1272  0F2A                     	;# 
  1273  0F2B                     	;# 
  1274  0F2C                     	;# 
  1275  0F2D                     	;# 
  1276  0F2E                     	;# 
  1277  0F2F                     	;# 
  1278  0F8C                     	;# 
  1279  0F8D                     	;# 
  1280  0F91                     	;# 
  1281  0F95                     	;# 
  1282  0F96                     	;# 
  1283  0F97                     	;# 
  1284  0F9C                     	;# 
  1285  0F9D                     	;# 
  1286  0F9E                     	;# 
  1287  0FE3                     	;# 
  1288  0FE4                     	;# 
  1289  0FE5                     	;# 
  1290  0FE6                     	;# 
  1291  0FE7                     	;# 
  1292  0FE8                     	;# 
  1293  0FE9                     	;# 
  1294  0FEA                     	;# 
  1295  0FEB                     	;# 
  1296  0FED                     	;# 
  1297  0FEE                     	;# 
  1298  0FEF                     	;# 
  1299  0000                     	;# 
  1300  0001                     	;# 
  1301  0002                     	;# 
  1302  0003                     	;# 
  1303  0004                     	;# 
  1304  0005                     	;# 
  1305  0006                     	;# 
  1306  0007                     	;# 
  1307  0008                     	;# 
  1308  0009                     	;# 
  1309  000A                     	;# 
  1310  000B                     	;# 
  1311  000C                     	;# 
  1312  000D                     	;# 
  1313  000E                     	;# 
  1314  0011                     	;# 
  1315  0012                     	;# 
  1316  0013                     	;# 
  1317  0015                     	;# 
  1318  0016                     	;# 
  1319  0016                     	;# 
  1320  0017                     	;# 
  1321  0018                     	;# 
  1322  0019                     	;# 
  1323  001A                     	;# 
  1324  001B                     	;# 
  1325  001C                     	;# 
  1326  008C                     	;# 
  1327  008D                     	;# 
  1328  008E                     	;# 
  1329  0091                     	;# 
  1330  0092                     	;# 
  1331  0093                     	;# 
  1332  0095                     	;# 
  1333  0096                     	;# 
  1334  0097                     	;# 
  1335  0099                     	;# 
  1336  009A                     	;# 
  1337  009B                     	;# 
  1338  009B                     	;# 
  1339  009C                     	;# 
  1340  009D                     	;# 
  1341  009E                     	;# 
  1342  009F                     	;# 
  1343  010C                     	;# 
  1344  010D                     	;# 
  1345  010E                     	;# 
  1346  0111                     	;# 
  1347  0112                     	;# 
  1348  0113                     	;# 
  1349  0114                     	;# 
  1350  0115                     	;# 
  1351  0116                     	;# 
  1352  0117                     	;# 
  1353  0118                     	;# 
  1354  0119                     	;# 
  1355  011D                     	;# 
  1356  018C                     	;# 
  1357  018D                     	;# 
  1358  018E                     	;# 
  1359  0191                     	;# 
  1360  0191                     	;# 
  1361  0192                     	;# 
  1362  0193                     	;# 
  1363  0193                     	;# 
  1364  0194                     	;# 
  1365  0195                     	;# 
  1366  0196                     	;# 
  1367  0199                     	;# 
  1368  019A                     	;# 
  1369  019B                     	;# 
  1370  019B                     	;# 
  1371  019C                     	;# 
  1372  019D                     	;# 
  1373  019E                     	;# 
  1374  019F                     	;# 
  1375  020C                     	;# 
  1376  020D                     	;# 
  1377  0211                     	;# 
  1378  0211                     	;# 
  1379  0212                     	;# 
  1380  0212                     	;# 
  1381  0213                     	;# 
  1382  0213                     	;# 
  1383  0214                     	;# 
  1384  0214                     	;# 
  1385  0215                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0216                     	;# 
  1389  0216                     	;# 
  1390  0217                     	;# 
  1391  0217                     	;# 
  1392  0391                     	;# 
  1393  0392                     	;# 
  1394  0393                     	;# 
  1395  0394                     	;# 
  1396  0395                     	;# 
  1397  0396                     	;# 
  1398  0498                     	;# 
  1399  0498                     	;# 
  1400  0499                     	;# 
  1401  049A                     	;# 
  1402  049B                     	;# 
  1403  049B                     	;# 
  1404  049C                     	;# 
  1405  049E                     	;# 
  1406  049F                     	;# 
  1407  0611                     	;# 
  1408  0612                     	;# 
  1409  0613                     	;# 
  1410  0613                     	;# 
  1411  0614                     	;# 
  1412  0615                     	;# 
  1413  0616                     	;# 
  1414  0616                     	;# 
  1415  0617                     	;# 
  1416  0618                     	;# 
  1417  0619                     	;# 
  1418  0619                     	;# 
  1419  061A                     	;# 
  1420  061B                     	;# 
  1421  061C                     	;# 
  1422  061C                     	;# 
  1423  0691                     	;# 
  1424  0692                     	;# 
  1425  0693                     	;# 
  1426  0694                     	;# 
  1427  0695                     	;# 
  1428  0F0F                     	;# 
  1429  0F10                     	;# 
  1430  0F11                     	;# 
  1431  0F12                     	;# 
  1432  0F13                     	;# 
  1433  0F14                     	;# 
  1434  0F15                     	;# 
  1435  0F16                     	;# 
  1436  0F17                     	;# 
  1437  0F18                     	;# 
  1438  0F19                     	;# 
  1439  0F1A                     	;# 
  1440  0F1B                     	;# 
  1441  0F1C                     	;# 
  1442  0F1D                     	;# 
  1443  0F1E                     	;# 
  1444  0F1F                     	;# 
  1445  0F20                     	;# 
  1446  0F21                     	;# 
  1447  0F22                     	;# 
  1448  0F23                     	;# 
  1449  0F24                     	;# 
  1450  0F25                     	;# 
  1451  0F26                     	;# 
  1452  0F27                     	;# 
  1453  0F28                     	;# 
  1454  0F29                     	;# 
  1455  0F2A                     	;# 
  1456  0F2B                     	;# 
  1457  0F2C                     	;# 
  1458  0F2D                     	;# 
  1459  0F2E                     	;# 
  1460  0F2F                     	;# 
  1461  0F8C                     	;# 
  1462  0F8D                     	;# 
  1463  0F91                     	;# 
  1464  0F95                     	;# 
  1465  0F96                     	;# 
  1466  0F97                     	;# 
  1467  0F9C                     	;# 
  1468  0F9D                     	;# 
  1469  0F9E                     	;# 
  1470  0FE3                     	;# 
  1471  0FE4                     	;# 
  1472  0FE5                     	;# 
  1473  0FE6                     	;# 
  1474  0FE7                     	;# 
  1475  0FE8                     	;# 
  1476  0FE9                     	;# 
  1477  0FEA                     	;# 
  1478  0FEB                     	;# 
  1479  0FED                     	;# 
  1480  0FEE                     	;# 
  1481  0FEF                     	;# 
  1482  0000                     	;# 
  1483  0001                     	;# 
  1484  0002                     	;# 
  1485  0003                     	;# 
  1486  0004                     	;# 
  1487  0005                     	;# 
  1488  0006                     	;# 
  1489  0007                     	;# 
  1490  0008                     	;# 
  1491  0009                     	;# 
  1492  000A                     	;# 
  1493  000B                     	;# 
  1494  000C                     	;# 
  1495  000D                     	;# 
  1496  000E                     	;# 
  1497  0011                     	;# 
  1498  0012                     	;# 
  1499  0013                     	;# 
  1500  0015                     	;# 
  1501  0016                     	;# 
  1502  0016                     	;# 
  1503  0017                     	;# 
  1504  0018                     	;# 
  1505  0019                     	;# 
  1506  001A                     	;# 
  1507  001B                     	;# 
  1508  001C                     	;# 
  1509  008C                     	;# 
  1510  008D                     	;# 
  1511  008E                     	;# 
  1512  0091                     	;# 
  1513  0092                     	;# 
  1514  0093                     	;# 
  1515  0095                     	;# 
  1516  0096                     	;# 
  1517  0097                     	;# 
  1518  0099                     	;# 
  1519  009A                     	;# 
  1520  009B                     	;# 
  1521  009B                     	;# 
  1522  009C                     	;# 
  1523  009D                     	;# 
  1524  009E                     	;# 
  1525  009F                     	;# 
  1526  010C                     	;# 
  1527  010D                     	;# 
  1528  010E                     	;# 
  1529  0111                     	;# 
  1530  0112                     	;# 
  1531  0113                     	;# 
  1532  0114                     	;# 
  1533  0115                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  0118                     	;# 
  1537  0119                     	;# 
  1538  011D                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0199                     	;# 
  1551  019A                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019D                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  020C                     	;# 
  1559  020D                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0391                     	;# 
  1576  0392                     	;# 
  1577  0393                     	;# 
  1578  0394                     	;# 
  1579  0395                     	;# 
  1580  0396                     	;# 
  1581  0498                     	;# 
  1582  0498                     	;# 
  1583  0499                     	;# 
  1584  049A                     	;# 
  1585  049B                     	;# 
  1586  049B                     	;# 
  1587  049C                     	;# 
  1588  049E                     	;# 
  1589  049F                     	;# 
  1590  0611                     	;# 
  1591  0612                     	;# 
  1592  0613                     	;# 
  1593  0613                     	;# 
  1594  0614                     	;# 
  1595  0615                     	;# 
  1596  0616                     	;# 
  1597  0616                     	;# 
  1598  0617                     	;# 
  1599  0618                     	;# 
  1600  0619                     	;# 
  1601  0619                     	;# 
  1602  061A                     	;# 
  1603  061B                     	;# 
  1604  061C                     	;# 
  1605  061C                     	;# 
  1606  0691                     	;# 
  1607  0692                     	;# 
  1608  0693                     	;# 
  1609  0694                     	;# 
  1610  0695                     	;# 
  1611  0F0F                     	;# 
  1612  0F10                     	;# 
  1613  0F11                     	;# 
  1614  0F12                     	;# 
  1615  0F13                     	;# 
  1616  0F14                     	;# 
  1617  0F15                     	;# 
  1618  0F16                     	;# 
  1619  0F17                     	;# 
  1620  0F18                     	;# 
  1621  0F19                     	;# 
  1622  0F1A                     	;# 
  1623  0F1B                     	;# 
  1624  0F1C                     	;# 
  1625  0F1D                     	;# 
  1626  0F1E                     	;# 
  1627  0F1F                     	;# 
  1628  0F20                     	;# 
  1629  0F21                     	;# 
  1630  0F22                     	;# 
  1631  0F23                     	;# 
  1632  0F24                     	;# 
  1633  0F25                     	;# 
  1634  0F26                     	;# 
  1635  0F27                     	;# 
  1636  0F28                     	;# 
  1637  0F29                     	;# 
  1638  0F2A                     	;# 
  1639  0F2B                     	;# 
  1640  0F2C                     	;# 
  1641  0F2D                     	;# 
  1642  0F2E                     	;# 
  1643  0F2F                     	;# 
  1644  0F8C                     	;# 
  1645  0F8D                     	;# 
  1646  0F91                     	;# 
  1647  0F95                     	;# 
  1648  0F96                     	;# 
  1649  0F97                     	;# 
  1650  0F9C                     	;# 
  1651  0F9D                     	;# 
  1652  0F9E                     	;# 
  1653  0FE3                     	;# 
  1654  0FE4                     	;# 
  1655  0FE5                     	;# 
  1656  0FE6                     	;# 
  1657  0FE7                     	;# 
  1658  0FE8                     	;# 
  1659  0FE9                     	;# 
  1660  0FEA                     	;# 
  1661  0FEB                     	;# 
  1662  0FED                     	;# 
  1663  0FEE                     	;# 
  1664  0FEF                     	;# 
  1665  0000                     	;# 
  1666  0001                     	;# 
  1667  0002                     	;# 
  1668  0003                     	;# 
  1669  0004                     	;# 
  1670  0005                     	;# 
  1671  0006                     	;# 
  1672  0007                     	;# 
  1673  0008                     	;# 
  1674  0009                     	;# 
  1675  000A                     	;# 
  1676  000B                     	;# 
  1677  000C                     	;# 
  1678  000D                     	;# 
  1679  000E                     	;# 
  1680  0011                     	;# 
  1681  0012                     	;# 
  1682  0013                     	;# 
  1683  0015                     	;# 
  1684  0016                     	;# 
  1685  0016                     	;# 
  1686  0017                     	;# 
  1687  0018                     	;# 
  1688  0019                     	;# 
  1689  001A                     	;# 
  1690  001B                     	;# 
  1691  001C                     	;# 
  1692  008C                     	;# 
  1693  008D                     	;# 
  1694  008E                     	;# 
  1695  0091                     	;# 
  1696  0092                     	;# 
  1697  0093                     	;# 
  1698  0095                     	;# 
  1699  0096                     	;# 
  1700  0097                     	;# 
  1701  0099                     	;# 
  1702  009A                     	;# 
  1703  009B                     	;# 
  1704  009B                     	;# 
  1705  009C                     	;# 
  1706  009D                     	;# 
  1707  009E                     	;# 
  1708  009F                     	;# 
  1709  010C                     	;# 
  1710  010D                     	;# 
  1711  010E                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0115                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0118                     	;# 
  1720  0119                     	;# 
  1721  011D                     	;# 
  1722  018C                     	;# 
  1723  018D                     	;# 
  1724  018E                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0199                     	;# 
  1734  019A                     	;# 
  1735  019B                     	;# 
  1736  019B                     	;# 
  1737  019C                     	;# 
  1738  019D                     	;# 
  1739  019E                     	;# 
  1740  019F                     	;# 
  1741  020C                     	;# 
  1742  020D                     	;# 
  1743  0211                     	;# 
  1744  0211                     	;# 
  1745  0212                     	;# 
  1746  0212                     	;# 
  1747  0213                     	;# 
  1748  0213                     	;# 
  1749  0214                     	;# 
  1750  0214                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0216                     	;# 
  1755  0216                     	;# 
  1756  0217                     	;# 
  1757  0217                     	;# 
  1758  0391                     	;# 
  1759  0392                     	;# 
  1760  0393                     	;# 
  1761  0394                     	;# 
  1762  0395                     	;# 
  1763  0396                     	;# 
  1764  0498                     	;# 
  1765  0498                     	;# 
  1766  0499                     	;# 
  1767  049A                     	;# 
  1768  049B                     	;# 
  1769  049B                     	;# 
  1770  049C                     	;# 
  1771  049E                     	;# 
  1772  049F                     	;# 
  1773  0611                     	;# 
  1774  0612                     	;# 
  1775  0613                     	;# 
  1776  0613                     	;# 
  1777  0614                     	;# 
  1778  0615                     	;# 
  1779  0616                     	;# 
  1780  0616                     	;# 
  1781  0617                     	;# 
  1782  0618                     	;# 
  1783  0619                     	;# 
  1784  0619                     	;# 
  1785  061A                     	;# 
  1786  061B                     	;# 
  1787  061C                     	;# 
  1788  061C                     	;# 
  1789  0691                     	;# 
  1790  0692                     	;# 
  1791  0693                     	;# 
  1792  0694                     	;# 
  1793  0695                     	;# 
  1794  0F0F                     	;# 
  1795  0F10                     	;# 
  1796  0F11                     	;# 
  1797  0F12                     	;# 
  1798  0F13                     	;# 
  1799  0F14                     	;# 
  1800  0F15                     	;# 
  1801  0F16                     	;# 
  1802  0F17                     	;# 
  1803  0F18                     	;# 
  1804  0F19                     	;# 
  1805  0F1A                     	;# 
  1806  0F1B                     	;# 
  1807  0F1C                     	;# 
  1808  0F1D                     	;# 
  1809  0F1E                     	;# 
  1810  0F1F                     	;# 
  1811  0F20                     	;# 
  1812  0F21                     	;# 
  1813  0F22                     	;# 
  1814  0F23                     	;# 
  1815  0F24                     	;# 
  1816  0F25                     	;# 
  1817  0F26                     	;# 
  1818  0F27                     	;# 
  1819  0F28                     	;# 
  1820  0F29                     	;# 
  1821  0F2A                     	;# 
  1822  0F2B                     	;# 
  1823  0F2C                     	;# 
  1824  0F2D                     	;# 
  1825  0F2E                     	;# 
  1826  0F2F                     	;# 
  1827  0F8C                     	;# 
  1828  0F8D                     	;# 
  1829  0F91                     	;# 
  1830  0F95                     	;# 
  1831  0F96                     	;# 
  1832  0F97                     	;# 
  1833  0F9C                     	;# 
  1834  0F9D                     	;# 
  1835  0F9E                     	;# 
  1836  0FE3                     	;# 
  1837  0FE4                     	;# 
  1838  0FE5                     	;# 
  1839  0FE6                     	;# 
  1840  0FE7                     	;# 
  1841  0FE8                     	;# 
  1842  0FE9                     	;# 
  1843  0FEA                     	;# 
  1844  0FEB                     	;# 
  1845  0FED                     	;# 
  1846  0FEE                     	;# 
  1847  0FEF                     	;# 
  1848  0000                     	;# 
  1849  0001                     	;# 
  1850  0002                     	;# 
  1851  0003                     	;# 
  1852  0004                     	;# 
  1853  0005                     	;# 
  1854  0006                     	;# 
  1855  0007                     	;# 
  1856  0008                     	;# 
  1857  0009                     	;# 
  1858  000A                     	;# 
  1859  000B                     	;# 
  1860  000C                     	;# 
  1861  000D                     	;# 
  1862  000E                     	;# 
  1863  0011                     	;# 
  1864  0012                     	;# 
  1865  0013                     	;# 
  1866  0015                     	;# 
  1867  0016                     	;# 
  1868  0016                     	;# 
  1869  0017                     	;# 
  1870  0018                     	;# 
  1871  0019                     	;# 
  1872  001A                     	;# 
  1873  001B                     	;# 
  1874  001C                     	;# 
  1875  008C                     	;# 
  1876  008D                     	;# 
  1877  008E                     	;# 
  1878  0091                     	;# 
  1879  0092                     	;# 
  1880  0093                     	;# 
  1881  0095                     	;# 
  1882  0096                     	;# 
  1883  0097                     	;# 
  1884  0099                     	;# 
  1885  009A                     	;# 
  1886  009B                     	;# 
  1887  009B                     	;# 
  1888  009C                     	;# 
  1889  009D                     	;# 
  1890  009E                     	;# 
  1891  009F                     	;# 
  1892  010C                     	;# 
  1893  010D                     	;# 
  1894  010E                     	;# 
  1895  0111                     	;# 
  1896  0112                     	;# 
  1897  0113                     	;# 
  1898  0114                     	;# 
  1899  0115                     	;# 
  1900  0116                     	;# 
  1901  0117                     	;# 
  1902  0118                     	;# 
  1903  0119                     	;# 
  1904  011D                     	;# 
  1905  018C                     	;# 
  1906  018D                     	;# 
  1907  018E                     	;# 
  1908  0191                     	;# 
  1909  0191                     	;# 
  1910  0192                     	;# 
  1911  0193                     	;# 
  1912  0193                     	;# 
  1913  0194                     	;# 
  1914  0195                     	;# 
  1915  0196                     	;# 
  1916  0199                     	;# 
  1917  019A                     	;# 
  1918  019B                     	;# 
  1919  019B                     	;# 
  1920  019C                     	;# 
  1921  019D                     	;# 
  1922  019E                     	;# 
  1923  019F                     	;# 
  1924  020C                     	;# 
  1925  020D                     	;# 
  1926  0211                     	;# 
  1927  0211                     	;# 
  1928  0212                     	;# 
  1929  0212                     	;# 
  1930  0213                     	;# 
  1931  0213                     	;# 
  1932  0214                     	;# 
  1933  0214                     	;# 
  1934  0215                     	;# 
  1935  0215                     	;# 
  1936  0215                     	;# 
  1937  0216                     	;# 
  1938  0216                     	;# 
  1939  0217                     	;# 
  1940  0217                     	;# 
  1941  0391                     	;# 
  1942  0392                     	;# 
  1943  0393                     	;# 
  1944  0394                     	;# 
  1945  0395                     	;# 
  1946  0396                     	;# 
  1947  0498                     	;# 
  1948  0498                     	;# 
  1949  0499                     	;# 
  1950  049A                     	;# 
  1951  049B                     	;# 
  1952  049B                     	;# 
  1953  049C                     	;# 
  1954  049E                     	;# 
  1955  049F                     	;# 
  1956  0611                     	;# 
  1957  0612                     	;# 
  1958  0613                     	;# 
  1959  0613                     	;# 
  1960  0614                     	;# 
  1961  0615                     	;# 
  1962  0616                     	;# 
  1963  0616                     	;# 
  1964  0617                     	;# 
  1965  0618                     	;# 
  1966  0619                     	;# 
  1967  0619                     	;# 
  1968  061A                     	;# 
  1969  061B                     	;# 
  1970  061C                     	;# 
  1971  061C                     	;# 
  1972  0691                     	;# 
  1973  0692                     	;# 
  1974  0693                     	;# 
  1975  0694                     	;# 
  1976  0695                     	;# 
  1977  0F0F                     	;# 
  1978  0F10                     	;# 
  1979  0F11                     	;# 
  1980  0F12                     	;# 
  1981  0F13                     	;# 
  1982  0F14                     	;# 
  1983  0F15                     	;# 
  1984  0F16                     	;# 
  1985  0F17                     	;# 
  1986  0F18                     	;# 
  1987  0F19                     	;# 
  1988  0F1A                     	;# 
  1989  0F1B                     	;# 
  1990  0F1C                     	;# 
  1991  0F1D                     	;# 
  1992  0F1E                     	;# 
  1993  0F1F                     	;# 
  1994  0F20                     	;# 
  1995  0F21                     	;# 
  1996  0F22                     	;# 
  1997  0F23                     	;# 
  1998  0F24                     	;# 
  1999  0F25                     	;# 
  2000  0F26                     	;# 
  2001  0F27                     	;# 
  2002  0F28                     	;# 
  2003  0F29                     	;# 
  2004  0F2A                     	;# 
  2005  0F2B                     	;# 
  2006  0F2C                     	;# 
  2007  0F2D                     	;# 
  2008  0F2E                     	;# 
  2009  0F2F                     	;# 
  2010  0F8C                     	;# 
  2011  0F8D                     	;# 
  2012  0F91                     	;# 
  2013  0F95                     	;# 
  2014  0F96                     	;# 
  2015  0F97                     	;# 
  2016  0F9C                     	;# 
  2017  0F9D                     	;# 
  2018  0F9E                     	;# 
  2019  0FE3                     	;# 
  2020  0FE4                     	;# 
  2021  0FE5                     	;# 
  2022  0FE6                     	;# 
  2023  0FE7                     	;# 
  2024  0FE8                     	;# 
  2025  0FE9                     	;# 
  2026  0FEA                     	;# 
  2027  0FEB                     	;# 
  2028  0FED                     	;# 
  2029  0FEE                     	;# 
  2030  0FEF                     	;# 
  2031  0000                     	;# 
  2032  0001                     	;# 
  2033  0002                     	;# 
  2034  0003                     	;# 
  2035  0004                     	;# 
  2036  0005                     	;# 
  2037  0006                     	;# 
  2038  0007                     	;# 
  2039  0008                     	;# 
  2040  0009                     	;# 
  2041  000A                     	;# 
  2042  000B                     	;# 
  2043  000C                     	;# 
  2044  000D                     	;# 
  2045  000E                     	;# 
  2046  0011                     	;# 
  2047  0012                     	;# 
  2048  0013                     	;# 
  2049  0015                     	;# 
  2050  0016                     	;# 
  2051  0016                     	;# 
  2052  0017                     	;# 
  2053  0018                     	;# 
  2054  0019                     	;# 
  2055  001A                     	;# 
  2056  001B                     	;# 
  2057  001C                     	;# 
  2058  008C                     	;# 
  2059  008D                     	;# 
  2060  008E                     	;# 
  2061  0091                     	;# 
  2062  0092                     	;# 
  2063  0093                     	;# 
  2064  0095                     	;# 
  2065  0096                     	;# 
  2066  0097                     	;# 
  2067  0099                     	;# 
  2068  009A                     	;# 
  2069  009B                     	;# 
  2070  009B                     	;# 
  2071  009C                     	;# 
  2072  009D                     	;# 
  2073  009E                     	;# 
  2074  009F                     	;# 
  2075  010C                     	;# 
  2076  010D                     	;# 
  2077  010E                     	;# 
  2078  0111                     	;# 
  2079  0112                     	;# 
  2080  0113                     	;# 
  2081  0114                     	;# 
  2082  0115                     	;# 
  2083  0116                     	;# 
  2084  0117                     	;# 
  2085  0118                     	;# 
  2086  0119                     	;# 
  2087  011D                     	;# 
  2088  018C                     	;# 
  2089  018D                     	;# 
  2090  018E                     	;# 
  2091  0191                     	;# 
  2092  0191                     	;# 
  2093  0192                     	;# 
  2094  0193                     	;# 
  2095  0193                     	;# 
  2096  0194                     	;# 
  2097  0195                     	;# 
  2098  0196                     	;# 
  2099  0199                     	;# 
  2100  019A                     	;# 
  2101  019B                     	;# 
  2102  019B                     	;# 
  2103  019C                     	;# 
  2104  019D                     	;# 
  2105  019E                     	;# 
  2106  019F                     	;# 
  2107  020C                     	;# 
  2108  020D                     	;# 
  2109  0211                     	;# 
  2110  0211                     	;# 
  2111  0212                     	;# 
  2112  0212                     	;# 
  2113  0213                     	;# 
  2114  0213                     	;# 
  2115  0214                     	;# 
  2116  0214                     	;# 
  2117  0215                     	;# 
  2118  0215                     	;# 
  2119  0215                     	;# 
  2120  0216                     	;# 
  2121  0216                     	;# 
  2122  0217                     	;# 
  2123  0217                     	;# 
  2124  0391                     	;# 
  2125  0392                     	;# 
  2126  0393                     	;# 
  2127  0394                     	;# 
  2128  0395                     	;# 
  2129  0396                     	;# 
  2130  0498                     	;# 
  2131  0498                     	;# 
  2132  0499                     	;# 
  2133  049A                     	;# 
  2134  049B                     	;# 
  2135  049B                     	;# 
  2136  049C                     	;# 
  2137  049E                     	;# 
  2138  049F                     	;# 
  2139  0611                     	;# 
  2140  0612                     	;# 
  2141  0613                     	;# 
  2142  0613                     	;# 
  2143  0614                     	;# 
  2144  0615                     	;# 
  2145  0616                     	;# 
  2146  0616                     	;# 
  2147  0617                     	;# 
  2148  0618                     	;# 
  2149  0619                     	;# 
  2150  0619                     	;# 
  2151  061A                     	;# 
  2152  061B                     	;# 
  2153  061C                     	;# 
  2154  061C                     	;# 
  2155  0691                     	;# 
  2156  0692                     	;# 
  2157  0693                     	;# 
  2158  0694                     	;# 
  2159  0695                     	;# 
  2160  0F0F                     	;# 
  2161  0F10                     	;# 
  2162  0F11                     	;# 
  2163  0F12                     	;# 
  2164  0F13                     	;# 
  2165  0F14                     	;# 
  2166  0F15                     	;# 
  2167  0F16                     	;# 
  2168  0F17                     	;# 
  2169  0F18                     	;# 
  2170  0F19                     	;# 
  2171  0F1A                     	;# 
  2172  0F1B                     	;# 
  2173  0F1C                     	;# 
  2174  0F1D                     	;# 
  2175  0F1E                     	;# 
  2176  0F1F                     	;# 
  2177  0F20                     	;# 
  2178  0F21                     	;# 
  2179  0F22                     	;# 
  2180  0F23                     	;# 
  2181  0F24                     	;# 
  2182  0F25                     	;# 
  2183  0F26                     	;# 
  2184  0F27                     	;# 
  2185  0F28                     	;# 
  2186  0F29                     	;# 
  2187  0F2A                     	;# 
  2188  0F2B                     	;# 
  2189  0F2C                     	;# 
  2190  0F2D                     	;# 
  2191  0F2E                     	;# 
  2192  0F2F                     	;# 
  2193  0F8C                     	;# 
  2194  0F8D                     	;# 
  2195  0F91                     	;# 
  2196  0F95                     	;# 
  2197  0F96                     	;# 
  2198  0F97                     	;# 
  2199  0F9C                     	;# 
  2200  0F9D                     	;# 
  2201  0F9E                     	;# 
  2202  0FE3                     	;# 
  2203  0FE4                     	;# 
  2204  0FE5                     	;# 
  2205  0FE6                     	;# 
  2206  0FE7                     	;# 
  2207  0FE8                     	;# 
  2208  0FE9                     	;# 
  2209  0FEA                     	;# 
  2210  0FEB                     	;# 
  2211  0FED                     	;# 
  2212  0FEE                     	;# 
  2213  0FEF                     	;# 
  2214  0000                     	;# 
  2215  0001                     	;# 
  2216  0002                     	;# 
  2217  0003                     	;# 
  2218  0004                     	;# 
  2219  0005                     	;# 
  2220  0006                     	;# 
  2221  0007                     	;# 
  2222  0008                     	;# 
  2223  0009                     	;# 
  2224  000A                     	;# 
  2225  000B                     	;# 
  2226  000C                     	;# 
  2227  000D                     	;# 
  2228  000E                     	;# 
  2229  0011                     	;# 
  2230  0012                     	;# 
  2231  0013                     	;# 
  2232  0015                     	;# 
  2233  0016                     	;# 
  2234  0016                     	;# 
  2235  0017                     	;# 
  2236  0018                     	;# 
  2237  0019                     	;# 
  2238  001A                     	;# 
  2239  001B                     	;# 
  2240  001C                     	;# 
  2241  008C                     	;# 
  2242  008D                     	;# 
  2243  008E                     	;# 
  2244  0091                     	;# 
  2245  0092                     	;# 
  2246  0093                     	;# 
  2247  0095                     	;# 
  2248  0096                     	;# 
  2249  0097                     	;# 
  2250  0099                     	;# 
  2251  009A                     	;# 
  2252  009B                     	;# 
  2253  009B                     	;# 
  2254  009C                     	;# 
  2255  009D                     	;# 
  2256  009E                     	;# 
  2257  009F                     	;# 
  2258  010C                     	;# 
  2259  010D                     	;# 
  2260  010E                     	;# 
  2261  0111                     	;# 
  2262  0112                     	;# 
  2263  0113                     	;# 
  2264  0114                     	;# 
  2265  0115                     	;# 
  2266  0116                     	;# 
  2267  0117                     	;# 
  2268  0118                     	;# 
  2269  0119                     	;# 
  2270  011D                     	;# 
  2271  018C                     	;# 
  2272  018D                     	;# 
  2273  018E                     	;# 
  2274  0191                     	;# 
  2275  0191                     	;# 
  2276  0192                     	;# 
  2277  0193                     	;# 
  2278  0193                     	;# 
  2279  0194                     	;# 
  2280  0195                     	;# 
  2281  0196                     	;# 
  2282  0199                     	;# 
  2283  019A                     	;# 
  2284  019B                     	;# 
  2285  019B                     	;# 
  2286  019C                     	;# 
  2287  019D                     	;# 
  2288  019E                     	;# 
  2289  019F                     	;# 
  2290  020C                     	;# 
  2291  020D                     	;# 
  2292  0211                     	;# 
  2293  0211                     	;# 
  2294  0212                     	;# 
  2295  0212                     	;# 
  2296  0213                     	;# 
  2297  0213                     	;# 
  2298  0214                     	;# 
  2299  0214                     	;# 
  2300  0215                     	;# 
  2301  0215                     	;# 
  2302  0215                     	;# 
  2303  0216                     	;# 
  2304  0216                     	;# 
  2305  0217                     	;# 
  2306  0217                     	;# 
  2307  0391                     	;# 
  2308  0392                     	;# 
  2309  0393                     	;# 
  2310  0394                     	;# 
  2311  0395                     	;# 
  2312  0396                     	;# 
  2313  0498                     	;# 
  2314  0498                     	;# 
  2315  0499                     	;# 
  2316  049A                     	;# 
  2317  049B                     	;# 
  2318  049B                     	;# 
  2319  049C                     	;# 
  2320  049E                     	;# 
  2321  049F                     	;# 
  2322  0611                     	;# 
  2323  0612                     	;# 
  2324  0613                     	;# 
  2325  0613                     	;# 
  2326  0614                     	;# 
  2327  0615                     	;# 
  2328  0616                     	;# 
  2329  0616                     	;# 
  2330  0617                     	;# 
  2331  0618                     	;# 
  2332  0619                     	;# 
  2333  0619                     	;# 
  2334  061A                     	;# 
  2335  061B                     	;# 
  2336  061C                     	;# 
  2337  061C                     	;# 
  2338  0691                     	;# 
  2339  0692                     	;# 
  2340  0693                     	;# 
  2341  0694                     	;# 
  2342  0695                     	;# 
  2343  0F0F                     	;# 
  2344  0F10                     	;# 
  2345  0F11                     	;# 
  2346  0F12                     	;# 
  2347  0F13                     	;# 
  2348  0F14                     	;# 
  2349  0F15                     	;# 
  2350  0F16                     	;# 
  2351  0F17                     	;# 
  2352  0F18                     	;# 
  2353  0F19                     	;# 
  2354  0F1A                     	;# 
  2355  0F1B                     	;# 
  2356  0F1C                     	;# 
  2357  0F1D                     	;# 
  2358  0F1E                     	;# 
  2359  0F1F                     	;# 
  2360  0F20                     	;# 
  2361  0F21                     	;# 
  2362  0F22                     	;# 
  2363  0F23                     	;# 
  2364  0F24                     	;# 
  2365  0F25                     	;# 
  2366  0F26                     	;# 
  2367  0F27                     	;# 
  2368  0F28                     	;# 
  2369  0F29                     	;# 
  2370  0F2A                     	;# 
  2371  0F2B                     	;# 
  2372  0F2C                     	;# 
  2373  0F2D                     	;# 
  2374  0F2E                     	;# 
  2375  0F2F                     	;# 
  2376  0F8C                     	;# 
  2377  0F8D                     	;# 
  2378  0F91                     	;# 
  2379  0F95                     	;# 
  2380  0F96                     	;# 
  2381  0F97                     	;# 
  2382  0F9C                     	;# 
  2383  0F9D                     	;# 
  2384  0F9E                     	;# 
  2385  0FE3                     	;# 
  2386  0FE4                     	;# 
  2387  0FE5                     	;# 
  2388  0FE6                     	;# 
  2389  0FE7                     	;# 
  2390  0FE8                     	;# 
  2391  0FE9                     	;# 
  2392  0FEA                     	;# 
  2393  0FEB                     	;# 
  2394  0FED                     	;# 
  2395  0FEE                     	;# 
  2396  0FEF                     	;# 
  2397                           
  2398                           	psect	strings
  2399  0746                     __pstrings:	
  2400  0746                     __stringtab:	
  2401  0746  3400               	retlw	0
  2402  0747                     __end_of__stringtab:	
  2403  0747                     _mrfRegset_InitCnt:	
  2404  0747  3410               	retlw	16
  2405  0748                     __end_of_mrfRegset_InitCnt:	
  2406  0748                     _mrfRegset_RxCnt:	
  2407  0748  3406               	retlw	6
  2408  0749                     __end_of_mrfRegset_RxCnt:	
  2409  0749                     _mrfRegset_TxCnt:	
  2410  0749  3404               	retlw	4
  2411  074A                     __end_of_mrfRegset_TxCnt:	
  2412  074A                     _mrfRegset_Init:	
  2413  074A  34CA               	retlw	202
  2414  074B  3471               	retlw	113
  2415  074C  34CA               	retlw	202
  2416  074D  3473               	retlw	115
  2417  074E  3480               	retlw	128
  2418  074F  3428               	retlw	40
  2419  0750  34C4               	retlw	196
  2420  0751  34E7               	retlw	231
  2421  0752  34A8               	retlw	168
  2422  0753  3460               	retlw	96
  2423  0754  34C6               	retlw	198
  2424  0755  3405               	retlw	5
  2425  0756  3482               	retlw	130
  2426  0757  3400               	retlw	0
  2427  0758  3490               	retlw	144
  2428  0759  3462               	retlw	98
  2429  075A  3498               	retlw	152
  2430  075B  3490               	retlw	144
  2431  075C  34C2               	retlw	194
  2432  075D  34AC               	retlw	172
  2433  075E  3482               	retlw	130
  2434  075F  3420               	retlw	32
  2435  0760  3455               	retlw	85
  2436  0761  3400               	retlw	0
  2437  0762  3482               	retlw	130
  2438  0763  3480               	retlw	128
  2439  0764  3480               	retlw	128
  2440  0765  3468               	retlw	104
  2441  0766  34CA               	retlw	202
  2442  0767  3471               	retlw	113
  2443  0768  34CA               	retlw	202
  2444  0769  3473               	retlw	115
  2445  076A                     __end_of_mrfRegset_Init:	
  2446  076A                     _mrfRegset_Rx:	
  2447  076A  3482               	retlw	130
  2448  076B  3400               	retlw	0
  2449  076C  34CA               	retlw	202
  2450  076D  3471               	retlw	113
  2451  076E  3480               	retlw	128
  2452  076F  3428               	retlw	40
  2453  0770  3482               	retlw	130
  2454  0771  3480               	retlw	128
  2455  0772  3480               	retlw	128
  2456  0773  3468               	retlw	104
  2457  0774  34CA               	retlw	202
  2458  0775  3473               	retlw	115
  2459  0776                     __end_of_mrfRegset_Rx:	
  2460  0776                     _mrfRegset_Tx:	
  2461  0776  3482               	retlw	130
  2462  0777  3400               	retlw	0
  2463  0778  34CA               	retlw	202
  2464  0779  3471               	retlw	113
  2465  077A  3480               	retlw	128
  2466  077B  34A8               	retlw	168
  2467  077C  3482               	retlw	130
  2468  077D  3420               	retlw	32
  2469  077E                     __end_of_mrfRegset_Tx:	
  2470  000B                     _INTCONbits	set	11
  2471  000C                     _PORTAbits	set	12
  2472  000D                     _PORTBbits	set	13
  2473  000E                     _PORTCbits	set	14
  2474  009D                     _ADCON0	set	157
  2475  009E                     _ADCON1	set	158
  2476  009F                     _ADCON2	set	159
  2477  0095                     _OPTION_REGbits	set	149
  2478  0099                     _OSCCON	set	153
  2479  008C                     _TRISAbits	set	140
  2480  008D                     _TRISBbits	set	141
  2481  008E                     _TRISCbits	set	142
  2482  0117                     _FVRCON	set	279
  2483  010C                     _LATAbits	set	268
  2484  010D                     _LATBbits	set	269
  2485  010E                     _LATCbits	set	270
  2486  018C                     _ANSELA	set	396
  2487  018D                     _ANSELB	set	397
  2488  018E                     _ANSELC	set	398
  2489  020C                     _WPUAbits	set	524
  2490                           
  2491                           ; #config settings
  2492  0000                     
  2493                           	psect	cinit
  2494  0016                     start_initialization:	
  2495  0016                     __initialization:	
  2496  0016  30A0               	movlw	low __pbssBANK1
  2497                           
  2498                           ; Clear objects allocated to BANK0
  2499  0017  01BB               	clrf	__pbssBANK0& (0+127)
  2500  0018  01BC               	clrf	(__pbssBANK0+1)& (0+127)
  2501                           
  2502                           ; Clear objects allocated to BANK1
  2503  0019  0084               	movwf	4
  2504  001A  3000               	movlw	high __pbssBANK1
  2505  001B  0085               	movwf	5
  2506  001C  304F               	movlw	79
  2507  001D  3187  278E  3180   	fcall	clear_ram0
  2508  0020                     end_of_initialization:	
  2509                           ;End of C runtime variable initialization code
  2510                           
  2511  0020                     __end_of__initialization:	
  2512  0020  0020               	movlb	0
  2513  0021  2822               	ljmp	_main	;jump to C main() function
  2514  0022                     __pmaintext:	
  2515                           ; 0 bytes @ 0x1B
  2516 ;;
  2517 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2518 ;;
  2519 ;; *************** function _main *****************
  2520 ;; Defined at:
  2521 ;;		line 41 in file "../../../src/node/main.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;		None               void
  2528 ;; Registers used:
  2529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 17F/0
  2532 ;;		On exit  : 1F/1
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2535 ;;      Params:         0       0       0       0
  2536 ;;      Locals:         0       0       0       0
  2537 ;;      Temps:          0       0       0       0
  2538 ;;      Totals:         0       0       0       0
  2539 ;;Total ram usage:        0 bytes
  2540 ;; Hardware stack levels required when called:   12
  2541 ;; This function calls:
  2542 ;;		_AdcInit
  2543 ;;		_ExtIntInit
  2544 ;;		_Mrf49xaInit
  2545 ;;		_Mrf49xaTick
  2546 ;;		_SoftI2cInit
  2547 ;;		_SysInitGpio
  2548 ;; This function is called by:
  2549 ;;		Startup code after reset
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           
  2554                           ;psect for function _main
  2555  0022                     _main:	
  2556                           
  2557                           ;main.c: 44: OSCCON = 0b01111000;
  2558                           
  2559                           ;incstack = 0
  2560                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2561  0022  3078               	movlw	120
  2562  0023  0021               	movlb	1	; select bank1
  2563  0024  0099               	movwf	25	;volatile
  2564                           
  2565                           ;main.c: 45: WPUAbits.WPUA2 = 1;
  2566  0025  0024               	movlb	4	; select bank4
  2567  0026  150C               	bsf	12,2	;volatile
  2568                           
  2569                           ;main.c: 47: SysInitGpio();
  2570  0027  2383               	fcall	_SysInitGpio
  2571                           
  2572                           ;main.c: 48: SoftI2cInit();
  2573  0028  3185  2591  3180   	fcall	_SoftI2cInit
  2574                           
  2575                           ;main.c: 49: AdcInit();
  2576  002B  22A3  3180         	fcall	_AdcInit
  2577                           
  2578                           ;main.c: 50: ExtIntInit();
  2579  002D  22B2  3180         	fcall	_ExtIntInit
  2580                           
  2581                           ;main.c: 68: Mrf49xaInit();
  2582  002F  20CD  3180         	fcall	_Mrf49xaInit
  2583  0031                     l2742:	
  2584                           
  2585                           ;main.c: 72: {
  2586                           ;main.c: 73: Mrf49xaTick();
  2587  0031  2034  3180         	fcall	_Mrf49xaTick
  2588  0033  2831               	goto	l2742
  2589  0034                     __end_of_main:	
  2590  0034                     __ptext3:	
  2591 ;; *************** function _Mrf49xaTick *****************
  2592 ;; Defined at:
  2593 ;;		line 123 in file "../../../src/devices/mrf49xa_packet.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  timeout         1   25[BANK0 ] unsigned char 
  2598 ;;  packet          1   26[BANK0 ] PTR struct rfTrcvPacket_
  2599 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;		None               void
  2602 ;; Registers used:
  2603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 1E/0
  2606 ;;		On exit  : 1F/1
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2609 ;;      Params:         0       0       0       0
  2610 ;;      Locals:         0       2       0       0
  2611 ;;      Temps:          0       2       0       0
  2612 ;;      Totals:         0       4       0       0
  2613 ;;Total ram usage:        4 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:   11
  2616 ;; This function calls:
  2617 ;;		_HandlePacket
  2618 ;;		_Mrf49RxSts
  2619 ;;		_Mrf49xaFreePacket
  2620 ;;		_Mrf49xaModeTx
  2621 ;;		_Mrf49xaPacketPending
  2622 ;;		_Mrf49xaRxPacket
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _Mrf49xaTick
  2630  0034                     _Mrf49xaTick:	
  2631                           
  2632                           ;mrf49xa_packet.c: 125: if (Mrf49xaPacketPending())
  2633                           
  2634                           ;incstack = 0
  2635                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2636  0034  236B  3180         	fcall	_Mrf49xaPacketPending
  2637  0036  3A00               	xorlw	0
  2638  0037  1903               	skipnz
  2639  0038  285A               	goto	l2562
  2640                           
  2641                           ;mrf49xa_packet.c: 126: {
  2642                           ;mrf49xa_packet.c: 127: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2643  0039  2375  3180         	fcall	_Mrf49xaRxPacket
  2644  003B  0020               	movlb	0	; select bank0
  2645  003C  00BA               	movwf	Mrf49xaTick@packet
  2646                           
  2647                           ;mrf49xa_packet.c: 135: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  2648  003D  3E03               	addlw	3
  2649  003E  0086               	movwf	6
  2650  003F  0187               	clrf	7
  2651  0040  0801               	movf	1,w
  2652  0041  3AFF               	xorlw	255
  2653  0042  1903               	skipnz
  2654  0043  284C               	goto	l2556
  2655  0044  083A               	movf	Mrf49xaTick@packet,w
  2656  0045  3E03               	addlw	3
  2657  0046  0086               	movwf	6
  2658  0047  0801               	movf	1,w
  2659  0048  0021               	movlb	1	; select bank1
  2660  0049  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  2661  004A  1D03               	skipz
  2662  004B  2856               	goto	l2560
  2663  004C                     l2556:	
  2664                           
  2665                           ;mrf49xa_packet.c: 136: {
  2666                           ;mrf49xa_packet.c: 137: packet->packet.size -= 5;
  2667  004C  0020               	movlb	0	; select bank0
  2668  004D  0A3A               	incf	Mrf49xaTick@packet,w
  2669  004E  0086               	movwf	6
  2670  004F  3005               	movlw	5
  2671  0050  0187               	clrf	7
  2672  0051  0281               	subwf	1,f
  2673                           
  2674                           ;mrf49xa_packet.c: 140: HandlePacket(packet);
  2675  0052  083A               	movf	Mrf49xaTick@packet,w
  2676  0053  22BC  3180         	fcall	_HandlePacket
  2677                           
  2678                           ;mrf49xa_packet.c: 142: }
  2679  0055  285A               	goto	l2562
  2680  0056                     l2560:	
  2681                           
  2682                           ;mrf49xa_packet.c: 143: else
  2683                           ;mrf49xa_packet.c: 144: {
  2684                           ;mrf49xa_packet.c: 145: Mrf49xaFreePacket(packet);
  2685  0056  0020               	movlb	0	; select bank0
  2686  0057  083A               	movf	Mrf49xaTick@packet,w
  2687  0058  22B7  3180         	fcall	_Mrf49xaFreePacket
  2688  005A                     l2562:	
  2689                           
  2690                           ;mrf49xa_packet.c: 146: }
  2691                           ;mrf49xa_packet.c: 150: }
  2692                           ;mrf49xa_packet.c: 152: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  2693  005A  0021               	movlb	1	; select bank1
  2694  005B  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  2695  005C  3A02               	xorlw	2
  2696  005D  1D03               	skipz
  2697  005E  288E               	goto	l2582
  2698                           
  2699                           ;mrf49xa_packet.c: 153: {
  2700                           ;mrf49xa_packet.c: 154: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  2701  005F  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2702  0060  3A02               	xorlw	2
  2703  0061  1D03               	skipz
  2704  0062  2865               	goto	l2568
  2705  0063                     l2566:	
  2706                           
  2707                           ;mrf49xa_packet.c: 155: {
  2708                           ;mrf49xa_packet.c: 156: rfTrcvStatus.txPacket.state = PKT_FREE;
  2709  0063  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  2710                           
  2711                           ;mrf49xa_packet.c: 157: }
  2712  0064  288E               	goto	l2582
  2713  0065                     l2568:	
  2714                           
  2715                           ;mrf49xa_packet.c: 158: else if (rfTrcvStatus.txPacket.retry == 10)
  2716  0065  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  2717  0066  390F               	andlw	15
  2718  0067  3A0A               	xorlw	10
  2719  0068  1D03               	skipz
  2720  0069  2882               	goto	l2578
  2721                           
  2722                           ;mrf49xa_packet.c: 159: {
  2723                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.retransmit == 3)
  2724  006A  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  2725  006B  3903               	andlw	3
  2726  006C  3A03               	xorlw	3
  2727  006D  1903               	btfsc	3,2
  2728  006E  2863               	goto	l2566
  2729                           
  2730                           ;mrf49xa_packet.c: 166: else
  2731                           ;mrf49xa_packet.c: 167: {
  2732                           ;mrf49xa_packet.c: 169: rfTrcvStatus.txPacket.retry = 0;
  2733  006F  30F0               	movlw	-16
  2734  0070  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  2735                           
  2736                           ;mrf49xa_packet.c: 170: rfTrcvStatus.txPacket.retransmit++;
  2737  0071  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  2738  0072  3903               	andlw	3
  2739  0073  0020               	movlb	0	; select bank0
  2740  0074  00B7               	movwf	??_Mrf49xaTick
  2741  0075  0AB7               	incf	??_Mrf49xaTick,f
  2742  0076  0EB7               	swapf	??_Mrf49xaTick,f
  2743  0077  0021               	movlb	1	; select bank1
  2744  0078  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  2745  0079  0020               	movlb	0	; select bank0
  2746  007A  0637               	xorwf	??_Mrf49xaTick,w
  2747  007B  39CF               	andlw	-49
  2748  007C  0637               	xorwf	??_Mrf49xaTick,w
  2749  007D  0021               	movlb	1	; select bank1
  2750  007E  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  2751                           
  2752                           ;mrf49xa_packet.c: 171: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  2753  007F  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  2754  0080  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  2755  0081  288E               	goto	l2582
  2756  0082                     l2578:	
  2757                           
  2758                           ;mrf49xa_packet.c: 174: else
  2759                           ;mrf49xa_packet.c: 175: {
  2760                           ;mrf49xa_packet.c: 176: rfTrcvStatus.txPacket.retry++;
  2761  0082  23D0  3180         	fcall	PL4	;call to abstracted procedure
  2762                           
  2763                           ;mrf49xa_packet.c: 177: _delay(40000);
  2764  0084  3034               	movlw	52
  2765  0085  0020               	movlb	0	; select bank0
  2766  0086  00B8               	movwf	??_Mrf49xaTick+1
  2767  0087  30F1               	movlw	241
  2768  0088  00B7               	movwf	??_Mrf49xaTick
  2769  0089                     u1957:	
  2770  0089  0BB7               	decfsz	??_Mrf49xaTick,f
  2771  008A  2889               	goto	u1957
  2772  008B  0BB8               	decfsz	??_Mrf49xaTick+1,f
  2773  008C  2889               	goto	u1957
  2774  008D  3200               	nop2
  2775  008E                     l2582:	
  2776                           
  2777                           ;mrf49xa_packet.c: 178: }
  2778                           ;mrf49xa_packet.c: 179: }
  2779                           ;mrf49xa_packet.c: 181: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2780                           ;mrf49xa_packet.c: 182: rfTrcvStatus.state == RECV_IDLE)
  2781  008E  0021               	movlb	1	; select bank1
  2782  008F  0B53               	decfsz	(_rfTrcvStatus^(0+128)+51),w
  2783  0090  0008               	return
  2784  0091  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  2785  0092  1D03               	skipz
  2786  0093  0008               	return
  2787                           
  2788                           ;mrf49xa_packet.c: 183: {
  2789                           ;mrf49xa_packet.c: 188: if (rfTrcvStatus.txPacket.retry >= 10)
  2790  0094  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  2791  0095  390F               	andlw	15
  2792  0096  0020               	movlb	0	; select bank0
  2793  0097  00B7               	movwf	??_Mrf49xaTick
  2794  0098  300A               	movlw	10
  2795  0099  0237               	subwf	??_Mrf49xaTick,w
  2796  009A  1C03               	skipc
  2797  009B  28A2               	goto	l2594
  2798                           
  2799                           ;mrf49xa_packet.c: 189: {
  2800                           ;mrf49xa_packet.c: 191: rfTrcvStatus.txPacket.retry = 0;
  2801  009C  30F0               	movlw	-16
  2802  009D  0021               	movlb	1	; select bank1
  2803  009E  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  2804                           
  2805                           ;mrf49xa_packet.c: 192: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  2806  009F  3002               	movlw	2
  2807  00A0  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  2808  00A1  0008               	return
  2809  00A2                     l2594:	
  2810                           
  2811                           ;mrf49xa_packet.c: 194: }
  2812                           ;mrf49xa_packet.c: 198: uint8_t timeout = 0;
  2813  00A2  01B9               	clrf	Mrf49xaTick@timeout
  2814  00A3                     l2596:	
  2815                           
  2816                           ;mrf49xa_packet.c: 200: {
  2817                           ;mrf49xa_packet.c: 201: Mrf49RxSts();
  2818  00A3  2264  3180         	fcall	_Mrf49RxSts
  2819                           
  2820                           ;mrf49xa_packet.c: 203: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  2821  00A5  0021               	movlb	1	; select bank1
  2822  00A6  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  2823  00A7  1D03               	skipz
  2824  00A8  28AC               	goto	l2604
  2825  00A9  0020               	movlb	0	; select bank0
  2826  00AA  1C3B               	btfss	_mrf49Status,0
  2827  00AB  28BF               	goto	l356
  2828  00AC                     l2604:	
  2829                           
  2830                           ;mrf49xa_packet.c: 207: }
  2831                           ;mrf49xa_packet.c: 209: _delay(40000);
  2832  00AC  3034               	movlw	52
  2833  00AD  0020               	movlb	0	; select bank0
  2834  00AE  00B8               	movwf	??_Mrf49xaTick+1
  2835  00AF  30F1               	movlw	241
  2836  00B0  00B7               	movwf	??_Mrf49xaTick
  2837  00B1                     u1967:	
  2838  00B1  0BB7               	decfsz	??_Mrf49xaTick,f
  2839  00B2  28B1               	goto	u1967
  2840  00B3  0BB8               	decfsz	??_Mrf49xaTick+1,f
  2841  00B4  28B1               	goto	u1967
  2842  00B5  3200               	nop2
  2843                           
  2844                           ;mrf49xa_packet.c: 210: timeout++;
  2845  00B6  0020               	movlb	0	; select bank0
  2846  00B7  300B               	movlw	11
  2847  00B8  0AB9               	incf	Mrf49xaTick@timeout,f
  2848                           
  2849                           ;mrf49xa_packet.c: 212: if (timeout > 10)
  2850  00B9  0239               	subwf	Mrf49xaTick@timeout,w
  2851  00BA  1C03               	skipc
  2852  00BB  28A3               	goto	l2596
  2853                           
  2854                           ;mrf49xa_packet.c: 213: {
  2855                           ;mrf49xa_packet.c: 214: rfTrcvStatus.txPacket.retry++;
  2856  00BC  0021               	movlb	1	; select bank1
  2857  00BD  23D0               	fcall	PL4	;call to abstracted procedure
  2858  00BE  0008               	return
  2859  00BF                     l356:	
  2860                           
  2861                           ;mrf49xa_packet.c: 225: INTCONbits.INTE = 0;;
  2862  00BF  120B               	bcf	11,4	;volatile
  2863                           
  2864                           ;mrf49xa_packet.c: 226: Mrf49xaModeTx();
  2865  00C0  23C3               	fcall	_Mrf49xaModeTx
  2866                           
  2867                           ;mrf49xa_packet.c: 227: INTCONbits.INTE = 1;;
  2868  00C1  160B               	bsf	11,4	;volatile
  2869  00C2  0008               	return
  2870  00C3                     __end_of_Mrf49xaTick:	
  2871  00C3                     __ptext30:	
  2872 ;; *************** function _Mrf49RxCmd *****************
  2873 ;; Defined at:
  2874 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  cmd             1    wreg     unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  cmd             1    1[BANK0 ] unsigned char 
  2879 ;;  val             1    2[BANK0 ] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      unsigned char 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0, pclath, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 1E/1
  2886 ;;		On exit  : 1F/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2889 ;;      Params:         0       0       0       0
  2890 ;;      Locals:         0       2       0       0
  2891 ;;      Temps:          0       0       0       0
  2892 ;;      Totals:         0       2       0       0
  2893 ;;Total ram usage:        2 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    7
  2896 ;; This function calls:
  2897 ;;		_Mrf49SpiRx
  2898 ;;		_Mrf49SpiTx
  2899 ;; This function is called by:
  2900 ;;		_Mrf49RxByte
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           
  2905                           ;psect for function _Mrf49RxCmd
  2906  00C3                     _Mrf49RxCmd:	
  2907                           
  2908                           ;incstack = 0
  2909                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2910                           ;Mrf49RxCmd@cmd stored from wreg
  2911  00C3  0020               	movlb	0	; select bank0
  2912  00C4  00A1               	movwf	Mrf49RxCmd@cmd
  2913                           
  2914                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  2915  00C5  130E               	bcf	14,6	;volatile
  2916                           
  2917                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  2918  00C6  0821               	movf	Mrf49RxCmd@cmd,w
  2919  00C7  2219  3180         	fcall	_Mrf49SpiTx
  2920                           
  2921                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  2922  00C9  226F               	fcall	_Mrf49SpiRx
  2923  00CA  00A2               	movwf	Mrf49RxCmd@val
  2924                           
  2925                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  2926  00CB  170E               	bsf	14,6	;volatile
  2927                           
  2928                           ;mrf49xa_cmd.c: 27: return val;
  2929  00CC  0008               	return
  2930  00CD                     __end_of_Mrf49RxCmd:	
  2931  00CD                     __ptext22:	
  2932 ;; *************** function _Mrf49xaInit *****************
  2933 ;; Defined at:
  2934 ;;		line 122 in file "../../../src/devices/mrf49xa.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  j               1    0        unsigned char 
  2939 ;;  i               1    0        unsigned char 
  2940 ;;  k               1    0        unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;		None               void
  2943 ;; Registers used:
  2944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 1F/1
  2947 ;;		On exit  : 1F/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2950 ;;      Params:         0       0       0       0
  2951 ;;      Locals:         0       0       0       0
  2952 ;;      Temps:          0       3       0       0
  2953 ;;      Totals:         0       3       0       0
  2954 ;;Total ram usage:        3 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:   11
  2957 ;; This function calls:
  2958 ;;		_Mrf49xaModeRx
  2959 ;;		_Mrf49xaServe
  2960 ;;		_mrf49xaCfg
  2961 ;; This function is called by:
  2962 ;;		_main
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _Mrf49xaInit
  2968  00CD                     _Mrf49xaInit:	
  2969                           
  2970                           ;mrf49xa.c: 124: UI08_t k;
  2971                           ;mrf49xa.c: 126: UI08_t i, j;
  2972                           ;mrf49xa.c: 130: LATAbits.LATA4 = 0;
  2973                           
  2974                           ;incstack = 0
  2975                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2976  00CD  0022               	movlb	2	; select bank2
  2977  00CE  120C               	bcf	12,4	;volatile
  2978                           
  2979                           ;mrf49xa.c: 131: LATCbits.LATC1 = 1;
  2980  00CF  148E               	bsf	14,1	;volatile
  2981                           
  2982                           ;mrf49xa.c: 132: _delay(400000);
  2983  00D0  3003               	movlw	3
  2984  00D1  0020               	movlb	0	; select bank0
  2985  00D2  00AC               	movwf	??_Mrf49xaInit+2
  2986  00D3  3008               	movlw	8
  2987  00D4  00AB               	movwf	??_Mrf49xaInit+1
  2988  00D5  3078               	movlw	120
  2989  00D6  00AA               	movwf	??_Mrf49xaInit
  2990  00D7                     u1987:	
  2991  00D7  0BAA               	decfsz	??_Mrf49xaInit,f
  2992  00D8  28D7               	goto	u1987
  2993  00D9  0BAB               	decfsz	??_Mrf49xaInit+1,f
  2994  00DA  28D7               	goto	u1987
  2995  00DB  0BAC               	decfsz	??_Mrf49xaInit+2,f
  2996  00DC  28D7               	goto	u1987
  2997                           
  2998                           ;mrf49xa.c: 133: LATAbits.LATA4 = 1;
  2999  00DD  0022               	movlb	2	; select bank2
  3000  00DE  160C               	bsf	12,4	;volatile
  3001                           
  3002                           ;mrf49xa.c: 134: _delay(400000);
  3003  00DF  3003               	movlw	3
  3004  00E0  0020               	movlb	0	; select bank0
  3005  00E1  00AC               	movwf	??_Mrf49xaInit+2
  3006  00E2  3008               	movlw	8
  3007  00E3  00AB               	movwf	??_Mrf49xaInit+1
  3008  00E4  3078               	movlw	120
  3009  00E5  00AA               	movwf	??_Mrf49xaInit
  3010  00E6                     u1997:	
  3011  00E6  0BAA               	decfsz	??_Mrf49xaInit,f
  3012  00E7  28E6               	goto	u1997
  3013  00E8  0BAB               	decfsz	??_Mrf49xaInit+1,f
  3014  00E9  28E6               	goto	u1997
  3015  00EA  0BAC               	decfsz	??_Mrf49xaInit+2,f
  3016  00EB  28E6               	goto	u1997
  3017                           
  3018                           ;mrf49xa.c: 135: LATCbits.LATC4 = 1;
  3019  00EC  0022               	movlb	2	; select bank2
  3020  00ED  160E               	bsf	14,4	;volatile
  3021                           
  3022                           ;mrf49xa.c: 137: LATAbits.LATA5 = 1;
  3023  00EE  168C               	bsf	12,5	;volatile
  3024                           
  3025                           ;mrf49xa.c: 141: mrf49xaCfg(mrfRegset_Init, mrfRegset_InitCnt);
  3026  00EF  3047               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3027  00F0  3187               	movlp	high __stringtab
  3028  00F1  000A               	callw
  3029  00F2  3180               	pagesel	$	;select current page
  3030  00F3  0020               	movlb	0	; select bank0
  3031  00F4  00A3               	movwf	mrf49xaCfg@count
  3032  00F5  304A               	movlw	(_mrfRegset_Init| (0+32768))& (0+255)
  3033  00F6  21DD  3180         	fcall	_mrf49xaCfg
  3034                           
  3035                           ;mrf49xa.c: 143: Mrf49xaModeRx();
  3036  00F8  21D1  3180         	fcall	_Mrf49xaModeRx
  3037  00FA                     l2546:	
  3038                           ;mrf49xa.c: 150: while(PORTAbits.RA2 == 0)
  3039                           
  3040  00FA  0020               	movlb	0	; select bank0
  3041  00FB  190C               	btfsc	12,2	;volatile
  3042  00FC  0008               	return
  3043                           
  3044                           ;mrf49xa.c: 151: Mrf49xaServe();
  3045  00FD  2100  3180         	fcall	_Mrf49xaServe
  3046  00FF  28FA               	goto	l2546
  3047  0100                     __end_of_Mrf49xaInit:	
  3048  0100                     __ptext23:	
  3049 ;; *************** function _Mrf49xaServe *****************
  3050 ;; Defined at:
  3051 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  data            1    9[BANK0 ] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      unsigned char 
  3058 ;; Registers used:
  3059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 1E/0
  3062 ;;		On exit  : 1F/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3065 ;;      Params:         0       0       0       0
  3066 ;;      Locals:         0       1       0       0
  3067 ;;      Temps:          0       1       0       0
  3068 ;;      Totals:         0       2       0       0
  3069 ;;Total ram usage:        2 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:   10
  3072 ;; This function calls:
  3073 ;;		_Mrf49RxByte
  3074 ;;		_Mrf49RxSts
  3075 ;;		_Mrf49TxByte
  3076 ;;		_Mrf49xaModeRx
  3077 ;; This function is called by:
  3078 ;;		_Mrf49xaInit
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _Mrf49xaServe
  3084  0100                     _Mrf49xaServe:	
  3085                           
  3086                           ;mrf49xa_data.c: 10: uint8_t data;
  3087                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3091  0100  2264  3180         	fcall	_Mrf49RxSts
  3092                           
  3093                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  3094  0102  083B               	movf	_mrf49Status,w
  3095  0103  3AFF               	xorlw	255
  3096  0104  1D03               	skipz
  3097  0105  290A               	goto	l378
  3098  0106  083C               	movf	_mrf49Status+1,w
  3099  0107  3AFF               	xorlw	255
  3100  0108  1903               	btfsc	3,2
  3101                           
  3102                           ;mrf49xa_data.c: 19: return 0;
  3103  0109  3400               	retlw	0
  3104  010A                     l378:	
  3105                           ;mrf49xa_data.c: 23: {
  3106                           
  3107                           
  3108                           ;mrf49xa_data.c: 25: }
  3109                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  3110  010A  1ABB               	btfsc	_mrf49Status,5
  3111  010B  2916               	goto	l2328
  3112  010C  2922               	goto	l379
  3113  010D                     l2324:	
  3114                           
  3115                           ;mrf49xa_data.c: 33: case RECV_DATA:
  3116                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  3117  010D  21CF  3180         	fcall	_Mrf49RxByte
  3118  010F  00A9               	movwf	Mrf49xaServe@data
  3119                           
  3120                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  3121  0110  21CF  3180         	fcall	_Mrf49RxByte
  3122  0112  00A9               	movwf	Mrf49xaServe@data
  3123                           
  3124                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  3125  0113  21D1  3180         	fcall	_Mrf49xaModeRx
  3126                           
  3127                           ;mrf49xa_data.c: 44: break;
  3128  0115  2922               	goto	l379
  3129  0116                     l2328:	
  3130  0116  0021               	movlb	1	; select bank1
  3131  0117  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  3132                           
  3133                           ; Switch size 1, requested type "space"
  3134                           ; Number of cases is 3, Range of values is 0 to 2
  3135                           ; switch strategies available:
  3136                           ; Name         Instructions Cycles
  3137                           ; simple_byte           10     6 (average)
  3138                           ; direct_byte           12     6 (fixed)
  3139                           ; jumptable            260     6 (fixed)
  3140                           ;	Chosen strategy is simple_byte
  3141  0118  3A00               	xorlw	0	; case 0
  3142  0119  1903               	skipnz
  3143  011A  290D               	goto	l2324
  3144  011B  3A01               	xorlw	1	; case 1
  3145  011C  1903               	skipnz
  3146  011D  290D               	goto	l2324
  3147  011E  3A03               	xorlw	3	; case 2
  3148  011F  1903               	skipnz
  3149  0120  2922               	goto	l379
  3150  0121  2922               	goto	l379
  3151  0122                     l379:	
  3152                           
  3153                           ;mrf49xa_data.c: 52: }
  3154                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  3155  0122  0020               	movlb	0	; select bank0
  3156  0123  1BBB               	btfsc	_mrf49Status,7
  3157  0124  29B9               	goto	l2414
  3158  0125  29C5               	goto	l2416
  3159  0126                     l2332:	
  3160                           
  3161                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  3162  0126  21CF  3180         	fcall	_Mrf49RxByte
  3163  0128  00A9               	movwf	Mrf49xaServe@data
  3164                           
  3165                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3166  0129  1BBC               	btfsc	_mrf49Status+1,7
  3167  012A  292E               	goto	l2338
  3168  012B                     l2336:	
  3169                           
  3170                           ;mrf49xa_data.c: 72: {
  3171                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  3172  012B  21D1  3180         	fcall	_Mrf49xaModeRx
  3173                           
  3174                           ;mrf49xa_data.c: 74: break;
  3175  012D  29C5               	goto	l2416
  3176  012E                     l2338:	
  3177                           
  3178                           ;mrf49xa_data.c: 75: }
  3179                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  3180  012E  0021               	movlb	1	; select bank1
  3181  012F  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  3182  0130  1D03               	skipz
  3183  0131  2934               	goto	l2342
  3184  0132  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  3185  0133  2938               	goto	L1
  3186  0134                     l2342:	
  3187                           
  3188                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3189  0134  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3190  0135  1D03               	skipz
  3191  0136  292B               	goto	l2336
  3192  0137  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  3193  0138                     L1:	
  3194  0138  00A0               	movwf	_rfTrcvStatus^(0+128)
  3195                           
  3196                           ;mrf49xa_data.c: 85: }
  3197                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  3198  0139  0A20               	incf	_rfTrcvStatus^(0+128),w
  3199  013A  0086               	movwf	6
  3200  013B  0187               	clrf	7
  3201                           
  3202                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  3203  013C  23DE  3180         	fcall	PL8	;call to abstracted procedure
  3204  013E  3E16               	addlw	22
  3205  013F  0086               	movwf	6
  3206  0140  0181               	clrf	1
  3207                           
  3208                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3209  0141  0820               	movf	_rfTrcvStatus^(0+128),w
  3210  0142  0086               	movwf	6
  3211  0143  3003               	movlw	3
  3212  0144  0081               	movwf	1
  3213                           
  3214                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  3215  0145  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  3216  0146  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  3217                           
  3218                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  3219  0147  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3220  0148  2975               	goto	L2
  3221  0149                     l2358:	
  3222                           ;mrf49xa_data.c: 93: break;
  3223                           
  3224                           
  3225                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  3226  0149  21CF  3180         	fcall	_Mrf49RxByte
  3227  014B  00A9               	movwf	Mrf49xaServe@data
  3228                           
  3229                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3230  014C  1BBC               	btfsc	_mrf49Status+1,7
  3231  014D  2955               	goto	l2366
  3232                           
  3233                           ;mrf49xa_data.c: 102: {
  3234                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3235  014E  0021               	movlb	1	; select bank1
  3236  014F  0820               	movf	_rfTrcvStatus^(0+128),w
  3237  0150  0086               	movwf	6
  3238  0151  3004               	movlw	4
  3239  0152  0187               	clrf	7
  3240  0153  0081               	movwf	1
  3241  0154  292B               	goto	l2336
  3242  0155                     l2366:	
  3243                           
  3244                           ;mrf49xa_data.c: 106: }
  3245                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3246  0155  0021               	movlb	1	; select bank1
  3247  0156  0A20               	incf	_rfTrcvStatus^(0+128),w
  3248  0157  0086               	movwf	6
  3249  0158  0187               	clrf	7
  3250  0159  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3251  015A  0601               	xorwf	1,w
  3252  015B  1D03               	skipz
  3253  015C  296B               	goto	l2376
  3254                           
  3255                           ;mrf49xa_data.c: 109: {
  3256                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  3257  015D  0820               	movf	_rfTrcvStatus^(0+128),w
  3258  015E  3E16               	addlw	22
  3259  015F  0086               	movwf	6
  3260                           
  3261                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3262  0160  23DE  3180         	fcall	PL8	;call to abstracted procedure
  3263  0162  0086               	movwf	6
  3264  0163  3004               	movlw	4
  3265  0164  0081               	movwf	1
  3266                           
  3267                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  3268  0165  21D1  3180         	fcall	_Mrf49xaModeRx
  3269                           
  3270                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  3271  0167  0022               	movlb	2	; select bank2
  3272  0168  150E               	bsf	14,2	;volatile
  3273                           
  3274                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  3275  0169  110E               	bcf	14,2	;volatile
  3276                           
  3277                           ;mrf49xa_data.c: 123: }
  3278  016A  29C5               	goto	l2416
  3279  016B                     l2376:	
  3280                           
  3281                           ;mrf49xa_data.c: 124: else
  3282                           ;mrf49xa_data.c: 125: {
  3283                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3284  016B  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3285  016C  0720               	addwf	_rfTrcvStatus^(0+128),w
  3286  016D  0020               	movlb	0	; select bank0
  3287  016E  00A8               	movwf	??_Mrf49xaServe
  3288  016F  0A28               	incf	??_Mrf49xaServe,w
  3289  0170  0086               	movwf	6
  3290  0171  0187               	clrf	7
  3291  0172  0829               	movf	Mrf49xaServe@data,w
  3292  0173  0081               	movwf	1
  3293  0174  0021               	movlb	1	; select bank1
  3294  0175                     L2:	
  3295  0175  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3296  0176  29C5               	goto	l2416
  3297  0177                     l2380:	
  3298                           
  3299                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  3300  0177  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3301                           
  3302                           ;mrf49xa_data.c: 134: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3303  0178  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3304  0179  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  3305  017A  1D03               	skipz
  3306  017B  29A8               	goto	l2410
  3307                           
  3308                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = 49;
  3309  017C  3031               	movlw	49
  3310  017D  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3311  017E  29A8               	goto	l2410
  3312  017F                     l2386:	
  3313                           
  3314                           ;mrf49xa_data.c: 140: Mrf49TxByte(0x2D);
  3315  017F  302D               	movlw	45
  3316  0180  21CA  3180         	fcall	_Mrf49TxByte
  3317                           
  3318                           ;mrf49xa_data.c: 141: break;
  3319  0182  29C5               	goto	l2416
  3320  0183                     l2388:	
  3321                           
  3322                           ;mrf49xa_data.c: 144: Mrf49TxByte(0xD4);
  3323  0183  30D4               	movlw	212
  3324  0184  21CA  3180         	fcall	_Mrf49TxByte
  3325                           
  3326                           ;mrf49xa_data.c: 145: rfTrcvStatus.hwByte = 0xFF;
  3327  0186  30FF               	movlw	255
  3328  0187  0021               	movlb	1	; select bank1
  3329  0188  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3330                           
  3331                           ;mrf49xa_data.c: 146: break;
  3332  0189  29C5               	goto	l2416
  3333  018A                     l2392:	
  3334                           
  3335                           ;mrf49xa_data.c: 150: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3336  018A  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3337  018B  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  3338  018C  0086               	movwf	6
  3339  018D  0187               	clrf	7
  3340  018E  0801               	movf	1,w
  3341  018F  21CA  3180         	fcall	_Mrf49TxByte
  3342                           
  3343                           ;mrf49xa_data.c: 151: break;
  3344  0191  29C5               	goto	l2416
  3345  0192                     l2394:	
  3346                           
  3347                           ;mrf49xa_data.c: 154: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3348  0192  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  3349  0193  21CA  3180         	fcall	_Mrf49TxByte
  3350                           
  3351                           ;mrf49xa_data.c: 155: break;
  3352  0195  29C5               	goto	l2416
  3353  0196                     l2396:	
  3354                           
  3355                           ;mrf49xa_data.c: 158: Mrf49TxByte(0x00);
  3356  0196  3000               	movlw	0
  3357  0197  21CA  3180         	fcall	_Mrf49TxByte
  3358                           
  3359                           ;mrf49xa_data.c: 159: break;
  3360  0199  29C5               	goto	l2416
  3361  019A                     l2398:	
  3362                           
  3363                           ;mrf49xa_data.c: 162: Mrf49TxByte(0x00);
  3364  019A  3000               	movlw	0
  3365  019B  21CA  3180         	fcall	_Mrf49TxByte
  3366                           
  3367                           ;mrf49xa_data.c: 163: Mrf49xaModeRx();
  3368  019D  21D1  3180         	fcall	_Mrf49xaModeRx
  3369                           
  3370                           ;mrf49xa_data.c: 165: rfTrcvStatus.txPacket.retry = 0;
  3371  019F  30F0               	movlw	-16
  3372  01A0  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  3373                           
  3374                           ;mrf49xa_data.c: 167: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  3375  01A1  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  3376  01A2  29A6               	goto	l2406
  3377                           
  3378                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3379  01A3  3002               	movlw	2
  3380  01A4  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  3381  01A5  29C5               	goto	l2416
  3382  01A6                     l2406:	
  3383                           
  3384                           ;mrf49xa_data.c: 169: else
  3385                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_FREE;
  3386  01A6  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  3387  01A7  29C5               	goto	l2416
  3388  01A8                     l2410:	
  3389  01A8  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3390                           
  3391                           ; Switch size 1, requested type "space"
  3392                           ; Number of cases is 5, Range of values is 49 to 101
  3393                           ; switch strategies available:
  3394                           ; Name         Instructions Cycles
  3395                           ; simple_byte           16     9 (average)
  3396                           ; direct_byte          115     9 (fixed)
  3397                           ; jumptable            263     9 (fixed)
  3398                           ;	Chosen strategy is simple_byte
  3399  01A9  3A31               	xorlw	49	; case 49
  3400  01AA  1903               	skipnz
  3401  01AB  2992               	goto	l2394
  3402  01AC  3A03               	xorlw	3	; case 50
  3403  01AD  1903               	skipnz
  3404  01AE  2996               	goto	l2396
  3405  01AF  3A01               	xorlw	1	; case 51
  3406  01B0  1903               	skipnz
  3407  01B1  299A               	goto	l2398
  3408  01B2  3A57               	xorlw	87	; case 100
  3409  01B3  1903               	skipnz
  3410  01B4  297F               	goto	l2386
  3411  01B5  3A01               	xorlw	1	; case 101
  3412  01B6  1903               	skipnz
  3413  01B7  2983               	goto	l2388
  3414  01B8  298A               	goto	l2392
  3415  01B9                     l2414:	
  3416  01B9  0021               	movlb	1	; select bank1
  3417  01BA  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  3418                           
  3419                           ; Switch size 1, requested type "space"
  3420                           ; Number of cases is 3, Range of values is 0 to 2
  3421                           ; switch strategies available:
  3422                           ; Name         Instructions Cycles
  3423                           ; simple_byte           10     6 (average)
  3424                           ; direct_byte           12     6 (fixed)
  3425                           ; jumptable            260     6 (fixed)
  3426                           ;	Chosen strategy is simple_byte
  3427  01BB  3A00               	xorlw	0	; case 0
  3428  01BC  1903               	skipnz
  3429  01BD  2926               	goto	l2332
  3430  01BE  3A01               	xorlw	1	; case 1
  3431  01BF  1903               	skipnz
  3432  01C0  2949               	goto	l2358
  3433  01C1  3A03               	xorlw	3	; case 2
  3434  01C2  1903               	skipnz
  3435  01C3  2977               	goto	l2380
  3436  01C4  29C5               	goto	l2416
  3437  01C5                     l2416:	
  3438                           
  3439                           ;mrf49xa_data.c: 177: }
  3440                           ;mrf49xa_data.c: 191: return PORTAbits.RA2 == 1 ? 1 : 0;
  3441  01C5  0020               	movlb	0	; select bank0
  3442  01C6  0C0C               	rrf	12,w	;volatile
  3443  01C7  0C89               	rrf	9,f
  3444  01C8  3901               	andlw	1
  3445  01C9  0008               	return
  3446  01CA                     __end_of_Mrf49xaServe:	
  3447  01CA                     __ptext26:	
  3448 ;; *************** function _Mrf49TxByte *****************
  3449 ;; Defined at:
  3450 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  byte            1    wreg     unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  byte            1    3[BANK0 ] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;		None               void
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0, pclath, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 1E/1
  3461 ;;		On exit  : 1F/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3464 ;;      Params:         0       0       0       0
  3465 ;;      Locals:         0       1       0       0
  3466 ;;      Temps:          0       0       0       0
  3467 ;;      Totals:         0       1       0       0
  3468 ;;Total ram usage:        1 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    8
  3471 ;; This function calls:
  3472 ;;		_Mrf49TxCmd
  3473 ;; This function is called by:
  3474 ;;		_Mrf49xaServe
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           
  3479                           ;psect for function _Mrf49TxByte
  3480  01CA                     _Mrf49TxByte:	
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  3484                           ;Mrf49TxByte@byte stored from wreg
  3485  01CA  0020               	movlb	0	; select bank0
  3486  01CB  00A3               	movwf	Mrf49TxByte@byte
  3487                           
  3488                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  3489  01CC  00A1               	movwf	Mrf49TxCmd@val
  3490  01CD  30B8               	movlw	184
  3491  01CE  2A10               	ljmp	_Mrf49TxCmd
  3492  01CF                     __end_of_Mrf49TxByte:	
  3493  01CF                     __ptext29:	
  3494 ;; *************** function _Mrf49RxByte *****************
  3495 ;; Defined at:
  3496 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      unsigned char 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0, pclath, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 1E/1
  3507 ;;		On exit  : 1F/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3510 ;;      Params:         0       0       0       0
  3511 ;;      Locals:         0       0       0       0
  3512 ;;      Temps:          0       0       0       0
  3513 ;;      Totals:         0       0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    8
  3517 ;; This function calls:
  3518 ;;		_Mrf49RxCmd
  3519 ;; This function is called by:
  3520 ;;		_Mrf49xaServe
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           
  3525                           ;psect for function _Mrf49RxByte
  3526  01CF                     _Mrf49RxByte:	
  3527                           
  3528                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3532  01CF  30B0               	movlw	176
  3533  01D0  28C3               	ljmp	_Mrf49RxCmd
  3534  01D1                     __end_of_Mrf49RxByte:	
  3535  01D1                     __ptext24:	
  3536 ;; *************** function _Mrf49xaModeRx *****************
  3537 ;; Defined at:
  3538 ;;		line 77 in file "../../../src/devices/mrf49xa.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  k               1    0        unsigned char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;		None               void
  3545 ;; Registers used:
  3546 ;;		wreg, status,2, status,0, pclath, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 1E/0
  3549 ;;		On exit  : 1F/1
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3552 ;;      Params:         0       0       0       0
  3553 ;;      Locals:         0       0       0       0
  3554 ;;      Temps:          0       0       0       0
  3555 ;;      Totals:         0       0       0       0
  3556 ;;Total ram usage:        0 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    9
  3559 ;; This function calls:
  3560 ;;		_mrf49xaCfg
  3561 ;; This function is called by:
  3562 ;;		_Mrf49xaInit
  3563 ;;		_Mrf49xaServe
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function _Mrf49xaModeRx
  3569  01D1                     _Mrf49xaModeRx:	
  3570                           
  3571                           ;mrf49xa.c: 79: UI08_t k;
  3572                           ;mrf49xa.c: 81: mrf49xaCfg(mrfRegset_Rx, mrfRegset_RxCnt);
  3573                           
  3574                           ;incstack = 0
  3575                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  3576  01D1  3048               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3577  01D2  3187               	movlp	high __stringtab
  3578  01D3  000A               	callw
  3579  01D4  3180               	pagesel	$	;select current page
  3580  01D5  0020               	movlb	0	; select bank0
  3581  01D6  00A3               	movwf	mrf49xaCfg@count
  3582  01D7  306A               	movlw	(_mrfRegset_Rx| (0+32768))& (0+255)
  3583  01D8  21DD               	fcall	_mrf49xaCfg
  3584                           
  3585                           ;mrf49xa.c: 83: rfTrcvStatus.state = RECV_IDLE;
  3586  01D9  0021               	movlb	1	; select bank1
  3587  01DA  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  3588                           
  3589                           ;mrf49xa.c: 84: rfTrcvStatus.hwByte = 0;
  3590  01DB  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3591  01DC  0008               	return
  3592  01DD                     __end_of_Mrf49xaModeRx:	
  3593  01DD                     __ptext25:	
  3594 ;; *************** function _mrf49xaCfg *****************
  3595 ;; Defined at:
  3596 ;;		line 71 in file "../../../src/devices/mrf49xa.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  regs            1    wreg     PTR struct Mrf49InitReg_
  3599 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  3600 ;;  count           1    3[BANK0 ] unsigned char 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  regs            1    6[BANK0 ] PTR struct Mrf49InitReg_
  3603 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  3604 ;;  k               1    7[BANK0 ] unsigned char 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;		None               void
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 1F/0
  3611 ;;		On exit  : 1F/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3614 ;;      Params:         0       1       0       0
  3615 ;;      Locals:         0       2       0       0
  3616 ;;      Temps:          0       2       0       0
  3617 ;;      Totals:         0       5       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    8
  3621 ;; This function calls:
  3622 ;;		_Mrf49TxCmd
  3623 ;; This function is called by:
  3624 ;;		_Mrf49xaModeRx
  3625 ;;		_Mrf49xaModeTx
  3626 ;;		_Mrf49xaInit
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           
  3631                           ;psect for function _mrf49xaCfg
  3632  01DD                     _mrf49xaCfg:	
  3633                           
  3634                           ;incstack = 0
  3635                           ; Regs used in _mrf49xaCfg: [wreg+status,2+status,0+pclath+cstack]
  3636                           ;mrf49xaCfg@regs stored from wreg
  3637  01DD  00A6               	movwf	mrf49xaCfg@regs
  3638                           
  3639                           ;mrf49xa.c: 73: uint8_t k = 0;
  3640  01DE  01A7               	clrf	mrf49xaCfg@k
  3641                           
  3642                           ;mrf49xa.c: 74: for (k = 0; k < count; k++) { if (regs[k].reg == 0x55) { _delay(40000); 
      +                          } else { Mrf49TxCmd(regs[k].reg, regs[k].val); } };
  3643  01DF  01A7               	clrf	mrf49xaCfg@k
  3644  01E0                     l2066:	
  3645  01E0  0823               	movf	mrf49xaCfg@count,w
  3646  01E1  0227               	subwf	mrf49xaCfg@k,w
  3647  01E2  1803               	btfsc	3,0
  3648  01E3  0008               	return
  3649  01E4  0827               	movf	mrf49xaCfg@k,w
  3650  01E5  00A4               	movwf	??_mrf49xaCfg
  3651  01E6  35A4               	lslf	??_mrf49xaCfg,f
  3652  01E7  0826               	movf	mrf49xaCfg@regs,w
  3653  01E8  0724               	addwf	??_mrf49xaCfg,w
  3654  01E9  3187               	movlp	high __stringtab
  3655  01EA  000A               	callw
  3656  01EB  3180               	pagesel	$	;select current page
  3657  01EC  3A55               	xorlw	85
  3658  01ED  1D03               	skipz
  3659  01EE  29F9               	goto	l2062
  3660  01EF  3034               	movlw	52
  3661  01F0  00A5               	movwf	??_mrf49xaCfg+1
  3662  01F1  30F1               	movlw	241
  3663  01F2  00A4               	movwf	??_mrf49xaCfg
  3664  01F3                     u2007:	
  3665  01F3  0BA4               	decfsz	??_mrf49xaCfg,f
  3666  01F4  29F3               	goto	u2007
  3667  01F5  0BA5               	decfsz	??_mrf49xaCfg+1,f
  3668  01F6  29F3               	goto	u2007
  3669  01F7  3200               	nop2
  3670  01F8  2A0D               	goto	l2064
  3671  01F9                     l2062:	
  3672  01F9  0827               	movf	mrf49xaCfg@k,w
  3673  01FA  00A4               	movwf	??_mrf49xaCfg
  3674  01FB  35A4               	lslf	??_mrf49xaCfg,f
  3675  01FC  0826               	movf	mrf49xaCfg@regs,w
  3676  01FD  0724               	addwf	??_mrf49xaCfg,w
  3677  01FE  3E01               	addlw	1
  3678  01FF  3187               	movlp	high __stringtab
  3679  0200  000A               	callw
  3680  0201  3180               	pagesel	$	;select current page
  3681  0202  00A1               	movwf	Mrf49TxCmd@val
  3682  0203  0827               	movf	mrf49xaCfg@k,w
  3683  0204  00A5               	movwf	??_mrf49xaCfg+1
  3684  0205  35A5               	lslf	??_mrf49xaCfg+1,f
  3685  0206  0826               	movf	mrf49xaCfg@regs,w
  3686  0207  0725               	addwf	??_mrf49xaCfg+1,w
  3687  0208  3187               	movlp	high __stringtab
  3688  0209  000A               	callw
  3689  020A  3180               	pagesel	$	;select current page
  3690  020B  2210  3180         	fcall	_Mrf49TxCmd
  3691  020D                     l2064:	
  3692  020D  0020               	movlb	0	; select bank0
  3693  020E  0AA7               	incf	mrf49xaCfg@k,f
  3694  020F  29E0               	goto	l2066
  3695  0210                     __end_of_mrf49xaCfg:	
  3696  0210                     __ptext27:	
  3697 ;; *************** function _Mrf49TxCmd *****************
  3698 ;; Defined at:
  3699 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  cmd             1    wreg     unsigned char 
  3702 ;;  val             1    1[BANK0 ] unsigned char 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  cmd             1    2[BANK0 ] unsigned char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;		None               void
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0, pclath, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 1F/0
  3711 ;;		On exit  : 1F/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3714 ;;      Params:         0       1       0       0
  3715 ;;      Locals:         0       1       0       0
  3716 ;;      Temps:          0       0       0       0
  3717 ;;      Totals:         0       2       0       0
  3718 ;;Total ram usage:        2 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    7
  3721 ;; This function calls:
  3722 ;;		_Mrf49SpiTx
  3723 ;; This function is called by:
  3724 ;;		_mrf49xaCfg
  3725 ;;		_Mrf49TxByte
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           
  3730                           ;psect for function _Mrf49TxCmd
  3731  0210                     _Mrf49TxCmd:	
  3732                           
  3733                           ;incstack = 0
  3734                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3735                           ;Mrf49TxCmd@cmd stored from wreg
  3736  0210  00A2               	movwf	Mrf49TxCmd@cmd
  3737                           
  3738                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  3739  0211  130E               	bcf	14,6	;volatile
  3740                           
  3741                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3742  0212  0822               	movf	Mrf49TxCmd@cmd,w
  3743  0213  2219  3180         	fcall	_Mrf49SpiTx
  3744                           
  3745                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3746  0215  0821               	movf	Mrf49TxCmd@val,w
  3747  0216  2219               	fcall	_Mrf49SpiTx
  3748                           
  3749                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  3750  0217  170E               	bsf	14,6	;volatile
  3751  0218  0008               	return
  3752  0219                     __end_of_Mrf49TxCmd:	
  3753  0219                     __ptext31:	
  3754 ;; *************** function _Mrf49SpiTx *****************
  3755 ;; Defined at:
  3756 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  byte            1    wreg     unsigned char 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  byte            1    0[BANK0 ] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg
  3765 ;; Tracked objects:
  3766 ;;		On entry : 1F/0
  3767 ;;		On exit  : 1F/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3770 ;;      Params:         0       0       0       0
  3771 ;;      Locals:         0       1       0       0
  3772 ;;      Temps:          0       0       0       0
  3773 ;;      Totals:         0       1       0       0
  3774 ;;Total ram usage:        1 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    6
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_Mrf49TxCmd
  3781 ;;		_Mrf49RxCmd
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _Mrf49SpiTx
  3787  0219                     _Mrf49SpiTx:	
  3788                           
  3789                           ;incstack = 0
  3790                           ; Regs used in _Mrf49SpiTx: [wreg]
  3791                           ;Mrf49SpiTx@byte stored from wreg
  3792  0219  00A0               	movwf	Mrf49SpiTx@byte
  3793                           
  3794                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; PORTCbits.RC7 = 1; asm("nop");; PORTCbits.RC7 = 0; } while (0);;
  3795  021A  1FA0               	btfss	Mrf49SpiTx@byte,7
  3796  021B  2A1E               	goto	l201
  3797  021C  178D               	bsf	13,7	;volatile
  3798  021D  2A1F               	goto	l202
  3799  021E                     l201:	
  3800  021E  138D               	bcf	13,7	;volatile
  3801  021F                     l202:	
  3802  021F  178E               	bsf	14,7	;volatile
  3803  0220  0000               	nop	;# 
  3804  0221  0020               	movlb	0	; select bank0
  3805  0222  138E               	bcf	14,7	;volatile
  3806  0223  1F20               	btfss	Mrf49SpiTx@byte,6
  3807  0224  2A27               	goto	l205
  3808  0225  178D               	bsf	13,7	;volatile
  3809  0226  2A28               	goto	l206
  3810  0227                     l205:	
  3811  0227  138D               	bcf	13,7	;volatile
  3812  0228                     l206:	
  3813  0228  178E               	bsf	14,7	;volatile
  3814  0229  0000               	nop	;# 
  3815  022A  0020               	movlb	0	; select bank0
  3816  022B  138E               	bcf	14,7	;volatile
  3817  022C  1EA0               	btfss	Mrf49SpiTx@byte,5
  3818  022D  2A30               	goto	l209
  3819  022E  178D               	bsf	13,7	;volatile
  3820  022F  2A31               	goto	l210
  3821  0230                     l209:	
  3822  0230  138D               	bcf	13,7	;volatile
  3823  0231                     l210:	
  3824  0231  178E               	bsf	14,7	;volatile
  3825  0232  0000               	nop	;# 
  3826  0233  0020               	movlb	0	; select bank0
  3827  0234  138E               	bcf	14,7	;volatile
  3828  0235  1E20               	btfss	Mrf49SpiTx@byte,4
  3829  0236  2A39               	goto	l213
  3830  0237  178D               	bsf	13,7	;volatile
  3831  0238  2A3A               	goto	l214
  3832  0239                     l213:	
  3833  0239  138D               	bcf	13,7	;volatile
  3834  023A                     l214:	
  3835  023A  178E               	bsf	14,7	;volatile
  3836  023B  0000               	nop	;# 
  3837  023C  0020               	movlb	0	; select bank0
  3838  023D  138E               	bcf	14,7	;volatile
  3839  023E  1DA0               	btfss	Mrf49SpiTx@byte,3
  3840  023F  2A42               	goto	l217
  3841  0240  178D               	bsf	13,7	;volatile
  3842  0241  2A43               	goto	l218
  3843  0242                     l217:	
  3844  0242  138D               	bcf	13,7	;volatile
  3845  0243                     l218:	
  3846  0243  178E               	bsf	14,7	;volatile
  3847  0244  0000               	nop	;# 
  3848  0245  0020               	movlb	0	; select bank0
  3849  0246  138E               	bcf	14,7	;volatile
  3850  0247  1D20               	btfss	Mrf49SpiTx@byte,2
  3851  0248  2A4B               	goto	l221
  3852  0249  178D               	bsf	13,7	;volatile
  3853  024A  2A4C               	goto	l222
  3854  024B                     l221:	
  3855  024B  138D               	bcf	13,7	;volatile
  3856  024C                     l222:	
  3857  024C  178E               	bsf	14,7	;volatile
  3858  024D  0000               	nop	;# 
  3859  024E  0020               	movlb	0	; select bank0
  3860  024F  138E               	bcf	14,7	;volatile
  3861  0250  1CA0               	btfss	Mrf49SpiTx@byte,1
  3862  0251  2A54               	goto	l225
  3863  0252  178D               	bsf	13,7	;volatile
  3864  0253  2A55               	goto	l226
  3865  0254                     l225:	
  3866  0254  138D               	bcf	13,7	;volatile
  3867  0255                     l226:	
  3868  0255  178E               	bsf	14,7	;volatile
  3869  0256  0000               	nop	;# 
  3870  0257  0020               	movlb	0	; select bank0
  3871  0258  138E               	bcf	14,7	;volatile
  3872  0259  1C20               	btfss	Mrf49SpiTx@byte,0
  3873  025A  2A5D               	goto	l229
  3874  025B  178D               	bsf	13,7	;volatile
  3875  025C  2A5E               	goto	l230
  3876  025D                     l229:	
  3877  025D  138D               	bcf	13,7	;volatile
  3878  025E                     l230:	
  3879  025E  178E               	bsf	14,7	;volatile
  3880  025F  0000               	nop	;# 
  3881  0260  0020               	movlb	0	; select bank0
  3882  0261  138E               	bcf	14,7	;volatile
  3883                           
  3884                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  3885  0262  138D               	bcf	13,7	;volatile
  3886  0263  0008               	return
  3887  0264                     __end_of_Mrf49SpiTx:	
  3888  0264                     __ptext28:	
  3889 ;; *************** function _Mrf49RxSts *****************
  3890 ;; Defined at:
  3891 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;		None               void
  3898 ;; Registers used:
  3899 ;;		wreg, status,2, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 1E/0
  3902 ;;		On exit  : 1F/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3905 ;;      Params:         0       0       0       0
  3906 ;;      Locals:         0       0       0       0
  3907 ;;      Temps:          0       0       0       0
  3908 ;;      Totals:         0       0       0       0
  3909 ;;Total ram usage:        0 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    7
  3912 ;; This function calls:
  3913 ;;		_Mrf49SpiRx
  3914 ;; This function is called by:
  3915 ;;		_Mrf49xaTick
  3916 ;;		_Mrf49xaServe
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           
  3921                           ;psect for function _Mrf49RxSts
  3922  0264                     _Mrf49RxSts:	
  3923                           
  3924                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  3928  0264  120B               	bcf	11,4	;volatile
  3929                           
  3930                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  3931  0265  0020               	movlb	0	; select bank0
  3932  0266  130E               	bcf	14,6	;volatile
  3933                           
  3934                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  3935  0267  226F  3180         	fcall	_Mrf49SpiRx
  3936  0269  00BB               	movwf	_mrf49Status
  3937                           
  3938                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  3939  026A  226F               	fcall	_Mrf49SpiRx
  3940  026B  00BC               	movwf	_mrf49Status+1
  3941                           
  3942                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  3943  026C  170E               	bsf	14,6	;volatile
  3944                           
  3945                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  3946  026D  160B               	bsf	11,4	;volatile
  3947  026E  0008               	return
  3948  026F                     __end_of_Mrf49RxSts:	
  3949  026F                     __ptext32:	
  3950 ;; *************** function _Mrf49SpiRx *****************
  3951 ;; Defined at:
  3952 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  data            1    0[BANK0 ] unsigned char 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      unsigned char 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2
  3961 ;; Tracked objects:
  3962 ;;		On entry : 1F/0
  3963 ;;		On exit  : 1F/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3966 ;;      Params:         0       0       0       0
  3967 ;;      Locals:         0       1       0       0
  3968 ;;      Temps:          0       0       0       0
  3969 ;;      Totals:         0       1       0       0
  3970 ;;Total ram usage:        1 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    6
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_Mrf49RxCmd
  3977 ;;		_Mrf49RxSts
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _Mrf49SpiRx
  3983  026F                     _Mrf49SpiRx:	
  3984                           
  3985                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  3989  026F  01A0               	clrf	Mrf49SpiRx@data
  3990                           
  3991                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  3992  0270  138D               	bcf	13,7	;volatile
  3993  0271  1A8E               	btfsc	14,5	;volatile
  3994  0272  17A0               	bsf	Mrf49SpiRx@data,7
  3995  0273  178E               	bsf	14,7	;volatile
  3996  0274  0000               	nop	;# 
  3997  0275  0020               	movlb	0	; select bank0
  3998  0276  138E               	bcf	14,7	;volatile
  3999                           
  4000                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4001  0277  1A8E               	btfsc	14,5	;volatile
  4002  0278  1720               	bsf	Mrf49SpiRx@data,6
  4003  0279  178E               	bsf	14,7	;volatile
  4004  027A  0000               	nop	;# 
  4005  027B  0020               	movlb	0	; select bank0
  4006  027C  138E               	bcf	14,7	;volatile
  4007                           
  4008                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4009  027D  1A8E               	btfsc	14,5	;volatile
  4010  027E  16A0               	bsf	Mrf49SpiRx@data,5
  4011  027F  178E               	bsf	14,7	;volatile
  4012  0280  0000               	nop	;# 
  4013  0281  0020               	movlb	0	; select bank0
  4014  0282  138E               	bcf	14,7	;volatile
  4015                           
  4016                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4017  0283  1A8E               	btfsc	14,5	;volatile
  4018  0284  1620               	bsf	Mrf49SpiRx@data,4
  4019  0285  178E               	bsf	14,7	;volatile
  4020  0286  0000               	nop	;# 
  4021  0287  0020               	movlb	0	; select bank0
  4022  0288  138E               	bcf	14,7	;volatile
  4023                           
  4024                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4025  0289  1A8E               	btfsc	14,5	;volatile
  4026  028A  15A0               	bsf	Mrf49SpiRx@data,3
  4027  028B  178E               	bsf	14,7	;volatile
  4028  028C  0000               	nop	;# 
  4029  028D  0020               	movlb	0	; select bank0
  4030  028E  138E               	bcf	14,7	;volatile
  4031                           
  4032                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4033  028F  1A8E               	btfsc	14,5	;volatile
  4034  0290  1520               	bsf	Mrf49SpiRx@data,2
  4035  0291  178E               	bsf	14,7	;volatile
  4036  0292  0000               	nop	;# 
  4037  0293  0020               	movlb	0	; select bank0
  4038  0294  138E               	bcf	14,7	;volatile
  4039                           
  4040                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4041  0295  1A8E               	btfsc	14,5	;volatile
  4042  0296  14A0               	bsf	Mrf49SpiRx@data,1
  4043  0297  178E               	bsf	14,7	;volatile
  4044  0298  0000               	nop	;# 
  4045  0299  0020               	movlb	0	; select bank0
  4046  029A  138E               	bcf	14,7	;volatile
  4047                           
  4048                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  4049  029B  1A8E               	btfsc	14,5	;volatile
  4050  029C  1420               	bsf	Mrf49SpiRx@data,0
  4051  029D  178E               	bsf	14,7	;volatile
  4052  029E  0000               	nop	;# 
  4053  029F  0020               	movlb	0	; select bank0
  4054  02A0  138E               	bcf	14,7	;volatile
  4055                           
  4056                           ;mrf49xa_spi_pic16.c: 40: return data;
  4057  02A1  0820               	movf	Mrf49SpiRx@data,w
  4058  02A2  0008               	return
  4059  02A3                     __end_of_Mrf49SpiRx:	
  4060  02A3                     __ptext34:	
  4061 ;; *************** function _AdcInit *****************
  4062 ;; Defined at:
  4063 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;		None
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;		None               void
  4070 ;; Registers used:
  4071 ;;		wreg, status,2
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/2
  4074 ;;		On exit  : 1F/1
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4077 ;;      Params:         0       0       0       0
  4078 ;;      Locals:         0       0       0       0
  4079 ;;      Temps:          0       0       0       0
  4080 ;;      Totals:         0       0       0       0
  4081 ;;Total ram usage:        0 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    6
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function _AdcInit
  4093  02A3                     _AdcInit:	
  4094                           
  4095                           ;adc16.c: 6: ANSELA = 0;
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _AdcInit: [wreg+status,2]
  4099  02A3  0023               	movlb	3	; select bank3
  4100  02A4  018C               	clrf	12	;volatile
  4101                           
  4102                           ;adc16.c: 7: ANSELB = 0;
  4103  02A5  018D               	clrf	13	;volatile
  4104                           
  4105                           ;adc16.c: 8: ANSELC = 0;
  4106  02A6  018E               	clrf	14	;volatile
  4107                           
  4108                           ;adc16.c: 10: FVRCON = 0b11100001;
  4109  02A7  30E1               	movlw	225
  4110  02A8  0022               	movlb	2	; select bank2
  4111  02A9  0097               	movwf	23	;volatile
  4112                           
  4113                           ;adc16.c: 12: ADCON2 = 0b00000000;
  4114  02AA  0021               	movlb	1	; select bank1
  4115  02AB  019F               	clrf	31	;volatile
  4116                           
  4117                           ;adc16.c: 13: ADCON1 = 0b11110000;
  4118  02AC  30F0               	movlw	240
  4119  02AD  009E               	movwf	30	;volatile
  4120                           
  4121                           ;adc16.c: 14: ADCON0 = 0b00000000;
  4122  02AE  019D               	clrf	29	;volatile
  4123                           
  4124                           ;adc16.c: 16: ADCON0 = 0b00010011;
  4125  02AF  3013               	movlw	19
  4126  02B0  009D               	movwf	29	;volatile
  4127  02B1  0008               	return
  4128  02B2                     __end_of_AdcInit:	
  4129  02B2                     __ptext33:	
  4130 ;; *************** function _ExtIntInit *****************
  4131 ;; Defined at:
  4132 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		None
  4141 ;; Tracked objects:
  4142 ;;		On entry : 1F/1
  4143 ;;		On exit  : 1F/1
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4146 ;;      Params:         0       0       0       0
  4147 ;;      Locals:         0       0       0       0
  4148 ;;      Temps:          0       0       0       0
  4149 ;;      Totals:         0       0       0       0
  4150 ;;Total ram usage:        0 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    6
  4153 ;; This function calls:
  4154 ;;		Nothing
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;; This function uses a non-reentrant model
  4158 ;;
  4159                           
  4160                           
  4161                           ;psect for function _ExtIntInit
  4162  02B2                     _ExtIntInit:	
  4163                           
  4164                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in _ExtIntInit: []
  4168  02B2  1315               	bcf	21,6	;volatile
  4169                           
  4170                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4171  02B3  108B               	bcf	11,1	;volatile
  4172                           
  4173                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4174  02B4  160B               	bsf	11,4	;volatile
  4175                           
  4176                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4177  02B5  178B               	bsf	11,7	;volatile
  4178  02B6  0008               	return
  4179  02B7                     __end_of_ExtIntInit:	
  4180  02B7                     __ptext21:	
  4181 ;; *************** function _Mrf49xaFreePacket *****************
  4182 ;; Defined at:
  4183 ;;		line 84 in file "../../../src/devices/mrf49xa_packet.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4186 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  4189 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, fsr1l, fsr1h, status,2
  4194 ;; Tracked objects:
  4195 ;;		On entry : 1F/0
  4196 ;;		On exit  : 1F/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4199 ;;      Params:         0       0       0       0
  4200 ;;      Locals:         0       1       0       0
  4201 ;;      Temps:          0       0       0       0
  4202 ;;      Totals:         0       1       0       0
  4203 ;;Total ram usage:        1 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    6
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_Mrf49xaTick
  4210 ;;		_HandlePacket
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           
  4215                           ;psect for function _Mrf49xaFreePacket
  4216  02B7                     _Mrf49xaFreePacket:	
  4217                           
  4218                           ;incstack = 0
  4219                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  4220                           ;Mrf49xaFreePacket@packet stored from wreg
  4221  02B7  00A0               	movwf	Mrf49xaFreePacket@packet
  4222                           
  4223                           ;mrf49xa_packet.c: 86: packet->state = PKT_FREE;
  4224  02B8  0086               	movwf	6
  4225  02B9  0187               	clrf	7
  4226  02BA  0181               	clrf	1
  4227  02BB  0008               	return
  4228  02BC                     __end_of_Mrf49xaFreePacket:	
  4229  02BC                     __ptext7:	
  4230 ;; *************** function _HandlePacket *****************
  4231 ;; Defined at:
  4232 ;;		line 100 in file "../../../src/rfstack/client.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4235 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  packet          1   22[BANK0 ] PTR struct rfTrcvPacket_
  4238 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4239 ;;  sendMsg         1   21[BANK0 ] unsigned char 
  4240 ;;  sendAck         1   20[BANK0 ] unsigned char 
  4241 ;;  needAck         1    0        unsigned char 
  4242 ;; Return value:  Size  Location     Type
  4243 ;;		None               void
  4244 ;; Registers used:
  4245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 1F/0
  4248 ;;		On exit  : 1E/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4251 ;;      Params:         0       0       0       0
  4252 ;;      Locals:         0       4       0       0
  4253 ;;      Temps:          0       0       0       0
  4254 ;;      Totals:         0       4       0       0
  4255 ;;Total ram usage:        4 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:   10
  4258 ;; This function calls:
  4259 ;;		_Mrf49xaFreePacket
  4260 ;;		_Mrf49xaTxAck
  4261 ;;		_Mrf49xaTxPacket
  4262 ;;		_handleFwCmd
  4263 ;;		_handleFwRead
  4264 ;;		_handleFwWrite
  4265 ;; This function is called by:
  4266 ;;		_Mrf49xaTick
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _HandlePacket
  4272  02BC                     _HandlePacket:	
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4276                           ;HandlePacket@packet stored from wreg
  4277  02BC  00B6               	movwf	HandlePacket@packet
  4278                           
  4279                           ;client.c: 102: bool_t sendMsg = 0;
  4280  02BD  01B5               	clrf	HandlePacket@sendMsg
  4281                           
  4282                           ;client.c: 103: bool_t sendAck = 0;
  4283  02BE  01B4               	clrf	HandlePacket@sendAck
  4284                           
  4285                           ;client.c: 107: switch (packet->packet.id)
  4286  02BF  2AEF               	goto	l2482
  4287  02C0                     l2458:	
  4288                           
  4289                           ;client.c: 110: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  4290                           ;client.c: 111: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  4291  02C0  0836               	movf	HandlePacket@packet,w
  4292  02C1  3E07               	addlw	7
  4293  02C2  0086               	movwf	6
  4294  02C3  0187               	clrf	7
  4295  02C4  0021               	movlb	1	; select bank1
  4296  02C5  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  4297  02C6  0601               	xorwf	1,w
  4298  02C7  1D03               	skipz
  4299  02C8  2B0A               	goto	l2484
  4300  02C9  0020               	movlb	0	; select bank0
  4301  02CA  0836               	movf	HandlePacket@packet,w
  4302  02CB  3E06               	addlw	6
  4303  02CC  0086               	movwf	6
  4304  02CD  0021               	movlb	1	; select bank1
  4305  02CE  0857               	movf	(_rfTrcvStatus^(0+128)+55),w
  4306  02CF  0601               	xorwf	1,w
  4307  02D0  1D03               	skipz
  4308  02D1  2B0A               	goto	l2484
  4309                           
  4310                           ;client.c: 112: {
  4311                           ;client.c: 113: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  4312  02D2  3002               	movlw	2
  4313  02D3  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4314  02D4  2B0A               	goto	l2484
  4315  02D5                     l2464:	
  4316                           
  4317                           ;client.c: 118: packet->packet.data[0] = 2;
  4318  02D5  0836               	movf	HandlePacket@packet,w
  4319  02D6  3E06               	addlw	6
  4320  02D7  0086               	movwf	6
  4321  02D8  3002               	movlw	2
  4322  02D9  0187               	clrf	7
  4323  02DA  0081               	movwf	1
  4324  02DB                     l2466:	
  4325                           
  4326                           ;client.c: 119: sendMsg = 1;
  4327  02DB  0020               	movlb	0	; select bank0
  4328  02DC  01B5               	clrf	HandlePacket@sendMsg
  4329  02DD  0AB5               	incf	HandlePacket@sendMsg,f
  4330                           
  4331                           ;client.c: 120: break;
  4332  02DE  2B0A               	goto	l2484
  4333  02DF                     l485:	
  4334                           ;client.c: 123: syncedTime = *((uint32_t*) packet->packet.data);
  4335                           
  4336                           
  4337                           ;client.c: 124: sendAck = 1;
  4338  02DF  01B4               	clrf	HandlePacket@sendAck
  4339  02E0  0AB4               	incf	HandlePacket@sendAck,f
  4340                           
  4341                           ;client.c: 125: break;
  4342  02E1  2B0A               	goto	l2484
  4343  02E2                     l2468:	
  4344                           
  4345                           ;client.c: 132: handleFwCmd(packet);
  4346  02E2  0836               	movf	HandlePacket@packet,w
  4347  02E3  231B  3180         	fcall	_handleFwCmd
  4348  02E5  2ADB               	goto	l2466
  4349  02E6                     l2472:	
  4350                           
  4351                           ;client.c: 137: handleFwWrite(packet);
  4352  02E6  0836               	movf	HandlePacket@packet,w
  4353  02E7  3185  259C  3180   	fcall	_handleFwWrite
  4354  02EA  2ADB               	goto	l2466
  4355  02EB                     l2476:	
  4356                           
  4357                           ;client.c: 142: handleFwRead(packet);
  4358  02EB  0836               	movf	HandlePacket@packet,w
  4359  02EC  234F  3180         	fcall	_handleFwRead
  4360  02EE  2ADB               	goto	l2466
  4361  02EF                     l2482:	
  4362  02EF  0836               	movf	HandlePacket@packet,w
  4363  02F0  3E04               	addlw	4
  4364  02F1  0086               	movwf	6
  4365  02F2  0187               	clrf	7
  4366  02F3  0801               	movf	1,w
  4367                           
  4368                           ; Switch size 1, requested type "space"
  4369                           ; Number of cases is 7, Range of values is 160 to 194
  4370                           ; switch strategies available:
  4371                           ; Name         Instructions Cycles
  4372                           ; simple_byte           22    12 (average)
  4373                           ; direct_byte           79     9 (fixed)
  4374                           ; jumptable            263     9 (fixed)
  4375                           ;	Chosen strategy is simple_byte
  4376  02F4  3AA0               	xorlw	160	; case 160
  4377  02F5  1903               	skipnz
  4378  02F6  2AD5               	goto	l2464
  4379  02F7  3A01               	xorlw	1	; case 161
  4380  02F8  1903               	skipnz
  4381  02F9  2AC0               	goto	l2458
  4382  02FA  3A03               	xorlw	3	; case 162
  4383  02FB  1903               	skipnz
  4384  02FC  2ADF               	goto	l485
  4385  02FD  3A01               	xorlw	1	; case 163
  4386  02FE  1903               	skipnz
  4387  02FF  2B0A               	goto	l2484
  4388  0300  3A63               	xorlw	99	; case 192
  4389  0301  1903               	skipnz
  4390  0302  2AE2               	goto	l2468
  4391  0303  3A01               	xorlw	1	; case 193
  4392  0304  1903               	skipnz
  4393  0305  2AE6               	goto	l2472
  4394  0306  3A03               	xorlw	3	; case 194
  4395  0307  1903               	skipnz
  4396  0308  2AEB               	goto	l2476
  4397  0309  2B0A               	goto	l2484
  4398  030A                     l2484:	
  4399                           
  4400                           ;client.c: 148: if (sendMsg)
  4401  030A  0020               	movlb	0	; select bank0
  4402  030B  0835               	movf	HandlePacket@sendMsg,w
  4403  030C  1903               	btfsc	3,2
  4404  030D  2B14               	goto	l2488
  4405                           
  4406                           ;client.c: 149: Mrf49xaTxPacket(packet, 1, needAck);
  4407  030E  01A0               	clrf	Mrf49xaTxPacket@response
  4408  030F  0AA0               	incf	Mrf49xaTxPacket@response,f
  4409  0310  01A1               	clrf	Mrf49xaTxPacket@needAck
  4410  0311  0836               	movf	HandlePacket@packet,w
  4411  0312  3186  2EDB         	ljmp	_Mrf49xaTxPacket
  4412  0314                     l2488:	
  4413                           
  4414                           ;client.c: 150: else if (sendAck)
  4415  0314  0834               	movf	HandlePacket@sendAck,w
  4416  0315  1903               	btfsc	3,2
  4417  0316  2B19               	goto	l2492
  4418                           
  4419                           ;client.c: 151: Mrf49xaTxAck(packet);
  4420  0317  0836               	movf	HandlePacket@packet,w
  4421  0318  2BA2               	ljmp	_Mrf49xaTxAck
  4422  0319                     l2492:	
  4423                           
  4424                           ;client.c: 152: else
  4425                           ;client.c: 153: Mrf49xaFreePacket(packet);
  4426  0319  0836               	movf	HandlePacket@packet,w
  4427  031A  2AB7               	ljmp	_Mrf49xaFreePacket
  4428  031B                     __end_of_HandlePacket:	
  4429  031B                     __ptext11:	
  4430 ;; *************** function _handleFwCmd *****************
  4431 ;; Defined at:
  4432 ;;		line 19 in file "../../../src/rfstack/client.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4435 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  packet          1   11[BANK0 ] PTR struct rfTrcvPacket_
  4438 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;		None               void
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 1F/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4448 ;;      Params:         0       0       0       0
  4449 ;;      Locals:         0       1       0       0
  4450 ;;      Temps:          0       0       0       0
  4451 ;;      Totals:         0       1       0       0
  4452 ;;Total ram usage:        1 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    9
  4455 ;; This function calls:
  4456 ;;		_eepromRxBytes
  4457 ;; This function is called by:
  4458 ;;		_HandlePacket
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           
  4463                           ;psect for function _handleFwCmd
  4464  031B                     _handleFwCmd:	
  4465                           
  4466                           ;incstack = 0
  4467                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4468                           ;handleFwCmd@packet stored from wreg
  4469  031B  00AB               	movwf	handleFwCmd@packet
  4470                           
  4471                           ;client.c: 41: break;
  4472                           
  4473                           ;client.c: 21: switch(packet->packet.data[0])
  4474  031C  3E06               	addlw	6
  4475  031D  0086               	movwf	6
  4476  031E  0187               	clrf	7
  4477  031F  0801               	movf	1,w
  4478                           
  4479                           ; Switch size 1, requested type "space"
  4480                           ; Number of cases is 8, Range of values is 0 to 7
  4481                           ; switch strategies available:
  4482                           ; Name         Instructions Cycles
  4483                           ; direct_byte           22     6 (fixed)
  4484                           ; simple_byte           25    13 (average)
  4485                           ; jumptable            260     6 (fixed)
  4486                           ;	Chosen strategy is direct_byte
  4487  0320  0084               	movwf	4
  4488  0321  3008               	movlw	8
  4489  0322  0204               	subwf	4,w
  4490  0323  1803               	skipnc
  4491  0324  0008               	return
  4492  0325  3187               	movlp	high S2764
  4493  0326  3504               	lslf	4,w
  4494  0327  3E7E               	addlw	low S2764
  4495  0328  0082               	movwf	2
  4496  0329                     l469:	
  4497  0329  0008               	return
  4498  032A                     l2238:	
  4499                           
  4500                           ;client.c: 28: packet->packet.size = 5;
  4501  032A  0A2B               	incf	handleFwCmd@packet,w
  4502  032B  0086               	movwf	6
  4503  032C  3005               	movlw	5
  4504  032D  0187               	clrf	7
  4505  032E  0081               	movwf	1
  4506                           
  4507                           ;client.c: 29: packet->packet.data[1] = 0;
  4508  032F  082B               	movf	handleFwCmd@packet,w
  4509  0330  3E07               	addlw	7
  4510  0331  0086               	movwf	6
  4511  0332  0181               	clrf	1
  4512                           
  4513                           ;client.c: 30: packet->packet.data[2] = 1;
  4514  0333  082B               	movf	handleFwCmd@packet,w
  4515  0334  3E08               	addlw	8
  4516  0335  0086               	movwf	6
  4517  0336  0181               	clrf	1
  4518  0337  0A81               	incf	1,f
  4519                           
  4520                           ;client.c: 32: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  4521  0338  01A7               	clrf	eepromRxBytes@address
  4522  0339  01A8               	clrf	eepromRxBytes@address+1
  4523  033A  082B               	movf	handleFwCmd@packet,w
  4524  033B  3E09               	addlw	9
  4525  033C  00A9               	movwf	eepromRxBytes@data
  4526  033D  3002               	movlw	2
  4527  033E  00AA               	movwf	eepromRxBytes@size
  4528  033F  3186  2E29         	ljmp	l2150
  4529  0341                     l2246:	
  4530                           ;client.c: 34: break;
  4531                           
  4532                           
  4533                           ;client.c: 37: packet->packet.size = 2;
  4534  0341  0A2B               	incf	handleFwCmd@packet,w
  4535  0342  0086               	movwf	6
  4536  0343  3002               	movlw	2
  4537  0344  0187               	clrf	7
  4538  0345  0081               	movwf	1
  4539                           
  4540                           ;client.c: 38: eepromRxBytes(0x2, &(packet->packet.data[1]), 1);
  4541  0346  00A7               	movwf	eepromRxBytes@address
  4542  0347  01A8               	clrf	eepromRxBytes@address+1
  4543  0348  082B               	movf	handleFwCmd@packet,w
  4544  0349  3E07               	addlw	7
  4545  034A  00A9               	movwf	eepromRxBytes@data
  4546  034B  01AA               	clrf	eepromRxBytes@size
  4547  034C  0AAA               	incf	eepromRxBytes@size,f
  4548  034D  3186  2E29         	ljmp	l2150
  4549  034F                     __end_of_handleFwCmd:	
  4550  034F                     __ptext10:	
  4551 ;; *************** function _handleFwRead *****************
  4552 ;; Defined at:
  4553 ;;		line 91 in file "../../../src/rfstack/client.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4556 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  4559 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4560 ;;  address         2   11[BANK0 ] unsigned int 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;		None               void
  4563 ;; Registers used:
  4564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 1F/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4570 ;;      Params:         0       0       0       0
  4571 ;;      Locals:         0       3       0       0
  4572 ;;      Temps:          0       0       0       0
  4573 ;;      Totals:         0       3       0       0
  4574 ;;Total ram usage:        3 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    9
  4577 ;; This function calls:
  4578 ;;		_eepromRxBytes
  4579 ;; This function is called by:
  4580 ;;		_HandlePacket
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function _handleFwRead
  4586  034F                     _handleFwRead:	
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _handleFwRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4590                           ;handleFwRead@packet stored from wreg
  4591  034F  00AD               	movwf	handleFwRead@packet
  4592                           
  4593                           ;client.c: 93: packet->packet.size = 16;
  4594  0350  0A2D               	incf	handleFwRead@packet,w
  4595  0351  0086               	movwf	6
  4596  0352  3010               	movlw	16
  4597  0353  0187               	clrf	7
  4598  0354  0081               	movwf	1
  4599                           
  4600                           ;client.c: 94: UI16_t address = (packet->packet.data[2] << 8) | packet->packet.data[3];
  4601  0355  082D               	movf	handleFwRead@packet,w
  4602  0356  3E09               	addlw	9
  4603  0357  0086               	movwf	6
  4604  0358  082D               	movf	handleFwRead@packet,w
  4605  0359  3E08               	addlw	8
  4606  035A  0084               	movwf	4
  4607  035B  0185               	clrf	5
  4608  035C  0800               	movf	0,w
  4609  035D  00AC               	movwf	handleFwRead@address+1
  4610  035E  0801               	movf	1,w
  4611  035F  00AB               	movwf	handleFwRead@address
  4612                           
  4613                           ;client.c: 96: eepromRxBytes(address, packet->packet.data+8, 8);
  4614  0360  082C               	movf	handleFwRead@address+1,w
  4615  0361  00A8               	movwf	eepromRxBytes@address+1
  4616  0362  082B               	movf	handleFwRead@address,w
  4617  0363  00A7               	movwf	eepromRxBytes@address
  4618  0364  082D               	movf	handleFwRead@packet,w
  4619  0365  3E0E               	addlw	14
  4620  0366  00A9               	movwf	eepromRxBytes@data
  4621  0367  3008               	movlw	8
  4622  0368  00AA               	movwf	eepromRxBytes@size
  4623  0369  3186  2E29         	ljmp	l2150
  4624  036B                     __end_of_handleFwRead:	
  4625  036B                     __ptext5:	
  4626 ;; *************** function _Mrf49xaPacketPending *****************
  4627 ;; Defined at:
  4628 ;;		line 5 in file "../../../src/devices/mrf49xa_packet.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      unsigned char 
  4635 ;; Registers used:
  4636 ;;		wreg
  4637 ;; Tracked objects:
  4638 ;;		On entry : 1E/0
  4639 ;;		On exit  : 1F/1
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4642 ;;      Params:         0       0       0       0
  4643 ;;      Locals:         0       0       0       0
  4644 ;;      Temps:          0       0       0       0
  4645 ;;      Totals:         0       0       0       0
  4646 ;;Total ram usage:        0 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    6
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_Mrf49xaTick
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _Mrf49xaPacketPending
  4658  036B                     _Mrf49xaPacketPending:	
  4659                           
  4660                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  4661                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  4665  036B  0021               	movlb	1	; select bank1
  4666  036C  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4667  036D  3A04               	xorlw	4
  4668  036E  1903               	skipnz
  4669  036F  3401               	retlw	1
  4670  0370  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4671  0371  3A04               	xorlw	4
  4672  0372  1903               	btfsc	3,2
  4673                           
  4674                           ;mrf49xa_packet.c: 9: return 1;
  4675  0373  3401               	retlw	1
  4676                           
  4677                           ;mrf49xa_packet.c: 10: else
  4678                           ;mrf49xa_packet.c: 11: return 0;
  4679  0374  3400               	retlw	0
  4680  0375                     __end_of_Mrf49xaPacketPending:	
  4681  0375                     __ptext4:	
  4682 ;; *************** function _Mrf49xaRxPacket *****************
  4683 ;; Defined at:
  4684 ;;		line 89 in file "../../../src/devices/mrf49xa_packet.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;		None
  4689 ;; Return value:  Size  Location     Type
  4690 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4691 ;; Registers used:
  4692 ;;		wreg
  4693 ;; Tracked objects:
  4694 ;;		On entry : 1F/1
  4695 ;;		On exit  : 1F/1
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4698 ;;      Params:         0       0       0       0
  4699 ;;      Locals:         0       0       0       0
  4700 ;;      Temps:          0       0       0       0
  4701 ;;      Totals:         0       0       0       0
  4702 ;;Total ram usage:        0 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    6
  4705 ;; This function calls:
  4706 ;;		Nothing
  4707 ;; This function is called by:
  4708 ;;		_Mrf49xaTick
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _Mrf49xaRxPacket
  4714  0375                     _Mrf49xaRxPacket:	
  4715                           
  4716                           ;mrf49xa_packet.c: 91: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  4717                           
  4718                           ;incstack = 0
  4719                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  4720  0375  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4721  0376  3A04               	xorlw	4
  4722  0377  1D03               	skipz
  4723  0378  2B7C               	goto	l2446
  4724                           
  4725                           ;mrf49xa_packet.c: 92: {
  4726                           ;mrf49xa_packet.c: 93: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4727  0379  3005               	movlw	5
  4728  037A  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  4729                           
  4730                           ;mrf49xa_packet.c: 94: return &(rfTrcvStatus.rxPacket[0]);
  4731  037B  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  4732  037C                     l2446:	
  4733                           
  4734                           ;mrf49xa_packet.c: 95: }
  4735                           ;mrf49xa_packet.c: 97: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4736  037C  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4737  037D  3A04               	xorlw	4
  4738  037E  1D03               	skipz
  4739  037F  3400               	retlw	0
  4740                           
  4741                           ;mrf49xa_packet.c: 98: {
  4742                           ;mrf49xa_packet.c: 99: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4743  0380  3005               	movlw	5
  4744  0381  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4745                           
  4746                           ;mrf49xa_packet.c: 100: return &(rfTrcvStatus.rxPacket[1]);
  4747  0382  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4748  0383                     __end_of_Mrf49xaRxPacket:	
  4749                           ;mrf49xa_packet.c: 101: }
  4750                           ;mrf49xa_packet.c: 103: return (0);
  4751                           
  4752  0383                     __ptext1:	
  4753 ;; *************** function _SysInitGpio *****************
  4754 ;; Defined at:
  4755 ;;		line 28 in file "../../../src/node/main.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;		None               void
  4762 ;; Registers used:
  4763 ;;		None
  4764 ;; Tracked objects:
  4765 ;;		On entry : 17F/4
  4766 ;;		On exit  : 17F/2
  4767 ;;		Unchanged: 160/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4769 ;;      Params:         0       0       0       0
  4770 ;;      Locals:         0       0       0       0
  4771 ;;      Temps:          0       0       0       0
  4772 ;;      Totals:         0       0       0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    6
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _SysInitGpio
  4785  0383                     _SysInitGpio:	
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _SysInitGpio: []
  4789                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4790  0383  0021               	movlb	1	; select bank1
  4791  0384  150C               	bsf	12,2	;volatile
  4792  0385  120C               	bcf	12,4	;volatile
  4793  0386  128C               	bcf	12,5	;volatile
  4794  0387  0022               	movlb	2	; select bank2
  4795  0388  120C               	bcf	12,4	;volatile
  4796  0389  128C               	bcf	12,5	;volatile
  4797                           
  4798                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4799  038A  0021               	movlb	1	; select bank1
  4800  038B  120D               	bcf	13,4	;volatile
  4801  038C  130D               	bcf	13,6	;volatile
  4802  038D  138D               	bcf	13,7	;volatile
  4803  038E  168D               	bsf	13,5	;volatile
  4804                           
  4805                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; PORTCbits
  4806  038F  108E               	bcf	14,1	;volatile
  4807  0390  110E               	bcf	14,2	;volatile
  4808  0391  120E               	bcf	14,4	;volatile
  4809  0392  130E               	bcf	14,6	;volatile
  4810  0393  138E               	bcf	14,7	;volatile
  4811  0394  140E               	bsf	14,0	;volatile
  4812  0395  158E               	bsf	14,3	;volatile
  4813  0396  168E               	bsf	14,5	;volatile
  4814  0397  0022               	movlb	2	; select bank2
  4815  0398  108E               	bcf	14,1	;volatile
  4816  0399  110E               	bcf	14,2	;volatile
  4817  039A  120E               	bcf	14,4	;volatile
  4818  039B  0020               	movlb	0	; select bank0
  4819  039C  170E               	bsf	14,6	;volatile
  4820  039D  138E               	bcf	14,7	;volatile
  4821                           
  4822                           ;main.c: 34: LATCbits.LATC1 = 0;
  4823  039E  0022               	movlb	2	; select bank2
  4824  039F  108E               	bcf	14,1	;volatile
  4825                           
  4826                           ;main.c: 35: LATCbits.LATC2 = 0;
  4827  03A0  110E               	bcf	14,2	;volatile
  4828  03A1  0008               	return
  4829  03A2                     __end_of_SysInitGpio:	
  4830  03A2                     __ptext19:	
  4831 ;; *************** function _Mrf49xaTxAck *****************
  4832 ;; Defined at:
  4833 ;;		line 14 in file "../../../src/devices/mrf49xa_packet.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4836 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  4839 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;		None               void
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 1F/0
  4846 ;;		On exit  : 1F/1
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4849 ;;      Params:         0       0       0       0
  4850 ;;      Locals:         0       1       0       0
  4851 ;;      Temps:          0       0       0       0
  4852 ;;      Totals:         0       1       0       0
  4853 ;;Total ram usage:        1 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    7
  4856 ;; This function calls:
  4857 ;;		_Mrf49xaTxPacket
  4858 ;; This function is called by:
  4859 ;;		_HandlePacket
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           
  4864                           ;psect for function _Mrf49xaTxAck
  4865  03A2                     _Mrf49xaTxAck:	
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4869                           ;Mrf49xaTxAck@packet stored from wreg
  4870  03A2  00A6               	movwf	Mrf49xaTxAck@packet
  4871                           
  4872                           ;mrf49xa_packet.c: 16: packet->packet.data[0] = packet->packet.id;
  4873  03A3  3E06               	addlw	6
  4874  03A4  0086               	movwf	6
  4875  03A5  0187               	clrf	7
  4876  03A6  0826               	movf	Mrf49xaTxAck@packet,w
  4877  03A7  3E04               	addlw	4
  4878  03A8  0084               	movwf	4
  4879  03A9  0185               	clrf	5
  4880  03AA  0800               	movf	0,w
  4881  03AB  0081               	movwf	1
  4882                           
  4883                           ;mrf49xa_packet.c: 17: packet->packet.data[1] = packet->crc;
  4884  03AC  0826               	movf	Mrf49xaTxAck@packet,w
  4885  03AD  3E07               	addlw	7
  4886  03AE  0086               	movwf	6
  4887  03AF  0826               	movf	Mrf49xaTxAck@packet,w
  4888  03B0  3E16               	addlw	22
  4889  03B1  0084               	movwf	4
  4890  03B2  0800               	movf	0,w
  4891  03B3  0081               	movwf	1
  4892                           
  4893                           ;mrf49xa_packet.c: 20: packet->packet.id = RF_ACK;
  4894  03B4  0826               	movf	Mrf49xaTxAck@packet,w
  4895  03B5  3E04               	addlw	4
  4896  03B6  0086               	movwf	6
  4897  03B7  30A1               	movlw	161
  4898  03B8  0081               	movwf	1
  4899                           
  4900                           ;mrf49xa_packet.c: 21: packet->packet.size = 2;
  4901  03B9  0A26               	incf	Mrf49xaTxAck@packet,w
  4902  03BA  0086               	movwf	6
  4903  03BB  3002               	movlw	2
  4904  03BC  0081               	movwf	1
  4905                           
  4906                           ;mrf49xa_packet.c: 23: Mrf49xaTxPacket(packet, 1, 0);
  4907  03BD  01A0               	clrf	Mrf49xaTxPacket@response
  4908  03BE  0AA0               	incf	Mrf49xaTxPacket@response,f
  4909  03BF  01A1               	clrf	Mrf49xaTxPacket@needAck
  4910  03C0  0826               	movf	Mrf49xaTxAck@packet,w
  4911  03C1  3186  2EDB         	ljmp	_Mrf49xaTxPacket
  4912  03C3                     __end_of_Mrf49xaTxAck:	
  4913  03C3                     __ptext6:	
  4914 ;; *************** function _Mrf49xaModeTx *****************
  4915 ;; Defined at:
  4916 ;;		line 87 in file "../../../src/devices/mrf49xa.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  k               1    0        unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;		None               void
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0, pclath, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 1F/0
  4927 ;;		On exit  : 1F/1
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4930 ;;      Params:         0       0       0       0
  4931 ;;      Locals:         0       0       0       0
  4932 ;;      Temps:          0       0       0       0
  4933 ;;      Totals:         0       0       0       0
  4934 ;;Total ram usage:        0 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    9
  4937 ;; This function calls:
  4938 ;;		_mrf49xaCfg
  4939 ;; This function is called by:
  4940 ;;		_Mrf49xaTick
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _Mrf49xaModeTx
  4946  03C3                     _Mrf49xaModeTx:	
  4947                           
  4948                           ;mrf49xa.c: 89: UI08_t k;
  4949                           ;mrf49xa.c: 91: mrf49xaCfg(mrfRegset_Tx, mrfRegset_TxCnt);
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  4953  03C3  3049               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  4954  03C4  3187               	movlp	high __stringtab
  4955  03C5  000A               	callw
  4956  03C6  3180               	pagesel	$	;select current page
  4957  03C7  00A3               	movwf	mrf49xaCfg@count
  4958  03C8  3076               	movlw	(_mrfRegset_Tx| (0+32768))& (0+255)
  4959  03C9  21DD               	fcall	_mrf49xaCfg
  4960                           
  4961                           ;mrf49xa.c: 93: rfTrcvStatus.state = TX_PACKET;
  4962  03CA  3002               	movlw	2
  4963  03CB  0021               	movlb	1	; select bank1
  4964  03CC  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  4965                           
  4966                           ;mrf49xa.c: 94: rfTrcvStatus.hwByte = 99;
  4967  03CD  3063               	movlw	99
  4968  03CE  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  4969  03CF  0008               	return
  4970  03D0                     __end_of_Mrf49xaModeTx:	
  4971  03D0                     PL4:	
  4972  03D0  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4973  03D1  390F               	andlw	15
  4974  03D2  0020               	movlb	0	; select bank0
  4975  03D3  00B7               	movwf	??_Mrf49xaTick
  4976  03D4  0AB7               	incf	??_Mrf49xaTick,f
  4977  03D5  0021               	movlb	1	; select bank1
  4978  03D6  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4979  03D7  0020               	movlb	0	; select bank0
  4980  03D8  0637               	xorwf	??_Mrf49xaTick,w
  4981  03D9  39F0               	andlw	-16
  4982  03DA  0637               	xorwf	??_Mrf49xaTick,w
  4983  03DB  0021               	movlb	1	; select bank1
  4984  03DC  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  4985  03DD  0008               	return
  4986  03DE                     __end_ofPL4:	
  4987  03DE                     PL8:	
  4988  03DE  0020               	movlb	0	; select bank0
  4989  03DF  0829               	movf	Mrf49xaServe@data,w
  4990  03E0  0081               	movwf	1
  4991  03E1  0021               	movlb	1	; select bank1
  4992  03E2  0820               	movf	_rfTrcvStatus^(0+128),w
  4993  03E3  0008               	return
  4994  03E4                     __end_ofPL8:	
  4995                           
  4996                           	psect	bssBANK0
  4997  003B                     __pbssBANK0:	
  4998  003B                     _mrf49Status:	
  4999  003B                     	ds	2
  5000                           
  5001                           	psect	bssBANK1
  5002  00A0                     __pbssBANK1:	
  5003  00A0                     _rfTrcvStatus:	
  5004  00A0                     	ds	79
  5005                           
  5006                           	psect	clrtext
  5007  078E                     clear_ram0:	
  5008                           ;	Called with FSR0 containing the base address, and
  5009                           ;	WREG with the size to clear
  5010                           
  5011  078E  0064               	clrwdt	;clear the watchdog before getting into this loop
  5012  078F                     clrloop0:	
  5013  078F  0180               	clrf	0	;clear RAM location pointed to by FSR
  5014  0790  3101               	addfsr 0,1
  5015  0791  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5016  0792  2F8F               	goto	clrloop0	;have we reached the end yet?
  5017  0793  3400               	retlw	0	;all done for this memory range, return
  5018                           
  5019                           	psect	cstackCOMMON
  5020  0070                     __pcstackCOMMON:	
  5021  0070                     ?_SoftI2cStart:	
  5022  0070                     ?_SoftI2cStop:	
  5023                           ; 0 bytes @ 0x0
  5024                           
  5025  0070                     ?_HandlePacket:	
  5026                           ; 0 bytes @ 0x0
  5027                           
  5028  0070                     ?_SoftI2cNop:	
  5029                           ; 0 bytes @ 0x0
  5030                           
  5031  0070                     ?_SoftI2cInit:	
  5032                           ; 0 bytes @ 0x0
  5033                           
  5034  0070                     ?_SoftI2cRepeatedStart:	
  5035                           ; 0 bytes @ 0x0
  5036                           
  5037  0070                     ?_AdcInit:	
  5038                           ; 0 bytes @ 0x0
  5039                           
  5040  0070                     ?_ExtIntInit:	
  5041                           ; 0 bytes @ 0x0
  5042                           
  5043  0070                     ?_extInt:	
  5044                           ; 0 bytes @ 0x0
  5045                           
  5046  0070                     ?_Mrf49xaModeRx:	
  5047                           ; 0 bytes @ 0x0
  5048                           
  5049  0070                     ?_Mrf49xaModeTx:	
  5050                           ; 0 bytes @ 0x0
  5051                           
  5052  0070                     ?_Mrf49xaInit:	
  5053                           ; 0 bytes @ 0x0
  5054                           
  5055  0070                     ?_Mrf49SpiTx:	
  5056                           ; 0 bytes @ 0x0
  5057                           
  5058  0070                     ?_Mrf49RxSts:	
  5059                           ; 0 bytes @ 0x0
  5060                           
  5061  0070                     ?_Mrf49TxByte:	
  5062                           ; 0 bytes @ 0x0
  5063                           
  5064  0070                     ?_Mrf49xaTxAck:	
  5065                           ; 0 bytes @ 0x0
  5066                           
  5067  0070                     ?_Mrf49xaFreePacket:	
  5068                           ; 0 bytes @ 0x0
  5069                           
  5070  0070                     ?_Mrf49xaTick:	
  5071                           ; 0 bytes @ 0x0
  5072                           
  5073  0070                     ?_handleFwCmd:	
  5074                           ; 0 bytes @ 0x0
  5075                           
  5076  0070                     ?_handleFwWrite:	
  5077                           ; 0 bytes @ 0x0
  5078                           
  5079  0070                     ?_handleFwRead:	
  5080                           ; 0 bytes @ 0x0
  5081                           
  5082  0070                     ?_SysInitGpio:	
  5083                           ; 0 bytes @ 0x0
  5084                           
  5085  0070                     ?_main:	
  5086                           ; 0 bytes @ 0x0
  5087                           
  5088  0070                     ?i1_Mrf49xaModeRx:	
  5089                           ; 0 bytes @ 0x0
  5090                           
  5091  0070                     ?i1_Mrf49SpiTx:	
  5092                           ; 0 bytes @ 0x0
  5093                           
  5094  0070                     ??i1_Mrf49SpiTx:	
  5095                           ; 0 bytes @ 0x0
  5096                           
  5097  0070                     ??i1_Mrf49SpiRx:	
  5098                           ; 0 bytes @ 0x0
  5099                           
  5100  0070                     ?i1_Mrf49RxSts:	
  5101                           ; 0 bytes @ 0x0
  5102                           
  5103  0070                     ?i1_Mrf49TxByte:	
  5104                           ; 0 bytes @ 0x0
  5105                           
  5106  0070                     ?_SoftI2cTxByte:	
  5107                           ; 0 bytes @ 0x0
  5108                           
  5109  0070                     ?_Mrf49xaServe:	
  5110                           ; 1 bytes @ 0x0
  5111                           
  5112  0070                     ?_SoftI2cRxByte:	
  5113                           ; 1 bytes @ 0x0
  5114                           
  5115  0070                     ?_Mrf49SpiRx:	
  5116                           ; 1 bytes @ 0x0
  5117                           
  5118  0070                     ?_Mrf49RxCmd:	
  5119                           ; 1 bytes @ 0x0
  5120                           
  5121  0070                     ?_Mrf49RxByte:	
  5122                           ; 1 bytes @ 0x0
  5123                           
  5124  0070                     ?_Mrf49xaPacketPending:	
  5125                           ; 1 bytes @ 0x0
  5126                           
  5127  0070                     ?_Mrf49xaRxPacket:	
  5128                           ; 1 bytes @ 0x0
  5129                           
  5130  0070                     ?i1_Mrf49SpiRx:	
  5131                           ; 1 bytes @ 0x0
  5132                           
  5133  0070                     ?i1_Mrf49RxCmd:	
  5134                           ; 1 bytes @ 0x0
  5135                           
  5136  0070                     ?i1_Mrf49RxByte:	
  5137                           ; 1 bytes @ 0x0
  5138                           
  5139  0070                     ?i1_Mrf49xaServe:	
  5140                           ; 1 bytes @ 0x0
  5141                           
  5142  0070                     i1Mrf49SpiTx@byte:	
  5143                           ; 1 bytes @ 0x0
  5144                           
  5145  0070                     i1Mrf49SpiRx@data:	
  5146                           ; 1 bytes @ 0x0
  5147                           
  5148                           
  5149                           ; 1 bytes @ 0x0
  5150  0070                     	ds	1
  5151  0071                     ?i1_Mrf49TxCmd:	
  5152  0071                     ??i1_Mrf49RxCmd:	
  5153                           ; 0 bytes @ 0x1
  5154                           
  5155  0071                     ??i1_Mrf49RxSts:	
  5156                           ; 0 bytes @ 0x1
  5157                           
  5158  0071                     i1Mrf49TxCmd@val:	
  5159                           ; 0 bytes @ 0x1
  5160                           
  5161  0071                     i1Mrf49RxCmd@cmd:	
  5162                           ; 1 bytes @ 0x1
  5163                           
  5164                           
  5165                           ; 1 bytes @ 0x1
  5166  0071                     	ds	1
  5167  0072                     ??i1_Mrf49TxCmd:	
  5168  0072                     i1Mrf49TxCmd@cmd:	
  5169                           ; 0 bytes @ 0x2
  5170                           
  5171  0072                     i1Mrf49RxCmd@val:	
  5172                           ; 1 bytes @ 0x2
  5173                           
  5174                           
  5175                           ; 1 bytes @ 0x2
  5176  0072                     	ds	1
  5177  0073                     ?i1_mrf49xaCfg:	
  5178  0073                     ??i1_Mrf49RxByte:	
  5179                           ; 0 bytes @ 0x3
  5180                           
  5181  0073                     ??i1_Mrf49TxByte:	
  5182                           ; 0 bytes @ 0x3
  5183                           
  5184  0073                     i1mrf49xaCfg@count:	
  5185                           ; 0 bytes @ 0x3
  5186                           
  5187  0073                     i1Mrf49TxByte@byte:	
  5188                           ; 1 bytes @ 0x3
  5189                           
  5190                           
  5191                           ; 1 bytes @ 0x3
  5192  0073                     	ds	1
  5193  0074                     ??i1_mrf49xaCfg:	
  5194                           
  5195                           ; 0 bytes @ 0x4
  5196  0074                     	ds	2
  5197  0076                     i1mrf49xaCfg@regs:	
  5198                           
  5199                           ; 1 bytes @ 0x6
  5200  0076                     	ds	1
  5201  0077                     i1mrf49xaCfg@k:	
  5202                           
  5203                           ; 1 bytes @ 0x7
  5204  0077                     	ds	1
  5205  0078                     ??i1_Mrf49xaModeRx:	
  5206  0078                     ??i1_Mrf49xaServe:	
  5207                           ; 0 bytes @ 0x8
  5208                           
  5209                           
  5210                           ; 0 bytes @ 0x8
  5211  0078                     	ds	1
  5212  0079                     i1Mrf49xaServe@data:	
  5213                           
  5214                           ; 1 bytes @ 0x9
  5215  0079                     	ds	1
  5216  007A                     ??_extInt:	
  5217                           
  5218                           ; 0 bytes @ 0xA
  5219  007A                     	ds	1
  5220                           
  5221                           	psect	cstackBANK0
  5222  0020                     __pcstackBANK0:	
  5223  0020                     ??_SoftI2cNop:	
  5224  0020                     ??_AdcInit:	
  5225                           ; 0 bytes @ 0x0
  5226                           
  5227  0020                     ??_ExtIntInit:	
  5228                           ; 0 bytes @ 0x0
  5229                           
  5230  0020                     ??_Mrf49SpiTx:	
  5231                           ; 0 bytes @ 0x0
  5232                           
  5233  0020                     ??_Mrf49SpiRx:	
  5234                           ; 0 bytes @ 0x0
  5235                           
  5236  0020                     ??_Mrf49xaPacketPending:	
  5237                           ; 0 bytes @ 0x0
  5238                           
  5239  0020                     ??_Mrf49xaFreePacket:	
  5240                           ; 0 bytes @ 0x0
  5241                           
  5242  0020                     ??_Mrf49xaRxPacket:	
  5243                           ; 0 bytes @ 0x0
  5244                           
  5245  0020                     ??_SysInitGpio:	
  5246                           ; 0 bytes @ 0x0
  5247                           
  5248  0020                     ?_Mrf49xaTxPacket:	
  5249                           ; 0 bytes @ 0x0
  5250                           
  5251  0020                     Mrf49SpiTx@byte:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  0020                     Mrf49SpiRx@data:	
  5255                           ; 1 bytes @ 0x0
  5256                           
  5257  0020                     Mrf49xaTxPacket@response:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0020                     Mrf49xaFreePacket@packet:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263                           
  5264                           ; 1 bytes @ 0x0
  5265  0020                     	ds	1
  5266  0021                     ??_SoftI2cStart:	
  5267  0021                     ??_SoftI2cTxByte:	
  5268                           ; 0 bytes @ 0x1
  5269                           
  5270  0021                     ??_SoftI2cStop:	
  5271                           ; 0 bytes @ 0x1
  5272                           
  5273  0021                     ?_Mrf49TxCmd:	
  5274                           ; 0 bytes @ 0x1
  5275                           
  5276  0021                     ??_SoftI2cRepeatedStart:	
  5277                           ; 0 bytes @ 0x1
  5278                           
  5279  0021                     ??_SoftI2cRxByte:	
  5280                           ; 0 bytes @ 0x1
  5281                           
  5282  0021                     ??_Mrf49RxCmd:	
  5283                           ; 0 bytes @ 0x1
  5284                           
  5285  0021                     ??_Mrf49RxSts:	
  5286                           ; 0 bytes @ 0x1
  5287                           
  5288  0021                     Mrf49TxCmd@val:	
  5289                           ; 0 bytes @ 0x1
  5290                           
  5291  0021                     Mrf49RxCmd@cmd:	
  5292                           ; 1 bytes @ 0x1
  5293                           
  5294  0021                     Mrf49xaTxPacket@needAck:	
  5295                           ; 1 bytes @ 0x1
  5296                           
  5297                           
  5298                           ; 1 bytes @ 0x1
  5299  0021                     	ds	1
  5300  0022                     ??_Mrf49TxCmd:	
  5301  0022                     ??_Mrf49xaTxPacket:	
  5302                           ; 0 bytes @ 0x2
  5303                           
  5304  0022                     SoftI2cTxByte@data:	
  5305                           ; 0 bytes @ 0x2
  5306                           
  5307  0022                     Mrf49TxCmd@cmd:	
  5308                           ; 1 bytes @ 0x2
  5309                           
  5310  0022                     Mrf49RxCmd@val:	
  5311                           ; 1 bytes @ 0x2
  5312                           
  5313                           
  5314                           ; 1 bytes @ 0x2
  5315  0022                     	ds	1
  5316  0023                     ?_mrf49xaCfg:	
  5317  0023                     ??_Mrf49RxByte:	
  5318                           ; 0 bytes @ 0x3
  5319                           
  5320  0023                     ??_Mrf49TxByte:	
  5321                           ; 0 bytes @ 0x3
  5322                           
  5323  0023                     SoftI2cTxByte@i:	
  5324                           ; 0 bytes @ 0x3
  5325                           
  5326  0023                     mrf49xaCfg@count:	
  5327                           ; 1 bytes @ 0x3
  5328                           
  5329  0023                     Mrf49TxByte@byte:	
  5330                           ; 1 bytes @ 0x3
  5331                           
  5332  0023                     Mrf49xaTxPacket@crc:	
  5333                           ; 1 bytes @ 0x3
  5334                           
  5335                           
  5336                           ; 1 bytes @ 0x3
  5337  0023                     	ds	1
  5338  0024                     ??_SoftI2cInit:	
  5339  0024                     ??_mrf49xaCfg:	
  5340                           ; 0 bytes @ 0x4
  5341                           
  5342  0024                     ?_eepromTxBytes:	
  5343                           ; 0 bytes @ 0x4
  5344                           
  5345  0024                     SoftI2cRxByte@ack:	
  5346                           ; 0 bytes @ 0x4
  5347                           
  5348  0024                     Mrf49xaTxPacket@i:	
  5349                           ; 1 bytes @ 0x4
  5350                           
  5351  0024                     eepromTxBytes@address:	
  5352                           ; 1 bytes @ 0x4
  5353                           
  5354                           
  5355                           ; 2 bytes @ 0x4
  5356  0024                     	ds	1
  5357  0025                     SoftI2cRxByte@data:	
  5358  0025                     Mrf49xaTxPacket@packet:	
  5359                           ; 1 bytes @ 0x5
  5360                           
  5361                           
  5362                           ; 1 bytes @ 0x5
  5363  0025                     	ds	1
  5364  0026                     ??_Mrf49xaTxAck:	
  5365  0026                     SoftI2cRxByte@i:	
  5366                           ; 0 bytes @ 0x6
  5367                           
  5368  0026                     mrf49xaCfg@regs:	
  5369                           ; 1 bytes @ 0x6
  5370                           
  5371  0026                     Mrf49xaTxAck@packet:	
  5372                           ; 1 bytes @ 0x6
  5373                           
  5374  0026                     eepromTxBytes@data:	
  5375                           ; 1 bytes @ 0x6
  5376                           
  5377                           
  5378                           ; 1 bytes @ 0x6
  5379  0026                     	ds	1
  5380  0027                     ?_eepromRxBytes:	
  5381  0027                     mrf49xaCfg@k:	
  5382                           ; 0 bytes @ 0x7
  5383                           
  5384  0027                     eepromTxBytes@size:	
  5385                           ; 1 bytes @ 0x7
  5386                           
  5387  0027                     eepromRxBytes@address:	
  5388                           ; 1 bytes @ 0x7
  5389                           
  5390                           
  5391                           ; 2 bytes @ 0x7
  5392  0027                     	ds	1
  5393  0028                     ??_Mrf49xaServe:	
  5394  0028                     ??_Mrf49xaModeRx:	
  5395                           ; 0 bytes @ 0x8
  5396                           
  5397  0028                     ??_Mrf49xaModeTx:	
  5398                           ; 0 bytes @ 0x8
  5399                           
  5400  0028                     ??_eepromTxBytes:	
  5401                           ; 0 bytes @ 0x8
  5402                           
  5403                           
  5404                           ; 0 bytes @ 0x8
  5405  0028                     	ds	1
  5406  0029                     Mrf49xaServe@data:	
  5407  0029                     eepromRxBytes@data:	
  5408                           ; 1 bytes @ 0x9
  5409                           
  5410                           
  5411                           ; 1 bytes @ 0x9
  5412  0029                     	ds	1
  5413  002A                     ??_Mrf49xaInit:	
  5414  002A                     eepromRxBytes@size:	
  5415                           ; 0 bytes @ 0xA
  5416                           
  5417                           
  5418                           ; 1 bytes @ 0xA
  5419  002A                     	ds	1
  5420  002B                     ??_eepromRxBytes:	
  5421  002B                     ??_handleFwCmd:	
  5422                           ; 0 bytes @ 0xB
  5423                           
  5424  002B                     ??_handleFwWrite:	
  5425                           ; 0 bytes @ 0xB
  5426                           
  5427  002B                     ??_handleFwRead:	
  5428                           ; 0 bytes @ 0xB
  5429                           
  5430  002B                     handleFwCmd@packet:	
  5431                           ; 0 bytes @ 0xB
  5432                           
  5433  002B                     handleFwRead@address:	
  5434                           ; 1 bytes @ 0xB
  5435                           
  5436                           
  5437                           ; 2 bytes @ 0xB
  5438  002B                     	ds	2
  5439  002D                     handleFwRead@packet:	
  5440                           
  5441                           ; 1 bytes @ 0xD
  5442  002D                     	ds	1
  5443  002E                     handleFwWrite@packetData:	
  5444                           
  5445                           ; 1 bytes @ 0xE
  5446  002E                     	ds	1
  5447  002F                     handleFwWrite@i:	
  5448                           
  5449                           ; 1 bytes @ 0xF
  5450  002F                     	ds	1
  5451  0030                     handleFwWrite@address:	
  5452                           
  5453                           ; 2 bytes @ 0x10
  5454  0030                     	ds	2
  5455  0032                     handleFwWrite@packet:	
  5456                           
  5457                           ; 1 bytes @ 0x12
  5458  0032                     	ds	1
  5459  0033                     ??_HandlePacket:	
  5460                           
  5461                           ; 0 bytes @ 0x13
  5462  0033                     	ds	1
  5463  0034                     HandlePacket@sendAck:	
  5464                           
  5465                           ; 1 bytes @ 0x14
  5466  0034                     	ds	1
  5467  0035                     HandlePacket@sendMsg:	
  5468                           
  5469                           ; 1 bytes @ 0x15
  5470  0035                     	ds	1
  5471  0036                     HandlePacket@packet:	
  5472                           
  5473                           ; 1 bytes @ 0x16
  5474  0036                     	ds	1
  5475  0037                     ??_Mrf49xaTick:	
  5476                           
  5477                           ; 0 bytes @ 0x17
  5478  0037                     	ds	2
  5479  0039                     Mrf49xaTick@timeout:	
  5480                           
  5481                           ; 1 bytes @ 0x19
  5482  0039                     	ds	1
  5483  003A                     Mrf49xaTick@packet:	
  5484                           
  5485                           ; 1 bytes @ 0x1A
  5486  003A                     	ds	1
  5487  003B                     ??_main:	
  5488                           
  5489                           	psect	text2
  5490  0591                     __ptext2:	
  5491 ;; *************** function _SoftI2cInit *****************
  5492 ;; Defined at:
  5493 ;;		line 12 in file "../../../src/bsp/softI2c.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;		None
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;		None               void
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0, pclath, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : 17F/2
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5507 ;;      Params:         0       0       0       0
  5508 ;;      Locals:         0       0       0       0
  5509 ;;      Temps:          0       0       0       0
  5510 ;;      Totals:         0       0       0       0
  5511 ;;Total ram usage:        0 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    8
  5514 ;; This function calls:
  5515 ;;		_SoftI2cStart
  5516 ;;		_SoftI2cStop
  5517 ;;		_SoftI2cTxByte
  5518 ;; This function is called by:
  5519 ;;		_main
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           
  5524                           ;psect for function _SoftI2cInit
  5525  0591                     _SoftI2cInit:	
  5526                           
  5527                           ;softI2c.c: 15: LATBbits.LATB6 = 1;
  5528                           
  5529                           ;incstack = 0
  5530                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  5531  0591  170D               	bsf	13,6	;volatile
  5532                           
  5533                           ;softI2c.c: 16: LATBbits.LATB4 = 1;
  5534  0592  160D               	bsf	13,4	;volatile
  5535                           
  5536                           ;softI2c.c: 19: TRISBbits.TRISB6 = 0;
  5537  0593  0021               	movlb	1	; select bank1
  5538  0594  130D               	bcf	13,6	;volatile
  5539                           
  5540                           ;softI2c.c: 20: TRISBbits.TRISB4 = 0;
  5541  0595  120D               	bcf	13,4	;volatile
  5542                           
  5543                           ;softI2c.c: 29: SoftI2cStart();
  5544  0596  26CE  3185         	fcall	_SoftI2cStart
  5545                           
  5546                           ;softI2c.c: 30: SoftI2cTxByte(0x00);
  5547  0598  3000               	movlw	0
  5548  0599  264D  3185         	fcall	_SoftI2cTxByte
  5549                           
  5550                           ;softI2c.c: 31: SoftI2cStop();
  5551  059B  2DE9               	ljmp	l1928
  5552  059C                     __end_of_SoftI2cInit:	
  5553  059C                     __ptext8:	
  5554 ;; *************** function _handleFwWrite *****************
  5555 ;; Defined at:
  5556 ;;		line 66 in file "../../../src/rfstack/client.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5559 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  packet          1   18[BANK0 ] PTR struct rfTrcvPacket_
  5562 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5563 ;;  i               1   15[BANK0 ] unsigned char 
  5564 ;;  address         2   16[BANK0 ] unsigned int 
  5565 ;;  packetData      1   14[BANK0 ] PTR unsigned int 
  5566 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), NULL(0), 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;		None               void
  5569 ;; Registers used:
  5570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 1F/0
  5573 ;;		On exit  : 1F/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5576 ;;      Params:         0       0       0       0
  5577 ;;      Locals:         0       5       0       0
  5578 ;;      Temps:          0       3       0       0
  5579 ;;      Totals:         0       8       0       0
  5580 ;;Total ram usage:        8 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    9
  5583 ;; This function calls:
  5584 ;;		_eepromRxBytes
  5585 ;;		_eepromTxBytes
  5586 ;; This function is called by:
  5587 ;;		_HandlePacket
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           
  5592                           ;psect for function _handleFwWrite
  5593  059C                     _handleFwWrite:	
  5594                           
  5595                           ;incstack = 0
  5596                           ; Regs used in _handleFwWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5597                           ;handleFwWrite@packet stored from wreg
  5598  059C  00B2               	movwf	handleFwWrite@packet
  5599                           
  5600                           ;client.c: 68: UI16_t address = (packet->packet.data[2] << 8) | packet->packet.data[3];
  5601  059D  3E09               	addlw	9
  5602  059E  0086               	movwf	6
  5603  059F  0187               	clrf	7
  5604  05A0  0832               	movf	handleFwWrite@packet,w
  5605  05A1  3E08               	addlw	8
  5606  05A2  0084               	movwf	4
  5607  05A3  0185               	clrf	5
  5608  05A4  0800               	movf	0,w
  5609  05A5  00B1               	movwf	handleFwWrite@address+1
  5610  05A6  0801               	movf	1,w
  5611  05A7  00B0               	movwf	handleFwWrite@address
  5612                           
  5613                           ;client.c: 69: UI16_t* packetData = (UI16_t*) &(packet->packet.data[8]);
  5614  05A8  0832               	movf	handleFwWrite@packet,w
  5615  05A9  3E0E               	addlw	14
  5616  05AA  00AE               	movwf	handleFwWrite@packetData
  5617                           
  5618                           ;client.c: 72: eepromTxBytes(address, packet->packet.data+8, 8);
  5619  05AB  0831               	movf	handleFwWrite@address+1,w
  5620  05AC  00A5               	movwf	eepromTxBytes@address+1
  5621  05AD  0830               	movf	handleFwWrite@address,w
  5622  05AE  00A4               	movwf	eepromTxBytes@address
  5623  05AF  0832               	movf	handleFwWrite@packet,w
  5624  05B0  3E0E               	addlw	14
  5625  05B1  00A6               	movwf	eepromTxBytes@data
  5626  05B2  3008               	movlw	8
  5627  05B3  00A7               	movwf	eepromTxBytes@size
  5628  05B4  260D  3185         	fcall	_eepromTxBytes
  5629                           
  5630                           ;client.c: 74: eepromRxBytes(address, packet->packet.data+8, 8);
  5631  05B6  0020               	movlb	0	; select bank0
  5632  05B7  0831               	movf	handleFwWrite@address+1,w
  5633  05B8  00A8               	movwf	eepromRxBytes@address+1
  5634  05B9  0830               	movf	handleFwWrite@address,w
  5635  05BA  00A7               	movwf	eepromRxBytes@address
  5636  05BB  0832               	movf	handleFwWrite@packet,w
  5637  05BC  3E0E               	addlw	14
  5638  05BD  00A9               	movwf	eepromRxBytes@data
  5639  05BE  3008               	movlw	8
  5640  05BF  00AA               	movwf	eepromRxBytes@size
  5641  05C0  2629  3185         	fcall	_eepromRxBytes
  5642                           
  5643                           ;client.c: 77: address = 0xCAFE;
  5644  05C2  30FE               	movlw	254
  5645  05C3  0020               	movlb	0	; select bank0
  5646  05C4  00B0               	movwf	handleFwWrite@address
  5647  05C5  30CA               	movlw	202
  5648  05C6  00B1               	movwf	handleFwWrite@address+1
  5649                           
  5650                           ;client.c: 79: for (uint8_t i = 0; i < 4; i++)
  5651  05C7  01AF               	clrf	handleFwWrite@i
  5652  05C8                     l2274:	
  5653                           
  5654                           ;client.c: 80: {
  5655                           ;client.c: 81: address = address ^ packetData[i];
  5656  05C8  352F               	lslf	handleFwWrite@i,w
  5657  05C9  072E               	addwf	handleFwWrite@packetData,w
  5658  05CA  00AB               	movwf	??_handleFwWrite
  5659  05CB  0086               	movwf	6
  5660  05CC  0187               	clrf	7
  5661  05CD  3F40               	moviw [0]fsr1
  5662  05CE  00AC               	movwf	??_handleFwWrite+1
  5663  05CF  3F41               	moviw [1]fsr1
  5664  05D0  00AD               	movwf	??_handleFwWrite+2
  5665  05D1  082C               	movf	??_handleFwWrite+1,w
  5666  05D2  06B0               	xorwf	handleFwWrite@address,f
  5667  05D3  082D               	movf	??_handleFwWrite+2,w
  5668  05D4  06B1               	xorwf	handleFwWrite@address+1,f
  5669  05D5  3004               	movlw	4
  5670  05D6  0AAF               	incf	handleFwWrite@i,f
  5671  05D7  022F               	subwf	handleFwWrite@i,w
  5672  05D8  1C03               	skipc
  5673  05D9  2DC8               	goto	l2274
  5674                           
  5675                           ;client.c: 82: }
  5676                           ;client.c: 84: packet->packet.data[8] = address >> 8;
  5677  05DA  0832               	movf	handleFwWrite@packet,w
  5678  05DB  3E0E               	addlw	14
  5679  05DC  0086               	movwf	6
  5680  05DD  0831               	movf	handleFwWrite@address+1,w
  5681  05DE  0081               	movwf	1
  5682                           
  5683                           ;client.c: 85: packet->packet.data[9] = address & 0xFF;
  5684  05DF  0832               	movf	handleFwWrite@packet,w
  5685  05E0  3E0F               	addlw	15
  5686  05E1  0086               	movwf	6
  5687  05E2  0830               	movf	handleFwWrite@address,w
  5688  05E3  0081               	movwf	1
  5689                           
  5690                           ;client.c: 87: packet->packet.size = 10;
  5691  05E4  0A32               	incf	handleFwWrite@packet,w
  5692  05E5  0086               	movwf	6
  5693  05E6  300A               	movlw	10
  5694  05E7  0081               	movwf	1
  5695  05E8  0008               	return
  5696  05E9                     __end_of_handleFwWrite:	
  5697  05E9                     __ptext14:	
  5698 ;; *************** function _SoftI2cStop *****************
  5699 ;; Defined at:
  5700 ;;		line 70 in file "../../../src/bsp/softI2c.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;		None
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;		None
  5705 ;; Return value:  Size  Location     Type
  5706 ;;		None               void
  5707 ;; Registers used:
  5708 ;;		wreg, status,2, status,0, pclath, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/1
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5714 ;;      Params:         0       0       0       0
  5715 ;;      Locals:         0       0       0       0
  5716 ;;      Temps:          0       0       0       0
  5717 ;;      Totals:         0       0       0       0
  5718 ;;Total ram usage:        0 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    7
  5721 ;; This function calls:
  5722 ;;		_SoftI2cNop
  5723 ;; This function is called by:
  5724 ;;		_SoftI2cInit
  5725 ;;		_eepromRxBytes
  5726 ;;		_eepromTxBytes
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           
  5731                           ;psect for function _SoftI2cStop
  5732  05E9                     _SoftI2cStop:	
  5733  05E9                     l1928:	
  5734                           ;incstack = 0
  5735                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5736                           
  5737                           
  5738                           ;softI2c.c: 72: TRISBbits.TRISB4 = 0;
  5739  05E9  0021               	movlb	1	; select bank1
  5740  05EA  120D               	bcf	13,4	;volatile
  5741                           
  5742                           ;softI2c.c: 74: LATBbits.LATB4 = 0;
  5743  05EB  0022               	movlb	2	; select bank2
  5744  05EC  120D               	bcf	13,4	;volatile
  5745                           
  5746                           ;softI2c.c: 75: SoftI2cNop();
  5747  05ED  26C8  3185         	fcall	_SoftI2cNop
  5748                           
  5749                           ;softI2c.c: 77: LATBbits.LATB6 = 1;
  5750  05EF  0022               	movlb	2	; select bank2
  5751  05F0  170D               	bsf	13,6	;volatile
  5752                           
  5753                           ;softI2c.c: 78: SoftI2cNop();
  5754  05F1  26C8  3185         	fcall	_SoftI2cNop
  5755                           
  5756                           ;softI2c.c: 79: LATBbits.LATB4 = 1;
  5757  05F3  0022               	movlb	2	; select bank2
  5758  05F4  160D               	bsf	13,4	;volatile
  5759                           
  5760                           ;softI2c.c: 80: SoftI2cNop();
  5761  05F5  26C8  3185         	fcall	_SoftI2cNop
  5762                           
  5763                           ;softI2c.c: 81: SoftI2cNop();
  5764  05F7  2EC8               	ljmp	l1846
  5765  05F8                     __end_of_SoftI2cStop:	
  5766  05F8                     __ptext17:	
  5767 ;; *************** function _SoftI2cRepeatedStart *****************
  5768 ;; Defined at:
  5769 ;;		line 49 in file "../../../src/bsp/softI2c.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;		None
  5774 ;; Return value:  Size  Location     Type
  5775 ;;		None               void
  5776 ;; Registers used:
  5777 ;;		wreg, status,2, status,0, pclath, cstack
  5778 ;; Tracked objects:
  5779 ;;		On entry : 0/0
  5780 ;;		On exit  : 0/0
  5781 ;;		Unchanged: 0/0
  5782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5783 ;;      Params:         0       0       0       0
  5784 ;;      Locals:         0       0       0       0
  5785 ;;      Temps:          0       0       0       0
  5786 ;;      Totals:         0       0       0       0
  5787 ;;Total ram usage:        0 bytes
  5788 ;; Hardware stack levels used:    1
  5789 ;; Hardware stack levels required when called:    7
  5790 ;; This function calls:
  5791 ;;		_SoftI2cNop
  5792 ;; This function is called by:
  5793 ;;		_eepromRxBytes
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           
  5798                           ;psect for function _SoftI2cRepeatedStart
  5799  05F8                     _SoftI2cRepeatedStart:	
  5800                           
  5801                           ;softI2c.c: 51: TRISBbits.TRISB4 = 0;
  5802                           
  5803                           ;incstack = 0
  5804                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5805  05F8  0021               	movlb	1	; select bank1
  5806  05F9  120D               	bcf	13,4	;volatile
  5807                           
  5808                           ;softI2c.c: 53: LATBbits.LATB6 = 0;
  5809  05FA  0022               	movlb	2	; select bank2
  5810  05FB  130D               	bcf	13,6	;volatile
  5811                           
  5812                           ;softI2c.c: 54: SoftI2cNop();
  5813  05FC  26C8  3185         	fcall	_SoftI2cNop
  5814                           
  5815                           ;softI2c.c: 56: LATBbits.LATB4 = 1;
  5816  05FE  0022               	movlb	2	; select bank2
  5817  05FF  160D               	bsf	13,4	;volatile
  5818                           
  5819                           ;softI2c.c: 57: SoftI2cNop();
  5820  0600  26C8  3185         	fcall	_SoftI2cNop
  5821                           
  5822                           ;softI2c.c: 59: LATBbits.LATB6 = 1;
  5823  0602  0022               	movlb	2	; select bank2
  5824  0603  170D               	bsf	13,6	;volatile
  5825                           
  5826                           ;softI2c.c: 60: SoftI2cNop();
  5827  0604  26C8  3185         	fcall	_SoftI2cNop
  5828                           
  5829                           ;softI2c.c: 62: LATBbits.LATB4 = 0;
  5830  0606  0022               	movlb	2	; select bank2
  5831  0607  120D               	bcf	13,4	;volatile
  5832                           
  5833                           ;softI2c.c: 63: SoftI2cNop();
  5834  0608  26C8  3185         	fcall	_SoftI2cNop
  5835                           
  5836                           ;softI2c.c: 65: LATBbits.LATB6 = 0;
  5837  060A  0022               	movlb	2	; select bank2
  5838  060B  130D               	bcf	13,6	;volatile
  5839                           
  5840                           ;softI2c.c: 66: SoftI2cNop();
  5841  060C  2EC8               	ljmp	l1846
  5842  060D                     __end_of_SoftI2cRepeatedStart:	
  5843  060D                     __ptext9:	
  5844 ;; *************** function _eepromTxBytes *****************
  5845 ;; Defined at:
  5846 ;;		line 25 in file "../../../src/devices/24aa64.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  address         2    4[BANK0 ] unsigned int 
  5849 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5850 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), eepromTxByte@byte(1), 
  5851 ;;		 -> NULL(0), 
  5852 ;;  size            1    7[BANK0 ] unsigned char 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;		None               void
  5857 ;; Registers used:
  5858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 1F/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5864 ;;      Params:         0       4       0       0
  5865 ;;      Locals:         0       0       0       0
  5866 ;;      Temps:          0       0       0       0
  5867 ;;      Totals:         0       4       0       0
  5868 ;;Total ram usage:        4 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    8
  5871 ;; This function calls:
  5872 ;;		_SoftI2cStart
  5873 ;;		_SoftI2cStop
  5874 ;;		_SoftI2cTxByte
  5875 ;; This function is called by:
  5876 ;;		_handleFwWrite
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           
  5881                           ;psect for function _eepromTxBytes
  5882  060D                     _eepromTxBytes:	
  5883                           
  5884                           ;24aa64.c: 28: SoftI2cStart();
  5885                           
  5886                           ;incstack = 0
  5887                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5888  060D  26CE  3185         	fcall	_SoftI2cStart
  5889                           
  5890                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  5891  060F  30A0               	movlw	160
  5892  0610  264D  3185         	fcall	_SoftI2cTxByte
  5893                           
  5894                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  5895  0612  0020               	movlb	0	; select bank0
  5896  0613  0825               	movf	eepromTxBytes@address+1,w
  5897  0614  264D  3185         	fcall	_SoftI2cTxByte
  5898                           
  5899                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  5900  0616  0020               	movlb	0	; select bank0
  5901  0617  0824               	movf	eepromTxBytes@address,w
  5902  0618  264D  3185         	fcall	_SoftI2cTxByte
  5903  061A                     l2170:	
  5904                           ;24aa64.c: 33: while (size != 0)
  5905                           
  5906  061A  0020               	movlb	0	; select bank0
  5907  061B  08A7               	movf	eepromTxBytes@size,f
  5908  061C  1903               	btfsc	3,2
  5909  061D  2E28               	goto	l2172
  5910                           
  5911                           ;24aa64.c: 34: {
  5912                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  5913  061E  0826               	movf	eepromTxBytes@data,w
  5914  061F  0086               	movwf	6
  5915  0620  0187               	clrf	7
  5916  0621  0801               	movf	1,w
  5917  0622  264D  3185         	fcall	_SoftI2cTxByte
  5918                           
  5919                           ;24aa64.c: 37: data++;
  5920  0624  0020               	movlb	0	; select bank0
  5921  0625  0AA6               	incf	eepromTxBytes@data,f
  5922                           
  5923                           ;24aa64.c: 38: size--;
  5924  0626  03A7               	decf	eepromTxBytes@size,f
  5925  0627  2E1A               	goto	l2170
  5926  0628                     l2172:	
  5927                           
  5928                           ;24aa64.c: 39: }
  5929                           ;24aa64.c: 40: SoftI2cStop();
  5930  0628  2DE9               	ljmp	l1928
  5931  0629                     __end_of_eepromTxBytes:	
  5932  0629                     __ptext12:	
  5933 ;; *************** function _eepromRxBytes *****************
  5934 ;; Defined at:
  5935 ;;		line 4 in file "../../../src/devices/24aa64.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  address         2    7[BANK0 ] unsigned int 
  5938 ;;  data            1    9[BANK0 ] PTR unsigned char 
  5939 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwRead@packet..(21), handleFwWrite@packet..(21)
      +, 
  5940 ;;		 -> handleFwCmd@packet..(21), eepromRxByte@dat(1), NULL(0), 
  5941 ;;  size            1   10[BANK0 ] unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;		None               void
  5946 ;; Registers used:
  5947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 1F/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5953 ;;      Params:         0       4       0       0
  5954 ;;      Locals:         0       0       0       0
  5955 ;;      Temps:          0       0       0       0
  5956 ;;      Totals:         0       4       0       0
  5957 ;;Total ram usage:        4 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    8
  5960 ;; This function calls:
  5961 ;;		_SoftI2cRepeatedStart
  5962 ;;		_SoftI2cRxByte
  5963 ;;		_SoftI2cStart
  5964 ;;		_SoftI2cStop
  5965 ;;		_SoftI2cTxByte
  5966 ;; This function is called by:
  5967 ;;		_handleFwCmd
  5968 ;;		_handleFwWrite
  5969 ;;		_handleFwRead
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           
  5974                           ;psect for function _eepromRxBytes
  5975  0629                     _eepromRxBytes:	
  5976  0629                     l2150:	
  5977                           ;incstack = 0
  5978                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5979                           
  5980                           
  5981                           ;24aa64.c: 7: SoftI2cStart();
  5982  0629  26CE  3185         	fcall	_SoftI2cStart
  5983                           
  5984                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  5985  062B  30A0               	movlw	160
  5986  062C  264D  3185         	fcall	_SoftI2cTxByte
  5987                           
  5988                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  5989  062E  0020               	movlb	0	; select bank0
  5990  062F  0828               	movf	eepromRxBytes@address+1,w
  5991  0630  264D  3185         	fcall	_SoftI2cTxByte
  5992                           
  5993                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  5994  0632  0020               	movlb	0	; select bank0
  5995  0633  0827               	movf	eepromRxBytes@address,w
  5996  0634  264D  3185         	fcall	_SoftI2cTxByte
  5997                           
  5998                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  5999  0636  25F8  3185         	fcall	_SoftI2cRepeatedStart
  6000                           
  6001                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  6002  0638  30A1               	movlw	161
  6003  0639  264D  3185         	fcall	_SoftI2cTxByte
  6004  063B                     l2158:	
  6005                           ;24aa64.c: 15: while (size != 0)
  6006                           
  6007  063B  0020               	movlb	0	; select bank0
  6008  063C  08AA               	movf	eepromRxBytes@size,f
  6009  063D  1903               	btfsc	3,2
  6010  063E  2E4C               	goto	l2160
  6011                           
  6012                           ;24aa64.c: 16: {
  6013                           ;24aa64.c: 17: size--;
  6014  063F  03AA               	decf	eepromRxBytes@size,f
  6015                           
  6016                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  6017  0640  0829               	movf	eepromRxBytes@data,w
  6018  0641  0086               	movwf	6
  6019  0642  3000               	movlw	0
  6020  0643  0187               	clrf	7
  6021  0644  08AA               	movf	eepromRxBytes@size,f
  6022  0645  1D03               	skipz
  6023  0646  3001               	movlw	1
  6024  0647  267E  3185         	fcall	_SoftI2cRxByte
  6025  0649  0081               	movwf	1
  6026                           
  6027                           ;24aa64.c: 21: data++;
  6028  064A  0AA9               	incf	eepromRxBytes@data,f
  6029  064B  2E3B               	goto	l2158
  6030  064C                     l2160:	
  6031                           
  6032                           ;24aa64.c: 22: }
  6033                           ;24aa64.c: 23: SoftI2cStop();
  6034  064C  2DE9               	ljmp	l1928
  6035  064D                     __end_of_eepromRxBytes:	
  6036  064D                     __ptext13:	
  6037 ;; *************** function _SoftI2cTxByte *****************
  6038 ;; Defined at:
  6039 ;;		line 84 in file "../../../src/bsp/softI2c.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  data            1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  data            1    2[BANK0 ] unsigned char 
  6044 ;;  i               1    3[BANK0 ] unsigned char 
  6045 ;;  ack             1    0        unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      unsigned char 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/1
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6055 ;;      Params:         0       0       0       0
  6056 ;;      Locals:         0       3       0       0
  6057 ;;      Temps:          0       0       0       0
  6058 ;;      Totals:         0       3       0       0
  6059 ;;Total ram usage:        3 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    7
  6062 ;; This function calls:
  6063 ;;		_SoftI2cNop
  6064 ;; This function is called by:
  6065 ;;		_SoftI2cInit
  6066 ;;		_eepromRxBytes
  6067 ;;		_eepromTxBytes
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _SoftI2cTxByte
  6073  064D                     _SoftI2cTxByte:	
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  6077                           ;SoftI2cTxByte@data stored from wreg
  6078  064D  0020               	movlb	0	; select bank0
  6079  064E  00A2               	movwf	SoftI2cTxByte@data
  6080                           
  6081                           ;softI2c.c: 86: UI08_t i;
  6082                           ;softI2c.c: 88: for(i = 0; i < 8; i++)
  6083  064F  01A3               	clrf	SoftI2cTxByte@i
  6084  0650                     l32:	
  6085                           
  6086                           ;softI2c.c: 89: {
  6087                           ;softI2c.c: 90: LATBbits.LATB6 = 0;
  6088  0650  0022               	movlb	2	; select bank2
  6089  0651  130D               	bcf	13,6	;volatile
  6090                           
  6091                           ;softI2c.c: 91: SoftI2cNop();
  6092  0652  26C8  3185         	fcall	_SoftI2cNop
  6093                           
  6094                           ;softI2c.c: 93: if(data & 0x80)
  6095  0654  0020               	movlb	0	; select bank0
  6096  0655  1FA2               	btfss	SoftI2cTxByte@data,7
  6097  0656  2E5A               	goto	l34
  6098                           
  6099                           ;softI2c.c: 94: LATBbits.LATB4 = 1;
  6100  0657  0022               	movlb	2	; select bank2
  6101  0658  160D               	bsf	13,4	;volatile
  6102  0659  2E5C               	goto	l35
  6103  065A                     l34:	
  6104                           
  6105                           ;softI2c.c: 95: else
  6106                           ;softI2c.c: 96: LATBbits.LATB4 = 0;
  6107  065A  0022               	movlb	2	; select bank2
  6108  065B  120D               	bcf	13,4	;volatile
  6109  065C                     l35:	
  6110                           
  6111                           ;softI2c.c: 97: TRISBbits.TRISB4 = 0;
  6112  065C  0021               	movlb	1	; select bank1
  6113  065D  120D               	bcf	13,4	;volatile
  6114                           
  6115                           ;softI2c.c: 99: SoftI2cNop();
  6116  065E  26C8  3185         	fcall	_SoftI2cNop
  6117                           
  6118                           ;softI2c.c: 101: LATBbits.LATB6 = 1;
  6119  0660  0022               	movlb	2	; select bank2
  6120  0661  170D               	bsf	13,6	;volatile
  6121                           
  6122                           ;softI2c.c: 102: SoftI2cNop();
  6123  0662  26C8  3185         	fcall	_SoftI2cNop
  6124                           
  6125                           ;softI2c.c: 106: data = data << 1;
  6126  0664  0020               	movlb	0	; select bank0
  6127  0665  3008               	movlw	8
  6128  0666  35A2               	lslf	SoftI2cTxByte@data,f
  6129  0667  0AA3               	incf	SoftI2cTxByte@i,f
  6130  0668  0223               	subwf	SoftI2cTxByte@i,w
  6131  0669  1C03               	skipc
  6132  066A  2E50               	goto	l32
  6133                           
  6134                           ;softI2c.c: 107: }
  6135                           ;softI2c.c: 110: LATBbits.LATB6 = 0;
  6136  066B  0022               	movlb	2	; select bank2
  6137  066C  130D               	bcf	13,6	;volatile
  6138                           
  6139                           ;softI2c.c: 111: SoftI2cNop();
  6140  066D  26C8  3185         	fcall	_SoftI2cNop
  6141                           
  6142                           ;softI2c.c: 114: TRISBbits.TRISB4 = 1;
  6143  066F  0021               	movlb	1	; select bank1
  6144  0670  160D               	bsf	13,4	;volatile
  6145                           
  6146                           ;softI2c.c: 116: LATBbits.LATB6 = 1;
  6147  0671  0022               	movlb	2	; select bank2
  6148  0672  170D               	bsf	13,6	;volatile
  6149                           
  6150                           ;softI2c.c: 117: SoftI2cNop();
  6151  0673  26C8  3185         	fcall	_SoftI2cNop
  6152  0675  0020               	movlb	0	; select bank0
  6153  0676  080D               	movf	13,w	;volatile
  6154                           
  6155                           ;softI2c.c: 121: LATBbits.LATB6 = 0;
  6156  0677  0022               	movlb	2	; select bank2
  6157  0678  130D               	bcf	13,6	;volatile
  6158                           
  6159                           ;softI2c.c: 122: SoftI2cNop();
  6160  0679  26C8  3185         	fcall	_SoftI2cNop
  6161                           
  6162                           ;softI2c.c: 123: SoftI2cNop();
  6163  067B  26C8  3185         	fcall	_SoftI2cNop
  6164                           
  6165                           ;softI2c.c: 124: SoftI2cNop();
  6166  067D  2EC8               	ljmp	l1846
  6167  067E                     __end_of_SoftI2cTxByte:	
  6168  067E                     __ptext16:	
  6169 ;; *************** function _SoftI2cRxByte *****************
  6170 ;; Defined at:
  6171 ;;		line 130 in file "../../../src/bsp/softI2c.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  ack             1    wreg     unsigned char 
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  ack             1    4[BANK0 ] unsigned char 
  6176 ;;  i               1    6[BANK0 ] unsigned char 
  6177 ;;  data            1    5[BANK0 ] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      unsigned char 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0, pclath, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 1F/0
  6184 ;;		On exit  : 1F/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6187 ;;      Params:         0       0       0       0
  6188 ;;      Locals:         0       3       0       0
  6189 ;;      Temps:          0       3       0       0
  6190 ;;      Totals:         0       6       0       0
  6191 ;;Total ram usage:        6 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    7
  6194 ;; This function calls:
  6195 ;;		_SoftI2cNop
  6196 ;; This function is called by:
  6197 ;;		_eepromRxBytes
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           
  6202                           ;psect for function _SoftI2cRxByte
  6203  067E                     _SoftI2cRxByte:	
  6204                           
  6205                           ;incstack = 0
  6206                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  6207                           ;SoftI2cRxByte@ack stored from wreg
  6208  067E  00A4               	movwf	SoftI2cRxByte@ack
  6209                           
  6210                           ;softI2c.c: 132: UI08_t data=0x00;
  6211  067F  01A5               	clrf	SoftI2cRxByte@data
  6212                           
  6213                           ;softI2c.c: 133: UI08_t i;
  6214                           ;softI2c.c: 135: LATBbits.LATB6 = 0;
  6215  0680  0022               	movlb	2	; select bank2
  6216  0681  130D               	bcf	13,6	;volatile
  6217                           
  6218                           ;softI2c.c: 136: SoftI2cNop();
  6219  0682  26C8  3185         	fcall	_SoftI2cNop
  6220                           
  6221                           ;softI2c.c: 137: TRISBbits.TRISB4 = 1;
  6222  0684  0021               	movlb	1	; select bank1
  6223  0685  160D               	bsf	13,4	;volatile
  6224                           
  6225                           ;softI2c.c: 138: LATBbits.LATB4 = 1;
  6226  0686  0022               	movlb	2	; select bank2
  6227  0687  160D               	bsf	13,4	;volatile
  6228                           
  6229                           ;softI2c.c: 140: for(i = 0; i < 8; i++)
  6230  0688  0020               	movlb	0	; select bank0
  6231  0689  01A6               	clrf	SoftI2cRxByte@i
  6232  068A                     l39:	
  6233                           
  6234                           ;softI2c.c: 141: {
  6235                           ;softI2c.c: 142: LATBbits.LATB6 = 0;
  6236  068A  0022               	movlb	2	; select bank2
  6237  068B  130D               	bcf	13,6	;volatile
  6238                           
  6239                           ;softI2c.c: 143: SoftI2cNop();
  6240  068C  26C8  3185         	fcall	_SoftI2cNop
  6241                           
  6242                           ;softI2c.c: 144: LATBbits.LATB6 = 1;
  6243  068E  0022               	movlb	2	; select bank2
  6244  068F  170D               	bsf	13,6	;volatile
  6245                           
  6246                           ;softI2c.c: 145: SoftI2cNop();
  6247  0690  26C8  3185         	fcall	_SoftI2cNop
  6248                           
  6249                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  6250  0692  0020               	movlb	0	; select bank0
  6251  0693  1E0D               	btfss	13,4	;volatile
  6252  0694  2EA4               	goto	l1972
  6253                           
  6254                           ;softI2c.c: 150: data |= (0x80 >> i);
  6255  0695  0A26               	incf	SoftI2cRxByte@i,w
  6256  0696  00A1               	movwf	??_SoftI2cRxByte
  6257  0697  3080               	movlw	128
  6258  0698  00A2               	movwf	??_SoftI2cRxByte+1
  6259  0699  3000               	movlw	0
  6260  069A  00A3               	movwf	??_SoftI2cRxByte+2
  6261  069B  2E9F               	goto	u1094
  6262  069C                     u1095:	
  6263  069C  0D23               	rlf	??_SoftI2cRxByte+2,w
  6264  069D  0CA3               	rrf	??_SoftI2cRxByte+2,f
  6265  069E  0CA2               	rrf	??_SoftI2cRxByte+1,f
  6266  069F                     u1094:	
  6267  069F  0BA1               	decfsz	??_SoftI2cRxByte,f
  6268  06A0  2E9C               	goto	u1095
  6269  06A1  0020               	movlb	0	; select bank0
  6270  06A2  0822               	movf	??_SoftI2cRxByte+1,w
  6271  06A3  04A5               	iorwf	SoftI2cRxByte@data,f
  6272  06A4                     l1972:	
  6273  06A4  3008               	movlw	8
  6274  06A5  0AA6               	incf	SoftI2cRxByte@i,f
  6275  06A6  0226               	subwf	SoftI2cRxByte@i,w
  6276  06A7  1C03               	skipc
  6277  06A8  2E8A               	goto	l39
  6278                           
  6279                           ;softI2c.c: 152: }
  6280                           ;softI2c.c: 155: LATBbits.LATB6 = 0;
  6281  06A9  0022               	movlb	2	; select bank2
  6282  06AA  130D               	bcf	13,6	;volatile
  6283                           
  6284                           ;softI2c.c: 156: SoftI2cNop();
  6285  06AB  26C8  3185         	fcall	_SoftI2cNop
  6286                           
  6287                           ;softI2c.c: 158: TRISBbits.TRISB4 = 0;
  6288  06AD  0021               	movlb	1	; select bank1
  6289  06AE  120D               	bcf	13,4	;volatile
  6290                           
  6291                           ;softI2c.c: 159: if(ack)
  6292  06AF  0020               	movlb	0	; select bank0
  6293  06B0  0824               	movf	SoftI2cRxByte@ack,w
  6294  06B1  1903               	btfsc	3,2
  6295  06B2  2EB6               	goto	l42
  6296                           
  6297                           ;softI2c.c: 160: {
  6298                           ;softI2c.c: 161: LATBbits.LATB4 = 0;
  6299  06B3  0022               	movlb	2	; select bank2
  6300  06B4  120D               	bcf	13,4	;volatile
  6301                           
  6302                           ;softI2c.c: 162: }
  6303  06B5  2EB8               	goto	l1982
  6304  06B6                     l42:	
  6305                           
  6306                           ;softI2c.c: 163: else
  6307                           ;softI2c.c: 164: {
  6308                           ;softI2c.c: 165: LATBbits.LATB4 = 1;
  6309  06B6  0022               	movlb	2	; select bank2
  6310  06B7  160D               	bsf	13,4	;volatile
  6311  06B8                     l1982:	
  6312                           
  6313                           ;softI2c.c: 166: }
  6314                           ;softI2c.c: 167: SoftI2cNop();
  6315  06B8  26C8  3185         	fcall	_SoftI2cNop
  6316                           
  6317                           ;softI2c.c: 169: LATBbits.LATB6 = 1;
  6318  06BA  0022               	movlb	2	; select bank2
  6319  06BB  170D               	bsf	13,6	;volatile
  6320                           
  6321                           ;softI2c.c: 170: SoftI2cNop();
  6322  06BC  26C8  3185         	fcall	_SoftI2cNop
  6323                           
  6324                           ;softI2c.c: 172: LATBbits.LATB6 = 0;
  6325  06BE  0022               	movlb	2	; select bank2
  6326  06BF  130D               	bcf	13,6	;volatile
  6327                           
  6328                           ;softI2c.c: 173: SoftI2cNop();
  6329  06C0  26C8  3185         	fcall	_SoftI2cNop
  6330                           
  6331                           ;softI2c.c: 174: SoftI2cNop();
  6332  06C2  26C8  3185         	fcall	_SoftI2cNop
  6333                           
  6334                           ;softI2c.c: 175: SoftI2cNop();
  6335  06C4  26C8               	fcall	_SoftI2cNop
  6336                           
  6337                           ;softI2c.c: 177: return data;
  6338  06C5  0020               	movlb	0	; select bank0
  6339  06C6  0825               	movf	SoftI2cRxByte@data,w
  6340  06C7  0008               	return
  6341  06C8                     __end_of_SoftI2cRxByte:	
  6342  06C8                     __ptext18:	
  6343 ;; *************** function _SoftI2cNop *****************
  6344 ;; Defined at:
  6345 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;		None
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;		None
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/2
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6359 ;;      Params:         0       0       0       0
  6360 ;;      Locals:         0       0       0       0
  6361 ;;      Temps:          0       1       0       0
  6362 ;;      Totals:         0       1       0       0
  6363 ;;Total ram usage:        1 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    6
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_SoftI2cStart
  6370 ;;		_SoftI2cRepeatedStart
  6371 ;;		_SoftI2cStop
  6372 ;;		_SoftI2cTxByte
  6373 ;;		_SoftI2cRxByte
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _SoftI2cNop
  6379  06C8                     _SoftI2cNop:	
  6380  06C8                     l1846:	
  6381                           ;incstack = 0
  6382                           ; Regs used in _SoftI2cNop: [wreg]
  6383                           
  6384                           
  6385                           ;softI2c.c: 9: _delay((unsigned long)((10)*(16000000/4000000.0)));
  6386  06C8  300D               	movlw	13
  6387  06C9  0020               	movlb	0	; select bank0
  6388  06CA  00A0               	movwf	??_SoftI2cNop
  6389  06CB                     u1977:	
  6390  06CB  0BA0               	decfsz	??_SoftI2cNop,f
  6391  06CC  2ECB               	goto	u1977
  6392  06CD  0008               	return
  6393  06CE                     __end_of_SoftI2cNop:	
  6394  06CE                     __ptext15:	
  6395 ;; *************** function _SoftI2cStart *****************
  6396 ;; Defined at:
  6397 ;;		line 35 in file "../../../src/bsp/softI2c.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;		None               void
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0, pclath, cstack
  6406 ;; Tracked objects:
  6407 ;;		On entry : 1E/1
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6411 ;;      Params:         0       0       0       0
  6412 ;;      Locals:         0       0       0       0
  6413 ;;      Temps:          0       0       0       0
  6414 ;;      Totals:         0       0       0       0
  6415 ;;Total ram usage:        0 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    7
  6418 ;; This function calls:
  6419 ;;		_SoftI2cNop
  6420 ;; This function is called by:
  6421 ;;		_SoftI2cInit
  6422 ;;		_eepromRxBytes
  6423 ;;		_eepromTxBytes
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           
  6428                           ;psect for function _SoftI2cStart
  6429  06CE                     _SoftI2cStart:	
  6430                           
  6431                           ;softI2c.c: 37: TRISBbits.TRISB4 = 0;
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  6435  06CE  0021               	movlb	1	; select bank1
  6436  06CF  120D               	bcf	13,4	;volatile
  6437                           
  6438                           ;softI2c.c: 39: LATBbits.LATB6 = 1;
  6439  06D0  0022               	movlb	2	; select bank2
  6440  06D1  170D               	bsf	13,6	;volatile
  6441                           
  6442                           ;softI2c.c: 40: SoftI2cNop();
  6443  06D2  26C8  3185         	fcall	_SoftI2cNop
  6444                           
  6445                           ;softI2c.c: 42: LATBbits.LATB4 = 0;
  6446  06D4  0022               	movlb	2	; select bank2
  6447  06D5  120D               	bcf	13,4	;volatile
  6448                           
  6449                           ;softI2c.c: 43: SoftI2cNop();
  6450  06D6  26C8  3185         	fcall	_SoftI2cNop
  6451                           
  6452                           ;softI2c.c: 44: LATBbits.LATB6 = 0;
  6453  06D8  0022               	movlb	2	; select bank2
  6454  06D9  130D               	bcf	13,6	;volatile
  6455                           
  6456                           ;softI2c.c: 45: SoftI2cNop();
  6457  06DA  2EC8               	ljmp	l1846
  6458  06DB                     __end_of_SoftI2cStart:	
  6459                           
  6460                           	psect	swtext1
  6461  077E                     __pswtext1:	
  6462  077E                     S2764:	
  6463  077E  3183  2B29         	ljmp	l469
  6464  0780  3183  2B2A         	ljmp	l2238
  6465  0782  3183  2B41         	ljmp	l2246
  6466  0784  3183  2B29         	ljmp	l469
  6467  0786  3183  2B29         	ljmp	l469
  6468  0788  3183  2B29         	ljmp	l469
  6469  078A  3183  2B29         	ljmp	l469
  6470  078C  3183  2B29         	ljmp	l469
  6471                           
  6472                           	psect	text20
  6473  06DB                     __ptext20:	
  6474 ;; *************** function _Mrf49xaTxPacket *****************
  6475 ;; Defined at:
  6476 ;;		line 26 in file "../../../src/devices/mrf49xa_packet.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6479 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6480 ;;  response        1    0[BANK0 ] unsigned char 
  6481 ;;  needAck         1    1[BANK0 ] unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6484 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6485 ;;  i               1    4[BANK0 ] unsigned char 
  6486 ;;  crc             1    3[BANK0 ] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  1    wreg      unsigned char 
  6489 ;; Registers used:
  6490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6491 ;; Tracked objects:
  6492 ;;		On entry : 1F/0
  6493 ;;		On exit  : 1F/1
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6496 ;;      Params:         0       2       0       0
  6497 ;;      Locals:         0       3       0       0
  6498 ;;      Temps:          0       1       0       0
  6499 ;;      Totals:         0       6       0       0
  6500 ;;Total ram usage:        6 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    6
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_Mrf49xaTxAck
  6507 ;;		_HandlePacket
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           
  6512                           ;psect for function _Mrf49xaTxPacket
  6513  06DB                     _Mrf49xaTxPacket:	
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6517                           ;Mrf49xaTxPacket@packet stored from wreg
  6518  06DB  00A5               	movwf	Mrf49xaTxPacket@packet
  6519  06DC  3033               	movlw	51
  6520                           
  6521                           ;mrf49xa_packet.c: 28: uint8_t i, crc = 0;
  6522  06DD  01A3               	clrf	Mrf49xaTxPacket@crc
  6523                           
  6524                           ;mrf49xa_packet.c: 30: if (&(rfTrcvStatus.txPacket) == packet)
  6525  06DE  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6526  06DF  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6527  06E0  1D03               	skipz
  6528  06E1  2EEB               	goto	l2104
  6529                           
  6530                           ;mrf49xa_packet.c: 31: {
  6531                           ;mrf49xa_packet.c: 32: if (response)
  6532  06E2  0820               	movf	Mrf49xaTxPacket@response,w
  6533  06E3  1903               	btfsc	3,2
  6534  06E4  2EE8               	goto	l2088
  6535                           
  6536                           ;mrf49xa_packet.c: 33: {
  6537                           ;mrf49xa_packet.c: 34: packet->packet.dst = packet->packet.src;
  6538  06E5  0825               	movf	Mrf49xaTxPacket@packet,w
  6539  06E6  273C  3186         	fcall	PL6	;call to abstracted procedure
  6540  06E8                     l2088:	
  6541                           
  6542                           ;mrf49xa_packet.c: 35: }
  6543                           ;mrf49xa_packet.c: 36: packet->packet.src = rfTrcvStatus.src;
  6544                           
  6545                           ;mrf49xa_packet.c: 37: packet->packet.size += 5;
  6546                           
  6547                           ;mrf49xa_packet.c: 39: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6548                           
  6549                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.retry = 0;
  6550                           
  6551                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retransmit = 0;
  6552                           
  6553                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6554  06E8  2721               	fcall	PL2	;call to abstracted procedure
  6555                           
  6556                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.crc = 0;
  6557  06E9  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  6558  06EA  0008               	return
  6559  06EB                     l2104:	
  6560                           
  6561                           ;mrf49xa_packet.c: 45: }
  6562                           ;mrf49xa_packet.c: 48: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6563  06EB  0021               	movlb	1	; select bank1
  6564  06EC  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  6565  06ED  1D03               	skipz
  6566  06EE  0008               	return
  6567                           
  6568                           ;mrf49xa_packet.c: 53: else
  6569                           ;mrf49xa_packet.c: 54: {
  6570                           ;mrf49xa_packet.c: 55: if (response)
  6571  06EF  0020               	movlb	0	; select bank0
  6572  06F0  0820               	movf	Mrf49xaTxPacket@response,w
  6573  06F1  1903               	btfsc	3,2
  6574  06F2  2EF6               	goto	l2114
  6575                           
  6576                           ;mrf49xa_packet.c: 56: {
  6577                           ;mrf49xa_packet.c: 57: packet->packet.dst = packet->packet.src;
  6578  06F3  0825               	movf	Mrf49xaTxPacket@packet,w
  6579  06F4  273C  3186         	fcall	PL6	;call to abstracted procedure
  6580  06F6                     l2114:	
  6581                           
  6582                           ;mrf49xa_packet.c: 58: }
  6583                           ;mrf49xa_packet.c: 59: packet->packet.src = rfTrcvStatus.src;
  6584                           
  6585                           ;mrf49xa_packet.c: 60: packet->packet.size += 5;
  6586                           
  6587                           ;mrf49xa_packet.c: 62: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6588                           
  6589                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.retry = 0;
  6590                           
  6591                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retransmit = 0;
  6592                           
  6593                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6594  06F6  2721  3186         	fcall	PL2	;call to abstracted procedure
  6595                           
  6596                           ;mrf49xa_packet.c: 67: packet->state = PKT_FREE;
  6597  06F8  0020               	movlb	0	; select bank0
  6598  06F9  0825               	movf	Mrf49xaTxPacket@packet,w
  6599  06FA  0086               	movwf	6
  6600  06FB  0181               	clrf	1
  6601                           
  6602                           ;mrf49xa_packet.c: 70: for (i = 0; i < (16 + 5); i++)
  6603  06FC  01A4               	clrf	Mrf49xaTxPacket@i
  6604  06FD                     l2134:	
  6605                           
  6606                           ;mrf49xa_packet.c: 71: {
  6607                           ;mrf49xa_packet.c: 72: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6608  06FD  0824               	movf	Mrf49xaTxPacket@i,w
  6609  06FE  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6610  06FF  0086               	movwf	6
  6611  0700  0187               	clrf	7
  6612  0701  0824               	movf	Mrf49xaTxPacket@i,w
  6613  0702  0725               	addwf	Mrf49xaTxPacket@packet,w
  6614  0703  00A2               	movwf	??_Mrf49xaTxPacket
  6615  0704  0A22               	incf	??_Mrf49xaTxPacket,w
  6616  0705  0084               	movwf	4
  6617  0706  0185               	clrf	5
  6618  0707  0800               	movf	0,w
  6619  0708  0081               	movwf	1
  6620  0709  3015               	movlw	21
  6621  070A  0AA4               	incf	Mrf49xaTxPacket@i,f
  6622  070B  0224               	subwf	Mrf49xaTxPacket@i,w
  6623  070C  1C03               	skipc
  6624  070D  2EFD               	goto	l2134
  6625                           
  6626                           ;mrf49xa_packet.c: 73: }
  6627                           ;mrf49xa_packet.c: 74: for (i = 0; i < packet->packet.size; i++)
  6628  070E  01A4               	clrf	Mrf49xaTxPacket@i
  6629  070F                     l321:	
  6630  070F  0A25               	incf	Mrf49xaTxPacket@packet,w
  6631  0710  0086               	movwf	6
  6632  0711  0187               	clrf	7
  6633  0712  0801               	movf	1,w
  6634  0713  0224               	subwf	Mrf49xaTxPacket@i,w
  6635  0714  1803               	btfsc	3,0
  6636  0715  2F1D               	goto	l2146
  6637                           
  6638                           ;mrf49xa_packet.c: 75: {
  6639                           ;mrf49xa_packet.c: 76: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6640  0716  0824               	movf	Mrf49xaTxPacket@i,w
  6641  0717  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6642  0718  0086               	movwf	6
  6643  0719  0801               	movf	1,w
  6644  071A  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6645  071B  0AA4               	incf	Mrf49xaTxPacket@i,f
  6646  071C  2F0F               	goto	l321
  6647  071D                     l2146:	
  6648                           
  6649                           ;mrf49xa_packet.c: 77: }
  6650                           ;mrf49xa_packet.c: 79: rfTrcvStatus.txPacket.crc = crc;
  6651  071D  0823               	movf	Mrf49xaTxPacket@crc,w
  6652  071E  0021               	movlb	1	; select bank1
  6653  071F  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  6654  0720  0008               	return
  6655  0721                     __end_of_Mrf49xaTxPacket:	
  6656  0721                     PL2:	
  6657  0721  0825               	movf	Mrf49xaTxPacket@packet,w
  6658  0722  3E02               	addlw	2
  6659  0723  0086               	movwf	6
  6660  0724  0187               	clrf	7
  6661  0725  0021               	movlb	1	; select bank1
  6662  0726  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  6663  0727  0081               	movwf	1
  6664  0728  0020               	movlb	0	; select bank0
  6665  0729  0A25               	incf	Mrf49xaTxPacket@packet,w
  6666  072A  0086               	movwf	6
  6667  072B  3005               	movlw	5
  6668  072C  0781               	addwf	1,f
  6669  072D  0021               	movlb	1	; select bank1
  6670  072E  30F0               	movlw	-16
  6671  072F  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  6672  0730  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  6673  0731  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6674  0732  30CF               	movlw	-49
  6675  0733  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6676  0734  0020               	movlb	0	; select bank0
  6677  0735  0321               	decf	Mrf49xaTxPacket@needAck,w
  6678  0736  3000               	movlw	0
  6679  0737  1903               	skipnz
  6680  0738  3001               	movlw	1
  6681  0739  0021               	movlb	1	; select bank1
  6682  073A  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6683  073B  0008               	return
  6684  073C                     __end_ofPL2:	
  6685  073C                     PL6:	
  6686  073C  3E03               	addlw	3
  6687  073D  0086               	movwf	6
  6688  073E  0187               	clrf	7
  6689  073F  0825               	movf	Mrf49xaTxPacket@packet,w
  6690  0740  3E02               	addlw	2
  6691  0741  0084               	movwf	4
  6692  0742  0185               	clrf	5
  6693  0743  0800               	movf	0,w
  6694  0744  0081               	movwf	1
  6695  0745  0008               	return
  6696  0746                     __end_ofPL6:	
  6697                           
  6698                           	psect	intentry
  6699  0004                     __pintentry:	
  6700 ;; *************** function _extInt *****************
  6701 ;; Defined at:
  6702 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;		None
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;		None
  6707 ;; Return value:  Size  Location     Type
  6708 ;;		None               void
  6709 ;; Registers used:
  6710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 1F/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6716 ;;      Params:         0       0       0       0
  6717 ;;      Locals:         0       0       0       0
  6718 ;;      Temps:          1       0       0       0
  6719 ;;      Totals:         1       0       0       0
  6720 ;;Total ram usage:        1 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    5
  6723 ;; This function calls:
  6724 ;;		i1_Mrf49xaServe
  6725 ;; This function is called by:
  6726 ;;		Interrupt level 1
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730  0004                     _extInt:	
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6734  0004  3180               	pagesel	$
  6735  0005  0020               	movlb	0	; select bank0
  6736  0006  087F               	movf	127,w
  6737  0007  00FA               	movwf	??_extInt
  6738                           
  6739                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  6740  0008  1C8B               	btfss	11,1	;volatile
  6741  0009  2811               	goto	i1l131
  6742                           
  6743                           ;interrupt.c: 34: {
  6744                           ;interrupt.c: 35: if (Mrf49xaServe())
  6745  000A  3183  23EE  3180   	fcall	i1_Mrf49xaServe
  6746  000D  3A00               	xorlw	0
  6747  000E  1903               	skipnz
  6748  000F  2811               	goto	i1l131
  6749                           
  6750                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  6751  0010  108B               	bcf	11,1	;volatile
  6752  0011                     i1l131:	
  6753  0011  087A               	movf	??_extInt,w
  6754  0012  00FF               	movwf	127
  6755  0013  0009               	retfie
  6756  0014                     __end_of_extInt:	
  6757                           
  6758                           	psect	text43
  6759  03E4                     __ptext43:	
  6760 ;; *************** function i1_Mrf49RxCmd *****************
  6761 ;; Defined at:
  6762 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  cmd             1    wreg     unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  cmd             1    1[COMMON] unsigned char 
  6767 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  1    wreg      unsigned char 
  6770 ;; Registers used:
  6771 ;;		wreg, status,2, status,0, pclath, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 1E/1
  6774 ;;		On exit  : 1F/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6777 ;;      Params:         0       0       0       0
  6778 ;;      Locals:         2       0       0       0
  6779 ;;      Temps:          0       0       0       0
  6780 ;;      Totals:         2       0       0       0
  6781 ;;Total ram usage:        2 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    1
  6784 ;; This function calls:
  6785 ;;		i1_Mrf49SpiRx
  6786 ;;		i1_Mrf49SpiTx
  6787 ;; This function is called by:
  6788 ;;		i1_Mrf49RxByte
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function i1_Mrf49RxCmd
  6794  03E4                     i1_Mrf49RxCmd:	
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  6798                           ;i1Mrf49RxCmd@cmd stored from wreg
  6799  03E4  00F1               	movwf	i1Mrf49RxCmd@cmd
  6800                           
  6801                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  6802  03E5  0020               	movlb	0	; select bank0
  6803  03E6  130E               	bcf	14,6	;volatile
  6804                           
  6805                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  6806  03E7  0871               	movf	i1Mrf49RxCmd@cmd,w
  6807  03E8  2546  3183         	fcall	i1_Mrf49SpiTx
  6808                           
  6809                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  6810  03EA  24D6               	fcall	i1_Mrf49SpiRx
  6811  03EB  00F2               	movwf	i1Mrf49RxCmd@val
  6812                           
  6813                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  6814  03EC  170E               	bsf	14,6	;volatile
  6815                           
  6816                           ;mrf49xa_cmd.c: 27: return val;
  6817  03ED  0008               	return
  6818  03EE                     __end_ofi1_Mrf49RxCmd:	
  6819  03EE                     __ptext36:	
  6820 ;; *************** function i1_Mrf49xaServe *****************
  6821 ;; Defined at:
  6822 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;  Mrf49xaServe    1    9[COMMON] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      unsigned char 
  6829 ;; Registers used:
  6830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 1F/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6836 ;;      Params:         0       0       0       0
  6837 ;;      Locals:         1       0       0       0
  6838 ;;      Temps:          1       0       0       0
  6839 ;;      Totals:         2       0       0       0
  6840 ;;Total ram usage:        2 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    4
  6843 ;; This function calls:
  6844 ;;		i1_Mrf49RxByte
  6845 ;;		i1_Mrf49RxSts
  6846 ;;		i1_Mrf49TxByte
  6847 ;;		i1_Mrf49xaModeRx
  6848 ;; This function is called by:
  6849 ;;		_extInt
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           
  6854                           ;psect for function i1_Mrf49xaServe
  6855  03EE                     i1_Mrf49xaServe:	
  6856                           
  6857                           ;mrf49xa_data.c: 10: uint8_t data;
  6858                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  6859                           
  6860                           ;incstack = 0
  6861                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6862  03EE  24CB  3183         	fcall	i1_Mrf49RxSts
  6863                           
  6864                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6865  03F0  083B               	movf	_mrf49Status,w
  6866  03F1  3AFF               	xorlw	255
  6867  03F2  1D03               	skipz
  6868  03F3  2BF8               	goto	i1l378
  6869  03F4  083C               	movf	_mrf49Status+1,w
  6870  03F5  3AFF               	xorlw	255
  6871  03F6  1903               	btfsc	3,2
  6872                           
  6873                           ;mrf49xa_data.c: 19: return 0;
  6874  03F7  3400               	retlw	0
  6875  03F8                     i1l378:	
  6876                           ;mrf49xa_data.c: 23: {
  6877                           
  6878                           
  6879                           ;mrf49xa_data.c: 25: }
  6880                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  6881  03F8  1ABB               	btfsc	_mrf49Status,5
  6882  03F9  2C04               	goto	i1l2634
  6883  03FA  2C10               	goto	i1l379
  6884  03FB                     i1l2630:	
  6885                           
  6886                           ;mrf49xa_data.c: 33: case RECV_DATA:
  6887                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  6888  03FB  24BD  3183         	fcall	i1_Mrf49RxByte
  6889  03FD  00F9               	movwf	i1Mrf49xaServe@data
  6890                           
  6891                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  6892  03FE  24BD  3183         	fcall	i1_Mrf49RxByte
  6893  0400  00F9               	movwf	i1Mrf49xaServe@data
  6894                           
  6895                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  6896  0401  24C0  3183         	fcall	i1_Mrf49xaModeRx
  6897                           
  6898                           ;mrf49xa_data.c: 44: break;
  6899  0403  2C10               	goto	i1l379
  6900  0404                     i1l2634:	
  6901  0404  0021               	movlb	1	; select bank1
  6902  0405  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  6903                           
  6904                           ; Switch size 1, requested type "space"
  6905                           ; Number of cases is 3, Range of values is 0 to 2
  6906                           ; switch strategies available:
  6907                           ; Name         Instructions Cycles
  6908                           ; simple_byte           10     6 (average)
  6909                           ; direct_byte           12     6 (fixed)
  6910                           ; jumptable            260     6 (fixed)
  6911                           ;	Chosen strategy is simple_byte
  6912  0406  3A00               	xorlw	0	; case 0
  6913  0407  1903               	skipnz
  6914  0408  2BFB               	goto	i1l2630
  6915  0409  3A01               	xorlw	1	; case 1
  6916  040A  1903               	skipnz
  6917  040B  2BFB               	goto	i1l2630
  6918  040C  3A03               	xorlw	3	; case 2
  6919  040D  1903               	skipnz
  6920  040E  2C10               	goto	i1l379
  6921  040F  2C10               	goto	i1l379
  6922  0410                     i1l379:	
  6923                           
  6924                           ;mrf49xa_data.c: 52: }
  6925                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6926  0410  0020               	movlb	0	; select bank0
  6927  0411  1BBB               	btfsc	_mrf49Status,7
  6928  0412  2CA7               	goto	i1l2720
  6929  0413  2CB3               	goto	i1l2722
  6930  0414                     i1l2638:	
  6931                           
  6932                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  6933  0414  24BD  3183         	fcall	i1_Mrf49RxByte
  6934  0416  00F9               	movwf	i1Mrf49xaServe@data
  6935                           
  6936                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6937  0417  1BBC               	btfsc	_mrf49Status+1,7
  6938  0418  2C1C               	goto	i1l2644
  6939  0419                     i1l2642:	
  6940                           
  6941                           ;mrf49xa_data.c: 72: {
  6942                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  6943  0419  24C0  3183         	fcall	i1_Mrf49xaModeRx
  6944                           
  6945                           ;mrf49xa_data.c: 74: break;
  6946  041B  2CB3               	goto	i1l2722
  6947  041C                     i1l2644:	
  6948                           
  6949                           ;mrf49xa_data.c: 75: }
  6950                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  6951  041C  0021               	movlb	1	; select bank1
  6952  041D  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6953  041E  1D03               	skipz
  6954  041F  2C22               	goto	i1l2648
  6955  0420  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  6956  0421  2C26               	goto	L3
  6957  0422                     i1l2648:	
  6958                           
  6959                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  6960  0422  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  6961  0423  1D03               	skipz
  6962  0424  2C19               	goto	i1l2642
  6963  0425  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  6964  0426                     L3:	
  6965  0426  00A0               	movwf	_rfTrcvStatus^(0+128)
  6966                           
  6967                           ;mrf49xa_data.c: 85: }
  6968                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  6969  0427  0A20               	incf	_rfTrcvStatus^(0+128),w
  6970  0428  0086               	movwf	6
  6971  0429  0187               	clrf	7
  6972  042A  0879               	movf	i1Mrf49xaServe@data,w
  6973  042B  0081               	movwf	1
  6974                           
  6975                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  6976  042C  0820               	movf	_rfTrcvStatus^(0+128),w
  6977  042D  3E16               	addlw	22
  6978  042E  0086               	movwf	6
  6979  042F  0181               	clrf	1
  6980                           
  6981                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  6982  0430  0820               	movf	_rfTrcvStatus^(0+128),w
  6983  0431  0086               	movwf	6
  6984  0432  3003               	movlw	3
  6985  0433  0081               	movwf	1
  6986                           
  6987                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  6988  0434  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  6989  0435  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  6990                           
  6991                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  6992  0436  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  6993  0437  2C63               	goto	i1l2684
  6994  0438                     i1l2664:	
  6995                           ;mrf49xa_data.c: 93: break;
  6996                           
  6997                           
  6998                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  6999  0438  24BD  3183         	fcall	i1_Mrf49RxByte
  7000  043A  00F9               	movwf	i1Mrf49xaServe@data
  7001                           
  7002                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  7003  043B  1BBC               	btfsc	_mrf49Status+1,7
  7004  043C  2C44               	goto	i1l2672
  7005                           
  7006                           ;mrf49xa_data.c: 102: {
  7007                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7008  043D  0021               	movlb	1	; select bank1
  7009  043E  0820               	movf	_rfTrcvStatus^(0+128),w
  7010  043F  0086               	movwf	6
  7011  0440  3004               	movlw	4
  7012  0441  0187               	clrf	7
  7013  0442  0081               	movwf	1
  7014  0443  2C19               	goto	i1l2642
  7015  0444                     i1l2672:	
  7016                           
  7017                           ;mrf49xa_data.c: 106: }
  7018                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  7019  0444  0021               	movlb	1	; select bank1
  7020  0445  0A20               	incf	_rfTrcvStatus^(0+128),w
  7021  0446  0086               	movwf	6
  7022  0447  0187               	clrf	7
  7023  0448  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7024  0449  0601               	xorwf	1,w
  7025  044A  1D03               	skipz
  7026  044B  2C5B               	goto	i1l2682
  7027                           
  7028                           ;mrf49xa_data.c: 109: {
  7029                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  7030  044C  0820               	movf	_rfTrcvStatus^(0+128),w
  7031  044D  3E16               	addlw	22
  7032  044E  0086               	movwf	6
  7033  044F  0879               	movf	i1Mrf49xaServe@data,w
  7034  0450  0081               	movwf	1
  7035                           
  7036                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7037  0451  0820               	movf	_rfTrcvStatus^(0+128),w
  7038  0452  0086               	movwf	6
  7039  0453  3004               	movlw	4
  7040  0454  0081               	movwf	1
  7041                           
  7042                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  7043  0455  24C0  3183         	fcall	i1_Mrf49xaModeRx
  7044                           
  7045                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  7046  0457  0022               	movlb	2	; select bank2
  7047  0458  150E               	bsf	14,2	;volatile
  7048                           
  7049                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  7050  0459  110E               	bcf	14,2	;volatile
  7051                           
  7052                           ;mrf49xa_data.c: 123: }
  7053  045A  2CB3               	goto	i1l2722
  7054  045B                     i1l2682:	
  7055                           
  7056                           ;mrf49xa_data.c: 124: else
  7057                           ;mrf49xa_data.c: 125: {
  7058                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  7059  045B  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7060  045C  0720               	addwf	_rfTrcvStatus^(0+128),w
  7061  045D  00F8               	movwf	??i1_Mrf49xaServe
  7062  045E  0A78               	incf	??i1_Mrf49xaServe,w
  7063  045F  0086               	movwf	6
  7064  0460  0187               	clrf	7
  7065  0461  0879               	movf	i1Mrf49xaServe@data,w
  7066  0462  0081               	movwf	1
  7067  0463                     i1l2684:	
  7068  0463  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7069  0464  2CB3               	goto	i1l2722
  7070  0465                     i1l2686:	
  7071                           
  7072                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  7073  0465  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7074                           
  7075                           ;mrf49xa_data.c: 134: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  7076  0466  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7077  0467  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  7078  0468  1D03               	skipz
  7079  0469  2C96               	goto	i1l2716
  7080                           
  7081                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = 49;
  7082  046A  3031               	movlw	49
  7083  046B  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7084  046C  2C96               	goto	i1l2716
  7085  046D                     i1l2692:	
  7086                           
  7087                           ;mrf49xa_data.c: 140: Mrf49TxByte(0x2D);
  7088  046D  302D               	movlw	45
  7089  046E  24B8  3183         	fcall	i1_Mrf49TxByte
  7090                           
  7091                           ;mrf49xa_data.c: 141: break;
  7092  0470  2CB3               	goto	i1l2722
  7093  0471                     i1l2694:	
  7094                           
  7095                           ;mrf49xa_data.c: 144: Mrf49TxByte(0xD4);
  7096  0471  30D4               	movlw	212
  7097  0472  24B8  3183         	fcall	i1_Mrf49TxByte
  7098                           
  7099                           ;mrf49xa_data.c: 145: rfTrcvStatus.hwByte = 0xFF;
  7100  0474  30FF               	movlw	255
  7101  0475  0021               	movlb	1	; select bank1
  7102  0476  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7103                           
  7104                           ;mrf49xa_data.c: 146: break;
  7105  0477  2CB3               	goto	i1l2722
  7106  0478                     i1l2698:	
  7107                           
  7108                           ;mrf49xa_data.c: 150: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  7109  0478  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7110  0479  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  7111  047A  0086               	movwf	6
  7112  047B  0187               	clrf	7
  7113  047C  0801               	movf	1,w
  7114  047D  24B8  3183         	fcall	i1_Mrf49TxByte
  7115                           
  7116                           ;mrf49xa_data.c: 151: break;
  7117  047F  2CB3               	goto	i1l2722
  7118  0480                     i1l2700:	
  7119                           
  7120                           ;mrf49xa_data.c: 154: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  7121  0480  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  7122  0481  24B8  3183         	fcall	i1_Mrf49TxByte
  7123                           
  7124                           ;mrf49xa_data.c: 155: break;
  7125  0483  2CB3               	goto	i1l2722
  7126  0484                     i1l2702:	
  7127                           
  7128                           ;mrf49xa_data.c: 158: Mrf49TxByte(0x00);
  7129  0484  3000               	movlw	0
  7130  0485  24B8  3183         	fcall	i1_Mrf49TxByte
  7131                           
  7132                           ;mrf49xa_data.c: 159: break;
  7133  0487  2CB3               	goto	i1l2722
  7134  0488                     i1l2704:	
  7135                           
  7136                           ;mrf49xa_data.c: 162: Mrf49TxByte(0x00);
  7137  0488  3000               	movlw	0
  7138  0489  24B8  3183         	fcall	i1_Mrf49TxByte
  7139                           
  7140                           ;mrf49xa_data.c: 163: Mrf49xaModeRx();
  7141  048B  24C0  3183         	fcall	i1_Mrf49xaModeRx
  7142                           
  7143                           ;mrf49xa_data.c: 165: rfTrcvStatus.txPacket.retry = 0;
  7144  048D  30F0               	movlw	-16
  7145  048E  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  7146                           
  7147                           ;mrf49xa_data.c: 167: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  7148  048F  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  7149  0490  2C94               	goto	i1l2712
  7150                           
  7151                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  7152  0491  3002               	movlw	2
  7153  0492  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  7154  0493  2CB3               	goto	i1l2722
  7155  0494                     i1l2712:	
  7156                           
  7157                           ;mrf49xa_data.c: 169: else
  7158                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_FREE;
  7159  0494  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  7160  0495  2CB3               	goto	i1l2722
  7161  0496                     i1l2716:	
  7162  0496  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7163                           
  7164                           ; Switch size 1, requested type "space"
  7165                           ; Number of cases is 5, Range of values is 49 to 101
  7166                           ; switch strategies available:
  7167                           ; Name         Instructions Cycles
  7168                           ; simple_byte           16     9 (average)
  7169                           ; direct_byte          115     9 (fixed)
  7170                           ; jumptable            263     9 (fixed)
  7171                           ;	Chosen strategy is simple_byte
  7172  0497  3A31               	xorlw	49	; case 49
  7173  0498  1903               	skipnz
  7174  0499  2C80               	goto	i1l2700
  7175  049A  3A03               	xorlw	3	; case 50
  7176  049B  1903               	skipnz
  7177  049C  2C84               	goto	i1l2702
  7178  049D  3A01               	xorlw	1	; case 51
  7179  049E  1903               	skipnz
  7180  049F  2C88               	goto	i1l2704
  7181  04A0  3A57               	xorlw	87	; case 100
  7182  04A1  1903               	skipnz
  7183  04A2  2C6D               	goto	i1l2692
  7184  04A3  3A01               	xorlw	1	; case 101
  7185  04A4  1903               	skipnz
  7186  04A5  2C71               	goto	i1l2694
  7187  04A6  2C78               	goto	i1l2698
  7188  04A7                     i1l2720:	
  7189  04A7  0021               	movlb	1	; select bank1
  7190  04A8  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7191                           
  7192                           ; Switch size 1, requested type "space"
  7193                           ; Number of cases is 3, Range of values is 0 to 2
  7194                           ; switch strategies available:
  7195                           ; Name         Instructions Cycles
  7196                           ; simple_byte           10     6 (average)
  7197                           ; direct_byte           12     6 (fixed)
  7198                           ; jumptable            260     6 (fixed)
  7199                           ;	Chosen strategy is simple_byte
  7200  04A9  3A00               	xorlw	0	; case 0
  7201  04AA  1903               	skipnz
  7202  04AB  2C14               	goto	i1l2638
  7203  04AC  3A01               	xorlw	1	; case 1
  7204  04AD  1903               	skipnz
  7205  04AE  2C38               	goto	i1l2664
  7206  04AF  3A03               	xorlw	3	; case 2
  7207  04B0  1903               	skipnz
  7208  04B1  2C65               	goto	i1l2686
  7209  04B2  2CB3               	goto	i1l2722
  7210  04B3                     i1l2722:	
  7211                           
  7212                           ;mrf49xa_data.c: 177: }
  7213                           ;mrf49xa_data.c: 191: return PORTAbits.RA2 == 1 ? 1 : 0;
  7214  04B3  0020               	movlb	0	; select bank0
  7215  04B4  0C0C               	rrf	12,w	;volatile
  7216  04B5  0C89               	rrf	9,f
  7217  04B6  3901               	andlw	1
  7218  04B7  0008               	return
  7219  04B8                     __end_ofi1_Mrf49xaServe:	
  7220  04B8                     __ptext39:	
  7221 ;; *************** function i1_Mrf49TxByte *****************
  7222 ;; Defined at:
  7223 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  byte            1    wreg     unsigned char 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  byte            1    3[COMMON] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;		None               void
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, pclath, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 1E/1
  7234 ;;		On exit  : 1F/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7237 ;;      Params:         0       0       0       0
  7238 ;;      Locals:         1       0       0       0
  7239 ;;      Temps:          0       0       0       0
  7240 ;;      Totals:         1       0       0       0
  7241 ;;Total ram usage:        1 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    2
  7244 ;; This function calls:
  7245 ;;		i1_Mrf49TxCmd
  7246 ;; This function is called by:
  7247 ;;		i1_Mrf49xaServe
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           
  7252                           ;psect for function i1_Mrf49TxByte
  7253  04B8                     i1_Mrf49TxByte:	
  7254                           
  7255                           ;incstack = 0
  7256                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  7257                           ;i1Mrf49TxByte@byte stored from wreg
  7258  04B8  00F3               	movwf	i1Mrf49TxByte@byte
  7259                           
  7260                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  7261  04B9  00F1               	movwf	i1Mrf49TxCmd@val
  7262  04BA  30B8               	movlw	184
  7263  04BB  253C               	fcall	i1_Mrf49TxCmd
  7264  04BC  0008               	return
  7265  04BD                     __end_ofi1_Mrf49TxByte:	
  7266  04BD                     __ptext42:	
  7267 ;; *************** function i1_Mrf49RxByte *****************
  7268 ;; Defined at:
  7269 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  1    wreg      unsigned char 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0, pclath, cstack
  7278 ;; Tracked objects:
  7279 ;;		On entry : 1E/1
  7280 ;;		On exit  : 1F/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7283 ;;      Params:         0       0       0       0
  7284 ;;      Locals:         0       0       0       0
  7285 ;;      Temps:          0       0       0       0
  7286 ;;      Totals:         0       0       0       0
  7287 ;;Total ram usage:        0 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    2
  7290 ;; This function calls:
  7291 ;;		i1_Mrf49RxCmd
  7292 ;; This function is called by:
  7293 ;;		i1_Mrf49xaServe
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function i1_Mrf49RxByte
  7299  04BD                     i1_Mrf49RxByte:	
  7300                           
  7301                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  7305  04BD  30B0               	movlw	176
  7306  04BE  23E4               	fcall	i1_Mrf49RxCmd
  7307  04BF  0008               	return
  7308  04C0                     __end_ofi1_Mrf49RxByte:	
  7309  04C0                     __ptext37:	
  7310 ;; *************** function i1_Mrf49xaModeRx *****************
  7311 ;; Defined at:
  7312 ;;		line 77 in file "../../../src/devices/mrf49xa.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;		None
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  Mrf49xaModeR    1    0        unsigned char 
  7317 ;; Return value:  Size  Location     Type
  7318 ;;		None               void
  7319 ;; Registers used:
  7320 ;;		wreg, status,2, status,0, pclath, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 1E/0
  7323 ;;		On exit  : 1F/1
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7326 ;;      Params:         0       0       0       0
  7327 ;;      Locals:         0       0       0       0
  7328 ;;      Temps:          0       0       0       0
  7329 ;;      Totals:         0       0       0       0
  7330 ;;Total ram usage:        0 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    3
  7333 ;; This function calls:
  7334 ;;		i1_mrf49xaCfg
  7335 ;; This function is called by:
  7336 ;;		i1_Mrf49xaServe
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function i1_Mrf49xaModeRx
  7342  04C0                     i1_Mrf49xaModeRx:	
  7343                           
  7344                           ;mrf49xa.c: 79: UI08_t k;
  7345                           ;mrf49xa.c: 81: mrf49xaCfg(mrfRegset_Rx, mrfRegset_RxCnt);
  7346                           
  7347                           ;incstack = 0
  7348                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  7349  04C0  3048               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  7350  04C1  3187               	movlp	high __stringtab
  7351  04C2  000A               	callw
  7352  04C3  3183               	pagesel	$	;select current page
  7353  04C4  00F3               	movwf	i1mrf49xaCfg@count
  7354  04C5  306A               	movlw	(_mrfRegset_Rx| (0+32768))& (0+255)
  7355  04C6  250A               	fcall	i1_mrf49xaCfg
  7356                           
  7357                           ;mrf49xa.c: 83: rfTrcvStatus.state = RECV_IDLE;
  7358  04C7  0021               	movlb	1	; select bank1
  7359  04C8  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7360                           
  7361                           ;mrf49xa.c: 84: rfTrcvStatus.hwByte = 0;
  7362  04C9  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7363  04CA  0008               	return
  7364  04CB                     __end_ofi1_Mrf49xaModeRx:	
  7365  04CB                     __ptext41:	
  7366 ;; *************** function i1_Mrf49RxSts *****************
  7367 ;; Defined at:
  7368 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;		None
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;		None
  7373 ;; Return value:  Size  Location     Type
  7374 ;;		None               void
  7375 ;; Registers used:
  7376 ;;		wreg, status,2, pclath, cstack
  7377 ;; Tracked objects:
  7378 ;;		On entry : 0/0
  7379 ;;		On exit  : 1F/0
  7380 ;;		Unchanged: 0/0
  7381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7382 ;;      Params:         0       0       0       0
  7383 ;;      Locals:         0       0       0       0
  7384 ;;      Temps:          0       0       0       0
  7385 ;;      Totals:         0       0       0       0
  7386 ;;Total ram usage:        0 bytes
  7387 ;; Hardware stack levels used:    1
  7388 ;; Hardware stack levels required when called:    1
  7389 ;; This function calls:
  7390 ;;		i1_Mrf49SpiRx
  7391 ;; This function is called by:
  7392 ;;		i1_Mrf49xaServe
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           
  7397                           ;psect for function i1_Mrf49RxSts
  7398  04CB                     i1_Mrf49RxSts:	
  7399                           
  7400                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7401                           
  7402                           ;incstack = 0
  7403                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7404  04CB  120B               	bcf	11,4	;volatile
  7405                           
  7406                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  7407  04CC  0020               	movlb	0	; select bank0
  7408  04CD  130E               	bcf	14,6	;volatile
  7409                           
  7410                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7411  04CE  24D6  3183         	fcall	i1_Mrf49SpiRx
  7412  04D0  00BB               	movwf	_mrf49Status
  7413                           
  7414                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7415  04D1  24D6               	fcall	i1_Mrf49SpiRx
  7416  04D2  00BC               	movwf	_mrf49Status+1
  7417                           
  7418                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  7419  04D3  170E               	bsf	14,6	;volatile
  7420                           
  7421                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7422  04D4  160B               	bsf	11,4	;volatile
  7423  04D5  0008               	return
  7424  04D6                     __end_ofi1_Mrf49RxSts:	
  7425  04D6                     __ptext45:	
  7426 ;; *************** function i1_Mrf49SpiRx *****************
  7427 ;; Defined at:
  7428 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      unsigned char 
  7435 ;; Registers used:
  7436 ;;		wreg, status,2
  7437 ;; Tracked objects:
  7438 ;;		On entry : 1F/0
  7439 ;;		On exit  : 1F/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7442 ;;      Params:         0       0       0       0
  7443 ;;      Locals:         1       0       0       0
  7444 ;;      Temps:          0       0       0       0
  7445 ;;      Totals:         1       0       0       0
  7446 ;;Total ram usage:        1 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; This function calls:
  7449 ;;		Nothing
  7450 ;; This function is called by:
  7451 ;;		i1_Mrf49RxCmd
  7452 ;;		i1_Mrf49RxSts
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           
  7457                           ;psect for function i1_Mrf49SpiRx
  7458  04D6                     i1_Mrf49SpiRx:	
  7459                           
  7460                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7461                           
  7462                           ;incstack = 0
  7463                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  7464  04D6  01F0               	clrf	i1Mrf49SpiRx@data
  7465                           
  7466                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7467  04D7  138D               	bcf	13,7	;volatile
  7468  04D8  1A8E               	btfsc	14,5	;volatile
  7469  04D9  17F0               	bsf	i1Mrf49SpiRx@data,7
  7470  04DA  178E               	bsf	14,7	;volatile
  7471  04DB  0000               	nop	;# 
  7472  04DC  0020               	movlb	0	; select bank0
  7473  04DD  138E               	bcf	14,7	;volatile
  7474                           
  7475                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7476  04DE  1A8E               	btfsc	14,5	;volatile
  7477  04DF  1770               	bsf	i1Mrf49SpiRx@data,6
  7478  04E0  178E               	bsf	14,7	;volatile
  7479  04E1  0000               	nop	;# 
  7480  04E2  0020               	movlb	0	; select bank0
  7481  04E3  138E               	bcf	14,7	;volatile
  7482                           
  7483                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7484  04E4  1A8E               	btfsc	14,5	;volatile
  7485  04E5  16F0               	bsf	i1Mrf49SpiRx@data,5
  7486  04E6  178E               	bsf	14,7	;volatile
  7487  04E7  0000               	nop	;# 
  7488  04E8  0020               	movlb	0	; select bank0
  7489  04E9  138E               	bcf	14,7	;volatile
  7490                           
  7491                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7492  04EA  1A8E               	btfsc	14,5	;volatile
  7493  04EB  1670               	bsf	i1Mrf49SpiRx@data,4
  7494  04EC  178E               	bsf	14,7	;volatile
  7495  04ED  0000               	nop	;# 
  7496  04EE  0020               	movlb	0	; select bank0
  7497  04EF  138E               	bcf	14,7	;volatile
  7498                           
  7499                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7500  04F0  1A8E               	btfsc	14,5	;volatile
  7501  04F1  15F0               	bsf	i1Mrf49SpiRx@data,3
  7502  04F2  178E               	bsf	14,7	;volatile
  7503  04F3  0000               	nop	;# 
  7504  04F4  0020               	movlb	0	; select bank0
  7505  04F5  138E               	bcf	14,7	;volatile
  7506                           
  7507                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7508  04F6  1A8E               	btfsc	14,5	;volatile
  7509  04F7  1570               	bsf	i1Mrf49SpiRx@data,2
  7510  04F8  178E               	bsf	14,7	;volatile
  7511  04F9  0000               	nop	;# 
  7512  04FA  0020               	movlb	0	; select bank0
  7513  04FB  138E               	bcf	14,7	;volatile
  7514                           
  7515                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7516  04FC  1A8E               	btfsc	14,5	;volatile
  7517  04FD  14F0               	bsf	i1Mrf49SpiRx@data,1
  7518  04FE  178E               	bsf	14,7	;volatile
  7519  04FF  0000               	nop	;# 
  7520  0500  0020               	movlb	0	; select bank0
  7521  0501  138E               	bcf	14,7	;volatile
  7522                           
  7523                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); PORTCbits.RC7 = 1; asm
      +                          ("nop");; PORTCbits.RC7 = 0; } while (0);;
  7524  0502  1A8E               	btfsc	14,5	;volatile
  7525  0503  1470               	bsf	i1Mrf49SpiRx@data,0
  7526  0504  178E               	bsf	14,7	;volatile
  7527  0505  0000               	nop	;# 
  7528  0506  0020               	movlb	0	; select bank0
  7529  0507  138E               	bcf	14,7	;volatile
  7530                           
  7531                           ;mrf49xa_spi_pic16.c: 40: return data;
  7532  0508  0870               	movf	i1Mrf49SpiRx@data,w
  7533  0509  0008               	return
  7534  050A                     __end_ofi1_Mrf49SpiRx:	
  7535  007E                     btemp	set	126	;btemp
  7536  007E                     wtemp	set	126
  7537  007E                     wtemp0	set	126
  7538  0080                     wtemp1	set	128
  7539  0082                     wtemp2	set	130
  7540  0084                     wtemp3	set	132
  7541  0086                     wtemp4	set	134
  7542  0088                     wtemp5	set	136
  7543  007F                     wtemp6	set	127
  7544  007E                     ttemp	set	126
  7545  007E                     ttemp0	set	126
  7546  0081                     ttemp1	set	129
  7547  0084                     ttemp2	set	132
  7548  0087                     ttemp3	set	135
  7549  007F                     ttemp4	set	127
  7550  007E                     ltemp	set	126
  7551  007E                     ltemp0	set	126
  7552  0082                     ltemp1	set	130
  7553  0086                     ltemp2	set	134
  7554  0080                     ltemp3	set	128
  7555  050A                     __ptext38:	
  7556 ;; *************** function i1_mrf49xaCfg *****************
  7557 ;; Defined at:
  7558 ;;		line 71 in file "../../../src/devices/mrf49xa.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  regs            1    wreg     PTR struct Mrf49InitReg_
  7561 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  7562 ;;  count           1    3[COMMON] unsigned char 
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;  regs            1    6[COMMON] PTR struct Mrf49InitReg_
  7565 ;;		 -> mrfRegset_Tx(8), mrfRegset_Rx(12), mrfRegset_Init(32), 
  7566 ;;  mrf49xaCfg      1    7[COMMON] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0, pclath, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 1E/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7576 ;;      Params:         1       0       0       0
  7577 ;;      Locals:         2       0       0       0
  7578 ;;      Temps:          2       0       0       0
  7579 ;;      Totals:         5       0       0       0
  7580 ;;Total ram usage:        5 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    2
  7583 ;; This function calls:
  7584 ;;		i1_Mrf49TxCmd
  7585 ;; This function is called by:
  7586 ;;		i1_Mrf49xaModeRx
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           
  7591                           ;psect for function i1_mrf49xaCfg
  7592  050A                     i1_mrf49xaCfg:	
  7593                           
  7594                           ;incstack = 0
  7595                           ; Regs used in i1_mrf49xaCfg: [wreg+status,2+status,0+pclath+cstack]
  7596                           ;i1mrf49xaCfg@regs stored from wreg
  7597  050A  00F6               	movwf	i1mrf49xaCfg@regs
  7598                           
  7599                           ;mrf49xa.c: 73: uint8_t k = 0;
  7600  050B  01F7               	clrf	i1mrf49xaCfg@k
  7601                           
  7602                           ;mrf49xa.c: 74: for (k = 0; k < count; k++) { if (regs[k].reg == 0x55) { _delay(40000); 
      +                          } else { Mrf49TxCmd(regs[k].reg, regs[k].val); } };
  7603  050C  01F7               	clrf	i1mrf49xaCfg@k
  7604  050D                     i1l2298:	
  7605  050D  0873               	movf	i1mrf49xaCfg@count,w
  7606  050E  0277               	subwf	i1mrf49xaCfg@k,w
  7607  050F  1803               	btfsc	3,0
  7608  0510  0008               	return
  7609  0511  0877               	movf	i1mrf49xaCfg@k,w
  7610  0512  00F4               	movwf	??i1_mrf49xaCfg
  7611  0513  35F4               	lslf	??i1_mrf49xaCfg,f
  7612  0514  0876               	movf	i1mrf49xaCfg@regs,w
  7613  0515  0774               	addwf	??i1_mrf49xaCfg,w
  7614  0516  3187               	movlp	high __stringtab
  7615  0517  000A               	callw
  7616  0518  3183               	pagesel	$	;select current page
  7617  0519  3A55               	xorlw	85
  7618  051A  1D03               	skipz
  7619  051B  2D26               	goto	i1l2294
  7620  051C  3034               	movlw	52
  7621  051D  00F5               	movwf	??i1_mrf49xaCfg+1
  7622  051E  30F1               	movlw	241
  7623  051F  00F4               	movwf	??i1_mrf49xaCfg
  7624  0520                     u201_27:	
  7625  0520  0BF4               	decfsz	??i1_mrf49xaCfg,f
  7626  0521  2D20               	goto	u201_27
  7627  0522  0BF5               	decfsz	??i1_mrf49xaCfg+1,f
  7628  0523  2D20               	goto	u201_27
  7629  0524  3200               	nop2
  7630  0525  2D3A               	goto	i1l2296
  7631  0526                     i1l2294:	
  7632  0526  0877               	movf	i1mrf49xaCfg@k,w
  7633  0527  00F4               	movwf	??i1_mrf49xaCfg
  7634  0528  35F4               	lslf	??i1_mrf49xaCfg,f
  7635  0529  0876               	movf	i1mrf49xaCfg@regs,w
  7636  052A  0774               	addwf	??i1_mrf49xaCfg,w
  7637  052B  3E01               	addlw	1
  7638  052C  3187               	movlp	high __stringtab
  7639  052D  000A               	callw
  7640  052E  00F1               	movwf	i1Mrf49TxCmd@val
  7641  052F  0877               	movf	i1mrf49xaCfg@k,w
  7642  0530  00F5               	movwf	??i1_mrf49xaCfg+1
  7643  0531  35F5               	lslf	??i1_mrf49xaCfg+1,f
  7644  0532  0876               	movf	i1mrf49xaCfg@regs,w
  7645  0533  0775               	addwf	??i1_mrf49xaCfg+1,w
  7646  0534  3187               	movlp	high __stringtab
  7647  0535  000A               	callw
  7648  0536  3183               	pagesel	$	;select current page
  7649  0537  3185  253C  3183   	fcall	i1_Mrf49TxCmd
  7650  053A                     i1l2296:	
  7651  053A  0AF7               	incf	i1mrf49xaCfg@k,f
  7652  053B  2D0D               	goto	i1l2298
  7653  053C                     __end_ofi1_mrf49xaCfg:	
  7654  053C                     __ptext40:	
  7655 ;; *************** function i1_Mrf49TxCmd *****************
  7656 ;; Defined at:
  7657 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  cmd             1    wreg     unsigned char 
  7660 ;;  val             1    1[COMMON] unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  cmd             1    2[COMMON] unsigned char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;		None               void
  7665 ;; Registers used:
  7666 ;;		wreg, status,2, status,0, pclath, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 1F/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7672 ;;      Params:         1       0       0       0
  7673 ;;      Locals:         1       0       0       0
  7674 ;;      Temps:          0       0       0       0
  7675 ;;      Totals:         2       0       0       0
  7676 ;;Total ram usage:        2 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    1
  7679 ;; This function calls:
  7680 ;;		i1_Mrf49SpiTx
  7681 ;; This function is called by:
  7682 ;;		i1_mrf49xaCfg
  7683 ;;		i1_Mrf49TxByte
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           
  7688                           ;psect for function i1_Mrf49TxCmd
  7689  053C                     i1_Mrf49TxCmd:	
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  7693                           ;i1Mrf49TxCmd@cmd stored from wreg
  7694  053C  00F2               	movwf	i1Mrf49TxCmd@cmd
  7695                           
  7696                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  7697  053D  0020               	movlb	0	; select bank0
  7698  053E  130E               	bcf	14,6	;volatile
  7699                           
  7700                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  7701  053F  0872               	movf	i1Mrf49TxCmd@cmd,w
  7702  0540  2546  3183         	fcall	i1_Mrf49SpiTx
  7703                           
  7704                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  7705  0542  0871               	movf	i1Mrf49TxCmd@val,w
  7706  0543  2546               	fcall	i1_Mrf49SpiTx
  7707                           
  7708                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  7709  0544  170E               	bsf	14,6	;volatile
  7710  0545  0008               	return
  7711  0546                     __end_ofi1_Mrf49TxCmd:	
  7712  0546                     __ptext44:	
  7713 ;; *************** function i1_Mrf49SpiTx *****************
  7714 ;; Defined at:
  7715 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  byte            1    wreg     unsigned char 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  byte            1    0[COMMON] unsigned char 
  7720 ;; Return value:  Size  Location     Type
  7721 ;;		None               void
  7722 ;; Registers used:
  7723 ;;		wreg
  7724 ;; Tracked objects:
  7725 ;;		On entry : 1F/0
  7726 ;;		On exit  : 1F/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7729 ;;      Params:         0       0       0       0
  7730 ;;      Locals:         1       0       0       0
  7731 ;;      Temps:          0       0       0       0
  7732 ;;      Totals:         1       0       0       0
  7733 ;;Total ram usage:        1 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; This function calls:
  7736 ;;		Nothing
  7737 ;; This function is called by:
  7738 ;;		i1_Mrf49TxCmd
  7739 ;;		i1_Mrf49RxCmd
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function i1_Mrf49SpiTx
  7745  0546                     i1_Mrf49SpiTx:	
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  7749                           ;i1Mrf49SpiTx@byte stored from wreg
  7750  0546  00F0               	movwf	i1Mrf49SpiTx@byte
  7751                           
  7752                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; PORTCbits.RC7 = 1; asm("nop");; PORTCbits.RC7 = 0; } while (0);;
  7753  0547  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  7754  0548  2D4B               	goto	i1l201
  7755  0549  178D               	bsf	13,7	;volatile
  7756  054A  2D4C               	goto	i1l202
  7757  054B                     i1l201:	
  7758  054B  138D               	bcf	13,7	;volatile
  7759  054C                     i1l202:	
  7760  054C  178E               	bsf	14,7	;volatile
  7761  054D  0000               	nop	;# 
  7762  054E  0020               	movlb	0	; select bank0
  7763  054F  138E               	bcf	14,7	;volatile
  7764  0550  1F70               	btfss	i1Mrf49SpiTx@byte,6
  7765  0551  2D54               	goto	i1l205
  7766  0552  178D               	bsf	13,7	;volatile
  7767  0553  2D55               	goto	i1l206
  7768  0554                     i1l205:	
  7769  0554  138D               	bcf	13,7	;volatile
  7770  0555                     i1l206:	
  7771  0555  178E               	bsf	14,7	;volatile
  7772  0556  0000               	nop	;# 
  7773  0557  0020               	movlb	0	; select bank0
  7774  0558  138E               	bcf	14,7	;volatile
  7775  0559  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  7776  055A  2D5D               	goto	i1l209
  7777  055B  178D               	bsf	13,7	;volatile
  7778  055C  2D5E               	goto	i1l210
  7779  055D                     i1l209:	
  7780  055D  138D               	bcf	13,7	;volatile
  7781  055E                     i1l210:	
  7782  055E  178E               	bsf	14,7	;volatile
  7783  055F  0000               	nop	;# 
  7784  0560  0020               	movlb	0	; select bank0
  7785  0561  138E               	bcf	14,7	;volatile
  7786  0562  1E70               	btfss	i1Mrf49SpiTx@byte,4
  7787  0563  2D66               	goto	i1l213
  7788  0564  178D               	bsf	13,7	;volatile
  7789  0565  2D67               	goto	i1l214
  7790  0566                     i1l213:	
  7791  0566  138D               	bcf	13,7	;volatile
  7792  0567                     i1l214:	
  7793  0567  178E               	bsf	14,7	;volatile
  7794  0568  0000               	nop	;# 
  7795  0569  0020               	movlb	0	; select bank0
  7796  056A  138E               	bcf	14,7	;volatile
  7797  056B  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  7798  056C  2D6F               	goto	i1l217
  7799  056D  178D               	bsf	13,7	;volatile
  7800  056E  2D70               	goto	i1l218
  7801  056F                     i1l217:	
  7802  056F  138D               	bcf	13,7	;volatile
  7803  0570                     i1l218:	
  7804  0570  178E               	bsf	14,7	;volatile
  7805  0571  0000               	nop	;# 
  7806  0572  0020               	movlb	0	; select bank0
  7807  0573  138E               	bcf	14,7	;volatile
  7808  0574  1D70               	btfss	i1Mrf49SpiTx@byte,2
  7809  0575  2D78               	goto	i1l221
  7810  0576  178D               	bsf	13,7	;volatile
  7811  0577  2D79               	goto	i1l222
  7812  0578                     i1l221:	
  7813  0578  138D               	bcf	13,7	;volatile
  7814  0579                     i1l222:	
  7815  0579  178E               	bsf	14,7	;volatile
  7816  057A  0000               	nop	;# 
  7817  057B  0020               	movlb	0	; select bank0
  7818  057C  138E               	bcf	14,7	;volatile
  7819  057D  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  7820  057E  2D81               	goto	i1l225
  7821  057F  178D               	bsf	13,7	;volatile
  7822  0580  2D82               	goto	i1l226
  7823  0581                     i1l225:	
  7824  0581  138D               	bcf	13,7	;volatile
  7825  0582                     i1l226:	
  7826  0582  178E               	bsf	14,7	;volatile
  7827  0583  0000               	nop	;# 
  7828  0584  0020               	movlb	0	; select bank0
  7829  0585  138E               	bcf	14,7	;volatile
  7830  0586  1C70               	btfss	i1Mrf49SpiTx@byte,0
  7831  0587  2D8A               	goto	i1l229
  7832  0588  178D               	bsf	13,7	;volatile
  7833  0589  2D8B               	goto	i1l230
  7834  058A                     i1l229:	
  7835  058A  138D               	bcf	13,7	;volatile
  7836  058B                     i1l230:	
  7837  058B  178E               	bsf	14,7	;volatile
  7838  058C  0000               	nop	;# 
  7839  058D  0020               	movlb	0	; select bank0
  7840  058E  138E               	bcf	14,7	;volatile
  7841                           
  7842                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7843  058F  138D               	bcf	13,7	;volatile
  7844  0590  0008               	return
  7845  0591                     __end_ofi1_Mrf49SpiTx:	


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     27      29
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwWrite@packetData	PTR unsigned int  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), NULL(NULL[0]), 

    handleFwWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), eepromTxByte@byte(COMMON[1]), 
		 -> NULL(NULL[0]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwRead@packet..(COMMON[21]), handleFwWrite@packet..(COMMON[21]), 
		 -> handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), NULL(NULL[0]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    mrf49xaCfg@regs	PTR struct Mrf49InitReg_s size(1) Largest target is 32
		 -> mrfRegset_Tx(CODE[8]), mrfRegset_Rx(CODE[12]), mrfRegset_Init(CODE[32]), 

    S328rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaModeRx->i1_mrf49xaCfg
    i1_mrf49xaCfg->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_mrf49xaCfg
    _HandlePacket->_handleFwWrite
    _handleFwWrite->_eepromRxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _handleFwRead->_eepromRxBytes
    _handleFwCmd->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaModeRx->_mrf49xaCfg
    _mrf49xaCfg->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13984
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SoftI2cInit
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SoftI2cInit                                          0     0      0      76
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   10279
                                             23 BANK0      4     4      0
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     952
                         _mrf49xaCfg
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0    9067
                                             19 BANK0      4     4      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
                       _handleFwRead
                      _handleFwWrite
 ---------------------------------------------------------------------------------
 (3) _handleFwWrite                                        8     8      0    2653
                                             11 BANK0      8     8      0
                      _eepromRxBytes
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromTxBytes                                        4     0      4     661
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _handleFwRead                                         3     3      0    1745
                                             11 BANK0      3     3      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1788
                                             11 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1598
                                              7 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (2) _SoftI2cTxByte                                        3     3      0      76
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        6     6      0     114
                                              1 BANK0      6     6      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1318
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxPacket                                      6     4      2    1128
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    3629
                                             10 BANK0      3     3      0
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                         _mrf49xaCfg
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0    1725
                                              8 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     952
                         _mrf49xaCfg
 ---------------------------------------------------------------------------------
 (3) _mrf49xaCfg                                           5     4      1     952
                                              3 BANK0      5     4      1
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     420
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     398
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               1     1      0    1124
                                             10 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1124
                                              8 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     477
                       i1_mrf49xaCfg
 ---------------------------------------------------------------------------------
 (10) i1_mrf49xaCfg                                        5     4      1     477
                                              3 COMMON     5     4      1
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49xaModeRx
       _mrf49xaCfg
         _Mrf49TxCmd
           _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _mrf49xaCfg
           _Mrf49TxCmd
             _Mrf49SpiTx
     _mrf49xaCfg
       _Mrf49TxCmd
         _Mrf49SpiTx
   _Mrf49xaTick
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwRead
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwWrite
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
         _eepromTxBytes
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaModeTx
       _mrf49xaCfg
         _Mrf49TxCmd
           _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
   _SoftI2cInit
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_mrf49xaCfg
         i1_Mrf49TxCmd
           i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      77       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1B      1D       6       36.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      77      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat May 17 17:36:17 2014

           Mrf49xaTxPacket@crc 0023                              pc 0002                    __CFG_CP$OFF 0000  
                           PL2 0721                             PL4 03D0                             PL6 073C  
                           PL8 03DE                             l32 0650                             l42 06B6  
                           l34 065A                             l35 065C                             l39 068A  
                  __CFG_LVP$ON 0000          Mrf49xaTxPacket@packet 0025                            l201 021E  
                          l210 0231                            l202 021F                            l221 024B  
                          l213 0239                            l205 0227                            l230 025E  
                          l222 024C                            l214 023A                            l206 0228  
                          l225 0254                            l217 0242                            l209 0230  
                          l321 070F                            l226 0255                            l218 0243  
                          l229 025D                            l356 00BF                            l378 010A  
                          l379 0122                            l469 0329                            l485 02DF  
                 __CFG_BORV$LO 0000                            wreg 0009                   __CFG_IESO$ON 0000  
       ??_SoftI2cRepeatedStart 0021                           S2764 077E         Mrf49xaTxPacket@needAck 0021  
                         l2104 06EB                           l2114 06F6                           l2062 01F9  
                         l2134 06FD                           l2150 0629                           l2064 020D  
                         l2160 064C                           l2066 01E0                           l2410 01A8  
                         l2146 071D                           l2170 061A                           l2332 0126  
                         l2324 010D                           l2172 0628                           l2406 01A6  
                         l2342 0134                           l2414 01B9                           l2158 063B  
                         l2246 0341                           l2238 032A                           l2336 012B  
                         l2416 01C5                           l2328 0116                           l2088 06E8  
                         l2338 012E                           l2274 05C8                           l2380 0177  
                         l2604 00AC                           l2366 0155                           l2358 0149  
                         l2446 037C                           l2392 018A                           l2376 016B  
                         l2472 02E6                           l2464 02D5                           l2560 0056  
                         l2394 0192                           l2386 017F                           l2546 00FA  
                         l2466 02DB                           l2458 02C0                           l2482 02EF  
                         l2562 005A                           l2396 0196                           l2388 0183  
                         l2492 0319                           l2476 02EB                           l2468 02E2  
                         l2484 030A                           l2556 004C                           l2398 019A  
                         l1846 06C8                           l2566 0063                           l2582 008E  
                         l2742 0031                           l1928 05E9                           l2488 0314  
                         l2568 0065                           l2594 00A2                           l2578 0082  
                         l1972 06A4                           l2596 00A3                           l1982 06B8  
              Mrf49TxByte@byte 0023                           u2007 01F3                           u1094 069F  
                         u1095 069C                           u1957 0089                           u1967 00B1  
                         u1977 06CB                           u1987 00D7                           u1997 00E6  
                  mrf49xaCfg@k 0027                   __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000  
                         _main 0022                __end_of_AdcInit 02B2                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 0014                           ttemp 007E  
                         wtemp 007E           __end_of_HandlePacket 031B        __end_ofi1_Mrf49xaModeRx 04CB  
                __CFG_MCLRE$ON 0000            __end_of_Mrf49RxByte 01D1            __end_of_Mrf49TxByte 01CF  
              ??_eepromRxBytes 002B                ??_eepromTxBytes 0028            __end_of_Mrf49xaInit 0100  
          __end_of_Mrf49xaTick 00C3           _Mrf49xaPacketPending 036B                          ?_main 0070  
                __CFG_WDTE$OFF 0000          __size_ofi1_mrf49xaCfg 0032                          i1l201 054B  
                        i1l210 055E                          i1l202 054C                          i1l131 0011  
                        i1l221 0578                          i1l213 0566                          i1l205 0554  
                        i1l230 058B                          i1l222 0579                          i1l214 0567  
                        i1l206 0555                          i1l225 0581                          i1l217 056F  
                        i1l209 055D                          i1l226 0582                          i1l218 0570  
                        i1l229 058A                          i1l378 03F8                          i1l379 0410  
                   _Mrf49RxCmd 00C3                     _Mrf49TxCmd 0210                     _Mrf49SpiRx 026F  
                   _Mrf49SpiTx 0219                     _Mrf49RxSts 0264          __end_of_SoftI2cRxByte 06C8  
        __end_of_SoftI2cTxByte 067E        Mrf49xaTxPacket@response 0020                 __CFG_BOREN$OFF 0000  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __initialization 0016                     _ExtIntInit 02B2  
                 __end_of_main 0034                   i1_mrf49xaCfg 050A           __end_of_handleFwRead 036B  
               __CFG_LPBOR$OFF 0000          ?_Mrf49xaPacketPending 0070                         ??_main 003B  
         __size_of_handleFwCmd 0034           __end_of_Mrf49xaTxAck 03C3           __end_of_Mrf49xaServe 01CA  
          HandlePacket@sendAck 0034                         _ADCON0 009D                         _ADCON1 009E  
                       _ADCON2 009F            HandlePacket@sendMsg 0035                      ??_AdcInit 0020  
                       _ANSELA 018C                         _ANSELB 018D                         _ANSELC 018E  
           i1Mrf49xaServe@data 0079                         i1l2700 0480                         i1l2294 0526  
                       i1l2702 0484                         i1l2630 03FB                         u201_27 0520  
                       i1l2296 053A                         i1l2712 0494                         i1l2704 0488  
                       i1l2720 04A7                         i1l2298 050D                         i1l2642 0419  
                       i1l2722 04B3                         i1l2634 0404                         i1l2716 0496  
                       i1l2644 041C                         i1l2638 0414                         i1l2672 0444  
                       i1l2664 0438                         i1l2648 0422                         i1l2682 045B  
                       i1l2692 046D                         i1l2684 0463                         i1l2694 0471  
                       i1l2686 0465                         i1l2698 0478                         _FVRCON 0117  
                       _OSCCON 0099                    _Mrf49RxByte 01CF                    _Mrf49TxByte 01CA  
                ??_SoftI2cInit 0024                  ??_SoftI2cStop 0021                 __CFG_PWRTE$OFF 0000  
                   _SoftI2cNop 06C8               ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 00CD  
                  _Mrf49xaTick 0034                _Mrf49xaRxPacket 0375                 __CFG_STVREN$ON 0000  
              _Mrf49xaTxPacket 06DB                         _extInt 0004                    ?_Mrf49RxCmd 0070  
                  ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070  
                  ?_Mrf49RxSts 0070          __size_of_HandlePacket 005F        __end_of__initialization 0020  
        __end_ofi1_Mrf49RxByte 04C0          __end_ofi1_Mrf49TxByte 04BD                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070               SoftI2cRxByte@ack 0024            __end_of_SoftI2cInit 059C  
          __end_of_SoftI2cStop 05F8         ??_Mrf49xaPacketPending 0020        __size_ofi1_Mrf49xaServe 00CA  
                   __end_ofPL2 073C                     __end_ofPL4 03DE                     __end_ofPL6 0746  
                   __end_ofPL8 03E4          __end_of_handleFwWrite 05E9                 _OPTION_REGbits 0095  
                 _HandlePacket 02BC        Mrf49xaFreePacket@packet 0020                  ??_SysInitGpio 0020  
                   __pbssBANK0 003B                     __pbssBANK1 00A0                  ?_SoftI2cStart 0070  
      __end_of_Mrf49xaRxPacket 0383              i1mrf49xaCfg@count 0073        __end_of_Mrf49xaTxPacket 0721  
        __size_of_handleFwRead 001C          __end_of_Mrf49xaModeRx 01DD          __end_of_Mrf49xaModeTx 03D0  
                  ?_SoftI2cNop 0070            __size_of_Mrf49RxCmd 000A            __size_of_Mrf49TxCmd 0009  
          __size_of_Mrf49SpiRx 0034            __size_of_Mrf49SpiTx 004B            __size_of_Mrf49RxSts 000B  
                   __pmaintext 0022                     __pintentry 0004                        ?_extInt 0070  
        __size_of_Mrf49xaTxAck 0021          __size_of_Mrf49xaServe 00CA              handleFwCmd@packet 002B  
               mrf49xaCfg@regs 0026                     _mrf49xaCfg 01DD                        _AdcInit 02A3  
          __size_of_ExtIntInit 0005  __size_of_SoftI2cRepeatedStart 0015                     __stringtab 0746  
                 _handleFwRead 034F                 ??_SoftI2cStart 0021                    _SoftI2cInit 0591  
                ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070  
                ?i1_Mrf49SpiTx 0070                    _SoftI2cStop 05E9                  ?i1_Mrf49RxSts 0070  
          __end_of_SysInitGpio 03A2                   _Mrf49xaTxAck 03A2                   _Mrf49xaServe 0100  
         eepromRxBytes@address 0027          __end_of_eepromRxBytes 064D          __end_of_eepromTxBytes 0629  
              __size_of_extInt 0010              _mrfRegset_InitCnt 0747                        __ptext1 0383  
                      __ptext2 0591                        __ptext3 0034                        __ptext4 0375  
                      __ptext5 036B                        __ptext6 03C3                        __ptext7 02BC  
                      __ptext8 059C                        __ptext9 060D            handleFwWrite@packet 0032  
          __size_of_SoftI2cNop 0006                        clrloop0 078F           end_of_initialization 0020  
                 ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070                 ??i1_Mrf49RxCmd 0071  
               ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070                 ??i1_Mrf49SpiTx 0070  
               ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070               ?_Mrf49xaTxPacket 0020  
                 ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 0776           __end_of_mrfRegset_Tx 077E  
                 ?_Mrf49xaTick 0070         __size_of_SoftI2cRxByte 004A         __size_of_SoftI2cTxByte 0031  
               i1_Mrf49xaServe 03EE      __end_of_mrfRegset_InitCnt 0748                  ??_handleFwCmd 002B  
                    _PORTAbits 000C                      _PORTBbits 000D                      _PORTCbits 000E  
                 ??_Mrf49RxCmd 0021                   ??_Mrf49TxCmd 0022                   ??_Mrf49SpiRx 0020  
                 ??_Mrf49SpiTx 0020                   ??_Mrf49RxSts 0021               __CFG_FOSC$INTOSC 0000  
                    _TRISAbits 008C                      _TRISBbits 008D                      _TRISCbits 008E  
                  ?_mrf49xaCfg 0023                    _SysInitGpio 0383                 Mrf49SpiRx@data 0020  
               Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 00CD             __end_of_Mrf49TxCmd 0219  
       __end_ofi1_Mrf49xaServe 04B8                   ??_ExtIntInit 0020             __end_of_Mrf49SpiRx 02A3  
           __end_of_Mrf49SpiTx 0264             __end_of_Mrf49RxSts 026F              SoftI2cRxByte@data 0025  
            eepromRxBytes@data 0029           __end_of_SoftI2cStart 06DB       __size_ofi1_Mrf49xaModeRx 000B  
               __end_of_extInt 0014              eepromRxBytes@size 002A            start_initialization 0016  
                _SoftI2cRxByte 067E            __end_of_handleFwCmd 034F                  _SoftI2cTxByte 064D  
               handleFwWrite@i 002F             __end_of_ExtIntInit 02B7              SoftI2cTxByte@data 0022  
                i1mrf49xaCfg@k 0077             HandlePacket@packet 0036                   ??_SoftI2cNop 0020  
              ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0748                _mrfRegset_TxCnt 0749  
          __size_of_mrf49xaCfg 0033                       ??_extInt 007A  __size_of_Mrf49xaPacketPending 000A  
            eepromTxBytes@data 0026              eepromTxBytes@size 0027         __size_ofi1_Mrf49RxByte 0003  
       __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 03EE           __end_ofi1_Mrf49TxCmd 0546  
         __end_ofi1_Mrf49SpiRx 050A           __end_ofi1_Mrf49SpiTx 0591           __end_ofi1_Mrf49RxSts 04D6  
                    ___latbits 0001                  __pcstackBANK0 0020                 ?_SoftI2cRxByte 0070  
               ?_SoftI2cTxByte 0070              i1Mrf49TxByte@byte 0073             __end_of_SoftI2cNop 06CE  
                     ?_AdcInit 0070                   _rfTrcvStatus 00A0                   ?_SoftI2cInit 0070  
                 ?_SoftI2cStop 0070         __size_of_handleFwWrite 004D           __size_of_Mrf49RxByte 0002  
         __size_of_Mrf49TxByte 0005               i1mrf49xaCfg@regs 0076   __end_of_SoftI2cRepeatedStart 060D  
                ?i1_mrf49xaCfg 0073           __size_of_Mrf49xaInit 0033           __size_of_Mrf49xaTick 008F  
                    __pstrings 0746                      __pswtext1 077E                    _handleFwCmd 031B  
       __size_of_Mrf49xaModeRx 000C         __size_of_Mrf49xaModeTx 000D                   _mrfRegset_Rx 076A  
                 _mrfRegset_Tx 0776              ??i1_Mrf49xaModeRx 0078                       _LATAbits 010C  
                     _LATBbits 010D                       _LATCbits 010E                  i1_Mrf49RxByte 04BD  
      __end_of_mrfRegset_RxCnt 0749                  i1_Mrf49TxByte 04B8        __end_of_mrfRegset_TxCnt 074A  
                    clear_ram0 078E                    _mrf49Status 003B              _Mrf49xaFreePacket 02B7  
               ??i1_mrf49xaCfg 0074                mrf49xaCfg@count 0023          __size_of_SoftI2cStart 000D  
                Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070                  Mrf49RxCmd@val 0022  
                Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021            ??_Mrf49xaFreePacket 0020  
              ??_SoftI2cRxByte 0021                  _handleFwWrite 059C                ??_SoftI2cTxByte 0021  
                     _WPUAbits 020C                   ??_mrf49xaCfg 0024               __size_of_AdcInit 000F  
                 ?_SysInitGpio 0070        handleFwWrite@packetData 002E         __size_of_eepromRxBytes 0024  
               ?i1_Mrf49RxByte 0070         __size_of_eepromTxBytes 001C                   _SoftI2cStart 06CE  
               ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 02BC                  _Mrf49xaModeRx 01D1  
                _Mrf49xaModeTx 03C3                 _mrfRegset_Init 074A             __end_of_mrf49xaCfg 0210  
     __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000A          __size_ofi1_Mrf49TxCmd 000A  
        __size_ofi1_Mrf49SpiRx 0034          __size_ofi1_Mrf49SpiTx 004B               i1Mrf49SpiRx@data 0070  
        __size_ofi1_Mrf49RxSts 000B       __size_of_Mrf49xaTxPacket 0046               i1Mrf49SpiTx@byte 0070  
               SoftI2cRxByte@i 0026             __end_of__stringtab 0747                 ?_handleFwWrite 0070  
               SoftI2cTxByte@i 0023                  ?_HandlePacket 0070           handleFwWrite@address 0030  
                     __ptext10 034F                       __ptext11 031B                       __ptext20 06DB  
                     __ptext12 0629                       __ptext21 02B7                       __ptext13 064D  
                     __ptext30 00C3                       __ptext22 00CD                       __ptext14 05E9  
                     __ptext31 0219                       __ptext23 0100                       __ptext15 06CE  
                     __ptext40 053C                       __ptext32 026F                       __ptext24 01D1  
                     __ptext16 067E                       __ptext41 04CB                       __ptext33 02B2  
                     __ptext25 01DD                       __ptext17 05F8                       __ptext42 04BD  
                     __ptext34 02A3                       __ptext26 01CA                       __ptext18 06C8  
                     __ptext43 03E4                       __ptext27 0210                       __ptext19 03A2  
                     __ptext44 0546                       __ptext36 03EE                       __ptext28 0264  
                     __ptext45 04D6                       __ptext37 04C0                       __ptext29 01CF  
                     __ptext38 050A                       __ptext39 04B8           _SoftI2cRepeatedStart 05F8  
          handleFwRead@address 002B               ??i1_Mrf49xaServe 0078                  __size_of_main 0012  
                 i1_Mrf49RxCmd 03E4         __end_of_mrfRegset_Init 076A             Mrf49xaTxAck@packet 0026  
                 i1_Mrf49TxCmd 053C                   i1_Mrf49SpiRx 04D6                   i1_Mrf49SpiTx 0546  
               ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070                   i1_Mrf49RxSts 04CB  
         __size_of_SoftI2cInit 000B           __size_of_SoftI2cStop 000F                  _eepromRxBytes 0629  
                _eepromTxBytes 060D                i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072  
               ??_HandlePacket 0033             Mrf49xaTick@timeout 0039                     _INTCONbits 000B  
              i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071           __end_ofi1_mrf49xaCfg 053C  
        ?_SoftI2cRepeatedStart 0070                  ?_handleFwRead 0070                ??i1_Mrf49RxByte 0073  
                     intlevel1 0000                ??i1_Mrf49TxByte 0073   __end_of_Mrf49xaPacketPending 0375  
            __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005                  ?_Mrf49xaTxAck 0070  
           handleFwRead@packet 002D                  ?_Mrf49xaServe 0070              Mrf49xaTick@packet 003A  
               ?_eepromRxBytes 0027           eepromTxBytes@address 0024                i1_Mrf49xaModeRx 04C0  
               ?_eepromTxBytes 0024                ??_handleFwWrite 002B                   ?_handleFwCmd 0070  
            ??_Mrf49xaRxPacket 0020              ??_Mrf49xaTxPacket 0022                 ??_handleFwRead 002B  
                ??_Mrf49RxByte 0023                  ??_Mrf49TxByte 0023                ??_Mrf49xaModeRx 0028  
              ??_Mrf49xaModeTx 0028           __size_of_SysInitGpio 001F                 ??_Mrf49xaTxAck 0026  
             Mrf49xaServe@data 0029                 ??_Mrf49xaServe 0028                  ??_Mrf49xaInit 002A  
                ??_Mrf49xaTick 0037               Mrf49xaTxPacket@i 0024  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Fri Sep  5 20:04:57 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text16,local,class=CODE,merge=1,delta=2
    17                           	psect	text18,local,class=CODE,merge=1,delta=2
    18                           	psect	text50,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text74,local,class=CODE,merge=1,delta=2
    21                           	psect	text77,local,class=CODE,merge=1,delta=2
    22                           	psect	pa_nodes,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0015                     	;# 
    43  0016                     	;# 
    44  0016                     	;# 
    45  0017                     	;# 
    46  0018                     	;# 
    47  0019                     	;# 
    48  001A                     	;# 
    49  001B                     	;# 
    50  001C                     	;# 
    51  008C                     	;# 
    52  008D                     	;# 
    53  008E                     	;# 
    54  0091                     	;# 
    55  0092                     	;# 
    56  0093                     	;# 
    57  0095                     	;# 
    58  0096                     	;# 
    59  0097                     	;# 
    60  0099                     	;# 
    61  009A                     	;# 
    62  009B                     	;# 
    63  009B                     	;# 
    64  009C                     	;# 
    65  009D                     	;# 
    66  009E                     	;# 
    67  009F                     	;# 
    68  010C                     	;# 
    69  010D                     	;# 
    70  010E                     	;# 
    71  0111                     	;# 
    72  0112                     	;# 
    73  0113                     	;# 
    74  0114                     	;# 
    75  0115                     	;# 
    76  0116                     	;# 
    77  0117                     	;# 
    78  0118                     	;# 
    79  0119                     	;# 
    80  011D                     	;# 
    81  018C                     	;# 
    82  018D                     	;# 
    83  018E                     	;# 
    84  0191                     	;# 
    85  0191                     	;# 
    86  0192                     	;# 
    87  0193                     	;# 
    88  0193                     	;# 
    89  0194                     	;# 
    90  0195                     	;# 
    91  0196                     	;# 
    92  0199                     	;# 
    93  019A                     	;# 
    94  019B                     	;# 
    95  019B                     	;# 
    96  019C                     	;# 
    97  019D                     	;# 
    98  019E                     	;# 
    99  019F                     	;# 
   100  020C                     	;# 
   101  020D                     	;# 
   102  0211                     	;# 
   103  0211                     	;# 
   104  0212                     	;# 
   105  0212                     	;# 
   106  0213                     	;# 
   107  0213                     	;# 
   108  0214                     	;# 
   109  0214                     	;# 
   110  0215                     	;# 
   111  0215                     	;# 
   112  0215                     	;# 
   113  0216                     	;# 
   114  0216                     	;# 
   115  0217                     	;# 
   116  0217                     	;# 
   117  0391                     	;# 
   118  0392                     	;# 
   119  0393                     	;# 
   120  0394                     	;# 
   121  0395                     	;# 
   122  0396                     	;# 
   123  0498                     	;# 
   124  0498                     	;# 
   125  0499                     	;# 
   126  049A                     	;# 
   127  049B                     	;# 
   128  049B                     	;# 
   129  049C                     	;# 
   130  049E                     	;# 
   131  049F                     	;# 
   132  0611                     	;# 
   133  0612                     	;# 
   134  0613                     	;# 
   135  0613                     	;# 
   136  0614                     	;# 
   137  0615                     	;# 
   138  0616                     	;# 
   139  0616                     	;# 
   140  0617                     	;# 
   141  0618                     	;# 
   142  0619                     	;# 
   143  0619                     	;# 
   144  061A                     	;# 
   145  061B                     	;# 
   146  061C                     	;# 
   147  061C                     	;# 
   148  0691                     	;# 
   149  0692                     	;# 
   150  0693                     	;# 
   151  0694                     	;# 
   152  0695                     	;# 
   153  0F0F                     	;# 
   154  0F10                     	;# 
   155  0F11                     	;# 
   156  0F12                     	;# 
   157  0F13                     	;# 
   158  0F14                     	;# 
   159  0F15                     	;# 
   160  0F16                     	;# 
   161  0F17                     	;# 
   162  0F18                     	;# 
   163  0F19                     	;# 
   164  0F1A                     	;# 
   165  0F1B                     	;# 
   166  0F1C                     	;# 
   167  0F1D                     	;# 
   168  0F1E                     	;# 
   169  0F1F                     	;# 
   170  0F20                     	;# 
   171  0F21                     	;# 
   172  0F22                     	;# 
   173  0F23                     	;# 
   174  0F24                     	;# 
   175  0F25                     	;# 
   176  0F26                     	;# 
   177  0F27                     	;# 
   178  0F28                     	;# 
   179  0F29                     	;# 
   180  0F2A                     	;# 
   181  0F2B                     	;# 
   182  0F2C                     	;# 
   183  0F2D                     	;# 
   184  0F2E                     	;# 
   185  0F2F                     	;# 
   186  0F8C                     	;# 
   187  0F8D                     	;# 
   188  0F91                     	;# 
   189  0F95                     	;# 
   190  0F96                     	;# 
   191  0F97                     	;# 
   192  0F9C                     	;# 
   193  0F9D                     	;# 
   194  0F9E                     	;# 
   195  0FE3                     	;# 
   196  0FE4                     	;# 
   197  0FE5                     	;# 
   198  0FE6                     	;# 
   199  0FE7                     	;# 
   200  0FE8                     	;# 
   201  0FE9                     	;# 
   202  0FEA                     	;# 
   203  0FEB                     	;# 
   204  0FED                     	;# 
   205  0FEE                     	;# 
   206  0FEF                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0015                     	;# 
   226  0016                     	;# 
   227  0016                     	;# 
   228  0017                     	;# 
   229  0018                     	;# 
   230  0019                     	;# 
   231  001A                     	;# 
   232  001B                     	;# 
   233  001C                     	;# 
   234  008C                     	;# 
   235  008D                     	;# 
   236  008E                     	;# 
   237  0091                     	;# 
   238  0092                     	;# 
   239  0093                     	;# 
   240  0095                     	;# 
   241  0096                     	;# 
   242  0097                     	;# 
   243  0099                     	;# 
   244  009A                     	;# 
   245  009B                     	;# 
   246  009B                     	;# 
   247  009C                     	;# 
   248  009D                     	;# 
   249  009E                     	;# 
   250  009F                     	;# 
   251  010C                     	;# 
   252  010D                     	;# 
   253  010E                     	;# 
   254  0111                     	;# 
   255  0112                     	;# 
   256  0113                     	;# 
   257  0114                     	;# 
   258  0115                     	;# 
   259  0116                     	;# 
   260  0117                     	;# 
   261  0118                     	;# 
   262  0119                     	;# 
   263  011D                     	;# 
   264  018C                     	;# 
   265  018D                     	;# 
   266  018E                     	;# 
   267  0191                     	;# 
   268  0191                     	;# 
   269  0192                     	;# 
   270  0193                     	;# 
   271  0193                     	;# 
   272  0194                     	;# 
   273  0195                     	;# 
   274  0196                     	;# 
   275  0199                     	;# 
   276  019A                     	;# 
   277  019B                     	;# 
   278  019B                     	;# 
   279  019C                     	;# 
   280  019D                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  0211                     	;# 
   286  0211                     	;# 
   287  0212                     	;# 
   288  0212                     	;# 
   289  0213                     	;# 
   290  0213                     	;# 
   291  0214                     	;# 
   292  0214                     	;# 
   293  0215                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0216                     	;# 
   297  0216                     	;# 
   298  0217                     	;# 
   299  0217                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  0393                     	;# 
   303  0394                     	;# 
   304  0395                     	;# 
   305  0396                     	;# 
   306  0498                     	;# 
   307  0498                     	;# 
   308  0499                     	;# 
   309  049A                     	;# 
   310  049B                     	;# 
   311  049B                     	;# 
   312  049C                     	;# 
   313  049E                     	;# 
   314  049F                     	;# 
   315  0611                     	;# 
   316  0612                     	;# 
   317  0613                     	;# 
   318  0613                     	;# 
   319  0614                     	;# 
   320  0615                     	;# 
   321  0616                     	;# 
   322  0616                     	;# 
   323  0617                     	;# 
   324  0618                     	;# 
   325  0619                     	;# 
   326  0619                     	;# 
   327  061A                     	;# 
   328  061B                     	;# 
   329  061C                     	;# 
   330  061C                     	;# 
   331  0691                     	;# 
   332  0692                     	;# 
   333  0693                     	;# 
   334  0694                     	;# 
   335  0695                     	;# 
   336  0F0F                     	;# 
   337  0F10                     	;# 
   338  0F11                     	;# 
   339  0F12                     	;# 
   340  0F13                     	;# 
   341  0F14                     	;# 
   342  0F15                     	;# 
   343  0F16                     	;# 
   344  0F17                     	;# 
   345  0F18                     	;# 
   346  0F19                     	;# 
   347  0F1A                     	;# 
   348  0F1B                     	;# 
   349  0F1C                     	;# 
   350  0F1D                     	;# 
   351  0F1E                     	;# 
   352  0F1F                     	;# 
   353  0F20                     	;# 
   354  0F21                     	;# 
   355  0F22                     	;# 
   356  0F23                     	;# 
   357  0F24                     	;# 
   358  0F25                     	;# 
   359  0F26                     	;# 
   360  0F27                     	;# 
   361  0F28                     	;# 
   362  0F29                     	;# 
   363  0F2A                     	;# 
   364  0F2B                     	;# 
   365  0F2C                     	;# 
   366  0F2D                     	;# 
   367  0F2E                     	;# 
   368  0F2F                     	;# 
   369  0F8C                     	;# 
   370  0F8D                     	;# 
   371  0F91                     	;# 
   372  0F95                     	;# 
   373  0F96                     	;# 
   374  0F97                     	;# 
   375  0F9C                     	;# 
   376  0F9D                     	;# 
   377  0F9E                     	;# 
   378  0FE3                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0013                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0093                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  009F                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  0111                     	;# 
   438  0112                     	;# 
   439  0113                     	;# 
   440  0114                     	;# 
   441  0115                     	;# 
   442  0116                     	;# 
   443  0117                     	;# 
   444  0118                     	;# 
   445  0119                     	;# 
   446  011D                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  018E                     	;# 
   450  0191                     	;# 
   451  0191                     	;# 
   452  0192                     	;# 
   453  0193                     	;# 
   454  0193                     	;# 
   455  0194                     	;# 
   456  0195                     	;# 
   457  0196                     	;# 
   458  0199                     	;# 
   459  019A                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019D                     	;# 
   464  019E                     	;# 
   465  019F                     	;# 
   466  020C                     	;# 
   467  020D                     	;# 
   468  0211                     	;# 
   469  0211                     	;# 
   470  0212                     	;# 
   471  0212                     	;# 
   472  0213                     	;# 
   473  0213                     	;# 
   474  0214                     	;# 
   475  0214                     	;# 
   476  0215                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0216                     	;# 
   480  0216                     	;# 
   481  0217                     	;# 
   482  0217                     	;# 
   483  0391                     	;# 
   484  0392                     	;# 
   485  0393                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0498                     	;# 
   490  0498                     	;# 
   491  0499                     	;# 
   492  049A                     	;# 
   493  049B                     	;# 
   494  049B                     	;# 
   495  049C                     	;# 
   496  049E                     	;# 
   497  049F                     	;# 
   498  0611                     	;# 
   499  0612                     	;# 
   500  0613                     	;# 
   501  0613                     	;# 
   502  0614                     	;# 
   503  0615                     	;# 
   504  0616                     	;# 
   505  0616                     	;# 
   506  0617                     	;# 
   507  0618                     	;# 
   508  0619                     	;# 
   509  0619                     	;# 
   510  061A                     	;# 
   511  061B                     	;# 
   512  061C                     	;# 
   513  061C                     	;# 
   514  0691                     	;# 
   515  0692                     	;# 
   516  0693                     	;# 
   517  0694                     	;# 
   518  0695                     	;# 
   519  0F0F                     	;# 
   520  0F10                     	;# 
   521  0F11                     	;# 
   522  0F12                     	;# 
   523  0F13                     	;# 
   524  0F14                     	;# 
   525  0F15                     	;# 
   526  0F16                     	;# 
   527  0F17                     	;# 
   528  0F18                     	;# 
   529  0F19                     	;# 
   530  0F1A                     	;# 
   531  0F1B                     	;# 
   532  0F1C                     	;# 
   533  0F1D                     	;# 
   534  0F1E                     	;# 
   535  0F1F                     	;# 
   536  0F20                     	;# 
   537  0F21                     	;# 
   538  0F22                     	;# 
   539  0F23                     	;# 
   540  0F24                     	;# 
   541  0F25                     	;# 
   542  0F26                     	;# 
   543  0F27                     	;# 
   544  0F28                     	;# 
   545  0F29                     	;# 
   546  0F2A                     	;# 
   547  0F2B                     	;# 
   548  0F2C                     	;# 
   549  0F2D                     	;# 
   550  0F2E                     	;# 
   551  0F2F                     	;# 
   552  0F8C                     	;# 
   553  0F8D                     	;# 
   554  0F91                     	;# 
   555  0F95                     	;# 
   556  0F96                     	;# 
   557  0F97                     	;# 
   558  0F9C                     	;# 
   559  0F9D                     	;# 
   560  0F9E                     	;# 
   561  0FE3                     	;# 
   562  0FE4                     	;# 
   563  0FE5                     	;# 
   564  0FE6                     	;# 
   565  0FE7                     	;# 
   566  0FE8                     	;# 
   567  0FE9                     	;# 
   568  0FEA                     	;# 
   569  0FEB                     	;# 
   570  0FED                     	;# 
   571  0FEE                     	;# 
   572  0FEF                     	;# 
   573  0000                     	;# 
   574  0001                     	;# 
   575  0002                     	;# 
   576  0003                     	;# 
   577  0004                     	;# 
   578  0005                     	;# 
   579  0006                     	;# 
   580  0007                     	;# 
   581  0008                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0015                     	;# 
   592  0016                     	;# 
   593  0016                     	;# 
   594  0017                     	;# 
   595  0018                     	;# 
   596  0019                     	;# 
   597  001A                     	;# 
   598  001B                     	;# 
   599  001C                     	;# 
   600  008C                     	;# 
   601  008D                     	;# 
   602  008E                     	;# 
   603  0091                     	;# 
   604  0092                     	;# 
   605  0093                     	;# 
   606  0095                     	;# 
   607  0096                     	;# 
   608  0097                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  009F                     	;# 
   617  010C                     	;# 
   618  010D                     	;# 
   619  010E                     	;# 
   620  0111                     	;# 
   621  0112                     	;# 
   622  0113                     	;# 
   623  0114                     	;# 
   624  0115                     	;# 
   625  0116                     	;# 
   626  0117                     	;# 
   627  0118                     	;# 
   628  0119                     	;# 
   629  011D                     	;# 
   630  018C                     	;# 
   631  018D                     	;# 
   632  018E                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0194                     	;# 
   639  0195                     	;# 
   640  0196                     	;# 
   641  0199                     	;# 
   642  019A                     	;# 
   643  019B                     	;# 
   644  019B                     	;# 
   645  019C                     	;# 
   646  019D                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  020C                     	;# 
   650  020D                     	;# 
   651  0211                     	;# 
   652  0211                     	;# 
   653  0212                     	;# 
   654  0212                     	;# 
   655  0213                     	;# 
   656  0213                     	;# 
   657  0214                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0216                     	;# 
   663  0216                     	;# 
   664  0217                     	;# 
   665  0217                     	;# 
   666  0391                     	;# 
   667  0392                     	;# 
   668  0393                     	;# 
   669  0394                     	;# 
   670  0395                     	;# 
   671  0396                     	;# 
   672  0498                     	;# 
   673  0498                     	;# 
   674  0499                     	;# 
   675  049A                     	;# 
   676  049B                     	;# 
   677  049B                     	;# 
   678  049C                     	;# 
   679  049E                     	;# 
   680  049F                     	;# 
   681  0611                     	;# 
   682  0612                     	;# 
   683  0613                     	;# 
   684  0613                     	;# 
   685  0614                     	;# 
   686  0615                     	;# 
   687  0616                     	;# 
   688  0616                     	;# 
   689  0617                     	;# 
   690  0618                     	;# 
   691  0619                     	;# 
   692  0619                     	;# 
   693  061A                     	;# 
   694  061B                     	;# 
   695  061C                     	;# 
   696  061C                     	;# 
   697  0691                     	;# 
   698  0692                     	;# 
   699  0693                     	;# 
   700  0694                     	;# 
   701  0695                     	;# 
   702  0F0F                     	;# 
   703  0F10                     	;# 
   704  0F11                     	;# 
   705  0F12                     	;# 
   706  0F13                     	;# 
   707  0F14                     	;# 
   708  0F15                     	;# 
   709  0F16                     	;# 
   710  0F17                     	;# 
   711  0F18                     	;# 
   712  0F19                     	;# 
   713  0F1A                     	;# 
   714  0F1B                     	;# 
   715  0F1C                     	;# 
   716  0F1D                     	;# 
   717  0F1E                     	;# 
   718  0F1F                     	;# 
   719  0F20                     	;# 
   720  0F21                     	;# 
   721  0F22                     	;# 
   722  0F23                     	;# 
   723  0F24                     	;# 
   724  0F25                     	;# 
   725  0F26                     	;# 
   726  0F27                     	;# 
   727  0F28                     	;# 
   728  0F29                     	;# 
   729  0F2A                     	;# 
   730  0F2B                     	;# 
   731  0F2C                     	;# 
   732  0F2D                     	;# 
   733  0F2E                     	;# 
   734  0F2F                     	;# 
   735  0F8C                     	;# 
   736  0F8D                     	;# 
   737  0F91                     	;# 
   738  0F95                     	;# 
   739  0F96                     	;# 
   740  0F97                     	;# 
   741  0F9C                     	;# 
   742  0F9D                     	;# 
   743  0F9E                     	;# 
   744  0FE3                     	;# 
   745  0FE4                     	;# 
   746  0FE5                     	;# 
   747  0FE6                     	;# 
   748  0FE7                     	;# 
   749  0FE8                     	;# 
   750  0FE9                     	;# 
   751  0FEA                     	;# 
   752  0FEB                     	;# 
   753  0FED                     	;# 
   754  0FEE                     	;# 
   755  0FEF                     	;# 
   756  0000                     	;# 
   757  0001                     	;# 
   758  0002                     	;# 
   759  0003                     	;# 
   760  0004                     	;# 
   761  0005                     	;# 
   762  0006                     	;# 
   763  0007                     	;# 
   764  0008                     	;# 
   765  0009                     	;# 
   766  000A                     	;# 
   767  000B                     	;# 
   768  000C                     	;# 
   769  000D                     	;# 
   770  000E                     	;# 
   771  0011                     	;# 
   772  0012                     	;# 
   773  0013                     	;# 
   774  0015                     	;# 
   775  0016                     	;# 
   776  0016                     	;# 
   777  0017                     	;# 
   778  0018                     	;# 
   779  0019                     	;# 
   780  001A                     	;# 
   781  001B                     	;# 
   782  001C                     	;# 
   783  008C                     	;# 
   784  008D                     	;# 
   785  008E                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0093                     	;# 
   789  0095                     	;# 
   790  0096                     	;# 
   791  0097                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  009F                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  0111                     	;# 
   804  0112                     	;# 
   805  0113                     	;# 
   806  0114                     	;# 
   807  0115                     	;# 
   808  0116                     	;# 
   809  0117                     	;# 
   810  0118                     	;# 
   811  0119                     	;# 
   812  011D                     	;# 
   813  018C                     	;# 
   814  018D                     	;# 
   815  018E                     	;# 
   816  0191                     	;# 
   817  0191                     	;# 
   818  0192                     	;# 
   819  0193                     	;# 
   820  0193                     	;# 
   821  0194                     	;# 
   822  0195                     	;# 
   823  0196                     	;# 
   824  0199                     	;# 
   825  019A                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019C                     	;# 
   829  019D                     	;# 
   830  019E                     	;# 
   831  019F                     	;# 
   832  020C                     	;# 
   833  020D                     	;# 
   834  0211                     	;# 
   835  0211                     	;# 
   836  0212                     	;# 
   837  0212                     	;# 
   838  0213                     	;# 
   839  0213                     	;# 
   840  0214                     	;# 
   841  0214                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0215                     	;# 
   845  0216                     	;# 
   846  0216                     	;# 
   847  0217                     	;# 
   848  0217                     	;# 
   849  0391                     	;# 
   850  0392                     	;# 
   851  0393                     	;# 
   852  0394                     	;# 
   853  0395                     	;# 
   854  0396                     	;# 
   855  0498                     	;# 
   856  0498                     	;# 
   857  0499                     	;# 
   858  049A                     	;# 
   859  049B                     	;# 
   860  049B                     	;# 
   861  049C                     	;# 
   862  049E                     	;# 
   863  049F                     	;# 
   864  0611                     	;# 
   865  0612                     	;# 
   866  0613                     	;# 
   867  0613                     	;# 
   868  0614                     	;# 
   869  0615                     	;# 
   870  0616                     	;# 
   871  0616                     	;# 
   872  0617                     	;# 
   873  0618                     	;# 
   874  0619                     	;# 
   875  0619                     	;# 
   876  061A                     	;# 
   877  061B                     	;# 
   878  061C                     	;# 
   879  061C                     	;# 
   880  0691                     	;# 
   881  0692                     	;# 
   882  0693                     	;# 
   883  0694                     	;# 
   884  0695                     	;# 
   885  0F0F                     	;# 
   886  0F10                     	;# 
   887  0F11                     	;# 
   888  0F12                     	;# 
   889  0F13                     	;# 
   890  0F14                     	;# 
   891  0F15                     	;# 
   892  0F16                     	;# 
   893  0F17                     	;# 
   894  0F18                     	;# 
   895  0F19                     	;# 
   896  0F1A                     	;# 
   897  0F1B                     	;# 
   898  0F1C                     	;# 
   899  0F1D                     	;# 
   900  0F1E                     	;# 
   901  0F1F                     	;# 
   902  0F20                     	;# 
   903  0F21                     	;# 
   904  0F22                     	;# 
   905  0F23                     	;# 
   906  0F24                     	;# 
   907  0F25                     	;# 
   908  0F26                     	;# 
   909  0F27                     	;# 
   910  0F28                     	;# 
   911  0F29                     	;# 
   912  0F2A                     	;# 
   913  0F2B                     	;# 
   914  0F2C                     	;# 
   915  0F2D                     	;# 
   916  0F2E                     	;# 
   917  0F2F                     	;# 
   918  0F8C                     	;# 
   919  0F8D                     	;# 
   920  0F91                     	;# 
   921  0F95                     	;# 
   922  0F96                     	;# 
   923  0F97                     	;# 
   924  0F9C                     	;# 
   925  0F9D                     	;# 
   926  0F9E                     	;# 
   927  0FE3                     	;# 
   928  0FE4                     	;# 
   929  0FE5                     	;# 
   930  0FE6                     	;# 
   931  0FE7                     	;# 
   932  0FE8                     	;# 
   933  0FE9                     	;# 
   934  0FEA                     	;# 
   935  0FEB                     	;# 
   936  0FED                     	;# 
   937  0FEE                     	;# 
   938  0FEF                     	;# 
   939  0000                     	;# 
   940  0001                     	;# 
   941  0002                     	;# 
   942  0003                     	;# 
   943  0004                     	;# 
   944  0005                     	;# 
   945  0006                     	;# 
   946  0007                     	;# 
   947  0008                     	;# 
   948  0009                     	;# 
   949  000A                     	;# 
   950  000B                     	;# 
   951  000C                     	;# 
   952  000D                     	;# 
   953  000E                     	;# 
   954  0011                     	;# 
   955  0012                     	;# 
   956  0013                     	;# 
   957  0015                     	;# 
   958  0016                     	;# 
   959  0016                     	;# 
   960  0017                     	;# 
   961  0018                     	;# 
   962  0019                     	;# 
   963  001A                     	;# 
   964  001B                     	;# 
   965  001C                     	;# 
   966  008C                     	;# 
   967  008D                     	;# 
   968  008E                     	;# 
   969  0091                     	;# 
   970  0092                     	;# 
   971  0093                     	;# 
   972  0095                     	;# 
   973  0096                     	;# 
   974  0097                     	;# 
   975  0099                     	;# 
   976  009A                     	;# 
   977  009B                     	;# 
   978  009B                     	;# 
   979  009C                     	;# 
   980  009D                     	;# 
   981  009E                     	;# 
   982  009F                     	;# 
   983  010C                     	;# 
   984  010D                     	;# 
   985  010E                     	;# 
   986  0111                     	;# 
   987  0112                     	;# 
   988  0113                     	;# 
   989  0114                     	;# 
   990  0115                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  0118                     	;# 
   994  0119                     	;# 
   995  011D                     	;# 
   996  018C                     	;# 
   997  018D                     	;# 
   998  018E                     	;# 
   999  0191                     	;# 
  1000  0191                     	;# 
  1001  0192                     	;# 
  1002  0193                     	;# 
  1003  0193                     	;# 
  1004  0194                     	;# 
  1005  0195                     	;# 
  1006  0196                     	;# 
  1007  0199                     	;# 
  1008  019A                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020C                     	;# 
  1016  020D                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0391                     	;# 
  1033  0392                     	;# 
  1034  0393                     	;# 
  1035  0394                     	;# 
  1036  0395                     	;# 
  1037  0396                     	;# 
  1038  0498                     	;# 
  1039  0498                     	;# 
  1040  0499                     	;# 
  1041  049A                     	;# 
  1042  049B                     	;# 
  1043  049B                     	;# 
  1044  049C                     	;# 
  1045  049E                     	;# 
  1046  049F                     	;# 
  1047  0611                     	;# 
  1048  0612                     	;# 
  1049  0613                     	;# 
  1050  0613                     	;# 
  1051  0614                     	;# 
  1052  0615                     	;# 
  1053  0616                     	;# 
  1054  0616                     	;# 
  1055  0617                     	;# 
  1056  0618                     	;# 
  1057  0619                     	;# 
  1058  0619                     	;# 
  1059  061A                     	;# 
  1060  061B                     	;# 
  1061  061C                     	;# 
  1062  061C                     	;# 
  1063  0691                     	;# 
  1064  0692                     	;# 
  1065  0693                     	;# 
  1066  0694                     	;# 
  1067  0695                     	;# 
  1068  0F0F                     	;# 
  1069  0F10                     	;# 
  1070  0F11                     	;# 
  1071  0F12                     	;# 
  1072  0F13                     	;# 
  1073  0F14                     	;# 
  1074  0F15                     	;# 
  1075  0F16                     	;# 
  1076  0F17                     	;# 
  1077  0F18                     	;# 
  1078  0F19                     	;# 
  1079  0F1A                     	;# 
  1080  0F1B                     	;# 
  1081  0F1C                     	;# 
  1082  0F1D                     	;# 
  1083  0F1E                     	;# 
  1084  0F1F                     	;# 
  1085  0F20                     	;# 
  1086  0F21                     	;# 
  1087  0F22                     	;# 
  1088  0F23                     	;# 
  1089  0F24                     	;# 
  1090  0F25                     	;# 
  1091  0F26                     	;# 
  1092  0F27                     	;# 
  1093  0F28                     	;# 
  1094  0F29                     	;# 
  1095  0F2A                     	;# 
  1096  0F2B                     	;# 
  1097  0F2C                     	;# 
  1098  0F2D                     	;# 
  1099  0F2E                     	;# 
  1100  0F2F                     	;# 
  1101  0F8C                     	;# 
  1102  0F8D                     	;# 
  1103  0F91                     	;# 
  1104  0F95                     	;# 
  1105  0F96                     	;# 
  1106  0F97                     	;# 
  1107  0F9C                     	;# 
  1108  0F9D                     	;# 
  1109  0F9E                     	;# 
  1110  0FE3                     	;# 
  1111  0FE4                     	;# 
  1112  0FE5                     	;# 
  1113  0FE6                     	;# 
  1114  0FE7                     	;# 
  1115  0FE8                     	;# 
  1116  0FE9                     	;# 
  1117  0FEA                     	;# 
  1118  0FEB                     	;# 
  1119  0FED                     	;# 
  1120  0FEE                     	;# 
  1121  0FEF                     	;# 
  1122  0000                     	;# 
  1123  0001                     	;# 
  1124  0002                     	;# 
  1125  0003                     	;# 
  1126  0004                     	;# 
  1127  0005                     	;# 
  1128  0006                     	;# 
  1129  0007                     	;# 
  1130  0008                     	;# 
  1131  0009                     	;# 
  1132  000A                     	;# 
  1133  000B                     	;# 
  1134  000C                     	;# 
  1135  000D                     	;# 
  1136  000E                     	;# 
  1137  0011                     	;# 
  1138  0012                     	;# 
  1139  0013                     	;# 
  1140  0015                     	;# 
  1141  0016                     	;# 
  1142  0016                     	;# 
  1143  0017                     	;# 
  1144  0018                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  008C                     	;# 
  1150  008D                     	;# 
  1151  008E                     	;# 
  1152  0091                     	;# 
  1153  0092                     	;# 
  1154  0093                     	;# 
  1155  0095                     	;# 
  1156  0096                     	;# 
  1157  0097                     	;# 
  1158  0099                     	;# 
  1159  009A                     	;# 
  1160  009B                     	;# 
  1161  009B                     	;# 
  1162  009C                     	;# 
  1163  009D                     	;# 
  1164  009E                     	;# 
  1165  009F                     	;# 
  1166  010C                     	;# 
  1167  010D                     	;# 
  1168  010E                     	;# 
  1169  0111                     	;# 
  1170  0112                     	;# 
  1171  0113                     	;# 
  1172  0114                     	;# 
  1173  0115                     	;# 
  1174  0116                     	;# 
  1175  0117                     	;# 
  1176  0118                     	;# 
  1177  0119                     	;# 
  1178  011D                     	;# 
  1179  018C                     	;# 
  1180  018D                     	;# 
  1181  018E                     	;# 
  1182  0191                     	;# 
  1183  0191                     	;# 
  1184  0192                     	;# 
  1185  0193                     	;# 
  1186  0193                     	;# 
  1187  0194                     	;# 
  1188  0195                     	;# 
  1189  0196                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019C                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020D                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0216                     	;# 
  1212  0216                     	;# 
  1213  0217                     	;# 
  1214  0217                     	;# 
  1215  0391                     	;# 
  1216  0392                     	;# 
  1217  0393                     	;# 
  1218  0394                     	;# 
  1219  0395                     	;# 
  1220  0396                     	;# 
  1221  0498                     	;# 
  1222  0498                     	;# 
  1223  0499                     	;# 
  1224  049A                     	;# 
  1225  049B                     	;# 
  1226  049B                     	;# 
  1227  049C                     	;# 
  1228  049E                     	;# 
  1229  049F                     	;# 
  1230  0611                     	;# 
  1231  0612                     	;# 
  1232  0613                     	;# 
  1233  0613                     	;# 
  1234  0614                     	;# 
  1235  0615                     	;# 
  1236  0616                     	;# 
  1237  0616                     	;# 
  1238  0617                     	;# 
  1239  0618                     	;# 
  1240  0619                     	;# 
  1241  0619                     	;# 
  1242  061A                     	;# 
  1243  061B                     	;# 
  1244  061C                     	;# 
  1245  061C                     	;# 
  1246  0691                     	;# 
  1247  0692                     	;# 
  1248  0693                     	;# 
  1249  0694                     	;# 
  1250  0695                     	;# 
  1251  0F0F                     	;# 
  1252  0F10                     	;# 
  1253  0F11                     	;# 
  1254  0F12                     	;# 
  1255  0F13                     	;# 
  1256  0F14                     	;# 
  1257  0F15                     	;# 
  1258  0F16                     	;# 
  1259  0F17                     	;# 
  1260  0F18                     	;# 
  1261  0F19                     	;# 
  1262  0F1A                     	;# 
  1263  0F1B                     	;# 
  1264  0F1C                     	;# 
  1265  0F1D                     	;# 
  1266  0F1E                     	;# 
  1267  0F1F                     	;# 
  1268  0F20                     	;# 
  1269  0F21                     	;# 
  1270  0F22                     	;# 
  1271  0F23                     	;# 
  1272  0F24                     	;# 
  1273  0F25                     	;# 
  1274  0F26                     	;# 
  1275  0F27                     	;# 
  1276  0F28                     	;# 
  1277  0F29                     	;# 
  1278  0F2A                     	;# 
  1279  0F2B                     	;# 
  1280  0F2C                     	;# 
  1281  0F2D                     	;# 
  1282  0F2E                     	;# 
  1283  0F2F                     	;# 
  1284  0F8C                     	;# 
  1285  0F8D                     	;# 
  1286  0F91                     	;# 
  1287  0F95                     	;# 
  1288  0F96                     	;# 
  1289  0F97                     	;# 
  1290  0F9C                     	;# 
  1291  0F9D                     	;# 
  1292  0F9E                     	;# 
  1293  0FE3                     	;# 
  1294  0FE4                     	;# 
  1295  0FE5                     	;# 
  1296  0FE6                     	;# 
  1297  0FE7                     	;# 
  1298  0FE8                     	;# 
  1299  0FE9                     	;# 
  1300  0FEA                     	;# 
  1301  0FEB                     	;# 
  1302  0FED                     	;# 
  1303  0FEE                     	;# 
  1304  0FEF                     	;# 
  1305  0000                     	;# 
  1306  0001                     	;# 
  1307  0002                     	;# 
  1308  0003                     	;# 
  1309  0004                     	;# 
  1310  0005                     	;# 
  1311  0006                     	;# 
  1312  0007                     	;# 
  1313  0008                     	;# 
  1314  0009                     	;# 
  1315  000A                     	;# 
  1316  000B                     	;# 
  1317  000C                     	;# 
  1318  000D                     	;# 
  1319  000E                     	;# 
  1320  0011                     	;# 
  1321  0012                     	;# 
  1322  0013                     	;# 
  1323  0015                     	;# 
  1324  0016                     	;# 
  1325  0016                     	;# 
  1326  0017                     	;# 
  1327  0018                     	;# 
  1328  0019                     	;# 
  1329  001A                     	;# 
  1330  001B                     	;# 
  1331  001C                     	;# 
  1332  008C                     	;# 
  1333  008D                     	;# 
  1334  008E                     	;# 
  1335  0091                     	;# 
  1336  0092                     	;# 
  1337  0093                     	;# 
  1338  0095                     	;# 
  1339  0096                     	;# 
  1340  0097                     	;# 
  1341  0099                     	;# 
  1342  009A                     	;# 
  1343  009B                     	;# 
  1344  009B                     	;# 
  1345  009C                     	;# 
  1346  009D                     	;# 
  1347  009E                     	;# 
  1348  009F                     	;# 
  1349  010C                     	;# 
  1350  010D                     	;# 
  1351  010E                     	;# 
  1352  0111                     	;# 
  1353  0112                     	;# 
  1354  0113                     	;# 
  1355  0114                     	;# 
  1356  0115                     	;# 
  1357  0116                     	;# 
  1358  0117                     	;# 
  1359  0118                     	;# 
  1360  0119                     	;# 
  1361  011D                     	;# 
  1362  018C                     	;# 
  1363  018D                     	;# 
  1364  018E                     	;# 
  1365  0191                     	;# 
  1366  0191                     	;# 
  1367  0192                     	;# 
  1368  0193                     	;# 
  1369  0193                     	;# 
  1370  0194                     	;# 
  1371  0195                     	;# 
  1372  0196                     	;# 
  1373  0199                     	;# 
  1374  019A                     	;# 
  1375  019B                     	;# 
  1376  019B                     	;# 
  1377  019C                     	;# 
  1378  019D                     	;# 
  1379  019E                     	;# 
  1380  019F                     	;# 
  1381  020C                     	;# 
  1382  020D                     	;# 
  1383  0211                     	;# 
  1384  0211                     	;# 
  1385  0212                     	;# 
  1386  0212                     	;# 
  1387  0213                     	;# 
  1388  0213                     	;# 
  1389  0214                     	;# 
  1390  0214                     	;# 
  1391  0215                     	;# 
  1392  0215                     	;# 
  1393  0215                     	;# 
  1394  0216                     	;# 
  1395  0216                     	;# 
  1396  0217                     	;# 
  1397  0217                     	;# 
  1398  0391                     	;# 
  1399  0392                     	;# 
  1400  0393                     	;# 
  1401  0394                     	;# 
  1402  0395                     	;# 
  1403  0396                     	;# 
  1404  0498                     	;# 
  1405  0498                     	;# 
  1406  0499                     	;# 
  1407  049A                     	;# 
  1408  049B                     	;# 
  1409  049B                     	;# 
  1410  049C                     	;# 
  1411  049E                     	;# 
  1412  049F                     	;# 
  1413  0611                     	;# 
  1414  0612                     	;# 
  1415  0613                     	;# 
  1416  0613                     	;# 
  1417  0614                     	;# 
  1418  0615                     	;# 
  1419  0616                     	;# 
  1420  0616                     	;# 
  1421  0617                     	;# 
  1422  0618                     	;# 
  1423  0619                     	;# 
  1424  0619                     	;# 
  1425  061A                     	;# 
  1426  061B                     	;# 
  1427  061C                     	;# 
  1428  061C                     	;# 
  1429  0691                     	;# 
  1430  0692                     	;# 
  1431  0693                     	;# 
  1432  0694                     	;# 
  1433  0695                     	;# 
  1434  0F0F                     	;# 
  1435  0F10                     	;# 
  1436  0F11                     	;# 
  1437  0F12                     	;# 
  1438  0F13                     	;# 
  1439  0F14                     	;# 
  1440  0F15                     	;# 
  1441  0F16                     	;# 
  1442  0F17                     	;# 
  1443  0F18                     	;# 
  1444  0F19                     	;# 
  1445  0F1A                     	;# 
  1446  0F1B                     	;# 
  1447  0F1C                     	;# 
  1448  0F1D                     	;# 
  1449  0F1E                     	;# 
  1450  0F1F                     	;# 
  1451  0F20                     	;# 
  1452  0F21                     	;# 
  1453  0F22                     	;# 
  1454  0F23                     	;# 
  1455  0F24                     	;# 
  1456  0F25                     	;# 
  1457  0F26                     	;# 
  1458  0F27                     	;# 
  1459  0F28                     	;# 
  1460  0F29                     	;# 
  1461  0F2A                     	;# 
  1462  0F2B                     	;# 
  1463  0F2C                     	;# 
  1464  0F2D                     	;# 
  1465  0F2E                     	;# 
  1466  0F2F                     	;# 
  1467  0F8C                     	;# 
  1468  0F8D                     	;# 
  1469  0F91                     	;# 
  1470  0F95                     	;# 
  1471  0F96                     	;# 
  1472  0F97                     	;# 
  1473  0F9C                     	;# 
  1474  0F9D                     	;# 
  1475  0F9E                     	;# 
  1476  0FE3                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0093                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  009F                     	;# 
  1532  010C                     	;# 
  1533  010D                     	;# 
  1534  010E                     	;# 
  1535  0111                     	;# 
  1536  0112                     	;# 
  1537  0113                     	;# 
  1538  0114                     	;# 
  1539  0115                     	;# 
  1540  0116                     	;# 
  1541  0117                     	;# 
  1542  0118                     	;# 
  1543  0119                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019C                     	;# 
  1561  019D                     	;# 
  1562  019E                     	;# 
  1563  019F                     	;# 
  1564  020C                     	;# 
  1565  020D                     	;# 
  1566  0211                     	;# 
  1567  0211                     	;# 
  1568  0212                     	;# 
  1569  0212                     	;# 
  1570  0213                     	;# 
  1571  0213                     	;# 
  1572  0214                     	;# 
  1573  0214                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0216                     	;# 
  1578  0216                     	;# 
  1579  0217                     	;# 
  1580  0217                     	;# 
  1581  0391                     	;# 
  1582  0392                     	;# 
  1583  0393                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0498                     	;# 
  1588  0498                     	;# 
  1589  0499                     	;# 
  1590  049A                     	;# 
  1591  049B                     	;# 
  1592  049B                     	;# 
  1593  049C                     	;# 
  1594  049E                     	;# 
  1595  049F                     	;# 
  1596  0611                     	;# 
  1597  0612                     	;# 
  1598  0613                     	;# 
  1599  0613                     	;# 
  1600  0614                     	;# 
  1601  0615                     	;# 
  1602  0616                     	;# 
  1603  0616                     	;# 
  1604  0617                     	;# 
  1605  0618                     	;# 
  1606  0619                     	;# 
  1607  0619                     	;# 
  1608  061A                     	;# 
  1609  061B                     	;# 
  1610  061C                     	;# 
  1611  061C                     	;# 
  1612  0691                     	;# 
  1613  0692                     	;# 
  1614  0693                     	;# 
  1615  0694                     	;# 
  1616  0695                     	;# 
  1617  0F0F                     	;# 
  1618  0F10                     	;# 
  1619  0F11                     	;# 
  1620  0F12                     	;# 
  1621  0F13                     	;# 
  1622  0F14                     	;# 
  1623  0F15                     	;# 
  1624  0F16                     	;# 
  1625  0F17                     	;# 
  1626  0F18                     	;# 
  1627  0F19                     	;# 
  1628  0F1A                     	;# 
  1629  0F1B                     	;# 
  1630  0F1C                     	;# 
  1631  0F1D                     	;# 
  1632  0F1E                     	;# 
  1633  0F1F                     	;# 
  1634  0F20                     	;# 
  1635  0F21                     	;# 
  1636  0F22                     	;# 
  1637  0F23                     	;# 
  1638  0F24                     	;# 
  1639  0F25                     	;# 
  1640  0F26                     	;# 
  1641  0F27                     	;# 
  1642  0F28                     	;# 
  1643  0F29                     	;# 
  1644  0F2A                     	;# 
  1645  0F2B                     	;# 
  1646  0F2C                     	;# 
  1647  0F2D                     	;# 
  1648  0F2E                     	;# 
  1649  0F2F                     	;# 
  1650  0F8C                     	;# 
  1651  0F8D                     	;# 
  1652  0F91                     	;# 
  1653  0F95                     	;# 
  1654  0F96                     	;# 
  1655  0F97                     	;# 
  1656  0F9C                     	;# 
  1657  0F9D                     	;# 
  1658  0F9E                     	;# 
  1659  0FE3                     	;# 
  1660  0FE4                     	;# 
  1661  0FE5                     	;# 
  1662  0FE6                     	;# 
  1663  0FE7                     	;# 
  1664  0FE8                     	;# 
  1665  0FE9                     	;# 
  1666  0FEA                     	;# 
  1667  0FEB                     	;# 
  1668  0FED                     	;# 
  1669  0FEE                     	;# 
  1670  0FEF                     	;# 
  1671  0000                     	;# 
  1672  0001                     	;# 
  1673  0002                     	;# 
  1674  0003                     	;# 
  1675  0004                     	;# 
  1676  0005                     	;# 
  1677  0006                     	;# 
  1678  0007                     	;# 
  1679  0008                     	;# 
  1680  0009                     	;# 
  1681  000A                     	;# 
  1682  000B                     	;# 
  1683  000C                     	;# 
  1684  000D                     	;# 
  1685  000E                     	;# 
  1686  0011                     	;# 
  1687  0012                     	;# 
  1688  0013                     	;# 
  1689  0015                     	;# 
  1690  0016                     	;# 
  1691  0016                     	;# 
  1692  0017                     	;# 
  1693  0018                     	;# 
  1694  0019                     	;# 
  1695  001A                     	;# 
  1696  001B                     	;# 
  1697  001C                     	;# 
  1698  008C                     	;# 
  1699  008D                     	;# 
  1700  008E                     	;# 
  1701  0091                     	;# 
  1702  0092                     	;# 
  1703  0093                     	;# 
  1704  0095                     	;# 
  1705  0096                     	;# 
  1706  0097                     	;# 
  1707  0099                     	;# 
  1708  009A                     	;# 
  1709  009B                     	;# 
  1710  009B                     	;# 
  1711  009C                     	;# 
  1712  009D                     	;# 
  1713  009E                     	;# 
  1714  009F                     	;# 
  1715  010C                     	;# 
  1716  010D                     	;# 
  1717  010E                     	;# 
  1718  0111                     	;# 
  1719  0112                     	;# 
  1720  0113                     	;# 
  1721  0114                     	;# 
  1722  0115                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  0118                     	;# 
  1726  0119                     	;# 
  1727  011D                     	;# 
  1728  018C                     	;# 
  1729  018D                     	;# 
  1730  018E                     	;# 
  1731  0191                     	;# 
  1732  0191                     	;# 
  1733  0192                     	;# 
  1734  0193                     	;# 
  1735  0193                     	;# 
  1736  0194                     	;# 
  1737  0195                     	;# 
  1738  0196                     	;# 
  1739  0199                     	;# 
  1740  019A                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019C                     	;# 
  1744  019D                     	;# 
  1745  019E                     	;# 
  1746  019F                     	;# 
  1747  020C                     	;# 
  1748  020D                     	;# 
  1749  0211                     	;# 
  1750  0211                     	;# 
  1751  0212                     	;# 
  1752  0212                     	;# 
  1753  0213                     	;# 
  1754  0213                     	;# 
  1755  0214                     	;# 
  1756  0214                     	;# 
  1757  0215                     	;# 
  1758  0215                     	;# 
  1759  0215                     	;# 
  1760  0216                     	;# 
  1761  0216                     	;# 
  1762  0217                     	;# 
  1763  0217                     	;# 
  1764  0391                     	;# 
  1765  0392                     	;# 
  1766  0393                     	;# 
  1767  0394                     	;# 
  1768  0395                     	;# 
  1769  0396                     	;# 
  1770  0498                     	;# 
  1771  0498                     	;# 
  1772  0499                     	;# 
  1773  049A                     	;# 
  1774  049B                     	;# 
  1775  049B                     	;# 
  1776  049C                     	;# 
  1777  049E                     	;# 
  1778  049F                     	;# 
  1779  0611                     	;# 
  1780  0612                     	;# 
  1781  0613                     	;# 
  1782  0613                     	;# 
  1783  0614                     	;# 
  1784  0615                     	;# 
  1785  0616                     	;# 
  1786  0616                     	;# 
  1787  0617                     	;# 
  1788  0618                     	;# 
  1789  0619                     	;# 
  1790  0619                     	;# 
  1791  061A                     	;# 
  1792  061B                     	;# 
  1793  061C                     	;# 
  1794  061C                     	;# 
  1795  0691                     	;# 
  1796  0692                     	;# 
  1797  0693                     	;# 
  1798  0694                     	;# 
  1799  0695                     	;# 
  1800  0F0F                     	;# 
  1801  0F10                     	;# 
  1802  0F11                     	;# 
  1803  0F12                     	;# 
  1804  0F13                     	;# 
  1805  0F14                     	;# 
  1806  0F15                     	;# 
  1807  0F16                     	;# 
  1808  0F17                     	;# 
  1809  0F18                     	;# 
  1810  0F19                     	;# 
  1811  0F1A                     	;# 
  1812  0F1B                     	;# 
  1813  0F1C                     	;# 
  1814  0F1D                     	;# 
  1815  0F1E                     	;# 
  1816  0F1F                     	;# 
  1817  0F20                     	;# 
  1818  0F21                     	;# 
  1819  0F22                     	;# 
  1820  0F23                     	;# 
  1821  0F24                     	;# 
  1822  0F25                     	;# 
  1823  0F26                     	;# 
  1824  0F27                     	;# 
  1825  0F28                     	;# 
  1826  0F29                     	;# 
  1827  0F2A                     	;# 
  1828  0F2B                     	;# 
  1829  0F2C                     	;# 
  1830  0F2D                     	;# 
  1831  0F2E                     	;# 
  1832  0F2F                     	;# 
  1833  0F8C                     	;# 
  1834  0F8D                     	;# 
  1835  0F91                     	;# 
  1836  0F95                     	;# 
  1837  0F96                     	;# 
  1838  0F97                     	;# 
  1839  0F9C                     	;# 
  1840  0F9D                     	;# 
  1841  0F9E                     	;# 
  1842  0FE3                     	;# 
  1843  0FE4                     	;# 
  1844  0FE5                     	;# 
  1845  0FE6                     	;# 
  1846  0FE7                     	;# 
  1847  0FE8                     	;# 
  1848  0FE9                     	;# 
  1849  0FEA                     	;# 
  1850  0FEB                     	;# 
  1851  0FED                     	;# 
  1852  0FEE                     	;# 
  1853  0FEF                     	;# 
  1854  0000                     	;# 
  1855  0001                     	;# 
  1856  0002                     	;# 
  1857  0003                     	;# 
  1858  0004                     	;# 
  1859  0005                     	;# 
  1860  0006                     	;# 
  1861  0007                     	;# 
  1862  0008                     	;# 
  1863  0009                     	;# 
  1864  000A                     	;# 
  1865  000B                     	;# 
  1866  000C                     	;# 
  1867  000D                     	;# 
  1868  000E                     	;# 
  1869  0011                     	;# 
  1870  0012                     	;# 
  1871  0013                     	;# 
  1872  0015                     	;# 
  1873  0016                     	;# 
  1874  0016                     	;# 
  1875  0017                     	;# 
  1876  0018                     	;# 
  1877  0019                     	;# 
  1878  001A                     	;# 
  1879  001B                     	;# 
  1880  001C                     	;# 
  1881  008C                     	;# 
  1882  008D                     	;# 
  1883  008E                     	;# 
  1884  0091                     	;# 
  1885  0092                     	;# 
  1886  0093                     	;# 
  1887  0095                     	;# 
  1888  0096                     	;# 
  1889  0097                     	;# 
  1890  0099                     	;# 
  1891  009A                     	;# 
  1892  009B                     	;# 
  1893  009B                     	;# 
  1894  009C                     	;# 
  1895  009D                     	;# 
  1896  009E                     	;# 
  1897  009F                     	;# 
  1898  010C                     	;# 
  1899  010D                     	;# 
  1900  010E                     	;# 
  1901  0111                     	;# 
  1902  0112                     	;# 
  1903  0113                     	;# 
  1904  0114                     	;# 
  1905  0115                     	;# 
  1906  0116                     	;# 
  1907  0117                     	;# 
  1908  0118                     	;# 
  1909  0119                     	;# 
  1910  011D                     	;# 
  1911  018C                     	;# 
  1912  018D                     	;# 
  1913  018E                     	;# 
  1914  0191                     	;# 
  1915  0191                     	;# 
  1916  0192                     	;# 
  1917  0193                     	;# 
  1918  0193                     	;# 
  1919  0194                     	;# 
  1920  0195                     	;# 
  1921  0196                     	;# 
  1922  0199                     	;# 
  1923  019A                     	;# 
  1924  019B                     	;# 
  1925  019B                     	;# 
  1926  019C                     	;# 
  1927  019D                     	;# 
  1928  019E                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  0211                     	;# 
  1933  0211                     	;# 
  1934  0212                     	;# 
  1935  0212                     	;# 
  1936  0213                     	;# 
  1937  0213                     	;# 
  1938  0214                     	;# 
  1939  0214                     	;# 
  1940  0215                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0216                     	;# 
  1944  0216                     	;# 
  1945  0217                     	;# 
  1946  0217                     	;# 
  1947  0391                     	;# 
  1948  0392                     	;# 
  1949  0393                     	;# 
  1950  0394                     	;# 
  1951  0395                     	;# 
  1952  0396                     	;# 
  1953  0498                     	;# 
  1954  0498                     	;# 
  1955  0499                     	;# 
  1956  049A                     	;# 
  1957  049B                     	;# 
  1958  049B                     	;# 
  1959  049C                     	;# 
  1960  049E                     	;# 
  1961  049F                     	;# 
  1962  0611                     	;# 
  1963  0612                     	;# 
  1964  0613                     	;# 
  1965  0613                     	;# 
  1966  0614                     	;# 
  1967  0615                     	;# 
  1968  0616                     	;# 
  1969  0616                     	;# 
  1970  0617                     	;# 
  1971  0618                     	;# 
  1972  0619                     	;# 
  1973  0619                     	;# 
  1974  061A                     	;# 
  1975  061B                     	;# 
  1976  061C                     	;# 
  1977  061C                     	;# 
  1978  0691                     	;# 
  1979  0692                     	;# 
  1980  0693                     	;# 
  1981  0694                     	;# 
  1982  0695                     	;# 
  1983  0F0F                     	;# 
  1984  0F10                     	;# 
  1985  0F11                     	;# 
  1986  0F12                     	;# 
  1987  0F13                     	;# 
  1988  0F14                     	;# 
  1989  0F15                     	;# 
  1990  0F16                     	;# 
  1991  0F17                     	;# 
  1992  0F18                     	;# 
  1993  0F19                     	;# 
  1994  0F1A                     	;# 
  1995  0F1B                     	;# 
  1996  0F1C                     	;# 
  1997  0F1D                     	;# 
  1998  0F1E                     	;# 
  1999  0F1F                     	;# 
  2000  0F20                     	;# 
  2001  0F21                     	;# 
  2002  0F22                     	;# 
  2003  0F23                     	;# 
  2004  0F24                     	;# 
  2005  0F25                     	;# 
  2006  0F26                     	;# 
  2007  0F27                     	;# 
  2008  0F28                     	;# 
  2009  0F29                     	;# 
  2010  0F2A                     	;# 
  2011  0F2B                     	;# 
  2012  0F2C                     	;# 
  2013  0F2D                     	;# 
  2014  0F2E                     	;# 
  2015  0F2F                     	;# 
  2016  0F8C                     	;# 
  2017  0F8D                     	;# 
  2018  0F91                     	;# 
  2019  0F95                     	;# 
  2020  0F96                     	;# 
  2021  0F97                     	;# 
  2022  0F9C                     	;# 
  2023  0F9D                     	;# 
  2024  0F9E                     	;# 
  2025  0FE3                     	;# 
  2026  0FE4                     	;# 
  2027  0FE5                     	;# 
  2028  0FE6                     	;# 
  2029  0FE7                     	;# 
  2030  0FE8                     	;# 
  2031  0FE9                     	;# 
  2032  0FEA                     	;# 
  2033  0FEB                     	;# 
  2034  0FED                     	;# 
  2035  0FEE                     	;# 
  2036  0FEF                     	;# 
  2037  0000                     	;# 
  2038  0001                     	;# 
  2039  0002                     	;# 
  2040  0003                     	;# 
  2041  0004                     	;# 
  2042  0005                     	;# 
  2043  0006                     	;# 
  2044  0007                     	;# 
  2045  0008                     	;# 
  2046  0009                     	;# 
  2047  000A                     	;# 
  2048  000B                     	;# 
  2049  000C                     	;# 
  2050  000D                     	;# 
  2051  000E                     	;# 
  2052  0011                     	;# 
  2053  0012                     	;# 
  2054  0013                     	;# 
  2055  0015                     	;# 
  2056  0016                     	;# 
  2057  0016                     	;# 
  2058  0017                     	;# 
  2059  0018                     	;# 
  2060  0019                     	;# 
  2061  001A                     	;# 
  2062  001B                     	;# 
  2063  001C                     	;# 
  2064  008C                     	;# 
  2065  008D                     	;# 
  2066  008E                     	;# 
  2067  0091                     	;# 
  2068  0092                     	;# 
  2069  0093                     	;# 
  2070  0095                     	;# 
  2071  0096                     	;# 
  2072  0097                     	;# 
  2073  0099                     	;# 
  2074  009A                     	;# 
  2075  009B                     	;# 
  2076  009B                     	;# 
  2077  009C                     	;# 
  2078  009D                     	;# 
  2079  009E                     	;# 
  2080  009F                     	;# 
  2081  010C                     	;# 
  2082  010D                     	;# 
  2083  010E                     	;# 
  2084  0111                     	;# 
  2085  0112                     	;# 
  2086  0113                     	;# 
  2087  0114                     	;# 
  2088  0115                     	;# 
  2089  0116                     	;# 
  2090  0117                     	;# 
  2091  0118                     	;# 
  2092  0119                     	;# 
  2093  011D                     	;# 
  2094  018C                     	;# 
  2095  018D                     	;# 
  2096  018E                     	;# 
  2097  0191                     	;# 
  2098  0191                     	;# 
  2099  0192                     	;# 
  2100  0193                     	;# 
  2101  0193                     	;# 
  2102  0194                     	;# 
  2103  0195                     	;# 
  2104  0196                     	;# 
  2105  0199                     	;# 
  2106  019A                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019C                     	;# 
  2110  019D                     	;# 
  2111  019E                     	;# 
  2112  019F                     	;# 
  2113  020C                     	;# 
  2114  020D                     	;# 
  2115  0211                     	;# 
  2116  0211                     	;# 
  2117  0212                     	;# 
  2118  0212                     	;# 
  2119  0213                     	;# 
  2120  0213                     	;# 
  2121  0214                     	;# 
  2122  0214                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0216                     	;# 
  2127  0216                     	;# 
  2128  0217                     	;# 
  2129  0217                     	;# 
  2130  0391                     	;# 
  2131  0392                     	;# 
  2132  0393                     	;# 
  2133  0394                     	;# 
  2134  0395                     	;# 
  2135  0396                     	;# 
  2136  0498                     	;# 
  2137  0498                     	;# 
  2138  0499                     	;# 
  2139  049A                     	;# 
  2140  049B                     	;# 
  2141  049B                     	;# 
  2142  049C                     	;# 
  2143  049E                     	;# 
  2144  049F                     	;# 
  2145  0611                     	;# 
  2146  0612                     	;# 
  2147  0613                     	;# 
  2148  0613                     	;# 
  2149  0614                     	;# 
  2150  0615                     	;# 
  2151  0616                     	;# 
  2152  0616                     	;# 
  2153  0617                     	;# 
  2154  0618                     	;# 
  2155  0619                     	;# 
  2156  0619                     	;# 
  2157  061A                     	;# 
  2158  061B                     	;# 
  2159  061C                     	;# 
  2160  061C                     	;# 
  2161  0691                     	;# 
  2162  0692                     	;# 
  2163  0693                     	;# 
  2164  0694                     	;# 
  2165  0695                     	;# 
  2166  0F0F                     	;# 
  2167  0F10                     	;# 
  2168  0F11                     	;# 
  2169  0F12                     	;# 
  2170  0F13                     	;# 
  2171  0F14                     	;# 
  2172  0F15                     	;# 
  2173  0F16                     	;# 
  2174  0F17                     	;# 
  2175  0F18                     	;# 
  2176  0F19                     	;# 
  2177  0F1A                     	;# 
  2178  0F1B                     	;# 
  2179  0F1C                     	;# 
  2180  0F1D                     	;# 
  2181  0F1E                     	;# 
  2182  0F1F                     	;# 
  2183  0F20                     	;# 
  2184  0F21                     	;# 
  2185  0F22                     	;# 
  2186  0F23                     	;# 
  2187  0F24                     	;# 
  2188  0F25                     	;# 
  2189  0F26                     	;# 
  2190  0F27                     	;# 
  2191  0F28                     	;# 
  2192  0F29                     	;# 
  2193  0F2A                     	;# 
  2194  0F2B                     	;# 
  2195  0F2C                     	;# 
  2196  0F2D                     	;# 
  2197  0F2E                     	;# 
  2198  0F2F                     	;# 
  2199  0F8C                     	;# 
  2200  0F8D                     	;# 
  2201  0F91                     	;# 
  2202  0F95                     	;# 
  2203  0F96                     	;# 
  2204  0F97                     	;# 
  2205  0F9C                     	;# 
  2206  0F9D                     	;# 
  2207  0F9E                     	;# 
  2208  0FE3                     	;# 
  2209  0FE4                     	;# 
  2210  0FE5                     	;# 
  2211  0FE6                     	;# 
  2212  0FE7                     	;# 
  2213  0FE8                     	;# 
  2214  0FE9                     	;# 
  2215  0FEA                     	;# 
  2216  0FEB                     	;# 
  2217  0FED                     	;# 
  2218  0FEE                     	;# 
  2219  0FEF                     	;# 
  2220  0000                     	;# 
  2221  0001                     	;# 
  2222  0002                     	;# 
  2223  0003                     	;# 
  2224  0004                     	;# 
  2225  0005                     	;# 
  2226  0006                     	;# 
  2227  0007                     	;# 
  2228  0008                     	;# 
  2229  0009                     	;# 
  2230  000A                     	;# 
  2231  000B                     	;# 
  2232  000C                     	;# 
  2233  000D                     	;# 
  2234  000E                     	;# 
  2235  0011                     	;# 
  2236  0012                     	;# 
  2237  0013                     	;# 
  2238  0015                     	;# 
  2239  0016                     	;# 
  2240  0016                     	;# 
  2241  0017                     	;# 
  2242  0018                     	;# 
  2243  0019                     	;# 
  2244  001A                     	;# 
  2245  001B                     	;# 
  2246  001C                     	;# 
  2247  008C                     	;# 
  2248  008D                     	;# 
  2249  008E                     	;# 
  2250  0091                     	;# 
  2251  0092                     	;# 
  2252  0093                     	;# 
  2253  0095                     	;# 
  2254  0096                     	;# 
  2255  0097                     	;# 
  2256  0099                     	;# 
  2257  009A                     	;# 
  2258  009B                     	;# 
  2259  009B                     	;# 
  2260  009C                     	;# 
  2261  009D                     	;# 
  2262  009E                     	;# 
  2263  009F                     	;# 
  2264  010C                     	;# 
  2265  010D                     	;# 
  2266  010E                     	;# 
  2267  0111                     	;# 
  2268  0112                     	;# 
  2269  0113                     	;# 
  2270  0114                     	;# 
  2271  0115                     	;# 
  2272  0116                     	;# 
  2273  0117                     	;# 
  2274  0118                     	;# 
  2275  0119                     	;# 
  2276  011D                     	;# 
  2277  018C                     	;# 
  2278  018D                     	;# 
  2279  018E                     	;# 
  2280  0191                     	;# 
  2281  0191                     	;# 
  2282  0192                     	;# 
  2283  0193                     	;# 
  2284  0193                     	;# 
  2285  0194                     	;# 
  2286  0195                     	;# 
  2287  0196                     	;# 
  2288  0199                     	;# 
  2289  019A                     	;# 
  2290  019B                     	;# 
  2291  019B                     	;# 
  2292  019C                     	;# 
  2293  019D                     	;# 
  2294  019E                     	;# 
  2295  019F                     	;# 
  2296  020C                     	;# 
  2297  020D                     	;# 
  2298  0211                     	;# 
  2299  0211                     	;# 
  2300  0212                     	;# 
  2301  0212                     	;# 
  2302  0213                     	;# 
  2303  0213                     	;# 
  2304  0214                     	;# 
  2305  0214                     	;# 
  2306  0215                     	;# 
  2307  0215                     	;# 
  2308  0215                     	;# 
  2309  0216                     	;# 
  2310  0216                     	;# 
  2311  0217                     	;# 
  2312  0217                     	;# 
  2313  0391                     	;# 
  2314  0392                     	;# 
  2315  0393                     	;# 
  2316  0394                     	;# 
  2317  0395                     	;# 
  2318  0396                     	;# 
  2319  0498                     	;# 
  2320  0498                     	;# 
  2321  0499                     	;# 
  2322  049A                     	;# 
  2323  049B                     	;# 
  2324  049B                     	;# 
  2325  049C                     	;# 
  2326  049E                     	;# 
  2327  049F                     	;# 
  2328  0611                     	;# 
  2329  0612                     	;# 
  2330  0613                     	;# 
  2331  0613                     	;# 
  2332  0614                     	;# 
  2333  0615                     	;# 
  2334  0616                     	;# 
  2335  0616                     	;# 
  2336  0617                     	;# 
  2337  0618                     	;# 
  2338  0619                     	;# 
  2339  0619                     	;# 
  2340  061A                     	;# 
  2341  061B                     	;# 
  2342  061C                     	;# 
  2343  061C                     	;# 
  2344  0691                     	;# 
  2345  0692                     	;# 
  2346  0693                     	;# 
  2347  0694                     	;# 
  2348  0695                     	;# 
  2349  0F0F                     	;# 
  2350  0F10                     	;# 
  2351  0F11                     	;# 
  2352  0F12                     	;# 
  2353  0F13                     	;# 
  2354  0F14                     	;# 
  2355  0F15                     	;# 
  2356  0F16                     	;# 
  2357  0F17                     	;# 
  2358  0F18                     	;# 
  2359  0F19                     	;# 
  2360  0F1A                     	;# 
  2361  0F1B                     	;# 
  2362  0F1C                     	;# 
  2363  0F1D                     	;# 
  2364  0F1E                     	;# 
  2365  0F1F                     	;# 
  2366  0F20                     	;# 
  2367  0F21                     	;# 
  2368  0F22                     	;# 
  2369  0F23                     	;# 
  2370  0F24                     	;# 
  2371  0F25                     	;# 
  2372  0F26                     	;# 
  2373  0F27                     	;# 
  2374  0F28                     	;# 
  2375  0F29                     	;# 
  2376  0F2A                     	;# 
  2377  0F2B                     	;# 
  2378  0F2C                     	;# 
  2379  0F2D                     	;# 
  2380  0F2E                     	;# 
  2381  0F2F                     	;# 
  2382  0F8C                     	;# 
  2383  0F8D                     	;# 
  2384  0F91                     	;# 
  2385  0F95                     	;# 
  2386  0F96                     	;# 
  2387  0F97                     	;# 
  2388  0F9C                     	;# 
  2389  0F9D                     	;# 
  2390  0F9E                     	;# 
  2391  0FE3                     	;# 
  2392  0FE4                     	;# 
  2393  0FE5                     	;# 
  2394  0FE6                     	;# 
  2395  0FE7                     	;# 
  2396  0FE8                     	;# 
  2397  0FE9                     	;# 
  2398  0FEA                     	;# 
  2399  0FEB                     	;# 
  2400  0FED                     	;# 
  2401  0FEE                     	;# 
  2402  0FEF                     	;# 
  2403  0000                     	;# 
  2404  0001                     	;# 
  2405  0002                     	;# 
  2406  0003                     	;# 
  2407  0004                     	;# 
  2408  0005                     	;# 
  2409  0006                     	;# 
  2410  0007                     	;# 
  2411  0008                     	;# 
  2412  0009                     	;# 
  2413  000A                     	;# 
  2414  000B                     	;# 
  2415  000C                     	;# 
  2416  000D                     	;# 
  2417  000E                     	;# 
  2418  0011                     	;# 
  2419  0012                     	;# 
  2420  0013                     	;# 
  2421  0015                     	;# 
  2422  0016                     	;# 
  2423  0016                     	;# 
  2424  0017                     	;# 
  2425  0018                     	;# 
  2426  0019                     	;# 
  2427  001A                     	;# 
  2428  001B                     	;# 
  2429  001C                     	;# 
  2430  008C                     	;# 
  2431  008D                     	;# 
  2432  008E                     	;# 
  2433  0091                     	;# 
  2434  0092                     	;# 
  2435  0093                     	;# 
  2436  0095                     	;# 
  2437  0096                     	;# 
  2438  0097                     	;# 
  2439  0099                     	;# 
  2440  009A                     	;# 
  2441  009B                     	;# 
  2442  009B                     	;# 
  2443  009C                     	;# 
  2444  009D                     	;# 
  2445  009E                     	;# 
  2446  009F                     	;# 
  2447  010C                     	;# 
  2448  010D                     	;# 
  2449  010E                     	;# 
  2450  0111                     	;# 
  2451  0112                     	;# 
  2452  0113                     	;# 
  2453  0114                     	;# 
  2454  0115                     	;# 
  2455  0116                     	;# 
  2456  0117                     	;# 
  2457  0118                     	;# 
  2458  0119                     	;# 
  2459  011D                     	;# 
  2460  018C                     	;# 
  2461  018D                     	;# 
  2462  018E                     	;# 
  2463  0191                     	;# 
  2464  0191                     	;# 
  2465  0192                     	;# 
  2466  0193                     	;# 
  2467  0193                     	;# 
  2468  0194                     	;# 
  2469  0195                     	;# 
  2470  0196                     	;# 
  2471  0199                     	;# 
  2472  019A                     	;# 
  2473  019B                     	;# 
  2474  019B                     	;# 
  2475  019C                     	;# 
  2476  019D                     	;# 
  2477  019E                     	;# 
  2478  019F                     	;# 
  2479  020C                     	;# 
  2480  020D                     	;# 
  2481  0211                     	;# 
  2482  0211                     	;# 
  2483  0212                     	;# 
  2484  0212                     	;# 
  2485  0213                     	;# 
  2486  0213                     	;# 
  2487  0214                     	;# 
  2488  0214                     	;# 
  2489  0215                     	;# 
  2490  0215                     	;# 
  2491  0215                     	;# 
  2492  0216                     	;# 
  2493  0216                     	;# 
  2494  0217                     	;# 
  2495  0217                     	;# 
  2496  0391                     	;# 
  2497  0392                     	;# 
  2498  0393                     	;# 
  2499  0394                     	;# 
  2500  0395                     	;# 
  2501  0396                     	;# 
  2502  0498                     	;# 
  2503  0498                     	;# 
  2504  0499                     	;# 
  2505  049A                     	;# 
  2506  049B                     	;# 
  2507  049B                     	;# 
  2508  049C                     	;# 
  2509  049E                     	;# 
  2510  049F                     	;# 
  2511  0611                     	;# 
  2512  0612                     	;# 
  2513  0613                     	;# 
  2514  0613                     	;# 
  2515  0614                     	;# 
  2516  0615                     	;# 
  2517  0616                     	;# 
  2518  0616                     	;# 
  2519  0617                     	;# 
  2520  0618                     	;# 
  2521  0619                     	;# 
  2522  0619                     	;# 
  2523  061A                     	;# 
  2524  061B                     	;# 
  2525  061C                     	;# 
  2526  061C                     	;# 
  2527  0691                     	;# 
  2528  0692                     	;# 
  2529  0693                     	;# 
  2530  0694                     	;# 
  2531  0695                     	;# 
  2532  0F0F                     	;# 
  2533  0F10                     	;# 
  2534  0F11                     	;# 
  2535  0F12                     	;# 
  2536  0F13                     	;# 
  2537  0F14                     	;# 
  2538  0F15                     	;# 
  2539  0F16                     	;# 
  2540  0F17                     	;# 
  2541  0F18                     	;# 
  2542  0F19                     	;# 
  2543  0F1A                     	;# 
  2544  0F1B                     	;# 
  2545  0F1C                     	;# 
  2546  0F1D                     	;# 
  2547  0F1E                     	;# 
  2548  0F1F                     	;# 
  2549  0F20                     	;# 
  2550  0F21                     	;# 
  2551  0F22                     	;# 
  2552  0F23                     	;# 
  2553  0F24                     	;# 
  2554  0F25                     	;# 
  2555  0F26                     	;# 
  2556  0F27                     	;# 
  2557  0F28                     	;# 
  2558  0F29                     	;# 
  2559  0F2A                     	;# 
  2560  0F2B                     	;# 
  2561  0F2C                     	;# 
  2562  0F2D                     	;# 
  2563  0F2E                     	;# 
  2564  0F2F                     	;# 
  2565  0F8C                     	;# 
  2566  0F8D                     	;# 
  2567  0F91                     	;# 
  2568  0F95                     	;# 
  2569  0F96                     	;# 
  2570  0F97                     	;# 
  2571  0F9C                     	;# 
  2572  0F9D                     	;# 
  2573  0F9E                     	;# 
  2574  0FE3                     	;# 
  2575  0FE4                     	;# 
  2576  0FE5                     	;# 
  2577  0FE6                     	;# 
  2578  0FE7                     	;# 
  2579  0FE8                     	;# 
  2580  0FE9                     	;# 
  2581  0FEA                     	;# 
  2582  0FEB                     	;# 
  2583  0FED                     	;# 
  2584  0FEE                     	;# 
  2585  0FEF                     	;# 
  2586  0000                     	;# 
  2587  0001                     	;# 
  2588  0002                     	;# 
  2589  0003                     	;# 
  2590  0004                     	;# 
  2591  0005                     	;# 
  2592  0006                     	;# 
  2593  0007                     	;# 
  2594  0008                     	;# 
  2595  0009                     	;# 
  2596  000A                     	;# 
  2597  000B                     	;# 
  2598  000C                     	;# 
  2599  000D                     	;# 
  2600  000E                     	;# 
  2601  0011                     	;# 
  2602  0012                     	;# 
  2603  0013                     	;# 
  2604  0015                     	;# 
  2605  0016                     	;# 
  2606  0016                     	;# 
  2607  0017                     	;# 
  2608  0018                     	;# 
  2609  0019                     	;# 
  2610  001A                     	;# 
  2611  001B                     	;# 
  2612  001C                     	;# 
  2613  008C                     	;# 
  2614  008D                     	;# 
  2615  008E                     	;# 
  2616  0091                     	;# 
  2617  0092                     	;# 
  2618  0093                     	;# 
  2619  0095                     	;# 
  2620  0096                     	;# 
  2621  0097                     	;# 
  2622  0099                     	;# 
  2623  009A                     	;# 
  2624  009B                     	;# 
  2625  009B                     	;# 
  2626  009C                     	;# 
  2627  009D                     	;# 
  2628  009E                     	;# 
  2629  009F                     	;# 
  2630  010C                     	;# 
  2631  010D                     	;# 
  2632  010E                     	;# 
  2633  0111                     	;# 
  2634  0112                     	;# 
  2635  0113                     	;# 
  2636  0114                     	;# 
  2637  0115                     	;# 
  2638  0116                     	;# 
  2639  0117                     	;# 
  2640  0118                     	;# 
  2641  0119                     	;# 
  2642  011D                     	;# 
  2643  018C                     	;# 
  2644  018D                     	;# 
  2645  018E                     	;# 
  2646  0191                     	;# 
  2647  0191                     	;# 
  2648  0192                     	;# 
  2649  0193                     	;# 
  2650  0193                     	;# 
  2651  0194                     	;# 
  2652  0195                     	;# 
  2653  0196                     	;# 
  2654  0199                     	;# 
  2655  019A                     	;# 
  2656  019B                     	;# 
  2657  019B                     	;# 
  2658  019C                     	;# 
  2659  019D                     	;# 
  2660  019E                     	;# 
  2661  019F                     	;# 
  2662  020C                     	;# 
  2663  020D                     	;# 
  2664  0211                     	;# 
  2665  0211                     	;# 
  2666  0212                     	;# 
  2667  0212                     	;# 
  2668  0213                     	;# 
  2669  0213                     	;# 
  2670  0214                     	;# 
  2671  0214                     	;# 
  2672  0215                     	;# 
  2673  0215                     	;# 
  2674  0215                     	;# 
  2675  0216                     	;# 
  2676  0216                     	;# 
  2677  0217                     	;# 
  2678  0217                     	;# 
  2679  0391                     	;# 
  2680  0392                     	;# 
  2681  0393                     	;# 
  2682  0394                     	;# 
  2683  0395                     	;# 
  2684  0396                     	;# 
  2685  0498                     	;# 
  2686  0498                     	;# 
  2687  0499                     	;# 
  2688  049A                     	;# 
  2689  049B                     	;# 
  2690  049B                     	;# 
  2691  049C                     	;# 
  2692  049E                     	;# 
  2693  049F                     	;# 
  2694  0611                     	;# 
  2695  0612                     	;# 
  2696  0613                     	;# 
  2697  0613                     	;# 
  2698  0614                     	;# 
  2699  0615                     	;# 
  2700  0616                     	;# 
  2701  0616                     	;# 
  2702  0617                     	;# 
  2703  0618                     	;# 
  2704  0619                     	;# 
  2705  0619                     	;# 
  2706  061A                     	;# 
  2707  061B                     	;# 
  2708  061C                     	;# 
  2709  061C                     	;# 
  2710  0691                     	;# 
  2711  0692                     	;# 
  2712  0693                     	;# 
  2713  0694                     	;# 
  2714  0695                     	;# 
  2715  0F0F                     	;# 
  2716  0F10                     	;# 
  2717  0F11                     	;# 
  2718  0F12                     	;# 
  2719  0F13                     	;# 
  2720  0F14                     	;# 
  2721  0F15                     	;# 
  2722  0F16                     	;# 
  2723  0F17                     	;# 
  2724  0F18                     	;# 
  2725  0F19                     	;# 
  2726  0F1A                     	;# 
  2727  0F1B                     	;# 
  2728  0F1C                     	;# 
  2729  0F1D                     	;# 
  2730  0F1E                     	;# 
  2731  0F1F                     	;# 
  2732  0F20                     	;# 
  2733  0F21                     	;# 
  2734  0F22                     	;# 
  2735  0F23                     	;# 
  2736  0F24                     	;# 
  2737  0F25                     	;# 
  2738  0F26                     	;# 
  2739  0F27                     	;# 
  2740  0F28                     	;# 
  2741  0F29                     	;# 
  2742  0F2A                     	;# 
  2743  0F2B                     	;# 
  2744  0F2C                     	;# 
  2745  0F2D                     	;# 
  2746  0F2E                     	;# 
  2747  0F2F                     	;# 
  2748  0F8C                     	;# 
  2749  0F8D                     	;# 
  2750  0F91                     	;# 
  2751  0F95                     	;# 
  2752  0F96                     	;# 
  2753  0F97                     	;# 
  2754  0F9C                     	;# 
  2755  0F9D                     	;# 
  2756  0F9E                     	;# 
  2757  0FE3                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE9                     	;# 
  2764  0FEA                     	;# 
  2765  0FEB                     	;# 
  2766  0FED                     	;# 
  2767  0FEE                     	;# 
  2768  0FEF                     	;# 
  2769                           
  2770                           	psect	idataCOMMON
  2771  0000                     __pidataCOMMON:	
  2772                           
  2773                           	psect	idataBANK0
  2774  0000                     __pidataBANK0:	
  2775                           
  2776                           	psect	strings
  2777  0229                     __pstrings:	
  2778  0229                     __stringtab:	
  2779  0229  3400               	retlw	0
  2780  022A                     __end_of__stringtab:	
  2781  022A                     _mrfRegset_InitCnt:	
  2782  022A  3410               	retlw	16
  2783  022B                     __end_of_mrfRegset_InitCnt:	
  2784  022B                     _mrfRegset_RxCnt:	
  2785  022B  3406               	retlw	6
  2786  022C                     __end_of_mrfRegset_RxCnt:	
  2787  022C                     _mrfRegset_SleepCnt:	
  2788  022C  3403               	retlw	3
  2789  022D                     __end_of_mrfRegset_SleepCnt:	
  2790  022D                     _mrfRegset_TxCnt:	
  2791  022D  3404               	retlw	4
  2792  022E                     __end_of_mrfRegset_TxCnt:	
  2793  022E                     _mrfRegset_Init:	
  2794  022E  34CA               	retlw	202
  2795  022F  3471               	retlw	113
  2796  0230  34CA               	retlw	202
  2797  0231  3473               	retlw	115
  2798  0232  3480               	retlw	128
  2799  0233  3428               	retlw	40
  2800  0234  34C4               	retlw	196
  2801  0235  34E7               	retlw	231
  2802  0236  34A8               	retlw	168
  2803  0237  3460               	retlw	96
  2804  0238  34C6               	retlw	198
  2805  0239  3405               	retlw	5
  2806  023A  3482               	retlw	130
  2807  023B  3400               	retlw	0
  2808  023C  3490               	retlw	144
  2809  023D  3462               	retlw	98
  2810  023E  3498               	retlw	152
  2811  023F  3490               	retlw	144
  2812  0240  34C2               	retlw	194
  2813  0241  34AC               	retlw	172
  2814  0242  3482               	retlw	130
  2815  0243  3420               	retlw	32
  2816  0244  3455               	retlw	85
  2817  0245  3400               	retlw	0
  2818  0246  3482               	retlw	130
  2819  0247  3480               	retlw	128
  2820  0248  3480               	retlw	128
  2821  0249  3468               	retlw	104
  2822  024A  34CA               	retlw	202
  2823  024B  3471               	retlw	113
  2824  024C  34CA               	retlw	202
  2825  024D  3473               	retlw	115
  2826  024E                     __end_of_mrfRegset_Init:	
  2827  024E                     _mrfRegset_Rx:	
  2828  024E  3482               	retlw	130
  2829  024F  3400               	retlw	0
  2830  0250  34CA               	retlw	202
  2831  0251  3471               	retlw	113
  2832  0252  3480               	retlw	128
  2833  0253  3428               	retlw	40
  2834  0254  3482               	retlw	130
  2835  0255  3480               	retlw	128
  2836  0256  3480               	retlw	128
  2837  0257  3468               	retlw	104
  2838  0258  34CA               	retlw	202
  2839  0259  3473               	retlw	115
  2840  025A                     __end_of_mrfRegset_Rx:	
  2841  025A                     _mrfRegset_Tx:	
  2842  025A  3482               	retlw	130
  2843  025B  3400               	retlw	0
  2844  025C  34CA               	retlw	202
  2845  025D  3471               	retlw	113
  2846  025E  3480               	retlw	128
  2847  025F  34A8               	retlw	168
  2848  0260  3482               	retlw	130
  2849  0261  3420               	retlw	32
  2850  0262                     __end_of_mrfRegset_Tx:	
  2851  0262                     _mrfRegset_Sleep:	
  2852  0262  3482               	retlw	130
  2853  0263  3400               	retlw	0
  2854  0264  34CA               	retlw	202
  2855  0265  3471               	retlw	113
  2856  0266  3480               	retlw	128
  2857  0267  3468               	retlw	104
  2858  0268                     __end_of_mrfRegset_Sleep:	
  2859  0268                     _parameters:	
  2860  0268  3400               	retlw	0
  2861  0269  3401               	retlw	1
  2862  026A  3436               	retlw	_cfgRam& (0+255)
  2863  026B  3401               	retlw	1
  2864  026C  3402               	retlw	2
  2865  026D  343D               	retlw	(_cfgRam+7)& (0+255)
  2866  026E                     __end_of_parameters:	
  2867  000B                     _INTCONbits	set	11
  2868  000C                     _PORTAbits	set	12
  2869  000D                     _PORTBbits	set	13
  2870  000E                     _PORTCbits	set	14
  2871  009D                     _ADCON0	set	157
  2872  009E                     _ADCON1	set	158
  2873  009F                     _ADCON2	set	159
  2874  009C                     _ADRESH	set	156
  2875  009B                     _ADRESL	set	155
  2876  0095                     _OPTION_REGbits	set	149
  2877  0099                     _OSCCON	set	153
  2878  008C                     _TRISAbits	set	140
  2879  008D                     _TRISBbits	set	141
  2880  008E                     _TRISCbits	set	142
  2881  0097                     _WDTCONbits	set	151
  2882  0117                     _FVRCON	set	279
  2883  010C                     _LATAbits	set	268
  2884  010D                     _LATBbits	set	269
  2885  010E                     _LATCbits	set	270
  2886  018C                     _ANSELA	set	396
  2887  018D                     _ANSELB	set	397
  2888  018E                     _ANSELC	set	398
  2889  018E                     _ANSELCbits	set	398
  2890  020C                     _WPUAbits	set	524
  2891                           
  2892                           ; #config settings
  2893  0000                     
  2894                           	psect	cinit
  2895  0801                     start_initialization:	
  2896  0801                     __initialization:	
  2897                           
  2898                           ; Clear objects allocated to BANK0
  2899  0801  3035               	movlw	low __pbssBANK0
  2900  0802  0084               	movwf	4
  2901  0803  3000               	movlw	high __pbssBANK0
  2902  0804  0085               	movwf	5
  2903  0805  300A               	movlw	10
  2904  0806  3182  22B4  3188   	fcall	clear_ram0
  2905                           
  2906                           ; Clear objects allocated to BANK1
  2907  0809  30A0               	movlw	low __pbssBANK1
  2908  080A  0084               	movwf	4
  2909  080B  3000               	movlw	high __pbssBANK1
  2910  080C  0085               	movwf	5
  2911  080D  304E               	movlw	78
  2912  080E  3182  22B4  3188   	fcall	clear_ram0
  2913                           
  2914                           ;initializer for _macPtr
  2915  0811  30A0               	movlw	_mrf49xaInst& (0+255)
  2916  0812  00F8               	movwf	__pdataCOMMON& (0+127)
  2917                           
  2918                           ;initializer for _coldBoot
  2919  0813  3001               	movlw	1
  2920  0814  00BF               	movwf	__pdataBANK0& (0+127)
  2921  0815                     end_of_initialization:	
  2922                           ;End of C runtime variable initialization code
  2923                           
  2924  0815                     __end_of__initialization:	
  2925  0815  0020               	movlb	0
  2926  0816  2847               	ljmp	_main	;jump to C main() function
  2927  0817                     __ptext25:	
  2928 ;; *************** function _SoftI2cInit *****************
  2929 ;; Defined at:
  2930 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;		None
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;		None
  2935 ;; Return value:  Size  Location     Type
  2936 ;;		None               void
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0, pclath, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 17F/2
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2944 ;;      Params:         0       0       0       0
  2945 ;;      Locals:         0       0       0       0
  2946 ;;      Temps:          0       0       0       0
  2947 ;;      Totals:         0       0       0       0
  2948 ;;Total ram usage:        0 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    7
  2951 ;; This function calls:
  2952 ;;		_SoftI2cStart
  2953 ;;		_SoftI2cStop
  2954 ;;		_SoftI2cTxByte
  2955 ;; This function is called by:
  2956 ;;		_PwrI2cInit
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           
  2961                           ;psect for function _SoftI2cInit
  2962  0817                     _SoftI2cInit:	
  2963                           
  2964                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  2968                           
  2969                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  2970                           
  2971                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  2972                           
  2973                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  2974  0817  27C9  3188         	fcall	PL20	;call to abstracted procedure
  2975                           
  2976                           ;softI2c.c: 32: SoftI2cStart();
  2977  0819  22B9  3188         	fcall	_SoftI2cStart
  2978                           
  2979                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  2980  081B  3000               	movlw	0
  2981  081C  224B  3188         	fcall	_SoftI2cTxByte
  2982                           
  2983                           ;softI2c.c: 34: SoftI2cStop();
  2984  081E  2AC6               	ljmp	l2689
  2985  081F                     __end_of_SoftI2cInit:	
  2986  081F                     __ptext21:	
  2987 ;; *************** function _PwrRfInit *****************
  2988 ;; Defined at:
  2989 ;;		line 90 in file "../../../src/node/power.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 1F/2
  3000 ;;		On exit  : 1F/1
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3003 ;;      Params:         0       0       0       0
  3004 ;;      Locals:         0       0       0       0
  3005 ;;      Temps:          0       0       0       0
  3006 ;;      Totals:         0       0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:   10
  3010 ;; This function calls:
  3011 ;;		_ExtIntInit
  3012 ;;		_Mrf49xaInit
  3013 ;;		_Sleepy
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           
  3020                           ;psect for function _PwrRfInit
  3021  081F                     _PwrRfInit:	
  3022                           
  3023                           ;power.c: 92: TRISAbits.TRISA2 = 1;
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _PwrRfInit: [allreg]
  3027  081F  0021               	movlb	1	; select bank1
  3028  0820  150C               	bsf	12,2	;volatile
  3029                           
  3030                           ;power.c: 93: TRISAbits.TRISA4 = 0;
  3031  0821  120C               	bcf	12,4	;volatile
  3032                           
  3033                           ;power.c: 94: TRISAbits.TRISA5 = 0;
  3034  0822  128C               	bcf	12,5	;volatile
  3035                           
  3036                           ;power.c: 96: TRISBbits.TRISB7 = 0;
  3037  0823  138D               	bcf	13,7	;volatile
  3038                           
  3039                           ;power.c: 98: TRISCbits.TRISC1 = 0;
  3040  0824  108E               	bcf	14,1	;volatile
  3041                           
  3042                           ;power.c: 99: TRISCbits.TRISC4 = 0;
  3043  0825  120E               	bcf	14,4	;volatile
  3044                           
  3045                           ;power.c: 100: TRISCbits.TRISC6 = 0;
  3046  0826  130E               	bcf	14,6	;volatile
  3047                           
  3048                           ;power.c: 101: TRISCbits.TRISC7 = 0;
  3049  0827  138E               	bcf	14,7	;volatile
  3050                           
  3051                           ;power.c: 102: TRISCbits.TRISC3 = 1;
  3052  0828  158E               	bsf	14,3	;volatile
  3053                           
  3054                           ;power.c: 103: TRISCbits.TRISC5 = 1;
  3055  0829  168E               	bsf	14,5	;volatile
  3056                           
  3057                           ;power.c: 105: LATCbits.LATC1 = 0;
  3058  082A  0022               	movlb	2	; select bank2
  3059  082B  108E               	bcf	14,1	;volatile
  3060                           
  3061                           ;power.c: 107: LATAbits.LATA4 = 0;
  3062  082C  120C               	bcf	12,4	;volatile
  3063                           
  3064                           ;power.c: 108: LATAbits.LATA5 = 0;
  3065  082D  128C               	bcf	12,5	;volatile
  3066                           
  3067                           ;power.c: 109: LATCbits.LATC4 = 0;
  3068  082E  120E               	bcf	14,4	;volatile
  3069                           
  3070                           ;power.c: 110: PORTCbits.RC6 = 1;
  3071  082F  0020               	movlb	0	; select bank0
  3072  0830  170E               	bsf	14,6	;volatile
  3073                           
  3074                           ;power.c: 111: LATCbits.LATC7 = 0;
  3075  0831  0022               	movlb	2	; select bank2
  3076  0832  138E               	bcf	14,7	;volatile
  3077                           
  3078                           ;power.c: 112: PORTBbits.RB7 = 0;
  3079  0833  0020               	movlb	0	; select bank0
  3080  0834  138D               	bcf	13,7	;volatile
  3081                           
  3082                           ;power.c: 114: WPUAbits.WPUA2 = 1;
  3083  0835  0024               	movlb	4	; select bank4
  3084  0836  150C               	bsf	12,2	;volatile
  3085                           
  3086                           ;power.c: 115: Sleepy(10);
  3087  0837  300A               	movlw	10
  3088  0838  0020               	movlb	0	; select bank0
  3089  0839  00A0               	movwf	Sleepy@ms
  3090  083A  01A1               	clrf	Sleepy@ms+1
  3091  083B  21AD  3188         	fcall	_Sleepy
  3092                           
  3093                           ;power.c: 117: Mrf49xaInit(&mrf49xaInst);
  3094  083D  30A0               	movlw	_mrf49xaInst& (0+255)
  3095  083E  214A  3188         	fcall	_Mrf49xaInit
  3096                           
  3097                           ;power.c: 118: ExtIntInit();
  3098  0840  2841               	ljmp	l2791
  3099  0841                     __end_of_PwrRfInit:	
  3100  0841                     __ptext58:	
  3101 ;; *************** function _ExtIntInit *****************
  3102 ;; Defined at:
  3103 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		None
  3112 ;; Tracked objects:
  3113 ;;		On entry : 1F/0
  3114 ;;		On exit  : 1F/1
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3117 ;;      Params:         0       0       0       0
  3118 ;;      Locals:         0       0       0       0
  3119 ;;      Temps:          0       0       0       0
  3120 ;;      Totals:         0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    5
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_Mrf49xaTick
  3128 ;;		_PwrRfInit
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           
  3133                           ;psect for function _ExtIntInit
  3134  0841                     _ExtIntInit:	
  3135  0841                     l2791:	
  3136                           ;incstack = 0
  3137                           ; Regs used in _ExtIntInit: []
  3138                           
  3139                           
  3140                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3141  0841  0021               	movlb	1	; select bank1
  3142  0842  1315               	bcf	21,6	;volatile
  3143                           
  3144                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3145  0843  108B               	bcf	11,1	;volatile
  3146                           
  3147                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3148  0844  160B               	bsf	11,4	;volatile
  3149                           
  3150                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3151  0845  178B               	bsf	11,7	;volatile
  3152  0846  0008               	return
  3153  0847                     __end_of_ExtIntInit:	
  3154  0847                     __pmaintext:	
  3155 ;;
  3156 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3157 ;;
  3158 ;; *************** function _main *****************
  3159 ;; Defined at:
  3160 ;;		line 32 in file "../../../src/node/main.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  temperature     2   19[BANK0 ] unsigned int 
  3165 ;;  humidity        2   17[BANK0 ] unsigned int 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 17F/0
  3172 ;;		On exit  : 1F/1
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3175 ;;      Params:         0       0       0       0
  3176 ;;      Locals:         0       4       0       0
  3177 ;;      Temps:          0       0       0       0
  3178 ;;      Totals:         0       4       0       0
  3179 ;;Total ram usage:        4 bytes
  3180 ;; Hardware stack levels required when called:   12
  3181 ;; This function calls:
  3182 ;;		_AdcSample
  3183 ;;		_CfgLoad
  3184 ;;		_Mcp9800Read
  3185 ;;		_Mcp9800Start
  3186 ;;		_Mrf49xaNeedsReset
  3187 ;;		_Mrf49xaTick
  3188 ;;		_PwrAdcInit
  3189 ;;		_PwrAdcSleep
  3190 ;;		_PwrAdcWake
  3191 ;;		_PwrI2cInit
  3192 ;;		_PwrI2cSleep
  3193 ;;		_PwrI2cWake
  3194 ;;		_PwrRfInit
  3195 ;;		_PwrRfSleep
  3196 ;;		_PwrRfWake
  3197 ;;		_PwrSensorInit
  3198 ;;		_PwrSensorSleep
  3199 ;;		_PwrSensorWake
  3200 ;;		_RfSendPowerState
  3201 ;;		_RfSendSampleWeatherNode
  3202 ;;		_Sleepy
  3203 ;; This function is called by:
  3204 ;;		Startup code after reset
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           
  3209                           ;psect for function _main
  3210  0847                     _main:	
  3211                           
  3212                           ;main.c: 36: OSCCON = 0b01111000;
  3213                           
  3214                           ;incstack = 0
  3215                           ; Regs used in _main: [allreg]
  3216  0847  3078               	movlw	120
  3217  0848  0021               	movlb	1	; select bank1
  3218  0849  0099               	movwf	25	;volatile
  3219                           
  3220                           ;main.c: 38: PwrAdcInit();
  3221  084A  2776  3188         	fcall	_PwrAdcInit
  3222                           
  3223                           ;main.c: 39: PwrSensorInit();
  3224  084C  27FC  3188         	fcall	_PwrSensorInit
  3225                           
  3226                           ;main.c: 40: PwrI2cInit();
  3227  084E  277F  3188         	fcall	_PwrI2cInit
  3228                           
  3229                           ;main.c: 41: PwrRfInit();
  3230  0850  201F  3188         	fcall	_PwrRfInit
  3231                           
  3232                           ;main.c: 43: CfgLoad();
  3233  0852  22E2  3188         	fcall	_CfgLoad
  3234                           
  3235                           ;main.c: 45: PwrAdcSleep();
  3236  0854  2659  3188         	fcall	_PwrAdcSleep
  3237                           
  3238                           ;main.c: 46: PwrSensorSleep();
  3239  0856  22DA  3188         	fcall	_PwrSensorSleep
  3240                           
  3241                           ;main.c: 47: PwrI2cSleep();
  3242  0858  22D8               	fcall	_PwrI2cSleep
  3243  0859                     l3569:	
  3244                           
  3245                           ;main.c: 48: PwrRfSleep();
  3246  0859  3182  226E  3188   	fcall	_PwrRfSleep
  3247                           
  3248                           ;main.c: 51: {
  3249                           ;main.c: 54: Sleepy(5000);
  3250  085C  3088               	movlw	136
  3251  085D  0020               	movlb	0	; select bank0
  3252  085E  00A0               	movwf	Sleepy@ms
  3253  085F  3013               	movlw	19
  3254  0860  00A1               	movwf	Sleepy@ms+1
  3255  0861  21AD  3188         	fcall	_Sleepy
  3256                           
  3257                           ;main.c: 56: PwrSensorWake();
  3258  0863  2787  3188         	fcall	_PwrSensorWake
  3259                           
  3260                           ;main.c: 57: PwrI2cWake();
  3261  0865  23E5  3188         	fcall	_PwrI2cWake
  3262                           
  3263                           ;main.c: 59: Mcp9800Start(Mcp9800_9bit);
  3264  0867  3000               	movlw	0
  3265  0868  220E  3188         	fcall	_Mcp9800Start
  3266                           
  3267                           ;main.c: 61: PwrAdcWake();
  3268  086A  265E  3188         	fcall	_PwrAdcWake
  3269                           
  3270                           ;main.c: 62: uint16_t humidity = AdcSample(ADC_AN4);
  3271  086C  3004               	movlw	4
  3272  086D  2624  3188         	fcall	_AdcSample
  3273  086F  0823               	movf	?_AdcSample+1,w
  3274  0870  00B2               	movwf	main@humidity+1
  3275  0871  0822               	movf	?_AdcSample,w
  3276  0872  00B1               	movwf	main@humidity
  3277                           
  3278                           ;main.c: 63: Sleepy(100);
  3279  0873  3064               	movlw	100
  3280  0874  00A0               	movwf	Sleepy@ms
  3281  0875  01A1               	clrf	Sleepy@ms+1
  3282  0876  21AD  3188         	fcall	_Sleepy
  3283                           
  3284                           ;main.c: 64: uint16_t temperature = Mcp9800Read();
  3285  0878  21DD  3188         	fcall	_Mcp9800Read
  3286  087A  0825               	movf	?_Mcp9800Read+1,w
  3287  087B  00B4               	movwf	main@temperature+1
  3288  087C  0824               	movf	?_Mcp9800Read,w
  3289  087D  00B3               	movwf	main@temperature
  3290                           
  3291                           ;main.c: 66: PwrSensorSleep();
  3292  087E  22DA  3188         	fcall	_PwrSensorSleep
  3293                           
  3294                           ;main.c: 67: PwrI2cSleep();
  3295  0880  22D8               	fcall	_PwrI2cSleep
  3296                           
  3297                           ;main.c: 69: PwrRfWake();
  3298  0881  3182  229F  3188   	fcall	_PwrRfWake
  3299                           
  3300                           ;main.c: 71: if (macPtr->txPacket.state != PKT_FREE)
  3301  0884  0853               	movf	(_mrf49xaInst^(0+128)+51),w
  3302  0885  1903               	btfsc	3,2
  3303  0886  288C               	goto	l3599
  3304                           
  3305                           ;main.c: 72: {
  3306                           ;main.c: 73: Mrf49xaNeedsReset(macPtr);
  3307  0887  30A0               	movlw	_mrf49xaInst& (0+255)
  3308  0888  22D5  3188         	fcall	_Mrf49xaNeedsReset
  3309                           
  3310                           ;main.c: 74: Mrf49xaTick(macPtr);
  3311  088A  20AB  3188         	fcall	_Mrf49xaTick
  3312  088C                     l3599:	
  3313                           
  3314                           ;main.c: 75: }
  3315                           ;main.c: 77: powerStatusTicker++;
  3316  088C  0020               	movlb	0	; select bank0
  3317  088D  300F               	movlw	15
  3318  088E  0AB5               	incf	_powerStatusTicker,f
  3319                           
  3320                           ;main.c: 79: if (powerStatusTicker >= 15)
  3321  088F  0235               	subwf	_powerStatusTicker,w
  3322  0890  1C03               	skipc
  3323  0891  289A               	goto	l3611
  3324                           
  3325                           ;main.c: 80: {
  3326                           ;main.c: 81: powerStatusTicker = 0;
  3327  0892  01B5               	clrf	_powerStatusTicker
  3328                           
  3329                           ;main.c: 83: RfSendPowerState(macPtr);
  3330  0893  25EB  3188         	fcall	_RfSendPowerState
  3331  0895                     l3607:	
  3332                           
  3333                           ;main.c: 85: {
  3334                           ;main.c: 86: Mrf49xaTick(macPtr);
  3335  0895  20AB  3188         	fcall	_Mrf49xaTick
  3336                           
  3337                           ;main.c: 87: }
  3338                           ;main.c: 88: while (macPtr->txPacket.state != PKT_FREE);
  3339  0897  08D3               	movf	(_mrf49xaInst^(0+128)+51),f
  3340  0898  1D03               	skipz
  3341  0899  2895               	goto	l3607
  3342  089A                     l3611:	
  3343                           
  3344                           ;main.c: 89: }
  3345                           ;main.c: 91: RfSendSampleWeatherNode(macPtr, temperature, humidity);
  3346  089A  0020               	movlb	0	; select bank0
  3347  089B  0834               	movf	main@temperature+1,w
  3348  089C  00A8               	movwf	RfSendSampleWeatherNode@temperature+1
  3349  089D  0833               	movf	main@temperature,w
  3350  089E  00A7               	movwf	RfSendSampleWeatherNode@temperature
  3351  089F  0832               	movf	main@humidity+1,w
  3352  08A0  00AA               	movwf	RfSendSampleWeatherNode@humidity+1
  3353  08A1  0831               	movf	main@humidity,w
  3354  08A2  00A9               	movwf	RfSendSampleWeatherNode@humidity
  3355  08A3  2663  3188         	fcall	_RfSendSampleWeatherNode
  3356  08A5                     l3613:	
  3357                           
  3358                           ;main.c: 93: {
  3359                           ;main.c: 94: Mrf49xaTick(macPtr);
  3360  08A5  20AB  3188         	fcall	_Mrf49xaTick
  3361                           
  3362                           ;main.c: 95: }
  3363                           ;main.c: 96: while (macPtr->txPacket.state != PKT_FREE);
  3364  08A7  08D3               	movf	(_mrf49xaInst^(0+128)+51),f
  3365  08A8  1903               	btfsc	3,2
  3366  08A9  2859               	goto	l3569
  3367  08AA  28A5               	goto	l3613
  3368  08AB                     __end_of_main:	
  3369  08AB                     __ptext27:	
  3370 ;; *************** function _Mrf49xaTick *****************
  3371 ;; Defined at:
  3372 ;;		line 130 in file "../../../src/devices/mrf49xa_mac.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  3375 ;;		 -> mrf49xaInst(78), 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  inst            1   15[BANK0 ] PTR struct Mrf49xaMac_s
  3378 ;;		 -> mrf49xaInst(78), 
  3379 ;;  timeout         1   14[BANK0 ] unsigned char 
  3380 ;;  packet          1   16[BANK0 ] PTR struct rfTrcvPacket_
  3381 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;		None               void
  3384 ;; Registers used:
  3385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 1E/1
  3388 ;;		On exit  : 1F/1
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3391 ;;      Params:         0       0       0       0
  3392 ;;      Locals:         0       3       0       0
  3393 ;;      Temps:          0       1       0       0
  3394 ;;      Totals:         0       4       0       0
  3395 ;;Total ram usage:        4 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:   11
  3398 ;; This function calls:
  3399 ;;		_ExtIntInit
  3400 ;;		_HandlePacket
  3401 ;;		_Mrf49RxSts
  3402 ;;		_Mrf49xaFreePacket
  3403 ;;		_Mrf49xaInit
  3404 ;;		_Mrf49xaModeTx
  3405 ;;		_Mrf49xaNeedsReset
  3406 ;;		_Mrf49xaPacketPending
  3407 ;;		_Mrf49xaRxPacket
  3408 ;;		_Sleepy
  3409 ;; This function is called by:
  3410 ;;		_main
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _Mrf49xaTick
  3416  08AB                     _Mrf49xaTick:	
  3417                           
  3418                           ;mrf49xa_mac.c: 139: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_HW_BU
      +                          SY_RX &&
  3419                           ;mrf49xa_mac.c: 140: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_HW_BUSY_R
      +                          X)
  3420                           
  3421                           ;incstack = 0
  3422                           ; Regs used in _Mrf49xaTick: [allreg]
  3423  08AB  0021               	movlb	1	; select bank1
  3424  08AC  0823               	movf	(_mrf49xaInst^(0+128)+3),w
  3425  08AD  3A04               	xorlw	4
  3426  08AE  1D03               	skipz
  3427  08AF  28B7               	goto	l3287
  3428  08B0  083B               	movf	(_mrf49xaInst^(0+128)+27),w
  3429  08B1  3A04               	xorlw	4
  3430  08B2  1D03               	skipz
  3431  08B3  28B7               	goto	l3287
  3432                           
  3433                           ;mrf49xa_mac.c: 141: {
  3434                           ;mrf49xa_mac.c: 142: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3435  08B4  30A0               	movlw	_mrf49xaInst& (0+255)
  3436  08B5  22D5  3188         	fcall	_Mrf49xaNeedsReset
  3437  08B7                     l3287:	
  3438                           
  3439                           ;mrf49xa_mac.c: 143: }
  3440                           ;mrf49xa_mac.c: 144: if (((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset)
  3441  08B7  1FED               	btfss	(_mrf49xaInst^(0+128)+77),7
  3442  08B8  28BD               	goto	l3295
  3443                           
  3444                           ;mrf49xa_mac.c: 145: {
  3445                           ;mrf49xa_mac.c: 146: Mrf49xaInit(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3446  08B9  30A0               	movlw	_mrf49xaInst& (0+255)
  3447  08BA  214A  3188         	fcall	_Mrf49xaInit
  3448                           
  3449                           ;mrf49xa_mac.c: 147: ExtIntInit();
  3450  08BC  2841               	ljmp	l2791
  3451  08BD                     l3295:	
  3452                           
  3453                           ;mrf49xa_mac.c: 149: }
  3454                           ;mrf49xa_mac.c: 152: if (Mrf49xaPacketPending(((Mrf49xaMac_t*)(&mrf49xaInst))))
  3455  08BD  30A0               	movlw	_mrf49xaInst& (0+255)
  3456  08BE  23DC  3188         	fcall	_Mrf49xaPacketPending
  3457  08C0  3A00               	xorlw	0
  3458  08C1  1903               	skipnz
  3459  08C2  28E7               	goto	l3309
  3460                           
  3461                           ;mrf49xa_mac.c: 153: {
  3462                           ;mrf49xa_mac.c: 154: rfTrcvPacket_t* packet = Mrf49xaRxPacket(((Mrf49xaMac_t*)(&mrf49xaI
      +                          nst)));
  3463  08C3  30A0               	movlw	_mrf49xaInst& (0+255)
  3464  08C4  2768  3188         	fcall	_Mrf49xaRxPacket
  3465  08C6  0020               	movlb	0	; select bank0
  3466  08C7  00B0               	movwf	Mrf49xaTick@packet
  3467                           
  3468                           ;mrf49xa_mac.c: 162: if (packet->packet.dst == 0xFF || packet->packet.dst == ((Mrf49xaMa
      +                          c_t*)(&mrf49xaInst))->nodeId)
  3469  08C8  3E03               	addlw	3
  3470  08C9  0086               	movwf	6
  3471  08CA  0187               	clrf	7
  3472  08CB  0801               	movf	1,w
  3473  08CC  3AFF               	xorlw	255
  3474  08CD  1903               	skipnz
  3475  08CE  28D7               	goto	l3303
  3476  08CF  0830               	movf	Mrf49xaTick@packet,w
  3477  08D0  3E03               	addlw	3
  3478  08D1  0086               	movwf	6
  3479  08D2  0801               	movf	1,w
  3480  08D3  0021               	movlb	1	; select bank1
  3481  08D4  066C               	xorwf	(_mrf49xaInst^(0+128)+76),w
  3482  08D5  1D03               	skipz
  3483  08D6  28E2               	goto	l3307
  3484  08D7                     l3303:	
  3485                           
  3486                           ;mrf49xa_mac.c: 163: {
  3487                           ;mrf49xa_mac.c: 164: packet->packet.size -= 5;
  3488  08D7  0020               	movlb	0	; select bank0
  3489  08D8  0A30               	incf	Mrf49xaTick@packet,w
  3490  08D9  0086               	movwf	6
  3491  08DA  3005               	movlw	5
  3492  08DB  0187               	clrf	7
  3493  08DC  0281               	subwf	1,f
  3494                           
  3495                           ;mrf49xa_mac.c: 167: HandlePacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  3496  08DD  0830               	movf	Mrf49xaTick@packet,w
  3497  08DE  00A9               	movwf	HandlePacket@packet
  3498  08DF  22EA  3188         	fcall	_HandlePacket
  3499                           
  3500                           ;mrf49xa_mac.c: 169: }
  3501  08E1  28E7               	goto	l3309
  3502  08E2                     l3307:	
  3503                           
  3504                           ;mrf49xa_mac.c: 170: else
  3505                           ;mrf49xa_mac.c: 171: {
  3506                           ;mrf49xa_mac.c: 172: Mrf49xaFreePacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  3507  08E2  0020               	movlb	0	; select bank0
  3508  08E3  0830               	movf	Mrf49xaTick@packet,w
  3509  08E4  00A0               	movwf	Mrf49xaFreePacket@packet
  3510  08E5  22DD  3188         	fcall	_Mrf49xaFreePacket
  3511  08E7                     l3309:	
  3512                           
  3513                           ;mrf49xa_mac.c: 173: }
  3514                           ;mrf49xa_mac.c: 177: }
  3515                           ;mrf49xa_mac.c: 179: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state == PKT_WAITING_
      +                          FOR_ACK)
  3516  08E7  0021               	movlb	1	; select bank1
  3517  08E8  0853               	movf	(_mrf49xaInst^(0+128)+51),w
  3518  08E9  3A03               	xorlw	3
  3519  08EA  1D03               	skipz
  3520  08EB  291A               	goto	l3329
  3521                           
  3522                           ;mrf49xa_mac.c: 180: {
  3523                           ;mrf49xa_mac.c: 181: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck == ACK_RECEIV
      +                          ED)
  3524  08EC  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  3525  08ED  0C89               	rrf	9,f
  3526  08EE  0C89               	rrf	9,f
  3527  08EF  3903               	andlw	3
  3528  08F0  3A02               	xorlw	2
  3529  08F1  1D03               	skipz
  3530  08F2  28F5               	goto	l3315
  3531  08F3                     l3313:	
  3532                           
  3533                           ;mrf49xa_mac.c: 182: {
  3534                           ;mrf49xa_mac.c: 183: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_FREE;
  3535  08F3  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  3536                           
  3537                           ;mrf49xa_mac.c: 184: }
  3538  08F4  291A               	goto	l3329
  3539  08F5                     l3315:	
  3540                           
  3541                           ;mrf49xa_mac.c: 185: else if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry == 10)
  3542  08F5  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  3543  08F6  390F               	andlw	15
  3544  08F7  3A0A               	xorlw	10
  3545  08F8  1D03               	skipz
  3546  08F9  2912               	goto	l3325
  3547                           
  3548                           ;mrf49xa_mac.c: 186: {
  3549                           ;mrf49xa_mac.c: 187: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit == 1)
  3550  08FA  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  3551  08FB  3903               	andlw	3
  3552  08FC  3A01               	xorlw	1
  3553  08FD  1903               	btfsc	3,2
  3554  08FE  28F3               	goto	l3313
  3555                           
  3556                           ;mrf49xa_mac.c: 193: else
  3557                           ;mrf49xa_mac.c: 194: {
  3558                           ;mrf49xa_mac.c: 196: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  3559  08FF  30F0               	movlw	-16
  3560  0900  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  3561                           
  3562                           ;mrf49xa_mac.c: 197: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit++;
  3563  0901  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  3564  0902  3903               	andlw	3
  3565  0903  0020               	movlb	0	; select bank0
  3566  0904  00AD               	movwf	??_Mrf49xaTick
  3567  0905  0AAD               	incf	??_Mrf49xaTick,f
  3568  0906  0EAD               	swapf	??_Mrf49xaTick,f
  3569  0907  0021               	movlb	1	; select bank1
  3570  0908  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  3571  0909  0020               	movlb	0	; select bank0
  3572  090A  062D               	xorwf	??_Mrf49xaTick,w
  3573  090B  39CF               	andlw	-49
  3574  090C  062D               	xorwf	??_Mrf49xaTick,w
  3575  090D  0021               	movlb	1	; select bank1
  3576  090E  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  3577                           
  3578                           ;mrf49xa_mac.c: 198: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_READY_FOR_TX;
  3579  090F  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  3580  0910  0AD3               	incf	(_mrf49xaInst^(0+128)+51),f
  3581  0911  291A               	goto	l3329
  3582  0912                     l3325:	
  3583                           
  3584                           ;mrf49xa_mac.c: 201: else
  3585                           ;mrf49xa_mac.c: 202: {
  3586                           ;mrf49xa_mac.c: 203: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry++;
  3587  0912  27A2  3188         	fcall	PL10	;call to abstracted procedure
  3588                           
  3589                           ;mrf49xa_mac.c: 204: Sleepy(5);
  3590  0914  3005               	movlw	5
  3591  0915  0020               	movlb	0	; select bank0
  3592  0916  00A0               	movwf	Sleepy@ms
  3593  0917  01A1               	clrf	Sleepy@ms+1
  3594  0918  21AD  3188         	fcall	_Sleepy
  3595  091A                     l3329:	
  3596                           
  3597                           ;mrf49xa_mac.c: 205: }
  3598                           ;mrf49xa_mac.c: 206: }
  3599                           ;mrf49xa_mac.c: 208: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state == PKT_READY_FO
      +                          R_TX &&
  3600                           ;mrf49xa_mac.c: 209: ((Mrf49xaMac_t*)(&mrf49xaInst))->state == RECV_IDLE)
  3601  091A  0021               	movlb	1	; select bank1
  3602  091B  0B53               	decfsz	(_mrf49xaInst^(0+128)+51),w
  3603  091C  0008               	return
  3604  091D  0B6B               	decfsz	(_mrf49xaInst^(0+128)+75),w
  3605  091E  0008               	return
  3606                           
  3607                           ;mrf49xa_mac.c: 210: {
  3608                           ;mrf49xa_mac.c: 211: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry >= 10)
  3609  091F  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  3610  0920  390F               	andlw	15
  3611  0921  0020               	movlb	0	; select bank0
  3612  0922  00AD               	movwf	??_Mrf49xaTick
  3613  0923  300A               	movlw	10
  3614  0924  022D               	subwf	??_Mrf49xaTick,w
  3615  0925  1C03               	skipc
  3616  0926  292D               	goto	l3341
  3617                           
  3618                           ;mrf49xa_mac.c: 212: {
  3619                           ;mrf49xa_mac.c: 214: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  3620  0927  30F0               	movlw	-16
  3621  0928  0021               	movlb	1	; select bank1
  3622  0929  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  3623                           
  3624                           ;mrf49xa_mac.c: 215: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_WAITING_FOR_A
      +                          CK;
  3625  092A  3003               	movlw	3
  3626  092B  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
  3627  092C  0008               	return
  3628  092D                     l3341:	
  3629                           
  3630                           ;mrf49xa_mac.c: 217: }
  3631                           ;mrf49xa_mac.c: 221: uint8_t timeout = 0;
  3632  092D  01AE               	clrf	Mrf49xaTick@timeout
  3633  092E                     l3343:	
  3634                           
  3635                           ;mrf49xa_mac.c: 225: {
  3636                           ;mrf49xa_mac.c: 226: Mrf49RxSts(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3637  092E  30A0               	movlw	_mrf49xaInst& (0+255)
  3638  092F  258E  3188         	fcall	_Mrf49RxSts
  3639                           
  3640                           ;mrf49xa_mac.c: 228: if (((Mrf49xaMac_t*)(&mrf49xaInst))->state == RECV_IDLE && ((Mrf49x
      +                          aMac_t*)(&mrf49xaInst))->status.flags.msb.signalPresent == 0)
  3641  0931  0021               	movlb	1	; select bank1
  3642  0932  0B6B               	decfsz	(_mrf49xaInst^(0+128)+75),w
  3643  0933  2936               	goto	l3351
  3644  0934  1C20               	btfss	_mrf49xaInst^(0+128),0
  3645  0935  2944               	goto	l442
  3646  0936                     l3351:	
  3647                           
  3648                           ;mrf49xa_mac.c: 232: }
  3649                           ;mrf49xa_mac.c: 234: Sleepy(5);
  3650  0936  3005               	movlw	5
  3651  0937  0020               	movlb	0	; select bank0
  3652  0938  00A0               	movwf	Sleepy@ms
  3653  0939  01A1               	clrf	Sleepy@ms+1
  3654  093A  21AD  3188         	fcall	_Sleepy
  3655  093C  300B               	movlw	11
  3656                           
  3657                           ;mrf49xa_mac.c: 235: timeout++;
  3658  093D  0AAE               	incf	Mrf49xaTick@timeout,f
  3659                           
  3660                           ;mrf49xa_mac.c: 237: if (timeout > 10)
  3661  093E  022E               	subwf	Mrf49xaTick@timeout,w
  3662  093F  1C03               	skipc
  3663  0940  292E               	goto	l3343
  3664                           
  3665                           ;mrf49xa_mac.c: 238: {
  3666                           ;mrf49xa_mac.c: 239: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry++;
  3667  0941  0021               	movlb	1	; select bank1
  3668  0942  27A2               	fcall	PL10	;call to abstracted procedure
  3669  0943  0008               	return
  3670  0944                     l442:	
  3671                           
  3672                           ;mrf49xa_mac.c: 253: INTCONbits.INTE = 0;;
  3673  0944  120B               	bcf	11,4	;volatile
  3674                           
  3675                           ;mrf49xa_mac.c: 254: Mrf49xaModeTx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3676  0945  23E6               	fcall	_Mrf49xaModeTx
  3677                           
  3678                           ;mrf49xa_mac.c: 255: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_HW_BUSY_TX;
  3679  0946  3002               	movlw	2
  3680  0947  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
  3681                           
  3682                           ;mrf49xa_mac.c: 259: INTCONbits.INTE = 1;;
  3683  0948  160B               	bsf	11,4	;volatile
  3684  0949  0008               	return
  3685  094A                     __end_of_Mrf49xaTick:	
  3686  094A                     __ptext31:	
  3687 ;; *************** function _Mrf49xaInit *****************
  3688 ;; Defined at:
  3689 ;;		line 126 in file "../../../src/devices/mrf49xa.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  3692 ;;		 -> mrf49xaInst(78), 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;  inst            1    8[BANK0 ] PTR struct Mrf49xaMac_s
  3695 ;;		 -> mrf49xaInst(78), 
  3696 ;;  k               1    9[BANK0 ] unsigned char 
  3697 ;;  j               1    0        unsigned char 
  3698 ;;  i               1    0        unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;		None               void
  3701 ;; Registers used:
  3702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 1E/0
  3705 ;;		On exit  : 1F/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3708 ;;      Params:         0       0       0       0
  3709 ;;      Locals:         0       2       0       0
  3710 ;;      Temps:          0       0       0       0
  3711 ;;      Totals:         0       2       0       0
  3712 ;;Total ram usage:        2 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    9
  3715 ;; This function calls:
  3716 ;;		_Mrf49TxCmd
  3717 ;;		_Mrf49xaModeRx
  3718 ;;		_Mrf49xaServe
  3719 ;;		_Sleepy
  3720 ;; This function is called by:
  3721 ;;		_Mrf49xaTick
  3722 ;;		_PwrRfInit
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           
  3727                           ;psect for function _Mrf49xaInit
  3728  094A                     _Mrf49xaInit:	
  3729  094A                     l234:	
  3730                           ;incstack = 0
  3731                           ; Regs used in _Mrf49xaInit: [allreg]
  3732                           ;mrf49xa.c: 128: UI08_t k;
  3733                           ;mrf49xa.c: 130: UI08_t i, j;
  3734                           ;mrf49xa.c: 132: reset:
  3735                           
  3736                           
  3737                           ;mrf49xa.c: 134: for (k = 0; k < sizeof(Mrf49xaMac_t); k++)
  3738  094A  0020               	movlb	0	; select bank0
  3739  094B  01A9               	clrf	Mrf49xaInit@k
  3740  094C                     l3011:	
  3741                           
  3742                           ;mrf49xa.c: 135: {
  3743                           ;mrf49xa.c: 136: ((uint8_t*)((Mrf49xaMac_t*)(&mrf49xaInst)))[k] = 0;
  3744  094C  0829               	movf	Mrf49xaInit@k,w
  3745  094D  3EA0               	addlw	_mrf49xaInst& (0+255)
  3746  094E  0086               	movwf	6
  3747  094F  304E               	movlw	78
  3748  0950  0187               	clrf	7
  3749  0951  0181               	clrf	1
  3750  0952  0AA9               	incf	Mrf49xaInit@k,f
  3751  0953  0229               	subwf	Mrf49xaInit@k,w
  3752  0954  1C03               	skipc
  3753  0955  294C               	goto	l3011
  3754                           
  3755                           ;mrf49xa.c: 137: }
  3756                           ;mrf49xa.c: 140: PORTCbits.RC6 = 1;
  3757  0956  170E               	bsf	14,6	;volatile
  3758                           
  3759                           ;mrf49xa.c: 141: LATCbits.LATC7 = 0;
  3760  0957  0022               	movlb	2	; select bank2
  3761  0958  138E               	bcf	14,7	;volatile
  3762                           
  3763                           ;mrf49xa.c: 142: PORTBbits.RB7 = 0;
  3764  0959  0020               	movlb	0	; select bank0
  3765  095A  138D               	bcf	13,7	;volatile
  3766                           
  3767                           ;mrf49xa.c: 144: LATCbits.LATC1 = 0;
  3768  095B  0022               	movlb	2	; select bank2
  3769  095C  108E               	bcf	14,1	;volatile
  3770                           
  3771                           ;mrf49xa.c: 145: LATCbits.LATC4 = 1;
  3772  095D  160E               	bsf	14,4	;volatile
  3773                           
  3774                           ;mrf49xa.c: 147: LATAbits.LATA5 = 1;
  3775  095E  168C               	bsf	12,5	;volatile
  3776                           
  3777                           ;mrf49xa.c: 149: Sleepy(64);
  3778  095F  27CF  3188         	fcall	PL22	;call to abstracted procedure
  3779  0961  21AD  3188         	fcall	_Sleepy
  3780                           
  3781                           ;mrf49xa.c: 150: LATAbits.LATA4 = 0;
  3782  0963  0022               	movlb	2	; select bank2
  3783  0964  120C               	bcf	12,4	;volatile
  3784                           
  3785                           ;mrf49xa.c: 151: Sleepy(64);
  3786  0965  27CF  3188         	fcall	PL22	;call to abstracted procedure
  3787  0967  21AD  3188         	fcall	_Sleepy
  3788                           
  3789                           ;mrf49xa.c: 152: LATAbits.LATA4 = 1;
  3790  0969  0022               	movlb	2	; select bank2
  3791  096A  160C               	bsf	12,4	;volatile
  3792                           
  3793                           ;mrf49xa.c: 153: Sleepy(64);
  3794  096B  27CF  3188         	fcall	PL22	;call to abstracted procedure
  3795  096D  21AD               	fcall	_Sleepy
  3796                           
  3797                           ;mrf49xa.c: 155: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_IDLE;
  3798  096E  0021               	movlb	1	; select bank1
  3799  096F  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
  3800  0970  0AEB               	incf	(_mrf49xaInst^(0+128)+75),f
  3801                           
  3802                           ;mrf49xa.c: 157: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(5); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3803  0971  0020               	movlb	0	; select bank0
  3804  0972  302A               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3805  0973  01A9               	clrf	Mrf49xaInit@k
  3806  0974  3182               	movlp	high __stringtab
  3807  0975  000A               	callw
  3808  0976  3188               	pagesel	$	;select current page
  3809  0977  3800               	iorlw	0
  3810  0978  1903               	btfsc	3,2
  3811  0979  299C               	goto	l3041
  3812  097A                     l3031:	
  3813  097A  3529               	lslf	Mrf49xaInit@k,w
  3814  097B  3E2E               	addlw	low (_mrfRegset_Init| (0+32768))
  3815  097C  3182               	movlp	high __stringtab
  3816  097D  000A               	callw
  3817  097E  3188               	pagesel	$	;select current page
  3818  097F  3A55               	xorlw	85
  3819  0980  1D03               	skipz
  3820  0981  2988               	goto	l3035
  3821  0982  3005               	movlw	5
  3822  0983  00A0               	movwf	Sleepy@ms
  3823  0984  01A1               	clrf	Sleepy@ms+1
  3824  0985  21AD  3188         	fcall	_Sleepy
  3825  0987  2994               	goto	l3037
  3826  0988                     l3035:	
  3827  0988  3529               	lslf	Mrf49xaInit@k,w
  3828  0989  3E2F               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3829  098A  3182               	movlp	high __stringtab
  3830  098B  000A               	callw
  3831  098C  3188               	pagesel	$	;select current page
  3832  098D  00A1               	movwf	Mrf49TxCmd@val
  3833  098E  3529               	lslf	Mrf49xaInit@k,w
  3834  098F  3E2E               	addlw	low (_mrfRegset_Init| (0+32768))
  3835  0990  3182               	movlp	high __stringtab
  3836  0991  000A               	callw
  3837  0992  3188               	pagesel	$	;select current page
  3838  0993  252A               	fcall	_Mrf49TxCmd
  3839  0994                     l3037:	
  3840  0994  302A               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3841  0995  0AA9               	incf	Mrf49xaInit@k,f
  3842  0996  3182               	movlp	high __stringtab
  3843  0997  000A               	callw
  3844  0998  3188               	pagesel	$	;select current page
  3845  0999  0229               	subwf	Mrf49xaInit@k,w
  3846  099A  1C03               	skipc
  3847  099B  297A               	goto	l3031
  3848  099C                     l3041:	
  3849                           
  3850                           ;mrf49xa.c: 160: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3851  099C  30A0               	movlw	_mrf49xaInst& (0+255)
  3852  099D  2504  3188         	fcall	_Mrf49xaModeRx
  3853                           
  3854                           ;mrf49xa.c: 162: k = 0;
  3855  099F  0020               	movlb	0	; select bank0
  3856  09A0  01A9               	clrf	Mrf49xaInit@k
  3857  09A1                     l3053:	
  3858                           ;mrf49xa.c: 163: while(PORTAbits.RA2 == 0)
  3859                           
  3860  09A1  0020               	movlb	0	; select bank0
  3861  09A2  190C               	btfsc	12,2	;volatile
  3862  09A3  0008               	return
  3863                           
  3864                           ;mrf49xa.c: 164: {
  3865                           ;mrf49xa.c: 165: k++;
  3866  09A4  0AA9               	incf	Mrf49xaInit@k,f
  3867                           
  3868                           ;mrf49xa.c: 166: if (k == 255)
  3869  09A5  0829               	movf	Mrf49xaInit@k,w
  3870  09A6  3AFF               	xorlw	255
  3871  09A7  1903               	btfsc	3,2
  3872  09A8  294A               	goto	l234
  3873                           
  3874                           ;mrf49xa.c: 171: }
  3875                           ;mrf49xa.c: 176: Mrf49xaServe(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3876                           
  3877                           ;mrf49xa.c: 170: goto reset;
  3878  09A9  30A0               	movlw	_mrf49xaInst& (0+255)
  3879  09AA  240B  3188         	fcall	_Mrf49xaServe
  3880  09AC  29A1               	goto	l3053
  3881  09AD                     __end_of_Mrf49xaInit:	
  3882  09AD                     __ptext32:	
  3883 ;; *************** function _Sleepy *****************
  3884 ;; Defined at:
  3885 ;;		line 45 in file "../../../src/node/power.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  ms              2    0[BANK0 ] unsigned int 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;  b               1    3[BANK0 ] unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;		None               void
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0
  3894 ;; Tracked objects:
  3895 ;;		On entry : 1F/0
  3896 ;;		On exit  : 1F/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3899 ;;      Params:         0       2       0       0
  3900 ;;      Locals:         0       1       0       0
  3901 ;;      Temps:          0       1       0       0
  3902 ;;      Totals:         0       4       0       0
  3903 ;;Total ram usage:        4 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    5
  3906 ;; This function calls:
  3907 ;;		Nothing
  3908 ;; This function is called by:
  3909 ;;		_Mrf49xaInit
  3910 ;;		_Mrf49xaTick
  3911 ;;		_main
  3912 ;;		_PwrRfInit
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _Sleepy
  3918  09AD                     _Sleepy:	
  3919                           
  3920                           ;power.c: 47: uint8_t b = 0;
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  3924  09AD  01A3               	clrf	Sleepy@b
  3925  09AE                     l2937:	
  3926                           ;power.c: 49: while (ms != 0)
  3927                           
  3928  09AE  0821               	movf	Sleepy@ms+1,w
  3929  09AF  0420               	iorwf	Sleepy@ms,w
  3930  09B0  1903               	btfsc	3,2
  3931  09B1  0008               	return
  3932                           
  3933                           ;power.c: 50: {
  3934                           ;power.c: 51: if ((ms & 1) != 0)
  3935  09B2  1C20               	btfss	Sleepy@ms,0
  3936  09B3  29C3               	goto	l2933
  3937                           
  3938                           ;power.c: 52: {
  3939                           ;power.c: 53: WDTCONbits.WDTPS = b;
  3940  09B4  0823               	movf	Sleepy@b,w
  3941  09B5  00A2               	movwf	??_Sleepy
  3942  09B6  0DA2               	rlf	??_Sleepy,f
  3943  09B7  0021               	movlb	1	; select bank1
  3944  09B8  0817               	movf	23,w	;volatile
  3945  09B9  0020               	movlb	0	; select bank0
  3946  09BA  0622               	xorwf	??_Sleepy,w
  3947  09BB  39C1               	andlw	-63
  3948  09BC  0622               	xorwf	??_Sleepy,w
  3949  09BD  0021               	movlb	1	; select bank1
  3950  09BE  0097               	movwf	23	;volatile
  3951                           
  3952                           ;power.c: 54: WDTCONbits.SWDTEN = 1;
  3953  09BF  1417               	bsf	23,0	;volatile
  3954  09C0  0063               	sleep	;# 
  3955                           
  3956                           ;power.c: 58: WDTCONbits.SWDTEN = 0;
  3957  09C1  0021               	movlb	1	; select bank1
  3958  09C2  1017               	bcf	23,0	;volatile
  3959  09C3                     l2933:	
  3960                           
  3961                           ;power.c: 59: }
  3962                           ;power.c: 60: ms = ms >> 1;
  3963  09C3  0020               	movlb	0	; select bank0
  3964  09C4  36A1               	lsrf	Sleepy@ms+1,f
  3965  09C5  0CA0               	rrf	Sleepy@ms,f
  3966                           
  3967                           ;power.c: 61: b++;
  3968  09C6  0AA3               	incf	Sleepy@b,f
  3969  09C7  29AE               	goto	l2937
  3970  09C8                     __end_of_Sleepy:	
  3971  09C8                     __ptext54:	
  3972 ;; *************** function _SoftI2cRepeatedStart *****************
  3973 ;; Defined at:
  3974 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;		None               void
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0, pclath, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3988 ;;      Params:         0       0       0       0
  3989 ;;      Locals:         0       0       0       0
  3990 ;;      Temps:          0       0       0       0
  3991 ;;      Totals:         0       0       0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    6
  3995 ;; This function calls:
  3996 ;;		_SoftI2cNop
  3997 ;; This function is called by:
  3998 ;;		_eepromRxBytes
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           
  4003                           ;psect for function _SoftI2cRepeatedStart
  4004  09C8                     _SoftI2cRepeatedStart:	
  4005                           
  4006                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4010  09C8  0021               	movlb	1	; select bank1
  4011  09C9  120D               	bcf	13,4	;volatile
  4012                           
  4013                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  4014  09CA  0022               	movlb	2	; select bank2
  4015  09CB  130D               	bcf	13,6	;volatile
  4016                           
  4017                           ;softI2c.c: 57: SoftI2cNop();
  4018  09CC  22B2  3188         	fcall	_SoftI2cNop
  4019                           
  4020                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  4021  09CE  0022               	movlb	2	; select bank2
  4022  09CF  160D               	bsf	13,4	;volatile
  4023                           
  4024                           ;softI2c.c: 60: SoftI2cNop();
  4025  09D0  22B2  3188         	fcall	_SoftI2cNop
  4026                           
  4027                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  4028  09D2  0022               	movlb	2	; select bank2
  4029  09D3  170D               	bsf	13,6	;volatile
  4030                           
  4031                           ;softI2c.c: 63: SoftI2cNop();
  4032  09D4  22B2  3188         	fcall	_SoftI2cNop
  4033                           
  4034                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  4035  09D6  0022               	movlb	2	; select bank2
  4036  09D7  120D               	bcf	13,4	;volatile
  4037                           
  4038                           ;softI2c.c: 66: SoftI2cNop();
  4039  09D8  22B2  3188         	fcall	_SoftI2cNop
  4040                           
  4041                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  4042  09DA  0022               	movlb	2	; select bank2
  4043  09DB  130D               	bcf	13,6	;volatile
  4044                           
  4045                           ;softI2c.c: 69: SoftI2cNop();
  4046  09DC  2AB2               	ljmp	l2641
  4047  09DD                     __end_of_SoftI2cRepeatedStart:	
  4048  09DD                     __ptext60:	
  4049 ;; *************** function _Mcp9800Read *****************
  4050 ;; Defined at:
  4051 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;		None
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  tempL           1    7[BANK0 ] unsigned char 
  4056 ;;  tempH           1    6[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  2    4[BANK0 ] unsigned int 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, pclath, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 1F/0
  4063 ;;		On exit  : 1F/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4066 ;;      Params:         0       2       0       0
  4067 ;;      Locals:         0       2       0       0
  4068 ;;      Temps:          0       0       0       0
  4069 ;;      Totals:         0       4       0       0
  4070 ;;Total ram usage:        4 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    7
  4073 ;; This function calls:
  4074 ;;		_SoftI2cRxByte
  4075 ;;		_SoftI2cStart
  4076 ;;		_SoftI2cStop
  4077 ;;		_SoftI2cTxByte
  4078 ;; This function is called by:
  4079 ;;		_main
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _Mcp9800Read
  4085  09DD                     _Mcp9800Read:	
  4086                           
  4087                           ;mcp9800.c: 21: SoftI2cStart();
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4091  09DD  22B9  3188         	fcall	_SoftI2cStart
  4092                           
  4093                           ;mcp9800.c: 22: SoftI2cTxByte(0b10010001);
  4094  09DF  3091               	movlw	145
  4095  09E0  224B  3188         	fcall	_SoftI2cTxByte
  4096                           
  4097                           ;mcp9800.c: 23: UI08_t tempH = SoftI2cRxByte(1);
  4098  09E2  3001               	movlw	1
  4099  09E3  2279  3188         	fcall	_SoftI2cRxByte
  4100  09E5  00A6               	movwf	Mcp9800Read@tempH
  4101                           
  4102                           ;mcp9800.c: 24: UI08_t tempL = SoftI2cRxByte(0);
  4103  09E6  3000               	movlw	0
  4104  09E7  2279  3188         	fcall	_SoftI2cRxByte
  4105  09E9  00A7               	movwf	Mcp9800Read@tempL
  4106                           
  4107                           ;mcp9800.c: 25: SoftI2cStop();
  4108  09EA  22C6               	fcall	_SoftI2cStop
  4109                           
  4110                           ;mcp9800.c: 27: return (tempH << 8) | tempL;
  4111  09EB  0020               	movlb	0	; select bank0
  4112  09EC  0826               	movf	Mcp9800Read@tempH,w
  4113  09ED  00A5               	movwf	?_Mcp9800Read+1
  4114  09EE  01A4               	clrf	?_Mcp9800Read
  4115  09EF  0827               	movf	Mcp9800Read@tempL,w
  4116  09F0  04A4               	iorwf	?_Mcp9800Read,f
  4117  09F1  0008               	return
  4118  09F2                     __end_of_Mcp9800Read:	
  4119  09F2                     __ptext51:	
  4120 ;; *************** function _eepromTxBytes *****************
  4121 ;; Defined at:
  4122 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  address         2    4[BANK0 ] unsigned int 
  4125 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4126 ;;		 -> cfgRam(9), eepromTxByte@byte(1), 
  4127 ;;  size            1    7[BANK0 ] unsigned char 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;		None               void
  4132 ;; Registers used:
  4133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 1F/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4139 ;;      Params:         0       4       0       0
  4140 ;;      Locals:         0       0       0       0
  4141 ;;      Temps:          0       0       0       0
  4142 ;;      Totals:         0       4       0       0
  4143 ;;Total ram usage:        4 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    7
  4146 ;; This function calls:
  4147 ;;		_SoftI2cStart
  4148 ;;		_SoftI2cStop
  4149 ;;		_SoftI2cTxByte
  4150 ;; This function is called by:
  4151 ;;		_CfgSave
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _eepromTxBytes
  4157  09F2                     _eepromTxBytes:	
  4158  09F2                     l3143:	
  4159                           ;incstack = 0
  4160                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4161                           
  4162                           
  4163                           ;24aa64.c: 28: SoftI2cStart();
  4164  09F2  22B9  3188         	fcall	_SoftI2cStart
  4165                           
  4166                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4167  09F4  30A0               	movlw	160
  4168  09F5  224B  3188         	fcall	_SoftI2cTxByte
  4169                           
  4170                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4171  09F7  0020               	movlb	0	; select bank0
  4172  09F8  0825               	movf	eepromTxBytes@address+1,w
  4173  09F9  224B  3188         	fcall	_SoftI2cTxByte
  4174                           
  4175                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4176  09FB  0020               	movlb	0	; select bank0
  4177  09FC  0824               	movf	eepromTxBytes@address,w
  4178  09FD  224B  3188         	fcall	_SoftI2cTxByte
  4179  09FF                     l3151:	
  4180                           ;24aa64.c: 33: while (size != 0)
  4181                           
  4182  09FF  0020               	movlb	0	; select bank0
  4183  0A00  08A7               	movf	eepromTxBytes@size,f
  4184  0A01  1903               	btfsc	3,2
  4185  0A02  2A0D               	goto	l3153
  4186                           
  4187                           ;24aa64.c: 34: {
  4188                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4189  0A03  0826               	movf	eepromTxBytes@data,w
  4190  0A04  0086               	movwf	6
  4191  0A05  0187               	clrf	7
  4192  0A06  0801               	movf	1,w
  4193  0A07  224B  3188         	fcall	_SoftI2cTxByte
  4194                           
  4195                           ;24aa64.c: 37: data++;
  4196  0A09  0020               	movlb	0	; select bank0
  4197  0A0A  0AA6               	incf	eepromTxBytes@data,f
  4198                           
  4199                           ;24aa64.c: 38: size--;
  4200  0A0B  03A7               	decf	eepromTxBytes@size,f
  4201  0A0C  29FF               	goto	l3151
  4202  0A0D                     l3153:	
  4203                           
  4204                           ;24aa64.c: 39: }
  4205                           ;24aa64.c: 40: SoftI2cStop();
  4206  0A0D  2AC6               	ljmp	l2689
  4207  0A0E                     __end_of_eepromTxBytes:	
  4208  0A0E                     __ptext59:	
  4209 ;; *************** function _Mcp9800Start *****************
  4210 ;; Defined at:
  4211 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  resolution      1    wreg     enum E4251
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  resolution      1    4[BANK0 ] enum E4251
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, pclath, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 1F/2
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4225 ;;      Params:         0       0       0       0
  4226 ;;      Locals:         0       1       0       0
  4227 ;;      Temps:          0       0       0       0
  4228 ;;      Totals:         0       1       0       0
  4229 ;;Total ram usage:        1 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    7
  4232 ;; This function calls:
  4233 ;;		_SoftI2cStart
  4234 ;;		_SoftI2cStop
  4235 ;;		_SoftI2cTxByte
  4236 ;; This function is called by:
  4237 ;;		_main
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           
  4242                           ;psect for function _Mcp9800Start
  4243  0A0E                     _Mcp9800Start:	
  4244                           
  4245                           ;incstack = 0
  4246                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4247                           ;Mcp9800Start@resolution stored from wreg
  4248  0A0E  0020               	movlb	0	; select bank0
  4249  0A0F  00A4               	movwf	Mcp9800Start@resolution
  4250                           
  4251                           ;mcp9800.c: 6: SoftI2cStart();
  4252  0A10  22B9  3188         	fcall	_SoftI2cStart
  4253                           
  4254                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4255  0A12  3090               	movlw	144
  4256  0A13  224B  3188         	fcall	_SoftI2cTxByte
  4257                           
  4258                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4259  0A15  3001               	movlw	1
  4260  0A16  224B  3188         	fcall	_SoftI2cTxByte
  4261                           
  4262                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4263  0A18  0020               	movlb	0	; select bank0
  4264  0A19  0824               	movf	Mcp9800Start@resolution,w
  4265  0A1A  224B  3188         	fcall	_SoftI2cTxByte
  4266                           
  4267                           ;mcp9800.c: 10: SoftI2cStop();
  4268  0A1C  22C6  3188         	fcall	_SoftI2cStop
  4269                           
  4270                           ;mcp9800.c: 12: SoftI2cStart();
  4271  0A1E  22B9  3188         	fcall	_SoftI2cStart
  4272                           
  4273                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4274  0A20  3090               	movlw	144
  4275  0A21  224B  3188         	fcall	_SoftI2cTxByte
  4276                           
  4277                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4278  0A23  3000               	movlw	0
  4279  0A24  224B  3188         	fcall	_SoftI2cTxByte
  4280                           
  4281                           ;mcp9800.c: 15: SoftI2cStop();
  4282  0A26  2AC6               	ljmp	l2689
  4283  0A27                     __end_of_Mcp9800Start:	
  4284  0A27                     __ptext53:	
  4285 ;; *************** function _eepromRxBytes *****************
  4286 ;; Defined at:
  4287 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  address         2    4[BANK0 ] unsigned int 
  4290 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4291 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  4292 ;;		 -> handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  4293 ;;  size            1    7[BANK0 ] unsigned char 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;		None               void
  4298 ;; Registers used:
  4299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 1F/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4305 ;;      Params:         0       4       0       0
  4306 ;;      Locals:         0       0       0       0
  4307 ;;      Temps:          0       0       0       0
  4308 ;;      Totals:         0       4       0       0
  4309 ;;Total ram usage:        4 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:    7
  4312 ;; This function calls:
  4313 ;;		_SoftI2cRepeatedStart
  4314 ;;		_SoftI2cRxByte
  4315 ;;		_SoftI2cStart
  4316 ;;		_SoftI2cStop
  4317 ;;		_SoftI2cTxByte
  4318 ;; This function is called by:
  4319 ;;		_handleFwCmd
  4320 ;;		_CfgLoad
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _eepromRxBytes
  4326  0A27                     _eepromRxBytes:	
  4327  0A27                     l3131:	
  4328                           ;incstack = 0
  4329                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4330                           
  4331                           
  4332                           ;24aa64.c: 7: SoftI2cStart();
  4333  0A27  22B9  3188         	fcall	_SoftI2cStart
  4334                           
  4335                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4336  0A29  30A0               	movlw	160
  4337  0A2A  224B  3188         	fcall	_SoftI2cTxByte
  4338                           
  4339                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4340  0A2C  0020               	movlb	0	; select bank0
  4341  0A2D  0825               	movf	eepromRxBytes@address+1,w
  4342  0A2E  224B  3188         	fcall	_SoftI2cTxByte
  4343                           
  4344                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4345  0A30  0020               	movlb	0	; select bank0
  4346  0A31  0824               	movf	eepromRxBytes@address,w
  4347  0A32  224B  3188         	fcall	_SoftI2cTxByte
  4348                           
  4349                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4350  0A34  21C8  3188         	fcall	_SoftI2cRepeatedStart
  4351                           
  4352                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4353  0A36  30A1               	movlw	161
  4354  0A37  224B  3188         	fcall	_SoftI2cTxByte
  4355  0A39                     l3139:	
  4356                           ;24aa64.c: 15: while (size != 0)
  4357                           
  4358  0A39  0020               	movlb	0	; select bank0
  4359  0A3A  08A7               	movf	eepromRxBytes@size,f
  4360  0A3B  1903               	btfsc	3,2
  4361  0A3C  2A4A               	goto	l3141
  4362                           
  4363                           ;24aa64.c: 16: {
  4364                           ;24aa64.c: 17: size--;
  4365  0A3D  03A7               	decf	eepromRxBytes@size,f
  4366                           
  4367                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  4368  0A3E  0826               	movf	eepromRxBytes@data,w
  4369  0A3F  0086               	movwf	6
  4370  0A40  3000               	movlw	0
  4371  0A41  0187               	clrf	7
  4372  0A42  08A7               	movf	eepromRxBytes@size,f
  4373  0A43  1D03               	skipz
  4374  0A44  3001               	movlw	1
  4375  0A45  2279  3188         	fcall	_SoftI2cRxByte
  4376  0A47  0081               	movwf	1
  4377                           
  4378                           ;24aa64.c: 21: data++;
  4379  0A48  0AA6               	incf	eepromRxBytes@data,f
  4380  0A49  2A39               	goto	l3139
  4381  0A4A                     l3141:	
  4382                           
  4383                           ;24aa64.c: 22: }
  4384                           ;24aa64.c: 23: SoftI2cStop();
  4385  0A4A  2AC6               	ljmp	l2689
  4386  0A4B                     __end_of_eepromRxBytes:	
  4387  0A4B                     __ptext61:	
  4388 ;; *************** function _SoftI2cTxByte *****************
  4389 ;; Defined at:
  4390 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  data            1    wreg     unsigned char 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  data            1    2[BANK0 ] unsigned char 
  4395 ;;  i               1    3[BANK0 ] unsigned char 
  4396 ;;  ack             1    0        unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      unsigned char 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/1
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4406 ;;      Params:         0       0       0       0
  4407 ;;      Locals:         0       3       0       0
  4408 ;;      Temps:          0       0       0       0
  4409 ;;      Totals:         0       3       0       0
  4410 ;;Total ram usage:        3 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    6
  4413 ;; This function calls:
  4414 ;;		_SoftI2cNop
  4415 ;; This function is called by:
  4416 ;;		_SoftI2cInit
  4417 ;;		_Mcp9800Start
  4418 ;;		_Mcp9800Read
  4419 ;;		_eepromRxBytes
  4420 ;;		_eepromTxBytes
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _SoftI2cTxByte
  4426  0A4B                     _SoftI2cTxByte:	
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  4430                           ;SoftI2cTxByte@data stored from wreg
  4431  0A4B  0020               	movlb	0	; select bank0
  4432  0A4C  00A2               	movwf	SoftI2cTxByte@data
  4433                           
  4434                           ;softI2c.c: 89: UI08_t i;
  4435                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  4436  0A4D  3080               	movlw	128
  4437  0A4E  00A3               	movwf	SoftI2cTxByte@i
  4438  0A4F                     l32:	
  4439                           
  4440                           ;softI2c.c: 92: {
  4441                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  4442  0A4F  0022               	movlb	2	; select bank2
  4443  0A50  130D               	bcf	13,6	;volatile
  4444                           
  4445                           ;softI2c.c: 94: SoftI2cNop();
  4446  0A51  22B2  3188         	fcall	_SoftI2cNop
  4447                           
  4448                           ;softI2c.c: 96: if(data & i)
  4449  0A53  0020               	movlb	0	; select bank0
  4450  0A54  0822               	movf	SoftI2cTxByte@data,w
  4451  0A55  0523               	andwf	SoftI2cTxByte@i,w
  4452  0A56  1903               	btfsc	3,2
  4453  0A57  2A5B               	goto	l34
  4454                           
  4455                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  4456  0A58  0022               	movlb	2	; select bank2
  4457  0A59  160D               	bsf	13,4	;volatile
  4458  0A5A  2A5D               	goto	l35
  4459  0A5B                     l34:	
  4460                           
  4461                           ;softI2c.c: 98: else
  4462                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  4463  0A5B  0022               	movlb	2	; select bank2
  4464  0A5C  120D               	bcf	13,4	;volatile
  4465  0A5D                     l35:	
  4466                           
  4467                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  4468  0A5D  0021               	movlb	1	; select bank1
  4469  0A5E  120D               	bcf	13,4	;volatile
  4470                           
  4471                           ;softI2c.c: 102: SoftI2cNop();
  4472  0A5F  22B2  3188         	fcall	_SoftI2cNop
  4473                           
  4474                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  4475  0A61  0022               	movlb	2	; select bank2
  4476  0A62  170D               	bsf	13,6	;volatile
  4477                           
  4478                           ;softI2c.c: 105: SoftI2cNop();
  4479  0A63  22B2  3188         	fcall	_SoftI2cNop
  4480  0A65  0020               	movlb	0	; select bank0
  4481  0A66  36A3               	lsrf	SoftI2cTxByte@i,f
  4482  0A67  08A3               	movf	SoftI2cTxByte@i,f
  4483  0A68  1D03               	skipz
  4484  0A69  2A4F               	goto	l32
  4485                           
  4486                           ;softI2c.c: 109: }
  4487                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  4488  0A6A  0022               	movlb	2	; select bank2
  4489  0A6B  130D               	bcf	13,6	;volatile
  4490                           
  4491                           ;softI2c.c: 113: SoftI2cNop();
  4492  0A6C  22B2  3188         	fcall	_SoftI2cNop
  4493                           
  4494                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  4495  0A6E  0021               	movlb	1	; select bank1
  4496  0A6F  160D               	bsf	13,4	;volatile
  4497                           
  4498                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  4499  0A70  0022               	movlb	2	; select bank2
  4500  0A71  170D               	bsf	13,6	;volatile
  4501                           
  4502                           ;softI2c.c: 118: SoftI2cNop();
  4503  0A72  22B2  3188         	fcall	_SoftI2cNop
  4504  0A74  0020               	movlb	0	; select bank0
  4505  0A75  080D               	movf	13,w	;volatile
  4506                           
  4507                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  4508  0A76  0022               	movlb	2	; select bank2
  4509  0A77  130D               	bcf	13,6	;volatile
  4510                           
  4511                           ;softI2c.c: 123: SoftI2cNop();
  4512  0A78  2AB2               	ljmp	l2641
  4513  0A79                     __end_of_SoftI2cTxByte:	
  4514  0A79                     __ptext64:	
  4515 ;; *************** function _SoftI2cRxByte *****************
  4516 ;; Defined at:
  4517 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  ack             1    wreg     unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  ack             1    1[BANK0 ] unsigned char 
  4522 ;;  i               1    3[BANK0 ] unsigned char 
  4523 ;;  data            1    2[BANK0 ] unsigned char 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      unsigned char 
  4526 ;; Registers used:
  4527 ;;		wreg, status,2, status,0, pclath, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 1F/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4533 ;;      Params:         0       0       0       0
  4534 ;;      Locals:         0       3       0       0
  4535 ;;      Temps:          0       0       0       0
  4536 ;;      Totals:         0       3       0       0
  4537 ;;Total ram usage:        3 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    6
  4540 ;; This function calls:
  4541 ;;		_SoftI2cNop
  4542 ;; This function is called by:
  4543 ;;		_Mcp9800Read
  4544 ;;		_eepromRxBytes
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           
  4549                           ;psect for function _SoftI2cRxByte
  4550  0A79                     _SoftI2cRxByte:	
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  4554                           ;SoftI2cRxByte@ack stored from wreg
  4555  0A79  0020               	movlb	0	; select bank0
  4556  0A7A  00A1               	movwf	SoftI2cRxByte@ack
  4557                           
  4558                           ;softI2c.c: 131: UI08_t data=0x00;
  4559  0A7B  01A2               	clrf	SoftI2cRxByte@data
  4560                           
  4561                           ;softI2c.c: 132: UI08_t i;
  4562                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  4563  0A7C  0022               	movlb	2	; select bank2
  4564  0A7D  130D               	bcf	13,6	;volatile
  4565                           
  4566                           ;softI2c.c: 135: SoftI2cNop();
  4567  0A7E  22B2  3188         	fcall	_SoftI2cNop
  4568                           
  4569                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  4570  0A80  0021               	movlb	1	; select bank1
  4571  0A81  160D               	bsf	13,4	;volatile
  4572                           
  4573                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  4574  0A82  0022               	movlb	2	; select bank2
  4575  0A83  160D               	bsf	13,4	;volatile
  4576                           
  4577                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  4578  0A84  3080               	movlw	128
  4579  0A85  0020               	movlb	0	; select bank0
  4580  0A86  00A3               	movwf	SoftI2cRxByte@i
  4581  0A87                     l39:	
  4582                           
  4583                           ;softI2c.c: 140: {
  4584                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  4585  0A87  0022               	movlb	2	; select bank2
  4586  0A88  130D               	bcf	13,6	;volatile
  4587                           
  4588                           ;softI2c.c: 142: SoftI2cNop();
  4589  0A89  22B2  3188         	fcall	_SoftI2cNop
  4590                           
  4591                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  4592  0A8B  0022               	movlb	2	; select bank2
  4593  0A8C  170D               	bsf	13,6	;volatile
  4594                           
  4595                           ;softI2c.c: 144: SoftI2cNop();
  4596  0A8D  22B2  3188         	fcall	_SoftI2cNop
  4597                           
  4598                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  4599  0A8F  0020               	movlb	0	; select bank0
  4600                           
  4601                           ;softI2c.c: 150: data |= i;
  4602  0A90  0823               	movf	SoftI2cRxByte@i,w
  4603  0A91  1A0D               	btfsc	13,4	;volatile
  4604  0A92  04A2               	iorwf	SoftI2cRxByte@data,f
  4605  0A93  36A3               	lsrf	SoftI2cRxByte@i,f
  4606  0A94  08A3               	movf	SoftI2cRxByte@i,f
  4607  0A95  1D03               	skipz
  4608  0A96  2A87               	goto	l39
  4609                           
  4610                           ;softI2c.c: 152: }
  4611                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  4612  0A97  0022               	movlb	2	; select bank2
  4613  0A98  130D               	bcf	13,6	;volatile
  4614                           
  4615                           ;softI2c.c: 155: SoftI2cNop();
  4616  0A99  22B2  3188         	fcall	_SoftI2cNop
  4617                           
  4618                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  4619  0A9B  0021               	movlb	1	; select bank1
  4620  0A9C  120D               	bcf	13,4	;volatile
  4621                           
  4622                           ;softI2c.c: 158: if(ack)
  4623  0A9D  0020               	movlb	0	; select bank0
  4624  0A9E  0821               	movf	SoftI2cRxByte@ack,w
  4625  0A9F  1903               	btfsc	3,2
  4626  0AA0  2AA4               	goto	l42
  4627                           
  4628                           ;softI2c.c: 159: {
  4629                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  4630  0AA1  0022               	movlb	2	; select bank2
  4631  0AA2  120D               	bcf	13,4	;volatile
  4632                           
  4633                           ;softI2c.c: 161: }
  4634  0AA3  2AA6               	goto	l2745
  4635  0AA4                     l42:	
  4636                           
  4637                           ;softI2c.c: 162: else
  4638                           ;softI2c.c: 163: {
  4639                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  4640  0AA4  0022               	movlb	2	; select bank2
  4641  0AA5  160D               	bsf	13,4	;volatile
  4642  0AA6                     l2745:	
  4643                           
  4644                           ;softI2c.c: 165: }
  4645                           ;softI2c.c: 166: SoftI2cNop();
  4646  0AA6  22B2  3188         	fcall	_SoftI2cNop
  4647                           
  4648                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  4649  0AA8  0022               	movlb	2	; select bank2
  4650  0AA9  170D               	bsf	13,6	;volatile
  4651                           
  4652                           ;softI2c.c: 169: SoftI2cNop();
  4653  0AAA  22B2  3188         	fcall	_SoftI2cNop
  4654                           
  4655                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  4656  0AAC  0022               	movlb	2	; select bank2
  4657  0AAD  130D               	bcf	13,6	;volatile
  4658                           
  4659                           ;softI2c.c: 172: SoftI2cNop();
  4660  0AAE  22B2               	fcall	_SoftI2cNop
  4661                           
  4662                           ;softI2c.c: 174: return data;
  4663  0AAF  0020               	movlb	0	; select bank0
  4664  0AB0  0822               	movf	SoftI2cRxByte@data,w
  4665  0AB1  0008               	return
  4666  0AB2                     __end_of_SoftI2cRxByte:	
  4667  0AB2                     __ptext65:	
  4668 ;; *************** function _SoftI2cNop *****************
  4669 ;; Defined at:
  4670 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;		None               void
  4677 ;; Registers used:
  4678 ;;		wreg
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/2
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4684 ;;      Params:         0       0       0       0
  4685 ;;      Locals:         0       0       0       0
  4686 ;;      Temps:          0       1       0       0
  4687 ;;      Totals:         0       1       0       0
  4688 ;;Total ram usage:        1 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    5
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_SoftI2cStart
  4695 ;;		_SoftI2cRepeatedStart
  4696 ;;		_SoftI2cStop
  4697 ;;		_SoftI2cTxByte
  4698 ;;		_SoftI2cRxByte
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           
  4703                           ;psect for function _SoftI2cNop
  4704  0AB2                     _SoftI2cNop:	
  4705  0AB2                     l2641:	
  4706                           ;incstack = 0
  4707                           ; Regs used in _SoftI2cNop: [wreg]
  4708                           
  4709                           
  4710                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  4711  0AB2  300A               	movlw	10
  4712  0AB3  0020               	movlb	0	; select bank0
  4713  0AB4  00A0               	movwf	??_SoftI2cNop
  4714  0AB5                     u2817:	
  4715  0AB5  0BA0               	decfsz	??_SoftI2cNop,f
  4716  0AB6  2AB5               	goto	u2817
  4717  0AB7  0000               	nop
  4718  0AB8  0008               	return
  4719  0AB9                     __end_of_SoftI2cNop:	
  4720  0AB9                     __ptext63:	
  4721 ;; *************** function _SoftI2cStart *****************
  4722 ;; Defined at:
  4723 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, pclath, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/1
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4737 ;;      Params:         0       0       0       0
  4738 ;;      Locals:         0       0       0       0
  4739 ;;      Temps:          0       0       0       0
  4740 ;;      Totals:         0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    6
  4744 ;; This function calls:
  4745 ;;		_SoftI2cNop
  4746 ;; This function is called by:
  4747 ;;		_SoftI2cInit
  4748 ;;		_Mcp9800Start
  4749 ;;		_Mcp9800Read
  4750 ;;		_eepromRxBytes
  4751 ;;		_eepromTxBytes
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           
  4756                           ;psect for function _SoftI2cStart
  4757  0AB9                     _SoftI2cStart:	
  4758                           
  4759                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  4760                           
  4761                           ;incstack = 0
  4762                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  4763  0AB9  0021               	movlb	1	; select bank1
  4764  0ABA  120D               	bcf	13,4	;volatile
  4765                           
  4766                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  4767  0ABB  0022               	movlb	2	; select bank2
  4768  0ABC  170D               	bsf	13,6	;volatile
  4769                           
  4770                           ;softI2c.c: 43: SoftI2cNop();
  4771  0ABD  22B2  3188         	fcall	_SoftI2cNop
  4772                           
  4773                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  4774  0ABF  0022               	movlb	2	; select bank2
  4775  0AC0  120D               	bcf	13,4	;volatile
  4776                           
  4777                           ;softI2c.c: 46: SoftI2cNop();
  4778  0AC1  22B2  3188         	fcall	_SoftI2cNop
  4779                           
  4780                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  4781  0AC3  0022               	movlb	2	; select bank2
  4782  0AC4  130D               	bcf	13,6	;volatile
  4783                           
  4784                           ;softI2c.c: 48: SoftI2cNop();
  4785  0AC5  2AB2               	ljmp	l2641
  4786  0AC6                     __end_of_SoftI2cStart:	
  4787  0AC6                     __ptext62:	
  4788 ;; *************** function _SoftI2cStop *****************
  4789 ;; Defined at:
  4790 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;		None               void
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, pclath, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/1
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4804 ;;      Params:         0       0       0       0
  4805 ;;      Locals:         0       0       0       0
  4806 ;;      Temps:          0       0       0       0
  4807 ;;      Totals:         0       0       0       0
  4808 ;;Total ram usage:        0 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    6
  4811 ;; This function calls:
  4812 ;;		_SoftI2cNop
  4813 ;; This function is called by:
  4814 ;;		_SoftI2cInit
  4815 ;;		_Mcp9800Start
  4816 ;;		_Mcp9800Read
  4817 ;;		_eepromRxBytes
  4818 ;;		_eepromTxBytes
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _SoftI2cStop
  4824  0AC6                     _SoftI2cStop:	
  4825  0AC6                     l2689:	
  4826                           ;incstack = 0
  4827                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  4828                           
  4829                           
  4830                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  4831  0AC6  0021               	movlb	1	; select bank1
  4832  0AC7  120D               	bcf	13,4	;volatile
  4833                           
  4834                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  4835  0AC8  0022               	movlb	2	; select bank2
  4836  0AC9  120D               	bcf	13,4	;volatile
  4837                           
  4838                           ;softI2c.c: 78: SoftI2cNop();
  4839  0ACA  22B2  3188         	fcall	_SoftI2cNop
  4840                           
  4841                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  4842  0ACC  0022               	movlb	2	; select bank2
  4843  0ACD  170D               	bsf	13,6	;volatile
  4844                           
  4845                           ;softI2c.c: 81: SoftI2cNop();
  4846  0ACE  22B2  3188         	fcall	_SoftI2cNop
  4847                           
  4848                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  4849  0AD0  0022               	movlb	2	; select bank2
  4850  0AD1  160D               	bsf	13,4	;volatile
  4851                           
  4852                           ;softI2c.c: 83: SoftI2cNop();
  4853  0AD2  22B2  3188         	fcall	_SoftI2cNop
  4854                           
  4855                           ;softI2c.c: 84: SoftI2cNop();
  4856  0AD4  2AB2               	ljmp	l2641
  4857  0AD5                     __end_of_SoftI2cStop:	
  4858  0AD5                     __ptext34:	
  4859 ;; *************** function _Mrf49xaNeedsReset *****************
  4860 ;; Defined at:
  4861 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  4864 ;;		 -> mrf49xaInst(78), 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  4867 ;;		 -> mrf49xaInst(78), 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;		None               void
  4870 ;; Registers used:
  4871 ;;		wreg
  4872 ;; Tracked objects:
  4873 ;;		On entry : 1E/1
  4874 ;;		On exit  : 1F/1
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4877 ;;      Params:         0       0       0       0
  4878 ;;      Locals:         0       1       0       0
  4879 ;;      Temps:          0       0       0       0
  4880 ;;      Totals:         0       1       0       0
  4881 ;;Total ram usage:        1 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    5
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		_Mrf49xaTick
  4888 ;;		_Mrf49xaServe
  4889 ;;		_main
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           
  4894                           ;psect for function _Mrf49xaNeedsReset
  4895  0AD5                     _Mrf49xaNeedsReset:	
  4896                           
  4897                           ;mrf49xa.c: 123: ((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset = 1;
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in _Mrf49xaNeedsReset: [wreg]
  4901  0AD5  0021               	movlb	1	; select bank1
  4902  0AD6  17ED               	bsf	(_mrf49xaInst^(0+128)+77),7
  4903  0AD7  0008               	return
  4904  0AD8                     __end_of_Mrf49xaNeedsReset:	
  4905  0AD8                     __ptext23:	
  4906 ;; *************** function _PwrI2cSleep *****************
  4907 ;; Defined at:
  4908 ;;		line 76 in file "../../../src/node/power.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;		None               void
  4915 ;; Registers used:
  4916 ;;		None
  4917 ;; Tracked objects:
  4918 ;;		On entry : 1F/2
  4919 ;;		On exit  : 1F/1
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4922 ;;      Params:         0       0       0       0
  4923 ;;      Locals:         0       0       0       0
  4924 ;;      Temps:          0       0       0       0
  4925 ;;      Totals:         0       0       0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    5
  4929 ;; This function calls:
  4930 ;;		Nothing
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _PwrI2cSleep
  4938  0AD8                     _PwrI2cSleep:	
  4939                           
  4940                           ;power.c: 78: LATBbits.LATB6 = 1;
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _PwrI2cSleep: []
  4944                           
  4945                           ;power.c: 79: LATBbits.LATB4 = 1;
  4946                           
  4947                           ;power.c: 81: TRISBbits.TRISB6 = 0;
  4948                           
  4949                           ;power.c: 82: TRISBbits.TRISB4 = 0;
  4950  0AD8  27C9               	fcall	PL20	;call to abstracted procedure
  4951  0AD9  0008               	return
  4952  0ADA                     __end_of_PwrI2cSleep:	
  4953  0ADA                     __ptext14:	
  4954 ;; *************** function _PwrSensorSleep *****************
  4955 ;; Defined at:
  4956 ;;		line 160 in file "../../../src/node/power.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		None
  4965 ;; Tracked objects:
  4966 ;;		On entry : 1E/1
  4967 ;;		On exit  : 1F/2
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4970 ;;      Params:         0       0       0       0
  4971 ;;      Locals:         0       0       0       0
  4972 ;;      Temps:          0       0       0       0
  4973 ;;      Totals:         0       0       0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    5
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _PwrSensorSleep
  4986  0ADA                     _PwrSensorSleep:	
  4987                           
  4988                           ;power.c: 162: LATCbits.LATC2 = 0;
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _PwrSensorSleep: []
  4992  0ADA  0022               	movlb	2	; select bank2
  4993  0ADB  110E               	bcf	14,2	;volatile
  4994  0ADC  0008               	return
  4995  0ADD                     __end_of_PwrSensorSleep:	
  4996  0ADD                     __ptext57:	
  4997 ;; *************** function _Mrf49xaFreePacket *****************
  4998 ;; Defined at:
  4999 ;;		line 87 in file "../../../src/devices/mrf49xa_mac.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5002 ;;		 -> mrf49xaInst(78), 
  5003 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5004 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;  inst            1    1[BANK0 ] PTR struct Mrf49xaMac_s
  5007 ;;		 -> mrf49xaInst(78), 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;		None               void
  5010 ;; Registers used:
  5011 ;;		wreg, fsr1l, fsr1h, status,2
  5012 ;; Tracked objects:
  5013 ;;		On entry : 1F/0
  5014 ;;		On exit  : 1F/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5017 ;;      Params:         0       1       0       0
  5018 ;;      Locals:         0       1       0       0
  5019 ;;      Temps:          0       0       0       0
  5020 ;;      Totals:         0       2       0       0
  5021 ;;Total ram usage:        2 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    5
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		_Mrf49xaTick
  5028 ;;		_HandlePacket
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _Mrf49xaFreePacket
  5034  0ADD                     _Mrf49xaFreePacket:	
  5035  0ADD                     l3247:	
  5036                           ;incstack = 0
  5037                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5038                           
  5039                           
  5040                           ;mrf49xa_mac.c: 89: packet->state = PKT_FREE;
  5041  0ADD  0820               	movf	Mrf49xaFreePacket@packet,w
  5042  0ADE  0086               	movwf	6
  5043  0ADF  0187               	clrf	7
  5044  0AE0  0181               	clrf	1
  5045  0AE1  0008               	return
  5046  0AE2                     __end_of_Mrf49xaFreePacket:	
  5047  0AE2                     __ptext52:	
  5048 ;; *************** function _CfgLoad *****************
  5049 ;; Defined at:
  5050 ;;		line 19 in file "../../../src/node/config.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;		None               void
  5057 ;; Registers used:
  5058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 1E/1
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5064 ;;      Params:         0       0       0       0
  5065 ;;      Locals:         0       0       0       0
  5066 ;;      Temps:          0       0       0       0
  5067 ;;      Totals:         0       0       0       0
  5068 ;;Total ram usage:        0 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    8
  5071 ;; This function calls:
  5072 ;;		_eepromRxBytes
  5073 ;; This function is called by:
  5074 ;;		_handleCfgCmd
  5075 ;;		_main
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _CfgLoad
  5081  0AE2                     _CfgLoad:	
  5082  0AE2                     l3483:	
  5083                           ;incstack = 0
  5084                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5085                           
  5086                           
  5087                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  5088  0AE2  0020               	movlb	0	; select bank0
  5089  0AE3  3036               	movlw	_cfgRam& (0+255)
  5090  0AE4  01A4               	clrf	eepromRxBytes@address
  5091  0AE5  01A5               	clrf	eepromRxBytes@address+1
  5092  0AE6  00A6               	movwf	eepromRxBytes@data
  5093  0AE7  3009               	movlw	9
  5094  0AE8  00A7               	movwf	eepromRxBytes@size
  5095  0AE9  2A27               	ljmp	l3131
  5096  0AEA                     __end_of_CfgLoad:	
  5097  0AEA                     __ptext43:	
  5098 ;; *************** function _HandlePacket *****************
  5099 ;; Defined at:
  5100 ;;		line 152 in file "../../../src/rfstack/client.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5103 ;;		 -> mrf49xaInst(78), 
  5104 ;;  packet          1    9[BANK0 ] PTR struct rfTrcvPacket_
  5105 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  inst            1   11[BANK0 ] PTR struct Mrf49xaMac_s
  5108 ;;		 -> mrf49xaInst(78), 
  5109 ;;  response        1   12[BANK0 ] struct .
  5110 ;; Return value:  Size  Location     Type
  5111 ;;		None               void
  5112 ;; Registers used:
  5113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 1F/0
  5116 ;;		On exit  : 1F/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5119 ;;      Params:         0       1       0       0
  5120 ;;      Locals:         0       2       0       0
  5121 ;;      Temps:          0       1       0       0
  5122 ;;      Totals:         0       4       0       0
  5123 ;;Total ram usage:        4 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:   10
  5126 ;; This function calls:
  5127 ;;		_Mrf49xaFreePacket
  5128 ;;		_Mrf49xaTxAck
  5129 ;;		_Mrf49xaTxPacket
  5130 ;;		_handleCfgCmd
  5131 ;;		_handleCfgRead
  5132 ;;		_handleCfgWrite
  5133 ;;		_handleFwCmd
  5134 ;; This function is called by:
  5135 ;;		_Mrf49xaTick
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _HandlePacket
  5141  0AEA                     _HandlePacket:	
  5142                           
  5143                           ;client.c: 155: struct
  5144                           ;client.c: 156: {
  5145                           ;client.c: 157: uint8_t reset:1;
  5146                           ;client.c: 158: uint8_t needAck:1;
  5147                           ;client.c: 159: uint8_t sendAck:1;
  5148                           ;client.c: 160: uint8_t sendMsg:1;
  5149                           ;client.c: 161: } response;
  5150                           ;client.c: 164: switch (packet->packet.id)
  5151                           
  5152                           ;incstack = 0
  5153                           ; Regs used in _HandlePacket: [allreg]
  5154  0AEA  2B1C               	goto	l3395
  5155  0AEB                     l3369:	
  5156                           
  5157                           ;client.c: 167: packet->packet.data[0] = 2;
  5158  0AEB  0829               	movf	HandlePacket@packet,w
  5159  0AEC  3E06               	addlw	6
  5160  0AED  0086               	movwf	6
  5161  0AEE  3002               	movlw	2
  5162  0AEF  0187               	clrf	7
  5163  0AF0  0081               	movwf	1
  5164  0AF1                     l3371:	
  5165                           
  5166                           ;client.c: 168: response.sendMsg = ((uint8_t)1);
  5167  0AF1  0020               	movlb	0	; select bank0
  5168  0AF2  15AC               	bsf	HandlePacket@response,3
  5169                           
  5170                           ;client.c: 169: break;
  5171  0AF3  2B3A               	goto	l550
  5172  0AF4                     l3373:	
  5173                           
  5174                           ;client.c: 172: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc == packet->packet.data
      +                          [1] &&
  5175                           ;client.c: 173: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.id == packet->packet.da
      +                          ta[0])
  5176  0AF4  0829               	movf	HandlePacket@packet,w
  5177  0AF5  3E07               	addlw	7
  5178  0AF6  0086               	movwf	6
  5179  0AF7  0187               	clrf	7
  5180  0AF8  0021               	movlb	1	; select bank1
  5181  0AF9  0869               	movf	(_mrf49xaInst^(0+128)+73),w
  5182  0AFA  0601               	xorwf	1,w
  5183  0AFB  1D03               	skipz
  5184  0AFC  2B3A               	goto	l550
  5185  0AFD  0020               	movlb	0	; select bank0
  5186  0AFE  0829               	movf	HandlePacket@packet,w
  5187  0AFF  3E06               	addlw	6
  5188  0B00  0086               	movwf	6
  5189  0B01  0021               	movlb	1	; select bank1
  5190  0B02  0857               	movf	(_mrf49xaInst^(0+128)+55),w
  5191  0B03  0601               	xorwf	1,w
  5192  0B04  1D03               	skipz
  5193  0B05  2B3A               	goto	l550
  5194                           
  5195                           ;client.c: 174: {
  5196                           ;client.c: 175: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck = ACK_RECEIVED;
  5197  0B06  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  5198  0B07  393F               	andlw	-193
  5199  0B08  3880               	iorlw	128
  5200  0B09  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  5201  0B0A  2B3A               	goto	l550
  5202  0B0B                     l553:	
  5203                           ;client.c: 180: syncedTime = *((uint32_t*) packet->packet.data);
  5204                           
  5205                           
  5206                           ;client.c: 181: response.sendAck = ((uint8_t)0);
  5207  0B0B  112C               	bcf	HandlePacket@response,2
  5208                           
  5209                           ;client.c: 182: break;
  5210  0B0C  2B3A               	goto	l550
  5211  0B0D                     l3379:	
  5212                           
  5213                           ;client.c: 192: handleCfgCmd(packet);
  5214  0B0D  0829               	movf	HandlePacket@packet,w
  5215  0B0E  26C6  3188         	fcall	_handleCfgCmd
  5216  0B10  2AF1               	goto	l3371
  5217  0B11                     l3383:	
  5218                           
  5219                           ;client.c: 198: handleCfgWrite(packet);
  5220  0B11  0829               	movf	HandlePacket@packet,w
  5221  0B12  2734  3188         	fcall	_handleCfgWrite
  5222  0B14                     l3385:	
  5223                           
  5224                           ;client.c: 200: handleCfgRead(packet);
  5225  0B14  0829               	movf	HandlePacket@packet,w
  5226  0B15  26F1  3188         	fcall	_handleCfgRead
  5227  0B17  2AF1               	goto	l3371
  5228  0B18                     l3389:	
  5229                           
  5230                           ;client.c: 207: handleFwCmd(packet);
  5231  0B18  0829               	movf	HandlePacket@packet,w
  5232  0B19  27D9  3188         	fcall	_handleFwCmd
  5233  0B1B  2AF1               	goto	l3371
  5234  0B1C                     l3395:	
  5235  0B1C  0829               	movf	HandlePacket@packet,w
  5236  0B1D  3E04               	addlw	4
  5237  0B1E  0086               	movwf	6
  5238  0B1F  0187               	clrf	7
  5239  0B20  0801               	movf	1,w
  5240                           
  5241                           ; Switch size 1, requested type "space"
  5242                           ; Number of cases is 8, Range of values is 160 to 192
  5243                           ; switch strategies available:
  5244                           ; Name         Instructions Cycles
  5245                           ; simple_byte           25    13 (average)
  5246                           ; direct_byte           75     9 (fixed)
  5247                           ; jumptable            263     9 (fixed)
  5248                           ;	Chosen strategy is simple_byte
  5249  0B21  3AA0               	xorlw	160	; case 160
  5250  0B22  1903               	skipnz
  5251  0B23  2AEB               	goto	l3369
  5252  0B24  3A01               	xorlw	1	; case 161
  5253  0B25  1903               	skipnz
  5254  0B26  2AF4               	goto	l3373
  5255  0B27  3A03               	xorlw	3	; case 162
  5256  0B28  1903               	skipnz
  5257  0B29  2B0B               	goto	l553
  5258  0B2A  3A01               	xorlw	1	; case 163
  5259  0B2B  1903               	skipnz
  5260  0B2C  2B3A               	goto	l550
  5261  0B2D  3A13               	xorlw	19	; case 176
  5262  0B2E  1903               	skipnz
  5263  0B2F  2B0D               	goto	l3379
  5264  0B30  3A01               	xorlw	1	; case 177
  5265  0B31  1903               	skipnz
  5266  0B32  2B11               	goto	l3383
  5267  0B33  3A03               	xorlw	3	; case 178
  5268  0B34  1903               	skipnz
  5269  0B35  2B14               	goto	l3385
  5270  0B36  3A72               	xorlw	114	; case 192
  5271  0B37  1903               	skipnz
  5272  0B38  2B18               	goto	l3389
  5273  0B39  2B3A               	goto	l550
  5274  0B3A                     l550:	
  5275                           
  5276                           ;client.c: 230: response.reset = ((uint8_t)1);
  5277  0B3A  0020               	movlb	0	; select bank0
  5278  0B3B  142C               	bsf	HandlePacket@response,0
  5279                           
  5280                           ;client.c: 233: if (response.sendMsg)
  5281  0B3C  1DAC               	btfss	HandlePacket@response,3
  5282  0B3D  2B4A               	goto	l559
  5283                           
  5284                           ;client.c: 234: response.reset = Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet
      +                          , ((uint8_t)1), response.needAck);
  5285  0B3E  0829               	movf	HandlePacket@packet,w
  5286  0B3F  00A0               	movwf	Mrf49xaTxPacket@packet
  5287  0B40  3000               	movlw	0
  5288  0B41  01A1               	clrf	Mrf49xaTxPacket@response
  5289  0B42  0AA1               	incf	Mrf49xaTxPacket@response,f
  5290  0B43  18AC               	btfsc	HandlePacket@response,1
  5291  0B44  3001               	movlw	1
  5292  0B45  00A2               	movwf	Mrf49xaTxPacket@needAck
  5293  0B46  30A0               	movlw	_mrf49xaInst& (0+255)
  5294  0B47  235E  3188         	fcall	_Mrf49xaTxPacket
  5295  0B49  2B51               	goto	L3
  5296  0B4A                     l559:	
  5297                           
  5298                           ;client.c: 235: else if (response.sendAck)
  5299  0B4A  1D2C               	btfss	HandlePacket@response,2
  5300  0B4B  2B58               	goto	l561
  5301                           
  5302                           ;client.c: 236: response.reset = Mrf49xaTxAck(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  5303  0B4C  0829               	movf	HandlePacket@packet,w
  5304  0B4D  00A7               	movwf	Mrf49xaTxAck@packet
  5305  0B4E  30A0               	movlw	_mrf49xaInst& (0+255)
  5306  0B4F  23BB  3188         	fcall	_Mrf49xaTxAck
  5307  0B51                     L3:	
  5308  0B51  0020               	movlb	0	; select bank0
  5309  0B52  00AA               	movwf	??_HandlePacket
  5310  0B53  062C               	xorwf	HandlePacket@response,w
  5311  0B54  39FE               	andlw	-2
  5312  0B55  062A               	xorwf	??_HandlePacket,w
  5313  0B56  00AC               	movwf	HandlePacket@response
  5314  0B57  2B59               	goto	l560
  5315  0B58                     l561:	
  5316                           
  5317                           ;client.c: 237: else
  5318                           ;client.c: 238: response.reset = ((uint8_t)0);
  5319  0B58  102C               	bcf	HandlePacket@response,0
  5320  0B59                     l560:	
  5321                           
  5322                           ;client.c: 240: if (!response.reset)
  5323  0B59  182C               	btfsc	HandlePacket@response,0
  5324  0B5A  0008               	return
  5325                           
  5326                           ;client.c: 241: Mrf49xaFreePacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  5327  0B5B  0829               	movf	HandlePacket@packet,w
  5328  0B5C  00A0               	movwf	Mrf49xaFreePacket@packet
  5329  0B5D  2ADD               	ljmp	l3247
  5330  0B5E                     __end_of_HandlePacket:	
  5331  0B5E                     __ptext56:	
  5332 ;; *************** function _Mrf49xaTxPacket *****************
  5333 ;; Defined at:
  5334 ;;		line 17 in file "../../../src/devices/mrf49xa_mac.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5337 ;;		 -> mrf49xaInst(78), 
  5338 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5339 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5340 ;;  response        1    1[BANK0 ] unsigned char 
  5341 ;;  needAck         1    2[BANK0 ] unsigned char 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;  inst            1    5[BANK0 ] PTR struct Mrf49xaMac_s
  5344 ;;		 -> mrf49xaInst(78), 
  5345 ;;  i               1    6[BANK0 ] unsigned char 
  5346 ;;  crc             1    4[BANK0 ] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      unsigned char 
  5349 ;; Registers used:
  5350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5351 ;; Tracked objects:
  5352 ;;		On entry : 1F/0
  5353 ;;		On exit  : 1F/1
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5356 ;;      Params:         0       3       0       0
  5357 ;;      Locals:         0       3       0       0
  5358 ;;      Temps:          0       1       0       0
  5359 ;;      Totals:         0       7       0       0
  5360 ;;Total ram usage:        7 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    5
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_Mrf49xaTxAck
  5367 ;;		_HandlePacket
  5368 ;;		_RfSendPowerState
  5369 ;;		_RfSendSampleWeatherNode
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _Mrf49xaTxPacket
  5375  0B5E                     _Mrf49xaTxPacket:	
  5376  0B5E                     l3169:	
  5377                           ;incstack = 0
  5378                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  5379                           
  5380  0B5E  3033               	movlw	51
  5381                           
  5382                           ;mrf49xa_mac.c: 19: uint8_t i, crc = 0;
  5383  0B5F  01A4               	clrf	Mrf49xaTxPacket@crc
  5384                           
  5385                           ;mrf49xa_mac.c: 21: if (&(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket) == packet)
  5386  0B60  3EA0               	addlw	_mrf49xaInst& (0+255)
  5387  0B61  0620               	xorwf	Mrf49xaTxPacket@packet,w
  5388  0B62  1D03               	skipz
  5389  0B63  2B72               	goto	l3193
  5390                           
  5391                           ;mrf49xa_mac.c: 22: {
  5392                           ;mrf49xa_mac.c: 23: if (response)
  5393  0B64  0821               	movf	Mrf49xaTxPacket@response,w
  5394  0B65  1903               	btfsc	3,2
  5395  0B66  2B6A               	goto	l395
  5396                           
  5397                           ;mrf49xa_mac.c: 24: {
  5398                           ;mrf49xa_mac.c: 25: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.dst = ((Mrf49xaMac_
      +                          t*)(&mrf49xaInst))->txPacket.packet.src;
  5399  0B67  0021               	movlb	1	; select bank1
  5400  0B68  0855               	movf	(_mrf49xaInst^(0+128)+53),w
  5401  0B69  00D6               	movwf	(_mrf49xaInst^(0+128)+54)
  5402  0B6A                     l395:	
  5403                           
  5404                           ;mrf49xa_mac.c: 26: }
  5405                           ;mrf49xa_mac.c: 27: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.src = ((Mrf49xaMac_
      +                          t*)(&mrf49xaInst))->nodeId;
  5406  0B6A  0021               	movlb	1	; select bank1
  5407  0B6B  086C               	movf	(_mrf49xaInst^(0+128)+76),w
  5408  0B6C  00D5               	movwf	(_mrf49xaInst^(0+128)+53)
  5409                           
  5410                           ;mrf49xa_mac.c: 28: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.size += 5;
  5411  0B6D  3005               	movlw	5
  5412  0B6E  07D4               	addwf	(_mrf49xaInst^(0+128)+52),f
  5413                           
  5414                           ;mrf49xa_mac.c: 30: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_READY_FOR_TX;
  5415                           
  5416                           ;mrf49xa_mac.c: 31: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  5417                           
  5418                           ;mrf49xa_mac.c: 32: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit = 0;
  5419                           
  5420                           ;mrf49xa_mac.c: 33: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck = (needAck == ((ui
      +                          nt8_t)1)) ? NEED_ACK : NO_ACK;
  5421  0B6F  278A               	fcall	PL8	;call to abstracted procedure
  5422                           
  5423                           ;mrf49xa_mac.c: 34: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc = 0;
  5424  0B70  01E9               	clrf	(_mrf49xaInst^(0+128)+73)
  5425                           
  5426                           ;mrf49xa_mac.c: 35: return ((uint8_t)1);
  5427  0B71  3401               	retlw	1
  5428  0B72                     l3193:	
  5429                           
  5430                           ;mrf49xa_mac.c: 36: }
  5431                           ;mrf49xa_mac.c: 39: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state != PKT_FREE)
  5432  0B72  0021               	movlb	1	; select bank1
  5433  0B73  0853               	movf	(_mrf49xaInst^(0+128)+51),w
  5434  0B74  1D03               	skipz
  5435                           
  5436                           ;mrf49xa_mac.c: 40: {
  5437                           ;mrf49xa_mac.c: 42: return ((uint8_t)0);
  5438  0B75  3400               	retlw	0
  5439                           
  5440                           ;mrf49xa_mac.c: 44: else
  5441                           ;mrf49xa_mac.c: 45: {
  5442                           ;mrf49xa_mac.c: 46: if (response)
  5443  0B76  0020               	movlb	0	; select bank0
  5444  0B77  0821               	movf	Mrf49xaTxPacket@response,w
  5445  0B78  1903               	btfsc	3,2
  5446  0B79  2B84               	goto	l3205
  5447                           
  5448                           ;mrf49xa_mac.c: 47: {
  5449                           ;mrf49xa_mac.c: 48: packet->packet.dst = packet->packet.src;
  5450  0B7A  0820               	movf	Mrf49xaTxPacket@packet,w
  5451  0B7B  3E03               	addlw	3
  5452  0B7C  0086               	movwf	6
  5453  0B7D  0187               	clrf	7
  5454  0B7E  0820               	movf	Mrf49xaTxPacket@packet,w
  5455  0B7F  3E02               	addlw	2
  5456  0B80  0084               	movwf	4
  5457  0B81  0185               	clrf	5
  5458  0B82  0800               	movf	0,w
  5459  0B83  0081               	movwf	1
  5460  0B84                     l3205:	
  5461                           
  5462                           ;mrf49xa_mac.c: 49: }
  5463                           ;mrf49xa_mac.c: 50: packet->packet.src = ((Mrf49xaMac_t*)(&mrf49xaInst))->nodeId;
  5464  0B84  0820               	movf	Mrf49xaTxPacket@packet,w
  5465  0B85  3E02               	addlw	2
  5466  0B86  0086               	movwf	6
  5467  0B87  0187               	clrf	7
  5468  0B88  0021               	movlb	1	; select bank1
  5469  0B89  086C               	movf	(_mrf49xaInst^(0+128)+76),w
  5470  0B8A  0081               	movwf	1
  5471                           
  5472                           ;mrf49xa_mac.c: 51: packet->packet.size += 5;
  5473  0B8B  0020               	movlb	0	; select bank0
  5474  0B8C  0A20               	incf	Mrf49xaTxPacket@packet,w
  5475  0B8D  0086               	movwf	6
  5476  0B8E  3005               	movlw	5
  5477  0B8F  0781               	addwf	1,f
  5478                           
  5479                           ;mrf49xa_mac.c: 53: packet->state = PKT_FREE;
  5480  0B90  0820               	movf	Mrf49xaTxPacket@packet,w
  5481  0B91  0086               	movwf	6
  5482  0B92  0181               	clrf	1
  5483                           
  5484                           ;mrf49xa_mac.c: 56: for (i = 0; i < (16 + 5); i++)
  5485  0B93  01A6               	clrf	Mrf49xaTxPacket@i
  5486  0B94                     l3217:	
  5487                           
  5488                           ;mrf49xa_mac.c: 57: {
  5489                           ;mrf49xa_mac.c: 58: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[i] = packet->raw[i];
  5490  0B94  0826               	movf	Mrf49xaTxPacket@i,w
  5491  0B95  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
  5492  0B96  0086               	movwf	6
  5493  0B97  0187               	clrf	7
  5494  0B98  0826               	movf	Mrf49xaTxPacket@i,w
  5495  0B99  0720               	addwf	Mrf49xaTxPacket@packet,w
  5496  0B9A  00A3               	movwf	??_Mrf49xaTxPacket
  5497  0B9B  0A23               	incf	??_Mrf49xaTxPacket,w
  5498  0B9C  0084               	movwf	4
  5499  0B9D  0185               	clrf	5
  5500  0B9E  0800               	movf	0,w
  5501  0B9F  0081               	movwf	1
  5502  0BA0  3015               	movlw	21
  5503  0BA1  0AA6               	incf	Mrf49xaTxPacket@i,f
  5504  0BA2  0226               	subwf	Mrf49xaTxPacket@i,w
  5505  0BA3  1C03               	skipc
  5506  0BA4  2B94               	goto	l3217
  5507                           
  5508                           ;mrf49xa_mac.c: 59: }
  5509                           ;mrf49xa_mac.c: 60: for (i = 0; i < packet->packet.size; i++)
  5510  0BA5  01A6               	clrf	Mrf49xaTxPacket@i
  5511  0BA6                     l402:	
  5512  0BA6  0A20               	incf	Mrf49xaTxPacket@packet,w
  5513  0BA7  0086               	movwf	6
  5514  0BA8  0187               	clrf	7
  5515  0BA9  0801               	movf	1,w
  5516  0BAA  0226               	subwf	Mrf49xaTxPacket@i,w
  5517  0BAB  1803               	btfsc	3,0
  5518  0BAC  2BB4               	goto	l404
  5519                           
  5520                           ;mrf49xa_mac.c: 61: {
  5521                           ;mrf49xa_mac.c: 62: crc = crc ^ ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[i];
  5522  0BAD  0826               	movf	Mrf49xaTxPacket@i,w
  5523  0BAE  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
  5524  0BAF  0086               	movwf	6
  5525  0BB0  0801               	movf	1,w
  5526  0BB1  06A4               	xorwf	Mrf49xaTxPacket@crc,f
  5527  0BB2  0AA6               	incf	Mrf49xaTxPacket@i,f
  5528  0BB3  2BA6               	goto	l402
  5529  0BB4                     l404:	
  5530                           
  5531                           ;mrf49xa_mac.c: 63: }
  5532                           ;mrf49xa_mac.c: 65: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_READY_FOR_TX;
  5533  0BB4  0021               	movlb	1	; select bank1
  5534                           
  5535                           ;mrf49xa_mac.c: 66: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  5536                           
  5537                           ;mrf49xa_mac.c: 67: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit = 0;
  5538                           
  5539                           ;mrf49xa_mac.c: 68: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck = (needAck == ((ui
      +                          nt8_t)1)) ? NEED_ACK : NO_ACK;
  5540  0BB5  278A               	fcall	PL8	;call to abstracted procedure
  5541                           
  5542                           ;mrf49xa_mac.c: 70: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc = crc;
  5543  0BB6  0020               	movlb	0	; select bank0
  5544  0BB7  0824               	movf	Mrf49xaTxPacket@crc,w
  5545  0BB8  0021               	movlb	1	; select bank1
  5546  0BB9  00E9               	movwf	(_mrf49xaInst^(0+128)+73)
  5547  0BBA  3401               	retlw	1
  5548  0BBB                     __end_of_Mrf49xaTxPacket:	
  5549  0BBB                     __ptext55:	
  5550 ;; *************** function _Mrf49xaTxAck *****************
  5551 ;; Defined at:
  5552 ;;		line 75 in file "../../../src/devices/mrf49xa_mac.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5555 ;;		 -> mrf49xaInst(78), 
  5556 ;;  packet          1    7[BANK0 ] PTR struct rfTrcvPacket_
  5557 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  inst            1    8[BANK0 ] PTR struct Mrf49xaMac_s
  5560 ;;		 -> mrf49xaInst(78), 
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      unsigned char 
  5563 ;; Registers used:
  5564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 1F/0
  5567 ;;		On exit  : 1F/1
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5570 ;;      Params:         0       1       0       0
  5571 ;;      Locals:         0       1       0       0
  5572 ;;      Temps:          0       0       0       0
  5573 ;;      Totals:         0       2       0       0
  5574 ;;Total ram usage:        2 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    6
  5577 ;; This function calls:
  5578 ;;		_Mrf49xaTxPacket
  5579 ;; This function is called by:
  5580 ;;		_HandlePacket
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _Mrf49xaTxAck
  5586  0BBB                     _Mrf49xaTxAck:	
  5587                           
  5588                           ;mrf49xa_mac.c: 77: packet->packet.data[0] = packet->packet.id;
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5592  0BBB  0827               	movf	Mrf49xaTxAck@packet,w
  5593  0BBC  3E06               	addlw	6
  5594  0BBD  0086               	movwf	6
  5595  0BBE  0187               	clrf	7
  5596  0BBF  0827               	movf	Mrf49xaTxAck@packet,w
  5597  0BC0  3E04               	addlw	4
  5598  0BC1  0084               	movwf	4
  5599  0BC2  0185               	clrf	5
  5600  0BC3  0800               	movf	0,w
  5601  0BC4  0081               	movwf	1
  5602                           
  5603                           ;mrf49xa_mac.c: 78: packet->packet.data[1] = packet->crc;
  5604  0BC5  0827               	movf	Mrf49xaTxAck@packet,w
  5605  0BC6  3E07               	addlw	7
  5606  0BC7  0086               	movwf	6
  5607  0BC8  0827               	movf	Mrf49xaTxAck@packet,w
  5608  0BC9  3E16               	addlw	22
  5609  0BCA  0084               	movwf	4
  5610  0BCB  0800               	movf	0,w
  5611  0BCC  0081               	movwf	1
  5612                           
  5613                           ;mrf49xa_mac.c: 81: packet->packet.id = RF_ACK;
  5614  0BCD  0827               	movf	Mrf49xaTxAck@packet,w
  5615  0BCE  3E04               	addlw	4
  5616  0BCF  0086               	movwf	6
  5617  0BD0  30A1               	movlw	161
  5618  0BD1  0081               	movwf	1
  5619                           
  5620                           ;mrf49xa_mac.c: 82: packet->packet.size = 2;
  5621  0BD2  0A27               	incf	Mrf49xaTxAck@packet,w
  5622  0BD3  0086               	movwf	6
  5623  0BD4  3002               	movlw	2
  5624  0BD5  0081               	movwf	1
  5625                           
  5626                           ;mrf49xa_mac.c: 84: return Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet, ((ui
      +                          nt8_t)1), ((uint8_t)0));
  5627  0BD6  0827               	movf	Mrf49xaTxAck@packet,w
  5628  0BD7  00A0               	movwf	Mrf49xaTxPacket@packet
  5629  0BD8  01A1               	clrf	Mrf49xaTxPacket@response
  5630  0BD9  0AA1               	incf	Mrf49xaTxPacket@response,f
  5631  0BDA  01A2               	clrf	Mrf49xaTxPacket@needAck
  5632  0BDB  2B5E               	ljmp	l3169
  5633  0BDC                     __end_of_Mrf49xaTxAck:	
  5634  0BDC                     __ptext29:	
  5635 ;; *************** function _Mrf49xaPacketPending *****************
  5636 ;; Defined at:
  5637 ;;		line 8 in file "../../../src/devices/mrf49xa_mac.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5640 ;;		 -> mrf49xaInst(78), 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  5643 ;;		 -> mrf49xaInst(78), 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      unsigned char 
  5646 ;; Registers used:
  5647 ;;		wreg
  5648 ;; Tracked objects:
  5649 ;;		On entry : 1F/1
  5650 ;;		On exit  : 1F/1
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5653 ;;      Params:         0       0       0       0
  5654 ;;      Locals:         0       1       0       0
  5655 ;;      Temps:          0       0       0       0
  5656 ;;      Totals:         0       1       0       0
  5657 ;;Total ram usage:        1 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    5
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_Mrf49xaTick
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           
  5668                           ;psect for function _Mrf49xaPacketPending
  5669  0BDC                     _Mrf49xaPacketPending:	
  5670                           
  5671                           ;mrf49xa_mac.c: 10: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_HW_REA
      +                          DY_RX ||
  5672                           ;mrf49xa_mac.c: 11: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_HW_READY_R
      +                          X)
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  5676  0BDC  0823               	movf	(_mrf49xaInst^(0+128)+3),w
  5677  0BDD  3A05               	xorlw	5
  5678  0BDE  1903               	skipnz
  5679  0BDF  3401               	retlw	1
  5680  0BE0  083B               	movf	(_mrf49xaInst^(0+128)+27),w
  5681  0BE1  3A05               	xorlw	5
  5682  0BE2  1903               	btfsc	3,2
  5683                           
  5684                           ;mrf49xa_mac.c: 12: return ((uint8_t)1);
  5685  0BE3  3401               	retlw	1
  5686                           
  5687                           ;mrf49xa_mac.c: 13: else
  5688                           ;mrf49xa_mac.c: 14: return ((uint8_t)0);
  5689  0BE4  3400               	retlw	0
  5690  0BE5                     __end_of_Mrf49xaPacketPending:	
  5691  0BE5                     __ptext22:	
  5692 ;; *************** function _PwrI2cWake *****************
  5693 ;; Defined at:
  5694 ;;		line 85 in file "../../../src/node/power.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;		None               void
  5701 ;; Registers used:
  5702 ;;		None
  5703 ;; Tracked objects:
  5704 ;;		On entry : 1F/2
  5705 ;;		On exit  : 1F/2
  5706 ;;		Unchanged: 1F/0
  5707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5708 ;;      Params:         0       0       0       0
  5709 ;;      Locals:         0       0       0       0
  5710 ;;      Temps:          0       0       0       0
  5711 ;;      Totals:         0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _PwrI2cWake
  5724  0BE5                     _PwrI2cWake:	
  5725                           
  5726                           ;incstack = 0
  5727                           ; Regs used in _PwrI2cWake: []
  5728  0BE5  0008               	return
  5729  0BE6                     __end_of_PwrI2cWake:	
  5730  0BE6                     __ptext30:	
  5731 ;; *************** function _Mrf49xaModeTx *****************
  5732 ;; Defined at:
  5733 ;;		line 87 in file "../../../src/devices/mrf49xa.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5736 ;;		 -> mrf49xaInst(78), 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  inst            1    3[BANK0 ] PTR struct Mrf49xaMac_s
  5739 ;;		 -> mrf49xaInst(78), 
  5740 ;;  k               1    4[BANK0 ] unsigned char 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;		None               void
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0, pclath, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 1F/1
  5747 ;;		On exit  : 1F/1
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5750 ;;      Params:         0       0       0       0
  5751 ;;      Locals:         0       2       0       0
  5752 ;;      Temps:          0       0       0       0
  5753 ;;      Totals:         0       2       0       0
  5754 ;;Total ram usage:        2 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    7
  5757 ;; This function calls:
  5758 ;;		_Mrf49TxCmd
  5759 ;; This function is called by:
  5760 ;;		_Mrf49xaTick
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           
  5765                           ;psect for function _Mrf49xaModeTx
  5766  0BE6                     _Mrf49xaModeTx:	
  5767                           
  5768                           ;mrf49xa.c: 89: UI08_t k;
  5769                           ;mrf49xa.c: 90: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg, 
      +                          mrfRegset_Tx[k].val); };
  5770                           
  5771                           ;incstack = 0
  5772                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  5773  0BE6  0020               	movlb	0	; select bank0
  5774  0BE7  302D               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5775  0BE8  01A4               	clrf	Mrf49xaModeTx@k
  5776  0BE9  3182               	movlp	high __stringtab
  5777  0BEA  000A               	callw
  5778  0BEB  3188               	pagesel	$	;select current page
  5779  0BEC  3800               	iorlw	0
  5780  0BED  1903               	btfsc	3,2
  5781  0BEE  2C03               	goto	l2981
  5782  0BEF                     l2975:	
  5783  0BEF  3524               	lslf	Mrf49xaModeTx@k,w
  5784  0BF0  3E5B               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  5785  0BF1  3182               	movlp	high __stringtab
  5786  0BF2  000A               	callw
  5787  0BF3  3188               	pagesel	$	;select current page
  5788  0BF4  00A1               	movwf	Mrf49TxCmd@val
  5789  0BF5  3524               	lslf	Mrf49xaModeTx@k,w
  5790  0BF6  3E5A               	addlw	low (_mrfRegset_Tx| (0+32768))
  5791  0BF7  3182               	movlp	high __stringtab
  5792  0BF8  000A               	callw
  5793  0BF9  3188               	pagesel	$	;select current page
  5794  0BFA  252A               	fcall	_Mrf49TxCmd
  5795  0BFB  302D               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5796  0BFC  0AA4               	incf	Mrf49xaModeTx@k,f
  5797  0BFD  3182               	movlp	high __stringtab
  5798  0BFE  000A               	callw
  5799  0BFF  3188               	pagesel	$	;select current page
  5800  0C00  0224               	subwf	Mrf49xaModeTx@k,w
  5801  0C01  1C03               	skipc
  5802  0C02  2BEF               	goto	l2975
  5803  0C03                     l2981:	
  5804                           
  5805                           ;mrf49xa.c: 93: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = TX_PACKET;
  5806  0C03  3003               	movlw	3
  5807  0C04  0021               	movlb	1	; select bank1
  5808  0C05  00EB               	movwf	(_mrf49xaInst^(0+128)+75)
  5809                           
  5810                           ;mrf49xa.c: 94: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 99;
  5811  0C06  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  5812  0C07  3980               	andlw	-128
  5813  0C08  3863               	iorlw	99
  5814  0C09  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  5815  0C0A  0008               	return
  5816  0C0B                     __end_of_Mrf49xaModeTx:	
  5817  0C0B                     __ptext33:	
  5818 ;; *************** function _Mrf49xaServe *****************
  5819 ;; Defined at:
  5820 ;;		line 7 in file "../../../src/devices/mrf49xa_phy.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5823 ;;		 -> mrf49xaInst(78), 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  inst            1    6[BANK0 ] PTR struct Mrf49xaMac_s
  5826 ;;		 -> mrf49xaInst(78), 
  5827 ;;  data            1    7[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      unsigned char 
  5830 ;; Registers used:
  5831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 1F/0
  5834 ;;		On exit  : 1E/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5837 ;;      Params:         0       0       0       0
  5838 ;;      Locals:         0       2       0       0
  5839 ;;      Temps:          0       1       0       0
  5840 ;;      Totals:         0       3       0       0
  5841 ;;Total ram usage:        3 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    8
  5844 ;; This function calls:
  5845 ;;		_Mrf49RxByte
  5846 ;;		_Mrf49RxSts
  5847 ;;		_Mrf49TxByte
  5848 ;;		_Mrf49xaModeRx
  5849 ;;		_Mrf49xaNeedsReset
  5850 ;; This function is called by:
  5851 ;;		_Mrf49xaInit
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           
  5856                           ;psect for function _Mrf49xaServe
  5857  0C0B                     _Mrf49xaServe:	
  5858                           
  5859                           ;mrf49xa_phy.c: 10: uint8_t data;
  5860                           ;mrf49xa_phy.c: 12: if (((Mrf49xaMac_t*)(&mrf49xaInst))->state == POWERED_OFF)
  5861                           
  5862                           ;incstack = 0
  5863                           ; Regs used in _Mrf49xaServe: [allreg]
  5864  0C0B  0021               	movlb	1	; select bank1
  5865  0C0C  08EB               	movf	(_mrf49xaInst^(0+128)+75),f
  5866  0C0D  1903               	btfsc	3,2
  5867                           
  5868                           ;mrf49xa_phy.c: 13: return 0;
  5869  0C0E  3400               	retlw	0
  5870                           
  5871                           ;mrf49xa_phy.c: 16: if (((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset)
  5872  0C0F  1BED               	btfsc	(_mrf49xaInst^(0+128)+77),7
  5873  0C10  3400               	retlw	0
  5874                           
  5875                           ;mrf49xa_phy.c: 19: Mrf49RxSts(((Mrf49xaMac_t*)(&mrf49xaInst)));
  5876  0C11  30A0               	movlw	_mrf49xaInst& (0+255)
  5877  0C12  258E  3188         	fcall	_Mrf49RxSts
  5878                           
  5879                           ;mrf49xa_phy.c: 21: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] == 0xFF && ((Mrf
      +                          49xaMac_t*)(&mrf49xaInst))->status.byte[1] == 0xFF)
  5880  0C14  0021               	movlb	1	; select bank1
  5881  0C15  0820               	movf	_mrf49xaInst^(0+128),w
  5882  0C16  3AFF               	xorlw	255
  5883  0C17  1D03               	skipz
  5884  0C18  2C1D               	goto	l464
  5885  0C19  0821               	movf	(_mrf49xaInst^(0+128)+1),w
  5886  0C1A  3AFF               	xorlw	255
  5887  0C1B  1903               	btfsc	3,2
  5888  0C1C  3400               	retlw	0
  5889  0C1D                     l464:	
  5890                           ;mrf49xa_phy.c: 26: {
  5891                           
  5892                           
  5893                           ;mrf49xa_phy.c: 28: }
  5894                           ;mrf49xa_phy.c: 31: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.overflow == 1)
  5895  0C1D  1AA0               	btfsc	_mrf49xaInst^(0+128),5
  5896  0C1E  2C2E               	goto	l2827
  5897  0C1F  2C3C               	goto	l465
  5898  0C20                     l2819:	
  5899                           
  5900                           ;mrf49xa_phy.c: 36: case RECV_DATA:
  5901                           ;mrf49xa_phy.c: 39: data = Mrf49RxByte();
  5902  0C20  2528  3188         	fcall	_Mrf49RxByte
  5903  0C22  00A7               	movwf	Mrf49xaServe@data
  5904                           
  5905                           ;mrf49xa_phy.c: 40: data = Mrf49RxByte();
  5906  0C23  2528  3188         	fcall	_Mrf49RxByte
  5907  0C25  00A7               	movwf	Mrf49xaServe@data
  5908                           
  5909                           ;mrf49xa_phy.c: 43: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  5910  0C26  30A0               	movlw	_mrf49xaInst& (0+255)
  5911  0C27  2504  3188         	fcall	_Mrf49xaModeRx
  5912                           
  5913                           ;mrf49xa_phy.c: 47: break;
  5914  0C29  2C3C               	goto	l465
  5915  0C2A                     l2823:	
  5916                           
  5917                           ;mrf49xa_phy.c: 50: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
  5918  0C2A  30A0               	movlw	_mrf49xaInst& (0+255)
  5919  0C2B  22D5  3188         	fcall	_Mrf49xaNeedsReset
  5920                           
  5921                           ;mrf49xa_phy.c: 51: break;
  5922  0C2D  2C3C               	goto	l465
  5923  0C2E                     l2827:	
  5924  0C2E  086B               	movf	(_mrf49xaInst^(0+128)+75),w
  5925                           
  5926                           ; Switch size 1, requested type "space"
  5927                           ; Number of cases is 4, Range of values is 0 to 3
  5928                           ; switch strategies available:
  5929                           ; Name         Instructions Cycles
  5930                           ; simple_byte           13     7 (average)
  5931                           ; direct_byte           14     6 (fixed)
  5932                           ; jumptable            260     6 (fixed)
  5933                           ;	Chosen strategy is simple_byte
  5934  0C2F  3A00               	xorlw	0	; case 0
  5935  0C30  1903               	skipnz
  5936  0C31  2C2A               	goto	l2823
  5937  0C32  3A01               	xorlw	1	; case 1
  5938  0C33  1903               	skipnz
  5939  0C34  2C20               	goto	l2819
  5940  0C35  3A03               	xorlw	3	; case 2
  5941  0C36  1903               	skipnz
  5942  0C37  2C20               	goto	l2819
  5943  0C38  3A01               	xorlw	1	; case 3
  5944  0C39  1903               	skipnz
  5945  0C3A  2C3C               	goto	l465
  5946  0C3B  2C3C               	goto	l465
  5947  0C3C                     l465:	
  5948                           
  5949                           ;mrf49xa_phy.c: 60: }
  5950                           ;mrf49xa_phy.c: 69: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx == 1)
  5951  0C3C  1BA0               	btfsc	_mrf49xaInst^(0+128),7
  5952  0C3D  2CEC               	goto	l2909
  5953  0C3E  2CFA               	goto	l2911
  5954  0C3F                     l2831:	
  5955                           
  5956                           ;mrf49xa_phy.c: 76: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
  5957  0C3F  30A0               	movlw	_mrf49xaInst& (0+255)
  5958  0C40  22D5  3188         	fcall	_Mrf49xaNeedsReset
  5959                           
  5960                           ;mrf49xa_phy.c: 77: break;
  5961  0C42  2CFA               	goto	l2911
  5962  0C43                     l2833:	
  5963                           
  5964                           ;mrf49xa_phy.c: 81: data = Mrf49RxByte();
  5965  0C43  2528  3188         	fcall	_Mrf49RxByte
  5966  0C45  00A7               	movwf	Mrf49xaServe@data
  5967                           
  5968                           ;mrf49xa_phy.c: 85: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK 
      +                          == 0)
  5969  0C46  0021               	movlb	1	; select bank1
  5970  0C47  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
  5971  0C48  2C4D               	goto	l2839
  5972                           
  5973                           ;mrf49xa_phy.c: 86: {
  5974                           ;mrf49xa_phy.c: 87: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  5975  0C49  30A0               	movlw	_mrf49xaInst& (0+255)
  5976  0C4A  2504  3188         	fcall	_Mrf49xaModeRx
  5977                           
  5978                           ;mrf49xa_phy.c: 88: break;
  5979  0C4C  2CFA               	goto	l2911
  5980  0C4D                     l2839:	
  5981                           
  5982                           ;mrf49xa_phy.c: 89: }
  5983                           ;mrf49xa_phy.c: 91: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_FREE) 
      +                          ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
  5984  0C4D  08A3               	movf	(_mrf49xaInst^(0+128)+3),f
  5985  0C4E  1D03               	skipz
  5986  0C4F  2C52               	goto	l2843
  5987  0C50  30A3               	movlw	(_mrf49xaInst+3)& (0+255)
  5988  0C51  2C56               	goto	L1
  5989  0C52                     l2843:	
  5990                           
  5991                           ;mrf49xa_phy.c: 92: else if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_F
      +                          REE) ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket
      +                          [1]);
  5992  0C52  08BB               	movf	(_mrf49xaInst^(0+128)+27),f
  5993  0C53  1D03               	skipz
  5994  0C54  2C58               	goto	l2847
  5995  0C55  30BB               	movlw	(_mrf49xaInst+27)& (0+255)
  5996  0C56                     L1:	
  5997  0C56  00A2               	movwf	(_mrf49xaInst+2)^(0+128)
  5998  0C57  2C5C               	goto	l2849
  5999  0C58                     l2847:	
  6000                           
  6001                           ;mrf49xa_phy.c: 93: else
  6002                           ;mrf49xa_phy.c: 94: {
  6003                           ;mrf49xa_phy.c: 97: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6004  0C58  30A0               	movlw	_mrf49xaInst& (0+255)
  6005  0C59  2504  3188         	fcall	_Mrf49xaModeRx
  6006                           
  6007                           ;mrf49xa_phy.c: 98: break;
  6008  0C5B  2CFA               	goto	l2911
  6009  0C5C                     l2849:	
  6010                           
  6011                           ;mrf49xa_phy.c: 99: }
  6012                           ;mrf49xa_phy.c: 101: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->packet.size = data;
  6013  0C5C  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
  6014  0C5D  0086               	movwf	6
  6015  0C5E  0187               	clrf	7
  6016                           
  6017                           ;mrf49xa_phy.c: 102: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = 0;
  6018  0C5F  27C3  3188         	fcall	PL18	;call to abstracted procedure
  6019  0C61  3E16               	addlw	22
  6020  0C62  0086               	movwf	6
  6021  0C63  0181               	clrf	1
  6022                           
  6023                           ;mrf49xa_phy.c: 103: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_BUSY_RX;
  6024  0C64  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  6025  0C65  0086               	movwf	6
  6026  0C66  3004               	movlw	4
  6027  0C67  0081               	movwf	1
  6028                           
  6029                           ;mrf49xa_phy.c: 105: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_DATA;
  6030  0C68  3002               	movlw	2
  6031  0C69  00EB               	movwf	(_mrf49xaInst^(0+128)+75)
  6032                           
  6033                           ;mrf49xa_phy.c: 106: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 1;
  6034  0C6A  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6035  0C6B  3980               	andlw	-128
  6036  0C6C  3801               	iorlw	1
  6037  0C6D  2C9D               	goto	L2
  6038  0C6E                     l2859:	
  6039                           ;mrf49xa_phy.c: 108: break;
  6040                           
  6041                           
  6042                           ;mrf49xa_phy.c: 112: data = Mrf49RxByte();
  6043  0C6E  2528  3188         	fcall	_Mrf49RxByte
  6044  0C70  00A7               	movwf	Mrf49xaServe@data
  6045                           
  6046                           ;mrf49xa_phy.c: 116: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK
      +                           == 0)
  6047  0C71  0021               	movlb	1	; select bank1
  6048  0C72  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
  6049  0C73  2C7C               	goto	l2867
  6050                           
  6051                           ;mrf49xa_phy.c: 117: {
  6052                           ;mrf49xa_phy.c: 118: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_FREE;
  6053  0C74  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  6054  0C75  0086               	movwf	6
  6055  0C76  30A0               	movlw	_mrf49xaInst& (0+255)
  6056  0C77  0187               	clrf	7
  6057  0C78  0181               	clrf	1
  6058                           
  6059                           ;mrf49xa_phy.c: 119: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6060  0C79  2504  3188         	fcall	_Mrf49xaModeRx
  6061                           
  6062                           ;mrf49xa_phy.c: 120: break;
  6063  0C7B  2CFA               	goto	l2911
  6064  0C7C                     l2867:	
  6065                           
  6066                           ;mrf49xa_phy.c: 121: }
  6067                           ;mrf49xa_phy.c: 123: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->hwRx->packet.size)
  6068  0C7C  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
  6069  0C7D  0086               	movwf	6
  6070  0C7E  0187               	clrf	7
  6071  0C7F  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6072  0C80  397F               	andlw	127
  6073  0C81  0601               	xorwf	1,w
  6074  0C82  1D03               	skipz
  6075  0C83  2C90               	goto	l2873
  6076                           
  6077                           ;mrf49xa_phy.c: 124: {
  6078                           ;mrf49xa_phy.c: 125: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = data;
  6079  0C84  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  6080  0C85  3E16               	addlw	22
  6081  0C86  0086               	movwf	6
  6082                           
  6083                           ;mrf49xa_phy.c: 129: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_READY_RX;
  6084  0C87  27C3  3188         	fcall	PL18	;call to abstracted procedure
  6085  0C89  0086               	movwf	6
  6086  0C8A  3005               	movlw	5
  6087  0C8B  0081               	movwf	1
  6088                           
  6089                           ;mrf49xa_phy.c: 135: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6090  0C8C  30A0               	movlw	_mrf49xaInst& (0+255)
  6091  0C8D  2504  3188         	fcall	_Mrf49xaModeRx
  6092                           
  6093                           ;mrf49xa_phy.c: 137: }
  6094  0C8F  2CFA               	goto	l2911
  6095  0C90                     l2873:	
  6096                           
  6097                           ;mrf49xa_phy.c: 138: else
  6098                           ;mrf49xa_phy.c: 139: {
  6099                           ;mrf49xa_phy.c: 140: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->raw[((Mrf49xaMac_t*)(&mrf49x
      +                          aInst))->hwByte++] = data;
  6100  0C90  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6101  0C91  397F               	andlw	127
  6102  0C92  0722               	addwf	(_mrf49xaInst+2)^(0+128),w
  6103  0C93  0020               	movlb	0	; select bank0
  6104  0C94  00A5               	movwf	??_Mrf49xaServe
  6105  0C95  0A25               	incf	??_Mrf49xaServe,w
  6106  0C96  0086               	movwf	6
  6107  0C97  0187               	clrf	7
  6108  0C98  0827               	movf	Mrf49xaServe@data,w
  6109  0C99  0081               	movwf	1
  6110  0C9A  0021               	movlb	1	; select bank1
  6111  0C9B  27B0  3188         	fcall	PL12	;call to abstracted procedure
  6112  0C9D                     L2:	
  6113  0C9D  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6114  0C9E  2CFA               	goto	l2911
  6115  0C9F                     l2877:	
  6116                           
  6117                           ;mrf49xa_phy.c: 146: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte++;
  6118  0C9F  27B0  3188         	fcall	PL12	;call to abstracted procedure
  6119  0CA1  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6120                           
  6121                           ;mrf49xa_phy.c: 148: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->txPacket.packet.size)
  6122  0CA2  397F               	andlw	127
  6123  0CA3  0654               	xorwf	(_mrf49xaInst^(0+128)+52),w
  6124  0CA4  1D03               	skipz
  6125  0CA5  2CDA               	goto	l2905
  6126                           
  6127                           ;mrf49xa_phy.c: 149: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 49;
  6128  0CA6  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6129  0CA7  3980               	andlw	-128
  6130  0CA8  3831               	iorlw	49
  6131  0CA9  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6132  0CAA  2CDA               	goto	l2905
  6133  0CAB                     l2881:	
  6134                           
  6135                           ;mrf49xa_phy.c: 154: Mrf49TxByte(0x2D);
  6136  0CAB  302D               	movlw	45
  6137  0CAC  24FF  3188         	fcall	_Mrf49TxByte
  6138                           
  6139                           ;mrf49xa_phy.c: 155: break;
  6140  0CAE  2CFA               	goto	l2911
  6141  0CAF                     l2883:	
  6142                           
  6143                           ;mrf49xa_phy.c: 158: Mrf49TxByte(0xD4);
  6144  0CAF  30D4               	movlw	212
  6145  0CB0  24FF  3188         	fcall	_Mrf49TxByte
  6146                           
  6147                           ;mrf49xa_phy.c: 159: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0x7F;
  6148  0CB2  307F               	movlw	127
  6149  0CB3  0021               	movlb	1	; select bank1
  6150  0CB4  04ED               	iorwf	(_mrf49xaInst^(0+128)+77),f
  6151                           
  6152                           ;mrf49xa_phy.c: 160: break;
  6153  0CB5  2CFA               	goto	l2911
  6154  0CB6                     l2887:	
  6155                           
  6156                           ;mrf49xa_phy.c: 164: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[((Mrf49xa
      +                          Mac_t*)(&mrf49xaInst))->hwByte]);
  6157  0CB6  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6158  0CB7  397F               	andlw	127
  6159  0CB8  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
  6160  0CB9  0086               	movwf	6
  6161  0CBA  0187               	clrf	7
  6162  0CBB  0801               	movf	1,w
  6163  0CBC  24FF  3188         	fcall	_Mrf49TxByte
  6164                           
  6165                           ;mrf49xa_phy.c: 165: break;
  6166  0CBE  2CFA               	goto	l2911
  6167  0CBF                     l2889:	
  6168                           
  6169                           ;mrf49xa_phy.c: 168: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc);
  6170  0CBF  0869               	movf	(_mrf49xaInst^(0+128)+73),w
  6171  0CC0  24FF  3188         	fcall	_Mrf49TxByte
  6172                           
  6173                           ;mrf49xa_phy.c: 169: break;
  6174  0CC2  2CFA               	goto	l2911
  6175  0CC3                     l2891:	
  6176                           
  6177                           ;mrf49xa_phy.c: 172: Mrf49TxByte(0x00);
  6178  0CC3  3000               	movlw	0
  6179  0CC4  24FF  3188         	fcall	_Mrf49TxByte
  6180                           
  6181                           ;mrf49xa_phy.c: 173: break;
  6182  0CC6  2CFA               	goto	l2911
  6183  0CC7                     l2893:	
  6184                           
  6185                           ;mrf49xa_phy.c: 176: Mrf49TxByte(0x00);
  6186  0CC7  3000               	movlw	0
  6187  0CC8  24FF  3188         	fcall	_Mrf49TxByte
  6188                           
  6189                           ;mrf49xa_phy.c: 177: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6190  0CCA  2504  3188         	fcall	_Mrf49xaModeRx
  6191                           
  6192                           ;mrf49xa_phy.c: 179: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  6193  0CCC  30F0               	movlw	-16
  6194  0CCD  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  6195                           
  6196                           ;mrf49xa_phy.c: 181: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck == NEED_ACK)
  6197  0CCE  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  6198  0CCF  0C89               	rrf	9,f
  6199  0CD0  0C89               	rrf	9,f
  6200  0CD1  3903               	andlw	3
  6201  0CD2  3A01               	xorlw	1
  6202  0CD3  1D03               	skipz
  6203  0CD4  2CD8               	goto	l2901
  6204                           
  6205                           ;mrf49xa_phy.c: 182: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_WAITING_FOR_A
      +                          CK;
  6206  0CD5  3003               	movlw	3
  6207  0CD6  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
  6208  0CD7  2CFA               	goto	l2911
  6209  0CD8                     l2901:	
  6210                           
  6211                           ;mrf49xa_phy.c: 183: else
  6212                           ;mrf49xa_phy.c: 184: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_FREE;
  6213  0CD8  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  6214  0CD9  2CFA               	goto	l2911
  6215  0CDA                     l2905:	
  6216  0CDA  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6217  0CDB  397F               	andlw	127
  6218                           
  6219                           ; Switch size 1, requested type "space"
  6220                           ; Number of cases is 5, Range of values is 49 to 101
  6221                           ; switch strategies available:
  6222                           ; Name         Instructions Cycles
  6223                           ; simple_byte           16     9 (average)
  6224                           ; direct_byte          115     9 (fixed)
  6225                           ; jumptable            263     9 (fixed)
  6226                           ;	Chosen strategy is simple_byte
  6227  0CDC  3A31               	xorlw	49	; case 49
  6228  0CDD  1903               	skipnz
  6229  0CDE  2CBF               	goto	l2889
  6230  0CDF  3A03               	xorlw	3	; case 50
  6231  0CE0  1903               	skipnz
  6232  0CE1  2CC3               	goto	l2891
  6233  0CE2  3A01               	xorlw	1	; case 51
  6234  0CE3  1903               	skipnz
  6235  0CE4  2CC7               	goto	l2893
  6236  0CE5  3A57               	xorlw	87	; case 100
  6237  0CE6  1903               	skipnz
  6238  0CE7  2CAB               	goto	l2881
  6239  0CE8  3A01               	xorlw	1	; case 101
  6240  0CE9  1903               	skipnz
  6241  0CEA  2CAF               	goto	l2883
  6242  0CEB  2CB6               	goto	l2887
  6243  0CEC                     l2909:	
  6244  0CEC  086B               	movf	(_mrf49xaInst^(0+128)+75),w
  6245                           
  6246                           ; Switch size 1, requested type "space"
  6247                           ; Number of cases is 4, Range of values is 0 to 3
  6248                           ; switch strategies available:
  6249                           ; Name         Instructions Cycles
  6250                           ; simple_byte           13     7 (average)
  6251                           ; direct_byte           14     6 (fixed)
  6252                           ; jumptable            260     6 (fixed)
  6253                           ;	Chosen strategy is simple_byte
  6254  0CED  3A00               	xorlw	0	; case 0
  6255  0CEE  1903               	skipnz
  6256  0CEF  2C3F               	goto	l2831
  6257  0CF0  3A01               	xorlw	1	; case 1
  6258  0CF1  1903               	skipnz
  6259  0CF2  2C43               	goto	l2833
  6260  0CF3  3A03               	xorlw	3	; case 2
  6261  0CF4  1903               	skipnz
  6262  0CF5  2C6E               	goto	l2859
  6263  0CF6  3A01               	xorlw	1	; case 3
  6264  0CF7  1903               	skipnz
  6265  0CF8  2C9F               	goto	l2877
  6266  0CF9  2CFA               	goto	l2911
  6267  0CFA                     l2911:	
  6268                           
  6269                           ;mrf49xa_phy.c: 191: }
  6270                           ;mrf49xa_phy.c: 205: return PORTAbits.RA2 == 1 ? 1 : 0;
  6271  0CFA  0020               	movlb	0	; select bank0
  6272  0CFB  0C0C               	rrf	12,w	;volatile
  6273  0CFC  0C89               	rrf	9,f
  6274  0CFD  3901               	andlw	1
  6275  0CFE  0008               	return
  6276  0CFF                     __end_of_Mrf49xaServe:	
  6277  0CFF                     __ptext36:	
  6278 ;; *************** function _Mrf49TxByte *****************
  6279 ;; Defined at:
  6280 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  byte            1    wreg     unsigned char 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;  byte            1    3[BANK0 ] unsigned char 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;		None               void
  6287 ;; Registers used:
  6288 ;;		wreg, status,2, status,0, pclath, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 1E/1
  6291 ;;		On exit  : 1F/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6294 ;;      Params:         0       0       0       0
  6295 ;;      Locals:         0       1       0       0
  6296 ;;      Temps:          0       0       0       0
  6297 ;;      Totals:         0       1       0       0
  6298 ;;Total ram usage:        1 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    7
  6301 ;; This function calls:
  6302 ;;		_Mrf49TxCmd
  6303 ;; This function is called by:
  6304 ;;		_Mrf49xaServe
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           
  6309                           ;psect for function _Mrf49TxByte
  6310  0CFF                     _Mrf49TxByte:	
  6311                           
  6312                           ;incstack = 0
  6313                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6314                           ;Mrf49TxByte@byte stored from wreg
  6315  0CFF  0020               	movlb	0	; select bank0
  6316  0D00  00A3               	movwf	Mrf49TxByte@byte
  6317                           
  6318                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6319  0D01  00A1               	movwf	Mrf49TxCmd@val
  6320  0D02  30B8               	movlw	184
  6321  0D03  2D2A               	ljmp	_Mrf49TxCmd
  6322  0D04                     __end_of_Mrf49TxByte:	
  6323  0D04                     __ptext35:	
  6324 ;; *************** function _Mrf49xaModeRx *****************
  6325 ;; Defined at:
  6326 ;;		line 75 in file "../../../src/devices/mrf49xa.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  6329 ;;		 -> mrf49xaInst(78), 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;  inst            1    4[BANK0 ] PTR struct Mrf49xaMac_s
  6332 ;;		 -> mrf49xaInst(78), 
  6333 ;;  k               1    3[BANK0 ] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;		None               void
  6336 ;; Registers used:
  6337 ;;		wreg, status,2, status,0, pclath, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 1E/1
  6340 ;;		On exit  : 1F/1
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6343 ;;      Params:         0       0       0       0
  6344 ;;      Locals:         0       2       0       0
  6345 ;;      Temps:          0       0       0       0
  6346 ;;      Totals:         0       2       0       0
  6347 ;;Total ram usage:        2 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    7
  6350 ;; This function calls:
  6351 ;;		_Mrf49TxCmd
  6352 ;; This function is called by:
  6353 ;;		_Mrf49xaReboot
  6354 ;;		_Mrf49xaInit
  6355 ;;		_Mrf49xaServe
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function _Mrf49xaModeRx
  6361  0D04                     _Mrf49xaModeRx:	
  6362  0D04                     l2953:	
  6363                           ;incstack = 0
  6364                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6365                           
  6366                           
  6367                           ;mrf49xa.c: 77: UI08_t k;
  6368                           ;mrf49xa.c: 78: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg, 
      +                          mrfRegset_Rx[k].val); };
  6369  0D04  0020               	movlb	0	; select bank0
  6370  0D05  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6371  0D06  01A3               	clrf	Mrf49xaModeRx@k
  6372  0D07  3182               	movlp	high __stringtab
  6373  0D08  000A               	callw
  6374  0D09  3188               	pagesel	$	;select current page
  6375  0D0A  3800               	iorlw	0
  6376  0D0B  1903               	btfsc	3,2
  6377  0D0C  2D21               	goto	l211
  6378  0D0D                     l2959:	
  6379  0D0D  3523               	lslf	Mrf49xaModeRx@k,w
  6380  0D0E  3E4F               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6381  0D0F  3182               	movlp	high __stringtab
  6382  0D10  000A               	callw
  6383  0D11  3188               	pagesel	$	;select current page
  6384  0D12  00A1               	movwf	Mrf49TxCmd@val
  6385  0D13  3523               	lslf	Mrf49xaModeRx@k,w
  6386  0D14  3E4E               	addlw	low (_mrfRegset_Rx| (0+32768))
  6387  0D15  3182               	movlp	high __stringtab
  6388  0D16  000A               	callw
  6389  0D17  3188               	pagesel	$	;select current page
  6390  0D18  252A               	fcall	_Mrf49TxCmd
  6391  0D19  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6392  0D1A  0AA3               	incf	Mrf49xaModeRx@k,f
  6393  0D1B  3182               	movlp	high __stringtab
  6394  0D1C  000A               	callw
  6395  0D1D  3188               	pagesel	$	;select current page
  6396  0D1E  0223               	subwf	Mrf49xaModeRx@k,w
  6397  0D1F  1C03               	skipc
  6398  0D20  2D0D               	goto	l2959
  6399  0D21                     l211:	
  6400                           
  6401                           ;mrf49xa.c: 81: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_IDLE;
  6402  0D21  0021               	movlb	1	; select bank1
  6403  0D22  3080               	movlw	-128
  6404  0D23  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
  6405  0D24  0AEB               	incf	(_mrf49xaInst^(0+128)+75),f
  6406                           
  6407                           ;mrf49xa.c: 82: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0;
  6408  0D25  05ED               	andwf	(_mrf49xaInst^(0+128)+77),f
  6409                           
  6410                           ;mrf49xa.c: 84: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx = 0;
  6411  0D26  13A0               	bcf	_mrf49xaInst^(0+128),7
  6412  0D27  0008               	return
  6413  0D28                     __end_of_Mrf49xaModeRx:	
  6414  0D28                     __ptext39:	
  6415 ;; *************** function _Mrf49RxByte *****************
  6416 ;; Defined at:
  6417 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      unsigned char 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, pclath, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 1E/1
  6428 ;;		On exit  : 1F/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6431 ;;      Params:         0       0       0       0
  6432 ;;      Locals:         0       0       0       0
  6433 ;;      Temps:          0       0       0       0
  6434 ;;      Totals:         0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    7
  6438 ;; This function calls:
  6439 ;;		_Mrf49RxCmd
  6440 ;; This function is called by:
  6441 ;;		_Mrf49xaServe
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _Mrf49RxByte
  6447  0D28                     _Mrf49RxByte:	
  6448                           
  6449                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6453  0D28  30B0               	movlw	176
  6454  0D29  2DE1               	ljmp	_Mrf49RxCmd
  6455  0D2A                     __end_of_Mrf49RxByte:	
  6456  0D2A                     __ptext37:	
  6457 ;; *************** function _Mrf49TxCmd *****************
  6458 ;; Defined at:
  6459 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  cmd             1    wreg     unsigned char 
  6462 ;;  val             1    1[BANK0 ] unsigned char 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;  cmd             1    2[BANK0 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;		None               void
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 1F/0
  6471 ;;		On exit  : 1F/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6474 ;;      Params:         0       1       0       0
  6475 ;;      Locals:         0       1       0       0
  6476 ;;      Temps:          0       0       0       0
  6477 ;;      Totals:         0       2       0       0
  6478 ;;Total ram usage:        2 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    6
  6481 ;; This function calls:
  6482 ;;		_Mrf49SpiTx
  6483 ;; This function is called by:
  6484 ;;		_Mrf49xaModeRx
  6485 ;;		_Mrf49xaModeTx
  6486 ;;		_Mrf49xaModeSleep
  6487 ;;		_Mrf49xaInit
  6488 ;;		_Mrf49TxByte
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           
  6493                           ;psect for function _Mrf49TxCmd
  6494  0D2A                     _Mrf49TxCmd:	
  6495                           
  6496                           ;incstack = 0
  6497                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6498                           ;Mrf49TxCmd@cmd stored from wreg
  6499  0D2A  00A2               	movwf	Mrf49TxCmd@cmd
  6500                           
  6501                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6502  0D2B  130E               	bcf	14,6	;volatile
  6503                           
  6504                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6505  0D2C  0822               	movf	Mrf49TxCmd@cmd,w
  6506  0D2D  2533  3188         	fcall	_Mrf49SpiTx
  6507                           
  6508                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6509  0D2F  0821               	movf	Mrf49TxCmd@val,w
  6510  0D30  2533               	fcall	_Mrf49SpiTx
  6511                           
  6512                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6513  0D31  170E               	bsf	14,6	;volatile
  6514  0D32  0008               	return
  6515  0D33                     __end_of_Mrf49TxCmd:	
  6516  0D33                     __ptext41:	
  6517 ;; *************** function _Mrf49SpiTx *****************
  6518 ;; Defined at:
  6519 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  byte            1    wreg     unsigned char 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  byte            1    0[BANK0 ] unsigned char 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;		None               void
  6526 ;; Registers used:
  6527 ;;		wreg
  6528 ;; Tracked objects:
  6529 ;;		On entry : 1F/0
  6530 ;;		On exit  : 1F/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6533 ;;      Params:         0       0       0       0
  6534 ;;      Locals:         0       1       0       0
  6535 ;;      Temps:          0       0       0       0
  6536 ;;      Totals:         0       1       0       0
  6537 ;;Total ram usage:        1 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    5
  6540 ;; This function calls:
  6541 ;;		Nothing
  6542 ;; This function is called by:
  6543 ;;		_Mrf49TxCmd
  6544 ;;		_Mrf49RxCmd
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           
  6549                           ;psect for function _Mrf49SpiTx
  6550  0D33                     _Mrf49SpiTx:	
  6551                           
  6552                           ;incstack = 0
  6553                           ; Regs used in _Mrf49SpiTx: [wreg]
  6554                           ;Mrf49SpiTx@byte stored from wreg
  6555  0D33  00A0               	movwf	Mrf49SpiTx@byte
  6556                           
  6557                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  6558  0D34  1FA0               	btfss	Mrf49SpiTx@byte,7
  6559  0D35  2D38               	goto	l255
  6560  0D36  178D               	bsf	13,7	;volatile
  6561  0D37  2D39               	goto	l256
  6562  0D38                     l255:	
  6563  0D38  138D               	bcf	13,7	;volatile
  6564  0D39                     l256:	
  6565  0D39  0022               	movlb	2	; select bank2
  6566  0D3A  178E               	bsf	14,7	;volatile
  6567  0D3B  0000               	nop	;# 
  6568  0D3C  0022               	movlb	2	; select bank2
  6569  0D3D  138E               	bcf	14,7	;volatile
  6570  0D3E  0020               	movlb	0	; select bank0
  6571  0D3F  1F20               	btfss	Mrf49SpiTx@byte,6
  6572  0D40  2D43               	goto	l259
  6573  0D41  178D               	bsf	13,7	;volatile
  6574  0D42  2D44               	goto	l260
  6575  0D43                     l259:	
  6576  0D43  138D               	bcf	13,7	;volatile
  6577  0D44                     l260:	
  6578  0D44  0022               	movlb	2	; select bank2
  6579  0D45  178E               	bsf	14,7	;volatile
  6580  0D46  0000               	nop	;# 
  6581  0D47  0022               	movlb	2	; select bank2
  6582  0D48  138E               	bcf	14,7	;volatile
  6583  0D49  0020               	movlb	0	; select bank0
  6584  0D4A  1EA0               	btfss	Mrf49SpiTx@byte,5
  6585  0D4B  2D4E               	goto	l263
  6586  0D4C  178D               	bsf	13,7	;volatile
  6587  0D4D  2D4F               	goto	l264
  6588  0D4E                     l263:	
  6589  0D4E  138D               	bcf	13,7	;volatile
  6590  0D4F                     l264:	
  6591  0D4F  0022               	movlb	2	; select bank2
  6592  0D50  178E               	bsf	14,7	;volatile
  6593  0D51  0000               	nop	;# 
  6594  0D52  0022               	movlb	2	; select bank2
  6595  0D53  138E               	bcf	14,7	;volatile
  6596  0D54  0020               	movlb	0	; select bank0
  6597  0D55  1E20               	btfss	Mrf49SpiTx@byte,4
  6598  0D56  2D59               	goto	l267
  6599  0D57  178D               	bsf	13,7	;volatile
  6600  0D58  2D5A               	goto	l268
  6601  0D59                     l267:	
  6602  0D59  138D               	bcf	13,7	;volatile
  6603  0D5A                     l268:	
  6604  0D5A  0022               	movlb	2	; select bank2
  6605  0D5B  178E               	bsf	14,7	;volatile
  6606  0D5C  0000               	nop	;# 
  6607  0D5D  0022               	movlb	2	; select bank2
  6608  0D5E  138E               	bcf	14,7	;volatile
  6609  0D5F  0020               	movlb	0	; select bank0
  6610  0D60  1DA0               	btfss	Mrf49SpiTx@byte,3
  6611  0D61  2D64               	goto	l271
  6612  0D62  178D               	bsf	13,7	;volatile
  6613  0D63  2D65               	goto	l272
  6614  0D64                     l271:	
  6615  0D64  138D               	bcf	13,7	;volatile
  6616  0D65                     l272:	
  6617  0D65  0022               	movlb	2	; select bank2
  6618  0D66  178E               	bsf	14,7	;volatile
  6619  0D67  0000               	nop	;# 
  6620  0D68  0022               	movlb	2	; select bank2
  6621  0D69  138E               	bcf	14,7	;volatile
  6622  0D6A  0020               	movlb	0	; select bank0
  6623  0D6B  1D20               	btfss	Mrf49SpiTx@byte,2
  6624  0D6C  2D6F               	goto	l275
  6625  0D6D  178D               	bsf	13,7	;volatile
  6626  0D6E  2D70               	goto	l276
  6627  0D6F                     l275:	
  6628  0D6F  138D               	bcf	13,7	;volatile
  6629  0D70                     l276:	
  6630  0D70  0022               	movlb	2	; select bank2
  6631  0D71  178E               	bsf	14,7	;volatile
  6632  0D72  0000               	nop	;# 
  6633  0D73  0022               	movlb	2	; select bank2
  6634  0D74  138E               	bcf	14,7	;volatile
  6635  0D75  0020               	movlb	0	; select bank0
  6636  0D76  1CA0               	btfss	Mrf49SpiTx@byte,1
  6637  0D77  2D7A               	goto	l279
  6638  0D78  178D               	bsf	13,7	;volatile
  6639  0D79  2D7B               	goto	l280
  6640  0D7A                     l279:	
  6641  0D7A  138D               	bcf	13,7	;volatile
  6642  0D7B                     l280:	
  6643  0D7B  0022               	movlb	2	; select bank2
  6644  0D7C  178E               	bsf	14,7	;volatile
  6645  0D7D  0000               	nop	;# 
  6646  0D7E  0022               	movlb	2	; select bank2
  6647  0D7F  138E               	bcf	14,7	;volatile
  6648  0D80  0020               	movlb	0	; select bank0
  6649  0D81  1C20               	btfss	Mrf49SpiTx@byte,0
  6650  0D82  2D85               	goto	l283
  6651  0D83  178D               	bsf	13,7	;volatile
  6652  0D84  2D86               	goto	l284
  6653  0D85                     l283:	
  6654  0D85  138D               	bcf	13,7	;volatile
  6655  0D86                     l284:	
  6656  0D86  0022               	movlb	2	; select bank2
  6657  0D87  178E               	bsf	14,7	;volatile
  6658  0D88  0000               	nop	;# 
  6659  0D89  0022               	movlb	2	; select bank2
  6660  0D8A  138E               	bcf	14,7	;volatile
  6661                           
  6662                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  6663  0D8B  0020               	movlb	0	; select bank0
  6664  0D8C  138D               	bcf	13,7	;volatile
  6665  0D8D  0008               	return
  6666  0D8E                     __end_of_Mrf49SpiTx:	
  6667  0D8E                     __ptext38:	
  6668 ;; *************** function _Mrf49RxSts *****************
  6669 ;; Defined at:
  6670 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  6673 ;;		 -> mrf49xaInst(78), 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  inst            1    1[BANK0 ] PTR struct Mrf49xaMac_s
  6676 ;;		 -> mrf49xaInst(78), 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;		None               void
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 1E/0
  6683 ;;		On exit  : 1F/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6686 ;;      Params:         0       0       0       0
  6687 ;;      Locals:         0       1       0       0
  6688 ;;      Temps:          0       0       0       0
  6689 ;;      Totals:         0       1       0       0
  6690 ;;Total ram usage:        1 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    6
  6693 ;; This function calls:
  6694 ;;		_Mrf49SpiRx
  6695 ;; This function is called by:
  6696 ;;		_Mrf49xaTick
  6697 ;;		_Mrf49xaServe
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           
  6702                           ;psect for function _Mrf49RxSts
  6703  0D8E                     _Mrf49RxSts:	
  6704                           
  6705                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  6706                           
  6707                           ;incstack = 0
  6708                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6709  0D8E  120B               	bcf	11,4	;volatile
  6710                           
  6711                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  6712  0D8F  0020               	movlb	0	; select bank0
  6713  0D90  130E               	bcf	14,6	;volatile
  6714                           
  6715                           ;mrf49xa_cmd.c: 36: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] = Mrf49SpiRx();
  6716  0D91  259C  3188         	fcall	_Mrf49SpiRx
  6717  0D93  0021               	movlb	1	; select bank1
  6718  0D94  00A0               	movwf	_mrf49xaInst^(0+128)
  6719                           
  6720                           ;mrf49xa_cmd.c: 37: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[1] = Mrf49SpiRx();
  6721  0D95  259C               	fcall	_Mrf49SpiRx
  6722  0D96  0021               	movlb	1	; select bank1
  6723  0D97  00A1               	movwf	(_mrf49xaInst^(0+128)+1)
  6724                           
  6725                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  6726  0D98  0020               	movlb	0	; select bank0
  6727  0D99  170E               	bsf	14,6	;volatile
  6728                           
  6729                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  6730  0D9A  160B               	bsf	11,4	;volatile
  6731  0D9B  0008               	return
  6732  0D9C                     __end_of_Mrf49RxSts:	
  6733  0D9C                     __ptext42:	
  6734 ;; *************** function _Mrf49SpiRx *****************
  6735 ;; Defined at:
  6736 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  data            1    0[BANK0 ] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      unsigned char 
  6743 ;; Registers used:
  6744 ;;		wreg, status,2
  6745 ;; Tracked objects:
  6746 ;;		On entry : 1E/0
  6747 ;;		On exit  : 1F/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6750 ;;      Params:         0       0       0       0
  6751 ;;      Locals:         0       1       0       0
  6752 ;;      Temps:          0       0       0       0
  6753 ;;      Totals:         0       1       0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    5
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_Mrf49RxCmd
  6761 ;;		_Mrf49RxSts
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           
  6766                           ;psect for function _Mrf49SpiRx
  6767  0D9C                     _Mrf49SpiRx:	
  6768                           
  6769                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  6770                           
  6771                           ;incstack = 0
  6772                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  6773  0D9C  0020               	movlb	0	; select bank0
  6774  0D9D  01A0               	clrf	Mrf49SpiRx@data
  6775                           
  6776                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  6777  0D9E  138D               	bcf	13,7	;volatile
  6778  0D9F  1A8E               	btfsc	14,5	;volatile
  6779  0DA0  17A0               	bsf	Mrf49SpiRx@data,7
  6780  0DA1  0022               	movlb	2	; select bank2
  6781  0DA2  178E               	bsf	14,7	;volatile
  6782  0DA3  0000               	nop	;# 
  6783  0DA4  0022               	movlb	2	; select bank2
  6784  0DA5  138E               	bcf	14,7	;volatile
  6785                           
  6786                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6787  0DA6  0020               	movlb	0	; select bank0
  6788  0DA7  1A8E               	btfsc	14,5	;volatile
  6789  0DA8  1720               	bsf	Mrf49SpiRx@data,6
  6790  0DA9  0022               	movlb	2	; select bank2
  6791  0DAA  178E               	bsf	14,7	;volatile
  6792  0DAB  0000               	nop	;# 
  6793  0DAC  0022               	movlb	2	; select bank2
  6794  0DAD  138E               	bcf	14,7	;volatile
  6795                           
  6796                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6797  0DAE  0020               	movlb	0	; select bank0
  6798  0DAF  1A8E               	btfsc	14,5	;volatile
  6799  0DB0  16A0               	bsf	Mrf49SpiRx@data,5
  6800  0DB1  0022               	movlb	2	; select bank2
  6801  0DB2  178E               	bsf	14,7	;volatile
  6802  0DB3  0000               	nop	;# 
  6803  0DB4  0022               	movlb	2	; select bank2
  6804  0DB5  138E               	bcf	14,7	;volatile
  6805                           
  6806                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6807  0DB6  0020               	movlb	0	; select bank0
  6808  0DB7  1A8E               	btfsc	14,5	;volatile
  6809  0DB8  1620               	bsf	Mrf49SpiRx@data,4
  6810  0DB9  0022               	movlb	2	; select bank2
  6811  0DBA  178E               	bsf	14,7	;volatile
  6812  0DBB  0000               	nop	;# 
  6813  0DBC  0022               	movlb	2	; select bank2
  6814  0DBD  138E               	bcf	14,7	;volatile
  6815                           
  6816                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6817  0DBE  0020               	movlb	0	; select bank0
  6818  0DBF  1A8E               	btfsc	14,5	;volatile
  6819  0DC0  15A0               	bsf	Mrf49SpiRx@data,3
  6820  0DC1  0022               	movlb	2	; select bank2
  6821  0DC2  178E               	bsf	14,7	;volatile
  6822  0DC3  0000               	nop	;# 
  6823  0DC4  0022               	movlb	2	; select bank2
  6824  0DC5  138E               	bcf	14,7	;volatile
  6825                           
  6826                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6827  0DC6  0020               	movlb	0	; select bank0
  6828  0DC7  1A8E               	btfsc	14,5	;volatile
  6829  0DC8  1520               	bsf	Mrf49SpiRx@data,2
  6830  0DC9  0022               	movlb	2	; select bank2
  6831  0DCA  178E               	bsf	14,7	;volatile
  6832  0DCB  0000               	nop	;# 
  6833  0DCC  0022               	movlb	2	; select bank2
  6834  0DCD  138E               	bcf	14,7	;volatile
  6835                           
  6836                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6837  0DCE  0020               	movlb	0	; select bank0
  6838  0DCF  1A8E               	btfsc	14,5	;volatile
  6839  0DD0  14A0               	bsf	Mrf49SpiRx@data,1
  6840  0DD1  0022               	movlb	2	; select bank2
  6841  0DD2  178E               	bsf	14,7	;volatile
  6842  0DD3  0000               	nop	;# 
  6843  0DD4  0022               	movlb	2	; select bank2
  6844  0DD5  138E               	bcf	14,7	;volatile
  6845                           
  6846                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6847  0DD6  0020               	movlb	0	; select bank0
  6848  0DD7  1A8E               	btfsc	14,5	;volatile
  6849  0DD8  1420               	bsf	Mrf49SpiRx@data,0
  6850  0DD9  0022               	movlb	2	; select bank2
  6851  0DDA  178E               	bsf	14,7	;volatile
  6852  0DDB  0000               	nop	;# 
  6853  0DDC  0022               	movlb	2	; select bank2
  6854  0DDD  138E               	bcf	14,7	;volatile
  6855                           
  6856                           ;mrf49xa_spi_pic16.c: 40: return data;
  6857  0DDE  0020               	movlb	0	; select bank0
  6858  0DDF  0820               	movf	Mrf49SpiRx@data,w
  6859  0DE0  0008               	return
  6860  0DE1                     __end_of_Mrf49SpiRx:	
  6861  0DE1                     __ptext40:	
  6862 ;; *************** function _Mrf49RxCmd *****************
  6863 ;; Defined at:
  6864 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  cmd             1    wreg     unsigned char 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  cmd             1    1[BANK0 ] unsigned char 
  6869 ;;  val             1    2[BANK0 ] unsigned char 
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      unsigned char 
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0, pclath, cstack
  6874 ;; Tracked objects:
  6875 ;;		On entry : 1E/1
  6876 ;;		On exit  : 1F/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6879 ;;      Params:         0       0       0       0
  6880 ;;      Locals:         0       2       0       0
  6881 ;;      Temps:          0       0       0       0
  6882 ;;      Totals:         0       2       0       0
  6883 ;;Total ram usage:        2 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    6
  6886 ;; This function calls:
  6887 ;;		_Mrf49SpiRx
  6888 ;;		_Mrf49SpiTx
  6889 ;; This function is called by:
  6890 ;;		_Mrf49RxByte
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _Mrf49RxCmd
  6896  0DE1                     _Mrf49RxCmd:	
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  6900                           ;Mrf49RxCmd@cmd stored from wreg
  6901  0DE1  0020               	movlb	0	; select bank0
  6902  0DE2  00A1               	movwf	Mrf49RxCmd@cmd
  6903                           
  6904                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  6905  0DE3  130E               	bcf	14,6	;volatile
  6906                           
  6907                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  6908  0DE4  0821               	movf	Mrf49RxCmd@cmd,w
  6909  0DE5  2533  3188         	fcall	_Mrf49SpiTx
  6910                           
  6911                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  6912  0DE7  259C               	fcall	_Mrf49SpiRx
  6913  0DE8  00A2               	movwf	Mrf49RxCmd@val
  6914                           
  6915                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  6916  0DE9  170E               	bsf	14,6	;volatile
  6917                           
  6918                           ;mrf49xa_cmd.c: 27: return val;
  6919  0DEA  0008               	return
  6920  0DEB                     __end_of_Mrf49RxCmd:	
  6921  0DEB                     __ptext2:	
  6922 ;; *************** function _RfSendPowerState *****************
  6923 ;; Defined at:
  6924 ;;		line 14 in file "../../../src/rfstack/packets.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  6927 ;;		 -> mrf49xaInst(78), 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  inst            1    7[BANK0 ] PTR struct Mrf49xaMac_s
  6930 ;;		 -> mrf49xaInst(78), 
  6931 ;;  s               2    8[BANK0 ] unsigned int 
  6932 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  6933 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  6934 ;; Return value:  Size  Location     Type
  6935 ;;		None               void
  6936 ;; Registers used:
  6937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 1F/0
  6940 ;;		On exit  : 1F/1
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6943 ;;      Params:         0       0       0       0
  6944 ;;      Locals:         0       4       0       0
  6945 ;;      Temps:          0       0       0       0
  6946 ;;      Totals:         0       4       0       0
  6947 ;;Total ram usage:        4 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:    7
  6950 ;; This function calls:
  6951 ;;		_AdcSample
  6952 ;;		_Mrf49xaAllocPacket
  6953 ;;		_Mrf49xaTxPacket
  6954 ;;		_PwrAdcSleep
  6955 ;;		_PwrAdcWake
  6956 ;; This function is called by:
  6957 ;;		_main
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           
  6962                           ;psect for function _RfSendPowerState
  6963  0DEB                     _RfSendPowerState:	
  6964                           
  6965                           ;packets.c: 16: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(((Mrf49xaMac_t*)(&mrf49xaIns
      +                          t)));
  6966                           
  6967                           ;incstack = 0
  6968                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6969  0DEB  30A0               	movlw	_mrf49xaInst& (0+255)
  6970  0DEC  26A7  3188         	fcall	_Mrf49xaAllocPacket
  6971  0DEE  0020               	movlb	0	; select bank0
  6972  0DEF  00AA               	movwf	RfSendPowerState@packet
  6973                           
  6974                           ;packets.c: 18: packet->packet.size = 4;
  6975  0DF0  0A2A               	incf	RfSendPowerState@packet,w
  6976  0DF1  0086               	movwf	6
  6977  0DF2  3004               	movlw	4
  6978  0DF3  0187               	clrf	7
  6979  0DF4  0081               	movwf	1
  6980                           
  6981                           ;packets.c: 19: packet->packet.id = RF_POWER_STATUS;
  6982  0DF5  082A               	movf	RfSendPowerState@packet,w
  6983  0DF6  3E04               	addlw	4
  6984  0DF7  0086               	movwf	6
  6985  0DF8  30A3               	movlw	163
  6986  0DF9  0081               	movwf	1
  6987                           
  6988                           ;packets.c: 20: packet->packet.dst = 0xFF;
  6989  0DFA  082A               	movf	RfSendPowerState@packet,w
  6990  0DFB  3E03               	addlw	3
  6991  0DFC  0086               	movwf	6
  6992  0DFD  30FF               	movlw	255
  6993  0DFE  0081               	movwf	1
  6994                           
  6995                           ;packets.c: 22: packet->packet.data[0] = coldBoot; coldBoot = 0;
  6996  0DFF  082A               	movf	RfSendPowerState@packet,w
  6997  0E00  3E06               	addlw	6
  6998  0E01  0086               	movwf	6
  6999  0E02  083F               	movf	_coldBoot,w
  7000  0E03  0081               	movwf	1
  7001  0E04  01BF               	clrf	_coldBoot
  7002                           
  7003                           ;packets.c: 23: packet->packet.data[1] = 0;
  7004  0E05  082A               	movf	RfSendPowerState@packet,w
  7005  0E06  3E07               	addlw	7
  7006  0E07  0086               	movwf	6
  7007  0E08  0181               	clrf	1
  7008                           
  7009                           ;packets.c: 25: PwrAdcWake();
  7010  0E09  265E  3188         	fcall	_PwrAdcWake
  7011                           
  7012                           ;packets.c: 26: uint16_t s = AdcSample(ADC_FVR);
  7013  0E0B  301F               	movlw	31
  7014  0E0C  2624  3188         	fcall	_AdcSample
  7015  0E0E  0823               	movf	?_AdcSample+1,w
  7016  0E0F  00A9               	movwf	RfSendPowerState@s+1
  7017  0E10  0822               	movf	?_AdcSample,w
  7018  0E11  00A8               	movwf	RfSendPowerState@s
  7019                           
  7020                           ;packets.c: 27: PwrAdcSleep();
  7021  0E12  2659  3188         	fcall	_PwrAdcSleep
  7022                           
  7023                           ;packets.c: 28: packet->packet.data[2] = s & 0xFF;
  7024  0E14  0020               	movlb	0	; select bank0
  7025  0E15  082A               	movf	RfSendPowerState@packet,w
  7026  0E16  3E08               	addlw	8
  7027  0E17  0086               	movwf	6
  7028  0E18  0187               	clrf	7
  7029  0E19  0828               	movf	RfSendPowerState@s,w
  7030  0E1A  0081               	movwf	1
  7031                           
  7032                           ;packets.c: 29: packet->packet.data[3] = s >> 8;
  7033  0E1B  082A               	movf	RfSendPowerState@packet,w
  7034  0E1C  3E09               	addlw	9
  7035  0E1D  0086               	movwf	6
  7036  0E1E  0829               	movf	RfSendPowerState@s+1,w
  7037  0E1F  0081               	movwf	1
  7038                           
  7039                           ;packets.c: 31: Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet, 0, 1);
  7040  0E20  082A               	movf	RfSendPowerState@packet,w
  7041  0E21  27D4  3188         	fcall	PL24	;call to abstracted procedure
  7042  0E23  2B5E               	ljmp	l3169
  7043  0E24                     __end_of_RfSendPowerState:	
  7044  0E24                     __ptext8:	
  7045 ;; *************** function _AdcSample *****************
  7046 ;; Defined at:
  7047 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;  ch              1    wreg     unsigned char 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  ch              1    5[BANK0 ] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  2    2[BANK0 ] unsigned int 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0, pclath, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : 1F/1
  7058 ;;		On exit  : 1F/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7061 ;;      Params:         0       2       0       0
  7062 ;;      Locals:         0       1       0       0
  7063 ;;      Temps:          0       1       0       0
  7064 ;;      Totals:         0       4       0       0
  7065 ;;Total ram usage:        4 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    6
  7068 ;; This function calls:
  7069 ;;		_AdcChSelect
  7070 ;;		_AdcGetResult
  7071 ;;		_AdcGo
  7072 ;;		_AdcIsBusy
  7073 ;; This function is called by:
  7074 ;;		_RfSendPowerState
  7075 ;;		_main
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           
  7080                           ;psect for function _AdcSample
  7081  0E24                     _AdcSample:	
  7082                           
  7083                           ;incstack = 0
  7084                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  7085                           ;AdcSample@ch stored from wreg
  7086  0E24  0020               	movlb	0	; select bank0
  7087  0E25  00A5               	movwf	AdcSample@ch
  7088                           
  7089                           ;adc16.c: 83: AdcChSelect(ch);
  7090  0E26  0825               	movf	AdcSample@ch,w
  7091  0E27  2652  3188         	fcall	_AdcChSelect
  7092                           
  7093                           ;adc16.c: 86: AdcGo();
  7094  0E29  264C  3188         	fcall	_AdcGo
  7095                           
  7096                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7097  0E2B  30C7               	movlw	199
  7098  0E2C  0020               	movlb	0	; select bank0
  7099  0E2D  00A4               	movwf	??_AdcSample
  7100  0E2E                     u2807:	
  7101  0E2E  0000               	nop
  7102  0E2F  0BA4               	decfsz	??_AdcSample,f
  7103  0E30  2E2E               	goto	u2807
  7104  0E31  2E32               	nop2	;nop
  7105  0E32  0000               	nop
  7106  0E33                     l2781:	
  7107                           ;adc16.c: 88: while (AdcIsBusy());
  7108                           
  7109  0E33  264E  3188         	fcall	_AdcIsBusy
  7110  0E35  3800               	iorlw	0
  7111  0E36  1D03               	skipz
  7112  0E37  2E33               	goto	l2781
  7113                           
  7114                           ;adc16.c: 89: AdcGo();
  7115  0E38  264C  3188         	fcall	_AdcGo
  7116  0E3A                     l2785:	
  7117                           ;adc16.c: 90: while (AdcIsBusy());
  7118                           
  7119  0E3A  264E  3188         	fcall	_AdcIsBusy
  7120  0E3C  3800               	iorlw	0
  7121  0E3D  1D03               	skipz
  7122  0E3E  2E3A               	goto	l2785
  7123                           
  7124                           ;psect for function _AdcGetResult
  7125                           
  7126                           ;adc16.c: 92: return AdcGetResult();
  7127  0E3F                     i1L_AdcGetResult:	
  7128  0E3F                     i1Ll2765:	
  7129                           
  7130                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  7131  0E3F  081C               	movf	28,w	;volatile
  7132  0E40  0020               	movlb	0	; select bank0
  7133  0E41  00A1               	movwf	?_AdcGetResult+1
  7134  0E42  01A0               	clrf	?_AdcGetResult
  7135  0E43  0021               	movlb	1	; select bank1
  7136  0E44  081B               	movf	27,w	;volatile
  7137  0E45  0020               	movlb	0	; select bank0
  7138  0E46  04A0               	iorwf	?_AdcGetResult,f
  7139  0E47                     i1Ll79:	
  7140  0E47  0821               	movf	?_AdcGetResult+1,w
  7141  0E48  00A3               	movwf	?_AdcSample+1
  7142  0E49  0820               	movf	?_AdcGetResult,w
  7143  0E4A  00A2               	movwf	?_AdcSample
  7144  0E4B  0008               	return
  7145  0E4C                     __end_of_AdcSample:	
  7146  0E4C                     __ptext10:	
  7147 ;; *************** function _AdcGo *****************
  7148 ;; Defined at:
  7149 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;		None
  7154 ;; Return value:  Size  Location     Type
  7155 ;;		None               void
  7156 ;; Registers used:
  7157 ;;		None
  7158 ;; Tracked objects:
  7159 ;;		On entry : 1F/1
  7160 ;;		On exit  : 1F/1
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7163 ;;      Params:         0       0       0       0
  7164 ;;      Locals:         0       0       0       0
  7165 ;;      Temps:          0       0       0       0
  7166 ;;      Totals:         0       0       0       0
  7167 ;;Total ram usage:        0 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:    5
  7170 ;; This function calls:
  7171 ;;		Nothing
  7172 ;; This function is called by:
  7173 ;;		_AdcSample
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           
  7178                           ;psect for function _AdcGo
  7179  0E4C                     _AdcGo:	
  7180                           
  7181                           ;adc16.c: 31: ADCON0 |= 1<<1;
  7182                           
  7183                           ;incstack = 0
  7184                           ; Regs used in _AdcGo: []
  7185  0E4C  149D               	bsf	29,1	;volatile
  7186  0E4D  0008               	return
  7187  0E4E                     __end_of_AdcGo:	
  7188  0E4E                     __ptext9:	
  7189 ;; *************** function _AdcIsBusy *****************
  7190 ;; Defined at:
  7191 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;		None
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  1    wreg      unsigned char 
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/1
  7202 ;;		On exit  : 1F/1
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7205 ;;      Params:         0       0       0       0
  7206 ;;      Locals:         0       0       0       0
  7207 ;;      Temps:          0       0       0       0
  7208 ;;      Totals:         0       0       0       0
  7209 ;;Total ram usage:        0 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    5
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_AdcSample
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function _AdcIsBusy
  7221  0E4E                     _AdcIsBusy:	
  7222                           
  7223                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  7227  0E4E  0021               	movlb	1	; select bank1
  7228  0E4F  361D               	lsrf	29,w	;volatile
  7229  0E50  3901               	andlw	1
  7230  0E51  0008               	return
  7231  0E52                     __end_of_AdcIsBusy:	
  7232  0E52                     __ptext12:	
  7233 ;; *************** function _AdcChSelect *****************
  7234 ;; Defined at:
  7235 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;  channel         1    wreg     enum E4221
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;  channel         1    0[BANK0 ] enum E4221
  7240 ;; Return value:  Size  Location     Type
  7241 ;;		None               void
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 1F/0
  7246 ;;		On exit  : 1F/1
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7249 ;;      Params:         0       0       0       0
  7250 ;;      Locals:         0       1       0       0
  7251 ;;      Temps:          0       0       0       0
  7252 ;;      Totals:         0       1       0       0
  7253 ;;Total ram usage:        1 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    5
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_AdcSample
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _AdcChSelect
  7265  0E52                     _AdcChSelect:	
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  7269                           ;AdcChSelect@channel stored from wreg
  7270  0E52  00A0               	movwf	AdcChSelect@channel
  7271                           
  7272                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  7273  0E53  0709               	addwf	9,w
  7274  0E54  0709               	addwf	9,w
  7275  0E55  3801               	iorlw	1
  7276  0E56  0021               	movlb	1	; select bank1
  7277  0E57  009D               	movwf	29	;volatile
  7278  0E58  0008               	return
  7279  0E59                     __end_of_AdcChSelect:	
  7280  0E59                     __ptext5:	
  7281 ;; *************** function _PwrAdcSleep *****************
  7282 ;; Defined at:
  7283 ;;		line 181 in file "../../../src/node/power.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;		None               void
  7290 ;; Registers used:
  7291 ;;		status,2, status,0, pclath, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/1
  7294 ;;		On exit  : 1F/1
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7297 ;;      Params:         0       0       0       0
  7298 ;;      Locals:         0       0       0       0
  7299 ;;      Temps:          0       0       0       0
  7300 ;;      Totals:         0       0       0       0
  7301 ;;Total ram usage:        0 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    6
  7304 ;; This function calls:
  7305 ;;		_AdcDeinit
  7306 ;; This function is called by:
  7307 ;;		_RfSendPowerState
  7308 ;;		_main
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _PwrAdcSleep
  7314  0E59                     _PwrAdcSleep:	
  7315                           
  7316                           ;power.c: 183: ANSELC = 0;
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7320  0E59  0023               	movlb	3	; select bank3
  7321  0E5A  018E               	clrf	14	;volatile
  7322                           
  7323                           ;power.c: 184: TRISCbits.TRISC0 = 0;
  7324  0E5B  0021               	movlb	1	; select bank1
  7325  0E5C  100E               	bcf	14,0	;volatile
  7326                           
  7327                           ;power.c: 186: AdcDeinit();
  7328  0E5D  2EB4               	ljmp	l2763
  7329  0E5E                     __end_of_PwrAdcSleep:	
  7330  0E5E                     __ptext3:	
  7331 ;; *************** function _PwrAdcWake *****************
  7332 ;; Defined at:
  7333 ;;		line 189 in file "../../../src/node/power.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;		None
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;		None               void
  7340 ;; Registers used:
  7341 ;;		wreg, status,2, status,0, pclath, cstack
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/2
  7344 ;;		On exit  : 1F/1
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7347 ;;      Params:         0       0       0       0
  7348 ;;      Locals:         0       0       0       0
  7349 ;;      Temps:          0       0       0       0
  7350 ;;      Totals:         0       0       0       0
  7351 ;;Total ram usage:        0 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:    6
  7354 ;; This function calls:
  7355 ;;		_AdcInit
  7356 ;; This function is called by:
  7357 ;;		_RfSendPowerState
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           
  7363                           ;psect for function _PwrAdcWake
  7364  0E5E                     _PwrAdcWake:	
  7365                           
  7366                           ;power.c: 191: ANSELCbits.ANSC0 = 1;
  7367                           
  7368                           ;incstack = 0
  7369                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7370  0E5E  0023               	movlb	3	; select bank3
  7371  0E5F  140E               	bsf	14,0	;volatile
  7372                           
  7373                           ;power.c: 192: TRISCbits.TRISC0 = 1;
  7374  0E60  0021               	movlb	1	; select bank1
  7375  0E61  140E               	bsf	14,0	;volatile
  7376                           
  7377                           ;power.c: 194: AdcInit();
  7378  0E62  2EBB               	ljmp	l2755
  7379  0E63                     __end_of_PwrAdcWake:	
  7380  0E63                     __ptext1:	
  7381 ;; *************** function _RfSendSampleWeatherNode *****************
  7382 ;; Defined at:
  7383 ;;		line 34 in file "../../../src/rfstack/packets.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  7386 ;;		 -> mrf49xaInst(78), 
  7387 ;;  temperature     2    7[BANK0 ] unsigned int 
  7388 ;;  humidity        2    9[BANK0 ] unsigned int 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  inst            1   11[BANK0 ] PTR struct Mrf49xaMac_s
  7391 ;;		 -> mrf49xaInst(78), 
  7392 ;;  packet          1   12[BANK0 ] PTR struct rfTrcvPacket_
  7393 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7394 ;; Return value:  Size  Location     Type
  7395 ;;		None               void
  7396 ;; Registers used:
  7397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 1F/0
  7400 ;;		On exit  : 1F/1
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7403 ;;      Params:         0       4       0       0
  7404 ;;      Locals:         0       2       0       0
  7405 ;;      Temps:          0       0       0       0
  7406 ;;      Totals:         0       6       0       0
  7407 ;;Total ram usage:        6 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    6
  7410 ;; This function calls:
  7411 ;;		_Mrf49xaAllocPacket
  7412 ;;		_Mrf49xaTxPacket
  7413 ;; This function is called by:
  7414 ;;		_main
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _RfSendSampleWeatherNode
  7420  0E63                     _RfSendSampleWeatherNode:	
  7421                           
  7422                           ;packets.c: 36: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(((Mrf49xaMac_t*)(&mrf49xaIns
      +                          t)));
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7426  0E63  30A0               	movlw	_mrf49xaInst& (0+255)
  7427  0E64  26A7  3188         	fcall	_Mrf49xaAllocPacket
  7428  0E66  0020               	movlb	0	; select bank0
  7429  0E67  00AC               	movwf	RfSendSampleWeatherNode@packet
  7430                           
  7431                           ;packets.c: 38: packet->packet.size = 10;
  7432  0E68  0A2C               	incf	RfSendSampleWeatherNode@packet,w
  7433  0E69  0086               	movwf	6
  7434  0E6A  300A               	movlw	10
  7435  0E6B  0187               	clrf	7
  7436  0E6C  0081               	movwf	1
  7437                           
  7438                           ;packets.c: 39: packet->packet.id = RF_APP_SAMPLE;
  7439  0E6D  082C               	movf	RfSendSampleWeatherNode@packet,w
  7440  0E6E  3E04               	addlw	4
  7441  0E6F  0086               	movwf	6
  7442  0E70  0181               	clrf	1
  7443                           
  7444                           ;packets.c: 40: packet->packet.dst = 0xFF;
  7445  0E71  082C               	movf	RfSendSampleWeatherNode@packet,w
  7446  0E72  3E03               	addlw	3
  7447  0E73  0086               	movwf	6
  7448  0E74  30FF               	movlw	255
  7449  0E75  0081               	movwf	1
  7450                           
  7451                           ;packets.c: 42: packet->packet.data[0] = 0;
  7452  0E76  082C               	movf	RfSendSampleWeatherNode@packet,w
  7453  0E77  3E06               	addlw	6
  7454  0E78  0086               	movwf	6
  7455  0E79  0181               	clrf	1
  7456                           
  7457                           ;packets.c: 43: packet->packet.data[1] = 0;
  7458  0E7A  082C               	movf	RfSendSampleWeatherNode@packet,w
  7459  0E7B  3E07               	addlw	7
  7460  0E7C  0086               	movwf	6
  7461  0E7D  0181               	clrf	1
  7462                           
  7463                           ;packets.c: 44: packet->packet.data[2] = 0;
  7464  0E7E  082C               	movf	RfSendSampleWeatherNode@packet,w
  7465  0E7F  3E08               	addlw	8
  7466  0E80  0086               	movwf	6
  7467  0E81  0181               	clrf	1
  7468                           
  7469                           ;packets.c: 45: packet->packet.data[3] = 0;
  7470  0E82  082C               	movf	RfSendSampleWeatherNode@packet,w
  7471  0E83  3E09               	addlw	9
  7472  0E84  0086               	movwf	6
  7473  0E85  0181               	clrf	1
  7474                           
  7475                           ;packets.c: 47: packet->packet.data[4] = 0;
  7476  0E86  082C               	movf	RfSendSampleWeatherNode@packet,w
  7477  0E87  3E0A               	addlw	10
  7478  0E88  0086               	movwf	6
  7479  0E89  0181               	clrf	1
  7480                           
  7481                           ;packets.c: 49: packet->packet.data[6] = temperature >> 8;
  7482  0E8A  082C               	movf	RfSendSampleWeatherNode@packet,w
  7483  0E8B  3E0C               	addlw	12
  7484  0E8C  0086               	movwf	6
  7485  0E8D  0828               	movf	RfSendSampleWeatherNode@temperature+1,w
  7486  0E8E  0081               	movwf	1
  7487                           
  7488                           ;packets.c: 50: packet->packet.data[5] = temperature & 0xFF;
  7489  0E8F  082C               	movf	RfSendSampleWeatherNode@packet,w
  7490  0E90  3E0B               	addlw	11
  7491  0E91  0086               	movwf	6
  7492  0E92  0827               	movf	RfSendSampleWeatherNode@temperature,w
  7493  0E93  0081               	movwf	1
  7494                           
  7495                           ;packets.c: 52: packet->packet.data[7] = 1;
  7496  0E94  082C               	movf	RfSendSampleWeatherNode@packet,w
  7497  0E95  3E0D               	addlw	13
  7498  0E96  0086               	movwf	6
  7499  0E97  0181               	clrf	1
  7500  0E98  0A81               	incf	1,f
  7501                           
  7502                           ;packets.c: 54: packet->packet.data[9] = humidity >> 8;
  7503  0E99  082C               	movf	RfSendSampleWeatherNode@packet,w
  7504  0E9A  3E0F               	addlw	15
  7505  0E9B  0086               	movwf	6
  7506  0E9C  082A               	movf	RfSendSampleWeatherNode@humidity+1,w
  7507  0E9D  0081               	movwf	1
  7508                           
  7509                           ;packets.c: 55: packet->packet.data[8] = humidity & 0xFF;
  7510  0E9E  082C               	movf	RfSendSampleWeatherNode@packet,w
  7511  0E9F  3E0E               	addlw	14
  7512  0EA0  0086               	movwf	6
  7513  0EA1  0829               	movf	RfSendSampleWeatherNode@humidity,w
  7514  0EA2  0081               	movwf	1
  7515                           
  7516                           ;packets.c: 57: Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet, 0, 1);
  7517  0EA3  082C               	movf	RfSendSampleWeatherNode@packet,w
  7518  0EA4  27D4  3188         	fcall	PL24	;call to abstracted procedure
  7519  0EA6  2B5E               	ljmp	l3169
  7520  0EA7                     __end_of_RfSendSampleWeatherNode:	
  7521  0EA7                     __ptext7:	
  7522 ;; *************** function _Mrf49xaAllocPacket *****************
  7523 ;; Defined at:
  7524 ;;		line 109 in file "../../../src/devices/mrf49xa_mac.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  7527 ;;		 -> mrf49xaInst(78), 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  7530 ;;		 -> mrf49xaInst(78), 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7533 ;; Registers used:
  7534 ;;		wreg, status,2, status,0
  7535 ;; Tracked objects:
  7536 ;;		On entry : 1F/0
  7537 ;;		On exit  : 1F/1
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7540 ;;      Params:         0       0       0       0
  7541 ;;      Locals:         0       1       0       0
  7542 ;;      Temps:          0       0       0       0
  7543 ;;      Totals:         0       1       0       0
  7544 ;;Total ram usage:        1 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    5
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_RfSendPowerState
  7551 ;;		_RfSendSampleWeatherNode
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           
  7556                           ;psect for function _Mrf49xaAllocPacket
  7557  0EA7                     _Mrf49xaAllocPacket:	
  7558                           
  7559                           ;mrf49xa_mac.c: 111: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_FREE)
  7560                           
  7561                           ;incstack = 0
  7562                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  7563  0EA7  0021               	movlb	1	; select bank1
  7564  0EA8  08A3               	movf	(_mrf49xaInst^(0+128)+3),f
  7565  0EA9  1D03               	skipz
  7566  0EAA  2EAE               	goto	l3271
  7567                           
  7568                           ;mrf49xa_mac.c: 112: {
  7569                           ;mrf49xa_mac.c: 113: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state = PKT_SW_BUSY;
  7570  0EAB  3006               	movlw	6
  7571  0EAC  00A3               	movwf	(_mrf49xaInst^(0+128)+3)
  7572                           
  7573                           ;mrf49xa_mac.c: 114: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
  7574  0EAD  34A3               	retlw	(_mrf49xaInst+3)& (0+255)
  7575  0EAE                     l3271:	
  7576                           
  7577                           ;mrf49xa_mac.c: 115: }
  7578                           ;mrf49xa_mac.c: 117: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_FREE)
  7579  0EAE  08BB               	movf	(_mrf49xaInst^(0+128)+27),f
  7580  0EAF  1D03               	skipz
  7581  0EB0  3400               	retlw	0
  7582                           
  7583                           ;mrf49xa_mac.c: 118: {
  7584                           ;mrf49xa_mac.c: 119: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state = PKT_SW_BUSY;
  7585  0EB1  3006               	movlw	6
  7586  0EB2  00BB               	movwf	(_mrf49xaInst^(0+128)+27)
  7587                           
  7588                           ;mrf49xa_mac.c: 120: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1]);
  7589  0EB3  34BB               	retlw	(_mrf49xaInst+27)& (0+255)
  7590  0EB4                     __end_of_Mrf49xaAllocPacket:	
  7591                           ;mrf49xa_mac.c: 121: }
  7592                           ;mrf49xa_mac.c: 123: return (0);
  7593                           
  7594  0EB4                     __ptext6:	
  7595 ;; *************** function _AdcDeinit *****************
  7596 ;; Defined at:
  7597 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;		None
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;		None
  7602 ;; Return value:  Size  Location     Type
  7603 ;;		None               void
  7604 ;; Registers used:
  7605 ;;		status,2
  7606 ;; Tracked objects:
  7607 ;;		On entry : 1F/1
  7608 ;;		On exit  : 1F/1
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7611 ;;      Params:         0       0       0       0
  7612 ;;      Locals:         0       0       0       0
  7613 ;;      Temps:          0       0       0       0
  7614 ;;      Totals:         0       0       0       0
  7615 ;;Total ram usage:        0 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; Hardware stack levels required when called:    5
  7618 ;; This function calls:
  7619 ;;		Nothing
  7620 ;; This function is called by:
  7621 ;;		_PwrAdcSleep
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           
  7626                           ;psect for function _AdcDeinit
  7627  0EB4                     _AdcDeinit:	
  7628  0EB4                     l2763:	
  7629                           ;incstack = 0
  7630                           ; Regs used in _AdcDeinit: [status,2]
  7631                           
  7632                           
  7633                           ;adc16.c: 17: FVRCON = 0;
  7634  0EB4  0022               	movlb	2	; select bank2
  7635  0EB5  0197               	clrf	23	;volatile
  7636                           
  7637                           ;adc16.c: 19: ADCON2 = 0;
  7638  0EB6  0021               	movlb	1	; select bank1
  7639  0EB7  019F               	clrf	31	;volatile
  7640                           
  7641                           ;adc16.c: 20: ADCON1 = 0;
  7642  0EB8  019E               	clrf	30	;volatile
  7643                           
  7644                           ;adc16.c: 21: ADCON0 = 0;
  7645  0EB9  019D               	clrf	29	;volatile
  7646  0EBA  0008               	return
  7647  0EBB                     __end_of_AdcDeinit:	
  7648  0EBB                     __ptext4:	
  7649 ;; *************** function _AdcInit *****************
  7650 ;; Defined at:
  7651 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;		None
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;		None
  7656 ;; Return value:  Size  Location     Type
  7657 ;;		None               void
  7658 ;; Registers used:
  7659 ;;		wreg, status,2
  7660 ;; Tracked objects:
  7661 ;;		On entry : 1F/1
  7662 ;;		On exit  : 1F/1
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7665 ;;      Params:         0       0       0       0
  7666 ;;      Locals:         0       0       0       0
  7667 ;;      Temps:          0       0       0       0
  7668 ;;      Totals:         0       0       0       0
  7669 ;;Total ram usage:        0 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    5
  7672 ;; This function calls:
  7673 ;;		Nothing
  7674 ;; This function is called by:
  7675 ;;		_PwrAdcWake
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           
  7680                           ;psect for function _AdcInit
  7681  0EBB                     _AdcInit:	
  7682  0EBB                     l2755:	
  7683                           ;incstack = 0
  7684                           ; Regs used in _AdcInit: [wreg+status,2]
  7685                           
  7686                           
  7687                           ;adc16.c: 6: FVRCON = 0b11100001;
  7688  0EBB  30E1               	movlw	225
  7689  0EBC  0022               	movlb	2	; select bank2
  7690  0EBD  0097               	movwf	23	;volatile
  7691                           
  7692                           ;adc16.c: 8: ADCON2 = 0b00000000;
  7693  0EBE  0021               	movlb	1	; select bank1
  7694  0EBF  019F               	clrf	31	;volatile
  7695                           
  7696                           ;adc16.c: 9: ADCON1 = 0b11110000;
  7697  0EC0  30F0               	movlw	240
  7698  0EC1  009E               	movwf	30	;volatile
  7699                           
  7700                           ;adc16.c: 10: ADCON0 = 0b00000000;
  7701  0EC2  019D               	clrf	29	;volatile
  7702                           
  7703                           ;adc16.c: 12: ADCON0 = 0b00010011;
  7704  0EC3  3013               	movlw	19
  7705  0EC4  009D               	movwf	29	;volatile
  7706  0EC5  0008               	return
  7707  0EC6                     __end_of_AdcInit:	
  7708  0EC6                     __ptext49:	
  7709 ;; *************** function _handleCfgCmd *****************
  7710 ;; Defined at:
  7711 ;;		line 124 in file "../../../src/rfstack/client.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7714 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7717 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7718 ;; Return value:  Size  Location     Type
  7719 ;;		None               void
  7720 ;; Registers used:
  7721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 1F/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7727 ;;      Params:         0       0       0       0
  7728 ;;      Locals:         0       1       0       0
  7729 ;;      Temps:          0       0       0       0
  7730 ;;      Totals:         0       1       0       0
  7731 ;;Total ram usage:        1 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    9
  7734 ;; This function calls:
  7735 ;;		_CfgLoad
  7736 ;;		_CfgSave
  7737 ;; This function is called by:
  7738 ;;		_HandlePacket
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           
  7743                           ;psect for function _handleCfgCmd
  7744  0EC6                     _handleCfgCmd:	
  7745                           
  7746                           ;incstack = 0
  7747                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7748                           ;handleCfgCmd@packet stored from wreg
  7749  0EC6  00A8               	movwf	handleCfgCmd@packet
  7750                           
  7751                           ;client.c: 126: switch (packet->packet.data[0])
  7752  0EC7  2EDE               	goto	l3479
  7753  0EC8                     l3469:	
  7754                           
  7755                           ;client.c: 129: CfgSave();
  7756  0EC8  3182  2AAC         	ljmp	l3481
  7757  0ECA                     l3471:	
  7758                           ;client.c: 130: break;
  7759                           
  7760                           
  7761                           ;client.c: 133: CfgLoad();
  7762  0ECA  2AE2               	ljmp	l3483
  7763  0ECB                     l3473:	
  7764                           ;client.c: 134: break;
  7765                           
  7766                           
  7767                           ;client.c: 137: packet->packet.size = 2;
  7768  0ECB  0A28               	incf	handleCfgCmd@packet,w
  7769  0ECC  0086               	movwf	6
  7770  0ECD  3002               	movlw	2
  7771  0ECE  27BD               	fcall	PL16	;call to abstracted procedure
  7772  0ECF  3002               	movlw	2
  7773  0ED0  0081               	movwf	1
  7774                           
  7775                           ;client.c: 139: break;
  7776  0ED1  0008               	return
  7777  0ED2                     l3475:	
  7778                           
  7779                           ;client.c: 142: packet->packet.size = 3;
  7780  0ED2  0A28               	incf	handleCfgCmd@packet,w
  7781  0ED3  0086               	movwf	6
  7782  0ED4  3003               	movlw	3
  7783                           
  7784                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  7785  0ED5  27BD               	fcall	PL16	;call to abstracted procedure
  7786  0ED6  083E               	movf	_cfgRam+8,w
  7787  0ED7  0081               	movwf	1
  7788                           
  7789                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  7790  0ED8  0828               	movf	handleCfgCmd@packet,w
  7791  0ED9  3E08               	addlw	8
  7792  0EDA  0086               	movwf	6
  7793  0EDB  083D               	movf	_cfgRam+7,w
  7794  0EDC  0081               	movwf	1
  7795                           
  7796                           ;client.c: 145: break;
  7797  0EDD  0008               	return
  7798  0EDE                     l3479:	
  7799  0EDE  0828               	movf	handleCfgCmd@packet,w
  7800  0EDF  3E06               	addlw	6
  7801  0EE0  0086               	movwf	6
  7802  0EE1  0187               	clrf	7
  7803  0EE2  0801               	movf	1,w
  7804                           
  7805                           ; Switch size 1, requested type "space"
  7806                           ; Number of cases is 4, Range of values is 1 to 4
  7807                           ; switch strategies available:
  7808                           ; Name         Instructions Cycles
  7809                           ; simple_byte           13     7 (average)
  7810                           ; direct_byte           17     9 (fixed)
  7811                           ; jumptable            263     9 (fixed)
  7812                           ;	Chosen strategy is simple_byte
  7813  0EE3  3A01               	xorlw	1	; case 1
  7814  0EE4  1903               	skipnz
  7815  0EE5  2EC8               	goto	l3469
  7816  0EE6  3A03               	xorlw	3	; case 2
  7817  0EE7  1903               	skipnz
  7818  0EE8  2ECA               	goto	l3471
  7819  0EE9  3A01               	xorlw	1	; case 3
  7820  0EEA  1903               	skipnz
  7821  0EEB  2ECB               	goto	l3473
  7822  0EEC  3A07               	xorlw	7	; case 4
  7823  0EED  1903               	skipnz
  7824  0EEE  2ED2               	goto	l3475
  7825  0EEF  2EF0               	goto	l543
  7826  0EF0                     l543:	
  7827  0EF0  0008               	return
  7828  0EF1                     __end_of_handleCfgCmd:	
  7829  0EF1                     __ptext46:	
  7830 ;; *************** function _handleCfgRead *****************
  7831 ;; Defined at:
  7832 ;;		line 102 in file "../../../src/rfstack/client.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7835 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  7838 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7839 ;;  index           1    7[BANK0 ] unsigned char 
  7840 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;		None               void
  7843 ;; Registers used:
  7844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 1F/0
  7847 ;;		On exit  : 1F/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7850 ;;      Params:         0       0       0       0
  7851 ;;      Locals:         0       3       0       0
  7852 ;;      Temps:          0       0       0       0
  7853 ;;      Totals:         0       3       0       0
  7854 ;;Total ram usage:        3 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    6
  7857 ;; This function calls:
  7858 ;;		_CfgGetSizeByType
  7859 ;;		_memcpy
  7860 ;; This function is called by:
  7861 ;;		_HandlePacket
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function _handleCfgRead
  7867  0EF1                     _handleCfgRead:	
  7868                           
  7869                           ;incstack = 0
  7870                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7871                           ;handleCfgRead@packet stored from wreg
  7872  0EF1  00A8               	movwf	handleCfgRead@packet
  7873                           
  7874                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  7875  0EF2  0086               	movwf	6
  7876  0EF3  0187               	clrf	7
  7877  0EF4  3F46               	moviw [6]fsr1
  7878  0EF5  00A7               	movwf	handleCfgRead@index
  7879                           
  7880                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  7881  0EF6  0727               	addwf	handleCfgRead@index,w
  7882  0EF7  0727               	addwf	handleCfgRead@index,w
  7883  0EF8  3E68               	addlw	low (_parameters| (0+32768))
  7884  0EF9  3182               	movlp	high __stringtab
  7885  0EFA  000A               	callw
  7886  0EFB  3188               	pagesel	$	;select current page
  7887  0EFC  2722               	fcall	_CfgGetSizeByType
  7888  0EFD  00A6               	movwf	handleCfgRead@nrOfBytes
  7889                           
  7890                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  7891  0EFE  0A28               	incf	handleCfgRead@packet,w
  7892  0EFF  0086               	movwf	6
  7893  0F00  0187               	clrf	7
  7894  0F01  0826               	movf	handleCfgRead@nrOfBytes,w
  7895  0F02  3E02               	addlw	2
  7896  0F03  0081               	movwf	1
  7897                           
  7898                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  7899  0F04  0828               	movf	handleCfgRead@packet,w
  7900  0F05  3E04               	addlw	4
  7901  0F06  0086               	movwf	6
  7902  0F07  30B2               	movlw	178
  7903  0F08  0081               	movwf	1
  7904                           
  7905                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  7906  0F09  0828               	movf	handleCfgRead@packet,w
  7907  0F0A  3E07               	addlw	7
  7908  0F0B  0086               	movwf	6
  7909  0F0C  0827               	movf	handleCfgRead@index,w
  7910  0F0D  0727               	addwf	handleCfgRead@index,w
  7911  0F0E  0727               	addwf	handleCfgRead@index,w
  7912  0F0F  3E69               	addlw	low ((_parameters| (0+32768)+1))
  7913  0F10  3182               	movlp	high __stringtab
  7914  0F11  000A               	callw
  7915  0F12  3188               	pagesel	$	;select current page
  7916  0F13  0081               	movwf	1
  7917                           
  7918                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  7919  0F14  0827               	movf	handleCfgRead@index,w
  7920  0F15  0727               	addwf	handleCfgRead@index,w
  7921  0F16  0727               	addwf	handleCfgRead@index,w
  7922  0F17  3E6A               	addlw	low ((_parameters| (0+32768)+2))
  7923  0F18  3182               	movlp	high __stringtab
  7924  0F19  000A               	callw
  7925  0F1A  3188               	pagesel	$	;select current page
  7926  0F1B  00A0               	movwf	memcpy@s1
  7927  0F1C  0826               	movf	handleCfgRead@nrOfBytes,w
  7928  0F1D  00A1               	movwf	memcpy@n
  7929  0F1E  01A2               	clrf	memcpy@n+1
  7930  0F1F  0828               	movf	handleCfgRead@packet,w
  7931  0F20  3E08               	addlw	8
  7932  0F21  2F4F               	ljmp	_memcpy
  7933  0F22                     __end_of_handleCfgRead:	
  7934  0F22                     __ptext48:	
  7935 ;; *************** function _CfgGetSizeByType *****************
  7936 ;; Defined at:
  7937 ;;		line 29 in file "../../../src/node/config.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  type            1    wreg     enum E4251
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  type            1    0[BANK0 ] enum E4251
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  1    wreg      unsigned char 
  7944 ;; Registers used:
  7945 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7946 ;; Tracked objects:
  7947 ;;		On entry : 1F/0
  7948 ;;		On exit  : 1F/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7951 ;;      Params:         0       0       0       0
  7952 ;;      Locals:         0       1       0       0
  7953 ;;      Temps:          0       0       0       0
  7954 ;;      Totals:         0       1       0       0
  7955 ;;Total ram usage:        1 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    5
  7958 ;; This function calls:
  7959 ;;		Nothing
  7960 ;; This function is called by:
  7961 ;;		_handleCfgRead
  7962 ;;		_handleCfgWrite
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _CfgGetSizeByType
  7968  0F22                     _CfgGetSizeByType:	
  7969                           
  7970                           ;incstack = 0
  7971                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  7972                           ;CfgGetSizeByType@type stored from wreg
  7973  0F22  00A0               	movwf	CfgGetSizeByType@type
  7974                           
  7975                           ;config.c: 31: switch(type)
  7976  0F23  2F28               	goto	l3449
  7977  0F24                     l3431:	
  7978  0F24  3401               	retlw	1
  7979  0F25                     l3435:	
  7980  0F25  3402               	retlw	2
  7981  0F26                     l3439:	
  7982  0F26  3404               	retlw	4
  7983  0F27                     l3443:	
  7984  0F27  3400               	retlw	0
  7985  0F28                     l3449:	
  7986  0F28  0820               	movf	CfgGetSizeByType@type,w
  7987                           
  7988                           ; Switch size 1, requested type "space"
  7989                           ; Number of cases is 3, Range of values is 0 to 2
  7990                           ; switch strategies available:
  7991                           ; Name         Instructions Cycles
  7992                           ; simple_byte           10     6 (average)
  7993                           ; direct_byte           12     6 (fixed)
  7994                           ; jumptable            260     6 (fixed)
  7995                           ;	Chosen strategy is simple_byte
  7996  0F29  3A00               	xorlw	0	; case 0
  7997  0F2A  1903               	skipnz
  7998  0F2B  2F24               	goto	l3431
  7999  0F2C  3A01               	xorlw	1	; case 1
  8000  0F2D  1903               	skipnz
  8001  0F2E  2F25               	goto	l3435
  8002  0F2F  3A03               	xorlw	3	; case 2
  8003  0F30  1903               	skipnz
  8004  0F31  2F26               	goto	l3439
  8005  0F32  2F27               	goto	l3443
  8006  0F33  0008               	return
  8007  0F34                     __end_of_CfgGetSizeByType:	
  8008  0F34                     __ptext45:	
  8009 ;; *************** function _handleCfgWrite *****************
  8010 ;; Defined at:
  8011 ;;		line 115 in file "../../../src/rfstack/client.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  8014 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  8017 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8018 ;;  index           1    7[BANK0 ] unsigned char 
  8019 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  8020 ;; Return value:  Size  Location     Type
  8021 ;;		None               void
  8022 ;; Registers used:
  8023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8024 ;; Tracked objects:
  8025 ;;		On entry : 1F/0
  8026 ;;		On exit  : 1F/0
  8027 ;;		Unchanged: 0/0
  8028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8029 ;;      Params:         0       0       0       0
  8030 ;;      Locals:         0       3       0       0
  8031 ;;      Temps:          0       0       0       0
  8032 ;;      Totals:         0       3       0       0
  8033 ;;Total ram usage:        3 bytes
  8034 ;; Hardware stack levels used:    1
  8035 ;; Hardware stack levels required when called:    6
  8036 ;; This function calls:
  8037 ;;		_CfgGetSizeByType
  8038 ;;		_memcpy
  8039 ;; This function is called by:
  8040 ;;		_HandlePacket
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           
  8045                           ;psect for function _handleCfgWrite
  8046  0F34                     _handleCfgWrite:	
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8050                           ;handleCfgWrite@packet stored from wreg
  8051  0F34  00A8               	movwf	handleCfgWrite@packet
  8052                           
  8053                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  8054  0F35  0086               	movwf	6
  8055  0F36  0187               	clrf	7
  8056  0F37  3F46               	moviw [6]fsr1
  8057  0F38  00A7               	movwf	handleCfgWrite@index
  8058                           
  8059                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  8060  0F39  0727               	addwf	handleCfgWrite@index,w
  8061  0F3A  0727               	addwf	handleCfgWrite@index,w
  8062  0F3B  3E68               	addlw	low (_parameters| (0+32768))
  8063  0F3C  3182               	movlp	high __stringtab
  8064  0F3D  000A               	callw
  8065  0F3E  3188               	pagesel	$	;select current page
  8066  0F3F  2722               	fcall	_CfgGetSizeByType
  8067  0F40  00A6               	movwf	handleCfgWrite@nrOfBytes
  8068                           
  8069                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  8070  0F41  0828               	movf	handleCfgWrite@packet,w
  8071  0F42  3E07               	addlw	7
  8072  0F43  00A0               	movwf	memcpy@s1
  8073  0F44  0826               	movf	handleCfgWrite@nrOfBytes,w
  8074  0F45  00A1               	movwf	memcpy@n
  8075  0F46  01A2               	clrf	memcpy@n+1
  8076  0F47  0827               	movf	handleCfgWrite@index,w
  8077  0F48  0727               	addwf	handleCfgWrite@index,w
  8078  0F49  0727               	addwf	handleCfgWrite@index,w
  8079  0F4A  3E6A               	addlw	low ((_parameters| (0+32768)+2))
  8080  0F4B  3182               	movlp	high __stringtab
  8081  0F4C  000A               	callw
  8082  0F4D  3188               	pagesel	$	;select current page
  8083  0F4E  2F4F               	ljmp	_memcpy
  8084  0F4F                     __end_of_handleCfgWrite:	
  8085  0F4F                     __ptext47:	
  8086 ;; *************** function _memcpy *****************
  8087 ;; Defined at:
  8088 ;;		line 11 in file "/opt/microchip/xc8/v1.30/sources/common/memcpy.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  d1              1    wreg     PTR void 
  8091 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8092 ;;		 -> handleCfgRead@packet..(21), 
  8093 ;;  s1              1    0[BANK0 ] PTR const void 
  8094 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8095 ;;		 -> handleCfgWrite@packet..(21), 
  8096 ;;  n               2    1[BANK0 ] unsigned int 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  d1              1    5[BANK0 ] PTR void 
  8099 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8100 ;;		 -> handleCfgRead@packet..(21), 
  8101 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  8102 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8103 ;;		 -> handleCfgWrite@packet..(21), 
  8104 ;;  d               1    3[BANK0 ] PTR unsigned char 
  8105 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8106 ;;		 -> handleCfgRead@packet..(21), 
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      PTR void 
  8109 ;; Registers used:
  8110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8111 ;; Tracked objects:
  8112 ;;		On entry : 1F/0
  8113 ;;		On exit  : 1F/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8116 ;;      Params:         0       3       0       0
  8117 ;;      Locals:         0       3       0       0
  8118 ;;      Temps:          0       0       0       0
  8119 ;;      Totals:         0       6       0       0
  8120 ;;Total ram usage:        6 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:    5
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_handleCfgRead
  8127 ;;		_handleCfgWrite
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _memcpy
  8133  0F4F                     _memcpy:	
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  8137                           ;memcpy@d1 stored from wreg
  8138  0F4F  00A5               	movwf	memcpy@d1
  8139  0F50  0820               	movf	memcpy@s1,w
  8140  0F51  00A4               	movwf	memcpy@s
  8141  0F52  0825               	movf	memcpy@d1,w
  8142  0F53  00A3               	movwf	memcpy@d
  8143  0F54                     l3459:	
  8144  0F54  3001               	movlw	1
  8145  0F55  02A1               	subwf	memcpy@n,f
  8146  0F56  3000               	movlw	0
  8147  0F57  3BA2               	subwfb	memcpy@n+1,f
  8148  0F58  0A21               	incf	memcpy@n,w
  8149  0F59  1903               	skipnz
  8150  0F5A  0A22               	incf	memcpy@n+1,w
  8151  0F5B  1903               	btfsc	3,2
  8152  0F5C  0008               	return
  8153  0F5D  0823               	movf	memcpy@d,w
  8154  0F5E  0086               	movwf	6
  8155  0F5F  0187               	clrf	7
  8156  0F60  0824               	movf	memcpy@s,w
  8157  0F61  0084               	movwf	4
  8158  0F62  0185               	clrf	5
  8159  0F63  0800               	movf	0,w
  8160  0F64  0081               	movwf	1
  8161  0F65  0AA4               	incf	memcpy@s,f
  8162  0F66  0AA3               	incf	memcpy@d,f
  8163  0F67  2F54               	goto	l3459
  8164  0F68                     __end_of_memcpy:	
  8165  0F68                     __ptext28:	
  8166 ;; *************** function _Mrf49xaRxPacket *****************
  8167 ;; Defined at:
  8168 ;;		line 92 in file "../../../src/devices/mrf49xa_mac.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  8171 ;;		 -> mrf49xaInst(78), 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  8174 ;;		 -> mrf49xaInst(78), 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      PTR struct rfTrcvPacket_
  8177 ;; Registers used:
  8178 ;;		wreg
  8179 ;; Tracked objects:
  8180 ;;		On entry : 1F/1
  8181 ;;		On exit  : 1F/1
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8184 ;;      Params:         0       0       0       0
  8185 ;;      Locals:         0       1       0       0
  8186 ;;      Temps:          0       0       0       0
  8187 ;;      Totals:         0       1       0       0
  8188 ;;Total ram usage:        1 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    5
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_Mrf49xaTick
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _Mrf49xaRxPacket
  8200  0F68                     _Mrf49xaRxPacket:	
  8201                           
  8202                           ;mrf49xa_mac.c: 94: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_HW_REA
      +                          DY_RX)
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  8206  0F68  0823               	movf	(_mrf49xaInst^(0+128)+3),w
  8207  0F69  3A05               	xorlw	5
  8208  0F6A  1D03               	skipz
  8209  0F6B  2F6F               	goto	l3255
  8210                           
  8211                           ;mrf49xa_mac.c: 95: {
  8212                           ;mrf49xa_mac.c: 96: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state = PKT_SW_BUSY;
  8213  0F6C  3006               	movlw	6
  8214  0F6D  00A3               	movwf	(_mrf49xaInst^(0+128)+3)
  8215                           
  8216                           ;mrf49xa_mac.c: 97: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
  8217  0F6E  34A3               	retlw	(_mrf49xaInst+3)& (0+255)
  8218  0F6F                     l3255:	
  8219                           
  8220                           ;mrf49xa_mac.c: 98: }
  8221                           ;mrf49xa_mac.c: 100: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_HW_RE
      +                          ADY_RX)
  8222  0F6F  083B               	movf	(_mrf49xaInst^(0+128)+27),w
  8223  0F70  3A05               	xorlw	5
  8224  0F71  1D03               	skipz
  8225  0F72  3400               	retlw	0
  8226                           
  8227                           ;mrf49xa_mac.c: 101: {
  8228                           ;mrf49xa_mac.c: 102: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state = PKT_SW_BUSY;
  8229  0F73  3006               	movlw	6
  8230  0F74  00BB               	movwf	(_mrf49xaInst^(0+128)+27)
  8231                           
  8232                           ;mrf49xa_mac.c: 103: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1]);
  8233  0F75  34BB               	retlw	(_mrf49xaInst+27)& (0+255)
  8234  0F76                     __end_of_Mrf49xaRxPacket:	
  8235                           ;mrf49xa_mac.c: 104: }
  8236                           ;mrf49xa_mac.c: 106: return (0);
  8237                           
  8238  0F76                     __ptext26:	
  8239 ;; *************** function _PwrAdcInit *****************
  8240 ;; Defined at:
  8241 ;;		line 171 in file "../../../src/node/power.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;		None
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;		None
  8246 ;; Return value:  Size  Location     Type
  8247 ;;		None               void
  8248 ;; Registers used:
  8249 ;;		status,2
  8250 ;; Tracked objects:
  8251 ;;		On entry : 17F/1
  8252 ;;		On exit  : 17F/1
  8253 ;;		Unchanged: 160/0
  8254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8255 ;;      Params:         0       0       0       0
  8256 ;;      Locals:         0       0       0       0
  8257 ;;      Temps:          0       0       0       0
  8258 ;;      Totals:         0       0       0       0
  8259 ;;Total ram usage:        0 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    5
  8262 ;; This function calls:
  8263 ;;		Nothing
  8264 ;; This function is called by:
  8265 ;;		_main
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           
  8270                           ;psect for function _PwrAdcInit
  8271  0F76                     _PwrAdcInit:	
  8272                           
  8273                           ;power.c: 173: ANSELA = 0;
  8274                           
  8275                           ;incstack = 0
  8276                           ; Regs used in _PwrAdcInit: [status,2]
  8277  0F76  0023               	movlb	3	; select bank3
  8278  0F77  018C               	clrf	12	;volatile
  8279                           
  8280                           ;power.c: 174: ANSELB = 0;
  8281  0F78  018D               	clrf	13	;volatile
  8282                           
  8283                           ;power.c: 175: ANSELC = 0;
  8284  0F79  018E               	clrf	14	;volatile
  8285                           
  8286                           ;power.c: 177: PORTCbits.RC0 = 1;
  8287  0F7A  0020               	movlb	0	; select bank0
  8288  0F7B  140E               	bsf	14,0	;volatile
  8289                           
  8290                           ;power.c: 178: TRISCbits.TRISC0 = 0;
  8291  0F7C  0021               	movlb	1	; select bank1
  8292  0F7D  100E               	bcf	14,0	;volatile
  8293  0F7E  0008               	return
  8294  0F7F                     __end_of_PwrAdcInit:	
  8295  0F7F                     __ptext24:	
  8296 ;; *************** function _PwrI2cInit *****************
  8297 ;; Defined at:
  8298 ;;		line 65 in file "../../../src/node/power.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;		None
  8303 ;; Return value:  Size  Location     Type
  8304 ;;		None               void
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0, pclath, cstack
  8307 ;; Tracked objects:
  8308 ;;		On entry : 17F/2
  8309 ;;		On exit  : 1F/2
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8312 ;;      Params:         0       0       0       0
  8313 ;;      Locals:         0       0       0       0
  8314 ;;      Temps:          0       0       0       0
  8315 ;;      Totals:         0       0       0       0
  8316 ;;Total ram usage:        0 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    8
  8319 ;; This function calls:
  8320 ;;		_SoftI2cInit
  8321 ;; This function is called by:
  8322 ;;		_main
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           
  8327                           ;psect for function _PwrI2cInit
  8328  0F7F                     _PwrI2cInit:	
  8329                           
  8330                           ;power.c: 67: SoftI2cInit();
  8331                           
  8332                           ;incstack = 0
  8333                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  8334  0F7F  2017               	fcall	_SoftI2cInit
  8335                           
  8336                           ;power.c: 69: TRISBbits.TRISB4 = 0;
  8337  0F80  0021               	movlb	1	; select bank1
  8338  0F81  120D               	bcf	13,4	;volatile
  8339                           
  8340                           ;power.c: 70: TRISBbits.TRISB6 = 0;
  8341  0F82  130D               	bcf	13,6	;volatile
  8342                           
  8343                           ;power.c: 72: TRISBbits.TRISB5 = 0;
  8344  0F83  128D               	bcf	13,5	;volatile
  8345                           
  8346                           ;power.c: 73: LATBbits.LATB5 = 1;
  8347  0F84  0022               	movlb	2	; select bank2
  8348  0F85  168D               	bsf	13,5	;volatile
  8349  0F86  0008               	return
  8350  0F87                     __end_of_PwrI2cInit:	
  8351  0F87                     __ptext13:	
  8352 ;; *************** function _PwrSensorWake *****************
  8353 ;; Defined at:
  8354 ;;		line 165 in file "../../../src/node/power.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;		None
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;		None
  8359 ;; Return value:  Size  Location     Type
  8360 ;;		None               void
  8361 ;; Registers used:
  8362 ;;		None
  8363 ;; Tracked objects:
  8364 ;;		On entry : 1F/0
  8365 ;;		On exit  : 1F/2
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8368 ;;      Params:         0       0       0       0
  8369 ;;      Locals:         0       0       0       0
  8370 ;;      Temps:          0       0       0       0
  8371 ;;      Totals:         0       0       0       0
  8372 ;;Total ram usage:        0 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    5
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_main
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           
  8383                           ;psect for function _PwrSensorWake
  8384  0F87                     _PwrSensorWake:	
  8385                           
  8386                           ;power.c: 167: LATCbits.LATC2 = 1;
  8387                           
  8388                           ;incstack = 0
  8389                           ; Regs used in _PwrSensorWake: []
  8390  0F87  0022               	movlb	2	; select bank2
  8391  0F88  150E               	bsf	14,2	;volatile
  8392  0F89  0008               	return
  8393  0F8A                     __end_of_PwrSensorWake:	
  8394  0F8A                     PL8:	
  8395  0F8A  30F0               	movlw	-16
  8396  0F8B  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  8397  0F8C  0AD3               	incf	(_mrf49xaInst^(0+128)+51),f
  8398  0F8D  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  8399  0F8E  30CF               	movlw	-49
  8400  0F8F  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  8401  0F90  0020               	movlb	0	; select bank0
  8402  0F91  0322               	decf	Mrf49xaTxPacket@needAck,w
  8403  0F92  3000               	movlw	0
  8404  0F93  1903               	skipnz
  8405  0F94  3001               	movlw	1
  8406  0F95  00A3               	movwf	??_Mrf49xaTxPacket
  8407  0F96  0EA3               	swapf	??_Mrf49xaTxPacket,f
  8408  0F97  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8409  0F98  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8410  0F99  0021               	movlb	1	; select bank1
  8411  0F9A  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  8412  0F9B  0020               	movlb	0	; select bank0
  8413  0F9C  0623               	xorwf	??_Mrf49xaTxPacket,w
  8414  0F9D  393F               	andlw	-193
  8415  0F9E  0623               	xorwf	??_Mrf49xaTxPacket,w
  8416  0F9F  0021               	movlb	1	; select bank1
  8417  0FA0  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  8418  0FA1  0008               	return
  8419  0FA2                     __end_ofPL8:	
  8420  0FA2                     PL10:	
  8421  0FA2  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  8422  0FA3  390F               	andlw	15
  8423  0FA4  0020               	movlb	0	; select bank0
  8424  0FA5  00AD               	movwf	??_Mrf49xaTick
  8425  0FA6  0AAD               	incf	??_Mrf49xaTick,f
  8426  0FA7  0021               	movlb	1	; select bank1
  8427  0FA8  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  8428  0FA9  0020               	movlb	0	; select bank0
  8429  0FAA  062D               	xorwf	??_Mrf49xaTick,w
  8430  0FAB  39F0               	andlw	-16
  8431  0FAC  062D               	xorwf	??_Mrf49xaTick,w
  8432  0FAD  0021               	movlb	1	; select bank1
  8433  0FAE  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  8434  0FAF  0008               	return
  8435  0FB0                     __end_ofPL10:	
  8436  0FB0                     PL12:	
  8437  0FB0  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  8438  0FB1  397F               	andlw	127
  8439  0FB2  0020               	movlb	0	; select bank0
  8440  0FB3  00A5               	movwf	??_Mrf49xaServe
  8441  0FB4  0AA5               	incf	??_Mrf49xaServe,f
  8442  0FB5  0021               	movlb	1	; select bank1
  8443  0FB6  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  8444  0FB7  0020               	movlb	0	; select bank0
  8445  0FB8  0625               	xorwf	??_Mrf49xaServe,w
  8446  0FB9  3980               	andlw	-128
  8447  0FBA  0625               	xorwf	??_Mrf49xaServe,w
  8448  0FBB  0021               	movlb	1	; select bank1
  8449  0FBC  0008               	return
  8450  0FBD                     __end_ofPL12:	
  8451  0FBD                     PL16:	
  8452  0FBD  0187               	clrf	7
  8453  0FBE  0081               	movwf	1
  8454  0FBF  0828               	movf	handleCfgCmd@packet,w
  8455  0FC0  3E07               	addlw	7
  8456  0FC1  0086               	movwf	6
  8457  0FC2  0008               	return
  8458  0FC3                     __end_ofPL16:	
  8459  0FC3                     PL18:	
  8460  0FC3  0020               	movlb	0	; select bank0
  8461  0FC4  0827               	movf	Mrf49xaServe@data,w
  8462  0FC5  0081               	movwf	1
  8463  0FC6  0021               	movlb	1	; select bank1
  8464  0FC7  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  8465  0FC8  0008               	return
  8466  0FC9                     __end_ofPL18:	
  8467  0FC9                     PL20:	
  8468  0FC9  170D               	bsf	13,6	;volatile
  8469  0FCA  160D               	bsf	13,4	;volatile
  8470  0FCB  0021               	movlb	1	; select bank1
  8471  0FCC  130D               	bcf	13,6	;volatile
  8472  0FCD  120D               	bcf	13,4	;volatile
  8473  0FCE  0008               	return
  8474  0FCF                     __end_ofPL20:	
  8475  0FCF                     PL22:	
  8476  0FCF  3040               	movlw	64
  8477  0FD0  0020               	movlb	0	; select bank0
  8478  0FD1  00A0               	movwf	Sleepy@ms
  8479  0FD2  01A1               	clrf	Sleepy@ms+1
  8480  0FD3  0008               	return
  8481  0FD4                     __end_ofPL22:	
  8482  0FD4                     PL24:	
  8483  0FD4  00A0               	movwf	Mrf49xaTxPacket@packet
  8484  0FD5  01A1               	clrf	Mrf49xaTxPacket@response
  8485  0FD6  01A2               	clrf	Mrf49xaTxPacket@needAck
  8486  0FD7  0AA2               	incf	Mrf49xaTxPacket@needAck,f
  8487  0FD8  0008               	return
  8488  0FD9                     __end_ofPL24:	
  8489  0FD9                     __ptext44:	
  8490 ;; *************** function _handleFwCmd *****************
  8491 ;; Defined at:
  8492 ;;		line 8 in file "../../../src/rfstack/client.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  8495 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  8498 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;		None               void
  8501 ;; Registers used:
  8502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 1F/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8508 ;;      Params:         0       0       0       0
  8509 ;;      Locals:         0       1       0       0
  8510 ;;      Temps:          0       0       0       0
  8511 ;;      Totals:         0       1       0       0
  8512 ;;Total ram usage:        1 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    8
  8515 ;; This function calls:
  8516 ;;		_eepromRxBytes
  8517 ;; This function is called by:
  8518 ;;		_HandlePacket
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           
  8523                           ;psect for function _handleFwCmd
  8524  0FD9                     _handleFwCmd:	
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8528                           ;handleFwCmd@packet stored from wreg
  8529  0FD9  00A8               	movwf	handleFwCmd@packet
  8530                           
  8531                           ;client.c: 23: break;
  8532                           
  8533                           ;client.c: 10: switch(packet->packet.data[0])
  8534  0FDA  3E06               	addlw	6
  8535  0FDB  0086               	movwf	6
  8536  0FDC  0187               	clrf	7
  8537  0FDD  0801               	movf	1,w
  8538                           
  8539                           ; Switch size 1, requested type "space"
  8540                           ; Number of cases is 2, Range of values is 0 to 1
  8541                           ; switch strategies available:
  8542                           ; Name         Instructions Cycles
  8543                           ; simple_byte            7     4 (average)
  8544                           ; direct_byte           10     6 (fixed)
  8545                           ; jumptable            260     6 (fixed)
  8546                           ;	Chosen strategy is simple_byte
  8547  0FDE  3A00               	xorlw	0	; case 0
  8548  0FDF  1903               	skipnz
  8549  0FE0  2FFB               	goto	l528
  8550  0FE1  3A01               	xorlw	1	; case 1
  8551  0FE2  1903               	skipnz
  8552  0FE3  2FE5               	goto	l3405
  8553  0FE4  2FFB               	goto	l528
  8554  0FE5                     l3405:	
  8555                           
  8556                           ;client.c: 17: packet->packet.size = 5;
  8557  0FE5  0A28               	incf	handleFwCmd@packet,w
  8558  0FE6  0086               	movwf	6
  8559  0FE7  3005               	movlw	5
  8560  0FE8  0187               	clrf	7
  8561  0FE9  0081               	movwf	1
  8562                           
  8563                           ;client.c: 18: packet->packet.data[1] = 0;
  8564  0FEA  0828               	movf	handleFwCmd@packet,w
  8565  0FEB  3E07               	addlw	7
  8566  0FEC  0086               	movwf	6
  8567  0FED  0181               	clrf	1
  8568                           
  8569                           ;client.c: 19: packet->packet.data[2] = 1;
  8570  0FEE  0828               	movf	handleFwCmd@packet,w
  8571  0FEF  3E08               	addlw	8
  8572  0FF0  0086               	movwf	6
  8573  0FF1  0181               	clrf	1
  8574  0FF2  0A81               	incf	1,f
  8575                           
  8576                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  8577  0FF3  01A4               	clrf	eepromRxBytes@address
  8578  0FF4  01A5               	clrf	eepromRxBytes@address+1
  8579  0FF5  0828               	movf	handleFwCmd@packet,w
  8580  0FF6  3E09               	addlw	9
  8581  0FF7  00A6               	movwf	eepromRxBytes@data
  8582  0FF8  3002               	movlw	2
  8583  0FF9  00A7               	movwf	eepromRxBytes@size
  8584  0FFA  2A27               	ljmp	l3131
  8585  0FFB                     l528:	
  8586  0FFB  0008               	return
  8587  0FFC                     __end_of_handleFwCmd:	
  8588  0FFC                     __ptext15:	
  8589 ;; *************** function _PwrSensorInit *****************
  8590 ;; Defined at:
  8591 ;;		line 153 in file "../../../src/node/power.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;		None
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;		None
  8596 ;; Return value:  Size  Location     Type
  8597 ;;		None               void
  8598 ;; Registers used:
  8599 ;;		None
  8600 ;; Tracked objects:
  8601 ;;		On entry : 17F/1
  8602 ;;		On exit  : 17F/2
  8603 ;;		Unchanged: 160/0
  8604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8605 ;;      Params:         0       0       0       0
  8606 ;;      Locals:         0       0       0       0
  8607 ;;      Temps:          0       0       0       0
  8608 ;;      Totals:         0       0       0       0
  8609 ;;Total ram usage:        0 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    5
  8612 ;; This function calls:
  8613 ;;		Nothing
  8614 ;; This function is called by:
  8615 ;;		_main
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           
  8620                           ;psect for function _PwrSensorInit
  8621  0FFC                     _PwrSensorInit:	
  8622                           
  8623                           ;power.c: 155: TRISCbits.TRISC2 = 0;
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _PwrSensorInit: []
  8627  0FFC  110E               	bcf	14,2	;volatile
  8628                           
  8629                           ;power.c: 157: LATCbits.LATC2 = 0;
  8630  0FFD  0022               	movlb	2	; select bank2
  8631  0FFE  110E               	bcf	14,2	;volatile
  8632  0FFF  0008               	return
  8633  1000                     __end_of_PwrSensorInit:	
  8634                           
  8635                           	psect	dataCOMMON
  8636  0078                     __pdataCOMMON:	
  8637  0078                     _macPtr:	
  8638  0078                     	ds	1
  8639                           
  8640                           	psect	bssBANK0
  8641  0035                     __pbssBANK0:	
  8642  0035                     _powerStatusTicker:	
  8643  0035                     	ds	1
  8644  0036                     _cfgRam:	
  8645  0036                     	ds	9
  8646                           
  8647                           	psect	dataBANK0
  8648  003F                     __pdataBANK0:	
  8649  003F                     _coldBoot:	
  8650  003F                     	ds	1
  8651                           
  8652                           	psect	bssBANK1
  8653  00A0                     __pbssBANK1:	
  8654  00A0                     _mrf49xaInst:	
  8655  00A0                     	ds	78
  8656                           
  8657                           	psect	clrtext
  8658  02B4                     clear_ram0:	
  8659                           ;	Called with FSR0 containing the base address, and
  8660                           ;	WREG with the size to clear
  8661                           
  8662  02B4  0064               	clrwdt	;clear the watchdog before getting into this loop
  8663  02B5                     clrloop0:	
  8664  02B5  0180               	clrf	0	;clear RAM location pointed to by FSR
  8665  02B6  3101               	addfsr 0,1
  8666  02B7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8667  02B8  2AB5               	goto	clrloop0	;have we reached the end yet?
  8668  02B9  3400               	retlw	0	;all done for this memory range, return
  8669                           
  8670                           	psect	cstackCOMMON
  8671  0070                     __pcstackCOMMON:	
  8672  0070                     ?_SoftI2cStart:	
  8673  0070                     ?_SoftI2cStop:	
  8674                           ; 0 bytes @ 0x0
  8675                           
  8676  0070                     ?_Mrf49xaNeedsReset:	
  8677                           ; 0 bytes @ 0x0
  8678                           
  8679  0070                     ?_Mrf49RxSts:	
  8680                           ; 0 bytes @ 0x0
  8681                           
  8682  0070                     ?_CfgSave:	
  8683                           ; 0 bytes @ 0x0
  8684                           
  8685  0070                     ?_CfgLoad:	
  8686                           ; 0 bytes @ 0x0
  8687                           
  8688  0070                     ?_PwrAdcWake:	
  8689                           ; 0 bytes @ 0x0
  8690                           
  8691  0070                     ?_PwrAdcSleep:	
  8692                           ; 0 bytes @ 0x0
  8693                           
  8694  0070                     ?_PwrAdcInit:	
  8695                           ; 0 bytes @ 0x0
  8696                           
  8697  0070                     ?_PwrSensorInit:	
  8698                           ; 0 bytes @ 0x0
  8699                           
  8700  0070                     ?_PwrI2cInit:	
  8701                           ; 0 bytes @ 0x0
  8702                           
  8703  0070                     ?_PwrRfInit:	
  8704                           ; 0 bytes @ 0x0
  8705                           
  8706  0070                     ?_PwrSensorSleep:	
  8707                           ; 0 bytes @ 0x0
  8708                           
  8709  0070                     ?_PwrI2cSleep:	
  8710                           ; 0 bytes @ 0x0
  8711                           
  8712  0070                     ?_PwrRfSleep:	
  8713                           ; 0 bytes @ 0x0
  8714                           
  8715  0070                     ?_PwrSensorWake:	
  8716                           ; 0 bytes @ 0x0
  8717                           
  8718  0070                     ?_PwrI2cWake:	
  8719                           ; 0 bytes @ 0x0
  8720                           
  8721  0070                     ?_PwrRfWake:	
  8722                           ; 0 bytes @ 0x0
  8723                           
  8724  0070                     ?_SoftI2cNop:	
  8725                           ; 0 bytes @ 0x0
  8726                           
  8727  0070                     ?_SoftI2cInit:	
  8728                           ; 0 bytes @ 0x0
  8729                           
  8730  0070                     ?_SoftI2cRepeatedStart:	
  8731                           ; 0 bytes @ 0x0
  8732                           
  8733  0070                     ?_AdcInit:	
  8734                           ; 0 bytes @ 0x0
  8735                           
  8736  0070                     ?_AdcDeinit:	
  8737                           ; 0 bytes @ 0x0
  8738                           
  8739  0070                     ?_AdcGo:	
  8740                           ; 0 bytes @ 0x0
  8741                           
  8742  0070                     ?_AdcChSelect:	
  8743                           ; 0 bytes @ 0x0
  8744                           
  8745  0070                     ?_ExtIntInit:	
  8746                           ; 0 bytes @ 0x0
  8747                           
  8748  0070                     ?_ExtIntDeinit:	
  8749                           ; 0 bytes @ 0x0
  8750                           
  8751  0070                     ??_ExtIntDeinit:	
  8752                           ; 0 bytes @ 0x0
  8753                           
  8754  0070                     ?_extInt:	
  8755                           ; 0 bytes @ 0x0
  8756                           
  8757  0070                     ?_Mcp9800Start:	
  8758                           ; 0 bytes @ 0x0
  8759                           
  8760  0070                     ?_Mrf49xaModeRx:	
  8761                           ; 0 bytes @ 0x0
  8762                           
  8763  0070                     ?_Mrf49xaModeTx:	
  8764                           ; 0 bytes @ 0x0
  8765                           
  8766  0070                     ?_Mrf49xaModeSleep:	
  8767                           ; 0 bytes @ 0x0
  8768                           
  8769  0070                     ?_Mrf49xaShutdown:	
  8770                           ; 0 bytes @ 0x0
  8771                           
  8772  0070                     ?_Mrf49xaReboot:	
  8773                           ; 0 bytes @ 0x0
  8774                           
  8775  0070                     ?_Mrf49xaInit:	
  8776                           ; 0 bytes @ 0x0
  8777                           
  8778  0070                     ?_Mrf49SpiTx:	
  8779                           ; 0 bytes @ 0x0
  8780                           
  8781  0070                     ?_Mrf49TxByte:	
  8782                           ; 0 bytes @ 0x0
  8783                           
  8784  0070                     ?_Mrf49xaTick:	
  8785                           ; 0 bytes @ 0x0
  8786                           
  8787  0070                     ?_handleFwCmd:	
  8788                           ; 0 bytes @ 0x0
  8789                           
  8790  0070                     ?_handleCfgRead:	
  8791                           ; 0 bytes @ 0x0
  8792                           
  8793  0070                     ?_handleCfgWrite:	
  8794                           ; 0 bytes @ 0x0
  8795                           
  8796  0070                     ?_handleCfgCmd:	
  8797                           ; 0 bytes @ 0x0
  8798                           
  8799  0070                     ?_RfSendPowerState:	
  8800                           ; 0 bytes @ 0x0
  8801                           
  8802  0070                     ?_main:	
  8803                           ; 0 bytes @ 0x0
  8804                           
  8805  0070                     ?i1_Mrf49xaModeRx:	
  8806                           ; 0 bytes @ 0x0
  8807                           
  8808  0070                     ?i1_Mrf49xaNeedsReset:	
  8809                           ; 0 bytes @ 0x0
  8810                           
  8811  0070                     ??i1_Mrf49xaNeedsReset:	
  8812                           ; 0 bytes @ 0x0
  8813                           
  8814  0070                     ?i1_Mrf49SpiTx:	
  8815                           ; 0 bytes @ 0x0
  8816                           
  8817  0070                     ??i1_Mrf49SpiTx:	
  8818                           ; 0 bytes @ 0x0
  8819                           
  8820  0070                     ??i1_Mrf49SpiRx:	
  8821                           ; 0 bytes @ 0x0
  8822                           
  8823  0070                     ?i1_Mrf49RxSts:	
  8824                           ; 0 bytes @ 0x0
  8825                           
  8826  0070                     ?i1_Mrf49TxByte:	
  8827                           ; 0 bytes @ 0x0
  8828                           
  8829  0070                     ?_SoftI2cTxByte:	
  8830                           ; 0 bytes @ 0x0
  8831                           
  8832  0070                     ?_Mrf49xaServe:	
  8833                           ; 1 bytes @ 0x0
  8834                           
  8835  0070                     ?_CfgGetSizeByType:	
  8836                           ; 1 bytes @ 0x0
  8837                           
  8838  0070                     ?_SoftI2cRxByte:	
  8839                           ; 1 bytes @ 0x0
  8840                           
  8841  0070                     ?_AdcIsBusy:	
  8842                           ; 1 bytes @ 0x0
  8843                           
  8844  0070                     ?_Mrf49SpiRx:	
  8845                           ; 1 bytes @ 0x0
  8846                           
  8847  0070                     ?_Mrf49RxCmd:	
  8848                           ; 1 bytes @ 0x0
  8849                           
  8850  0070                     ?_Mrf49RxByte:	
  8851                           ; 1 bytes @ 0x0
  8852                           
  8853  0070                     ?_Mrf49xaPacketPending:	
  8854                           ; 1 bytes @ 0x0
  8855                           
  8856  0070                     ?_Mrf49xaRxPacket:	
  8857                           ; 1 bytes @ 0x0
  8858                           
  8859  0070                     ?_Mrf49xaAllocPacket:	
  8860                           ; 1 bytes @ 0x0
  8861                           
  8862  0070                     ?i1_Mrf49SpiRx:	
  8863                           ; 1 bytes @ 0x0
  8864                           
  8865  0070                     ?i1_Mrf49RxCmd:	
  8866                           ; 1 bytes @ 0x0
  8867                           
  8868  0070                     ?i1_Mrf49RxByte:	
  8869                           ; 1 bytes @ 0x0
  8870                           
  8871  0070                     ?i1_Mrf49xaServe:	
  8872                           ; 1 bytes @ 0x0
  8873                           
  8874  0070                     i1Mrf49SpiTx@byte:	
  8875                           ; 1 bytes @ 0x0
  8876                           
  8877  0070                     i1Mrf49SpiRx@data:	
  8878                           ; 1 bytes @ 0x0
  8879                           
  8880                           
  8881                           ; 1 bytes @ 0x0
  8882  0070                     	ds	1
  8883  0071                     ?i1_Mrf49TxCmd:	
  8884  0071                     ??i1_Mrf49RxCmd:	
  8885                           ; 0 bytes @ 0x1
  8886                           
  8887  0071                     ??i1_Mrf49RxSts:	
  8888                           ; 0 bytes @ 0x1
  8889                           
  8890  0071                     i1Mrf49TxCmd@val:	
  8891                           ; 0 bytes @ 0x1
  8892                           
  8893  0071                     i1Mrf49RxCmd@cmd:	
  8894                           ; 1 bytes @ 0x1
  8895                           
  8896                           
  8897                           ; 1 bytes @ 0x1
  8898  0071                     	ds	1
  8899  0072                     ??i1_Mrf49TxCmd:	
  8900  0072                     i1Mrf49TxCmd@cmd:	
  8901                           ; 0 bytes @ 0x2
  8902                           
  8903  0072                     i1Mrf49RxCmd@val:	
  8904                           ; 1 bytes @ 0x2
  8905                           
  8906                           
  8907                           ; 1 bytes @ 0x2
  8908  0072                     	ds	1
  8909  0073                     ??i1_Mrf49xaModeRx:	
  8910  0073                     ??i1_Mrf49RxByte:	
  8911                           ; 0 bytes @ 0x3
  8912                           
  8913  0073                     ??i1_Mrf49TxByte:	
  8914                           ; 0 bytes @ 0x3
  8915                           
  8916  0073                     i1Mrf49xaModeRx@k:	
  8917                           ; 0 bytes @ 0x3
  8918                           
  8919  0073                     i1Mrf49TxByte@byte:	
  8920                           ; 1 bytes @ 0x3
  8921                           
  8922                           
  8923                           ; 1 bytes @ 0x3
  8924  0073                     	ds	1
  8925  0074                     ??i1_Mrf49xaServe:	
  8926                           
  8927                           ; 0 bytes @ 0x4
  8928  0074                     	ds	1
  8929  0075                     i1Mrf49xaServe@data:	
  8930                           
  8931                           ; 1 bytes @ 0x5
  8932  0075                     	ds	1
  8933  0076                     ??_extInt:	
  8934                           
  8935                           ; 0 bytes @ 0x6
  8936  0076                     	ds	1
  8937  0077                     extInt@ofw:	
  8938                           
  8939                           ; 1 bytes @ 0x7
  8940  0077                     	ds	1
  8941                           
  8942                           	psect	cstackBANK0
  8943  0020                     __pcstackBANK0:	
  8944  0020                     ??_Mrf49xaNeedsReset:	
  8945  0020                     ?_Sleepy:	
  8946                           ; 0 bytes @ 0x0
  8947                           
  8948  0020                     ??_CfgGetSizeByType:	
  8949                           ; 0 bytes @ 0x0
  8950                           
  8951  0020                     ??_PwrAdcWake:	
  8952                           ; 0 bytes @ 0x0
  8953                           
  8954  0020                     ??_PwrAdcSleep:	
  8955                           ; 0 bytes @ 0x0
  8956                           
  8957  0020                     ??_PwrAdcInit:	
  8958                           ; 0 bytes @ 0x0
  8959                           
  8960  0020                     ??_PwrSensorInit:	
  8961                           ; 0 bytes @ 0x0
  8962                           
  8963  0020                     ??_PwrSensorSleep:	
  8964                           ; 0 bytes @ 0x0
  8965                           
  8966  0020                     ??_PwrI2cSleep:	
  8967                           ; 0 bytes @ 0x0
  8968                           
  8969  0020                     ??_PwrSensorWake:	
  8970                           ; 0 bytes @ 0x0
  8971                           
  8972  0020                     ??_PwrI2cWake:	
  8973                           ; 0 bytes @ 0x0
  8974                           
  8975  0020                     ??_SoftI2cNop:	
  8976                           ; 0 bytes @ 0x0
  8977                           
  8978  0020                     ??_AdcInit:	
  8979                           ; 0 bytes @ 0x0
  8980                           
  8981  0020                     ??_AdcDeinit:	
  8982                           ; 0 bytes @ 0x0
  8983                           
  8984  0020                     ??_AdcGo:	
  8985                           ; 0 bytes @ 0x0
  8986                           
  8987  0020                     ??_AdcIsBusy:	
  8988                           ; 0 bytes @ 0x0
  8989                           
  8990  0020                     ??_AdcChSelect:	
  8991                           ; 0 bytes @ 0x0
  8992                           
  8993  0020                     ??_ExtIntInit:	
  8994                           ; 0 bytes @ 0x0
  8995                           
  8996  0020                     ??_Mrf49SpiTx:	
  8997                           ; 0 bytes @ 0x0
  8998                           
  8999  0020                     ??_Mrf49SpiRx:	
  9000                           ; 0 bytes @ 0x0
  9001                           
  9002  0020                     ??_Mrf49xaPacketPending:	
  9003                           ; 0 bytes @ 0x0
  9004                           
  9005  0020                     ?_Mrf49xaFreePacket:	
  9006                           ; 0 bytes @ 0x0
  9007                           
  9008  0020                     ??_Mrf49xaRxPacket:	
  9009                           ; 0 bytes @ 0x0
  9010                           
  9011  0020                     ??_Mrf49xaAllocPacket:	
  9012                           ; 0 bytes @ 0x0
  9013                           
  9014  0020                     ?_memcpy:	
  9015                           ; 0 bytes @ 0x0
  9016                           
  9017  0020                     ?_Mrf49xaTxPacket:	
  9018                           ; 1 bytes @ 0x0
  9019                           
  9020  0020                     ?_AdcGetResult:	
  9021                           ; 1 bytes @ 0x0
  9022                           
  9023  0020                     AdcChSelect@channel:	
  9024                           ; 2 bytes @ 0x0
  9025                           
  9026  0020                     Mrf49xaNeedsReset@inst:	
  9027                           ; 1 bytes @ 0x0
  9028                           
  9029  0020                     Mrf49SpiTx@byte:	
  9030                           ; 1 bytes @ 0x0
  9031                           
  9032  0020                     Mrf49SpiRx@data:	
  9033                           ; 1 bytes @ 0x0
  9034                           
  9035  0020                     Mrf49xaPacketPending@inst:	
  9036                           ; 1 bytes @ 0x0
  9037                           
  9038  0020                     Mrf49xaTxPacket@packet:	
  9039                           ; 1 bytes @ 0x0
  9040                           
  9041  0020                     Mrf49xaFreePacket@packet:	
  9042                           ; 1 bytes @ 0x0
  9043                           
  9044  0020                     Mrf49xaRxPacket@inst:	
  9045                           ; 1 bytes @ 0x0
  9046                           
  9047  0020                     Mrf49xaAllocPacket@inst:	
  9048                           ; 1 bytes @ 0x0
  9049                           
  9050  0020                     CfgGetSizeByType@type:	
  9051                           ; 1 bytes @ 0x0
  9052                           
  9053  0020                     memcpy@s1:	
  9054                           ; 1 bytes @ 0x0
  9055                           
  9056  0020                     Sleepy@ms:	
  9057                           ; 1 bytes @ 0x0
  9058                           
  9059                           
  9060                           ; 2 bytes @ 0x0
  9061  0020                     	ds	1
  9062  0021                     ??_SoftI2cStart:	
  9063  0021                     ??_SoftI2cTxByte:	
  9064                           ; 0 bytes @ 0x1
  9065                           
  9066  0021                     ??_SoftI2cStop:	
  9067                           ; 0 bytes @ 0x1
  9068                           
  9069  0021                     ?_Mrf49TxCmd:	
  9070                           ; 0 bytes @ 0x1
  9071                           
  9072  0021                     ??_Mrf49RxSts:	
  9073                           ; 0 bytes @ 0x1
  9074                           
  9075  0021                     ??_SoftI2cRepeatedStart:	
  9076                           ; 0 bytes @ 0x1
  9077                           
  9078  0021                     ??_SoftI2cRxByte:	
  9079                           ; 0 bytes @ 0x1
  9080                           
  9081  0021                     ??_Mrf49RxCmd:	
  9082                           ; 0 bytes @ 0x1
  9083                           
  9084  0021                     ??_Mrf49xaFreePacket:	
  9085                           ; 0 bytes @ 0x1
  9086                           
  9087  0021                     SoftI2cRxByte@ack:	
  9088                           ; 0 bytes @ 0x1
  9089                           
  9090  0021                     Mrf49TxCmd@val:	
  9091                           ; 1 bytes @ 0x1
  9092                           
  9093  0021                     Mrf49RxCmd@cmd:	
  9094                           ; 1 bytes @ 0x1
  9095                           
  9096  0021                     Mrf49RxSts@inst:	
  9097                           ; 1 bytes @ 0x1
  9098                           
  9099  0021                     Mrf49xaTxPacket@response:	
  9100                           ; 1 bytes @ 0x1
  9101                           
  9102  0021                     Mrf49xaFreePacket@inst:	
  9103                           ; 1 bytes @ 0x1
  9104                           
  9105  0021                     memcpy@n:	
  9106                           ; 1 bytes @ 0x1
  9107                           
  9108                           
  9109                           ; 2 bytes @ 0x1
  9110  0021                     	ds	1
  9111  0022                     ??_Sleepy:	
  9112  0022                     ??_Mrf49TxCmd:	
  9113                           ; 0 bytes @ 0x2
  9114                           
  9115  0022                     ??_AdcGetResult:	
  9116                           ; 0 bytes @ 0x2
  9117                           
  9118  0022                     ?_AdcSample:	
  9119                           ; 0 bytes @ 0x2
  9120                           
  9121  0022                     SoftI2cTxByte@data:	
  9122                           ; 2 bytes @ 0x2
  9123                           
  9124  0022                     SoftI2cRxByte@data:	
  9125                           ; 1 bytes @ 0x2
  9126                           
  9127  0022                     Mrf49TxCmd@cmd:	
  9128                           ; 1 bytes @ 0x2
  9129                           
  9130  0022                     Mrf49RxCmd@val:	
  9131                           ; 1 bytes @ 0x2
  9132                           
  9133  0022                     Mrf49xaTxPacket@needAck:	
  9134                           ; 1 bytes @ 0x2
  9135                           
  9136                           
  9137                           ; 1 bytes @ 0x2
  9138  0022                     	ds	1
  9139  0023                     ??_memcpy:	
  9140  0023                     ??_Mrf49xaModeRx:	
  9141                           ; 0 bytes @ 0x3
  9142                           
  9143  0023                     ??_Mrf49xaModeTx:	
  9144                           ; 0 bytes @ 0x3
  9145                           
  9146  0023                     ??_Mrf49xaModeSleep:	
  9147                           ; 0 bytes @ 0x3
  9148                           
  9149  0023                     ??_Mrf49RxByte:	
  9150                           ; 0 bytes @ 0x3
  9151                           
  9152  0023                     ??_Mrf49TxByte:	
  9153                           ; 0 bytes @ 0x3
  9154                           
  9155  0023                     ??_Mrf49xaTxPacket:	
  9156                           ; 0 bytes @ 0x3
  9157                           
  9158  0023                     SoftI2cTxByte@i:	
  9159                           ; 0 bytes @ 0x3
  9160                           
  9161  0023                     SoftI2cRxByte@i:	
  9162                           ; 1 bytes @ 0x3
  9163                           
  9164  0023                     Mrf49xaModeRx@k:	
  9165                           ; 1 bytes @ 0x3
  9166                           
  9167  0023                     Mrf49xaModeTx@inst:	
  9168                           ; 1 bytes @ 0x3
  9169                           
  9170  0023                     Mrf49xaModeSleep@inst:	
  9171                           ; 1 bytes @ 0x3
  9172                           
  9173  0023                     Mrf49TxByte@byte:	
  9174                           ; 1 bytes @ 0x3
  9175                           
  9176  0023                     Sleepy@b:	
  9177                           ; 1 bytes @ 0x3
  9178                           
  9179  0023                     memcpy@d:	
  9180                           ; 1 bytes @ 0x3
  9181                           
  9182                           
  9183                           ; 1 bytes @ 0x3
  9184  0023                     	ds	1
  9185  0024                     ??_PwrI2cInit:	
  9186  0024                     ??_SoftI2cInit:	
  9187                           ; 0 bytes @ 0x4
  9188                           
  9189  0024                     ??_AdcSample:	
  9190                           ; 0 bytes @ 0x4
  9191                           
  9192  0024                     ??_Mcp9800Start:	
  9193                           ; 0 bytes @ 0x4
  9194                           
  9195  0024                     ?_eepromRxBytes:	
  9196                           ; 0 bytes @ 0x4
  9197                           
  9198  0024                     ?_eepromTxBytes:	
  9199                           ; 0 bytes @ 0x4
  9200                           
  9201  0024                     ?_Mcp9800Read:	
  9202                           ; 0 bytes @ 0x4
  9203                           
  9204  0024                     Mcp9800Start@resolution:	
  9205                           ; 2 bytes @ 0x4
  9206                           
  9207  0024                     Mrf49xaModeRx@inst:	
  9208                           ; 1 bytes @ 0x4
  9209                           
  9210  0024                     Mrf49xaModeTx@k:	
  9211                           ; 1 bytes @ 0x4
  9212                           
  9213  0024                     Mrf49xaModeSleep@k:	
  9214                           ; 1 bytes @ 0x4
  9215                           
  9216  0024                     Mrf49xaTxPacket@crc:	
  9217                           ; 1 bytes @ 0x4
  9218                           
  9219  0024                     memcpy@s:	
  9220                           ; 1 bytes @ 0x4
  9221                           
  9222  0024                     eepromRxBytes@address:	
  9223                           ; 1 bytes @ 0x4
  9224                           
  9225  0024                     eepromTxBytes@address:	
  9226                           ; 2 bytes @ 0x4
  9227                           
  9228                           
  9229                           ; 2 bytes @ 0x4
  9230  0024                     	ds	1
  9231  0025                     ??_Mrf49xaServe:	
  9232  0025                     ??_Mrf49xaShutdown:	
  9233                           ; 0 bytes @ 0x5
  9234                           
  9235  0025                     ??_Mrf49xaReboot:	
  9236                           ; 0 bytes @ 0x5
  9237                           
  9238  0025                     AdcSample@ch:	
  9239                           ; 0 bytes @ 0x5
  9240                           
  9241  0025                     Mrf49xaShutdown@inst:	
  9242                           ; 1 bytes @ 0x5
  9243                           
  9244  0025                     Mrf49xaReboot@inst:	
  9245                           ; 1 bytes @ 0x5
  9246                           
  9247  0025                     Mrf49xaTxPacket@inst:	
  9248                           ; 1 bytes @ 0x5
  9249                           
  9250  0025                     memcpy@d1:	
  9251                           ; 1 bytes @ 0x5
  9252                           
  9253                           
  9254                           ; 1 bytes @ 0x5
  9255  0025                     	ds	1
  9256  0026                     ??_PwrRfSleep:	
  9257  0026                     ??_PwrRfWake:	
  9258                           ; 0 bytes @ 0x6
  9259                           
  9260  0026                     ??_Mcp9800Read:	
  9261                           ; 0 bytes @ 0x6
  9262                           
  9263  0026                     ??_handleCfgRead:	
  9264                           ; 0 bytes @ 0x6
  9265                           
  9266  0026                     ??_handleCfgWrite:	
  9267                           ; 0 bytes @ 0x6
  9268                           
  9269  0026                     Mcp9800Read@tempH:	
  9270                           ; 0 bytes @ 0x6
  9271                           
  9272  0026                     eepromRxBytes@data:	
  9273                           ; 1 bytes @ 0x6
  9274                           
  9275  0026                     eepromTxBytes@data:	
  9276                           ; 1 bytes @ 0x6
  9277                           
  9278  0026                     Mrf49xaTxPacket@i:	
  9279                           ; 1 bytes @ 0x6
  9280                           
  9281  0026                     Mrf49xaServe@inst:	
  9282                           ; 1 bytes @ 0x6
  9283                           
  9284  0026                     handleCfgRead@nrOfBytes:	
  9285                           ; 1 bytes @ 0x6
  9286                           
  9287  0026                     handleCfgWrite@nrOfBytes:	
  9288                           ; 1 bytes @ 0x6
  9289                           
  9290                           
  9291                           ; 1 bytes @ 0x6
  9292  0026                     	ds	1
  9293  0027                     ??_RfSendPowerState:	
  9294  0027                     ?_RfSendSampleWeatherNode:	
  9295                           ; 0 bytes @ 0x7
  9296                           
  9297  0027                     ?_Mrf49xaTxAck:	
  9298                           ; 0 bytes @ 0x7
  9299                           
  9300  0027                     Mcp9800Read@tempL:	
  9301                           ; 1 bytes @ 0x7
  9302                           
  9303  0027                     eepromRxBytes@size:	
  9304                           ; 1 bytes @ 0x7
  9305                           
  9306  0027                     eepromTxBytes@size:	
  9307                           ; 1 bytes @ 0x7
  9308                           
  9309  0027                     Mrf49xaTxAck@packet:	
  9310                           ; 1 bytes @ 0x7
  9311                           
  9312  0027                     Mrf49xaServe@data:	
  9313                           ; 1 bytes @ 0x7
  9314                           
  9315  0027                     handleCfgRead@index:	
  9316                           ; 1 bytes @ 0x7
  9317                           
  9318  0027                     handleCfgWrite@index:	
  9319                           ; 1 bytes @ 0x7
  9320                           
  9321  0027                     RfSendPowerState@inst:	
  9322                           ; 1 bytes @ 0x7
  9323                           
  9324  0027                     RfSendSampleWeatherNode@temperature:	
  9325                           ; 1 bytes @ 0x7
  9326                           
  9327                           
  9328                           ; 2 bytes @ 0x7
  9329  0027                     	ds	1
  9330  0028                     ??_CfgSave:	
  9331  0028                     ??_CfgLoad:	
  9332                           ; 0 bytes @ 0x8
  9333                           
  9334  0028                     ??_Mrf49xaInit:	
  9335                           ; 0 bytes @ 0x8
  9336                           
  9337  0028                     ??_eepromRxBytes:	
  9338                           ; 0 bytes @ 0x8
  9339                           
  9340  0028                     ??_eepromTxBytes:	
  9341                           ; 0 bytes @ 0x8
  9342                           
  9343  0028                     ??_Mrf49xaTxAck:	
  9344                           ; 0 bytes @ 0x8
  9345                           
  9346  0028                     ??_handleFwCmd:	
  9347                           ; 0 bytes @ 0x8
  9348                           
  9349  0028                     ??_handleCfgCmd:	
  9350                           ; 0 bytes @ 0x8
  9351                           
  9352  0028                     Mrf49xaInit@inst:	
  9353                           ; 0 bytes @ 0x8
  9354                           
  9355  0028                     Mrf49xaTxAck@inst:	
  9356                           ; 1 bytes @ 0x8
  9357                           
  9358  0028                     handleFwCmd@packet:	
  9359                           ; 1 bytes @ 0x8
  9360                           
  9361  0028                     handleCfgRead@packet:	
  9362                           ; 1 bytes @ 0x8
  9363                           
  9364  0028                     handleCfgWrite@packet:	
  9365                           ; 1 bytes @ 0x8
  9366                           
  9367  0028                     handleCfgCmd@packet:	
  9368                           ; 1 bytes @ 0x8
  9369                           
  9370  0028                     RfSendPowerState@s:	
  9371                           ; 1 bytes @ 0x8
  9372                           
  9373                           
  9374                           ; 2 bytes @ 0x8
  9375  0028                     	ds	1
  9376  0029                     ?_HandlePacket:	
  9377  0029                     Mrf49xaInit@k:	
  9378                           ; 0 bytes @ 0x9
  9379                           
  9380  0029                     HandlePacket@packet:	
  9381                           ; 1 bytes @ 0x9
  9382                           
  9383  0029                     RfSendSampleWeatherNode@humidity:	
  9384                           ; 1 bytes @ 0x9
  9385                           
  9386                           
  9387                           ; 2 bytes @ 0x9
  9388  0029                     	ds	1
  9389  002A                     ??_HandlePacket:	
  9390  002A                     ??_PwrRfInit:	
  9391                           ; 0 bytes @ 0xA
  9392                           
  9393  002A                     RfSendPowerState@packet:	
  9394                           ; 0 bytes @ 0xA
  9395                           
  9396                           
  9397                           ; 1 bytes @ 0xA
  9398  002A                     	ds	1
  9399  002B                     ??_RfSendSampleWeatherNode:	
  9400  002B                     HandlePacket@inst:	
  9401                           ; 0 bytes @ 0xB
  9402                           
  9403  002B                     RfSendSampleWeatherNode@inst:	
  9404                           ; 1 bytes @ 0xB
  9405                           
  9406                           
  9407                           ; 1 bytes @ 0xB
  9408  002B                     	ds	1
  9409  002C                     HandlePacket@response:	
  9410  002C                     RfSendSampleWeatherNode@packet:	
  9411                           ; 1 bytes @ 0xC
  9412                           
  9413                           
  9414                           ; 1 bytes @ 0xC
  9415  002C                     	ds	1
  9416  002D                     ??_Mrf49xaTick:	
  9417                           
  9418                           ; 0 bytes @ 0xD
  9419  002D                     	ds	1
  9420  002E                     Mrf49xaTick@timeout:	
  9421                           
  9422                           ; 1 bytes @ 0xE
  9423  002E                     	ds	1
  9424  002F                     Mrf49xaTick@inst:	
  9425                           
  9426                           ; 1 bytes @ 0xF
  9427  002F                     	ds	1
  9428  0030                     Mrf49xaTick@packet:	
  9429                           
  9430                           ; 1 bytes @ 0x10
  9431  0030                     	ds	1
  9432  0031                     ??_main:	
  9433  0031                     main@humidity:	
  9434                           ; 0 bytes @ 0x11
  9435                           
  9436                           
  9437                           ; 2 bytes @ 0x11
  9438  0031                     	ds	2
  9439  0033                     main@temperature:	
  9440                           
  9441                           ; 2 bytes @ 0x13
  9442  0033                     	ds	2
  9443                           
  9444                           	psect	text11
  9445  0000                     __ptext11:	
  9446 ;; *************** function _AdcGetResult *****************
  9447 ;; Defined at:
  9448 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  2    0[BANK0 ] unsigned int 
  9455 ;; Registers used:
  9456 ;;		wreg
  9457 ;; Tracked objects:
  9458 ;;		On entry : 1F/1
  9459 ;;		On exit  : 1F/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9462 ;;      Params:         0       2       0       0
  9463 ;;      Locals:         0       0       0       0
  9464 ;;      Temps:          0       0       0       0
  9465 ;;      Totals:         0       2       0       0
  9466 ;;Total ram usage:        2 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    5
  9469 ;; This function calls:
  9470 ;;		Nothing
  9471 ;; This function is called by:
  9472 ;;		_AdcSample
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476  0000                     _AdcGetResult:	
  9477                           ;psect for function _AdcGetResult
  9478                           
  9479  0000                     __end_of_AdcGetResult:	
  9480                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9481                           
  9482                           ;incstack = 0
  9483                           ; Regs used in _AdcGetResult: [wreg]
  9484                           
  9485                           
  9486                           	psect	text16
  9487  029F                     __ptext16:	
  9488 ;; *************** function _PwrRfWake *****************
  9489 ;; Defined at:
  9490 ;;		line 138 in file "../../../src/node/power.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0, pclath, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 1F/1
  9501 ;;		On exit  : 1F/1
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9504 ;;      Params:         0       0       0       0
  9505 ;;      Locals:         0       0       0       0
  9506 ;;      Temps:          0       0       0       0
  9507 ;;      Totals:         0       0       0       0
  9508 ;;Total ram usage:        0 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    9
  9511 ;; This function calls:
  9512 ;;		_Mrf49xaReboot
  9513 ;; This function is called by:
  9514 ;;		_main
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _PwrRfWake
  9520  029F                     _PwrRfWake:	
  9521                           
  9522                           ;power.c: 140: WPUAbits.WPUA5 = 1;
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  9526  029F  0024               	movlb	4	; select bank4
  9527  02A0  168C               	bsf	12,5	;volatile
  9528                           
  9529                           ;power.c: 142: LATBbits.LATB7 = 0;
  9530  02A1  0022               	movlb	2	; select bank2
  9531  02A2  138D               	bcf	13,7	;volatile
  9532                           
  9533                           ;power.c: 143: LATCbits.LATC7 = 0;
  9534  02A3  138E               	bcf	14,7	;volatile
  9535                           
  9536                           ;power.c: 145: TRISAbits.TRISA5 = 1;
  9537  02A4  0021               	movlb	1	; select bank1
  9538  02A5  168C               	bsf	12,5	;volatile
  9539                           
  9540                           ;power.c: 146: TRISCbits.TRISC5 = 1;
  9541  02A6  168E               	bsf	14,5	;volatile
  9542                           
  9543                           ;power.c: 148: INTCONbits.INTE = 1;
  9544  02A7  160B               	bsf	11,4	;volatile
  9545                           
  9546                           ;power.c: 149: Mrf49xaReboot(&mrf49xaInst);
  9547  02A8  318D  2D04         	ljmp	l2953
  9548  02AA                     __end_of_PwrRfWake:	
  9549  02AA                     __ptext17:	
  9550 ;; *************** function _Mrf49xaReboot *****************
  9551 ;; Defined at:
  9552 ;;		line 115 in file "../../../src/devices/mrf49xa.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  9555 ;;		 -> mrf49xaInst(78), 
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;  inst            1    5[BANK0 ] PTR struct Mrf49xaMac_s
  9558 ;;		 -> mrf49xaInst(78), 
  9559 ;; Return value:  Size  Location     Type
  9560 ;;		None               void
  9561 ;; Registers used:
  9562 ;;		wreg, status,2, status,0, pclath, cstack
  9563 ;; Tracked objects:
  9564 ;;		On entry : 1F/1
  9565 ;;		On exit  : 1F/1
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9568 ;;      Params:         0       0       0       0
  9569 ;;      Locals:         0       1       0       0
  9570 ;;      Temps:          0       0       0       0
  9571 ;;      Totals:         0       1       0       0
  9572 ;;Total ram usage:        1 bytes
  9573 ;; Hardware stack levels used:    1
  9574 ;; Hardware stack levels required when called:    8
  9575 ;; This function calls:
  9576 ;;		_Mrf49xaModeRx
  9577 ;; This function is called by:
  9578 ;;		_PwrRfWake
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function _Mrf49xaReboot
  9584  02AA                     _Mrf49xaReboot:	
  9585                           
  9586                           ;mrf49xa.c: 117: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  9587                           
  9588                           ;incstack = 0
  9589                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  9590  02AA  318D  2D04         	ljmp	l2953
  9591  02AC                     __end_of_Mrf49xaReboot:	
  9592                           
  9593                           	psect	text18
  9594  026E                     __ptext18:	
  9595 ;; *************** function _PwrRfSleep *****************
  9596 ;; Defined at:
  9597 ;;		line 121 in file "../../../src/node/power.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;		None
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;		None
  9602 ;; Return value:  Size  Location     Type
  9603 ;;		None               void
  9604 ;; Registers used:
  9605 ;;		wreg, status,2, status,0, pclath, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : 1E/1
  9608 ;;		On exit  : 1F/1
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9611 ;;      Params:         0       0       0       0
  9612 ;;      Locals:         0       0       0       0
  9613 ;;      Temps:          0       0       0       0
  9614 ;;      Totals:         0       0       0       0
  9615 ;;Total ram usage:        0 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    9
  9618 ;; This function calls:
  9619 ;;		_Mrf49xaShutdown
  9620 ;; This function is called by:
  9621 ;;		_main
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function _PwrRfSleep
  9627  026E                     _PwrRfSleep:	
  9628                           
  9629                           ;power.c: 123: Mrf49xaShutdown(&mrf49xaInst);
  9630                           
  9631                           ;incstack = 0
  9632                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  9633  026E  30A0               	movlw	_mrf49xaInst& (0+255)
  9634  026F  227C               	fcall	_Mrf49xaShutdown
  9635                           
  9636                           ;power.c: 124: INTCONbits.INTE = 0;
  9637  0270  120B               	bcf	11,4	;volatile
  9638                           
  9639                           ;power.c: 126: LATAbits.LATA5 = 1;
  9640  0271  0022               	movlb	2	; select bank2
  9641  0272  168C               	bsf	12,5	;volatile
  9642                           
  9643                           ;power.c: 127: LATCbits.LATC5 = 1;
  9644  0273  168E               	bsf	14,5	;volatile
  9645                           
  9646                           ;power.c: 129: LATBbits.LATB7 = 1;
  9647  0274  178D               	bsf	13,7	;volatile
  9648                           
  9649                           ;power.c: 130: LATCbits.LATC7 = 1;
  9650  0275  178E               	bsf	14,7	;volatile
  9651                           
  9652                           ;power.c: 132: WPUAbits.WPUA5 = 0;
  9653  0276  0024               	movlb	4	; select bank4
  9654  0277  128C               	bcf	12,5	;volatile
  9655                           
  9656                           ;power.c: 134: TRISAbits.TRISA5 = 0;
  9657  0278  0021               	movlb	1	; select bank1
  9658  0279  128C               	bcf	12,5	;volatile
  9659                           
  9660                           ;power.c: 135: TRISCbits.TRISC5 = 0;
  9661  027A  128E               	bcf	14,5	;volatile
  9662  027B  0008               	return
  9663  027C                     __end_of_PwrRfSleep:	
  9664  027C                     __ptext19:	
  9665 ;; *************** function _Mrf49xaShutdown *****************
  9666 ;; Defined at:
  9667 ;;		line 107 in file "../../../src/devices/mrf49xa.c"
  9668 ;; Parameters:    Size  Location     Type
  9669 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  9670 ;;		 -> mrf49xaInst(78), 
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  inst            1    5[BANK0 ] PTR struct Mrf49xaMac_s
  9673 ;;		 -> mrf49xaInst(78), 
  9674 ;; Return value:  Size  Location     Type
  9675 ;;		None               void
  9676 ;; Registers used:
  9677 ;;		wreg, status,2, status,0, pclath, cstack
  9678 ;; Tracked objects:
  9679 ;;		On entry : 1E/1
  9680 ;;		On exit  : 1F/1
  9681 ;;		Unchanged: 0/0
  9682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9683 ;;      Params:         0       0       0       0
  9684 ;;      Locals:         0       1       0       0
  9685 ;;      Temps:          0       0       0       0
  9686 ;;      Totals:         0       1       0       0
  9687 ;;Total ram usage:        1 bytes
  9688 ;; Hardware stack levels used:    1
  9689 ;; Hardware stack levels required when called:    8
  9690 ;; This function calls:
  9691 ;;		_Mrf49xaModeSleep
  9692 ;; This function is called by:
  9693 ;;		_PwrRfSleep
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           
  9698                           ;psect for function _Mrf49xaShutdown
  9699  027C                     _Mrf49xaShutdown:	
  9700                           
  9701                           ;mrf49xa.c: 109: Mrf49xaModeSleep(((Mrf49xaMac_t*)(&mrf49xaInst)));
  9702                           
  9703                           ;incstack = 0
  9704                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  9705  027C  2A7D               	ljmp	l2985
  9706  027D                     __end_of_Mrf49xaShutdown:	
  9707  027D                     __ptext20:	
  9708 ;; *************** function _Mrf49xaModeSleep *****************
  9709 ;; Defined at:
  9710 ;;		line 98 in file "../../../src/devices/mrf49xa.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  9713 ;;		 -> mrf49xaInst(78), 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  inst            1    3[BANK0 ] PTR struct Mrf49xaMac_s
  9716 ;;		 -> mrf49xaInst(78), 
  9717 ;;  k               1    4[BANK0 ] unsigned char 
  9718 ;; Return value:  Size  Location     Type
  9719 ;;		None               void
  9720 ;; Registers used:
  9721 ;;		wreg, status,2, status,0, pclath, cstack
  9722 ;; Tracked objects:
  9723 ;;		On entry : 1E/1
  9724 ;;		On exit  : 1F/1
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9727 ;;      Params:         0       0       0       0
  9728 ;;      Locals:         0       2       0       0
  9729 ;;      Temps:          0       0       0       0
  9730 ;;      Totals:         0       2       0       0
  9731 ;;Total ram usage:        2 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    7
  9734 ;; This function calls:
  9735 ;;		_Mrf49TxCmd
  9736 ;; This function is called by:
  9737 ;;		_Mrf49xaShutdown
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _Mrf49xaModeSleep
  9743  027D                     _Mrf49xaModeSleep:	
  9744  027D                     l2985:	
  9745                           ;incstack = 0
  9746                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  9747                           
  9748                           
  9749                           ;mrf49xa.c: 100: UI08_t k;
  9750                           ;mrf49xa.c: 101: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  9751  027D  0020               	movlb	0	; select bank0
  9752  027E  302C               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9753  027F  01A4               	clrf	Mrf49xaModeSleep@k
  9754  0280  3182               	movlp	high __stringtab
  9755  0281  000A               	callw
  9756  0282  3182               	pagesel	$	;select current page
  9757  0283  3800               	iorlw	0
  9758  0284  1903               	btfsc	3,2
  9759  0285  2A9A               	goto	l2997
  9760  0286                     l2991:	
  9761  0286  3524               	lslf	Mrf49xaModeSleep@k,w
  9762  0287  3E63               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  9763  0288  3182               	movlp	high __stringtab
  9764  0289  000A               	callw
  9765  028A  00A1               	movwf	Mrf49TxCmd@val
  9766  028B  3524               	lslf	Mrf49xaModeSleep@k,w
  9767  028C  3E62               	addlw	low (_mrfRegset_Sleep| (0+32768))
  9768  028D  3182               	movlp	high __stringtab
  9769  028E  000A               	callw
  9770  028F  318D  252A  3182   	fcall	_Mrf49TxCmd
  9771  0292  302C               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9772  0293  0AA4               	incf	Mrf49xaModeSleep@k,f
  9773  0294  3182               	movlp	high __stringtab
  9774  0295  000A               	callw
  9775  0296  3182               	pagesel	$	;select current page
  9776  0297  0224               	subwf	Mrf49xaModeSleep@k,w
  9777  0298  1C03               	skipc
  9778  0299  2A86               	goto	l2991
  9779  029A                     l2997:	
  9780                           
  9781                           ;mrf49xa.c: 103: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = POWERED_OFF;
  9782  029A  0021               	movlb	1	; select bank1
  9783  029B  3080               	movlw	-128
  9784  029C  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
  9785                           
  9786                           ;mrf49xa.c: 104: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0;
  9787  029D  05ED               	andwf	(_mrf49xaInst^(0+128)+77),f
  9788  029E  0008               	return
  9789  029F                     __end_of_Mrf49xaModeSleep:	
  9790                           
  9791                           	psect	text50
  9792  02AC                     __ptext50:	
  9793 ;; *************** function _CfgSave *****************
  9794 ;; Defined at:
  9795 ;;		line 24 in file "../../../src/node/config.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;		None
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;		None
  9800 ;; Return value:  Size  Location     Type
  9801 ;;		None               void
  9802 ;; Registers used:
  9803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9804 ;; Tracked objects:
  9805 ;;		On entry : 1F/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9809 ;;      Params:         0       0       0       0
  9810 ;;      Locals:         0       0       0       0
  9811 ;;      Temps:          0       0       0       0
  9812 ;;      Totals:         0       0       0       0
  9813 ;;Total ram usage:        0 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:    8
  9816 ;; This function calls:
  9817 ;;		_eepromTxBytes
  9818 ;; This function is called by:
  9819 ;;		_handleCfgCmd
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           
  9824                           ;psect for function _CfgSave
  9825  02AC                     _CfgSave:	
  9826  02AC                     l3481:	
  9827                           ;incstack = 0
  9828                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9829                           
  9830  02AC  3036               	movlw	_cfgRam& (0+255)
  9831                           
  9832                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  9833  02AD  01A4               	clrf	eepromTxBytes@address
  9834  02AE  01A5               	clrf	eepromTxBytes@address+1
  9835  02AF  00A6               	movwf	eepromTxBytes@data
  9836  02B0  3009               	movlw	9
  9837  02B1  00A7               	movwf	eepromTxBytes@size
  9838  02B2  3189  29F2         	ljmp	l3143
  9839  02B4                     __end_of_CfgSave:	
  9840                           
  9841                           	psect	intentry
  9842  0004                     __pintentry:	
  9843 ;; *************** function _extInt *****************
  9844 ;; Defined at:
  9845 ;;		line 38 in file "../../../src/bsp/pic16/interrupt.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;		None
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;  ofw             1    7[COMMON] unsigned char 
  9850 ;; Return value:  Size  Location     Type
  9851 ;;		None               void
  9852 ;; Registers used:
  9853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 1F/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9859 ;;      Params:         0       0       0       0
  9860 ;;      Locals:         1       0       0       0
  9861 ;;      Temps:          1       0       0       0
  9862 ;;      Totals:         2       0       0       0
  9863 ;;Total ram usage:        2 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    4
  9866 ;; This function calls:
  9867 ;;		_ExtIntDeinit
  9868 ;;		i1_Mrf49xaNeedsReset
  9869 ;;		i1_Mrf49xaServe
  9870 ;; This function is called by:
  9871 ;;		Interrupt level 1
  9872 ;; This function uses a non-reentrant model
  9873 ;;
  9874                           
  9875  0004                     _extInt:	
  9876                           
  9877                           ;incstack = 0
  9878                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9879  0004  3180               	pagesel	$
  9880  0005  0020               	movlb	0	; select bank0
  9881  0006  087F               	movf	127,w
  9882  0007  00F6               	movwf	??_extInt
  9883                           
  9884                           ;interrupt.c: 40: if (INTCONbits.INTF != 0)
  9885  0008  1C8B               	btfss	11,1	;volatile
  9886  0009  281E               	goto	i1l144
  9887                           
  9888                           ;interrupt.c: 41: {
  9889                           ;interrupt.c: 42: uint8_t ofw = 0;
  9890  000A  01F7               	clrf	extInt@ofw
  9891  000B                     i1l3909:	
  9892                           ;interrupt.c: 43: while (!Mrf49xaServe(&mrf49xaInst))
  9893                           
  9894  000B  30A0               	movlw	_mrf49xaInst& (0+255)
  9895  000C  3180  2030  3180   	fcall	i1_Mrf49xaServe
  9896  000F  3A00               	xorlw	0
  9897  0010  1D03               	btfss	3,2
  9898  0011  281D               	goto	i1l143
  9899                           
  9900                           ;interrupt.c: 44: {
  9901                           ;interrupt.c: 45: ofw++;
  9902  0012  0AF7               	incf	extInt@ofw,f
  9903                           
  9904                           ;interrupt.c: 46: if (ofw == 255)
  9905  0013  0877               	movf	extInt@ofw,w
  9906  0014  3AFF               	xorlw	255
  9907  0015  1D03               	skipz
  9908  0016  280B               	goto	i1l3909
  9909                           
  9910                           ;interrupt.c: 47: {
  9911                           ;interrupt.c: 48: ExtIntDeinit();
  9912  0017  3182  22BA  3180   	fcall	_ExtIntDeinit
  9913                           
  9914                           ;interrupt.c: 49: Mrf49xaNeedsReset(&mrf49xaInst);
  9915  001A  30A0               	movlw	_mrf49xaInst& (0+255)
  9916  001B  3181  2151         	fcall	i1_Mrf49xaNeedsReset
  9917  001D                     i1l143:	
  9918                           ;interrupt.c: 50: break;
  9919                           
  9920                           
  9921                           ;interrupt.c: 51: }
  9922                           ;interrupt.c: 52: }
  9923                           ;interrupt.c: 53: INTCONbits.INTF = 0;
  9924  001D  108B               	bcf	11,1	;volatile
  9925  001E                     i1l144:	
  9926  001E  0876               	movf	??_extInt,w
  9927  001F  0020               	movlb	0	; select bank0
  9928  0020  00FF               	movwf	127
  9929  0021  0009               	retfie
  9930  0022                     __end_of_extInt:	
  9931                           
  9932                           	psect	text74
  9933  0024                     __ptext74:	
  9934 ;; *************** function i1_Mrf49RxCmd *****************
  9935 ;; Defined at:
  9936 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  cmd             1    wreg     unsigned char 
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;  cmd             1    1[COMMON] unsigned char 
  9941 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  9942 ;; Return value:  Size  Location     Type
  9943 ;;                  1    wreg      unsigned char 
  9944 ;; Registers used:
  9945 ;;		wreg, status,2, status,0, pclath, cstack
  9946 ;; Tracked objects:
  9947 ;;		On entry : 1E/1
  9948 ;;		On exit  : 1F/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9951 ;;      Params:         0       0       0       0
  9952 ;;      Locals:         2       0       0       0
  9953 ;;      Temps:          0       0       0       0
  9954 ;;      Totals:         2       0       0       0
  9955 ;;Total ram usage:        2 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:    1
  9958 ;; This function calls:
  9959 ;;		i1_Mrf49SpiRx
  9960 ;;		i1_Mrf49SpiTx
  9961 ;; This function is called by:
  9962 ;;		i1_Mrf49RxByte
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function i1_Mrf49RxCmd
  9968  0024                     i1_Mrf49RxCmd:	
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  9972                           ;i1Mrf49RxCmd@cmd stored from wreg
  9973  0024  00F1               	movwf	i1Mrf49RxCmd@cmd
  9974                           
  9975                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  9976  0025  0020               	movlb	0	; select bank0
  9977  0026  130E               	bcf	14,6	;volatile
  9978                           
  9979                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  9980  0027  0871               	movf	i1Mrf49RxCmd@cmd,w
  9981  0028  215E  3180         	fcall	i1_Mrf49SpiTx
  9982                           
  9983                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  9984  002A  21DC               	fcall	i1_Mrf49SpiRx
  9985  002B  00F2               	movwf	i1Mrf49RxCmd@val
  9986                           
  9987                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  9988  002C  0020               	movlb	0	; select bank0
  9989  002D  170E               	bsf	14,6	;volatile
  9990                           
  9991                           ;mrf49xa_cmd.c: 27: return val;
  9992  002E  0872               	movf	i1Mrf49RxCmd@val,w
  9993  002F  0008               	return
  9994  0030                     __end_ofi1_Mrf49RxCmd:	
  9995  0030                     __ptext67:	
  9996 ;; *************** function i1_Mrf49xaServe *****************
  9997 ;; Defined at:
  9998 ;;		line 7 in file "../../../src/devices/mrf49xa_phy.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10001 ;;		 -> mrf49xaInst(78), 
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10004 ;;		 -> mrf49xaInst(78), 
 10005 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  1    wreg      unsigned char 
 10008 ;; Registers used:
 10009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 1E/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10015 ;;      Params:         0       0       0       0
 10016 ;;      Locals:         1       0       0       0
 10017 ;;      Temps:          1       0       0       0
 10018 ;;      Totals:         2       0       0       0
 10019 ;;Total ram usage:        2 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    3
 10022 ;; This function calls:
 10023 ;;		i1_Mrf49RxByte
 10024 ;;		i1_Mrf49RxSts
 10025 ;;		i1_Mrf49TxByte
 10026 ;;		i1_Mrf49xaModeRx
 10027 ;;		i1_Mrf49xaNeedsReset
 10028 ;; This function is called by:
 10029 ;;		_extInt
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function i1_Mrf49xaServe
 10035  0030                     i1_Mrf49xaServe:	
 10036                           
 10037                           ;mrf49xa_phy.c: 10: uint8_t data;
 10038                           ;mrf49xa_phy.c: 12: if (((Mrf49xaMac_t*)(&mrf49xaInst))->state == POWERED_OFF)
 10039                           
 10040                           ;incstack = 0
 10041                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10042  0030  0021               	movlb	1	; select bank1
 10043  0031  08EB               	movf	(_mrf49xaInst^(0+128)+75),f
 10044  0032  1903               	btfsc	3,2
 10045                           
 10046                           ;mrf49xa_phy.c: 13: return 0;
 10047  0033  3400               	retlw	0
 10048                           
 10049                           ;mrf49xa_phy.c: 16: if (((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset)
 10050  0034  1BED               	btfsc	(_mrf49xaInst^(0+128)+77),7
 10051  0035  3400               	retlw	0
 10052                           
 10053                           ;mrf49xa_phy.c: 19: Mrf49RxSts(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10054  0036  30A0               	movlw	_mrf49xaInst& (0+255)
 10055  0037  21CE  3180         	fcall	i1_Mrf49RxSts
 10056                           
 10057                           ;mrf49xa_phy.c: 21: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] == 0xFF && ((Mrf
      +                          49xaMac_t*)(&mrf49xaInst))->status.byte[1] == 0xFF)
 10058  0039  0021               	movlb	1	; select bank1
 10059  003A  0820               	movf	_mrf49xaInst^(0+128),w
 10060  003B  3AFF               	xorlw	255
 10061  003C  1D03               	skipz
 10062  003D  2842               	goto	i1l464
 10063  003E  0821               	movf	(_mrf49xaInst^(0+128)+1),w
 10064  003F  3AFF               	xorlw	255
 10065  0040  1903               	btfsc	3,2
 10066  0041  3400               	retlw	0
 10067  0042                     i1l464:	
 10068                           ;mrf49xa_phy.c: 26: {
 10069                           
 10070                           
 10071                           ;mrf49xa_phy.c: 28: }
 10072                           ;mrf49xa_phy.c: 31: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.overflow == 1)
 10073  0042  1AA0               	btfsc	_mrf49xaInst^(0+128),5
 10074  0043  2853               	goto	i1l3809
 10075  0044  2861               	goto	i1l465
 10076  0045                     i1l3803:	
 10077                           
 10078                           ;mrf49xa_phy.c: 36: case RECV_DATA:
 10079                           ;mrf49xa_phy.c: 39: data = Mrf49RxByte();
 10080  0045  214E  3180         	fcall	i1_Mrf49RxByte
 10081  0047  00F5               	movwf	i1Mrf49xaServe@data
 10082                           
 10083                           ;mrf49xa_phy.c: 40: data = Mrf49RxByte();
 10084  0048  214E  3180         	fcall	i1_Mrf49RxByte
 10085  004A  00F5               	movwf	i1Mrf49xaServe@data
 10086                           
 10087                           ;mrf49xa_phy.c: 43: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10088  004B  30A0               	movlw	_mrf49xaInst& (0+255)
 10089  004C  2129  3180         	fcall	i1_Mrf49xaModeRx
 10090                           
 10091                           ;mrf49xa_phy.c: 47: break;
 10092  004E  2861               	goto	i1l465
 10093  004F                     i1l3805:	
 10094                           
 10095                           ;mrf49xa_phy.c: 50: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10096  004F  30A0               	movlw	_mrf49xaInst& (0+255)
 10097  0050  2151  3180         	fcall	i1_Mrf49xaNeedsReset
 10098                           
 10099                           ;mrf49xa_phy.c: 51: break;
 10100  0052  2861               	goto	i1l465
 10101  0053                     i1l3809:	
 10102  0053  086B               	movf	(_mrf49xaInst^(0+128)+75),w
 10103                           
 10104                           ; Switch size 1, requested type "space"
 10105                           ; Number of cases is 4, Range of values is 0 to 3
 10106                           ; switch strategies available:
 10107                           ; Name         Instructions Cycles
 10108                           ; simple_byte           13     7 (average)
 10109                           ; direct_byte           14     6 (fixed)
 10110                           ; jumptable            260     6 (fixed)
 10111                           ;	Chosen strategy is simple_byte
 10112  0054  3A00               	xorlw	0	; case 0
 10113  0055  1903               	skipnz
 10114  0056  284F               	goto	i1l3805
 10115  0057  3A01               	xorlw	1	; case 1
 10116  0058  1903               	skipnz
 10117  0059  2845               	goto	i1l3803
 10118  005A  3A03               	xorlw	3	; case 2
 10119  005B  1903               	skipnz
 10120  005C  2845               	goto	i1l3803
 10121  005D  3A01               	xorlw	1	; case 3
 10122  005E  1903               	skipnz
 10123  005F  2861               	goto	i1l465
 10124  0060  2861               	goto	i1l465
 10125  0061                     i1l465:	
 10126                           
 10127                           ;mrf49xa_phy.c: 60: }
 10128                           ;mrf49xa_phy.c: 69: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx == 1)
 10129  0061  1BA0               	btfsc	_mrf49xaInst^(0+128),7
 10130  0062  2911               	goto	i1l3891
 10131  0063  291F               	goto	i1l3893
 10132  0064                     i1l3813:	
 10133                           
 10134                           ;mrf49xa_phy.c: 76: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10135  0064  30A0               	movlw	_mrf49xaInst& (0+255)
 10136  0065  2151  3180         	fcall	i1_Mrf49xaNeedsReset
 10137                           
 10138                           ;mrf49xa_phy.c: 77: break;
 10139  0067  291F               	goto	i1l3893
 10140  0068                     i1l3815:	
 10141                           
 10142                           ;mrf49xa_phy.c: 81: data = Mrf49RxByte();
 10143  0068  214E  3180         	fcall	i1_Mrf49RxByte
 10144  006A  00F5               	movwf	i1Mrf49xaServe@data
 10145                           
 10146                           ;mrf49xa_phy.c: 85: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK 
      +                          == 0)
 10147  006B  0021               	movlb	1	; select bank1
 10148  006C  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
 10149  006D  2872               	goto	i1l3821
 10150                           
 10151                           ;mrf49xa_phy.c: 86: {
 10152                           ;mrf49xa_phy.c: 87: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10153  006E  30A0               	movlw	_mrf49xaInst& (0+255)
 10154  006F  2129  3180         	fcall	i1_Mrf49xaModeRx
 10155                           
 10156                           ;mrf49xa_phy.c: 88: break;
 10157  0071  291F               	goto	i1l3893
 10158  0072                     i1l3821:	
 10159                           
 10160                           ;mrf49xa_phy.c: 89: }
 10161                           ;mrf49xa_phy.c: 91: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_FREE) 
      +                          ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
 10162  0072  08A3               	movf	(_mrf49xaInst^(0+128)+3),f
 10163  0073  1D03               	skipz
 10164  0074  2877               	goto	i1l3825
 10165  0075  30A3               	movlw	(_mrf49xaInst+3)& (0+255)
 10166  0076  287B               	goto	L4
 10167  0077                     i1l3825:	
 10168                           
 10169                           ;mrf49xa_phy.c: 92: else if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_F
      +                          REE) ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket
      +                          [1]);
 10170  0077  08BB               	movf	(_mrf49xaInst^(0+128)+27),f
 10171  0078  1D03               	skipz
 10172  0079  287D               	goto	i1l3829
 10173  007A  30BB               	movlw	(_mrf49xaInst+27)& (0+255)
 10174  007B                     L4:	
 10175  007B  00A2               	movwf	(_mrf49xaInst+2)^(0+128)
 10176  007C  2881               	goto	i1l3831
 10177  007D                     i1l3829:	
 10178                           
 10179                           ;mrf49xa_phy.c: 93: else
 10180                           ;mrf49xa_phy.c: 94: {
 10181                           ;mrf49xa_phy.c: 97: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10182  007D  30A0               	movlw	_mrf49xaInst& (0+255)
 10183  007E  2129  3180         	fcall	i1_Mrf49xaModeRx
 10184                           
 10185                           ;mrf49xa_phy.c: 98: break;
 10186  0080  291F               	goto	i1l3893
 10187  0081                     i1l3831:	
 10188                           
 10189                           ;mrf49xa_phy.c: 99: }
 10190                           ;mrf49xa_phy.c: 101: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->packet.size = data;
 10191  0081  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
 10192  0082  0086               	movwf	6
 10193  0083  0187               	clrf	7
 10194  0084  0875               	movf	i1Mrf49xaServe@data,w
 10195  0085  0081               	movwf	1
 10196                           
 10197                           ;mrf49xa_phy.c: 102: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = 0;
 10198  0086  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10199  0087  3E16               	addlw	22
 10200  0088  0086               	movwf	6
 10201  0089  0181               	clrf	1
 10202                           
 10203                           ;mrf49xa_phy.c: 103: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_BUSY_RX;
 10204  008A  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10205  008B  0086               	movwf	6
 10206  008C  3004               	movlw	4
 10207  008D  0081               	movwf	1
 10208                           
 10209                           ;mrf49xa_phy.c: 105: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_DATA;
 10210  008E  3002               	movlw	2
 10211  008F  00EB               	movwf	(_mrf49xaInst^(0+128)+75)
 10212                           
 10213                           ;mrf49xa_phy.c: 106: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 1;
 10214  0090  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10215  0091  3980               	andlw	-128
 10216  0092  3801               	iorlw	1
 10217  0093  28C2               	goto	L5
 10218  0094                     i1l3841:	
 10219                           ;mrf49xa_phy.c: 108: break;
 10220                           
 10221                           
 10222                           ;mrf49xa_phy.c: 112: data = Mrf49RxByte();
 10223  0094  214E  3180         	fcall	i1_Mrf49RxByte
 10224  0096  00F5               	movwf	i1Mrf49xaServe@data
 10225                           
 10226                           ;mrf49xa_phy.c: 116: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK
      +                           == 0)
 10227  0097  0021               	movlb	1	; select bank1
 10228  0098  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
 10229  0099  28A2               	goto	i1l3849
 10230                           
 10231                           ;mrf49xa_phy.c: 117: {
 10232                           ;mrf49xa_phy.c: 118: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_FREE;
 10233  009A  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10234  009B  0086               	movwf	6
 10235  009C  30A0               	movlw	_mrf49xaInst& (0+255)
 10236  009D  0187               	clrf	7
 10237  009E  0181               	clrf	1
 10238                           
 10239                           ;mrf49xa_phy.c: 119: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10240  009F  2129  3180         	fcall	i1_Mrf49xaModeRx
 10241                           
 10242                           ;mrf49xa_phy.c: 120: break;
 10243  00A1  291F               	goto	i1l3893
 10244  00A2                     i1l3849:	
 10245                           
 10246                           ;mrf49xa_phy.c: 121: }
 10247                           ;mrf49xa_phy.c: 123: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->hwRx->packet.size)
 10248  00A2  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
 10249  00A3  0086               	movwf	6
 10250  00A4  0187               	clrf	7
 10251  00A5  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10252  00A6  397F               	andlw	127
 10253  00A7  0601               	xorwf	1,w
 10254  00A8  1D03               	skipz
 10255  00A9  28B7               	goto	i1l3855
 10256                           
 10257                           ;mrf49xa_phy.c: 124: {
 10258                           ;mrf49xa_phy.c: 125: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = data;
 10259  00AA  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10260  00AB  3E16               	addlw	22
 10261  00AC  0086               	movwf	6
 10262  00AD  0875               	movf	i1Mrf49xaServe@data,w
 10263  00AE  0081               	movwf	1
 10264                           
 10265                           ;mrf49xa_phy.c: 129: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_READY_RX;
 10266  00AF  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10267  00B0  0086               	movwf	6
 10268  00B1  3005               	movlw	5
 10269  00B2  0081               	movwf	1
 10270                           
 10271                           ;mrf49xa_phy.c: 135: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10272  00B3  30A0               	movlw	_mrf49xaInst& (0+255)
 10273  00B4  2129  3180         	fcall	i1_Mrf49xaModeRx
 10274                           
 10275                           ;mrf49xa_phy.c: 137: }
 10276  00B6  291F               	goto	i1l3893
 10277  00B7                     i1l3855:	
 10278                           
 10279                           ;mrf49xa_phy.c: 138: else
 10280                           ;mrf49xa_phy.c: 139: {
 10281                           ;mrf49xa_phy.c: 140: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->raw[((Mrf49xaMac_t*)(&mrf49x
      +                          aInst))->hwByte++] = data;
 10282  00B7  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10283  00B8  397F               	andlw	127
 10284  00B9  0722               	addwf	(_mrf49xaInst+2)^(0+128),w
 10285  00BA  00F4               	movwf	??i1_Mrf49xaServe
 10286  00BB  0A74               	incf	??i1_Mrf49xaServe,w
 10287  00BC  0086               	movwf	6
 10288  00BD  0187               	clrf	7
 10289  00BE  0875               	movf	i1Mrf49xaServe@data,w
 10290  00BF  0081               	movwf	1
 10291  00C0  2220  3180         	fcall	PL14	;call to abstracted procedure
 10292  00C2                     L5:	
 10293  00C2  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
 10294  00C3  291F               	goto	i1l3893
 10295  00C4                     i1l3859:	
 10296                           
 10297                           ;mrf49xa_phy.c: 146: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte++;
 10298  00C4  2220  3180         	fcall	PL14	;call to abstracted procedure
 10299  00C6  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
 10300                           
 10301                           ;mrf49xa_phy.c: 148: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->txPacket.packet.size)
 10302  00C7  397F               	andlw	127
 10303  00C8  0654               	xorwf	(_mrf49xaInst^(0+128)+52),w
 10304  00C9  1D03               	skipz
 10305  00CA  28FF               	goto	i1l3887
 10306                           
 10307                           ;mrf49xa_phy.c: 149: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 49;
 10308  00CB  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10309  00CC  3980               	andlw	-128
 10310  00CD  3831               	iorlw	49
 10311  00CE  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
 10312  00CF  28FF               	goto	i1l3887
 10313  00D0                     i1l3863:	
 10314                           
 10315                           ;mrf49xa_phy.c: 154: Mrf49TxByte(0x2D);
 10316  00D0  302D               	movlw	45
 10317  00D1  2124  3180         	fcall	i1_Mrf49TxByte
 10318                           
 10319                           ;mrf49xa_phy.c: 155: break;
 10320  00D3  291F               	goto	i1l3893
 10321  00D4                     i1l3865:	
 10322                           
 10323                           ;mrf49xa_phy.c: 158: Mrf49TxByte(0xD4);
 10324  00D4  30D4               	movlw	212
 10325  00D5  2124  3180         	fcall	i1_Mrf49TxByte
 10326                           
 10327                           ;mrf49xa_phy.c: 159: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0x7F;
 10328  00D7  307F               	movlw	127
 10329  00D8  0021               	movlb	1	; select bank1
 10330  00D9  04ED               	iorwf	(_mrf49xaInst^(0+128)+77),f
 10331                           
 10332                           ;mrf49xa_phy.c: 160: break;
 10333  00DA  291F               	goto	i1l3893
 10334  00DB                     i1l3869:	
 10335                           
 10336                           ;mrf49xa_phy.c: 164: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[((Mrf49xa
      +                          Mac_t*)(&mrf49xaInst))->hwByte]);
 10337  00DB  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10338  00DC  397F               	andlw	127
 10339  00DD  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
 10340  00DE  0086               	movwf	6
 10341  00DF  0187               	clrf	7
 10342  00E0  0801               	movf	1,w
 10343  00E1  2124  3180         	fcall	i1_Mrf49TxByte
 10344                           
 10345                           ;mrf49xa_phy.c: 165: break;
 10346  00E3  291F               	goto	i1l3893
 10347  00E4                     i1l3871:	
 10348                           
 10349                           ;mrf49xa_phy.c: 168: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc);
 10350  00E4  0869               	movf	(_mrf49xaInst^(0+128)+73),w
 10351  00E5  2124  3180         	fcall	i1_Mrf49TxByte
 10352                           
 10353                           ;mrf49xa_phy.c: 169: break;
 10354  00E7  291F               	goto	i1l3893
 10355  00E8                     i1l3873:	
 10356                           
 10357                           ;mrf49xa_phy.c: 172: Mrf49TxByte(0x00);
 10358  00E8  3000               	movlw	0
 10359  00E9  2124  3180         	fcall	i1_Mrf49TxByte
 10360                           
 10361                           ;mrf49xa_phy.c: 173: break;
 10362  00EB  291F               	goto	i1l3893
 10363  00EC                     i1l3875:	
 10364                           
 10365                           ;mrf49xa_phy.c: 176: Mrf49TxByte(0x00);
 10366  00EC  3000               	movlw	0
 10367  00ED  2124  3180         	fcall	i1_Mrf49TxByte
 10368                           
 10369                           ;mrf49xa_phy.c: 177: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10370  00EF  2129  3180         	fcall	i1_Mrf49xaModeRx
 10371                           
 10372                           ;mrf49xa_phy.c: 179: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
 10373  00F1  30F0               	movlw	-16
 10374  00F2  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
 10375                           
 10376                           ;mrf49xa_phy.c: 181: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck == NEED_ACK)
 10377  00F3  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
 10378  00F4  0C89               	rrf	9,f
 10379  00F5  0C89               	rrf	9,f
 10380  00F6  3903               	andlw	3
 10381  00F7  3A01               	xorlw	1
 10382  00F8  1D03               	skipz
 10383  00F9  28FD               	goto	i1l3883
 10384                           
 10385                           ;mrf49xa_phy.c: 182: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_WAITING_FOR_A
      +                          CK;
 10386  00FA  3003               	movlw	3
 10387  00FB  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
 10388  00FC  291F               	goto	i1l3893
 10389  00FD                     i1l3883:	
 10390                           
 10391                           ;mrf49xa_phy.c: 183: else
 10392                           ;mrf49xa_phy.c: 184: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_FREE;
 10393  00FD  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
 10394  00FE  291F               	goto	i1l3893
 10395  00FF                     i1l3887:	
 10396  00FF  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10397  0100  397F               	andlw	127
 10398                           
 10399                           ; Switch size 1, requested type "space"
 10400                           ; Number of cases is 5, Range of values is 49 to 101
 10401                           ; switch strategies available:
 10402                           ; Name         Instructions Cycles
 10403                           ; simple_byte           16     9 (average)
 10404                           ; direct_byte          115     9 (fixed)
 10405                           ; jumptable            263     9 (fixed)
 10406                           ;	Chosen strategy is simple_byte
 10407  0101  3A31               	xorlw	49	; case 49
 10408  0102  1903               	skipnz
 10409  0103  28E4               	goto	i1l3871
 10410  0104  3A03               	xorlw	3	; case 50
 10411  0105  1903               	skipnz
 10412  0106  28E8               	goto	i1l3873
 10413  0107  3A01               	xorlw	1	; case 51
 10414  0108  1903               	skipnz
 10415  0109  28EC               	goto	i1l3875
 10416  010A  3A57               	xorlw	87	; case 100
 10417  010B  1903               	skipnz
 10418  010C  28D0               	goto	i1l3863
 10419  010D  3A01               	xorlw	1	; case 101
 10420  010E  1903               	skipnz
 10421  010F  28D4               	goto	i1l3865
 10422  0110  28DB               	goto	i1l3869
 10423  0111                     i1l3891:	
 10424  0111  086B               	movf	(_mrf49xaInst^(0+128)+75),w
 10425                           
 10426                           ; Switch size 1, requested type "space"
 10427                           ; Number of cases is 4, Range of values is 0 to 3
 10428                           ; switch strategies available:
 10429                           ; Name         Instructions Cycles
 10430                           ; simple_byte           13     7 (average)
 10431                           ; direct_byte           14     6 (fixed)
 10432                           ; jumptable            260     6 (fixed)
 10433                           ;	Chosen strategy is simple_byte
 10434  0112  3A00               	xorlw	0	; case 0
 10435  0113  1903               	skipnz
 10436  0114  2864               	goto	i1l3813
 10437  0115  3A01               	xorlw	1	; case 1
 10438  0116  1903               	skipnz
 10439  0117  2868               	goto	i1l3815
 10440  0118  3A03               	xorlw	3	; case 2
 10441  0119  1903               	skipnz
 10442  011A  2894               	goto	i1l3841
 10443  011B  3A01               	xorlw	1	; case 3
 10444  011C  1903               	skipnz
 10445  011D  28C4               	goto	i1l3859
 10446  011E  291F               	goto	i1l3893
 10447  011F                     i1l3893:	
 10448                           
 10449                           ;mrf49xa_phy.c: 191: }
 10450                           ;mrf49xa_phy.c: 205: return PORTAbits.RA2 == 1 ? 1 : 0;
 10451  011F  0020               	movlb	0	; select bank0
 10452  0120  0C0C               	rrf	12,w	;volatile
 10453  0121  0C89               	rrf	9,f
 10454  0122  3901               	andlw	1
 10455  0123  0008               	return
 10456  0124                     __end_ofi1_Mrf49xaServe:	
 10457  0124                     __ptext70:	
 10458 ;; *************** function i1_Mrf49TxByte *****************
 10459 ;; Defined at:
 10460 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  byte            1    wreg     unsigned char 
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  byte            1    3[COMMON] unsigned char 
 10465 ;; Return value:  Size  Location     Type
 10466 ;;		None               void
 10467 ;; Registers used:
 10468 ;;		wreg, status,2, status,0, pclath, cstack
 10469 ;; Tracked objects:
 10470 ;;		On entry : 1E/1
 10471 ;;		On exit  : 1F/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10474 ;;      Params:         0       0       0       0
 10475 ;;      Locals:         1       0       0       0
 10476 ;;      Temps:          0       0       0       0
 10477 ;;      Totals:         1       0       0       0
 10478 ;;Total ram usage:        1 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; Hardware stack levels required when called:    2
 10481 ;; This function calls:
 10482 ;;		i1_Mrf49TxCmd
 10483 ;; This function is called by:
 10484 ;;		i1_Mrf49xaServe
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           
 10489                           ;psect for function i1_Mrf49TxByte
 10490  0124                     i1_Mrf49TxByte:	
 10491                           
 10492                           ;incstack = 0
 10493                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10494                           ;i1Mrf49TxByte@byte stored from wreg
 10495  0124  00F3               	movwf	i1Mrf49TxByte@byte
 10496                           
 10497                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10498  0125  00F1               	movwf	i1Mrf49TxCmd@val
 10499  0126  30B8               	movlw	184
 10500  0127  2154               	fcall	i1_Mrf49TxCmd
 10501  0128  0008               	return
 10502  0129                     __end_ofi1_Mrf49TxByte:	
 10503  0129                     __ptext69:	
 10504 ;; *************** function i1_Mrf49xaModeRx *****************
 10505 ;; Defined at:
 10506 ;;		line 75 in file "../../../src/devices/mrf49xa.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10509 ;;		 -> mrf49xaInst(78), 
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10512 ;;		 -> mrf49xaInst(78), 
 10513 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10514 ;; Return value:  Size  Location     Type
 10515 ;;		None               void
 10516 ;; Registers used:
 10517 ;;		wreg, status,2, status,0, pclath, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 1E/0
 10520 ;;		On exit  : 1F/1
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10523 ;;      Params:         0       0       0       0
 10524 ;;      Locals:         1       0       0       0
 10525 ;;      Temps:          0       0       0       0
 10526 ;;      Totals:         1       0       0       0
 10527 ;;Total ram usage:        1 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    2
 10530 ;; This function calls:
 10531 ;;		i1_Mrf49TxCmd
 10532 ;; This function is called by:
 10533 ;;		i1_Mrf49xaServe
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           
 10538                           ;psect for function i1_Mrf49xaModeRx
 10539  0129                     i1_Mrf49xaModeRx:	
 10540  0129  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10541                           
 10542                           ;mrf49xa.c: 77: UI08_t k;
 10543                           ;mrf49xa.c: 78: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg, 
      +                          mrfRegset_Rx[k].val); };
 10544                           
 10545                           ;incstack = 0
 10546                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10547  012A  01F3               	clrf	i1Mrf49xaModeRx@k
 10548  012B  3182               	movlp	high __stringtab
 10549  012C  000A               	callw
 10550  012D  3180               	pagesel	$	;select current page
 10551  012E  3800               	iorlw	0
 10552  012F  1D03               	skipz
 10553  0130  2933               	goto	i1l3765
 10554  0131  0020               	movlb	0	; select bank0
 10555  0132  2947               	goto	i1l211
 10556  0133                     i1l3765:	
 10557  0133  3573               	lslf	i1Mrf49xaModeRx@k,w
 10558  0134  3E4F               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10559  0135  3182               	movlp	high __stringtab
 10560  0136  000A               	callw
 10561  0137  00F1               	movwf	i1Mrf49TxCmd@val
 10562  0138  3573               	lslf	i1Mrf49xaModeRx@k,w
 10563  0139  3E4E               	addlw	low (_mrfRegset_Rx| (0+32768))
 10564  013A  3182               	movlp	high __stringtab
 10565  013B  000A               	callw
 10566  013C  3180               	pagesel	$	;select current page
 10567  013D  3181  2154         	fcall	i1_Mrf49TxCmd
 10568  013F  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10569  0140  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10570  0141  3182               	movlp	high __stringtab
 10571  0142  000A               	callw
 10572  0143  3180               	pagesel	$	;select current page
 10573  0144  0273               	subwf	i1Mrf49xaModeRx@k,w
 10574  0145  1C03               	skipc
 10575  0146  2933               	goto	i1l3765
 10576  0147                     i1l211:	
 10577                           
 10578                           ;mrf49xa.c: 81: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_IDLE;
 10579  0147  0021               	movlb	1	; select bank1
 10580  0148  3080               	movlw	-128
 10581  0149  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
 10582  014A  0AEB               	incf	(_mrf49xaInst^(0+128)+75),f
 10583                           
 10584                           ;mrf49xa.c: 82: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0;
 10585  014B  05ED               	andwf	(_mrf49xaInst^(0+128)+77),f
 10586                           
 10587                           ;mrf49xa.c: 84: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx = 0;
 10588  014C  13A0               	bcf	_mrf49xaInst^(0+128),7
 10589  014D  0008               	return
 10590  014E                     __end_ofi1_Mrf49xaModeRx:	
 10591  014E                     __ptext73:	
 10592 ;; *************** function i1_Mrf49RxByte *****************
 10593 ;; Defined at:
 10594 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      unsigned char 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0, pclath, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 1E/1
 10605 ;;		On exit  : 1F/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10608 ;;      Params:         0       0       0       0
 10609 ;;      Locals:         0       0       0       0
 10610 ;;      Temps:          0       0       0       0
 10611 ;;      Totals:         0       0       0       0
 10612 ;;Total ram usage:        0 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    2
 10615 ;; This function calls:
 10616 ;;		i1_Mrf49RxCmd
 10617 ;; This function is called by:
 10618 ;;		i1_Mrf49xaServe
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function i1_Mrf49RxByte
 10624  014E                     i1_Mrf49RxByte:	
 10625                           
 10626                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10630  014E  30B0               	movlw	176
 10631  014F  2024               	fcall	i1_Mrf49RxCmd
 10632  0150  0008               	return
 10633  0151                     __end_ofi1_Mrf49RxByte:	
 10634  0151                     __ptext68:	
 10635 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10636 ;; Defined at:
 10637 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10640 ;;		 -> mrf49xaInst(78), 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10643 ;;		 -> mrf49xaInst(78), 
 10644 ;; Return value:  Size  Location     Type
 10645 ;;		None               void
 10646 ;; Registers used:
 10647 ;;		wreg
 10648 ;; Tracked objects:
 10649 ;;		On entry : 1E/0
 10650 ;;		On exit  : 1F/1
 10651 ;;		Unchanged: 0/0
 10652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10653 ;;      Params:         0       0       0       0
 10654 ;;      Locals:         0       0       0       0
 10655 ;;      Temps:          0       0       0       0
 10656 ;;      Totals:         0       0       0       0
 10657 ;;Total ram usage:        0 bytes
 10658 ;; Hardware stack levels used:    1
 10659 ;; This function calls:
 10660 ;;		Nothing
 10661 ;; This function is called by:
 10662 ;;		_extInt
 10663 ;;		i1_Mrf49xaServe
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           
 10668                           ;psect for function i1_Mrf49xaNeedsReset
 10669  0151                     i1_Mrf49xaNeedsReset:	
 10670                           
 10671                           ;mrf49xa.c: 123: ((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset = 1;
 10672                           
 10673                           ;incstack = 0
 10674                           ; Regs used in i1_Mrf49xaNeedsReset: [wreg]
 10675  0151  0021               	movlb	1	; select bank1
 10676  0152  17ED               	bsf	(_mrf49xaInst^(0+128)+77),7
 10677  0153  0008               	return
 10678  0154                     __end_ofi1_Mrf49xaNeedsReset:	
 10679  0154                     __ptext71:	
 10680 ;; *************** function i1_Mrf49TxCmd *****************
 10681 ;; Defined at:
 10682 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;  cmd             1    wreg     unsigned char 
 10685 ;;  val             1    1[COMMON] unsigned char 
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;  cmd             1    2[COMMON] unsigned char 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0, pclath, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 1E/0
 10694 ;;		On exit  : 1F/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10697 ;;      Params:         1       0       0       0
 10698 ;;      Locals:         1       0       0       0
 10699 ;;      Temps:          0       0       0       0
 10700 ;;      Totals:         2       0       0       0
 10701 ;;Total ram usage:        2 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    1
 10704 ;; This function calls:
 10705 ;;		i1_Mrf49SpiTx
 10706 ;; This function is called by:
 10707 ;;		i1_Mrf49xaModeRx
 10708 ;;		i1_Mrf49TxByte
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           
 10713                           ;psect for function i1_Mrf49TxCmd
 10714  0154                     i1_Mrf49TxCmd:	
 10715                           
 10716                           ;incstack = 0
 10717                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 10718                           ;i1Mrf49TxCmd@cmd stored from wreg
 10719  0154  00F2               	movwf	i1Mrf49TxCmd@cmd
 10720                           
 10721                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 10722  0155  0020               	movlb	0	; select bank0
 10723  0156  130E               	bcf	14,6	;volatile
 10724                           
 10725                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 10726  0157  0872               	movf	i1Mrf49TxCmd@cmd,w
 10727  0158  215E  3180         	fcall	i1_Mrf49SpiTx
 10728                           
 10729                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 10730  015A  0871               	movf	i1Mrf49TxCmd@val,w
 10731  015B  215E               	fcall	i1_Mrf49SpiTx
 10732                           
 10733                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 10734  015C  170E               	bsf	14,6	;volatile
 10735  015D  0008               	return
 10736  015E                     __end_ofi1_Mrf49TxCmd:	
 10737  015E                     __ptext75:	
 10738 ;; *************** function i1_Mrf49SpiTx *****************
 10739 ;; Defined at:
 10740 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;  byte            1    wreg     unsigned char 
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;  byte            1    0[COMMON] unsigned char 
 10745 ;; Return value:  Size  Location     Type
 10746 ;;		None               void
 10747 ;; Registers used:
 10748 ;;		wreg
 10749 ;; Tracked objects:
 10750 ;;		On entry : 1F/0
 10751 ;;		On exit  : 1F/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10754 ;;      Params:         0       0       0       0
 10755 ;;      Locals:         1       0       0       0
 10756 ;;      Temps:          0       0       0       0
 10757 ;;      Totals:         1       0       0       0
 10758 ;;Total ram usage:        1 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; This function calls:
 10761 ;;		Nothing
 10762 ;; This function is called by:
 10763 ;;		i1_Mrf49TxCmd
 10764 ;;		i1_Mrf49RxCmd
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function i1_Mrf49SpiTx
 10770  015E                     i1_Mrf49SpiTx:	
 10771                           
 10772                           ;incstack = 0
 10773                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 10774                           ;i1Mrf49SpiTx@byte stored from wreg
 10775  015E  00F0               	movwf	i1Mrf49SpiTx@byte
 10776                           
 10777                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 10778  015F  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 10779  0160  2963               	goto	i1l255
 10780  0161  178D               	bsf	13,7	;volatile
 10781  0162  2964               	goto	i1l256
 10782  0163                     i1l255:	
 10783  0163  138D               	bcf	13,7	;volatile
 10784  0164                     i1l256:	
 10785  0164  0022               	movlb	2	; select bank2
 10786  0165  178E               	bsf	14,7	;volatile
 10787  0166  0000               	nop	;# 
 10788  0167  0022               	movlb	2	; select bank2
 10789  0168  138E               	bcf	14,7	;volatile
 10790  0169  1B70               	btfsc	i1Mrf49SpiTx@byte,6
 10791  016A  296D               	goto	i1l3681
 10792  016B  0020               	movlb	0	; select bank0
 10793  016C  2970               	goto	i1l259
 10794  016D                     i1l3681:	
 10795  016D  0020               	movlb	0	; select bank0
 10796  016E  178D               	bsf	13,7	;volatile
 10797  016F  2972               	goto	i1l260
 10798  0170                     i1l259:	
 10799  0170  0020               	movlb	0	; select bank0
 10800  0171  138D               	bcf	13,7	;volatile
 10801  0172                     i1l260:	
 10802  0172  0022               	movlb	2	; select bank2
 10803  0173  178E               	bsf	14,7	;volatile
 10804  0174  0000               	nop	;# 
 10805  0175  0022               	movlb	2	; select bank2
 10806  0176  138E               	bcf	14,7	;volatile
 10807  0177  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
 10808  0178  297B               	goto	i1l3685
 10809  0179  0020               	movlb	0	; select bank0
 10810  017A  297E               	goto	i1l263
 10811  017B                     i1l3685:	
 10812  017B  0020               	movlb	0	; select bank0
 10813  017C  178D               	bsf	13,7	;volatile
 10814  017D  2980               	goto	i1l264
 10815  017E                     i1l263:	
 10816  017E  0020               	movlb	0	; select bank0
 10817  017F  138D               	bcf	13,7	;volatile
 10818  0180                     i1l264:	
 10819  0180  0022               	movlb	2	; select bank2
 10820  0181  178E               	bsf	14,7	;volatile
 10821  0182  0000               	nop	;# 
 10822  0183  0022               	movlb	2	; select bank2
 10823  0184  138E               	bcf	14,7	;volatile
 10824  0185  1A70               	btfsc	i1Mrf49SpiTx@byte,4
 10825  0186  2989               	goto	i1l3689
 10826  0187  0020               	movlb	0	; select bank0
 10827  0188  298C               	goto	i1l267
 10828  0189                     i1l3689:	
 10829  0189  0020               	movlb	0	; select bank0
 10830  018A  178D               	bsf	13,7	;volatile
 10831  018B  298E               	goto	i1l268
 10832  018C                     i1l267:	
 10833  018C  0020               	movlb	0	; select bank0
 10834  018D  138D               	bcf	13,7	;volatile
 10835  018E                     i1l268:	
 10836  018E  0022               	movlb	2	; select bank2
 10837  018F  178E               	bsf	14,7	;volatile
 10838  0190  0000               	nop	;# 
 10839  0191  0022               	movlb	2	; select bank2
 10840  0192  138E               	bcf	14,7	;volatile
 10841  0193  19F0               	btfsc	i1Mrf49SpiTx@byte,3
 10842  0194  2997               	goto	i1l3693
 10843  0195  0020               	movlb	0	; select bank0
 10844  0196  299A               	goto	i1l271
 10845  0197                     i1l3693:	
 10846  0197  0020               	movlb	0	; select bank0
 10847  0198  178D               	bsf	13,7	;volatile
 10848  0199  299C               	goto	i1l272
 10849  019A                     i1l271:	
 10850  019A  0020               	movlb	0	; select bank0
 10851  019B  138D               	bcf	13,7	;volatile
 10852  019C                     i1l272:	
 10853  019C  0022               	movlb	2	; select bank2
 10854  019D  178E               	bsf	14,7	;volatile
 10855  019E  0000               	nop	;# 
 10856  019F  0022               	movlb	2	; select bank2
 10857  01A0  138E               	bcf	14,7	;volatile
 10858  01A1  1970               	btfsc	i1Mrf49SpiTx@byte,2
 10859  01A2  29A5               	goto	i1l3697
 10860  01A3  0020               	movlb	0	; select bank0
 10861  01A4  29A8               	goto	i1l275
 10862  01A5                     i1l3697:	
 10863  01A5  0020               	movlb	0	; select bank0
 10864  01A6  178D               	bsf	13,7	;volatile
 10865  01A7  29AA               	goto	i1l276
 10866  01A8                     i1l275:	
 10867  01A8  0020               	movlb	0	; select bank0
 10868  01A9  138D               	bcf	13,7	;volatile
 10869  01AA                     i1l276:	
 10870  01AA  0022               	movlb	2	; select bank2
 10871  01AB  178E               	bsf	14,7	;volatile
 10872  01AC  0000               	nop	;# 
 10873  01AD  0022               	movlb	2	; select bank2
 10874  01AE  138E               	bcf	14,7	;volatile
 10875  01AF  18F0               	btfsc	i1Mrf49SpiTx@byte,1
 10876  01B0  29B3               	goto	i1l3701
 10877  01B1  0020               	movlb	0	; select bank0
 10878  01B2  29B6               	goto	i1l279
 10879  01B3                     i1l3701:	
 10880  01B3  0020               	movlb	0	; select bank0
 10881  01B4  178D               	bsf	13,7	;volatile
 10882  01B5  29B8               	goto	i1l280
 10883  01B6                     i1l279:	
 10884  01B6  0020               	movlb	0	; select bank0
 10885  01B7  138D               	bcf	13,7	;volatile
 10886  01B8                     i1l280:	
 10887  01B8  0022               	movlb	2	; select bank2
 10888  01B9  178E               	bsf	14,7	;volatile
 10889  01BA  0000               	nop	;# 
 10890  01BB  0022               	movlb	2	; select bank2
 10891  01BC  138E               	bcf	14,7	;volatile
 10892  01BD  1870               	btfsc	i1Mrf49SpiTx@byte,0
 10893  01BE  29C1               	goto	i1l3705
 10894  01BF  0020               	movlb	0	; select bank0
 10895  01C0  29C4               	goto	i1l283
 10896  01C1                     i1l3705:	
 10897  01C1  0020               	movlb	0	; select bank0
 10898  01C2  178D               	bsf	13,7	;volatile
 10899  01C3  29C6               	goto	i1l284
 10900  01C4                     i1l283:	
 10901  01C4  0020               	movlb	0	; select bank0
 10902  01C5  138D               	bcf	13,7	;volatile
 10903  01C6                     i1l284:	
 10904  01C6  0022               	movlb	2	; select bank2
 10905  01C7  178E               	bsf	14,7	;volatile
 10906  01C8  0000               	nop	;# 
 10907  01C9  0022               	movlb	2	; select bank2
 10908  01CA  138E               	bcf	14,7	;volatile
 10909                           
 10910                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 10911  01CB  0020               	movlb	0	; select bank0
 10912  01CC  138D               	bcf	13,7	;volatile
 10913  01CD  0008               	return
 10914  01CE                     __end_ofi1_Mrf49SpiTx:	
 10915  01CE                     __ptext72:	
 10916 ;; *************** function i1_Mrf49RxSts *****************
 10917 ;; Defined at:
 10918 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 10919 ;; Parameters:    Size  Location     Type
 10920 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10921 ;;		 -> mrf49xaInst(78), 
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10924 ;;		 -> mrf49xaInst(78), 
 10925 ;; Return value:  Size  Location     Type
 10926 ;;		None               void
 10927 ;; Registers used:
 10928 ;;		wreg, status,2, pclath, cstack
 10929 ;; Tracked objects:
 10930 ;;		On entry : 1F/1
 10931 ;;		On exit  : 1F/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10934 ;;      Params:         0       0       0       0
 10935 ;;      Locals:         0       0       0       0
 10936 ;;      Temps:          0       0       0       0
 10937 ;;      Totals:         0       0       0       0
 10938 ;;Total ram usage:        0 bytes
 10939 ;; Hardware stack levels used:    1
 10940 ;; Hardware stack levels required when called:    1
 10941 ;; This function calls:
 10942 ;;		i1_Mrf49SpiRx
 10943 ;; This function is called by:
 10944 ;;		i1_Mrf49xaServe
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           
 10949                           ;psect for function i1_Mrf49RxSts
 10950  01CE                     i1_Mrf49RxSts:	
 10951                           
 10952                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 10953                           
 10954                           ;incstack = 0
 10955                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 10956  01CE  120B               	bcf	11,4	;volatile
 10957                           
 10958                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 10959  01CF  0020               	movlb	0	; select bank0
 10960  01D0  130E               	bcf	14,6	;volatile
 10961                           
 10962                           ;mrf49xa_cmd.c: 36: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] = Mrf49SpiRx();
 10963  01D1  21DC  3180         	fcall	i1_Mrf49SpiRx
 10964  01D3  0021               	movlb	1	; select bank1
 10965  01D4  00A0               	movwf	_mrf49xaInst^(0+128)
 10966                           
 10967                           ;mrf49xa_cmd.c: 37: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[1] = Mrf49SpiRx();
 10968  01D5  21DC               	fcall	i1_Mrf49SpiRx
 10969  01D6  0021               	movlb	1	; select bank1
 10970  01D7  00A1               	movwf	(_mrf49xaInst^(0+128)+1)
 10971                           
 10972                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 10973  01D8  0020               	movlb	0	; select bank0
 10974  01D9  170E               	bsf	14,6	;volatile
 10975                           
 10976                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 10977  01DA  160B               	bsf	11,4	;volatile
 10978  01DB  0008               	return
 10979  01DC                     __end_ofi1_Mrf49RxSts:	
 10980  01DC                     __ptext76:	
 10981 ;; *************** function i1_Mrf49SpiRx *****************
 10982 ;; Defined at:
 10983 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;		None
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 10988 ;; Return value:  Size  Location     Type
 10989 ;;                  1    wreg      unsigned char 
 10990 ;; Registers used:
 10991 ;;		wreg, status,2
 10992 ;; Tracked objects:
 10993 ;;		On entry : 1E/0
 10994 ;;		On exit  : 1F/2
 10995 ;;		Unchanged: 0/0
 10996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10997 ;;      Params:         0       0       0       0
 10998 ;;      Locals:         1       0       0       0
 10999 ;;      Temps:          0       0       0       0
 11000 ;;      Totals:         1       0       0       0
 11001 ;;Total ram usage:        1 bytes
 11002 ;; Hardware stack levels used:    1
 11003 ;; This function calls:
 11004 ;;		Nothing
 11005 ;; This function is called by:
 11006 ;;		i1_Mrf49RxCmd
 11007 ;;		i1_Mrf49RxSts
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           
 11012                           ;psect for function i1_Mrf49SpiRx
 11013  01DC                     i1_Mrf49SpiRx:	
 11014                           
 11015                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 11016                           
 11017                           ;incstack = 0
 11018                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 11019  01DC  01F0               	clrf	i1Mrf49SpiRx@data
 11020                           
 11021                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 11022  01DD  0020               	movlb	0	; select bank0
 11023  01DE  138D               	bcf	13,7	;volatile
 11024  01DF  1A8E               	btfsc	14,5	;volatile
 11025  01E0  17F0               	bsf	i1Mrf49SpiRx@data,7
 11026  01E1  0022               	movlb	2	; select bank2
 11027  01E2  178E               	bsf	14,7	;volatile
 11028  01E3  0000               	nop	;# 
 11029  01E4  0022               	movlb	2	; select bank2
 11030  01E5  138E               	bcf	14,7	;volatile
 11031                           
 11032                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11033  01E6  0020               	movlb	0	; select bank0
 11034  01E7  1A8E               	btfsc	14,5	;volatile
 11035  01E8  1770               	bsf	i1Mrf49SpiRx@data,6
 11036  01E9  0022               	movlb	2	; select bank2
 11037  01EA  178E               	bsf	14,7	;volatile
 11038  01EB  0000               	nop	;# 
 11039  01EC  0022               	movlb	2	; select bank2
 11040  01ED  138E               	bcf	14,7	;volatile
 11041                           
 11042                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11043  01EE  0020               	movlb	0	; select bank0
 11044  01EF  1A8E               	btfsc	14,5	;volatile
 11045  01F0  16F0               	bsf	i1Mrf49SpiRx@data,5
 11046  01F1  0022               	movlb	2	; select bank2
 11047  01F2  178E               	bsf	14,7	;volatile
 11048  01F3  0000               	nop	;# 
 11049  01F4  0022               	movlb	2	; select bank2
 11050  01F5  138E               	bcf	14,7	;volatile
 11051                           
 11052                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11053  01F6  0020               	movlb	0	; select bank0
 11054  01F7  1A8E               	btfsc	14,5	;volatile
 11055  01F8  1670               	bsf	i1Mrf49SpiRx@data,4
 11056  01F9  0022               	movlb	2	; select bank2
 11057  01FA  178E               	bsf	14,7	;volatile
 11058  01FB  0000               	nop	;# 
 11059  01FC  0022               	movlb	2	; select bank2
 11060  01FD  138E               	bcf	14,7	;volatile
 11061                           
 11062                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11063  01FE  0020               	movlb	0	; select bank0
 11064  01FF  1A8E               	btfsc	14,5	;volatile
 11065  0200  15F0               	bsf	i1Mrf49SpiRx@data,3
 11066  0201  0022               	movlb	2	; select bank2
 11067  0202  178E               	bsf	14,7	;volatile
 11068  0203  0000               	nop	;# 
 11069  0204  0022               	movlb	2	; select bank2
 11070  0205  138E               	bcf	14,7	;volatile
 11071                           
 11072                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11073  0206  0020               	movlb	0	; select bank0
 11074  0207  1A8E               	btfsc	14,5	;volatile
 11075  0208  1570               	bsf	i1Mrf49SpiRx@data,2
 11076  0209  0022               	movlb	2	; select bank2
 11077  020A  178E               	bsf	14,7	;volatile
 11078  020B  0000               	nop	;# 
 11079  020C  0022               	movlb	2	; select bank2
 11080  020D  138E               	bcf	14,7	;volatile
 11081                           
 11082                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11083  020E  0020               	movlb	0	; select bank0
 11084  020F  1A8E               	btfsc	14,5	;volatile
 11085  0210  14F0               	bsf	i1Mrf49SpiRx@data,1
 11086  0211  0022               	movlb	2	; select bank2
 11087  0212  178E               	bsf	14,7	;volatile
 11088  0213  0000               	nop	;# 
 11089  0214  0022               	movlb	2	; select bank2
 11090  0215  138E               	bcf	14,7	;volatile
 11091                           
 11092                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11093  0216  0020               	movlb	0	; select bank0
 11094  0217  1A8E               	btfsc	14,5	;volatile
 11095  0218  1470               	bsf	i1Mrf49SpiRx@data,0
 11096  0219  0022               	movlb	2	; select bank2
 11097  021A  178E               	bsf	14,7	;volatile
 11098  021B  0000               	nop	;# 
 11099  021C  0022               	movlb	2	; select bank2
 11100  021D  138E               	bcf	14,7	;volatile
 11101                           
 11102                           ;mrf49xa_spi_pic16.c: 40: return data;
 11103  021E  0870               	movf	i1Mrf49SpiRx@data,w
 11104  021F  0008               	return
 11105  0220                     __end_ofi1_Mrf49SpiRx:	
 11106  0220                     PL14:	
 11107  0220  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 11108  0221  397F               	andlw	127
 11109  0222  00F4               	movwf	??i1_Mrf49xaServe
 11110  0223  0AF4               	incf	??i1_Mrf49xaServe,f
 11111  0224  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 11112  0225  0674               	xorwf	??i1_Mrf49xaServe,w
 11113  0226  3980               	andlw	-128
 11114  0227  0674               	xorwf	??i1_Mrf49xaServe,w
 11115  0228  0008               	return
 11116  0229                     __end_ofPL14:	
 11117                           
 11118                           	psect	text77
 11119  02BA                     __ptext77:	
 11120 ;; *************** function _ExtIntDeinit *****************
 11121 ;; Defined at:
 11122 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;		None
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;		None               void
 11129 ;; Registers used:
 11130 ;;		None
 11131 ;; Tracked objects:
 11132 ;;		On entry : 1E/0
 11133 ;;		On exit  : 1E/0
 11134 ;;		Unchanged: 1E/0
 11135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11136 ;;      Params:         0       0       0       0
 11137 ;;      Locals:         0       0       0       0
 11138 ;;      Temps:          0       0       0       0
 11139 ;;      Totals:         0       0       0       0
 11140 ;;Total ram usage:        0 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_extInt
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           
 11150                           ;psect for function _ExtIntDeinit
 11151  02BA                     _ExtIntDeinit:	
 11152                           
 11153                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 11154                           
 11155                           ;incstack = 0
 11156                           ; Regs used in _ExtIntDeinit: []
 11157  02BA  120B               	bcf	11,4	;volatile
 11158  02BB  0008               	return
 11159  02BC                     __end_of_ExtIntDeinit:	
 11160  007E                     btemp	set	126	;btemp
 11161  007E                     wtemp	set	126
 11162  007E                     wtemp0	set	126
 11163  0080                     wtemp1	set	128
 11164  0082                     wtemp2	set	130
 11165  0084                     wtemp3	set	132
 11166  0086                     wtemp4	set	134
 11167  0088                     wtemp5	set	136
 11168  007F                     wtemp6	set	127
 11169  007E                     ttemp	set	126
 11170  007E                     ttemp0	set	126
 11171  0081                     ttemp1	set	129
 11172  0084                     ttemp2	set	132
 11173  0087                     ttemp3	set	135
 11174  007F                     ttemp4	set	127
 11175  007E                     ltemp	set	126
 11176  007E                     ltemp0	set	126
 11177  0082                     ltemp1	set	130
 11178  0086                     ltemp2	set	134
 11179  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    68
    Data        2
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80     21      32
    BANK1            80      0      78
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaReboot@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaShutdown@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    RfSendSampleWeatherNode@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    RfSendPowerState@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaTick@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaAllocPacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaTxAck@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaModeTx@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaFreePacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    HandlePacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaRxPacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaPacketPending@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaInit@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaTxPacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaModeRx@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaModeSleep@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49RxSts@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaServe@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaNeedsReset@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgRead@packet..(COMMON[21]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgRead@packet..(COMMON[21]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgWrite@packet..(COMMON[21]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgWrite@packet..(COMMON[21]), 

    macPtr.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    macPtr	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgRead@packet..(COMMON[21]), 

    S1162CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), eepromTxByte@byte(COMMON[1]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 

    S278Mrf49xaMac_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    mrf49xaInst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _PwrRfWake->_Mrf49xaReboot
    _Mrf49xaReboot->_Mrf49xaModeRx
    _PwrRfSleep->_Mrf49xaShutdown
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_Mrf49xaTxAck
    _HandlePacket->_handleCfgCmd
    _HandlePacket->_handleCfgRead
    _HandlePacket->_handleCfgWrite
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   36270
                                             17 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              6     2      4    2508
                                              7 BANK0      6     2      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     4     4      0    2199
                                              7 BANK0      4     4      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   1     1      0     126
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0    1398
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        1     1      0    1398
                                              5 BANK0      1     1      0
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     957
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      1     1      0     957
                                              5 BANK0      1     1      0
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     2     2      0     894
                                              3 BANK0      2     2      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    7380
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   18919
                                             13 BANK0      4     4      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
                  _Mrf49xaNeedsReset
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      1     1      0      63
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 1     1      0      63
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        2     2      0     894
                                              3 BANK0      2     2      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          4     4      0    6434
                                              8 BANK0      2     2      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         3     3      0    3081
                                              5 BANK0      3     3      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    1     1      0     315
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        2     2      0    1335
                                              3 BANK0      2     2      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           1     1      0     220
                                              1 BANK0      1     1      0
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     3      1    9334
                                              9 BANK0      4     3      1
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1231
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     718
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     828
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     548
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    1935
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     682
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1085
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1085
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         2     1      1    2050
                                              7 BANK0      2     1      1
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      7     4      3    1744
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    2     1      1     326
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    3350
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       3     3      0    3326
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 1     1      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     2     2      0    1204
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        1     1      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaNeedsReset
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      77       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     15      20       6       40.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      77      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Fri Sep  5 20:04:57 2014

                Mrf49xaTxPacket@crc 0024                 Mrf49xaTxPacket@inst 0025  
                       __CFG_CP$OFF 0000                                  PL8 0F8A  
                                l32 0A4F                                  l42 0AA4  
                                l34 0A5B                                  l35 0A5D  
                                l39 0A87                                  l79 0008  
                               PL10 0FA2                                 PL20 0FC9  
                               PL12 0FB0                                 PL22 0FCF  
                               PL14 0220                                 PL24 0FD4  
                               PL16 0FBD                                 PL18 0FC3  
             Mrf49xaTxPacket@packet 0020                                 l211 0D21  
                               l402 0BA6                                 l234 094A  
                               l404 0BB4                                 l260 0D44  
                               l271 0D64                                 l263 0D4E  
                               l255 0D38                                 l280 0D7B  
                               l272 0D65                                 l264 0D4F  
                               l256 0D39                                 l442 0944  
                               l283 0D85                                 l275 0D6F  
                               l267 0D59                                 l259 0D43  
                               l284 0D86                                 l276 0D70  
                               l268 0D5A                                 l550 0B3A  
                               l543 0EF0                                 l279 0D7A  
                               l528 0FFB                                 l560 0B59  
                               l464 0C1D                                 l561 0B58  
                               l553 0B0B                                 l465 0C3C  
                               l395 0B6A                                 l559 0B4A  
                   ??_PwrSensorInit 0020                     ??_PwrSensorWake 0020  
                      __CFG_BORV$LO 0000                 handleCfgWrite@index 0027  
                               wreg 0009                    i1Mrf49xaModeRx@k 0073  
                      __CFG_IESO$ON 0000              ??_SoftI2cRepeatedStart 0021  
                      __CFG_LVP$OFF 0000              Mrf49xaTxPacket@needAck 0022  
                              l3011 094C                                l3031 097A  
                              l3041 099C                                l3131 0A27  
                              l3035 0988                                l3205 0B84  
                              l3141 0A4A                                l3053 09A1  
                              l3037 0994                                l3151 09FF  
                              l3143 09F2                                l3303 08D7  
                              l3217 0B94                                l3153 0A0D  
                              l3313 08F3                                l3139 0A39  
                              l3315 08F5                                l3307 08E2  
                              l3405 0FE5                                l3341 092D  
                              l3325 0912                                l3309 08E7  
                              l3247 0ADD                                l3431 0F24  
                              l3255 0F6F                                l3351 0936  
                              l3343 092E                                l3271 0EAE  
                              l2641 0AB2                                l3193 0B72  
                              l3169 0B5E                                l3329 091A  
                              l3443 0F27                                l3435 0F25  
                              l3371 0AF1                                l3611 089A  
                              l3373 0AF4                                l2901 0CD8  
                              l3613 08A5                                l3471 0ECA  
                              l3439 0F26                                l3383 0B11  
                              l2831 0C3F                                l2911 0CFA  
                              l2823 0C2A                                l3295 08BD  
                              l3287 08B7                                l3607 0895  
                              l2745 0AA6                                l3481 02AC  
                              l3473 0ECB                                l3449 0F28  
                              l3385 0B14                                l3369 0AEB  
                              l2905 0CDA                                l2833 0C43  
                              l3483 0AE2                                l3475 0ED2  
                              l3459 0F54                                l3379 0B0D  
                              l3395 0B1C                                l2843 0C52  
                              l2819 0C20                                l2827 0C2E  
                              l2763 0EB4                                l2755 0EBB  
                              l3469 0EC8                                l3389 0B18  
                              l2909 0CEC                                l2933 09C3  
                              l2765 0000                                l2781 0E33  
                   Mrf49TxByte@byte 0023                                l2791 0841  
                              l3479 0EDE                                l2847 0C58  
                              l2839 0C4D                                l2689 0AC6  
                              l2953 0D04                                l2881 0CAB  
                              l2873 0C90                                l2849 0C5C  
                              l2937 09AE                                l2785 0E3A  
                              l3569 0859                                l2891 0CC3  
                              l2883 0CAF                                l2867 0C7C  
                              l2859 0C6E                                l2893 0CC7  
                              l2877 0C9F                                l2981 0C03  
                              l2959 0D0D                                l2887 0CB6  
                              l2975 0BEF                                l2991 0286  
                              l3599 088C                                l2889 0CBF  
                              l2985 027D                                l2997 029A  
                              u2807 0E2E                                u2817 0AB5  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _main 0847                     __end_of_AdcInit 0EC6  
                              fsr0h 0005                                fsr1h 0007  
                  ??_PwrSensorSleep 0020                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                   __end_of_CfgLoad 0AEA                                ltemp 007E  
                   __end_of_CfgSave 02B4                handleCfgWrite@packet 0028  
                              start 0022                                ttemp 007E  
                              wtemp 007E                __end_of_HandlePacket 0B5E  
           __end_ofi1_Mrf49xaModeRx 014E                Mrf49xaModeSleep@inst 0023  
                     __CFG_MCLRE$ON 0000                 __end_of_Mrf49RxByte 0D2A  
                     ?_ExtIntDeinit 0070                 __end_of_Mrf49TxByte 0D04  
                   ??_eepromRxBytes 0028                         _Mcp9800Read 09DD  
                   ??_eepromTxBytes 0028                    _RfSendPowerState 0DEB  
               __end_of_Mrf49xaInit 09AD                 __end_of_Mrf49xaTick 094A  
              _Mrf49xaPacketPending 0BDC                   ?_CfgGetSizeByType 0070  
                             ?_main 0070                               i1l211 0147  
                             i1l143 001D                               i1l144 001E  
                             i1l260 0172                               i1l271 019A  
                             i1l263 017E                               i1l255 0163  
                             i1l280 01B8                               i1l272 019C  
                             i1l264 0180                               i1l256 0164  
                             i1l283 01C4                               i1l275 01A8  
                             i1l267 018C                               i1l259 0170  
                             i1l284 01C6                               i1l276 01AA  
                             i1l268 018E                               i1l279 01B6  
                             i1l464 0042                               i1l465 0061  
                        _Mrf49RxCmd 0DE1                          _Mrf49TxCmd 0D2A  
                             _AdcGo 0E4C                          _Mrf49SpiRx 0D9C  
                        _Mrf49SpiTx 0D33                          _Mrf49RxSts 0D8E  
                ??_CfgGetSizeByType 0020          __end_of_Mrf49xaAllocPacket 0EB4  
             __end_of_SoftI2cRxByte 0AB2               __end_of_SoftI2cTxByte 0A79  
                      main@humidity 0031               __size_of_Mcp9800Start 0019  
                __size_of_AdcDeinit 0007             Mrf49xaTxPacket@response 0021  
                __size_of_AdcIsBusy 0004                  __size_of_AdcSample 0028  
                    __CFG_BOREN$OFF 0000                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
            Mcp9800Start@resolution 0024                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 i1_Mrf49xaNeedsReset 0151  
                    ??_ExtIntDeinit 0070                     __initialization 0801  
                        _ExtIntInit 0841                __end_of_handleCfgCmd 0EF1  
                      __end_of_main 08AB  RfSendSampleWeatherNode@temperature 0027  
                    __CFG_LPBOR$OFF 0000               ?_Mrf49xaPacketPending 0070  
                      _Mcp9800Start 0A0E                              ??_main 0031  
              ?i1_Mrf49xaNeedsReset 0070                              ?_AdcGo 0070  
              __size_of_handleFwCmd 0023                __end_of_Mrf49xaTxAck 0BDC  
              __end_of_Mrf49xaServe 0CFF                       ??_PwrI2cSleep 0020  
                            _ADCON0 009D                              _ADCON1 009E  
                            _ADCON2 009F                           ??_AdcInit 0020  
                            _ADRESH 009C                              _ADRESL 009B  
                            _ANSELA 018C                              _ANSELB 018D  
                            _ANSELC 018E                           ??_CfgLoad 0028  
                         ??_CfgSave 0028                  i1Mrf49xaServe@data 0075  
                            i1l3701 01B3                              i1l3705 01C1  
                            i1l3803 0045                              i1l3821 0072  
                            i1l3813 0064                              i1l3805 004F  
                            i1l3831 0081                              i1l3815 0068  
                            i1l3681 016D                              i1l3841 0094  
                            i1l3825 0077                              i1l3809 0053  
                            i1l3693 0197                              i1l3685 017B  
                            i1l3765 0133                              i1l3829 007D  
                            i1l3909 000B                              i1l3871 00E4  
                            i1l3863 00D0                              i1l3855 00B7  
                            i1l3697 01A5                              i1l3689 0189  
                            i1l3873 00E8                              i1l3865 00D4  
                            i1l3849 00A2                              i1l3883 00FD  
                            i1l3875 00EC                              i1l3859 00C4  
                            i1l3891 0111                              i1l3869 00DB  
                            i1l3893 011F                              i1l3887 00FF  
                            _FVRCON 0117                              _OSCCON 0099  
              CfgGetSizeByType@type 0020                          _PwrI2cInit 0F7F  
                AdcChSelect@channel 0020                          _PwrI2cWake 0BE5  
                       _Mrf49RxByte 0D28                         _Mrf49TxByte 0CFF  
                     ??_SoftI2cInit 0024                       ??_SoftI2cStop 0021  
         __size_of_Mrf49xaModeSleep 0022                      __CFG_PWRTE$OFF 0000  
                        _SoftI2cNop 0AB2                        ?_AdcChSelect 0070  
                  ?i1_Mrf49xaModeRx 0070                         _Mrf49xaInit 094A  
                            _Sleepy 09AD                         _Mrf49xaTick 08AB  
                        _PwrAdcInit 0F76                          _PwrAdcWake 0E5E  
                     ??_PwrAdcSleep 0020                              _cfgRam 0036  
                   _Mrf49xaRxPacket 0F68                   __end_of_AdcDeinit 0EBB  
                    __CFG_STVREN$ON 0000                   __end_of_AdcIsBusy 0E52  
                            _macPtr 0078                     _Mrf49xaTxPacket 0B5E  
               Mrf49xaShutdown@inst 0025                              _extInt 0004  
                            _memcpy 0F4F                   __end_of_AdcSample 0E4C  
                   _Mrf49xaShutdown 027C                          _PwrRfSleep 026E  
             ??i1_Mrf49xaNeedsReset 0070                         ?_Mrf49RxCmd 0070  
                       ?_Mrf49TxCmd 0021                         ?_Mrf49SpiRx 0070  
                       ?_Mrf49SpiTx 0070                         ?_Mrf49RxSts 0070  
                      __pdataCOMMON 0078                  __size_of_PwrRfInit 0022  
                __size_of_PwrRfWake 000B               __size_of_HandlePacket 0074  
           __end_of__initialization 0815               __end_ofi1_Mrf49RxByte 0151  
               __end_of_PwrI2cSleep 0ADA               __end_ofi1_Mrf49TxByte 0129  
                     __end_of_AdcGo 0E4E     RfSendSampleWeatherNode@humidity 0029  
                       ?_ExtIntInit 0070                      __pcstackCOMMON 0070  
                  SoftI2cRxByte@ack 0021                        __pidataBANK0 0000  
                handleCfgCmd@packet 0028                 __end_of_SoftI2cInit 081F  
             __end_of_handleCfgRead 0F22                 __end_of_SoftI2cStop 0AD5  
            ??_Mrf49xaPacketPending 0020             __size_ofi1_Mrf49xaServe 00F4  
                        __end_ofPL8 0FA2                 __end_of_PwrAdcSleep 0E5E  
                           ??_AdcGo 0020                      _OPTION_REGbits 0095  
                      _HandlePacket 0AEA             Mrf49xaFreePacket@packet 0020  
           __size_of_handleCfgWrite 001B                __end_of_ExtIntDeinit 02BC  
          __end_of_RfSendPowerState 0E24                          __pbssBANK0 0035  
                        __pbssBANK1 00A0                         ?_PwrI2cInit 0070  
                       ?_PwrI2cWake 0070                       ?_SoftI2cStart 0070  
             __size_of_handleCfgCmd 002B             __end_of_Mrf49xaRxPacket 0F76  
           __end_of_Mrf49xaTxPacket 0BBB               __end_of_Mrf49xaModeRx 0D28  
             __end_of_Mrf49xaModeTx 0C0B                         ?_SoftI2cNop 0070  
             __end_of_Mrf49xaReboot 02AC                 __size_of_Mrf49RxCmd 000A  
                 __end_of_PwrRfInit 0841                 __size_of_Mrf49TxCmd 0009  
                 __end_of_PwrRfWake 02AA                 __size_of_Mrf49SpiRx 0045  
               __size_of_Mrf49SpiTx 005B                 __size_of_Mrf49RxSts 000E  
                        __pmaintext 0847                             ?_Sleepy 0020  
           __end_of_Mrf49xaShutdown 027D                         ?_PwrAdcInit 0070  
                       ?_PwrAdcWake 0070            ?_RfSendSampleWeatherNode 0027  
                      ?_Mcp9800Read 0024                          __pintentry 0004  
                           ?_extInt 0070                             ?_memcpy 0020  
             __size_of_Mrf49xaTxAck 0021               __size_of_Mrf49xaServe 00F4  
                       ?_PwrRfSleep 0070                HandlePacket@response 002C  
                 handleFwCmd@packet 0028               __end_of_PwrSensorInit 1000  
             __end_of_PwrSensorWake 0F8A                         _PwrI2cSleep 0AD8  
                      _handleCfgCmd 0EC6                             _AdcInit 0EBB  
               __size_of_ExtIntInit 0006       __size_of_SoftI2cRepeatedStart 0015  
                handleCfgRead@index 0027                             _CfgLoad 0AE2  
                        __stringtab 0229                             _CfgSave 02AC  
                    ??_SoftI2cStart 0021           __size_of_CfgGetSizeByType 0012  
                _Mrf49xaAllocPacket 0EA7                    _Mrf49xaModeSleep 027D  
                       _SoftI2cInit 0817                       ?i1_Mrf49RxCmd 0070  
                     ?i1_Mrf49TxCmd 0071                       ?i1_Mrf49SpiRx 0070  
                     ?i1_Mrf49SpiTx 0070                         _SoftI2cStop 0AC6  
                     ?i1_Mrf49RxSts 0070                             Sleepy@b 0023  
                      _Mrf49xaTxAck 0BBB                        _Mrf49xaServe 0C0B  
                   __size_of_Sleepy 001B                eepromRxBytes@address 0024  
                       _PwrAdcSleep 0E59                 ?_Mrf49xaAllocPacket 0070  
              __size_of_AdcChSelect 0007               __end_of_eepromRxBytes 0A4B  
             __end_of_eepromTxBytes 0A0E                     __size_of_extInt 001E  
                   __size_of_memcpy 0019                   _mrfRegset_InitCnt 022A  
                           __ptext1 0E63                             __ptext2 0DEB  
                           __ptext3 0E5E                             __ptext4 0EBB  
                           __ptext5 0E59                             __ptext6 0EB4  
                           __ptext7 0EA7                             __ptext8 0E24  
                           __ptext9 0E4E                 __size_of_PwrI2cInit 0008  
               __size_of_PwrI2cWake 0001                          _parameters 0268  
                     ?_AdcGetResult 0020                 __size_of_SoftI2cNop 0007  
       RfSendSampleWeatherNode@inst 002B                ??_Mrf49xaAllocPacket 0020  
             Mrf49xaNeedsReset@inst 0020                 __size_of_PwrAdcInit 0009  
               __size_of_PwrAdcWake 0005                             clrloop0 02B5  
              end_of_initialization 0815                             memcpy@d 0023  
                           memcpy@n 0021                             memcpy@s 0024  
                      ?_Mrf49RxByte 0070                        ?_Mrf49TxByte 0070  
                    ??i1_Mrf49RxCmd 0071                      ??i1_Mrf49TxCmd 0072  
                    ??i1_Mrf49SpiRx 0070                      ??i1_Mrf49SpiTx 0070  
                    ??i1_Mrf49RxSts 0071                    ?_Mrf49xaRxPacket 0070  
               __size_of_PwrRfSleep 000E     __end_of_RfSendSampleWeatherNode 0EA7  
                   Mrf49xaInit@inst 0028                    ?_Mrf49xaTxPacket 0020  
                      ?_Mrf49xaInit 0070                __end_of_mrfRegset_Rx 025A  
              __end_of_mrfRegset_Tx 0262                        ?_Mrf49xaTick 0070  
                  ?_Mrf49xaShutdown 0070             handleCfgWrite@nrOfBytes 0026  
            __size_of_SoftI2cRxByte 0039              __size_of_SoftI2cTxByte 002E  
                    i1_Mrf49xaServe 0030           __end_of_mrfRegset_InitCnt 022B  
           __size_of_PwrSensorSleep 0003                   _powerStatusTicker 0035  
                     ??_handleFwCmd 0028                           _PORTAbits 000C  
                         _PORTBbits 000D                     Mrf49xaTick@inst 002F  
                         _PORTCbits 000E                           _AdcDeinit 0EB4  
             __size_of_ExtIntDeinit 0002                           _AdcIsBusy 0E4E  
                      ??_Mrf49RxCmd 0021                        ??_Mrf49TxCmd 0022  
                      ??_Mrf49SpiRx 0020                        ??_Mrf49SpiTx 0020  
                      ??_Mrf49RxSts 0021                           _AdcSample 0E24  
                  __CFG_FOSC$INTOSC 0000                      ??_AdcGetResult 0022  
                    _handleCfgWrite 0F34                           _TRISAbits 008C  
                         _TRISBbits 008D                           _TRISCbits 008E  
                       AdcSample@ch 0025                      Mrf49SpiRx@data 0020  
                    Mrf49SpiTx@byte 0020                      Mrf49RxSts@inst 0021  
                __end_of_Mrf49RxCmd 0DEB                  __end_of_Mrf49TxCmd 0D33  
            __end_ofi1_Mrf49xaServe 0124                        ??_ExtIntInit 0020  
                __end_of_Mrf49SpiRx 0DE1                  __end_of_Mrf49SpiTx 0D8E  
                __end_of_Mrf49RxSts 0D9C                        _ExtIntDeinit 02BA  
       __end_ofi1_Mrf49xaNeedsReset 0154                      __end_of_Sleepy 09C8  
                 SoftI2cRxByte@data 0022                       __pidataCOMMON 0000  
              __size_of_Mcp9800Read 0015                   eepromRxBytes@data 0026  
              __end_of_SoftI2cStart 0AC6            __size_ofi1_Mrf49xaModeRx 0025  
                        ?_AdcDeinit 0070                      __end_of_extInt 0022  
                    __end_of_memcpy 0F68                   eepromRxBytes@size 0027  
            __end_of_handleCfgWrite 0F4F                          ?_AdcIsBusy 0070  
        __end_of_mrfRegset_SleepCnt 022D                          ?_AdcSample 0022  
                       __end_ofPL10 0FB0                         __end_ofPL20 0FCF  
                       __end_ofPL12 0FBD                         __end_ofPL22 0FD4  
                       __end_ofPL14 0229                         __end_ofPL24 0FD9  
                       __end_ofPL16 0FC3                         __end_ofPL18 0FC9  
               start_initialization 0801                       _SoftI2cRxByte 0A79  
               __end_of_handleFwCmd 0FFC                       _SoftI2cTxByte 0A4B  
             Mrf49xaFreePacket@inst 0021                  __end_of_ExtIntInit 0847  
                 SoftI2cTxByte@data 0022                   ?_RfSendPowerState 0070  
                  _CfgGetSizeByType 0F22                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 0029  
                ??_RfSendPowerState 0027                        ??_SoftI2cNop 0020  
                          ??_Sleepy 0022                        ??_PwrAdcInit 0020  
                      ??_PwrAdcWake 0020                     ?i1_Mrf49xaServe 0070  
                   _mrfRegset_RxCnt 022B                     _mrfRegset_TxCnt 022D  
                   _mrfRegset_Sleep 0262                           _PwrRfInit 081F  
                         _PwrRfWake 029F                         __pdataBANK0 003F  
                          ??_extInt 0076                            ??_memcpy 0023  
     __size_of_Mrf49xaPacketPending 0009                   eepromTxBytes@data 0026  
                      ??_PwrRfSleep 0026                   eepromTxBytes@size 0027  
                   ?_handleCfgWrite 0070                   RfSendPowerState@s 0028  
            __size_ofi1_Mrf49RxByte 0003              __size_ofi1_Mrf49TxByte 0005  
          __end_of_Mrf49xaModeSleep 029F                  __end_of_PwrI2cInit 0F87  
              __end_ofi1_Mrf49RxCmd 0030                __end_ofi1_Mrf49TxCmd 015E  
                __end_of_PwrI2cWake 0BE6                __end_ofi1_Mrf49SpiRx 0220  
              __end_ofi1_Mrf49SpiTx 01CE                __end_ofi1_Mrf49RxSts 01DC  
                         ___latbits 0001                       __pcstackBANK0 0020  
                    ?_SoftI2cRxByte 0070    __size_of_RfSendSampleWeatherNode 0044  
                    ?_SoftI2cTxByte 0070                   i1Mrf49TxByte@byte 0073  
                      ?_PwrI2cSleep 0070                  __end_of_SoftI2cNop 0AB9  
                          ?_AdcInit 0070                  __end_of_PwrAdcInit 0F7F  
                          ?_CfgLoad 0070                  __end_of_PwrAdcWake 0E63  
                          ?_CfgSave 0070                    HandlePacket@inst 002B  
            __size_of_handleCfgRead 0031                        ?_SoftI2cInit 0070  
                      ?_SoftI2cStop 0070                __size_of_Mrf49RxByte 0002  
                __end_of_PwrRfSleep 027C                __size_of_Mrf49TxByte 0005  
              __end_of_AdcGetResult 0000        __end_of_SoftI2cRepeatedStart 09DD  
                      ?_PwrAdcSleep 0070                __size_of_Mrf49xaInit 0063  
              __size_of_Mrf49xaTick 009F                          ?_PwrRfInit 0070  
                        ?_PwrRfWake 0070                      _PwrSensorSleep 0ADA  
                     ?_Mcp9800Start 0070                           __pstrings 0229  
                       ??_AdcDeinit 0020                         ??_AdcIsBusy 0020  
                       _handleFwCmd 0FD9                         ??_AdcSample 0024  
                    __size_of_AdcGo 0002              __size_of_Mrf49xaModeRx 0024  
            __size_of_Mrf49xaModeTx 0025                        _mrfRegset_Rx 024E  
                      _mrfRegset_Tx 025A              __size_of_Mrf49xaReboot 0002  
                 ??i1_Mrf49xaModeRx 0073                    __CFG_WDTE$SWDTEN 0000  
                          _LATAbits 010C                            _LATBbits 010D  
                          _LATCbits 010E                       i1_Mrf49RxByte 014E  
           __end_of_mrfRegset_RxCnt 022C                       i1_Mrf49TxByte 0124  
           __end_of_mrfRegset_TxCnt 022E             __end_of_mrfRegset_Sleep 0268  
                         clear_ram0 02B4                       ??_AdcChSelect 0020  
                 _Mrf49xaFreePacket 0ADD                      Mrf49xaModeRx@k 0023  
                    Mrf49xaModeTx@k 0024              __end_of_PwrSensorSleep 0ADD  
             __size_of_SoftI2cStart 000D              __size_of_PwrSensorInit 0004  
            __size_of_PwrSensorWake 0003                       Mrf49RxCmd@cmd 0021  
                ?_Mrf49xaFreePacket 0020                       Mrf49RxCmd@val 0022  
                       _mrf49xaInst 00A0                      ??_Mcp9800Start 0024  
                     _handleCfgRead 0EF1                       Mrf49TxCmd@cmd 0022  
                     Mrf49TxCmd@val 0021                 handleCfgRead@packet 0028  
               ??_Mrf49xaFreePacket 0021              Mrf49xaAllocPacket@inst 0020  
                   ??_SoftI2cRxByte 0021                   _Mrf49xaNeedsReset 0AD5  
                   ??_SoftI2cTxByte 0021                            _WPUAbits 020C  
                ?_Mrf49xaNeedsReset 0070         __size_of_Mrf49xaAllocPacket 000D  
                  __size_of_AdcInit 000B                    __size_of_CfgLoad 0008  
                  __size_of_CfgSave 0008                 ??_Mrf49xaNeedsReset 0020  
            __size_of_eepromRxBytes 0024                      ?i1_Mrf49RxByte 0070  
            __size_of_eepromTxBytes 001C                        _SoftI2cStart 0AB9  
                    ?i1_Mrf49TxByte 0070           __end_of_Mrf49xaFreePacket 0AE2  
                         extInt@ofw 0077                            Sleepy@ms 0020  
                     _Mrf49xaModeRx 0D04                       _Mrf49xaModeTx 0BE6  
                     _Mrf49xaReboot 02AA                      _mrfRegset_Init 022E  
                   ?_PwrSensorSleep 0070                         ??_PwrRfInit 002A  
                    ?_handleCfgRead 0070                         ??_PwrRfWake 0026  
          __size_of_Mrf49xaRxPacket 000E               __size_ofi1_Mrf49RxCmd 000C  
             __size_ofi1_Mrf49TxCmd 000A               __size_ofi1_Mrf49SpiRx 0044  
             __size_ofi1_Mrf49SpiTx 0070                    i1Mrf49SpiRx@data 0070  
             __size_ofi1_Mrf49RxSts 000E                 __end_of_AdcChSelect 0E59  
          __size_of_Mrf49xaTxPacket 005D            __end_of_CfgGetSizeByType 0F34  
                  i1Mrf49SpiTx@byte 0070                      SoftI2cRxByte@i 0023  
         __end_of_Mrf49xaNeedsReset 0AD8                  __end_of__stringtab 022A  
          __size_of_Mrf49xaShutdown 0001                      SoftI2cTxByte@i 0023  
                        _ANSELCbits 018E             _RfSendSampleWeatherNode 0E63  
                     ?_HandlePacket 0029                            _coldBoot 003F  
                          __ptext10 0E4C                            __ptext11 0000  
                          __ptext20 027D                            __ptext12 0E52  
                          __ptext21 081F                            __ptext13 0F87  
                          __ptext30 0BE6                            __ptext22 0BE5  
                          __ptext14 0ADA                            __ptext31 094A  
                          __ptext23 0AD8                            __ptext15 0FFC  
                          __ptext40 0DE1                            __ptext32 09AD  
                          __ptext24 0F7F                            __ptext16 029F  
                          __ptext41 0D33                            __ptext33 0C0B  
                          __ptext25 0817                            __ptext17 02AA  
                          __ptext50 02AC                            __ptext42 0D9C  
                          __ptext34 0AD5                            __ptext26 0F76  
                          __ptext18 026E                            __ptext51 09F2  
                          __ptext43 0AEA                            __ptext35 0D04  
                          __ptext27 08AB                            __ptext19 027C  
                          __ptext60 09DD                            __ptext52 0AE2  
                          __ptext44 0FD9                            __ptext36 0CFF  
                          __ptext28 0F68                            __ptext61 0A4B  
                          __ptext53 0A27                            __ptext45 0F34  
                          __ptext37 0D2A                            __ptext29 0BDC  
                          __ptext70 0124                            __ptext62 0AC6  
                          __ptext54 09C8                            __ptext46 0EF1  
                          __ptext38 0D8E                            __ptext71 0154  
                          __ptext63 0AB9                            __ptext55 0BBB  
                          __ptext47 0F4F                            __ptext39 0D28  
                          __ptext72 01CE                            __ptext64 0A79  
                          __ptext56 0B5E                            __ptext48 0F22  
                          __ptext73 014E                            __ptext65 0AB2  
                          __ptext57 0ADD                            __ptext49 0EC6  
                     _PwrSensorInit 0FFC                            __ptext74 0024  
                          __ptext58 0841                            __ptext75 015E  
                          __ptext67 0030                            __ptext59 0A0E  
                          __ptext76 01DC                            __ptext68 0151  
                          __ptext77 02BA                            __ptext69 0129  
                     _PwrSensorWake 0F87                _SoftI2cRepeatedStart 09C8  
              __size_of_PwrI2cSleep 0002               __size_of_AdcGetResult 0000  
                _mrfRegset_SleepCnt 022C                    Mcp9800Read@tempH 0026  
                  Mcp9800Read@tempL 0027                    ??i1_Mrf49xaServe 0074  
                     __size_of_main 0064            Mrf49xaPacketPending@inst 0020  
                      i1_Mrf49RxCmd 0024              __end_of_mrfRegset_Init 024E  
                Mrf49xaTxAck@packet 0027                        i1_Mrf49TxCmd 0154  
                      i1_Mrf49SpiRx 01DC                        i1_Mrf49SpiTx 015E  
                    ?_Mrf49xaModeRx 0070                      ?_Mrf49xaModeTx 0070  
                      i1_Mrf49RxSts 01CE                      ?_Mrf49xaReboot 0070  
                __end_of_parameters 026E                __size_of_SoftI2cInit 0008  
              __size_of_SoftI2cStop 000F                 Mrf49xaRxPacket@inst 0020  
                     ??_Mcp9800Read 0026                    ??_handleCfgWrite 0026  
         __size_of_RfSendPowerState 0039                   Mrf49xaModeRx@inst 0024  
              __size_of_PwrAdcSleep 0005                       _eepromRxBytes 0A27  
                 Mrf49xaModeTx@inst 0023                   Mrf49xaModeSleep@k 0024  
                     _eepromTxBytes 09F2                     i1Mrf49RxCmd@cmd 0071  
                   main@temperature 0033                     i1Mrf49RxCmd@val 0072  
                    ??_HandlePacket 002A        __size_ofi1_Mrf49xaNeedsReset 0003  
                Mrf49xaTick@timeout 002E                          _INTCONbits 000B  
                 ?_Mrf49xaModeSleep 0070                     i1Mrf49TxCmd@cmd 0072  
                   i1Mrf49TxCmd@val 0071                            memcpy@d1 0025  
                          memcpy@s1 0020                      ?_PwrSensorInit 0070  
                      _AdcGetResult 0000                      ?_PwrSensorWake 0070  
                ??_Mrf49xaModeSleep 0023                       ?_handleCfgCmd 0070  
             ?_SoftI2cRepeatedStart 0070                     ??i1_Mrf49RxByte 0073  
                          intlevel1 0000                     ??i1_Mrf49TxByte 0073  
      __end_of_Mrf49xaPacketPending 0BE5                __end_of_Mcp9800Start 0A27  
     RfSendSampleWeatherNode@packet 002C                   Mrf49xaReboot@inst 0025  
                 __CFG_CLKOUTEN$OFF 0000          __size_of_Mrf49xaFreePacket 0005  
            RfSendPowerState@packet 002A                       ?_Mrf49xaTxAck 0027  
                       _AdcChSelect 0E52                        Mrf49xaInit@k 0029  
                     ?_Mrf49xaServe 0070                     ??_handleCfgRead 0026  
                 Mrf49xaTick@packet 0030                      ?_eepromRxBytes 0024  
              eepromTxBytes@address 0024                     i1_Mrf49xaModeRx 0129  
                    ?_eepromTxBytes 0024           ??_RfSendSampleWeatherNode 002B  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 09F2                   ??_Mrf49xaRxPacket 0020  
                  Mrf49xaTxAck@inst 0028                   ??_Mrf49xaTxPacket 0023  
                    ??_handleCfgCmd 0028                          _WDTCONbits 0097  
                 ??_Mrf49xaShutdown 0025                RfSendPowerState@inst 0027  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0025                      ??_Mrf49xaTxAck 0028  
                  Mrf49xaServe@data 0027                      ??_Mrf49xaServe 0025  
                     ??_Mrf49xaInit 0028                    Mrf49xaServe@inst 0026  
                     ??_Mrf49xaTick 002D              handleCfgRead@nrOfBytes 0026  
                  Mrf49xaTxPacket@i 0026  



Microchip Technology PIC PRO Macro Assembler V1.20 build 52243 
                                                                                               Thu May 08 14:33:34 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 52243
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text7,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text32,local,class=CODE,merge=1,delta=2
    14                           	psect	pa_nodes,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     	;# 
    17  0001                     	;# 
    18  0002                     	;# 
    19  0003                     	;# 
    20  0004                     	;# 
    21  0005                     	;# 
    22  0006                     	;# 
    23  0007                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0013                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  008C                     	;# 
    44  008D                     	;# 
    45  008E                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0093                     	;# 
    49  0095                     	;# 
    50  0096                     	;# 
    51  0097                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  009F                     	;# 
    60  010C                     	;# 
    61  010D                     	;# 
    62  010E                     	;# 
    63  0111                     	;# 
    64  0112                     	;# 
    65  0113                     	;# 
    66  0114                     	;# 
    67  0115                     	;# 
    68  0116                     	;# 
    69  0117                     	;# 
    70  0118                     	;# 
    71  0119                     	;# 
    72  011D                     	;# 
    73  018C                     	;# 
    74  018D                     	;# 
    75  018E                     	;# 
    76  0191                     	;# 
    77  0191                     	;# 
    78  0192                     	;# 
    79  0193                     	;# 
    80  0193                     	;# 
    81  0194                     	;# 
    82  0195                     	;# 
    83  0196                     	;# 
    84  0199                     	;# 
    85  019A                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019D                     	;# 
    89  019E                     	;# 
    90  019F                     	;# 
    91  020C                     	;# 
    92  020D                     	;# 
    93  0211                     	;# 
    94  0211                     	;# 
    95  0212                     	;# 
    96  0212                     	;# 
    97  0213                     	;# 
    98  0213                     	;# 
    99  0214                     	;# 
   100  0214                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0216                     	;# 
   105  0216                     	;# 
   106  0217                     	;# 
   107  0217                     	;# 
   108  0391                     	;# 
   109  0392                     	;# 
   110  0393                     	;# 
   111  0394                     	;# 
   112  0395                     	;# 
   113  0396                     	;# 
   114  0498                     	;# 
   115  0498                     	;# 
   116  0499                     	;# 
   117  049A                     	;# 
   118  049B                     	;# 
   119  049B                     	;# 
   120  049C                     	;# 
   121  049E                     	;# 
   122  049F                     	;# 
   123  0611                     	;# 
   124  0612                     	;# 
   125  0613                     	;# 
   126  0613                     	;# 
   127  0614                     	;# 
   128  0615                     	;# 
   129  0616                     	;# 
   130  0616                     	;# 
   131  0617                     	;# 
   132  0618                     	;# 
   133  0619                     	;# 
   134  0619                     	;# 
   135  061A                     	;# 
   136  061B                     	;# 
   137  061C                     	;# 
   138  061C                     	;# 
   139  0691                     	;# 
   140  0692                     	;# 
   141  0693                     	;# 
   142  0694                     	;# 
   143  0695                     	;# 
   144  0F0F                     	;# 
   145  0F10                     	;# 
   146  0F11                     	;# 
   147  0F12                     	;# 
   148  0F13                     	;# 
   149  0F14                     	;# 
   150  0F15                     	;# 
   151  0F16                     	;# 
   152  0F17                     	;# 
   153  0F18                     	;# 
   154  0F19                     	;# 
   155  0F1A                     	;# 
   156  0F1B                     	;# 
   157  0F1C                     	;# 
   158  0F1D                     	;# 
   159  0F1E                     	;# 
   160  0F1F                     	;# 
   161  0F20                     	;# 
   162  0F21                     	;# 
   163  0F22                     	;# 
   164  0F23                     	;# 
   165  0F24                     	;# 
   166  0F25                     	;# 
   167  0F26                     	;# 
   168  0F27                     	;# 
   169  0F28                     	;# 
   170  0F29                     	;# 
   171  0F2A                     	;# 
   172  0F2B                     	;# 
   173  0F2C                     	;# 
   174  0F2D                     	;# 
   175  0F2E                     	;# 
   176  0F2F                     	;# 
   177  0F8C                     	;# 
   178  0F8D                     	;# 
   179  0F91                     	;# 
   180  0F95                     	;# 
   181  0F96                     	;# 
   182  0F97                     	;# 
   183  0F9C                     	;# 
   184  0F9D                     	;# 
   185  0F9E                     	;# 
   186  0FE3                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000D                     	;# 
   212  000E                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0013                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0093                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009E                     	;# 
   241  009F                     	;# 
   242  010C                     	;# 
   243  010D                     	;# 
   244  010E                     	;# 
   245  0111                     	;# 
   246  0112                     	;# 
   247  0113                     	;# 
   248  0114                     	;# 
   249  0115                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  0118                     	;# 
   253  0119                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  018E                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020D                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0391                     	;# 
   291  0392                     	;# 
   292  0393                     	;# 
   293  0394                     	;# 
   294  0395                     	;# 
   295  0396                     	;# 
   296  0498                     	;# 
   297  0498                     	;# 
   298  0499                     	;# 
   299  049A                     	;# 
   300  049B                     	;# 
   301  049B                     	;# 
   302  049C                     	;# 
   303  049E                     	;# 
   304  049F                     	;# 
   305  0611                     	;# 
   306  0612                     	;# 
   307  0613                     	;# 
   308  0613                     	;# 
   309  0614                     	;# 
   310  0615                     	;# 
   311  0616                     	;# 
   312  0616                     	;# 
   313  0617                     	;# 
   314  0618                     	;# 
   315  0619                     	;# 
   316  0619                     	;# 
   317  061A                     	;# 
   318  061B                     	;# 
   319  061C                     	;# 
   320  061C                     	;# 
   321  0691                     	;# 
   322  0692                     	;# 
   323  0693                     	;# 
   324  0694                     	;# 
   325  0695                     	;# 
   326  0F0F                     	;# 
   327  0F10                     	;# 
   328  0F11                     	;# 
   329  0F12                     	;# 
   330  0F13                     	;# 
   331  0F14                     	;# 
   332  0F15                     	;# 
   333  0F16                     	;# 
   334  0F17                     	;# 
   335  0F18                     	;# 
   336  0F19                     	;# 
   337  0F1A                     	;# 
   338  0F1B                     	;# 
   339  0F1C                     	;# 
   340  0F1D                     	;# 
   341  0F1E                     	;# 
   342  0F1F                     	;# 
   343  0F20                     	;# 
   344  0F21                     	;# 
   345  0F22                     	;# 
   346  0F23                     	;# 
   347  0F24                     	;# 
   348  0F25                     	;# 
   349  0F26                     	;# 
   350  0F27                     	;# 
   351  0F28                     	;# 
   352  0F29                     	;# 
   353  0F2A                     	;# 
   354  0F2B                     	;# 
   355  0F2C                     	;# 
   356  0F2D                     	;# 
   357  0F2E                     	;# 
   358  0F2F                     	;# 
   359  0F8C                     	;# 
   360  0F8D                     	;# 
   361  0F91                     	;# 
   362  0F95                     	;# 
   363  0F96                     	;# 
   364  0F97                     	;# 
   365  0F9C                     	;# 
   366  0F9D                     	;# 
   367  0F9E                     	;# 
   368  0FE3                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0099                     	;# 
   417  009A                     	;# 
   418  009B                     	;# 
   419  009B                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  009F                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0111                     	;# 
   428  0112                     	;# 
   429  0113                     	;# 
   430  0114                     	;# 
   431  0115                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  0118                     	;# 
   435  0119                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020C                     	;# 
   456  020D                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0391                     	;# 
   473  0392                     	;# 
   474  0393                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0498                     	;# 
   479  0498                     	;# 
   480  0499                     	;# 
   481  049A                     	;# 
   482  049B                     	;# 
   483  049B                     	;# 
   484  049C                     	;# 
   485  049E                     	;# 
   486  049F                     	;# 
   487  0611                     	;# 
   488  0612                     	;# 
   489  0613                     	;# 
   490  0613                     	;# 
   491  0614                     	;# 
   492  0615                     	;# 
   493  0616                     	;# 
   494  0616                     	;# 
   495  0617                     	;# 
   496  0618                     	;# 
   497  0619                     	;# 
   498  0619                     	;# 
   499  061A                     	;# 
   500  061B                     	;# 
   501  061C                     	;# 
   502  061C                     	;# 
   503  0691                     	;# 
   504  0692                     	;# 
   505  0693                     	;# 
   506  0694                     	;# 
   507  0695                     	;# 
   508  0F0F                     	;# 
   509  0F10                     	;# 
   510  0F11                     	;# 
   511  0F12                     	;# 
   512  0F13                     	;# 
   513  0F14                     	;# 
   514  0F15                     	;# 
   515  0F16                     	;# 
   516  0F17                     	;# 
   517  0F18                     	;# 
   518  0F19                     	;# 
   519  0F1A                     	;# 
   520  0F1B                     	;# 
   521  0F1C                     	;# 
   522  0F1D                     	;# 
   523  0F1E                     	;# 
   524  0F1F                     	;# 
   525  0F20                     	;# 
   526  0F21                     	;# 
   527  0F22                     	;# 
   528  0F23                     	;# 
   529  0F24                     	;# 
   530  0F25                     	;# 
   531  0F26                     	;# 
   532  0F27                     	;# 
   533  0F28                     	;# 
   534  0F29                     	;# 
   535  0F2A                     	;# 
   536  0F2B                     	;# 
   537  0F2C                     	;# 
   538  0F2D                     	;# 
   539  0F2E                     	;# 
   540  0F2F                     	;# 
   541  0F8C                     	;# 
   542  0F8D                     	;# 
   543  0F91                     	;# 
   544  0F95                     	;# 
   545  0F96                     	;# 
   546  0F97                     	;# 
   547  0F9C                     	;# 
   548  0F9D                     	;# 
   549  0F9E                     	;# 
   550  0FE3                     	;# 
   551  0FE4                     	;# 
   552  0FE5                     	;# 
   553  0FE6                     	;# 
   554  0FE7                     	;# 
   555  0FE8                     	;# 
   556  0FE9                     	;# 
   557  0FEA                     	;# 
   558  0FEB                     	;# 
   559  0FED                     	;# 
   560  0FEE                     	;# 
   561  0FEF                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0008                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  0011                     	;# 
   578  0012                     	;# 
   579  0013                     	;# 
   580  0015                     	;# 
   581  0016                     	;# 
   582  0016                     	;# 
   583  0017                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  001B                     	;# 
   588  001C                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0093                     	;# 
   595  0095                     	;# 
   596  0096                     	;# 
   597  0097                     	;# 
   598  0099                     	;# 
   599  009A                     	;# 
   600  009B                     	;# 
   601  009B                     	;# 
   602  009C                     	;# 
   603  009D                     	;# 
   604  009E                     	;# 
   605  009F                     	;# 
   606  010C                     	;# 
   607  010D                     	;# 
   608  010E                     	;# 
   609  0111                     	;# 
   610  0112                     	;# 
   611  0113                     	;# 
   612  0114                     	;# 
   613  0115                     	;# 
   614  0116                     	;# 
   615  0117                     	;# 
   616  0118                     	;# 
   617  0119                     	;# 
   618  011D                     	;# 
   619  018C                     	;# 
   620  018D                     	;# 
   621  018E                     	;# 
   622  0191                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0193                     	;# 
   626  0193                     	;# 
   627  0194                     	;# 
   628  0195                     	;# 
   629  0196                     	;# 
   630  0199                     	;# 
   631  019A                     	;# 
   632  019B                     	;# 
   633  019C                     	;# 
   634  019D                     	;# 
   635  019E                     	;# 
   636  019F                     	;# 
   637  020C                     	;# 
   638  020D                     	;# 
   639  0211                     	;# 
   640  0211                     	;# 
   641  0212                     	;# 
   642  0212                     	;# 
   643  0213                     	;# 
   644  0213                     	;# 
   645  0214                     	;# 
   646  0214                     	;# 
   647  0215                     	;# 
   648  0215                     	;# 
   649  0215                     	;# 
   650  0216                     	;# 
   651  0216                     	;# 
   652  0217                     	;# 
   653  0217                     	;# 
   654  0391                     	;# 
   655  0392                     	;# 
   656  0393                     	;# 
   657  0394                     	;# 
   658  0395                     	;# 
   659  0396                     	;# 
   660  0498                     	;# 
   661  0498                     	;# 
   662  0499                     	;# 
   663  049A                     	;# 
   664  049B                     	;# 
   665  049B                     	;# 
   666  049C                     	;# 
   667  049E                     	;# 
   668  049F                     	;# 
   669  0611                     	;# 
   670  0612                     	;# 
   671  0613                     	;# 
   672  0613                     	;# 
   673  0614                     	;# 
   674  0615                     	;# 
   675  0616                     	;# 
   676  0616                     	;# 
   677  0617                     	;# 
   678  0618                     	;# 
   679  0619                     	;# 
   680  0619                     	;# 
   681  061A                     	;# 
   682  061B                     	;# 
   683  061C                     	;# 
   684  061C                     	;# 
   685  0691                     	;# 
   686  0692                     	;# 
   687  0693                     	;# 
   688  0694                     	;# 
   689  0695                     	;# 
   690  0F0F                     	;# 
   691  0F10                     	;# 
   692  0F11                     	;# 
   693  0F12                     	;# 
   694  0F13                     	;# 
   695  0F14                     	;# 
   696  0F15                     	;# 
   697  0F16                     	;# 
   698  0F17                     	;# 
   699  0F18                     	;# 
   700  0F19                     	;# 
   701  0F1A                     	;# 
   702  0F1B                     	;# 
   703  0F1C                     	;# 
   704  0F1D                     	;# 
   705  0F1E                     	;# 
   706  0F1F                     	;# 
   707  0F20                     	;# 
   708  0F21                     	;# 
   709  0F22                     	;# 
   710  0F23                     	;# 
   711  0F24                     	;# 
   712  0F25                     	;# 
   713  0F26                     	;# 
   714  0F27                     	;# 
   715  0F28                     	;# 
   716  0F29                     	;# 
   717  0F2A                     	;# 
   718  0F2B                     	;# 
   719  0F2C                     	;# 
   720  0F2D                     	;# 
   721  0F2E                     	;# 
   722  0F2F                     	;# 
   723  0F8C                     	;# 
   724  0F8D                     	;# 
   725  0F91                     	;# 
   726  0F95                     	;# 
   727  0F96                     	;# 
   728  0F97                     	;# 
   729  0F9C                     	;# 
   730  0F9D                     	;# 
   731  0F9E                     	;# 
   732  0FE3                     	;# 
   733  0FE4                     	;# 
   734  0FE5                     	;# 
   735  0FE6                     	;# 
   736  0FE7                     	;# 
   737  0FE8                     	;# 
   738  0FE9                     	;# 
   739  0FEA                     	;# 
   740  0FEB                     	;# 
   741  0FED                     	;# 
   742  0FEE                     	;# 
   743  0FEF                     	;# 
   744  0000                     	;# 
   745  0001                     	;# 
   746  0002                     	;# 
   747  0003                     	;# 
   748  0004                     	;# 
   749  0005                     	;# 
   750  0006                     	;# 
   751  0007                     	;# 
   752  0008                     	;# 
   753  0009                     	;# 
   754  000A                     	;# 
   755  000B                     	;# 
   756  000C                     	;# 
   757  000D                     	;# 
   758  000E                     	;# 
   759  0011                     	;# 
   760  0012                     	;# 
   761  0013                     	;# 
   762  0015                     	;# 
   763  0016                     	;# 
   764  0016                     	;# 
   765  0017                     	;# 
   766  0018                     	;# 
   767  0019                     	;# 
   768  001A                     	;# 
   769  001B                     	;# 
   770  001C                     	;# 
   771  008C                     	;# 
   772  008D                     	;# 
   773  008E                     	;# 
   774  0091                     	;# 
   775  0092                     	;# 
   776  0093                     	;# 
   777  0095                     	;# 
   778  0096                     	;# 
   779  0097                     	;# 
   780  0099                     	;# 
   781  009A                     	;# 
   782  009B                     	;# 
   783  009B                     	;# 
   784  009C                     	;# 
   785  009D                     	;# 
   786  009E                     	;# 
   787  009F                     	;# 
   788  010C                     	;# 
   789  010D                     	;# 
   790  010E                     	;# 
   791  0111                     	;# 
   792  0112                     	;# 
   793  0113                     	;# 
   794  0114                     	;# 
   795  0115                     	;# 
   796  0116                     	;# 
   797  0117                     	;# 
   798  0118                     	;# 
   799  0119                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018D                     	;# 
   803  018E                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0194                     	;# 
   810  0195                     	;# 
   811  0196                     	;# 
   812  0199                     	;# 
   813  019A                     	;# 
   814  019B                     	;# 
   815  019C                     	;# 
   816  019D                     	;# 
   817  019E                     	;# 
   818  019F                     	;# 
   819  020C                     	;# 
   820  020D                     	;# 
   821  0211                     	;# 
   822  0211                     	;# 
   823  0212                     	;# 
   824  0212                     	;# 
   825  0213                     	;# 
   826  0213                     	;# 
   827  0214                     	;# 
   828  0214                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0215                     	;# 
   832  0216                     	;# 
   833  0216                     	;# 
   834  0217                     	;# 
   835  0217                     	;# 
   836  0391                     	;# 
   837  0392                     	;# 
   838  0393                     	;# 
   839  0394                     	;# 
   840  0395                     	;# 
   841  0396                     	;# 
   842  0498                     	;# 
   843  0498                     	;# 
   844  0499                     	;# 
   845  049A                     	;# 
   846  049B                     	;# 
   847  049B                     	;# 
   848  049C                     	;# 
   849  049E                     	;# 
   850  049F                     	;# 
   851  0611                     	;# 
   852  0612                     	;# 
   853  0613                     	;# 
   854  0613                     	;# 
   855  0614                     	;# 
   856  0615                     	;# 
   857  0616                     	;# 
   858  0616                     	;# 
   859  0617                     	;# 
   860  0618                     	;# 
   861  0619                     	;# 
   862  0619                     	;# 
   863  061A                     	;# 
   864  061B                     	;# 
   865  061C                     	;# 
   866  061C                     	;# 
   867  0691                     	;# 
   868  0692                     	;# 
   869  0693                     	;# 
   870  0694                     	;# 
   871  0695                     	;# 
   872  0F0F                     	;# 
   873  0F10                     	;# 
   874  0F11                     	;# 
   875  0F12                     	;# 
   876  0F13                     	;# 
   877  0F14                     	;# 
   878  0F15                     	;# 
   879  0F16                     	;# 
   880  0F17                     	;# 
   881  0F18                     	;# 
   882  0F19                     	;# 
   883  0F1A                     	;# 
   884  0F1B                     	;# 
   885  0F1C                     	;# 
   886  0F1D                     	;# 
   887  0F1E                     	;# 
   888  0F1F                     	;# 
   889  0F20                     	;# 
   890  0F21                     	;# 
   891  0F22                     	;# 
   892  0F23                     	;# 
   893  0F24                     	;# 
   894  0F25                     	;# 
   895  0F26                     	;# 
   896  0F27                     	;# 
   897  0F28                     	;# 
   898  0F29                     	;# 
   899  0F2A                     	;# 
   900  0F2B                     	;# 
   901  0F2C                     	;# 
   902  0F2D                     	;# 
   903  0F2E                     	;# 
   904  0F2F                     	;# 
   905  0F8C                     	;# 
   906  0F8D                     	;# 
   907  0F91                     	;# 
   908  0F95                     	;# 
   909  0F96                     	;# 
   910  0F97                     	;# 
   911  0F9C                     	;# 
   912  0F9D                     	;# 
   913  0F9E                     	;# 
   914  0FE3                     	;# 
   915  0FE4                     	;# 
   916  0FE5                     	;# 
   917  0FE6                     	;# 
   918  0FE7                     	;# 
   919  0FE8                     	;# 
   920  0FE9                     	;# 
   921  0FEA                     	;# 
   922  0FEB                     	;# 
   923  0FED                     	;# 
   924  0FEE                     	;# 
   925  0FEF                     	;# 
   926  0000                     	;# 
   927  0001                     	;# 
   928  0002                     	;# 
   929  0003                     	;# 
   930  0004                     	;# 
   931  0005                     	;# 
   932  0006                     	;# 
   933  0007                     	;# 
   934  0008                     	;# 
   935  0009                     	;# 
   936  000A                     	;# 
   937  000B                     	;# 
   938  000C                     	;# 
   939  000D                     	;# 
   940  000E                     	;# 
   941  0011                     	;# 
   942  0012                     	;# 
   943  0013                     	;# 
   944  0015                     	;# 
   945  0016                     	;# 
   946  0016                     	;# 
   947  0017                     	;# 
   948  0018                     	;# 
   949  0019                     	;# 
   950  001A                     	;# 
   951  001B                     	;# 
   952  001C                     	;# 
   953  008C                     	;# 
   954  008D                     	;# 
   955  008E                     	;# 
   956  0091                     	;# 
   957  0092                     	;# 
   958  0093                     	;# 
   959  0095                     	;# 
   960  0096                     	;# 
   961  0097                     	;# 
   962  0099                     	;# 
   963  009A                     	;# 
   964  009B                     	;# 
   965  009B                     	;# 
   966  009C                     	;# 
   967  009D                     	;# 
   968  009E                     	;# 
   969  009F                     	;# 
   970  010C                     	;# 
   971  010D                     	;# 
   972  010E                     	;# 
   973  0111                     	;# 
   974  0112                     	;# 
   975  0113                     	;# 
   976  0114                     	;# 
   977  0115                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  0118                     	;# 
   981  0119                     	;# 
   982  011D                     	;# 
   983  018C                     	;# 
   984  018D                     	;# 
   985  018E                     	;# 
   986  0191                     	;# 
   987  0191                     	;# 
   988  0192                     	;# 
   989  0193                     	;# 
   990  0193                     	;# 
   991  0194                     	;# 
   992  0195                     	;# 
   993  0196                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019D                     	;# 
   999  019E                     	;# 
  1000  019F                     	;# 
  1001  020C                     	;# 
  1002  020D                     	;# 
  1003  0211                     	;# 
  1004  0211                     	;# 
  1005  0212                     	;# 
  1006  0212                     	;# 
  1007  0213                     	;# 
  1008  0213                     	;# 
  1009  0214                     	;# 
  1010  0214                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0216                     	;# 
  1015  0216                     	;# 
  1016  0217                     	;# 
  1017  0217                     	;# 
  1018  0391                     	;# 
  1019  0392                     	;# 
  1020  0393                     	;# 
  1021  0394                     	;# 
  1022  0395                     	;# 
  1023  0396                     	;# 
  1024  0498                     	;# 
  1025  0498                     	;# 
  1026  0499                     	;# 
  1027  049A                     	;# 
  1028  049B                     	;# 
  1029  049B                     	;# 
  1030  049C                     	;# 
  1031  049E                     	;# 
  1032  049F                     	;# 
  1033  0611                     	;# 
  1034  0612                     	;# 
  1035  0613                     	;# 
  1036  0613                     	;# 
  1037  0614                     	;# 
  1038  0615                     	;# 
  1039  0616                     	;# 
  1040  0616                     	;# 
  1041  0617                     	;# 
  1042  0618                     	;# 
  1043  0619                     	;# 
  1044  0619                     	;# 
  1045  061A                     	;# 
  1046  061B                     	;# 
  1047  061C                     	;# 
  1048  061C                     	;# 
  1049  0691                     	;# 
  1050  0692                     	;# 
  1051  0693                     	;# 
  1052  0694                     	;# 
  1053  0695                     	;# 
  1054  0F0F                     	;# 
  1055  0F10                     	;# 
  1056  0F11                     	;# 
  1057  0F12                     	;# 
  1058  0F13                     	;# 
  1059  0F14                     	;# 
  1060  0F15                     	;# 
  1061  0F16                     	;# 
  1062  0F17                     	;# 
  1063  0F18                     	;# 
  1064  0F19                     	;# 
  1065  0F1A                     	;# 
  1066  0F1B                     	;# 
  1067  0F1C                     	;# 
  1068  0F1D                     	;# 
  1069  0F1E                     	;# 
  1070  0F1F                     	;# 
  1071  0F20                     	;# 
  1072  0F21                     	;# 
  1073  0F22                     	;# 
  1074  0F23                     	;# 
  1075  0F24                     	;# 
  1076  0F25                     	;# 
  1077  0F26                     	;# 
  1078  0F27                     	;# 
  1079  0F28                     	;# 
  1080  0F29                     	;# 
  1081  0F2A                     	;# 
  1082  0F2B                     	;# 
  1083  0F2C                     	;# 
  1084  0F2D                     	;# 
  1085  0F2E                     	;# 
  1086  0F2F                     	;# 
  1087  0F8C                     	;# 
  1088  0F8D                     	;# 
  1089  0F91                     	;# 
  1090  0F95                     	;# 
  1091  0F96                     	;# 
  1092  0F97                     	;# 
  1093  0F9C                     	;# 
  1094  0F9D                     	;# 
  1095  0F9E                     	;# 
  1096  0FE3                     	;# 
  1097  0FE4                     	;# 
  1098  0FE5                     	;# 
  1099  0FE6                     	;# 
  1100  0FE7                     	;# 
  1101  0FE8                     	;# 
  1102  0FE9                     	;# 
  1103  0FEA                     	;# 
  1104  0FEB                     	;# 
  1105  0FED                     	;# 
  1106  0FEE                     	;# 
  1107  0FEF                     	;# 
  1108  0000                     	;# 
  1109  0001                     	;# 
  1110  0002                     	;# 
  1111  0003                     	;# 
  1112  0004                     	;# 
  1113  0005                     	;# 
  1114  0006                     	;# 
  1115  0007                     	;# 
  1116  0008                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  008C                     	;# 
  1136  008D                     	;# 
  1137  008E                     	;# 
  1138  0091                     	;# 
  1139  0092                     	;# 
  1140  0093                     	;# 
  1141  0095                     	;# 
  1142  0096                     	;# 
  1143  0097                     	;# 
  1144  0099                     	;# 
  1145  009A                     	;# 
  1146  009B                     	;# 
  1147  009B                     	;# 
  1148  009C                     	;# 
  1149  009D                     	;# 
  1150  009E                     	;# 
  1151  009F                     	;# 
  1152  010C                     	;# 
  1153  010D                     	;# 
  1154  010E                     	;# 
  1155  0111                     	;# 
  1156  0112                     	;# 
  1157  0113                     	;# 
  1158  0114                     	;# 
  1159  0115                     	;# 
  1160  0116                     	;# 
  1161  0117                     	;# 
  1162  0118                     	;# 
  1163  0119                     	;# 
  1164  011D                     	;# 
  1165  018C                     	;# 
  1166  018D                     	;# 
  1167  018E                     	;# 
  1168  0191                     	;# 
  1169  0191                     	;# 
  1170  0192                     	;# 
  1171  0193                     	;# 
  1172  0193                     	;# 
  1173  0194                     	;# 
  1174  0195                     	;# 
  1175  0196                     	;# 
  1176  0199                     	;# 
  1177  019A                     	;# 
  1178  019B                     	;# 
  1179  019C                     	;# 
  1180  019D                     	;# 
  1181  019E                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020D                     	;# 
  1185  0211                     	;# 
  1186  0211                     	;# 
  1187  0212                     	;# 
  1188  0212                     	;# 
  1189  0213                     	;# 
  1190  0213                     	;# 
  1191  0214                     	;# 
  1192  0214                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0216                     	;# 
  1197  0216                     	;# 
  1198  0217                     	;# 
  1199  0217                     	;# 
  1200  0391                     	;# 
  1201  0392                     	;# 
  1202  0393                     	;# 
  1203  0394                     	;# 
  1204  0395                     	;# 
  1205  0396                     	;# 
  1206  0498                     	;# 
  1207  0498                     	;# 
  1208  0499                     	;# 
  1209  049A                     	;# 
  1210  049B                     	;# 
  1211  049B                     	;# 
  1212  049C                     	;# 
  1213  049E                     	;# 
  1214  049F                     	;# 
  1215  0611                     	;# 
  1216  0612                     	;# 
  1217  0613                     	;# 
  1218  0613                     	;# 
  1219  0614                     	;# 
  1220  0615                     	;# 
  1221  0616                     	;# 
  1222  0616                     	;# 
  1223  0617                     	;# 
  1224  0618                     	;# 
  1225  0619                     	;# 
  1226  0619                     	;# 
  1227  061A                     	;# 
  1228  061B                     	;# 
  1229  061C                     	;# 
  1230  061C                     	;# 
  1231  0691                     	;# 
  1232  0692                     	;# 
  1233  0693                     	;# 
  1234  0694                     	;# 
  1235  0695                     	;# 
  1236  0F0F                     	;# 
  1237  0F10                     	;# 
  1238  0F11                     	;# 
  1239  0F12                     	;# 
  1240  0F13                     	;# 
  1241  0F14                     	;# 
  1242  0F15                     	;# 
  1243  0F16                     	;# 
  1244  0F17                     	;# 
  1245  0F18                     	;# 
  1246  0F19                     	;# 
  1247  0F1A                     	;# 
  1248  0F1B                     	;# 
  1249  0F1C                     	;# 
  1250  0F1D                     	;# 
  1251  0F1E                     	;# 
  1252  0F1F                     	;# 
  1253  0F20                     	;# 
  1254  0F21                     	;# 
  1255  0F22                     	;# 
  1256  0F23                     	;# 
  1257  0F24                     	;# 
  1258  0F25                     	;# 
  1259  0F26                     	;# 
  1260  0F27                     	;# 
  1261  0F28                     	;# 
  1262  0F29                     	;# 
  1263  0F2A                     	;# 
  1264  0F2B                     	;# 
  1265  0F2C                     	;# 
  1266  0F2D                     	;# 
  1267  0F2E                     	;# 
  1268  0F2F                     	;# 
  1269  0F8C                     	;# 
  1270  0F8D                     	;# 
  1271  0F91                     	;# 
  1272  0F95                     	;# 
  1273  0F96                     	;# 
  1274  0F97                     	;# 
  1275  0F9C                     	;# 
  1276  0F9D                     	;# 
  1277  0F9E                     	;# 
  1278  0FE3                     	;# 
  1279  0FE4                     	;# 
  1280  0FE5                     	;# 
  1281  0FE6                     	;# 
  1282  0FE7                     	;# 
  1283  0FE8                     	;# 
  1284  0FE9                     	;# 
  1285  0FEA                     	;# 
  1286  0FEB                     	;# 
  1287  0FED                     	;# 
  1288  0FEE                     	;# 
  1289  0FEF                     	;# 
  1290  0000                     	;# 
  1291  0001                     	;# 
  1292  0002                     	;# 
  1293  0003                     	;# 
  1294  0004                     	;# 
  1295  0005                     	;# 
  1296  0006                     	;# 
  1297  0007                     	;# 
  1298  0008                     	;# 
  1299  0009                     	;# 
  1300  000A                     	;# 
  1301  000B                     	;# 
  1302  000C                     	;# 
  1303  000D                     	;# 
  1304  000E                     	;# 
  1305  0011                     	;# 
  1306  0012                     	;# 
  1307  0013                     	;# 
  1308  0015                     	;# 
  1309  0016                     	;# 
  1310  0016                     	;# 
  1311  0017                     	;# 
  1312  0018                     	;# 
  1313  0019                     	;# 
  1314  001A                     	;# 
  1315  001B                     	;# 
  1316  001C                     	;# 
  1317  008C                     	;# 
  1318  008D                     	;# 
  1319  008E                     	;# 
  1320  0091                     	;# 
  1321  0092                     	;# 
  1322  0093                     	;# 
  1323  0095                     	;# 
  1324  0096                     	;# 
  1325  0097                     	;# 
  1326  0099                     	;# 
  1327  009A                     	;# 
  1328  009B                     	;# 
  1329  009B                     	;# 
  1330  009C                     	;# 
  1331  009D                     	;# 
  1332  009E                     	;# 
  1333  009F                     	;# 
  1334  010C                     	;# 
  1335  010D                     	;# 
  1336  010E                     	;# 
  1337  0111                     	;# 
  1338  0112                     	;# 
  1339  0113                     	;# 
  1340  0114                     	;# 
  1341  0115                     	;# 
  1342  0116                     	;# 
  1343  0117                     	;# 
  1344  0118                     	;# 
  1345  0119                     	;# 
  1346  011D                     	;# 
  1347  018C                     	;# 
  1348  018D                     	;# 
  1349  018E                     	;# 
  1350  0191                     	;# 
  1351  0191                     	;# 
  1352  0192                     	;# 
  1353  0193                     	;# 
  1354  0193                     	;# 
  1355  0194                     	;# 
  1356  0195                     	;# 
  1357  0196                     	;# 
  1358  0199                     	;# 
  1359  019A                     	;# 
  1360  019B                     	;# 
  1361  019C                     	;# 
  1362  019D                     	;# 
  1363  019E                     	;# 
  1364  019F                     	;# 
  1365  020C                     	;# 
  1366  020D                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0391                     	;# 
  1383  0392                     	;# 
  1384  0393                     	;# 
  1385  0394                     	;# 
  1386  0395                     	;# 
  1387  0396                     	;# 
  1388  0498                     	;# 
  1389  0498                     	;# 
  1390  0499                     	;# 
  1391  049A                     	;# 
  1392  049B                     	;# 
  1393  049B                     	;# 
  1394  049C                     	;# 
  1395  049E                     	;# 
  1396  049F                     	;# 
  1397  0611                     	;# 
  1398  0612                     	;# 
  1399  0613                     	;# 
  1400  0613                     	;# 
  1401  0614                     	;# 
  1402  0615                     	;# 
  1403  0616                     	;# 
  1404  0616                     	;# 
  1405  0617                     	;# 
  1406  0618                     	;# 
  1407  0619                     	;# 
  1408  0619                     	;# 
  1409  061A                     	;# 
  1410  061B                     	;# 
  1411  061C                     	;# 
  1412  061C                     	;# 
  1413  0691                     	;# 
  1414  0692                     	;# 
  1415  0693                     	;# 
  1416  0694                     	;# 
  1417  0695                     	;# 
  1418  0F0F                     	;# 
  1419  0F10                     	;# 
  1420  0F11                     	;# 
  1421  0F12                     	;# 
  1422  0F13                     	;# 
  1423  0F14                     	;# 
  1424  0F15                     	;# 
  1425  0F16                     	;# 
  1426  0F17                     	;# 
  1427  0F18                     	;# 
  1428  0F19                     	;# 
  1429  0F1A                     	;# 
  1430  0F1B                     	;# 
  1431  0F1C                     	;# 
  1432  0F1D                     	;# 
  1433  0F1E                     	;# 
  1434  0F1F                     	;# 
  1435  0F20                     	;# 
  1436  0F21                     	;# 
  1437  0F22                     	;# 
  1438  0F23                     	;# 
  1439  0F24                     	;# 
  1440  0F25                     	;# 
  1441  0F26                     	;# 
  1442  0F27                     	;# 
  1443  0F28                     	;# 
  1444  0F29                     	;# 
  1445  0F2A                     	;# 
  1446  0F2B                     	;# 
  1447  0F2C                     	;# 
  1448  0F2D                     	;# 
  1449  0F2E                     	;# 
  1450  0F2F                     	;# 
  1451  0F8C                     	;# 
  1452  0F8D                     	;# 
  1453  0F91                     	;# 
  1454  0F95                     	;# 
  1455  0F96                     	;# 
  1456  0F97                     	;# 
  1457  0F9C                     	;# 
  1458  0F9D                     	;# 
  1459  0F9E                     	;# 
  1460  0FE3                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0011                     	;# 
  1488  0012                     	;# 
  1489  0013                     	;# 
  1490  0015                     	;# 
  1491  0016                     	;# 
  1492  0016                     	;# 
  1493  0017                     	;# 
  1494  0018                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  008C                     	;# 
  1500  008D                     	;# 
  1501  008E                     	;# 
  1502  0091                     	;# 
  1503  0092                     	;# 
  1504  0093                     	;# 
  1505  0095                     	;# 
  1506  0096                     	;# 
  1507  0097                     	;# 
  1508  0099                     	;# 
  1509  009A                     	;# 
  1510  009B                     	;# 
  1511  009B                     	;# 
  1512  009C                     	;# 
  1513  009D                     	;# 
  1514  009E                     	;# 
  1515  009F                     	;# 
  1516  010C                     	;# 
  1517  010D                     	;# 
  1518  010E                     	;# 
  1519  0111                     	;# 
  1520  0112                     	;# 
  1521  0113                     	;# 
  1522  0114                     	;# 
  1523  0115                     	;# 
  1524  0116                     	;# 
  1525  0117                     	;# 
  1526  0118                     	;# 
  1527  0119                     	;# 
  1528  011D                     	;# 
  1529  018C                     	;# 
  1530  018D                     	;# 
  1531  018E                     	;# 
  1532  0191                     	;# 
  1533  0191                     	;# 
  1534  0192                     	;# 
  1535  0193                     	;# 
  1536  0193                     	;# 
  1537  0194                     	;# 
  1538  0195                     	;# 
  1539  0196                     	;# 
  1540  0199                     	;# 
  1541  019A                     	;# 
  1542  019B                     	;# 
  1543  019C                     	;# 
  1544  019D                     	;# 
  1545  019E                     	;# 
  1546  019F                     	;# 
  1547  020C                     	;# 
  1548  020D                     	;# 
  1549  0211                     	;# 
  1550  0211                     	;# 
  1551  0212                     	;# 
  1552  0212                     	;# 
  1553  0213                     	;# 
  1554  0213                     	;# 
  1555  0214                     	;# 
  1556  0214                     	;# 
  1557  0215                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0216                     	;# 
  1561  0216                     	;# 
  1562  0217                     	;# 
  1563  0217                     	;# 
  1564  0391                     	;# 
  1565  0392                     	;# 
  1566  0393                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0498                     	;# 
  1571  0498                     	;# 
  1572  0499                     	;# 
  1573  049A                     	;# 
  1574  049B                     	;# 
  1575  049B                     	;# 
  1576  049C                     	;# 
  1577  049E                     	;# 
  1578  049F                     	;# 
  1579  0611                     	;# 
  1580  0612                     	;# 
  1581  0613                     	;# 
  1582  0613                     	;# 
  1583  0614                     	;# 
  1584  0615                     	;# 
  1585  0616                     	;# 
  1586  0616                     	;# 
  1587  0617                     	;# 
  1588  0618                     	;# 
  1589  0619                     	;# 
  1590  0619                     	;# 
  1591  061A                     	;# 
  1592  061B                     	;# 
  1593  061C                     	;# 
  1594  061C                     	;# 
  1595  0691                     	;# 
  1596  0692                     	;# 
  1597  0693                     	;# 
  1598  0694                     	;# 
  1599  0695                     	;# 
  1600  0F0F                     	;# 
  1601  0F10                     	;# 
  1602  0F11                     	;# 
  1603  0F12                     	;# 
  1604  0F13                     	;# 
  1605  0F14                     	;# 
  1606  0F15                     	;# 
  1607  0F16                     	;# 
  1608  0F17                     	;# 
  1609  0F18                     	;# 
  1610  0F19                     	;# 
  1611  0F1A                     	;# 
  1612  0F1B                     	;# 
  1613  0F1C                     	;# 
  1614  0F1D                     	;# 
  1615  0F1E                     	;# 
  1616  0F1F                     	;# 
  1617  0F20                     	;# 
  1618  0F21                     	;# 
  1619  0F22                     	;# 
  1620  0F23                     	;# 
  1621  0F24                     	;# 
  1622  0F25                     	;# 
  1623  0F26                     	;# 
  1624  0F27                     	;# 
  1625  0F28                     	;# 
  1626  0F29                     	;# 
  1627  0F2A                     	;# 
  1628  0F2B                     	;# 
  1629  0F2C                     	;# 
  1630  0F2D                     	;# 
  1631  0F2E                     	;# 
  1632  0F2F                     	;# 
  1633  0F8C                     	;# 
  1634  0F8D                     	;# 
  1635  0F91                     	;# 
  1636  0F95                     	;# 
  1637  0F96                     	;# 
  1638  0F97                     	;# 
  1639  0F9C                     	;# 
  1640  0F9D                     	;# 
  1641  0F9E                     	;# 
  1642  0FE3                     	;# 
  1643  0FE4                     	;# 
  1644  0FE5                     	;# 
  1645  0FE6                     	;# 
  1646  0FE7                     	;# 
  1647  0FE8                     	;# 
  1648  0FE9                     	;# 
  1649  0FEA                     	;# 
  1650  0FEB                     	;# 
  1651  0FED                     	;# 
  1652  0FEE                     	;# 
  1653  0FEF                     	;# 
  1654  0000                     	;# 
  1655  0001                     	;# 
  1656  0002                     	;# 
  1657  0003                     	;# 
  1658  0004                     	;# 
  1659  0005                     	;# 
  1660  0006                     	;# 
  1661  0007                     	;# 
  1662  0008                     	;# 
  1663  0009                     	;# 
  1664  000A                     	;# 
  1665  000B                     	;# 
  1666  000C                     	;# 
  1667  000D                     	;# 
  1668  000E                     	;# 
  1669  0011                     	;# 
  1670  0012                     	;# 
  1671  0013                     	;# 
  1672  0015                     	;# 
  1673  0016                     	;# 
  1674  0016                     	;# 
  1675  0017                     	;# 
  1676  0018                     	;# 
  1677  0019                     	;# 
  1678  001A                     	;# 
  1679  001B                     	;# 
  1680  001C                     	;# 
  1681  008C                     	;# 
  1682  008D                     	;# 
  1683  008E                     	;# 
  1684  0091                     	;# 
  1685  0092                     	;# 
  1686  0093                     	;# 
  1687  0095                     	;# 
  1688  0096                     	;# 
  1689  0097                     	;# 
  1690  0099                     	;# 
  1691  009A                     	;# 
  1692  009B                     	;# 
  1693  009B                     	;# 
  1694  009C                     	;# 
  1695  009D                     	;# 
  1696  009E                     	;# 
  1697  009F                     	;# 
  1698  010C                     	;# 
  1699  010D                     	;# 
  1700  010E                     	;# 
  1701  0111                     	;# 
  1702  0112                     	;# 
  1703  0113                     	;# 
  1704  0114                     	;# 
  1705  0115                     	;# 
  1706  0116                     	;# 
  1707  0117                     	;# 
  1708  0118                     	;# 
  1709  0119                     	;# 
  1710  011D                     	;# 
  1711  018C                     	;# 
  1712  018D                     	;# 
  1713  018E                     	;# 
  1714  0191                     	;# 
  1715  0191                     	;# 
  1716  0192                     	;# 
  1717  0193                     	;# 
  1718  0193                     	;# 
  1719  0194                     	;# 
  1720  0195                     	;# 
  1721  0196                     	;# 
  1722  0199                     	;# 
  1723  019A                     	;# 
  1724  019B                     	;# 
  1725  019C                     	;# 
  1726  019D                     	;# 
  1727  019E                     	;# 
  1728  019F                     	;# 
  1729  020C                     	;# 
  1730  020D                     	;# 
  1731  0211                     	;# 
  1732  0211                     	;# 
  1733  0212                     	;# 
  1734  0212                     	;# 
  1735  0213                     	;# 
  1736  0213                     	;# 
  1737  0214                     	;# 
  1738  0214                     	;# 
  1739  0215                     	;# 
  1740  0215                     	;# 
  1741  0215                     	;# 
  1742  0216                     	;# 
  1743  0216                     	;# 
  1744  0217                     	;# 
  1745  0217                     	;# 
  1746  0391                     	;# 
  1747  0392                     	;# 
  1748  0393                     	;# 
  1749  0394                     	;# 
  1750  0395                     	;# 
  1751  0396                     	;# 
  1752  0498                     	;# 
  1753  0498                     	;# 
  1754  0499                     	;# 
  1755  049A                     	;# 
  1756  049B                     	;# 
  1757  049B                     	;# 
  1758  049C                     	;# 
  1759  049E                     	;# 
  1760  049F                     	;# 
  1761  0611                     	;# 
  1762  0612                     	;# 
  1763  0613                     	;# 
  1764  0613                     	;# 
  1765  0614                     	;# 
  1766  0615                     	;# 
  1767  0616                     	;# 
  1768  0616                     	;# 
  1769  0617                     	;# 
  1770  0618                     	;# 
  1771  0619                     	;# 
  1772  0619                     	;# 
  1773  061A                     	;# 
  1774  061B                     	;# 
  1775  061C                     	;# 
  1776  061C                     	;# 
  1777  0691                     	;# 
  1778  0692                     	;# 
  1779  0693                     	;# 
  1780  0694                     	;# 
  1781  0695                     	;# 
  1782  0F0F                     	;# 
  1783  0F10                     	;# 
  1784  0F11                     	;# 
  1785  0F12                     	;# 
  1786  0F13                     	;# 
  1787  0F14                     	;# 
  1788  0F15                     	;# 
  1789  0F16                     	;# 
  1790  0F17                     	;# 
  1791  0F18                     	;# 
  1792  0F19                     	;# 
  1793  0F1A                     	;# 
  1794  0F1B                     	;# 
  1795  0F1C                     	;# 
  1796  0F1D                     	;# 
  1797  0F1E                     	;# 
  1798  0F1F                     	;# 
  1799  0F20                     	;# 
  1800  0F21                     	;# 
  1801  0F22                     	;# 
  1802  0F23                     	;# 
  1803  0F24                     	;# 
  1804  0F25                     	;# 
  1805  0F26                     	;# 
  1806  0F27                     	;# 
  1807  0F28                     	;# 
  1808  0F29                     	;# 
  1809  0F2A                     	;# 
  1810  0F2B                     	;# 
  1811  0F2C                     	;# 
  1812  0F2D                     	;# 
  1813  0F2E                     	;# 
  1814  0F2F                     	;# 
  1815  0F8C                     	;# 
  1816  0F8D                     	;# 
  1817  0F91                     	;# 
  1818  0F95                     	;# 
  1819  0F96                     	;# 
  1820  0F97                     	;# 
  1821  0F9C                     	;# 
  1822  0F9D                     	;# 
  1823  0F9E                     	;# 
  1824  0FE3                     	;# 
  1825  0FE4                     	;# 
  1826  0FE5                     	;# 
  1827  0FE6                     	;# 
  1828  0FE7                     	;# 
  1829  0FE8                     	;# 
  1830  0FE9                     	;# 
  1831  0FEA                     	;# 
  1832  0FEB                     	;# 
  1833  0FED                     	;# 
  1834  0FEE                     	;# 
  1835  0FEF                     	;# 
  1836  0000                     	;# 
  1837  0001                     	;# 
  1838  0002                     	;# 
  1839  0003                     	;# 
  1840  0004                     	;# 
  1841  0005                     	;# 
  1842  0006                     	;# 
  1843  0007                     	;# 
  1844  0008                     	;# 
  1845  0009                     	;# 
  1846  000A                     	;# 
  1847  000B                     	;# 
  1848  000C                     	;# 
  1849  000D                     	;# 
  1850  000E                     	;# 
  1851  0011                     	;# 
  1852  0012                     	;# 
  1853  0013                     	;# 
  1854  0015                     	;# 
  1855  0016                     	;# 
  1856  0016                     	;# 
  1857  0017                     	;# 
  1858  0018                     	;# 
  1859  0019                     	;# 
  1860  001A                     	;# 
  1861  001B                     	;# 
  1862  001C                     	;# 
  1863  008C                     	;# 
  1864  008D                     	;# 
  1865  008E                     	;# 
  1866  0091                     	;# 
  1867  0092                     	;# 
  1868  0093                     	;# 
  1869  0095                     	;# 
  1870  0096                     	;# 
  1871  0097                     	;# 
  1872  0099                     	;# 
  1873  009A                     	;# 
  1874  009B                     	;# 
  1875  009B                     	;# 
  1876  009C                     	;# 
  1877  009D                     	;# 
  1878  009E                     	;# 
  1879  009F                     	;# 
  1880  010C                     	;# 
  1881  010D                     	;# 
  1882  010E                     	;# 
  1883  0111                     	;# 
  1884  0112                     	;# 
  1885  0113                     	;# 
  1886  0114                     	;# 
  1887  0115                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  0118                     	;# 
  1891  0119                     	;# 
  1892  011D                     	;# 
  1893  018C                     	;# 
  1894  018D                     	;# 
  1895  018E                     	;# 
  1896  0191                     	;# 
  1897  0191                     	;# 
  1898  0192                     	;# 
  1899  0193                     	;# 
  1900  0193                     	;# 
  1901  0194                     	;# 
  1902  0195                     	;# 
  1903  0196                     	;# 
  1904  0199                     	;# 
  1905  019A                     	;# 
  1906  019B                     	;# 
  1907  019C                     	;# 
  1908  019D                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  020C                     	;# 
  1912  020D                     	;# 
  1913  0211                     	;# 
  1914  0211                     	;# 
  1915  0212                     	;# 
  1916  0212                     	;# 
  1917  0213                     	;# 
  1918  0213                     	;# 
  1919  0214                     	;# 
  1920  0214                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0216                     	;# 
  1925  0216                     	;# 
  1926  0217                     	;# 
  1927  0217                     	;# 
  1928  0391                     	;# 
  1929  0392                     	;# 
  1930  0393                     	;# 
  1931  0394                     	;# 
  1932  0395                     	;# 
  1933  0396                     	;# 
  1934  0498                     	;# 
  1935  0498                     	;# 
  1936  0499                     	;# 
  1937  049A                     	;# 
  1938  049B                     	;# 
  1939  049B                     	;# 
  1940  049C                     	;# 
  1941  049E                     	;# 
  1942  049F                     	;# 
  1943  0611                     	;# 
  1944  0612                     	;# 
  1945  0613                     	;# 
  1946  0613                     	;# 
  1947  0614                     	;# 
  1948  0615                     	;# 
  1949  0616                     	;# 
  1950  0616                     	;# 
  1951  0617                     	;# 
  1952  0618                     	;# 
  1953  0619                     	;# 
  1954  0619                     	;# 
  1955  061A                     	;# 
  1956  061B                     	;# 
  1957  061C                     	;# 
  1958  061C                     	;# 
  1959  0691                     	;# 
  1960  0692                     	;# 
  1961  0693                     	;# 
  1962  0694                     	;# 
  1963  0695                     	;# 
  1964  0F0F                     	;# 
  1965  0F10                     	;# 
  1966  0F11                     	;# 
  1967  0F12                     	;# 
  1968  0F13                     	;# 
  1969  0F14                     	;# 
  1970  0F15                     	;# 
  1971  0F16                     	;# 
  1972  0F17                     	;# 
  1973  0F18                     	;# 
  1974  0F19                     	;# 
  1975  0F1A                     	;# 
  1976  0F1B                     	;# 
  1977  0F1C                     	;# 
  1978  0F1D                     	;# 
  1979  0F1E                     	;# 
  1980  0F1F                     	;# 
  1981  0F20                     	;# 
  1982  0F21                     	;# 
  1983  0F22                     	;# 
  1984  0F23                     	;# 
  1985  0F24                     	;# 
  1986  0F25                     	;# 
  1987  0F26                     	;# 
  1988  0F27                     	;# 
  1989  0F28                     	;# 
  1990  0F29                     	;# 
  1991  0F2A                     	;# 
  1992  0F2B                     	;# 
  1993  0F2C                     	;# 
  1994  0F2D                     	;# 
  1995  0F2E                     	;# 
  1996  0F2F                     	;# 
  1997  0F8C                     	;# 
  1998  0F8D                     	;# 
  1999  0F91                     	;# 
  2000  0F95                     	;# 
  2001  0F96                     	;# 
  2002  0F97                     	;# 
  2003  0F9C                     	;# 
  2004  0F9D                     	;# 
  2005  0F9E                     	;# 
  2006  0FE3                     	;# 
  2007  0FE4                     	;# 
  2008  0FE5                     	;# 
  2009  0FE6                     	;# 
  2010  0FE7                     	;# 
  2011  0FE8                     	;# 
  2012  0FE9                     	;# 
  2013  0FEA                     	;# 
  2014  0FEB                     	;# 
  2015  0FED                     	;# 
  2016  0FEE                     	;# 
  2017  0FEF                     	;# 
  2018  0000                     	;# 
  2019  0001                     	;# 
  2020  0002                     	;# 
  2021  0003                     	;# 
  2022  0004                     	;# 
  2023  0005                     	;# 
  2024  0006                     	;# 
  2025  0007                     	;# 
  2026  0008                     	;# 
  2027  0009                     	;# 
  2028  000A                     	;# 
  2029  000B                     	;# 
  2030  000C                     	;# 
  2031  000D                     	;# 
  2032  000E                     	;# 
  2033  0011                     	;# 
  2034  0012                     	;# 
  2035  0013                     	;# 
  2036  0015                     	;# 
  2037  0016                     	;# 
  2038  0016                     	;# 
  2039  0017                     	;# 
  2040  0018                     	;# 
  2041  0019                     	;# 
  2042  001A                     	;# 
  2043  001B                     	;# 
  2044  001C                     	;# 
  2045  008C                     	;# 
  2046  008D                     	;# 
  2047  008E                     	;# 
  2048  0091                     	;# 
  2049  0092                     	;# 
  2050  0093                     	;# 
  2051  0095                     	;# 
  2052  0096                     	;# 
  2053  0097                     	;# 
  2054  0099                     	;# 
  2055  009A                     	;# 
  2056  009B                     	;# 
  2057  009B                     	;# 
  2058  009C                     	;# 
  2059  009D                     	;# 
  2060  009E                     	;# 
  2061  009F                     	;# 
  2062  010C                     	;# 
  2063  010D                     	;# 
  2064  010E                     	;# 
  2065  0111                     	;# 
  2066  0112                     	;# 
  2067  0113                     	;# 
  2068  0114                     	;# 
  2069  0115                     	;# 
  2070  0116                     	;# 
  2071  0117                     	;# 
  2072  0118                     	;# 
  2073  0119                     	;# 
  2074  011D                     	;# 
  2075  018C                     	;# 
  2076  018D                     	;# 
  2077  018E                     	;# 
  2078  0191                     	;# 
  2079  0191                     	;# 
  2080  0192                     	;# 
  2081  0193                     	;# 
  2082  0193                     	;# 
  2083  0194                     	;# 
  2084  0195                     	;# 
  2085  0196                     	;# 
  2086  0199                     	;# 
  2087  019A                     	;# 
  2088  019B                     	;# 
  2089  019C                     	;# 
  2090  019D                     	;# 
  2091  019E                     	;# 
  2092  019F                     	;# 
  2093  020C                     	;# 
  2094  020D                     	;# 
  2095  0211                     	;# 
  2096  0211                     	;# 
  2097  0212                     	;# 
  2098  0212                     	;# 
  2099  0213                     	;# 
  2100  0213                     	;# 
  2101  0214                     	;# 
  2102  0214                     	;# 
  2103  0215                     	;# 
  2104  0215                     	;# 
  2105  0215                     	;# 
  2106  0216                     	;# 
  2107  0216                     	;# 
  2108  0217                     	;# 
  2109  0217                     	;# 
  2110  0391                     	;# 
  2111  0392                     	;# 
  2112  0393                     	;# 
  2113  0394                     	;# 
  2114  0395                     	;# 
  2115  0396                     	;# 
  2116  0498                     	;# 
  2117  0498                     	;# 
  2118  0499                     	;# 
  2119  049A                     	;# 
  2120  049B                     	;# 
  2121  049B                     	;# 
  2122  049C                     	;# 
  2123  049E                     	;# 
  2124  049F                     	;# 
  2125  0611                     	;# 
  2126  0612                     	;# 
  2127  0613                     	;# 
  2128  0613                     	;# 
  2129  0614                     	;# 
  2130  0615                     	;# 
  2131  0616                     	;# 
  2132  0616                     	;# 
  2133  0617                     	;# 
  2134  0618                     	;# 
  2135  0619                     	;# 
  2136  0619                     	;# 
  2137  061A                     	;# 
  2138  061B                     	;# 
  2139  061C                     	;# 
  2140  061C                     	;# 
  2141  0691                     	;# 
  2142  0692                     	;# 
  2143  0693                     	;# 
  2144  0694                     	;# 
  2145  0695                     	;# 
  2146  0F0F                     	;# 
  2147  0F10                     	;# 
  2148  0F11                     	;# 
  2149  0F12                     	;# 
  2150  0F13                     	;# 
  2151  0F14                     	;# 
  2152  0F15                     	;# 
  2153  0F16                     	;# 
  2154  0F17                     	;# 
  2155  0F18                     	;# 
  2156  0F19                     	;# 
  2157  0F1A                     	;# 
  2158  0F1B                     	;# 
  2159  0F1C                     	;# 
  2160  0F1D                     	;# 
  2161  0F1E                     	;# 
  2162  0F1F                     	;# 
  2163  0F20                     	;# 
  2164  0F21                     	;# 
  2165  0F22                     	;# 
  2166  0F23                     	;# 
  2167  0F24                     	;# 
  2168  0F25                     	;# 
  2169  0F26                     	;# 
  2170  0F27                     	;# 
  2171  0F28                     	;# 
  2172  0F29                     	;# 
  2173  0F2A                     	;# 
  2174  0F2B                     	;# 
  2175  0F2C                     	;# 
  2176  0F2D                     	;# 
  2177  0F2E                     	;# 
  2178  0F2F                     	;# 
  2179  0F8C                     	;# 
  2180  0F8D                     	;# 
  2181  0F91                     	;# 
  2182  0F95                     	;# 
  2183  0F96                     	;# 
  2184  0F97                     	;# 
  2185  0F9C                     	;# 
  2186  0F9D                     	;# 
  2187  0F9E                     	;# 
  2188  0FE3                     	;# 
  2189  0FE4                     	;# 
  2190  0FE5                     	;# 
  2191  0FE6                     	;# 
  2192  0FE7                     	;# 
  2193  0FE8                     	;# 
  2194  0FE9                     	;# 
  2195  0FEA                     	;# 
  2196  0FEB                     	;# 
  2197  0FED                     	;# 
  2198  0FEE                     	;# 
  2199  0FEF                     	;# 
  2200  0000                     	;# 
  2201  0001                     	;# 
  2202  0002                     	;# 
  2203  0003                     	;# 
  2204  0004                     	;# 
  2205  0005                     	;# 
  2206  0006                     	;# 
  2207  0007                     	;# 
  2208  0008                     	;# 
  2209  0009                     	;# 
  2210  000A                     	;# 
  2211  000B                     	;# 
  2212  000C                     	;# 
  2213  000D                     	;# 
  2214  000E                     	;# 
  2215  0011                     	;# 
  2216  0012                     	;# 
  2217  0013                     	;# 
  2218  0015                     	;# 
  2219  0016                     	;# 
  2220  0016                     	;# 
  2221  0017                     	;# 
  2222  0018                     	;# 
  2223  0019                     	;# 
  2224  001A                     	;# 
  2225  001B                     	;# 
  2226  001C                     	;# 
  2227  008C                     	;# 
  2228  008D                     	;# 
  2229  008E                     	;# 
  2230  0091                     	;# 
  2231  0092                     	;# 
  2232  0093                     	;# 
  2233  0095                     	;# 
  2234  0096                     	;# 
  2235  0097                     	;# 
  2236  0099                     	;# 
  2237  009A                     	;# 
  2238  009B                     	;# 
  2239  009B                     	;# 
  2240  009C                     	;# 
  2241  009D                     	;# 
  2242  009E                     	;# 
  2243  009F                     	;# 
  2244  010C                     	;# 
  2245  010D                     	;# 
  2246  010E                     	;# 
  2247  0111                     	;# 
  2248  0112                     	;# 
  2249  0113                     	;# 
  2250  0114                     	;# 
  2251  0115                     	;# 
  2252  0116                     	;# 
  2253  0117                     	;# 
  2254  0118                     	;# 
  2255  0119                     	;# 
  2256  011D                     	;# 
  2257  018C                     	;# 
  2258  018D                     	;# 
  2259  018E                     	;# 
  2260  0191                     	;# 
  2261  0191                     	;# 
  2262  0192                     	;# 
  2263  0193                     	;# 
  2264  0193                     	;# 
  2265  0194                     	;# 
  2266  0195                     	;# 
  2267  0196                     	;# 
  2268  0199                     	;# 
  2269  019A                     	;# 
  2270  019B                     	;# 
  2271  019C                     	;# 
  2272  019D                     	;# 
  2273  019E                     	;# 
  2274  019F                     	;# 
  2275  020C                     	;# 
  2276  020D                     	;# 
  2277  0211                     	;# 
  2278  0211                     	;# 
  2279  0212                     	;# 
  2280  0212                     	;# 
  2281  0213                     	;# 
  2282  0213                     	;# 
  2283  0214                     	;# 
  2284  0214                     	;# 
  2285  0215                     	;# 
  2286  0215                     	;# 
  2287  0215                     	;# 
  2288  0216                     	;# 
  2289  0216                     	;# 
  2290  0217                     	;# 
  2291  0217                     	;# 
  2292  0391                     	;# 
  2293  0392                     	;# 
  2294  0393                     	;# 
  2295  0394                     	;# 
  2296  0395                     	;# 
  2297  0396                     	;# 
  2298  0498                     	;# 
  2299  0498                     	;# 
  2300  0499                     	;# 
  2301  049A                     	;# 
  2302  049B                     	;# 
  2303  049B                     	;# 
  2304  049C                     	;# 
  2305  049E                     	;# 
  2306  049F                     	;# 
  2307  0611                     	;# 
  2308  0612                     	;# 
  2309  0613                     	;# 
  2310  0613                     	;# 
  2311  0614                     	;# 
  2312  0615                     	;# 
  2313  0616                     	;# 
  2314  0616                     	;# 
  2315  0617                     	;# 
  2316  0618                     	;# 
  2317  0619                     	;# 
  2318  0619                     	;# 
  2319  061A                     	;# 
  2320  061B                     	;# 
  2321  061C                     	;# 
  2322  061C                     	;# 
  2323  0691                     	;# 
  2324  0692                     	;# 
  2325  0693                     	;# 
  2326  0694                     	;# 
  2327  0695                     	;# 
  2328  0F0F                     	;# 
  2329  0F10                     	;# 
  2330  0F11                     	;# 
  2331  0F12                     	;# 
  2332  0F13                     	;# 
  2333  0F14                     	;# 
  2334  0F15                     	;# 
  2335  0F16                     	;# 
  2336  0F17                     	;# 
  2337  0F18                     	;# 
  2338  0F19                     	;# 
  2339  0F1A                     	;# 
  2340  0F1B                     	;# 
  2341  0F1C                     	;# 
  2342  0F1D                     	;# 
  2343  0F1E                     	;# 
  2344  0F1F                     	;# 
  2345  0F20                     	;# 
  2346  0F21                     	;# 
  2347  0F22                     	;# 
  2348  0F23                     	;# 
  2349  0F24                     	;# 
  2350  0F25                     	;# 
  2351  0F26                     	;# 
  2352  0F27                     	;# 
  2353  0F28                     	;# 
  2354  0F29                     	;# 
  2355  0F2A                     	;# 
  2356  0F2B                     	;# 
  2357  0F2C                     	;# 
  2358  0F2D                     	;# 
  2359  0F2E                     	;# 
  2360  0F2F                     	;# 
  2361  0F8C                     	;# 
  2362  0F8D                     	;# 
  2363  0F91                     	;# 
  2364  0F95                     	;# 
  2365  0F96                     	;# 
  2366  0F97                     	;# 
  2367  0F9C                     	;# 
  2368  0F9D                     	;# 
  2369  0F9E                     	;# 
  2370  0FE3                     	;# 
  2371  0FE4                     	;# 
  2372  0FE5                     	;# 
  2373  0FE6                     	;# 
  2374  0FE7                     	;# 
  2375  0FE8                     	;# 
  2376  0FE9                     	;# 
  2377  0FEA                     	;# 
  2378  0FEB                     	;# 
  2379  0FED                     	;# 
  2380  0FEE                     	;# 
  2381  0FEF                     	;# 
  2382                           
  2383                           	psect	strings
  2384  0726                     __pstrings:	
  2385  0726                     __stringtab:	
  2386  0726  3400               	retlw	0
  2387  0727                     __end_of__stringtab:	
  2388  0727                     _dpowers:	
  2389  0727  3401               	retlw	1
  2390  0728  3400               	retlw	0
  2391  0729  340A               	retlw	10
  2392  072A  3400               	retlw	0
  2393  072B  3464               	retlw	100
  2394  072C  3400               	retlw	0
  2395  072D  34E8               	retlw	232
  2396  072E  3403               	retlw	3
  2397  072F  3410               	retlw	16
  2398  0730  3427               	retlw	39
  2399  0731                     __end_of_dpowers:	
  2400  0731                     _mrfRegset_InitCnt:	
  2401  0731  3410               	retlw	16
  2402  0732                     __end_of_mrfRegset_InitCnt:	
  2403  0732                     _mrfRegset_RxCnt:	
  2404  0732  3406               	retlw	6
  2405  0733                     __end_of_mrfRegset_RxCnt:	
  2406  0733                     _mrfRegset_TxCnt:	
  2407  0733  3404               	retlw	4
  2408  0734                     __end_of_mrfRegset_TxCnt:	
  2409  0734                     _mrfRegset_Init:	
  2410  0734  34CA               	retlw	202
  2411  0735  3471               	retlw	113
  2412  0736  34CA               	retlw	202
  2413  0737  3473               	retlw	115
  2414  0738  3480               	retlw	128
  2415  0739  3428               	retlw	40
  2416  073A  34C4               	retlw	196
  2417  073B  34E7               	retlw	231
  2418  073C  34A8               	retlw	168
  2419  073D  3460               	retlw	96
  2420  073E  34C6               	retlw	198
  2421  073F  3405               	retlw	5
  2422  0740  3482               	retlw	130
  2423  0741  3400               	retlw	0
  2424  0742  3490               	retlw	144
  2425  0743  3462               	retlw	98
  2426  0744  3498               	retlw	152
  2427  0745  3490               	retlw	144
  2428  0746  34C2               	retlw	194
  2429  0747  34AC               	retlw	172
  2430  0748  3482               	retlw	130
  2431  0749  3420               	retlw	32
  2432  074A  3455               	retlw	85
  2433  074B  3400               	retlw	0
  2434  074C  3482               	retlw	130
  2435  074D  3480               	retlw	128
  2436  074E  3480               	retlw	128
  2437  074F  3468               	retlw	104
  2438  0750  34CA               	retlw	202
  2439  0751  3471               	retlw	113
  2440  0752  34CA               	retlw	202
  2441  0753  3473               	retlw	115
  2442  0754                     __end_of_mrfRegset_Init:	
  2443  0754                     _mrfRegset_Rx:	
  2444  0754  3482               	retlw	130
  2445  0755  3400               	retlw	0
  2446  0756  34CA               	retlw	202
  2447  0757  3471               	retlw	113
  2448  0758  3480               	retlw	128
  2449  0759  3428               	retlw	40
  2450  075A  3482               	retlw	130
  2451  075B  3480               	retlw	128
  2452  075C  3480               	retlw	128
  2453  075D  3468               	retlw	104
  2454  075E  34CA               	retlw	202
  2455  075F  3473               	retlw	115
  2456  0760                     __end_of_mrfRegset_Rx:	
  2457  0760                     _mrfRegset_Tx:	
  2458  0760  3482               	retlw	130
  2459  0761  3400               	retlw	0
  2460  0762  34CA               	retlw	202
  2461  0763  3471               	retlw	113
  2462  0764  3480               	retlw	128
  2463  0765  34A8               	retlw	168
  2464  0766  3482               	retlw	130
  2465  0767  3420               	retlw	32
  2466  0768                     __end_of_mrfRegset_Tx:	
  2467  000B                     _INTCONbits	set	11
  2468  000C                     _PORTAbits	set	12
  2469  000E                     _PORTCbits	set	14
  2470  009D                     _ADCON0	set	157
  2471  009E                     _ADCON1	set	158
  2472  009F                     _ADCON2	set	159
  2473  0095                     _OPTION_REGbits	set	149
  2474  0099                     _OSCCON	set	153
  2475  008C                     _TRISAbits	set	140
  2476  008D                     _TRISBbits	set	141
  2477  008E                     _TRISCbits	set	142
  2478  0117                     _FVRCON	set	279
  2479  010C                     _LATAbits	set	268
  2480  010D                     _LATBbits	set	269
  2481  010E                     _LATCbits	set	270
  2482  018C                     _ANSELA	set	396
  2483  018D                     _ANSELB	set	397
  2484  018E                     _ANSELC	set	398
  2485  020C                     _WPUAbits	set	524
  2486  0768                     __stringdata:	
  2487  0768                     STR_2:	
  2488  0768  345D               	retlw	93	;']'
  2489  0769  3452               	retlw	82	;'R'
  2490  076A  3446               	retlw	70	;'F'
  2491  076B  3420               	retlw	32	;' '
  2492  076C  3454               	retlw	84	;'T'
  2493  076D  3478               	retlw	120	;'x'
  2494  076E  3420               	retlw	32	;' '
  2495  076F  3441               	retlw	65	;'A'
  2496  0770  3463               	retlw	99	;'c'
  2497  0771  346B               	retlw	107	;'k'
  2498  0772  3420               	retlw	32	;' '
  2499  0773  3425               	retlw	37	;'%'
  2500  0774  3464               	retlw	100	;'d'
  2501  0775  3420               	retlw	32	;' '
  2502  0776  3425               	retlw	37	;'%'
  2503  0777  3464               	retlw	100	;'d'
  2504  0778  340A               	retlw	10
  2505  0779  3400               	retlw	0
  2506  077A                     STR_3:	
  2507  077A  3431               	retlw	49	;'1'
  2508  077B  3400               	retlw	0
  2509  077C                     STR_4:	
  2510  077C  3432               	retlw	50	;'2'
  2511  077D  3400               	retlw	0
  2512  077E                     STR_5:	
  2513  077E  3433               	retlw	51	;'3'
  2514  077F  3400               	retlw	0
  2515  0780                     STR_6:	
  2516  0780  3434               	retlw	52	;'4'
  2517  0781  3400               	retlw	0
  2518  0782                     STR_1:	
  2519  0782  345B               	retlw	91	;'['
  2520  0783  3400               	retlw	0
  2521  0784                     __end_of__stringdata:	
  2522                           
  2523                           ; #config settings
  2524  0000                     
  2525                           	psect	cinit
  2526  0016                     start_initialization:	
  2527  0016                     __initialization:	
  2528                           
  2529                           ; Clear objects allocated to BANK0
  2530  0016  01CA               	clrf	__pbssBANK0& (0+127)
  2531  0017  01CB               	clrf	(__pbssBANK0+1)& (0+127)
  2532                           
  2533                           ; Clear objects allocated to BANK1
  2534  0018  30A0               	movlw	low __pbssBANK1
  2535  0019  0084               	movwf	4
  2536  001A  3000               	movlw	high __pbssBANK1
  2537  001B  0085               	movwf	5
  2538  001C  304F               	movlw	79
  2539  001D  3187  2784  3180   	fcall	clear_ram0
  2540  0020                     end_of_initialization:	
  2541                           ;End of C runtime variable initialization code
  2542                           
  2543  0020                     __end_of__initialization:	
  2544  0020  0020               	movlb	0
  2545  0021  2822               	ljmp	_main	;jump to C main() function
  2546  0022                     __pmaintext:	
  2547 ;;
  2548 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2549 ;;
  2550 ;; *************** function _main *****************
  2551 ;; Defined at:
  2552 ;;		line 42 in file "../../../src/node/main.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;		None
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;		None
  2557 ;; Return value:  Size  Location     Type
  2558 ;;		None               void
  2559 ;; Registers used:
  2560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2561 ;; Tracked objects:
  2562 ;;		On entry : 17F/0
  2563 ;;		On exit  : 1F/1
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2566 ;;      Params:         0       0       0       0
  2567 ;;      Locals:         0       0       0       0
  2568 ;;      Temps:          0       0       0       0
  2569 ;;      Totals:         0       0       0       0
  2570 ;;Total ram usage:        0 bytes
  2571 ;; Hardware stack levels required when called:   11
  2572 ;; This function calls:
  2573 ;;		_AdcInit
  2574 ;;		_ExtIntInit
  2575 ;;		_Mrf49xaInit
  2576 ;;		_Mrf49xaTick
  2577 ;;		_RfSendPor
  2578 ;;		_SysInitGpio
  2579 ;; This function is called by:
  2580 ;;		Startup code after reset
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _main
  2586  0022                     _main:	
  2587                           
  2588                           ;main.c: 44: OSCCON = 0b01111000;
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in _main: [allreg]
  2592  0022  3078               	movlw	120
  2593  0023  0021               	movlb	1	; select bank1
  2594  0024  0099               	movwf	25	;volatile
  2595                           
  2596                           ;main.c: 45: WPUAbits.WPUA2 = 1;
  2597  0025  0024               	movlb	4	; select bank4
  2598  0026  150C               	bsf	12,2	;volatile
  2599                           
  2600                           ;main.c: 47: SysInitGpio();
  2601  0027  239F  3180         	fcall	_SysInitGpio
  2602                           
  2603                           ;main.c: 48: AdcInit();
  2604  0029  2306  3180         	fcall	_AdcInit
  2605                           
  2606                           ;main.c: 49: ExtIntInit();
  2607  002B  2315  3180         	fcall	_ExtIntInit
  2608                           
  2609                           ;main.c: 51: Mrf49xaInit();
  2610  002D  20E9  3180         	fcall	_Mrf49xaInit
  2611                           
  2612                           ;main.c: 53: RfSendPor();
  2613  002F  237D  3180         	fcall	_RfSendPor
  2614  0031                     l2588:	
  2615                           
  2616                           ;main.c: 56: {
  2617                           ;main.c: 57: Mrf49xaTick();
  2618  0031  2034  3180         	fcall	_Mrf49xaTick
  2619  0033  2831               	goto	l2588
  2620  0034                     __end_of_main:	
  2621  0034                     __ptext4:	
  2622 ;; *************** function _Mrf49xaTick *****************
  2623 ;; Defined at:
  2624 ;;		line 129 in file "../../../src/devices/mrf49xa_packet.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;		None
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  timeout         1   40[BANK0 ] unsigned char 
  2629 ;;  packet          1   41[BANK0 ] PTR struct rfTrcvPacket_
  2630 ;;		 -> NULL(0), rfTrcvStatus(79), 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;		None               void
  2633 ;; Registers used:
  2634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 1E/0
  2637 ;;		On exit  : 1F/1
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2640 ;;      Params:         0       0       0       0
  2641 ;;      Locals:         0       2       0       0
  2642 ;;      Temps:          0       2       0       0
  2643 ;;      Totals:         0       4       0       0
  2644 ;;Total ram usage:        4 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:   10
  2647 ;; This function calls:
  2648 ;;		_Mrf49xaModeTx
  2649 ;;		_Mrf49RxSts
  2650 ;;		_Mrf49xaPacketPending
  2651 ;;		_Mrf49xaFreePacket
  2652 ;;		_Mrf49xaRxPacket
  2653 ;;		_HandlePacket
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _Mrf49xaTick
  2661  0034                     _Mrf49xaTick:	
  2662                           
  2663                           ;mrf49xa_packet.c: 130: if (Mrf49xaPacketPending())
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _Mrf49xaTick: [allreg]
  2667  0034  231A  3180         	fcall	_Mrf49xaPacketPending
  2668  0036  3A00               	xorlw	0
  2669  0037  1903               	skipnz
  2670  0038  285A               	goto	l2480
  2671                           
  2672                           ;mrf49xa_packet.c: 131: {
  2673                           ;mrf49xa_packet.c: 132: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2674  0039  2324  3180         	fcall	_Mrf49xaRxPacket
  2675  003B  0020               	movlb	0	; select bank0
  2676  003C  00C9               	movwf	Mrf49xaTick@packet
  2677                           
  2678                           ;mrf49xa_packet.c: 140: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  2679  003D  3E03               	addlw	3
  2680  003E  0086               	movwf	6
  2681  003F  0187               	clrf	7
  2682  0040  0801               	movf	1,w
  2683  0041  3AFF               	xorlw	255
  2684  0042  1903               	skipnz
  2685  0043  284C               	goto	l2474
  2686  0044  0849               	movf	Mrf49xaTick@packet,w
  2687  0045  3E03               	addlw	3
  2688  0046  0086               	movwf	6
  2689  0047  0801               	movf	1,w
  2690  0048  0021               	movlb	1	; select bank1
  2691  0049  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  2692  004A  1D03               	skipz
  2693  004B  2856               	goto	l2478
  2694  004C                     l2474:	
  2695                           
  2696                           ;mrf49xa_packet.c: 141: {
  2697                           ;mrf49xa_packet.c: 142: packet->packet.size -= 5;
  2698  004C  0020               	movlb	0	; select bank0
  2699  004D  0A49               	incf	Mrf49xaTick@packet,w
  2700  004E  0086               	movwf	6
  2701  004F  3005               	movlw	5
  2702  0050  0187               	clrf	7
  2703  0051  0281               	subwf	1,f
  2704                           
  2705                           ;mrf49xa_packet.c: 145: HandlePacket(packet);
  2706  0052  0849               	movf	Mrf49xaTick@packet,w
  2707  0053  2337  3180         	fcall	_HandlePacket
  2708                           
  2709                           ;mrf49xa_packet.c: 147: }
  2710  0055  285A               	goto	l2480
  2711  0056                     l2478:	
  2712                           
  2713                           ;mrf49xa_packet.c: 148: else
  2714                           ;mrf49xa_packet.c: 149: {
  2715                           ;mrf49xa_packet.c: 150: Mrf49xaFreePacket(packet);
  2716  0056  0020               	movlb	0	; select bank0
  2717  0057  0849               	movf	Mrf49xaTick@packet,w
  2718  0058  2332  3180         	fcall	_Mrf49xaFreePacket
  2719  005A                     l2480:	
  2720                           
  2721                           ;mrf49xa_packet.c: 151: }
  2722                           ;mrf49xa_packet.c: 155: }
  2723                           ;mrf49xa_packet.c: 157: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  2724  005A  0021               	movlb	1	; select bank1
  2725  005B  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  2726  005C  3A02               	xorlw	2
  2727  005D  1D03               	skipz
  2728  005E  2899               	goto	l2500
  2729                           
  2730                           ;mrf49xa_packet.c: 158: {
  2731                           ;mrf49xa_packet.c: 159: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  2732  005F  0838               	movf	(_rfTrcvStatus^(0+128)+24),w
  2733  0060  3A02               	xorlw	2
  2734  0061  1D03               	skipz
  2735  0062  2865               	goto	l2486
  2736  0063                     l2484:	
  2737                           
  2738                           ;mrf49xa_packet.c: 160: {
  2739                           ;mrf49xa_packet.c: 161: rfTrcvStatus.txPacket.state = PKT_FREE;
  2740  0063  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2741                           
  2742                           ;mrf49xa_packet.c: 162: }
  2743  0064  2899               	goto	l2500
  2744  0065                     l2486:	
  2745                           
  2746                           ;mrf49xa_packet.c: 163: else if (rfTrcvStatus.txPacket.retry == 10)
  2747  0065  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2748  0066  390F               	andlw	15
  2749  0067  3A0A               	xorlw	10
  2750  0068  1D03               	skipz
  2751  0069  2882               	goto	l2496
  2752                           
  2753                           ;mrf49xa_packet.c: 164: {
  2754                           ;mrf49xa_packet.c: 165: if (rfTrcvStatus.txPacket.retransmit == 3)
  2755  006A  0E39               	swapf	(_rfTrcvStatus^(0+128)+25),w
  2756  006B  3903               	andlw	3
  2757  006C  3A03               	xorlw	3
  2758  006D  1903               	btfsc	3,2
  2759  006E  2863               	goto	l2484
  2760                           
  2761                           ;mrf49xa_packet.c: 171: else
  2762                           ;mrf49xa_packet.c: 172: {
  2763                           ;mrf49xa_packet.c: 174: rfTrcvStatus.txPacket.retry = 0;
  2764  006F  30F0               	movlw	-16
  2765  0070  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  2766                           
  2767                           ;mrf49xa_packet.c: 175: rfTrcvStatus.txPacket.retransmit++;
  2768  0071  0E39               	swapf	(_rfTrcvStatus^(0+128)+25),w
  2769  0072  3903               	andlw	3
  2770  0073  0020               	movlb	0	; select bank0
  2771  0074  00C6               	movwf	??_Mrf49xaTick
  2772  0075  0AC6               	incf	??_Mrf49xaTick,f
  2773  0076  0EC6               	swapf	??_Mrf49xaTick,f
  2774  0077  0021               	movlb	1	; select bank1
  2775  0078  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2776  0079  0020               	movlb	0	; select bank0
  2777  007A  0646               	xorwf	??_Mrf49xaTick,w
  2778  007B  39CF               	andlw	-49
  2779  007C  0646               	xorwf	??_Mrf49xaTick,w
  2780  007D  0021               	movlb	1	; select bank1
  2781  007E  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2782                           
  2783                           ;mrf49xa_packet.c: 176: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  2784  007F  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2785  0080  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  2786  0081  2899               	goto	l2500
  2787  0082                     l2496:	
  2788                           
  2789                           ;mrf49xa_packet.c: 179: else
  2790                           ;mrf49xa_packet.c: 180: {
  2791                           ;mrf49xa_packet.c: 181: rfTrcvStatus.txPacket.retry++;
  2792  0082  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2793  0083  390F               	andlw	15
  2794  0084  0020               	movlb	0	; select bank0
  2795  0085  00C6               	movwf	??_Mrf49xaTick
  2796  0086  0AC6               	incf	??_Mrf49xaTick,f
  2797  0087  0021               	movlb	1	; select bank1
  2798  0088  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2799  0089  0020               	movlb	0	; select bank0
  2800  008A  0646               	xorwf	??_Mrf49xaTick,w
  2801  008B  39F0               	andlw	-16
  2802  008C  0646               	xorwf	??_Mrf49xaTick,w
  2803  008D  0021               	movlb	1	; select bank1
  2804  008E  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2805                           
  2806                           ;mrf49xa_packet.c: 182: _delay(40000);
  2807  008F  3034               	movlw	52
  2808  0090  0020               	movlb	0	; select bank0
  2809  0091  00C7               	movwf	??_Mrf49xaTick+1
  2810  0092  30F1               	movlw	241
  2811  0093  00C6               	movwf	??_Mrf49xaTick
  2812  0094                     u2577:	
  2813  0094  0BC6               	decfsz	??_Mrf49xaTick,f
  2814  0095  2894               	goto	u2577
  2815  0096  0BC7               	decfsz	??_Mrf49xaTick+1,f
  2816  0097  2894               	goto	u2577
  2817  0098  2899               	nop2
  2818  0099                     l2500:	
  2819                           
  2820                           ;mrf49xa_packet.c: 183: }
  2821                           ;mrf49xa_packet.c: 184: }
  2822                           ;mrf49xa_packet.c: 186: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2823                           ;mrf49xa_packet.c: 187: rfTrcvStatus.state == RECV_IDLE)
  2824  0099  0021               	movlb	1	; select bank1
  2825  009A  0B21               	decfsz	(_rfTrcvStatus^(0+128)+1),w
  2826  009B  0008               	return
  2827  009C  08A0               	movf	_rfTrcvStatus^(0+128),f
  2828  009D  1D03               	skipz
  2829  009E  0008               	return
  2830                           
  2831                           ;mrf49xa_packet.c: 188: {
  2832                           ;mrf49xa_packet.c: 193: if (rfTrcvStatus.txPacket.retry >= 10)
  2833  009F  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2834  00A0  390F               	andlw	15
  2835  00A1  0020               	movlb	0	; select bank0
  2836  00A2  00C6               	movwf	??_Mrf49xaTick
  2837  00A3  300A               	movlw	10
  2838  00A4  0246               	subwf	??_Mrf49xaTick,w
  2839  00A5  1C03               	skipc
  2840  00A6  28AD               	goto	l2512
  2841                           
  2842                           ;mrf49xa_packet.c: 194: {
  2843                           ;mrf49xa_packet.c: 196: rfTrcvStatus.txPacket.retry = 0;
  2844  00A7  30F0               	movlw	-16
  2845  00A8  0021               	movlb	1	; select bank1
  2846  00A9  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  2847                           
  2848                           ;mrf49xa_packet.c: 197: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  2849  00AA  3002               	movlw	2
  2850  00AB  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  2851  00AC  0008               	return
  2852  00AD                     l2512:	
  2853                           
  2854                           ;mrf49xa_packet.c: 199: }
  2855                           ;mrf49xa_packet.c: 203: uint8_t timeout = 0;
  2856  00AD  01C8               	clrf	Mrf49xaTick@timeout
  2857  00AE                     l2514:	
  2858                           
  2859                           ;mrf49xa_packet.c: 205: {
  2860                           ;mrf49xa_packet.c: 206: Mrf49RxSts();
  2861  00AE  22B3  3180         	fcall	_Mrf49RxSts
  2862                           
  2863                           ;mrf49xa_packet.c: 208: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  2864  00B0  0021               	movlb	1	; select bank1
  2865  00B1  08A0               	movf	_rfTrcvStatus^(0+128),f
  2866  00B2  1D03               	skipz
  2867  00B3  28B7               	goto	l2522
  2868  00B4  0020               	movlb	0	; select bank0
  2869  00B5  1C4A               	btfss	_mrf49Status,0
  2870  00B6  28D6               	goto	l362
  2871  00B7                     l2522:	
  2872                           
  2873                           ;mrf49xa_packet.c: 212: }
  2874                           ;mrf49xa_packet.c: 214: _delay(40000);
  2875  00B7  3034               	movlw	52
  2876  00B8  0020               	movlb	0	; select bank0
  2877  00B9  00C7               	movwf	??_Mrf49xaTick+1
  2878  00BA  30F1               	movlw	241
  2879  00BB  00C6               	movwf	??_Mrf49xaTick
  2880  00BC                     u2587:	
  2881  00BC  0BC6               	decfsz	??_Mrf49xaTick,f
  2882  00BD  28BC               	goto	u2587
  2883  00BE  0BC7               	decfsz	??_Mrf49xaTick+1,f
  2884  00BF  28BC               	goto	u2587
  2885  00C0  28C1               	nop2
  2886                           
  2887                           ;mrf49xa_packet.c: 215: timeout++;
  2888  00C1  0020               	movlb	0	; select bank0
  2889  00C2  300B               	movlw	11
  2890  00C3  0AC8               	incf	Mrf49xaTick@timeout,f
  2891                           
  2892                           ;mrf49xa_packet.c: 217: if (timeout > 10)
  2893  00C4  0248               	subwf	Mrf49xaTick@timeout,w
  2894  00C5  1C03               	skipc
  2895  00C6  28AE               	goto	l2514
  2896                           
  2897                           ;mrf49xa_packet.c: 218: {
  2898                           ;mrf49xa_packet.c: 219: rfTrcvStatus.txPacket.retry++;
  2899  00C7  0021               	movlb	1	; select bank1
  2900  00C8  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2901  00C9  390F               	andlw	15
  2902  00CA  0020               	movlb	0	; select bank0
  2903  00CB  00C6               	movwf	??_Mrf49xaTick
  2904  00CC  0AC6               	incf	??_Mrf49xaTick,f
  2905  00CD  0021               	movlb	1	; select bank1
  2906  00CE  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2907  00CF  0020               	movlb	0	; select bank0
  2908  00D0  0646               	xorwf	??_Mrf49xaTick,w
  2909  00D1  39F0               	andlw	-16
  2910  00D2  0646               	xorwf	??_Mrf49xaTick,w
  2911  00D3  0021               	movlb	1	; select bank1
  2912  00D4  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2913  00D5  0008               	return
  2914  00D6                     l362:	
  2915                           
  2916                           ;mrf49xa_packet.c: 230: INTCONbits.INTE = 0;;
  2917  00D6  120B               	bcf	11,4	;volatile
  2918                           
  2919                           ;mrf49xa_packet.c: 231: Mrf49xaModeTx();
  2920  00D7  23BC               	fcall	_Mrf49xaModeTx
  2921                           
  2922                           ;mrf49xa_packet.c: 232: INTCONbits.INTE = 1;;
  2923  00D8  160B               	bsf	11,4	;volatile
  2924  00D9  0008               	return
  2925  00DA                     __end_of_Mrf49xaTick:	
  2926  00DA                     __ptext20:	
  2927 ;; *************** function _Mrf49RxCmd *****************
  2928 ;; Defined at:
  2929 ;;		line 19 in file "../../../src/devices/mrf49xa_cmd.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  cmd             1    wreg     unsigned char 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  cmd             1    1[BANK0 ] unsigned char 
  2934 ;;  val             1    2[BANK0 ] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2, status,0, pclath, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 1E/1
  2941 ;;		On exit  : 1F/0
  2942 ;;		Unchanged: FFE00/0
  2943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2944 ;;      Params:         0       0       0       0
  2945 ;;      Locals:         0       2       0       0
  2946 ;;      Temps:          0       0       0       0
  2947 ;;      Totals:         0       2       0       0
  2948 ;;Total ram usage:        2 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    6
  2951 ;; This function calls:
  2952 ;;		_Mrf49SpiTx
  2953 ;;		_Mrf49SpiRx
  2954 ;; This function is called by:
  2955 ;;		_Mrf49RxByte
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           
  2960                           ;psect for function _Mrf49RxCmd
  2961  00DA                     _Mrf49RxCmd:	
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2965                           ;Mrf49RxCmd@cmd stored from wreg
  2966  00DA  0020               	movlb	0	; select bank0
  2967  00DB  00A1               	movwf	Mrf49RxCmd@cmd
  2968                           
  2969                           ;mrf49xa_cmd.c: 20: LATCbits.LATC6 = 0;;
  2970  00DC  0022               	movlb	2	; select bank2
  2971  00DD  130E               	bcf	14,6	;volatile
  2972                           
  2973                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  2974  00DE  0020               	movlb	0	; select bank0
  2975  00DF  0821               	movf	Mrf49RxCmd@cmd,w
  2976  00E0  2251  3180         	fcall	_Mrf49SpiTx
  2977                           
  2978                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  2979  00E2  22BF               	fcall	_Mrf49SpiRx
  2980  00E3  00A2               	movwf	Mrf49RxCmd@val
  2981                           
  2982                           ;mrf49xa_cmd.c: 25: LATCbits.LATC6 = 1;;
  2983  00E4  0022               	movlb	2	; select bank2
  2984  00E5  170E               	bsf	14,6	;volatile
  2985                           
  2986                           ;mrf49xa_cmd.c: 27: return val;
  2987  00E6  0020               	movlb	0	; select bank0
  2988  00E7  0822               	movf	Mrf49RxCmd@val,w
  2989  00E8  0008               	return
  2990  00E9                     __end_of_Mrf49RxCmd:	
  2991  00E9                     __ptext16:	
  2992 ;; *************** function _Mrf49xaInit *****************
  2993 ;; Defined at:
  2994 ;;		line 115 in file "../../../src/devices/mrf49xa.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  k               1    9[BANK0 ] unsigned char 
  2999 ;;  j               1    0        unsigned char 
  3000 ;;  i               1    0        unsigned char 
  3001 ;; Return value:  Size  Location     Type
  3002 ;;		None               void
  3003 ;; Registers used:
  3004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 17F/1
  3007 ;;		On exit  : 1F/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3010 ;;      Params:         0       0       0       0
  3011 ;;      Locals:         0       1       0       0
  3012 ;;      Temps:          0       3       0       0
  3013 ;;      Totals:         0       4       0       0
  3014 ;;Total ram usage:        4 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:    9
  3017 ;; This function calls:
  3018 ;;		_Mrf49xaServe
  3019 ;;		_Mrf49xaModeRx
  3020 ;;		_Mrf49TxCmd
  3021 ;; This function is called by:
  3022 ;;		_main
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           
  3027                           ;psect for function _Mrf49xaInit
  3028  00E9                     _Mrf49xaInit:	
  3029                           
  3030                           ;mrf49xa.c: 116: UI08_t k;
  3031                           ;mrf49xa.c: 118: UI08_t i, j;
  3032                           ;mrf49xa.c: 122: LATAbits.LATA4 = 0;
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in _Mrf49xaInit: [allreg]
  3036  00E9  0022               	movlb	2	; select bank2
  3037  00EA  120C               	bcf	12,4	;volatile
  3038                           
  3039                           ;mrf49xa.c: 123: LATCbits.LATC1 = 1;
  3040  00EB  148E               	bsf	14,1	;volatile
  3041                           
  3042                           ;mrf49xa.c: 124: _delay(400000);
  3043  00EC  3003               	movlw	3
  3044  00ED  0020               	movlb	0	; select bank0
  3045  00EE  00A8               	movwf	??_Mrf49xaInit+2
  3046  00EF  3008               	movlw	8
  3047  00F0  00A7               	movwf	??_Mrf49xaInit+1
  3048  00F1  3078               	movlw	120
  3049  00F2  00A6               	movwf	??_Mrf49xaInit
  3050  00F3                     u2597:	
  3051  00F3  0BA6               	decfsz	??_Mrf49xaInit,f
  3052  00F4  28F3               	goto	u2597
  3053  00F5  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3054  00F6  28F3               	goto	u2597
  3055  00F7  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3056  00F8  28F3               	goto	u2597
  3057                           
  3058                           ;mrf49xa.c: 125: LATAbits.LATA4 = 1;
  3059  00F9  0022               	movlb	2	; select bank2
  3060  00FA  160C               	bsf	12,4	;volatile
  3061                           
  3062                           ;mrf49xa.c: 126: _delay(400000);
  3063  00FB  3003               	movlw	3
  3064  00FC  0020               	movlb	0	; select bank0
  3065  00FD  00A8               	movwf	??_Mrf49xaInit+2
  3066  00FE  3008               	movlw	8
  3067  00FF  00A7               	movwf	??_Mrf49xaInit+1
  3068  0100  3078               	movlw	120
  3069  0101  00A6               	movwf	??_Mrf49xaInit
  3070  0102                     u2607:	
  3071  0102  0BA6               	decfsz	??_Mrf49xaInit,f
  3072  0103  2902               	goto	u2607
  3073  0104  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3074  0105  2902               	goto	u2607
  3075  0106  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3076  0107  2902               	goto	u2607
  3077                           
  3078                           ;mrf49xa.c: 127: LATCbits.LATC4 = 1;
  3079  0108  0022               	movlb	2	; select bank2
  3080  0109  160E               	bsf	14,4	;volatile
  3081                           
  3082                           ;mrf49xa.c: 129: LATAbits.LATA5 = 1;
  3083  010A  168C               	bsf	12,5	;volatile
  3084                           
  3085                           ;mrf49xa.c: 132: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { _delay(40000); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val)
      +                          ; } };
  3086  010B  0020               	movlb	0	; select bank0
  3087  010C  3031               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3088  010D  01A9               	clrf	Mrf49xaInit@k
  3089  010E  3187               	movlp	high __stringtab
  3090  010F  000A               	callw
  3091  0110  3180               	pagesel	$	;select current page
  3092  0111  3800               	iorlw	0
  3093  0112  1903               	btfsc	3,2
  3094  0113  293B               	goto	l2190
  3095  0114                     l2180:	
  3096  0114  3529               	lslf	Mrf49xaInit@k,w
  3097  0115  3E34               	addlw	low (_mrfRegset_Init| (0+32768))
  3098  0116  3187               	movlp	high __stringtab
  3099  0117  000A               	callw
  3100  0118  3180               	pagesel	$	;select current page
  3101  0119  3A55               	xorlw	85
  3102  011A  1D03               	skipz
  3103  011B  2926               	goto	l2184
  3104  011C  3034               	movlw	52
  3105  011D  00A7               	movwf	??_Mrf49xaInit+1
  3106  011E  30F1               	movlw	241
  3107  011F  00A6               	movwf	??_Mrf49xaInit
  3108  0120                     u2617:	
  3109  0120  0BA6               	decfsz	??_Mrf49xaInit,f
  3110  0121  2920               	goto	u2617
  3111  0122  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3112  0123  2920               	goto	u2617
  3113  0124  2925               	nop2
  3114  0125  2932               	goto	l2186
  3115  0126                     l2184:	
  3116  0126  3529               	lslf	Mrf49xaInit@k,w
  3117  0127  3E35               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3118  0128  3187               	movlp	high __stringtab
  3119  0129  000A               	callw
  3120  012A  3180               	pagesel	$	;select current page
  3121  012B  00A1               	movwf	?_Mrf49TxCmd
  3122  012C  3529               	lslf	Mrf49xaInit@k,w
  3123  012D  3E34               	addlw	low (_mrfRegset_Init| (0+32768))
  3124  012E  3187               	movlp	high __stringtab
  3125  012F  000A               	callw
  3126  0130  3180               	pagesel	$	;select current page
  3127  0131  2245               	fcall	_Mrf49TxCmd
  3128  0132                     l2186:	
  3129  0132  0020               	movlb	0	; select bank0
  3130  0133  3031               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3131  0134  0AA9               	incf	Mrf49xaInit@k,f
  3132  0135  3187               	movlp	high __stringtab
  3133  0136  000A               	callw
  3134  0137  3180               	pagesel	$	;select current page
  3135  0138  0229               	subwf	Mrf49xaInit@k,w
  3136  0139  1C03               	skipc
  3137  013A  2914               	goto	l2180
  3138  013B                     l2190:	
  3139                           
  3140                           ;mrf49xa.c: 134: Mrf49xaModeRx();
  3141  013B  2219  3180         	fcall	_Mrf49xaModeRx
  3142  013D                     l2194:	
  3143                           ;mrf49xa.c: 141: while(PORTAbits.RA2 == 0)
  3144                           
  3145  013D  0020               	movlb	0	; select bank0
  3146  013E  190C               	btfsc	12,2	;volatile
  3147  013F  0008               	return
  3148                           
  3149                           ;mrf49xa.c: 142: Mrf49xaServe();
  3150  0140  2143  3180         	fcall	_Mrf49xaServe
  3151  0142  293D               	goto	l2194
  3152  0143                     __end_of_Mrf49xaInit:	
  3153  0143                     __ptext17:	
  3154 ;; *************** function _Mrf49xaServe *****************
  3155 ;; Defined at:
  3156 ;;		line 9 in file "../../../src/devices/mrf49xa_data.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;		None
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  data            1    5[BANK0 ] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      unsigned char 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 1E/0
  3167 ;;		On exit  : 1F/0
  3168 ;;		Unchanged: FFE00/0
  3169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3170 ;;      Params:         0       0       0       0
  3171 ;;      Locals:         0       1       0       0
  3172 ;;      Temps:          0       1       0       0
  3173 ;;      Totals:         0       2       0       0
  3174 ;;Total ram usage:        2 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    8
  3177 ;; This function calls:
  3178 ;;		_Mrf49xaModeRx
  3179 ;;		_Mrf49RxSts
  3180 ;;		_Mrf49RxByte
  3181 ;;		_Mrf49TxByte
  3182 ;; This function is called by:
  3183 ;;		_Mrf49xaInit
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _Mrf49xaServe
  3189  0143                     _Mrf49xaServe:	
  3190                           
  3191                           ;mrf49xa_data.c: 10: uint8_t data;
  3192                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in _Mrf49xaServe: [allreg]
  3196  0143  22B3  3180         	fcall	_Mrf49RxSts
  3197                           
  3198                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  3199  0145  0020               	movlb	0	; select bank0
  3200  0146  084A               	movf	_mrf49Status,w
  3201  0147  3AFF               	xorlw	255
  3202  0148  1D03               	skipz
  3203  0149  294E               	goto	l384
  3204  014A  084B               	movf	_mrf49Status+1,w
  3205  014B  3AFF               	xorlw	255
  3206  014C  1903               	btfsc	3,2
  3207                           
  3208                           ;mrf49xa_data.c: 19: return 0;
  3209  014D  3400               	retlw	0
  3210  014E                     l384:	
  3211                           ;mrf49xa_data.c: 23: {
  3212                           
  3213                           
  3214                           ;mrf49xa_data.c: 25: }
  3215                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  3216  014E  1ACA               	btfsc	_mrf49Status,5
  3217  014F  295A               	goto	l2034
  3218  0150  2966               	goto	l385
  3219  0151                     l2028:	
  3220                           
  3221                           ;mrf49xa_data.c: 33: case RECV_DATA:
  3222                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  3223  0151  2243  3180         	fcall	_Mrf49RxByte
  3224  0153  00A5               	movwf	Mrf49xaServe@data
  3225                           
  3226                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  3227  0154  2243  3180         	fcall	_Mrf49RxByte
  3228  0156  00A5               	movwf	Mrf49xaServe@data
  3229                           
  3230                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  3231  0157  2219  3180         	fcall	_Mrf49xaModeRx
  3232                           
  3233                           ;mrf49xa_data.c: 44: break;
  3234  0159  2966               	goto	l385
  3235  015A                     l2034:	
  3236  015A  0021               	movlb	1	; select bank1
  3237  015B  0820               	movf	_rfTrcvStatus^(0+128),w
  3238                           
  3239                           ; Switch size 1, requested type "speed"
  3240                           ; Number of cases is 3, Range of values is 0 to 2
  3241                           ; switch strategies available:
  3242                           ; Name         Instructions Cycles
  3243                           ; simple_byte           10     6 (average)
  3244                           ; direct_byte           12     6 (fixed)
  3245                           ; jumptable            260     6 (fixed)
  3246                           ; rangetable             7     4 (fixed)
  3247                           ; spacedrange           11     6 (fixed)
  3248                           ; locatedrange           3     3 (fixed)
  3249                           ;	Chosen strategy is simple_byte
  3250  015C  3A00               	xorlw	0	; case 0
  3251  015D  1903               	skipnz
  3252  015E  2951               	goto	l2028
  3253  015F  3A01               	xorlw	1	; case 1
  3254  0160  1903               	skipnz
  3255  0161  2951               	goto	l2028
  3256  0162  3A03               	xorlw	3	; case 2
  3257  0163  1903               	skipnz
  3258  0164  2966               	goto	l385
  3259  0165  2966               	goto	l385
  3260  0166                     l385:	
  3261                           
  3262                           ;mrf49xa_data.c: 52: }
  3263                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  3264  0166  0020               	movlb	0	; select bank0
  3265  0167  1BCA               	btfsc	_mrf49Status,7
  3266  0168  2A03               	goto	l2120
  3267  0169  2A0F               	goto	l2122
  3268  016A                     l2038:	
  3269                           
  3270                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  3271  016A  2243  3180         	fcall	_Mrf49RxByte
  3272  016C  00A5               	movwf	Mrf49xaServe@data
  3273                           
  3274                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3275  016D  1BCB               	btfsc	_mrf49Status+1,7
  3276  016E  2972               	goto	l2044
  3277  016F                     l2042:	
  3278                           
  3279                           ;mrf49xa_data.c: 72: {
  3280                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  3281  016F  2219  3180         	fcall	_Mrf49xaModeRx
  3282                           
  3283                           ;mrf49xa_data.c: 74: break;
  3284  0171  2A0F               	goto	l2122
  3285  0172                     l2044:	
  3286                           
  3287                           ;mrf49xa_data.c: 75: }
  3288                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  3289  0172  0021               	movlb	1	; select bank1
  3290  0173  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3291  0174  1D03               	skipz
  3292  0175  2978               	goto	l2048
  3293  0176  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  3294  0177  297C               	goto	L3
  3295  0178                     l2048:	
  3296                           
  3297                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3298  0178  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  3299  0179  1D03               	skipz
  3300  017A  296F               	goto	l2042
  3301  017B  30D3               	movlw	(_rfTrcvStatus+51)& (0+255)
  3302  017C                     L3:	
  3303  017C  00EC               	movwf	(_rfTrcvStatus+76)^(0+128)
  3304                           
  3305                           ;mrf49xa_data.c: 85: }
  3306                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  3307  017D  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  3308  017E  0086               	movwf	6
  3309  017F  0187               	clrf	7
  3310  0180  0020               	movlb	0	; select bank0
  3311  0181  0825               	movf	Mrf49xaServe@data,w
  3312  0182  0081               	movwf	1
  3313                           
  3314                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  3315  0183  0021               	movlb	1	; select bank1
  3316  0184  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3317  0185  3E16               	addlw	22
  3318  0186  0086               	movwf	6
  3319  0187  0181               	clrf	1
  3320                           
  3321                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3322  0188  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3323  0189  0086               	movwf	6
  3324  018A  3003               	movlw	3
  3325  018B  0081               	movwf	1
  3326                           
  3327                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  3328  018C  01A0               	clrf	_rfTrcvStatus^(0+128)
  3329  018D  0AA0               	incf	_rfTrcvStatus^(0+128),f
  3330                           
  3331                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  3332  018E  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3333  018F  29BF               	goto	L4
  3334  0190                     l2064:	
  3335                           ;mrf49xa_data.c: 93: break;
  3336                           
  3337                           
  3338                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  3339  0190  2243  3180         	fcall	_Mrf49RxByte
  3340  0192  00A5               	movwf	Mrf49xaServe@data
  3341                           
  3342                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3343  0193  1BCB               	btfsc	_mrf49Status+1,7
  3344  0194  299C               	goto	l2072
  3345                           
  3346                           ;mrf49xa_data.c: 102: {
  3347                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3348  0195  0021               	movlb	1	; select bank1
  3349  0196  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3350  0197  0086               	movwf	6
  3351  0198  3004               	movlw	4
  3352  0199  0187               	clrf	7
  3353  019A  0081               	movwf	1
  3354  019B  296F               	goto	l2042
  3355  019C                     l2072:	
  3356                           
  3357                           ;mrf49xa_data.c: 106: }
  3358                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3359  019C  0021               	movlb	1	; select bank1
  3360  019D  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  3361  019E  0086               	movwf	6
  3362  019F  0187               	clrf	7
  3363  01A0  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3364  01A1  0601               	xorwf	1,w
  3365  01A2  1D03               	skipz
  3366  01A3  29B5               	goto	l2082
  3367                           
  3368                           ;mrf49xa_data.c: 109: {
  3369                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  3370  01A4  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3371  01A5  3E16               	addlw	22
  3372  01A6  0086               	movwf	6
  3373  01A7  0020               	movlb	0	; select bank0
  3374  01A8  0825               	movf	Mrf49xaServe@data,w
  3375  01A9  0081               	movwf	1
  3376                           
  3377                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3378  01AA  0021               	movlb	1	; select bank1
  3379  01AB  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3380  01AC  0086               	movwf	6
  3381  01AD  3004               	movlw	4
  3382  01AE  0081               	movwf	1
  3383                           
  3384                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  3385  01AF  2219  3180         	fcall	_Mrf49xaModeRx
  3386                           
  3387                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  3388  01B1  0022               	movlb	2	; select bank2
  3389  01B2  150E               	bsf	14,2	;volatile
  3390                           
  3391                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  3392  01B3  110E               	bcf	14,2	;volatile
  3393                           
  3394                           ;mrf49xa_data.c: 123: }
  3395  01B4  2A0F               	goto	l2122
  3396  01B5                     l2082:	
  3397                           
  3398                           ;mrf49xa_data.c: 124: else
  3399                           ;mrf49xa_data.c: 125: {
  3400                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3401  01B5  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3402  01B6  076C               	addwf	(_rfTrcvStatus+76)^(0+128),w
  3403  01B7  0020               	movlb	0	; select bank0
  3404  01B8  00A4               	movwf	??_Mrf49xaServe
  3405  01B9  0A24               	incf	??_Mrf49xaServe,w
  3406  01BA  0086               	movwf	6
  3407  01BB  0187               	clrf	7
  3408  01BC  0825               	movf	Mrf49xaServe@data,w
  3409  01BD  0081               	movwf	1
  3410  01BE  0021               	movlb	1	; select bank1
  3411  01BF                     L4:	
  3412  01BF  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3413  01C0  2A0F               	goto	l2122
  3414  01C1                     l2086:	
  3415                           
  3416                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  3417  01C1  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3418                           
  3419                           ;mrf49xa_data.c: 134: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3420  01C2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3421  01C3  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  3422  01C4  1D03               	skipz
  3423  01C5  29F2               	goto	l2116
  3424                           
  3425                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = 49;
  3426  01C6  3031               	movlw	49
  3427  01C7  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3428  01C8  29F2               	goto	l2116
  3429  01C9                     l2092:	
  3430                           
  3431                           ;mrf49xa_data.c: 140: Mrf49TxByte(0x2D);
  3432  01C9  302D               	movlw	45
  3433  01CA  2214  3180         	fcall	_Mrf49TxByte
  3434                           
  3435                           ;mrf49xa_data.c: 141: break;
  3436  01CC  2A0F               	goto	l2122
  3437  01CD                     l2094:	
  3438                           
  3439                           ;mrf49xa_data.c: 144: Mrf49TxByte(0xD4);
  3440  01CD  30D4               	movlw	212
  3441  01CE  2214  3180         	fcall	_Mrf49TxByte
  3442                           
  3443                           ;mrf49xa_data.c: 145: rfTrcvStatus.hwByte = 0xFF;
  3444  01D0  30FF               	movlw	255
  3445  01D1  0021               	movlb	1	; select bank1
  3446  01D2  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3447                           
  3448                           ;mrf49xa_data.c: 146: break;
  3449  01D3  2A0F               	goto	l2122
  3450  01D4                     l2098:	
  3451                           
  3452                           ;mrf49xa_data.c: 150: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3453  01D4  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3454  01D5  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3455  01D6  0086               	movwf	6
  3456  01D7  0187               	clrf	7
  3457  01D8  0801               	movf	1,w
  3458  01D9  2214  3180         	fcall	_Mrf49TxByte
  3459                           
  3460                           ;mrf49xa_data.c: 151: break;
  3461  01DB  2A0F               	goto	l2122
  3462  01DC                     l2100:	
  3463                           
  3464                           ;mrf49xa_data.c: 154: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3465  01DC  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3466  01DD  2214  3180         	fcall	_Mrf49TxByte
  3467                           
  3468                           ;mrf49xa_data.c: 155: break;
  3469  01DF  2A0F               	goto	l2122
  3470  01E0                     l2102:	
  3471                           
  3472                           ;mrf49xa_data.c: 158: Mrf49TxByte(0x00);
  3473  01E0  3000               	movlw	0
  3474  01E1  2214  3180         	fcall	_Mrf49TxByte
  3475                           
  3476                           ;mrf49xa_data.c: 159: break;
  3477  01E3  2A0F               	goto	l2122
  3478  01E4                     l2104:	
  3479                           
  3480                           ;mrf49xa_data.c: 162: Mrf49TxByte(0x00);
  3481  01E4  3000               	movlw	0
  3482  01E5  2214  3180         	fcall	_Mrf49TxByte
  3483                           
  3484                           ;mrf49xa_data.c: 163: Mrf49xaModeRx();
  3485  01E7  2219  3180         	fcall	_Mrf49xaModeRx
  3486                           
  3487                           ;mrf49xa_data.c: 165: rfTrcvStatus.txPacket.retry = 0;
  3488  01E9  30F0               	movlw	-16
  3489  01EA  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  3490                           
  3491                           ;mrf49xa_data.c: 167: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  3492  01EB  0B38               	decfsz	(_rfTrcvStatus^(0+128)+24),w
  3493  01EC  29F0               	goto	l2112
  3494                           
  3495                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3496  01ED  3002               	movlw	2
  3497  01EE  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3498  01EF  2A0F               	goto	l2122
  3499  01F0                     l2112:	
  3500                           
  3501                           ;mrf49xa_data.c: 169: else
  3502                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_FREE;
  3503  01F0  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  3504  01F1  2A0F               	goto	l2122
  3505  01F2                     l2116:	
  3506  01F2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3507                           
  3508                           ; Switch size 1, requested type "speed"
  3509                           ; Number of cases is 5, Range of values is 49 to 101
  3510                           ; switch strategies available:
  3511                           ; Name         Instructions Cycles
  3512                           ; simple_byte           16     9 (average)
  3513                           ; direct_byte          115     9 (fixed)
  3514                           ; jumptable            263     9 (fixed)
  3515                           ;	Chosen strategy is simple_byte
  3516  01F3  3A31               	xorlw	49	; case 49
  3517  01F4  1903               	skipnz
  3518  01F5  29DC               	goto	l2100
  3519  01F6  3A03               	xorlw	3	; case 50
  3520  01F7  1903               	skipnz
  3521  01F8  29E0               	goto	l2102
  3522  01F9  3A01               	xorlw	1	; case 51
  3523  01FA  1903               	skipnz
  3524  01FB  29E4               	goto	l2104
  3525  01FC  3A57               	xorlw	87	; case 100
  3526  01FD  1903               	skipnz
  3527  01FE  29C9               	goto	l2092
  3528  01FF  3A01               	xorlw	1	; case 101
  3529  0200  1903               	skipnz
  3530  0201  29CD               	goto	l2094
  3531  0202  29D4               	goto	l2098
  3532  0203                     l2120:	
  3533  0203  0021               	movlb	1	; select bank1
  3534  0204  0820               	movf	_rfTrcvStatus^(0+128),w
  3535                           
  3536                           ; Switch size 1, requested type "speed"
  3537                           ; Number of cases is 3, Range of values is 0 to 2
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte           10     6 (average)
  3541                           ; direct_byte           12     6 (fixed)
  3542                           ; jumptable            260     6 (fixed)
  3543                           ; rangetable             7     4 (fixed)
  3544                           ; spacedrange           11     6 (fixed)
  3545                           ; locatedrange           3     3 (fixed)
  3546                           ;	Chosen strategy is simple_byte
  3547  0205  3A00               	xorlw	0	; case 0
  3548  0206  1903               	skipnz
  3549  0207  296A               	goto	l2038
  3550  0208  3A01               	xorlw	1	; case 1
  3551  0209  1903               	skipnz
  3552  020A  2990               	goto	l2064
  3553  020B  3A03               	xorlw	3	; case 2
  3554  020C  1903               	skipnz
  3555  020D  29C1               	goto	l2086
  3556  020E  2A0F               	goto	l2122
  3557  020F                     l2122:	
  3558                           
  3559                           ;mrf49xa_data.c: 177: }
  3560                           ;mrf49xa_data.c: 191: return PORTAbits.RA2 == 1 ? 1 : 0;
  3561  020F  3000               	movlw	0
  3562  0210  0020               	movlb	0	; select bank0
  3563  0211  190C               	btfsc	12,2	;volatile
  3564  0212  3001               	movlw	1
  3565  0213  0008               	return
  3566  0214                     __end_of_Mrf49xaServe:	
  3567  0214                     __ptext18:	
  3568 ;; *************** function _Mrf49TxByte *****************
  3569 ;; Defined at:
  3570 ;;		line 49 in file "../../../src/devices/mrf49xa_cmd.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  byte            1    wreg     unsigned char 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  byte            1    3[BANK0 ] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;		None               void
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, pclath, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 1E/1
  3581 ;;		On exit  : 1F/2
  3582 ;;		Unchanged: FFE00/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3584 ;;      Params:         0       0       0       0
  3585 ;;      Locals:         0       1       0       0
  3586 ;;      Temps:          0       0       0       0
  3587 ;;      Totals:         0       1       0       0
  3588 ;;Total ram usage:        1 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    7
  3591 ;; This function calls:
  3592 ;;		_Mrf49TxCmd
  3593 ;; This function is called by:
  3594 ;;		_Mrf49xaServe
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function _Mrf49TxByte
  3600  0214                     _Mrf49TxByte:	
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  3604                           ;Mrf49TxByte@byte stored from wreg
  3605  0214  0020               	movlb	0	; select bank0
  3606  0215  00A3               	movwf	Mrf49TxByte@byte
  3607                           
  3608                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  3609  0216  00A1               	movwf	?_Mrf49TxCmd
  3610  0217  30B8               	movlw	184
  3611  0218  2A45               	ljmp	_Mrf49TxCmd
  3612  0219                     __end_of_Mrf49TxByte:	
  3613  0219                     __ptext23:	
  3614 ;; *************** function _Mrf49xaModeRx *****************
  3615 ;; Defined at:
  3616 ;;		line 72 in file "../../../src/devices/mrf49xa.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  k               1    3[BANK0 ] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;		None               void
  3623 ;; Registers used:
  3624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 1C/0
  3627 ;;		On exit  : 1F/1
  3628 ;;		Unchanged: FFE00/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       0       0       0
  3631 ;;      Locals:         0       1       0       0
  3632 ;;      Temps:          0       0       0       0
  3633 ;;      Totals:         0       1       0       0
  3634 ;;Total ram usage:        1 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    7
  3637 ;; This function calls:
  3638 ;;		_Mrf49TxCmd
  3639 ;; This function is called by:
  3640 ;;		_Mrf49xaInit
  3641 ;;		_Mrf49xaServe
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           
  3646                           ;psect for function _Mrf49xaModeRx
  3647  0219                     _Mrf49xaModeRx:	
  3648                           
  3649                           ;mrf49xa.c: 73: UI08_t k;
  3650                           ;mrf49xa.c: 74: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in _Mrf49xaModeRx: [allreg]
  3654  0219  0020               	movlb	0	; select bank0
  3655  021A  3032               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3656  021B  01A3               	clrf	Mrf49xaModeRx@k
  3657  021C  3187               	movlp	high __stringtab
  3658  021D  000A               	callw
  3659  021E  3180               	pagesel	$	;select current page
  3660  021F  3800               	iorlw	0
  3661  0220  1903               	btfsc	3,2
  3662  0221  2A3F               	goto	l2140
  3663  0222                     l2132:	
  3664  0222  3523               	lslf	Mrf49xaModeRx@k,w
  3665  0223  3E54               	addlw	low (_mrfRegset_Rx| (0+32768))
  3666  0224  3187               	movlp	high __stringtab
  3667  0225  000A               	callw
  3668  0226  3180               	pagesel	$	;select current page
  3669  0227  3A55               	xorlw	85
  3670  0228  1903               	skipnz
  3671  0229  2A36               	goto	l2136
  3672  022A  3523               	lslf	Mrf49xaModeRx@k,w
  3673  022B  3E55               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3674  022C  3187               	movlp	high __stringtab
  3675  022D  000A               	callw
  3676  022E  3180               	pagesel	$	;select current page
  3677  022F  00A1               	movwf	?_Mrf49TxCmd
  3678  0230  3523               	lslf	Mrf49xaModeRx@k,w
  3679  0231  3E54               	addlw	low (_mrfRegset_Rx| (0+32768))
  3680  0232  3187               	movlp	high __stringtab
  3681  0233  000A               	callw
  3682  0234  3180               	pagesel	$	;select current page
  3683  0235  2245               	fcall	_Mrf49TxCmd
  3684  0236                     l2136:	
  3685  0236  0020               	movlb	0	; select bank0
  3686  0237  3032               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3687  0238  0AA3               	incf	Mrf49xaModeRx@k,f
  3688  0239  3187               	movlp	high __stringtab
  3689  023A  000A               	callw
  3690  023B  3180               	pagesel	$	;select current page
  3691  023C  0223               	subwf	Mrf49xaModeRx@k,w
  3692  023D  1C03               	skipc
  3693  023E  2A22               	goto	l2132
  3694  023F                     l2140:	
  3695                           
  3696                           ;mrf49xa.c: 76: rfTrcvStatus.state = RECV_IDLE;
  3697  023F  0021               	movlb	1	; select bank1
  3698  0240  01A0               	clrf	_rfTrcvStatus^(0+128)
  3699                           
  3700                           ;mrf49xa.c: 77: rfTrcvStatus.hwByte = 0;
  3701  0241  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3702  0242  0008               	return
  3703  0243                     __end_of_Mrf49xaModeRx:	
  3704  0243                     __ptext19:	
  3705 ;; *************** function _Mrf49RxByte *****************
  3706 ;; Defined at:
  3707 ;;		line 44 in file "../../../src/devices/mrf49xa_cmd.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      unsigned char 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 1E/1
  3718 ;;		On exit  : 1F/0
  3719 ;;		Unchanged: FFE00/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3721 ;;      Params:         0       0       0       0
  3722 ;;      Locals:         0       0       0       0
  3723 ;;      Temps:          0       0       0       0
  3724 ;;      Totals:         0       0       0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    7
  3728 ;; This function calls:
  3729 ;;		_Mrf49RxCmd
  3730 ;; This function is called by:
  3731 ;;		_Mrf49xaServe
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _Mrf49RxByte
  3737  0243                     _Mrf49RxByte:	
  3738                           
  3739                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  3740                           
  3741                           ;incstack = 0
  3742                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3743  0243  30B0               	movlw	176
  3744  0244  28DA               	ljmp	_Mrf49RxCmd
  3745  0245                     __end_of_Mrf49RxByte:	
  3746  0245                     __ptext24:	
  3747 ;; *************** function _Mrf49TxCmd *****************
  3748 ;; Defined at:
  3749 ;;		line 7 in file "../../../src/devices/mrf49xa_cmd.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  cmd             1    wreg     unsigned char 
  3752 ;;  val             1    1[BANK0 ] unsigned char 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  cmd             1    2[BANK0 ] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;		None               void
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, pclath, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 1F/0
  3761 ;;		On exit  : 1F/2
  3762 ;;		Unchanged: FFE00/0
  3763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3764 ;;      Params:         0       1       0       0
  3765 ;;      Locals:         0       1       0       0
  3766 ;;      Temps:          0       0       0       0
  3767 ;;      Totals:         0       2       0       0
  3768 ;;Total ram usage:        2 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    6
  3771 ;; This function calls:
  3772 ;;		_Mrf49SpiTx
  3773 ;; This function is called by:
  3774 ;;		_Mrf49xaModeRx
  3775 ;;		_Mrf49xaModeTx
  3776 ;;		_Mrf49xaInit
  3777 ;;		_Mrf49TxByte
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           
  3782                           ;psect for function _Mrf49TxCmd
  3783  0245                     _Mrf49TxCmd:	
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3787                           ;Mrf49TxCmd@cmd stored from wreg
  3788  0245  00A2               	movwf	Mrf49TxCmd@cmd
  3789                           
  3790                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  3791  0246  0022               	movlb	2	; select bank2
  3792  0247  130E               	bcf	14,6	;volatile
  3793                           
  3794                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3795  0248  0020               	movlb	0	; select bank0
  3796  0249  0822               	movf	Mrf49TxCmd@cmd,w
  3797  024A  2251  3180         	fcall	_Mrf49SpiTx
  3798                           
  3799                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3800  024C  0020               	movlb	0	; select bank0
  3801  024D  0821               	movf	Mrf49TxCmd@val,w
  3802  024E  2251               	fcall	_Mrf49SpiTx
  3803                           
  3804                           ;mrf49xa_cmd.c: 15: LATCbits.LATC6 = 1;;
  3805  024F  170E               	bsf	14,6	;volatile
  3806  0250  0008               	return
  3807  0251                     __end_of_Mrf49TxCmd:	
  3808  0251                     __ptext25:	
  3809 ;; *************** function _Mrf49SpiTx *****************
  3810 ;; Defined at:
  3811 ;;		line 4 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  byte            1    wreg     unsigned char 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  byte            1    0[BANK0 ] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;		None               void
  3818 ;; Registers used:
  3819 ;;		wreg
  3820 ;; Tracked objects:
  3821 ;;		On entry : 1F/0
  3822 ;;		On exit  : 1F/2
  3823 ;;		Unchanged: FFE00/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3825 ;;      Params:         0       0       0       0
  3826 ;;      Locals:         0       1       0       0
  3827 ;;      Temps:          0       0       0       0
  3828 ;;      Totals:         0       1       0       0
  3829 ;;Total ram usage:        1 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    5
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_Mrf49TxCmd
  3836 ;;		_Mrf49RxCmd
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           
  3841                           ;psect for function _Mrf49SpiTx
  3842  0251                     _Mrf49SpiTx:	
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _Mrf49SpiTx: [wreg]
  3846                           ;Mrf49SpiTx@byte stored from wreg
  3847  0251  00A0               	movwf	Mrf49SpiTx@byte
  3848                           
  3849                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  3850  0252  1FA0               	btfss	Mrf49SpiTx@byte,7
  3851  0253  2A57               	goto	l205
  3852  0254  0022               	movlb	2	; select bank2
  3853  0255  178D               	bsf	13,7	;volatile
  3854  0256  2A59               	goto	l206
  3855  0257                     l205:	
  3856  0257  0022               	movlb	2	; select bank2
  3857  0258  138D               	bcf	13,7	;volatile
  3858  0259                     l206:	
  3859  0259  178E               	bsf	14,7	;volatile
  3860  025A  0000               	nop	;# 
  3861  025B  0022               	movlb	2	; select bank2
  3862  025C  138E               	bcf	14,7	;volatile
  3863  025D  0020               	movlb	0	; select bank0
  3864  025E  1F20               	btfss	Mrf49SpiTx@byte,6
  3865  025F  2A63               	goto	l209
  3866  0260  0022               	movlb	2	; select bank2
  3867  0261  178D               	bsf	13,7	;volatile
  3868  0262  2A65               	goto	l210
  3869  0263                     l209:	
  3870  0263  0022               	movlb	2	; select bank2
  3871  0264  138D               	bcf	13,7	;volatile
  3872  0265                     l210:	
  3873  0265  178E               	bsf	14,7	;volatile
  3874  0266  0000               	nop	;# 
  3875  0267  0022               	movlb	2	; select bank2
  3876  0268  138E               	bcf	14,7	;volatile
  3877  0269  0020               	movlb	0	; select bank0
  3878  026A  1EA0               	btfss	Mrf49SpiTx@byte,5
  3879  026B  2A6F               	goto	l213
  3880  026C  0022               	movlb	2	; select bank2
  3881  026D  178D               	bsf	13,7	;volatile
  3882  026E  2A71               	goto	l214
  3883  026F                     l213:	
  3884  026F  0022               	movlb	2	; select bank2
  3885  0270  138D               	bcf	13,7	;volatile
  3886  0271                     l214:	
  3887  0271  178E               	bsf	14,7	;volatile
  3888  0272  0000               	nop	;# 
  3889  0273  0022               	movlb	2	; select bank2
  3890  0274  138E               	bcf	14,7	;volatile
  3891  0275  0020               	movlb	0	; select bank0
  3892  0276  1E20               	btfss	Mrf49SpiTx@byte,4
  3893  0277  2A7B               	goto	l217
  3894  0278  0022               	movlb	2	; select bank2
  3895  0279  178D               	bsf	13,7	;volatile
  3896  027A  2A7D               	goto	l218
  3897  027B                     l217:	
  3898  027B  0022               	movlb	2	; select bank2
  3899  027C  138D               	bcf	13,7	;volatile
  3900  027D                     l218:	
  3901  027D  178E               	bsf	14,7	;volatile
  3902  027E  0000               	nop	;# 
  3903  027F  0022               	movlb	2	; select bank2
  3904  0280  138E               	bcf	14,7	;volatile
  3905  0281  0020               	movlb	0	; select bank0
  3906  0282  1DA0               	btfss	Mrf49SpiTx@byte,3
  3907  0283  2A87               	goto	l221
  3908  0284  0022               	movlb	2	; select bank2
  3909  0285  178D               	bsf	13,7	;volatile
  3910  0286  2A89               	goto	l222
  3911  0287                     l221:	
  3912  0287  0022               	movlb	2	; select bank2
  3913  0288  138D               	bcf	13,7	;volatile
  3914  0289                     l222:	
  3915  0289  178E               	bsf	14,7	;volatile
  3916  028A  0000               	nop	;# 
  3917  028B  0022               	movlb	2	; select bank2
  3918  028C  138E               	bcf	14,7	;volatile
  3919  028D  0020               	movlb	0	; select bank0
  3920  028E  1D20               	btfss	Mrf49SpiTx@byte,2
  3921  028F  2A93               	goto	l225
  3922  0290  0022               	movlb	2	; select bank2
  3923  0291  178D               	bsf	13,7	;volatile
  3924  0292  2A95               	goto	l226
  3925  0293                     l225:	
  3926  0293  0022               	movlb	2	; select bank2
  3927  0294  138D               	bcf	13,7	;volatile
  3928  0295                     l226:	
  3929  0295  178E               	bsf	14,7	;volatile
  3930  0296  0000               	nop	;# 
  3931  0297  0022               	movlb	2	; select bank2
  3932  0298  138E               	bcf	14,7	;volatile
  3933  0299  0020               	movlb	0	; select bank0
  3934  029A  1CA0               	btfss	Mrf49SpiTx@byte,1
  3935  029B  2A9F               	goto	l229
  3936  029C  0022               	movlb	2	; select bank2
  3937  029D  178D               	bsf	13,7	;volatile
  3938  029E  2AA1               	goto	l230
  3939  029F                     l229:	
  3940  029F  0022               	movlb	2	; select bank2
  3941  02A0  138D               	bcf	13,7	;volatile
  3942  02A1                     l230:	
  3943  02A1  178E               	bsf	14,7	;volatile
  3944  02A2  0000               	nop	;# 
  3945  02A3  0022               	movlb	2	; select bank2
  3946  02A4  138E               	bcf	14,7	;volatile
  3947  02A5  0020               	movlb	0	; select bank0
  3948  02A6  1C20               	btfss	Mrf49SpiTx@byte,0
  3949  02A7  2AAB               	goto	l233
  3950  02A8  0022               	movlb	2	; select bank2
  3951  02A9  178D               	bsf	13,7	;volatile
  3952  02AA  2AAD               	goto	l234
  3953  02AB                     l233:	
  3954  02AB  0022               	movlb	2	; select bank2
  3955  02AC  138D               	bcf	13,7	;volatile
  3956  02AD                     l234:	
  3957  02AD  178E               	bsf	14,7	;volatile
  3958  02AE  0000               	nop	;# 
  3959  02AF  0022               	movlb	2	; select bank2
  3960  02B0  138E               	bcf	14,7	;volatile
  3961                           
  3962                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  3963  02B1  138D               	bcf	13,7	;volatile
  3964  02B2  0008               	return
  3965  02B3                     __end_of_Mrf49SpiTx:	
  3966  02B3                     __ptext21:	
  3967 ;; *************** function _Mrf49RxSts *****************
  3968 ;; Defined at:
  3969 ;;		line 32 in file "../../../src/devices/mrf49xa_cmd.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;		None               void
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 1E/0
  3980 ;;		On exit  : 1F/2
  3981 ;;		Unchanged: FFE00/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3983 ;;      Params:         0       0       0       0
  3984 ;;      Locals:         0       0       0       0
  3985 ;;      Temps:          0       0       0       0
  3986 ;;      Totals:         0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    6
  3990 ;; This function calls:
  3991 ;;		_Mrf49SpiRx
  3992 ;; This function is called by:
  3993 ;;		_Mrf49xaTick
  3994 ;;		_Mrf49xaServe
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _Mrf49RxSts
  4000  02B3                     _Mrf49RxSts:	
  4001                           
  4002                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  4006  02B3  120B               	bcf	11,4	;volatile
  4007                           
  4008                           ;mrf49xa_cmd.c: 34: LATCbits.LATC6 = 0;;
  4009  02B4  0022               	movlb	2	; select bank2
  4010  02B5  130E               	bcf	14,6	;volatile
  4011                           
  4012                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  4013  02B6  22BF  3180         	fcall	_Mrf49SpiRx
  4014  02B8  00CA               	movwf	_mrf49Status
  4015                           
  4016                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  4017  02B9  22BF               	fcall	_Mrf49SpiRx
  4018  02BA  00CB               	movwf	_mrf49Status+1
  4019                           
  4020                           ;mrf49xa_cmd.c: 39: LATCbits.LATC6 = 1;;
  4021  02BB  0022               	movlb	2	; select bank2
  4022  02BC  170E               	bsf	14,6	;volatile
  4023                           
  4024                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  4025  02BD  160B               	bsf	11,4	;volatile
  4026  02BE  0008               	return
  4027  02BF                     __end_of_Mrf49RxSts:	
  4028  02BF                     __ptext22:	
  4029 ;; *************** function _Mrf49SpiRx *****************
  4030 ;; Defined at:
  4031 ;;		line 22 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  data            1    0[BANK0 ] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      unsigned char 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2
  4040 ;; Tracked objects:
  4041 ;;		On entry : 1D/2
  4042 ;;		On exit  : 1F/0
  4043 ;;		Unchanged: FFE00/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4045 ;;      Params:         0       0       0       0
  4046 ;;      Locals:         0       1       0       0
  4047 ;;      Temps:          0       0       0       0
  4048 ;;      Totals:         0       1       0       0
  4049 ;;Total ram usage:        1 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    5
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_Mrf49RxCmd
  4056 ;;		_Mrf49RxSts
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           
  4061                           ;psect for function _Mrf49SpiRx
  4062  02BF                     _Mrf49SpiRx:	
  4063                           
  4064                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  4065                           
  4066                           ;incstack = 0
  4067                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  4068  02BF  0020               	movlb	0	; select bank0
  4069  02C0  01A0               	clrf	Mrf49SpiRx@data
  4070                           
  4071                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  4072  02C1  0022               	movlb	2	; select bank2
  4073  02C2  138D               	bcf	13,7	;volatile
  4074  02C3  0020               	movlb	0	; select bank0
  4075  02C4  1A8E               	btfsc	14,5	;volatile
  4076  02C5  17A0               	bsf	Mrf49SpiRx@data,7
  4077  02C6  0022               	movlb	2	; select bank2
  4078  02C7  178E               	bsf	14,7	;volatile
  4079  02C8  0000               	nop	;# 
  4080  02C9  0022               	movlb	2	; select bank2
  4081  02CA  138E               	bcf	14,7	;volatile
  4082                           
  4083                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4084  02CB  0020               	movlb	0	; select bank0
  4085  02CC  1A8E               	btfsc	14,5	;volatile
  4086  02CD  1720               	bsf	Mrf49SpiRx@data,6
  4087  02CE  0022               	movlb	2	; select bank2
  4088  02CF  178E               	bsf	14,7	;volatile
  4089  02D0  0000               	nop	;# 
  4090  02D1  0022               	movlb	2	; select bank2
  4091  02D2  138E               	bcf	14,7	;volatile
  4092                           
  4093                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4094  02D3  0020               	movlb	0	; select bank0
  4095  02D4  1A8E               	btfsc	14,5	;volatile
  4096  02D5  16A0               	bsf	Mrf49SpiRx@data,5
  4097  02D6  0022               	movlb	2	; select bank2
  4098  02D7  178E               	bsf	14,7	;volatile
  4099  02D8  0000               	nop	;# 
  4100  02D9  0022               	movlb	2	; select bank2
  4101  02DA  138E               	bcf	14,7	;volatile
  4102                           
  4103                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4104  02DB  0020               	movlb	0	; select bank0
  4105  02DC  1A8E               	btfsc	14,5	;volatile
  4106  02DD  1620               	bsf	Mrf49SpiRx@data,4
  4107  02DE  0022               	movlb	2	; select bank2
  4108  02DF  178E               	bsf	14,7	;volatile
  4109  02E0  0000               	nop	;# 
  4110  02E1  0022               	movlb	2	; select bank2
  4111  02E2  138E               	bcf	14,7	;volatile
  4112                           
  4113                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4114  02E3  0020               	movlb	0	; select bank0
  4115  02E4  1A8E               	btfsc	14,5	;volatile
  4116  02E5  15A0               	bsf	Mrf49SpiRx@data,3
  4117  02E6  0022               	movlb	2	; select bank2
  4118  02E7  178E               	bsf	14,7	;volatile
  4119  02E8  0000               	nop	;# 
  4120  02E9  0022               	movlb	2	; select bank2
  4121  02EA  138E               	bcf	14,7	;volatile
  4122                           
  4123                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4124  02EB  0020               	movlb	0	; select bank0
  4125  02EC  1A8E               	btfsc	14,5	;volatile
  4126  02ED  1520               	bsf	Mrf49SpiRx@data,2
  4127  02EE  0022               	movlb	2	; select bank2
  4128  02EF  178E               	bsf	14,7	;volatile
  4129  02F0  0000               	nop	;# 
  4130  02F1  0022               	movlb	2	; select bank2
  4131  02F2  138E               	bcf	14,7	;volatile
  4132                           
  4133                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4134  02F3  0020               	movlb	0	; select bank0
  4135  02F4  1A8E               	btfsc	14,5	;volatile
  4136  02F5  14A0               	bsf	Mrf49SpiRx@data,1
  4137  02F6  0022               	movlb	2	; select bank2
  4138  02F7  178E               	bsf	14,7	;volatile
  4139  02F8  0000               	nop	;# 
  4140  02F9  0022               	movlb	2	; select bank2
  4141  02FA  138E               	bcf	14,7	;volatile
  4142                           
  4143                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4144  02FB  0020               	movlb	0	; select bank0
  4145  02FC  1A8E               	btfsc	14,5	;volatile
  4146  02FD  1420               	bsf	Mrf49SpiRx@data,0
  4147  02FE  0022               	movlb	2	; select bank2
  4148  02FF  178E               	bsf	14,7	;volatile
  4149  0300  0000               	nop	;# 
  4150  0301  0022               	movlb	2	; select bank2
  4151  0302  138E               	bcf	14,7	;volatile
  4152                           
  4153                           ;mrf49xa_spi_pic16.c: 40: return data;
  4154  0303  0020               	movlb	0	; select bank0
  4155  0304  0820               	movf	Mrf49SpiRx@data,w
  4156  0305  0008               	return
  4157  0306                     __end_of_Mrf49SpiRx:	
  4158  0306                     __ptext27:	
  4159 ;; *************** function _AdcInit *****************
  4160 ;; Defined at:
  4161 ;;		line 5 in file "../../../src/bsp/pic16/adc16.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;		None               void
  4168 ;; Registers used:
  4169 ;;		wreg, status,2
  4170 ;; Tracked objects:
  4171 ;;		On entry : 17F/2
  4172 ;;		On exit  : 17F/1
  4173 ;;		Unchanged: FFE80/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4175 ;;      Params:         0       0       0       0
  4176 ;;      Locals:         0       0       0       0
  4177 ;;      Temps:          0       0       0       0
  4178 ;;      Totals:         0       0       0       0
  4179 ;;Total ram usage:        0 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    5
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_main
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _AdcInit
  4191  0306                     _AdcInit:	
  4192                           
  4193                           ;adc16.c: 6: ANSELA = 0;
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _AdcInit: [wreg+status,2]
  4197  0306  0023               	movlb	3	; select bank3
  4198  0307  018C               	clrf	12	;volatile
  4199                           
  4200                           ;adc16.c: 7: ANSELB = 0;
  4201  0308  018D               	clrf	13	;volatile
  4202                           
  4203                           ;adc16.c: 8: ANSELC = 0;
  4204  0309  018E               	clrf	14	;volatile
  4205                           
  4206                           ;adc16.c: 10: FVRCON = 0b11100001;
  4207  030A  30E1               	movlw	225
  4208  030B  0022               	movlb	2	; select bank2
  4209  030C  0097               	movwf	23	;volatile
  4210                           
  4211                           ;adc16.c: 12: ADCON2 = 0b00000000;
  4212  030D  0021               	movlb	1	; select bank1
  4213  030E  019F               	clrf	31	;volatile
  4214                           
  4215                           ;adc16.c: 13: ADCON1 = 0b11110000;
  4216  030F  30F0               	movlw	240
  4217  0310  009E               	movwf	30	;volatile
  4218                           
  4219                           ;adc16.c: 14: ADCON0 = 0b00000000;
  4220  0311  019D               	clrf	29	;volatile
  4221                           
  4222                           ;adc16.c: 16: ADCON0 = 0b00010011;
  4223  0312  3013               	movlw	19
  4224  0313  009D               	movwf	29	;volatile
  4225  0314  0008               	return
  4226  0315                     __end_of_AdcInit:	
  4227  0315                     __ptext26:	
  4228 ;; *************** function _ExtIntInit *****************
  4229 ;; Defined at:
  4230 ;;		line 9 in file "../../../src/bsp/pic16/interrupt.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;		None               void
  4237 ;; Registers used:
  4238 ;;		None
  4239 ;; Tracked objects:
  4240 ;;		On entry : 17F/1
  4241 ;;		On exit  : 17F/1
  4242 ;;		Unchanged: FFE80/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4244 ;;      Params:         0       0       0       0
  4245 ;;      Locals:         0       0       0       0
  4246 ;;      Temps:          0       0       0       0
  4247 ;;      Totals:         0       0       0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    5
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_main
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _ExtIntInit
  4260  0315                     _ExtIntInit:	
  4261                           
  4262                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4263                           
  4264                           ;incstack = 0
  4265                           ; Regs used in _ExtIntInit: []
  4266  0315  1315               	bcf	21,6	;volatile
  4267                           
  4268                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4269  0316  108B               	bcf	11,1	;volatile
  4270                           
  4271                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4272  0317  160B               	bsf	11,4	;volatile
  4273                           
  4274                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4275  0318  178B               	bsf	11,7	;volatile
  4276  0319  0008               	return
  4277  031A                     __end_of_ExtIntInit:	
  4278  031A                     __ptext14:	
  4279 ;; *************** function _Mrf49xaPacketPending *****************
  4280 ;; Defined at:
  4281 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;		None
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      unsigned char 
  4288 ;; Registers used:
  4289 ;;		wreg
  4290 ;; Tracked objects:
  4291 ;;		On entry : 1E/0
  4292 ;;		On exit  : 1F/1
  4293 ;;		Unchanged: FFFE0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4295 ;;      Params:         0       0       0       0
  4296 ;;      Locals:         0       0       0       0
  4297 ;;      Temps:          0       0       0       0
  4298 ;;      Totals:         0       0       0       0
  4299 ;;Total ram usage:        0 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    5
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		_Mrf49xaTick
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _Mrf49xaPacketPending
  4311  031A                     _Mrf49xaPacketPending:	
  4312                           
  4313                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  4314                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  4318  031A  0021               	movlb	1	; select bank1
  4319  031B  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4320  031C  3A04               	xorlw	4
  4321  031D  1903               	skipnz
  4322  031E  3401               	retlw	1
  4323  031F  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4324  0320  3A04               	xorlw	4
  4325  0321  1903               	btfsc	3,2
  4326                           
  4327                           ;mrf49xa_packet.c: 9: return 1;
  4328  0322  3401               	retlw	1
  4329                           
  4330                           ;mrf49xa_packet.c: 10: else
  4331                           ;mrf49xa_packet.c: 11: return 0;
  4332  0323  3400               	retlw	0
  4333  0324                     __end_of_Mrf49xaPacketPending:	
  4334  0324                     __ptext13:	
  4335 ;; *************** function _Mrf49xaRxPacket *****************
  4336 ;; Defined at:
  4337 ;;		line 95 in file "../../../src/devices/mrf49xa_packet.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4344 ;; Registers used:
  4345 ;;		wreg
  4346 ;; Tracked objects:
  4347 ;;		On entry : 1F/1
  4348 ;;		On exit  : 1F/1
  4349 ;;		Unchanged: FFFE0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4351 ;;      Params:         0       0       0       0
  4352 ;;      Locals:         0       0       0       0
  4353 ;;      Temps:          0       0       0       0
  4354 ;;      Totals:         0       0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    5
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_Mrf49xaTick
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _Mrf49xaRxPacket
  4367  0324                     _Mrf49xaRxPacket:	
  4368                           
  4369                           ;mrf49xa_packet.c: 96: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  4373  0324  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4374  0325  3A04               	xorlw	4
  4375  0326  1D03               	skipz
  4376  0327  2B2B               	goto	l2440
  4377                           
  4378                           ;mrf49xa_packet.c: 97: {
  4379                           ;mrf49xa_packet.c: 98: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4380  0328  3005               	movlw	5
  4381  0329  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4382                           
  4383                           ;mrf49xa_packet.c: 99: return &(rfTrcvStatus.rxPacket[0]);
  4384  032A  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4385  032B                     l2440:	
  4386                           
  4387                           ;mrf49xa_packet.c: 100: }
  4388                           ;mrf49xa_packet.c: 102: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4389  032B  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4390  032C  3A04               	xorlw	4
  4391  032D  1D03               	skipz
  4392  032E  3400               	retlw	0
  4393                           
  4394                           ;mrf49xa_packet.c: 103: {
  4395                           ;mrf49xa_packet.c: 104: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4396  032F  3005               	movlw	5
  4397  0330  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4398                           
  4399                           ;mrf49xa_packet.c: 105: return &(rfTrcvStatus.rxPacket[1]);
  4400  0331  34D3               	retlw	(_rfTrcvStatus+51)& (0+255)
  4401  0332                     __end_of_Mrf49xaRxPacket:	
  4402                           ;mrf49xa_packet.c: 106: }
  4403                           ;mrf49xa_packet.c: 108: return (0);
  4404                           
  4405  0332                     __ptext6:	
  4406 ;; *************** function _Mrf49xaFreePacket *****************
  4407 ;; Defined at:
  4408 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4411 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  4414 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;		None               void
  4417 ;; Registers used:
  4418 ;;		wreg, fsr1l, fsr1h, status,2
  4419 ;; Tracked objects:
  4420 ;;		On entry : 1F/0
  4421 ;;		On exit  : 1F/0
  4422 ;;		Unchanged: FFFE0/0
  4423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4424 ;;      Params:         0       0       0       0
  4425 ;;      Locals:         0       1       0       0
  4426 ;;      Temps:          0       0       0       0
  4427 ;;      Totals:         0       1       0       0
  4428 ;;Total ram usage:        1 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    5
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		_Mrf49xaTick
  4435 ;;		_HandlePacket
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           
  4440                           ;psect for function _Mrf49xaFreePacket
  4441  0332                     _Mrf49xaFreePacket:	
  4442                           
  4443                           ;incstack = 0
  4444                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  4445                           ;Mrf49xaFreePacket@packet stored from wreg
  4446  0332  00A0               	movwf	Mrf49xaFreePacket@packet
  4447                           
  4448                           ;mrf49xa_packet.c: 91: packet->state = PKT_FREE;
  4449  0333  0086               	movwf	6
  4450  0334  0187               	clrf	7
  4451  0335  0181               	clrf	1
  4452  0336  0008               	return
  4453  0337                     __end_of_Mrf49xaFreePacket:	
  4454  0337                     __ptext5:	
  4455 ;; *************** function _HandlePacket *****************
  4456 ;; Defined at:
  4457 ;;		line 18 in file "../../../src/rfstack/client.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4460 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  packet          1   37[BANK0 ] PTR struct rfTrcvPacket_
  4463 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4464 ;;  sendAck         1   36[BANK0 ] unsigned char 
  4465 ;;  sendMsg         1   35[BANK0 ] unsigned char 
  4466 ;;  needAck         1    0        unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;		None               void
  4469 ;; Registers used:
  4470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 1F/0
  4473 ;;		On exit  : 1E/0
  4474 ;;		Unchanged: FFFE0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4476 ;;      Params:         0       0       0       0
  4477 ;;      Locals:         0       4       0       0
  4478 ;;      Temps:          0       0       0       0
  4479 ;;      Totals:         0       4       0       0
  4480 ;;Total ram usage:        4 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    9
  4483 ;; This function calls:
  4484 ;;		_Mrf49xaTxAck
  4485 ;;		_Mrf49xaTxPacket
  4486 ;;		_Mrf49xaFreePacket
  4487 ;; This function is called by:
  4488 ;;		_Mrf49xaTick
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function _HandlePacket
  4494  0337                     _HandlePacket:	
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in _HandlePacket: [allreg]
  4498                           ;HandlePacket@packet stored from wreg
  4499  0337  00C5               	movwf	HandlePacket@packet
  4500                           
  4501                           ;client.c: 19: bool_t sendMsg = 0;
  4502  0338  01C3               	clrf	HandlePacket@sendMsg
  4503                           
  4504                           ;client.c: 20: bool_t sendAck = 0;
  4505  0339  01C4               	clrf	HandlePacket@sendAck
  4506                           
  4507                           ;client.c: 24: switch (packet->packet.id)
  4508  033A  2B5C               	goto	l2550
  4509  033B                     l2538:	
  4510                           
  4511                           ;client.c: 27: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  4512                           ;client.c: 28: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  4513  033B  0845               	movf	HandlePacket@packet,w
  4514  033C  3E07               	addlw	7
  4515  033D  0086               	movwf	6
  4516  033E  0187               	clrf	7
  4517  033F  0021               	movlb	1	; select bank1
  4518  0340  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  4519  0341  0601               	xorwf	1,w
  4520  0342  1D03               	skipz
  4521  0343  2B6B               	goto	l2552
  4522  0344  0020               	movlb	0	; select bank0
  4523  0345  0845               	movf	HandlePacket@packet,w
  4524  0346  3E06               	addlw	6
  4525  0347  0086               	movwf	6
  4526  0348  0021               	movlb	1	; select bank1
  4527  0349  0825               	movf	(_rfTrcvStatus^(0+128)+5),w
  4528  034A  0601               	xorwf	1,w
  4529  034B  1D03               	skipz
  4530  034C  2B6B               	goto	l2552
  4531                           
  4532                           ;client.c: 29: {
  4533                           ;client.c: 30: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  4534  034D  3002               	movlw	2
  4535  034E  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  4536  034F  2B6B               	goto	l2552
  4537  0350                     l2544:	
  4538                           
  4539                           ;client.c: 35: packet->packet.data[0] = 2;
  4540  0350  0845               	movf	HandlePacket@packet,w
  4541  0351  3E06               	addlw	6
  4542  0352  0086               	movwf	6
  4543  0353  3002               	movlw	2
  4544  0354  0187               	clrf	7
  4545  0355  0081               	movwf	1
  4546                           
  4547                           ;client.c: 36: sendMsg = 1;
  4548  0356  01C3               	clrf	HandlePacket@sendMsg
  4549  0357  0AC3               	incf	HandlePacket@sendMsg,f
  4550                           
  4551                           ;client.c: 37: break;
  4552  0358  2B6B               	goto	l2552
  4553  0359                     l438:	
  4554                           ;client.c: 40: syncedTime = *((uint32_t*) packet->packet.data);
  4555                           
  4556                           
  4557                           ;client.c: 41: sendAck = 1;
  4558  0359  01C4               	clrf	HandlePacket@sendAck
  4559  035A  0AC4               	incf	HandlePacket@sendAck,f
  4560                           
  4561                           ;client.c: 42: break;
  4562  035B  2B6B               	goto	l2552
  4563  035C                     l2550:	
  4564  035C  0845               	movf	HandlePacket@packet,w
  4565  035D  3E04               	addlw	4
  4566  035E  0086               	movwf	6
  4567  035F  0187               	clrf	7
  4568  0360  0801               	movf	1,w
  4569                           
  4570                           ; Switch size 1, requested type "speed"
  4571                           ; Number of cases is 3, Range of values is 160 to 162
  4572                           ; switch strategies available:
  4573                           ; Name         Instructions Cycles
  4574                           ; simple_byte           10     6 (average)
  4575                           ; direct_byte           15     9 (fixed)
  4576                           ; jumptable            263     9 (fixed)
  4577                           ;	Chosen strategy is simple_byte
  4578  0361  3AA0               	xorlw	160	; case 160
  4579  0362  1903               	skipnz
  4580  0363  2B50               	goto	l2544
  4581  0364  3A01               	xorlw	1	; case 161
  4582  0365  1903               	skipnz
  4583  0366  2B3B               	goto	l2538
  4584  0367  3A03               	xorlw	3	; case 162
  4585  0368  1903               	skipnz
  4586  0369  2B59               	goto	l438
  4587  036A  2B6B               	goto	l2552
  4588  036B                     l2552:	
  4589                           
  4590                           ;client.c: 46: if (sendMsg)
  4591  036B  0020               	movlb	0	; select bank0
  4592  036C  0843               	movf	HandlePacket@sendMsg,w
  4593  036D  1903               	btfsc	3,2
  4594  036E  2B75               	goto	l2556
  4595                           
  4596                           ;client.c: 47: Mrf49xaTxPacket(packet, 1, needAck);
  4597  036F  01BB               	clrf	?_Mrf49xaTxPacket
  4598  0370  0ABB               	incf	?_Mrf49xaTxPacket,f
  4599  0371  01BC               	clrf	?_Mrf49xaTxPacket+1
  4600  0372  0845               	movf	HandlePacket@packet,w
  4601  0373  3185  2DD7         	ljmp	_Mrf49xaTxPacket
  4602  0375                     l2556:	
  4603                           
  4604                           ;client.c: 48: else if (sendAck)
  4605  0375  0844               	movf	HandlePacket@sendAck,w
  4606  0376  1903               	btfsc	3,2
  4607  0377  2B7B               	goto	l2560
  4608                           
  4609                           ;client.c: 49: Mrf49xaTxAck(packet);
  4610  0378  0845               	movf	HandlePacket@packet,w
  4611  0379  3185  2DA3         	ljmp	_Mrf49xaTxAck
  4612  037B                     l2560:	
  4613                           
  4614                           ;client.c: 50: else
  4615                           ;client.c: 51: Mrf49xaFreePacket(packet);
  4616  037B  0845               	movf	HandlePacket@packet,w
  4617  037C  2B32               	ljmp	_Mrf49xaFreePacket
  4618  037D                     __end_of_HandlePacket:	
  4619  037D                     __ptext2:	
  4620 ;; *************** function _RfSendPor *****************
  4621 ;; Defined at:
  4622 ;;		line 4 in file "../../../src/rfstack/client.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  packet          1   33[BANK0 ] PTR struct rfTrcvPacket_
  4627 ;;		 -> NULL(0), rfTrcvStatus(79), 
  4628 ;; Return value:  Size  Location     Type
  4629 ;;		None               void
  4630 ;; Registers used:
  4631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 1F/0
  4634 ;;		On exit  : 1E/0
  4635 ;;		Unchanged: FFFE0/0
  4636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4637 ;;      Params:         0       0       0       0
  4638 ;;      Locals:         0       1       0       0
  4639 ;;      Temps:          0       0       0       0
  4640 ;;      Totals:         0       1       0       0
  4641 ;;Total ram usage:        1 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    8
  4644 ;; This function calls:
  4645 ;;		_Mrf49xaTxPacket
  4646 ;;		_Mrf49xaAllocPacket
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           
  4653                           ;psect for function _RfSendPor
  4654  037D                     _RfSendPor:	
  4655                           
  4656                           ;client.c: 5: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  4657                           
  4658                           ;incstack = 0
  4659                           ; Regs used in _RfSendPor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4660  037D  23E7               	fcall	_Mrf49xaAllocPacket
  4661  037E  0020               	movlb	0	; select bank0
  4662  037F  00C1               	movwf	RfSendPor@packet
  4663                           
  4664                           ;client.c: 7: packet->packet.size = 2;
  4665  0380  0A41               	incf	RfSendPor@packet,w
  4666  0381  0086               	movwf	6
  4667  0382  3002               	movlw	2
  4668  0383  0187               	clrf	7
  4669  0384  0081               	movwf	1
  4670                           
  4671                           ;client.c: 8: packet->packet.id = RF_POR;
  4672  0385  0841               	movf	RfSendPor@packet,w
  4673  0386  3E04               	addlw	4
  4674  0387  0086               	movwf	6
  4675  0388  30B0               	movlw	176
  4676  0389  0081               	movwf	1
  4677                           
  4678                           ;client.c: 9: packet->packet.dst = 0xFF;
  4679  038A  0841               	movf	RfSendPor@packet,w
  4680  038B  3E03               	addlw	3
  4681  038C  0086               	movwf	6
  4682  038D  30FF               	movlw	255
  4683  038E  0081               	movwf	1
  4684                           
  4685                           ;client.c: 11: packet->packet.data[0] = 0x55;
  4686  038F  0841               	movf	RfSendPor@packet,w
  4687  0390  3E06               	addlw	6
  4688  0391  0086               	movwf	6
  4689  0392  3055               	movlw	85
  4690  0393  0081               	movwf	1
  4691                           
  4692                           ;client.c: 12: packet->packet.data[1] = 0xAA;
  4693  0394  0841               	movf	RfSendPor@packet,w
  4694  0395  3E07               	addlw	7
  4695  0396  0086               	movwf	6
  4696  0397  30AA               	movlw	170
  4697  0398  0081               	movwf	1
  4698                           
  4699                           ;client.c: 14: Mrf49xaTxPacket(packet, 0, 1);
  4700  0399  01BB               	clrf	?_Mrf49xaTxPacket
  4701  039A  01BC               	clrf	?_Mrf49xaTxPacket+1
  4702  039B  0ABC               	incf	?_Mrf49xaTxPacket+1,f
  4703  039C  0841               	movf	RfSendPor@packet,w
  4704  039D  3185  2DD7         	ljmp	_Mrf49xaTxPacket
  4705  039F                     __end_of_RfSendPor:	
  4706  039F                     __ptext1:	
  4707 ;; *************** function _SysInitGpio *****************
  4708 ;; Defined at:
  4709 ;;		line 29 in file "../../../src/node/main.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		None
  4718 ;; Tracked objects:
  4719 ;;		On entry : 17F/4
  4720 ;;		On exit  : 17F/2
  4721 ;;		Unchanged: FFE80/0
  4722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4723 ;;      Params:         0       0       0       0
  4724 ;;      Locals:         0       0       0       0
  4725 ;;      Temps:          0       0       0       0
  4726 ;;      Totals:         0       0       0       0
  4727 ;;Total ram usage:        0 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    5
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_main
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           
  4738                           ;psect for function _SysInitGpio
  4739  039F                     _SysInitGpio:	
  4740                           
  4741                           ;incstack = 0
  4742                           ; Regs used in _SysInitGpio: []
  4743                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4744  039F  0021               	movlb	1	; select bank1
  4745  03A0  150C               	bsf	12,2	;volatile
  4746  03A1  120C               	bcf	12,4	;volatile
  4747  03A2  128C               	bcf	12,5	;volatile
  4748  03A3  0022               	movlb	2	; select bank2
  4749  03A4  120C               	bcf	12,4	;volatile
  4750  03A5  128C               	bcf	12,5	;volatile
  4751                           
  4752                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4753  03A6  0021               	movlb	1	; select bank1
  4754  03A7  120D               	bcf	13,4	;volatile
  4755  03A8  130D               	bcf	13,6	;volatile
  4756  03A9  138D               	bcf	13,7	;volatile
  4757  03AA  168D               	bsf	13,5	;volatile
  4758                           
  4759                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  4760  03AB  108E               	bcf	14,1	;volatile
  4761  03AC  110E               	bcf	14,2	;volatile
  4762  03AD  120E               	bcf	14,4	;volatile
  4763  03AE  130E               	bcf	14,6	;volatile
  4764  03AF  138E               	bcf	14,7	;volatile
  4765  03B0  140E               	bsf	14,0	;volatile
  4766  03B1  158E               	bsf	14,3	;volatile
  4767  03B2  168E               	bsf	14,5	;volatile
  4768  03B3  0022               	movlb	2	; select bank2
  4769  03B4  108E               	bcf	14,1	;volatile
  4770  03B5  110E               	bcf	14,2	;volatile
  4771  03B6  120E               	bcf	14,4	;volatile
  4772  03B7  170E               	bsf	14,6	;volatile
  4773  03B8  138E               	bcf	14,7	;volatile
  4774                           
  4775                           ;main.c: 34: LATCbits.LATC1 = 0;
  4776  03B9  108E               	bcf	14,1	;volatile
  4777                           
  4778                           ;main.c: 35: LATCbits.LATC2 = 0;
  4779  03BA  110E               	bcf	14,2	;volatile
  4780  03BB  0008               	return
  4781  03BC                     __end_of_SysInitGpio:	
  4782  03BC                     __ptext15:	
  4783 ;; *************** function _Mrf49xaModeTx *****************
  4784 ;; Defined at:
  4785 ;;		line 81 in file "../../../src/devices/mrf49xa.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  k               1    3[BANK0 ] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;		None               void
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0, pclath, cstack
  4794 ;; Tracked objects:
  4795 ;;		On entry : 1F/0
  4796 ;;		On exit  : 1F/1
  4797 ;;		Unchanged: FFE00/0
  4798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4799 ;;      Params:         0       0       0       0
  4800 ;;      Locals:         0       1       0       0
  4801 ;;      Temps:          0       0       0       0
  4802 ;;      Totals:         0       1       0       0
  4803 ;;Total ram usage:        1 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    7
  4806 ;; This function calls:
  4807 ;;		_Mrf49TxCmd
  4808 ;; This function is called by:
  4809 ;;		_Mrf49xaTick
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           
  4814                           ;psect for function _Mrf49xaModeTx
  4815  03BC                     _Mrf49xaModeTx:	
  4816  03BC  3033               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  4817                           
  4818                           ;mrf49xa.c: 82: UI08_t k;
  4819                           ;mrf49xa.c: 83: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  4823  03BD  01A3               	clrf	Mrf49xaModeTx@k
  4824  03BE  3187               	movlp	high __stringtab
  4825  03BF  000A               	callw
  4826  03C0  3180               	pagesel	$	;select current page
  4827  03C1  3800               	iorlw	0
  4828  03C2  1903               	btfsc	3,2
  4829  03C3  2BE1               	goto	l2162
  4830  03C4                     l2154:	
  4831  03C4  3523               	lslf	Mrf49xaModeTx@k,w
  4832  03C5  3E60               	addlw	low (_mrfRegset_Tx| (0+32768))
  4833  03C6  3187               	movlp	high __stringtab
  4834  03C7  000A               	callw
  4835  03C8  3180               	pagesel	$	;select current page
  4836  03C9  3A55               	xorlw	85
  4837  03CA  1903               	skipnz
  4838  03CB  2BD8               	goto	l2158
  4839  03CC  3523               	lslf	Mrf49xaModeTx@k,w
  4840  03CD  3E61               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  4841  03CE  3187               	movlp	high __stringtab
  4842  03CF  000A               	callw
  4843  03D0  3180               	pagesel	$	;select current page
  4844  03D1  00A1               	movwf	?_Mrf49TxCmd
  4845  03D2  3523               	lslf	Mrf49xaModeTx@k,w
  4846  03D3  3E60               	addlw	low (_mrfRegset_Tx| (0+32768))
  4847  03D4  3187               	movlp	high __stringtab
  4848  03D5  000A               	callw
  4849  03D6  3180               	pagesel	$	;select current page
  4850  03D7  2245               	fcall	_Mrf49TxCmd
  4851  03D8                     l2158:	
  4852  03D8  0020               	movlb	0	; select bank0
  4853  03D9  3033               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  4854  03DA  0AA3               	incf	Mrf49xaModeTx@k,f
  4855  03DB  3187               	movlp	high __stringtab
  4856  03DC  000A               	callw
  4857  03DD  3180               	pagesel	$	;select current page
  4858  03DE  0223               	subwf	Mrf49xaModeTx@k,w
  4859  03DF  1C03               	skipc
  4860  03E0  2BC4               	goto	l2154
  4861  03E1                     l2162:	
  4862                           
  4863                           ;mrf49xa.c: 85: rfTrcvStatus.state = TX_PACKET;
  4864  03E1  3002               	movlw	2
  4865  03E2  0021               	movlb	1	; select bank1
  4866  03E3  00A0               	movwf	_rfTrcvStatus^(0+128)
  4867                           
  4868                           ;mrf49xa.c: 86: rfTrcvStatus.hwByte = 99;
  4869  03E4  3063               	movlw	99
  4870  03E5  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  4871  03E6  0008               	return
  4872  03E7                     __end_of_Mrf49xaModeTx:	
  4873  03E7                     __ptext3:	
  4874 ;; *************** function _Mrf49xaAllocPacket *****************
  4875 ;; Defined at:
  4876 ;;		line 112 in file "../../../src/devices/mrf49xa_packet.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;		None
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;		None
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 1F/0
  4887 ;;		On exit  : 1F/1
  4888 ;;		Unchanged: FFFE0/0
  4889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4890 ;;      Params:         0       0       0       0
  4891 ;;      Locals:         0       0       0       0
  4892 ;;      Temps:          0       0       0       0
  4893 ;;      Totals:         0       0       0       0
  4894 ;;Total ram usage:        0 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    5
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_RfSendPor
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           
  4905                           ;psect for function _Mrf49xaAllocPacket
  4906  03E7                     _Mrf49xaAllocPacket:	
  4907                           
  4908                           ;mrf49xa_packet.c: 113: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  4909                           
  4910                           ;incstack = 0
  4911                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  4912  03E7  0021               	movlb	1	; select bank1
  4913  03E8  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  4914  03E9  1D03               	skipz
  4915  03EA  2BEE               	goto	l2456
  4916                           
  4917                           ;mrf49xa_packet.c: 114: {
  4918                           ;mrf49xa_packet.c: 115: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4919  03EB  3005               	movlw	5
  4920  03EC  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4921                           
  4922                           ;mrf49xa_packet.c: 116: return &(rfTrcvStatus.rxPacket[0]);
  4923  03ED  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4924  03EE                     l2456:	
  4925                           
  4926                           ;mrf49xa_packet.c: 117: }
  4927                           ;mrf49xa_packet.c: 119: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  4928  03EE  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  4929  03EF  1D03               	skipz
  4930  03F0  3400               	retlw	0
  4931                           
  4932                           ;mrf49xa_packet.c: 120: {
  4933                           ;mrf49xa_packet.c: 121: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4934  03F1  3005               	movlw	5
  4935  03F2  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4936                           
  4937                           ;mrf49xa_packet.c: 122: return &(rfTrcvStatus.rxPacket[1]);
  4938  03F3  34D3               	retlw	(_rfTrcvStatus+51)& (0+255)
  4939  03F4                     __end_of_Mrf49xaAllocPacket:	
  4940                           ;mrf49xa_packet.c: 123: }
  4941                           ;mrf49xa_packet.c: 125: return (0);
  4942                           
  4943                           
  4944                           	psect	bssBANK0
  4945  004A                     __pbssBANK0:	
  4946  004A                     _mrf49Status:	
  4947  004A                     	ds	2
  4948                           
  4949                           	psect	bssBANK1
  4950  00A0                     __pbssBANK1:	
  4951  00A0                     _rfTrcvStatus:	
  4952  00A0                     	ds	79
  4953                           
  4954                           	psect	clrtext
  4955  0784                     clear_ram0:	
  4956                           ;	Called with FSR0 containing the base address, and
  4957                           ;	WREG with the size to clear
  4958                           
  4959  0784  0064               	clrwdt	;clear the watchdog before getting into this loop
  4960  0785                     clrloop0:	
  4961  0785  0180               	clrf	0	;clear RAM location pointed to by FSR
  4962  0786  3101               	addfsr 0,1
  4963  0787  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4964  0788  2F85               	goto	clrloop0	;have we reached the end yet?
  4965  0789  3400               	retlw	0	;all done for this memory range, return
  4966                           
  4967                           	psect	cstackCOMMON
  4968  0070                     __pcstackCOMMON:	
  4969  0070                     ?_HandlePacket:	
  4970  0070                     ?_putch:	
  4971                           ; 0 bytes @ 0x0
  4972                           
  4973  0070                     ?_AdcInit:	
  4974                           ; 0 bytes @ 0x0
  4975                           
  4976  0070                     ?_ExtIntInit:	
  4977                           ; 0 bytes @ 0x0
  4978                           
  4979  0070                     ?_extInt:	
  4980                           ; 0 bytes @ 0x0
  4981                           
  4982  0070                     ?_Mrf49xaModeRx:	
  4983                           ; 0 bytes @ 0x0
  4984                           
  4985  0070                     ?_Mrf49xaModeTx:	
  4986                           ; 0 bytes @ 0x0
  4987                           
  4988  0070                     ?_Mrf49xaInit:	
  4989                           ; 0 bytes @ 0x0
  4990                           
  4991  0070                     ?_Mrf49SpiTx:	
  4992                           ; 0 bytes @ 0x0
  4993                           
  4994  0070                     ?_Mrf49RxSts:	
  4995                           ; 0 bytes @ 0x0
  4996                           
  4997  0070                     ?_Mrf49TxByte:	
  4998                           ; 0 bytes @ 0x0
  4999                           
  5000  0070                     ?_Mrf49xaTxAck:	
  5001                           ; 0 bytes @ 0x0
  5002                           
  5003  0070                     ?_Mrf49xaFreePacket:	
  5004                           ; 0 bytes @ 0x0
  5005                           
  5006  0070                     ?_Mrf49xaTick:	
  5007                           ; 0 bytes @ 0x0
  5008                           
  5009  0070                     ?_RfSendPor:	
  5010                           ; 0 bytes @ 0x0
  5011                           
  5012  0070                     ?_SysInitGpio:	
  5013                           ; 0 bytes @ 0x0
  5014                           
  5015  0070                     ?_main:	
  5016                           ; 0 bytes @ 0x0
  5017                           
  5018  0070                     ?i1_Mrf49xaModeRx:	
  5019                           ; 0 bytes @ 0x0
  5020                           
  5021  0070                     ?i1_Mrf49SpiTx:	
  5022                           ; 0 bytes @ 0x0
  5023                           
  5024  0070                     ??i1_Mrf49SpiTx:	
  5025                           ; 0 bytes @ 0x0
  5026                           
  5027  0070                     ??i1_Mrf49SpiRx:	
  5028                           ; 0 bytes @ 0x0
  5029                           
  5030  0070                     ?i1_Mrf49RxSts:	
  5031                           ; 0 bytes @ 0x0
  5032                           
  5033  0070                     ?i1_Mrf49TxByte:	
  5034                           ; 0 bytes @ 0x0
  5035                           
  5036  0070                     ?_Mrf49xaServe:	
  5037                           ; 0 bytes @ 0x0
  5038                           
  5039  0070                     ?_Mrf49SpiRx:	
  5040                           ; 1 bytes @ 0x0
  5041                           
  5042  0070                     ?_Mrf49RxCmd:	
  5043                           ; 1 bytes @ 0x0
  5044                           
  5045  0070                     ?_Mrf49RxByte:	
  5046                           ; 1 bytes @ 0x0
  5047                           
  5048  0070                     ?_Mrf49xaPacketPending:	
  5049                           ; 1 bytes @ 0x0
  5050                           
  5051  0070                     ?_Mrf49xaRxPacket:	
  5052                           ; 1 bytes @ 0x0
  5053                           
  5054  0070                     ?_Mrf49xaAllocPacket:	
  5055                           ; 1 bytes @ 0x0
  5056                           
  5057  0070                     ?i1_Mrf49SpiRx:	
  5058                           ; 1 bytes @ 0x0
  5059                           
  5060  0070                     ?i1_Mrf49RxCmd:	
  5061                           ; 1 bytes @ 0x0
  5062                           
  5063  0070                     ?i1_Mrf49RxByte:	
  5064                           ; 1 bytes @ 0x0
  5065                           
  5066  0070                     ?i1_Mrf49xaServe:	
  5067                           ; 1 bytes @ 0x0
  5068                           
  5069  0070                     putch@c:	
  5070                           ; 1 bytes @ 0x0
  5071                           
  5072  0070                     i1Mrf49SpiTx@byte:	
  5073                           ; 1 bytes @ 0x0
  5074                           
  5075  0070                     i1Mrf49SpiRx@data:	
  5076                           ; 1 bytes @ 0x0
  5077                           
  5078                           
  5079                           ; 1 bytes @ 0x0
  5080  0070                     	ds	1
  5081  0071                     ?i1_Mrf49TxCmd:	
  5082  0071                     ??i1_Mrf49RxCmd:	
  5083                           ; 0 bytes @ 0x1
  5084                           
  5085  0071                     ??i1_Mrf49RxSts:	
  5086                           ; 0 bytes @ 0x1
  5087                           
  5088  0071                     i1Mrf49TxCmd@val:	
  5089                           ; 0 bytes @ 0x1
  5090                           
  5091  0071                     i1Mrf49RxCmd@cmd:	
  5092                           ; 1 bytes @ 0x1
  5093                           
  5094                           
  5095                           ; 1 bytes @ 0x1
  5096  0071                     	ds	1
  5097  0072                     ??i1_Mrf49TxCmd:	
  5098  0072                     i1Mrf49TxCmd@cmd:	
  5099                           ; 0 bytes @ 0x2
  5100                           
  5101  0072                     i1Mrf49RxCmd@val:	
  5102                           ; 1 bytes @ 0x2
  5103                           
  5104                           
  5105                           ; 1 bytes @ 0x2
  5106  0072                     	ds	1
  5107  0073                     ??i1_Mrf49xaModeRx:	
  5108  0073                     ??i1_Mrf49RxByte:	
  5109                           ; 0 bytes @ 0x3
  5110                           
  5111  0073                     ??i1_Mrf49TxByte:	
  5112                           ; 0 bytes @ 0x3
  5113                           
  5114  0073                     i1Mrf49xaModeRx@k:	
  5115                           ; 0 bytes @ 0x3
  5116                           
  5117  0073                     i1Mrf49TxByte@byte:	
  5118                           ; 1 bytes @ 0x3
  5119                           
  5120                           
  5121                           ; 1 bytes @ 0x3
  5122  0073                     	ds	1
  5123  0074                     ??i1_Mrf49xaServe:	
  5124                           
  5125                           ; 0 bytes @ 0x4
  5126  0074                     	ds	1
  5127  0075                     i1Mrf49xaServe@data:	
  5128                           
  5129                           ; 1 bytes @ 0x5
  5130  0075                     	ds	1
  5131  0076                     ??_extInt:	
  5132                           
  5133                           ; 0 bytes @ 0x6
  5134  0076                     	ds	1
  5135  0077                     ??_Mrf49TxCmd:	
  5136  0077                     ??_HandlePacket:	
  5137                           ; 0 bytes @ 0x7
  5138                           
  5139  0077                     ??_putch:	
  5140                           ; 0 bytes @ 0x7
  5141                           
  5142  0077                     ??_AdcInit:	
  5143                           ; 0 bytes @ 0x7
  5144                           
  5145  0077                     ??_ExtIntInit:	
  5146                           ; 0 bytes @ 0x7
  5147                           
  5148  0077                     ??_Mrf49xaModeRx:	
  5149                           ; 0 bytes @ 0x7
  5150                           
  5151  0077                     ??_Mrf49xaModeTx:	
  5152                           ; 0 bytes @ 0x7
  5153                           
  5154  0077                     ??_Mrf49SpiTx:	
  5155                           ; 0 bytes @ 0x7
  5156                           
  5157  0077                     ??_Mrf49SpiRx:	
  5158                           ; 0 bytes @ 0x7
  5159                           
  5160  0077                     ??_Mrf49RxCmd:	
  5161                           ; 0 bytes @ 0x7
  5162                           
  5163  0077                     ??_Mrf49RxSts:	
  5164                           ; 0 bytes @ 0x7
  5165                           
  5166  0077                     ??_Mrf49RxByte:	
  5167                           ; 0 bytes @ 0x7
  5168                           
  5169  0077                     ??_Mrf49TxByte:	
  5170                           ; 0 bytes @ 0x7
  5171                           
  5172  0077                     ??_Mrf49xaPacketPending:	
  5173                           ; 0 bytes @ 0x7
  5174                           
  5175  0077                     ??_Mrf49xaTxAck:	
  5176                           ; 0 bytes @ 0x7
  5177                           
  5178  0077                     ??_Mrf49xaFreePacket:	
  5179                           ; 0 bytes @ 0x7
  5180                           
  5181  0077                     ??_Mrf49xaRxPacket:	
  5182                           ; 0 bytes @ 0x7
  5183                           
  5184  0077                     ??_Mrf49xaAllocPacket:	
  5185                           ; 0 bytes @ 0x7
  5186                           
  5187  0077                     ??_RfSendPor:	
  5188                           ; 0 bytes @ 0x7
  5189                           
  5190  0077                     ??_SysInitGpio:	
  5191                           ; 0 bytes @ 0x7
  5192                           
  5193  0077                     ??_main:	
  5194                           ; 0 bytes @ 0x7
  5195                           
  5196  0077                     ??___lwdiv:	
  5197                           ; 0 bytes @ 0x7
  5198                           
  5199  0077                     ??___lwmod:	
  5200                           ; 0 bytes @ 0x7
  5201                           
  5202                           
  5203                           	psect	cstackBANK0
  5204  0020                     __pcstackBANK0:	
  5205                           ; 0 bytes @ 0x7
  5206                           
  5207  0020                     ?___lwdiv:	
  5208  0020                     Mrf49SpiTx@byte:	
  5209                           ; 2 bytes @ 0x0
  5210                           
  5211  0020                     Mrf49SpiRx@data:	
  5212                           ; 1 bytes @ 0x0
  5213                           
  5214  0020                     Mrf49xaFreePacket@packet:	
  5215                           ; 1 bytes @ 0x0
  5216                           
  5217  0020                     ___lwdiv@divisor:	
  5218                           ; 1 bytes @ 0x0
  5219                           
  5220                           
  5221                           ; 2 bytes @ 0x0
  5222  0020                     	ds	1
  5223  0021                     ?_Mrf49TxCmd:	
  5224  0021                     Mrf49TxCmd@val:	
  5225                           ; 0 bytes @ 0x1
  5226                           
  5227  0021                     Mrf49RxCmd@cmd:	
  5228                           ; 1 bytes @ 0x1
  5229                           
  5230                           
  5231                           ; 1 bytes @ 0x1
  5232  0021                     	ds	1
  5233  0022                     Mrf49TxCmd@cmd:	
  5234  0022                     Mrf49RxCmd@val:	
  5235                           ; 1 bytes @ 0x2
  5236                           
  5237  0022                     ___lwdiv@dividend:	
  5238                           ; 1 bytes @ 0x2
  5239                           
  5240                           
  5241                           ; 2 bytes @ 0x2
  5242  0022                     	ds	1
  5243  0023                     Mrf49xaModeRx@k:	
  5244  0023                     Mrf49xaModeTx@k:	
  5245                           ; 1 bytes @ 0x3
  5246                           
  5247  0023                     Mrf49TxByte@byte:	
  5248                           ; 1 bytes @ 0x3
  5249                           
  5250                           
  5251                           ; 1 bytes @ 0x3
  5252  0023                     	ds	1
  5253  0024                     ??_Mrf49xaServe:	
  5254  0024                     ___lwdiv@quotient:	
  5255                           ; 0 bytes @ 0x4
  5256                           
  5257                           
  5258                           ; 2 bytes @ 0x4
  5259  0024                     	ds	1
  5260  0025                     Mrf49xaServe@data:	
  5261                           
  5262                           ; 1 bytes @ 0x5
  5263  0025                     	ds	1
  5264  0026                     ??_Mrf49xaInit:	
  5265  0026                     ___lwdiv@counter:	
  5266                           ; 0 bytes @ 0x6
  5267                           
  5268                           
  5269                           ; 1 bytes @ 0x6
  5270  0026                     	ds	1
  5271  0027                     ?___lwmod:	
  5272  0027                     ___lwmod@divisor:	
  5273                           ; 2 bytes @ 0x7
  5274                           
  5275                           
  5276                           ; 2 bytes @ 0x7
  5277  0027                     	ds	2
  5278  0029                     Mrf49xaInit@k:	
  5279  0029                     ___lwmod@dividend:	
  5280                           ; 1 bytes @ 0x9
  5281                           
  5282                           
  5283                           ; 2 bytes @ 0x9
  5284  0029                     	ds	2
  5285  002B                     ___lwmod@counter:	
  5286                           
  5287                           ; 1 bytes @ 0xB
  5288  002B                     	ds	1
  5289  002C                     ?_printf:	
  5290                           
  5291                           ; 2 bytes @ 0xC
  5292  002C                     	ds	4
  5293  0030                     ??_printf:	
  5294                           
  5295                           ; 0 bytes @ 0x10
  5296  0030                     	ds	2
  5297  0032                     printf@ap:	
  5298                           
  5299                           ; 1 bytes @ 0x12
  5300  0032                     	ds	1
  5301  0033                     printf@flag:	
  5302                           
  5303                           ; 1 bytes @ 0x13
  5304  0033                     	ds	1
  5305  0034                     printf@f:	
  5306                           
  5307                           ; 1 bytes @ 0x14
  5308  0034                     	ds	1
  5309  0035                     printf@prec:	
  5310                           
  5311                           ; 1 bytes @ 0x15
  5312  0035                     	ds	1
  5313  0036                     printf@_val:	
  5314                           
  5315                           ; 4 bytes @ 0x16
  5316  0036                     	ds	4
  5317  003A                     printf@c:	
  5318                           
  5319                           ; 1 bytes @ 0x1A
  5320  003A                     	ds	1
  5321  003B                     ?_Mrf49xaTxPacket:	
  5322  003B                     Mrf49xaTxPacket@response:	
  5323                           ; 1 bytes @ 0x1B
  5324                           
  5325                           
  5326                           ; 1 bytes @ 0x1B
  5327  003B                     	ds	1
  5328  003C                     Mrf49xaTxPacket@needAck:	
  5329                           
  5330                           ; 1 bytes @ 0x1C
  5331  003C                     	ds	1
  5332  003D                     ??_Mrf49xaTxPacket:	
  5333                           
  5334                           ; 0 bytes @ 0x1D
  5335  003D                     	ds	1
  5336  003E                     Mrf49xaTxPacket@crc:	
  5337                           
  5338                           ; 1 bytes @ 0x1E
  5339  003E                     	ds	1
  5340  003F                     Mrf49xaTxPacket@i:	
  5341                           
  5342                           ; 1 bytes @ 0x1F
  5343  003F                     	ds	1
  5344  0040                     Mrf49xaTxPacket@packet:	
  5345                           
  5346                           ; 1 bytes @ 0x20
  5347  0040                     	ds	1
  5348  0041                     Mrf49xaTxAck@packet:	
  5349  0041                     RfSendPor@packet:	
  5350                           ; 1 bytes @ 0x21
  5351                           
  5352                           
  5353                           ; 1 bytes @ 0x21
  5354  0041                     	ds	2
  5355  0043                     HandlePacket@sendMsg:	
  5356                           
  5357                           ; 1 bytes @ 0x23
  5358  0043                     	ds	1
  5359  0044                     HandlePacket@sendAck:	
  5360                           
  5361                           ; 1 bytes @ 0x24
  5362  0044                     	ds	1
  5363  0045                     HandlePacket@packet:	
  5364                           
  5365                           ; 1 bytes @ 0x25
  5366  0045                     	ds	1
  5367  0046                     ??_Mrf49xaTick:	
  5368                           
  5369                           ; 0 bytes @ 0x26
  5370  0046                     	ds	2
  5371  0048                     Mrf49xaTick@timeout:	
  5372                           
  5373                           ; 1 bytes @ 0x28
  5374  0048                     	ds	1
  5375  0049                     Mrf49xaTick@packet:	
  5376                           
  5377                           ; 1 bytes @ 0x29
  5378  0049                     	ds	1
  5379                           
  5380                           	psect	text7
  5381  05A3                     __ptext7:	
  5382 ;; *************** function _Mrf49xaTxAck *****************
  5383 ;; Defined at:
  5384 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5387 ;;		 -> NULL(0), rfTrcvStatus(79), 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  packet          1   33[BANK0 ] PTR struct rfTrcvPacket_
  5390 ;;		 -> NULL(0), rfTrcvStatus(79), 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;		None               void
  5393 ;; Registers used:
  5394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 1F/0
  5397 ;;		On exit  : 1F/0
  5398 ;;		Unchanged: FFFE0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5400 ;;      Params:         0       0       0       0
  5401 ;;      Locals:         0       1       0       0
  5402 ;;      Temps:          0       0       0       0
  5403 ;;      Totals:         0       1       0       0
  5404 ;;Total ram usage:        1 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    8
  5407 ;; This function calls:
  5408 ;;		_printf
  5409 ;;		_Mrf49xaTxPacket
  5410 ;; This function is called by:
  5411 ;;		_HandlePacket
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           
  5416                           ;psect for function _Mrf49xaTxAck
  5417  05A3                     _Mrf49xaTxAck:	
  5418                           
  5419                           ;incstack = 0
  5420                           ; Regs used in _Mrf49xaTxAck: [allreg]
  5421                           ;Mrf49xaTxAck@packet stored from wreg
  5422  05A3  00C1               	movwf	Mrf49xaTxAck@packet
  5423                           
  5424                           ;mrf49xa_packet.c: 16: packet->packet.data[0] = packet->packet.id;
  5425  05A4  3E06               	addlw	6
  5426  05A5  0086               	movwf	6
  5427  05A6  0187               	clrf	7
  5428  05A7  0841               	movf	Mrf49xaTxAck@packet,w
  5429  05A8  3E04               	addlw	4
  5430  05A9  0084               	movwf	4
  5431  05AA  0185               	clrf	5
  5432  05AB  0800               	movf	0,w
  5433  05AC  0081               	movwf	1
  5434                           
  5435                           ;mrf49xa_packet.c: 17: packet->packet.data[1] = packet->crc;
  5436  05AD  0841               	movf	Mrf49xaTxAck@packet,w
  5437  05AE  3E07               	addlw	7
  5438  05AF  0086               	movwf	6
  5439  05B0  0841               	movf	Mrf49xaTxAck@packet,w
  5440  05B1  3E16               	addlw	22
  5441  05B2  0084               	movwf	4
  5442  05B3  0800               	movf	0,w
  5443  05B4  0081               	movwf	1
  5444                           
  5445                           ;mrf49xa_packet.c: 20: packet->packet.id = RF_ACK;
  5446  05B5  0841               	movf	Mrf49xaTxAck@packet,w
  5447  05B6  3E04               	addlw	4
  5448  05B7  0086               	movwf	6
  5449  05B8  30A1               	movlw	161
  5450  05B9  0081               	movwf	1
  5451                           
  5452                           ;mrf49xa_packet.c: 21: packet->packet.size = 2;
  5453  05BA  0A41               	incf	Mrf49xaTxAck@packet,w
  5454  05BB  0086               	movwf	6
  5455  05BC  3002               	movlw	2
  5456  05BD  0081               	movwf	1
  5457                           
  5458                           ;mrf49xa_packet.c: 23: printf("[");
  5459  05BE  3082               	movlw	(STR_1| (0+32768))& (0+255)
  5460  05BF  2666  3185         	fcall	_printf
  5461                           
  5462                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  5463  05C1  01BB               	clrf	?_Mrf49xaTxPacket
  5464  05C2  0ABB               	incf	?_Mrf49xaTxPacket,f
  5465  05C3  01BC               	clrf	?_Mrf49xaTxPacket+1
  5466  05C4  0841               	movf	Mrf49xaTxAck@packet,w
  5467  05C5  25D7  3185         	fcall	_Mrf49xaTxPacket
  5468                           
  5469                           ;mrf49xa_packet.c: 25: printf("]RF Tx Ack %d %d\n", packet->packet.data[0], packet->pack
      +                          et.data[1]);
  5470  05C7  0020               	movlb	0	; select bank0
  5471  05C8  0841               	movf	Mrf49xaTxAck@packet,w
  5472  05C9  3E06               	addlw	6
  5473  05CA  0086               	movwf	6
  5474  05CB  0187               	clrf	7
  5475  05CC  0801               	movf	1,w
  5476  05CD  00AC               	movwf	?_printf
  5477  05CE  01AD               	clrf	?_printf+1
  5478  05CF  0841               	movf	Mrf49xaTxAck@packet,w
  5479  05D0  3E07               	addlw	7
  5480  05D1  0086               	movwf	6
  5481  05D2  0801               	movf	1,w
  5482  05D3  00AE               	movwf	?_printf+2
  5483  05D4  3068               	movlw	(STR_2| (0+32768))& (0+255)
  5484  05D5  01AF               	clrf	?_printf+3
  5485  05D6  2E66               	ljmp	_printf
  5486  05D7                     __end_of_Mrf49xaTxAck:	
  5487  05D7                     __ptext8:	
  5488 ;; *************** function _Mrf49xaTxPacket *****************
  5489 ;; Defined at:
  5490 ;;		line 29 in file "../../../src/devices/mrf49xa_packet.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5493 ;;		 -> NULL(0), rfTrcvStatus(79), 
  5494 ;;  response        1   27[BANK0 ] unsigned char 
  5495 ;;  needAck         1   28[BANK0 ] unsigned char 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;  packet          1   32[BANK0 ] PTR struct rfTrcvPacket_
  5498 ;;		 -> NULL(0), rfTrcvStatus(79), 
  5499 ;;  i               1   31[BANK0 ] unsigned char 
  5500 ;;  crc             1   30[BANK0 ] unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      unsigned char 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 1F/0
  5507 ;;		On exit  : 1E/0
  5508 ;;		Unchanged: FFFE0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5510 ;;      Params:         0       2       0       0
  5511 ;;      Locals:         0       3       0       0
  5512 ;;      Temps:          0       1       0       0
  5513 ;;      Totals:         0       6       0       0
  5514 ;;Total ram usage:        6 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    7
  5517 ;; This function calls:
  5518 ;;		_printf
  5519 ;; This function is called by:
  5520 ;;		_Mrf49xaTxAck
  5521 ;;		_RfSendPor
  5522 ;;		_HandlePacket
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _Mrf49xaTxPacket
  5528  05D7                     _Mrf49xaTxPacket:	
  5529                           
  5530                           ;incstack = 0
  5531                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5532                           ;Mrf49xaTxPacket@packet stored from wreg
  5533  05D7  00C0               	movwf	Mrf49xaTxPacket@packet
  5534  05D8  3001               	movlw	1
  5535                           
  5536                           ;mrf49xa_packet.c: 30: uint8_t i, crc = 0;
  5537  05D9  01BE               	clrf	Mrf49xaTxPacket@crc
  5538                           
  5539                           ;mrf49xa_packet.c: 32: if (&(rfTrcvStatus.txPacket) == packet)
  5540  05DA  3EA0               	addlw	_rfTrcvStatus& (0+255)
  5541  05DB  0640               	xorwf	Mrf49xaTxPacket@packet,w
  5542  05DC  1D03               	skipz
  5543  05DD  2E0A               	goto	l2380
  5544                           
  5545                           ;mrf49xa_packet.c: 33: {
  5546                           ;mrf49xa_packet.c: 34: printf("1");
  5547  05DE  307A               	movlw	(STR_3| (0+32768))& (0+255)
  5548  05DF  2666  3185         	fcall	_printf
  5549                           
  5550                           ;mrf49xa_packet.c: 35: if (response)
  5551  05E1  083B               	movf	Mrf49xaTxPacket@response,w
  5552  05E2  1903               	btfsc	3,2
  5553  05E3  2DEE               	goto	l2364
  5554                           
  5555                           ;mrf49xa_packet.c: 36: {
  5556                           ;mrf49xa_packet.c: 37: packet->packet.dst = packet->packet.src;
  5557  05E4  0840               	movf	Mrf49xaTxPacket@packet,w
  5558  05E5  3E03               	addlw	3
  5559  05E6  0086               	movwf	6
  5560  05E7  0187               	clrf	7
  5561  05E8  0840               	movf	Mrf49xaTxPacket@packet,w
  5562  05E9  3E02               	addlw	2
  5563  05EA  0084               	movwf	4
  5564  05EB  0185               	clrf	5
  5565  05EC  0800               	movf	0,w
  5566  05ED  0081               	movwf	1
  5567  05EE                     l2364:	
  5568                           
  5569                           ;mrf49xa_packet.c: 38: }
  5570                           ;mrf49xa_packet.c: 39: packet->packet.src = rfTrcvStatus.src;
  5571  05EE  0840               	movf	Mrf49xaTxPacket@packet,w
  5572  05EF  3E02               	addlw	2
  5573  05F0  0086               	movwf	6
  5574  05F1  0187               	clrf	7
  5575  05F2  0021               	movlb	1	; select bank1
  5576  05F3  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  5577  05F4  0081               	movwf	1
  5578                           
  5579                           ;mrf49xa_packet.c: 40: packet->packet.size += 5;
  5580  05F5  0020               	movlb	0	; select bank0
  5581  05F6  0A40               	incf	Mrf49xaTxPacket@packet,w
  5582  05F7  0086               	movwf	6
  5583  05F8  3005               	movlw	5
  5584  05F9  0781               	addwf	1,f
  5585                           
  5586                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  5587  05FA  0021               	movlb	1	; select bank1
  5588  05FB  30F0               	movlw	-16
  5589  05FC  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5590  05FD  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  5591                           
  5592                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.retry = 0;
  5593  05FE  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  5594                           
  5595                           ;mrf49xa_packet.c: 44: rfTrcvStatus.txPacket.retransmit = 0;
  5596  05FF  30CF               	movlw	-49
  5597  0600  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  5598                           
  5599                           ;mrf49xa_packet.c: 45: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  5600  0601  0020               	movlb	0	; select bank0
  5601  0602  033C               	decf	Mrf49xaTxPacket@needAck,w
  5602  0603  3000               	movlw	0
  5603  0604  1903               	skipnz
  5604  0605  3001               	movlw	1
  5605  0606  0021               	movlb	1	; select bank1
  5606  0607  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  5607                           
  5608                           ;mrf49xa_packet.c: 46: rfTrcvStatus.txPacket.crc = 0;
  5609  0608  01B7               	clrf	(_rfTrcvStatus^(0+128)+23)
  5610  0609  0008               	return
  5611  060A                     l2380:	
  5612                           
  5613                           ;mrf49xa_packet.c: 48: }
  5614                           ;mrf49xa_packet.c: 49: printf("2");
  5615  060A  307C               	movlw	(STR_4| (0+32768))& (0+255)
  5616  060B  2666  3185         	fcall	_printf
  5617                           
  5618                           ;mrf49xa_packet.c: 51: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  5619  060D  0021               	movlb	1	; select bank1
  5620  060E  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  5621  060F  1903               	btfsc	3,2
  5622  0610  2E13               	goto	l2390
  5623                           
  5624                           ;mrf49xa_packet.c: 52: {
  5625                           ;mrf49xa_packet.c: 53: printf("3");
  5626  0611  307E               	movlw	(STR_5| (0+32768))& (0+255)
  5627  0612  2E66               	ljmp	_printf
  5628  0613                     l2390:	
  5629                           
  5630                           ;mrf49xa_packet.c: 57: else
  5631                           ;mrf49xa_packet.c: 58: {
  5632                           ;mrf49xa_packet.c: 59: printf("4");
  5633  0613  3080               	movlw	(STR_6| (0+32768))& (0+255)
  5634  0614  2666  3185         	fcall	_printf
  5635                           
  5636                           ;mrf49xa_packet.c: 60: if (response)
  5637  0616  083B               	movf	Mrf49xaTxPacket@response,w
  5638  0617  1903               	btfsc	3,2
  5639  0618  2E23               	goto	l2396
  5640                           
  5641                           ;mrf49xa_packet.c: 61: {
  5642                           ;mrf49xa_packet.c: 62: packet->packet.dst = packet->packet.src;
  5643  0619  0840               	movf	Mrf49xaTxPacket@packet,w
  5644  061A  3E03               	addlw	3
  5645  061B  0086               	movwf	6
  5646  061C  0187               	clrf	7
  5647  061D  0840               	movf	Mrf49xaTxPacket@packet,w
  5648  061E  3E02               	addlw	2
  5649  061F  0084               	movwf	4
  5650  0620  0185               	clrf	5
  5651  0621  0800               	movf	0,w
  5652  0622  0081               	movwf	1
  5653  0623                     l2396:	
  5654                           
  5655                           ;mrf49xa_packet.c: 63: }
  5656                           ;mrf49xa_packet.c: 64: packet->packet.src = rfTrcvStatus.src;
  5657  0623  0840               	movf	Mrf49xaTxPacket@packet,w
  5658  0624  3E02               	addlw	2
  5659  0625  0086               	movwf	6
  5660  0626  0187               	clrf	7
  5661  0627  0021               	movlb	1	; select bank1
  5662  0628  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  5663  0629  0081               	movwf	1
  5664                           
  5665                           ;mrf49xa_packet.c: 65: packet->packet.size += 5;
  5666  062A  0020               	movlb	0	; select bank0
  5667  062B  0A40               	incf	Mrf49xaTxPacket@packet,w
  5668  062C  0086               	movwf	6
  5669  062D  3005               	movlw	5
  5670  062E  0781               	addwf	1,f
  5671                           
  5672                           ;mrf49xa_packet.c: 67: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  5673  062F  0021               	movlb	1	; select bank1
  5674  0630  30F0               	movlw	-16
  5675  0631  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5676  0632  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  5677                           
  5678                           ;mrf49xa_packet.c: 68: rfTrcvStatus.txPacket.retry = 0;
  5679  0633  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  5680                           
  5681                           ;mrf49xa_packet.c: 69: rfTrcvStatus.txPacket.retransmit = 0;
  5682  0634  30CF               	movlw	-49
  5683  0635  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  5684                           
  5685                           ;mrf49xa_packet.c: 70: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  5686  0636  0020               	movlb	0	; select bank0
  5687  0637  033C               	decf	Mrf49xaTxPacket@needAck,w
  5688  0638  3000               	movlw	0
  5689  0639  1903               	skipnz
  5690  063A  3001               	movlw	1
  5691  063B  0021               	movlb	1	; select bank1
  5692  063C  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  5693                           
  5694                           ;mrf49xa_packet.c: 72: packet->state = PKT_FREE;
  5695  063D  0020               	movlb	0	; select bank0
  5696  063E  0840               	movf	Mrf49xaTxPacket@packet,w
  5697  063F  0086               	movwf	6
  5698  0640  0181               	clrf	1
  5699                           
  5700                           ;mrf49xa_packet.c: 75: for (i = 0; i < (16 + 5); i++)
  5701  0641  01BF               	clrf	Mrf49xaTxPacket@i
  5702  0642                     l2416:	
  5703                           
  5704                           ;mrf49xa_packet.c: 76: {
  5705                           ;mrf49xa_packet.c: 77: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  5706  0642  083F               	movf	Mrf49xaTxPacket@i,w
  5707  0643  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5708  0644  0086               	movwf	6
  5709  0645  0187               	clrf	7
  5710  0646  083F               	movf	Mrf49xaTxPacket@i,w
  5711  0647  0740               	addwf	Mrf49xaTxPacket@packet,w
  5712  0648  00BD               	movwf	??_Mrf49xaTxPacket
  5713  0649  0A3D               	incf	??_Mrf49xaTxPacket,w
  5714  064A  0084               	movwf	4
  5715  064B  0185               	clrf	5
  5716  064C  0800               	movf	0,w
  5717  064D  0081               	movwf	1
  5718  064E  3015               	movlw	21
  5719  064F  0ABF               	incf	Mrf49xaTxPacket@i,f
  5720  0650  023F               	subwf	Mrf49xaTxPacket@i,w
  5721  0651  1C03               	skipc
  5722  0652  2E42               	goto	l2416
  5723                           
  5724                           ;mrf49xa_packet.c: 78: }
  5725                           ;mrf49xa_packet.c: 79: for (i = 0; i < packet->packet.size; i++)
  5726  0653  01BF               	clrf	Mrf49xaTxPacket@i
  5727  0654                     l327:	
  5728  0654  0A40               	incf	Mrf49xaTxPacket@packet,w
  5729  0655  0086               	movwf	6
  5730  0656  0187               	clrf	7
  5731  0657  0801               	movf	1,w
  5732  0658  023F               	subwf	Mrf49xaTxPacket@i,w
  5733  0659  1803               	btfsc	3,0
  5734  065A  2E62               	goto	l2428
  5735                           
  5736                           ;mrf49xa_packet.c: 80: {
  5737                           ;mrf49xa_packet.c: 81: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  5738  065B  083F               	movf	Mrf49xaTxPacket@i,w
  5739  065C  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5740  065D  0086               	movwf	6
  5741  065E  0801               	movf	1,w
  5742  065F  06BE               	xorwf	Mrf49xaTxPacket@crc,f
  5743  0660  0ABF               	incf	Mrf49xaTxPacket@i,f
  5744  0661  2E54               	goto	l327
  5745  0662                     l2428:	
  5746                           
  5747                           ;mrf49xa_packet.c: 82: }
  5748                           ;mrf49xa_packet.c: 84: rfTrcvStatus.txPacket.crc = crc;
  5749  0662  083E               	movf	Mrf49xaTxPacket@crc,w
  5750  0663  0021               	movlb	1	; select bank1
  5751  0664  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  5752  0665  0008               	return
  5753  0666                     __end_of_Mrf49xaTxPacket:	
  5754  0666                     __ptext9:	
  5755 ;; *************** function _printf *****************
  5756 ;; Defined at:
  5757 ;;		line 465 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\doprnt.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  f               1    wreg     PTR const unsigned char 
  5760 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  5761 ;;		 -> STR_2(18), STR_1(2), 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  f               1   20[BANK0 ] PTR const unsigned char 
  5764 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  5765 ;;		 -> STR_2(18), STR_1(2), 
  5766 ;;  _val            4   22[BANK0 ] struct .
  5767 ;;  c               1   26[BANK0 ] char 
  5768 ;;  prec            1   21[BANK0 ] char 
  5769 ;;  flag            1   19[BANK0 ] unsigned char 
  5770 ;;  ap              1   18[BANK0 ] PTR void [1]
  5771 ;;		 -> ?_printf(2), 
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  2   12[BANK0 ] int 
  5774 ;; Registers used:
  5775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 1E/0
  5778 ;;		On exit  : 1F/0
  5779 ;;		Unchanged: FFFE0/0
  5780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5781 ;;      Params:         0       4       0       0
  5782 ;;      Locals:         0       9       0       0
  5783 ;;      Temps:          0       2       0       0
  5784 ;;      Totals:         0      15       0       0
  5785 ;;Total ram usage:       15 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    6
  5788 ;; This function calls:
  5789 ;;		_putch
  5790 ;;		___lwdiv
  5791 ;;		___lwmod
  5792 ;; This function is called by:
  5793 ;;		_Mrf49xaTxAck
  5794 ;;		_Mrf49xaTxPacket
  5795 ;; This function uses a non-reentrant model
  5796 ;;
  5797                           
  5798                           
  5799                           ;psect for function _printf
  5800  0666                     _printf:	
  5801                           
  5802                           ;incstack = 0
  5803                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5804                           ;printf@f stored from wreg
  5805  0666  0020               	movlb	0	; select bank0
  5806  0667  00B4               	movwf	printf@f
  5807                           
  5808                           ;doprnt.c: 466: va_list ap;
  5809                           ;doprnt.c: 499: signed char c;
  5810                           ;doprnt.c: 506: signed char prec;
  5811                           ;doprnt.c: 508: unsigned char flag;
  5812                           ;doprnt.c: 527: union {
  5813                           ;doprnt.c: 528: unsigned int _val;
  5814                           ;doprnt.c: 529: struct {
  5815                           ;doprnt.c: 530: const char * _cp;
  5816                           ;doprnt.c: 531: unsigned _len;
  5817                           ;doprnt.c: 532: } _str;
  5818                           ;doprnt.c: 533: } _val;
  5819                           ;doprnt.c: 542: *ap = __va_start();
  5820  0668  302C               	movlw	?_printf& (0+255)
  5821  0669  00B2               	movwf	printf@ap
  5822  066A                     l2352:	
  5823                           ;doprnt.c: 545: while(c = *f++) {
  5824                           
  5825  066A  0834               	movf	printf@f,w
  5826  066B  0AB4               	incf	printf@f,f
  5827  066C  3187               	movlp	high __stringtab
  5828  066D  000A               	callw
  5829  066E  3185               	pagesel	$	;select current page
  5830  066F  00BA               	movwf	printf@c
  5831  0670  08BA               	movf	printf@c,f
  5832  0671  1903               	btfsc	3,2
  5833  0672  0008               	return
  5834                           
  5835                           ;doprnt.c: 547: if(c != '%')
  5836  0673  3A25               	xorlw	37
  5837  0674  1903               	skipnz
  5838  0675  2E7A               	goto	l2312
  5839                           
  5840                           ;doprnt.c: 549: {
  5841                           ;doprnt.c: 550: (putch(c) );
  5842  0676  083A               	movf	printf@c,w
  5843  0677  26E0  3185         	fcall	_putch
  5844                           
  5845                           ;doprnt.c: 551: continue;
  5846  0679  2E6A               	goto	l2352
  5847  067A                     l2312:	
  5848                           
  5849                           ;doprnt.c: 552: }
  5850                           ;doprnt.c: 557: flag = 0;
  5851  067A  01B3               	clrf	printf@flag
  5852                           
  5853                           ;doprnt.c: 644: switch(c = *f++) {
  5854  067B  0834               	movf	printf@f,w
  5855  067C  0AB4               	incf	printf@f,f
  5856  067D  3187               	movlp	high __stringtab
  5857  067E  000A               	callw
  5858  067F  3185               	pagesel	$	;select current page
  5859  0680  00BA               	movwf	printf@c
  5860                           
  5861                           ; Switch size 1, requested type "speed"
  5862                           ; Number of cases is 3, Range of values is 0 to 105
  5863                           ; switch strategies available:
  5864                           ; Name         Instructions Cycles
  5865                           ; simple_byte           10     6 (average)
  5866                           ; direct_byte          218     6 (fixed)
  5867                           ; jumptable            260     6 (fixed)
  5868                           ; rangetable           110     4 (fixed)
  5869                           ; spacedrange          217     6 (fixed)
  5870                           ; locatedrange         106     3 (fixed)
  5871                           ;	Chosen strategy is simple_byte
  5872  0681  3A00               	xorlw	0	; case 0
  5873  0682  1903               	skipnz
  5874  0683  2EDF               	goto	l514
  5875  0684  3A64               	xorlw	100	; case 100
  5876  0685  1903               	skipnz
  5877  0686  2E8B               	goto	l2318
  5878  0687  3A0D               	xorlw	13	; case 105
  5879  0688  1903               	skipnz
  5880  0689  2E8B               	goto	l2318
  5881  068A  2E6A               	goto	l2352
  5882  068B                     l2318:	
  5883                           
  5884                           ;doprnt.c: 1260: {
  5885                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5886  068B  0832               	movf	printf@ap,w
  5887  068C  0086               	movwf	6
  5888  068D  0187               	clrf	7
  5889  068E  3F40               	moviw [0]fsr1
  5890  068F  00B6               	movwf	printf@_val
  5891  0690  3F41               	moviw [1]fsr1
  5892  0691  00B7               	movwf	printf@_val+1
  5893  0692  0AB2               	incf	printf@ap,f
  5894  0693  0AB2               	incf	printf@ap,f
  5895                           
  5896                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  5897  0694  1FB7               	btfss	printf@_val+1,7
  5898  0695  2E9D               	goto	l2328
  5899                           
  5900                           ;doprnt.c: 1269: flag |= 0x03;
  5901  0696  3003               	movlw	3
  5902  0697  04B3               	iorwf	printf@flag,f
  5903                           
  5904                           ;doprnt.c: 1270: _val._val = -_val._val;
  5905  0698  09B6               	comf	printf@_val,f
  5906  0699  09B7               	comf	printf@_val+1,f
  5907  069A  0AB6               	incf	printf@_val,f
  5908  069B  1903               	skipnz
  5909  069C  0AB7               	incf	printf@_val+1,f
  5910  069D                     l2328:	
  5911                           
  5912                           ;doprnt.c: 1271: }
  5913                           ;doprnt.c: 1273: }
  5914                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5915  069D  01BA               	clrf	printf@c
  5916  069E  0ABA               	incf	printf@c,f
  5917  069F                     l2332:	
  5918                           
  5919                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  5920  069F  353A               	lslf	printf@c,w
  5921  06A0  3E27               	addlw	low (_dpowers| (0+32768))
  5922  06A1  0084               	movwf	4
  5923  06A2  3087               	movlw	high (_dpowers| (0+32768))
  5924  06A3  0085               	movwf	5
  5925  06A4  3F00               	moviw [0]fsr0
  5926  06A5  00B0               	movwf	??_printf
  5927  06A6  3F01               	moviw [1]fsr0
  5928  06A7  00B1               	movwf	??_printf+1
  5929  06A8  0237               	subwf	printf@_val+1,w
  5930  06A9  1D03               	skipz
  5931  06AA  2EAD               	goto	u1855
  5932  06AB  0830               	movf	??_printf,w
  5933  06AC  0236               	subwf	printf@_val,w
  5934  06AD                     u1855:	
  5935  06AD  1C03               	btfss	3,0
  5936  06AE  2EB4               	goto	l2340
  5937  06AF  0ABA               	incf	printf@c,f
  5938  06B0  083A               	movf	printf@c,w
  5939  06B1  3A05               	xorlw	5
  5940  06B2  1D03               	skipz
  5941  06B3  2E9F               	goto	l2332
  5942  06B4                     l2340:	
  5943                           
  5944                           ;doprnt.c: 1429: {
  5945                           ;doprnt.c: 1445: if(flag & 0x03)
  5946  06B4  0833               	movf	printf@flag,w
  5947  06B5  3903               	andlw	3
  5948  06B6  1903               	btfsc	3,2
  5949  06B7  2EBB               	goto	l2344
  5950                           
  5951                           ;doprnt.c: 1446: (putch('-') );
  5952  06B8  302D               	movlw	45
  5953  06B9  26E0  3185         	fcall	_putch
  5954  06BB                     l2344:	
  5955                           
  5956                           ;doprnt.c: 1476: }
  5957                           ;doprnt.c: 1479: prec = c;
  5958  06BB  083A               	movf	printf@c,w
  5959  06BC  00B5               	movwf	printf@prec
  5960                           
  5961                           ;doprnt.c: 1481: while(prec--) {
  5962  06BD  2EDB               	goto	l2350
  5963  06BE                     l2346:	
  5964                           
  5965                           ;doprnt.c: 1485: {
  5966                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  5967  06BE  300A               	movlw	10
  5968  06BF  00A7               	movwf	?___lwmod
  5969  06C0  01A8               	clrf	?___lwmod+1
  5970  06C1  3535               	lslf	printf@prec,w
  5971  06C2  3E27               	addlw	low (_dpowers| (0+32768))
  5972  06C3  0084               	movwf	4
  5973  06C4  3087               	movlw	high (_dpowers| (0+32768))
  5974  06C5  0085               	movwf	5
  5975  06C6  3F00               	moviw [0]fsr0
  5976  06C7  00A0               	movwf	?___lwdiv
  5977  06C8  3F01               	moviw [1]fsr0
  5978  06C9  00A1               	movwf	?___lwdiv+1
  5979  06CA  0837               	movf	printf@_val+1,w
  5980  06CB  00A3               	movwf	?___lwdiv+3
  5981  06CC  0836               	movf	printf@_val,w
  5982  06CD  00A2               	movwf	?___lwdiv+2
  5983  06CE  26E1  3185         	fcall	___lwdiv
  5984  06D0  0821               	movf	?___lwdiv+1,w
  5985  06D1  00AA               	movwf	?___lwmod+3
  5986  06D2  0820               	movf	?___lwdiv,w
  5987  06D3  00A9               	movwf	?___lwmod+2
  5988  06D4  2706  3185         	fcall	___lwmod
  5989  06D6  0827               	movf	?___lwmod,w
  5990  06D7  3E30               	addlw	48
  5991  06D8  00BA               	movwf	printf@c
  5992                           
  5993                           ;doprnt.c: 1530: }
  5994                           ;doprnt.c: 1531: (putch(c) );
  5995  06D9  26E0  3185         	fcall	_putch
  5996  06DB                     l2350:	
  5997  06DB  03B5               	decf	printf@prec,f
  5998  06DC  0F35               	incfsz	printf@prec,w
  5999  06DD  2EBE               	goto	l2346
  6000  06DE  2E6A               	goto	l2352
  6001  06DF                     l514:	
  6002  06DF  0008               	return
  6003  06E0                     __end_of_printf:	
  6004  06E0                     __ptext12:	
  6005 ;; *************** function _putch *****************
  6006 ;; Defined at:
  6007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\common\putch.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  c               1    wreg     unsigned char 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  c               1    0[COMMON] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;		None               void
  6014 ;; Registers used:
  6015 ;;		wreg
  6016 ;; Tracked objects:
  6017 ;;		On entry : 1F/0
  6018 ;;		On exit  : 1F/0
  6019 ;;		Unchanged: FFFFFFE0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6021 ;;      Params:         0       0       0       0
  6022 ;;      Locals:         0       0       0       0
  6023 ;;      Temps:          0       0       0       0
  6024 ;;      Totals:         0       0       0       0
  6025 ;;Total ram usage:        0 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    5
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_printf
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _putch
  6037  06E0                     _putch:	
  6038                           
  6039                           ;incstack = 0
  6040                           ; Regs used in _putch: [wreg]
  6041  06E0  0008               	return
  6042  06E1                     __end_of_putch:	
  6043  06E1                     __ptext11:	
  6044 ;; *************** function ___lwdiv *****************
  6045 ;; Defined at:
  6046 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwdiv.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  divisor         2    0[BANK0 ] unsigned int 
  6049 ;;  dividend        2    2[BANK0 ] unsigned int 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  quotient        2    4[BANK0 ] unsigned int 
  6052 ;;  counter         1    6[BANK0 ] unsigned char 
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  2    0[BANK0 ] unsigned int 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0
  6057 ;; Tracked objects:
  6058 ;;		On entry : 1F/0
  6059 ;;		On exit  : 1F/0
  6060 ;;		Unchanged: FFFE0/0
  6061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6062 ;;      Params:         0       4       0       0
  6063 ;;      Locals:         0       3       0       0
  6064 ;;      Temps:          0       0       0       0
  6065 ;;      Totals:         0       7       0       0
  6066 ;;Total ram usage:        7 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    5
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_printf
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           
  6077                           ;psect for function ___lwdiv
  6078  06E1                     ___lwdiv:	
  6079                           
  6080                           ;incstack = 0
  6081                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6082  06E1  01A4               	clrf	___lwdiv@quotient
  6083  06E2  01A5               	clrf	___lwdiv@quotient+1
  6084  06E3  0821               	movf	___lwdiv@divisor+1,w
  6085  06E4  0420               	iorwf	___lwdiv@divisor,w
  6086  06E5  1903               	skipnz
  6087  06E6  2F01               	goto	l2612
  6088  06E7  01A6               	clrf	___lwdiv@counter
  6089  06E8                     L2:	
  6090  06E8  0AA6               	incf	___lwdiv@counter,f
  6091  06E9  1BA1               	btfsc	___lwdiv@divisor+1,7
  6092  06EA  2EEE               	goto	l2600
  6093  06EB  35A0               	lslf	___lwdiv@divisor,f
  6094  06EC  0DA1               	rlf	___lwdiv@divisor+1,f
  6095  06ED  2EE8               	goto	L2
  6096  06EE                     l2600:	
  6097  06EE  35A4               	lslf	___lwdiv@quotient,f
  6098  06EF  0DA5               	rlf	___lwdiv@quotient+1,f
  6099  06F0  0821               	movf	___lwdiv@divisor+1,w
  6100  06F1  0223               	subwf	___lwdiv@dividend+1,w
  6101  06F2  1D03               	skipz
  6102  06F3  2EF6               	goto	u2195
  6103  06F4  0820               	movf	___lwdiv@divisor,w
  6104  06F5  0222               	subwf	___lwdiv@dividend,w
  6105  06F6                     u2195:	
  6106  06F6  1C03               	skipc
  6107  06F7  2EFD               	goto	l2608
  6108  06F8  0820               	movf	___lwdiv@divisor,w
  6109  06F9  02A2               	subwf	___lwdiv@dividend,f
  6110  06FA  0821               	movf	___lwdiv@divisor+1,w
  6111  06FB  3BA3               	subwfb	___lwdiv@dividend+1,f
  6112  06FC  1424               	bsf	___lwdiv@quotient,0
  6113  06FD                     l2608:	
  6114  06FD  36A1               	lsrf	___lwdiv@divisor+1,f
  6115  06FE  0CA0               	rrf	___lwdiv@divisor,f
  6116  06FF  0BA6               	decfsz	___lwdiv@counter,f
  6117  0700  2EEE               	goto	l2600
  6118  0701                     l2612:	
  6119  0701  0825               	movf	___lwdiv@quotient+1,w
  6120  0702  00A1               	movwf	?___lwdiv+1
  6121  0703  0824               	movf	___lwdiv@quotient,w
  6122  0704  00A0               	movwf	?___lwdiv
  6123  0705  0008               	return
  6124  0706                     __end_of___lwdiv:	
  6125  0706                     __ptext10:	
  6126 ;; *************** function ___lwmod *****************
  6127 ;; Defined at:
  6128 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.20\sources\pic\lwmod.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;  divisor         2    7[BANK0 ] unsigned int 
  6131 ;;  dividend        2    9[BANK0 ] unsigned int 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  counter         1   11[BANK0 ] unsigned char 
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  2    7[BANK0 ] unsigned int 
  6136 ;; Registers used:
  6137 ;;		wreg, status,2, status,0
  6138 ;; Tracked objects:
  6139 ;;		On entry : 1F/0
  6140 ;;		On exit  : 1F/0
  6141 ;;		Unchanged: FFFE0/0
  6142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6143 ;;      Params:         0       4       0       0
  6144 ;;      Locals:         0       1       0       0
  6145 ;;      Temps:          0       0       0       0
  6146 ;;      Totals:         0       5       0       0
  6147 ;;Total ram usage:        5 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    5
  6150 ;; This function calls:
  6151 ;;		Nothing
  6152 ;; This function is called by:
  6153 ;;		_printf
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           
  6158                           ;psect for function ___lwmod
  6159  0706                     ___lwmod:	
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6163  0706  0828               	movf	___lwmod@divisor+1,w
  6164  0707  0427               	iorwf	___lwmod@divisor,w
  6165  0708  1903               	skipnz
  6166  0709  2F21               	goto	l2632
  6167  070A  01AB               	clrf	___lwmod@counter
  6168  070B                     L1:	
  6169  070B  0AAB               	incf	___lwmod@counter,f
  6170  070C  1BA8               	btfsc	___lwmod@divisor+1,7
  6171  070D  2F11               	goto	l2624
  6172  070E  35A7               	lslf	___lwmod@divisor,f
  6173  070F  0DA8               	rlf	___lwmod@divisor+1,f
  6174  0710  2F0B               	goto	L1
  6175  0711                     l2624:	
  6176  0711  0828               	movf	___lwmod@divisor+1,w
  6177  0712  022A               	subwf	___lwmod@dividend+1,w
  6178  0713  1D03               	skipz
  6179  0714  2F17               	goto	u2235
  6180  0715  0827               	movf	___lwmod@divisor,w
  6181  0716  0229               	subwf	___lwmod@dividend,w
  6182  0717                     u2235:	
  6183  0717  1C03               	skipc
  6184  0718  2F1D               	goto	l2628
  6185  0719  0827               	movf	___lwmod@divisor,w
  6186  071A  02A9               	subwf	___lwmod@dividend,f
  6187  071B  0828               	movf	___lwmod@divisor+1,w
  6188  071C  3BAA               	subwfb	___lwmod@dividend+1,f
  6189  071D                     l2628:	
  6190  071D  36A8               	lsrf	___lwmod@divisor+1,f
  6191  071E  0CA7               	rrf	___lwmod@divisor,f
  6192  071F  0BAB               	decfsz	___lwmod@counter,f
  6193  0720  2F11               	goto	l2624
  6194  0721                     l2632:	
  6195  0721  082A               	movf	___lwmod@dividend+1,w
  6196  0722  00A8               	movwf	?___lwmod+1
  6197  0723  0829               	movf	___lwmod@dividend,w
  6198  0724  00A7               	movwf	?___lwmod
  6199  0725  0008               	return
  6200  0726                     __end_of___lwmod:	
  6201                           
  6202                           	psect	intentry
  6203  0004                     __pintentry:	
  6204 ;; *************** function _extInt *****************
  6205 ;; Defined at:
  6206 ;;		line 32 in file "../../../src/bsp/pic16/interrupt.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;		None
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;		None
  6211 ;; Return value:  Size  Location     Type
  6212 ;;		None               void
  6213 ;; Registers used:
  6214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 1F/0
  6218 ;;		Unchanged: FFE00/0
  6219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6220 ;;      Params:         0       0       0       0
  6221 ;;      Locals:         0       0       0       0
  6222 ;;      Temps:          1       0       0       0
  6223 ;;      Totals:         1       0       0       0
  6224 ;;Total ram usage:        1 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    4
  6227 ;; This function calls:
  6228 ;;		i1_Mrf49xaServe
  6229 ;; This function is called by:
  6230 ;;		Interrupt level 1
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234  0004                     _extInt:	
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6238  0004  3180               	pagesel	$
  6239  0005  0020               	movlb	0	; select bank0
  6240  0006  087F               	movf	127,w
  6241  0007  00F6               	movwf	??_extInt
  6242                           
  6243                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  6244  0008  1C8B               	btfss	11,1	;volatile
  6245  0009  2811               	goto	i1l131
  6246                           
  6247                           ;interrupt.c: 34: {
  6248                           ;interrupt.c: 35: if (Mrf49xaServe())
  6249  000A  3183  23FE  3180   	fcall	i1_Mrf49xaServe
  6250  000D  3A00               	xorlw	0
  6251  000E  1903               	skipnz
  6252  000F  2811               	goto	i1l131
  6253                           
  6254                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  6255  0010  108B               	bcf	11,1	;volatile
  6256  0011                     i1l131:	
  6257  0011  0876               	movf	??_extInt,w
  6258  0012  00FF               	movwf	127
  6259  0013  0009               	retfie
  6260  0014                     __end_of_extInt:	
  6261                           
  6262                           	psect	text32
  6263  03F4                     __ptext32:	
  6264 ;; *************** function i1_Mrf49RxCmd *****************
  6265 ;; Defined at:
  6266 ;;		line 19 in file "../../../src/devices/mrf49xa_cmd.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  Mrf49RxCmd      1    wreg     unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  Mrf49RxCmd      1    1[COMMON] unsigned char 
  6271 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  1    wreg      unsigned char 
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0, pclath, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 1C/1
  6278 ;;		On exit  : 1F/2
  6279 ;;		Unchanged: FFE00/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6281 ;;      Params:         0       0       0       0
  6282 ;;      Locals:         2       0       0       0
  6283 ;;      Temps:          0       0       0       0
  6284 ;;      Totals:         2       0       0       0
  6285 ;;Total ram usage:        2 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    1
  6288 ;; This function calls:
  6289 ;;		i1_Mrf49SpiTx
  6290 ;;		i1_Mrf49SpiRx
  6291 ;; This function is called by:
  6292 ;;		i1_Mrf49RxByte
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function i1_Mrf49RxCmd
  6298  03F4                     i1_Mrf49RxCmd:	
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  6302                           ;i1Mrf49RxCmd@cmd stored from wreg
  6303  03F4  00F1               	movwf	i1Mrf49RxCmd@cmd
  6304                           
  6305                           ;mrf49xa_cmd.c: 20: LATCbits.LATC6 = 0;;
  6306  03F5  0022               	movlb	2	; select bank2
  6307  03F6  130E               	bcf	14,6	;volatile
  6308                           
  6309                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  6310  03F7  0871               	movf	i1Mrf49RxCmd@cmd,w
  6311  03F8  2505  3183         	fcall	i1_Mrf49SpiTx
  6312                           
  6313                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  6314  03FA  255E               	fcall	i1_Mrf49SpiRx
  6315  03FB  00F2               	movwf	i1Mrf49RxCmd@val
  6316                           
  6317                           ;mrf49xa_cmd.c: 25: LATCbits.LATC6 = 1;;
  6318  03FC  170E               	bsf	14,6	;volatile
  6319                           
  6320                           ;mrf49xa_cmd.c: 27: return val;
  6321  03FD  0008               	return
  6322  03FE                     __end_ofi1_Mrf49RxCmd:	
  6323  03FE                     __ptext29:	
  6324 ;; *************** function i1_Mrf49xaServe *****************
  6325 ;; Defined at:
  6326 ;;		line 9 in file "../../../src/devices/mrf49xa_data.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      unsigned char 
  6333 ;; Registers used:
  6334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 1F/0
  6337 ;;		On exit  : 1F/0
  6338 ;;		Unchanged: FFE00/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6340 ;;      Params:         0       0       0       0
  6341 ;;      Locals:         1       0       0       0
  6342 ;;      Temps:          1       0       0       0
  6343 ;;      Totals:         2       0       0       0
  6344 ;;Total ram usage:        2 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    3
  6347 ;; This function calls:
  6348 ;;		i1_Mrf49xaModeRx
  6349 ;;		i1_Mrf49RxSts
  6350 ;;		i1_Mrf49RxByte
  6351 ;;		i1_Mrf49TxByte
  6352 ;; This function is called by:
  6353 ;;		_extInt
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           
  6358                           ;psect for function i1_Mrf49xaServe
  6359  03FE                     i1_Mrf49xaServe:	
  6360                           
  6361                           ;mrf49xa_data.c: 10: uint8_t data;
  6362                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  6363                           
  6364                           ;incstack = 0
  6365                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6366  03FE  2550  3183         	fcall	i1_Mrf49RxSts
  6367                           
  6368                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6369  0400  0020               	movlb	0	; select bank0
  6370  0401  084A               	movf	_mrf49Status,w
  6371  0402  3AFF               	xorlw	255
  6372  0403  1D03               	skipz
  6373  0404  2C09               	goto	i1l384
  6374  0405  084B               	movf	_mrf49Status+1,w
  6375  0406  3AFF               	xorlw	255
  6376  0407  1903               	btfsc	3,2
  6377                           
  6378                           ;mrf49xa_data.c: 19: return 0;
  6379  0408  3400               	retlw	0
  6380  0409                     i1l384:	
  6381                           ;mrf49xa_data.c: 23: {
  6382                           
  6383                           
  6384                           ;mrf49xa_data.c: 25: }
  6385                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  6386  0409  1ACA               	btfsc	_mrf49Status,5
  6387  040A  2C15               	goto	i1l2758
  6388  040B  2C21               	goto	i1l385
  6389  040C                     i1l2754:	
  6390                           
  6391                           ;mrf49xa_data.c: 33: case RECV_DATA:
  6392                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  6393  040C  24F8  3183         	fcall	i1_Mrf49RxByte
  6394  040E  00F5               	movwf	i1Mrf49xaServe@data
  6395                           
  6396                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  6397  040F  24F8  3183         	fcall	i1_Mrf49RxByte
  6398  0411  00F5               	movwf	i1Mrf49xaServe@data
  6399                           
  6400                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  6401  0412  24D0  3183         	fcall	i1_Mrf49xaModeRx
  6402                           
  6403                           ;mrf49xa_data.c: 44: break;
  6404  0414  2C21               	goto	i1l385
  6405  0415                     i1l2758:	
  6406  0415  0021               	movlb	1	; select bank1
  6407  0416  0820               	movf	_rfTrcvStatus^(0+128),w
  6408                           
  6409                           ; Switch size 1, requested type "speed"
  6410                           ; Number of cases is 3, Range of values is 0 to 2
  6411                           ; switch strategies available:
  6412                           ; Name         Instructions Cycles
  6413                           ; simple_byte           10     6 (average)
  6414                           ; direct_byte           12     6 (fixed)
  6415                           ; jumptable            260     6 (fixed)
  6416                           ; rangetable             7     4 (fixed)
  6417                           ; spacedrange           11     6 (fixed)
  6418                           ; locatedrange           3     3 (fixed)
  6419                           ;	Chosen strategy is simple_byte
  6420  0417  3A00               	xorlw	0	; case 0
  6421  0418  1903               	skipnz
  6422  0419  2C0C               	goto	i1l2754
  6423  041A  3A01               	xorlw	1	; case 1
  6424  041B  1903               	skipnz
  6425  041C  2C0C               	goto	i1l2754
  6426  041D  3A03               	xorlw	3	; case 2
  6427  041E  1903               	skipnz
  6428  041F  2C21               	goto	i1l385
  6429  0420  2C21               	goto	i1l385
  6430  0421                     i1l385:	
  6431                           
  6432                           ;mrf49xa_data.c: 52: }
  6433                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6434  0421  0020               	movlb	0	; select bank0
  6435  0422  1BCA               	btfsc	_mrf49Status,7
  6436  0423  2CBA               	goto	i1l2844
  6437  0424  2CC6               	goto	i1l2846
  6438  0425                     i1l2762:	
  6439                           
  6440                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  6441  0425  24F8  3183         	fcall	i1_Mrf49RxByte
  6442  0427  00F5               	movwf	i1Mrf49xaServe@data
  6443                           
  6444                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6445  0428  0020               	movlb	0	; select bank0
  6446  0429  1BCB               	btfsc	_mrf49Status+1,7
  6447  042A  2C2E               	goto	i1l2768
  6448  042B                     i1l2766:	
  6449                           
  6450                           ;mrf49xa_data.c: 72: {
  6451                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  6452  042B  24D0  3183         	fcall	i1_Mrf49xaModeRx
  6453                           
  6454                           ;mrf49xa_data.c: 74: break;
  6455  042D  2CC6               	goto	i1l2846
  6456  042E                     i1l2768:	
  6457                           
  6458                           ;mrf49xa_data.c: 75: }
  6459                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  6460  042E  0021               	movlb	1	; select bank1
  6461  042F  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  6462  0430  1D03               	skipz
  6463  0431  2C34               	goto	i1l2772
  6464  0432  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  6465  0433  2C38               	goto	L5
  6466  0434                     i1l2772:	
  6467                           
  6468                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  6469  0434  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  6470  0435  1D03               	skipz
  6471  0436  2C2B               	goto	i1l2766
  6472  0437  30D3               	movlw	(_rfTrcvStatus+51)& (0+255)
  6473  0438                     L5:	
  6474  0438  00EC               	movwf	(_rfTrcvStatus+76)^(0+128)
  6475                           
  6476                           ;mrf49xa_data.c: 85: }
  6477                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  6478  0439  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  6479  043A  0086               	movwf	6
  6480  043B  0187               	clrf	7
  6481  043C  0875               	movf	i1Mrf49xaServe@data,w
  6482  043D  0081               	movwf	1
  6483                           
  6484                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  6485  043E  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  6486  043F  3E16               	addlw	22
  6487  0440  0086               	movwf	6
  6488  0441  0181               	clrf	1
  6489                           
  6490                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  6491  0442  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  6492  0443  0086               	movwf	6
  6493  0444  3003               	movlw	3
  6494  0445  0081               	movwf	1
  6495                           
  6496                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  6497  0446  01A0               	clrf	_rfTrcvStatus^(0+128)
  6498  0447  0AA0               	incf	_rfTrcvStatus^(0+128),f
  6499                           
  6500                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  6501  0448  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  6502  0449  2C76               	goto	i1l2808
  6503  044A                     i1l2788:	
  6504                           ;mrf49xa_data.c: 93: break;
  6505                           
  6506                           
  6507                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  6508  044A  24F8  3183         	fcall	i1_Mrf49RxByte
  6509  044C  00F5               	movwf	i1Mrf49xaServe@data
  6510                           
  6511                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6512  044D  0020               	movlb	0	; select bank0
  6513  044E  1BCB               	btfsc	_mrf49Status+1,7
  6514  044F  2C57               	goto	i1l2796
  6515                           
  6516                           ;mrf49xa_data.c: 102: {
  6517                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6518  0450  0021               	movlb	1	; select bank1
  6519  0451  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  6520  0452  0086               	movwf	6
  6521  0453  3004               	movlw	4
  6522  0454  0187               	clrf	7
  6523  0455  0081               	movwf	1
  6524  0456  2C2B               	goto	i1l2766
  6525  0457                     i1l2796:	
  6526                           
  6527                           ;mrf49xa_data.c: 106: }
  6528                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  6529  0457  0021               	movlb	1	; select bank1
  6530  0458  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  6531  0459  0086               	movwf	6
  6532  045A  0187               	clrf	7
  6533  045B  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6534  045C  0601               	xorwf	1,w
  6535  045D  1D03               	skipz
  6536  045E  2C6E               	goto	i1l2806
  6537                           
  6538                           ;mrf49xa_data.c: 109: {
  6539                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  6540  045F  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  6541  0460  3E16               	addlw	22
  6542  0461  0086               	movwf	6
  6543  0462  0875               	movf	i1Mrf49xaServe@data,w
  6544  0463  0081               	movwf	1
  6545                           
  6546                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6547  0464  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  6548  0465  0086               	movwf	6
  6549  0466  3004               	movlw	4
  6550  0467  0081               	movwf	1
  6551                           
  6552                           ;mrf49xa_data.c: 117: Mrf49xaModeRx();
  6553  0468  24D0  3183         	fcall	i1_Mrf49xaModeRx
  6554                           
  6555                           ;mrf49xa_data.c: 120: LATCbits.LATC2 = 1;
  6556  046A  0022               	movlb	2	; select bank2
  6557  046B  150E               	bsf	14,2	;volatile
  6558                           
  6559                           ;mrf49xa_data.c: 121: LATCbits.LATC2 = 0;
  6560  046C  110E               	bcf	14,2	;volatile
  6561                           
  6562                           ;mrf49xa_data.c: 123: }
  6563  046D  2CC6               	goto	i1l2846
  6564  046E                     i1l2806:	
  6565                           
  6566                           ;mrf49xa_data.c: 124: else
  6567                           ;mrf49xa_data.c: 125: {
  6568                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  6569  046E  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6570  046F  076C               	addwf	(_rfTrcvStatus+76)^(0+128),w
  6571  0470  00F4               	movwf	??i1_Mrf49xaServe
  6572  0471  0A74               	incf	??i1_Mrf49xaServe,w
  6573  0472  0086               	movwf	6
  6574  0473  0187               	clrf	7
  6575  0474  0875               	movf	i1Mrf49xaServe@data,w
  6576  0475  0081               	movwf	1
  6577  0476                     i1l2808:	
  6578  0476  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  6579  0477  2CC6               	goto	i1l2846
  6580  0478                     i1l2810:	
  6581                           
  6582                           ;mrf49xa_data.c: 132: rfTrcvStatus.hwByte++;
  6583  0478  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  6584                           
  6585                           ;mrf49xa_data.c: 134: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  6586  0479  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6587  047A  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  6588  047B  1D03               	skipz
  6589  047C  2CA9               	goto	i1l2840
  6590                           
  6591                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = 49;
  6592  047D  3031               	movlw	49
  6593  047E  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6594  047F  2CA9               	goto	i1l2840
  6595  0480                     i1l2816:	
  6596                           
  6597                           ;mrf49xa_data.c: 140: Mrf49TxByte(0x2D);
  6598  0480  302D               	movlw	45
  6599  0481  24CB  3183         	fcall	i1_Mrf49TxByte
  6600                           
  6601                           ;mrf49xa_data.c: 141: break;
  6602  0483  2CC6               	goto	i1l2846
  6603  0484                     i1l2818:	
  6604                           
  6605                           ;mrf49xa_data.c: 144: Mrf49TxByte(0xD4);
  6606  0484  30D4               	movlw	212
  6607  0485  24CB  3183         	fcall	i1_Mrf49TxByte
  6608                           
  6609                           ;mrf49xa_data.c: 145: rfTrcvStatus.hwByte = 0xFF;
  6610  0487  30FF               	movlw	255
  6611  0488  0021               	movlb	1	; select bank1
  6612  0489  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6613                           
  6614                           ;mrf49xa_data.c: 146: break;
  6615  048A  2CC6               	goto	i1l2846
  6616  048B                     i1l2822:	
  6617                           
  6618                           ;mrf49xa_data.c: 150: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  6619  048B  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6620  048C  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  6621  048D  0086               	movwf	6
  6622  048E  0187               	clrf	7
  6623  048F  0801               	movf	1,w
  6624  0490  24CB  3183         	fcall	i1_Mrf49TxByte
  6625                           
  6626                           ;mrf49xa_data.c: 151: break;
  6627  0492  2CC6               	goto	i1l2846
  6628  0493                     i1l2824:	
  6629                           
  6630                           ;mrf49xa_data.c: 154: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  6631  0493  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  6632  0494  24CB  3183         	fcall	i1_Mrf49TxByte
  6633                           
  6634                           ;mrf49xa_data.c: 155: break;
  6635  0496  2CC6               	goto	i1l2846
  6636  0497                     i1l2826:	
  6637                           
  6638                           ;mrf49xa_data.c: 158: Mrf49TxByte(0x00);
  6639  0497  3000               	movlw	0
  6640  0498  24CB  3183         	fcall	i1_Mrf49TxByte
  6641                           
  6642                           ;mrf49xa_data.c: 159: break;
  6643  049A  2CC6               	goto	i1l2846
  6644  049B                     i1l2828:	
  6645                           
  6646                           ;mrf49xa_data.c: 162: Mrf49TxByte(0x00);
  6647  049B  3000               	movlw	0
  6648  049C  24CB  3183         	fcall	i1_Mrf49TxByte
  6649                           
  6650                           ;mrf49xa_data.c: 163: Mrf49xaModeRx();
  6651  049E  24D0  3183         	fcall	i1_Mrf49xaModeRx
  6652                           
  6653                           ;mrf49xa_data.c: 165: rfTrcvStatus.txPacket.retry = 0;
  6654  04A0  30F0               	movlw	-16
  6655  04A1  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  6656                           
  6657                           ;mrf49xa_data.c: 167: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  6658  04A2  0B38               	decfsz	(_rfTrcvStatus^(0+128)+24),w
  6659  04A3  2CA7               	goto	i1l2836
  6660                           
  6661                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  6662  04A4  3002               	movlw	2
  6663  04A5  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  6664  04A6  2CC6               	goto	i1l2846
  6665  04A7                     i1l2836:	
  6666                           
  6667                           ;mrf49xa_data.c: 169: else
  6668                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_FREE;
  6669  04A7  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  6670  04A8  2CC6               	goto	i1l2846
  6671  04A9                     i1l2840:	
  6672  04A9  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6673                           
  6674                           ; Switch size 1, requested type "speed"
  6675                           ; Number of cases is 5, Range of values is 49 to 101
  6676                           ; switch strategies available:
  6677                           ; Name         Instructions Cycles
  6678                           ; simple_byte           16     9 (average)
  6679                           ; direct_byte          115     9 (fixed)
  6680                           ; jumptable            263     9 (fixed)
  6681                           ;	Chosen strategy is simple_byte
  6682  04AA  3A31               	xorlw	49	; case 49
  6683  04AB  1903               	skipnz
  6684  04AC  2C93               	goto	i1l2824
  6685  04AD  3A03               	xorlw	3	; case 50
  6686  04AE  1903               	skipnz
  6687  04AF  2C97               	goto	i1l2826
  6688  04B0  3A01               	xorlw	1	; case 51
  6689  04B1  1903               	skipnz
  6690  04B2  2C9B               	goto	i1l2828
  6691  04B3  3A57               	xorlw	87	; case 100
  6692  04B4  1903               	skipnz
  6693  04B5  2C80               	goto	i1l2816
  6694  04B6  3A01               	xorlw	1	; case 101
  6695  04B7  1903               	skipnz
  6696  04B8  2C84               	goto	i1l2818
  6697  04B9  2C8B               	goto	i1l2822
  6698  04BA                     i1l2844:	
  6699  04BA  0021               	movlb	1	; select bank1
  6700  04BB  0820               	movf	_rfTrcvStatus^(0+128),w
  6701                           
  6702                           ; Switch size 1, requested type "speed"
  6703                           ; Number of cases is 3, Range of values is 0 to 2
  6704                           ; switch strategies available:
  6705                           ; Name         Instructions Cycles
  6706                           ; simple_byte           10     6 (average)
  6707                           ; direct_byte           12     6 (fixed)
  6708                           ; jumptable            260     6 (fixed)
  6709                           ; rangetable             7     4 (fixed)
  6710                           ; spacedrange           11     6 (fixed)
  6711                           ; locatedrange           3     3 (fixed)
  6712                           ;	Chosen strategy is simple_byte
  6713  04BC  3A00               	xorlw	0	; case 0
  6714  04BD  1903               	skipnz
  6715  04BE  2C25               	goto	i1l2762
  6716  04BF  3A01               	xorlw	1	; case 1
  6717  04C0  1903               	skipnz
  6718  04C1  2C4A               	goto	i1l2788
  6719  04C2  3A03               	xorlw	3	; case 2
  6720  04C3  1903               	skipnz
  6721  04C4  2C78               	goto	i1l2810
  6722  04C5  2CC6               	goto	i1l2846
  6723  04C6                     i1l2846:	
  6724                           
  6725                           ;mrf49xa_data.c: 177: }
  6726                           ;mrf49xa_data.c: 191: return PORTAbits.RA2 == 1 ? 1 : 0;
  6727  04C6  3000               	movlw	0
  6728  04C7  0020               	movlb	0	; select bank0
  6729  04C8  190C               	btfsc	12,2	;volatile
  6730  04C9  3001               	movlw	1
  6731  04CA  0008               	return
  6732  04CB                     __end_ofi1_Mrf49xaServe:	
  6733  04CB                     __ptext30:	
  6734 ;; *************** function i1_Mrf49TxByte *****************
  6735 ;; Defined at:
  6736 ;;		line 49 in file "../../../src/devices/mrf49xa_cmd.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  Mrf49TxByte     1    wreg     unsigned char 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  Mrf49TxByte     1    3[COMMON] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;		None               void
  6743 ;; Registers used:
  6744 ;;		wreg, status,2, status,0, pclath, cstack
  6745 ;; Tracked objects:
  6746 ;;		On entry : 1E/1
  6747 ;;		On exit  : 1F/2
  6748 ;;		Unchanged: FFE00/0
  6749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6750 ;;      Params:         0       0       0       0
  6751 ;;      Locals:         1       0       0       0
  6752 ;;      Temps:          0       0       0       0
  6753 ;;      Totals:         1       0       0       0
  6754 ;;Total ram usage:        1 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    2
  6757 ;; This function calls:
  6758 ;;		i1_Mrf49TxCmd
  6759 ;; This function is called by:
  6760 ;;		i1_Mrf49xaServe
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           
  6765                           ;psect for function i1_Mrf49TxByte
  6766  04CB                     i1_Mrf49TxByte:	
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6770                           ;i1Mrf49TxByte@byte stored from wreg
  6771  04CB  00F3               	movwf	i1Mrf49TxByte@byte
  6772                           
  6773                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6774  04CC  00F1               	movwf	?i1_Mrf49TxCmd
  6775  04CD  30B8               	movlw	184
  6776  04CE  24FB               	fcall	i1_Mrf49TxCmd
  6777  04CF  0008               	return
  6778  04D0                     __end_ofi1_Mrf49TxByte:	
  6779  04D0                     __ptext35:	
  6780 ;; *************** function i1_Mrf49xaModeRx *****************
  6781 ;; Defined at:
  6782 ;;		line 72 in file "../../../src/devices/mrf49xa.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, status,2, status,0, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 1C/2
  6793 ;;		On exit  : 1F/1
  6794 ;;		Unchanged: FFE00/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6796 ;;      Params:         0       0       0       0
  6797 ;;      Locals:         1       0       0       0
  6798 ;;      Temps:          0       0       0       0
  6799 ;;      Totals:         1       0       0       0
  6800 ;;Total ram usage:        1 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    2
  6803 ;; This function calls:
  6804 ;;		i1_Mrf49TxCmd
  6805 ;; This function is called by:
  6806 ;;		i1_Mrf49xaServe
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           
  6811                           ;psect for function i1_Mrf49xaModeRx
  6812  04D0                     i1_Mrf49xaModeRx:	
  6813  04D0  3032               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6814                           
  6815                           ;mrf49xa.c: 73: UI08_t k;
  6816                           ;mrf49xa.c: 74: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6820  04D1  01F3               	clrf	i1Mrf49xaModeRx@k
  6821  04D2  3187               	movlp	high __stringtab
  6822  04D3  000A               	callw
  6823  04D4  3183               	pagesel	$	;select current page
  6824  04D5  3800               	iorlw	0
  6825  04D6  1903               	btfsc	3,2
  6826  04D7  2CF4               	goto	i1l2734
  6827  04D8                     i1l2726:	
  6828  04D8  3573               	lslf	i1Mrf49xaModeRx@k,w
  6829  04D9  3E54               	addlw	low (_mrfRegset_Rx| (0+32768))
  6830  04DA  3187               	movlp	high __stringtab
  6831  04DB  000A               	callw
  6832  04DC  3183               	pagesel	$	;select current page
  6833  04DD  3A55               	xorlw	85
  6834  04DE  1903               	skipnz
  6835  04DF  2CEC               	goto	i1l2730
  6836  04E0  3573               	lslf	i1Mrf49xaModeRx@k,w
  6837  04E1  3E55               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6838  04E2  3187               	movlp	high __stringtab
  6839  04E3  000A               	callw
  6840  04E4  00F1               	movwf	?i1_Mrf49TxCmd
  6841  04E5  3573               	lslf	i1Mrf49xaModeRx@k,w
  6842  04E6  3E54               	addlw	low (_mrfRegset_Rx| (0+32768))
  6843  04E7  3187               	movlp	high __stringtab
  6844  04E8  000A               	callw
  6845  04E9  3183               	pagesel	$	;select current page
  6846  04EA  3184  24FB         	fcall	i1_Mrf49TxCmd
  6847  04EC                     i1l2730:	
  6848  04EC  3032               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6849  04ED  0AF3               	incf	i1Mrf49xaModeRx@k,f
  6850  04EE  3187               	movlp	high __stringtab
  6851  04EF  000A               	callw
  6852  04F0  3183               	pagesel	$	;select current page
  6853  04F1  0273               	subwf	i1Mrf49xaModeRx@k,w
  6854  04F2  1C03               	skipc
  6855  04F3  2CD8               	goto	i1l2726
  6856  04F4                     i1l2734:	
  6857                           
  6858                           ;mrf49xa.c: 76: rfTrcvStatus.state = RECV_IDLE;
  6859  04F4  0021               	movlb	1	; select bank1
  6860  04F5  01A0               	clrf	_rfTrcvStatus^(0+128)
  6861                           
  6862                           ;mrf49xa.c: 77: rfTrcvStatus.hwByte = 0;
  6863  04F6  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  6864  04F7  0008               	return
  6865  04F8                     __end_ofi1_Mrf49xaModeRx:	
  6866  04F8                     __ptext31:	
  6867 ;; *************** function i1_Mrf49RxByte *****************
  6868 ;; Defined at:
  6869 ;;		line 44 in file "../../../src/devices/mrf49xa_cmd.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;		None
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;		None
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  1    wreg      unsigned char 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, status,0, pclath, cstack
  6878 ;; Tracked objects:
  6879 ;;		On entry : 1C/1
  6880 ;;		On exit  : 1F/2
  6881 ;;		Unchanged: FFE00/0
  6882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6883 ;;      Params:         0       0       0       0
  6884 ;;      Locals:         0       0       0       0
  6885 ;;      Temps:          0       0       0       0
  6886 ;;      Totals:         0       0       0       0
  6887 ;;Total ram usage:        0 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    2
  6890 ;; This function calls:
  6891 ;;		i1_Mrf49RxCmd
  6892 ;; This function is called by:
  6893 ;;		i1_Mrf49xaServe
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           
  6898                           ;psect for function i1_Mrf49RxByte
  6899  04F8                     i1_Mrf49RxByte:	
  6900                           
  6901                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6902                           
  6903                           ;incstack = 0
  6904                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6905  04F8  30B0               	movlw	176
  6906  04F9  23F4               	fcall	i1_Mrf49RxCmd
  6907  04FA  0008               	return
  6908  04FB                     __end_ofi1_Mrf49RxByte:	
  6909  04FB                     __ptext36:	
  6910 ;; *************** function i1_Mrf49TxCmd *****************
  6911 ;; Defined at:
  6912 ;;		line 7 in file "../../../src/devices/mrf49xa_cmd.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  Mrf49TxCmd      1    wreg     unsigned char 
  6915 ;;  Mrf49TxCmd      1    1[COMMON] unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  Mrf49TxCmd      1    2[COMMON] unsigned char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;		None               void
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, pclath, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 1C/1
  6924 ;;		On exit  : 1F/2
  6925 ;;		Unchanged: FFE00/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6927 ;;      Params:         1       0       0       0
  6928 ;;      Locals:         1       0       0       0
  6929 ;;      Temps:          0       0       0       0
  6930 ;;      Totals:         2       0       0       0
  6931 ;;Total ram usage:        2 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    1
  6934 ;; This function calls:
  6935 ;;		i1_Mrf49SpiTx
  6936 ;; This function is called by:
  6937 ;;		i1_Mrf49xaModeRx
  6938 ;;		i1_Mrf49TxByte
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function i1_Mrf49TxCmd
  6944  04FB                     i1_Mrf49TxCmd:	
  6945                           
  6946                           ;incstack = 0
  6947                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6948                           ;i1Mrf49TxCmd@cmd stored from wreg
  6949  04FB  00F2               	movwf	i1Mrf49TxCmd@cmd
  6950                           
  6951                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  6952  04FC  0022               	movlb	2	; select bank2
  6953  04FD  130E               	bcf	14,6	;volatile
  6954                           
  6955                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6956  04FE  0872               	movf	i1Mrf49TxCmd@cmd,w
  6957  04FF  2505  3183         	fcall	i1_Mrf49SpiTx
  6958                           
  6959                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6960  0501  0871               	movf	i1Mrf49TxCmd@val,w
  6961  0502  2505               	fcall	i1_Mrf49SpiTx
  6962                           
  6963                           ;mrf49xa_cmd.c: 15: LATCbits.LATC6 = 1;;
  6964  0503  170E               	bsf	14,6	;volatile
  6965  0504  0008               	return
  6966  0505                     __end_ofi1_Mrf49TxCmd:	
  6967  0505                     __ptext37:	
  6968 ;; *************** function i1_Mrf49SpiTx *****************
  6969 ;; Defined at:
  6970 ;;		line 4 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  Mrf49SpiTx      1    wreg     unsigned char 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  Mrf49SpiTx      1    0[COMMON] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;		None               void
  6977 ;; Registers used:
  6978 ;;		wreg
  6979 ;; Tracked objects:
  6980 ;;		On entry : 1F/2
  6981 ;;		On exit  : 1F/2
  6982 ;;		Unchanged: FFE00/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6984 ;;      Params:         0       0       0       0
  6985 ;;      Locals:         1       0       0       0
  6986 ;;      Temps:          0       0       0       0
  6987 ;;      Totals:         1       0       0       0
  6988 ;;Total ram usage:        1 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; This function calls:
  6991 ;;		Nothing
  6992 ;; This function is called by:
  6993 ;;		i1_Mrf49TxCmd
  6994 ;;		i1_Mrf49RxCmd
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           
  6999                           ;psect for function i1_Mrf49SpiTx
  7000  0505                     i1_Mrf49SpiTx:	
  7001                           
  7002                           ;incstack = 0
  7003                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  7004                           ;i1Mrf49SpiTx@byte stored from wreg
  7005  0505  00F0               	movwf	i1Mrf49SpiTx@byte
  7006                           
  7007                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7008  0506  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  7009  0507  2D0A               	goto	i1l205
  7010  0508  178D               	bsf	13,7	;volatile
  7011  0509  2D0B               	goto	i1l206
  7012  050A                     i1l205:	
  7013  050A  138D               	bcf	13,7	;volatile
  7014  050B                     i1l206:	
  7015  050B  178E               	bsf	14,7	;volatile
  7016  050C  0000               	nop	;# 
  7017  050D  0022               	movlb	2	; select bank2
  7018  050E  138E               	bcf	14,7	;volatile
  7019  050F  1F70               	btfss	i1Mrf49SpiTx@byte,6
  7020  0510  2D13               	goto	i1l209
  7021  0511  178D               	bsf	13,7	;volatile
  7022  0512  2D14               	goto	i1l210
  7023  0513                     i1l209:	
  7024  0513  138D               	bcf	13,7	;volatile
  7025  0514                     i1l210:	
  7026  0514  178E               	bsf	14,7	;volatile
  7027  0515  0000               	nop	;# 
  7028  0516  0022               	movlb	2	; select bank2
  7029  0517  138E               	bcf	14,7	;volatile
  7030  0518  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  7031  0519  2D1C               	goto	i1l213
  7032  051A  178D               	bsf	13,7	;volatile
  7033  051B  2D1D               	goto	i1l214
  7034  051C                     i1l213:	
  7035  051C  138D               	bcf	13,7	;volatile
  7036  051D                     i1l214:	
  7037  051D  178E               	bsf	14,7	;volatile
  7038  051E  0000               	nop	;# 
  7039  051F  0022               	movlb	2	; select bank2
  7040  0520  138E               	bcf	14,7	;volatile
  7041  0521  1E70               	btfss	i1Mrf49SpiTx@byte,4
  7042  0522  2D25               	goto	i1l217
  7043  0523  178D               	bsf	13,7	;volatile
  7044  0524  2D26               	goto	i1l218
  7045  0525                     i1l217:	
  7046  0525  138D               	bcf	13,7	;volatile
  7047  0526                     i1l218:	
  7048  0526  178E               	bsf	14,7	;volatile
  7049  0527  0000               	nop	;# 
  7050  0528  0022               	movlb	2	; select bank2
  7051  0529  138E               	bcf	14,7	;volatile
  7052  052A  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  7053  052B  2D2E               	goto	i1l221
  7054  052C  178D               	bsf	13,7	;volatile
  7055  052D  2D2F               	goto	i1l222
  7056  052E                     i1l221:	
  7057  052E  138D               	bcf	13,7	;volatile
  7058  052F                     i1l222:	
  7059  052F  178E               	bsf	14,7	;volatile
  7060  0530  0000               	nop	;# 
  7061  0531  0022               	movlb	2	; select bank2
  7062  0532  138E               	bcf	14,7	;volatile
  7063  0533  1D70               	btfss	i1Mrf49SpiTx@byte,2
  7064  0534  2D37               	goto	i1l225
  7065  0535  178D               	bsf	13,7	;volatile
  7066  0536  2D38               	goto	i1l226
  7067  0537                     i1l225:	
  7068  0537  138D               	bcf	13,7	;volatile
  7069  0538                     i1l226:	
  7070  0538  178E               	bsf	14,7	;volatile
  7071  0539  0000               	nop	;# 
  7072  053A  0022               	movlb	2	; select bank2
  7073  053B  138E               	bcf	14,7	;volatile
  7074  053C  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  7075  053D  2D40               	goto	i1l229
  7076  053E  178D               	bsf	13,7	;volatile
  7077  053F  2D41               	goto	i1l230
  7078  0540                     i1l229:	
  7079  0540  138D               	bcf	13,7	;volatile
  7080  0541                     i1l230:	
  7081  0541  178E               	bsf	14,7	;volatile
  7082  0542  0000               	nop	;# 
  7083  0543  0022               	movlb	2	; select bank2
  7084  0544  138E               	bcf	14,7	;volatile
  7085  0545  1C70               	btfss	i1Mrf49SpiTx@byte,0
  7086  0546  2D49               	goto	i1l233
  7087  0547  178D               	bsf	13,7	;volatile
  7088  0548  2D4A               	goto	i1l234
  7089  0549                     i1l233:	
  7090  0549  138D               	bcf	13,7	;volatile
  7091  054A                     i1l234:	
  7092  054A  178E               	bsf	14,7	;volatile
  7093  054B  0000               	nop	;# 
  7094  054C  0022               	movlb	2	; select bank2
  7095  054D  138E               	bcf	14,7	;volatile
  7096                           
  7097                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  7098  054E  138D               	bcf	13,7	;volatile
  7099  054F  0008               	return
  7100  0550                     __end_ofi1_Mrf49SpiTx:	
  7101  007E                     btemp	set	126	;btemp
  7102  007E                     wtemp0	set	126
  7103  0550                     __ptext33:	
  7104 ;; *************** function i1_Mrf49RxSts *****************
  7105 ;; Defined at:
  7106 ;;		line 32 in file "../../../src/devices/mrf49xa_cmd.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;		None
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;		None               void
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 1F/0
  7117 ;;		On exit  : 1F/2
  7118 ;;		Unchanged: FFE00/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7120 ;;      Params:         0       0       0       0
  7121 ;;      Locals:         0       0       0       0
  7122 ;;      Temps:          0       0       0       0
  7123 ;;      Totals:         0       0       0       0
  7124 ;;Total ram usage:        0 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    1
  7127 ;; This function calls:
  7128 ;;		i1_Mrf49SpiRx
  7129 ;; This function is called by:
  7130 ;;		i1_Mrf49xaServe
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           
  7135                           ;psect for function i1_Mrf49RxSts
  7136  0550                     i1_Mrf49RxSts:	
  7137                           
  7138                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7139                           
  7140                           ;incstack = 0
  7141                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7142  0550  120B               	bcf	11,4	;volatile
  7143                           
  7144                           ;mrf49xa_cmd.c: 34: LATCbits.LATC6 = 0;;
  7145  0551  0022               	movlb	2	; select bank2
  7146  0552  130E               	bcf	14,6	;volatile
  7147                           
  7148                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7149  0553  255E  3183         	fcall	i1_Mrf49SpiRx
  7150  0555  0020               	movlb	0	; select bank0
  7151  0556  00CA               	movwf	_mrf49Status
  7152                           
  7153                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7154  0557  255E               	fcall	i1_Mrf49SpiRx
  7155  0558  0020               	movlb	0	; select bank0
  7156  0559  00CB               	movwf	_mrf49Status+1
  7157                           
  7158                           ;mrf49xa_cmd.c: 39: LATCbits.LATC6 = 1;;
  7159  055A  0022               	movlb	2	; select bank2
  7160  055B  170E               	bsf	14,6	;volatile
  7161                           
  7162                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7163  055C  160B               	bsf	11,4	;volatile
  7164  055D  0008               	return
  7165  055E                     __end_ofi1_Mrf49RxSts:	
  7166  055E                     __ptext34:	
  7167 ;; *************** function i1_Mrf49SpiRx *****************
  7168 ;; Defined at:
  7169 ;;		line 22 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;		None
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      unsigned char 
  7176 ;; Registers used:
  7177 ;;		wreg, status,2
  7178 ;; Tracked objects:
  7179 ;;		On entry : 1D/2
  7180 ;;		On exit  : 1F/2
  7181 ;;		Unchanged: FFE00/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7183 ;;      Params:         0       0       0       0
  7184 ;;      Locals:         1       0       0       0
  7185 ;;      Temps:          0       0       0       0
  7186 ;;      Totals:         1       0       0       0
  7187 ;;Total ram usage:        1 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		i1_Mrf49RxCmd
  7193 ;;		i1_Mrf49RxSts
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           
  7198                           ;psect for function i1_Mrf49SpiRx
  7199  055E                     i1_Mrf49SpiRx:	
  7200                           
  7201                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7202                           
  7203                           ;incstack = 0
  7204                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  7205  055E  01F0               	clrf	i1Mrf49SpiRx@data
  7206                           
  7207                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  7208  055F  0022               	movlb	2	; select bank2
  7209  0560  138D               	bcf	13,7	;volatile
  7210  0561  0020               	movlb	0	; select bank0
  7211  0562  1A8E               	btfsc	14,5	;volatile
  7212  0563  17F0               	bsf	i1Mrf49SpiRx@data,7
  7213  0564  0022               	movlb	2	; select bank2
  7214  0565  178E               	bsf	14,7	;volatile
  7215  0566  0000               	nop	;# 
  7216  0567  0022               	movlb	2	; select bank2
  7217  0568  138E               	bcf	14,7	;volatile
  7218                           
  7219                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7220  0569  0020               	movlb	0	; select bank0
  7221  056A  1A8E               	btfsc	14,5	;volatile
  7222  056B  1770               	bsf	i1Mrf49SpiRx@data,6
  7223  056C  0022               	movlb	2	; select bank2
  7224  056D  178E               	bsf	14,7	;volatile
  7225  056E  0000               	nop	;# 
  7226  056F  0022               	movlb	2	; select bank2
  7227  0570  138E               	bcf	14,7	;volatile
  7228                           
  7229                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7230  0571  0020               	movlb	0	; select bank0
  7231  0572  1A8E               	btfsc	14,5	;volatile
  7232  0573  16F0               	bsf	i1Mrf49SpiRx@data,5
  7233  0574  0022               	movlb	2	; select bank2
  7234  0575  178E               	bsf	14,7	;volatile
  7235  0576  0000               	nop	;# 
  7236  0577  0022               	movlb	2	; select bank2
  7237  0578  138E               	bcf	14,7	;volatile
  7238                           
  7239                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7240  0579  0020               	movlb	0	; select bank0
  7241  057A  1A8E               	btfsc	14,5	;volatile
  7242  057B  1670               	bsf	i1Mrf49SpiRx@data,4
  7243  057C  0022               	movlb	2	; select bank2
  7244  057D  178E               	bsf	14,7	;volatile
  7245  057E  0000               	nop	;# 
  7246  057F  0022               	movlb	2	; select bank2
  7247  0580  138E               	bcf	14,7	;volatile
  7248                           
  7249                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7250  0581  0020               	movlb	0	; select bank0
  7251  0582  1A8E               	btfsc	14,5	;volatile
  7252  0583  15F0               	bsf	i1Mrf49SpiRx@data,3
  7253  0584  0022               	movlb	2	; select bank2
  7254  0585  178E               	bsf	14,7	;volatile
  7255  0586  0000               	nop	;# 
  7256  0587  0022               	movlb	2	; select bank2
  7257  0588  138E               	bcf	14,7	;volatile
  7258                           
  7259                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7260  0589  0020               	movlb	0	; select bank0
  7261  058A  1A8E               	btfsc	14,5	;volatile
  7262  058B  1570               	bsf	i1Mrf49SpiRx@data,2
  7263  058C  0022               	movlb	2	; select bank2
  7264  058D  178E               	bsf	14,7	;volatile
  7265  058E  0000               	nop	;# 
  7266  058F  0022               	movlb	2	; select bank2
  7267  0590  138E               	bcf	14,7	;volatile
  7268                           
  7269                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7270  0591  0020               	movlb	0	; select bank0
  7271  0592  1A8E               	btfsc	14,5	;volatile
  7272  0593  14F0               	bsf	i1Mrf49SpiRx@data,1
  7273  0594  0022               	movlb	2	; select bank2
  7274  0595  178E               	bsf	14,7	;volatile
  7275  0596  0000               	nop	;# 
  7276  0597  0022               	movlb	2	; select bank2
  7277  0598  138E               	bcf	14,7	;volatile
  7278                           
  7279                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7280  0599  0020               	movlb	0	; select bank0
  7281  059A  1A8E               	btfsc	14,5	;volatile
  7282  059B  1470               	bsf	i1Mrf49SpiRx@data,0
  7283  059C  0022               	movlb	2	; select bank2
  7284  059D  178E               	bsf	14,7	;volatile
  7285  059E  0000               	nop	;# 
  7286  059F  0022               	movlb	2	; select bank2
  7287  05A0  138E               	bcf	14,7	;volatile
  7288                           
  7289                           ;mrf49xa_spi_pic16.c: 40: return data;
  7290  05A1  0870               	movf	i1Mrf49SpiRx@data,w
  7291  05A2  0008               	return
  7292  05A3                     __end_ofi1_Mrf49SpiRx:	


Data Sizes:
    Strings     28
    Constant    65
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     42      44
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?_Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    ?_Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[18]), STR_1(CODE[2]), 

    ?_printf	int  size(1) Largest target is 0

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1186$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    RfSendPor@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus(BANK1[79]), 

    S327rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendPor->_Mrf49xaTxPacket
    _Mrf49xaTick->_HandlePacket
    _HandlePacket->_Mrf49xaTxAck
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaTxPacket->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiTx
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7064
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                          _RfSendPor
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfSendPor                                            1     1      0    1352
                                             33 BANK0      1     1      0
                    _Mrf49xaTxPacket
                 _Mrf49xaAllocPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0    4121
                                             38 BANK0      4     4      0
                      _Mrf49xaModeTx
                         _Mrf49RxSts
               _Mrf49xaPacketPending
                  _Mrf49xaFreePacket
                    _Mrf49xaRxPacket
                       _HandlePacket
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0    3601
                                             34 BANK0      4     4      0
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                  _Mrf49xaFreePacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaFreePacket                                    1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    2124
                                             33 BANK0      1     1      0
                             _printf
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1219
                                             27 BANK0      6     4      2
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              15    11      4     707
                                             12 BANK0     15    11      4
                              _putch
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     159
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     162
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     332
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    1591
                                              6 BANK0      4     4      0
                       _Mrf49xaServe
                      _Mrf49xaModeRx
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0     927
                                              4 BANK0      2     2      0
                      _Mrf49xaModeRx
                         _Mrf49RxSts
                        _Mrf49RxByte
                        _Mrf49TxByte
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     242
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiTx
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeRx                                        1     1      0     332
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     220
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               1     1      0    3043
                                              6 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    3043
                                              4 COMMON     2     2      0
                    i1_Mrf49xaModeRx
                       i1_Mrf49RxSts
                      i1_Mrf49RxByte
                      i1_Mrf49TxByte
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     803
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiTx
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0    1099
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxCmd                                        2     1      1     730
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49xaServe
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiTx
           _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49TxCmd
       _Mrf49SpiTx
   _Mrf49xaTick
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaPacketPending
     _Mrf49xaFreePacket
     _Mrf49xaRxPacket
     _HandlePacket
       _Mrf49xaTxAck
         _printf
           _putch
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _Mrf49xaTxPacket
           _printf
             _putch
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
       _Mrf49xaTxPacket
         _printf
           _putch
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _Mrf49xaFreePacket
   _RfSendPor
     _Mrf49xaTxPacket
       _printf
         _putch
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Mrf49xaAllocPacket
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiTx
         i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      10       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      82       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2A      2C       6       55.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      92      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu May 08 14:33:34 2014

           Mrf49xaTxPacket@crc 003E                    __CFG_CP$OFF 0000                    __CFG_LVP$ON 0000  
        Mrf49xaTxPacket@packet 0040                            l210 0265                            l221 0287  
                          l213 026F                            l205 0257                            l230 02A1  
                          l222 0289                            l214 0271                            l206 0259  
                          l233 02AB                            l225 0293                            l217 027B  
                          l209 0263                            l234 02AD                            l226 0295  
                          l218 027D                            l229 029F                            l327 0654  
                          l514 06DF                            l362 00D6                            l438 0359  
                          l384 014E                            l385 0166                   __CFG_BORV$LO 0000  
                          wreg 0009               i1Mrf49xaModeRx@k 0073                   __CFG_IESO$ON 0000  
       Mrf49xaTxPacket@needAck 003C                           l2100 01DC                           l2102 01E0  
                         l2112 01F0                           l2104 01E4                           l2120 0203  
                         l2042 016F                           l2122 020F                           l2034 015A  
                         l2140 023F                           l2132 0222                           l2116 01F2  
                         l2044 0172                           l2028 0151                           l2038 016A  
                         l2136 0236                           l2072 019C                           l2064 0190  
                         l2048 0178                           l2312 067A                           l2082 01B5  
                         l2162 03E1                           l2154 03C4                           l2092 01C9  
                         l2180 0114                           l2340 06B4                           l2332 069F  
                         l2500 0099                           l2094 01CD                           l2086 01C1  
                         l2190 013B                           l2158 03D8                           l2350 06DB  
                         l2318 068B                           l2184 0126                           l2440 032B  
                         l2600 06EE                           l2344 06BB                           l2328 069D  
                         l2352 066A                           l2416 0642                           l2512 00AD  
                         l2098 01D4                           l2194 013D                           l2186 0132  
                         l2346 06BE                           l2522 00B7                           l2514 00AE  
                         l2612 0701                           l2428 0662                           l2364 05EE  
                         l2380 060A                           l2390 0613                           l2550 035C  
                         l2608 06FD                           l2624 0711                           l2632 0721  
                         l2560 037B                           l2544 0350                           l2552 036B  
                         l2480 005A                           l2456 03EE                           l2538 033B  
                         l2474 004C                           l2628 071D                           l2396 0623  
                         l2556 0375                           l2484 0063                           l2486 0065  
                         l2478 0056                           l2496 0082                           l2588 0031  
              Mrf49TxByte@byte 0023                           STR_1 0782                           STR_2 0768  
                         STR_3 077A                           STR_4 077C                           STR_5 077E  
                         STR_6 0780                           u2235 0717                           u2195 06F6  
                         u2607 0102                           u2617 0120                           u1855 06AD  
                         u2577 0094                           u2587 00BC                           u2597 00F3  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                           _main 0022  
              __end_of_AdcInit 0315                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E                           start 0014  
         __end_of_HandlePacket 037D        __end_ofi1_Mrf49xaModeRx 04F8                  __CFG_MCLRE$ON 0000  
          __end_of_Mrf49RxByte 0245            __end_of_Mrf49TxByte 0219            __end_of_Mrf49xaInit 0143  
          __end_of_Mrf49xaTick 00DA           _Mrf49xaPacketPending 031A                          ?_main 0070  
                __CFG_WDTE$OFF 0000                __end_of___lwdiv 0706                          i1l210 0514  
                        i1l131 0011                          i1l221 052E                          i1l213 051C  
                        i1l205 050A                          i1l230 0541                          i1l222 052F  
                        i1l214 051D                          i1l206 050B                          i1l233 0549  
                        i1l225 0537                          i1l217 0525                          i1l209 0513  
                        i1l234 054A                          i1l226 0538                          i1l218 0526  
                        i1l229 0540                __end_of___lwmod 0726                          i1l384 0409  
                        i1l385 0421                     _Mrf49RxCmd 00DA                     _Mrf49TxCmd 0245  
                   _Mrf49SpiRx 02BF                     _Mrf49SpiTx 0251                     _Mrf49RxSts 02B3  
   __end_of_Mrf49xaAllocPacket 03F4                __end_of_dpowers 0731        Mrf49xaTxPacket@response 003B  
              RfSendPor@packet 0041                          _putch 06E0                 __CFG_BOREN$OFF 0000  
                        status 0003                          wtemp0 007E                __initialization 0016  
                   _ExtIntInit 0315                   __end_of_main 0034                 __CFG_LPBOR$OFF 0000  
        ?_Mrf49xaPacketPending 0070                         ??_main 0077           __end_of_Mrf49xaTxAck 05D7  
         __end_of_Mrf49xaServe 0214            HandlePacket@sendAck 0044                         _ADCON0 009D  
                       _ADCON1 009E                         _ADCON2 009F            HandlePacket@sendMsg 0043  
                    ??_AdcInit 0077                         _ANSELA 018C                         ?_putch 0070  
                       _ANSELB 018D                         _ANSELC 018E             i1Mrf49xaServe@data 0075  
                       i1l2730 04EC                         i1l2810 0478                         i1l2734 04F4  
                       i1l2726 04D8                         i1l2822 048B                         i1l2806 046E  
                       i1l2824 0493                         i1l2816 0480                         i1l2840 04A9  
                       i1l2808 0476                         i1l2826 0497                         i1l2818 0484  
                       i1l2762 0425                         i1l2754 040C                         i1l2836 04A7  
                       i1l2828 049B                         i1l2772 0434                         i1l2844 04BA  
                       i1l2766 042B                         i1l2846 04C6                         i1l2758 0415  
                       i1l2768 042E                         i1l2796 0457                         i1l2788 044A  
                       _FVRCON 0117             __size_of_RfSendPor 0022                         _OSCCON 0099  
                  _Mrf49RxByte 0243                    _Mrf49TxByte 0214                 __CFG_PWRTE$OFF 0000  
             ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 00E9                    _Mrf49xaTick 0034  
              _Mrf49xaRxPacket 0324                 __CFG_STVREN$ON 0000                      ??___lwdiv 0077  
                    ??___lwmod 0077                _Mrf49xaTxPacket 05D7                         _extInt 0004  
                       _printf 0666                    ?_Mrf49RxCmd 0070                    ?_Mrf49TxCmd 0021  
                  ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070                    ?_Mrf49RxSts 0070  
                       putch@c 0070          __size_of_HandlePacket 0046        __end_of__initialization 0020  
        __end_ofi1_Mrf49RxByte 04FB          __end_ofi1_Mrf49TxByte 04D0                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070         ??_Mrf49xaPacketPending 0077        __size_ofi1_Mrf49xaServe 00CD  
                __end_of_putch 06E1              __end_of_RfSendPor 039F                 _OPTION_REGbits 0095  
                 _HandlePacket 0337        Mrf49xaFreePacket@packet 0020                        ??_putch 0077  
                ??_SysInitGpio 0077                     __pbssBANK0 004A                     __pbssBANK1 00A0  
      __end_of_Mrf49xaRxPacket 0332        __end_of_Mrf49xaTxPacket 0666          __end_of_Mrf49xaModeRx 0243  
        __end_of_Mrf49xaModeTx 03E7            __size_of_Mrf49RxCmd 000F            __size_of_Mrf49TxCmd 000C  
          __size_of_Mrf49SpiRx 0047            __size_of_Mrf49SpiTx 0062            __size_of_Mrf49RxSts 000C  
                   __pmaintext 0022                     __pintentry 0004                        ?_extInt 0070  
        __size_of_Mrf49xaTxAck 0034                        ?_printf 002C          __size_of_Mrf49xaServe 00D1  
                      _AdcInit 0306            __size_of_ExtIntInit 0005                     __stringtab 0726  
           _Mrf49xaAllocPacket 03E7                  ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071  
                ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070                  ?i1_Mrf49RxSts 0070  
          __end_of_SysInitGpio 03BC                   _Mrf49xaTxAck 05A3                   _Mrf49xaServe 0143  
          ?_Mrf49xaAllocPacket 0070                        ___lwdiv 06E1                        ___lwmod 0706  
              __size_of_extInt 0010              _mrfRegset_InitCnt 0731                        __ptext1 039F  
                      __ptext2 037D                        __ptext3 03E7                        __ptext4 0034  
                      __ptext5 0337                        __ptext6 0332                        __ptext7 05A3  
                      __ptext8 05D7                        __ptext9 0666                __size_of_printf 007A  
                      _dpowers 0727           ??_Mrf49xaAllocPacket 0077                        clrloop0 0785  
         end_of_initialization 0020                   ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070  
               ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070  
               ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070  
             ?_Mrf49xaTxPacket 003B                   ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 0760  
         __end_of_mrfRegset_Tx 0768                   ?_Mrf49xaTick 0070                        printf@c 003A  
                      printf@f 0034                 i1_Mrf49xaServe 03FE      __end_of_mrfRegset_InitCnt 0732  
                    _PORTAbits 000C                      _PORTCbits 000E                   ??_Mrf49RxCmd 0077  
                 ??_Mrf49TxCmd 0077                   ??_Mrf49SpiRx 0077                   ??_Mrf49SpiTx 0077  
                 ??_Mrf49RxSts 0077               __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C  
                    _TRISBbits 008D                      _TRISCbits 008E                    _SysInitGpio 039F  
               Mrf49SpiRx@data 0020                 Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 00E9  
           __end_of_Mrf49TxCmd 0251         __end_ofi1_Mrf49xaServe 04CB                   ??_ExtIntInit 0077  
           __end_of_Mrf49SpiRx 0306             __end_of_Mrf49SpiTx 02B3             __end_of_Mrf49RxSts 02BF  
     __size_ofi1_Mrf49xaModeRx 0028                 __end_of_extInt 0014                 __end_of_printf 06E0  
          start_initialization 0016                      _RfSendPor 037D             __end_of_ExtIntInit 031A  
           HandlePacket@packet 0045                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0732  
              _mrfRegset_TxCnt 0733                       ??_extInt 0076                       ??_printf 0030  
__size_of_Mrf49xaPacketPending 000A         __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005  
         __end_ofi1_Mrf49RxCmd 03FE           __end_ofi1_Mrf49TxCmd 0505           __end_ofi1_Mrf49SpiRx 05A3  
         __end_ofi1_Mrf49SpiTx 0550           __end_ofi1_Mrf49RxSts 055E                     ?_RfSendPor 0070  
                __pcstackBANK0 0020              i1Mrf49TxByte@byte 0073            __end_of__stringdata 0784  
                     ?_AdcInit 0070                   _rfTrcvStatus 00A0           __size_of_Mrf49RxByte 0002  
         __size_of_Mrf49TxByte 0005               ___lwdiv@dividend 0022           __size_of_Mrf49xaInit 005A  
         __size_of_Mrf49xaTick 00A6                       ?___lwdiv 0020                       ?___lwmod 0027  
                    __pstrings 0726         __size_of_Mrf49xaModeRx 002A         __size_of_Mrf49xaModeTx 002B  
                 _mrfRegset_Rx 0754                   _mrfRegset_Tx 0760              ??i1_Mrf49xaModeRx 0073  
             ___lwdiv@quotient 0024                 __size_of_putch 0001                       _LATAbits 010C  
                     _LATBbits 010D                       _LATCbits 010E                  i1_Mrf49RxByte 04F8  
      __end_of_mrfRegset_RxCnt 0733                  i1_Mrf49TxByte 04CB        __end_of_mrfRegset_TxCnt 0734  
                    clear_ram0 0784                    _mrf49Status 004A              _Mrf49xaFreePacket 0332  
               Mrf49xaModeRx@k 0023                 Mrf49xaModeTx@k 0023                  Mrf49RxCmd@cmd 0021  
           ?_Mrf49xaFreePacket 0070                  Mrf49RxCmd@val 0022                  Mrf49TxCmd@cmd 0022  
                Mrf49TxCmd@val 0021                    __stringdata 0768            ??_Mrf49xaFreePacket 0077  
                   printf@_val 0036                     printf@flag 0033                       _WPUAbits 020C  
                   printf@prec 0035                    ??_RfSendPor 0077    __size_of_Mrf49xaAllocPacket 000D  
             __size_of_AdcInit 000F                   ?_SysInitGpio 0070                 ?i1_Mrf49RxByte 0070  
               ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 0337                  _Mrf49xaModeRx 0219  
                _Mrf49xaModeTx 03BC                 _mrfRegset_Init 0734       __size_of_Mrf49xaRxPacket 000E  
        __size_ofi1_Mrf49RxCmd 000A          __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0045  
        __size_ofi1_Mrf49SpiTx 004B               i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000E  
             __size_of___lwdiv 0025               __size_of___lwmod 0020       __size_of_Mrf49xaTxPacket 008F  
             i1Mrf49SpiTx@byte 0070             __end_of__stringtab 0727                  ?_HandlePacket 0070  
              ___lwdiv@divisor 0020                ___lwdiv@counter 0026                       __ptext10 0706  
                     __ptext11 06E1                       __ptext20 00DA                       __ptext12 06E0  
                     __ptext21 02B3                       __ptext13 0324                       __ptext30 04CB  
                     __ptext22 02BF                       __ptext14 031A                       __ptext31 04F8  
                     __ptext23 0219                       __ptext15 03BC                       __ptext32 03F4  
                     __ptext24 0245                       __ptext16 00E9                       __ptext33 0550  
                     __ptext25 0251                       __ptext17 0143                       __ptext34 055E  
                     __ptext26 0315                       __ptext18 0214                       __ptext35 04D0  
                     __ptext27 0306                       __ptext19 0243                       __ptext36 04FB  
                     __ptext37 0505                       __ptext29 03FE               ??i1_Mrf49xaServe 0074  
                __size_of_main 0012                   i1_Mrf49RxCmd 03F4         __end_of_mrfRegset_Init 0754  
           Mrf49xaTxAck@packet 0041                   i1_Mrf49TxCmd 04FB                   i1_Mrf49SpiRx 055E  
                 i1_Mrf49SpiTx 0505                 ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070  
                 i1_Mrf49RxSts 0550                i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072  
               ??_HandlePacket 0077             Mrf49xaTick@timeout 0048                     _INTCONbits 000B  
              i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071                ??i1_Mrf49RxByte 0073  
                     intlevel1 0000                ??i1_Mrf49TxByte 0073   __end_of_Mrf49xaPacketPending 0324  
             ___lwmod@dividend 0029              __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005  
                ?_Mrf49xaTxAck 0070                   Mrf49xaInit@k 0029                  ?_Mrf49xaServe 0070  
                     printf@ap 0032              Mrf49xaTick@packet 0049                i1_Mrf49xaModeRx 04D0  
              ___lwmod@divisor 0027              ??_Mrf49xaRxPacket 0077                ___lwmod@counter 002B  
            ??_Mrf49xaTxPacket 003D                  ??_Mrf49RxByte 0077                  ??_Mrf49TxByte 0077  
              ??_Mrf49xaModeRx 0077                ??_Mrf49xaModeTx 0077           __size_of_SysInitGpio 001D  
               ??_Mrf49xaTxAck 0077               Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024  
                ??_Mrf49xaInit 0026                  ??_Mrf49xaTick 0046               Mrf49xaTxPacket@i 003F  

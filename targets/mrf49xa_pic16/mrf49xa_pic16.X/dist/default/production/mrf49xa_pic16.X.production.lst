

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Fri Apr 18 12:34:26 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text5,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text29,local,class=CODE,merge=1,delta=2
    14                           	psect	pa_nodes,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     	;# 
    17  0001                     	;# 
    18  0002                     	;# 
    19  0003                     	;# 
    20  0004                     	;# 
    21  0005                     	;# 
    22  0006                     	;# 
    23  0007                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0013                     	;# 
    34  0015                     	;# 
    35  0016                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001B                     	;# 
    42  001C                     	;# 
    43  008C                     	;# 
    44  008D                     	;# 
    45  008E                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0093                     	;# 
    49  0095                     	;# 
    50  0096                     	;# 
    51  0097                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  009F                     	;# 
    60  010C                     	;# 
    61  010D                     	;# 
    62  010E                     	;# 
    63  0111                     	;# 
    64  0112                     	;# 
    65  0113                     	;# 
    66  0114                     	;# 
    67  0115                     	;# 
    68  0116                     	;# 
    69  0117                     	;# 
    70  0118                     	;# 
    71  0119                     	;# 
    72  011D                     	;# 
    73  018C                     	;# 
    74  018D                     	;# 
    75  018E                     	;# 
    76  0191                     	;# 
    77  0191                     	;# 
    78  0192                     	;# 
    79  0193                     	;# 
    80  0193                     	;# 
    81  0194                     	;# 
    82  0195                     	;# 
    83  0196                     	;# 
    84  0199                     	;# 
    85  019A                     	;# 
    86  019B                     	;# 
    87  019B                     	;# 
    88  019C                     	;# 
    89  019D                     	;# 
    90  019E                     	;# 
    91  019F                     	;# 
    92  020C                     	;# 
    93  020D                     	;# 
    94  0211                     	;# 
    95  0211                     	;# 
    96  0212                     	;# 
    97  0212                     	;# 
    98  0213                     	;# 
    99  0213                     	;# 
   100  0214                     	;# 
   101  0214                     	;# 
   102  0215                     	;# 
   103  0215                     	;# 
   104  0215                     	;# 
   105  0216                     	;# 
   106  0216                     	;# 
   107  0217                     	;# 
   108  0217                     	;# 
   109  0391                     	;# 
   110  0392                     	;# 
   111  0393                     	;# 
   112  0394                     	;# 
   113  0395                     	;# 
   114  0396                     	;# 
   115  0498                     	;# 
   116  0498                     	;# 
   117  0499                     	;# 
   118  049A                     	;# 
   119  049B                     	;# 
   120  049B                     	;# 
   121  049C                     	;# 
   122  049E                     	;# 
   123  049F                     	;# 
   124  0611                     	;# 
   125  0612                     	;# 
   126  0613                     	;# 
   127  0613                     	;# 
   128  0614                     	;# 
   129  0615                     	;# 
   130  0616                     	;# 
   131  0616                     	;# 
   132  0617                     	;# 
   133  0618                     	;# 
   134  0619                     	;# 
   135  0619                     	;# 
   136  061A                     	;# 
   137  061B                     	;# 
   138  061C                     	;# 
   139  061C                     	;# 
   140  0691                     	;# 
   141  0692                     	;# 
   142  0693                     	;# 
   143  0694                     	;# 
   144  0695                     	;# 
   145  0F0F                     	;# 
   146  0F10                     	;# 
   147  0F11                     	;# 
   148  0F12                     	;# 
   149  0F13                     	;# 
   150  0F14                     	;# 
   151  0F15                     	;# 
   152  0F16                     	;# 
   153  0F17                     	;# 
   154  0F18                     	;# 
   155  0F19                     	;# 
   156  0F1A                     	;# 
   157  0F1B                     	;# 
   158  0F1C                     	;# 
   159  0F1D                     	;# 
   160  0F1E                     	;# 
   161  0F1F                     	;# 
   162  0F20                     	;# 
   163  0F21                     	;# 
   164  0F22                     	;# 
   165  0F23                     	;# 
   166  0F24                     	;# 
   167  0F25                     	;# 
   168  0F26                     	;# 
   169  0F27                     	;# 
   170  0F28                     	;# 
   171  0F29                     	;# 
   172  0F2A                     	;# 
   173  0F2B                     	;# 
   174  0F2C                     	;# 
   175  0F2D                     	;# 
   176  0F2E                     	;# 
   177  0F2F                     	;# 
   178  0F8C                     	;# 
   179  0F8D                     	;# 
   180  0F91                     	;# 
   181  0F95                     	;# 
   182  0F96                     	;# 
   183  0F97                     	;# 
   184  0F9C                     	;# 
   185  0F9D                     	;# 
   186  0F9E                     	;# 
   187  0FE3                     	;# 
   188  0FE4                     	;# 
   189  0FE5                     	;# 
   190  0FE6                     	;# 
   191  0FE7                     	;# 
   192  0FE8                     	;# 
   193  0FE9                     	;# 
   194  0FEA                     	;# 
   195  0FEB                     	;# 
   196  0FED                     	;# 
   197  0FEE                     	;# 
   198  0FEF                     	;# 
   199  0000                     	;# 
   200  0001                     	;# 
   201  0002                     	;# 
   202  0003                     	;# 
   203  0004                     	;# 
   204  0005                     	;# 
   205  0006                     	;# 
   206  0007                     	;# 
   207  0008                     	;# 
   208  0009                     	;# 
   209  000A                     	;# 
   210  000B                     	;# 
   211  000C                     	;# 
   212  000D                     	;# 
   213  000E                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0013                     	;# 
   217  0015                     	;# 
   218  0016                     	;# 
   219  0016                     	;# 
   220  0017                     	;# 
   221  0018                     	;# 
   222  0019                     	;# 
   223  001A                     	;# 
   224  001B                     	;# 
   225  001C                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  0091                     	;# 
   230  0092                     	;# 
   231  0093                     	;# 
   232  0095                     	;# 
   233  0096                     	;# 
   234  0097                     	;# 
   235  0099                     	;# 
   236  009A                     	;# 
   237  009B                     	;# 
   238  009B                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  010C                     	;# 
   244  010D                     	;# 
   245  010E                     	;# 
   246  0111                     	;# 
   247  0112                     	;# 
   248  0113                     	;# 
   249  0114                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  018C                     	;# 
   257  018D                     	;# 
   258  018E                     	;# 
   259  0191                     	;# 
   260  0191                     	;# 
   261  0192                     	;# 
   262  0193                     	;# 
   263  0193                     	;# 
   264  0194                     	;# 
   265  0195                     	;# 
   266  0196                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019D                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  020C                     	;# 
   276  020D                     	;# 
   277  0211                     	;# 
   278  0211                     	;# 
   279  0212                     	;# 
   280  0212                     	;# 
   281  0213                     	;# 
   282  0213                     	;# 
   283  0214                     	;# 
   284  0214                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0216                     	;# 
   289  0216                     	;# 
   290  0217                     	;# 
   291  0217                     	;# 
   292  0391                     	;# 
   293  0392                     	;# 
   294  0393                     	;# 
   295  0394                     	;# 
   296  0395                     	;# 
   297  0396                     	;# 
   298  0498                     	;# 
   299  0498                     	;# 
   300  0499                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049E                     	;# 
   306  049F                     	;# 
   307  0611                     	;# 
   308  0612                     	;# 
   309  0613                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  0615                     	;# 
   313  0616                     	;# 
   314  0616                     	;# 
   315  0617                     	;# 
   316  0618                     	;# 
   317  0619                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  061C                     	;# 
   323  0691                     	;# 
   324  0692                     	;# 
   325  0693                     	;# 
   326  0694                     	;# 
   327  0695                     	;# 
   328  0F0F                     	;# 
   329  0F10                     	;# 
   330  0F11                     	;# 
   331  0F12                     	;# 
   332  0F13                     	;# 
   333  0F14                     	;# 
   334  0F15                     	;# 
   335  0F16                     	;# 
   336  0F17                     	;# 
   337  0F18                     	;# 
   338  0F19                     	;# 
   339  0F1A                     	;# 
   340  0F1B                     	;# 
   341  0F1C                     	;# 
   342  0F1D                     	;# 
   343  0F1E                     	;# 
   344  0F1F                     	;# 
   345  0F20                     	;# 
   346  0F21                     	;# 
   347  0F22                     	;# 
   348  0F23                     	;# 
   349  0F24                     	;# 
   350  0F25                     	;# 
   351  0F26                     	;# 
   352  0F27                     	;# 
   353  0F28                     	;# 
   354  0F29                     	;# 
   355  0F2A                     	;# 
   356  0F2B                     	;# 
   357  0F2C                     	;# 
   358  0F2D                     	;# 
   359  0F2E                     	;# 
   360  0F2F                     	;# 
   361  0F8C                     	;# 
   362  0F8D                     	;# 
   363  0F91                     	;# 
   364  0F95                     	;# 
   365  0F96                     	;# 
   366  0F97                     	;# 
   367  0F9C                     	;# 
   368  0F9D                     	;# 
   369  0F9E                     	;# 
   370  0FE3                     	;# 
   371  0FE4                     	;# 
   372  0FE5                     	;# 
   373  0FE6                     	;# 
   374  0FE7                     	;# 
   375  0FE8                     	;# 
   376  0FE9                     	;# 
   377  0FEA                     	;# 
   378  0FEB                     	;# 
   379  0FED                     	;# 
   380  0FEE                     	;# 
   381  0FEF                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0013                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  008C                     	;# 
   410  008D                     	;# 
   411  008E                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0093                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0113                     	;# 
   432  0114                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  0118                     	;# 
   437  0119                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020C                     	;# 
   459  020D                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0391                     	;# 
   476  0392                     	;# 
   477  0393                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0498                     	;# 
   482  0498                     	;# 
   483  0499                     	;# 
   484  049A                     	;# 
   485  049B                     	;# 
   486  049B                     	;# 
   487  049C                     	;# 
   488  049E                     	;# 
   489  049F                     	;# 
   490  0611                     	;# 
   491  0612                     	;# 
   492  0613                     	;# 
   493  0613                     	;# 
   494  0614                     	;# 
   495  0615                     	;# 
   496  0616                     	;# 
   497  0616                     	;# 
   498  0617                     	;# 
   499  0618                     	;# 
   500  0619                     	;# 
   501  0619                     	;# 
   502  061A                     	;# 
   503  061B                     	;# 
   504  061C                     	;# 
   505  061C                     	;# 
   506  0691                     	;# 
   507  0692                     	;# 
   508  0693                     	;# 
   509  0694                     	;# 
   510  0695                     	;# 
   511  0F0F                     	;# 
   512  0F10                     	;# 
   513  0F11                     	;# 
   514  0F12                     	;# 
   515  0F13                     	;# 
   516  0F14                     	;# 
   517  0F15                     	;# 
   518  0F16                     	;# 
   519  0F17                     	;# 
   520  0F18                     	;# 
   521  0F19                     	;# 
   522  0F1A                     	;# 
   523  0F1B                     	;# 
   524  0F1C                     	;# 
   525  0F1D                     	;# 
   526  0F1E                     	;# 
   527  0F1F                     	;# 
   528  0F20                     	;# 
   529  0F21                     	;# 
   530  0F22                     	;# 
   531  0F23                     	;# 
   532  0F24                     	;# 
   533  0F25                     	;# 
   534  0F26                     	;# 
   535  0F27                     	;# 
   536  0F28                     	;# 
   537  0F29                     	;# 
   538  0F2A                     	;# 
   539  0F2B                     	;# 
   540  0F2C                     	;# 
   541  0F2D                     	;# 
   542  0F2E                     	;# 
   543  0F2F                     	;# 
   544  0F8C                     	;# 
   545  0F8D                     	;# 
   546  0F91                     	;# 
   547  0F95                     	;# 
   548  0F96                     	;# 
   549  0F97                     	;# 
   550  0F9C                     	;# 
   551  0F9D                     	;# 
   552  0F9E                     	;# 
   553  0FE3                     	;# 
   554  0FE4                     	;# 
   555  0FE5                     	;# 
   556  0FE6                     	;# 
   557  0FE7                     	;# 
   558  0FE8                     	;# 
   559  0FE9                     	;# 
   560  0FEA                     	;# 
   561  0FEB                     	;# 
   562  0FED                     	;# 
   563  0FEE                     	;# 
   564  0FEF                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  008C                     	;# 
   593  008D                     	;# 
   594  008E                     	;# 
   595  0091                     	;# 
   596  0092                     	;# 
   597  0093                     	;# 
   598  0095                     	;# 
   599  0096                     	;# 
   600  0097                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  009F                     	;# 
   609  010C                     	;# 
   610  010D                     	;# 
   611  010E                     	;# 
   612  0111                     	;# 
   613  0112                     	;# 
   614  0113                     	;# 
   615  0114                     	;# 
   616  0115                     	;# 
   617  0116                     	;# 
   618  0117                     	;# 
   619  0118                     	;# 
   620  0119                     	;# 
   621  011D                     	;# 
   622  018C                     	;# 
   623  018D                     	;# 
   624  018E                     	;# 
   625  0191                     	;# 
   626  0191                     	;# 
   627  0192                     	;# 
   628  0193                     	;# 
   629  0193                     	;# 
   630  0194                     	;# 
   631  0195                     	;# 
   632  0196                     	;# 
   633  0199                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019C                     	;# 
   638  019D                     	;# 
   639  019E                     	;# 
   640  019F                     	;# 
   641  020C                     	;# 
   642  020D                     	;# 
   643  0211                     	;# 
   644  0211                     	;# 
   645  0212                     	;# 
   646  0212                     	;# 
   647  0213                     	;# 
   648  0213                     	;# 
   649  0214                     	;# 
   650  0214                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  0391                     	;# 
   659  0392                     	;# 
   660  0393                     	;# 
   661  0394                     	;# 
   662  0395                     	;# 
   663  0396                     	;# 
   664  0498                     	;# 
   665  0498                     	;# 
   666  0499                     	;# 
   667  049A                     	;# 
   668  049B                     	;# 
   669  049B                     	;# 
   670  049C                     	;# 
   671  049E                     	;# 
   672  049F                     	;# 
   673  0611                     	;# 
   674  0612                     	;# 
   675  0613                     	;# 
   676  0613                     	;# 
   677  0614                     	;# 
   678  0615                     	;# 
   679  0616                     	;# 
   680  0616                     	;# 
   681  0617                     	;# 
   682  0618                     	;# 
   683  0619                     	;# 
   684  0619                     	;# 
   685  061A                     	;# 
   686  061B                     	;# 
   687  061C                     	;# 
   688  061C                     	;# 
   689  0691                     	;# 
   690  0692                     	;# 
   691  0693                     	;# 
   692  0694                     	;# 
   693  0695                     	;# 
   694  0F0F                     	;# 
   695  0F10                     	;# 
   696  0F11                     	;# 
   697  0F12                     	;# 
   698  0F13                     	;# 
   699  0F14                     	;# 
   700  0F15                     	;# 
   701  0F16                     	;# 
   702  0F17                     	;# 
   703  0F18                     	;# 
   704  0F19                     	;# 
   705  0F1A                     	;# 
   706  0F1B                     	;# 
   707  0F1C                     	;# 
   708  0F1D                     	;# 
   709  0F1E                     	;# 
   710  0F1F                     	;# 
   711  0F20                     	;# 
   712  0F21                     	;# 
   713  0F22                     	;# 
   714  0F23                     	;# 
   715  0F24                     	;# 
   716  0F25                     	;# 
   717  0F26                     	;# 
   718  0F27                     	;# 
   719  0F28                     	;# 
   720  0F29                     	;# 
   721  0F2A                     	;# 
   722  0F2B                     	;# 
   723  0F2C                     	;# 
   724  0F2D                     	;# 
   725  0F2E                     	;# 
   726  0F2F                     	;# 
   727  0F8C                     	;# 
   728  0F8D                     	;# 
   729  0F91                     	;# 
   730  0F95                     	;# 
   731  0F96                     	;# 
   732  0F97                     	;# 
   733  0F9C                     	;# 
   734  0F9D                     	;# 
   735  0F9E                     	;# 
   736  0FE3                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE9                     	;# 
   743  0FEA                     	;# 
   744  0FEB                     	;# 
   745  0FED                     	;# 
   746  0FEE                     	;# 
   747  0FEF                     	;# 
   748  0000                     	;# 
   749  0001                     	;# 
   750  0002                     	;# 
   751  0003                     	;# 
   752  0004                     	;# 
   753  0005                     	;# 
   754  0006                     	;# 
   755  0007                     	;# 
   756  0008                     	;# 
   757  0009                     	;# 
   758  000A                     	;# 
   759  000B                     	;# 
   760  000C                     	;# 
   761  000D                     	;# 
   762  000E                     	;# 
   763  0011                     	;# 
   764  0012                     	;# 
   765  0013                     	;# 
   766  0015                     	;# 
   767  0016                     	;# 
   768  0016                     	;# 
   769  0017                     	;# 
   770  0018                     	;# 
   771  0019                     	;# 
   772  001A                     	;# 
   773  001B                     	;# 
   774  001C                     	;# 
   775  008C                     	;# 
   776  008D                     	;# 
   777  008E                     	;# 
   778  0091                     	;# 
   779  0092                     	;# 
   780  0093                     	;# 
   781  0095                     	;# 
   782  0096                     	;# 
   783  0097                     	;# 
   784  0099                     	;# 
   785  009A                     	;# 
   786  009B                     	;# 
   787  009B                     	;# 
   788  009C                     	;# 
   789  009D                     	;# 
   790  009E                     	;# 
   791  009F                     	;# 
   792  010C                     	;# 
   793  010D                     	;# 
   794  010E                     	;# 
   795  0111                     	;# 
   796  0112                     	;# 
   797  0113                     	;# 
   798  0114                     	;# 
   799  0115                     	;# 
   800  0116                     	;# 
   801  0117                     	;# 
   802  0118                     	;# 
   803  0119                     	;# 
   804  011D                     	;# 
   805  018C                     	;# 
   806  018D                     	;# 
   807  018E                     	;# 
   808  0191                     	;# 
   809  0191                     	;# 
   810  0192                     	;# 
   811  0193                     	;# 
   812  0193                     	;# 
   813  0194                     	;# 
   814  0195                     	;# 
   815  0196                     	;# 
   816  0199                     	;# 
   817  019A                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  020D                     	;# 
   826  0211                     	;# 
   827  0211                     	;# 
   828  0212                     	;# 
   829  0212                     	;# 
   830  0213                     	;# 
   831  0213                     	;# 
   832  0214                     	;# 
   833  0214                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0216                     	;# 
   838  0216                     	;# 
   839  0217                     	;# 
   840  0217                     	;# 
   841  0391                     	;# 
   842  0392                     	;# 
   843  0393                     	;# 
   844  0394                     	;# 
   845  0395                     	;# 
   846  0396                     	;# 
   847  0498                     	;# 
   848  0498                     	;# 
   849  0499                     	;# 
   850  049A                     	;# 
   851  049B                     	;# 
   852  049B                     	;# 
   853  049C                     	;# 
   854  049E                     	;# 
   855  049F                     	;# 
   856  0611                     	;# 
   857  0612                     	;# 
   858  0613                     	;# 
   859  0613                     	;# 
   860  0614                     	;# 
   861  0615                     	;# 
   862  0616                     	;# 
   863  0616                     	;# 
   864  0617                     	;# 
   865  0618                     	;# 
   866  0619                     	;# 
   867  0619                     	;# 
   868  061A                     	;# 
   869  061B                     	;# 
   870  061C                     	;# 
   871  061C                     	;# 
   872  0691                     	;# 
   873  0692                     	;# 
   874  0693                     	;# 
   875  0694                     	;# 
   876  0695                     	;# 
   877  0F0F                     	;# 
   878  0F10                     	;# 
   879  0F11                     	;# 
   880  0F12                     	;# 
   881  0F13                     	;# 
   882  0F14                     	;# 
   883  0F15                     	;# 
   884  0F16                     	;# 
   885  0F17                     	;# 
   886  0F18                     	;# 
   887  0F19                     	;# 
   888  0F1A                     	;# 
   889  0F1B                     	;# 
   890  0F1C                     	;# 
   891  0F1D                     	;# 
   892  0F1E                     	;# 
   893  0F1F                     	;# 
   894  0F20                     	;# 
   895  0F21                     	;# 
   896  0F22                     	;# 
   897  0F23                     	;# 
   898  0F24                     	;# 
   899  0F25                     	;# 
   900  0F26                     	;# 
   901  0F27                     	;# 
   902  0F28                     	;# 
   903  0F29                     	;# 
   904  0F2A                     	;# 
   905  0F2B                     	;# 
   906  0F2C                     	;# 
   907  0F2D                     	;# 
   908  0F2E                     	;# 
   909  0F2F                     	;# 
   910  0F8C                     	;# 
   911  0F8D                     	;# 
   912  0F91                     	;# 
   913  0F95                     	;# 
   914  0F96                     	;# 
   915  0F97                     	;# 
   916  0F9C                     	;# 
   917  0F9D                     	;# 
   918  0F9E                     	;# 
   919  0FE3                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0013                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0093                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  009F                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0111                     	;# 
   979  0112                     	;# 
   980  0113                     	;# 
   981  0114                     	;# 
   982  0115                     	;# 
   983  0116                     	;# 
   984  0117                     	;# 
   985  0118                     	;# 
   986  0119                     	;# 
   987  011D                     	;# 
   988  018C                     	;# 
   989  018D                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0194                     	;# 
   997  0195                     	;# 
   998  0196                     	;# 
   999  0199                     	;# 
  1000  019A                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019D                     	;# 
  1005  019E                     	;# 
  1006  019F                     	;# 
  1007  020C                     	;# 
  1008  020D                     	;# 
  1009  0211                     	;# 
  1010  0211                     	;# 
  1011  0212                     	;# 
  1012  0212                     	;# 
  1013  0213                     	;# 
  1014  0213                     	;# 
  1015  0214                     	;# 
  1016  0214                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0216                     	;# 
  1021  0216                     	;# 
  1022  0217                     	;# 
  1023  0217                     	;# 
  1024  0391                     	;# 
  1025  0392                     	;# 
  1026  0393                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0498                     	;# 
  1031  0498                     	;# 
  1032  0499                     	;# 
  1033  049A                     	;# 
  1034  049B                     	;# 
  1035  049B                     	;# 
  1036  049C                     	;# 
  1037  049E                     	;# 
  1038  049F                     	;# 
  1039  0611                     	;# 
  1040  0612                     	;# 
  1041  0613                     	;# 
  1042  0613                     	;# 
  1043  0614                     	;# 
  1044  0615                     	;# 
  1045  0616                     	;# 
  1046  0616                     	;# 
  1047  0617                     	;# 
  1048  0618                     	;# 
  1049  0619                     	;# 
  1050  0619                     	;# 
  1051  061A                     	;# 
  1052  061B                     	;# 
  1053  061C                     	;# 
  1054  061C                     	;# 
  1055  0691                     	;# 
  1056  0692                     	;# 
  1057  0693                     	;# 
  1058  0694                     	;# 
  1059  0695                     	;# 
  1060  0F0F                     	;# 
  1061  0F10                     	;# 
  1062  0F11                     	;# 
  1063  0F12                     	;# 
  1064  0F13                     	;# 
  1065  0F14                     	;# 
  1066  0F15                     	;# 
  1067  0F16                     	;# 
  1068  0F17                     	;# 
  1069  0F18                     	;# 
  1070  0F19                     	;# 
  1071  0F1A                     	;# 
  1072  0F1B                     	;# 
  1073  0F1C                     	;# 
  1074  0F1D                     	;# 
  1075  0F1E                     	;# 
  1076  0F1F                     	;# 
  1077  0F20                     	;# 
  1078  0F21                     	;# 
  1079  0F22                     	;# 
  1080  0F23                     	;# 
  1081  0F24                     	;# 
  1082  0F25                     	;# 
  1083  0F26                     	;# 
  1084  0F27                     	;# 
  1085  0F28                     	;# 
  1086  0F29                     	;# 
  1087  0F2A                     	;# 
  1088  0F2B                     	;# 
  1089  0F2C                     	;# 
  1090  0F2D                     	;# 
  1091  0F2E                     	;# 
  1092  0F2F                     	;# 
  1093  0F8C                     	;# 
  1094  0F8D                     	;# 
  1095  0F91                     	;# 
  1096  0F95                     	;# 
  1097  0F96                     	;# 
  1098  0F97                     	;# 
  1099  0F9C                     	;# 
  1100  0F9D                     	;# 
  1101  0F9E                     	;# 
  1102  0FE3                     	;# 
  1103  0FE4                     	;# 
  1104  0FE5                     	;# 
  1105  0FE6                     	;# 
  1106  0FE7                     	;# 
  1107  0FE8                     	;# 
  1108  0FE9                     	;# 
  1109  0FEA                     	;# 
  1110  0FEB                     	;# 
  1111  0FED                     	;# 
  1112  0FEE                     	;# 
  1113  0FEF                     	;# 
  1114  0000                     	;# 
  1115  0001                     	;# 
  1116  0002                     	;# 
  1117  0003                     	;# 
  1118  0004                     	;# 
  1119  0005                     	;# 
  1120  0006                     	;# 
  1121  0007                     	;# 
  1122  0008                     	;# 
  1123  0009                     	;# 
  1124  000A                     	;# 
  1125  000B                     	;# 
  1126  000C                     	;# 
  1127  000D                     	;# 
  1128  000E                     	;# 
  1129  0011                     	;# 
  1130  0012                     	;# 
  1131  0013                     	;# 
  1132  0015                     	;# 
  1133  0016                     	;# 
  1134  0016                     	;# 
  1135  0017                     	;# 
  1136  0018                     	;# 
  1137  0019                     	;# 
  1138  001A                     	;# 
  1139  001B                     	;# 
  1140  001C                     	;# 
  1141  008C                     	;# 
  1142  008D                     	;# 
  1143  008E                     	;# 
  1144  0091                     	;# 
  1145  0092                     	;# 
  1146  0093                     	;# 
  1147  0095                     	;# 
  1148  0096                     	;# 
  1149  0097                     	;# 
  1150  0099                     	;# 
  1151  009A                     	;# 
  1152  009B                     	;# 
  1153  009B                     	;# 
  1154  009C                     	;# 
  1155  009D                     	;# 
  1156  009E                     	;# 
  1157  009F                     	;# 
  1158  010C                     	;# 
  1159  010D                     	;# 
  1160  010E                     	;# 
  1161  0111                     	;# 
  1162  0112                     	;# 
  1163  0113                     	;# 
  1164  0114                     	;# 
  1165  0115                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  0118                     	;# 
  1169  0119                     	;# 
  1170  011D                     	;# 
  1171  018C                     	;# 
  1172  018D                     	;# 
  1173  018E                     	;# 
  1174  0191                     	;# 
  1175  0191                     	;# 
  1176  0192                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0194                     	;# 
  1180  0195                     	;# 
  1181  0196                     	;# 
  1182  0199                     	;# 
  1183  019A                     	;# 
  1184  019B                     	;# 
  1185  019B                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019E                     	;# 
  1189  019F                     	;# 
  1190  020C                     	;# 
  1191  020D                     	;# 
  1192  0211                     	;# 
  1193  0211                     	;# 
  1194  0212                     	;# 
  1195  0212                     	;# 
  1196  0213                     	;# 
  1197  0213                     	;# 
  1198  0214                     	;# 
  1199  0214                     	;# 
  1200  0215                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0216                     	;# 
  1204  0216                     	;# 
  1205  0217                     	;# 
  1206  0217                     	;# 
  1207  0391                     	;# 
  1208  0392                     	;# 
  1209  0393                     	;# 
  1210  0394                     	;# 
  1211  0395                     	;# 
  1212  0396                     	;# 
  1213  0498                     	;# 
  1214  0498                     	;# 
  1215  0499                     	;# 
  1216  049A                     	;# 
  1217  049B                     	;# 
  1218  049B                     	;# 
  1219  049C                     	;# 
  1220  049E                     	;# 
  1221  049F                     	;# 
  1222  0611                     	;# 
  1223  0612                     	;# 
  1224  0613                     	;# 
  1225  0613                     	;# 
  1226  0614                     	;# 
  1227  0615                     	;# 
  1228  0616                     	;# 
  1229  0616                     	;# 
  1230  0617                     	;# 
  1231  0618                     	;# 
  1232  0619                     	;# 
  1233  0619                     	;# 
  1234  061A                     	;# 
  1235  061B                     	;# 
  1236  061C                     	;# 
  1237  061C                     	;# 
  1238  0691                     	;# 
  1239  0692                     	;# 
  1240  0693                     	;# 
  1241  0694                     	;# 
  1242  0695                     	;# 
  1243  0F0F                     	;# 
  1244  0F10                     	;# 
  1245  0F11                     	;# 
  1246  0F12                     	;# 
  1247  0F13                     	;# 
  1248  0F14                     	;# 
  1249  0F15                     	;# 
  1250  0F16                     	;# 
  1251  0F17                     	;# 
  1252  0F18                     	;# 
  1253  0F19                     	;# 
  1254  0F1A                     	;# 
  1255  0F1B                     	;# 
  1256  0F1C                     	;# 
  1257  0F1D                     	;# 
  1258  0F1E                     	;# 
  1259  0F1F                     	;# 
  1260  0F20                     	;# 
  1261  0F21                     	;# 
  1262  0F22                     	;# 
  1263  0F23                     	;# 
  1264  0F24                     	;# 
  1265  0F25                     	;# 
  1266  0F26                     	;# 
  1267  0F27                     	;# 
  1268  0F28                     	;# 
  1269  0F29                     	;# 
  1270  0F2A                     	;# 
  1271  0F2B                     	;# 
  1272  0F2C                     	;# 
  1273  0F2D                     	;# 
  1274  0F2E                     	;# 
  1275  0F2F                     	;# 
  1276  0F8C                     	;# 
  1277  0F8D                     	;# 
  1278  0F91                     	;# 
  1279  0F95                     	;# 
  1280  0F96                     	;# 
  1281  0F97                     	;# 
  1282  0F9C                     	;# 
  1283  0F9D                     	;# 
  1284  0F9E                     	;# 
  1285  0FE3                     	;# 
  1286  0FE4                     	;# 
  1287  0FE5                     	;# 
  1288  0FE6                     	;# 
  1289  0FE7                     	;# 
  1290  0FE8                     	;# 
  1291  0FE9                     	;# 
  1292  0FEA                     	;# 
  1293  0FEB                     	;# 
  1294  0FED                     	;# 
  1295  0FEE                     	;# 
  1296  0FEF                     	;# 
  1297  0000                     	;# 
  1298  0001                     	;# 
  1299  0002                     	;# 
  1300  0003                     	;# 
  1301  0004                     	;# 
  1302  0005                     	;# 
  1303  0006                     	;# 
  1304  0007                     	;# 
  1305  0008                     	;# 
  1306  0009                     	;# 
  1307  000A                     	;# 
  1308  000B                     	;# 
  1309  000C                     	;# 
  1310  000D                     	;# 
  1311  000E                     	;# 
  1312  0011                     	;# 
  1313  0012                     	;# 
  1314  0013                     	;# 
  1315  0015                     	;# 
  1316  0016                     	;# 
  1317  0016                     	;# 
  1318  0017                     	;# 
  1319  0018                     	;# 
  1320  0019                     	;# 
  1321  001A                     	;# 
  1322  001B                     	;# 
  1323  001C                     	;# 
  1324  008C                     	;# 
  1325  008D                     	;# 
  1326  008E                     	;# 
  1327  0091                     	;# 
  1328  0092                     	;# 
  1329  0093                     	;# 
  1330  0095                     	;# 
  1331  0096                     	;# 
  1332  0097                     	;# 
  1333  0099                     	;# 
  1334  009A                     	;# 
  1335  009B                     	;# 
  1336  009B                     	;# 
  1337  009C                     	;# 
  1338  009D                     	;# 
  1339  009E                     	;# 
  1340  009F                     	;# 
  1341  010C                     	;# 
  1342  010D                     	;# 
  1343  010E                     	;# 
  1344  0111                     	;# 
  1345  0112                     	;# 
  1346  0113                     	;# 
  1347  0114                     	;# 
  1348  0115                     	;# 
  1349  0116                     	;# 
  1350  0117                     	;# 
  1351  0118                     	;# 
  1352  0119                     	;# 
  1353  011D                     	;# 
  1354  018C                     	;# 
  1355  018D                     	;# 
  1356  018E                     	;# 
  1357  0191                     	;# 
  1358  0191                     	;# 
  1359  0192                     	;# 
  1360  0193                     	;# 
  1361  0193                     	;# 
  1362  0194                     	;# 
  1363  0195                     	;# 
  1364  0196                     	;# 
  1365  0199                     	;# 
  1366  019A                     	;# 
  1367  019B                     	;# 
  1368  019B                     	;# 
  1369  019C                     	;# 
  1370  019D                     	;# 
  1371  019E                     	;# 
  1372  019F                     	;# 
  1373  020C                     	;# 
  1374  020D                     	;# 
  1375  0211                     	;# 
  1376  0211                     	;# 
  1377  0212                     	;# 
  1378  0212                     	;# 
  1379  0213                     	;# 
  1380  0213                     	;# 
  1381  0214                     	;# 
  1382  0214                     	;# 
  1383  0215                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0216                     	;# 
  1387  0216                     	;# 
  1388  0217                     	;# 
  1389  0217                     	;# 
  1390  0391                     	;# 
  1391  0392                     	;# 
  1392  0393                     	;# 
  1393  0394                     	;# 
  1394  0395                     	;# 
  1395  0396                     	;# 
  1396  0498                     	;# 
  1397  0498                     	;# 
  1398  0499                     	;# 
  1399  049A                     	;# 
  1400  049B                     	;# 
  1401  049B                     	;# 
  1402  049C                     	;# 
  1403  049E                     	;# 
  1404  049F                     	;# 
  1405  0611                     	;# 
  1406  0612                     	;# 
  1407  0613                     	;# 
  1408  0613                     	;# 
  1409  0614                     	;# 
  1410  0615                     	;# 
  1411  0616                     	;# 
  1412  0616                     	;# 
  1413  0617                     	;# 
  1414  0618                     	;# 
  1415  0619                     	;# 
  1416  0619                     	;# 
  1417  061A                     	;# 
  1418  061B                     	;# 
  1419  061C                     	;# 
  1420  061C                     	;# 
  1421  0691                     	;# 
  1422  0692                     	;# 
  1423  0693                     	;# 
  1424  0694                     	;# 
  1425  0695                     	;# 
  1426  0F0F                     	;# 
  1427  0F10                     	;# 
  1428  0F11                     	;# 
  1429  0F12                     	;# 
  1430  0F13                     	;# 
  1431  0F14                     	;# 
  1432  0F15                     	;# 
  1433  0F16                     	;# 
  1434  0F17                     	;# 
  1435  0F18                     	;# 
  1436  0F19                     	;# 
  1437  0F1A                     	;# 
  1438  0F1B                     	;# 
  1439  0F1C                     	;# 
  1440  0F1D                     	;# 
  1441  0F1E                     	;# 
  1442  0F1F                     	;# 
  1443  0F20                     	;# 
  1444  0F21                     	;# 
  1445  0F22                     	;# 
  1446  0F23                     	;# 
  1447  0F24                     	;# 
  1448  0F25                     	;# 
  1449  0F26                     	;# 
  1450  0F27                     	;# 
  1451  0F28                     	;# 
  1452  0F29                     	;# 
  1453  0F2A                     	;# 
  1454  0F2B                     	;# 
  1455  0F2C                     	;# 
  1456  0F2D                     	;# 
  1457  0F2E                     	;# 
  1458  0F2F                     	;# 
  1459  0F8C                     	;# 
  1460  0F8D                     	;# 
  1461  0F91                     	;# 
  1462  0F95                     	;# 
  1463  0F96                     	;# 
  1464  0F97                     	;# 
  1465  0F9C                     	;# 
  1466  0F9D                     	;# 
  1467  0F9E                     	;# 
  1468  0FE3                     	;# 
  1469  0FE4                     	;# 
  1470  0FE5                     	;# 
  1471  0FE6                     	;# 
  1472  0FE7                     	;# 
  1473  0FE8                     	;# 
  1474  0FE9                     	;# 
  1475  0FEA                     	;# 
  1476  0FEB                     	;# 
  1477  0FED                     	;# 
  1478  0FEE                     	;# 
  1479  0FEF                     	;# 
  1480  0000                     	;# 
  1481  0001                     	;# 
  1482  0002                     	;# 
  1483  0003                     	;# 
  1484  0004                     	;# 
  1485  0005                     	;# 
  1486  0006                     	;# 
  1487  0007                     	;# 
  1488  0008                     	;# 
  1489  0009                     	;# 
  1490  000A                     	;# 
  1491  000B                     	;# 
  1492  000C                     	;# 
  1493  000D                     	;# 
  1494  000E                     	;# 
  1495  0011                     	;# 
  1496  0012                     	;# 
  1497  0013                     	;# 
  1498  0015                     	;# 
  1499  0016                     	;# 
  1500  0016                     	;# 
  1501  0017                     	;# 
  1502  0018                     	;# 
  1503  0019                     	;# 
  1504  001A                     	;# 
  1505  001B                     	;# 
  1506  001C                     	;# 
  1507  008C                     	;# 
  1508  008D                     	;# 
  1509  008E                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0095                     	;# 
  1514  0096                     	;# 
  1515  0097                     	;# 
  1516  0099                     	;# 
  1517  009A                     	;# 
  1518  009B                     	;# 
  1519  009B                     	;# 
  1520  009C                     	;# 
  1521  009D                     	;# 
  1522  009E                     	;# 
  1523  009F                     	;# 
  1524  010C                     	;# 
  1525  010D                     	;# 
  1526  010E                     	;# 
  1527  0111                     	;# 
  1528  0112                     	;# 
  1529  0113                     	;# 
  1530  0114                     	;# 
  1531  0115                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  0118                     	;# 
  1535  0119                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019C                     	;# 
  1553  019D                     	;# 
  1554  019E                     	;# 
  1555  019F                     	;# 
  1556  020C                     	;# 
  1557  020D                     	;# 
  1558  0211                     	;# 
  1559  0211                     	;# 
  1560  0212                     	;# 
  1561  0212                     	;# 
  1562  0213                     	;# 
  1563  0213                     	;# 
  1564  0214                     	;# 
  1565  0214                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0216                     	;# 
  1570  0216                     	;# 
  1571  0217                     	;# 
  1572  0217                     	;# 
  1573  0391                     	;# 
  1574  0392                     	;# 
  1575  0393                     	;# 
  1576  0394                     	;# 
  1577  0395                     	;# 
  1578  0396                     	;# 
  1579  0498                     	;# 
  1580  0498                     	;# 
  1581  0499                     	;# 
  1582  049A                     	;# 
  1583  049B                     	;# 
  1584  049B                     	;# 
  1585  049C                     	;# 
  1586  049E                     	;# 
  1587  049F                     	;# 
  1588  0611                     	;# 
  1589  0612                     	;# 
  1590  0613                     	;# 
  1591  0613                     	;# 
  1592  0614                     	;# 
  1593  0615                     	;# 
  1594  0616                     	;# 
  1595  0616                     	;# 
  1596  0617                     	;# 
  1597  0618                     	;# 
  1598  0619                     	;# 
  1599  0619                     	;# 
  1600  061A                     	;# 
  1601  061B                     	;# 
  1602  061C                     	;# 
  1603  061C                     	;# 
  1604  0691                     	;# 
  1605  0692                     	;# 
  1606  0693                     	;# 
  1607  0694                     	;# 
  1608  0695                     	;# 
  1609  0F0F                     	;# 
  1610  0F10                     	;# 
  1611  0F11                     	;# 
  1612  0F12                     	;# 
  1613  0F13                     	;# 
  1614  0F14                     	;# 
  1615  0F15                     	;# 
  1616  0F16                     	;# 
  1617  0F17                     	;# 
  1618  0F18                     	;# 
  1619  0F19                     	;# 
  1620  0F1A                     	;# 
  1621  0F1B                     	;# 
  1622  0F1C                     	;# 
  1623  0F1D                     	;# 
  1624  0F1E                     	;# 
  1625  0F1F                     	;# 
  1626  0F20                     	;# 
  1627  0F21                     	;# 
  1628  0F22                     	;# 
  1629  0F23                     	;# 
  1630  0F24                     	;# 
  1631  0F25                     	;# 
  1632  0F26                     	;# 
  1633  0F27                     	;# 
  1634  0F28                     	;# 
  1635  0F29                     	;# 
  1636  0F2A                     	;# 
  1637  0F2B                     	;# 
  1638  0F2C                     	;# 
  1639  0F2D                     	;# 
  1640  0F2E                     	;# 
  1641  0F2F                     	;# 
  1642  0F8C                     	;# 
  1643  0F8D                     	;# 
  1644  0F91                     	;# 
  1645  0F95                     	;# 
  1646  0F96                     	;# 
  1647  0F97                     	;# 
  1648  0F9C                     	;# 
  1649  0F9D                     	;# 
  1650  0F9E                     	;# 
  1651  0FE3                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  0011                     	;# 
  1679  0012                     	;# 
  1680  0013                     	;# 
  1681  0015                     	;# 
  1682  0016                     	;# 
  1683  0016                     	;# 
  1684  0017                     	;# 
  1685  0018                     	;# 
  1686  0019                     	;# 
  1687  001A                     	;# 
  1688  001B                     	;# 
  1689  001C                     	;# 
  1690  008C                     	;# 
  1691  008D                     	;# 
  1692  008E                     	;# 
  1693  0091                     	;# 
  1694  0092                     	;# 
  1695  0093                     	;# 
  1696  0095                     	;# 
  1697  0096                     	;# 
  1698  0097                     	;# 
  1699  0099                     	;# 
  1700  009A                     	;# 
  1701  009B                     	;# 
  1702  009B                     	;# 
  1703  009C                     	;# 
  1704  009D                     	;# 
  1705  009E                     	;# 
  1706  009F                     	;# 
  1707  010C                     	;# 
  1708  010D                     	;# 
  1709  010E                     	;# 
  1710  0111                     	;# 
  1711  0112                     	;# 
  1712  0113                     	;# 
  1713  0114                     	;# 
  1714  0115                     	;# 
  1715  0116                     	;# 
  1716  0117                     	;# 
  1717  0118                     	;# 
  1718  0119                     	;# 
  1719  011D                     	;# 
  1720  018C                     	;# 
  1721  018D                     	;# 
  1722  018E                     	;# 
  1723  0191                     	;# 
  1724  0191                     	;# 
  1725  0192                     	;# 
  1726  0193                     	;# 
  1727  0193                     	;# 
  1728  0194                     	;# 
  1729  0195                     	;# 
  1730  0196                     	;# 
  1731  0199                     	;# 
  1732  019A                     	;# 
  1733  019B                     	;# 
  1734  019B                     	;# 
  1735  019C                     	;# 
  1736  019D                     	;# 
  1737  019E                     	;# 
  1738  019F                     	;# 
  1739  020C                     	;# 
  1740  020D                     	;# 
  1741  0211                     	;# 
  1742  0211                     	;# 
  1743  0212                     	;# 
  1744  0212                     	;# 
  1745  0213                     	;# 
  1746  0213                     	;# 
  1747  0214                     	;# 
  1748  0214                     	;# 
  1749  0215                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0216                     	;# 
  1753  0216                     	;# 
  1754  0217                     	;# 
  1755  0217                     	;# 
  1756  0391                     	;# 
  1757  0392                     	;# 
  1758  0393                     	;# 
  1759  0394                     	;# 
  1760  0395                     	;# 
  1761  0396                     	;# 
  1762  0498                     	;# 
  1763  0498                     	;# 
  1764  0499                     	;# 
  1765  049A                     	;# 
  1766  049B                     	;# 
  1767  049B                     	;# 
  1768  049C                     	;# 
  1769  049E                     	;# 
  1770  049F                     	;# 
  1771  0611                     	;# 
  1772  0612                     	;# 
  1773  0613                     	;# 
  1774  0613                     	;# 
  1775  0614                     	;# 
  1776  0615                     	;# 
  1777  0616                     	;# 
  1778  0616                     	;# 
  1779  0617                     	;# 
  1780  0618                     	;# 
  1781  0619                     	;# 
  1782  0619                     	;# 
  1783  061A                     	;# 
  1784  061B                     	;# 
  1785  061C                     	;# 
  1786  061C                     	;# 
  1787  0691                     	;# 
  1788  0692                     	;# 
  1789  0693                     	;# 
  1790  0694                     	;# 
  1791  0695                     	;# 
  1792  0F0F                     	;# 
  1793  0F10                     	;# 
  1794  0F11                     	;# 
  1795  0F12                     	;# 
  1796  0F13                     	;# 
  1797  0F14                     	;# 
  1798  0F15                     	;# 
  1799  0F16                     	;# 
  1800  0F17                     	;# 
  1801  0F18                     	;# 
  1802  0F19                     	;# 
  1803  0F1A                     	;# 
  1804  0F1B                     	;# 
  1805  0F1C                     	;# 
  1806  0F1D                     	;# 
  1807  0F1E                     	;# 
  1808  0F1F                     	;# 
  1809  0F20                     	;# 
  1810  0F21                     	;# 
  1811  0F22                     	;# 
  1812  0F23                     	;# 
  1813  0F24                     	;# 
  1814  0F25                     	;# 
  1815  0F26                     	;# 
  1816  0F27                     	;# 
  1817  0F28                     	;# 
  1818  0F29                     	;# 
  1819  0F2A                     	;# 
  1820  0F2B                     	;# 
  1821  0F2C                     	;# 
  1822  0F2D                     	;# 
  1823  0F2E                     	;# 
  1824  0F2F                     	;# 
  1825  0F8C                     	;# 
  1826  0F8D                     	;# 
  1827  0F91                     	;# 
  1828  0F95                     	;# 
  1829  0F96                     	;# 
  1830  0F97                     	;# 
  1831  0F9C                     	;# 
  1832  0F9D                     	;# 
  1833  0F9E                     	;# 
  1834  0FE3                     	;# 
  1835  0FE4                     	;# 
  1836  0FE5                     	;# 
  1837  0FE6                     	;# 
  1838  0FE7                     	;# 
  1839  0FE8                     	;# 
  1840  0FE9                     	;# 
  1841  0FEA                     	;# 
  1842  0FEB                     	;# 
  1843  0FED                     	;# 
  1844  0FEE                     	;# 
  1845  0FEF                     	;# 
  1846  0000                     	;# 
  1847  0001                     	;# 
  1848  0002                     	;# 
  1849  0003                     	;# 
  1850  0004                     	;# 
  1851  0005                     	;# 
  1852  0006                     	;# 
  1853  0007                     	;# 
  1854  0008                     	;# 
  1855  0009                     	;# 
  1856  000A                     	;# 
  1857  000B                     	;# 
  1858  000C                     	;# 
  1859  000D                     	;# 
  1860  000E                     	;# 
  1861  0011                     	;# 
  1862  0012                     	;# 
  1863  0013                     	;# 
  1864  0015                     	;# 
  1865  0016                     	;# 
  1866  0016                     	;# 
  1867  0017                     	;# 
  1868  0018                     	;# 
  1869  0019                     	;# 
  1870  001A                     	;# 
  1871  001B                     	;# 
  1872  001C                     	;# 
  1873  008C                     	;# 
  1874  008D                     	;# 
  1875  008E                     	;# 
  1876  0091                     	;# 
  1877  0092                     	;# 
  1878  0093                     	;# 
  1879  0095                     	;# 
  1880  0096                     	;# 
  1881  0097                     	;# 
  1882  0099                     	;# 
  1883  009A                     	;# 
  1884  009B                     	;# 
  1885  009B                     	;# 
  1886  009C                     	;# 
  1887  009D                     	;# 
  1888  009E                     	;# 
  1889  009F                     	;# 
  1890  010C                     	;# 
  1891  010D                     	;# 
  1892  010E                     	;# 
  1893  0111                     	;# 
  1894  0112                     	;# 
  1895  0113                     	;# 
  1896  0114                     	;# 
  1897  0115                     	;# 
  1898  0116                     	;# 
  1899  0117                     	;# 
  1900  0118                     	;# 
  1901  0119                     	;# 
  1902  011D                     	;# 
  1903  018C                     	;# 
  1904  018D                     	;# 
  1905  018E                     	;# 
  1906  0191                     	;# 
  1907  0191                     	;# 
  1908  0192                     	;# 
  1909  0193                     	;# 
  1910  0193                     	;# 
  1911  0194                     	;# 
  1912  0195                     	;# 
  1913  0196                     	;# 
  1914  0199                     	;# 
  1915  019A                     	;# 
  1916  019B                     	;# 
  1917  019B                     	;# 
  1918  019C                     	;# 
  1919  019D                     	;# 
  1920  019E                     	;# 
  1921  019F                     	;# 
  1922  020C                     	;# 
  1923  020D                     	;# 
  1924  0211                     	;# 
  1925  0211                     	;# 
  1926  0212                     	;# 
  1927  0212                     	;# 
  1928  0213                     	;# 
  1929  0213                     	;# 
  1930  0214                     	;# 
  1931  0214                     	;# 
  1932  0215                     	;# 
  1933  0215                     	;# 
  1934  0215                     	;# 
  1935  0216                     	;# 
  1936  0216                     	;# 
  1937  0217                     	;# 
  1938  0217                     	;# 
  1939  0391                     	;# 
  1940  0392                     	;# 
  1941  0393                     	;# 
  1942  0394                     	;# 
  1943  0395                     	;# 
  1944  0396                     	;# 
  1945  0498                     	;# 
  1946  0498                     	;# 
  1947  0499                     	;# 
  1948  049A                     	;# 
  1949  049B                     	;# 
  1950  049B                     	;# 
  1951  049C                     	;# 
  1952  049E                     	;# 
  1953  049F                     	;# 
  1954  0611                     	;# 
  1955  0612                     	;# 
  1956  0613                     	;# 
  1957  0613                     	;# 
  1958  0614                     	;# 
  1959  0615                     	;# 
  1960  0616                     	;# 
  1961  0616                     	;# 
  1962  0617                     	;# 
  1963  0618                     	;# 
  1964  0619                     	;# 
  1965  0619                     	;# 
  1966  061A                     	;# 
  1967  061B                     	;# 
  1968  061C                     	;# 
  1969  061C                     	;# 
  1970  0691                     	;# 
  1971  0692                     	;# 
  1972  0693                     	;# 
  1973  0694                     	;# 
  1974  0695                     	;# 
  1975  0F0F                     	;# 
  1976  0F10                     	;# 
  1977  0F11                     	;# 
  1978  0F12                     	;# 
  1979  0F13                     	;# 
  1980  0F14                     	;# 
  1981  0F15                     	;# 
  1982  0F16                     	;# 
  1983  0F17                     	;# 
  1984  0F18                     	;# 
  1985  0F19                     	;# 
  1986  0F1A                     	;# 
  1987  0F1B                     	;# 
  1988  0F1C                     	;# 
  1989  0F1D                     	;# 
  1990  0F1E                     	;# 
  1991  0F1F                     	;# 
  1992  0F20                     	;# 
  1993  0F21                     	;# 
  1994  0F22                     	;# 
  1995  0F23                     	;# 
  1996  0F24                     	;# 
  1997  0F25                     	;# 
  1998  0F26                     	;# 
  1999  0F27                     	;# 
  2000  0F28                     	;# 
  2001  0F29                     	;# 
  2002  0F2A                     	;# 
  2003  0F2B                     	;# 
  2004  0F2C                     	;# 
  2005  0F2D                     	;# 
  2006  0F2E                     	;# 
  2007  0F2F                     	;# 
  2008  0F8C                     	;# 
  2009  0F8D                     	;# 
  2010  0F91                     	;# 
  2011  0F95                     	;# 
  2012  0F96                     	;# 
  2013  0F97                     	;# 
  2014  0F9C                     	;# 
  2015  0F9D                     	;# 
  2016  0F9E                     	;# 
  2017  0FE3                     	;# 
  2018  0FE4                     	;# 
  2019  0FE5                     	;# 
  2020  0FE6                     	;# 
  2021  0FE7                     	;# 
  2022  0FE8                     	;# 
  2023  0FE9                     	;# 
  2024  0FEA                     	;# 
  2025  0FEB                     	;# 
  2026  0FED                     	;# 
  2027  0FEE                     	;# 
  2028  0FEF                     	;# 
  2029  0000                     	;# 
  2030  0001                     	;# 
  2031  0002                     	;# 
  2032  0003                     	;# 
  2033  0004                     	;# 
  2034  0005                     	;# 
  2035  0006                     	;# 
  2036  0007                     	;# 
  2037  0008                     	;# 
  2038  0009                     	;# 
  2039  000A                     	;# 
  2040  000B                     	;# 
  2041  000C                     	;# 
  2042  000D                     	;# 
  2043  000E                     	;# 
  2044  0011                     	;# 
  2045  0012                     	;# 
  2046  0013                     	;# 
  2047  0015                     	;# 
  2048  0016                     	;# 
  2049  0016                     	;# 
  2050  0017                     	;# 
  2051  0018                     	;# 
  2052  0019                     	;# 
  2053  001A                     	;# 
  2054  001B                     	;# 
  2055  001C                     	;# 
  2056  008C                     	;# 
  2057  008D                     	;# 
  2058  008E                     	;# 
  2059  0091                     	;# 
  2060  0092                     	;# 
  2061  0093                     	;# 
  2062  0095                     	;# 
  2063  0096                     	;# 
  2064  0097                     	;# 
  2065  0099                     	;# 
  2066  009A                     	;# 
  2067  009B                     	;# 
  2068  009B                     	;# 
  2069  009C                     	;# 
  2070  009D                     	;# 
  2071  009E                     	;# 
  2072  009F                     	;# 
  2073  010C                     	;# 
  2074  010D                     	;# 
  2075  010E                     	;# 
  2076  0111                     	;# 
  2077  0112                     	;# 
  2078  0113                     	;# 
  2079  0114                     	;# 
  2080  0115                     	;# 
  2081  0116                     	;# 
  2082  0117                     	;# 
  2083  0118                     	;# 
  2084  0119                     	;# 
  2085  011D                     	;# 
  2086  018C                     	;# 
  2087  018D                     	;# 
  2088  018E                     	;# 
  2089  0191                     	;# 
  2090  0191                     	;# 
  2091  0192                     	;# 
  2092  0193                     	;# 
  2093  0193                     	;# 
  2094  0194                     	;# 
  2095  0195                     	;# 
  2096  0196                     	;# 
  2097  0199                     	;# 
  2098  019A                     	;# 
  2099  019B                     	;# 
  2100  019B                     	;# 
  2101  019C                     	;# 
  2102  019D                     	;# 
  2103  019E                     	;# 
  2104  019F                     	;# 
  2105  020C                     	;# 
  2106  020D                     	;# 
  2107  0211                     	;# 
  2108  0211                     	;# 
  2109  0212                     	;# 
  2110  0212                     	;# 
  2111  0213                     	;# 
  2112  0213                     	;# 
  2113  0214                     	;# 
  2114  0214                     	;# 
  2115  0215                     	;# 
  2116  0215                     	;# 
  2117  0215                     	;# 
  2118  0216                     	;# 
  2119  0216                     	;# 
  2120  0217                     	;# 
  2121  0217                     	;# 
  2122  0391                     	;# 
  2123  0392                     	;# 
  2124  0393                     	;# 
  2125  0394                     	;# 
  2126  0395                     	;# 
  2127  0396                     	;# 
  2128  0498                     	;# 
  2129  0498                     	;# 
  2130  0499                     	;# 
  2131  049A                     	;# 
  2132  049B                     	;# 
  2133  049B                     	;# 
  2134  049C                     	;# 
  2135  049E                     	;# 
  2136  049F                     	;# 
  2137  0611                     	;# 
  2138  0612                     	;# 
  2139  0613                     	;# 
  2140  0613                     	;# 
  2141  0614                     	;# 
  2142  0615                     	;# 
  2143  0616                     	;# 
  2144  0616                     	;# 
  2145  0617                     	;# 
  2146  0618                     	;# 
  2147  0619                     	;# 
  2148  0619                     	;# 
  2149  061A                     	;# 
  2150  061B                     	;# 
  2151  061C                     	;# 
  2152  061C                     	;# 
  2153  0691                     	;# 
  2154  0692                     	;# 
  2155  0693                     	;# 
  2156  0694                     	;# 
  2157  0695                     	;# 
  2158  0F0F                     	;# 
  2159  0F10                     	;# 
  2160  0F11                     	;# 
  2161  0F12                     	;# 
  2162  0F13                     	;# 
  2163  0F14                     	;# 
  2164  0F15                     	;# 
  2165  0F16                     	;# 
  2166  0F17                     	;# 
  2167  0F18                     	;# 
  2168  0F19                     	;# 
  2169  0F1A                     	;# 
  2170  0F1B                     	;# 
  2171  0F1C                     	;# 
  2172  0F1D                     	;# 
  2173  0F1E                     	;# 
  2174  0F1F                     	;# 
  2175  0F20                     	;# 
  2176  0F21                     	;# 
  2177  0F22                     	;# 
  2178  0F23                     	;# 
  2179  0F24                     	;# 
  2180  0F25                     	;# 
  2181  0F26                     	;# 
  2182  0F27                     	;# 
  2183  0F28                     	;# 
  2184  0F29                     	;# 
  2185  0F2A                     	;# 
  2186  0F2B                     	;# 
  2187  0F2C                     	;# 
  2188  0F2D                     	;# 
  2189  0F2E                     	;# 
  2190  0F2F                     	;# 
  2191  0F8C                     	;# 
  2192  0F8D                     	;# 
  2193  0F91                     	;# 
  2194  0F95                     	;# 
  2195  0F96                     	;# 
  2196  0F97                     	;# 
  2197  0F9C                     	;# 
  2198  0F9D                     	;# 
  2199  0F9E                     	;# 
  2200  0FE3                     	;# 
  2201  0FE4                     	;# 
  2202  0FE5                     	;# 
  2203  0FE6                     	;# 
  2204  0FE7                     	;# 
  2205  0FE8                     	;# 
  2206  0FE9                     	;# 
  2207  0FEA                     	;# 
  2208  0FEB                     	;# 
  2209  0FED                     	;# 
  2210  0FEE                     	;# 
  2211  0FEF                     	;# 
  2212                           
  2213                           	psect	strings
  2214  0600                     __pstrings:	
  2215  0600                     __stringtab:	
  2216  0600  3400               	retlw	0
  2217  0601                     __end_of__stringtab:	
  2218  0601                     _mrfRegset_InitCnt:	
  2219  0601  3410               	retlw	16
  2220  0602                     __end_of_mrfRegset_InitCnt:	
  2221  0602                     _mrfRegset_RxCnt:	
  2222  0602  3406               	retlw	6
  2223  0603                     __end_of_mrfRegset_RxCnt:	
  2224  0603                     _mrfRegset_TxCnt:	
  2225  0603  3404               	retlw	4
  2226  0604                     __end_of_mrfRegset_TxCnt:	
  2227  0604                     _mrfRegset_Init:	
  2228  0604  34CA               	retlw	202
  2229  0605  3471               	retlw	113
  2230  0606  34CA               	retlw	202
  2231  0607  3473               	retlw	115
  2232  0608  3480               	retlw	128
  2233  0609  3428               	retlw	40
  2234  060A  34C4               	retlw	196
  2235  060B  34E7               	retlw	231
  2236  060C  34A8               	retlw	168
  2237  060D  3460               	retlw	96
  2238  060E  34C6               	retlw	198
  2239  060F  3405               	retlw	5
  2240  0610  3482               	retlw	130
  2241  0611  3400               	retlw	0
  2242  0612  3490               	retlw	144
  2243  0613  3462               	retlw	98
  2244  0614  3498               	retlw	152
  2245  0615  3490               	retlw	144
  2246  0616  34C2               	retlw	194
  2247  0617  34AC               	retlw	172
  2248  0618  3482               	retlw	130
  2249  0619  3420               	retlw	32
  2250  061A  3455               	retlw	85
  2251  061B  3400               	retlw	0
  2252  061C  3482               	retlw	130
  2253  061D  3480               	retlw	128
  2254  061E  3480               	retlw	128
  2255  061F  3468               	retlw	104
  2256  0620  34CA               	retlw	202
  2257  0621  3471               	retlw	113
  2258  0622  34CA               	retlw	202
  2259  0623  3473               	retlw	115
  2260  0624                     __end_of_mrfRegset_Init:	
  2261  0624                     _mrfRegset_Rx:	
  2262  0624  3482               	retlw	130
  2263  0625  3400               	retlw	0
  2264  0626  34CA               	retlw	202
  2265  0627  3471               	retlw	113
  2266  0628  3480               	retlw	128
  2267  0629  3428               	retlw	40
  2268  062A  3482               	retlw	130
  2269  062B  3480               	retlw	128
  2270  062C  3480               	retlw	128
  2271  062D  3468               	retlw	104
  2272  062E  34CA               	retlw	202
  2273  062F  3473               	retlw	115
  2274  0630                     __end_of_mrfRegset_Rx:	
  2275  0630                     _mrfRegset_Tx:	
  2276  0630  3482               	retlw	130
  2277  0631  3400               	retlw	0
  2278  0632  34CA               	retlw	202
  2279  0633  3471               	retlw	113
  2280  0634  3480               	retlw	128
  2281  0635  34A8               	retlw	168
  2282  0636  3482               	retlw	130
  2283  0637  3420               	retlw	32
  2284  0638                     __end_of_mrfRegset_Tx:	
  2285  000B                     _INTCONbits	set	11
  2286  000C                     _PORTAbits	set	12
  2287  000E                     _PORTCbits	set	14
  2288  009D                     _ADCON0	set	157
  2289  009E                     _ADCON1	set	158
  2290  009F                     _ADCON2	set	159
  2291  0095                     _OPTION_REGbits	set	149
  2292  0099                     _OSCCON	set	153
  2293  008C                     _TRISAbits	set	140
  2294  008D                     _TRISBbits	set	141
  2295  008E                     _TRISCbits	set	142
  2296  0117                     _FVRCON	set	279
  2297  010C                     _LATAbits	set	268
  2298  010D                     _LATBbits	set	269
  2299  010E                     _LATCbits	set	270
  2300  018C                     _ANSELA	set	396
  2301  018D                     _ANSELB	set	397
  2302  018E                     _ANSELC	set	398
  2303  020C                     _WPUAbits	set	524
  2304                           
  2305                           ; #config settings
  2306  0000                     
  2307                           	psect	cinit
  2308  0016                     start_initialization:	
  2309  0016                     __initialization:	
  2310                           
  2311                           ; Clear objects allocated to BANK0
  2312  0016  01AE               	clrf	__pbssBANK0& (0+127)
  2313  0017  01AF               	clrf	(__pbssBANK0+1)& (0+127)
  2314                           
  2315                           ; Clear objects allocated to BANK1
  2316  0018  30A0               	movlw	low __pbssBANK1
  2317  0019  0084               	movwf	4
  2318  001A  3000               	movlw	high __pbssBANK1
  2319  001B  0085               	movwf	5
  2320  001C  304F               	movlw	79
  2321  001D  3186  2638         	fcall	clear_ram0
  2322  001F                     end_of_initialization:	
  2323                           ;End of C runtime variable initialization code
  2324                           
  2325  001F                     __end_of__initialization:	
  2326  001F  0020               	movlb	0
  2327  0020  3180  284D         	ljmp	_main	;jump to C main() function
  2328                           
  2329                           	psect	bssBANK0
  2330  002E                     __pbssBANK0:	
  2331  002E                     _mrf49Status:	
  2332  002E                     	ds	2
  2333                           
  2334                           	psect	bssBANK1
  2335  00A0                     __pbssBANK1:	
  2336  00A0                     _rfTrcvStatus:	
  2337  00A0                     	ds	79
  2338                           
  2339                           	psect	clrtext
  2340  0638                     clear_ram0:	
  2341                           ;	Called with FSR0 containing the base address, and
  2342                           ;	WREG with the size to clear
  2343                           
  2344  0638  0064               	clrwdt	;clear the watchdog before getting into this loop
  2345  0639                     clrloop0:	
  2346  0639  0180               	clrf	0	;clear RAM location pointed to by FSR
  2347  063A  3101               	addfsr 0,1
  2348  063B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2349  063C  2E39               	goto	clrloop0	;have we reached the end yet?
  2350  063D  3400               	retlw	0	;all done for this memory range, return
  2351                           
  2352                           	psect	cstackCOMMON
  2353  0070                     __pcstackCOMMON:	
  2354  0070                     ?_HandlePacket:	
  2355  0070                     ?_AdcInit:	
  2356                           ; 0 bytes @ 0x0
  2357                           
  2358  0070                     ?_ExtIntInit:	
  2359                           ; 0 bytes @ 0x0
  2360                           
  2361  0070                     ?_extInt:	
  2362                           ; 0 bytes @ 0x0
  2363                           
  2364  0070                     ?_Mrf49xaModeRx:	
  2365                           ; 0 bytes @ 0x0
  2366                           
  2367  0070                     ?_Mrf49xaModeTx:	
  2368                           ; 0 bytes @ 0x0
  2369                           
  2370  0070                     ?_Mrf49xaInit:	
  2371                           ; 0 bytes @ 0x0
  2372                           
  2373  0070                     ?_Mrf49SpiTx:	
  2374                           ; 0 bytes @ 0x0
  2375                           
  2376  0070                     ?_Mrf49RxSts:	
  2377                           ; 0 bytes @ 0x0
  2378                           
  2379  0070                     ?_Mrf49TxByte:	
  2380                           ; 0 bytes @ 0x0
  2381                           
  2382  0070                     ?_Mrf49xaTxAck:	
  2383                           ; 0 bytes @ 0x0
  2384                           
  2385  0070                     ?_Mrf49xaFreePacket:	
  2386                           ; 0 bytes @ 0x0
  2387                           
  2388  0070                     ?_Mrf49xaTick:	
  2389                           ; 0 bytes @ 0x0
  2390                           
  2391  0070                     ?_SysInitGpio:	
  2392                           ; 0 bytes @ 0x0
  2393                           
  2394  0070                     ?_main:	
  2395                           ; 0 bytes @ 0x0
  2396                           
  2397  0070                     ?i1_Mrf49xaModeRx:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0070                     ?i1_Mrf49SpiTx:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0070                     ??i1_Mrf49SpiTx:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0070                     ??i1_Mrf49SpiRx:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0070                     ?i1_Mrf49RxSts:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0070                     ?i1_Mrf49TxByte:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0070                     ?_Mrf49xaServe:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0070                     ?_Mrf49SpiRx:	
  2419                           ; 1 bytes @ 0x0
  2420                           
  2421  0070                     ?_Mrf49RxCmd:	
  2422                           ; 1 bytes @ 0x0
  2423                           
  2424  0070                     ?_Mrf49RxByte:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0070                     ?_Mrf49xaPacketPending:	
  2428                           ; 1 bytes @ 0x0
  2429                           
  2430  0070                     ?_Mrf49xaRxPacket:	
  2431                           ; 1 bytes @ 0x0
  2432                           
  2433  0070                     ?i1_Mrf49SpiRx:	
  2434                           ; 1 bytes @ 0x0
  2435                           
  2436  0070                     ?i1_Mrf49RxCmd:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0070                     ?i1_Mrf49RxByte:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0070                     ?i1_Mrf49xaServe:	
  2443                           ; 1 bytes @ 0x0
  2444                           
  2445  0070                     i1Mrf49SpiTx@byte:	
  2446                           ; 1 bytes @ 0x0
  2447                           
  2448  0070                     i1Mrf49SpiRx@data:	
  2449                           ; 1 bytes @ 0x0
  2450                           
  2451                           
  2452                           ; 1 bytes @ 0x0
  2453  0070                     	ds	1
  2454  0071                     ?i1_Mrf49TxCmd:	
  2455  0071                     ??i1_Mrf49RxCmd:	
  2456                           ; 0 bytes @ 0x1
  2457                           
  2458  0071                     ??i1_Mrf49RxSts:	
  2459                           ; 0 bytes @ 0x1
  2460                           
  2461  0071                     i1Mrf49TxCmd@val:	
  2462                           ; 0 bytes @ 0x1
  2463                           
  2464  0071                     i1Mrf49RxCmd@cmd:	
  2465                           ; 1 bytes @ 0x1
  2466                           
  2467                           
  2468                           ; 1 bytes @ 0x1
  2469  0071                     	ds	1
  2470  0072                     ??i1_Mrf49TxCmd:	
  2471  0072                     i1Mrf49TxCmd@cmd:	
  2472                           ; 0 bytes @ 0x2
  2473                           
  2474  0072                     i1Mrf49RxCmd@val:	
  2475                           ; 1 bytes @ 0x2
  2476                           
  2477                           
  2478                           ; 1 bytes @ 0x2
  2479  0072                     	ds	1
  2480  0073                     ??i1_Mrf49xaModeRx:	
  2481  0073                     ??i1_Mrf49RxByte:	
  2482                           ; 0 bytes @ 0x3
  2483                           
  2484  0073                     ??i1_Mrf49TxByte:	
  2485                           ; 0 bytes @ 0x3
  2486                           
  2487  0073                     i1Mrf49xaModeRx@k:	
  2488                           ; 0 bytes @ 0x3
  2489                           
  2490  0073                     i1Mrf49TxByte@byte:	
  2491                           ; 1 bytes @ 0x3
  2492                           
  2493                           
  2494                           ; 1 bytes @ 0x3
  2495  0073                     	ds	1
  2496  0074                     ??i1_Mrf49xaServe:	
  2497                           
  2498                           ; 0 bytes @ 0x4
  2499  0074                     	ds	1
  2500  0075                     i1Mrf49xaServe@data:	
  2501                           
  2502                           ; 1 bytes @ 0x5
  2503  0075                     	ds	1
  2504  0076                     ??_extInt:	
  2505                           
  2506                           ; 0 bytes @ 0x6
  2507  0076                     	ds	1
  2508  0077                     ??_Mrf49TxCmd:	
  2509  0077                     ??_HandlePacket:	
  2510                           ; 0 bytes @ 0x7
  2511                           
  2512  0077                     ??_AdcInit:	
  2513                           ; 0 bytes @ 0x7
  2514                           
  2515  0077                     ??_ExtIntInit:	
  2516                           ; 0 bytes @ 0x7
  2517                           
  2518  0077                     ??_Mrf49xaModeRx:	
  2519                           ; 0 bytes @ 0x7
  2520                           
  2521  0077                     ??_Mrf49xaModeTx:	
  2522                           ; 0 bytes @ 0x7
  2523                           
  2524  0077                     ??_Mrf49SpiTx:	
  2525                           ; 0 bytes @ 0x7
  2526                           
  2527  0077                     ??_Mrf49SpiRx:	
  2528                           ; 0 bytes @ 0x7
  2529                           
  2530  0077                     ??_Mrf49RxCmd:	
  2531                           ; 0 bytes @ 0x7
  2532                           
  2533  0077                     ??_Mrf49RxSts:	
  2534                           ; 0 bytes @ 0x7
  2535                           
  2536  0077                     ??_Mrf49RxByte:	
  2537                           ; 0 bytes @ 0x7
  2538                           
  2539  0077                     ??_Mrf49TxByte:	
  2540                           ; 0 bytes @ 0x7
  2541                           
  2542  0077                     ??_Mrf49xaPacketPending:	
  2543                           ; 0 bytes @ 0x7
  2544                           
  2545  0077                     ??_Mrf49xaTxAck:	
  2546                           ; 0 bytes @ 0x7
  2547                           
  2548  0077                     ??_Mrf49xaFreePacket:	
  2549                           ; 0 bytes @ 0x7
  2550                           
  2551  0077                     ??_Mrf49xaRxPacket:	
  2552                           ; 0 bytes @ 0x7
  2553                           
  2554  0077                     ??_SysInitGpio:	
  2555                           ; 0 bytes @ 0x7
  2556                           
  2557  0077                     ??_main:	
  2558                           ; 0 bytes @ 0x7
  2559                           
  2560                           
  2561                           	psect	cstackBANK0
  2562  0020                     __pcstackBANK0:	
  2563                           ; 0 bytes @ 0x7
  2564                           
  2565  0020                     ?_Mrf49xaTxPacket:	
  2566  0020                     Mrf49SpiTx@byte:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569  0020                     Mrf49SpiRx@data:	
  2570                           ; 1 bytes @ 0x0
  2571                           
  2572  0020                     Mrf49xaTxPacket@response:	
  2573                           ; 1 bytes @ 0x0
  2574                           
  2575  0020                     Mrf49xaFreePacket@packet:	
  2576                           ; 1 bytes @ 0x0
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x0
  2580  0020                     	ds	1
  2581  0021                     ?_Mrf49TxCmd:	
  2582  0021                     Mrf49TxCmd@val:	
  2583                           ; 0 bytes @ 0x1
  2584                           
  2585  0021                     Mrf49RxCmd@cmd:	
  2586                           ; 1 bytes @ 0x1
  2587                           
  2588  0021                     Mrf49xaTxPacket@needAck:	
  2589                           ; 1 bytes @ 0x1
  2590                           
  2591                           
  2592                           ; 1 bytes @ 0x1
  2593  0021                     	ds	1
  2594  0022                     ??_Mrf49xaTxPacket:	
  2595  0022                     Mrf49TxCmd@cmd:	
  2596                           ; 0 bytes @ 0x2
  2597                           
  2598  0022                     Mrf49RxCmd@val:	
  2599                           ; 1 bytes @ 0x2
  2600                           
  2601                           
  2602                           ; 1 bytes @ 0x2
  2603  0022                     	ds	1
  2604  0023                     Mrf49xaModeRx@k:	
  2605  0023                     Mrf49xaModeTx@k:	
  2606                           ; 1 bytes @ 0x3
  2607                           
  2608  0023                     Mrf49TxByte@byte:	
  2609                           ; 1 bytes @ 0x3
  2610                           
  2611  0023                     Mrf49xaTxPacket@i:	
  2612                           ; 1 bytes @ 0x3
  2613                           
  2614                           
  2615                           ; 1 bytes @ 0x3
  2616  0023                     	ds	1
  2617  0024                     ??_Mrf49xaServe:	
  2618  0024                     Mrf49xaTxPacket@packet:	
  2619                           ; 0 bytes @ 0x4
  2620                           
  2621                           
  2622                           ; 1 bytes @ 0x4
  2623  0024                     	ds	1
  2624  0025                     Mrf49xaTxAck@packet:	
  2625  0025                     Mrf49xaServe@data:	
  2626                           ; 1 bytes @ 0x5
  2627                           
  2628                           
  2629                           ; 1 bytes @ 0x5
  2630  0025                     	ds	1
  2631  0026                     ??_Mrf49xaInit:	
  2632                           
  2633                           ; 0 bytes @ 0x6
  2634  0026                     	ds	1
  2635  0027                     HandlePacket@sendMsg:	
  2636                           
  2637                           ; 1 bytes @ 0x7
  2638  0027                     	ds	1
  2639  0028                     HandlePacket@sendAck:	
  2640                           
  2641                           ; 1 bytes @ 0x8
  2642  0028                     	ds	1
  2643  0029                     Mrf49xaInit@k:	
  2644  0029                     HandlePacket@packet:	
  2645                           ; 1 bytes @ 0x9
  2646                           
  2647                           
  2648                           ; 1 bytes @ 0x9
  2649  0029                     	ds	1
  2650  002A                     ??_Mrf49xaTick:	
  2651                           
  2652                           ; 0 bytes @ 0xA
  2653  002A                     	ds	2
  2654  002C                     Mrf49xaTick@timeout:	
  2655                           
  2656                           ; 1 bytes @ 0xC
  2657  002C                     	ds	1
  2658  002D                     Mrf49xaTick@packet:	
  2659                           
  2660                           ; 1 bytes @ 0xD
  2661  002D                     	ds	1
  2662                           
  2663                           	psect	text5
  2664  0022                     __ptext5:	
  2665 ;; *************** function _Mrf49xaModeTx *****************
  2666 ;; Defined at:
  2667 ;;		line 80 in file "../../../src/devices/mrf49xa.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  k               1    3[BANK0 ] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0, pclath, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : 1F/0
  2678 ;;		On exit  : 1F/1
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2681 ;;      Params:         0       0       0       0
  2682 ;;      Locals:         0       1       0       0
  2683 ;;      Temps:          0       0       0       0
  2684 ;;      Totals:         0       1       0       0
  2685 ;;Total ram usage:        1 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    7
  2688 ;; This function calls:
  2689 ;;		_Mrf49TxCmd
  2690 ;; This function is called by:
  2691 ;;		_Mrf49xaTick
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _Mrf49xaModeTx
  2697  0022                     _Mrf49xaModeTx:	
  2698  0022  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2699                           
  2700                           ;mrf49xa.c: 82: UI08_t k;
  2701                           ;mrf49xa.c: 83: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  2705  0023  01A3               	clrf	Mrf49xaModeTx@k
  2706  0024  3186               	movlp	high __stringtab
  2707  0025  000A               	callw
  2708  0026  3180               	pagesel	$	;select current page
  2709  0027  3800               	iorlw	0
  2710  0028  1903               	btfsc	3,2
  2711  0029  2847               	goto	l1868
  2712  002A                     l1860:	
  2713  002A  3523               	lslf	Mrf49xaModeTx@k,w
  2714  002B  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  2715  002C  3186               	movlp	high __stringtab
  2716  002D  000A               	callw
  2717  002E  3180               	pagesel	$	;select current page
  2718  002F  3A55               	xorlw	85
  2719  0030  1903               	skipnz
  2720  0031  283E               	goto	l1864
  2721  0032  3523               	lslf	Mrf49xaModeTx@k,w
  2722  0033  3E31               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  2723  0034  3186               	movlp	high __stringtab
  2724  0035  000A               	callw
  2725  0036  00A1               	movwf	Mrf49TxCmd@val
  2726  0037  3523               	lslf	Mrf49xaModeTx@k,w
  2727  0038  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  2728  0039  3186               	movlp	high __stringtab
  2729  003A  000A               	callw
  2730  003B  3180               	pagesel	$	;select current page
  2731  003C  3182  2268         	fcall	_Mrf49TxCmd
  2732  003E                     l1864:	
  2733  003E  0020               	movlb	0	; select bank0
  2734  003F  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2735  0040  0AA3               	incf	Mrf49xaModeTx@k,f
  2736  0041  3186               	movlp	high __stringtab
  2737  0042  000A               	callw
  2738  0043  3180               	pagesel	$	;select current page
  2739  0044  0223               	subwf	Mrf49xaModeTx@k,w
  2740  0045  1C03               	skipc
  2741  0046  282A               	goto	l1860
  2742  0047                     l1868:	
  2743                           
  2744                           ;mrf49xa.c: 85: rfTrcvStatus.state = TX_PACKET;
  2745  0047  3002               	movlw	2
  2746  0048  0021               	movlb	1	; select bank1
  2747  0049  00A0               	movwf	_rfTrcvStatus^(0+128)
  2748                           
  2749                           ;mrf49xa.c: 86: rfTrcvStatus.hwByte = 99;
  2750  004A  3063               	movlw	99
  2751  004B  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  2752  004C  0008               	return
  2753  004D                     __end_of_Mrf49xaModeTx:	
  2754  004D                     __pmaintext:	
  2755 ;;
  2756 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2757 ;;
  2758 ;; *************** function _main *****************
  2759 ;; Defined at:
  2760 ;;		line 41 in file "../../../src/node/main.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;		None               void
  2767 ;; Registers used:
  2768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 17F/0
  2771 ;;		On exit  : 1F/1
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2774 ;;      Params:         0       0       0       0
  2775 ;;      Locals:         0       0       0       0
  2776 ;;      Temps:          0       0       0       0
  2777 ;;      Totals:         0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels required when called:   10
  2780 ;; This function calls:
  2781 ;;		_AdcInit
  2782 ;;		_ExtIntInit
  2783 ;;		_Mrf49xaInit
  2784 ;;		_Mrf49xaTick
  2785 ;;		_SysInitGpio
  2786 ;; This function is called by:
  2787 ;;		Startup code after reset
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _main
  2793  004D                     _main:	
  2794                           
  2795                           ;main.c: 44: OSCCON = 0b01111000;
  2796                           
  2797                           ;incstack = 0
  2798                           ; Regs used in _main: [allreg]
  2799  004D  3078               	movlw	120
  2800  004E  0021               	movlb	1	; select bank1
  2801  004F  0099               	movwf	25	;volatile
  2802                           
  2803                           ;main.c: 45: WPUAbits.WPUA2 = 1;
  2804  0050  0024               	movlb	4	; select bank4
  2805  0051  150C               	bsf	12,2	;volatile
  2806                           
  2807                           ;main.c: 47: SysInitGpio();
  2808  0052  239E  3180         	fcall	_SysInitGpio
  2809                           
  2810                           ;main.c: 48: AdcInit();
  2811  0054  2329  3180         	fcall	_AdcInit
  2812                           
  2813                           ;main.c: 49: ExtIntInit();
  2814  0056  2338  3180         	fcall	_ExtIntInit
  2815                           
  2816                           ;main.c: 51: Mrf49xaInit();
  2817  0058  210D  3180         	fcall	_Mrf49xaInit
  2818  005A                     l2160:	
  2819                           
  2820                           ;main.c: 54: {
  2821                           ;main.c: 55: Mrf49xaTick();
  2822  005A  205D  3180         	fcall	_Mrf49xaTick
  2823  005C  285A               	goto	l2160
  2824  005D                     __end_of_main:	
  2825  005D                     __ptext2:	
  2826 ;; *************** function _Mrf49xaTick *****************
  2827 ;; Defined at:
  2828 ;;		line 83 in file "../../../src/devices/mrf49xa_packet.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  timeout         1   12[BANK0 ] unsigned char 
  2833 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  2834 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;		None               void
  2837 ;; Registers used:
  2838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2839 ;; Tracked objects:
  2840 ;;		On entry : 1E/0
  2841 ;;		On exit  : 1F/1
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2844 ;;      Params:         0       0       0       0
  2845 ;;      Locals:         0       2       0       0
  2846 ;;      Temps:          0       2       0       0
  2847 ;;      Totals:         0       4       0       0
  2848 ;;Total ram usage:        4 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    8
  2851 ;; This function calls:
  2852 ;;		_HandlePacket
  2853 ;;		_Mrf49RxSts
  2854 ;;		_Mrf49xaFreePacket
  2855 ;;		_Mrf49xaModeTx
  2856 ;;		_Mrf49xaPacketPending
  2857 ;;		_Mrf49xaRxPacket
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _Mrf49xaTick
  2865  005D                     _Mrf49xaTick:	
  2866                           
  2867                           ;mrf49xa_packet.c: 85: if (Mrf49xaPacketPending())
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _Mrf49xaTick: [allreg]
  2871  005D  2386  3180         	fcall	_Mrf49xaPacketPending
  2872  005F  3A00               	xorlw	0
  2873  0060  1903               	skipnz
  2874  0061  287E               	goto	l2068
  2875                           
  2876                           ;mrf49xa_packet.c: 86: {
  2877                           ;mrf49xa_packet.c: 87: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2878  0062  2390  3180         	fcall	_Mrf49xaRxPacket
  2879  0064  0020               	movlb	0	; select bank0
  2880  0065  00AD               	movwf	Mrf49xaTick@packet
  2881                           
  2882                           ;mrf49xa_packet.c: 90: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSta
      +                          tus.src)
  2883  0066  3E03               	addlw	3
  2884  0067  0086               	movwf	6
  2885  0068  0187               	clrf	7
  2886  0069  0801               	movf	1,w
  2887  006A  3AFF               	xorlw	255
  2888  006B  1903               	skipnz
  2889  006C  2875               	goto	l2064
  2890  006D  082D               	movf	Mrf49xaTick@packet,w
  2891  006E  3E03               	addlw	3
  2892  006F  0086               	movwf	6
  2893  0070  0801               	movf	1,w
  2894  0071  0021               	movlb	1	; select bank1
  2895  0072  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  2896  0073  1D03               	skipz
  2897  0074  287A               	goto	l2066
  2898  0075                     l2064:	
  2899                           
  2900                           ;mrf49xa_packet.c: 91: {
  2901                           ;mrf49xa_packet.c: 92: HandlePacket(packet);
  2902  0075  0020               	movlb	0	; select bank0
  2903  0076  082D               	movf	Mrf49xaTick@packet,w
  2904  0077  2342  3180         	fcall	_HandlePacket
  2905                           
  2906                           ;mrf49xa_packet.c: 93: }
  2907  0079  287E               	goto	l2068
  2908  007A                     l2066:	
  2909                           
  2910                           ;mrf49xa_packet.c: 94: else
  2911                           ;mrf49xa_packet.c: 95: {
  2912                           ;mrf49xa_packet.c: 96: Mrf49xaFreePacket(packet);
  2913  007A  0020               	movlb	0	; select bank0
  2914  007B  082D               	movf	Mrf49xaTick@packet,w
  2915  007C  233D  3180         	fcall	_Mrf49xaFreePacket
  2916  007E                     l2068:	
  2917                           
  2918                           ;mrf49xa_packet.c: 97: }
  2919                           ;mrf49xa_packet.c: 98: }
  2920                           ;mrf49xa_packet.c: 100: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  2921  007E  0021               	movlb	1	; select bank1
  2922  007F  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  2923  0080  3A02               	xorlw	2
  2924  0081  1D03               	skipz
  2925  0082  28BD               	goto	l2088
  2926                           
  2927                           ;mrf49xa_packet.c: 101: {
  2928                           ;mrf49xa_packet.c: 102: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  2929  0083  0838               	movf	(_rfTrcvStatus^(0+128)+24),w
  2930  0084  3A02               	xorlw	2
  2931  0085  1D03               	skipz
  2932  0086  2889               	goto	l2074
  2933  0087                     l2072:	
  2934                           
  2935                           ;mrf49xa_packet.c: 103: {
  2936                           ;mrf49xa_packet.c: 104: rfTrcvStatus.txPacket.state = PKT_FREE;
  2937  0087  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2938                           
  2939                           ;mrf49xa_packet.c: 105: }
  2940  0088  28BD               	goto	l2088
  2941  0089                     l2074:	
  2942                           
  2943                           ;mrf49xa_packet.c: 106: else if (rfTrcvStatus.txPacket.retry == 10)
  2944  0089  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2945  008A  390F               	andlw	15
  2946  008B  3A0A               	xorlw	10
  2947  008C  1D03               	skipz
  2948  008D  28A6               	goto	l2084
  2949                           
  2950                           ;mrf49xa_packet.c: 107: {
  2951                           ;mrf49xa_packet.c: 108: if (rfTrcvStatus.txPacket.retransmit == 3)
  2952  008E  0E39               	swapf	(_rfTrcvStatus^(0+128)+25),w
  2953  008F  3903               	andlw	3
  2954  0090  3A03               	xorlw	3
  2955  0091  1903               	btfsc	3,2
  2956  0092  2887               	goto	l2072
  2957                           
  2958                           ;mrf49xa_packet.c: 114: else
  2959                           ;mrf49xa_packet.c: 115: {
  2960                           ;mrf49xa_packet.c: 117: rfTrcvStatus.txPacket.retry = 0;
  2961  0093  30F0               	movlw	-16
  2962  0094  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  2963                           
  2964                           ;mrf49xa_packet.c: 118: rfTrcvStatus.txPacket.retransmit++;
  2965  0095  0E39               	swapf	(_rfTrcvStatus^(0+128)+25),w
  2966  0096  3903               	andlw	3
  2967  0097  0020               	movlb	0	; select bank0
  2968  0098  00AA               	movwf	??_Mrf49xaTick
  2969  0099  0AAA               	incf	??_Mrf49xaTick,f
  2970  009A  0EAA               	swapf	??_Mrf49xaTick,f
  2971  009B  0021               	movlb	1	; select bank1
  2972  009C  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2973  009D  0020               	movlb	0	; select bank0
  2974  009E  062A               	xorwf	??_Mrf49xaTick,w
  2975  009F  39CF               	andlw	-49
  2976  00A0  062A               	xorwf	??_Mrf49xaTick,w
  2977  00A1  0021               	movlb	1	; select bank1
  2978  00A2  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  2979                           
  2980                           ;mrf49xa_packet.c: 119: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  2981  00A3  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2982  00A4  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  2983  00A5  28BD               	goto	l2088
  2984  00A6                     l2084:	
  2985                           
  2986                           ;mrf49xa_packet.c: 122: else
  2987                           ;mrf49xa_packet.c: 123: {
  2988                           ;mrf49xa_packet.c: 124: rfTrcvStatus.txPacket.retry++;
  2989  00A6  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2990  00A7  390F               	andlw	15
  2991  00A8  0020               	movlb	0	; select bank0
  2992  00A9  00AA               	movwf	??_Mrf49xaTick
  2993  00AA  0AAA               	incf	??_Mrf49xaTick,f
  2994  00AB  0021               	movlb	1	; select bank1
  2995  00AC  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  2996  00AD  0020               	movlb	0	; select bank0
  2997  00AE  062A               	xorwf	??_Mrf49xaTick,w
  2998  00AF  39F0               	andlw	-16
  2999  00B0  062A               	xorwf	??_Mrf49xaTick,w
  3000  00B1  0021               	movlb	1	; select bank1
  3001  00B2  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  3002                           
  3003                           ;mrf49xa_packet.c: 125: _delay(40000);
  3004  00B3  3034               	movlw	52
  3005  00B4  0020               	movlb	0	; select bank0
  3006  00B5  00AB               	movwf	??_Mrf49xaTick+1
  3007  00B6  30F1               	movlw	241
  3008  00B7  00AA               	movwf	??_Mrf49xaTick
  3009  00B8                     u2077:	
  3010  00B8  0BAA               	decfsz	??_Mrf49xaTick,f
  3011  00B9  28B8               	goto	u2077
  3012  00BA  0BAB               	decfsz	??_Mrf49xaTick+1,f
  3013  00BB  28B8               	goto	u2077
  3014  00BC  28BD               	nop2
  3015  00BD                     l2088:	
  3016                           
  3017                           ;mrf49xa_packet.c: 126: }
  3018                           ;mrf49xa_packet.c: 127: }
  3019                           ;mrf49xa_packet.c: 129: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  3020                           ;mrf49xa_packet.c: 130: rfTrcvStatus.state == RECV_IDLE)
  3021  00BD  0021               	movlb	1	; select bank1
  3022  00BE  0B21               	decfsz	(_rfTrcvStatus^(0+128)+1),w
  3023  00BF  0008               	return
  3024  00C0  08A0               	movf	_rfTrcvStatus^(0+128),f
  3025  00C1  1D03               	skipz
  3026  00C2  0008               	return
  3027                           
  3028                           ;mrf49xa_packet.c: 131: {
  3029                           ;mrf49xa_packet.c: 132: if (rfTrcvStatus.txPacket.retry >= 10)
  3030  00C3  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  3031  00C4  390F               	andlw	15
  3032  00C5  0020               	movlb	0	; select bank0
  3033  00C6  00AA               	movwf	??_Mrf49xaTick
  3034  00C7  300A               	movlw	10
  3035  00C8  022A               	subwf	??_Mrf49xaTick,w
  3036  00C9  1C03               	skipc
  3037  00CA  28D1               	goto	l2100
  3038                           
  3039                           ;mrf49xa_packet.c: 133: {
  3040                           ;mrf49xa_packet.c: 135: rfTrcvStatus.txPacket.retry = 0;
  3041  00CB  30F0               	movlw	-16
  3042  00CC  0021               	movlb	1	; select bank1
  3043  00CD  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  3044                           
  3045                           ;mrf49xa_packet.c: 136: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3046  00CE  3002               	movlw	2
  3047  00CF  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3048  00D0  0008               	return
  3049  00D1                     l2100:	
  3050                           
  3051                           ;mrf49xa_packet.c: 138: }
  3052                           ;mrf49xa_packet.c: 142: uint8_t timeout = 0;
  3053  00D1  01AC               	clrf	Mrf49xaTick@timeout
  3054  00D2                     l2102:	
  3055                           
  3056                           ;mrf49xa_packet.c: 144: {
  3057                           ;mrf49xa_packet.c: 145: Mrf49RxSts();
  3058  00D2  22D6  3180         	fcall	_Mrf49RxSts
  3059                           
  3060                           ;mrf49xa_packet.c: 147: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  3061  00D4  0021               	movlb	1	; select bank1
  3062  00D5  08A0               	movf	_rfTrcvStatus^(0+128),f
  3063  00D6  1D03               	skipz
  3064  00D7  28DB               	goto	l2110
  3065  00D8  0020               	movlb	0	; select bank0
  3066  00D9  1C2E               	btfss	_mrf49Status,0
  3067  00DA  28FA               	goto	l351
  3068  00DB                     l2110:	
  3069                           
  3070                           ;mrf49xa_packet.c: 151: }
  3071                           ;mrf49xa_packet.c: 153: _delay(40000);
  3072  00DB  3034               	movlw	52
  3073  00DC  0020               	movlb	0	; select bank0
  3074  00DD  00AB               	movwf	??_Mrf49xaTick+1
  3075  00DE  30F1               	movlw	241
  3076  00DF  00AA               	movwf	??_Mrf49xaTick
  3077  00E0                     u2087:	
  3078  00E0  0BAA               	decfsz	??_Mrf49xaTick,f
  3079  00E1  28E0               	goto	u2087
  3080  00E2  0BAB               	decfsz	??_Mrf49xaTick+1,f
  3081  00E3  28E0               	goto	u2087
  3082  00E4  28E5               	nop2
  3083                           
  3084                           ;mrf49xa_packet.c: 154: timeout++;
  3085  00E5  0020               	movlb	0	; select bank0
  3086  00E6  300B               	movlw	11
  3087  00E7  0AAC               	incf	Mrf49xaTick@timeout,f
  3088                           
  3089                           ;mrf49xa_packet.c: 156: if (timeout > 10)
  3090  00E8  022C               	subwf	Mrf49xaTick@timeout,w
  3091  00E9  1C03               	skipc
  3092  00EA  28D2               	goto	l2102
  3093                           
  3094                           ;mrf49xa_packet.c: 157: {
  3095                           ;mrf49xa_packet.c: 158: rfTrcvStatus.txPacket.retry++;
  3096  00EB  0021               	movlb	1	; select bank1
  3097  00EC  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  3098  00ED  390F               	andlw	15
  3099  00EE  0020               	movlb	0	; select bank0
  3100  00EF  00AA               	movwf	??_Mrf49xaTick
  3101  00F0  0AAA               	incf	??_Mrf49xaTick,f
  3102  00F1  0021               	movlb	1	; select bank1
  3103  00F2  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  3104  00F3  0020               	movlb	0	; select bank0
  3105  00F4  062A               	xorwf	??_Mrf49xaTick,w
  3106  00F5  39F0               	andlw	-16
  3107  00F6  062A               	xorwf	??_Mrf49xaTick,w
  3108  00F7  0021               	movlb	1	; select bank1
  3109  00F8  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  3110  00F9  0008               	return
  3111  00FA                     l351:	
  3112                           
  3113                           ;mrf49xa_packet.c: 167: INTCONbits.INTE = 0;;
  3114  00FA  120B               	bcf	11,4	;volatile
  3115                           
  3116                           ;mrf49xa_packet.c: 168: Mrf49xaModeTx();
  3117  00FB  2022               	fcall	_Mrf49xaModeTx
  3118                           
  3119                           ;mrf49xa_packet.c: 169: INTCONbits.INTE = 1;;
  3120  00FC  160B               	bsf	11,4	;volatile
  3121  00FD  0008               	return
  3122  00FE                     __end_of_Mrf49xaTick:	
  3123  00FE                     __ptext17:	
  3124 ;; *************** function _Mrf49RxCmd *****************
  3125 ;; Defined at:
  3126 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  cmd             1    wreg     unsigned char 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  cmd             1    1[BANK0 ] unsigned char 
  3131 ;;  val             1    2[BANK0 ] unsigned char 
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      unsigned char 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, pclath, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 1E/1
  3138 ;;		On exit  : 1F/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3141 ;;      Params:         0       0       0       0
  3142 ;;      Locals:         0       2       0       0
  3143 ;;      Temps:          0       0       0       0
  3144 ;;      Totals:         0       2       0       0
  3145 ;;Total ram usage:        2 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    6
  3148 ;; This function calls:
  3149 ;;		_Mrf49SpiRx
  3150 ;;		_Mrf49SpiTx
  3151 ;; This function is called by:
  3152 ;;		_Mrf49RxByte
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           
  3157                           ;psect for function _Mrf49RxCmd
  3158  00FE                     _Mrf49RxCmd:	
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  3162                           ;Mrf49RxCmd@cmd stored from wreg
  3163  00FE  0020               	movlb	0	; select bank0
  3164  00FF  00A1               	movwf	Mrf49RxCmd@cmd
  3165                           
  3166                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  3167  0100  0022               	movlb	2	; select bank2
  3168  0101  130E               	bcf	14,6	;volatile
  3169                           
  3170                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  3171  0102  0020               	movlb	0	; select bank0
  3172  0103  0821               	movf	Mrf49RxCmd@cmd,w
  3173  0104  2274  3180         	fcall	_Mrf49SpiTx
  3174                           
  3175                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  3176  0106  22E2               	fcall	_Mrf49SpiRx
  3177  0107  00A2               	movwf	Mrf49RxCmd@val
  3178                           
  3179                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  3180  0108  0022               	movlb	2	; select bank2
  3181  0109  170E               	bsf	14,6	;volatile
  3182                           
  3183                           ;mrf49xa_cmd.c: 25: return val;
  3184  010A  0020               	movlb	0	; select bank0
  3185  010B  0822               	movf	Mrf49RxCmd@val,w
  3186  010C  0008               	return
  3187  010D                     __end_of_Mrf49RxCmd:	
  3188  010D                     __ptext10:	
  3189 ;; *************** function _Mrf49xaInit *****************
  3190 ;; Defined at:
  3191 ;;		line 114 in file "../../../src/devices/mrf49xa.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;		None
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  k               1    9[BANK0 ] unsigned char 
  3196 ;;  j               1    0        unsigned char 
  3197 ;;  i               1    0        unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 17F/1
  3204 ;;		On exit  : 1F/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3207 ;;      Params:         0       0       0       0
  3208 ;;      Locals:         0       1       0       0
  3209 ;;      Temps:          0       3       0       0
  3210 ;;      Totals:         0       4       0       0
  3211 ;;Total ram usage:        4 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    9
  3214 ;; This function calls:
  3215 ;;		_Mrf49TxCmd
  3216 ;;		_Mrf49xaModeRx
  3217 ;;		_Mrf49xaServe
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           
  3224                           ;psect for function _Mrf49xaInit
  3225  010D                     _Mrf49xaInit:	
  3226                           
  3227                           ;mrf49xa.c: 116: UI08_t i, j, k;
  3228                           ;mrf49xa.c: 119: LATAbits.LATA4 = 0;
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _Mrf49xaInit: [allreg]
  3232  010D  0022               	movlb	2	; select bank2
  3233  010E  120C               	bcf	12,4	;volatile
  3234                           
  3235                           ;mrf49xa.c: 120: LATCbits.LATC1 = 1;
  3236  010F  148E               	bsf	14,1	;volatile
  3237                           
  3238                           ;mrf49xa.c: 121: _delay(400000);
  3239  0110  3003               	movlw	3
  3240  0111  0020               	movlb	0	; select bank0
  3241  0112  00A8               	movwf	??_Mrf49xaInit+2
  3242  0113  3008               	movlw	8
  3243  0114  00A7               	movwf	??_Mrf49xaInit+1
  3244  0115  3078               	movlw	120
  3245  0116  00A6               	movwf	??_Mrf49xaInit
  3246  0117                     u2097:	
  3247  0117  0BA6               	decfsz	??_Mrf49xaInit,f
  3248  0118  2917               	goto	u2097
  3249  0119  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3250  011A  2917               	goto	u2097
  3251  011B  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3252  011C  2917               	goto	u2097
  3253                           
  3254                           ;mrf49xa.c: 122: LATAbits.LATA4 = 1;
  3255  011D  0022               	movlb	2	; select bank2
  3256  011E  160C               	bsf	12,4	;volatile
  3257                           
  3258                           ;mrf49xa.c: 123: _delay(400000);
  3259  011F  3003               	movlw	3
  3260  0120  0020               	movlb	0	; select bank0
  3261  0121  00A8               	movwf	??_Mrf49xaInit+2
  3262  0122  3008               	movlw	8
  3263  0123  00A7               	movwf	??_Mrf49xaInit+1
  3264  0124  3078               	movlw	120
  3265  0125  00A6               	movwf	??_Mrf49xaInit
  3266  0126                     u2107:	
  3267  0126  0BA6               	decfsz	??_Mrf49xaInit,f
  3268  0127  2926               	goto	u2107
  3269  0128  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3270  0129  2926               	goto	u2107
  3271  012A  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3272  012B  2926               	goto	u2107
  3273                           
  3274                           ;mrf49xa.c: 124: LATCbits.LATC4 = 1;
  3275  012C  0022               	movlb	2	; select bank2
  3276  012D  160E               	bsf	14,4	;volatile
  3277                           
  3278                           ;mrf49xa.c: 126: LATAbits.LATA5 = 1;
  3279  012E  168C               	bsf	12,5	;volatile
  3280                           
  3281                           ;mrf49xa.c: 129: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { _delay(40000); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val)
      +                          ; } };
  3282  012F  0020               	movlb	0	; select bank0
  3283  0130  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3284  0131  01A9               	clrf	Mrf49xaInit@k
  3285  0132  3186               	movlp	high __stringtab
  3286  0133  000A               	callw
  3287  0134  3180               	pagesel	$	;select current page
  3288  0135  3800               	iorlw	0
  3289  0136  1903               	btfsc	3,2
  3290  0137  295F               	goto	l1896
  3291  0138                     l1886:	
  3292  0138  3529               	lslf	Mrf49xaInit@k,w
  3293  0139  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  3294  013A  3186               	movlp	high __stringtab
  3295  013B  000A               	callw
  3296  013C  3180               	pagesel	$	;select current page
  3297  013D  3A55               	xorlw	85
  3298  013E  1D03               	skipz
  3299  013F  294A               	goto	l1890
  3300  0140  3034               	movlw	52
  3301  0141  00A7               	movwf	??_Mrf49xaInit+1
  3302  0142  30F1               	movlw	241
  3303  0143  00A6               	movwf	??_Mrf49xaInit
  3304  0144                     u2117:	
  3305  0144  0BA6               	decfsz	??_Mrf49xaInit,f
  3306  0145  2944               	goto	u2117
  3307  0146  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3308  0147  2944               	goto	u2117
  3309  0148  2949               	nop2
  3310  0149  2956               	goto	l1892
  3311  014A                     l1890:	
  3312  014A  3529               	lslf	Mrf49xaInit@k,w
  3313  014B  3E05               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3314  014C  3186               	movlp	high __stringtab
  3315  014D  000A               	callw
  3316  014E  00A1               	movwf	Mrf49TxCmd@val
  3317  014F  3529               	lslf	Mrf49xaInit@k,w
  3318  0150  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  3319  0151  3186               	movlp	high __stringtab
  3320  0152  000A               	callw
  3321  0153  3180               	pagesel	$	;select current page
  3322  0154  3182  2268         	fcall	_Mrf49TxCmd
  3323  0156                     l1892:	
  3324  0156  0020               	movlb	0	; select bank0
  3325  0157  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3326  0158  0AA9               	incf	Mrf49xaInit@k,f
  3327  0159  3186               	movlp	high __stringtab
  3328  015A  000A               	callw
  3329  015B  3180               	pagesel	$	;select current page
  3330  015C  0229               	subwf	Mrf49xaInit@k,w
  3331  015D  1C03               	skipc
  3332  015E  2938               	goto	l1886
  3333  015F                     l1896:	
  3334                           
  3335                           ;mrf49xa.c: 131: Mrf49xaModeRx();
  3336  015F  223E  3180         	fcall	_Mrf49xaModeRx
  3337  0161                     l1900:	
  3338                           ;mrf49xa.c: 138: while(PORTAbits.RA2 == 0)
  3339                           
  3340  0161  0020               	movlb	0	; select bank0
  3341  0162  190C               	btfsc	12,2	;volatile
  3342  0163  0008               	return
  3343                           
  3344                           ;mrf49xa.c: 139: Mrf49xaServe();
  3345  0164  2167  3180         	fcall	_Mrf49xaServe
  3346  0166  2961               	goto	l1900
  3347  0167                     __end_of_Mrf49xaInit:	
  3348  0167                     __ptext11:	
  3349 ;; *************** function _Mrf49xaServe *****************
  3350 ;; Defined at:
  3351 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  data            1    5[BANK0 ] unsigned char 
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      unsigned char 
  3358 ;; Registers used:
  3359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 1E/0
  3362 ;;		On exit  : 1F/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3365 ;;      Params:         0       0       0       0
  3366 ;;      Locals:         0       1       0       0
  3367 ;;      Temps:          0       1       0       0
  3368 ;;      Totals:         0       2       0       0
  3369 ;;Total ram usage:        2 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    8
  3372 ;; This function calls:
  3373 ;;		_Mrf49RxByte
  3374 ;;		_Mrf49RxSts
  3375 ;;		_Mrf49TxByte
  3376 ;;		_Mrf49xaModeRx
  3377 ;; This function is called by:
  3378 ;;		_Mrf49xaInit
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           
  3383                           ;psect for function _Mrf49xaServe
  3384  0167                     _Mrf49xaServe:	
  3385                           
  3386                           ;mrf49xa_data.c: 10: uint8_t data;
  3387                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  3388                           
  3389                           ;incstack = 0
  3390                           ; Regs used in _Mrf49xaServe: [allreg]
  3391  0167  22D6  3180         	fcall	_Mrf49RxSts
  3392                           
  3393                           ;mrf49xa_data.c: 21: }
  3394                           ;mrf49xa_data.c: 24: if (mrf49Status.flags.msb.overflow == 1)
  3395                           
  3396                           ;mrf49xa_data.c: 19: {
  3397  0169  0020               	movlb	0	; select bank0
  3398  016A  1AAE               	btfsc	_mrf49Status,5
  3399  016B  2976               	goto	l1738
  3400  016C  2982               	goto	l372
  3401  016D                     l1732:	
  3402                           
  3403                           ;mrf49xa_data.c: 29: case RECV_DATA:
  3404                           ;mrf49xa_data.c: 32: data = Mrf49RxByte();
  3405  016D  223C  3180         	fcall	_Mrf49RxByte
  3406  016F  00A5               	movwf	Mrf49xaServe@data
  3407                           
  3408                           ;mrf49xa_data.c: 33: data = Mrf49RxByte();
  3409  0170  223C  3180         	fcall	_Mrf49RxByte
  3410  0172  00A5               	movwf	Mrf49xaServe@data
  3411                           
  3412                           ;mrf49xa_data.c: 36: Mrf49xaModeRx();
  3413  0173  223E  3180         	fcall	_Mrf49xaModeRx
  3414                           
  3415                           ;mrf49xa_data.c: 40: break;
  3416  0175  2982               	goto	l372
  3417  0176                     l1738:	
  3418  0176  0021               	movlb	1	; select bank1
  3419  0177  0820               	movf	_rfTrcvStatus^(0+128),w
  3420                           
  3421                           ; Switch size 1, requested type "speed"
  3422                           ; Number of cases is 3, Range of values is 0 to 2
  3423                           ; switch strategies available:
  3424                           ; Name         Instructions Cycles
  3425                           ; simple_byte           10     6 (average)
  3426                           ; direct_byte           12     6 (fixed)
  3427                           ; jumptable            260     6 (fixed)
  3428                           ;	Chosen strategy is simple_byte
  3429  0178  3A00               	xorlw	0	; case 0
  3430  0179  1903               	skipnz
  3431  017A  296D               	goto	l1732
  3432  017B  3A01               	xorlw	1	; case 1
  3433  017C  1903               	skipnz
  3434  017D  296D               	goto	l1732
  3435  017E  3A03               	xorlw	3	; case 2
  3436  017F  1903               	skipnz
  3437  0180  2982               	goto	l372
  3438  0181  2982               	goto	l372
  3439  0182                     l372:	
  3440                           
  3441                           ;mrf49xa_data.c: 48: }
  3442                           ;mrf49xa_data.c: 57: if (mrf49Status.flags.msb.fifoTxRx == 1)
  3443  0182  0020               	movlb	0	; select bank0
  3444  0183  1BAE               	btfsc	_mrf49Status,7
  3445  0184  2A26               	goto	l1826
  3446  0185  2A32               	goto	l1828
  3447  0186                     l1742:	
  3448                           
  3449                           ;mrf49xa_data.c: 63: data = Mrf49RxByte();
  3450  0186  223C  3180         	fcall	_Mrf49RxByte
  3451  0188  00A5               	movwf	Mrf49xaServe@data
  3452                           
  3453                           ;mrf49xa_data.c: 67: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3454  0189  1BAF               	btfsc	_mrf49Status+1,7
  3455  018A  298E               	goto	l1748
  3456  018B                     l1746:	
  3457                           
  3458                           ;mrf49xa_data.c: 68: {
  3459                           ;mrf49xa_data.c: 69: Mrf49xaModeRx();
  3460  018B  223E  3180         	fcall	_Mrf49xaModeRx
  3461                           
  3462                           ;mrf49xa_data.c: 70: break;
  3463  018D  2A32               	goto	l1828
  3464  018E                     l1748:	
  3465                           
  3466                           ;mrf49xa_data.c: 71: }
  3467                           ;mrf49xa_data.c: 73: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  3468  018E  0021               	movlb	1	; select bank1
  3469  018F  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3470  0190  1D03               	skipz
  3471  0191  2994               	goto	l1752
  3472  0192  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  3473  0193  2998               	goto	L1
  3474  0194                     l1752:	
  3475                           
  3476                           ;mrf49xa_data.c: 74: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3477  0194  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  3478  0195  1D03               	skipz
  3479  0196  298B               	goto	l1746
  3480  0197  30D3               	movlw	(_rfTrcvStatus+51)& (0+255)
  3481  0198                     L1:	
  3482  0198  00EC               	movwf	(_rfTrcvStatus+76)^(0+128)
  3483                           
  3484                           ;mrf49xa_data.c: 81: }
  3485                           ;mrf49xa_data.c: 82: rfTrcvStatus.hwRx->packet.size = data;
  3486  0199  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  3487  019A  0086               	movwf	6
  3488  019B  0187               	clrf	7
  3489  019C  0020               	movlb	0	; select bank0
  3490  019D  0825               	movf	Mrf49xaServe@data,w
  3491  019E  0081               	movwf	1
  3492                           
  3493                           ;mrf49xa_data.c: 83: rfTrcvStatus.hwRx->crc = 0;
  3494  019F  0021               	movlb	1	; select bank1
  3495  01A0  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3496  01A1  3E16               	addlw	22
  3497  01A2  0086               	movwf	6
  3498  01A3  0181               	clrf	1
  3499                           
  3500                           ;mrf49xa_data.c: 84: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3501  01A4  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3502  01A5  0086               	movwf	6
  3503  01A6  3003               	movlw	3
  3504  01A7  0081               	movwf	1
  3505                           
  3506                           ;mrf49xa_data.c: 86: rfTrcvStatus.state = RECV_DATA;
  3507  01A8  01A0               	clrf	_rfTrcvStatus^(0+128)
  3508  01A9  0AA0               	incf	_rfTrcvStatus^(0+128),f
  3509                           
  3510                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwByte = 1;
  3511  01AA  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3512  01AB  29DB               	goto	L2
  3513  01AC                     l1768:	
  3514                           ;mrf49xa_data.c: 89: break;
  3515                           
  3516                           
  3517                           ;mrf49xa_data.c: 93: data = Mrf49RxByte();
  3518  01AC  223C  3180         	fcall	_Mrf49RxByte
  3519  01AE  00A5               	movwf	Mrf49xaServe@data
  3520                           
  3521                           ;mrf49xa_data.c: 97: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3522  01AF  1BAF               	btfsc	_mrf49Status+1,7
  3523  01B0  29B8               	goto	l1776
  3524                           
  3525                           ;mrf49xa_data.c: 98: {
  3526                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3527  01B1  0021               	movlb	1	; select bank1
  3528  01B2  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3529  01B3  0086               	movwf	6
  3530  01B4  3004               	movlw	4
  3531  01B5  0187               	clrf	7
  3532  01B6  0081               	movwf	1
  3533  01B7  298B               	goto	l1746
  3534  01B8                     l1776:	
  3535                           
  3536                           ;mrf49xa_data.c: 102: }
  3537                           ;mrf49xa_data.c: 104: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3538  01B8  0021               	movlb	1	; select bank1
  3539  01B9  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  3540  01BA  0086               	movwf	6
  3541  01BB  0187               	clrf	7
  3542  01BC  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3543  01BD  0601               	xorwf	1,w
  3544  01BE  1D03               	skipz
  3545  01BF  29D1               	goto	l1786
  3546                           
  3547                           ;mrf49xa_data.c: 105: {
  3548                           ;mrf49xa_data.c: 106: rfTrcvStatus.hwRx->crc = data;
  3549  01C0  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3550  01C1  3E16               	addlw	22
  3551  01C2  0086               	movwf	6
  3552  01C3  0020               	movlb	0	; select bank0
  3553  01C4  0825               	movf	Mrf49xaServe@data,w
  3554  01C5  0081               	movwf	1
  3555                           
  3556                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3557  01C6  0021               	movlb	1	; select bank1
  3558  01C7  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  3559  01C8  0086               	movwf	6
  3560  01C9  3004               	movlw	4
  3561  01CA  0081               	movwf	1
  3562                           
  3563                           ;mrf49xa_data.c: 113: Mrf49xaModeRx();
  3564  01CB  223E  3180         	fcall	_Mrf49xaModeRx
  3565                           
  3566                           ;mrf49xa_data.c: 116: LATCbits.LATC2 = 1;
  3567  01CD  0022               	movlb	2	; select bank2
  3568  01CE  150E               	bsf	14,2	;volatile
  3569                           
  3570                           ;mrf49xa_data.c: 117: LATCbits.LATC2 = 0;
  3571  01CF  110E               	bcf	14,2	;volatile
  3572                           
  3573                           ;mrf49xa_data.c: 119: }
  3574  01D0  2A32               	goto	l1828
  3575  01D1                     l1786:	
  3576                           
  3577                           ;mrf49xa_data.c: 120: else
  3578                           ;mrf49xa_data.c: 121: {
  3579                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3580  01D1  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3581  01D2  076C               	addwf	(_rfTrcvStatus+76)^(0+128),w
  3582  01D3  0020               	movlb	0	; select bank0
  3583  01D4  00A4               	movwf	??_Mrf49xaServe
  3584  01D5  0A24               	incf	??_Mrf49xaServe,w
  3585  01D6  0086               	movwf	6
  3586  01D7  0187               	clrf	7
  3587  01D8  0825               	movf	Mrf49xaServe@data,w
  3588  01D9  0081               	movwf	1
  3589  01DA  0021               	movlb	1	; select bank1
  3590  01DB                     L2:	
  3591  01DB  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3592  01DC  2A32               	goto	l1828
  3593  01DD                     l1790:	
  3594                           
  3595                           ;mrf49xa_data.c: 128: rfTrcvStatus.hwByte++;
  3596  01DD  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3597                           
  3598                           ;mrf49xa_data.c: 130: switch (rfTrcvStatus.hwByte)
  3599  01DE  2A15               	goto	l1822
  3600  01DF                     l1792:	
  3601                           
  3602                           ;mrf49xa_data.c: 133: Mrf49TxByte(0x2D);
  3603  01DF  302D               	movlw	45
  3604  01E0  2237  3180         	fcall	_Mrf49TxByte
  3605                           
  3606                           ;mrf49xa_data.c: 134: break;
  3607  01E2  2A32               	goto	l1828
  3608  01E3                     l1794:	
  3609                           
  3610                           ;mrf49xa_data.c: 137: Mrf49TxByte(0xD4);
  3611  01E3  30D4               	movlw	212
  3612  01E4  2237  3180         	fcall	_Mrf49TxByte
  3613                           
  3614                           ;mrf49xa_data.c: 138: rfTrcvStatus.hwByte = -1;
  3615  01E6  30FF               	movlw	255
  3616  01E7  0021               	movlb	1	; select bank1
  3617  01E8  29FD               	goto	L3
  3618  01E9                     l1798:	
  3619                           ;mrf49xa_data.c: 139: break;
  3620                           
  3621                           
  3622                           ;mrf49xa_data.c: 143: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3623  01E9  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3624  01EA  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3625  01EB  0086               	movwf	6
  3626  01EC  0187               	clrf	7
  3627  01ED  0801               	movf	1,w
  3628  01EE  2237  3180         	fcall	_Mrf49TxByte
  3629                           
  3630                           ;mrf49xa_data.c: 144: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStat
      +                          us.txPacket.raw[rfTrcvStatus.hwByte];
  3631  01F0  0021               	movlb	1	; select bank1
  3632  01F1  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3633  01F2  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3634  01F3  0086               	movwf	6
  3635  01F4  0187               	clrf	7
  3636  01F5  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3637  01F6  0601               	xorwf	1,w
  3638  01F7  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  3639                           
  3640                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3641  01F8  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3642  01F9  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  3643  01FA  1D03               	skipz
  3644  01FB  2A32               	goto	l1828
  3645                           
  3646                           ;mrf49xa_data.c: 146: {
  3647                           ;mrf49xa_data.c: 147: rfTrcvStatus.hwByte = 48;
  3648  01FC  3030               	movlw	48
  3649  01FD                     L3:	
  3650  01FD  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3651  01FE  2A32               	goto	l1828
  3652  01FF                     l1806:	
  3653                           
  3654                           ;mrf49xa_data.c: 152: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3655  01FF  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3656  0200  2237  3180         	fcall	_Mrf49TxByte
  3657                           
  3658                           ;mrf49xa_data.c: 153: break;
  3659  0202  2A32               	goto	l1828
  3660  0203                     l1808:	
  3661                           
  3662                           ;mrf49xa_data.c: 156: Mrf49TxByte(0x00);
  3663  0203  3000               	movlw	0
  3664  0204  2237  3180         	fcall	_Mrf49TxByte
  3665                           
  3666                           ;mrf49xa_data.c: 157: break;
  3667  0206  2A32               	goto	l1828
  3668  0207                     l1810:	
  3669                           
  3670                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  3671  0207  3000               	movlw	0
  3672  0208  2237  3180         	fcall	_Mrf49TxByte
  3673                           
  3674                           ;mrf49xa_data.c: 161: Mrf49xaModeRx();
  3675  020A  223E  3180         	fcall	_Mrf49xaModeRx
  3676                           
  3677                           ;mrf49xa_data.c: 163: rfTrcvStatus.txPacket.retry = 0;
  3678  020C  30F0               	movlw	-16
  3679  020D  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  3680                           
  3681                           ;mrf49xa_data.c: 165: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  3682  020E  0B38               	decfsz	(_rfTrcvStatus^(0+128)+24),w
  3683  020F  2A13               	goto	l1818
  3684                           
  3685                           ;mrf49xa_data.c: 166: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3686  0210  3002               	movlw	2
  3687  0211  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3688  0212  2A32               	goto	l1828
  3689  0213                     l1818:	
  3690                           
  3691                           ;mrf49xa_data.c: 167: else
  3692                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_FREE;
  3693  0213  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  3694  0214  2A32               	goto	l1828
  3695  0215                     l1822:	
  3696  0215  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3697                           
  3698                           ; Switch size 1, requested type "speed"
  3699                           ; Number of cases is 5, Range of values is 49 to 101
  3700                           ; switch strategies available:
  3701                           ; Name         Instructions Cycles
  3702                           ; simple_byte           16     9 (average)
  3703                           ; direct_byte          115     9 (fixed)
  3704                           ; jumptable            263     9 (fixed)
  3705                           ;	Chosen strategy is simple_byte
  3706  0216  3A31               	xorlw	49	; case 49
  3707  0217  1903               	skipnz
  3708  0218  29FF               	goto	l1806
  3709  0219  3A03               	xorlw	3	; case 50
  3710  021A  1903               	skipnz
  3711  021B  2A03               	goto	l1808
  3712  021C  3A01               	xorlw	1	; case 51
  3713  021D  1903               	skipnz
  3714  021E  2A07               	goto	l1810
  3715  021F  3A57               	xorlw	87	; case 100
  3716  0220  1903               	skipnz
  3717  0221  29DF               	goto	l1792
  3718  0222  3A01               	xorlw	1	; case 101
  3719  0223  1903               	skipnz
  3720  0224  29E3               	goto	l1794
  3721  0225  29E9               	goto	l1798
  3722  0226                     l1826:	
  3723  0226  0021               	movlb	1	; select bank1
  3724  0227  0820               	movf	_rfTrcvStatus^(0+128),w
  3725                           
  3726                           ; Switch size 1, requested type "speed"
  3727                           ; Number of cases is 3, Range of values is 0 to 2
  3728                           ; switch strategies available:
  3729                           ; Name         Instructions Cycles
  3730                           ; simple_byte           10     6 (average)
  3731                           ; direct_byte           12     6 (fixed)
  3732                           ; jumptable            260     6 (fixed)
  3733                           ;	Chosen strategy is simple_byte
  3734  0228  3A00               	xorlw	0	; case 0
  3735  0229  1903               	skipnz
  3736  022A  2986               	goto	l1742
  3737  022B  3A01               	xorlw	1	; case 1
  3738  022C  1903               	skipnz
  3739  022D  29AC               	goto	l1768
  3740  022E  3A03               	xorlw	3	; case 2
  3741  022F  1903               	skipnz
  3742  0230  29DD               	goto	l1790
  3743  0231  2A32               	goto	l1828
  3744  0232                     l1828:	
  3745                           
  3746                           ;mrf49xa_data.c: 175: }
  3747                           ;mrf49xa_data.c: 189: return PORTAbits.RA2 == 1 ? 1 : 0;
  3748  0232  0020               	movlb	0	; select bank0
  3749  0233  0C0C               	rrf	12,w	;volatile
  3750  0234  0C89               	rrf	9,f
  3751  0235  3901               	andlw	1
  3752  0236  0008               	return
  3753  0237                     __end_of_Mrf49xaServe:	
  3754  0237                     __ptext13:	
  3755 ;; *************** function _Mrf49TxByte *****************
  3756 ;; Defined at:
  3757 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  byte            1    wreg     unsigned char 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  byte            1    3[BANK0 ] unsigned char 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;		None               void
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0, pclath, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 1E/1
  3768 ;;		On exit  : 1F/2
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3771 ;;      Params:         0       0       0       0
  3772 ;;      Locals:         0       1       0       0
  3773 ;;      Temps:          0       0       0       0
  3774 ;;      Totals:         0       1       0       0
  3775 ;;Total ram usage:        1 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    7
  3778 ;; This function calls:
  3779 ;;		_Mrf49TxCmd
  3780 ;; This function is called by:
  3781 ;;		_Mrf49xaServe
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _Mrf49TxByte
  3787  0237                     _Mrf49TxByte:	
  3788                           
  3789                           ;incstack = 0
  3790                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  3791                           ;Mrf49TxByte@byte stored from wreg
  3792  0237  0020               	movlb	0	; select bank0
  3793  0238  00A3               	movwf	Mrf49TxByte@byte
  3794                           
  3795                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  3796  0239  00A1               	movwf	Mrf49TxCmd@val
  3797  023A  30B8               	movlw	184
  3798  023B  2A68               	ljmp	_Mrf49TxCmd
  3799  023C                     __end_of_Mrf49TxByte:	
  3800  023C                     __ptext16:	
  3801 ;; *************** function _Mrf49RxByte *****************
  3802 ;; Defined at:
  3803 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      unsigned char 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0, pclath, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 1E/1
  3814 ;;		On exit  : 1F/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3817 ;;      Params:         0       0       0       0
  3818 ;;      Locals:         0       0       0       0
  3819 ;;      Temps:          0       0       0       0
  3820 ;;      Totals:         0       0       0       0
  3821 ;;Total ram usage:        0 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    7
  3824 ;; This function calls:
  3825 ;;		_Mrf49RxCmd
  3826 ;; This function is called by:
  3827 ;;		_Mrf49xaServe
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           
  3832                           ;psect for function _Mrf49RxByte
  3833  023C                     _Mrf49RxByte:	
  3834                           
  3835                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  3836                           
  3837                           ;incstack = 0
  3838                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3839  023C  30B0               	movlw	176
  3840  023D  28FE               	ljmp	_Mrf49RxCmd
  3841  023E                     __end_of_Mrf49RxByte:	
  3842  023E                     __ptext12:	
  3843 ;; *************** function _Mrf49xaModeRx *****************
  3844 ;; Defined at:
  3845 ;;		line 71 in file "../../../src/devices/mrf49xa.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;  k               1    3[BANK0 ] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;		None               void
  3852 ;; Registers used:
  3853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 1C/0
  3856 ;;		On exit  : 1F/1
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3859 ;;      Params:         0       0       0       0
  3860 ;;      Locals:         0       1       0       0
  3861 ;;      Temps:          0       0       0       0
  3862 ;;      Totals:         0       1       0       0
  3863 ;;Total ram usage:        1 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    7
  3866 ;; This function calls:
  3867 ;;		_Mrf49TxCmd
  3868 ;; This function is called by:
  3869 ;;		_Mrf49xaInit
  3870 ;;		_Mrf49xaServe
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function _Mrf49xaModeRx
  3876  023E                     _Mrf49xaModeRx:	
  3877                           
  3878                           ;mrf49xa.c: 73: UI08_t k;
  3879                           ;mrf49xa.c: 74: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3880                           
  3881                           ;incstack = 0
  3882                           ; Regs used in _Mrf49xaModeRx: [allreg]
  3883  023E  0020               	movlb	0	; select bank0
  3884  023F  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3885  0240  01A3               	clrf	Mrf49xaModeRx@k
  3886  0241  3186               	movlp	high __stringtab
  3887  0242  000A               	callw
  3888  0243  3180               	pagesel	$	;select current page
  3889  0244  3800               	iorlw	0
  3890  0245  1903               	btfsc	3,2
  3891  0246  2A64               	goto	l1846
  3892  0247                     l1838:	
  3893  0247  3523               	lslf	Mrf49xaModeRx@k,w
  3894  0248  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3895  0249  3186               	movlp	high __stringtab
  3896  024A  000A               	callw
  3897  024B  3180               	pagesel	$	;select current page
  3898  024C  3A55               	xorlw	85
  3899  024D  1903               	skipnz
  3900  024E  2A5B               	goto	l1842
  3901  024F  3523               	lslf	Mrf49xaModeRx@k,w
  3902  0250  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3903  0251  3186               	movlp	high __stringtab
  3904  0252  000A               	callw
  3905  0253  00A1               	movwf	Mrf49TxCmd@val
  3906  0254  3523               	lslf	Mrf49xaModeRx@k,w
  3907  0255  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3908  0256  3186               	movlp	high __stringtab
  3909  0257  000A               	callw
  3910  0258  3180               	pagesel	$	;select current page
  3911  0259  3182  2268         	fcall	_Mrf49TxCmd
  3912  025B                     l1842:	
  3913  025B  0020               	movlb	0	; select bank0
  3914  025C  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3915  025D  0AA3               	incf	Mrf49xaModeRx@k,f
  3916  025E  3186               	movlp	high __stringtab
  3917  025F  000A               	callw
  3918  0260  3180               	pagesel	$	;select current page
  3919  0261  0223               	subwf	Mrf49xaModeRx@k,w
  3920  0262  1C03               	skipc
  3921  0263  2A47               	goto	l1838
  3922  0264                     l1846:	
  3923                           
  3924                           ;mrf49xa.c: 76: rfTrcvStatus.state = RECV_IDLE;
  3925  0264  0021               	movlb	1	; select bank1
  3926  0265  01A0               	clrf	_rfTrcvStatus^(0+128)
  3927                           
  3928                           ;mrf49xa.c: 77: rfTrcvStatus.hwByte = 0;
  3929  0266  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3930  0267  0008               	return
  3931  0268                     __end_of_Mrf49xaModeRx:	
  3932  0268                     __ptext14:	
  3933 ;; *************** function _Mrf49TxCmd *****************
  3934 ;; Defined at:
  3935 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  cmd             1    wreg     unsigned char 
  3938 ;;  val             1    1[BANK0 ] unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  cmd             1    2[BANK0 ] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 1F/0
  3947 ;;		On exit  : 1F/2
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3950 ;;      Params:         0       1       0       0
  3951 ;;      Locals:         0       1       0       0
  3952 ;;      Temps:          0       0       0       0
  3953 ;;      Totals:         0       2       0       0
  3954 ;;Total ram usage:        2 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    6
  3957 ;; This function calls:
  3958 ;;		_Mrf49SpiTx
  3959 ;; This function is called by:
  3960 ;;		_Mrf49xaModeRx
  3961 ;;		_Mrf49xaModeTx
  3962 ;;		_Mrf49xaInit
  3963 ;;		_Mrf49TxByte
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           
  3968                           ;psect for function _Mrf49TxCmd
  3969  0268                     _Mrf49TxCmd:	
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3973                           ;Mrf49TxCmd@cmd stored from wreg
  3974  0268  00A2               	movwf	Mrf49TxCmd@cmd
  3975                           
  3976                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  3977  0269  0022               	movlb	2	; select bank2
  3978  026A  130E               	bcf	14,6	;volatile
  3979                           
  3980                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3981  026B  0020               	movlb	0	; select bank0
  3982  026C  0822               	movf	Mrf49TxCmd@cmd,w
  3983  026D  2274  3180         	fcall	_Mrf49SpiTx
  3984                           
  3985                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3986  026F  0020               	movlb	0	; select bank0
  3987  0270  0821               	movf	Mrf49TxCmd@val,w
  3988  0271  2274               	fcall	_Mrf49SpiTx
  3989                           
  3990                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  3991  0272  170E               	bsf	14,6	;volatile
  3992  0273  0008               	return
  3993  0274                     __end_of_Mrf49TxCmd:	
  3994  0274                     __ptext18:	
  3995 ;; *************** function _Mrf49SpiTx *****************
  3996 ;; Defined at:
  3997 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  byte            1    wreg     unsigned char 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  byte            1    0[BANK0 ] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;		None               void
  4004 ;; Registers used:
  4005 ;;		wreg
  4006 ;; Tracked objects:
  4007 ;;		On entry : 1F/0
  4008 ;;		On exit  : 1F/2
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4011 ;;      Params:         0       0       0       0
  4012 ;;      Locals:         0       1       0       0
  4013 ;;      Temps:          0       0       0       0
  4014 ;;      Totals:         0       1       0       0
  4015 ;;Total ram usage:        1 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    5
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		_Mrf49TxCmd
  4022 ;;		_Mrf49RxCmd
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _Mrf49SpiTx
  4028  0274                     _Mrf49SpiTx:	
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _Mrf49SpiTx: [wreg]
  4032                           ;Mrf49SpiTx@byte stored from wreg
  4033  0274  00A0               	movwf	Mrf49SpiTx@byte
  4034                           
  4035                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  4036  0275  1FA0               	btfss	Mrf49SpiTx@byte,7
  4037  0276  2A7A               	goto	l205
  4038  0277  0022               	movlb	2	; select bank2
  4039  0278  178D               	bsf	13,7	;volatile
  4040  0279  2A7C               	goto	l206
  4041  027A                     l205:	
  4042  027A  0022               	movlb	2	; select bank2
  4043  027B  138D               	bcf	13,7	;volatile
  4044  027C                     l206:	
  4045  027C  178E               	bsf	14,7	;volatile
  4046  027D  0000               	nop	;# 
  4047  027E  0022               	movlb	2	; select bank2
  4048  027F  138E               	bcf	14,7	;volatile
  4049  0280  0020               	movlb	0	; select bank0
  4050  0281  1F20               	btfss	Mrf49SpiTx@byte,6
  4051  0282  2A86               	goto	l209
  4052  0283  0022               	movlb	2	; select bank2
  4053  0284  178D               	bsf	13,7	;volatile
  4054  0285  2A88               	goto	l210
  4055  0286                     l209:	
  4056  0286  0022               	movlb	2	; select bank2
  4057  0287  138D               	bcf	13,7	;volatile
  4058  0288                     l210:	
  4059  0288  178E               	bsf	14,7	;volatile
  4060  0289  0000               	nop	;# 
  4061  028A  0022               	movlb	2	; select bank2
  4062  028B  138E               	bcf	14,7	;volatile
  4063  028C  0020               	movlb	0	; select bank0
  4064  028D  1EA0               	btfss	Mrf49SpiTx@byte,5
  4065  028E  2A92               	goto	l213
  4066  028F  0022               	movlb	2	; select bank2
  4067  0290  178D               	bsf	13,7	;volatile
  4068  0291  2A94               	goto	l214
  4069  0292                     l213:	
  4070  0292  0022               	movlb	2	; select bank2
  4071  0293  138D               	bcf	13,7	;volatile
  4072  0294                     l214:	
  4073  0294  178E               	bsf	14,7	;volatile
  4074  0295  0000               	nop	;# 
  4075  0296  0022               	movlb	2	; select bank2
  4076  0297  138E               	bcf	14,7	;volatile
  4077  0298  0020               	movlb	0	; select bank0
  4078  0299  1E20               	btfss	Mrf49SpiTx@byte,4
  4079  029A  2A9E               	goto	l217
  4080  029B  0022               	movlb	2	; select bank2
  4081  029C  178D               	bsf	13,7	;volatile
  4082  029D  2AA0               	goto	l218
  4083  029E                     l217:	
  4084  029E  0022               	movlb	2	; select bank2
  4085  029F  138D               	bcf	13,7	;volatile
  4086  02A0                     l218:	
  4087  02A0  178E               	bsf	14,7	;volatile
  4088  02A1  0000               	nop	;# 
  4089  02A2  0022               	movlb	2	; select bank2
  4090  02A3  138E               	bcf	14,7	;volatile
  4091  02A4  0020               	movlb	0	; select bank0
  4092  02A5  1DA0               	btfss	Mrf49SpiTx@byte,3
  4093  02A6  2AAA               	goto	l221
  4094  02A7  0022               	movlb	2	; select bank2
  4095  02A8  178D               	bsf	13,7	;volatile
  4096  02A9  2AAC               	goto	l222
  4097  02AA                     l221:	
  4098  02AA  0022               	movlb	2	; select bank2
  4099  02AB  138D               	bcf	13,7	;volatile
  4100  02AC                     l222:	
  4101  02AC  178E               	bsf	14,7	;volatile
  4102  02AD  0000               	nop	;# 
  4103  02AE  0022               	movlb	2	; select bank2
  4104  02AF  138E               	bcf	14,7	;volatile
  4105  02B0  0020               	movlb	0	; select bank0
  4106  02B1  1D20               	btfss	Mrf49SpiTx@byte,2
  4107  02B2  2AB6               	goto	l225
  4108  02B3  0022               	movlb	2	; select bank2
  4109  02B4  178D               	bsf	13,7	;volatile
  4110  02B5  2AB8               	goto	l226
  4111  02B6                     l225:	
  4112  02B6  0022               	movlb	2	; select bank2
  4113  02B7  138D               	bcf	13,7	;volatile
  4114  02B8                     l226:	
  4115  02B8  178E               	bsf	14,7	;volatile
  4116  02B9  0000               	nop	;# 
  4117  02BA  0022               	movlb	2	; select bank2
  4118  02BB  138E               	bcf	14,7	;volatile
  4119  02BC  0020               	movlb	0	; select bank0
  4120  02BD  1CA0               	btfss	Mrf49SpiTx@byte,1
  4121  02BE  2AC2               	goto	l229
  4122  02BF  0022               	movlb	2	; select bank2
  4123  02C0  178D               	bsf	13,7	;volatile
  4124  02C1  2AC4               	goto	l230
  4125  02C2                     l229:	
  4126  02C2  0022               	movlb	2	; select bank2
  4127  02C3  138D               	bcf	13,7	;volatile
  4128  02C4                     l230:	
  4129  02C4  178E               	bsf	14,7	;volatile
  4130  02C5  0000               	nop	;# 
  4131  02C6  0022               	movlb	2	; select bank2
  4132  02C7  138E               	bcf	14,7	;volatile
  4133  02C8  0020               	movlb	0	; select bank0
  4134  02C9  1C20               	btfss	Mrf49SpiTx@byte,0
  4135  02CA  2ACE               	goto	l233
  4136  02CB  0022               	movlb	2	; select bank2
  4137  02CC  178D               	bsf	13,7	;volatile
  4138  02CD  2AD0               	goto	l234
  4139  02CE                     l233:	
  4140  02CE  0022               	movlb	2	; select bank2
  4141  02CF  138D               	bcf	13,7	;volatile
  4142  02D0                     l234:	
  4143  02D0  178E               	bsf	14,7	;volatile
  4144  02D1  0000               	nop	;# 
  4145  02D2  0022               	movlb	2	; select bank2
  4146  02D3  138E               	bcf	14,7	;volatile
  4147                           
  4148                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  4149  02D4  138D               	bcf	13,7	;volatile
  4150  02D5  0008               	return
  4151  02D6                     __end_of_Mrf49SpiTx:	
  4152  02D6                     __ptext15:	
  4153 ;; *************** function _Mrf49RxSts *****************
  4154 ;; Defined at:
  4155 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;		None               void
  4162 ;; Registers used:
  4163 ;;		wreg, status,2, pclath, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 1E/0
  4166 ;;		On exit  : 1F/2
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4169 ;;      Params:         0       0       0       0
  4170 ;;      Locals:         0       0       0       0
  4171 ;;      Temps:          0       0       0       0
  4172 ;;      Totals:         0       0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    6
  4176 ;; This function calls:
  4177 ;;		_Mrf49SpiRx
  4178 ;; This function is called by:
  4179 ;;		_Mrf49xaTick
  4180 ;;		_Mrf49xaServe
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function _Mrf49RxSts
  4186  02D6                     _Mrf49RxSts:	
  4187                           
  4188                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  4192  02D6  120B               	bcf	11,4	;volatile
  4193                           
  4194                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  4195  02D7  0022               	movlb	2	; select bank2
  4196  02D8  130E               	bcf	14,6	;volatile
  4197                           
  4198                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  4199  02D9  22E2  3180         	fcall	_Mrf49SpiRx
  4200  02DB  00AE               	movwf	_mrf49Status
  4201                           
  4202                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  4203  02DC  22E2               	fcall	_Mrf49SpiRx
  4204  02DD  00AF               	movwf	_mrf49Status+1
  4205                           
  4206                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  4207  02DE  0022               	movlb	2	; select bank2
  4208  02DF  170E               	bsf	14,6	;volatile
  4209                           
  4210                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  4211  02E0  160B               	bsf	11,4	;volatile
  4212  02E1  0008               	return
  4213  02E2                     __end_of_Mrf49RxSts:	
  4214  02E2                     __ptext19:	
  4215 ;; *************** function _Mrf49SpiRx *****************
  4216 ;; Defined at:
  4217 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;		None
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;  data            1    0[BANK0 ] unsigned char 
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      unsigned char 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2
  4226 ;; Tracked objects:
  4227 ;;		On entry : 1D/2
  4228 ;;		On exit  : 1F/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4231 ;;      Params:         0       0       0       0
  4232 ;;      Locals:         0       1       0       0
  4233 ;;      Temps:          0       0       0       0
  4234 ;;      Totals:         0       1       0       0
  4235 ;;Total ram usage:        1 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    5
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_Mrf49RxCmd
  4242 ;;		_Mrf49RxSts
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function _Mrf49SpiRx
  4248  02E2                     _Mrf49SpiRx:	
  4249                           
  4250                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  4251                           
  4252                           ;incstack = 0
  4253                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  4254  02E2  0020               	movlb	0	; select bank0
  4255  02E3  01A0               	clrf	Mrf49SpiRx@data
  4256                           
  4257                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  4258  02E4  0022               	movlb	2	; select bank2
  4259  02E5  138D               	bcf	13,7	;volatile
  4260  02E6  0020               	movlb	0	; select bank0
  4261  02E7  1A8E               	btfsc	14,5	;volatile
  4262  02E8  17A0               	bsf	Mrf49SpiRx@data,7
  4263  02E9  0022               	movlb	2	; select bank2
  4264  02EA  178E               	bsf	14,7	;volatile
  4265  02EB  0000               	nop	;# 
  4266  02EC  0022               	movlb	2	; select bank2
  4267  02ED  138E               	bcf	14,7	;volatile
  4268                           
  4269                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4270  02EE  0020               	movlb	0	; select bank0
  4271  02EF  1A8E               	btfsc	14,5	;volatile
  4272  02F0  1720               	bsf	Mrf49SpiRx@data,6
  4273  02F1  0022               	movlb	2	; select bank2
  4274  02F2  178E               	bsf	14,7	;volatile
  4275  02F3  0000               	nop	;# 
  4276  02F4  0022               	movlb	2	; select bank2
  4277  02F5  138E               	bcf	14,7	;volatile
  4278                           
  4279                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4280  02F6  0020               	movlb	0	; select bank0
  4281  02F7  1A8E               	btfsc	14,5	;volatile
  4282  02F8  16A0               	bsf	Mrf49SpiRx@data,5
  4283  02F9  0022               	movlb	2	; select bank2
  4284  02FA  178E               	bsf	14,7	;volatile
  4285  02FB  0000               	nop	;# 
  4286  02FC  0022               	movlb	2	; select bank2
  4287  02FD  138E               	bcf	14,7	;volatile
  4288                           
  4289                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4290  02FE  0020               	movlb	0	; select bank0
  4291  02FF  1A8E               	btfsc	14,5	;volatile
  4292  0300  1620               	bsf	Mrf49SpiRx@data,4
  4293  0301  0022               	movlb	2	; select bank2
  4294  0302  178E               	bsf	14,7	;volatile
  4295  0303  0000               	nop	;# 
  4296  0304  0022               	movlb	2	; select bank2
  4297  0305  138E               	bcf	14,7	;volatile
  4298                           
  4299                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4300  0306  0020               	movlb	0	; select bank0
  4301  0307  1A8E               	btfsc	14,5	;volatile
  4302  0308  15A0               	bsf	Mrf49SpiRx@data,3
  4303  0309  0022               	movlb	2	; select bank2
  4304  030A  178E               	bsf	14,7	;volatile
  4305  030B  0000               	nop	;# 
  4306  030C  0022               	movlb	2	; select bank2
  4307  030D  138E               	bcf	14,7	;volatile
  4308                           
  4309                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4310  030E  0020               	movlb	0	; select bank0
  4311  030F  1A8E               	btfsc	14,5	;volatile
  4312  0310  1520               	bsf	Mrf49SpiRx@data,2
  4313  0311  0022               	movlb	2	; select bank2
  4314  0312  178E               	bsf	14,7	;volatile
  4315  0313  0000               	nop	;# 
  4316  0314  0022               	movlb	2	; select bank2
  4317  0315  138E               	bcf	14,7	;volatile
  4318                           
  4319                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4320  0316  0020               	movlb	0	; select bank0
  4321  0317  1A8E               	btfsc	14,5	;volatile
  4322  0318  14A0               	bsf	Mrf49SpiRx@data,1
  4323  0319  0022               	movlb	2	; select bank2
  4324  031A  178E               	bsf	14,7	;volatile
  4325  031B  0000               	nop	;# 
  4326  031C  0022               	movlb	2	; select bank2
  4327  031D  138E               	bcf	14,7	;volatile
  4328                           
  4329                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4330  031E  0020               	movlb	0	; select bank0
  4331  031F  1A8E               	btfsc	14,5	;volatile
  4332  0320  1420               	bsf	Mrf49SpiRx@data,0
  4333  0321  0022               	movlb	2	; select bank2
  4334  0322  178E               	bsf	14,7	;volatile
  4335  0323  0000               	nop	;# 
  4336  0324  0022               	movlb	2	; select bank2
  4337  0325  138E               	bcf	14,7	;volatile
  4338                           
  4339                           ;mrf49xa_spi_pic16.c: 40: return data;
  4340  0326  0020               	movlb	0	; select bank0
  4341  0327  0820               	movf	Mrf49SpiRx@data,w
  4342  0328  0008               	return
  4343  0329                     __end_of_Mrf49SpiRx:	
  4344  0329                     __ptext21:	
  4345 ;; *************** function _AdcInit *****************
  4346 ;; Defined at:
  4347 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;		None
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;		None
  4352 ;; Return value:  Size  Location     Type
  4353 ;;		None               void
  4354 ;; Registers used:
  4355 ;;		wreg, status,2
  4356 ;; Tracked objects:
  4357 ;;		On entry : 17F/2
  4358 ;;		On exit  : 17F/1
  4359 ;;		Unchanged: 160/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4361 ;;      Params:         0       0       0       0
  4362 ;;      Locals:         0       0       0       0
  4363 ;;      Temps:          0       0       0       0
  4364 ;;      Totals:         0       0       0       0
  4365 ;;Total ram usage:        0 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    5
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_main
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           
  4376                           ;psect for function _AdcInit
  4377  0329                     _AdcInit:	
  4378                           
  4379                           ;adc16.c: 6: ANSELA = 0;
  4380                           
  4381                           ;incstack = 0
  4382                           ; Regs used in _AdcInit: [wreg+status,2]
  4383  0329  0023               	movlb	3	; select bank3
  4384  032A  018C               	clrf	12	;volatile
  4385                           
  4386                           ;adc16.c: 7: ANSELB = 0;
  4387  032B  018D               	clrf	13	;volatile
  4388                           
  4389                           ;adc16.c: 8: ANSELC = 0;
  4390  032C  018E               	clrf	14	;volatile
  4391                           
  4392                           ;adc16.c: 10: FVRCON = 0b11100001;
  4393  032D  30E1               	movlw	225
  4394  032E  0022               	movlb	2	; select bank2
  4395  032F  0097               	movwf	23	;volatile
  4396                           
  4397                           ;adc16.c: 12: ADCON2 = 0b00000000;
  4398  0330  0021               	movlb	1	; select bank1
  4399  0331  019F               	clrf	31	;volatile
  4400                           
  4401                           ;adc16.c: 13: ADCON1 = 0b11110000;
  4402  0332  30F0               	movlw	240
  4403  0333  009E               	movwf	30	;volatile
  4404                           
  4405                           ;adc16.c: 14: ADCON0 = 0b00000000;
  4406  0334  019D               	clrf	29	;volatile
  4407                           
  4408                           ;adc16.c: 16: ADCON0 = 0b00010011;
  4409  0335  3013               	movlw	19
  4410  0336  009D               	movwf	29	;volatile
  4411  0337  0008               	return
  4412  0338                     __end_of_AdcInit:	
  4413  0338                     __ptext20:	
  4414 ;; *************** function _ExtIntInit *****************
  4415 ;; Defined at:
  4416 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;		None               void
  4423 ;; Registers used:
  4424 ;;		None
  4425 ;; Tracked objects:
  4426 ;;		On entry : 17F/1
  4427 ;;		On exit  : 17F/1
  4428 ;;		Unchanged: 160/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4430 ;;      Params:         0       0       0       0
  4431 ;;      Locals:         0       0       0       0
  4432 ;;      Temps:          0       0       0       0
  4433 ;;      Totals:         0       0       0       0
  4434 ;;Total ram usage:        0 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    5
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_main
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _ExtIntInit
  4446  0338                     _ExtIntInit:	
  4447                           
  4448                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _ExtIntInit: []
  4452  0338  1315               	bcf	21,6	;volatile
  4453                           
  4454                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4455  0339  108B               	bcf	11,1	;volatile
  4456                           
  4457                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4458  033A  160B               	bsf	11,4	;volatile
  4459                           
  4460                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4461  033B  178B               	bsf	11,7	;volatile
  4462  033C  0008               	return
  4463  033D                     __end_of_ExtIntInit:	
  4464  033D                     __ptext9:	
  4465 ;; *************** function _Mrf49xaFreePacket *****************
  4466 ;; Defined at:
  4467 ;;		line 61 in file "../../../src/devices/mrf49xa_packet.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4470 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  4473 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;		None               void
  4476 ;; Registers used:
  4477 ;;		wreg, fsr1l, fsr1h, status,2
  4478 ;; Tracked objects:
  4479 ;;		On entry : 1F/0
  4480 ;;		On exit  : 1F/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4483 ;;      Params:         0       0       0       0
  4484 ;;      Locals:         0       1       0       0
  4485 ;;      Temps:          0       0       0       0
  4486 ;;      Totals:         0       1       0       0
  4487 ;;Total ram usage:        1 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    5
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_Mrf49xaTick
  4494 ;;		_HandlePacket
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function _Mrf49xaFreePacket
  4500  033D                     _Mrf49xaFreePacket:	
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  4504                           ;Mrf49xaFreePacket@packet stored from wreg
  4505  033D  00A0               	movwf	Mrf49xaFreePacket@packet
  4506                           
  4507                           ;mrf49xa_packet.c: 63: packet->state = PKT_FREE;
  4508  033E  0086               	movwf	6
  4509  033F  0187               	clrf	7
  4510  0340  0181               	clrf	1
  4511  0341  0008               	return
  4512  0342                     __end_of_Mrf49xaFreePacket:	
  4513  0342                     __ptext6:	
  4514 ;; *************** function _HandlePacket *****************
  4515 ;; Defined at:
  4516 ;;		line 3 in file "../../../src/rfstack/client.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4519 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  packet          1    9[BANK0 ] PTR struct rfTrcvPacket_
  4522 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4523 ;;  sendAck         1    8[BANK0 ] unsigned char 
  4524 ;;  sendMsg         1    7[BANK0 ] unsigned char 
  4525 ;;  needAck         1    0        unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;		None               void
  4528 ;; Registers used:
  4529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 1F/0
  4532 ;;		On exit  : 1E/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4535 ;;      Params:         0       0       0       0
  4536 ;;      Locals:         0       4       0       0
  4537 ;;      Temps:          0       0       0       0
  4538 ;;      Totals:         0       4       0       0
  4539 ;;Total ram usage:        4 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    7
  4542 ;; This function calls:
  4543 ;;		_Mrf49xaFreePacket
  4544 ;;		_Mrf49xaTxAck
  4545 ;;		_Mrf49xaTxPacket
  4546 ;; This function is called by:
  4547 ;;		_Mrf49xaTick
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function _HandlePacket
  4553  0342                     _HandlePacket:	
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4557                           ;HandlePacket@packet stored from wreg
  4558  0342  00A9               	movwf	HandlePacket@packet
  4559                           
  4560                           ;client.c: 5: bool_t sendMsg = 0;
  4561  0343  01A7               	clrf	HandlePacket@sendMsg
  4562                           
  4563                           ;client.c: 6: bool_t sendAck = 0;
  4564  0344  01A8               	clrf	HandlePacket@sendAck
  4565                           
  4566                           ;client.c: 10: switch (packet->packet.id)
  4567  0345  2B67               	goto	l2138
  4568  0346                     l2126:	
  4569                           
  4570                           ;client.c: 13: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  4571                           ;client.c: 14: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  4572  0346  0829               	movf	HandlePacket@packet,w
  4573  0347  3E07               	addlw	7
  4574  0348  0086               	movwf	6
  4575  0349  0187               	clrf	7
  4576  034A  0021               	movlb	1	; select bank1
  4577  034B  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  4578  034C  0601               	xorwf	1,w
  4579  034D  1D03               	skipz
  4580  034E  2B76               	goto	l2140
  4581  034F  0020               	movlb	0	; select bank0
  4582  0350  0829               	movf	HandlePacket@packet,w
  4583  0351  3E06               	addlw	6
  4584  0352  0086               	movwf	6
  4585  0353  0021               	movlb	1	; select bank1
  4586  0354  0825               	movf	(_rfTrcvStatus^(0+128)+5),w
  4587  0355  0601               	xorwf	1,w
  4588  0356  1D03               	skipz
  4589  0357  2B76               	goto	l2140
  4590                           
  4591                           ;client.c: 15: {
  4592                           ;client.c: 16: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  4593  0358  3002               	movlw	2
  4594  0359  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  4595  035A  2B76               	goto	l2140
  4596  035B                     l2132:	
  4597                           
  4598                           ;client.c: 21: packet->packet.data[0] = 2;
  4599  035B  0829               	movf	HandlePacket@packet,w
  4600  035C  3E06               	addlw	6
  4601  035D  0086               	movwf	6
  4602  035E  3002               	movlw	2
  4603  035F  0187               	clrf	7
  4604  0360  0081               	movwf	1
  4605                           
  4606                           ;client.c: 22: sendMsg = 1;
  4607  0361  01A7               	clrf	HandlePacket@sendMsg
  4608  0362  0AA7               	incf	HandlePacket@sendMsg,f
  4609                           
  4610                           ;client.c: 23: break;
  4611  0363  2B76               	goto	l2140
  4612  0364                     l421:	
  4613                           ;client.c: 26: syncedTime = *((uint32_t*) packet->packet.data);
  4614                           
  4615                           
  4616                           ;client.c: 27: sendAck = 1;
  4617  0364  01A8               	clrf	HandlePacket@sendAck
  4618  0365  0AA8               	incf	HandlePacket@sendAck,f
  4619                           
  4620                           ;client.c: 28: break;
  4621  0366  2B76               	goto	l2140
  4622  0367                     l2138:	
  4623  0367  0829               	movf	HandlePacket@packet,w
  4624  0368  3E04               	addlw	4
  4625  0369  0086               	movwf	6
  4626  036A  0187               	clrf	7
  4627  036B  0801               	movf	1,w
  4628                           
  4629                           ; Switch size 1, requested type "speed"
  4630                           ; Number of cases is 3, Range of values is 160 to 162
  4631                           ; switch strategies available:
  4632                           ; Name         Instructions Cycles
  4633                           ; simple_byte           10     6 (average)
  4634                           ; direct_byte           15     9 (fixed)
  4635                           ; jumptable            263     9 (fixed)
  4636                           ;	Chosen strategy is simple_byte
  4637  036C  3AA0               	xorlw	160	; case 160
  4638  036D  1903               	skipnz
  4639  036E  2B5B               	goto	l2132
  4640  036F  3A01               	xorlw	1	; case 161
  4641  0370  1903               	skipnz
  4642  0371  2B46               	goto	l2126
  4643  0372  3A03               	xorlw	3	; case 162
  4644  0373  1903               	skipnz
  4645  0374  2B64               	goto	l421
  4646  0375  2B76               	goto	l2140
  4647  0376                     l2140:	
  4648                           
  4649                           ;client.c: 32: if (sendMsg)
  4650  0376  0020               	movlb	0	; select bank0
  4651  0377  0827               	movf	HandlePacket@sendMsg,w
  4652  0378  1903               	btfsc	3,2
  4653  0379  2B7F               	goto	l2144
  4654                           
  4655                           ;client.c: 33: Mrf49xaTxPacket(packet, 1, needAck);
  4656  037A  01A0               	clrf	Mrf49xaTxPacket@response
  4657  037B  0AA0               	incf	Mrf49xaTxPacket@response,f
  4658  037C  01A1               	clrf	Mrf49xaTxPacket@needAck
  4659  037D  0829               	movf	HandlePacket@packet,w
  4660  037E  2BBB               	ljmp	_Mrf49xaTxPacket
  4661  037F                     l2144:	
  4662                           
  4663                           ;client.c: 34: else if (sendAck)
  4664  037F  0828               	movf	HandlePacket@sendAck,w
  4665  0380  1903               	btfsc	3,2
  4666  0381  2B84               	goto	l2148
  4667                           
  4668                           ;client.c: 35: Mrf49xaTxAck(packet);
  4669  0382  0829               	movf	HandlePacket@packet,w
  4670  0383  2BFD               	ljmp	_Mrf49xaTxAck
  4671  0384                     l2148:	
  4672                           
  4673                           ;client.c: 36: else
  4674                           ;client.c: 37: Mrf49xaFreePacket(packet);
  4675  0384  0829               	movf	HandlePacket@packet,w
  4676  0385  2B3D               	ljmp	_Mrf49xaFreePacket
  4677  0386                     __end_of_HandlePacket:	
  4678  0386                     __ptext4:	
  4679 ;; *************** function _Mrf49xaPacketPending *****************
  4680 ;; Defined at:
  4681 ;;		line 5 in file "../../../src/devices/mrf49xa_packet.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      unsigned char 
  4688 ;; Registers used:
  4689 ;;		wreg
  4690 ;; Tracked objects:
  4691 ;;		On entry : 1E/0
  4692 ;;		On exit  : 1F/1
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4695 ;;      Params:         0       0       0       0
  4696 ;;      Locals:         0       0       0       0
  4697 ;;      Temps:          0       0       0       0
  4698 ;;      Totals:         0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    5
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_Mrf49xaTick
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _Mrf49xaPacketPending
  4711  0386                     _Mrf49xaPacketPending:	
  4712                           
  4713                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  4714                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4715                           
  4716                           ;incstack = 0
  4717                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  4718  0386  0021               	movlb	1	; select bank1
  4719  0387  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4720  0388  3A04               	xorlw	4
  4721  0389  1903               	skipnz
  4722  038A  3401               	retlw	1
  4723  038B  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4724  038C  3A04               	xorlw	4
  4725  038D  1903               	btfsc	3,2
  4726                           
  4727                           ;mrf49xa_packet.c: 9: return 1;
  4728  038E  3401               	retlw	1
  4729                           
  4730                           ;mrf49xa_packet.c: 10: else
  4731                           ;mrf49xa_packet.c: 11: return 0;
  4732  038F  3400               	retlw	0
  4733  0390                     __end_of_Mrf49xaPacketPending:	
  4734  0390                     __ptext3:	
  4735 ;; *************** function _Mrf49xaRxPacket *****************
  4736 ;; Defined at:
  4737 ;;		line 66 in file "../../../src/devices/mrf49xa_packet.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4744 ;; Registers used:
  4745 ;;		wreg
  4746 ;; Tracked objects:
  4747 ;;		On entry : 1F/1
  4748 ;;		On exit  : 1F/1
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4751 ;;      Params:         0       0       0       0
  4752 ;;      Locals:         0       0       0       0
  4753 ;;      Temps:          0       0       0       0
  4754 ;;      Totals:         0       0       0       0
  4755 ;;Total ram usage:        0 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    5
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_Mrf49xaTick
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           
  4766                           ;psect for function _Mrf49xaRxPacket
  4767  0390                     _Mrf49xaRxPacket:	
  4768                           
  4769                           ;mrf49xa_packet.c: 68: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  4773  0390  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4774  0391  3A04               	xorlw	4
  4775  0392  1D03               	skipz
  4776  0393  2B97               	goto	l2046
  4777                           
  4778                           ;mrf49xa_packet.c: 69: {
  4779                           ;mrf49xa_packet.c: 70: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4780  0394  3005               	movlw	5
  4781  0395  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4782                           
  4783                           ;mrf49xa_packet.c: 71: return &(rfTrcvStatus.rxPacket[0]);
  4784  0396  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4785  0397                     l2046:	
  4786                           
  4787                           ;mrf49xa_packet.c: 72: }
  4788                           ;mrf49xa_packet.c: 74: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4789  0397  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4790  0398  3A04               	xorlw	4
  4791  0399  1D03               	skipz
  4792  039A  3400               	retlw	0
  4793                           
  4794                           ;mrf49xa_packet.c: 75: {
  4795                           ;mrf49xa_packet.c: 76: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4796  039B  3005               	movlw	5
  4797  039C  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4798                           
  4799                           ;mrf49xa_packet.c: 77: return &(rfTrcvStatus.rxPacket[1]);
  4800  039D  34D3               	retlw	(_rfTrcvStatus+51)& (0+255)
  4801  039E                     __end_of_Mrf49xaRxPacket:	
  4802                           ;mrf49xa_packet.c: 78: }
  4803                           ;mrf49xa_packet.c: 80: return (0);
  4804                           
  4805  039E                     __ptext1:	
  4806 ;; *************** function _SysInitGpio *****************
  4807 ;; Defined at:
  4808 ;;		line 28 in file "../../../src/node/main.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		None
  4817 ;; Tracked objects:
  4818 ;;		On entry : 17F/4
  4819 ;;		On exit  : 17F/2
  4820 ;;		Unchanged: 160/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4822 ;;      Params:         0       0       0       0
  4823 ;;      Locals:         0       0       0       0
  4824 ;;      Temps:          0       0       0       0
  4825 ;;      Totals:         0       0       0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    5
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _SysInitGpio
  4838  039E                     _SysInitGpio:	
  4839                           
  4840                           ;incstack = 0
  4841                           ; Regs used in _SysInitGpio: []
  4842                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4843  039E  0021               	movlb	1	; select bank1
  4844  039F  150C               	bsf	12,2	;volatile
  4845  03A0  120C               	bcf	12,4	;volatile
  4846  03A1  128C               	bcf	12,5	;volatile
  4847  03A2  0022               	movlb	2	; select bank2
  4848  03A3  120C               	bcf	12,4	;volatile
  4849  03A4  128C               	bcf	12,5	;volatile
  4850                           
  4851                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4852  03A5  0021               	movlb	1	; select bank1
  4853  03A6  120D               	bcf	13,4	;volatile
  4854  03A7  130D               	bcf	13,6	;volatile
  4855  03A8  138D               	bcf	13,7	;volatile
  4856  03A9  168D               	bsf	13,5	;volatile
  4857                           
  4858                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  4859  03AA  108E               	bcf	14,1	;volatile
  4860  03AB  110E               	bcf	14,2	;volatile
  4861  03AC  120E               	bcf	14,4	;volatile
  4862  03AD  130E               	bcf	14,6	;volatile
  4863  03AE  138E               	bcf	14,7	;volatile
  4864  03AF  140E               	bsf	14,0	;volatile
  4865  03B0  158E               	bsf	14,3	;volatile
  4866  03B1  168E               	bsf	14,5	;volatile
  4867  03B2  0022               	movlb	2	; select bank2
  4868  03B3  108E               	bcf	14,1	;volatile
  4869  03B4  110E               	bcf	14,2	;volatile
  4870  03B5  120E               	bcf	14,4	;volatile
  4871  03B6  170E               	bsf	14,6	;volatile
  4872  03B7  138E               	bcf	14,7	;volatile
  4873                           
  4874                           ;main.c: 34: LATCbits.LATC1 = 0;
  4875  03B8  108E               	bcf	14,1	;volatile
  4876                           
  4877                           ;main.c: 35: LATCbits.LATC2 = 0;
  4878  03B9  110E               	bcf	14,2	;volatile
  4879  03BA  0008               	return
  4880  03BB                     __end_of_SysInitGpio:	
  4881  03BB                     __ptext8:	
  4882 ;; *************** function _Mrf49xaTxPacket *****************
  4883 ;; Defined at:
  4884 ;;		line 27 in file "../../../src/devices/mrf49xa_packet.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4887 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4888 ;;  response        1    0[BANK0 ] unsigned char 
  4889 ;;  needAck         1    1[BANK0 ] unsigned char 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  packet          1    4[BANK0 ] PTR struct rfTrcvPacket_
  4892 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4893 ;;  i               1    3[BANK0 ] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      unsigned char 
  4896 ;; Registers used:
  4897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4898 ;; Tracked objects:
  4899 ;;		On entry : 1F/0
  4900 ;;		On exit  : 1E/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4903 ;;      Params:         0       2       0       0
  4904 ;;      Locals:         0       2       0       0
  4905 ;;      Temps:          0       1       0       0
  4906 ;;      Totals:         0       5       0       0
  4907 ;;Total ram usage:        5 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    5
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_Mrf49xaTxAck
  4914 ;;		_HandlePacket
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _Mrf49xaTxPacket
  4920  03BB                     _Mrf49xaTxPacket:	
  4921                           
  4922                           ;incstack = 0
  4923                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  4924                           ;Mrf49xaTxPacket@packet stored from wreg
  4925  03BB  00A4               	movwf	Mrf49xaTxPacket@packet
  4926                           
  4927                           ;mrf49xa_packet.c: 29: uint8_t i;
  4928                           ;mrf49xa_packet.c: 32: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4929  03BC  0021               	movlb	1	; select bank1
  4930  03BD  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4931  03BE  1D03               	skipz
  4932  03BF  0008               	return
  4933                           
  4934                           ;mrf49xa_packet.c: 37: else
  4935                           ;mrf49xa_packet.c: 38: {
  4936                           ;mrf49xa_packet.c: 39: if (response)
  4937  03C0  0020               	movlb	0	; select bank0
  4938  03C1  0820               	movf	Mrf49xaTxPacket@response,w
  4939  03C2  1903               	btfsc	3,2
  4940  03C3  2BD4               	goto	l2018
  4941                           
  4942                           ;mrf49xa_packet.c: 40: {
  4943                           ;mrf49xa_packet.c: 41: packet->packet.dst = packet->packet.src;
  4944  03C4  0824               	movf	Mrf49xaTxPacket@packet,w
  4945  03C5  3E03               	addlw	3
  4946  03C6  0086               	movwf	6
  4947  03C7  0187               	clrf	7
  4948  03C8  0824               	movf	Mrf49xaTxPacket@packet,w
  4949  03C9  3E02               	addlw	2
  4950  03CA  0084               	movwf	4
  4951  03CB  0185               	clrf	5
  4952  03CC  0800               	movf	0,w
  4953  03CD  0081               	movwf	1
  4954                           
  4955                           ;mrf49xa_packet.c: 42: packet->packet.src = rfTrcvStatus.src;
  4956  03CE  0824               	movf	Mrf49xaTxPacket@packet,w
  4957  03CF  3E02               	addlw	2
  4958  03D0  0086               	movwf	6
  4959  03D1  0021               	movlb	1	; select bank1
  4960  03D2  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  4961  03D3  0081               	movwf	1
  4962  03D4                     l2018:	
  4963                           
  4964                           ;mrf49xa_packet.c: 43: }
  4965                           ;mrf49xa_packet.c: 45: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4966  03D4  0021               	movlb	1	; select bank1
  4967  03D5  30F0               	movlw	-16
  4968  03D6  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  4969  03D7  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  4970                           
  4971                           ;mrf49xa_packet.c: 46: rfTrcvStatus.txPacket.crc = 0;
  4972  03D8  01B7               	clrf	(_rfTrcvStatus^(0+128)+23)
  4973                           
  4974                           ;mrf49xa_packet.c: 47: rfTrcvStatus.txPacket.retry = 0;
  4975  03D9  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  4976                           
  4977                           ;mrf49xa_packet.c: 48: rfTrcvStatus.txPacket.retransmit = 0;
  4978  03DA  30CF               	movlw	-49
  4979  03DB  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  4980                           
  4981                           ;mrf49xa_packet.c: 49: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4982  03DC  0020               	movlb	0	; select bank0
  4983  03DD  0321               	decf	Mrf49xaTxPacket@needAck,w
  4984  03DE  3000               	movlw	0
  4985  03DF  1903               	skipnz
  4986  03E0  3001               	movlw	1
  4987  03E1  0021               	movlb	1	; select bank1
  4988  03E2  00B8               	movwf	(_rfTrcvStatus^(0+128)+24)
  4989                           
  4990                           ;mrf49xa_packet.c: 51: packet->state = PKT_FREE;
  4991  03E3  0020               	movlb	0	; select bank0
  4992  03E4  0824               	movf	Mrf49xaTxPacket@packet,w
  4993  03E5  0086               	movwf	6
  4994  03E6  0187               	clrf	7
  4995  03E7  0181               	clrf	1
  4996                           
  4997                           ;mrf49xa_packet.c: 54: for (i = 0; i <= packet->packet.size; i++)
  4998  03E8  01A3               	clrf	Mrf49xaTxPacket@i
  4999  03E9                     l2036:	
  5000  03E9  0A24               	incf	Mrf49xaTxPacket@packet,w
  5001  03EA  0086               	movwf	6
  5002  03EB  0187               	clrf	7
  5003  03EC  0823               	movf	Mrf49xaTxPacket@i,w
  5004  03ED  0201               	subwf	1,w
  5005  03EE  1C03               	btfss	3,0
  5006  03EF  0008               	return
  5007                           
  5008                           ;mrf49xa_packet.c: 55: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  5009  03F0  0823               	movf	Mrf49xaTxPacket@i,w
  5010  03F1  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5011  03F2  0086               	movwf	6
  5012  03F3  0823               	movf	Mrf49xaTxPacket@i,w
  5013  03F4  0724               	addwf	Mrf49xaTxPacket@packet,w
  5014  03F5  00A2               	movwf	??_Mrf49xaTxPacket
  5015  03F6  0A22               	incf	??_Mrf49xaTxPacket,w
  5016  03F7  0084               	movwf	4
  5017  03F8  0185               	clrf	5
  5018  03F9  0800               	movf	0,w
  5019  03FA  0081               	movwf	1
  5020  03FB  0AA3               	incf	Mrf49xaTxPacket@i,f
  5021  03FC  2BE9               	goto	l2036
  5022  03FD                     __end_of_Mrf49xaTxPacket:	
  5023  03FD                     __ptext7:	
  5024 ;; *************** function _Mrf49xaTxAck *****************
  5025 ;; Defined at:
  5026 ;;		line 14 in file "../../../src/devices/mrf49xa_packet.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5029 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  5032 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;		None               void
  5035 ;; Registers used:
  5036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 1F/0
  5039 ;;		On exit  : 1E/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5042 ;;      Params:         0       0       0       0
  5043 ;;      Locals:         0       1       0       0
  5044 ;;      Temps:          0       0       0       0
  5045 ;;      Totals:         0       1       0       0
  5046 ;;Total ram usage:        1 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    6
  5049 ;; This function calls:
  5050 ;;		_Mrf49xaTxPacket
  5051 ;; This function is called by:
  5052 ;;		_HandlePacket
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function _Mrf49xaTxAck
  5058  03FD                     _Mrf49xaTxAck:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5062                           ;Mrf49xaTxAck@packet stored from wreg
  5063  03FD  00A5               	movwf	Mrf49xaTxAck@packet
  5064                           
  5065                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  5066  03FE  3E06               	addlw	6
  5067  03FF  0086               	movwf	6
  5068  0400  0187               	clrf	7
  5069  0401  0825               	movf	Mrf49xaTxAck@packet,w
  5070  0402  3E04               	addlw	4
  5071  0403  0084               	movwf	4
  5072  0404  0185               	clrf	5
  5073  0405  0800               	movf	0,w
  5074  0406  0081               	movwf	1
  5075                           
  5076                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  5077  0407  0825               	movf	Mrf49xaTxAck@packet,w
  5078  0408  3E07               	addlw	7
  5079  0409  0086               	movwf	6
  5080  040A  0825               	movf	Mrf49xaTxAck@packet,w
  5081  040B  3E16               	addlw	22
  5082  040C  0084               	movwf	4
  5083  040D  0800               	movf	0,w
  5084  040E  0081               	movwf	1
  5085                           
  5086                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  5087  040F  0825               	movf	Mrf49xaTxAck@packet,w
  5088  0410  3E04               	addlw	4
  5089  0411  0086               	movwf	6
  5090  0412  30A1               	movlw	161
  5091  0413  0081               	movwf	1
  5092                           
  5093                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  5094  0414  0A25               	incf	Mrf49xaTxAck@packet,w
  5095  0415  0086               	movwf	6
  5096  0416  3002               	movlw	2
  5097  0417  0081               	movwf	1
  5098                           
  5099                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  5100  0418  01A0               	clrf	Mrf49xaTxPacket@response
  5101  0419  0AA0               	incf	Mrf49xaTxPacket@response,f
  5102  041A  01A1               	clrf	Mrf49xaTxPacket@needAck
  5103  041B  0825               	movf	Mrf49xaTxAck@packet,w
  5104  041C  2BBB               	ljmp	_Mrf49xaTxPacket
  5105  041D                     __end_of_Mrf49xaTxAck:	
  5106                           
  5107                           	psect	intentry
  5108  0004                     __pintentry:	
  5109 ;; *************** function _extInt *****************
  5110 ;; Defined at:
  5111 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;		None
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;		None
  5116 ;; Return value:  Size  Location     Type
  5117 ;;		None               void
  5118 ;; Registers used:
  5119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 1F/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5125 ;;      Params:         0       0       0       0
  5126 ;;      Locals:         0       0       0       0
  5127 ;;      Temps:          1       0       0       0
  5128 ;;      Totals:         1       0       0       0
  5129 ;;Total ram usage:        1 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    4
  5132 ;; This function calls:
  5133 ;;		i1_Mrf49xaServe
  5134 ;; This function is called by:
  5135 ;;		Interrupt level 1
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139  0004                     _extInt:	
  5140                           
  5141                           ;incstack = 0
  5142                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5143  0004  3180               	pagesel	$
  5144  0005  0020               	movlb	0	; select bank0
  5145  0006  087F               	movf	127,w
  5146  0007  00F6               	movwf	??_extInt
  5147                           
  5148                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  5149  0008  1C8B               	btfss	11,1	;volatile
  5150  0009  2811               	goto	i1l131
  5151                           
  5152                           ;interrupt.c: 34: {
  5153                           ;interrupt.c: 35: if (Mrf49xaServe())
  5154  000A  3184  2427  3180   	fcall	i1_Mrf49xaServe
  5155  000D  3A00               	xorlw	0
  5156  000E  1903               	skipnz
  5157  000F  2811               	goto	i1l131
  5158                           
  5159                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  5160  0010  108B               	bcf	11,1	;volatile
  5161  0011                     i1l131:	
  5162  0011  0876               	movf	??_extInt,w
  5163  0012  00FF               	movwf	127
  5164  0013  0009               	retfie
  5165  0014                     __end_of_extInt:	
  5166                           
  5167                           	psect	text29
  5168  041D                     __ptext29:	
  5169 ;; *************** function i1_Mrf49RxCmd *****************
  5170 ;; Defined at:
  5171 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  cmd             1    wreg     unsigned char 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  cmd             1    1[COMMON] unsigned char 
  5176 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      unsigned char 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0, pclath, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 1C/1
  5183 ;;		On exit  : 1F/2
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5186 ;;      Params:         0       0       0       0
  5187 ;;      Locals:         2       0       0       0
  5188 ;;      Temps:          0       0       0       0
  5189 ;;      Totals:         2       0       0       0
  5190 ;;Total ram usage:        2 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    1
  5193 ;; This function calls:
  5194 ;;		i1_Mrf49SpiRx
  5195 ;;		i1_Mrf49SpiTx
  5196 ;; This function is called by:
  5197 ;;		i1_Mrf49RxByte
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function i1_Mrf49RxCmd
  5203  041D                     i1_Mrf49RxCmd:	
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  5207                           ;i1Mrf49RxCmd@cmd stored from wreg
  5208  041D  00F1               	movwf	i1Mrf49RxCmd@cmd
  5209                           
  5210                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  5211  041E  0022               	movlb	2	; select bank2
  5212  041F  130E               	bcf	14,6	;volatile
  5213                           
  5214                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  5215  0420  0871               	movf	i1Mrf49RxCmd@cmd,w
  5216  0421  252D  3184         	fcall	i1_Mrf49SpiTx
  5217                           
  5218                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  5219  0423  2596               	fcall	i1_Mrf49SpiRx
  5220  0424  00F2               	movwf	i1Mrf49RxCmd@val
  5221                           
  5222                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  5223  0425  170E               	bsf	14,6	;volatile
  5224                           
  5225                           ;mrf49xa_cmd.c: 25: return val;
  5226  0426  0008               	return
  5227  0427                     __end_ofi1_Mrf49RxCmd:	
  5228  0427                     __ptext23:	
  5229 ;; *************** function i1_Mrf49xaServe *****************
  5230 ;; Defined at:
  5231 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      unsigned char 
  5238 ;; Registers used:
  5239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 1F/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5245 ;;      Params:         0       0       0       0
  5246 ;;      Locals:         1       0       0       0
  5247 ;;      Temps:          1       0       0       0
  5248 ;;      Totals:         2       0       0       0
  5249 ;;Total ram usage:        2 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    3
  5252 ;; This function calls:
  5253 ;;		i1_Mrf49RxByte
  5254 ;;		i1_Mrf49RxSts
  5255 ;;		i1_Mrf49TxByte
  5256 ;;		i1_Mrf49xaModeRx
  5257 ;; This function is called by:
  5258 ;;		_extInt
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function i1_Mrf49xaServe
  5264  0427                     i1_Mrf49xaServe:	
  5265                           
  5266                           ;mrf49xa_data.c: 10: uint8_t data;
  5267                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5271  0427  2588  3184         	fcall	i1_Mrf49RxSts
  5272                           
  5273                           ;mrf49xa_data.c: 21: }
  5274                           ;mrf49xa_data.c: 24: if (mrf49Status.flags.msb.overflow == 1)
  5275                           
  5276                           ;mrf49xa_data.c: 19: {
  5277  0429  0020               	movlb	0	; select bank0
  5278  042A  1AAE               	btfsc	_mrf49Status,5
  5279  042B  2C36               	goto	i1l2278
  5280  042C  2C42               	goto	i1l372
  5281  042D                     i1l2274:	
  5282                           
  5283                           ;mrf49xa_data.c: 29: case RECV_DATA:
  5284                           ;mrf49xa_data.c: 32: data = Mrf49RxByte();
  5285  042D  24F8  3184         	fcall	i1_Mrf49RxByte
  5286  042F  00F5               	movwf	i1Mrf49xaServe@data
  5287                           
  5288                           ;mrf49xa_data.c: 33: data = Mrf49RxByte();
  5289  0430  24F8  3184         	fcall	i1_Mrf49RxByte
  5290  0432  00F5               	movwf	i1Mrf49xaServe@data
  5291                           
  5292                           ;mrf49xa_data.c: 36: Mrf49xaModeRx();
  5293  0433  24FB  3184         	fcall	i1_Mrf49xaModeRx
  5294                           
  5295                           ;mrf49xa_data.c: 40: break;
  5296  0435  2C42               	goto	i1l372
  5297  0436                     i1l2278:	
  5298  0436  0021               	movlb	1	; select bank1
  5299  0437  0820               	movf	_rfTrcvStatus^(0+128),w
  5300                           
  5301                           ; Switch size 1, requested type "speed"
  5302                           ; Number of cases is 3, Range of values is 0 to 2
  5303                           ; switch strategies available:
  5304                           ; Name         Instructions Cycles
  5305                           ; simple_byte           10     6 (average)
  5306                           ; direct_byte           12     6 (fixed)
  5307                           ; jumptable            260     6 (fixed)
  5308                           ;	Chosen strategy is simple_byte
  5309  0438  3A00               	xorlw	0	; case 0
  5310  0439  1903               	skipnz
  5311  043A  2C2D               	goto	i1l2274
  5312  043B  3A01               	xorlw	1	; case 1
  5313  043C  1903               	skipnz
  5314  043D  2C2D               	goto	i1l2274
  5315  043E  3A03               	xorlw	3	; case 2
  5316  043F  1903               	skipnz
  5317  0440  2C42               	goto	i1l372
  5318  0441  2C42               	goto	i1l372
  5319  0442                     i1l372:	
  5320                           
  5321                           ;mrf49xa_data.c: 48: }
  5322                           ;mrf49xa_data.c: 57: if (mrf49Status.flags.msb.fifoTxRx == 1)
  5323  0442  0020               	movlb	0	; select bank0
  5324  0443  1BAE               	btfsc	_mrf49Status,7
  5325  0444  2CE2               	goto	i1l2366
  5326  0445  2CEE               	goto	i1l2368
  5327  0446                     i1l2282:	
  5328                           
  5329                           ;mrf49xa_data.c: 63: data = Mrf49RxByte();
  5330  0446  24F8  3184         	fcall	i1_Mrf49RxByte
  5331  0448  00F5               	movwf	i1Mrf49xaServe@data
  5332                           
  5333                           ;mrf49xa_data.c: 67: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5334  0449  0020               	movlb	0	; select bank0
  5335  044A  1BAF               	btfsc	_mrf49Status+1,7
  5336  044B  2C4F               	goto	i1l2288
  5337  044C                     i1l2286:	
  5338                           
  5339                           ;mrf49xa_data.c: 68: {
  5340                           ;mrf49xa_data.c: 69: Mrf49xaModeRx();
  5341  044C  24FB  3184         	fcall	i1_Mrf49xaModeRx
  5342                           
  5343                           ;mrf49xa_data.c: 70: break;
  5344  044E  2CEE               	goto	i1l2368
  5345  044F                     i1l2288:	
  5346                           
  5347                           ;mrf49xa_data.c: 71: }
  5348                           ;mrf49xa_data.c: 73: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  5349  044F  0021               	movlb	1	; select bank1
  5350  0450  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  5351  0451  1D03               	skipz
  5352  0452  2C55               	goto	i1l2292
  5353  0453  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  5354  0454  2C59               	goto	L4
  5355  0455                     i1l2292:	
  5356                           
  5357                           ;mrf49xa_data.c: 74: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  5358  0455  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  5359  0456  1D03               	skipz
  5360  0457  2C4C               	goto	i1l2286
  5361  0458  30D3               	movlw	(_rfTrcvStatus+51)& (0+255)
  5362  0459                     L4:	
  5363  0459  00EC               	movwf	(_rfTrcvStatus+76)^(0+128)
  5364                           
  5365                           ;mrf49xa_data.c: 81: }
  5366                           ;mrf49xa_data.c: 82: rfTrcvStatus.hwRx->packet.size = data;
  5367  045A  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  5368  045B  0086               	movwf	6
  5369  045C  0187               	clrf	7
  5370  045D  0875               	movf	i1Mrf49xaServe@data,w
  5371  045E  0081               	movwf	1
  5372                           
  5373                           ;mrf49xa_data.c: 83: rfTrcvStatus.hwRx->crc = 0;
  5374  045F  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5375  0460  3E16               	addlw	22
  5376  0461  0086               	movwf	6
  5377  0462  0181               	clrf	1
  5378                           
  5379                           ;mrf49xa_data.c: 84: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  5380  0463  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5381  0464  0086               	movwf	6
  5382  0465  3003               	movlw	3
  5383  0466  0081               	movwf	1
  5384                           
  5385                           ;mrf49xa_data.c: 86: rfTrcvStatus.state = RECV_DATA;
  5386  0467  01A0               	clrf	_rfTrcvStatus^(0+128)
  5387  0468  0AA0               	incf	_rfTrcvStatus^(0+128),f
  5388                           
  5389                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwByte = 1;
  5390  0469  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  5391  046A  2C97               	goto	i1l2328
  5392  046B                     i1l2308:	
  5393                           ;mrf49xa_data.c: 89: break;
  5394                           
  5395                           
  5396                           ;mrf49xa_data.c: 93: data = Mrf49RxByte();
  5397  046B  24F8  3184         	fcall	i1_Mrf49RxByte
  5398  046D  00F5               	movwf	i1Mrf49xaServe@data
  5399                           
  5400                           ;mrf49xa_data.c: 97: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5401  046E  0020               	movlb	0	; select bank0
  5402  046F  1BAF               	btfsc	_mrf49Status+1,7
  5403  0470  2C78               	goto	i1l2316
  5404                           
  5405                           ;mrf49xa_data.c: 98: {
  5406                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5407  0471  0021               	movlb	1	; select bank1
  5408  0472  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5409  0473  0086               	movwf	6
  5410  0474  3004               	movlw	4
  5411  0475  0187               	clrf	7
  5412  0476  0081               	movwf	1
  5413  0477  2C4C               	goto	i1l2286
  5414  0478                     i1l2316:	
  5415                           
  5416                           ;mrf49xa_data.c: 102: }
  5417                           ;mrf49xa_data.c: 104: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  5418  0478  0021               	movlb	1	; select bank1
  5419  0479  0A6C               	incf	(_rfTrcvStatus+76)^(0+128),w
  5420  047A  0086               	movwf	6
  5421  047B  0187               	clrf	7
  5422  047C  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5423  047D  0601               	xorwf	1,w
  5424  047E  1D03               	skipz
  5425  047F  2C8F               	goto	i1l2326
  5426                           
  5427                           ;mrf49xa_data.c: 105: {
  5428                           ;mrf49xa_data.c: 106: rfTrcvStatus.hwRx->crc = data;
  5429  0480  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5430  0481  3E16               	addlw	22
  5431  0482  0086               	movwf	6
  5432  0483  0875               	movf	i1Mrf49xaServe@data,w
  5433  0484  0081               	movwf	1
  5434                           
  5435                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5436  0485  086C               	movf	(_rfTrcvStatus+76)^(0+128),w
  5437  0486  0086               	movwf	6
  5438  0487  3004               	movlw	4
  5439  0488  0081               	movwf	1
  5440                           
  5441                           ;mrf49xa_data.c: 113: Mrf49xaModeRx();
  5442  0489  24FB  3184         	fcall	i1_Mrf49xaModeRx
  5443                           
  5444                           ;mrf49xa_data.c: 116: LATCbits.LATC2 = 1;
  5445  048B  0022               	movlb	2	; select bank2
  5446  048C  150E               	bsf	14,2	;volatile
  5447                           
  5448                           ;mrf49xa_data.c: 117: LATCbits.LATC2 = 0;
  5449  048D  110E               	bcf	14,2	;volatile
  5450                           
  5451                           ;mrf49xa_data.c: 119: }
  5452  048E  2CEE               	goto	i1l2368
  5453  048F                     i1l2326:	
  5454                           
  5455                           ;mrf49xa_data.c: 120: else
  5456                           ;mrf49xa_data.c: 121: {
  5457                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  5458  048F  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5459  0490  076C               	addwf	(_rfTrcvStatus+76)^(0+128),w
  5460  0491  00F4               	movwf	??i1_Mrf49xaServe
  5461  0492  0A74               	incf	??i1_Mrf49xaServe,w
  5462  0493  0086               	movwf	6
  5463  0494  0187               	clrf	7
  5464  0495  0875               	movf	i1Mrf49xaServe@data,w
  5465  0496  0081               	movwf	1
  5466  0497                     i1l2328:	
  5467  0497  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  5468  0498  2CEE               	goto	i1l2368
  5469  0499                     i1l2330:	
  5470                           
  5471                           ;mrf49xa_data.c: 128: rfTrcvStatus.hwByte++;
  5472  0499  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  5473                           
  5474                           ;mrf49xa_data.c: 130: switch (rfTrcvStatus.hwByte)
  5475  049A  2CD1               	goto	i1l2362
  5476  049B                     i1l2332:	
  5477                           
  5478                           ;mrf49xa_data.c: 133: Mrf49TxByte(0x2D);
  5479  049B  302D               	movlw	45
  5480  049C  24F3  3184         	fcall	i1_Mrf49TxByte
  5481                           
  5482                           ;mrf49xa_data.c: 134: break;
  5483  049E  2CEE               	goto	i1l2368
  5484  049F                     i1l2334:	
  5485                           
  5486                           ;mrf49xa_data.c: 137: Mrf49TxByte(0xD4);
  5487  049F  30D4               	movlw	212
  5488  04A0  24F3  3184         	fcall	i1_Mrf49TxByte
  5489                           
  5490                           ;mrf49xa_data.c: 138: rfTrcvStatus.hwByte = -1;
  5491  04A2  30FF               	movlw	255
  5492  04A3  0021               	movlb	1	; select bank1
  5493  04A4  2CB9               	goto	L5
  5494  04A5                     i1l2338:	
  5495                           ;mrf49xa_data.c: 139: break;
  5496                           
  5497                           
  5498                           ;mrf49xa_data.c: 143: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5499  04A5  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5500  04A6  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5501  04A7  0086               	movwf	6
  5502  04A8  0187               	clrf	7
  5503  04A9  0801               	movf	1,w
  5504  04AA  24F3  3184         	fcall	i1_Mrf49TxByte
  5505                           
  5506                           ;mrf49xa_data.c: 144: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStat
      +                          us.txPacket.raw[rfTrcvStatus.hwByte];
  5507  04AC  0021               	movlb	1	; select bank1
  5508  04AD  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5509  04AE  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5510  04AF  0086               	movwf	6
  5511  04B0  0187               	clrf	7
  5512  04B1  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5513  04B2  0601               	xorwf	1,w
  5514  04B3  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  5515                           
  5516                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5517  04B4  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5518  04B5  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  5519  04B6  1D03               	skipz
  5520  04B7  2CEE               	goto	i1l2368
  5521                           
  5522                           ;mrf49xa_data.c: 146: {
  5523                           ;mrf49xa_data.c: 147: rfTrcvStatus.hwByte = 48;
  5524  04B8  3030               	movlw	48
  5525  04B9                     L5:	
  5526  04B9  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  5527  04BA  2CEE               	goto	i1l2368
  5528  04BB                     i1l2346:	
  5529                           
  5530                           ;mrf49xa_data.c: 152: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5531  04BB  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5532  04BC  24F3  3184         	fcall	i1_Mrf49TxByte
  5533                           
  5534                           ;mrf49xa_data.c: 153: break;
  5535  04BE  2CEE               	goto	i1l2368
  5536  04BF                     i1l2348:	
  5537                           
  5538                           ;mrf49xa_data.c: 156: Mrf49TxByte(0x00);
  5539  04BF  3000               	movlw	0
  5540  04C0  24F3  3184         	fcall	i1_Mrf49TxByte
  5541                           
  5542                           ;mrf49xa_data.c: 157: break;
  5543  04C2  2CEE               	goto	i1l2368
  5544  04C3                     i1l2350:	
  5545                           
  5546                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  5547  04C3  3000               	movlw	0
  5548  04C4  24F3  3184         	fcall	i1_Mrf49TxByte
  5549                           
  5550                           ;mrf49xa_data.c: 161: Mrf49xaModeRx();
  5551  04C6  24FB  3184         	fcall	i1_Mrf49xaModeRx
  5552                           
  5553                           ;mrf49xa_data.c: 163: rfTrcvStatus.txPacket.retry = 0;
  5554  04C8  30F0               	movlw	-16
  5555  04C9  05B9               	andwf	(_rfTrcvStatus^(0+128)+25),f
  5556                           
  5557                           ;mrf49xa_data.c: 165: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  5558  04CA  0B38               	decfsz	(_rfTrcvStatus^(0+128)+24),w
  5559  04CB  2CCF               	goto	i1l2358
  5560                           
  5561                           ;mrf49xa_data.c: 166: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5562  04CC  3002               	movlw	2
  5563  04CD  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  5564  04CE  2CEE               	goto	i1l2368
  5565  04CF                     i1l2358:	
  5566                           
  5567                           ;mrf49xa_data.c: 167: else
  5568                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.state = PKT_FREE;
  5569  04CF  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5570  04D0  2CEE               	goto	i1l2368
  5571  04D1                     i1l2362:	
  5572  04D1  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  5573                           
  5574                           ; Switch size 1, requested type "speed"
  5575                           ; Number of cases is 5, Range of values is 49 to 101
  5576                           ; switch strategies available:
  5577                           ; Name         Instructions Cycles
  5578                           ; simple_byte           16     9 (average)
  5579                           ; direct_byte          115     9 (fixed)
  5580                           ; jumptable            263     9 (fixed)
  5581                           ;	Chosen strategy is simple_byte
  5582  04D2  3A31               	xorlw	49	; case 49
  5583  04D3  1903               	skipnz
  5584  04D4  2CBB               	goto	i1l2346
  5585  04D5  3A03               	xorlw	3	; case 50
  5586  04D6  1903               	skipnz
  5587  04D7  2CBF               	goto	i1l2348
  5588  04D8  3A01               	xorlw	1	; case 51
  5589  04D9  1903               	skipnz
  5590  04DA  2CC3               	goto	i1l2350
  5591  04DB  3A57               	xorlw	87	; case 100
  5592  04DC  1903               	skipnz
  5593  04DD  2C9B               	goto	i1l2332
  5594  04DE  3A01               	xorlw	1	; case 101
  5595  04DF  1903               	skipnz
  5596  04E0  2C9F               	goto	i1l2334
  5597  04E1  2CA5               	goto	i1l2338
  5598  04E2                     i1l2366:	
  5599  04E2  0021               	movlb	1	; select bank1
  5600  04E3  0820               	movf	_rfTrcvStatus^(0+128),w
  5601                           
  5602                           ; Switch size 1, requested type "speed"
  5603                           ; Number of cases is 3, Range of values is 0 to 2
  5604                           ; switch strategies available:
  5605                           ; Name         Instructions Cycles
  5606                           ; simple_byte           10     6 (average)
  5607                           ; direct_byte           12     6 (fixed)
  5608                           ; jumptable            260     6 (fixed)
  5609                           ;	Chosen strategy is simple_byte
  5610  04E4  3A00               	xorlw	0	; case 0
  5611  04E5  1903               	skipnz
  5612  04E6  2C46               	goto	i1l2282
  5613  04E7  3A01               	xorlw	1	; case 1
  5614  04E8  1903               	skipnz
  5615  04E9  2C6B               	goto	i1l2308
  5616  04EA  3A03               	xorlw	3	; case 2
  5617  04EB  1903               	skipnz
  5618  04EC  2C99               	goto	i1l2330
  5619  04ED  2CEE               	goto	i1l2368
  5620  04EE                     i1l2368:	
  5621                           
  5622                           ;mrf49xa_data.c: 175: }
  5623                           ;mrf49xa_data.c: 189: return PORTAbits.RA2 == 1 ? 1 : 0;
  5624  04EE  0020               	movlb	0	; select bank0
  5625  04EF  0C0C               	rrf	12,w	;volatile
  5626  04F0  0C89               	rrf	9,f
  5627  04F1  3901               	andlw	1
  5628  04F2  0008               	return
  5629  04F3                     __end_ofi1_Mrf49xaServe:	
  5630  04F3                     __ptext25:	
  5631 ;; *************** function i1_Mrf49TxByte *****************
  5632 ;; Defined at:
  5633 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  byte            1    wreg     unsigned char 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  byte            1    3[COMMON] unsigned char 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;		None               void
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0, pclath, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 1E/1
  5644 ;;		On exit  : 1F/2
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5647 ;;      Params:         0       0       0       0
  5648 ;;      Locals:         1       0       0       0
  5649 ;;      Temps:          0       0       0       0
  5650 ;;      Totals:         1       0       0       0
  5651 ;;Total ram usage:        1 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    2
  5654 ;; This function calls:
  5655 ;;		i1_Mrf49TxCmd
  5656 ;; This function is called by:
  5657 ;;		i1_Mrf49xaServe
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function i1_Mrf49TxByte
  5663  04F3                     i1_Mrf49TxByte:	
  5664                           
  5665                           ;incstack = 0
  5666                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5667                           ;i1Mrf49TxByte@byte stored from wreg
  5668  04F3  00F3               	movwf	i1Mrf49TxByte@byte
  5669                           
  5670                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  5671  04F4  00F1               	movwf	i1Mrf49TxCmd@val
  5672  04F5  30B8               	movlw	184
  5673  04F6  2523               	fcall	i1_Mrf49TxCmd
  5674  04F7  0008               	return
  5675  04F8                     __end_ofi1_Mrf49TxByte:	
  5676  04F8                     __ptext28:	
  5677 ;; *************** function i1_Mrf49RxByte *****************
  5678 ;; Defined at:
  5679 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      unsigned char 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 1C/1
  5690 ;;		On exit  : 1F/2
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5693 ;;      Params:         0       0       0       0
  5694 ;;      Locals:         0       0       0       0
  5695 ;;      Temps:          0       0       0       0
  5696 ;;      Totals:         0       0       0       0
  5697 ;;Total ram usage:        0 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    2
  5700 ;; This function calls:
  5701 ;;		i1_Mrf49RxCmd
  5702 ;; This function is called by:
  5703 ;;		i1_Mrf49xaServe
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           
  5708                           ;psect for function i1_Mrf49RxByte
  5709  04F8                     i1_Mrf49RxByte:	
  5710                           
  5711                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5715  04F8  30B0               	movlw	176
  5716  04F9  241D               	fcall	i1_Mrf49RxCmd
  5717  04FA  0008               	return
  5718  04FB                     __end_ofi1_Mrf49RxByte:	
  5719  04FB                     __ptext24:	
  5720 ;; *************** function i1_Mrf49xaModeRx *****************
  5721 ;; Defined at:
  5722 ;;		line 71 in file "../../../src/devices/mrf49xa.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, pclath, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 1C/2
  5733 ;;		On exit  : 1F/1
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5736 ;;      Params:         0       0       0       0
  5737 ;;      Locals:         1       0       0       0
  5738 ;;      Temps:          0       0       0       0
  5739 ;;      Totals:         1       0       0       0
  5740 ;;Total ram usage:        1 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    2
  5743 ;; This function calls:
  5744 ;;		i1_Mrf49TxCmd
  5745 ;; This function is called by:
  5746 ;;		i1_Mrf49xaServe
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function i1_Mrf49xaModeRx
  5752  04FB                     i1_Mrf49xaModeRx:	
  5753  04FB  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5754                           
  5755                           ;mrf49xa.c: 73: UI08_t k;
  5756                           ;mrf49xa.c: 74: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  5757                           
  5758                           ;incstack = 0
  5759                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5760  04FC  01F3               	clrf	i1Mrf49xaModeRx@k
  5761  04FD  3186               	movlp	high __stringtab
  5762  04FE  000A               	callw
  5763  04FF  3184               	pagesel	$	;select current page
  5764  0500  3800               	iorlw	0
  5765  0501  1903               	btfsc	3,2
  5766  0502  2D1F               	goto	i1l2260
  5767  0503                     i1l2252:	
  5768  0503  3573               	lslf	i1Mrf49xaModeRx@k,w
  5769  0504  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5770  0505  3186               	movlp	high __stringtab
  5771  0506  000A               	callw
  5772  0507  3184               	pagesel	$	;select current page
  5773  0508  3A55               	xorlw	85
  5774  0509  1903               	skipnz
  5775  050A  2D17               	goto	i1l2256
  5776  050B  3573               	lslf	i1Mrf49xaModeRx@k,w
  5777  050C  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5778  050D  3186               	movlp	high __stringtab
  5779  050E  000A               	callw
  5780  050F  00F1               	movwf	i1Mrf49TxCmd@val
  5781  0510  3573               	lslf	i1Mrf49xaModeRx@k,w
  5782  0511  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5783  0512  3186               	movlp	high __stringtab
  5784  0513  000A               	callw
  5785  0514  3184               	pagesel	$	;select current page
  5786  0515  3185  2523         	fcall	i1_Mrf49TxCmd
  5787  0517                     i1l2256:	
  5788  0517  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5789  0518  0AF3               	incf	i1Mrf49xaModeRx@k,f
  5790  0519  3186               	movlp	high __stringtab
  5791  051A  000A               	callw
  5792  051B  3184               	pagesel	$	;select current page
  5793  051C  0273               	subwf	i1Mrf49xaModeRx@k,w
  5794  051D  1C03               	skipc
  5795  051E  2D03               	goto	i1l2252
  5796  051F                     i1l2260:	
  5797                           
  5798                           ;mrf49xa.c: 76: rfTrcvStatus.state = RECV_IDLE;
  5799  051F  0021               	movlb	1	; select bank1
  5800  0520  01A0               	clrf	_rfTrcvStatus^(0+128)
  5801                           
  5802                           ;mrf49xa.c: 77: rfTrcvStatus.hwByte = 0;
  5803  0521  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  5804  0522  0008               	return
  5805  0523                     __end_ofi1_Mrf49xaModeRx:	
  5806  0523                     __ptext26:	
  5807 ;; *************** function i1_Mrf49TxCmd *****************
  5808 ;; Defined at:
  5809 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  cmd             1    wreg     unsigned char 
  5812 ;;  val             1    1[COMMON] unsigned char 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  cmd             1    2[COMMON] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;		None               void
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0, pclath, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 1C/2
  5821 ;;		On exit  : 1F/2
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5824 ;;      Params:         1       0       0       0
  5825 ;;      Locals:         1       0       0       0
  5826 ;;      Temps:          0       0       0       0
  5827 ;;      Totals:         2       0       0       0
  5828 ;;Total ram usage:        2 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    1
  5831 ;; This function calls:
  5832 ;;		i1_Mrf49SpiTx
  5833 ;; This function is called by:
  5834 ;;		i1_Mrf49xaModeRx
  5835 ;;		i1_Mrf49TxByte
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function i1_Mrf49TxCmd
  5841  0523                     i1_Mrf49TxCmd:	
  5842                           
  5843                           ;incstack = 0
  5844                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5845                           ;i1Mrf49TxCmd@cmd stored from wreg
  5846  0523  00F2               	movwf	i1Mrf49TxCmd@cmd
  5847                           
  5848                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  5849  0524  0022               	movlb	2	; select bank2
  5850  0525  130E               	bcf	14,6	;volatile
  5851                           
  5852                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5853  0526  0872               	movf	i1Mrf49TxCmd@cmd,w
  5854  0527  252D  3184         	fcall	i1_Mrf49SpiTx
  5855                           
  5856                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5857  0529  0871               	movf	i1Mrf49TxCmd@val,w
  5858  052A  252D               	fcall	i1_Mrf49SpiTx
  5859                           
  5860                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  5861  052B  170E               	bsf	14,6	;volatile
  5862  052C  0008               	return
  5863  052D                     __end_ofi1_Mrf49TxCmd:	
  5864  052D                     __ptext30:	
  5865 ;; *************** function i1_Mrf49SpiTx *****************
  5866 ;; Defined at:
  5867 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  byte            1    wreg     unsigned char 
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;  byte            1    0[COMMON] unsigned char 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;		None               void
  5874 ;; Registers used:
  5875 ;;		wreg
  5876 ;; Tracked objects:
  5877 ;;		On entry : 1F/2
  5878 ;;		On exit  : 1F/2
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5881 ;;      Params:         0       0       0       0
  5882 ;;      Locals:         1       0       0       0
  5883 ;;      Temps:          0       0       0       0
  5884 ;;      Totals:         1       0       0       0
  5885 ;;Total ram usage:        1 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		i1_Mrf49TxCmd
  5891 ;;		i1_Mrf49RxCmd
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           
  5896                           ;psect for function i1_Mrf49SpiTx
  5897  052D                     i1_Mrf49SpiTx:	
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  5901                           ;i1Mrf49SpiTx@byte stored from wreg
  5902  052D  00F0               	movwf	i1Mrf49SpiTx@byte
  5903                           
  5904                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  5905  052E  1BF0               	btfsc	i1Mrf49SpiTx@byte,7
  5906  052F  2D32               	goto	i1l2164
  5907  0530  0020               	movlb	0	; select bank0
  5908  0531  2D34               	goto	i1l205
  5909  0532                     i1l2164:	
  5910  0532  178D               	bsf	13,7	;volatile
  5911  0533  2D35               	goto	i1l206
  5912  0534                     i1l205:	
  5913  0534  138D               	bcf	13,7	;volatile
  5914  0535                     i1l206:	
  5915  0535  178E               	bsf	14,7	;volatile
  5916  0536  0000               	nop	;# 
  5917  0537  0022               	movlb	2	; select bank2
  5918  0538  138E               	bcf	14,7	;volatile
  5919  0539  1B70               	btfsc	i1Mrf49SpiTx@byte,6
  5920  053A  2D3D               	goto	i1l2168
  5921  053B  0020               	movlb	0	; select bank0
  5922  053C  2D3F               	goto	i1l209
  5923  053D                     i1l2168:	
  5924  053D  178D               	bsf	13,7	;volatile
  5925  053E  2D40               	goto	i1l210
  5926  053F                     i1l209:	
  5927  053F  138D               	bcf	13,7	;volatile
  5928  0540                     i1l210:	
  5929  0540  178E               	bsf	14,7	;volatile
  5930  0541  0000               	nop	;# 
  5931  0542  0022               	movlb	2	; select bank2
  5932  0543  138E               	bcf	14,7	;volatile
  5933  0544  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
  5934  0545  2D48               	goto	i1l2172
  5935  0546  0020               	movlb	0	; select bank0
  5936  0547  2D4A               	goto	i1l213
  5937  0548                     i1l2172:	
  5938  0548  178D               	bsf	13,7	;volatile
  5939  0549  2D4B               	goto	i1l214
  5940  054A                     i1l213:	
  5941  054A  138D               	bcf	13,7	;volatile
  5942  054B                     i1l214:	
  5943  054B  178E               	bsf	14,7	;volatile
  5944  054C  0000               	nop	;# 
  5945  054D  0022               	movlb	2	; select bank2
  5946  054E  138E               	bcf	14,7	;volatile
  5947  054F  1A70               	btfsc	i1Mrf49SpiTx@byte,4
  5948  0550  2D53               	goto	i1l2176
  5949  0551  0020               	movlb	0	; select bank0
  5950  0552  2D55               	goto	i1l217
  5951  0553                     i1l2176:	
  5952  0553  178D               	bsf	13,7	;volatile
  5953  0554  2D56               	goto	i1l218
  5954  0555                     i1l217:	
  5955  0555  138D               	bcf	13,7	;volatile
  5956  0556                     i1l218:	
  5957  0556  178E               	bsf	14,7	;volatile
  5958  0557  0000               	nop	;# 
  5959  0558  0022               	movlb	2	; select bank2
  5960  0559  138E               	bcf	14,7	;volatile
  5961  055A  19F0               	btfsc	i1Mrf49SpiTx@byte,3
  5962  055B  2D5E               	goto	i1l2180
  5963  055C  0020               	movlb	0	; select bank0
  5964  055D  2D60               	goto	i1l221
  5965  055E                     i1l2180:	
  5966  055E  178D               	bsf	13,7	;volatile
  5967  055F  2D61               	goto	i1l222
  5968  0560                     i1l221:	
  5969  0560  138D               	bcf	13,7	;volatile
  5970  0561                     i1l222:	
  5971  0561  178E               	bsf	14,7	;volatile
  5972  0562  0000               	nop	;# 
  5973  0563  0022               	movlb	2	; select bank2
  5974  0564  138E               	bcf	14,7	;volatile
  5975  0565  1970               	btfsc	i1Mrf49SpiTx@byte,2
  5976  0566  2D69               	goto	i1l2184
  5977  0567  0020               	movlb	0	; select bank0
  5978  0568  2D6B               	goto	i1l225
  5979  0569                     i1l2184:	
  5980  0569  178D               	bsf	13,7	;volatile
  5981  056A  2D6C               	goto	i1l226
  5982  056B                     i1l225:	
  5983  056B  138D               	bcf	13,7	;volatile
  5984  056C                     i1l226:	
  5985  056C  178E               	bsf	14,7	;volatile
  5986  056D  0000               	nop	;# 
  5987  056E  0022               	movlb	2	; select bank2
  5988  056F  138E               	bcf	14,7	;volatile
  5989  0570  18F0               	btfsc	i1Mrf49SpiTx@byte,1
  5990  0571  2D74               	goto	i1l2188
  5991  0572  0020               	movlb	0	; select bank0
  5992  0573  2D76               	goto	i1l229
  5993  0574                     i1l2188:	
  5994  0574  178D               	bsf	13,7	;volatile
  5995  0575  2D77               	goto	i1l230
  5996  0576                     i1l229:	
  5997  0576  138D               	bcf	13,7	;volatile
  5998  0577                     i1l230:	
  5999  0577  178E               	bsf	14,7	;volatile
  6000  0578  0000               	nop	;# 
  6001  0579  0022               	movlb	2	; select bank2
  6002  057A  138E               	bcf	14,7	;volatile
  6003  057B  1870               	btfsc	i1Mrf49SpiTx@byte,0
  6004  057C  2D7F               	goto	i1l2192
  6005  057D  0020               	movlb	0	; select bank0
  6006  057E  2D81               	goto	i1l233
  6007  057F                     i1l2192:	
  6008  057F  178D               	bsf	13,7	;volatile
  6009  0580  2D82               	goto	i1l234
  6010  0581                     i1l233:	
  6011  0581  138D               	bcf	13,7	;volatile
  6012  0582                     i1l234:	
  6013  0582  178E               	bsf	14,7	;volatile
  6014  0583  0000               	nop	;# 
  6015  0584  0022               	movlb	2	; select bank2
  6016  0585  138E               	bcf	14,7	;volatile
  6017                           
  6018                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  6019  0586  138D               	bcf	13,7	;volatile
  6020  0587  0008               	return
  6021  0588                     __end_ofi1_Mrf49SpiTx:	
  6022  0588                     __ptext27:	
  6023 ;; *************** function i1_Mrf49RxSts *****************
  6024 ;; Defined at:
  6025 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;		None               void
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, pclath, cstack
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 1F/2
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6039 ;;      Params:         0       0       0       0
  6040 ;;      Locals:         0       0       0       0
  6041 ;;      Temps:          0       0       0       0
  6042 ;;      Totals:         0       0       0       0
  6043 ;;Total ram usage:        0 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    1
  6046 ;; This function calls:
  6047 ;;		i1_Mrf49SpiRx
  6048 ;; This function is called by:
  6049 ;;		i1_Mrf49xaServe
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           
  6054                           ;psect for function i1_Mrf49RxSts
  6055  0588                     i1_Mrf49RxSts:	
  6056                           
  6057                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6061  0588  120B               	bcf	11,4	;volatile
  6062                           
  6063                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  6064  0589  0022               	movlb	2	; select bank2
  6065  058A  130E               	bcf	14,6	;volatile
  6066                           
  6067                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  6068  058B  2596  3184         	fcall	i1_Mrf49SpiRx
  6069  058D  0020               	movlb	0	; select bank0
  6070  058E  00AE               	movwf	_mrf49Status
  6071                           
  6072                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  6073  058F  2596               	fcall	i1_Mrf49SpiRx
  6074  0590  0020               	movlb	0	; select bank0
  6075  0591  00AF               	movwf	_mrf49Status+1
  6076                           
  6077                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  6078  0592  0022               	movlb	2	; select bank2
  6079  0593  170E               	bsf	14,6	;volatile
  6080                           
  6081                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  6082  0594  160B               	bsf	11,4	;volatile
  6083  0595  0008               	return
  6084  0596                     __end_ofi1_Mrf49RxSts:	
  6085  0596                     __ptext31:	
  6086 ;; *************** function i1_Mrf49SpiRx *****************
  6087 ;; Defined at:
  6088 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;		None
  6091 ;; Auto vars:     Size  Location     Type
  6092 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  1    wreg      unsigned char 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2
  6097 ;; Tracked objects:
  6098 ;;		On entry : 1D/2
  6099 ;;		On exit  : 1F/2
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6102 ;;      Params:         0       0       0       0
  6103 ;;      Locals:         1       0       0       0
  6104 ;;      Temps:          0       0       0       0
  6105 ;;      Totals:         1       0       0       0
  6106 ;;Total ram usage:        1 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		i1_Mrf49RxCmd
  6112 ;;		i1_Mrf49RxSts
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           
  6117                           ;psect for function i1_Mrf49SpiRx
  6118  0596                     i1_Mrf49SpiRx:	
  6119                           
  6120                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  6121                           
  6122                           ;incstack = 0
  6123                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  6124  0596  01F0               	clrf	i1Mrf49SpiRx@data
  6125                           
  6126                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  6127  0597  0022               	movlb	2	; select bank2
  6128  0598  138D               	bcf	13,7	;volatile
  6129  0599  0020               	movlb	0	; select bank0
  6130  059A  1A8E               	btfsc	14,5	;volatile
  6131  059B  17F0               	bsf	i1Mrf49SpiRx@data,7
  6132  059C  0022               	movlb	2	; select bank2
  6133  059D  178E               	bsf	14,7	;volatile
  6134  059E  0000               	nop	;# 
  6135  059F  0022               	movlb	2	; select bank2
  6136  05A0  138E               	bcf	14,7	;volatile
  6137                           
  6138                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6139  05A1  0020               	movlb	0	; select bank0
  6140  05A2  1A8E               	btfsc	14,5	;volatile
  6141  05A3  1770               	bsf	i1Mrf49SpiRx@data,6
  6142  05A4  0022               	movlb	2	; select bank2
  6143  05A5  178E               	bsf	14,7	;volatile
  6144  05A6  0000               	nop	;# 
  6145  05A7  0022               	movlb	2	; select bank2
  6146  05A8  138E               	bcf	14,7	;volatile
  6147                           
  6148                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6149  05A9  0020               	movlb	0	; select bank0
  6150  05AA  1A8E               	btfsc	14,5	;volatile
  6151  05AB  16F0               	bsf	i1Mrf49SpiRx@data,5
  6152  05AC  0022               	movlb	2	; select bank2
  6153  05AD  178E               	bsf	14,7	;volatile
  6154  05AE  0000               	nop	;# 
  6155  05AF  0022               	movlb	2	; select bank2
  6156  05B0  138E               	bcf	14,7	;volatile
  6157                           
  6158                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6159  05B1  0020               	movlb	0	; select bank0
  6160  05B2  1A8E               	btfsc	14,5	;volatile
  6161  05B3  1670               	bsf	i1Mrf49SpiRx@data,4
  6162  05B4  0022               	movlb	2	; select bank2
  6163  05B5  178E               	bsf	14,7	;volatile
  6164  05B6  0000               	nop	;# 
  6165  05B7  0022               	movlb	2	; select bank2
  6166  05B8  138E               	bcf	14,7	;volatile
  6167                           
  6168                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6169  05B9  0020               	movlb	0	; select bank0
  6170  05BA  1A8E               	btfsc	14,5	;volatile
  6171  05BB  15F0               	bsf	i1Mrf49SpiRx@data,3
  6172  05BC  0022               	movlb	2	; select bank2
  6173  05BD  178E               	bsf	14,7	;volatile
  6174  05BE  0000               	nop	;# 
  6175  05BF  0022               	movlb	2	; select bank2
  6176  05C0  138E               	bcf	14,7	;volatile
  6177                           
  6178                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6179  05C1  0020               	movlb	0	; select bank0
  6180  05C2  1A8E               	btfsc	14,5	;volatile
  6181  05C3  1570               	bsf	i1Mrf49SpiRx@data,2
  6182  05C4  0022               	movlb	2	; select bank2
  6183  05C5  178E               	bsf	14,7	;volatile
  6184  05C6  0000               	nop	;# 
  6185  05C7  0022               	movlb	2	; select bank2
  6186  05C8  138E               	bcf	14,7	;volatile
  6187                           
  6188                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6189  05C9  0020               	movlb	0	; select bank0
  6190  05CA  1A8E               	btfsc	14,5	;volatile
  6191  05CB  14F0               	bsf	i1Mrf49SpiRx@data,1
  6192  05CC  0022               	movlb	2	; select bank2
  6193  05CD  178E               	bsf	14,7	;volatile
  6194  05CE  0000               	nop	;# 
  6195  05CF  0022               	movlb	2	; select bank2
  6196  05D0  138E               	bcf	14,7	;volatile
  6197                           
  6198                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6199  05D1  0020               	movlb	0	; select bank0
  6200  05D2  1A8E               	btfsc	14,5	;volatile
  6201  05D3  1470               	bsf	i1Mrf49SpiRx@data,0
  6202  05D4  0022               	movlb	2	; select bank2
  6203  05D5  178E               	bsf	14,7	;volatile
  6204  05D6  0000               	nop	;# 
  6205  05D7  0022               	movlb	2	; select bank2
  6206  05D8  138E               	bcf	14,7	;volatile
  6207                           
  6208                           ;mrf49xa_spi_pic16.c: 40: return data;
  6209  05D9  0870               	movf	i1Mrf49SpiRx@data,w
  6210  05DA  0008               	return
  6211  05DB                     __end_ofi1_Mrf49SpiRx:	
  6212  007E                     btemp	set	126	;btemp
  6213  007E                     wtemp	set	126
  6214  007E                     wtemp0	set	126
  6215  0080                     wtemp1	set	128
  6216  0082                     wtemp2	set	130
  6217  0084                     wtemp3	set	132
  6218  0086                     wtemp4	set	134
  6219  0088                     wtemp5	set	136
  6220  007F                     wtemp6	set	127
  6221  007E                     ttemp	set	126
  6222  007E                     ttemp0	set	126
  6223  0081                     ttemp1	set	129
  6224  0084                     ttemp2	set	132
  6225  0087                     ttemp3	set	135
  6226  007F                     ttemp4	set	127
  6227  007E                     ltemp	set	126
  6228  007E                     ltemp0	set	126
  6229  0082                     ltemp1	set	130
  6230  0086                     ltemp2	set	134
  6231  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     14      16
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    S335rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _HandlePacket->_Mrf49xaTxAck
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5841
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0    2826
                                             10 BANK0      4     4      0
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     688
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0    1900
                                              6 BANK0      4     4      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0     862
                                              5 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxPacket                                      5     3      2     672
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    3015
                                              6 BANK0      4     4      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0    1639
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     688
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     598
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     576
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               1     1      0    3399
                                              6 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (7) i1_Mrf49xaServe                                       2     2      0    3399
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaModeRx                                      1     1      0    1277
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49TxByte                                        1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxCmd                                         2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxSts                                         0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxByte                                        0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxCmd                                         2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49SpiRx                                         1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49TxCmd
       _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _Mrf49xaTick
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      66       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      E      10       6       20.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      66      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Fri Apr 18 12:34:26 2014

                  __CFG_CP$OFF 0000                    __CFG_LVP$ON 0000          Mrf49xaTxPacket@packet 0024  
                          l210 0288                            l221 02AA                            l213 0292  
                          l205 027A                            l230 02C4                            l222 02AC  
                          l214 0294                            l206 027C                            l233 02CE  
                          l225 02B6                            l217 029E                            l209 0286  
                          l234 02D0                            l226 02B8                            l218 02A0  
                          l229 02C2                            l421 0364                            l351 00FA  
                          l372 0182                   __CFG_BORV$LO 0000                            wreg 0009  
             i1Mrf49xaModeRx@k 0073                   __CFG_IESO$ON 0000         Mrf49xaTxPacket@needAck 0021  
                         l2100 00D1                           l2110 00DB                           l2102 00D2  
                         l2018 03D4                           l2036 03E9                           l2132 035B  
                         l2140 0376                           l2126 0346                           l2046 0397  
                         l2144 037F                           l2072 0087                           l2064 0075  
                         l2160 005A                           l2138 0367                           l2074 0089  
                         l2066 007A                           l2148 0384                           l2084 00A6  
                         l2068 007E                           l2088 00BD                           l1810 0207  
                         l1732 016D                           l1900 0161                           l1806 01FF  
                         l1822 0215                           l1742 0186                           l1808 0203  
                         l1752 0194                           l1842 025B                           l1818 0213  
                         l1746 018B                           l1826 0226                           l1738 0176  
                         l1748 018E                           l1828 0232                           l1860 002A  
                         l1846 0264                           l1838 0247                           l1790 01DD  
                         l1792 01DF                           l1776 01B8                           l1768 01AC  
                         l1864 003E                           l1794 01E3                           l1786 01D1  
                         l1890 014A                           l1892 0156                           l1868 0047  
                         l1798 01E9                           l1886 0138                Mrf49TxByte@byte 0023  
                         l1896 015F                           u2107 0126                           u2117 0144  
                         u2077 00B8                           u2087 00E0                           u2097 0117  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                           _main 004D  
              __end_of_AdcInit 0338                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E                           ltemp 007E  
                         start 0014                           ttemp 007E                           wtemp 007E  
         __end_of_HandlePacket 0386        __end_ofi1_Mrf49xaModeRx 0523                  __CFG_MCLRE$ON 0000  
          __end_of_Mrf49RxByte 023E            __end_of_Mrf49TxByte 023C            __end_of_Mrf49xaInit 0167  
          __end_of_Mrf49xaTick 00FE           _Mrf49xaPacketPending 0386                          ?_main 0070  
                __CFG_WDTE$OFF 0000                          i1l210 0540                          i1l131 0011  
                        i1l221 0560                          i1l213 054A                          i1l205 0534  
                        i1l230 0577                          i1l222 0561                          i1l214 054B  
                        i1l206 0535                          i1l233 0581                          i1l225 056B  
                        i1l217 0555                          i1l209 053F                          i1l234 0582  
                        i1l226 056C                          i1l218 0556                          i1l229 0576  
                        i1l372 0442                     _Mrf49RxCmd 00FE                     _Mrf49TxCmd 0268  
                   _Mrf49SpiRx 02E2                     _Mrf49SpiTx 0274                     _Mrf49RxSts 02D6  
      Mrf49xaTxPacket@response 0020                 __CFG_BOREN$OFF 0000                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __initialization 0016                     _ExtIntInit 0338                   __end_of_main 005D  
               __CFG_LPBOR$OFF 0000          ?_Mrf49xaPacketPending 0070                         ??_main 0077  
         __end_of_Mrf49xaTxAck 041D           __end_of_Mrf49xaServe 0237            HandlePacket@sendAck 0028  
                       _ADCON0 009D                         _ADCON1 009E                         _ADCON2 009F  
          HandlePacket@sendMsg 0027                      ??_AdcInit 0077                         _ANSELA 018C  
                       _ANSELB 018D                         _ANSELC 018E             i1Mrf49xaServe@data 0075  
                       i1l2330 0499                         i1l2180 055E                         i1l2172 0548  
                       i1l2164 0532                         i1l2260 051F                         i1l2252 0503  
                       i1l2332 049B                         i1l2316 0478                         i1l2308 046B  
                       i1l2350 04C3                         i1l2334 049F                         i1l2326 048F  
                       i1l2192 057F                         i1l2184 0569                         i1l2176 0553  
                       i1l2168 053D                         i1l2256 0517                         i1l2328 0497  
                       i1l2346 04BB                         i1l2338 04A5                         i1l2362 04D1  
                       i1l2282 0446                         i1l2274 042D                         i1l2188 0574  
                       i1l2348 04BF                         i1l2292 0455                         i1l2358 04CF  
                       i1l2286 044C                         i1l2366 04E2                         i1l2278 0436  
                       i1l2288 044F                         i1l2368 04EE                         _FVRCON 0117  
                       _OSCCON 0099                    _Mrf49RxByte 023C                    _Mrf49TxByte 0237  
               __CFG_PWRTE$OFF 0000               ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 010D  
                  _Mrf49xaTick 005D                _Mrf49xaRxPacket 0390                 __CFG_STVREN$ON 0000  
              _Mrf49xaTxPacket 03BB                         _extInt 0004                    ?_Mrf49RxCmd 0070  
                  ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070  
                  ?_Mrf49RxSts 0070          __size_of_HandlePacket 0044        __end_of__initialization 001F  
        __end_ofi1_Mrf49RxByte 04FB          __end_ofi1_Mrf49TxByte 04F8                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070         ??_Mrf49xaPacketPending 0077        __size_ofi1_Mrf49xaServe 00CC  
               _OPTION_REGbits 0095                   _HandlePacket 0342        Mrf49xaFreePacket@packet 0020  
                ??_SysInitGpio 0077                     __pbssBANK0 002E                     __pbssBANK1 00A0  
      __end_of_Mrf49xaRxPacket 039E        __end_of_Mrf49xaTxPacket 03FD          __end_of_Mrf49xaModeRx 0268  
        __end_of_Mrf49xaModeTx 004D            __size_of_Mrf49RxCmd 000F            __size_of_Mrf49TxCmd 000C  
          __size_of_Mrf49SpiRx 0047            __size_of_Mrf49SpiTx 0062            __size_of_Mrf49RxSts 000C  
                   __pmaintext 004D                     __pintentry 0004                        ?_extInt 0070  
        __size_of_Mrf49xaTxAck 0020          __size_of_Mrf49xaServe 00D0                        _AdcInit 0329  
          __size_of_ExtIntInit 0005                     __stringtab 0600                  ?i1_Mrf49RxCmd 0070  
                ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070  
                ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 03BB                   _Mrf49xaTxAck 03FD  
                 _Mrf49xaServe 0167                __size_of_extInt 0010              _mrfRegset_InitCnt 0601  
                      __ptext1 039E                        __ptext2 005D                        __ptext3 0390  
                      __ptext4 0386                        __ptext5 0022                        __ptext6 0342  
                      __ptext7 03FD                        __ptext8 03BB                        __ptext9 033D  
                      clrloop0 0639           end_of_initialization 001F                   ?_Mrf49RxByte 0070  
                 ?_Mrf49TxByte 0070                 ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072  
               ??i1_Mrf49SpiRx 0070                 ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071  
             ?_Mrf49xaRxPacket 0070               ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070  
         __end_of_mrfRegset_Rx 0630           __end_of_mrfRegset_Tx 0638                   ?_Mrf49xaTick 0070  
               i1_Mrf49xaServe 0427      __end_of_mrfRegset_InitCnt 0602                      _PORTAbits 000C  
                    _PORTCbits 000E                   ??_Mrf49RxCmd 0077                   ??_Mrf49TxCmd 0077  
                 ??_Mrf49SpiRx 0077                   ??_Mrf49SpiTx 0077                   ??_Mrf49RxSts 0077  
             __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C                      _TRISBbits 008D  
                    _TRISCbits 008E                    _SysInitGpio 039E                 Mrf49SpiRx@data 0020  
               Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 010D             __end_of_Mrf49TxCmd 0274  
       __end_ofi1_Mrf49xaServe 04F3                   ??_ExtIntInit 0077             __end_of_Mrf49SpiRx 0329  
           __end_of_Mrf49SpiTx 02D6             __end_of_Mrf49RxSts 02E2       __size_ofi1_Mrf49xaModeRx 0028  
               __end_of_extInt 0014            start_initialization 0016             __end_of_ExtIntInit 033D  
           HandlePacket@packet 0029                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0602  
              _mrfRegset_TxCnt 0603                       ??_extInt 0076  __size_of_Mrf49xaPacketPending 000A  
       __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 0427  
         __end_ofi1_Mrf49TxCmd 052D           __end_ofi1_Mrf49SpiRx 05DB           __end_ofi1_Mrf49SpiTx 0588  
         __end_ofi1_Mrf49RxSts 0596                      ___latbits 0001                  __pcstackBANK0 0020  
            i1Mrf49TxByte@byte 0073                       ?_AdcInit 0070                   _rfTrcvStatus 00A0  
         __size_of_Mrf49RxByte 0002           __size_of_Mrf49TxByte 0005           __size_of_Mrf49xaInit 005A  
         __size_of_Mrf49xaTick 00A1                      __pstrings 0600         __size_of_Mrf49xaModeRx 002A  
       __size_of_Mrf49xaModeTx 002B                   _mrfRegset_Rx 0624                   _mrfRegset_Tx 0630  
            ??i1_Mrf49xaModeRx 0073                       _LATAbits 010C                       _LATBbits 010D  
                     _LATCbits 010E                  i1_Mrf49RxByte 04F8        __end_of_mrfRegset_RxCnt 0603  
                i1_Mrf49TxByte 04F3        __end_of_mrfRegset_TxCnt 0604                      clear_ram0 0638  
                  _mrf49Status 002E              _Mrf49xaFreePacket 033D                 Mrf49xaModeRx@k 0023  
               Mrf49xaModeTx@k 0023                  Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070  
                Mrf49RxCmd@val 0022                  Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021  
          ??_Mrf49xaFreePacket 0077                       _WPUAbits 020C               __size_of_AdcInit 000F  
                 ?_SysInitGpio 0070                 ?i1_Mrf49RxByte 0070                 ?i1_Mrf49TxByte 0070  
    __end_of_Mrf49xaFreePacket 0342                  _Mrf49xaModeRx 023E                  _Mrf49xaModeTx 0022  
               _mrfRegset_Init 0604       __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000A  
        __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0045          __size_ofi1_Mrf49SpiTx 005B  
             i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000E       __size_of_Mrf49xaTxPacket 0042  
             i1Mrf49SpiTx@byte 0070             __end_of__stringtab 0601                  ?_HandlePacket 0070  
                     __ptext10 010D                       __ptext11 0167                       __ptext20 0338  
                     __ptext12 023E                       __ptext21 0329                       __ptext13 0237  
                     __ptext30 052D                       __ptext14 0268                       __ptext31 0596  
                     __ptext23 0427                       __ptext15 02D6                       __ptext24 04FB  
                     __ptext16 023C                       __ptext25 04F3                       __ptext17 00FE  
                     __ptext26 0523                       __ptext18 0274                       __ptext27 0588  
                     __ptext19 02E2                       __ptext28 04F8                       __ptext29 041D  
             ??i1_Mrf49xaServe 0074                  __size_of_main 0010                   i1_Mrf49RxCmd 041D  
       __end_of_mrfRegset_Init 0624             Mrf49xaTxAck@packet 0025                   i1_Mrf49TxCmd 0523  
                 i1_Mrf49SpiRx 0596                   i1_Mrf49SpiTx 052D                 ?_Mrf49xaModeRx 0070  
               ?_Mrf49xaModeTx 0070                   i1_Mrf49RxSts 0588                i1Mrf49RxCmd@cmd 0071  
              i1Mrf49RxCmd@val 0072                 ??_HandlePacket 0077             Mrf49xaTick@timeout 002C  
                   _INTCONbits 000B                i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071  
              ??i1_Mrf49RxByte 0073                       intlevel1 0000                ??i1_Mrf49TxByte 0073  
 __end_of_Mrf49xaPacketPending 0390              __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005  
                ?_Mrf49xaTxAck 0070                   Mrf49xaInit@k 0029                  ?_Mrf49xaServe 0070  
            Mrf49xaTick@packet 002D                i1_Mrf49xaModeRx 04FB              ??_Mrf49xaRxPacket 0077  
            ??_Mrf49xaTxPacket 0022                  ??_Mrf49RxByte 0077                  ??_Mrf49TxByte 0077  
              ??_Mrf49xaModeRx 0077                ??_Mrf49xaModeTx 0077           __size_of_SysInitGpio 001D  
               ??_Mrf49xaTxAck 0077               Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024  
                ??_Mrf49xaInit 0026                  ??_Mrf49xaTick 002A               Mrf49xaTxPacket@i 0023  

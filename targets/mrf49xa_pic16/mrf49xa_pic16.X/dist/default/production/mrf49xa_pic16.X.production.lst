

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Thu Apr  3 09:40:04 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    13                           	psect	text19,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	pa_nodes,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  008C                     	;# 
    45  008D                     	;# 
    46  008E                     	;# 
    47  0091                     	;# 
    48  0092                     	;# 
    49  0093                     	;# 
    50  0095                     	;# 
    51  0096                     	;# 
    52  0097                     	;# 
    53  0099                     	;# 
    54  009A                     	;# 
    55  009B                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009E                     	;# 
    60  009F                     	;# 
    61  010C                     	;# 
    62  010D                     	;# 
    63  010E                     	;# 
    64  0111                     	;# 
    65  0112                     	;# 
    66  0113                     	;# 
    67  0114                     	;# 
    68  0115                     	;# 
    69  0116                     	;# 
    70  0117                     	;# 
    71  0118                     	;# 
    72  0119                     	;# 
    73  011D                     	;# 
    74  018C                     	;# 
    75  018D                     	;# 
    76  018E                     	;# 
    77  0191                     	;# 
    78  0191                     	;# 
    79  0192                     	;# 
    80  0193                     	;# 
    81  0193                     	;# 
    82  0194                     	;# 
    83  0195                     	;# 
    84  0196                     	;# 
    85  0197                     	;# 
    86  0199                     	;# 
    87  019A                     	;# 
    88  019B                     	;# 
    89  019B                     	;# 
    90  019C                     	;# 
    91  019D                     	;# 
    92  019E                     	;# 
    93  019F                     	;# 
    94  020C                     	;# 
    95  020D                     	;# 
    96  0211                     	;# 
    97  0211                     	;# 
    98  0212                     	;# 
    99  0212                     	;# 
   100  0213                     	;# 
   101  0213                     	;# 
   102  0214                     	;# 
   103  0214                     	;# 
   104  0215                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0216                     	;# 
   108  0216                     	;# 
   109  0217                     	;# 
   110  0217                     	;# 
   111  0391                     	;# 
   112  0392                     	;# 
   113  0393                     	;# 
   114  0394                     	;# 
   115  0395                     	;# 
   116  0396                     	;# 
   117  0498                     	;# 
   118  0498                     	;# 
   119  0499                     	;# 
   120  049A                     	;# 
   121  049B                     	;# 
   122  049B                     	;# 
   123  049C                     	;# 
   124  049E                     	;# 
   125  049F                     	;# 
   126  0611                     	;# 
   127  0612                     	;# 
   128  0613                     	;# 
   129  0613                     	;# 
   130  0614                     	;# 
   131  0615                     	;# 
   132  0616                     	;# 
   133  0616                     	;# 
   134  0617                     	;# 
   135  0618                     	;# 
   136  0619                     	;# 
   137  0619                     	;# 
   138  061A                     	;# 
   139  061B                     	;# 
   140  061C                     	;# 
   141  061C                     	;# 
   142  0691                     	;# 
   143  0692                     	;# 
   144  0693                     	;# 
   145  0694                     	;# 
   146  0695                     	;# 
   147  0F0F                     	;# 
   148  0F10                     	;# 
   149  0F11                     	;# 
   150  0F12                     	;# 
   151  0F13                     	;# 
   152  0F14                     	;# 
   153  0F15                     	;# 
   154  0F16                     	;# 
   155  0F17                     	;# 
   156  0F18                     	;# 
   157  0F19                     	;# 
   158  0F1A                     	;# 
   159  0F1B                     	;# 
   160  0F1C                     	;# 
   161  0F1D                     	;# 
   162  0F1E                     	;# 
   163  0F1F                     	;# 
   164  0F20                     	;# 
   165  0F21                     	;# 
   166  0F22                     	;# 
   167  0F23                     	;# 
   168  0F24                     	;# 
   169  0F25                     	;# 
   170  0F26                     	;# 
   171  0F27                     	;# 
   172  0F28                     	;# 
   173  0F29                     	;# 
   174  0F2A                     	;# 
   175  0F2B                     	;# 
   176  0F2C                     	;# 
   177  0F2D                     	;# 
   178  0F2E                     	;# 
   179  0F2F                     	;# 
   180  0F8C                     	;# 
   181  0F8D                     	;# 
   182  0F91                     	;# 
   183  0F95                     	;# 
   184  0F96                     	;# 
   185  0F97                     	;# 
   186  0F9C                     	;# 
   187  0F9D                     	;# 
   188  0F9E                     	;# 
   189  0FE3                     	;# 
   190  0FE4                     	;# 
   191  0FE5                     	;# 
   192  0FE6                     	;# 
   193  0FE7                     	;# 
   194  0FE8                     	;# 
   195  0FE9                     	;# 
   196  0FEA                     	;# 
   197  0FEB                     	;# 
   198  0FED                     	;# 
   199  0FEE                     	;# 
   200  0FEF                     	;# 
   201  0000                     	;# 
   202  0001                     	;# 
   203  0002                     	;# 
   204  0003                     	;# 
   205  0004                     	;# 
   206  0005                     	;# 
   207  0006                     	;# 
   208  0007                     	;# 
   209  0008                     	;# 
   210  0009                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000D                     	;# 
   215  000E                     	;# 
   216  0011                     	;# 
   217  0012                     	;# 
   218  0013                     	;# 
   219  0015                     	;# 
   220  0016                     	;# 
   221  0016                     	;# 
   222  0017                     	;# 
   223  0018                     	;# 
   224  0019                     	;# 
   225  001A                     	;# 
   226  001B                     	;# 
   227  001C                     	;# 
   228  008C                     	;# 
   229  008D                     	;# 
   230  008E                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  010C                     	;# 
   246  010D                     	;# 
   247  010E                     	;# 
   248  0111                     	;# 
   249  0112                     	;# 
   250  0113                     	;# 
   251  0114                     	;# 
   252  0115                     	;# 
   253  0116                     	;# 
   254  0117                     	;# 
   255  0118                     	;# 
   256  0119                     	;# 
   257  011D                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  018E                     	;# 
   261  0191                     	;# 
   262  0191                     	;# 
   263  0192                     	;# 
   264  0193                     	;# 
   265  0193                     	;# 
   266  0194                     	;# 
   267  0195                     	;# 
   268  0196                     	;# 
   269  0197                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019C                     	;# 
   275  019D                     	;# 
   276  019E                     	;# 
   277  019F                     	;# 
   278  020C                     	;# 
   279  020D                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0216                     	;# 
   292  0216                     	;# 
   293  0217                     	;# 
   294  0217                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  0393                     	;# 
   298  0394                     	;# 
   299  0395                     	;# 
   300  0396                     	;# 
   301  0498                     	;# 
   302  0498                     	;# 
   303  0499                     	;# 
   304  049A                     	;# 
   305  049B                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0611                     	;# 
   311  0612                     	;# 
   312  0613                     	;# 
   313  0613                     	;# 
   314  0614                     	;# 
   315  0615                     	;# 
   316  0616                     	;# 
   317  0616                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0F0F                     	;# 
   332  0F10                     	;# 
   333  0F11                     	;# 
   334  0F12                     	;# 
   335  0F13                     	;# 
   336  0F14                     	;# 
   337  0F15                     	;# 
   338  0F16                     	;# 
   339  0F17                     	;# 
   340  0F18                     	;# 
   341  0F19                     	;# 
   342  0F1A                     	;# 
   343  0F1B                     	;# 
   344  0F1C                     	;# 
   345  0F1D                     	;# 
   346  0F1E                     	;# 
   347  0F1F                     	;# 
   348  0F20                     	;# 
   349  0F21                     	;# 
   350  0F22                     	;# 
   351  0F23                     	;# 
   352  0F24                     	;# 
   353  0F25                     	;# 
   354  0F26                     	;# 
   355  0F27                     	;# 
   356  0F28                     	;# 
   357  0F29                     	;# 
   358  0F2A                     	;# 
   359  0F2B                     	;# 
   360  0F2C                     	;# 
   361  0F2D                     	;# 
   362  0F2E                     	;# 
   363  0F2F                     	;# 
   364  0F8C                     	;# 
   365  0F8D                     	;# 
   366  0F91                     	;# 
   367  0F95                     	;# 
   368  0F96                     	;# 
   369  0F97                     	;# 
   370  0F9C                     	;# 
   371  0F9D                     	;# 
   372  0F9E                     	;# 
   373  0FE3                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0197                     	;# 
   454  0199                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020D                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0391                     	;# 
   480  0392                     	;# 
   481  0393                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0498                     	;# 
   486  0498                     	;# 
   487  0499                     	;# 
   488  049A                     	;# 
   489  049B                     	;# 
   490  049B                     	;# 
   491  049C                     	;# 
   492  049E                     	;# 
   493  049F                     	;# 
   494  0611                     	;# 
   495  0612                     	;# 
   496  0613                     	;# 
   497  0613                     	;# 
   498  0614                     	;# 
   499  0615                     	;# 
   500  0616                     	;# 
   501  0616                     	;# 
   502  0617                     	;# 
   503  0618                     	;# 
   504  0619                     	;# 
   505  0619                     	;# 
   506  061A                     	;# 
   507  061B                     	;# 
   508  061C                     	;# 
   509  061C                     	;# 
   510  0691                     	;# 
   511  0692                     	;# 
   512  0693                     	;# 
   513  0694                     	;# 
   514  0695                     	;# 
   515  0F0F                     	;# 
   516  0F10                     	;# 
   517  0F11                     	;# 
   518  0F12                     	;# 
   519  0F13                     	;# 
   520  0F14                     	;# 
   521  0F15                     	;# 
   522  0F16                     	;# 
   523  0F17                     	;# 
   524  0F18                     	;# 
   525  0F19                     	;# 
   526  0F1A                     	;# 
   527  0F1B                     	;# 
   528  0F1C                     	;# 
   529  0F1D                     	;# 
   530  0F1E                     	;# 
   531  0F1F                     	;# 
   532  0F20                     	;# 
   533  0F21                     	;# 
   534  0F22                     	;# 
   535  0F23                     	;# 
   536  0F24                     	;# 
   537  0F25                     	;# 
   538  0F26                     	;# 
   539  0F27                     	;# 
   540  0F28                     	;# 
   541  0F29                     	;# 
   542  0F2A                     	;# 
   543  0F2B                     	;# 
   544  0F2C                     	;# 
   545  0F2D                     	;# 
   546  0F2E                     	;# 
   547  0F2F                     	;# 
   548  0F8C                     	;# 
   549  0F8D                     	;# 
   550  0F91                     	;# 
   551  0F95                     	;# 
   552  0F96                     	;# 
   553  0F97                     	;# 
   554  0F9C                     	;# 
   555  0F9D                     	;# 
   556  0F9E                     	;# 
   557  0FE3                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011D                     	;# 
   626  018C                     	;# 
   627  018D                     	;# 
   628  018E                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0194                     	;# 
   635  0195                     	;# 
   636  0196                     	;# 
   637  0197                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019E                     	;# 
   645  019F                     	;# 
   646  020C                     	;# 
   647  020D                     	;# 
   648  0211                     	;# 
   649  0211                     	;# 
   650  0212                     	;# 
   651  0212                     	;# 
   652  0213                     	;# 
   653  0213                     	;# 
   654  0214                     	;# 
   655  0214                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0215                     	;# 
   659  0216                     	;# 
   660  0216                     	;# 
   661  0217                     	;# 
   662  0217                     	;# 
   663  0391                     	;# 
   664  0392                     	;# 
   665  0393                     	;# 
   666  0394                     	;# 
   667  0395                     	;# 
   668  0396                     	;# 
   669  0498                     	;# 
   670  0498                     	;# 
   671  0499                     	;# 
   672  049A                     	;# 
   673  049B                     	;# 
   674  049B                     	;# 
   675  049C                     	;# 
   676  049E                     	;# 
   677  049F                     	;# 
   678  0611                     	;# 
   679  0612                     	;# 
   680  0613                     	;# 
   681  0613                     	;# 
   682  0614                     	;# 
   683  0615                     	;# 
   684  0616                     	;# 
   685  0616                     	;# 
   686  0617                     	;# 
   687  0618                     	;# 
   688  0619                     	;# 
   689  0619                     	;# 
   690  061A                     	;# 
   691  061B                     	;# 
   692  061C                     	;# 
   693  061C                     	;# 
   694  0691                     	;# 
   695  0692                     	;# 
   696  0693                     	;# 
   697  0694                     	;# 
   698  0695                     	;# 
   699  0F0F                     	;# 
   700  0F10                     	;# 
   701  0F11                     	;# 
   702  0F12                     	;# 
   703  0F13                     	;# 
   704  0F14                     	;# 
   705  0F15                     	;# 
   706  0F16                     	;# 
   707  0F17                     	;# 
   708  0F18                     	;# 
   709  0F19                     	;# 
   710  0F1A                     	;# 
   711  0F1B                     	;# 
   712  0F1C                     	;# 
   713  0F1D                     	;# 
   714  0F1E                     	;# 
   715  0F1F                     	;# 
   716  0F20                     	;# 
   717  0F21                     	;# 
   718  0F22                     	;# 
   719  0F23                     	;# 
   720  0F24                     	;# 
   721  0F25                     	;# 
   722  0F26                     	;# 
   723  0F27                     	;# 
   724  0F28                     	;# 
   725  0F29                     	;# 
   726  0F2A                     	;# 
   727  0F2B                     	;# 
   728  0F2C                     	;# 
   729  0F2D                     	;# 
   730  0F2E                     	;# 
   731  0F2F                     	;# 
   732  0F8C                     	;# 
   733  0F8D                     	;# 
   734  0F91                     	;# 
   735  0F95                     	;# 
   736  0F96                     	;# 
   737  0F97                     	;# 
   738  0F9C                     	;# 
   739  0F9D                     	;# 
   740  0F9E                     	;# 
   741  0FE3                     	;# 
   742  0FE4                     	;# 
   743  0FE5                     	;# 
   744  0FE6                     	;# 
   745  0FE7                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEF                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  000E                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0013                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  008D                     	;# 
   782  008E                     	;# 
   783  0091                     	;# 
   784  0092                     	;# 
   785  0093                     	;# 
   786  0095                     	;# 
   787  0096                     	;# 
   788  0097                     	;# 
   789  0099                     	;# 
   790  009A                     	;# 
   791  009B                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  009F                     	;# 
   797  010C                     	;# 
   798  010D                     	;# 
   799  010E                     	;# 
   800  0111                     	;# 
   801  0112                     	;# 
   802  0113                     	;# 
   803  0114                     	;# 
   804  0115                     	;# 
   805  0116                     	;# 
   806  0117                     	;# 
   807  0118                     	;# 
   808  0119                     	;# 
   809  011D                     	;# 
   810  018C                     	;# 
   811  018D                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0197                     	;# 
   822  0199                     	;# 
   823  019A                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019C                     	;# 
   827  019D                     	;# 
   828  019E                     	;# 
   829  019F                     	;# 
   830  020C                     	;# 
   831  020D                     	;# 
   832  0211                     	;# 
   833  0211                     	;# 
   834  0212                     	;# 
   835  0212                     	;# 
   836  0213                     	;# 
   837  0213                     	;# 
   838  0214                     	;# 
   839  0214                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0215                     	;# 
   843  0216                     	;# 
   844  0216                     	;# 
   845  0217                     	;# 
   846  0217                     	;# 
   847  0391                     	;# 
   848  0392                     	;# 
   849  0393                     	;# 
   850  0394                     	;# 
   851  0395                     	;# 
   852  0396                     	;# 
   853  0498                     	;# 
   854  0498                     	;# 
   855  0499                     	;# 
   856  049A                     	;# 
   857  049B                     	;# 
   858  049B                     	;# 
   859  049C                     	;# 
   860  049E                     	;# 
   861  049F                     	;# 
   862  0611                     	;# 
   863  0612                     	;# 
   864  0613                     	;# 
   865  0613                     	;# 
   866  0614                     	;# 
   867  0615                     	;# 
   868  0616                     	;# 
   869  0616                     	;# 
   870  0617                     	;# 
   871  0618                     	;# 
   872  0619                     	;# 
   873  0619                     	;# 
   874  061A                     	;# 
   875  061B                     	;# 
   876  061C                     	;# 
   877  061C                     	;# 
   878  0691                     	;# 
   879  0692                     	;# 
   880  0693                     	;# 
   881  0694                     	;# 
   882  0695                     	;# 
   883  0F0F                     	;# 
   884  0F10                     	;# 
   885  0F11                     	;# 
   886  0F12                     	;# 
   887  0F13                     	;# 
   888  0F14                     	;# 
   889  0F15                     	;# 
   890  0F16                     	;# 
   891  0F17                     	;# 
   892  0F18                     	;# 
   893  0F19                     	;# 
   894  0F1A                     	;# 
   895  0F1B                     	;# 
   896  0F1C                     	;# 
   897  0F1D                     	;# 
   898  0F1E                     	;# 
   899  0F1F                     	;# 
   900  0F20                     	;# 
   901  0F21                     	;# 
   902  0F22                     	;# 
   903  0F23                     	;# 
   904  0F24                     	;# 
   905  0F25                     	;# 
   906  0F26                     	;# 
   907  0F27                     	;# 
   908  0F28                     	;# 
   909  0F29                     	;# 
   910  0F2A                     	;# 
   911  0F2B                     	;# 
   912  0F2C                     	;# 
   913  0F2D                     	;# 
   914  0F2E                     	;# 
   915  0F2F                     	;# 
   916  0F8C                     	;# 
   917  0F8D                     	;# 
   918  0F91                     	;# 
   919  0F95                     	;# 
   920  0F96                     	;# 
   921  0F97                     	;# 
   922  0F9C                     	;# 
   923  0F9D                     	;# 
   924  0F9E                     	;# 
   925  0FE3                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0013                     	;# 
   955  0015                     	;# 
   956  0016                     	;# 
   957  0016                     	;# 
   958  0017                     	;# 
   959  0018                     	;# 
   960  0019                     	;# 
   961  001A                     	;# 
   962  001B                     	;# 
   963  001C                     	;# 
   964  008C                     	;# 
   965  008D                     	;# 
   966  008E                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0093                     	;# 
   970  0095                     	;# 
   971  0096                     	;# 
   972  0097                     	;# 
   973  0099                     	;# 
   974  009A                     	;# 
   975  009B                     	;# 
   976  009B                     	;# 
   977  009C                     	;# 
   978  009D                     	;# 
   979  009E                     	;# 
   980  009F                     	;# 
   981  010C                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  0111                     	;# 
   985  0112                     	;# 
   986  0113                     	;# 
   987  0114                     	;# 
   988  0115                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  0118                     	;# 
   992  0119                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020C                     	;# 
  1015  020D                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0391                     	;# 
  1032  0392                     	;# 
  1033  0393                     	;# 
  1034  0394                     	;# 
  1035  0395                     	;# 
  1036  0396                     	;# 
  1037  0498                     	;# 
  1038  0498                     	;# 
  1039  0499                     	;# 
  1040  049A                     	;# 
  1041  049B                     	;# 
  1042  049B                     	;# 
  1043  049C                     	;# 
  1044  049E                     	;# 
  1045  049F                     	;# 
  1046  0611                     	;# 
  1047  0612                     	;# 
  1048  0613                     	;# 
  1049  0613                     	;# 
  1050  0614                     	;# 
  1051  0615                     	;# 
  1052  0616                     	;# 
  1053  0616                     	;# 
  1054  0617                     	;# 
  1055  0618                     	;# 
  1056  0619                     	;# 
  1057  0619                     	;# 
  1058  061A                     	;# 
  1059  061B                     	;# 
  1060  061C                     	;# 
  1061  061C                     	;# 
  1062  0691                     	;# 
  1063  0692                     	;# 
  1064  0693                     	;# 
  1065  0694                     	;# 
  1066  0695                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F8C                     	;# 
  1101  0F8D                     	;# 
  1102  0F91                     	;# 
  1103  0F95                     	;# 
  1104  0F96                     	;# 
  1105  0F97                     	;# 
  1106  0F9C                     	;# 
  1107  0F9D                     	;# 
  1108  0F9E                     	;# 
  1109  0FE3                     	;# 
  1110  0FE4                     	;# 
  1111  0FE5                     	;# 
  1112  0FE6                     	;# 
  1113  0FE7                     	;# 
  1114  0FE8                     	;# 
  1115  0FE9                     	;# 
  1116  0FEA                     	;# 
  1117  0FEB                     	;# 
  1118  0FED                     	;# 
  1119  0FEE                     	;# 
  1120  0FEF                     	;# 
  1121  0000                     	;# 
  1122  0001                     	;# 
  1123  0002                     	;# 
  1124  0003                     	;# 
  1125  0004                     	;# 
  1126  0005                     	;# 
  1127  0006                     	;# 
  1128  0007                     	;# 
  1129  0008                     	;# 
  1130  0009                     	;# 
  1131  000A                     	;# 
  1132  000B                     	;# 
  1133  000C                     	;# 
  1134  000D                     	;# 
  1135  000E                     	;# 
  1136  0011                     	;# 
  1137  0012                     	;# 
  1138  0013                     	;# 
  1139  0015                     	;# 
  1140  0016                     	;# 
  1141  0016                     	;# 
  1142  0017                     	;# 
  1143  0018                     	;# 
  1144  0019                     	;# 
  1145  001A                     	;# 
  1146  001B                     	;# 
  1147  001C                     	;# 
  1148  008C                     	;# 
  1149  008D                     	;# 
  1150  008E                     	;# 
  1151  0091                     	;# 
  1152  0092                     	;# 
  1153  0093                     	;# 
  1154  0095                     	;# 
  1155  0096                     	;# 
  1156  0097                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  009F                     	;# 
  1165  010C                     	;# 
  1166  010D                     	;# 
  1167  010E                     	;# 
  1168  0111                     	;# 
  1169  0112                     	;# 
  1170  0113                     	;# 
  1171  0114                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  011D                     	;# 
  1178  018C                     	;# 
  1179  018D                     	;# 
  1180  018E                     	;# 
  1181  0191                     	;# 
  1182  0191                     	;# 
  1183  0192                     	;# 
  1184  0193                     	;# 
  1185  0193                     	;# 
  1186  0194                     	;# 
  1187  0195                     	;# 
  1188  0196                     	;# 
  1189  0197                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019C                     	;# 
  1195  019D                     	;# 
  1196  019E                     	;# 
  1197  019F                     	;# 
  1198  020C                     	;# 
  1199  020D                     	;# 
  1200  0211                     	;# 
  1201  0211                     	;# 
  1202  0212                     	;# 
  1203  0212                     	;# 
  1204  0213                     	;# 
  1205  0213                     	;# 
  1206  0214                     	;# 
  1207  0214                     	;# 
  1208  0215                     	;# 
  1209  0215                     	;# 
  1210  0215                     	;# 
  1211  0216                     	;# 
  1212  0216                     	;# 
  1213  0217                     	;# 
  1214  0217                     	;# 
  1215  0391                     	;# 
  1216  0392                     	;# 
  1217  0393                     	;# 
  1218  0394                     	;# 
  1219  0395                     	;# 
  1220  0396                     	;# 
  1221  0498                     	;# 
  1222  0498                     	;# 
  1223  0499                     	;# 
  1224  049A                     	;# 
  1225  049B                     	;# 
  1226  049B                     	;# 
  1227  049C                     	;# 
  1228  049E                     	;# 
  1229  049F                     	;# 
  1230  0611                     	;# 
  1231  0612                     	;# 
  1232  0613                     	;# 
  1233  0613                     	;# 
  1234  0614                     	;# 
  1235  0615                     	;# 
  1236  0616                     	;# 
  1237  0616                     	;# 
  1238  0617                     	;# 
  1239  0618                     	;# 
  1240  0619                     	;# 
  1241  0619                     	;# 
  1242  061A                     	;# 
  1243  061B                     	;# 
  1244  061C                     	;# 
  1245  061C                     	;# 
  1246  0691                     	;# 
  1247  0692                     	;# 
  1248  0693                     	;# 
  1249  0694                     	;# 
  1250  0695                     	;# 
  1251  0F0F                     	;# 
  1252  0F10                     	;# 
  1253  0F11                     	;# 
  1254  0F12                     	;# 
  1255  0F13                     	;# 
  1256  0F14                     	;# 
  1257  0F15                     	;# 
  1258  0F16                     	;# 
  1259  0F17                     	;# 
  1260  0F18                     	;# 
  1261  0F19                     	;# 
  1262  0F1A                     	;# 
  1263  0F1B                     	;# 
  1264  0F1C                     	;# 
  1265  0F1D                     	;# 
  1266  0F1E                     	;# 
  1267  0F1F                     	;# 
  1268  0F20                     	;# 
  1269  0F21                     	;# 
  1270  0F22                     	;# 
  1271  0F23                     	;# 
  1272  0F24                     	;# 
  1273  0F25                     	;# 
  1274  0F26                     	;# 
  1275  0F27                     	;# 
  1276  0F28                     	;# 
  1277  0F29                     	;# 
  1278  0F2A                     	;# 
  1279  0F2B                     	;# 
  1280  0F2C                     	;# 
  1281  0F2D                     	;# 
  1282  0F2E                     	;# 
  1283  0F2F                     	;# 
  1284  0F8C                     	;# 
  1285  0F8D                     	;# 
  1286  0F91                     	;# 
  1287  0F95                     	;# 
  1288  0F96                     	;# 
  1289  0F97                     	;# 
  1290  0F9C                     	;# 
  1291  0F9D                     	;# 
  1292  0F9E                     	;# 
  1293  0FE3                     	;# 
  1294  0FE4                     	;# 
  1295  0FE5                     	;# 
  1296  0FE6                     	;# 
  1297  0FE7                     	;# 
  1298  0FE8                     	;# 
  1299  0FE9                     	;# 
  1300  0FEA                     	;# 
  1301  0FEB                     	;# 
  1302  0FED                     	;# 
  1303  0FEE                     	;# 
  1304  0FEF                     	;# 
  1305  0000                     	;# 
  1306  0001                     	;# 
  1307  0002                     	;# 
  1308  0003                     	;# 
  1309  0004                     	;# 
  1310  0005                     	;# 
  1311  0006                     	;# 
  1312  0007                     	;# 
  1313  0008                     	;# 
  1314  0009                     	;# 
  1315  000A                     	;# 
  1316  000B                     	;# 
  1317  000C                     	;# 
  1318  000D                     	;# 
  1319  000E                     	;# 
  1320  0011                     	;# 
  1321  0012                     	;# 
  1322  0013                     	;# 
  1323  0015                     	;# 
  1324  0016                     	;# 
  1325  0016                     	;# 
  1326  0017                     	;# 
  1327  0018                     	;# 
  1328  0019                     	;# 
  1329  001A                     	;# 
  1330  001B                     	;# 
  1331  001C                     	;# 
  1332  008C                     	;# 
  1333  008D                     	;# 
  1334  008E                     	;# 
  1335  0091                     	;# 
  1336  0092                     	;# 
  1337  0093                     	;# 
  1338  0095                     	;# 
  1339  0096                     	;# 
  1340  0097                     	;# 
  1341  0099                     	;# 
  1342  009A                     	;# 
  1343  009B                     	;# 
  1344  009B                     	;# 
  1345  009C                     	;# 
  1346  009D                     	;# 
  1347  009E                     	;# 
  1348  009F                     	;# 
  1349  010C                     	;# 
  1350  010D                     	;# 
  1351  010E                     	;# 
  1352  0111                     	;# 
  1353  0112                     	;# 
  1354  0113                     	;# 
  1355  0114                     	;# 
  1356  0115                     	;# 
  1357  0116                     	;# 
  1358  0117                     	;# 
  1359  0118                     	;# 
  1360  0119                     	;# 
  1361  011D                     	;# 
  1362  018C                     	;# 
  1363  018D                     	;# 
  1364  018E                     	;# 
  1365  0191                     	;# 
  1366  0191                     	;# 
  1367  0192                     	;# 
  1368  0193                     	;# 
  1369  0193                     	;# 
  1370  0194                     	;# 
  1371  0195                     	;# 
  1372  0196                     	;# 
  1373  0197                     	;# 
  1374  0199                     	;# 
  1375  019A                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019C                     	;# 
  1379  019D                     	;# 
  1380  019E                     	;# 
  1381  019F                     	;# 
  1382  020C                     	;# 
  1383  020D                     	;# 
  1384  0211                     	;# 
  1385  0211                     	;# 
  1386  0212                     	;# 
  1387  0212                     	;# 
  1388  0213                     	;# 
  1389  0213                     	;# 
  1390  0214                     	;# 
  1391  0214                     	;# 
  1392  0215                     	;# 
  1393  0215                     	;# 
  1394  0215                     	;# 
  1395  0216                     	;# 
  1396  0216                     	;# 
  1397  0217                     	;# 
  1398  0217                     	;# 
  1399  0391                     	;# 
  1400  0392                     	;# 
  1401  0393                     	;# 
  1402  0394                     	;# 
  1403  0395                     	;# 
  1404  0396                     	;# 
  1405  0498                     	;# 
  1406  0498                     	;# 
  1407  0499                     	;# 
  1408  049A                     	;# 
  1409  049B                     	;# 
  1410  049B                     	;# 
  1411  049C                     	;# 
  1412  049E                     	;# 
  1413  049F                     	;# 
  1414  0611                     	;# 
  1415  0612                     	;# 
  1416  0613                     	;# 
  1417  0613                     	;# 
  1418  0614                     	;# 
  1419  0615                     	;# 
  1420  0616                     	;# 
  1421  0616                     	;# 
  1422  0617                     	;# 
  1423  0618                     	;# 
  1424  0619                     	;# 
  1425  0619                     	;# 
  1426  061A                     	;# 
  1427  061B                     	;# 
  1428  061C                     	;# 
  1429  061C                     	;# 
  1430  0691                     	;# 
  1431  0692                     	;# 
  1432  0693                     	;# 
  1433  0694                     	;# 
  1434  0695                     	;# 
  1435  0F0F                     	;# 
  1436  0F10                     	;# 
  1437  0F11                     	;# 
  1438  0F12                     	;# 
  1439  0F13                     	;# 
  1440  0F14                     	;# 
  1441  0F15                     	;# 
  1442  0F16                     	;# 
  1443  0F17                     	;# 
  1444  0F18                     	;# 
  1445  0F19                     	;# 
  1446  0F1A                     	;# 
  1447  0F1B                     	;# 
  1448  0F1C                     	;# 
  1449  0F1D                     	;# 
  1450  0F1E                     	;# 
  1451  0F1F                     	;# 
  1452  0F20                     	;# 
  1453  0F21                     	;# 
  1454  0F22                     	;# 
  1455  0F23                     	;# 
  1456  0F24                     	;# 
  1457  0F25                     	;# 
  1458  0F26                     	;# 
  1459  0F27                     	;# 
  1460  0F28                     	;# 
  1461  0F29                     	;# 
  1462  0F2A                     	;# 
  1463  0F2B                     	;# 
  1464  0F2C                     	;# 
  1465  0F2D                     	;# 
  1466  0F2E                     	;# 
  1467  0F2F                     	;# 
  1468  0F8C                     	;# 
  1469  0F8D                     	;# 
  1470  0F91                     	;# 
  1471  0F95                     	;# 
  1472  0F96                     	;# 
  1473  0F97                     	;# 
  1474  0F9C                     	;# 
  1475  0F9D                     	;# 
  1476  0F9E                     	;# 
  1477  0FE3                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0013                     	;# 
  1507  0015                     	;# 
  1508  0016                     	;# 
  1509  0016                     	;# 
  1510  0017                     	;# 
  1511  0018                     	;# 
  1512  0019                     	;# 
  1513  001A                     	;# 
  1514  001B                     	;# 
  1515  001C                     	;# 
  1516  008C                     	;# 
  1517  008D                     	;# 
  1518  008E                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0093                     	;# 
  1522  0095                     	;# 
  1523  0096                     	;# 
  1524  0097                     	;# 
  1525  0099                     	;# 
  1526  009A                     	;# 
  1527  009B                     	;# 
  1528  009B                     	;# 
  1529  009C                     	;# 
  1530  009D                     	;# 
  1531  009E                     	;# 
  1532  009F                     	;# 
  1533  010C                     	;# 
  1534  010D                     	;# 
  1535  010E                     	;# 
  1536  0111                     	;# 
  1537  0112                     	;# 
  1538  0113                     	;# 
  1539  0114                     	;# 
  1540  0115                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  0118                     	;# 
  1544  0119                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020C                     	;# 
  1567  020D                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0391                     	;# 
  1584  0392                     	;# 
  1585  0393                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0498                     	;# 
  1590  0498                     	;# 
  1591  0499                     	;# 
  1592  049A                     	;# 
  1593  049B                     	;# 
  1594  049B                     	;# 
  1595  049C                     	;# 
  1596  049E                     	;# 
  1597  049F                     	;# 
  1598  0611                     	;# 
  1599  0612                     	;# 
  1600  0613                     	;# 
  1601  0613                     	;# 
  1602  0614                     	;# 
  1603  0615                     	;# 
  1604  0616                     	;# 
  1605  0616                     	;# 
  1606  0617                     	;# 
  1607  0618                     	;# 
  1608  0619                     	;# 
  1609  0619                     	;# 
  1610  061A                     	;# 
  1611  061B                     	;# 
  1612  061C                     	;# 
  1613  061C                     	;# 
  1614  0691                     	;# 
  1615  0692                     	;# 
  1616  0693                     	;# 
  1617  0694                     	;# 
  1618  0695                     	;# 
  1619  0F0F                     	;# 
  1620  0F10                     	;# 
  1621  0F11                     	;# 
  1622  0F12                     	;# 
  1623  0F13                     	;# 
  1624  0F14                     	;# 
  1625  0F15                     	;# 
  1626  0F16                     	;# 
  1627  0F17                     	;# 
  1628  0F18                     	;# 
  1629  0F19                     	;# 
  1630  0F1A                     	;# 
  1631  0F1B                     	;# 
  1632  0F1C                     	;# 
  1633  0F1D                     	;# 
  1634  0F1E                     	;# 
  1635  0F1F                     	;# 
  1636  0F20                     	;# 
  1637  0F21                     	;# 
  1638  0F22                     	;# 
  1639  0F23                     	;# 
  1640  0F24                     	;# 
  1641  0F25                     	;# 
  1642  0F26                     	;# 
  1643  0F27                     	;# 
  1644  0F28                     	;# 
  1645  0F29                     	;# 
  1646  0F2A                     	;# 
  1647  0F2B                     	;# 
  1648  0F2C                     	;# 
  1649  0F2D                     	;# 
  1650  0F2E                     	;# 
  1651  0F2F                     	;# 
  1652  0F8C                     	;# 
  1653  0F8D                     	;# 
  1654  0F91                     	;# 
  1655  0F95                     	;# 
  1656  0F96                     	;# 
  1657  0F97                     	;# 
  1658  0F9C                     	;# 
  1659  0F9D                     	;# 
  1660  0F9E                     	;# 
  1661  0FE3                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673                           
  1674                           	psect	stringtext
  1675  0600                     __pstringtext:	
  1676  0600                     __stringtab:	
  1677  0600  3400               	retlw	0
  1678  0601                     __end_of__stringtab:	
  1679  0601                     _dpowers:	
  1680  0601  3401               	retlw	1
  1681  0602  3400               	retlw	0
  1682  0603  340A               	retlw	10
  1683  0604  3400               	retlw	0
  1684  0605  3464               	retlw	100
  1685  0606  3400               	retlw	0
  1686  0607  34E8               	retlw	232
  1687  0608  3403               	retlw	3
  1688  0609  3410               	retlw	16
  1689  060A  3427               	retlw	39
  1690  060B                     __end_of_dpowers:	
  1691  060B                     _hexpowers:	
  1692  060B  3401               	retlw	1
  1693  060C  3400               	retlw	0
  1694  060D  3410               	retlw	16
  1695  060E  3400               	retlw	0
  1696  060F  3400               	retlw	0
  1697  0610  3401               	retlw	1
  1698  0611  3400               	retlw	0
  1699  0612  3410               	retlw	16
  1700  0613                     __end_of_hexpowers:	
  1701  000E                     _PORTCbits	set	14
  1702  009D                     _ADCON0	set	157
  1703  009E                     _ADCON1	set	158
  1704  009F                     _ADCON2	set	159
  1705  0099                     _OSCCON	set	153
  1706  008C                     _TRISAbits	set	140
  1707  008D                     _TRISBbits	set	141
  1708  008E                     _TRISCbits	set	142
  1709  0117                     _FVRCON	set	279
  1710  010D                     _LATBbits	set	269
  1711  010E                     _LATCbits	set	270
  1712  018C                     _ANSELA	set	396
  1713  018D                     _ANSELB	set	397
  1714  018E                     _ANSELC	set	398
  1715  0613                     __stringdata:	
  1716  0613                     STR_9:	
  1717  0613  345B               	retlw	91	;'['
  1718  0614  3452               	retlw	82	;'R'
  1719  0615  3446               	retlw	70	;'F'
  1720  0616  345D               	retlw	93	;']'
  1721  0617  3420               	retlw	32	;' '
  1722  0618  3450               	retlw	80	;'P'
  1723  0619  346F               	retlw	111	;'o'
  1724  061A  3477               	retlw	119	;'w'
  1725  061B  3465               	retlw	101	;'e'
  1726  061C  3472               	retlw	114	;'r'
  1727  061D  342D               	retlw	45	;'-'
  1728  061E  346F               	retlw	111	;'o'
  1729  061F  346E               	retlw	110	;'n'
  1730  0620  342D               	retlw	45	;'-'
  1731  0621  3452               	retlw	82	;'R'
  1732  0622  3465               	retlw	101	;'e'
  1733  0623  3473               	retlw	115	;'s'
  1734  0624  3465               	retlw	101	;'e'
  1735  0625  3474               	retlw	116	;'t'
  1736  0626  3420               	retlw	32	;' '
  1737  0627  346D               	retlw	109	;'m'
  1738  0628  3465               	retlw	101	;'e'
  1739  0629  3473               	retlw	115	;'s'
  1740  062A  3473               	retlw	115	;'s'
  1741  062B  3461               	retlw	97	;'a'
  1742  062C  3467               	retlw	103	;'g'
  1743  062D  3465               	retlw	101	;'e'
  1744  062E  3420               	retlw	32	;' '
  1745  062F  3466               	retlw	102	;'f'
  1746  0630  3472               	retlw	114	;'r'
  1747  0631  346F               	retlw	111	;'o'
  1748  0632  346D               	retlw	109	;'m'
  1749  0633  3420               	retlw	32	;' '
  1750  0634  346E               	retlw	110	;'n'
  1751  0635  346F               	retlw	111	;'o'
  1752  0636  3464               	retlw	100	;'d'
  1753  0637  3465               	retlw	101	;'e'
  1754  0638  3420               	retlw	32	;' '
  1755  0639  3425               	retlw	37	;'%'
  1756  063A  3464               	retlw	100	;'d'
  1757  063B  340A               	retlw	10
  1758  063C  345B               	retlw	91	;'['
  1759  063D  3452               	retlw	82	;'R'
  1760  063E  3446               	retlw	70	;'F'
  1761  063F  345D               	retlw	93	;']'
  1762  0640  3441               	retlw	65	;'A'
  1763  0641  3464               	retlw	100	;'d'
  1764  0642  3464               	retlw	100	;'d'
  1765  0643  3469               	retlw	105	;'i'
  1766  0644  346E               	retlw	110	;'n'
  1767  0645  3467               	retlw	103	;'g'
  1768  0646  3420               	retlw	32	;' '
  1769  0647  346E               	retlw	110	;'n'
  1770  0648  346F               	retlw	111	;'o'
  1771  0649  3464               	retlw	100	;'d'
  1772  064A  3465               	retlw	101	;'e'
  1773  064B  3420               	retlw	32	;' '
  1774  064C  3474               	retlw	116	;'t'
  1775  064D  346F               	retlw	111	;'o'
  1776  064E  3420               	retlw	32	;' '
  1777  064F  3474               	retlw	116	;'t'
  1778  0650  3461               	retlw	97	;'a'
  1779  0651  3462               	retlw	98	;'b'
  1780  0652  346C               	retlw	108	;'l'
  1781  0653  3465               	retlw	101	;'e'
  1782  0654  340A               	retlw	10
  1783  0655  3400               	retlw	0
  1784  0656                     STR_2:	
  1785  0656  345B               	retlw	91	;'['
  1786  0657  3452               	retlw	82	;'R'
  1787  0658  3446               	retlw	70	;'F'
  1788  0659  345D               	retlw	93	;']'
  1789  065A  3420               	retlw	32	;' '
  1790  065B  3454               	retlw	84	;'T'
  1791  065C  3458               	retlw	88	;'X'
  1792  065D  3420               	retlw	32	;' '
  1793  065E  344E               	retlw	78	;'N'
  1794  065F  346F               	retlw	111	;'o'
  1795  0660  3464               	retlw	100	;'d'
  1796  0661  3465               	retlw	101	;'e'
  1797  0662  3420               	retlw	32	;' '
  1798  0663  3425               	retlw	37	;'%'
  1799  0664  3464               	retlw	100	;'d'
  1800  0665  3420               	retlw	32	;' '
  1801  0666  342D               	retlw	45	;'-'
  1802  0667  343E               	retlw	62	;'>'
  1803  0668  3420               	retlw	32	;' '
  1804  0669  3425               	retlw	37	;'%'
  1805  066A  3464               	retlw	100	;'d'
  1806  066B  3420               	retlw	32	;' '
  1807  066C  347C               	retlw	124	;'|'
  1808  066D  3420               	retlw	32	;' '
  1809  066E  344D               	retlw	77	;'M'
  1810  066F  3473               	retlw	115	;'s'
  1811  0670  3467               	retlw	103	;'g'
  1812  0671  3420               	retlw	32	;' '
  1813  0672  3449               	retlw	73	;'I'
  1814  0673  3444               	retlw	68	;'D'
  1815  0674  3420               	retlw	32	;' '
  1816  0675  3425               	retlw	37	;'%'
  1817  0676  3430               	retlw	48	;'0'
  1818  0677  3432               	retlw	50	;'2'
  1819  0678  3458               	retlw	88	;'X'
  1820  0679  3420               	retlw	32	;' '
  1821  067A  344F               	retlw	79	;'O'
  1822  067B  3470               	retlw	112	;'p'
  1823  067C  3474               	retlw	116	;'t'
  1824  067D  3420               	retlw	32	;' '
  1825  067E  3425               	retlw	37	;'%'
  1826  067F  3430               	retlw	48	;'0'
  1827  0680  3432               	retlw	50	;'2'
  1828  0681  3458               	retlw	88	;'X'
  1829  0682  3420               	retlw	32	;' '
  1830  0683  347C               	retlw	124	;'|'
  1831  0684  3420               	retlw	32	;' '
  1832  0685  3444               	retlw	68	;'D'
  1833  0686  3461               	retlw	97	;'a'
  1834  0687  3474               	retlw	116	;'t'
  1835  0688  3461               	retlw	97	;'a'
  1836  0689  343A               	retlw	58	;':'
  1837  068A  3400               	retlw	0
  1838  068B                     STR_1:	
  1839  068B  345B               	retlw	91	;'['
  1840  068C  3452               	retlw	82	;'R'
  1841  068D  3446               	retlw	70	;'F'
  1842  068E  345D               	retlw	93	;']'
  1843  068F  3420               	retlw	32	;' '
  1844  0690  3444               	retlw	68	;'D'
  1845  0691  3472               	retlw	114	;'r'
  1846  0692  346F               	retlw	111	;'o'
  1847  0693  3470               	retlw	112	;'p'
  1848  0694  3470               	retlw	112	;'p'
  1849  0695  3469               	retlw	105	;'i'
  1850  0696  346E               	retlw	110	;'n'
  1851  0697  3467               	retlw	103	;'g'
  1852  0698  3420               	retlw	32	;' '
  1853  0699  3454               	retlw	84	;'T'
  1854  069A  3458               	retlw	88	;'X'
  1855  069B  3420               	retlw	32	;' '
  1856  069C  3470               	retlw	112	;'p'
  1857  069D  3461               	retlw	97	;'a'
  1858  069E  3463               	retlw	99	;'c'
  1859  069F  346B               	retlw	107	;'k'
  1860  06A0  3465               	retlw	101	;'e'
  1861  06A1  3474               	retlw	116	;'t'
  1862  06A2  3420               	retlw	32	;' '
  1863  06A3  342D               	retlw	45	;'-'
  1864  06A4  3420               	retlw	32	;' '
  1865  06A5  3472               	retlw	114	;'r'
  1866  06A6  3465               	retlw	101	;'e'
  1867  06A7  3474               	retlw	116	;'t'
  1868  06A8  3475               	retlw	117	;'u'
  1869  06A9  3472               	retlw	114	;'r'
  1870  06AA  346E               	retlw	110	;'n'
  1871  06AB  3465               	retlw	101	;'e'
  1872  06AC  3464               	retlw	100	;'d'
  1873  06AD  3420               	retlw	32	;' '
  1874  06AE  344E               	retlw	78	;'N'
  1875  06AF  3455               	retlw	85	;'U'
  1876  06B0  344C               	retlw	76	;'L'
  1877  06B1  344C               	retlw	76	;'L'
  1878  06B2  340A               	retlw	10
  1879  06B3  3400               	retlw	0
  1880  06B4                     STR_8:	
  1881  06B4  345B               	retlw	91	;'['
  1882  06B5  3452               	retlw	82	;'R'
  1883  06B6  3446               	retlw	70	;'F'
  1884  06B7  345D               	retlw	93	;']'
  1885  06B8  3420               	retlw	32	;' '
  1886  06B9  3443               	retlw	67	;'C'
  1887  06BA  3452               	retlw	82	;'R'
  1888  06BB  3443               	retlw	67	;'C'
  1889  06BC  3420               	retlw	32	;' '
  1890  06BD  3465               	retlw	101	;'e'
  1891  06BE  3472               	retlw	114	;'r'
  1892  06BF  3472               	retlw	114	;'r'
  1893  06C0  346F               	retlw	111	;'o'
  1894  06C1  3472               	retlw	114	;'r'
  1895  06C2  3420               	retlw	32	;' '
  1896  06C3  347C               	retlw	124	;'|'
  1897  06C4  3420               	retlw	32	;' '
  1898  06C5  3452               	retlw	82	;'R'
  1899  06C6  3458               	retlw	88	;'X'
  1900  06C7  3420               	retlw	32	;' '
  1901  06C8  3425               	retlw	37	;'%'
  1902  06C9  3430               	retlw	48	;'0'
  1903  06CA  3432               	retlw	50	;'2'
  1904  06CB  3458               	retlw	88	;'X'
  1905  06CC  3420               	retlw	32	;' '
  1906  06CD  347C               	retlw	124	;'|'
  1907  06CE  3420               	retlw	32	;' '
  1908  06CF  3443               	retlw	67	;'C'
  1909  06D0  3441               	retlw	65	;'A'
  1910  06D1  344C               	retlw	76	;'L'
  1911  06D2  3443               	retlw	67	;'C'
  1912  06D3  3420               	retlw	32	;' '
  1913  06D4  3425               	retlw	37	;'%'
  1914  06D5  3430               	retlw	48	;'0'
  1915  06D6  3432               	retlw	50	;'2'
  1916  06D7  3458               	retlw	88	;'X'
  1917  06D8  340A               	retlw	10
  1918  06D9  3400               	retlw	0
  1919  06DA                     STR_14:	
  1920  06DA  345B               	retlw	91	;'['
  1921  06DB  3443               	retlw	67	;'C'
  1922  06DC  3443               	retlw	67	;'C'
  1923  06DD  3442               	retlw	66	;'B'
  1924  06DE  3475               	retlw	117	;'u'
  1925  06DF  3466               	retlw	102	;'f'
  1926  06E0  345D               	retlw	93	;']'
  1927  06E1  3420               	retlw	32	;' '
  1928  06E2  3443               	retlw	67	;'C'
  1929  06E3  3461               	retlw	97	;'a'
  1930  06E4  346E               	retlw	110	;'n'
  1931  06E5  346E               	retlw	110	;'n'
  1932  06E6  346F               	retlw	111	;'o'
  1933  06E7  3474               	retlw	116	;'t'
  1934  06E8  3420               	retlw	32	;' '
  1935  06E9  3477               	retlw	119	;'w'
  1936  06EA  3472               	retlw	114	;'r'
  1937  06EB  3469               	retlw	105	;'i'
  1938  06EC  3474               	retlw	116	;'t'
  1939  06ED  3465               	retlw	101	;'e'
  1940  06EE  343B               	retlw	59	;';'
  1941  06EF  3420               	retlw	32	;' '
  1942  06F0  346F               	retlw	111	;'o'
  1943  06F1  3476               	retlw	118	;'v'
  1944  06F2  3465               	retlw	101	;'e'
  1945  06F3  3472               	retlw	114	;'r'
  1946  06F4  3466               	retlw	102	;'f'
  1947  06F5  346C               	retlw	108	;'l'
  1948  06F6  346F               	retlw	111	;'o'
  1949  06F7  3477               	retlw	119	;'w'
  1950  06F8  340A               	retlw	10
  1951  06F9  3400               	retlw	0
  1952  06FA                     STR_10:	
  1953  06FA  345B               	retlw	91	;'['
  1954  06FB  3452               	retlw	82	;'R'
  1955  06FC  3446               	retlw	70	;'F'
  1956  06FD  345D               	retlw	93	;']'
  1957  06FE  3420               	retlw	32	;' '
  1958  06FF  3452               	retlw	82	;'R'
  1959  0700  3446               	retlw	70	;'F'
  1960  0701  3420               	retlw	32	;' '
  1961  0702  346E               	retlw	110	;'n'
  1962  0703  346F               	retlw	111	;'o'
  1963  0704  3464               	retlw	100	;'d'
  1964  0705  3465               	retlw	101	;'e'
  1965  0706  3420               	retlw	32	;' '
  1966  0707  3425               	retlw	37	;'%'
  1967  0708  3464               	retlw	100	;'d'
  1968  0709  3420               	retlw	32	;' '
  1969  070A  3469               	retlw	105	;'i'
  1970  070B  3473               	retlw	115	;'s'
  1971  070C  3420               	retlw	32	;' '
  1972  070D  3467               	retlw	103	;'g'
  1973  070E  346F               	retlw	111	;'o'
  1974  070F  3469               	retlw	105	;'i'
  1975  0710  346E               	retlw	110	;'n'
  1976  0711  3467               	retlw	103	;'g'
  1977  0712  3420               	retlw	32	;' '
  1978  0713  3464               	retlw	100	;'d'
  1979  0714  346F               	retlw	111	;'o'
  1980  0715  3477               	retlw	119	;'w'
  1981  0716  346E               	retlw	110	;'n'
  1982  0717  340A               	retlw	10
  1983  0718  3400               	retlw	0
  1984  0719                     STR_11:	
  1985  0719  345B               	retlw	91	;'['
  1986  071A  3452               	retlw	82	;'R'
  1987  071B  3446               	retlw	70	;'F'
  1988  071C  345D               	retlw	93	;']'
  1989  071D  3420               	retlw	32	;' '
  1990  071E  3447               	retlw	71	;'G'
  1991  071F  346F               	retlw	111	;'o'
  1992  0720  3474               	retlw	116	;'t'
  1993  0721  3420               	retlw	32	;' '
  1994  0722  3441               	retlw	65	;'A'
  1995  0723  3443               	retlw	67	;'C'
  1996  0724  344B               	retlw	75	;'K'
  1997  0725  3420               	retlw	32	;' '
  1998  0726  3466               	retlw	102	;'f'
  1999  0727  3472               	retlw	114	;'r'
  2000  0728  346F               	retlw	111	;'o'
  2001  0729  346D               	retlw	109	;'m'
  2002  072A  3420               	retlw	32	;' '
  2003  072B  346E               	retlw	110	;'n'
  2004  072C  346F               	retlw	111	;'o'
  2005  072D  3464               	retlw	100	;'d'
  2006  072E  3465               	retlw	101	;'e'
  2007  072F  3420               	retlw	32	;' '
  2008  0730  3425               	retlw	37	;'%'
  2009  0731  3464               	retlw	100	;'d'
  2010  0732  340A               	retlw	10
  2011  0733  3400               	retlw	0
  2012  0734                     STR_12:	
  2013  0734  345B               	retlw	91	;'['
  2014  0735  3443               	retlw	67	;'C'
  2015  0736  3443               	retlw	67	;'C'
  2016  0737  3442               	retlw	66	;'B'
  2017  0738  3475               	retlw	117	;'u'
  2018  0739  3466               	retlw	102	;'f'
  2019  073A  345D               	retlw	93	;']'
  2020  073B  3420               	retlw	32	;' '
  2021  073C  3452               	retlw	82	;'R'
  2022  073D  3465               	retlw	101	;'e'
  2023  073E  3461               	retlw	97	;'a'
  2024  073F  3464               	retlw	100	;'d'
  2025  0740  3420               	retlw	32	;' '
  2026  0741  3465               	retlw	101	;'e'
  2027  0742  3472               	retlw	114	;'r'
  2028  0743  3472               	retlw	114	;'r'
  2029  0744  346F               	retlw	111	;'o'
  2030  0745  3472               	retlw	114	;'r'
  2031  0746  340D               	retlw	13
  2032  0747  340A               	retlw	10
  2033  0748  3400               	retlw	0
  2034  0749                     STR_15:	
  2035  0749  3430               	retlw	48	;'0'
  2036  074A  3431               	retlw	49	;'1'
  2037  074B  3432               	retlw	50	;'2'
  2038  074C  3433               	retlw	51	;'3'
  2039  074D  3434               	retlw	52	;'4'
  2040  074E  3435               	retlw	53	;'5'
  2041  074F  3436               	retlw	54	;'6'
  2042  0750  3437               	retlw	55	;'7'
  2043  0751  3438               	retlw	56	;'8'
  2044  0752  3439               	retlw	57	;'9'
  2045  0753  3441               	retlw	65	;'A'
  2046  0754  3442               	retlw	66	;'B'
  2047  0755  3443               	retlw	67	;'C'
  2048  0756  3444               	retlw	68	;'D'
  2049  0757  3445               	retlw	69	;'E'
  2050  0758  3446               	retlw	70	;'F'
  2051  0759  3400               	retlw	0
  2052  075A                     STR_3:	
  2053  075A  3425               	retlw	37	;'%'
  2054  075B  3430               	retlw	48	;'0'
  2055  075C  3432               	retlw	50	;'2'
  2056  075D  3458               	retlw	88	;'X'
  2057  075E  3420               	retlw	32	;' '
  2058  075F  3400               	retlw	0
  2059  0760                     __end_of__stringdata:	
  2060                           
  2061                           	psect	cinit
  2062  0008                     start_initialization:	
  2063                           ; #config settings
  2064                           
  2065  0008                     __initialization:	
  2066                           
  2067                           ; Clear objects allocated to BANK0
  2068  0008  3020               	movlw	low __pbssBANK0
  2069  0009  0084               	movwf	4
  2070  000A  3000               	movlw	high __pbssBANK0
  2071  000B  0085               	movwf	5
  2072  000C  3031               	movlw	49
  2073  000D  3187  2760  3180   	fcall	clear_ram0
  2074                           
  2075                           ; Clear objects allocated to BANK1
  2076  0010  30A0               	movlw	low __pbssBANK1
  2077  0011  0084               	movwf	4
  2078  0012  3000               	movlw	high __pbssBANK1
  2079  0013  0085               	movwf	5
  2080  0014  3038               	movlw	56
  2081  0015  3187  2760  3180   	fcall	clear_ram0
  2082                           
  2083                           ; Clear objects allocated to BANK2
  2084  0018  3020               	movlw	low __pbssBANK2
  2085  0019  0084               	movwf	4
  2086  001A  3001               	movlw	high __pbssBANK2
  2087  001B  0085               	movwf	5
  2088  001C  3040               	movlw	64
  2089  001D  3187  2760  3180   	fcall	clear_ram0
  2090  0020                     end_of_initialization:	
  2091                           ;End of C runtime variable initialization code
  2092                           
  2093  0020                     __end_of__initialization:	
  2094  0020  0020               	movlb	0
  2095  0021  2822               	ljmp	_main	;jump to C main() function
  2096  0022                     __pmaintext:	
  2097 ;;
  2098 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2099 ;;
  2100 ;; *************** function _main *****************
  2101 ;; Defined at:
  2102 ;;		line 18 in file "../../../src/node/main.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;		None               void
  2109 ;; Registers used:
  2110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 17F/0
  2113 ;;		On exit  : 1D/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2116 ;;      Params:         0       0       0       0
  2117 ;;      Locals:         0       0       0       0
  2118 ;;      Temps:          0       0       0       0
  2119 ;;      Totals:         0       0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels required when called:    6
  2122 ;; This function calls:
  2123 ;;		_AdcInit
  2124 ;;		_ExtIntInit
  2125 ;;		_RfHalTickRxTh
  2126 ;;		_RfHalTickTxTh
  2127 ;;		_SysInitGpio
  2128 ;; This function is called by:
  2129 ;;		Startup code after reset
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _main
  2135  0022                     _main:	
  2136                           
  2137                           ;main.c: 21: OSCCON = 0b01111000;
  2138                           
  2139                           ;incstack = 0
  2140                           ; Regs used in _main: [allreg]
  2141  0022  3078               	movlw	120
  2142  0023  0021               	movlb	1	; select bank1
  2143  0024  0099               	movwf	25	;volatile
  2144                           
  2145                           ;main.c: 22: AdcInit();
  2146  0025  2035  3180         	fcall	_AdcInit
  2147                           
  2148                           ;main.c: 25: SysInitGpio();
  2149  0027  237A  3180         	fcall	_SysInitGpio
  2150                           
  2151                           ;main.c: 27: LATCbits.LATC1 = 0;
  2152  0029  0022               	movlb	2	; select bank2
  2153  002A  108E               	bcf	14,1	;volatile
  2154                           
  2155                           ;main.c: 28: LATCbits.LATC2 = 0;
  2156  002B  110E               	bcf	14,2	;volatile
  2157                           
  2158                           ;main.c: 30: ExtIntInit();
  2159  002C  2044  3180         	fcall	_ExtIntInit
  2160  002E                     l2731:	
  2161                           
  2162                           ;main.c: 34: {
  2163                           ;main.c: 35: RfHalTickRxTh(&halRxBfTh);
  2164  002E  304D               	movlw	_halRxBfTh& (0+255)
  2165  002F  2045  3180         	fcall	_RfHalTickRxTh
  2166                           
  2167                           ;main.c: 36: RfHalTickTxTh(&halTxBfTh);
  2168  0031  304F               	movlw	_halTxBfTh& (0+255)
  2169  0032  22B3  3180         	fcall	_RfHalTickTxTh
  2170  0034  282E               	goto	l2731
  2171  0035                     __end_of_main:	
  2172  0035                     __ptext28:	
  2173 ;; *************** function _AdcInit *****************
  2174 ;; Defined at:
  2175 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;		None               void
  2182 ;; Registers used:
  2183 ;;		wreg, status,2
  2184 ;; Tracked objects:
  2185 ;;		On entry : 17F/1
  2186 ;;		On exit  : 17F/1
  2187 ;;		Unchanged: 160/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2189 ;;      Params:         0       0       0       0
  2190 ;;      Locals:         0       0       0       0
  2191 ;;      Temps:          0       0       0       0
  2192 ;;      Totals:         0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_main
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           
  2204                           ;psect for function _AdcInit
  2205  0035                     _AdcInit:	
  2206                           
  2207                           ;adc16.c: 6: ANSELA = 0;
  2208                           
  2209                           ;incstack = 0
  2210                           ; Regs used in _AdcInit: [wreg+status,2]
  2211  0035  0023               	movlb	3	; select bank3
  2212  0036  018C               	clrf	12	;volatile
  2213                           
  2214                           ;adc16.c: 7: ANSELB = 0;
  2215  0037  018D               	clrf	13	;volatile
  2216                           
  2217                           ;adc16.c: 8: ANSELC = 0;
  2218  0038  018E               	clrf	14	;volatile
  2219                           
  2220                           ;adc16.c: 10: FVRCON = 0b11100001;
  2221  0039  30E1               	movlw	225
  2222  003A  0022               	movlb	2	; select bank2
  2223  003B  0097               	movwf	23	;volatile
  2224                           
  2225                           ;adc16.c: 12: ADCON2 = 0b00000000;
  2226  003C  0021               	movlb	1	; select bank1
  2227  003D  019F               	clrf	31	;volatile
  2228                           
  2229                           ;adc16.c: 13: ADCON1 = 0b11110000;
  2230  003E  30F0               	movlw	240
  2231  003F  009E               	movwf	30	;volatile
  2232                           
  2233                           ;adc16.c: 14: ADCON0 = 0b00000000;
  2234  0040  019D               	clrf	29	;volatile
  2235                           
  2236                           ;adc16.c: 16: ADCON0 = 0b00010011;
  2237  0041  3013               	movlw	19
  2238  0042  009D               	movwf	29	;volatile
  2239  0043  0008               	return
  2240  0044                     __end_of_AdcInit:	
  2241  0044                     __ptext27:	
  2242 ;; *************** function _ExtIntInit *****************
  2243 ;; Defined at:
  2244 ;;		line 6 in file "../../../src/bsp/pic16/interrupt.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;		None               void
  2251 ;; Registers used:
  2252 ;;		None
  2253 ;; Tracked objects:
  2254 ;;		On entry : 17F/2
  2255 ;;		On exit  : 17F/2
  2256 ;;		Unchanged: 17F/0
  2257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2258 ;;      Params:         0       0       0       0
  2259 ;;      Locals:         0       0       0       0
  2260 ;;      Temps:          0       0       0       0
  2261 ;;      Totals:         0       0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    1
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           
  2273                           ;psect for function _ExtIntInit
  2274  0044                     _ExtIntInit:	
  2275                           
  2276                           ;incstack = 0
  2277                           ; Regs used in _ExtIntInit: []
  2278  0044  0008               	return
  2279  0045                     __end_of_ExtIntInit:	
  2280  0045                     __ptext11:	
  2281 ;; *************** function _RfHalTickRxTh *****************
  2282 ;; Defined at:
  2283 ;;		line 112 in file "../../../src/rfstack/hal.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  pt              1    wreg     PTR struct pt
  2286 ;;		 -> halRxBfTh(2), 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  pt              1   27[BANK0 ] PTR struct pt
  2289 ;;		 -> halRxBfTh(2), 
  2290 ;;  b               1   24[BANK0 ] unsigned char 
  2291 ;;  PT_YIELD_FLA    1    0        unsigned char 
  2292 ;;  pktLength       2   25[BANK0 ] unsigned int 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      unsigned char 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 1D/2
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2302 ;;      Params:         0       0       0       0
  2303 ;;      Locals:         0       4       0       0
  2304 ;;      Temps:          0       2       0       0
  2305 ;;      Totals:         0       6       0       0
  2306 ;;Total ram usage:        6 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    4
  2309 ;; This function calls:
  2310 ;;		_CCBufCanRd
  2311 ;;		_CCBufPeekByte
  2312 ;;		_CCBufRdByte
  2313 ;;		_CCBufRdReverse
  2314 ;;		_RfHalRxPut
  2315 ;;		_RfTrcvCrcTick
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _RfHalTickRxTh
  2323  0045                     _RfHalTickRxTh:	
  2324                           
  2325                           ;incstack = 0
  2326                           ; Regs used in _RfHalTickRxTh: [allreg]
  2327                           ;RfHalTickRxTh@pt stored from wreg
  2328  0045  0020               	movlb	0	; select bank0
  2329  0046  00EC               	movwf	RfHalTickRxTh@pt
  2330                           
  2331                           ;hal.c: 121: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  2332  0047  0AA6               	incf	RfHalTickRxTh@rxByteTimeout,f
  2333  0048  28F3               	goto	l2613
  2334  0049                     l2527:	
  2335  0049  0020               	movlb	0	; select bank0
  2336  004A  086C               	movf	RfHalTickRxTh@pt,w
  2337  004B  0086               	movwf	6
  2338  004C  307F               	movlw	127
  2339  004D  23A4  3180         	fcall	PL22	;call to abstracted procedure
  2340  004F                     l2529:	
  2341  004F  3044               	movlw	_rfRxCC& (0+255)
  2342  0050  2112  3180         	fcall	_CCBufCanRd
  2343  0052  3800               	iorlw	0
  2344  0053  1903               	btfsc	3,2
  2345  0054  0008               	return
  2346                           
  2347                           ;hal.c: 129: UI08_t b = CCBufRdByte(&rfRxCC);
  2348  0055  3044               	movlw	_rfRxCC& (0+255)
  2349  0056  214B  3180         	fcall	_CCBufRdByte
  2350  0058  0860               	movf	?_CCBufRdByte,w
  2351  0059  00E9               	movwf	RfHalTickRxTh@b
  2352                           
  2353                           ;hal.c: 132: if (b == 0x6B)
  2354  005A  3A6B               	xorlw	107
  2355  005B  1D03               	skipz
  2356  005C  2849               	goto	l2527
  2357                           
  2358                           ;hal.c: 133: {
  2359                           ;hal.c: 134: rxByteTimeout = 0;
  2360  005D  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2361  005E  086C               	movf	RfHalTickRxTh@pt,w
  2362  005F  0086               	movwf	6
  2363  0060  3087               	movlw	135
  2364  0061  23A4  3180         	fcall	PL22	;call to abstracted procedure
  2365  0063                     l2541:	
  2366  0063  3044               	movlw	_rfRxCC& (0+255)
  2367  0064  2112  3180         	fcall	_CCBufCanRd
  2368  0066  3800               	iorlw	0
  2369  0067  3006               	movlw	6
  2370  0068  1D03               	skipz
  2371  0069  286E               	goto	L1
  2372  006A  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2373  006B  1C03               	btfss	3,0
  2374  006C  0008               	return
  2375                           
  2376                           ;hal.c: 136: if (rxByteTimeout > 5)
  2377  006D  3006               	movlw	6
  2378  006E                     L1:	
  2379  006E  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2380  006F  1C03               	skipc
  2381  0070  2873               	goto	l2553
  2382  0071                     l2549:	
  2383  0071  086C               	movf	RfHalTickRxTh@pt,w
  2384  0072  2BAF               	ljmp	PL26	;call to abstracted procedure
  2385  0073                     l2553:	
  2386                           
  2387                           ;hal.c: 140: }
  2388                           ;hal.c: 142: pktLength = CCBufPeekByte(&rfRxCC);
  2389  0073  3044               	movlw	_rfRxCC& (0+255)
  2390  0074  2201  3180         	fcall	_CCBufPeekByte
  2391  0076  0861               	movf	?_CCBufPeekByte+1,w
  2392  0077  01EB               	clrf	RfHalTickRxTh@pktLength+1
  2393  0078  07EB               	addwf	RfHalTickRxTh@pktLength+1,f
  2394  0079  0860               	movf	?_CCBufPeekByte,w
  2395  007A  01EA               	clrf	RfHalTickRxTh@pktLength
  2396  007B  07EA               	addwf	RfHalTickRxTh@pktLength,f
  2397                           
  2398                           ;hal.c: 144: if(pktLength > 0 && pktLength <= 20 + 1)
  2399  007C  086B               	movf	RfHalTickRxTh@pktLength+1,w
  2400  007D  046A               	iorwf	RfHalTickRxTh@pktLength,w
  2401  007E  1903               	skipnz
  2402  007F  2849               	goto	l2527
  2403  0080  3000               	movlw	0
  2404  0081  026B               	subwf	RfHalTickRxTh@pktLength+1,w
  2405  0082  3016               	movlw	22
  2406  0083  1903               	skipnz
  2407  0084  026A               	subwf	RfHalTickRxTh@pktLength,w
  2408  0085  1803               	skipnc
  2409  0086  2849               	goto	l2527
  2410                           
  2411                           ;hal.c: 145: {
  2412                           ;hal.c: 147: rxPacket.size = CCBufRdByte(&rfRxCC) - 1;
  2413  0087  3044               	movlw	_rfRxCC& (0+255)
  2414  0088  214B  3180         	fcall	_CCBufRdByte
  2415  008A  0860               	movf	?_CCBufRdByte,w
  2416  008B  3EFF               	addlw	255
  2417  008C  00C2               	movwf	RfHalTickRxTh@rxPacket+26
  2418                           
  2419                           ;hal.c: 148: rxPacket.crcTx = 0;
  2420  008D  01C0               	clrf	RfHalTickRxTh@rxPacket+24
  2421                           
  2422                           ;hal.c: 150: rxByteTimeout = 0;
  2423  008E  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2424                           
  2425                           ;hal.c: 153: for (pktRxByteIndex = 0; pktRxByteIndex < rxPacket.size; pktRxByteIndex++)
  2426  008F  01A5               	clrf	RfHalTickRxTh@pktRxByteIndex
  2427  0090                     l2587:	
  2428  0090  0842               	movf	RfHalTickRxTh@rxPacket+26,w
  2429  0091  0225               	subwf	RfHalTickRxTh@pktRxByteIndex,w
  2430  0092  086C               	movf	RfHalTickRxTh@pt,w
  2431  0093  0086               	movwf	6
  2432  0094  1803               	btfsc	3,0
  2433  0095  28C1               	goto	L2
  2434  0096  309B               	movlw	155
  2435  0097  23A4  3180         	fcall	PL22	;call to abstracted procedure
  2436  0099                     l2569:	
  2437  0099  3044               	movlw	_rfRxCC& (0+255)
  2438  009A  2112  3180         	fcall	_CCBufCanRd
  2439  009C  3800               	iorlw	0
  2440  009D  301A               	movlw	26
  2441  009E  1D03               	skipz
  2442  009F  28A4               	goto	L3
  2443  00A0  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2444  00A1  1C03               	btfss	3,0
  2445  00A2  0008               	return
  2446                           
  2447                           ;hal.c: 156: if(rxByteTimeout > 25) break;
  2448  00A3  301A               	movlw	26
  2449  00A4                     L3:	
  2450  00A4  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2451  00A5  1803               	btfsc	3,0
  2452  00A6  28BF               	goto	l2589
  2453  00A7  3044               	movlw	_rfRxCC& (0+255)
  2454                           
  2455                           ;hal.c: 157: rxByteTimeout = 0;
  2456  00A8  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2457                           
  2458                           ;hal.c: 158: rxPacket.data[pktRxByteIndex] = CCBufRdByte(&rfRxCC);
  2459  00A9  214B  3180         	fcall	_CCBufRdByte
  2460  00AB  0860               	movf	?_CCBufRdByte,w
  2461  00AC  00E7               	movwf	??_RfHalTickRxTh
  2462  00AD  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2463  00AE  3E28               	addlw	RfHalTickRxTh@rxPacket& (0+255)
  2464  00AF  0086               	movwf	6
  2465  00B0  0187               	clrf	7
  2466  00B1  0867               	movf	??_RfHalTickRxTh,w
  2467  00B2  0081               	movwf	1
  2468                           
  2469                           ;hal.c: 159: rxPacket.crcTx = RfTrcvCrcTick(rxPacket.crcTx, rxPacket.data[pktRxByteIndex
      +                          ]);
  2470  00B3  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2471  00B4  3E28               	addlw	RfHalTickRxTh@rxPacket& (0+255)
  2472  00B5  0086               	movwf	6
  2473  00B6  0801               	movf	1,w
  2474  00B7  00F0               	movwf	RfTrcvCrcTick@data
  2475  00B8  0840               	movf	RfHalTickRxTh@rxPacket+24,w
  2476  00B9                     i1L__ptext12:	
  2477                           
  2478                           ;psect for function _RfTrcvCrcTick
  2479  00B9                     i1L_RfTrcvCrcTick:	
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  2483                           ;RfTrcvCrcTick@initial stored from wreg
  2484  00B9  00F1               	movwf	RfTrcvCrcTick@initial
  2485  00BA                     i1Ll2277:	
  2486                           
  2487                           ;mrf49xa.c: 52: return (initial ^ data);
  2488  00BA  0871               	movf	RfTrcvCrcTick@initial,w
  2489  00BB  0670               	xorwf	RfTrcvCrcTick@data,w
  2490  00BC                     i1Ll155:	
  2491  00BC  00C0               	movwf	RfHalTickRxTh@rxPacket+24
  2492  00BD  0AA5               	incf	RfHalTickRxTh@pktRxByteIndex,f
  2493  00BE  2890               	goto	l2587
  2494  00BF                     l2589:	
  2495  00BF  086C               	movf	RfHalTickRxTh@pt,w
  2496  00C0  0086               	movwf	6
  2497  00C1                     L2:	
  2498  00C1  30A3               	movlw	163
  2499  00C2  23A4  3180         	fcall	PL22	;call to abstracted procedure
  2500  00C4                     l2591:	
  2501  00C4  3044               	movlw	_rfRxCC& (0+255)
  2502  00C5  2112  3180         	fcall	_CCBufCanRd
  2503  00C7  3800               	iorlw	0
  2504  00C8  1D03               	skipz
  2505  00C9  28CE               	goto	l2597
  2506  00CA  301A               	movlw	26
  2507  00CB  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2508  00CC  1C03               	btfss	3,0
  2509  00CD  0008               	return
  2510  00CE                     l2597:	
  2511                           
  2512                           ;hal.c: 164: rxPacket.crcRx = CCBufRdByte(&rfRxCC);
  2513  00CE  3044               	movlw	_rfRxCC& (0+255)
  2514  00CF  214B  3180         	fcall	_CCBufRdByte
  2515  00D1  0860               	movf	?_CCBufRdByte,w
  2516  00D2  00C1               	movwf	RfHalTickRxTh@rxPacket+25
  2517                           
  2518                           ;hal.c: 167: if(rxByteTimeout > 5)
  2519  00D3  3006               	movlw	6
  2520  00D4  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2521  00D5  1C03               	skipc
  2522  00D6  28DD               	goto	l2603
  2523                           
  2524                           ;hal.c: 168: {
  2525                           ;hal.c: 172: CCBufRdReverse(&rfRxCC, pktRxByteIndex+1);
  2526  00D7  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2527  00D8  23A9  3180         	fcall	PL24	;call to abstracted procedure
  2528  00DA  217A  3180         	fcall	_CCBufRdReverse
  2529                           
  2530                           ;hal.c: 173: }
  2531  00DC  2849               	goto	l2527
  2532  00DD                     l2603:	
  2533                           
  2534                           ;hal.c: 174: else if (rxPacket.crcRx != rxPacket.crcTx)
  2535  00DD  0841               	movf	RfHalTickRxTh@rxPacket+25,w
  2536  00DE  0640               	xorwf	RfHalTickRxTh@rxPacket+24,w
  2537  00DF  1903               	skipnz
  2538  00E0  28E7               	goto	l2607
  2539                           
  2540                           ;hal.c: 175: {
  2541                           ;hal.c: 177: CCBufRdReverse(&rfRxCC, pktRxByteIndex+1);
  2542  00E1  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2543  00E2  23A9  3180         	fcall	PL24	;call to abstracted procedure
  2544  00E4  217A  3180         	fcall	_CCBufRdReverse
  2545                           
  2546                           ;hal.c: 178: }
  2547  00E6  2849               	goto	l2527
  2548  00E7                     l2607:	
  2549  00E7  086C               	movf	RfHalTickRxTh@pt,w
  2550  00E8  0086               	movwf	6
  2551  00E9  30BB               	movlw	187
  2552  00EA  23A4  3180         	fcall	PL22	;call to abstracted procedure
  2553  00EC                     l2609:	
  2554  00EC  3028               	movlw	RfHalTickRxTh@rxPacket& (0+255)
  2555  00ED  2259  3180         	fcall	_RfHalRxPut
  2556  00EF  3800               	iorlw	0
  2557  00F0  1903               	btfsc	3,2
  2558  00F1  0008               	return
  2559  00F2  2849               	goto	l2527
  2560  00F3                     l2613:	
  2561  00F3  086C               	movf	RfHalTickRxTh@pt,w
  2562  00F4  0086               	movwf	6
  2563  00F5  0187               	clrf	7
  2564  00F6  3F40               	moviw [0]fsr1
  2565  00F7  00E7               	movwf	??_RfHalTickRxTh
  2566  00F8  3F41               	moviw [1]fsr1
  2567  00F9  00E8               	movwf	??_RfHalTickRxTh+1
  2568                           
  2569                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2570                           ; Switch size 1, requested type "space"
  2571                           ; Number of cases is 1, Range of values is 0 to 0
  2572                           ; switch strategies available:
  2573                           ; Name         Instructions Cycles
  2574                           ; simple_byte            4     3 (average)
  2575                           ; direct_byte            8     6 (fixed)
  2576                           ; jumptable            260     6 (fixed)
  2577                           ;	Chosen strategy is simple_byte
  2578  00FA  1903               	skipnz
  2579  00FB  28FD               	goto	l2913
  2580  00FC  2871               	goto	l2549
  2581  00FD                     l2913:	
  2582                           
  2583                           ; Switch size 1, requested type "space"
  2584                           ; Number of cases is 6, Range of values is 0 to 187
  2585                           ; switch strategies available:
  2586                           ; Name         Instructions Cycles
  2587                           ; simple_byte           19    10 (average)
  2588                           ; jumptable            260     6 (fixed)
  2589                           ;	Chosen strategy is simple_byte
  2590  00FD  0867               	movf	??_RfHalTickRxTh,w
  2591  00FE  3A00               	xorlw	0	; case 0
  2592  00FF  1903               	skipnz
  2593  0100  2849               	goto	l2527
  2594  0101  3A7F               	xorlw	127	; case 127
  2595  0102  1903               	skipnz
  2596  0103  284F               	goto	l2529
  2597  0104  3AF8               	xorlw	248	; case 135
  2598  0105  1903               	skipnz
  2599  0106  2863               	goto	l2541
  2600  0107  3A1C               	xorlw	28	; case 155
  2601  0108  1903               	skipnz
  2602  0109  2899               	goto	l2569
  2603  010A  3A38               	xorlw	56	; case 163
  2604  010B  1903               	skipnz
  2605  010C  28C4               	goto	l2591
  2606  010D  3A18               	xorlw	24	; case 187
  2607  010E  1903               	skipnz
  2608  010F  28EC               	goto	l2609
  2609  0110  2871               	goto	l2549
  2610  0111  0008               	return
  2611  0112                     __end_of_RfHalTickRxTh:	
  2612  0112                     __ptext25:	
  2613 ;; *************** function _CCBufCanRd *****************
  2614 ;; Defined at:
  2615 ;;		line 57 in file "../../../src/utilities/ccbuf.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  CCDef           1    wreg     PTR struct CircBufDef_s
  2618 ;;		 -> rfRxCC(9), 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  CCDef           1    5[BANK0 ] PTR struct CircBufDef_s
  2621 ;;		 -> rfRxCC(9), 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      unsigned char 
  2624 ;; Registers used:
  2625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 1F/0
  2628 ;;		On exit  : 1F/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0
  2632 ;;      Locals:         0       1       0       0
  2633 ;;      Temps:          4       0       0       0
  2634 ;;      Totals:         4       1       0       0
  2635 ;;Total ram usage:        5 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    2
  2638 ;; This function calls:
  2639 ;;		_CCBufCalcPt
  2640 ;; This function is called by:
  2641 ;;		_RfHalTickRxTh
  2642 ;;		_CCBufRdByte
  2643 ;;		_CCBufPeekByte
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           
  2648                           ;psect for function _CCBufCanRd
  2649  0112                     _CCBufCanRd:	
  2650                           
  2651                           ;incstack = 0
  2652                           ; Regs used in _CCBufCanRd: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2653                           ;CCBufCanRd@CCDef stored from wreg
  2654  0112  00D6               	movwf	CCBufCanRd@CCDef
  2655                           
  2656                           ;ccbuf.c: 59: if ((CCDef->faults & 0x02) != 0) return 0;
  2657  0113  3E08               	addlw	8
  2658  0114  0086               	movwf	6
  2659  0115  0187               	clrf	7
  2660  0116  1881               	btfsc	1,1
  2661  0117  3400               	retlw	0
  2662                           
  2663                           ;ccbuf.c: 60: if (CCDef->rdPt > CCDef->size)
  2664  0118  0856               	movf	CCBufCanRd@CCDef,w
  2665  0119  3E05               	addlw	5
  2666  011A  0086               	movwf	6
  2667  011B  3F40               	moviw [0]fsr1
  2668  011C  00FA               	movwf	??_CCBufCanRd
  2669  011D  3F41               	moviw [1]fsr1
  2670  011E  00FB               	movwf	??_CCBufCanRd+1
  2671  011F  0A56               	incf	CCBufCanRd@CCDef,w
  2672  0120  0086               	movwf	6
  2673  0121  3F40               	moviw [0]fsr1
  2674  0122  00FC               	movwf	??_CCBufCanRd+2
  2675  0123  3F41               	moviw [1]fsr1
  2676  0124  00FD               	movwf	??_CCBufCanRd+3
  2677  0125  087B               	movf	??_CCBufCanRd+1,w
  2678  0126  027D               	subwf	??_CCBufCanRd+3,w
  2679  0127  1D03               	skipz
  2680  0128  292B               	goto	u1465
  2681  0129  087A               	movf	??_CCBufCanRd,w
  2682  012A  027C               	subwf	??_CCBufCanRd+2,w
  2683  012B                     u1465:	
  2684                           
  2685                           ;ccbuf.c: 61: {
  2686                           ;ccbuf.c: 62: CCDef->faults |= 0x02;
  2687  012B  0856               	movf	CCBufCanRd@CCDef,w
  2688  012C  1803               	skipnc
  2689  012D  2933               	goto	L7
  2690  012E  3E08               	addlw	8
  2691  012F  0086               	movwf	6
  2692  0130  0187               	clrf	7
  2693  0131  1481               	bsf	1,1
  2694                           
  2695                           ;ccbuf.c: 63: }
  2696                           ;ccbuf.c: 67: if (CCBufCalcPt(CCDef, CCDef->rdPt, 1) == CCDef->wrPt) return 0;
  2697  0132  0856               	movf	CCBufCanRd@CCDef,w
  2698  0133                     L7:	
  2699  0133  3E03               	addlw	3
  2700  0134  0086               	movwf	6
  2701  0135  0187               	clrf	7
  2702  0136  3F40               	moviw [0]fsr1
  2703  0137  00FA               	movwf	??_CCBufCanRd
  2704  0138  3F41               	moviw [1]fsr1
  2705  0139  00FB               	movwf	??_CCBufCanRd+1
  2706  013A  0856               	movf	CCBufCanRd@CCDef,w
  2707  013B  3E05               	addlw	5
  2708  013C  0086               	movwf	6
  2709  013D  2394  3180         	fcall	PL16	;call to abstracted procedure
  2710  013F  0856               	movf	CCBufCanRd@CCDef,w
  2711  0140  218F  3180         	fcall	_CCBufCalcPt
  2712  0142  087B               	movf	??_CCBufCanRd+1,w
  2713  0143  0671               	xorwf	?_CCBufCalcPt+1,w
  2714  0144  1D03               	skipz
  2715  0145  2948               	goto	u1475
  2716  0146  087A               	movf	??_CCBufCanRd,w
  2717  0147  0670               	xorwf	?_CCBufCalcPt,w
  2718  0148                     u1475:	
  2719  0148  1D03               	skipz
  2720                           
  2721                           ;ccbuf.c: 68: else return 1;
  2722  0149  3401               	retlw	1
  2723  014A  3400               	retlw	0
  2724  014B                     __end_of_CCBufCanRd:	
  2725  014B                     __ptext17:	
  2726 ;; *************** function _CCBufRdByte *****************
  2727 ;; Defined at:
  2728 ;;		line 71 in file "../../../src/utilities/ccbuf.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  CCDef           1    wreg     PTR struct CircBufDef_s
  2731 ;;		 -> rfRxCC(9), 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  CCDef           1   19[BANK0 ] PTR struct CircBufDef_s
  2734 ;;		 -> rfRxCC(9), 
  2735 ;;  res             1   18[BANK0 ] unsigned char 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2   15[BANK0 ] unsigned int 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 1F/0
  2742 ;;		On exit  : 1F/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2745 ;;      Params:         0       2       0       0
  2746 ;;      Locals:         0       2       0       0
  2747 ;;      Temps:          0       1       0       0
  2748 ;;      Totals:         0       5       0       0
  2749 ;;Total ram usage:        5 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    3
  2752 ;; This function calls:
  2753 ;;		_CCBufCalcPt
  2754 ;;		_CCBufCanRd
  2755 ;;		_printf
  2756 ;; This function is called by:
  2757 ;;		_RfHalTickRxTh
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           
  2762                           ;psect for function _CCBufRdByte
  2763  014B                     _CCBufRdByte:	
  2764                           
  2765                           ;incstack = 0
  2766                           ; Regs used in _CCBufRdByte: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2767                           ;CCBufRdByte@CCDef stored from wreg
  2768  014B  00E4               	movwf	CCBufRdByte@CCDef
  2769                           
  2770                           ;ccbuf.c: 73: if (CCBufCanRd(CCDef))
  2771  014C  2112  3180         	fcall	_CCBufCanRd
  2772  014E  3A00               	xorlw	0
  2773  014F  1903               	skipnz
  2774  0150  2973               	goto	l2661
  2775                           
  2776                           ;ccbuf.c: 74: {
  2777                           ;ccbuf.c: 75: CCDef->rdPt = CCBufCalcPt(CCDef, CCDef->rdPt, 1);
  2778  0151  0864               	movf	CCBufRdByte@CCDef,w
  2779  0152  3E05               	addlw	5
  2780  0153  0086               	movwf	6
  2781  0154  0187               	clrf	7
  2782  0155  2394  3180         	fcall	PL16	;call to abstracted procedure
  2783  0157  0864               	movf	CCBufRdByte@CCDef,w
  2784  0158  218F  3180         	fcall	_CCBufCalcPt
  2785  015A  0864               	movf	CCBufRdByte@CCDef,w
  2786  015B  239C  3180         	fcall	PL20	;call to abstracted procedure
  2787                           
  2788                           ;ccbuf.c: 76: UI08_t res = CCDef->bf[CCDef->rdPt];
  2789  015D  0864               	movf	CCBufRdByte@CCDef,w
  2790  015E  0086               	movwf	6
  2791  015F  0864               	movf	CCBufRdByte@CCDef,w
  2792  0160  3E05               	addlw	5
  2793  0161  0084               	movwf	4
  2794  0162  0185               	clrf	5
  2795  0163  23BC  3180         	fcall	PL30	;call to abstracted procedure
  2796  0165  0801               	movf	1,w
  2797  0166  00E3               	movwf	CCBufRdByte@res
  2798                           
  2799                           ;ccbuf.c: 77: CCDef->bf[CCDef->rdPt] = 0;
  2800  0167  0864               	movf	CCBufRdByte@CCDef,w
  2801  0168  0086               	movwf	6
  2802  0169  0187               	clrf	7
  2803  016A  0864               	movf	CCBufRdByte@CCDef,w
  2804  016B  3E05               	addlw	5
  2805  016C  0084               	movwf	4
  2806  016D  23BC               	fcall	PL30	;call to abstracted procedure
  2807  016E  0181               	clrf	1
  2808                           
  2809                           ;ccbuf.c: 78: return res;
  2810  016F  0863               	movf	CCBufRdByte@res,w
  2811  0170  00E0               	movwf	?_CCBufRdByte
  2812  0171  01E1               	clrf	?_CCBufRdByte+1
  2813  0172  0008               	return
  2814  0173                     l2661:	
  2815                           
  2816                           ;ccbuf.c: 80: else
  2817                           ;ccbuf.c: 81: {
  2818                           ;ccbuf.c: 82: printf("[CCBuf] Read error\r\n");
  2819  0173  23C3               	fcall	PL38	;call to abstracted procedure
  2820  0174  3184  2403         	fcall	_printf
  2821                           
  2822                           ;ccbuf.c: 83: return 0x5A00;
  2823  0176  305A               	movlw	90
  2824  0177  01E0               	clrf	?_CCBufRdByte
  2825  0178  00E1               	movwf	?_CCBufRdByte+1
  2826  0179  0008               	return
  2827  017A                     __end_of_CCBufRdByte:	
  2828  017A                     __ptext16:	
  2829 ;; *************** function _CCBufRdReverse *****************
  2830 ;; Defined at:
  2831 ;;		line 52 in file "../../../src/utilities/ccbuf.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  CCDef           1    wreg     PTR struct CircBufDef_s
  2834 ;;		 -> rfRxCC(9), 
  2835 ;;  qty             2   10[COMMON] unsigned int 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  CCDef           1   12[COMMON] PTR struct CircBufDef_s
  2838 ;;		 -> rfRxCC(9), 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;		None               void
  2841 ;; Registers used:
  2842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2843 ;; Tracked objects:
  2844 ;;		On entry : 1F/0
  2845 ;;		On exit  : 1F/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2848 ;;      Params:         2       0       0       0
  2849 ;;      Locals:         1       0       0       0
  2850 ;;      Temps:          0       0       0       0
  2851 ;;      Totals:         3       0       0       0
  2852 ;;Total ram usage:        3 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    2
  2855 ;; This function calls:
  2856 ;;		_CCBufCalcPt
  2857 ;; This function is called by:
  2858 ;;		_RfHalTickRxTh
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _CCBufRdReverse
  2864  017A                     _CCBufRdReverse:	
  2865                           
  2866                           ;incstack = 0
  2867                           ; Regs used in _CCBufRdReverse: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  2868                           ;CCBufRdReverse@CCDef stored from wreg
  2869  017A  00FC               	movwf	CCBufRdReverse@CCDef
  2870                           
  2871                           ;ccbuf.c: 54: CCDef->rdPt = CCBufCalcPt(CCDef, CCDef->rdPt, 0-qty);
  2872  017B  01F2               	clrf	CCBufCalcPt@move
  2873  017C  01F3               	clrf	CCBufCalcPt@move+1
  2874  017D  087A               	movf	CCBufRdReverse@qty,w
  2875  017E  02F2               	subwf	CCBufCalcPt@move,f
  2876  017F  087B               	movf	CCBufRdReverse@qty+1,w
  2877  0180  3BF3               	subwfb	CCBufCalcPt@move+1,f
  2878  0181  087C               	movf	CCBufRdReverse@CCDef,w
  2879  0182  3E05               	addlw	5
  2880  0183  0086               	movwf	6
  2881  0184  0187               	clrf	7
  2882  0185  3F40               	moviw [0]fsr1
  2883  0186  00F0               	movwf	CCBufCalcPt@entry
  2884  0187  3F41               	moviw [1]fsr1
  2885  0188  00F1               	movwf	CCBufCalcPt@entry+1
  2886  0189  087C               	movf	CCBufRdReverse@CCDef,w
  2887  018A  218F  3180         	fcall	_CCBufCalcPt
  2888  018C  087C               	movf	CCBufRdReverse@CCDef,w
  2889  018D  239C               	fcall	PL20	;call to abstracted procedure
  2890  018E  0008               	return
  2891  018F                     __end_of_CCBufRdReverse:	
  2892  018F                     __ptext26:	
  2893 ;; *************** function _CCBufCalcPt *****************
  2894 ;; Defined at:
  2895 ;;		line 26 in file "../../../src/utilities/ccbuf.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  CCDef           1    wreg     PTR struct CircBufDef_s
  2898 ;;		 -> rfRxCC(9), 
  2899 ;;  entry           2    0[COMMON] unsigned int 
  2900 ;;  move            2    2[COMMON] int 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  CCDef           1    4[BANK0 ] PTR struct CircBufDef_s
  2903 ;;		 -> rfRxCC(9), 
  2904 ;;  result          4    0[BANK0 ] long 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  2    0[COMMON] unsigned int 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+1
  2909 ;; Tracked objects:
  2910 ;;		On entry : 1F/0
  2911 ;;		On exit  : 1F/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2914 ;;      Params:         4       0       0       0
  2915 ;;      Locals:         0       5       0       0
  2916 ;;      Temps:          6       0       0       0
  2917 ;;      Totals:        10       5       0       0
  2918 ;;Total ram usage:       15 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    1
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_CCBufRdReverse
  2925 ;;		_CCBufCanRd
  2926 ;;		_CCBufRdByte
  2927 ;;		_CCBufPeekByte
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           
  2932                           ;psect for function _CCBufCalcPt
  2933  018F                     _CCBufCalcPt:	
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _CCBufCalcPt: [wreg+fsr1l+fsr1h+status,2+status,0+btemp+1]
  2937                           ;CCBufCalcPt@CCDef stored from wreg
  2938  018F  00D5               	movwf	CCBufCalcPt@CCDef
  2939                           
  2940                           ;ccbuf.c: 28: I32_t result = (I32_t)entry + (I32_t)move;
  2941  0190  0870               	movf	CCBufCalcPt@entry,w
  2942  0191  00D1               	movwf	CCBufCalcPt@result
  2943  0192  0871               	movf	CCBufCalcPt@entry+1,w
  2944  0193  00D2               	movwf	CCBufCalcPt@result+1
  2945  0194  01D3               	clrf	CCBufCalcPt@result+2
  2946  0195  01D4               	clrf	CCBufCalcPt@result+3
  2947  0196  0872               	movf	CCBufCalcPt@move,w
  2948  0197  00F4               	movwf	??_CCBufCalcPt
  2949  0198  0873               	movf	CCBufCalcPt@move+1,w
  2950  0199  00F5               	movwf	??_CCBufCalcPt+1
  2951  019A  3000               	movlw	0
  2952  019B  1BF5               	btfsc	??_CCBufCalcPt+1,7
  2953  019C  30FF               	movlw	255
  2954  019D  00F6               	movwf	??_CCBufCalcPt+2
  2955  019E  00F7               	movwf	??_CCBufCalcPt+3
  2956  019F  0874               	movf	??_CCBufCalcPt,w
  2957  01A0  07D1               	addwf	CCBufCalcPt@result,f
  2958  01A1  0875               	movf	??_CCBufCalcPt+1,w
  2959  01A2  3DD2               	addwfc	CCBufCalcPt@result+1,f
  2960  01A3  0876               	movf	??_CCBufCalcPt+2,w
  2961  01A4  3DD3               	addwfc	CCBufCalcPt@result+2,f
  2962  01A5  0877               	movf	??_CCBufCalcPt+3,w
  2963  01A6  3DD4               	addwfc	CCBufCalcPt@result+3,f
  2964                           
  2965                           ;ccbuf.c: 30: if (result < 0) result += CCDef->size;
  2966  01A7  1FD4               	btfss	CCBufCalcPt@result+3,7
  2967  01A8  29B7               	goto	l2741
  2968  01A9  0A55               	incf	CCBufCalcPt@CCDef,w
  2969  01AA  0086               	movwf	6
  2970  01AB  0187               	clrf	7
  2971  01AC  3F40               	moviw [0]fsr1
  2972  01AD  00F4               	movwf	??_CCBufCalcPt
  2973  01AE  3F41               	moviw [1]fsr1
  2974  01AF  00F5               	movwf	??_CCBufCalcPt+1
  2975  01B0  0874               	movf	??_CCBufCalcPt,w
  2976  01B1  07D1               	addwf	CCBufCalcPt@result,f
  2977  01B2  0875               	movf	??_CCBufCalcPt+1,w
  2978  01B3  3DD2               	addwfc	CCBufCalcPt@result+1,f
  2979  01B4  3000               	movlw	0
  2980  01B5  3DD3               	addwfc	CCBufCalcPt@result+2,f
  2981  01B6  3DD4               	addwfc	CCBufCalcPt@result+3,f
  2982  01B7                     l2741:	
  2983                           
  2984                           ;ccbuf.c: 31: if (result < 0) return 0x5B00;
  2985  01B7  1FD4               	btfss	CCBufCalcPt@result+3,7
  2986  01B8  29BD               	goto	l2747
  2987  01B9  305B               	movlw	91
  2988  01BA  01F0               	clrf	?_CCBufCalcPt
  2989  01BB  00F1               	movwf	?_CCBufCalcPt+1
  2990  01BC  0008               	return
  2991  01BD                     l2747:	
  2992                           
  2993                           ;ccbuf.c: 33: if (result >= CCDef->size) result -= CCDef->size;
  2994  01BD  0A55               	incf	CCBufCalcPt@CCDef,w
  2995  01BE  0086               	movwf	6
  2996  01BF  0187               	clrf	7
  2997  01C0  3F40               	moviw [0]fsr1
  2998  01C1  238A  3180         	fcall	PL8	;call to abstracted procedure
  2999  01C3  23B5  3180         	fcall	PL28	;call to abstracted procedure
  3000  01C5  1D03               	skipz
  3001  01C6  29D1               	goto	u1563
  3002  01C7  0878               	movf	??_CCBufCalcPt+4,w
  3003  01C8  0253               	subwf	CCBufCalcPt@result+2,w
  3004  01C9  1D03               	skipz
  3005  01CA  29D1               	goto	u1563
  3006  01CB  0877               	movf	??_CCBufCalcPt+3,w
  3007  01CC  0252               	subwf	CCBufCalcPt@result+1,w
  3008  01CD  1D03               	skipz
  3009  01CE  29D1               	goto	u1563
  3010  01CF  0876               	movf	??_CCBufCalcPt+2,w
  3011  01D0  0251               	subwf	CCBufCalcPt@result,w
  3012  01D1                     u1563:	
  3013  01D1  0A55               	incf	CCBufCalcPt@CCDef,w
  3014  01D2  0086               	movwf	6
  3015  01D3  0187               	clrf	7
  3016  01D4  1C03               	skipc
  3017  01D5  29E3               	goto	L8
  3018  01D6  3F40               	moviw [0]fsr1
  3019  01D7  238A  3180         	fcall	PL8	;call to abstracted procedure
  3020  01D9  0876               	movf	??_CCBufCalcPt+2,w
  3021  01DA  02D1               	subwf	CCBufCalcPt@result,f
  3022  01DB  0877               	movf	??_CCBufCalcPt+3,w
  3023  01DC  3BD2               	subwfb	CCBufCalcPt@result+1,f
  3024  01DD  0878               	movf	??_CCBufCalcPt+4,w
  3025  01DE  3BD3               	subwfb	CCBufCalcPt@result+2,f
  3026  01DF  0879               	movf	??_CCBufCalcPt+5,w
  3027  01E0  3BD4               	subwfb	CCBufCalcPt@result+3,f
  3028                           
  3029                           ;ccbuf.c: 34: if (result >= CCDef->size) return 0x5C00;
  3030  01E1  0A55               	incf	CCBufCalcPt@CCDef,w
  3031  01E2  0086               	movwf	6
  3032  01E3                     L8:	
  3033  01E3  3F40               	moviw [0]fsr1
  3034  01E4  238A  3180         	fcall	PL8	;call to abstracted procedure
  3035  01E6  23B5  3180         	fcall	PL28	;call to abstracted procedure
  3036  01E8  1D03               	skipz
  3037  01E9  29F4               	goto	u1573
  3038  01EA  0878               	movf	??_CCBufCalcPt+4,w
  3039  01EB  0253               	subwf	CCBufCalcPt@result+2,w
  3040  01EC  1D03               	skipz
  3041  01ED  29F4               	goto	u1573
  3042  01EE  0877               	movf	??_CCBufCalcPt+3,w
  3043  01EF  0252               	subwf	CCBufCalcPt@result+1,w
  3044  01F0  1D03               	skipz
  3045  01F1  29F4               	goto	u1573
  3046  01F2  0876               	movf	??_CCBufCalcPt+2,w
  3047  01F3  0251               	subwf	CCBufCalcPt@result,w
  3048  01F4                     u1573:	
  3049  01F4  1C03               	skipc
  3050  01F5  29FA               	goto	l2757
  3051  01F6  305C               	movlw	92
  3052  01F7  01F0               	clrf	?_CCBufCalcPt
  3053  01F8  00F1               	movwf	?_CCBufCalcPt+1
  3054  01F9  0008               	return
  3055  01FA                     l2757:	
  3056                           
  3057                           ;ccbuf.c: 36: return (UI16_t) result;
  3058  01FA  0852               	movf	CCBufCalcPt@result+1,w
  3059  01FB  01F1               	clrf	?_CCBufCalcPt+1
  3060  01FC  07F1               	addwf	?_CCBufCalcPt+1,f
  3061  01FD  0851               	movf	CCBufCalcPt@result,w
  3062  01FE  01F0               	clrf	?_CCBufCalcPt
  3063  01FF  07F0               	addwf	?_CCBufCalcPt,f
  3064  0200  0008               	return
  3065  0201                     __end_of_CCBufCalcPt:	
  3066  0201                     __ptext18:	
  3067 ;; *************** function _CCBufPeekByte *****************
  3068 ;; Defined at:
  3069 ;;		line 87 in file "../../../src/utilities/ccbuf.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  CCDef           1    wreg     PTR struct CircBufDef_s
  3072 ;;		 -> rfRxCC(9), 
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;  CCDef           1   21[BANK0 ] PTR struct CircBufDef_s
  3075 ;;		 -> rfRxCC(9), 
  3076 ;;  res             1   20[BANK0 ] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2   15[BANK0 ] unsigned int 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 1F/0
  3083 ;;		On exit  : 1F/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3086 ;;      Params:         0       2       0       0
  3087 ;;      Locals:         0       2       0       0
  3088 ;;      Temps:          0       3       0       0
  3089 ;;      Totals:         0       7       0       0
  3090 ;;Total ram usage:        7 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    3
  3093 ;; This function calls:
  3094 ;;		_CCBufCalcPt
  3095 ;;		_CCBufCanRd
  3096 ;;		_printf
  3097 ;; This function is called by:
  3098 ;;		_RfHalTickRxTh
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           
  3103                           ;psect for function _CCBufPeekByte
  3104  0201                     _CCBufPeekByte:	
  3105                           
  3106                           ;incstack = 0
  3107                           ; Regs used in _CCBufPeekByte: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3108                           ;CCBufPeekByte@CCDef stored from wreg
  3109  0201  00E6               	movwf	CCBufPeekByte@CCDef
  3110                           
  3111                           ;ccbuf.c: 89: if (CCBufCanRd(CCDef))
  3112  0202  2112  3180         	fcall	_CCBufCanRd
  3113  0204  3A00               	xorlw	0
  3114  0205  1903               	skipnz
  3115  0206  2A21               	goto	l2677
  3116                           
  3117                           ;ccbuf.c: 90: {
  3118                           ;ccbuf.c: 91: UI08_t res = CCDef->bf[CCBufCalcPt(CCDef, CCDef->rdPt, 1)];
  3119  0207  0866               	movf	CCBufPeekByte@CCDef,w
  3120  0208  3E05               	addlw	5
  3121  0209  0086               	movwf	6
  3122  020A  0187               	clrf	7
  3123  020B  2394  3180         	fcall	PL16	;call to abstracted procedure
  3124  020D  0866               	movf	CCBufPeekByte@CCDef,w
  3125  020E  218F               	fcall	_CCBufCalcPt
  3126  020F  0870               	movf	?_CCBufCalcPt,w
  3127  0210  00E2               	movwf	??_CCBufPeekByte
  3128  0211  0871               	movf	?_CCBufCalcPt+1,w
  3129  0212  00E3               	movwf	??_CCBufPeekByte+1
  3130  0213  0866               	movf	CCBufPeekByte@CCDef,w
  3131  0214  0086               	movwf	6
  3132  0215  0187               	clrf	7
  3133  0216  0801               	movf	1,w
  3134  0217  0762               	addwf	??_CCBufPeekByte,w
  3135  0218  00E4               	movwf	??_CCBufPeekByte+2
  3136  0219  0086               	movwf	6
  3137  021A  3001               	movlw	1	; select bank2/3
  3138  021B  0087               	movwf	7
  3139  021C  0801               	movf	1,w
  3140  021D  00E5               	movwf	CCBufPeekByte@res
  3141                           
  3142                           ;ccbuf.c: 92: return res;
  3143  021E  00E0               	movwf	?_CCBufPeekByte
  3144  021F  01E1               	clrf	?_CCBufPeekByte+1
  3145  0220  0008               	return
  3146  0221                     l2677:	
  3147                           
  3148                           ;ccbuf.c: 94: else
  3149                           ;ccbuf.c: 95: {
  3150                           ;ccbuf.c: 96: printf("[CCBuf] Read error\r\n");
  3151  0221  23C3               	fcall	PL38	;call to abstracted procedure
  3152  0222  3184  2403         	fcall	_printf
  3153                           
  3154                           ;ccbuf.c: 97: return 0x5A00;
  3155  0224  305A               	movlw	90
  3156  0225  01E0               	clrf	?_CCBufPeekByte
  3157  0226  00E1               	movwf	?_CCBufPeekByte+1
  3158  0227  0008               	return
  3159  0228                     __end_of_CCBufPeekByte:	
  3160  0228                     __ptext10:	
  3161 ;; *************** function _RfHalTxGet *****************
  3162 ;; Defined at:
  3163 ;;		line 251 in file "../../../src/rfstack/hal.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;		None
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  i               1    3[COMMON] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      PTR struct RfTransceiver
  3170 ;; Registers used:
  3171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 1F/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3177 ;;      Params:         0       0       0       0
  3178 ;;      Locals:         1       0       0       0
  3179 ;;      Temps:          0       0       0       0
  3180 ;;      Totals:         1       0       0       0
  3181 ;;Total ram usage:        1 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    2
  3184 ;; This function calls:
  3185 ;;		___bmul
  3186 ;; This function is called by:
  3187 ;;		_RfHalTickTxTh
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function _RfHalTxGet
  3193  0228                     _RfHalTxGet:	
  3194                           
  3195                           ;hal.c: 254: if (rfStatus.txInQueue == 0)
  3196                           
  3197                           ;incstack = 0
  3198                           ; Regs used in _RfHalTxGet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3199  0228  08A3               	movf	_rfStatus+3,f
  3200  0229  1903               	btfsc	3,2
  3201                           
  3202                           ;hal.c: 255: return 0;
  3203  022A  3400               	retlw	0
  3204                           
  3205                           ;hal.c: 257: for (i = 0; i < 2; i++)
  3206  022B  01F3               	clrf	RfHalTxGet@i
  3207  022C                     l2375:	
  3208                           
  3209                           ;hal.c: 258: {
  3210                           ;hal.c: 259: if (rfPackets[i].proc == 1 && rfPackets[i].tx == 1)
  3211  022C  301C               	movlw	28
  3212  022D  00F0               	movwf	___bmul@multiplicand
  3213  022E  0873               	movf	RfHalTxGet@i,w
  3214  022F  228E  3180         	fcall	___bmul
  3215  0231  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3216  0232  0086               	movwf	6
  3217  0233  0187               	clrf	7
  3218  0234  1C01               	btfss	1,0
  3219  0235  2A51               	goto	l2387
  3220  0236  301C               	movlw	28
  3221  0237  00F0               	movwf	___bmul@multiplicand
  3222  0238  0873               	movf	RfHalTxGet@i,w
  3223  0239  228E  3180         	fcall	___bmul
  3224  023B  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3225  023C  0086               	movwf	6
  3226  023D  0187               	clrf	7
  3227  023E  1C81               	btfss	1,1
  3228  023F  2A51               	goto	l2387
  3229                           
  3230                           ;hal.c: 260: {
  3231                           ;hal.c: 261: rfPackets[i].proc = 0;
  3232  0240  301C               	movlw	28
  3233  0241  00F0               	movwf	___bmul@multiplicand
  3234  0242  0873               	movf	RfHalTxGet@i,w
  3235  0243  228E  3180         	fcall	___bmul
  3236  0245  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3237  0246  0086               	movwf	6
  3238  0247  0187               	clrf	7
  3239  0248  1001               	bcf	1,0
  3240                           
  3241                           ;hal.c: 262: rfStatus.txInQueue--;
  3242  0249  0020               	movlb	0	; select bank0
  3243  024A  301C               	movlw	28
  3244  024B  03A3               	decf	_rfStatus+3,f
  3245                           
  3246                           ;hal.c: 264: return &(rfPackets[i]);
  3247  024C  00F0               	movwf	___bmul@multiplicand
  3248  024D  0873               	movf	RfHalTxGet@i,w
  3249  024E  228E               	fcall	___bmul
  3250  024F  3EA0               	addlw	_rfPackets& (0+255)
  3251  0250  0008               	return
  3252  0251                     l2387:	
  3253  0251  3002               	movlw	2
  3254  0252  0AF3               	incf	RfHalTxGet@i,f
  3255  0253  0273               	subwf	RfHalTxGet@i,w
  3256  0254  1C03               	skipc
  3257  0255  2A2C               	goto	l2375
  3258                           
  3259                           ;hal.c: 265: }
  3260                           ;hal.c: 266: }
  3261                           ;hal.c: 268: rfStatus.txInQueue = 0;
  3262  0256  0020               	movlb	0	; select bank0
  3263  0257  01A3               	clrf	_rfStatus+3
  3264  0258  3400               	retlw	0
  3265  0259                     __end_of_RfHalTxGet:	
  3266  0259                     __ptext13:	
  3267 ;; *************** function _RfHalRxPut *****************
  3268 ;; Defined at:
  3269 ;;		line 211 in file "../../../src/rfstack/hal.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  rfPacket        1    wreg     PTR struct RfTransceiver
  3272 ;;		 -> RfHalTickRxTh@rxPacket(28), 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  rfPacket        1    9[COMMON] PTR struct RfTransceiver
  3275 ;;		 -> RfHalTickRxTh@rxPacket(28), 
  3276 ;;  i               1   10[COMMON] unsigned char 
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      unsigned char 
  3279 ;; Registers used:
  3280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 1F/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3286 ;;      Params:         0       0       0       0
  3287 ;;      Locals:         2       0       0       0
  3288 ;;      Temps:          0       0       0       0
  3289 ;;      Totals:         2       0       0       0
  3290 ;;Total ram usage:        2 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    2
  3293 ;; This function calls:
  3294 ;;		___bmul
  3295 ;;		_memcpy
  3296 ;; This function is called by:
  3297 ;;		_RfHalTickRxTh
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _RfHalRxPut
  3303  0259                     _RfHalRxPut:	
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in _RfHalRxPut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3307                           ;RfHalRxPut@rfPacket stored from wreg
  3308  0259  00F9               	movwf	RfHalRxPut@rfPacket
  3309                           
  3310                           ;hal.c: 213: UI08_t i = 0;
  3311  025A  01FA               	clrf	RfHalRxPut@i
  3312                           
  3313                           ;hal.c: 215: for (i = 0; i < 2; i++)
  3314  025B  01FA               	clrf	RfHalRxPut@i
  3315  025C                     l2691:	
  3316                           
  3317                           ;hal.c: 216: {
  3318                           ;hal.c: 217: if (rfPackets[i].proc == 0 && rfPackets[i].tx == 0)
  3319  025C  301C               	movlw	28
  3320  025D  00F0               	movwf	___bmul@multiplicand
  3321  025E  087A               	movf	RfHalRxPut@i,w
  3322  025F  228E  3180         	fcall	___bmul
  3323  0261  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3324  0262  0086               	movwf	6
  3325  0263  0187               	clrf	7
  3326  0264  1801               	btfsc	1,0
  3327  0265  2A88               	goto	l2705
  3328  0266  301C               	movlw	28
  3329  0267  00F0               	movwf	___bmul@multiplicand
  3330  0268  087A               	movf	RfHalRxPut@i,w
  3331  0269  228E  3180         	fcall	___bmul
  3332  026B  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3333  026C  0086               	movwf	6
  3334  026D  0187               	clrf	7
  3335  026E  1881               	btfsc	1,1
  3336  026F  2A88               	goto	l2705
  3337                           
  3338                           ;hal.c: 218: {
  3339                           ;hal.c: 219: memcpy(&(rfPackets[i]), rfPacket, sizeof(RfTransceiverPacket_t));
  3340  0270  0879               	movf	RfHalRxPut@rfPacket,w
  3341  0271  00F3               	movwf	memcpy@s1
  3342  0272  301C               	movlw	28
  3343  0273  00F4               	movwf	memcpy@n
  3344  0274  01F5               	clrf	memcpy@n+1
  3345  0275  00F0               	movwf	___bmul@multiplicand
  3346  0276  087A               	movf	RfHalRxPut@i,w
  3347  0277  228E  3180         	fcall	___bmul
  3348  0279  3EA0               	addlw	_rfPackets& (0+255)
  3349  027A  229A  3180         	fcall	_memcpy
  3350                           
  3351                           ;hal.c: 220: rfPackets[i].proc = 1;
  3352  027C  301C               	movlw	28
  3353  027D  00F0               	movwf	___bmul@multiplicand
  3354  027E  087A               	movf	RfHalRxPut@i,w
  3355  027F  228E               	fcall	___bmul
  3356  0280  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3357  0281  0086               	movwf	6
  3358  0282  0187               	clrf	7
  3359  0283  1401               	bsf	1,0
  3360                           
  3361                           ;hal.c: 221: rfStatus.rxInQueue++;
  3362  0284  0020               	movlb	0	; select bank0
  3363  0285  3001               	movlw	1
  3364  0286  0AA4               	incf	_rfStatus+4,f
  3365                           
  3366                           ;hal.c: 222: return 1;
  3367  0287  0008               	return
  3368  0288                     l2705:	
  3369  0288  3002               	movlw	2
  3370  0289  0AFA               	incf	RfHalRxPut@i,f
  3371  028A  027A               	subwf	RfHalRxPut@i,w
  3372  028B  1803               	btfsc	3,0
  3373                           
  3374                           ;hal.c: 223: }
  3375                           ;hal.c: 224: }
  3376                           ;hal.c: 226: return 0;
  3377  028C  3400               	retlw	0
  3378  028D  2A5C               	goto	l2691
  3379  028E                     __end_of_RfHalRxPut:	
  3380  028E                     __ptext15:	
  3381 ;; *************** function ___bmul *****************
  3382 ;; Defined at:
  3383 ;;		line 2 in file "/opt/microchip/xc8/v1.30/sources/common/bmul.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  multiplier      1    wreg     unsigned char 
  3386 ;;  multiplicand    1    0[COMMON] unsigned char 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  multiplier      1    2[COMMON] unsigned char 
  3389 ;;  product         1    1[COMMON] unsigned char 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      unsigned char 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3399 ;;      Params:         1       0       0       0
  3400 ;;      Locals:         2       0       0       0
  3401 ;;      Temps:          0       0       0       0
  3402 ;;      Totals:         3       0       0       0
  3403 ;;Total ram usage:        3 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    1
  3406 ;; This function calls:
  3407 ;;		Nothing
  3408 ;; This function is called by:
  3409 ;;		_RfHalRxPut
  3410 ;;		_RfHalTxGet
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function ___bmul
  3416  028E                     ___bmul:	
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3420                           ;___bmul@multiplier stored from wreg
  3421  028E  00F2               	movwf	___bmul@multiplier
  3422  028F  01F1               	clrf	___bmul@product
  3423  0290                     l2775:	
  3424  0290  0870               	movf	___bmul@multiplicand,w
  3425  0291  1872               	btfsc	___bmul@multiplier,0
  3426  0292  07F1               	addwf	___bmul@product,f
  3427  0293  35F0               	lslf	___bmul@multiplicand,f
  3428  0294  36F2               	lsrf	___bmul@multiplier,f
  3429  0295  08F2               	movf	___bmul@multiplier,f
  3430  0296  1D03               	skipz
  3431  0297  2A90               	goto	l2775
  3432  0298  0871               	movf	___bmul@product,w
  3433  0299  0008               	return
  3434  029A                     __end_of___bmul:	
  3435  029A                     __ptext14:	
  3436 ;; *************** function _memcpy *****************
  3437 ;; Defined at:
  3438 ;;		line 11 in file "/opt/microchip/xc8/v1.30/sources/common/memcpy.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  d1              1    wreg     PTR void 
  3441 ;;		 -> NULL..(24), rfPackets..(24), packet..(24), RfPacketTransmit@packet(28), 
  3442 ;;		 -> NULL(0), rfPackets(56), 
  3443 ;;  s1              1    3[COMMON] PTR const void 
  3444 ;;		 -> RfPacketsTickTh@scratchpad(32), RfPacketTransmit@packet(28), RfHalTickRxTh@rxPacket(28), NULL(0), 
  3445 ;;		 -> rfPackets(56), 
  3446 ;;  n               2    4[COMMON] unsigned int 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  d1              1    8[COMMON] PTR void 
  3449 ;;		 -> NULL..(24), rfPackets..(24), packet..(24), RfPacketTransmit@packet(28), 
  3450 ;;		 -> NULL(0), rfPackets(56), 
  3451 ;;  s               1    7[COMMON] PTR const unsigned char 
  3452 ;;		 -> RfPacketsTickTh@scratchpad(32), RfPacketTransmit@packet(28), RfHalTickRxTh@rxPacket(28), NULL(0), 
  3453 ;;		 -> rfPackets(56), 
  3454 ;;  d               1    6[COMMON] PTR unsigned char 
  3455 ;;		 -> NULL..(24), rfPackets..(24), packet..(24), RfPacketTransmit@packet(28), 
  3456 ;;		 -> NULL(0), rfPackets(56), 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      PTR void 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3466 ;;      Params:         3       0       0       0
  3467 ;;      Locals:         3       0       0       0
  3468 ;;      Temps:          0       0       0       0
  3469 ;;      Totals:         6       0       0       0
  3470 ;;Total ram usage:        6 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    1
  3473 ;; This function calls:
  3474 ;;		Nothing
  3475 ;; This function is called by:
  3476 ;;		_RfHalRxPut
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _memcpy
  3482  029A                     _memcpy:	
  3483                           
  3484                           ;incstack = 0
  3485                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  3486                           ;memcpy@d1 stored from wreg
  3487  029A  00F8               	movwf	memcpy@d1
  3488  029B  0873               	movf	memcpy@s1,w
  3489  029C  00F7               	movwf	memcpy@s
  3490  029D  0878               	movf	memcpy@d1,w
  3491  029E  00F6               	movwf	memcpy@d
  3492  029F                     l2721:	
  3493  029F  3001               	movlw	1
  3494  02A0  02F4               	subwf	memcpy@n,f
  3495  02A1  3000               	movlw	0
  3496  02A2  3BF5               	subwfb	memcpy@n+1,f
  3497  02A3  0A74               	incf	memcpy@n,w
  3498  02A4  1903               	skipnz
  3499  02A5  0A75               	incf	memcpy@n+1,w
  3500  02A6  1903               	btfsc	3,2
  3501  02A7  0008               	return
  3502  02A8  0876               	movf	memcpy@d,w
  3503  02A9  0086               	movwf	6
  3504  02AA  0187               	clrf	7
  3505  02AB  0877               	movf	memcpy@s,w
  3506  02AC  0084               	movwf	4
  3507  02AD  0185               	clrf	5
  3508  02AE  0800               	movf	0,w
  3509  02AF  0081               	movwf	1
  3510  02B0  0AF7               	incf	memcpy@s,f
  3511  02B1  0AF6               	incf	memcpy@d,f
  3512  02B2  2A9F               	goto	l2721
  3513  02B3                     __end_of_memcpy:	
  3514  02B3                     __ptext2:	
  3515 ;; *************** function _RfHalTickTxTh *****************
  3516 ;; Defined at:
  3517 ;;		line 74 in file "../../../src/rfstack/hal.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  pt              1    wreg     PTR struct pt
  3520 ;;		 -> halTxBfTh(2), 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  pt              1   17[BANK0 ] PTR struct pt
  3523 ;;		 -> halTxBfTh(2), 
  3524 ;;  PT_YIELD_FLA    1    0        unsigned char 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      unsigned char 
  3527 ;; Registers used:
  3528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/2
  3531 ;;		On exit  : 1D/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3534 ;;      Params:         0       0       0       0
  3535 ;;      Locals:         0       1       0       0
  3536 ;;      Temps:          0       2       0       0
  3537 ;;      Totals:         0       3       0       0
  3538 ;;Total ram usage:        3 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    5
  3541 ;; This function calls:
  3542 ;;		_RfHalTxGet
  3543 ;;		_RfTrcvCarrierPresent
  3544 ;;		_RfTrcvMode
  3545 ;;		_printf
  3546 ;; This function is called by:
  3547 ;;		_main
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _RfHalTickTxTh
  3553  02B3                     _RfHalTickTxTh:	
  3554                           
  3555                           ;incstack = 0
  3556                           ; Regs used in _RfHalTickTxTh: [allreg]
  3557                           ;RfHalTickTxTh@pt stored from wreg
  3558  02B3  0020               	movlb	0	; select bank0
  3559  02B4  00E2               	movwf	RfHalTickTxTh@pt
  3560  02B5  2AE9               	goto	l2349
  3561  02B6                     l2317:	
  3562  02B6  0862               	movf	RfHalTickTxTh@pt,w
  3563  02B7  0086               	movwf	6
  3564  02B8  3054               	movlw	84
  3565  02B9  23A4  3180         	fcall	PL22	;call to abstracted procedure
  3566  02BB                     l2319:	
  3567  02BB  08A3               	movf	_rfStatus+3,f
  3568  02BC  1903               	btfsc	3,2
  3569  02BD  0008               	return
  3570                           
  3571                           ;hal.c: 87: txPacket = RfHalTxGet();
  3572  02BE  2228  3180         	fcall	_RfHalTxGet
  3573  02C0  0020               	movlb	0	; select bank0
  3574  02C1  00A7               	movwf	RfHalTickTxTh@txPacket
  3575                           
  3576                           ;hal.c: 89: if (txPacket == (0))
  3577  02C2  08A7               	movf	RfHalTickTxTh@txPacket,f
  3578  02C3  1D03               	skipz
  3579  02C4  2ACE               	goto	l2333
  3580                           
  3581                           ;hal.c: 90: {
  3582                           ;hal.c: 91: printf("[RF] Dropping TX packet - returned NULL\n");
  3583  02C5  308B               	movlw	low (STR_1| (0+32768))
  3584  02C6  00FC               	movwf	printf@f
  3585  02C7  3086               	movlw	high (STR_1| (0+32768))
  3586  02C8  00FD               	movwf	printf@f+1
  3587  02C9  3184  2403  3180   	fcall	_printf
  3588  02CC                     l2329:	
  3589  02CC  0862               	movf	RfHalTickTxTh@pt,w
  3590  02CD  2BAF               	ljmp	PL26	;call to abstracted procedure
  3591  02CE                     l2333:	
  3592  02CE  0862               	movf	RfHalTickTxTh@pt,w
  3593  02CF  0086               	movwf	6
  3594  02D0  3061               	movlw	97
  3595  02D1  23A4  3180         	fcall	PL22	;call to abstracted procedure
  3596  02D3                     l2335:	
  3597  02D3  2302  3180         	fcall	_RfTrcvCarrierPresent
  3598  02D5  3A00               	xorlw	0
  3599  02D6  1D03               	btfss	3,2
  3600  02D7  0008               	return
  3601                           
  3602                           ;hal.c: 98: } while (rfStatus.isr.state != RX_RECV);
  3603  02D8  0020               	movlb	0	; select bank0
  3604  02D9  08A2               	movf	_rfStatus+2,f
  3605  02DA  1D03               	skipz
  3606  02DB  2ACE               	goto	l2333
  3607                           
  3608                           ;hal.c: 101: RfTrcvMode(1);
  3609  02DC  3001               	movlw	1
  3610  02DD  2334  3180         	fcall	_RfTrcvMode
  3611  02DF  0020               	movlb	0	; select bank0
  3612  02E0  0862               	movf	RfHalTickTxTh@pt,w
  3613  02E1  0086               	movwf	6
  3614  02E2  3068               	movlw	104
  3615  02E3  23A4  3180         	fcall	PL22	;call to abstracted procedure
  3616  02E5                     l2345:	
  3617  02E5  0822               	movf	_rfStatus+2,w
  3618  02E6  1D03               	skipz
  3619  02E7  0008               	return
  3620  02E8  2AB6               	goto	l2317
  3621  02E9                     l2349:	
  3622  02E9  0862               	movf	RfHalTickTxTh@pt,w
  3623  02EA  0086               	movwf	6
  3624  02EB  0187               	clrf	7
  3625  02EC  3F40               	moviw [0]fsr1
  3626  02ED  00E0               	movwf	??_RfHalTickTxTh
  3627  02EE  3F41               	moviw [1]fsr1
  3628  02EF  00E1               	movwf	??_RfHalTickTxTh+1
  3629                           
  3630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3631                           ; Switch size 1, requested type "space"
  3632                           ; Number of cases is 1, Range of values is 0 to 0
  3633                           ; switch strategies available:
  3634                           ; Name         Instructions Cycles
  3635                           ; simple_byte            4     3 (average)
  3636                           ; direct_byte            8     6 (fixed)
  3637                           ; jumptable            260     6 (fixed)
  3638                           ;	Chosen strategy is simple_byte
  3639  02F0  1903               	skipnz
  3640  02F1  2AF3               	goto	l2911
  3641  02F2  2ACC               	goto	l2329
  3642  02F3                     l2911:	
  3643                           
  3644                           ; Switch size 1, requested type "space"
  3645                           ; Number of cases is 4, Range of values is 0 to 104
  3646                           ; switch strategies available:
  3647                           ; Name         Instructions Cycles
  3648                           ; simple_byte           13     7 (average)
  3649                           ; direct_byte          216     6 (fixed)
  3650                           ; jumptable            260     6 (fixed)
  3651                           ;	Chosen strategy is simple_byte
  3652  02F3  0860               	movf	??_RfHalTickTxTh,w
  3653  02F4  3A00               	xorlw	0	; case 0
  3654  02F5  1903               	skipnz
  3655  02F6  2AB6               	goto	l2317
  3656  02F7  3A54               	xorlw	84	; case 84
  3657  02F8  1903               	skipnz
  3658  02F9  2ABB               	goto	l2319
  3659  02FA  3A35               	xorlw	53	; case 97
  3660  02FB  1903               	skipnz
  3661  02FC  2AD3               	goto	l2335
  3662  02FD  3A09               	xorlw	9	; case 104
  3663  02FE  1903               	skipnz
  3664  02FF  2AE5               	goto	l2345
  3665  0300  2ACC               	goto	l2329
  3666  0301  0008               	return
  3667  0302                     __end_of_RfHalTickTxTh:	
  3668  0302                     __ptext7:	
  3669 ;; *************** function _RfTrcvCarrierPresent *****************
  3670 ;; Defined at:
  3671 ;;		line 59 in file "../../../src/devices/mrf49xa.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  sts             2    6[COMMON] unsigned int 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      unsigned char 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, pclath, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 1F/0
  3682 ;;		On exit  : 1F/2
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3685 ;;      Params:         0       0       0       0
  3686 ;;      Locals:         2       0       0       0
  3687 ;;      Temps:          0       0       0       0
  3688 ;;      Totals:         2       0       0       0
  3689 ;;Total ram usage:        2 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    3
  3692 ;; This function calls:
  3693 ;;		_MRF49XAReadStatus
  3694 ;; This function is called by:
  3695 ;;		_RfHalTickTxTh
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _RfTrcvCarrierPresent
  3701  0302                     _RfTrcvCarrierPresent:	
  3702                           
  3703                           ;mrf49xa.c: 61: UI16_t sts = MRF49XAReadStatus();
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in _RfTrcvCarrierPresent: [wreg+status,2+status,0+pclath+cstack]
  3707  0302  230D  3180         	fcall	_MRF49XAReadStatus
  3708  0304  0873               	movf	?_MRF49XAReadStatus+1,w
  3709  0305  01F7               	clrf	RfTrcvCarrierPresent@sts+1
  3710  0306  07F7               	addwf	RfTrcvCarrierPresent@sts+1,f
  3711  0307  0872               	movf	?_MRF49XAReadStatus,w
  3712  0308  01F6               	clrf	RfTrcvCarrierPresent@sts
  3713  0309  07F6               	addwf	RfTrcvCarrierPresent@sts,f
  3714                           
  3715                           ;mrf49xa.c: 63: if ((sts & (1<<8)) != 0)
  3716  030A  1877               	btfsc	RfTrcvCarrierPresent@sts+1,0
  3717                           
  3718                           ;mrf49xa.c: 64: return 1;
  3719  030B  3401               	retlw	1
  3720                           
  3721                           ;mrf49xa.c: 65: else
  3722                           ;mrf49xa.c: 66: return 0;
  3723  030C  3400               	retlw	0
  3724  030D                     __end_of_RfTrcvCarrierPresent:	
  3725  030D                     __ptext8:	
  3726 ;; *************** function _MRF49XAReadStatus *****************
  3727 ;; Defined at:
  3728 ;;		line 37 in file "../../../src/devices/mrf49xa.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;  w               2    4[COMMON] unsigned int 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  2    2[COMMON] unsigned int 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0, pclath, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 1F/0
  3739 ;;		On exit  : 1F/2
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3742 ;;      Params:         2       0       0       0
  3743 ;;      Locals:         2       0       0       0
  3744 ;;      Temps:          0       0       0       0
  3745 ;;      Totals:         4       0       0       0
  3746 ;;Total ram usage:        4 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    2
  3749 ;; This function calls:
  3750 ;;		_SPI_Read
  3751 ;; This function is called by:
  3752 ;;		_RfTrcvCarrierPresent
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _MRF49XAReadStatus
  3758  030D                     _MRF49XAReadStatus:	
  3759                           
  3760                           ;mrf49xa.c: 41: LATCbits.LATC6 = 0;;
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _MRF49XAReadStatus: [wreg+status,2+status,0+pclath+cstack]
  3764  030D  0022               	movlb	2	; select bank2
  3765  030E  130E               	bcf	14,6	;volatile
  3766                           
  3767                           ;mrf49xa.c: 42: w = SPI_Read() << 8;
  3768  030F  231D  3180         	fcall	_SPI_Read
  3769  0311  00F5               	movwf	MRF49XAReadStatus@w+1
  3770  0312  01F4               	clrf	MRF49XAReadStatus@w
  3771                           
  3772                           ;mrf49xa.c: 43: w |= SPI_Read();
  3773  0313  231D               	fcall	_SPI_Read
  3774  0314  04F4               	iorwf	MRF49XAReadStatus@w,f
  3775                           
  3776                           ;mrf49xa.c: 44: LATCbits.LATC6 = 1;;
  3777  0315  170E               	bsf	14,6	;volatile
  3778                           
  3779                           ;mrf49xa.c: 46: return w;
  3780  0316  0875               	movf	MRF49XAReadStatus@w+1,w
  3781  0317  01F3               	clrf	?_MRF49XAReadStatus+1
  3782  0318  07F3               	addwf	?_MRF49XAReadStatus+1,f
  3783  0319  0874               	movf	MRF49XAReadStatus@w,w
  3784  031A  01F2               	clrf	?_MRF49XAReadStatus
  3785  031B  07F2               	addwf	?_MRF49XAReadStatus,f
  3786  031C  0008               	return
  3787  031D                     __end_of_MRF49XAReadStatus:	
  3788  031D                     __ptext9:	
  3789 ;; *************** function _SPI_Read *****************
  3790 ;; Defined at:
  3791 ;;		line 134 in file "../../../src/devices/mrf49xa.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  i               1    1[COMMON] unsigned char 
  3796 ;;  data            1    0[COMMON] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      unsigned char 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 1F/2
  3803 ;;		On exit  : 1F/2
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3806 ;;      Params:         0       0       0       0
  3807 ;;      Locals:         2       0       0       0
  3808 ;;      Temps:          0       0       0       0
  3809 ;;      Totals:         2       0       0       0
  3810 ;;Total ram usage:        2 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_MRF49XAReadStatus
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _SPI_Read
  3822  031D                     _SPI_Read:	
  3823                           
  3824                           ;mrf49xa.c: 139: UI08_t i;
  3825                           ;mrf49xa.c: 140: UI08_t data = 0;
  3826                           
  3827                           ;incstack = 0
  3828                           ; Regs used in _SPI_Read: [wreg+status,2+status,0]
  3829  031D  01F0               	clrf	SPI_Read@data
  3830                           
  3831                           ;mrf49xa.c: 142: LATBbits.LATB7 = 0;
  3832  031E  138D               	bcf	13,7	;volatile
  3833                           
  3834                           ;mrf49xa.c: 143: LATCbits.LATC7 = 0;
  3835  031F  138E               	bcf	14,7	;volatile
  3836                           
  3837                           ;mrf49xa.c: 145: for (i = 0; i < 8; i++)
  3838  0320  01F1               	clrf	SPI_Read@i
  3839  0321                     l180:	
  3840                           
  3841                           ;mrf49xa.c: 146: {
  3842                           ;mrf49xa.c: 147: data = data << 1;
  3843  0321  35F0               	lslf	SPI_Read@data,f
  3844                           
  3845                           ;mrf49xa.c: 149: if (PORTCbits.RC5)
  3846  0322  0020               	movlb	0	; select bank0
  3847  0323  1E8E               	btfss	14,5	;volatile
  3848  0324  2B27               	goto	l182
  3849                           
  3850                           ;mrf49xa.c: 150: {
  3851                           ;mrf49xa.c: 151: data |= 0x01;
  3852  0325  1470               	bsf	SPI_Read@data,0
  3853                           
  3854                           ;mrf49xa.c: 152: }
  3855  0326  2B28               	goto	l183
  3856  0327                     l182:	
  3857                           
  3858                           ;mrf49xa.c: 153: else
  3859                           ;mrf49xa.c: 154: {
  3860                           ;mrf49xa.c: 155: data &= 0xFE;
  3861  0327  1070               	bcf	SPI_Read@data,0
  3862  0328                     l183:	
  3863                           
  3864                           ;mrf49xa.c: 156: }
  3865                           ;mrf49xa.c: 158: LATCbits.LATC7 = 1;
  3866  0328  0022               	movlb	2	; select bank2
  3867  0329  178E               	bsf	14,7	;volatile
  3868  032A  0000               	nop	;# 
  3869                           
  3870                           ;mrf49xa.c: 162: LATCbits.LATC7 = 0;
  3871  032B  0022               	movlb	2	; select bank2
  3872  032C  138E               	bcf	14,7	;volatile
  3873  032D  3008               	movlw	8
  3874  032E  0AF1               	incf	SPI_Read@i,f
  3875  032F  0271               	subwf	SPI_Read@i,w
  3876  0330  1C03               	skipc
  3877  0331  2B21               	goto	l180
  3878                           
  3879                           ;mrf49xa.c: 163: }
  3880                           ;mrf49xa.c: 164: return data;
  3881  0332  0870               	movf	SPI_Read@data,w
  3882  0333  0008               	return
  3883  0334                     __end_of_SPI_Read:	
  3884  0334                     __ptext3:	
  3885 ;; *************** function _RfTrcvMode *****************
  3886 ;; Defined at:
  3887 ;;		line 52 in file "../../../src/rfstack/hal.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  tx              1    wreg     unsigned char 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;  tx              1    3[COMMON] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 1F/0
  3898 ;;		On exit  : 1D/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3901 ;;      Params:         0       0       0       0
  3902 ;;      Locals:         1       0       0       0
  3903 ;;      Temps:          0       0       0       0
  3904 ;;      Totals:         1       0       0       0
  3905 ;;Total ram usage:        1 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    4
  3908 ;; This function calls:
  3909 ;;		_MRF49XACommand
  3910 ;;		_MRF49XAReset
  3911 ;; This function is called by:
  3912 ;;		_RfHalTickTxTh
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _RfTrcvMode
  3918  0334                     _RfTrcvMode:	
  3919                           
  3920                           ;incstack = 0
  3921                           ; Regs used in _RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  3922                           ;RfTrcvMode@tx stored from wreg
  3923  0334  00F3               	movwf	RfTrcvMode@tx
  3924                           
  3925                           ;hal.c: 55: {
  3926                           ;hal.c: 56: mrfInRx = 1;
  3927  0335  08F3               	movf	RfTrcvMode@tx,f
  3928  0336  1D03               	skipz
  3929  0337  2B39               	goto	l2309
  3930                           
  3931                           ;hal.c: 58: MRF49XAReset();
  3932  0338  2B4E               	ljmp	l2281
  3933  0339                     l2309:	
  3934                           ;hal.c: 59: }
  3935                           
  3936                           
  3937                           ;hal.c: 64: MRF49XACommand(0x8200);
  3938  0339  3082               	movlw	130
  3939  033A  01F1               	clrf	MRF49XACommand@cmd
  3940  033B  00F2               	movwf	MRF49XACommand@cmd+1
  3941  033C  2371  3180         	fcall	_MRF49XACommand
  3942                           
  3943                           ;hal.c: 65: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  3944  033E  30A8               	movlw	168
  3945  033F  00F1               	movwf	MRF49XACommand@cmd
  3946  0340  3080               	movlw	128
  3947  0341  00F2               	movwf	MRF49XACommand@cmd+1
  3948  0342  2371  3180         	fcall	_MRF49XACommand
  3949                           
  3950                           ;hal.c: 66: MRF49XACommand(0x8200 |0x0020);
  3951  0344  3020               	movlw	32
  3952  0345  00F1               	movwf	MRF49XACommand@cmd
  3953  0346  3082               	movlw	130
  3954  0347  00F2               	movwf	MRF49XACommand@cmd+1
  3955  0348  2371               	fcall	_MRF49XACommand
  3956                           
  3957                           ;hal.c: 69: rfStatus.isr.state = TX_PREAMBLE1;
  3958  0349  0020               	movlb	0	; select bank0
  3959  034A  01A2               	clrf	_rfStatus+2
  3960  034B  0AA2               	incf	_rfStatus+2,f
  3961                           
  3962                           ;hal.c: 70: rfStatus.isr.byteCounter = 0;
  3963  034C  01A0               	clrf	_rfStatus
  3964  034D  0008               	return
  3965  034E                     __end_of_RfTrcvMode:	
  3966  034E                     __ptext4:	
  3967 ;; *************** function _MRF49XAReset *****************
  3968 ;; Defined at:
  3969 ;;		line 118 in file "../../../src/devices/mrf49xa.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;		None               void
  3976 ;; Registers used:
  3977 ;;		wreg, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 1F/0
  3980 ;;		On exit  : 1F/2
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3983 ;;      Params:         0       0       0       0
  3984 ;;      Locals:         0       0       0       0
  3985 ;;      Temps:          0       0       0       0
  3986 ;;      Totals:         0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    3
  3990 ;; This function calls:
  3991 ;;		_MRF49XACommand
  3992 ;; This function is called by:
  3993 ;;		_RfTrcvMode
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _MRF49XAReset
  3999  034E                     _MRF49XAReset:	
  4000  034E                     l2281:	
  4001                           ;incstack = 0
  4002                           ; Regs used in _MRF49XAReset: [wreg+status,2+status,0+pclath+cstack]
  4003                           
  4004                           
  4005                           ;mrf49xa.c: 120: MRF49XACommand(0x8200);
  4006  034E  3000               	movlw	0
  4007  034F  00F1               	movwf	MRF49XACommand@cmd
  4008  0350  3082               	movlw	130
  4009  0351  00F2               	movwf	MRF49XACommand@cmd+1
  4010  0352  2371  3180         	fcall	_MRF49XACommand
  4011                           
  4012                           ;mrf49xa.c: 121: MRF49XACommand(0xCA81);
  4013  0354  3081               	movlw	129
  4014  0355  00F1               	movwf	MRF49XACommand@cmd
  4015  0356  30CA               	movlw	202
  4016  0357  00F2               	movwf	MRF49XACommand@cmd+1
  4017  0358  2371  3180         	fcall	_MRF49XACommand
  4018                           
  4019                           ;mrf49xa.c: 122: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  4020  035A  3028               	movlw	40
  4021  035B  00F1               	movwf	MRF49XACommand@cmd
  4022  035C  3080               	movlw	128
  4023  035D  00F2               	movwf	MRF49XACommand@cmd+1
  4024  035E  2371  3180         	fcall	_MRF49XACommand
  4025                           
  4026                           ;mrf49xa.c: 123: MRF49XACommand(0x8200 | 0x0080);
  4027  0360  3080               	movlw	128
  4028  0361  00F1               	movwf	MRF49XACommand@cmd
  4029  0362  3082               	movlw	130
  4030  0363  00F2               	movwf	MRF49XACommand@cmd+1
  4031  0364  2371  3180         	fcall	_MRF49XACommand
  4032                           
  4033                           ;mrf49xa.c: 124: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  4034  0366  3068               	movlw	104
  4035  0367  00F1               	movwf	MRF49XACommand@cmd
  4036  0368  3080               	movlw	128
  4037  0369  00F2               	movwf	MRF49XACommand@cmd+1
  4038  036A  2371  3180         	fcall	_MRF49XACommand
  4039                           
  4040                           ;mrf49xa.c: 125: MRF49XACommand(0xCA81 | 0x0002);
  4041  036C  3083               	movlw	131
  4042  036D  00F1               	movwf	MRF49XACommand@cmd
  4043  036E  30CA               	movlw	202
  4044  036F  00F2               	movwf	MRF49XACommand@cmd+1
  4045  0370  2B71               	ljmp	l2203
  4046  0371                     __end_of_MRF49XAReset:	
  4047  0371                     __ptext5:	
  4048 ;; *************** function _MRF49XACommand *****************
  4049 ;; Defined at:
  4050 ;;		line 26 in file "../../../src/devices/mrf49xa.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  cmd             2    1[COMMON] unsigned int 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;		None
  4055 ;; Return value:  Size  Location     Type
  4056 ;;		None               void
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0, pclath, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 1D/0
  4061 ;;		On exit  : 1F/2
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4064 ;;      Params:         2       0       0       0
  4065 ;;      Locals:         0       0       0       0
  4066 ;;      Temps:          0       0       0       0
  4067 ;;      Totals:         2       0       0       0
  4068 ;;Total ram usage:        2 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    2
  4071 ;; This function calls:
  4072 ;;		_SPI_Write
  4073 ;; This function is called by:
  4074 ;;		_MRF49XAReset
  4075 ;;		_RfTrcvMode
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           
  4080                           ;psect for function _MRF49XACommand
  4081  0371                     _MRF49XACommand:	
  4082  0371                     l2203:	
  4083                           ;incstack = 0
  4084                           ; Regs used in _MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  4085                           
  4086                           
  4087                           ;mrf49xa.c: 28: LATCbits.LATC6 = 0;;
  4088  0371  0022               	movlb	2	; select bank2
  4089  0372  130E               	bcf	14,6	;volatile
  4090                           
  4091                           ;mrf49xa.c: 30: SPI_Write((cmd & 0xFF00) >> 8);
  4092  0373  0872               	movf	MRF49XACommand@cmd+1,w
  4093  0374  23C8  3180         	fcall	_SPI_Write
  4094                           
  4095                           ;mrf49xa.c: 31: SPI_Write((cmd & 0x00FF));
  4096  0376  0871               	movf	MRF49XACommand@cmd,w
  4097  0377  23C8               	fcall	_SPI_Write
  4098                           
  4099                           ;mrf49xa.c: 33: LATCbits.LATC6 = 1;;
  4100  0378  170E               	bsf	14,6	;volatile
  4101  0379  0008               	return
  4102  037A                     __end_of_MRF49XACommand:	
  4103  037A                     __ptext1:	
  4104 ;; *************** function _SysInitGpio *****************
  4105 ;; Defined at:
  4106 ;;		line 8 in file "../../../src/node/main.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;		None               void
  4113 ;; Registers used:
  4114 ;;		None
  4115 ;; Tracked objects:
  4116 ;;		On entry : 17F/1
  4117 ;;		On exit  : 17F/1
  4118 ;;		Unchanged: 160/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4120 ;;      Params:         0       0       0       0
  4121 ;;      Locals:         0       0       0       0
  4122 ;;      Temps:          0       0       0       0
  4123 ;;      Totals:         0       0       0       0
  4124 ;;Total ram usage:        0 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    1
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _SysInitGpio
  4136  037A                     _SysInitGpio:	
  4137                           
  4138                           ;incstack = 0
  4139                           ; Regs used in _SysInitGpio: []
  4140                           ;main.c: 10: do { TRISAbits.TRISA4 = 0; TRISAbits.TRISA2 = 1; TRISAbits.TRISA5 = 1; } wh
      +                          ile(0);;
  4141  037A  120C               	bcf	12,4	;volatile
  4142  037B  150C               	bsf	12,2	;volatile
  4143  037C  168C               	bsf	12,5	;volatile
  4144                           
  4145                           ;main.c: 11: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4146  037D  120D               	bcf	13,4	;volatile
  4147  037E  130D               	bcf	13,6	;volatile
  4148  037F  138D               	bcf	13,7	;volatile
  4149  0380  168D               	bsf	13,5	;volatile
  4150                           
  4151                           ;main.c: 12: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; } while(0);;
  4152  0381  108E               	bcf	14,1	;volatile
  4153  0382  110E               	bcf	14,2	;volatile
  4154  0383  120E               	bcf	14,4	;volatile
  4155  0384  130E               	bcf	14,6	;volatile
  4156  0385  138E               	bcf	14,7	;volatile
  4157  0386  140E               	bsf	14,0	;volatile
  4158  0387  158E               	bsf	14,3	;volatile
  4159  0388  168E               	bsf	14,5	;volatile
  4160  0389  0008               	return
  4161  038A                     __end_of_SysInitGpio:	
  4162  038A                     PL8:	
  4163  038A  00F4               	movwf	??_CCBufCalcPt
  4164  038B  3F41               	moviw [1]fsr1
  4165  038C  00F5               	movwf	??_CCBufCalcPt+1
  4166  038D  0874               	movf	??_CCBufCalcPt,w
  4167  038E  00F6               	movwf	??_CCBufCalcPt+2
  4168  038F  0875               	movf	??_CCBufCalcPt+1,w
  4169  0390  00F7               	movwf	??_CCBufCalcPt+3
  4170  0391  01F8               	clrf	??_CCBufCalcPt+4
  4171  0392  01F9               	clrf	??_CCBufCalcPt+5
  4172  0393  0008               	return
  4173  0394                     __end_ofPL8:	
  4174  0394                     PL16:	
  4175  0394  3F40               	moviw [0]fsr1
  4176  0395  00F0               	movwf	CCBufCalcPt@entry
  4177  0396  3F41               	moviw [1]fsr1
  4178  0397  00F1               	movwf	CCBufCalcPt@entry+1
  4179  0398  01F2               	clrf	CCBufCalcPt@move
  4180  0399  0AF2               	incf	CCBufCalcPt@move,f
  4181  039A  01F3               	clrf	CCBufCalcPt@move+1
  4182  039B  0008               	return
  4183  039C                     __end_ofPL16:	
  4184  039C                     PL20:	
  4185  039C  3E05               	addlw	5
  4186  039D  0086               	movwf	6
  4187  039E  0187               	clrf	7
  4188  039F  0870               	movf	?_CCBufCalcPt,w
  4189  03A0  3FC0               	movwi [0]fsr1
  4190  03A1  0871               	movf	?_CCBufCalcPt+1,w
  4191  03A2  3FC1               	movwi [1]fsr1
  4192  03A3  0008               	return
  4193  03A4                     __end_ofPL20:	
  4194  03A4                     PL22:	
  4195  03A4  0187               	clrf	7
  4196  03A5  3FC0               	movwi [0]fsr1
  4197  03A6  3000               	movlw	0
  4198  03A7  3FC1               	movwi [1]fsr1
  4199  03A8  0008               	return
  4200  03A9                     __end_ofPL22:	
  4201  03A9                     PL24:	
  4202  03A9  00FA               	movwf	CCBufRdReverse@qty
  4203  03AA  01FB               	clrf	CCBufRdReverse@qty+1
  4204  03AB  0AFA               	incf	CCBufRdReverse@qty,f
  4205  03AC  1903               	skipnz
  4206  03AD  0AFB               	incf	CCBufRdReverse@qty+1,f
  4207  03AE  3444               	retlw	_rfRxCC& (0+255)
  4208  03AF                     __end_ofPL24:	
  4209  03AF                     PL26:	
  4210  03AF  0086               	movwf	6
  4211  03B0  3000               	movlw	0
  4212  03B1  0187               	clrf	7
  4213  03B2  3FC0               	movwi [0]fsr1
  4214  03B3  3FC1               	movwi [1]fsr1
  4215  03B4  0008               	return
  4216  03B5                     __end_ofPL26:	
  4217  03B5                     PL28:	
  4218  03B5  0854               	movf	CCBufCalcPt@result+3,w
  4219  03B6  3A80               	xorlw	128
  4220  03B7  00FF               	movwf	127
  4221  03B8  0879               	movf	??_CCBufCalcPt+5,w
  4222  03B9  3A80               	xorlw	128
  4223  03BA  027F               	subwf	127,w
  4224  03BB  0008               	return
  4225  03BC                     __end_ofPL28:	
  4226  03BC                     PL30:	
  4227  03BC  0800               	movf	0,w
  4228  03BD  0701               	addwf	1,w
  4229  03BE  00E2               	movwf	??_CCBufRdByte
  4230  03BF  0086               	movwf	6
  4231  03C0  3001               	movlw	1	; select bank2/3
  4232  03C1  0087               	movwf	7
  4233  03C2  0008               	return
  4234  03C3                     __end_ofPL30:	
  4235  03C3                     PL38:	
  4236  03C3  3034               	movlw	low (STR_12| (0+32768))
  4237  03C4  00FC               	movwf	printf@f
  4238  03C5  3087               	movlw	high (STR_12| (0+32768))
  4239  03C6  00FD               	movwf	printf@f+1
  4240  03C7  0008               	return
  4241  03C8                     __end_ofPL38:	
  4242  03C8                     __ptext6:	
  4243 ;; *************** function _SPI_Write *****************
  4244 ;; Defined at:
  4245 ;;		line 167 in file "../../../src/devices/mrf49xa.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  data            1    wreg     unsigned char 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  data            1    0[COMMON] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg
  4254 ;; Tracked objects:
  4255 ;;		On entry : 1F/2
  4256 ;;		On exit  : 1F/2
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4259 ;;      Params:         0       0       0       0
  4260 ;;      Locals:         1       0       0       0
  4261 ;;      Temps:          0       0       0       0
  4262 ;;      Totals:         1       0       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    1
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_MRF49XACommand
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _SPI_Write
  4275  03C8                     _SPI_Write:	
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _SPI_Write: [wreg]
  4279                           ;SPI_Write@data stored from wreg
  4280  03C8  00F0               	movwf	SPI_Write@data
  4281                           
  4282                           ;mrf49xa.c: 174: LATCbits.LATC7 = 0;
  4283  03C9  138E               	bcf	14,7	;volatile
  4284  03CA  1FF0               	btfss	SPI_Write@data,7
  4285  03CB  2BCE               	goto	l188
  4286  03CC  178D               	bsf	13,7	;volatile
  4287  03CD  2BCF               	goto	l189
  4288  03CE                     l188:	
  4289  03CE  138D               	bcf	13,7	;volatile
  4290  03CF                     l189:	
  4291  03CF  178E               	bsf	14,7	;volatile
  4292  03D0  138E               	bcf	14,7	;volatile
  4293  03D1  1F70               	btfss	SPI_Write@data,6
  4294  03D2  2BD5               	goto	l192
  4295  03D3  178D               	bsf	13,7	;volatile
  4296  03D4  2BD6               	goto	l193
  4297  03D5                     l192:	
  4298  03D5  138D               	bcf	13,7	;volatile
  4299  03D6                     l193:	
  4300  03D6  178E               	bsf	14,7	;volatile
  4301  03D7  138E               	bcf	14,7	;volatile
  4302  03D8  1EF0               	btfss	SPI_Write@data,5
  4303  03D9  2BDC               	goto	l196
  4304  03DA  178D               	bsf	13,7	;volatile
  4305  03DB  2BDD               	goto	l197
  4306  03DC                     l196:	
  4307  03DC  138D               	bcf	13,7	;volatile
  4308  03DD                     l197:	
  4309  03DD  178E               	bsf	14,7	;volatile
  4310  03DE  138E               	bcf	14,7	;volatile
  4311  03DF  1E70               	btfss	SPI_Write@data,4
  4312  03E0  2BE3               	goto	l200
  4313  03E1  178D               	bsf	13,7	;volatile
  4314  03E2  2BE4               	goto	l201
  4315  03E3                     l200:	
  4316  03E3  138D               	bcf	13,7	;volatile
  4317  03E4                     l201:	
  4318  03E4  178E               	bsf	14,7	;volatile
  4319  03E5  138E               	bcf	14,7	;volatile
  4320  03E6  1DF0               	btfss	SPI_Write@data,3
  4321  03E7  2BEA               	goto	l204
  4322  03E8  178D               	bsf	13,7	;volatile
  4323  03E9  2BEB               	goto	l205
  4324  03EA                     l204:	
  4325  03EA  138D               	bcf	13,7	;volatile
  4326  03EB                     l205:	
  4327  03EB  178E               	bsf	14,7	;volatile
  4328  03EC  138E               	bcf	14,7	;volatile
  4329  03ED  1D70               	btfss	SPI_Write@data,2
  4330  03EE  2BF1               	goto	l208
  4331  03EF  178D               	bsf	13,7	;volatile
  4332  03F0  2BF2               	goto	l209
  4333  03F1                     l208:	
  4334  03F1  138D               	bcf	13,7	;volatile
  4335  03F2                     l209:	
  4336  03F2  178E               	bsf	14,7	;volatile
  4337  03F3  138E               	bcf	14,7	;volatile
  4338  03F4  1CF0               	btfss	SPI_Write@data,1
  4339  03F5  2BF8               	goto	l212
  4340  03F6  178D               	bsf	13,7	;volatile
  4341  03F7  2BF9               	goto	l213
  4342  03F8                     l212:	
  4343  03F8  138D               	bcf	13,7	;volatile
  4344  03F9                     l213:	
  4345  03F9  178E               	bsf	14,7	;volatile
  4346  03FA  138E               	bcf	14,7	;volatile
  4347  03FB  1C70               	btfss	SPI_Write@data,0
  4348  03FC  2BFF               	goto	l216
  4349  03FD  178D               	bsf	13,7	;volatile
  4350  03FE  2C00               	goto	l217
  4351  03FF                     l216:	
  4352  03FF  138D               	bcf	13,7	;volatile
  4353  0400                     l217:	
  4354  0400  178E               	bsf	14,7	;volatile
  4355  0401  138E               	bcf	14,7	;volatile
  4356  0402  0008               	return
  4357  0403                     __end_of_SPI_Write:	
  4358                           
  4359                           	psect	bssBANK0
  4360  0020                     __pbssBANK0:	
  4361  0020                     _rfStatus:	
  4362  0020                     	ds	5
  4363  0025                     RfHalTickRxTh@pktRxByteIndex:	
  4364  0025                     	ds	1
  4365  0026                     RfHalTickRxTh@rxByteTimeout:	
  4366  0026                     	ds	1
  4367  0027                     RfHalTickTxTh@txPacket:	
  4368  0027                     	ds	1
  4369  0028                     RfHalTickRxTh@rxPacket:	
  4370  0028                     	ds	28
  4371  0044                     _rfRxCC:	
  4372  0044                     	ds	9
  4373  004D                     _halRxBfTh:	
  4374  004D                     	ds	2
  4375  004F                     _halTxBfTh:	
  4376  004F                     	ds	2
  4377                           
  4378                           	psect	bssBANK1
  4379  00A0                     __pbssBANK1:	
  4380  00A0                     _rfPackets:	
  4381  00A0                     	ds	56
  4382                           
  4383                           	psect	bssBANK2
  4384  0120                     __pbssBANK2:	
  4385  0120                     _rfRxBf:	
  4386  0120                     	ds	64
  4387                           
  4388                           	psect	clrtext
  4389  0760                     clear_ram0:	
  4390                           ;	Called with FSR0 containing the base address, and
  4391                           ;	WREG with the size to clear
  4392                           
  4393  0760  0064               	clrwdt	;clear the watchdog before getting into this loop
  4394  0761                     clrloop0:	
  4395  0761  0180               	clrf	0	;clear RAM location pointed to by FSR
  4396  0762  3101               	addfsr 0,1
  4397  0763  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4398  0764  2F61               	goto	clrloop0	;have we reached the end yet?
  4399  0765  3400               	retlw	0	;all done for this memory range, return
  4400                           
  4401                           	psect	cstackCOMMON
  4402  0070                     __pcstackCOMMON:	
  4403  0070                     ?_SPI_Write:	
  4404  0070                     ??_SPI_Write:	
  4405                           ; 0 bytes @ 0x0
  4406                           
  4407  0070                     ??_SPI_Read:	
  4408                           ; 0 bytes @ 0x0
  4409                           
  4410  0070                     ?_MRF49XAReset:	
  4411                           ; 0 bytes @ 0x0
  4412                           
  4413  0070                     ?_RfTrcvMode:	
  4414                           ; 0 bytes @ 0x0
  4415                           
  4416  0070                     ?_ExtIntInit:	
  4417                           ; 0 bytes @ 0x0
  4418                           
  4419  0070                     ??_ExtIntInit:	
  4420                           ; 0 bytes @ 0x0
  4421                           
  4422  0070                     ?_putch:	
  4423                           ; 0 bytes @ 0x0
  4424                           
  4425  0070                     ??_putch:	
  4426                           ; 0 bytes @ 0x0
  4427                           
  4428  0070                     ?_isdigit:	
  4429                           ; 0 bytes @ 0x0
  4430                           
  4431  0070                     ??_isdigit:	
  4432                           ; 1 bit 
  4433                           
  4434  0070                     ?_AdcInit:	
  4435                           ; 0 bytes @ 0x0
  4436                           
  4437  0070                     ??_AdcInit:	
  4438                           ; 0 bytes @ 0x0
  4439                           
  4440  0070                     ?_SysInitGpio:	
  4441                           ; 0 bytes @ 0x0
  4442                           
  4443  0070                     ??_SysInitGpio:	
  4444                           ; 0 bytes @ 0x0
  4445                           
  4446  0070                     ?_main:	
  4447                           ; 0 bytes @ 0x0
  4448                           
  4449  0070                     ?_extInt:	
  4450                           ; 0 bytes @ 0x0
  4451                           
  4452  0070                     ??_extInt:	
  4453                           ; 0 bytes @ 0x0
  4454                           
  4455  0070                     ?_SPI_Read:	
  4456                           ; 0 bytes @ 0x0
  4457                           
  4458  0070                     ?_RfHalTxGet:	
  4459                           ; 1 bytes @ 0x0
  4460                           
  4461  0070                     ?_CCBufCanRd:	
  4462                           ; 1 bytes @ 0x0
  4463                           
  4464  0070                     ?_RfHalRxPut:	
  4465                           ; 1 bytes @ 0x0
  4466                           
  4467  0070                     ?_RfTrcvCrcTick:	
  4468                           ; 1 bytes @ 0x0
  4469                           
  4470  0070                     ?_RfTrcvCarrierPresent:	
  4471                           ; 1 bytes @ 0x0
  4472                           
  4473  0070                     ?_RfHalTickTxTh:	
  4474                           ; 1 bytes @ 0x0
  4475                           
  4476  0070                     ?_RfHalTickRxTh:	
  4477                           ; 1 bytes @ 0x0
  4478                           
  4479  0070                     ?___bmul:	
  4480                           ; 1 bytes @ 0x0
  4481                           
  4482  0070                     ?_CCBufCalcPt:	
  4483                           ; 1 bytes @ 0x0
  4484                           
  4485  0070                     ?___lwdiv:	
  4486                           ; 2 bytes @ 0x0
  4487                           
  4488  0070                     ?___wmul:	
  4489                           ; 2 bytes @ 0x0
  4490                           
  4491  0070                     RfTrcvCrcTick@data:	
  4492                           ; 2 bytes @ 0x0
  4493                           
  4494  0070                     SPI_Read@data:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0070                     SPI_Write@data:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0070                     ___bmul@multiplicand:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0070                     _isdigit$1077:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0070                     putch@c:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0070                     CCBufCalcPt@entry:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0070                     ___lwdiv@divisor:	
  4513                           ; 2 bytes @ 0x0
  4514                           
  4515  0070                     ___wmul@multiplier:	
  4516                           ; 2 bytes @ 0x0
  4517                           
  4518                           
  4519                           ; 2 bytes @ 0x0
  4520  0070                     	ds	1
  4521  0071                     ?_MRF49XACommand:	
  4522  0071                     ??_RfTrcvCrcTick:	
  4523                           ; 0 bytes @ 0x1
  4524                           
  4525  0071                     ??___bmul:	
  4526                           ; 0 bytes @ 0x1
  4527                           
  4528  0071                     RfTrcvCrcTick@initial:	
  4529                           ; 0 bytes @ 0x1
  4530                           
  4531  0071                     SPI_Read@i:	
  4532                           ; 1 bytes @ 0x1
  4533                           
  4534  0071                     ___bmul@product:	
  4535                           ; 1 bytes @ 0x1
  4536                           
  4537  0071                     isdigit@c:	
  4538                           ; 1 bytes @ 0x1
  4539                           
  4540  0071                     MRF49XACommand@cmd:	
  4541                           ; 1 bytes @ 0x1
  4542                           
  4543                           
  4544                           ; 2 bytes @ 0x1
  4545  0071                     	ds	1
  4546  0072                     ?_MRF49XAReadStatus:	
  4547  0072                     ___bmul@multiplier:	
  4548                           ; 2 bytes @ 0x2
  4549                           
  4550  0072                     CCBufCalcPt@move:	
  4551                           ; 1 bytes @ 0x2
  4552                           
  4553  0072                     ___lwdiv@dividend:	
  4554                           ; 2 bytes @ 0x2
  4555                           
  4556  0072                     ___wmul@multiplicand:	
  4557                           ; 2 bytes @ 0x2
  4558                           
  4559                           
  4560                           ; 2 bytes @ 0x2
  4561  0072                     	ds	1
  4562  0073                     ??_MRF49XACommand:	
  4563  0073                     ??_MRF49XAReset:	
  4564                           ; 0 bytes @ 0x3
  4565                           
  4566  0073                     ??_RfTrcvMode:	
  4567                           ; 0 bytes @ 0x3
  4568                           
  4569  0073                     ??_RfHalTxGet:	
  4570                           ; 0 bytes @ 0x3
  4571                           
  4572  0073                     ?_memcpy:	
  4573                           ; 0 bytes @ 0x3
  4574                           
  4575  0073                     RfTrcvMode@tx:	
  4576                           ; 1 bytes @ 0x3
  4577                           
  4578  0073                     RfHalTxGet@i:	
  4579                           ; 1 bytes @ 0x3
  4580                           
  4581  0073                     memcpy@s1:	
  4582                           ; 1 bytes @ 0x3
  4583                           
  4584                           
  4585                           ; 1 bytes @ 0x3
  4586  0073                     	ds	1
  4587  0074                     ??_MRF49XAReadStatus:	
  4588  0074                     ??_CCBufCalcPt:	
  4589                           ; 0 bytes @ 0x4
  4590                           
  4591  0074                     ??___lwdiv:	
  4592                           ; 0 bytes @ 0x4
  4593                           
  4594  0074                     ??___wmul:	
  4595                           ; 0 bytes @ 0x4
  4596                           
  4597  0074                     MRF49XAReadStatus@w:	
  4598                           ; 0 bytes @ 0x4
  4599                           
  4600  0074                     ___lwdiv@quotient:	
  4601                           ; 2 bytes @ 0x4
  4602                           
  4603  0074                     memcpy@n:	
  4604                           ; 2 bytes @ 0x4
  4605                           
  4606  0074                     ___wmul@product:	
  4607                           ; 2 bytes @ 0x4
  4608                           
  4609                           
  4610                           ; 2 bytes @ 0x4
  4611  0074                     	ds	2
  4612  0076                     ??_memcpy:	
  4613  0076                     ??_RfTrcvCarrierPresent:	
  4614                           ; 0 bytes @ 0x6
  4615                           
  4616  0076                     ___lwdiv@counter:	
  4617                           ; 0 bytes @ 0x6
  4618                           
  4619  0076                     memcpy@d:	
  4620                           ; 1 bytes @ 0x6
  4621                           
  4622  0076                     RfTrcvCarrierPresent@sts:	
  4623                           ; 1 bytes @ 0x6
  4624                           
  4625                           
  4626                           ; 2 bytes @ 0x6
  4627  0076                     	ds	1
  4628  0077                     ?___lwmod:	
  4629  0077                     memcpy@s:	
  4630                           ; 2 bytes @ 0x7
  4631                           
  4632  0077                     ___lwmod@divisor:	
  4633                           ; 1 bytes @ 0x7
  4634                           
  4635                           
  4636                           ; 2 bytes @ 0x7
  4637  0077                     	ds	1
  4638  0078                     memcpy@d1:	
  4639                           
  4640                           ; 1 bytes @ 0x8
  4641  0078                     	ds	1
  4642  0079                     ??_RfHalRxPut:	
  4643  0079                     RfHalRxPut@rfPacket:	
  4644                           ; 0 bytes @ 0x9
  4645                           
  4646  0079                     ___lwmod@dividend:	
  4647                           ; 1 bytes @ 0x9
  4648                           
  4649                           
  4650                           ; 2 bytes @ 0x9
  4651  0079                     	ds	1
  4652  007A                     ??_CCBufCanRd:	
  4653  007A                     ?_CCBufRdReverse:	
  4654                           ; 0 bytes @ 0xA
  4655                           
  4656  007A                     RfHalRxPut@i:	
  4657                           ; 0 bytes @ 0xA
  4658                           
  4659  007A                     CCBufRdReverse@qty:	
  4660                           ; 1 bytes @ 0xA
  4661                           
  4662                           
  4663                           ; 2 bytes @ 0xA
  4664  007A                     	ds	1
  4665  007B                     ??___lwmod:	
  4666  007B                     ___lwmod@counter:	
  4667                           ; 0 bytes @ 0xB
  4668                           
  4669                           
  4670                           ; 1 bytes @ 0xB
  4671  007B                     	ds	1
  4672  007C                     ??_CCBufRdReverse:	
  4673  007C                     ?_printf:	
  4674                           ; 0 bytes @ 0xC
  4675                           
  4676  007C                     CCBufRdReverse@CCDef:	
  4677                           ; 2 bytes @ 0xC
  4678                           
  4679  007C                     printf@f:	
  4680                           ; 1 bytes @ 0xC
  4681                           
  4682                           
  4683                           ; 2 bytes @ 0xC
  4684  007C                     	ds	2
  4685  007E                     ??_main:	
  4686                           
  4687                           	psect	cstackBANK0
  4688  0051                     __pcstackBANK0:	
  4689                           ; 0 bytes @ 0xE
  4690                           
  4691  0051                     ??_printf:	
  4692  0051                     CCBufCalcPt@result:	
  4693                           ; 0 bytes @ 0x0
  4694                           
  4695                           
  4696                           ; 4 bytes @ 0x0
  4697  0051                     	ds	4
  4698  0055                     CCBufCalcPt@CCDef:	
  4699  0055                     printf@idx:	
  4700                           ; 1 bytes @ 0x4
  4701                           
  4702                           
  4703                           ; 1 bytes @ 0x4
  4704  0055                     	ds	1
  4705  0056                     CCBufCanRd@CCDef:	
  4706  0056                     printf@ap:	
  4707                           ; 1 bytes @ 0x5
  4708                           
  4709                           
  4710                           ; 1 bytes @ 0x5
  4711  0056                     	ds	1
  4712  0057                     printf@prec:	
  4713                           
  4714                           ; 1 bytes @ 0x6
  4715  0057                     	ds	1
  4716  0058                     printf@_val:	
  4717                           
  4718                           ; 4 bytes @ 0x7
  4719  0058                     	ds	4
  4720  005C                     printf@flag:	
  4721                           
  4722                           ; 1 bytes @ 0xB
  4723  005C                     	ds	1
  4724  005D                     printf@width:	
  4725                           
  4726                           ; 2 bytes @ 0xC
  4727  005D                     	ds	2
  4728  005F                     printf@c:	
  4729                           
  4730                           ; 1 bytes @ 0xE
  4731  005F                     	ds	1
  4732  0060                     ??_RfHalTickTxTh:	
  4733  0060                     ?_CCBufRdByte:	
  4734                           ; 0 bytes @ 0xF
  4735                           
  4736  0060                     ?_CCBufPeekByte:	
  4737                           ; 2 bytes @ 0xF
  4738                           
  4739                           
  4740                           ; 2 bytes @ 0xF
  4741  0060                     	ds	2
  4742  0062                     ??_CCBufRdByte:	
  4743  0062                     ??_CCBufPeekByte:	
  4744                           ; 0 bytes @ 0x11
  4745                           
  4746  0062                     RfHalTickTxTh@pt:	
  4747                           ; 0 bytes @ 0x11
  4748                           
  4749                           
  4750                           ; 1 bytes @ 0x11
  4751  0062                     	ds	1
  4752  0063                     CCBufRdByte@res:	
  4753                           
  4754                           ; 1 bytes @ 0x12
  4755  0063                     	ds	1
  4756  0064                     CCBufRdByte@CCDef:	
  4757                           
  4758                           ; 1 bytes @ 0x13
  4759  0064                     	ds	1
  4760  0065                     CCBufPeekByte@res:	
  4761                           
  4762                           ; 1 bytes @ 0x14
  4763  0065                     	ds	1
  4764  0066                     CCBufPeekByte@CCDef:	
  4765                           
  4766                           ; 1 bytes @ 0x15
  4767  0066                     	ds	1
  4768  0067                     ??_RfHalTickRxTh:	
  4769                           
  4770                           ; 0 bytes @ 0x16
  4771  0067                     	ds	2
  4772  0069                     RfHalTickRxTh@b:	
  4773                           
  4774                           ; 1 bytes @ 0x18
  4775  0069                     	ds	1
  4776  006A                     RfHalTickRxTh@pktLength:	
  4777                           
  4778                           ; 2 bytes @ 0x19
  4779  006A                     	ds	2
  4780  006C                     RfHalTickRxTh@pt:	
  4781                           
  4782                           ; 1 bytes @ 0x1B
  4783  006C                     	ds	1
  4784                           
  4785                           	psect	text12
  4786  0000                     __ptext12:	
  4787 ;; *************** function _RfTrcvCrcTick *****************
  4788 ;; Defined at:
  4789 ;;		line 50 in file "../../../src/devices/mrf49xa.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  initial         1    wreg     unsigned char 
  4792 ;;  data            1    0[COMMON] unsigned char 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  initial         1    1[COMMON] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      unsigned char 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0
  4799 ;; Tracked objects:
  4800 ;;		On entry : 1F/0
  4801 ;;		On exit  : 1F/0
  4802 ;;		Unchanged: 1F/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4804 ;;      Params:         1       0       0       0
  4805 ;;      Locals:         1       0       0       0
  4806 ;;      Temps:          0       0       0       0
  4807 ;;      Totals:         2       0       0       0
  4808 ;;Total ram usage:        2 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    1
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_RfHalTickRxTh
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818  0000                     _RfTrcvCrcTick:	
  4819                           ;psect for function _RfTrcvCrcTick
  4820                           
  4821  0000                     __end_of_RfTrcvCrcTick:	
  4822                           ;mrf49xa.c: 52: return (initial ^ data);
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  4826                           ;RfTrcvCrcTick@initial stored from wreg
  4827                           
  4828                           
  4829                           	psect	text19
  4830  0403                     __ptext19:	
  4831 ;; *************** function _printf *****************
  4832 ;; Defined at:
  4833 ;;		line 464 in file "/opt/microchip/xc8/v1.30/sources/common/doprnt.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  f               2   12[COMMON] PTR const unsigned char 
  4836 ;;		 -> STR_14(32), STR_13(21), STR_12(21), STR_11(27), 
  4837 ;;		 -> STR_10(31), STR_9(67), STR_8(38), STR_7(2), 
  4838 ;;		 -> STR_6(6), STR_5(53), STR_4(2), STR_3(6), 
  4839 ;;		 -> STR_2(53), STR_1(41), 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  idx             1    4[BANK0 ] unsigned char 
  4842 ;;  _val            4    7[BANK0 ] struct .
  4843 ;;  width           2   12[BANK0 ] int 
  4844 ;;  c               1   14[BANK0 ] char 
  4845 ;;  flag            1   11[BANK0 ] unsigned char 
  4846 ;;  prec            1    6[BANK0 ] char 
  4847 ;;  ap              1    5[BANK0 ] PTR void [1]
  4848 ;;		 -> ?_printf(2), 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  2   12[COMMON] int 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 1F/0
  4855 ;;		On exit  : 1F/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4858 ;;      Params:         2       0       0       0
  4859 ;;      Locals:         0      11       0       0
  4860 ;;      Temps:          0       4       0       0
  4861 ;;      Totals:         2      15       0       0
  4862 ;;Total ram usage:       17 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    2
  4865 ;; This function calls:
  4866 ;;		___lwdiv
  4867 ;;		___lwmod
  4868 ;;		___wmul
  4869 ;;		_isdigit
  4870 ;;		_putch
  4871 ;; This function is called by:
  4872 ;;		_RfHalTickTxTh
  4873 ;;		_CCBufRdByte
  4874 ;;		_CCBufPeekByte
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function _printf
  4880  0403                     _printf:	
  4881                           
  4882                           ;doprnt.c: 466: va_list ap;
  4883                           ;doprnt.c: 499: signed char c;
  4884                           ;doprnt.c: 501: int width;
  4885                           ;doprnt.c: 506: signed char prec;
  4886                           ;doprnt.c: 508: unsigned char flag;
  4887                           ;doprnt.c: 527: union {
  4888                           ;doprnt.c: 528: unsigned int _val;
  4889                           ;doprnt.c: 529: struct {
  4890                           ;doprnt.c: 530: const char * _cp;
  4891                           ;doprnt.c: 531: unsigned _len;
  4892                           ;doprnt.c: 532: } _str;
  4893                           ;doprnt.c: 533: } _val;
  4894                           ;doprnt.c: 542: *ap = __va_start();
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4898  0403  307E               	movlw	(?_printf+2)& (0+255)
  4899  0404  00D6               	movwf	printf@ap
  4900  0405                     l2521:	
  4901                           ;doprnt.c: 545: while(c = *f++) {
  4902                           
  4903  0405  25B0  3184         	fcall	PL10	;call to abstracted procedure
  4904  0407  08DF               	movf	printf@c,f
  4905  0408  1903               	btfsc	3,2
  4906  0409  0008               	return
  4907                           
  4908                           ;doprnt.c: 547: if(c != '%')
  4909  040A  3A25               	xorlw	37
  4910  040B  1903               	skipnz
  4911  040C  2C11               	goto	l2403
  4912                           
  4913                           ;doprnt.c: 549: {
  4914                           ;doprnt.c: 550: (putch(c) );
  4915  040D  085F               	movf	printf@c,w
  4916  040E  2541  3184         	fcall	_putch
  4917                           
  4918                           ;doprnt.c: 551: continue;
  4919  0410  2C05               	goto	l2521
  4920  0411                     l2403:	
  4921                           
  4922                           ;doprnt.c: 552: }
  4923                           ;doprnt.c: 555: width = 0;
  4924  0411  01DD               	clrf	printf@width
  4925  0412  01DE               	clrf	printf@width+1
  4926                           
  4927                           ;doprnt.c: 557: flag = 0;
  4928  0413  01DC               	clrf	printf@flag
  4929  0414  2C19               	goto	l2409
  4930  0415                     l608:	
  4931                           ;doprnt.c: 588: case '0':
  4932                           
  4933                           
  4934                           ;doprnt.c: 589: flag |= 0x04;
  4935  0415  155C               	bsf	printf@flag,2
  4936                           
  4937                           ;doprnt.c: 590: f++;
  4938  0416  0AFC               	incf	printf@f,f
  4939  0417  1903               	skipnz
  4940  0418  0AFD               	incf	printf@f+1,f
  4941  0419                     l2409:	
  4942                           ;doprnt.c: 591: continue;
  4943                           
  4944  0419  087C               	movf	printf@f,w
  4945  041A  25EB  3184         	fcall	PL36	;call to abstracted procedure
  4946                           
  4947                           ; Switch size 1, requested type "space"
  4948                           ; Number of cases is 1, Range of values is 48 to 48
  4949                           ; switch strategies available:
  4950                           ; Name         Instructions Cycles
  4951                           ; simple_byte            4     3 (average)
  4952                           ; direct_byte           11     9 (fixed)
  4953                           ; jumptable            263     9 (fixed)
  4954                           ;	Chosen strategy is simple_byte
  4955  041C  3A30               	xorlw	48	; case 48
  4956  041D  1903               	skipnz
  4957  041E  2C15               	goto	l608
  4958  041F  2C20               	goto	l2411
  4959  0420                     l2411:	
  4960                           
  4961                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4962  0420  25E5  3184         	fcall	PL34	;call to abstracted procedure
  4963  0422  2569  3184         	fcall	_isdigit
  4964  0424  1C03               	btfss	3,0
  4965  0425  2C52               	goto	l2425
  4966                           
  4967                           ;doprnt.c: 607: width = 0;
  4968  0426  01DD               	clrf	printf@width
  4969  0427  01DE               	clrf	printf@width+1
  4970  0428                     l2415:	
  4971                           
  4972                           ;doprnt.c: 609: width *= 10;
  4973  0428  300A               	movlw	10
  4974  0429  00F0               	movwf	___wmul@multiplier
  4975  042A  01F1               	clrf	___wmul@multiplier+1
  4976  042B  085E               	movf	printf@width+1,w
  4977  042C  01F3               	clrf	___wmul@multiplicand+1
  4978  042D  07F3               	addwf	___wmul@multiplicand+1,f
  4979  042E  085D               	movf	printf@width,w
  4980  042F  01F2               	clrf	___wmul@multiplicand
  4981  0430  07F2               	addwf	___wmul@multiplicand,f
  4982  0431  2599  3184         	fcall	___wmul
  4983  0433  0871               	movf	?___wmul+1,w
  4984  0434  01DE               	clrf	printf@width+1
  4985  0435  07DE               	addwf	printf@width+1,f
  4986  0436  0870               	movf	?___wmul,w
  4987  0437  01DD               	clrf	printf@width
  4988  0438  07DD               	addwf	printf@width,f
  4989                           
  4990                           ;doprnt.c: 610: width += *f++ - '0';
  4991  0439  25E5  3184         	fcall	PL34	;call to abstracted procedure
  4992  043B  3ED0               	addlw	208
  4993  043C  00D1               	movwf	??_printf
  4994  043D  30FF               	movlw	255
  4995  043E  1803               	skipnc
  4996  043F  3000               	movlw	0
  4997  0440  00D2               	movwf	??_printf+1
  4998  0441  0851               	movf	??_printf,w
  4999  0442  07DD               	addwf	printf@width,f
  5000  0443  0852               	movf	??_printf+1,w
  5001  0444  3DDE               	addwfc	printf@width+1,f
  5002  0445  0AFC               	incf	printf@f,f
  5003  0446  1903               	skipnz
  5004  0447  0AFD               	incf	printf@f+1,f
  5005                           
  5006                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5007  0448  087C               	movf	printf@f,w
  5008  0449  25EB  3184         	fcall	PL36	;call to abstracted procedure
  5009  044B  2569  3184         	fcall	_isdigit
  5010  044D  1C03               	btfss	3,0
  5011  044E  2C52               	goto	l2425
  5012  044F  2C28               	goto	l2415
  5013  0450                     l622:	
  5014                           
  5015                           ;doprnt.c: 727: case 'x':
  5016                           ;doprnt.c: 730: flag |= 0x80;
  5017  0450  17DC               	bsf	printf@flag,7
  5018                           
  5019                           ;doprnt.c: 732: break;
  5020  0451  2C64               	goto	l620
  5021  0452                     l2425:	
  5022  0452  25B0  3184         	fcall	PL10	;call to abstracted procedure
  5023                           
  5024                           ; Switch size 1, requested type "space"
  5025                           ; Number of cases is 5, Range of values is 0 to 120
  5026                           ; switch strategies available:
  5027                           ; Name         Instructions Cycles
  5028                           ; simple_byte           16     9 (average)
  5029                           ; direct_byte          248     6 (fixed)
  5030                           ; jumptable            260     6 (fixed)
  5031                           ;	Chosen strategy is simple_byte
  5032  0454  3A00               	xorlw	0	; case 0
  5033  0455  1903               	skipnz
  5034  0456  2D40               	goto	l658
  5035  0457  3A58               	xorlw	88	; case 88
  5036  0458  1903               	skipnz
  5037  0459  2C50               	goto	l622
  5038  045A  3A3C               	xorlw	60	; case 100
  5039  045B  1903               	skipnz
  5040  045C  2C64               	goto	l620
  5041  045D  3A0D               	xorlw	13	; case 105
  5042  045E  1903               	skipnz
  5043  045F  2C64               	goto	l620
  5044  0460  3A11               	xorlw	17	; case 120
  5045  0461  1903               	skipnz
  5046  0462  2C50               	goto	l622
  5047  0463  2C05               	goto	l2521
  5048  0464                     l620:	
  5049                           
  5050                           ;doprnt.c: 1260: if((flag & 0x80) == 0x00)
  5051  0464  1BDC               	btfsc	printf@flag,7
  5052  0465  2C73               	goto	l2437
  5053                           
  5054                           ;doprnt.c: 1262: {
  5055                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5056  0466  0856               	movf	printf@ap,w
  5057  0467  25D5  3184         	fcall	PL18	;call to abstracted procedure
  5058                           
  5059                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  5060  0469  1FD9               	btfss	printf@_val+1,7
  5061  046A  2CA1               	goto	l2467
  5062                           
  5063                           ;doprnt.c: 1271: flag |= 0x03;
  5064  046B  3003               	movlw	3
  5065  046C  04DC               	iorwf	printf@flag,f
  5066                           
  5067                           ;doprnt.c: 1272: _val._val = -_val._val;
  5068  046D  09D8               	comf	printf@_val,f
  5069  046E  09D9               	comf	printf@_val+1,f
  5070  046F  0AD8               	incf	printf@_val,f
  5071  0470  1903               	skipnz
  5072  0471  0AD9               	incf	printf@_val+1,f
  5073  0472  2CA1               	goto	l2467
  5074  0473                     l2437:	
  5075                           
  5076                           ;doprnt.c: 1277: else
  5077                           ;doprnt.c: 1282: {
  5078                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5079  0473  0856               	movf	printf@ap,w
  5080  0474  25D5  3184         	fcall	PL18	;call to abstracted procedure
  5081  0476  2CA1               	goto	l2467
  5082  0477                     l628:	
  5083                           ;doprnt.c: 1308: case 0x00:
  5084                           
  5085                           
  5086                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5087  0477  01DF               	clrf	printf@c
  5088  0478  0ADF               	incf	printf@c,f
  5089  0479                     l2445:	
  5090                           
  5091                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5092  0479  085F               	movf	printf@c,w
  5093  047A  25C9  3184         	fcall	PL14	;call to abstracted procedure
  5094  047C  00D3               	movwf	??_printf+2
  5095  047D  3F01               	moviw [1]fsr0
  5096  047E  00D4               	movwf	??_printf+3
  5097  047F  0259               	subwf	printf@_val+1,w
  5098  0480  1D03               	skipz
  5099  0481  2C84               	goto	u1135
  5100  0482  0853               	movf	??_printf+2,w
  5101  0483  0258               	subwf	printf@_val,w
  5102  0484                     u1135:	
  5103  0484  1C03               	btfss	3,0
  5104  0485  2CA9               	goto	l2469
  5105  0486  0ADF               	incf	printf@c,f
  5106  0487  085F               	movf	printf@c,w
  5107  0488  3A05               	xorlw	5
  5108  0489  1903               	btfsc	3,2
  5109  048A  2CA9               	goto	l2469
  5110  048B  2C79               	goto	l2445
  5111  048C                     l633:	
  5112                           ;doprnt.c: 1323: case 0x80:
  5113                           
  5114                           
  5115                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5116  048C  01DF               	clrf	printf@c
  5117  048D  0ADF               	incf	printf@c,f
  5118  048E                     l2457:	
  5119                           
  5120                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  5121  048E  085F               	movf	printf@c,w
  5122  048F  25BD  3184         	fcall	PL12	;call to abstracted procedure
  5123  0491  00D3               	movwf	??_printf+2
  5124  0492  3F01               	moviw [1]fsr0
  5125  0493  00D4               	movwf	??_printf+3
  5126  0494  0259               	subwf	printf@_val+1,w
  5127  0495  1D03               	skipz
  5128  0496  2C99               	goto	u1155
  5129  0497  0853               	movf	??_printf+2,w
  5130  0498  0258               	subwf	printf@_val,w
  5131  0499                     u1155:	
  5132  0499  1C03               	btfss	3,0
  5133  049A  2CA9               	goto	l2469
  5134  049B  0ADF               	incf	printf@c,f
  5135  049C  085F               	movf	printf@c,w
  5136  049D  3A04               	xorlw	4
  5137  049E  1903               	btfsc	3,2
  5138  049F  2CA9               	goto	l2469
  5139  04A0  2C8E               	goto	l2457
  5140  04A1                     l2467:	
  5141  04A1  085C               	movf	printf@flag,w
  5142  04A2  3980               	andlw	128
  5143                           
  5144                           ; Switch size 1, requested type "space"
  5145                           ; Number of cases is 2, Range of values is 0 to 128
  5146                           ; switch strategies available:
  5147                           ; Name         Instructions Cycles
  5148                           ; simple_byte            7     4 (average)
  5149                           ; jumptable            260     6 (fixed)
  5150                           ;	Chosen strategy is simple_byte
  5151  04A3  1903               	skipnz
  5152  04A4  2C77               	goto	l628
  5153  04A5  3A80               	xorlw	128	; case 128
  5154  04A6  1903               	skipnz
  5155  04A7  2C8C               	goto	l633
  5156  04A8  2CA9               	goto	l2469
  5157  04A9                     l2469:	
  5158                           
  5159                           ;doprnt.c: 1354: if(width && flag & 0x03)
  5160  04A9  085E               	movf	printf@width+1,w
  5161  04AA  045D               	iorwf	printf@width,w
  5162  04AB  1903               	skipnz
  5163  04AC  2CB5               	goto	l2475
  5164  04AD  085C               	movf	printf@flag,w
  5165  04AE  3903               	andlw	3
  5166  04AF  1903               	btfsc	3,2
  5167  04B0  2CB5               	goto	l2475
  5168                           
  5169                           ;doprnt.c: 1355: width--;
  5170  04B1  30FF               	movlw	-1
  5171  04B2  07DD               	addwf	printf@width,f
  5172  04B3  1C03               	skipc
  5173  04B4  03DE               	decf	printf@width+1,f
  5174  04B5                     l2475:	
  5175                           
  5176                           ;doprnt.c: 1390: if(width > c)
  5177  04B5  085F               	movf	printf@c,w
  5178  04B6  00D1               	movwf	??_printf
  5179  04B7  01D2               	clrf	??_printf+1
  5180  04B8  1BD1               	btfsc	??_printf,7
  5181  04B9  03D2               	decf	??_printf+1,f
  5182  04BA  0852               	movf	??_printf+1,w
  5183  04BB  3A80               	xorlw	128
  5184  04BC  00D3               	movwf	??_printf+2
  5185  04BD  085E               	movf	printf@width+1,w
  5186  04BE  3A80               	xorlw	128
  5187  04BF  0253               	subwf	??_printf+2,w
  5188  04C0  1D03               	skipz
  5189  04C1  2CC4               	goto	u1195
  5190  04C2  085D               	movf	printf@width,w
  5191  04C3  0251               	subwf	??_printf,w
  5192  04C4                     u1195:	
  5193  04C4  1803               	skipnc
  5194  04C5  2CD0               	goto	l2479
  5195                           
  5196                           ;doprnt.c: 1391: width -= c;
  5197  04C6  0020               	movlb	0	; select bank0
  5198  04C7  085F               	movf	printf@c,w
  5199  04C8  00D1               	movwf	??_printf
  5200  04C9  01D2               	clrf	??_printf+1
  5201  04CA  1BD1               	btfsc	??_printf,7
  5202  04CB  03D2               	decf	??_printf+1,f
  5203  04CC  02DD               	subwf	printf@width,f
  5204  04CD  0852               	movf	??_printf+1,w
  5205  04CE  3BDE               	subwfb	printf@width+1,f
  5206  04CF  2CD3               	goto	l2481
  5207  04D0                     l2479:	
  5208                           
  5209                           ;doprnt.c: 1392: else
  5210                           ;doprnt.c: 1393: width = 0;
  5211  04D0  0020               	movlb	0	; select bank0
  5212  04D1  01DD               	clrf	printf@width
  5213  04D2  01DE               	clrf	printf@width+1
  5214  04D3                     l2481:	
  5215                           
  5216                           ;doprnt.c: 1396: if(flag & 0x04) {
  5217  04D3  1D5C               	btfss	printf@flag,2
  5218  04D4  2CE8               	goto	l2493
  5219                           
  5220                           ;doprnt.c: 1401: if(flag & 0x03)
  5221  04D5  085C               	movf	printf@flag,w
  5222  04D6  3903               	andlw	3
  5223  04D7  1903               	btfsc	3,2
  5224  04D8  2CDC               	goto	l2487
  5225                           
  5226                           ;doprnt.c: 1402: (putch('-') );
  5227  04D9  302D               	movlw	45
  5228  04DA  2541  3184         	fcall	_putch
  5229  04DC                     l2487:	
  5230                           
  5231                           ;doprnt.c: 1424: if(width)
  5232  04DC  085E               	movf	printf@width+1,w
  5233  04DD  045D               	iorwf	printf@width,w
  5234  04DE  1903               	skipnz
  5235  04DF  2CFE               	goto	l2503
  5236                           
  5237                           ;doprnt.c: 1426: (putch('0') );
  5238  04E0  3030               	movlw	48
  5239  04E1  2541  3184         	fcall	_putch
  5240                           
  5241                           ;doprnt.c: 1427: while(--width);
  5242  04E3  30FF               	movlw	-1
  5243  04E4  07DD               	addwf	printf@width,f
  5244  04E5  1C03               	skipc
  5245  04E6  03DE               	decf	printf@width+1,f
  5246  04E7  2CDC               	goto	l2487
  5247  04E8                     l2493:	
  5248                           
  5249                           ;doprnt.c: 1431: {
  5250                           ;doprnt.c: 1433: if(width
  5251                           ;doprnt.c: 1437: )
  5252  04E8  085E               	movf	printf@width+1,w
  5253  04E9  045D               	iorwf	printf@width,w
  5254  04EA  1903               	skipnz
  5255  04EB  2CF7               	goto	l2499
  5256  04EC                     l2495:	
  5257                           
  5258                           ;doprnt.c: 1439: (putch(' ') );
  5259  04EC  3020               	movlw	32
  5260  04ED  2541  3184         	fcall	_putch
  5261                           
  5262                           ;doprnt.c: 1440: while(--width);
  5263  04EF  30FF               	movlw	-1
  5264  04F0  07DD               	addwf	printf@width,f
  5265  04F1  1C03               	skipc
  5266  04F2  03DE               	decf	printf@width+1,f
  5267  04F3  085E               	movf	printf@width+1,w
  5268  04F4  045D               	iorwf	printf@width,w
  5269  04F5  1D03               	skipz
  5270  04F6  2CEC               	goto	l2495
  5271  04F7                     l2499:	
  5272                           
  5273                           ;doprnt.c: 1447: if(flag & 0x03)
  5274  04F7  085C               	movf	printf@flag,w
  5275  04F8  3903               	andlw	3
  5276  04F9  1903               	btfsc	3,2
  5277  04FA  2CFE               	goto	l2503
  5278                           
  5279                           ;doprnt.c: 1448: (putch('-') );
  5280  04FB  302D               	movlw	45
  5281  04FC  2541  3184         	fcall	_putch
  5282  04FE                     l2503:	
  5283                           
  5284                           ;doprnt.c: 1478: }
  5285                           ;doprnt.c: 1481: prec = c;
  5286  04FE  085F               	movf	printf@c,w
  5287  04FF  00D7               	movwf	printf@prec
  5288                           
  5289                           ;doprnt.c: 1483: while(prec--) {
  5290  0500  2D3C               	goto	l2519
  5291  0501                     l2505:	
  5292                           
  5293                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5294  0501  300A               	movlw	10
  5295  0502  00F7               	movwf	___lwmod@divisor
  5296  0503  01F8               	clrf	___lwmod@divisor+1
  5297  0504  0857               	movf	printf@prec,w
  5298  0505  25C9  3184         	fcall	PL14	;call to abstracted procedure
  5299  0507  00F0               	movwf	___lwdiv@divisor
  5300  0508  3F01               	moviw [1]fsr0
  5301  0509  00F1               	movwf	___lwdiv@divisor+1
  5302  050A  25DE  3184         	fcall	PL32	;call to abstracted procedure
  5303  050C  2542  3184         	fcall	___lwdiv
  5304  050E  0871               	movf	?___lwdiv+1,w
  5305  050F  01FA               	clrf	___lwmod@dividend+1
  5306  0510  07FA               	addwf	___lwmod@dividend+1,f
  5307  0511  0870               	movf	?___lwdiv,w
  5308  0512  01F9               	clrf	___lwmod@dividend
  5309  0513  07F9               	addwf	___lwmod@dividend,f
  5310  0514  2577  3184         	fcall	___lwmod
  5311  0516  0877               	movf	?___lwmod,w
  5312  0517  3E30               	addlw	48
  5313  0518  2D2F               	goto	L4
  5314  0519                     l2507:	
  5315                           ;doprnt.c: 1500: break;
  5316                           
  5317                           
  5318                           ;doprnt.c: 1508: {
  5319                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  5320  0519  25DE  3184         	fcall	PL32	;call to abstracted procedure
  5321  051B  0857               	movf	printf@prec,w
  5322  051C  25BD  3184         	fcall	PL12	;call to abstracted procedure
  5323  051E  00F0               	movwf	___lwdiv@divisor
  5324  051F  3F01               	moviw [1]fsr0
  5325  0520  00F1               	movwf	___lwdiv@divisor+1
  5326  0521  2542  3184         	fcall	___lwdiv
  5327  0523  0870               	movf	?___lwdiv,w
  5328  0524  00D5               	movwf	printf@idx
  5329  0525  300F               	movlw	15
  5330  0526  05D5               	andwf	printf@idx,f
  5331                           
  5332                           ;doprnt.c: 1513: c = "0123456789ABCDEF"[idx];
  5333  0527  0855               	movf	printf@idx,w
  5334  0528  3E49               	addlw	low (STR_15| (0+32768))
  5335  0529  0084               	movwf	4
  5336  052A  3087               	movlw	high (STR_15| (0+32768))
  5337  052B  1803               	skipnc
  5338  052C  3E01               	addlw	1
  5339  052D  0085               	movwf	5
  5340  052E  0800               	movf	0,w	;code access
  5341  052F                     L4:	
  5342  052F  00DF               	movwf	printf@c
  5343                           
  5344                           ;doprnt.c: 1517: }
  5345                           ;doprnt.c: 1519: break;
  5346  0530  2D39               	goto	l2517
  5347  0531                     l2515:	
  5348  0531  085C               	movf	printf@flag,w
  5349  0532  3980               	andlw	128
  5350                           
  5351                           ; Switch size 1, requested type "space"
  5352                           ; Number of cases is 2, Range of values is 0 to 128
  5353                           ; switch strategies available:
  5354                           ; Name         Instructions Cycles
  5355                           ; simple_byte            7     4 (average)
  5356                           ; jumptable            260     6 (fixed)
  5357                           ;	Chosen strategy is simple_byte
  5358  0533  1903               	skipnz
  5359  0534  2D01               	goto	l2505
  5360  0535  3A80               	xorlw	128	; case 128
  5361  0536  1903               	skipnz
  5362  0537  2D19               	goto	l2507
  5363  0538  2D39               	goto	l2517
  5364  0539                     l2517:	
  5365                           
  5366                           ;doprnt.c: 1533: (putch(c) );
  5367  0539  085F               	movf	printf@c,w
  5368  053A  2541  3184         	fcall	_putch
  5369  053C                     l2519:	
  5370  053C  03D7               	decf	printf@prec,f
  5371  053D  0F57               	incfsz	printf@prec,w
  5372  053E  2D31               	goto	l2515
  5373  053F  2C05               	goto	l2521
  5374  0540                     l658:	
  5375  0540  0008               	return
  5376  0541                     __end_of_printf:	
  5377  0541                     __ptext20:	
  5378 ;; *************** function _putch *****************
  5379 ;; Defined at:
  5380 ;;		line 7 in file "/opt/microchip/xc8/v1.30/sources/common/putch.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  c               1    wreg     unsigned char 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  c               1    0[COMMON] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;		None               void
  5387 ;; Registers used:
  5388 ;;		wreg
  5389 ;; Tracked objects:
  5390 ;;		On entry : 1F/0
  5391 ;;		On exit  : 1F/0
  5392 ;;		Unchanged: 1F/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5394 ;;      Params:         0       0       0       0
  5395 ;;      Locals:         0       0       0       0
  5396 ;;      Temps:          0       0       0       0
  5397 ;;      Totals:         0       0       0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    1
  5401 ;; This function calls:
  5402 ;;		Nothing
  5403 ;; This function is called by:
  5404 ;;		_printf
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _putch
  5410  0541                     _putch:	
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _putch: [wreg]
  5414  0541  0008               	return
  5415  0542                     __end_of_putch:	
  5416  0542                     __ptext24:	
  5417 ;; *************** function ___lwdiv *****************
  5418 ;; Defined at:
  5419 ;;		line 6 in file "/opt/microchip/xc8/v1.30/sources/common/lwdiv.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;  divisor         2    0[COMMON] unsigned int 
  5422 ;;  dividend        2    2[COMMON] unsigned int 
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;  quotient        2    4[COMMON] unsigned int 
  5425 ;;  counter         1    6[COMMON] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  2    0[COMMON] unsigned int 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0
  5430 ;; Tracked objects:
  5431 ;;		On entry : 1F/0
  5432 ;;		On exit  : 1F/0
  5433 ;;		Unchanged: 1F/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5435 ;;      Params:         4       0       0       0
  5436 ;;      Locals:         3       0       0       0
  5437 ;;      Temps:          0       0       0       0
  5438 ;;      Totals:         7       0       0       0
  5439 ;;Total ram usage:        7 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    1
  5442 ;; This function calls:
  5443 ;;		Nothing
  5444 ;; This function is called by:
  5445 ;;		_printf
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           
  5450                           ;psect for function ___lwdiv
  5451  0542                     ___lwdiv:	
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5455  0542  01F4               	clrf	___lwdiv@quotient
  5456  0543  01F5               	clrf	___lwdiv@quotient+1
  5457  0544  0871               	movf	___lwdiv@divisor+1,w
  5458  0545  0470               	iorwf	___lwdiv@divisor,w
  5459  0546  1903               	skipnz
  5460  0547  2D62               	goto	l2811
  5461  0548  01F6               	clrf	___lwdiv@counter
  5462  0549                     L6:	
  5463  0549  0AF6               	incf	___lwdiv@counter,f
  5464  054A  1BF1               	btfsc	___lwdiv@divisor+1,7
  5465  054B  2D4F               	goto	l2799
  5466  054C  35F0               	lslf	___lwdiv@divisor,f
  5467  054D  0DF1               	rlf	___lwdiv@divisor+1,f
  5468  054E  2D49               	goto	L6
  5469  054F                     l2799:	
  5470  054F  35F4               	lslf	___lwdiv@quotient,f
  5471  0550  0DF5               	rlf	___lwdiv@quotient+1,f
  5472  0551  0871               	movf	___lwdiv@divisor+1,w
  5473  0552  0273               	subwf	___lwdiv@dividend+1,w
  5474  0553  1D03               	skipz
  5475  0554  2D57               	goto	u1645
  5476  0555  0870               	movf	___lwdiv@divisor,w
  5477  0556  0272               	subwf	___lwdiv@dividend,w
  5478  0557                     u1645:	
  5479  0557  1C03               	skipc
  5480  0558  2D5E               	goto	l2807
  5481  0559  0870               	movf	___lwdiv@divisor,w
  5482  055A  02F2               	subwf	___lwdiv@dividend,f
  5483  055B  0871               	movf	___lwdiv@divisor+1,w
  5484  055C  3BF3               	subwfb	___lwdiv@dividend+1,f
  5485  055D  1474               	bsf	___lwdiv@quotient,0
  5486  055E                     l2807:	
  5487  055E  36F1               	lsrf	___lwdiv@divisor+1,f
  5488  055F  0CF0               	rrf	___lwdiv@divisor,f
  5489  0560  0BF6               	decfsz	___lwdiv@counter,f
  5490  0561  2D4F               	goto	l2799
  5491  0562                     l2811:	
  5492  0562  0875               	movf	___lwdiv@quotient+1,w
  5493  0563  01F1               	clrf	?___lwdiv+1
  5494  0564  07F1               	addwf	?___lwdiv+1,f
  5495  0565  0874               	movf	___lwdiv@quotient,w
  5496  0566  01F0               	clrf	?___lwdiv
  5497  0567  07F0               	addwf	?___lwdiv,f
  5498  0568  0008               	return
  5499  0569                     __end_of___lwdiv:	
  5500  0569                     __ptext21:	
  5501 ;; *************** function _isdigit *****************
  5502 ;; Defined at:
  5503 ;;		line 8 in file "/opt/microchip/xc8/v1.30/sources/common/isdigit.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  c               1    wreg     unsigned char 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  c               1    1[COMMON] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;		None               void
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0
  5512 ;; Tracked objects:
  5513 ;;		On entry : 1F/0
  5514 ;;		On exit  : 1F/0
  5515 ;;		Unchanged: 1F/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5517 ;;      Params:         0       0       0       0
  5518 ;;      Locals:         2       0       0       0
  5519 ;;      Temps:          0       0       0       0
  5520 ;;      Totals:         2       0       0       0
  5521 ;;Total ram usage:        2 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    1
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_printf
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           
  5532                           ;psect for function _isdigit
  5533  0569                     _isdigit:	
  5534                           
  5535                           ;incstack = 0
  5536                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5537                           ;isdigit@c stored from wreg
  5538  0569  00F1               	movwf	isdigit@c
  5539  056A  303A               	movlw	58
  5540  056B  01F0               	clrf	_isdigit$1077
  5541  056C  0271               	subwf	isdigit@c,w
  5542  056D  1803               	skipnc
  5543  056E  2D75               	goto	l2769
  5544  056F  3030               	movlw	48
  5545  0570  0271               	subwf	isdigit@c,w
  5546  0571  1C03               	skipc
  5547  0572  2D75               	goto	l2769
  5548  0573  01F0               	clrf	_isdigit$1077
  5549  0574  0AF0               	incf	_isdigit$1077,f
  5550  0575                     l2769:	
  5551  0575  0C70               	rrf	_isdigit$1077,w
  5552  0576  0008               	return
  5553  0577                     __end_of_isdigit:	
  5554  0577                     __ptext23:	
  5555 ;; *************** function ___lwmod *****************
  5556 ;; Defined at:
  5557 ;;		line 6 in file "/opt/microchip/xc8/v1.30/sources/common/lwmod.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  divisor         2    7[COMMON] unsigned int 
  5560 ;;  dividend        2    9[COMMON] unsigned int 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  counter         1   11[COMMON] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  2    7[COMMON] unsigned int 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0
  5567 ;; Tracked objects:
  5568 ;;		On entry : 1F/0
  5569 ;;		On exit  : 1F/0
  5570 ;;		Unchanged: 1F/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5572 ;;      Params:         4       0       0       0
  5573 ;;      Locals:         1       0       0       0
  5574 ;;      Temps:          0       0       0       0
  5575 ;;      Totals:         5       0       0       0
  5576 ;;Total ram usage:        5 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    1
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_printf
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           
  5587                           ;psect for function ___lwmod
  5588  0577                     ___lwmod:	
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5592  0577  0878               	movf	___lwmod@divisor+1,w
  5593  0578  0477               	iorwf	___lwmod@divisor,w
  5594  0579  1903               	skipnz
  5595  057A  2D92               	goto	l2831
  5596  057B  01FB               	clrf	___lwmod@counter
  5597  057C                     L5:	
  5598  057C  0AFB               	incf	___lwmod@counter,f
  5599  057D  1BF8               	btfsc	___lwmod@divisor+1,7
  5600  057E  2D82               	goto	l2823
  5601  057F  35F7               	lslf	___lwmod@divisor,f
  5602  0580  0DF8               	rlf	___lwmod@divisor+1,f
  5603  0581  2D7C               	goto	L5
  5604  0582                     l2823:	
  5605  0582  0878               	movf	___lwmod@divisor+1,w
  5606  0583  027A               	subwf	___lwmod@dividend+1,w
  5607  0584  1D03               	skipz
  5608  0585  2D88               	goto	u1685
  5609  0586  0877               	movf	___lwmod@divisor,w
  5610  0587  0279               	subwf	___lwmod@dividend,w
  5611  0588                     u1685:	
  5612  0588  1C03               	skipc
  5613  0589  2D8E               	goto	l2827
  5614  058A  0877               	movf	___lwmod@divisor,w
  5615  058B  02F9               	subwf	___lwmod@dividend,f
  5616  058C  0878               	movf	___lwmod@divisor+1,w
  5617  058D  3BFA               	subwfb	___lwmod@dividend+1,f
  5618  058E                     l2827:	
  5619  058E  36F8               	lsrf	___lwmod@divisor+1,f
  5620  058F  0CF7               	rrf	___lwmod@divisor,f
  5621  0590  0BFB               	decfsz	___lwmod@counter,f
  5622  0591  2D82               	goto	l2823
  5623  0592                     l2831:	
  5624  0592  087A               	movf	___lwmod@dividend+1,w
  5625  0593  01F8               	clrf	?___lwmod+1
  5626  0594  07F8               	addwf	?___lwmod+1,f
  5627  0595  0879               	movf	___lwmod@dividend,w
  5628  0596  01F7               	clrf	?___lwmod
  5629  0597  07F7               	addwf	?___lwmod,f
  5630  0598  0008               	return
  5631  0599                     __end_of___lwmod:	
  5632  0599                     __ptext22:	
  5633 ;; *************** function ___wmul *****************
  5634 ;; Defined at:
  5635 ;;		line 4 in file "/opt/microchip/xc8/v1.30/sources/common/wmul.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  multiplier      2    0[COMMON] unsigned int 
  5638 ;;  multiplicand    2    2[COMMON] unsigned int 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  product         2    4[COMMON] unsigned int 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  2    0[COMMON] unsigned int 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0
  5645 ;; Tracked objects:
  5646 ;;		On entry : 1F/0
  5647 ;;		On exit  : 1F/0
  5648 ;;		Unchanged: 1F/0
  5649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5650 ;;      Params:         4       0       0       0
  5651 ;;      Locals:         2       0       0       0
  5652 ;;      Temps:          0       0       0       0
  5653 ;;      Totals:         6       0       0       0
  5654 ;;Total ram usage:        6 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    1
  5657 ;; This function calls:
  5658 ;;		Nothing
  5659 ;; This function is called by:
  5660 ;;		_printf
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           
  5665                           ;psect for function ___wmul
  5666  0599                     ___wmul:	
  5667                           
  5668                           ;incstack = 0
  5669                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5670  0599  01F4               	clrf	___wmul@product
  5671  059A  01F5               	clrf	___wmul@product+1
  5672  059B                     l2837:	
  5673  059B  1C70               	btfss	___wmul@multiplier,0
  5674  059C  2DA1               	goto	l2841
  5675  059D  0872               	movf	___wmul@multiplicand,w
  5676  059E  07F4               	addwf	___wmul@product,f
  5677  059F  0873               	movf	___wmul@multiplicand+1,w
  5678  05A0  3DF5               	addwfc	___wmul@product+1,f
  5679  05A1                     l2841:	
  5680  05A1  35F2               	lslf	___wmul@multiplicand,f
  5681  05A2  0DF3               	rlf	___wmul@multiplicand+1,f
  5682  05A3  36F1               	lsrf	___wmul@multiplier+1,f
  5683  05A4  0CF0               	rrf	___wmul@multiplier,f
  5684  05A5  0871               	movf	___wmul@multiplier+1,w
  5685  05A6  0470               	iorwf	___wmul@multiplier,w
  5686  05A7  1D03               	skipz
  5687  05A8  2D9B               	goto	l2837
  5688  05A9  0875               	movf	___wmul@product+1,w
  5689  05AA  01F1               	clrf	?___wmul+1
  5690  05AB  07F1               	addwf	?___wmul+1,f
  5691  05AC  0874               	movf	___wmul@product,w
  5692  05AD  01F0               	clrf	?___wmul
  5693  05AE  07F0               	addwf	?___wmul,f
  5694  05AF  0008               	return
  5695  05B0                     __end_of___wmul:	
  5696  05B0                     PL10:	
  5697  05B0  087D               	movf	printf@f+1,w
  5698  05B1  00D2               	movwf	??_printf+1
  5699  05B2  087C               	movf	printf@f,w
  5700  05B3  00D1               	movwf	??_printf
  5701  05B4  0AFC               	incf	printf@f,f
  5702  05B5  1903               	skipnz
  5703  05B6  0AFD               	incf	printf@f+1,f
  5704  05B7  0084               	movwf	4
  5705  05B8  0852               	movf	??_printf+1,w
  5706  05B9  0085               	movwf	5
  5707  05BA  0800               	movf	0,w	;code access
  5708  05BB  00DF               	movwf	printf@c
  5709  05BC  0008               	return
  5710  05BD                     __end_ofPL10:	
  5711  05BD                     PL12:	
  5712  05BD  00D1               	movwf	??_printf
  5713  05BE  300B               	movlw	low (_hexpowers| (0+32768))
  5714  05BF  01D2               	clrf	??_printf+1
  5715  05C0  35D1               	lslf	??_printf,f
  5716  05C1  0DD2               	rlf	??_printf+1,f
  5717  05C2  0751               	addwf	??_printf,w
  5718  05C3  0084               	movwf	4
  5719  05C4  3086               	movlw	high (_hexpowers| (0+32768))
  5720  05C5  3D52               	addwfc	??_printf+1,w
  5721  05C6  0085               	movwf	5
  5722  05C7  3F00               	moviw [0]fsr0
  5723  05C8  0008               	return
  5724  05C9                     __end_ofPL12:	
  5725  05C9                     PL14:	
  5726  05C9  00D1               	movwf	??_printf
  5727  05CA  3001               	movlw	low (_dpowers| (0+32768))
  5728  05CB  01D2               	clrf	??_printf+1
  5729  05CC  35D1               	lslf	??_printf,f
  5730  05CD  0DD2               	rlf	??_printf+1,f
  5731  05CE  0751               	addwf	??_printf,w
  5732  05CF  0084               	movwf	4
  5733  05D0  3086               	movlw	high (_dpowers| (0+32768))
  5734  05D1  3D52               	addwfc	??_printf+1,w
  5735  05D2  0085               	movwf	5
  5736  05D3  3F00               	moviw [0]fsr0
  5737  05D4  0008               	return
  5738  05D5                     __end_ofPL14:	
  5739  05D5                     PL18:	
  5740  05D5  0086               	movwf	6
  5741  05D6  0187               	clrf	7
  5742  05D7  3F40               	moviw [0]fsr1
  5743  05D8  00D8               	movwf	printf@_val
  5744  05D9  3F41               	moviw [1]fsr1
  5745  05DA  00D9               	movwf	printf@_val+1
  5746  05DB  0AD6               	incf	printf@ap,f
  5747  05DC  0AD6               	incf	printf@ap,f
  5748  05DD  0008               	return
  5749  05DE                     __end_ofPL18:	
  5750  05DE                     PL32:	
  5751  05DE  0859               	movf	printf@_val+1,w
  5752  05DF  01F3               	clrf	___lwdiv@dividend+1
  5753  05E0  07F3               	addwf	___lwdiv@dividend+1,f
  5754  05E1  0858               	movf	printf@_val,w
  5755  05E2  01F2               	clrf	___lwdiv@dividend
  5756  05E3  07F2               	addwf	___lwdiv@dividend,f
  5757  05E4  0008               	return
  5758  05E5                     __end_ofPL32:	
  5759  05E5                     PL34:	
  5760  05E5  087C               	movf	printf@f,w
  5761  05E6  0084               	movwf	4
  5762  05E7  087D               	movf	printf@f+1,w
  5763  05E8  0085               	movwf	5
  5764  05E9  0800               	movf	0,w	;code access
  5765  05EA  0008               	return
  5766  05EB                     __end_ofPL34:	
  5767  05EB                     PL36:	
  5768  05EB  0084               	movwf	4
  5769  05EC  087D               	movf	printf@f+1,w
  5770  05ED  0085               	movwf	5
  5771  05EE  0800               	movf	0,w	;code access
  5772  05EF  0008               	return
  5773  05F0                     __end_ofPL36:	
  5774                           
  5775                           	psect	intentry
  5776  0004                     __pintentry:	
  5777 ;; *************** function _extInt *****************
  5778 ;; Defined at:
  5779 ;;		line 15 in file "../../../src/bsp/pic16/interrupt.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;		None
  5784 ;; Return value:  Size  Location     Type
  5785 ;;		None               void
  5786 ;; Registers used:
  5787 ;;		None
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5793 ;;      Params:         0       0       0       0
  5794 ;;      Locals:         0       0       0       0
  5795 ;;      Temps:          0       0       0       0
  5796 ;;      Totals:         0       0       0       0
  5797 ;;Total ram usage:        0 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		Interrupt level 1
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806  0004                     _extInt:	
  5807                           
  5808                           ;incstack = 0
  5809                           ; Regs used in _extInt: []
  5810  0004  3180               	pagesel	$
  5811  0005  0009               	retfie
  5812  0006                     __end_of_extInt:	
  5813  007E                     btemp	set	126	;btemp
  5814  007E                     wtemp	set	126
  5815  007E                     wtemp0	set	126
  5816  0080                     wtemp1	set	128
  5817  0082                     wtemp2	set	130
  5818  0084                     wtemp3	set	132
  5819  0086                     wtemp4	set	134
  5820  0088                     wtemp5	set	136
  5821  007F                     wtemp6	set	127
  5822  007E                     ttemp	set	126
  5823  007E                     ttemp0	set	126
  5824  0081                     ttemp1	set	129
  5825  0084                     ttemp2	set	132
  5826  0087                     ttemp3	set	135
  5827  007F                     ttemp4	set	127
  5828  007E                     ltemp	set	126
  5829  007E                     ltemp0	set	126
  5830  0082                     ltemp1	set	130
  5831  0086                     ltemp2	set	134
  5832  0080                     ltemp3	set	128


Data Sizes:
    Strings     333
    Constant    18
    Data        0
    BSS         169
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      77
    BANK1            80      0      56
    BANK2            80      0      64

Pointer List with Targets:

    callback	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 

    memcpy@d1	PTR void  size(1) Largest target is 56
		 -> NULL..(NULL[24]), rfPackets..(BANK1[24]), packet..(BANK0[24]), RfPacketTransmit@packet(BANK0[28]), 
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 56
		 -> NULL..(NULL[24]), rfPackets..(BANK1[24]), packet..(BANK0[24]), RfPacketTransmit@packet(BANK0[28]), 
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    memcpy@s1	PTR const void  size(1) Largest target is 56
		 -> RfPacketsTickTh@scratchpad(BANK0[32]), RfPacketTransmit@packet(BANK0[28]), RfHalTickRxTh@rxPacket(BANK0[28]), NULL(NULL[0]), 
		 -> rfPackets(BANK1[56]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 56
		 -> RfPacketsTickTh@scratchpad(BANK0[32]), RfPacketTransmit@packet(BANK0[28]), RfHalTickRxTh@rxPacket(BANK0[28]), NULL(NULL[0]), 
		 -> rfPackets(BANK1[56]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 67
		 -> STR_14(CODE[32]), STR_13(CODE[21]), STR_12(CODE[21]), STR_11(CODE[27]), 
		 -> STR_10(CODE[31]), STR_9(CODE[67]), STR_8(CODE[38]), STR_7(CODE[2]), 
		 -> STR_6(CODE[6]), STR_5(CODE[53]), STR_4(CODE[2]), STR_3(CODE[6]), 
		 -> STR_2(CODE[53]), STR_1(CODE[41]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    S949$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    CCBufGetRdCount@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufWrByte@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufPeekByte@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufPeekByte@CCDef	PTR struct CircBufDef_s size(1) Largest target is 10
		 -> rfRxCC(BANK0[9]), 

    CCBufRdByte@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufRdByte@CCDef	PTR struct CircBufDef_s size(1) Largest target is 10
		 -> rfRxCC(BANK0[9]), 

    CCBufCanRd@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufCanRd@CCDef	PTR struct CircBufDef_s size(1) Largest target is 10
		 -> rfRxCC(BANK0[9]), 

    CCBufRdReverse@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufRdReverse@CCDef	PTR struct CircBufDef_s size(1) Largest target is 10
		 -> rfRxCC(BANK0[9]), 

    CCBufCanWr@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufCalcPt@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufCalcPt@CCDef	PTR struct CircBufDef_s size(1) Largest target is 10
		 -> rfRxCC(BANK0[9]), 

    CCBufGetFaultStatus@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufReset@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    CCBufInit@CCDef.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    RfPacketsTickTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalRxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__memcpy	PTR void  size(1) Largest target is 56
		 -> NULL..(NULL[24]), rfPackets..(BANK1[24]), packet..(BANK0[24]), RfPacketTransmit@packet(BANK0[28]), 
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalRxPut@rfPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 28
		 -> RfHalTickRxTh@rxPacket(BANK0[28]), 

    RfHalTickRxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halRxBfTh(BANK0[2]), 

    sp__RfHalTxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickTxTh@txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickTxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halTxBfTh(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 64
		 -> rfRxBf(BANK2[64]), rfPackets(BANK1[56]), 

    S347CircBufDef_s$bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    rfRxCC.bf	PTR unsigned char  size(1) Largest target is 64
		 -> rfRxBf(BANK2[64]), 

    S339$txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 


Critical Paths under _main in COMMON

    _RfHalTickTxTh->_printf
    _RfTrcvMode->_MRF49XACommand
    _MRF49XAReset->_MRF49XACommand
    _MRF49XACommand->_SPI_Write
    _RfTrcvCarrierPresent->_MRF49XAReadStatus
    _MRF49XAReadStatus->_SPI_Read
    _RfHalTxGet->___bmul
    _RfHalTickRxTh->_CCBufCanRd
    _RfHalRxPut->_memcpy
    _memcpy->___bmul
    _CCBufRdReverse->_CCBufCalcPt
    _CCBufRdByte->_CCBufCanRd
    _CCBufRdByte->_printf
    _CCBufPeekByte->_CCBufCanRd
    _CCBufPeekByte->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _CCBufCanRd->_CCBufCalcPt

Critical Paths under _extInt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_RfHalTickRxTh
    _RfHalTickTxTh->_printf
    _RfHalTickRxTh->_CCBufPeekByte
    _CCBufRdReverse->_CCBufCalcPt
    _CCBufRdByte->_printf
    _CCBufPeekByte->_printf
    _CCBufCanRd->_CCBufCalcPt

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   34883
                            _AdcInit
                         _ExtIntInit
                      _RfHalTickRxTh
                      _RfHalTickTxTh
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalTickTxTh                                        4     4      0   10660
                                             15 BANK0      3     3      0
                         _RfHalTxGet
               _RfTrcvCarrierPresent
                         _RfTrcvMode
                             _printf
 ---------------------------------------------------------------------------------
 (2) _RfTrcvMode                                           1     1      0    4496
                                              3 COMMON     1     1      0
                     _MRF49XACommand
                       _MRF49XAReset
 ---------------------------------------------------------------------------------
 (3) _MRF49XAReset                                         0     0      0    2237
                     _MRF49XACommand
 ---------------------------------------------------------------------------------
 (4) _MRF49XACommand                                       2     0      2    2237
                                              1 COMMON     2     0      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCarrierPresent                                 2     2      0     120
                                              6 COMMON     2     2      0
                  _MRF49XAReadStatus
 ---------------------------------------------------------------------------------
 (3) _MRF49XAReadStatus                                    4     2      2      97
                                              2 COMMON     4     2      2
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (4) _SPI_Read                                             2     2      0      72
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _RfHalTxGet                                           1     1      0     539
                                              3 COMMON     1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _RfHalTickRxTh                                        7     7      0   24223
                                             22 BANK0      6     6      0
                         _CCBufCanRd
                      _CCBufPeekByte
                        _CCBufRdByte
                     _CCBufRdReverse
                         _RfHalRxPut
                      _RfTrcvCrcTick
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCrcTick                                        2     1      1     209
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxPut                                           2     2      0    1495
                                              9 COMMON     2     2      0
                             ___bmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               6     3      3     898
                                              3 COMMON     6     3      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     404
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _CCBufRdReverse                                       3     1      2    1883
                                             10 COMMON     3     1      2
                        _CCBufCalcPt
 ---------------------------------------------------------------------------------
 (2) _CCBufRdByte                                          5     3      2    9313
                                             15 BANK0      5     3      2
                        _CCBufCalcPt
                         _CCBufCanRd
                             _printf
 ---------------------------------------------------------------------------------
 (2) _CCBufPeekByte                                        7     5      2    8973
                                             15 BANK0      7     5      2
                        _CCBufCalcPt
                         _CCBufCanRd
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              17    15      2    5310
                                             12 COMMON     2     0      2
                                              0 BANK0     15    15      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2286
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     337
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     518
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) _CCBufCanRd                                           5     5      0    2042
                                             10 COMMON     4     4      0
                                              5 BANK0      1     1      0
                        _CCBufCalcPt
 ---------------------------------------------------------------------------------
 (3) _CCBufCalcPt                                         15    11      4    1447
                                              0 COMMON    10     6      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _RfHalTickRxTh
     _CCBufCanRd
       _CCBufCalcPt
     _CCBufPeekByte
       _CCBufCalcPt
       _CCBufCanRd
         _CCBufCalcPt
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _CCBufRdByte
       _CCBufCalcPt
       _CCBufCanRd
         _CCBufCalcPt
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _CCBufRdReverse
       _CCBufCalcPt
     _RfHalRxPut
       ___bmul
       _memcpy
         ___bmul (ARG)
     _RfTrcvCrcTick
   _RfHalTickTxTh
     _RfHalTxGet
       ___bmul
     _RfTrcvCarrierPresent
       _MRF49XAReadStatus
         _SPI_Read
     _RfTrcvMode
       _MRF49XACommand
         _SPI_Write
       _MRF49XAReset
         _MRF49XACommand
           _SPI_Write
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _SysInitGpio

 _extInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D3       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      38       8       70.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      D3      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Thu Apr  3 09:40:04 2014

       RfHalTickRxTh@pktLength 006A          RfHalTickRxTh@rxPacket 0028                 ___bmul@product 0071  
       __size_of_RfTrcvCrcTick 0000                             PL8 038A            ___wmul@multiplicand 0072  
                          PL10 05B0                            PL20 039C                            PL12 05BD  
                          PL30 03BC                            PL22 03A4                            PL14 05C9  
                          PL32 05DE                            PL24 03A9                            PL16 0394  
                          PL34 05E5                            PL26 03AF                            PL18 05D5  
                          PL36 05EB                            PL28 03B5                            PL38 03C3  
                          l200 03E3                            l201 03E4                            l212 03F8  
                          l204 03EA                            l213 03F9                            l205 03EB  
                          l216 03FF                            l208 03F1                            l217 0400  
                          l209 03F2                            l155 0003                            l180 0321  
                          l182 0327                            l183 0328                            l192 03D5  
                          l193 03D6                            l620 0464                            l196 03DC  
                          l188 03CE                            l197 03DD                            l189 03CF  
                          l622 0450                            l608 0415                            l633 048C  
                          l628 0477                            l658 0540                            wreg 0009  
                         l2203 0371                           l2411 0420                           l2403 0411  
                         l2309 0339                           l2333 02CE                           l2317 02B6  
                         l2503 04FE                           l2415 0428                           l2335 02D3  
                         l2319 02BB                           l2505 0501                           l2425 0452  
                         l2409 0419                           l2521 0405                           l2281 034E  
                         l2345 02E5                           l2329 02CC                           l2515 0531  
                         l2507 0519                           l2603 00DD                           l2517 0539  
                         l2445 0479                           l2437 0473                           l2277 0001  
                         l2541 0063                           l2613 00F3                           l2349 02E9  
                         l2519 053C                           l2607 00E7                           l2527 0049  
                         l2375 022C                           l2481 04D3                           l2457 048E  
                         l2721 029F                           l2705 0288                           l2609 00EC  
                         l2553 0073                           l2529 004F                           l2811 0562  
                         l2475 04B5                           l2467 04A1                           l2387 0251  
                         l2731 002E                           l2741 01B7                           l2493 04E8  
                         l2469 04A9                           l2661 0173                           l2549 0071  
                         l2807 055E                           l2823 0582                           l2831 0592  
                         l2495 04EC                           l2487 04DC                           l2479 04D0  
                         l2591 00C4                           l2911 02F3                           l2841 05A1  
                         l2913 00FD                           l2569 0099                           l2747 01BD  
                         l2827 058E                           l2499 04F7                           l2691 025C  
                         l2587 0090                           l2757 01FA                           l2837 059B  
                         l2677 0221                           l2597 00CE                           l2589 00BF  
                         l2775 0290                           l2769 0575                           l2799 054F  
                         STR_1 068B                           STR_2 0656                           STR_3 075A  
                         STR_8 06B4                           STR_9 0613                           u1135 0484  
                         u1155 0499                           u1195 04C4                           u1465 012B  
                         u1563 01D1                           u1475 0148                           u1573 01F4  
                         u1645 0557                           u1685 0588                           _main 0022  
              __end_of_AdcInit 0044                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E            __size_of_CCBufCanRd 0039  
                         ltemp 007E                           start 0006                           ttemp 007E  
                         wtemp 007E              ___bmul@multiplier 0072                  ?_MRF49XAReset 0070  
                        ?_main 0070                          STR_10 06FA                          STR_11 0719  
                        STR_12 0734                          STR_13 0734                          STR_14 06DA  
                        STR_15 0749                __end_of___lwdiv 0569                __end_of___lwmod 0599  
                   _RfHalTxGet 0228                     _RfHalRxPut 0259                __end_of_dpowers 060B  
              __end_of_isdigit 0577                  _RfTrcvCrcTick 0000                          _putch 0541  
             __end_of_SPI_Read 0334               CCBufCalcPt@CCDef 0055                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
         __size_of_CCBufCalcPt 0072                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003          __end_of_CCBufPeekByte 0228                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
         __size_of_CCBufRdByte 002F             __size_of_SPI_Write 003B                   SPI_Read@data 0070  
             CCBufCalcPt@entry 0070                 ??_MRF49XAReset 0073                __initialization 0008  
            CCBufRdReverse@qty 007A                     _ExtIntInit 0044                   __end_of_main 0035  
               _MRF49XACommand 0371                     _RfTrcvMode 0334          RfHalTickTxTh@txPacket 0027  
            _MRF49XAReadStatus 030D           RfTrcvCrcTick@initial 0071                         ??_main 007E  
           ?_MRF49XAReadStatus 0072                 ?_RfTrcvCrcTick 0070                         _ADCON0 009D  
              RfHalTickRxTh@pt 006C                         _ADCON1 009E                         _ADCON2 009F  
                    ??_AdcInit 0070                RfHalTickTxTh@pt 0062            ??_MRF49XAReadStatus 0074  
               _CCBufRdReverse 017A                         _ANSELA 018C                         ?_putch 0070  
                       _ANSELB 018D                         _ANSELC 018E                         _FVRCON 0117  
                       _OSCCON 0099    RfHalTickRxTh@pktRxByteIndex 0025         __end_of_MRF49XACommand 037A  
                       ___bmul 028E                         ___wmul 0599                      ??___lwdiv 0074  
    __end_of_MRF49XAReadStatus 031D                      ??___lwmod 007B                         _rfRxCC 0044  
                       _rfRxBf 0120                         _extInt 0004                         _memcpy 029A  
                       _printf 0403                   ??_CCBufCanRd 007A              __end_of_SPI_Write 0403  
                    ??_isdigit 0070                    ?_RfHalTxGet 0070                    ?_RfHalRxPut 0070  
__size_of_RfTrcvCarrierPresent 000B         __end_of_CCBufRdReverse 018F                         putch@c 0070  
           MRF49XAReadStatus@w 0074        __end_of__initialization 0020                   RfTrcvMode@tx 0073  
           __end_of_CCBufCanRd 014B            ___bmul@multiplicand 0070              CCBufCalcPt@result 0051  
              ?_MRF49XACommand 0071                    ?_ExtIntInit 0070                 __pcstackCOMMON 0070  
                  ?_RfTrcvMode 0070                  __end_of_putch 0542                     __end_ofPL8 0394  
                    ?_SPI_Read 0070          __end_of_RfHalTickRxTh 0112          __end_of_RfHalTickTxTh 0302  
              ??_RfTrcvCrcTick 0071                ?_CCBufRdReverse 007A           __end_of_MRF49XAReset 0371  
                      ??_putch 0070                  ??_SysInitGpio 0070                     __pbssBANK0 0020  
                   __pbssBANK1 00A0                     __pbssBANK2 0120            __size_of_RfHalTxGet 0031  
                   __pmaintext 0022            __size_of_RfHalRxPut 0035                        ?___bmul 0070  
                      ?___wmul 0070                     __pintentry 0004     __size_of_MRF49XAReadStatus 0010  
                      ?_extInt 0070                        ?_memcpy 0073                     ??_SPI_Read 0070  
                      ?_printf 007C                        _AdcInit 0035            __size_of_ExtIntInit 0001  
   RfHalTickRxTh@rxByteTimeout 0026                     __stringtab 0600            __size_of_RfTrcvMode 001A  
                    SPI_Read@i 0071            __end_of_SysInitGpio 038A                  SPI_Write@data 0070  
              __size_of___bmul 000C                __size_of___wmul 0017                        ___lwdiv 0542  
                      ___lwmod 0577             CCBufPeekByte@CCDef 0066                __size_of_extInt 0002  
              __size_of_memcpy 0019                        __ptext1 037A                        __ptext2 02B3  
                      __ptext3 0334                        __ptext4 034E                        __ptext5 0371  
                      __ptext6 03C8                        __ptext7 0302                        __ptext8 030D  
                      __ptext9 031D                __size_of_printf 013E              __end_of_hexpowers 0613  
                      _dpowers 0601                        _isdigit 0569                  ??_CCBufCalcPt 0074  
                      clrloop0 0761                  ??_CCBufRdByte 0062           end_of_initialization 0020  
                      memcpy@d 0076                        memcpy@n 0074                        memcpy@s 0077  
             CCBufRdByte@CCDef 0064                        printf@c 005F                        printf@f 007C  
                 __pstringtext 0600                      _PORTCbits 000E          __size_of_MRF49XAReset 0023  
       __size_of_CCBufPeekByte 0027                   ??_RfHalTxGet 0073                   ??_RfHalRxPut 0079  
                    _TRISAbits 008C                      _TRISBbits 008D                      _TRISCbits 008E  
                    _SPI_Write 03C8                    _SysInitGpio 037A            CCBufRdReverse@CCDef 007C  
             ??_MRF49XACommand 0073                    printf@width 005D            __end_of_CCBufCalcPt 0201  
              CCBufCanRd@CCDef 0056   __end_of_RfTrcvCarrierPresent 030D            __end_of_CCBufRdByte 017A  
            MRF49XACommand@cmd 0071                   ??_ExtIntInit 0070             __end_of_RfHalTxGet 0259  
           __end_of_RfHalRxPut 028E                   _MRF49XAReset 034E                   ??_RfTrcvMode 0073  
               __end_of___bmul 029A                 __end_of___wmul 05B0                 __end_of_extInt 0006  
               __end_of_memcpy 02B3               ??_CCBufRdReverse 007C                 __end_of_printf 0541  
            __size_of_SPI_Read 0017                    __end_ofPL10 05BD                    __end_ofPL20 03A4  
                  __end_ofPL12 05C9                    __end_ofPL30 03C3                    __end_ofPL22 03A9  
                  __end_ofPL14 05D5                    __end_ofPL32 05E5                    __end_ofPL24 03AF  
                  __end_ofPL16 039C                    __end_ofPL34 05EB                    __end_ofPL26 03B5  
                  __end_ofPL18 05DE                    __end_ofPL36 05F0                    __end_ofPL28 03BC  
                  __end_ofPL38 03C8            start_initialization 0008                CCBufCalcPt@move 0072  
                   ?_SPI_Write 0070             __end_of_ExtIntInit 0045             __end_of_RfTrcvMode 034E  
               RfHalTickRxTh@b 0069                  _CCBufPeekByte 0201                       ??___bmul 0071  
                     ??___wmul 0074               CCBufPeekByte@res 0065                       ??_extInt 0070  
                     ??_memcpy 0076                       ??_printf 0051                      ___latbits 0001  
                __pcstackBANK0 0051            __end_of__stringdata 0760          __end_of_RfTrcvCrcTick 0000  
                 _isdigit$1077 0070                       ?_AdcInit 0070                    _CCBufCalcPt 018F  
                  _CCBufRdByte 014B                 ?_CCBufPeekByte 0060                      _halRxBfTh 004D  
                    _halTxBfTh 004F         __size_of_RfHalTickRxTh 00CD         __size_of_RfHalTickTxTh 004F  
             ___lwdiv@dividend 0072                       ?___lwdiv 0070                       ?___lwmod 0077  
                    _rfPackets 00A0                       ?_isdigit 0070           _RfTrcvCarrierPresent 0302  
                    _hexpowers 060B                    ??_SPI_Write 0070               ___lwdiv@quotient 0074  
               __size_of_putch 0001                 ___wmul@product 0074                       _LATBbits 010D  
                     _LATCbits 010E                      clear_ram0 0760        RfTrcvCarrierPresent@sts 0076  
                     _SPI_Read 031D                    __stringdata 0613              ___wmul@multiplier 0070  
                   printf@_val 0058                     printf@flag 005C                     printf@prec 0057  
                _RfHalTickRxTh 0045                  _RfHalTickTxTh 02B3             RfHalRxPut@rfPacket 0079  
        ?_RfTrcvCarrierPresent 0070              RfTrcvCrcTick@data 0070               __size_of_AdcInit 000F  
                 ?_SysInitGpio 0070                ??_CCBufPeekByte 0062               __size_of___lwdiv 0027  
             __size_of___lwmod 0022             __end_of__stringtab 0601                     _CCBufCanRd 0112  
               ?_RfHalTickRxTh 0070                 ?_RfHalTickTxTh 0070               __size_of_isdigit 000E  
              ___lwdiv@divisor 0070                ___lwdiv@counter 0076                       __ptext10 0228  
                     __ptext11 0045                       __ptext20 0541                       __ptext12 0000  
                     __ptext21 0569                       __ptext13 0259                       __ptext22 0599  
                     __ptext14 029A                       __ptext23 0577                       __ptext15 028E  
                     __ptext24 0542                       __ptext16 017A                       __ptext25 0112  
                     __ptext17 014B                       __ptext26 018F                       __ptext18 0201  
                     __ptext27 0044                       __ptext19 0403                       __ptext28 0035  
                __size_of_main 0013                       _rfStatus 0020                 CCBufRdByte@res 0063  
                    printf@idx 0055         ??_RfTrcvCarrierPresent 0076                       memcpy@d1 0078  
                     memcpy@s1 0073                       isdigit@c 0071                   ?_CCBufCalcPt 0070  
                 ?_CCBufRdByte 0060                       intlevel1 0000               ___lwmod@dividend 0079  
                     printf@ap 0056        __size_of_MRF49XACommand 0009                    RfHalTxGet@i 0073  
              ??_RfHalTickRxTh 0067                ??_RfHalTickTxTh 0060                    RfHalRxPut@i 007A  
                  ?_CCBufCanRd 0070                ___lwmod@divisor 0077                ___lwmod@counter 007B  
      __size_of_CCBufRdReverse 0015           __size_of_SysInitGpio 0010  

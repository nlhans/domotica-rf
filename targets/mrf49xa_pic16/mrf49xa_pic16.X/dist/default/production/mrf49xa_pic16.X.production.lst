

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Fri Jul  4 17:43:12 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text8,local,class=CODE,merge=1,delta=2
    14                           	psect	text11,local,class=CODE,merge=1,delta=2
    15                           	psect	text14,local,class=CODE,merge=1,delta=2
    16                           	psect	text15,local,class=CODE,merge=1,delta=2
    17                           	psect	text16,local,class=CODE,merge=1,delta=2
    18                           	psect	text18,local,class=CODE,merge=1,delta=2
    19                           	psect	text24,local,class=CODE,merge=1,delta=2
    20                           	psect	text34,local,class=CODE,merge=1,delta=2
    21                           	psect	text53,local,class=CODE,merge=1,delta=2
    22                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	text66,local,class=CODE,merge=1,delta=2
    25                           	psect	text69,local,class=CODE,merge=1,delta=2
    26                           	psect	pa_nodes,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     	;# 
    29  0001                     	;# 
    30  0002                     	;# 
    31  0003                     	;# 
    32  0004                     	;# 
    33  0005                     	;# 
    34  0006                     	;# 
    35  0007                     	;# 
    36  0008                     	;# 
    37  0009                     	;# 
    38  000A                     	;# 
    39  000B                     	;# 
    40  000C                     	;# 
    41  000D                     	;# 
    42  000E                     	;# 
    43  0011                     	;# 
    44  0012                     	;# 
    45  0013                     	;# 
    46  0015                     	;# 
    47  0016                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001C                     	;# 
    55  008C                     	;# 
    56  008D                     	;# 
    57  008E                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0095                     	;# 
    62  0096                     	;# 
    63  0097                     	;# 
    64  0099                     	;# 
    65  009A                     	;# 
    66  009B                     	;# 
    67  009B                     	;# 
    68  009C                     	;# 
    69  009D                     	;# 
    70  009E                     	;# 
    71  009F                     	;# 
    72  010C                     	;# 
    73  010D                     	;# 
    74  010E                     	;# 
    75  0111                     	;# 
    76  0112                     	;# 
    77  0113                     	;# 
    78  0114                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  011D                     	;# 
    85  018C                     	;# 
    86  018D                     	;# 
    87  018E                     	;# 
    88  0191                     	;# 
    89  0191                     	;# 
    90  0192                     	;# 
    91  0193                     	;# 
    92  0193                     	;# 
    93  0194                     	;# 
    94  0195                     	;# 
    95  0196                     	;# 
    96  0199                     	;# 
    97  019A                     	;# 
    98  019B                     	;# 
    99  019B                     	;# 
   100  019C                     	;# 
   101  019D                     	;# 
   102  019E                     	;# 
   103  019F                     	;# 
   104  020C                     	;# 
   105  020D                     	;# 
   106  0211                     	;# 
   107  0211                     	;# 
   108  0212                     	;# 
   109  0212                     	;# 
   110  0213                     	;# 
   111  0213                     	;# 
   112  0214                     	;# 
   113  0214                     	;# 
   114  0215                     	;# 
   115  0215                     	;# 
   116  0215                     	;# 
   117  0216                     	;# 
   118  0216                     	;# 
   119  0217                     	;# 
   120  0217                     	;# 
   121  0391                     	;# 
   122  0392                     	;# 
   123  0393                     	;# 
   124  0394                     	;# 
   125  0395                     	;# 
   126  0396                     	;# 
   127  0498                     	;# 
   128  0498                     	;# 
   129  0499                     	;# 
   130  049A                     	;# 
   131  049B                     	;# 
   132  049B                     	;# 
   133  049C                     	;# 
   134  049E                     	;# 
   135  049F                     	;# 
   136  0611                     	;# 
   137  0612                     	;# 
   138  0613                     	;# 
   139  0613                     	;# 
   140  0614                     	;# 
   141  0615                     	;# 
   142  0616                     	;# 
   143  0616                     	;# 
   144  0617                     	;# 
   145  0618                     	;# 
   146  0619                     	;# 
   147  0619                     	;# 
   148  061A                     	;# 
   149  061B                     	;# 
   150  061C                     	;# 
   151  061C                     	;# 
   152  0691                     	;# 
   153  0692                     	;# 
   154  0693                     	;# 
   155  0694                     	;# 
   156  0695                     	;# 
   157  0F0F                     	;# 
   158  0F10                     	;# 
   159  0F11                     	;# 
   160  0F12                     	;# 
   161  0F13                     	;# 
   162  0F14                     	;# 
   163  0F15                     	;# 
   164  0F16                     	;# 
   165  0F17                     	;# 
   166  0F18                     	;# 
   167  0F19                     	;# 
   168  0F1A                     	;# 
   169  0F1B                     	;# 
   170  0F1C                     	;# 
   171  0F1D                     	;# 
   172  0F1E                     	;# 
   173  0F1F                     	;# 
   174  0F20                     	;# 
   175  0F21                     	;# 
   176  0F22                     	;# 
   177  0F23                     	;# 
   178  0F24                     	;# 
   179  0F25                     	;# 
   180  0F26                     	;# 
   181  0F27                     	;# 
   182  0F28                     	;# 
   183  0F29                     	;# 
   184  0F2A                     	;# 
   185  0F2B                     	;# 
   186  0F2C                     	;# 
   187  0F2D                     	;# 
   188  0F2E                     	;# 
   189  0F2F                     	;# 
   190  0F8C                     	;# 
   191  0F8D                     	;# 
   192  0F91                     	;# 
   193  0F95                     	;# 
   194  0F96                     	;# 
   195  0F97                     	;# 
   196  0F9C                     	;# 
   197  0F9D                     	;# 
   198  0F9E                     	;# 
   199  0FE3                     	;# 
   200  0FE4                     	;# 
   201  0FE5                     	;# 
   202  0FE6                     	;# 
   203  0FE7                     	;# 
   204  0FE8                     	;# 
   205  0FE9                     	;# 
   206  0FEA                     	;# 
   207  0FEB                     	;# 
   208  0FED                     	;# 
   209  0FEE                     	;# 
   210  0FEF                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  008C                     	;# 
   239  008D                     	;# 
   240  008E                     	;# 
   241  0091                     	;# 
   242  0092                     	;# 
   243  0093                     	;# 
   244  0095                     	;# 
   245  0096                     	;# 
   246  0097                     	;# 
   247  0099                     	;# 
   248  009A                     	;# 
   249  009B                     	;# 
   250  009B                     	;# 
   251  009C                     	;# 
   252  009D                     	;# 
   253  009E                     	;# 
   254  009F                     	;# 
   255  010C                     	;# 
   256  010D                     	;# 
   257  010E                     	;# 
   258  0111                     	;# 
   259  0112                     	;# 
   260  0113                     	;# 
   261  0114                     	;# 
   262  0115                     	;# 
   263  0116                     	;# 
   264  0117                     	;# 
   265  0118                     	;# 
   266  0119                     	;# 
   267  011D                     	;# 
   268  018C                     	;# 
   269  018D                     	;# 
   270  018E                     	;# 
   271  0191                     	;# 
   272  0191                     	;# 
   273  0192                     	;# 
   274  0193                     	;# 
   275  0193                     	;# 
   276  0194                     	;# 
   277  0195                     	;# 
   278  0196                     	;# 
   279  0199                     	;# 
   280  019A                     	;# 
   281  019B                     	;# 
   282  019B                     	;# 
   283  019C                     	;# 
   284  019D                     	;# 
   285  019E                     	;# 
   286  019F                     	;# 
   287  020C                     	;# 
   288  020D                     	;# 
   289  0211                     	;# 
   290  0211                     	;# 
   291  0212                     	;# 
   292  0212                     	;# 
   293  0213                     	;# 
   294  0213                     	;# 
   295  0214                     	;# 
   296  0214                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0215                     	;# 
   300  0216                     	;# 
   301  0216                     	;# 
   302  0217                     	;# 
   303  0217                     	;# 
   304  0391                     	;# 
   305  0392                     	;# 
   306  0393                     	;# 
   307  0394                     	;# 
   308  0395                     	;# 
   309  0396                     	;# 
   310  0498                     	;# 
   311  0498                     	;# 
   312  0499                     	;# 
   313  049A                     	;# 
   314  049B                     	;# 
   315  049B                     	;# 
   316  049C                     	;# 
   317  049E                     	;# 
   318  049F                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0613                     	;# 
   323  0614                     	;# 
   324  0615                     	;# 
   325  0616                     	;# 
   326  0616                     	;# 
   327  0617                     	;# 
   328  0618                     	;# 
   329  0619                     	;# 
   330  0619                     	;# 
   331  061A                     	;# 
   332  061B                     	;# 
   333  061C                     	;# 
   334  061C                     	;# 
   335  0691                     	;# 
   336  0692                     	;# 
   337  0693                     	;# 
   338  0694                     	;# 
   339  0695                     	;# 
   340  0F0F                     	;# 
   341  0F10                     	;# 
   342  0F11                     	;# 
   343  0F12                     	;# 
   344  0F13                     	;# 
   345  0F14                     	;# 
   346  0F15                     	;# 
   347  0F16                     	;# 
   348  0F17                     	;# 
   349  0F18                     	;# 
   350  0F19                     	;# 
   351  0F1A                     	;# 
   352  0F1B                     	;# 
   353  0F1C                     	;# 
   354  0F1D                     	;# 
   355  0F1E                     	;# 
   356  0F1F                     	;# 
   357  0F20                     	;# 
   358  0F21                     	;# 
   359  0F22                     	;# 
   360  0F23                     	;# 
   361  0F24                     	;# 
   362  0F25                     	;# 
   363  0F26                     	;# 
   364  0F27                     	;# 
   365  0F28                     	;# 
   366  0F29                     	;# 
   367  0F2A                     	;# 
   368  0F2B                     	;# 
   369  0F2C                     	;# 
   370  0F2D                     	;# 
   371  0F2E                     	;# 
   372  0F2F                     	;# 
   373  0F8C                     	;# 
   374  0F8D                     	;# 
   375  0F91                     	;# 
   376  0F95                     	;# 
   377  0F96                     	;# 
   378  0F97                     	;# 
   379  0F9C                     	;# 
   380  0F9D                     	;# 
   381  0F9E                     	;# 
   382  0FE3                     	;# 
   383  0FE4                     	;# 
   384  0FE5                     	;# 
   385  0FE6                     	;# 
   386  0FE7                     	;# 
   387  0FE8                     	;# 
   388  0FE9                     	;# 
   389  0FEA                     	;# 
   390  0FEB                     	;# 
   391  0FED                     	;# 
   392  0FEE                     	;# 
   393  0FEF                     	;# 
   394  0000                     	;# 
   395  0001                     	;# 
   396  0002                     	;# 
   397  0003                     	;# 
   398  0004                     	;# 
   399  0005                     	;# 
   400  0006                     	;# 
   401  0007                     	;# 
   402  0008                     	;# 
   403  0009                     	;# 
   404  000A                     	;# 
   405  000B                     	;# 
   406  000C                     	;# 
   407  000D                     	;# 
   408  000E                     	;# 
   409  0011                     	;# 
   410  0012                     	;# 
   411  0013                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  009F                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0111                     	;# 
   442  0112                     	;# 
   443  0113                     	;# 
   444  0114                     	;# 
   445  0115                     	;# 
   446  0116                     	;# 
   447  0117                     	;# 
   448  0118                     	;# 
   449  0119                     	;# 
   450  011D                     	;# 
   451  018C                     	;# 
   452  018D                     	;# 
   453  018E                     	;# 
   454  0191                     	;# 
   455  0191                     	;# 
   456  0192                     	;# 
   457  0193                     	;# 
   458  0193                     	;# 
   459  0194                     	;# 
   460  0195                     	;# 
   461  0196                     	;# 
   462  0199                     	;# 
   463  019A                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019C                     	;# 
   467  019D                     	;# 
   468  019E                     	;# 
   469  019F                     	;# 
   470  020C                     	;# 
   471  020D                     	;# 
   472  0211                     	;# 
   473  0211                     	;# 
   474  0212                     	;# 
   475  0212                     	;# 
   476  0213                     	;# 
   477  0213                     	;# 
   478  0214                     	;# 
   479  0214                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0216                     	;# 
   484  0216                     	;# 
   485  0217                     	;# 
   486  0217                     	;# 
   487  0391                     	;# 
   488  0392                     	;# 
   489  0393                     	;# 
   490  0394                     	;# 
   491  0395                     	;# 
   492  0396                     	;# 
   493  0498                     	;# 
   494  0498                     	;# 
   495  0499                     	;# 
   496  049A                     	;# 
   497  049B                     	;# 
   498  049B                     	;# 
   499  049C                     	;# 
   500  049E                     	;# 
   501  049F                     	;# 
   502  0611                     	;# 
   503  0612                     	;# 
   504  0613                     	;# 
   505  0613                     	;# 
   506  0614                     	;# 
   507  0615                     	;# 
   508  0616                     	;# 
   509  0616                     	;# 
   510  0617                     	;# 
   511  0618                     	;# 
   512  0619                     	;# 
   513  0619                     	;# 
   514  061A                     	;# 
   515  061B                     	;# 
   516  061C                     	;# 
   517  061C                     	;# 
   518  0691                     	;# 
   519  0692                     	;# 
   520  0693                     	;# 
   521  0694                     	;# 
   522  0695                     	;# 
   523  0F0F                     	;# 
   524  0F10                     	;# 
   525  0F11                     	;# 
   526  0F12                     	;# 
   527  0F13                     	;# 
   528  0F14                     	;# 
   529  0F15                     	;# 
   530  0F16                     	;# 
   531  0F17                     	;# 
   532  0F18                     	;# 
   533  0F19                     	;# 
   534  0F1A                     	;# 
   535  0F1B                     	;# 
   536  0F1C                     	;# 
   537  0F1D                     	;# 
   538  0F1E                     	;# 
   539  0F1F                     	;# 
   540  0F20                     	;# 
   541  0F21                     	;# 
   542  0F22                     	;# 
   543  0F23                     	;# 
   544  0F24                     	;# 
   545  0F25                     	;# 
   546  0F26                     	;# 
   547  0F27                     	;# 
   548  0F28                     	;# 
   549  0F29                     	;# 
   550  0F2A                     	;# 
   551  0F2B                     	;# 
   552  0F2C                     	;# 
   553  0F2D                     	;# 
   554  0F2E                     	;# 
   555  0F2F                     	;# 
   556  0F8C                     	;# 
   557  0F8D                     	;# 
   558  0F91                     	;# 
   559  0F95                     	;# 
   560  0F96                     	;# 
   561  0F97                     	;# 
   562  0F9C                     	;# 
   563  0F9D                     	;# 
   564  0F9E                     	;# 
   565  0FE3                     	;# 
   566  0FE4                     	;# 
   567  0FE5                     	;# 
   568  0FE6                     	;# 
   569  0FE7                     	;# 
   570  0FE8                     	;# 
   571  0FE9                     	;# 
   572  0FEA                     	;# 
   573  0FEB                     	;# 
   574  0FED                     	;# 
   575  0FEE                     	;# 
   576  0FEF                     	;# 
   577  0000                     	;# 
   578  0001                     	;# 
   579  0002                     	;# 
   580  0003                     	;# 
   581  0004                     	;# 
   582  0005                     	;# 
   583  0006                     	;# 
   584  0007                     	;# 
   585  0008                     	;# 
   586  0009                     	;# 
   587  000A                     	;# 
   588  000B                     	;# 
   589  000C                     	;# 
   590  000D                     	;# 
   591  000E                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0013                     	;# 
   595  0015                     	;# 
   596  0016                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001C                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0093                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0099                     	;# 
   614  009A                     	;# 
   615  009B                     	;# 
   616  009B                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  009F                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  010E                     	;# 
   624  0111                     	;# 
   625  0112                     	;# 
   626  0113                     	;# 
   627  0114                     	;# 
   628  0115                     	;# 
   629  0116                     	;# 
   630  0117                     	;# 
   631  0118                     	;# 
   632  0119                     	;# 
   633  011D                     	;# 
   634  018C                     	;# 
   635  018D                     	;# 
   636  018E                     	;# 
   637  0191                     	;# 
   638  0191                     	;# 
   639  0192                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0194                     	;# 
   643  0195                     	;# 
   644  0196                     	;# 
   645  0199                     	;# 
   646  019A                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020C                     	;# 
   654  020D                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0391                     	;# 
   671  0392                     	;# 
   672  0393                     	;# 
   673  0394                     	;# 
   674  0395                     	;# 
   675  0396                     	;# 
   676  0498                     	;# 
   677  0498                     	;# 
   678  0499                     	;# 
   679  049A                     	;# 
   680  049B                     	;# 
   681  049B                     	;# 
   682  049C                     	;# 
   683  049E                     	;# 
   684  049F                     	;# 
   685  0611                     	;# 
   686  0612                     	;# 
   687  0613                     	;# 
   688  0613                     	;# 
   689  0614                     	;# 
   690  0615                     	;# 
   691  0616                     	;# 
   692  0616                     	;# 
   693  0617                     	;# 
   694  0618                     	;# 
   695  0619                     	;# 
   696  0619                     	;# 
   697  061A                     	;# 
   698  061B                     	;# 
   699  061C                     	;# 
   700  061C                     	;# 
   701  0691                     	;# 
   702  0692                     	;# 
   703  0693                     	;# 
   704  0694                     	;# 
   705  0695                     	;# 
   706  0F0F                     	;# 
   707  0F10                     	;# 
   708  0F11                     	;# 
   709  0F12                     	;# 
   710  0F13                     	;# 
   711  0F14                     	;# 
   712  0F15                     	;# 
   713  0F16                     	;# 
   714  0F17                     	;# 
   715  0F18                     	;# 
   716  0F19                     	;# 
   717  0F1A                     	;# 
   718  0F1B                     	;# 
   719  0F1C                     	;# 
   720  0F1D                     	;# 
   721  0F1E                     	;# 
   722  0F1F                     	;# 
   723  0F20                     	;# 
   724  0F21                     	;# 
   725  0F22                     	;# 
   726  0F23                     	;# 
   727  0F24                     	;# 
   728  0F25                     	;# 
   729  0F26                     	;# 
   730  0F27                     	;# 
   731  0F28                     	;# 
   732  0F29                     	;# 
   733  0F2A                     	;# 
   734  0F2B                     	;# 
   735  0F2C                     	;# 
   736  0F2D                     	;# 
   737  0F2E                     	;# 
   738  0F2F                     	;# 
   739  0F8C                     	;# 
   740  0F8D                     	;# 
   741  0F91                     	;# 
   742  0F95                     	;# 
   743  0F96                     	;# 
   744  0F97                     	;# 
   745  0F9C                     	;# 
   746  0F9D                     	;# 
   747  0F9E                     	;# 
   748  0FE3                     	;# 
   749  0FE4                     	;# 
   750  0FE5                     	;# 
   751  0FE6                     	;# 
   752  0FE7                     	;# 
   753  0FE8                     	;# 
   754  0FE9                     	;# 
   755  0FEA                     	;# 
   756  0FEB                     	;# 
   757  0FED                     	;# 
   758  0FEE                     	;# 
   759  0FEF                     	;# 
   760  0000                     	;# 
   761  0001                     	;# 
   762  0002                     	;# 
   763  0003                     	;# 
   764  0004                     	;# 
   765  0005                     	;# 
   766  0006                     	;# 
   767  0007                     	;# 
   768  0008                     	;# 
   769  0009                     	;# 
   770  000A                     	;# 
   771  000B                     	;# 
   772  000C                     	;# 
   773  000D                     	;# 
   774  000E                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0013                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0016                     	;# 
   781  0017                     	;# 
   782  0018                     	;# 
   783  0019                     	;# 
   784  001A                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  008C                     	;# 
   788  008D                     	;# 
   789  008E                     	;# 
   790  0091                     	;# 
   791  0092                     	;# 
   792  0093                     	;# 
   793  0095                     	;# 
   794  0096                     	;# 
   795  0097                     	;# 
   796  0099                     	;# 
   797  009A                     	;# 
   798  009B                     	;# 
   799  009B                     	;# 
   800  009C                     	;# 
   801  009D                     	;# 
   802  009E                     	;# 
   803  009F                     	;# 
   804  010C                     	;# 
   805  010D                     	;# 
   806  010E                     	;# 
   807  0111                     	;# 
   808  0112                     	;# 
   809  0113                     	;# 
   810  0114                     	;# 
   811  0115                     	;# 
   812  0116                     	;# 
   813  0117                     	;# 
   814  0118                     	;# 
   815  0119                     	;# 
   816  011D                     	;# 
   817  018C                     	;# 
   818  018D                     	;# 
   819  018E                     	;# 
   820  0191                     	;# 
   821  0191                     	;# 
   822  0192                     	;# 
   823  0193                     	;# 
   824  0193                     	;# 
   825  0194                     	;# 
   826  0195                     	;# 
   827  0196                     	;# 
   828  0199                     	;# 
   829  019A                     	;# 
   830  019B                     	;# 
   831  019B                     	;# 
   832  019C                     	;# 
   833  019D                     	;# 
   834  019E                     	;# 
   835  019F                     	;# 
   836  020C                     	;# 
   837  020D                     	;# 
   838  0211                     	;# 
   839  0211                     	;# 
   840  0212                     	;# 
   841  0212                     	;# 
   842  0213                     	;# 
   843  0213                     	;# 
   844  0214                     	;# 
   845  0214                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0215                     	;# 
   849  0216                     	;# 
   850  0216                     	;# 
   851  0217                     	;# 
   852  0217                     	;# 
   853  0391                     	;# 
   854  0392                     	;# 
   855  0393                     	;# 
   856  0394                     	;# 
   857  0395                     	;# 
   858  0396                     	;# 
   859  0498                     	;# 
   860  0498                     	;# 
   861  0499                     	;# 
   862  049A                     	;# 
   863  049B                     	;# 
   864  049B                     	;# 
   865  049C                     	;# 
   866  049E                     	;# 
   867  049F                     	;# 
   868  0611                     	;# 
   869  0612                     	;# 
   870  0613                     	;# 
   871  0613                     	;# 
   872  0614                     	;# 
   873  0615                     	;# 
   874  0616                     	;# 
   875  0616                     	;# 
   876  0617                     	;# 
   877  0618                     	;# 
   878  0619                     	;# 
   879  0619                     	;# 
   880  061A                     	;# 
   881  061B                     	;# 
   882  061C                     	;# 
   883  061C                     	;# 
   884  0691                     	;# 
   885  0692                     	;# 
   886  0693                     	;# 
   887  0694                     	;# 
   888  0695                     	;# 
   889  0F0F                     	;# 
   890  0F10                     	;# 
   891  0F11                     	;# 
   892  0F12                     	;# 
   893  0F13                     	;# 
   894  0F14                     	;# 
   895  0F15                     	;# 
   896  0F16                     	;# 
   897  0F17                     	;# 
   898  0F18                     	;# 
   899  0F19                     	;# 
   900  0F1A                     	;# 
   901  0F1B                     	;# 
   902  0F1C                     	;# 
   903  0F1D                     	;# 
   904  0F1E                     	;# 
   905  0F1F                     	;# 
   906  0F20                     	;# 
   907  0F21                     	;# 
   908  0F22                     	;# 
   909  0F23                     	;# 
   910  0F24                     	;# 
   911  0F25                     	;# 
   912  0F26                     	;# 
   913  0F27                     	;# 
   914  0F28                     	;# 
   915  0F29                     	;# 
   916  0F2A                     	;# 
   917  0F2B                     	;# 
   918  0F2C                     	;# 
   919  0F2D                     	;# 
   920  0F2E                     	;# 
   921  0F2F                     	;# 
   922  0F8C                     	;# 
   923  0F8D                     	;# 
   924  0F91                     	;# 
   925  0F95                     	;# 
   926  0F96                     	;# 
   927  0F97                     	;# 
   928  0F9C                     	;# 
   929  0F9D                     	;# 
   930  0F9E                     	;# 
   931  0FE3                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0013                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0093                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  009F                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0111                     	;# 
   991  0112                     	;# 
   992  0113                     	;# 
   993  0114                     	;# 
   994  0115                     	;# 
   995  0116                     	;# 
   996  0117                     	;# 
   997  0118                     	;# 
   998  0119                     	;# 
   999  011D                     	;# 
  1000  018C                     	;# 
  1001  018D                     	;# 
  1002  018E                     	;# 
  1003  0191                     	;# 
  1004  0191                     	;# 
  1005  0192                     	;# 
  1006  0193                     	;# 
  1007  0193                     	;# 
  1008  0194                     	;# 
  1009  0195                     	;# 
  1010  0196                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019C                     	;# 
  1016  019D                     	;# 
  1017  019E                     	;# 
  1018  019F                     	;# 
  1019  020C                     	;# 
  1020  020D                     	;# 
  1021  0211                     	;# 
  1022  0211                     	;# 
  1023  0212                     	;# 
  1024  0212                     	;# 
  1025  0213                     	;# 
  1026  0213                     	;# 
  1027  0214                     	;# 
  1028  0214                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0216                     	;# 
  1033  0216                     	;# 
  1034  0217                     	;# 
  1035  0217                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0498                     	;# 
  1043  0498                     	;# 
  1044  0499                     	;# 
  1045  049A                     	;# 
  1046  049B                     	;# 
  1047  049B                     	;# 
  1048  049C                     	;# 
  1049  049E                     	;# 
  1050  049F                     	;# 
  1051  0611                     	;# 
  1052  0612                     	;# 
  1053  0613                     	;# 
  1054  0613                     	;# 
  1055  0614                     	;# 
  1056  0615                     	;# 
  1057  0616                     	;# 
  1058  0616                     	;# 
  1059  0617                     	;# 
  1060  0618                     	;# 
  1061  0619                     	;# 
  1062  0619                     	;# 
  1063  061A                     	;# 
  1064  061B                     	;# 
  1065  061C                     	;# 
  1066  061C                     	;# 
  1067  0691                     	;# 
  1068  0692                     	;# 
  1069  0693                     	;# 
  1070  0694                     	;# 
  1071  0695                     	;# 
  1072  0F0F                     	;# 
  1073  0F10                     	;# 
  1074  0F11                     	;# 
  1075  0F12                     	;# 
  1076  0F13                     	;# 
  1077  0F14                     	;# 
  1078  0F15                     	;# 
  1079  0F16                     	;# 
  1080  0F17                     	;# 
  1081  0F18                     	;# 
  1082  0F19                     	;# 
  1083  0F1A                     	;# 
  1084  0F1B                     	;# 
  1085  0F1C                     	;# 
  1086  0F1D                     	;# 
  1087  0F1E                     	;# 
  1088  0F1F                     	;# 
  1089  0F20                     	;# 
  1090  0F21                     	;# 
  1091  0F22                     	;# 
  1092  0F23                     	;# 
  1093  0F24                     	;# 
  1094  0F25                     	;# 
  1095  0F26                     	;# 
  1096  0F27                     	;# 
  1097  0F28                     	;# 
  1098  0F29                     	;# 
  1099  0F2A                     	;# 
  1100  0F2B                     	;# 
  1101  0F2C                     	;# 
  1102  0F2D                     	;# 
  1103  0F2E                     	;# 
  1104  0F2F                     	;# 
  1105  0F8C                     	;# 
  1106  0F8D                     	;# 
  1107  0F91                     	;# 
  1108  0F95                     	;# 
  1109  0F96                     	;# 
  1110  0F97                     	;# 
  1111  0F9C                     	;# 
  1112  0F9D                     	;# 
  1113  0F9E                     	;# 
  1114  0FE3                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0013                     	;# 
  1144  0015                     	;# 
  1145  0016                     	;# 
  1146  0016                     	;# 
  1147  0017                     	;# 
  1148  0018                     	;# 
  1149  0019                     	;# 
  1150  001A                     	;# 
  1151  001B                     	;# 
  1152  001C                     	;# 
  1153  008C                     	;# 
  1154  008D                     	;# 
  1155  008E                     	;# 
  1156  0091                     	;# 
  1157  0092                     	;# 
  1158  0093                     	;# 
  1159  0095                     	;# 
  1160  0096                     	;# 
  1161  0097                     	;# 
  1162  0099                     	;# 
  1163  009A                     	;# 
  1164  009B                     	;# 
  1165  009B                     	;# 
  1166  009C                     	;# 
  1167  009D                     	;# 
  1168  009E                     	;# 
  1169  009F                     	;# 
  1170  010C                     	;# 
  1171  010D                     	;# 
  1172  010E                     	;# 
  1173  0111                     	;# 
  1174  0112                     	;# 
  1175  0113                     	;# 
  1176  0114                     	;# 
  1177  0115                     	;# 
  1178  0116                     	;# 
  1179  0117                     	;# 
  1180  0118                     	;# 
  1181  0119                     	;# 
  1182  011D                     	;# 
  1183  018C                     	;# 
  1184  018D                     	;# 
  1185  018E                     	;# 
  1186  0191                     	;# 
  1187  0191                     	;# 
  1188  0192                     	;# 
  1189  0193                     	;# 
  1190  0193                     	;# 
  1191  0194                     	;# 
  1192  0195                     	;# 
  1193  0196                     	;# 
  1194  0199                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019C                     	;# 
  1199  019D                     	;# 
  1200  019E                     	;# 
  1201  019F                     	;# 
  1202  020C                     	;# 
  1203  020D                     	;# 
  1204  0211                     	;# 
  1205  0211                     	;# 
  1206  0212                     	;# 
  1207  0212                     	;# 
  1208  0213                     	;# 
  1209  0213                     	;# 
  1210  0214                     	;# 
  1211  0214                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0216                     	;# 
  1216  0216                     	;# 
  1217  0217                     	;# 
  1218  0217                     	;# 
  1219  0391                     	;# 
  1220  0392                     	;# 
  1221  0393                     	;# 
  1222  0394                     	;# 
  1223  0395                     	;# 
  1224  0396                     	;# 
  1225  0498                     	;# 
  1226  0498                     	;# 
  1227  0499                     	;# 
  1228  049A                     	;# 
  1229  049B                     	;# 
  1230  049B                     	;# 
  1231  049C                     	;# 
  1232  049E                     	;# 
  1233  049F                     	;# 
  1234  0611                     	;# 
  1235  0612                     	;# 
  1236  0613                     	;# 
  1237  0613                     	;# 
  1238  0614                     	;# 
  1239  0615                     	;# 
  1240  0616                     	;# 
  1241  0616                     	;# 
  1242  0617                     	;# 
  1243  0618                     	;# 
  1244  0619                     	;# 
  1245  0619                     	;# 
  1246  061A                     	;# 
  1247  061B                     	;# 
  1248  061C                     	;# 
  1249  061C                     	;# 
  1250  0691                     	;# 
  1251  0692                     	;# 
  1252  0693                     	;# 
  1253  0694                     	;# 
  1254  0695                     	;# 
  1255  0F0F                     	;# 
  1256  0F10                     	;# 
  1257  0F11                     	;# 
  1258  0F12                     	;# 
  1259  0F13                     	;# 
  1260  0F14                     	;# 
  1261  0F15                     	;# 
  1262  0F16                     	;# 
  1263  0F17                     	;# 
  1264  0F18                     	;# 
  1265  0F19                     	;# 
  1266  0F1A                     	;# 
  1267  0F1B                     	;# 
  1268  0F1C                     	;# 
  1269  0F1D                     	;# 
  1270  0F1E                     	;# 
  1271  0F1F                     	;# 
  1272  0F20                     	;# 
  1273  0F21                     	;# 
  1274  0F22                     	;# 
  1275  0F23                     	;# 
  1276  0F24                     	;# 
  1277  0F25                     	;# 
  1278  0F26                     	;# 
  1279  0F27                     	;# 
  1280  0F28                     	;# 
  1281  0F29                     	;# 
  1282  0F2A                     	;# 
  1283  0F2B                     	;# 
  1284  0F2C                     	;# 
  1285  0F2D                     	;# 
  1286  0F2E                     	;# 
  1287  0F2F                     	;# 
  1288  0F8C                     	;# 
  1289  0F8D                     	;# 
  1290  0F91                     	;# 
  1291  0F95                     	;# 
  1292  0F96                     	;# 
  1293  0F97                     	;# 
  1294  0F9C                     	;# 
  1295  0F9D                     	;# 
  1296  0F9E                     	;# 
  1297  0FE3                     	;# 
  1298  0FE4                     	;# 
  1299  0FE5                     	;# 
  1300  0FE6                     	;# 
  1301  0FE7                     	;# 
  1302  0FE8                     	;# 
  1303  0FE9                     	;# 
  1304  0FEA                     	;# 
  1305  0FEB                     	;# 
  1306  0FED                     	;# 
  1307  0FEE                     	;# 
  1308  0FEF                     	;# 
  1309  0000                     	;# 
  1310  0001                     	;# 
  1311  0002                     	;# 
  1312  0003                     	;# 
  1313  0004                     	;# 
  1314  0005                     	;# 
  1315  0006                     	;# 
  1316  0007                     	;# 
  1317  0008                     	;# 
  1318  0009                     	;# 
  1319  000A                     	;# 
  1320  000B                     	;# 
  1321  000C                     	;# 
  1322  000D                     	;# 
  1323  000E                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0013                     	;# 
  1327  0015                     	;# 
  1328  0016                     	;# 
  1329  0016                     	;# 
  1330  0017                     	;# 
  1331  0018                     	;# 
  1332  0019                     	;# 
  1333  001A                     	;# 
  1334  001B                     	;# 
  1335  001C                     	;# 
  1336  008C                     	;# 
  1337  008D                     	;# 
  1338  008E                     	;# 
  1339  0091                     	;# 
  1340  0092                     	;# 
  1341  0093                     	;# 
  1342  0095                     	;# 
  1343  0096                     	;# 
  1344  0097                     	;# 
  1345  0099                     	;# 
  1346  009A                     	;# 
  1347  009B                     	;# 
  1348  009B                     	;# 
  1349  009C                     	;# 
  1350  009D                     	;# 
  1351  009E                     	;# 
  1352  009F                     	;# 
  1353  010C                     	;# 
  1354  010D                     	;# 
  1355  010E                     	;# 
  1356  0111                     	;# 
  1357  0112                     	;# 
  1358  0113                     	;# 
  1359  0114                     	;# 
  1360  0115                     	;# 
  1361  0116                     	;# 
  1362  0117                     	;# 
  1363  0118                     	;# 
  1364  0119                     	;# 
  1365  011D                     	;# 
  1366  018C                     	;# 
  1367  018D                     	;# 
  1368  018E                     	;# 
  1369  0191                     	;# 
  1370  0191                     	;# 
  1371  0192                     	;# 
  1372  0193                     	;# 
  1373  0193                     	;# 
  1374  0194                     	;# 
  1375  0195                     	;# 
  1376  0196                     	;# 
  1377  0199                     	;# 
  1378  019A                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019C                     	;# 
  1382  019D                     	;# 
  1383  019E                     	;# 
  1384  019F                     	;# 
  1385  020C                     	;# 
  1386  020D                     	;# 
  1387  0211                     	;# 
  1388  0211                     	;# 
  1389  0212                     	;# 
  1390  0212                     	;# 
  1391  0213                     	;# 
  1392  0213                     	;# 
  1393  0214                     	;# 
  1394  0214                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0216                     	;# 
  1399  0216                     	;# 
  1400  0217                     	;# 
  1401  0217                     	;# 
  1402  0391                     	;# 
  1403  0392                     	;# 
  1404  0393                     	;# 
  1405  0394                     	;# 
  1406  0395                     	;# 
  1407  0396                     	;# 
  1408  0498                     	;# 
  1409  0498                     	;# 
  1410  0499                     	;# 
  1411  049A                     	;# 
  1412  049B                     	;# 
  1413  049B                     	;# 
  1414  049C                     	;# 
  1415  049E                     	;# 
  1416  049F                     	;# 
  1417  0611                     	;# 
  1418  0612                     	;# 
  1419  0613                     	;# 
  1420  0613                     	;# 
  1421  0614                     	;# 
  1422  0615                     	;# 
  1423  0616                     	;# 
  1424  0616                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061C                     	;# 
  1433  0691                     	;# 
  1434  0692                     	;# 
  1435  0693                     	;# 
  1436  0694                     	;# 
  1437  0695                     	;# 
  1438  0F0F                     	;# 
  1439  0F10                     	;# 
  1440  0F11                     	;# 
  1441  0F12                     	;# 
  1442  0F13                     	;# 
  1443  0F14                     	;# 
  1444  0F15                     	;# 
  1445  0F16                     	;# 
  1446  0F17                     	;# 
  1447  0F18                     	;# 
  1448  0F19                     	;# 
  1449  0F1A                     	;# 
  1450  0F1B                     	;# 
  1451  0F1C                     	;# 
  1452  0F1D                     	;# 
  1453  0F1E                     	;# 
  1454  0F1F                     	;# 
  1455  0F20                     	;# 
  1456  0F21                     	;# 
  1457  0F22                     	;# 
  1458  0F23                     	;# 
  1459  0F24                     	;# 
  1460  0F25                     	;# 
  1461  0F26                     	;# 
  1462  0F27                     	;# 
  1463  0F28                     	;# 
  1464  0F29                     	;# 
  1465  0F2A                     	;# 
  1466  0F2B                     	;# 
  1467  0F2C                     	;# 
  1468  0F2D                     	;# 
  1469  0F2E                     	;# 
  1470  0F2F                     	;# 
  1471  0F8C                     	;# 
  1472  0F8D                     	;# 
  1473  0F91                     	;# 
  1474  0F95                     	;# 
  1475  0F96                     	;# 
  1476  0F97                     	;# 
  1477  0F9C                     	;# 
  1478  0F9D                     	;# 
  1479  0F9E                     	;# 
  1480  0FE3                     	;# 
  1481  0FE4                     	;# 
  1482  0FE5                     	;# 
  1483  0FE6                     	;# 
  1484  0FE7                     	;# 
  1485  0FE8                     	;# 
  1486  0FE9                     	;# 
  1487  0FEA                     	;# 
  1488  0FEB                     	;# 
  1489  0FED                     	;# 
  1490  0FEE                     	;# 
  1491  0FEF                     	;# 
  1492  0000                     	;# 
  1493  0001                     	;# 
  1494  0002                     	;# 
  1495  0003                     	;# 
  1496  0004                     	;# 
  1497  0005                     	;# 
  1498  0006                     	;# 
  1499  0007                     	;# 
  1500  0008                     	;# 
  1501  0009                     	;# 
  1502  000A                     	;# 
  1503  000B                     	;# 
  1504  000C                     	;# 
  1505  000D                     	;# 
  1506  000E                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0013                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001C                     	;# 
  1519  008C                     	;# 
  1520  008D                     	;# 
  1521  008E                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0093                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  009F                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0111                     	;# 
  1540  0112                     	;# 
  1541  0113                     	;# 
  1542  0114                     	;# 
  1543  0115                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  0118                     	;# 
  1547  0119                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020C                     	;# 
  1569  020D                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0391                     	;# 
  1586  0392                     	;# 
  1587  0393                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0498                     	;# 
  1592  0498                     	;# 
  1593  0499                     	;# 
  1594  049A                     	;# 
  1595  049B                     	;# 
  1596  049B                     	;# 
  1597  049C                     	;# 
  1598  049E                     	;# 
  1599  049F                     	;# 
  1600  0611                     	;# 
  1601  0612                     	;# 
  1602  0613                     	;# 
  1603  0613                     	;# 
  1604  0614                     	;# 
  1605  0615                     	;# 
  1606  0616                     	;# 
  1607  0616                     	;# 
  1608  0617                     	;# 
  1609  0618                     	;# 
  1610  0619                     	;# 
  1611  0619                     	;# 
  1612  061A                     	;# 
  1613  061B                     	;# 
  1614  061C                     	;# 
  1615  061C                     	;# 
  1616  0691                     	;# 
  1617  0692                     	;# 
  1618  0693                     	;# 
  1619  0694                     	;# 
  1620  0695                     	;# 
  1621  0F0F                     	;# 
  1622  0F10                     	;# 
  1623  0F11                     	;# 
  1624  0F12                     	;# 
  1625  0F13                     	;# 
  1626  0F14                     	;# 
  1627  0F15                     	;# 
  1628  0F16                     	;# 
  1629  0F17                     	;# 
  1630  0F18                     	;# 
  1631  0F19                     	;# 
  1632  0F1A                     	;# 
  1633  0F1B                     	;# 
  1634  0F1C                     	;# 
  1635  0F1D                     	;# 
  1636  0F1E                     	;# 
  1637  0F1F                     	;# 
  1638  0F20                     	;# 
  1639  0F21                     	;# 
  1640  0F22                     	;# 
  1641  0F23                     	;# 
  1642  0F24                     	;# 
  1643  0F25                     	;# 
  1644  0F26                     	;# 
  1645  0F27                     	;# 
  1646  0F28                     	;# 
  1647  0F29                     	;# 
  1648  0F2A                     	;# 
  1649  0F2B                     	;# 
  1650  0F2C                     	;# 
  1651  0F2D                     	;# 
  1652  0F2E                     	;# 
  1653  0F2F                     	;# 
  1654  0F8C                     	;# 
  1655  0F8D                     	;# 
  1656  0F91                     	;# 
  1657  0F95                     	;# 
  1658  0F96                     	;# 
  1659  0F97                     	;# 
  1660  0F9C                     	;# 
  1661  0F9D                     	;# 
  1662  0F9E                     	;# 
  1663  0FE3                     	;# 
  1664  0FE4                     	;# 
  1665  0FE5                     	;# 
  1666  0FE6                     	;# 
  1667  0FE7                     	;# 
  1668  0FE8                     	;# 
  1669  0FE9                     	;# 
  1670  0FEA                     	;# 
  1671  0FEB                     	;# 
  1672  0FED                     	;# 
  1673  0FEE                     	;# 
  1674  0FEF                     	;# 
  1675  0000                     	;# 
  1676  0001                     	;# 
  1677  0002                     	;# 
  1678  0003                     	;# 
  1679  0004                     	;# 
  1680  0005                     	;# 
  1681  0006                     	;# 
  1682  0007                     	;# 
  1683  0008                     	;# 
  1684  0009                     	;# 
  1685  000A                     	;# 
  1686  000B                     	;# 
  1687  000C                     	;# 
  1688  000D                     	;# 
  1689  000E                     	;# 
  1690  0011                     	;# 
  1691  0012                     	;# 
  1692  0013                     	;# 
  1693  0015                     	;# 
  1694  0016                     	;# 
  1695  0016                     	;# 
  1696  0017                     	;# 
  1697  0018                     	;# 
  1698  0019                     	;# 
  1699  001A                     	;# 
  1700  001B                     	;# 
  1701  001C                     	;# 
  1702  008C                     	;# 
  1703  008D                     	;# 
  1704  008E                     	;# 
  1705  0091                     	;# 
  1706  0092                     	;# 
  1707  0093                     	;# 
  1708  0095                     	;# 
  1709  0096                     	;# 
  1710  0097                     	;# 
  1711  0099                     	;# 
  1712  009A                     	;# 
  1713  009B                     	;# 
  1714  009B                     	;# 
  1715  009C                     	;# 
  1716  009D                     	;# 
  1717  009E                     	;# 
  1718  009F                     	;# 
  1719  010C                     	;# 
  1720  010D                     	;# 
  1721  010E                     	;# 
  1722  0111                     	;# 
  1723  0112                     	;# 
  1724  0113                     	;# 
  1725  0114                     	;# 
  1726  0115                     	;# 
  1727  0116                     	;# 
  1728  0117                     	;# 
  1729  0118                     	;# 
  1730  0119                     	;# 
  1731  011D                     	;# 
  1732  018C                     	;# 
  1733  018D                     	;# 
  1734  018E                     	;# 
  1735  0191                     	;# 
  1736  0191                     	;# 
  1737  0192                     	;# 
  1738  0193                     	;# 
  1739  0193                     	;# 
  1740  0194                     	;# 
  1741  0195                     	;# 
  1742  0196                     	;# 
  1743  0199                     	;# 
  1744  019A                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019C                     	;# 
  1748  019D                     	;# 
  1749  019E                     	;# 
  1750  019F                     	;# 
  1751  020C                     	;# 
  1752  020D                     	;# 
  1753  0211                     	;# 
  1754  0211                     	;# 
  1755  0212                     	;# 
  1756  0212                     	;# 
  1757  0213                     	;# 
  1758  0213                     	;# 
  1759  0214                     	;# 
  1760  0214                     	;# 
  1761  0215                     	;# 
  1762  0215                     	;# 
  1763  0215                     	;# 
  1764  0216                     	;# 
  1765  0216                     	;# 
  1766  0217                     	;# 
  1767  0217                     	;# 
  1768  0391                     	;# 
  1769  0392                     	;# 
  1770  0393                     	;# 
  1771  0394                     	;# 
  1772  0395                     	;# 
  1773  0396                     	;# 
  1774  0498                     	;# 
  1775  0498                     	;# 
  1776  0499                     	;# 
  1777  049A                     	;# 
  1778  049B                     	;# 
  1779  049B                     	;# 
  1780  049C                     	;# 
  1781  049E                     	;# 
  1782  049F                     	;# 
  1783  0611                     	;# 
  1784  0612                     	;# 
  1785  0613                     	;# 
  1786  0613                     	;# 
  1787  0614                     	;# 
  1788  0615                     	;# 
  1789  0616                     	;# 
  1790  0616                     	;# 
  1791  0617                     	;# 
  1792  0618                     	;# 
  1793  0619                     	;# 
  1794  0619                     	;# 
  1795  061A                     	;# 
  1796  061B                     	;# 
  1797  061C                     	;# 
  1798  061C                     	;# 
  1799  0691                     	;# 
  1800  0692                     	;# 
  1801  0693                     	;# 
  1802  0694                     	;# 
  1803  0695                     	;# 
  1804  0F0F                     	;# 
  1805  0F10                     	;# 
  1806  0F11                     	;# 
  1807  0F12                     	;# 
  1808  0F13                     	;# 
  1809  0F14                     	;# 
  1810  0F15                     	;# 
  1811  0F16                     	;# 
  1812  0F17                     	;# 
  1813  0F18                     	;# 
  1814  0F19                     	;# 
  1815  0F1A                     	;# 
  1816  0F1B                     	;# 
  1817  0F1C                     	;# 
  1818  0F1D                     	;# 
  1819  0F1E                     	;# 
  1820  0F1F                     	;# 
  1821  0F20                     	;# 
  1822  0F21                     	;# 
  1823  0F22                     	;# 
  1824  0F23                     	;# 
  1825  0F24                     	;# 
  1826  0F25                     	;# 
  1827  0F26                     	;# 
  1828  0F27                     	;# 
  1829  0F28                     	;# 
  1830  0F29                     	;# 
  1831  0F2A                     	;# 
  1832  0F2B                     	;# 
  1833  0F2C                     	;# 
  1834  0F2D                     	;# 
  1835  0F2E                     	;# 
  1836  0F2F                     	;# 
  1837  0F8C                     	;# 
  1838  0F8D                     	;# 
  1839  0F91                     	;# 
  1840  0F95                     	;# 
  1841  0F96                     	;# 
  1842  0F97                     	;# 
  1843  0F9C                     	;# 
  1844  0F9D                     	;# 
  1845  0F9E                     	;# 
  1846  0FE3                     	;# 
  1847  0FE4                     	;# 
  1848  0FE5                     	;# 
  1849  0FE6                     	;# 
  1850  0FE7                     	;# 
  1851  0FE8                     	;# 
  1852  0FE9                     	;# 
  1853  0FEA                     	;# 
  1854  0FEB                     	;# 
  1855  0FED                     	;# 
  1856  0FEE                     	;# 
  1857  0FEF                     	;# 
  1858  0000                     	;# 
  1859  0001                     	;# 
  1860  0002                     	;# 
  1861  0003                     	;# 
  1862  0004                     	;# 
  1863  0005                     	;# 
  1864  0006                     	;# 
  1865  0007                     	;# 
  1866  0008                     	;# 
  1867  0009                     	;# 
  1868  000A                     	;# 
  1869  000B                     	;# 
  1870  000C                     	;# 
  1871  000D                     	;# 
  1872  000E                     	;# 
  1873  0011                     	;# 
  1874  0012                     	;# 
  1875  0013                     	;# 
  1876  0015                     	;# 
  1877  0016                     	;# 
  1878  0016                     	;# 
  1879  0017                     	;# 
  1880  0018                     	;# 
  1881  0019                     	;# 
  1882  001A                     	;# 
  1883  001B                     	;# 
  1884  001C                     	;# 
  1885  008C                     	;# 
  1886  008D                     	;# 
  1887  008E                     	;# 
  1888  0091                     	;# 
  1889  0092                     	;# 
  1890  0093                     	;# 
  1891  0095                     	;# 
  1892  0096                     	;# 
  1893  0097                     	;# 
  1894  0099                     	;# 
  1895  009A                     	;# 
  1896  009B                     	;# 
  1897  009B                     	;# 
  1898  009C                     	;# 
  1899  009D                     	;# 
  1900  009E                     	;# 
  1901  009F                     	;# 
  1902  010C                     	;# 
  1903  010D                     	;# 
  1904  010E                     	;# 
  1905  0111                     	;# 
  1906  0112                     	;# 
  1907  0113                     	;# 
  1908  0114                     	;# 
  1909  0115                     	;# 
  1910  0116                     	;# 
  1911  0117                     	;# 
  1912  0118                     	;# 
  1913  0119                     	;# 
  1914  011D                     	;# 
  1915  018C                     	;# 
  1916  018D                     	;# 
  1917  018E                     	;# 
  1918  0191                     	;# 
  1919  0191                     	;# 
  1920  0192                     	;# 
  1921  0193                     	;# 
  1922  0193                     	;# 
  1923  0194                     	;# 
  1924  0195                     	;# 
  1925  0196                     	;# 
  1926  0199                     	;# 
  1927  019A                     	;# 
  1928  019B                     	;# 
  1929  019B                     	;# 
  1930  019C                     	;# 
  1931  019D                     	;# 
  1932  019E                     	;# 
  1933  019F                     	;# 
  1934  020C                     	;# 
  1935  020D                     	;# 
  1936  0211                     	;# 
  1937  0211                     	;# 
  1938  0212                     	;# 
  1939  0212                     	;# 
  1940  0213                     	;# 
  1941  0213                     	;# 
  1942  0214                     	;# 
  1943  0214                     	;# 
  1944  0215                     	;# 
  1945  0215                     	;# 
  1946  0215                     	;# 
  1947  0216                     	;# 
  1948  0216                     	;# 
  1949  0217                     	;# 
  1950  0217                     	;# 
  1951  0391                     	;# 
  1952  0392                     	;# 
  1953  0393                     	;# 
  1954  0394                     	;# 
  1955  0395                     	;# 
  1956  0396                     	;# 
  1957  0498                     	;# 
  1958  0498                     	;# 
  1959  0499                     	;# 
  1960  049A                     	;# 
  1961  049B                     	;# 
  1962  049B                     	;# 
  1963  049C                     	;# 
  1964  049E                     	;# 
  1965  049F                     	;# 
  1966  0611                     	;# 
  1967  0612                     	;# 
  1968  0613                     	;# 
  1969  0613                     	;# 
  1970  0614                     	;# 
  1971  0615                     	;# 
  1972  0616                     	;# 
  1973  0616                     	;# 
  1974  0617                     	;# 
  1975  0618                     	;# 
  1976  0619                     	;# 
  1977  0619                     	;# 
  1978  061A                     	;# 
  1979  061B                     	;# 
  1980  061C                     	;# 
  1981  061C                     	;# 
  1982  0691                     	;# 
  1983  0692                     	;# 
  1984  0693                     	;# 
  1985  0694                     	;# 
  1986  0695                     	;# 
  1987  0F0F                     	;# 
  1988  0F10                     	;# 
  1989  0F11                     	;# 
  1990  0F12                     	;# 
  1991  0F13                     	;# 
  1992  0F14                     	;# 
  1993  0F15                     	;# 
  1994  0F16                     	;# 
  1995  0F17                     	;# 
  1996  0F18                     	;# 
  1997  0F19                     	;# 
  1998  0F1A                     	;# 
  1999  0F1B                     	;# 
  2000  0F1C                     	;# 
  2001  0F1D                     	;# 
  2002  0F1E                     	;# 
  2003  0F1F                     	;# 
  2004  0F20                     	;# 
  2005  0F21                     	;# 
  2006  0F22                     	;# 
  2007  0F23                     	;# 
  2008  0F24                     	;# 
  2009  0F25                     	;# 
  2010  0F26                     	;# 
  2011  0F27                     	;# 
  2012  0F28                     	;# 
  2013  0F29                     	;# 
  2014  0F2A                     	;# 
  2015  0F2B                     	;# 
  2016  0F2C                     	;# 
  2017  0F2D                     	;# 
  2018  0F2E                     	;# 
  2019  0F2F                     	;# 
  2020  0F8C                     	;# 
  2021  0F8D                     	;# 
  2022  0F91                     	;# 
  2023  0F95                     	;# 
  2024  0F96                     	;# 
  2025  0F97                     	;# 
  2026  0F9C                     	;# 
  2027  0F9D                     	;# 
  2028  0F9E                     	;# 
  2029  0FE3                     	;# 
  2030  0FE4                     	;# 
  2031  0FE5                     	;# 
  2032  0FE6                     	;# 
  2033  0FE7                     	;# 
  2034  0FE8                     	;# 
  2035  0FE9                     	;# 
  2036  0FEA                     	;# 
  2037  0FEB                     	;# 
  2038  0FED                     	;# 
  2039  0FEE                     	;# 
  2040  0FEF                     	;# 
  2041  0000                     	;# 
  2042  0001                     	;# 
  2043  0002                     	;# 
  2044  0003                     	;# 
  2045  0004                     	;# 
  2046  0005                     	;# 
  2047  0006                     	;# 
  2048  0007                     	;# 
  2049  0008                     	;# 
  2050  0009                     	;# 
  2051  000A                     	;# 
  2052  000B                     	;# 
  2053  000C                     	;# 
  2054  000D                     	;# 
  2055  000E                     	;# 
  2056  0011                     	;# 
  2057  0012                     	;# 
  2058  0013                     	;# 
  2059  0015                     	;# 
  2060  0016                     	;# 
  2061  0016                     	;# 
  2062  0017                     	;# 
  2063  0018                     	;# 
  2064  0019                     	;# 
  2065  001A                     	;# 
  2066  001B                     	;# 
  2067  001C                     	;# 
  2068  008C                     	;# 
  2069  008D                     	;# 
  2070  008E                     	;# 
  2071  0091                     	;# 
  2072  0092                     	;# 
  2073  0093                     	;# 
  2074  0095                     	;# 
  2075  0096                     	;# 
  2076  0097                     	;# 
  2077  0099                     	;# 
  2078  009A                     	;# 
  2079  009B                     	;# 
  2080  009B                     	;# 
  2081  009C                     	;# 
  2082  009D                     	;# 
  2083  009E                     	;# 
  2084  009F                     	;# 
  2085  010C                     	;# 
  2086  010D                     	;# 
  2087  010E                     	;# 
  2088  0111                     	;# 
  2089  0112                     	;# 
  2090  0113                     	;# 
  2091  0114                     	;# 
  2092  0115                     	;# 
  2093  0116                     	;# 
  2094  0117                     	;# 
  2095  0118                     	;# 
  2096  0119                     	;# 
  2097  011D                     	;# 
  2098  018C                     	;# 
  2099  018D                     	;# 
  2100  018E                     	;# 
  2101  0191                     	;# 
  2102  0191                     	;# 
  2103  0192                     	;# 
  2104  0193                     	;# 
  2105  0193                     	;# 
  2106  0194                     	;# 
  2107  0195                     	;# 
  2108  0196                     	;# 
  2109  0199                     	;# 
  2110  019A                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019D                     	;# 
  2115  019E                     	;# 
  2116  019F                     	;# 
  2117  020C                     	;# 
  2118  020D                     	;# 
  2119  0211                     	;# 
  2120  0211                     	;# 
  2121  0212                     	;# 
  2122  0212                     	;# 
  2123  0213                     	;# 
  2124  0213                     	;# 
  2125  0214                     	;# 
  2126  0214                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0216                     	;# 
  2131  0216                     	;# 
  2132  0217                     	;# 
  2133  0217                     	;# 
  2134  0391                     	;# 
  2135  0392                     	;# 
  2136  0393                     	;# 
  2137  0394                     	;# 
  2138  0395                     	;# 
  2139  0396                     	;# 
  2140  0498                     	;# 
  2141  0498                     	;# 
  2142  0499                     	;# 
  2143  049A                     	;# 
  2144  049B                     	;# 
  2145  049B                     	;# 
  2146  049C                     	;# 
  2147  049E                     	;# 
  2148  049F                     	;# 
  2149  0611                     	;# 
  2150  0612                     	;# 
  2151  0613                     	;# 
  2152  0613                     	;# 
  2153  0614                     	;# 
  2154  0615                     	;# 
  2155  0616                     	;# 
  2156  0616                     	;# 
  2157  0617                     	;# 
  2158  0618                     	;# 
  2159  0619                     	;# 
  2160  0619                     	;# 
  2161  061A                     	;# 
  2162  061B                     	;# 
  2163  061C                     	;# 
  2164  061C                     	;# 
  2165  0691                     	;# 
  2166  0692                     	;# 
  2167  0693                     	;# 
  2168  0694                     	;# 
  2169  0695                     	;# 
  2170  0F0F                     	;# 
  2171  0F10                     	;# 
  2172  0F11                     	;# 
  2173  0F12                     	;# 
  2174  0F13                     	;# 
  2175  0F14                     	;# 
  2176  0F15                     	;# 
  2177  0F16                     	;# 
  2178  0F17                     	;# 
  2179  0F18                     	;# 
  2180  0F19                     	;# 
  2181  0F1A                     	;# 
  2182  0F1B                     	;# 
  2183  0F1C                     	;# 
  2184  0F1D                     	;# 
  2185  0F1E                     	;# 
  2186  0F1F                     	;# 
  2187  0F20                     	;# 
  2188  0F21                     	;# 
  2189  0F22                     	;# 
  2190  0F23                     	;# 
  2191  0F24                     	;# 
  2192  0F25                     	;# 
  2193  0F26                     	;# 
  2194  0F27                     	;# 
  2195  0F28                     	;# 
  2196  0F29                     	;# 
  2197  0F2A                     	;# 
  2198  0F2B                     	;# 
  2199  0F2C                     	;# 
  2200  0F2D                     	;# 
  2201  0F2E                     	;# 
  2202  0F2F                     	;# 
  2203  0F8C                     	;# 
  2204  0F8D                     	;# 
  2205  0F91                     	;# 
  2206  0F95                     	;# 
  2207  0F96                     	;# 
  2208  0F97                     	;# 
  2209  0F9C                     	;# 
  2210  0F9D                     	;# 
  2211  0F9E                     	;# 
  2212  0FE3                     	;# 
  2213  0FE4                     	;# 
  2214  0FE5                     	;# 
  2215  0FE6                     	;# 
  2216  0FE7                     	;# 
  2217  0FE8                     	;# 
  2218  0FE9                     	;# 
  2219  0FEA                     	;# 
  2220  0FEB                     	;# 
  2221  0FED                     	;# 
  2222  0FEE                     	;# 
  2223  0FEF                     	;# 
  2224  0000                     	;# 
  2225  0001                     	;# 
  2226  0002                     	;# 
  2227  0003                     	;# 
  2228  0004                     	;# 
  2229  0005                     	;# 
  2230  0006                     	;# 
  2231  0007                     	;# 
  2232  0008                     	;# 
  2233  0009                     	;# 
  2234  000A                     	;# 
  2235  000B                     	;# 
  2236  000C                     	;# 
  2237  000D                     	;# 
  2238  000E                     	;# 
  2239  0011                     	;# 
  2240  0012                     	;# 
  2241  0013                     	;# 
  2242  0015                     	;# 
  2243  0016                     	;# 
  2244  0016                     	;# 
  2245  0017                     	;# 
  2246  0018                     	;# 
  2247  0019                     	;# 
  2248  001A                     	;# 
  2249  001B                     	;# 
  2250  001C                     	;# 
  2251  008C                     	;# 
  2252  008D                     	;# 
  2253  008E                     	;# 
  2254  0091                     	;# 
  2255  0092                     	;# 
  2256  0093                     	;# 
  2257  0095                     	;# 
  2258  0096                     	;# 
  2259  0097                     	;# 
  2260  0099                     	;# 
  2261  009A                     	;# 
  2262  009B                     	;# 
  2263  009B                     	;# 
  2264  009C                     	;# 
  2265  009D                     	;# 
  2266  009E                     	;# 
  2267  009F                     	;# 
  2268  010C                     	;# 
  2269  010D                     	;# 
  2270  010E                     	;# 
  2271  0111                     	;# 
  2272  0112                     	;# 
  2273  0113                     	;# 
  2274  0114                     	;# 
  2275  0115                     	;# 
  2276  0116                     	;# 
  2277  0117                     	;# 
  2278  0118                     	;# 
  2279  0119                     	;# 
  2280  011D                     	;# 
  2281  018C                     	;# 
  2282  018D                     	;# 
  2283  018E                     	;# 
  2284  0191                     	;# 
  2285  0191                     	;# 
  2286  0192                     	;# 
  2287  0193                     	;# 
  2288  0193                     	;# 
  2289  0194                     	;# 
  2290  0195                     	;# 
  2291  0196                     	;# 
  2292  0199                     	;# 
  2293  019A                     	;# 
  2294  019B                     	;# 
  2295  019B                     	;# 
  2296  019C                     	;# 
  2297  019D                     	;# 
  2298  019E                     	;# 
  2299  019F                     	;# 
  2300  020C                     	;# 
  2301  020D                     	;# 
  2302  0211                     	;# 
  2303  0211                     	;# 
  2304  0212                     	;# 
  2305  0212                     	;# 
  2306  0213                     	;# 
  2307  0213                     	;# 
  2308  0214                     	;# 
  2309  0214                     	;# 
  2310  0215                     	;# 
  2311  0215                     	;# 
  2312  0215                     	;# 
  2313  0216                     	;# 
  2314  0216                     	;# 
  2315  0217                     	;# 
  2316  0217                     	;# 
  2317  0391                     	;# 
  2318  0392                     	;# 
  2319  0393                     	;# 
  2320  0394                     	;# 
  2321  0395                     	;# 
  2322  0396                     	;# 
  2323  0498                     	;# 
  2324  0498                     	;# 
  2325  0499                     	;# 
  2326  049A                     	;# 
  2327  049B                     	;# 
  2328  049B                     	;# 
  2329  049C                     	;# 
  2330  049E                     	;# 
  2331  049F                     	;# 
  2332  0611                     	;# 
  2333  0612                     	;# 
  2334  0613                     	;# 
  2335  0613                     	;# 
  2336  0614                     	;# 
  2337  0615                     	;# 
  2338  0616                     	;# 
  2339  0616                     	;# 
  2340  0617                     	;# 
  2341  0618                     	;# 
  2342  0619                     	;# 
  2343  0619                     	;# 
  2344  061A                     	;# 
  2345  061B                     	;# 
  2346  061C                     	;# 
  2347  061C                     	;# 
  2348  0691                     	;# 
  2349  0692                     	;# 
  2350  0693                     	;# 
  2351  0694                     	;# 
  2352  0695                     	;# 
  2353  0F0F                     	;# 
  2354  0F10                     	;# 
  2355  0F11                     	;# 
  2356  0F12                     	;# 
  2357  0F13                     	;# 
  2358  0F14                     	;# 
  2359  0F15                     	;# 
  2360  0F16                     	;# 
  2361  0F17                     	;# 
  2362  0F18                     	;# 
  2363  0F19                     	;# 
  2364  0F1A                     	;# 
  2365  0F1B                     	;# 
  2366  0F1C                     	;# 
  2367  0F1D                     	;# 
  2368  0F1E                     	;# 
  2369  0F1F                     	;# 
  2370  0F20                     	;# 
  2371  0F21                     	;# 
  2372  0F22                     	;# 
  2373  0F23                     	;# 
  2374  0F24                     	;# 
  2375  0F25                     	;# 
  2376  0F26                     	;# 
  2377  0F27                     	;# 
  2378  0F28                     	;# 
  2379  0F29                     	;# 
  2380  0F2A                     	;# 
  2381  0F2B                     	;# 
  2382  0F2C                     	;# 
  2383  0F2D                     	;# 
  2384  0F2E                     	;# 
  2385  0F2F                     	;# 
  2386  0F8C                     	;# 
  2387  0F8D                     	;# 
  2388  0F91                     	;# 
  2389  0F95                     	;# 
  2390  0F96                     	;# 
  2391  0F97                     	;# 
  2392  0F9C                     	;# 
  2393  0F9D                     	;# 
  2394  0F9E                     	;# 
  2395  0FE3                     	;# 
  2396  0FE4                     	;# 
  2397  0FE5                     	;# 
  2398  0FE6                     	;# 
  2399  0FE7                     	;# 
  2400  0FE8                     	;# 
  2401  0FE9                     	;# 
  2402  0FEA                     	;# 
  2403  0FEB                     	;# 
  2404  0FED                     	;# 
  2405  0FEE                     	;# 
  2406  0FEF                     	;# 
  2407  0000                     	;# 
  2408  0001                     	;# 
  2409  0002                     	;# 
  2410  0003                     	;# 
  2411  0004                     	;# 
  2412  0005                     	;# 
  2413  0006                     	;# 
  2414  0007                     	;# 
  2415  0008                     	;# 
  2416  0009                     	;# 
  2417  000A                     	;# 
  2418  000B                     	;# 
  2419  000C                     	;# 
  2420  000D                     	;# 
  2421  000E                     	;# 
  2422  0011                     	;# 
  2423  0012                     	;# 
  2424  0013                     	;# 
  2425  0015                     	;# 
  2426  0016                     	;# 
  2427  0016                     	;# 
  2428  0017                     	;# 
  2429  0018                     	;# 
  2430  0019                     	;# 
  2431  001A                     	;# 
  2432  001B                     	;# 
  2433  001C                     	;# 
  2434  008C                     	;# 
  2435  008D                     	;# 
  2436  008E                     	;# 
  2437  0091                     	;# 
  2438  0092                     	;# 
  2439  0093                     	;# 
  2440  0095                     	;# 
  2441  0096                     	;# 
  2442  0097                     	;# 
  2443  0099                     	;# 
  2444  009A                     	;# 
  2445  009B                     	;# 
  2446  009B                     	;# 
  2447  009C                     	;# 
  2448  009D                     	;# 
  2449  009E                     	;# 
  2450  009F                     	;# 
  2451  010C                     	;# 
  2452  010D                     	;# 
  2453  010E                     	;# 
  2454  0111                     	;# 
  2455  0112                     	;# 
  2456  0113                     	;# 
  2457  0114                     	;# 
  2458  0115                     	;# 
  2459  0116                     	;# 
  2460  0117                     	;# 
  2461  0118                     	;# 
  2462  0119                     	;# 
  2463  011D                     	;# 
  2464  018C                     	;# 
  2465  018D                     	;# 
  2466  018E                     	;# 
  2467  0191                     	;# 
  2468  0191                     	;# 
  2469  0192                     	;# 
  2470  0193                     	;# 
  2471  0193                     	;# 
  2472  0194                     	;# 
  2473  0195                     	;# 
  2474  0196                     	;# 
  2475  0199                     	;# 
  2476  019A                     	;# 
  2477  019B                     	;# 
  2478  019B                     	;# 
  2479  019C                     	;# 
  2480  019D                     	;# 
  2481  019E                     	;# 
  2482  019F                     	;# 
  2483  020C                     	;# 
  2484  020D                     	;# 
  2485  0211                     	;# 
  2486  0211                     	;# 
  2487  0212                     	;# 
  2488  0212                     	;# 
  2489  0213                     	;# 
  2490  0213                     	;# 
  2491  0214                     	;# 
  2492  0214                     	;# 
  2493  0215                     	;# 
  2494  0215                     	;# 
  2495  0215                     	;# 
  2496  0216                     	;# 
  2497  0216                     	;# 
  2498  0217                     	;# 
  2499  0217                     	;# 
  2500  0391                     	;# 
  2501  0392                     	;# 
  2502  0393                     	;# 
  2503  0394                     	;# 
  2504  0395                     	;# 
  2505  0396                     	;# 
  2506  0498                     	;# 
  2507  0498                     	;# 
  2508  0499                     	;# 
  2509  049A                     	;# 
  2510  049B                     	;# 
  2511  049B                     	;# 
  2512  049C                     	;# 
  2513  049E                     	;# 
  2514  049F                     	;# 
  2515  0611                     	;# 
  2516  0612                     	;# 
  2517  0613                     	;# 
  2518  0613                     	;# 
  2519  0614                     	;# 
  2520  0615                     	;# 
  2521  0616                     	;# 
  2522  0616                     	;# 
  2523  0617                     	;# 
  2524  0618                     	;# 
  2525  0619                     	;# 
  2526  0619                     	;# 
  2527  061A                     	;# 
  2528  061B                     	;# 
  2529  061C                     	;# 
  2530  061C                     	;# 
  2531  0691                     	;# 
  2532  0692                     	;# 
  2533  0693                     	;# 
  2534  0694                     	;# 
  2535  0695                     	;# 
  2536  0F0F                     	;# 
  2537  0F10                     	;# 
  2538  0F11                     	;# 
  2539  0F12                     	;# 
  2540  0F13                     	;# 
  2541  0F14                     	;# 
  2542  0F15                     	;# 
  2543  0F16                     	;# 
  2544  0F17                     	;# 
  2545  0F18                     	;# 
  2546  0F19                     	;# 
  2547  0F1A                     	;# 
  2548  0F1B                     	;# 
  2549  0F1C                     	;# 
  2550  0F1D                     	;# 
  2551  0F1E                     	;# 
  2552  0F1F                     	;# 
  2553  0F20                     	;# 
  2554  0F21                     	;# 
  2555  0F22                     	;# 
  2556  0F23                     	;# 
  2557  0F24                     	;# 
  2558  0F25                     	;# 
  2559  0F26                     	;# 
  2560  0F27                     	;# 
  2561  0F28                     	;# 
  2562  0F29                     	;# 
  2563  0F2A                     	;# 
  2564  0F2B                     	;# 
  2565  0F2C                     	;# 
  2566  0F2D                     	;# 
  2567  0F2E                     	;# 
  2568  0F2F                     	;# 
  2569  0F8C                     	;# 
  2570  0F8D                     	;# 
  2571  0F91                     	;# 
  2572  0F95                     	;# 
  2573  0F96                     	;# 
  2574  0F97                     	;# 
  2575  0F9C                     	;# 
  2576  0F9D                     	;# 
  2577  0F9E                     	;# 
  2578  0FE3                     	;# 
  2579  0FE4                     	;# 
  2580  0FE5                     	;# 
  2581  0FE6                     	;# 
  2582  0FE7                     	;# 
  2583  0FE8                     	;# 
  2584  0FE9                     	;# 
  2585  0FEA                     	;# 
  2586  0FEB                     	;# 
  2587  0FED                     	;# 
  2588  0FEE                     	;# 
  2589  0FEF                     	;# 
  2590  0000                     	;# 
  2591  0001                     	;# 
  2592  0002                     	;# 
  2593  0003                     	;# 
  2594  0004                     	;# 
  2595  0005                     	;# 
  2596  0006                     	;# 
  2597  0007                     	;# 
  2598  0008                     	;# 
  2599  0009                     	;# 
  2600  000A                     	;# 
  2601  000B                     	;# 
  2602  000C                     	;# 
  2603  000D                     	;# 
  2604  000E                     	;# 
  2605  0011                     	;# 
  2606  0012                     	;# 
  2607  0013                     	;# 
  2608  0015                     	;# 
  2609  0016                     	;# 
  2610  0016                     	;# 
  2611  0017                     	;# 
  2612  0018                     	;# 
  2613  0019                     	;# 
  2614  001A                     	;# 
  2615  001B                     	;# 
  2616  001C                     	;# 
  2617  008C                     	;# 
  2618  008D                     	;# 
  2619  008E                     	;# 
  2620  0091                     	;# 
  2621  0092                     	;# 
  2622  0093                     	;# 
  2623  0095                     	;# 
  2624  0096                     	;# 
  2625  0097                     	;# 
  2626  0099                     	;# 
  2627  009A                     	;# 
  2628  009B                     	;# 
  2629  009B                     	;# 
  2630  009C                     	;# 
  2631  009D                     	;# 
  2632  009E                     	;# 
  2633  009F                     	;# 
  2634  010C                     	;# 
  2635  010D                     	;# 
  2636  010E                     	;# 
  2637  0111                     	;# 
  2638  0112                     	;# 
  2639  0113                     	;# 
  2640  0114                     	;# 
  2641  0115                     	;# 
  2642  0116                     	;# 
  2643  0117                     	;# 
  2644  0118                     	;# 
  2645  0119                     	;# 
  2646  011D                     	;# 
  2647  018C                     	;# 
  2648  018D                     	;# 
  2649  018E                     	;# 
  2650  0191                     	;# 
  2651  0191                     	;# 
  2652  0192                     	;# 
  2653  0193                     	;# 
  2654  0193                     	;# 
  2655  0194                     	;# 
  2656  0195                     	;# 
  2657  0196                     	;# 
  2658  0199                     	;# 
  2659  019A                     	;# 
  2660  019B                     	;# 
  2661  019B                     	;# 
  2662  019C                     	;# 
  2663  019D                     	;# 
  2664  019E                     	;# 
  2665  019F                     	;# 
  2666  020C                     	;# 
  2667  020D                     	;# 
  2668  0211                     	;# 
  2669  0211                     	;# 
  2670  0212                     	;# 
  2671  0212                     	;# 
  2672  0213                     	;# 
  2673  0213                     	;# 
  2674  0214                     	;# 
  2675  0214                     	;# 
  2676  0215                     	;# 
  2677  0215                     	;# 
  2678  0215                     	;# 
  2679  0216                     	;# 
  2680  0216                     	;# 
  2681  0217                     	;# 
  2682  0217                     	;# 
  2683  0391                     	;# 
  2684  0392                     	;# 
  2685  0393                     	;# 
  2686  0394                     	;# 
  2687  0395                     	;# 
  2688  0396                     	;# 
  2689  0498                     	;# 
  2690  0498                     	;# 
  2691  0499                     	;# 
  2692  049A                     	;# 
  2693  049B                     	;# 
  2694  049B                     	;# 
  2695  049C                     	;# 
  2696  049E                     	;# 
  2697  049F                     	;# 
  2698  0611                     	;# 
  2699  0612                     	;# 
  2700  0613                     	;# 
  2701  0613                     	;# 
  2702  0614                     	;# 
  2703  0615                     	;# 
  2704  0616                     	;# 
  2705  0616                     	;# 
  2706  0617                     	;# 
  2707  0618                     	;# 
  2708  0619                     	;# 
  2709  0619                     	;# 
  2710  061A                     	;# 
  2711  061B                     	;# 
  2712  061C                     	;# 
  2713  061C                     	;# 
  2714  0691                     	;# 
  2715  0692                     	;# 
  2716  0693                     	;# 
  2717  0694                     	;# 
  2718  0695                     	;# 
  2719  0F0F                     	;# 
  2720  0F10                     	;# 
  2721  0F11                     	;# 
  2722  0F12                     	;# 
  2723  0F13                     	;# 
  2724  0F14                     	;# 
  2725  0F15                     	;# 
  2726  0F16                     	;# 
  2727  0F17                     	;# 
  2728  0F18                     	;# 
  2729  0F19                     	;# 
  2730  0F1A                     	;# 
  2731  0F1B                     	;# 
  2732  0F1C                     	;# 
  2733  0F1D                     	;# 
  2734  0F1E                     	;# 
  2735  0F1F                     	;# 
  2736  0F20                     	;# 
  2737  0F21                     	;# 
  2738  0F22                     	;# 
  2739  0F23                     	;# 
  2740  0F24                     	;# 
  2741  0F25                     	;# 
  2742  0F26                     	;# 
  2743  0F27                     	;# 
  2744  0F28                     	;# 
  2745  0F29                     	;# 
  2746  0F2A                     	;# 
  2747  0F2B                     	;# 
  2748  0F2C                     	;# 
  2749  0F2D                     	;# 
  2750  0F2E                     	;# 
  2751  0F2F                     	;# 
  2752  0F8C                     	;# 
  2753  0F8D                     	;# 
  2754  0F91                     	;# 
  2755  0F95                     	;# 
  2756  0F96                     	;# 
  2757  0F97                     	;# 
  2758  0F9C                     	;# 
  2759  0F9D                     	;# 
  2760  0F9E                     	;# 
  2761  0FE3                     	;# 
  2762  0FE4                     	;# 
  2763  0FE5                     	;# 
  2764  0FE6                     	;# 
  2765  0FE7                     	;# 
  2766  0FE8                     	;# 
  2767  0FE9                     	;# 
  2768  0FEA                     	;# 
  2769  0FEB                     	;# 
  2770  0FED                     	;# 
  2771  0FEE                     	;# 
  2772  0FEF                     	;# 
  2773                           
  2774                           	psect	strings
  2775  076F                     __pstrings:	
  2776  076F                     __stringtab:	
  2777  076F  3400               	retlw	0
  2778  0770                     __end_of__stringtab:	
  2779  0770                     _mrfRegset_InitCnt:	
  2780  0770  3410               	retlw	16
  2781  0771                     __end_of_mrfRegset_InitCnt:	
  2782  0771                     _mrfRegset_RxCnt:	
  2783  0771  3406               	retlw	6
  2784  0772                     __end_of_mrfRegset_RxCnt:	
  2785  0772                     _mrfRegset_SleepCnt:	
  2786  0772  3403               	retlw	3
  2787  0773                     __end_of_mrfRegset_SleepCnt:	
  2788  0773                     _mrfRegset_TxCnt:	
  2789  0773  3404               	retlw	4
  2790  0774                     __end_of_mrfRegset_TxCnt:	
  2791  0774                     _mrfRegset_Init:	
  2792  0774  34CA               	retlw	202
  2793  0775  3471               	retlw	113
  2794  0776  34CA               	retlw	202
  2795  0777  3473               	retlw	115
  2796  0778  3480               	retlw	128
  2797  0779  3428               	retlw	40
  2798  077A  34C4               	retlw	196
  2799  077B  34E7               	retlw	231
  2800  077C  34A8               	retlw	168
  2801  077D  3460               	retlw	96
  2802  077E  34C6               	retlw	198
  2803  077F  3405               	retlw	5
  2804  0780  3482               	retlw	130
  2805  0781  3400               	retlw	0
  2806  0782  3490               	retlw	144
  2807  0783  3462               	retlw	98
  2808  0784  3498               	retlw	152
  2809  0785  3490               	retlw	144
  2810  0786  34C2               	retlw	194
  2811  0787  34AC               	retlw	172
  2812  0788  3482               	retlw	130
  2813  0789  3420               	retlw	32
  2814  078A  3455               	retlw	85
  2815  078B  3400               	retlw	0
  2816  078C  3482               	retlw	130
  2817  078D  3480               	retlw	128
  2818  078E  3480               	retlw	128
  2819  078F  3468               	retlw	104
  2820  0790  34CA               	retlw	202
  2821  0791  3471               	retlw	113
  2822  0792  34CA               	retlw	202
  2823  0793  3473               	retlw	115
  2824  0794                     __end_of_mrfRegset_Init:	
  2825  0794                     _mrfRegset_Rx:	
  2826  0794  3482               	retlw	130
  2827  0795  3400               	retlw	0
  2828  0796  34CA               	retlw	202
  2829  0797  3471               	retlw	113
  2830  0798  3480               	retlw	128
  2831  0799  3428               	retlw	40
  2832  079A  3482               	retlw	130
  2833  079B  3480               	retlw	128
  2834  079C  3480               	retlw	128
  2835  079D  3468               	retlw	104
  2836  079E  34CA               	retlw	202
  2837  079F  3473               	retlw	115
  2838  07A0                     __end_of_mrfRegset_Rx:	
  2839  07A0                     _mrfRegset_Tx:	
  2840  07A0  3482               	retlw	130
  2841  07A1  3400               	retlw	0
  2842  07A2  34CA               	retlw	202
  2843  07A3  3471               	retlw	113
  2844  07A4  3480               	retlw	128
  2845  07A5  34A8               	retlw	168
  2846  07A6  3482               	retlw	130
  2847  07A7  3420               	retlw	32
  2848  07A8                     __end_of_mrfRegset_Tx:	
  2849  07A8                     _mrfRegset_Sleep:	
  2850  07A8  3482               	retlw	130
  2851  07A9  3400               	retlw	0
  2852  07AA  34CA               	retlw	202
  2853  07AB  3471               	retlw	113
  2854  07AC  3480               	retlw	128
  2855  07AD  3468               	retlw	104
  2856  07AE                     __end_of_mrfRegset_Sleep:	
  2857  000B                     _INTCONbits	set	11
  2858  000C                     _PORTAbits	set	12
  2859  000D                     _PORTBbits	set	13
  2860  000E                     _PORTCbits	set	14
  2861  009D                     _ADCON0	set	157
  2862  009E                     _ADCON1	set	158
  2863  009F                     _ADCON2	set	159
  2864  009C                     _ADRESH	set	156
  2865  009B                     _ADRESL	set	155
  2866  0095                     _OPTION_REGbits	set	149
  2867  0099                     _OSCCON	set	153
  2868  008C                     _TRISAbits	set	140
  2869  008D                     _TRISBbits	set	141
  2870  008E                     _TRISCbits	set	142
  2871  0097                     _WDTCONbits	set	151
  2872  0117                     _FVRCON	set	279
  2873  010C                     _LATAbits	set	268
  2874  010D                     _LATBbits	set	269
  2875  010E                     _LATCbits	set	270
  2876  018C                     _ANSELA	set	396
  2877  018D                     _ANSELB	set	397
  2878  018E                     _ANSELC	set	398
  2879  020C                     _WPUAbits	set	524
  2880                           
  2881                           ; #config settings
  2882  0000                     
  2883                           	psect	cinit
  2884  0022                     start_initialization:	
  2885  0022                     __initialization:	
  2886  0022  30A0               	movlw	low __pbssBANK1
  2887                           
  2888                           ; Clear objects allocated to BANK0
  2889  0023  01B2               	clrf	__pbssBANK0& (0+127)
  2890  0024  01B3               	clrf	(__pbssBANK0+1)& (0+127)
  2891  0025  01B4               	clrf	(__pbssBANK0+2)& (0+127)
  2892  0026  01B5               	clrf	(__pbssBANK0+3)& (0+127)
  2893  0027  01B6               	clrf	(__pbssBANK0+4)& (0+127)
  2894                           
  2895                           ; Clear objects allocated to BANK1
  2896  0028  0084               	movwf	4
  2897  0029  3000               	movlw	high __pbssBANK1
  2898  002A  0085               	movwf	5
  2899  002B  304D               	movlw	77
  2900  002C  318E  26D0         	fcall	clear_ram0
  2901  002E                     end_of_initialization:	
  2902                           ;End of C runtime variable initialization code
  2903                           
  2904  002E                     __end_of__initialization:	
  2905  002E  0020               	movlb	0
  2906  002F  3180  2839         	ljmp	_main	;jump to C main() function
  2907                           
  2908                           	psect	bssBANK0
  2909  0032                     __pbssBANK0:	
  2910  0032                     _cfgRam:	
  2911  0032                     	ds	3
  2912  0035                     _mrf49Status:	
  2913  0035                     	ds	2
  2914                           
  2915                           	psect	bssBANK1
  2916  00A0                     __pbssBANK1:	
  2917  00A0                     _rfTrcvStatus:	
  2918  00A0                     	ds	77
  2919                           
  2920                           	psect	clrtext
  2921  0ED0                     clear_ram0:	
  2922                           ;	Called with FSR0 containing the base address, and
  2923                           ;	WREG with the size to clear
  2924                           
  2925  0ED0  0064               	clrwdt	;clear the watchdog before getting into this loop
  2926  0ED1                     clrloop0:	
  2927  0ED1  0180               	clrf	0	;clear RAM location pointed to by FSR
  2928  0ED2  3101               	addfsr 0,1
  2929  0ED3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2930  0ED4  2ED1               	goto	clrloop0	;have we reached the end yet?
  2931  0ED5  3400               	retlw	0	;all done for this memory range, return
  2932                           
  2933                           	psect	cstackCOMMON
  2934  0070                     __pcstackCOMMON:	
  2935  0070                     ?_SoftI2cStart:	
  2936  0070                     ?_SoftI2cStop:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0070                     ?_Mrf49xaNeedsReset:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0070                     ?_Mrf49RxSts:	
  2943                           ; 0 bytes @ 0x0
  2944                           
  2945  0070                     ?_HandlePacket:	
  2946                           ; 0 bytes @ 0x0
  2947                           
  2948  0070                     ?_PwrAdcWake:	
  2949                           ; 0 bytes @ 0x0
  2950                           
  2951  0070                     ?_PwrAdcSleep:	
  2952                           ; 0 bytes @ 0x0
  2953                           
  2954  0070                     ?_PwrAdcInit:	
  2955                           ; 0 bytes @ 0x0
  2956                           
  2957  0070                     ?_PwrSensorInit:	
  2958                           ; 0 bytes @ 0x0
  2959                           
  2960  0070                     ?_PwrI2cInit:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0070                     ?_PwrRfInit:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0070                     ?_PwrSensorSleep:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0070                     ?_PwrI2cSleep:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0070                     ?_PwrRfSleep:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0070                     ?_PwrSensorWake:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0070                     ?_PwrI2cWake:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0070                     ?_PwrRfWake:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0070                     ?_SoftI2cNop:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0070                     ?_SoftI2cInit:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0070                     ?_SoftI2cRepeatedStart:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0070                     ?_AdcInit:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0070                     ?_AdcDeinit:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0070                     ?_AdcGo:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0070                     ?_AdcChSelect:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0070                     ?_ExtIntInit:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0070                     ?_ExtIntDeinit:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0070                     ??_ExtIntDeinit:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0070                     ?_extInt:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0070                     ?_Mcp9800Start:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0070                     ?_Mrf49xaModeRx:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0070                     ?_Mrf49xaModeTx:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0070                     ?_Mrf49xaModeSleep:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0070                     ?_Mrf49xaShutdown:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0070                     ?_Mrf49xaReboot:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0070                     ?_Mrf49xaInit:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0070                     ?_Mrf49SpiTx:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0070                     ?_Mrf49TxByte:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0070                     ?_Mrf49xaTxAck:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0070                     ?_Mrf49xaFreePacket:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0070                     ?_Mrf49xaTick:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0070                     ?_handleFwCmd:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0070                     ?_main:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0070                     ?i1_Mrf49xaModeRx:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0070                     ?i1_Mrf49xaNeedsReset:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0070                     ??i1_Mrf49xaNeedsReset:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0070                     ?i1_Mrf49SpiTx:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0070                     ??i1_Mrf49SpiTx:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0070                     ??i1_Mrf49SpiRx:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0070                     ?i1_Mrf49RxSts:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0070                     ?i1_Mrf49TxByte:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0070                     ?_SoftI2cTxByte:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0070                     ?_Mrf49xaServe:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0070                     ?_SoftI2cRxByte:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0070                     ?_AdcIsBusy:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0070                     ?_Mrf49SpiRx:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0070                     ?_Mrf49RxCmd:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0070                     ?_Mrf49RxByte:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0070                     ?_Mrf49xaPacketPending:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0070                     ?_Mrf49xaRxPacket:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0070                     ?_Mrf49xaAllocPacket:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0070                     ?i1_Mrf49SpiRx:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0070                     ?i1_Mrf49RxCmd:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0070                     ?i1_Mrf49RxByte:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0070                     ?i1_Mrf49xaServe:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0070                     ?_CfgInit:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0070                     i1Mrf49SpiTx@byte:	
  3129                           ; 2 bytes @ 0x0
  3130                           
  3131  0070                     i1Mrf49SpiRx@data:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134                           
  3135                           ; 1 bytes @ 0x0
  3136  0070                     	ds	1
  3137  0071                     ?i1_Mrf49TxCmd:	
  3138  0071                     ??i1_Mrf49RxCmd:	
  3139                           ; 0 bytes @ 0x1
  3140                           
  3141  0071                     ??i1_Mrf49RxSts:	
  3142                           ; 0 bytes @ 0x1
  3143                           
  3144  0071                     i1Mrf49TxCmd@val:	
  3145                           ; 0 bytes @ 0x1
  3146                           
  3147  0071                     i1Mrf49RxCmd@cmd:	
  3148                           ; 1 bytes @ 0x1
  3149                           
  3150                           
  3151                           ; 1 bytes @ 0x1
  3152  0071                     	ds	1
  3153  0072                     ??i1_Mrf49TxCmd:	
  3154  0072                     i1Mrf49TxCmd@cmd:	
  3155                           ; 0 bytes @ 0x2
  3156                           
  3157  0072                     i1Mrf49RxCmd@val:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160                           
  3161                           ; 1 bytes @ 0x2
  3162  0072                     	ds	1
  3163  0073                     ??i1_Mrf49xaModeRx:	
  3164  0073                     ??i1_Mrf49RxByte:	
  3165                           ; 0 bytes @ 0x3
  3166                           
  3167  0073                     ??i1_Mrf49TxByte:	
  3168                           ; 0 bytes @ 0x3
  3169                           
  3170  0073                     i1Mrf49xaModeRx@k:	
  3171                           ; 0 bytes @ 0x3
  3172                           
  3173  0073                     i1Mrf49TxByte@byte:	
  3174                           ; 1 bytes @ 0x3
  3175                           
  3176                           
  3177                           ; 1 bytes @ 0x3
  3178  0073                     	ds	1
  3179  0074                     ??i1_Mrf49xaServe:	
  3180                           
  3181                           ; 0 bytes @ 0x4
  3182  0074                     	ds	1
  3183  0075                     i1Mrf49xaServe@data:	
  3184                           
  3185                           ; 1 bytes @ 0x5
  3186  0075                     	ds	1
  3187  0076                     ??_extInt:	
  3188                           
  3189                           ; 0 bytes @ 0x6
  3190  0076                     	ds	1
  3191  0077                     extInt@ofw:	
  3192                           
  3193                           ; 1 bytes @ 0x7
  3194  0077                     	ds	1
  3195                           
  3196                           	psect	cstackBANK0
  3197  0020                     __pcstackBANK0:	
  3198  0020                     ??_Mrf49xaNeedsReset:	
  3199  0020                     ?_Sleepy:	
  3200                           ; 0 bytes @ 0x0
  3201                           
  3202  0020                     ??_PwrAdcWake:	
  3203                           ; 0 bytes @ 0x0
  3204                           
  3205  0020                     ??_PwrAdcSleep:	
  3206                           ; 0 bytes @ 0x0
  3207                           
  3208  0020                     ??_PwrAdcInit:	
  3209                           ; 0 bytes @ 0x0
  3210                           
  3211  0020                     ??_PwrSensorInit:	
  3212                           ; 0 bytes @ 0x0
  3213                           
  3214  0020                     ??_PwrSensorSleep:	
  3215                           ; 0 bytes @ 0x0
  3216                           
  3217  0020                     ??_PwrI2cSleep:	
  3218                           ; 0 bytes @ 0x0
  3219                           
  3220  0020                     ??_PwrSensorWake:	
  3221                           ; 0 bytes @ 0x0
  3222                           
  3223  0020                     ??_PwrI2cWake:	
  3224                           ; 0 bytes @ 0x0
  3225                           
  3226  0020                     ??_SoftI2cNop:	
  3227                           ; 0 bytes @ 0x0
  3228                           
  3229  0020                     ??_AdcInit:	
  3230                           ; 0 bytes @ 0x0
  3231                           
  3232  0020                     ??_AdcDeinit:	
  3233                           ; 0 bytes @ 0x0
  3234                           
  3235  0020                     ??_AdcGo:	
  3236                           ; 0 bytes @ 0x0
  3237                           
  3238  0020                     ??_AdcIsBusy:	
  3239                           ; 0 bytes @ 0x0
  3240                           
  3241  0020                     ??_AdcChSelect:	
  3242                           ; 0 bytes @ 0x0
  3243                           
  3244  0020                     ??_ExtIntInit:	
  3245                           ; 0 bytes @ 0x0
  3246                           
  3247  0020                     ??_Mrf49SpiTx:	
  3248                           ; 0 bytes @ 0x0
  3249                           
  3250  0020                     ??_Mrf49SpiRx:	
  3251                           ; 0 bytes @ 0x0
  3252                           
  3253  0020                     ??_Mrf49xaPacketPending:	
  3254                           ; 0 bytes @ 0x0
  3255                           
  3256  0020                     ??_Mrf49xaFreePacket:	
  3257                           ; 0 bytes @ 0x0
  3258                           
  3259  0020                     ??_Mrf49xaRxPacket:	
  3260                           ; 0 bytes @ 0x0
  3261                           
  3262  0020                     ??_Mrf49xaAllocPacket:	
  3263                           ; 0 bytes @ 0x0
  3264                           
  3265  0020                     ?_Mrf49xaTxPacket:	
  3266                           ; 0 bytes @ 0x0
  3267                           
  3268  0020                     ?_AdcGetResult:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0020                     AdcChSelect@channel:	
  3272                           ; 2 bytes @ 0x0
  3273                           
  3274  0020                     Mrf49SpiTx@byte:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0020                     Mrf49SpiRx@data:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0020                     Mrf49xaTxPacket@response:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0020                     Mrf49xaFreePacket@packet:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0020                     Sleepy@ms:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x0
  3291  0020                     	ds	1
  3292  0021                     ??_SoftI2cStart:	
  3293  0021                     ??_SoftI2cTxByte:	
  3294                           ; 0 bytes @ 0x1
  3295                           
  3296  0021                     ??_SoftI2cStop:	
  3297                           ; 0 bytes @ 0x1
  3298                           
  3299  0021                     ?_Mrf49TxCmd:	
  3300                           ; 0 bytes @ 0x1
  3301                           
  3302  0021                     ??_Mrf49RxSts:	
  3303                           ; 0 bytes @ 0x1
  3304                           
  3305  0021                     ??_SoftI2cRepeatedStart:	
  3306                           ; 0 bytes @ 0x1
  3307                           
  3308  0021                     ??_SoftI2cRxByte:	
  3309                           ; 0 bytes @ 0x1
  3310                           
  3311  0021                     ??_Mrf49RxCmd:	
  3312                           ; 0 bytes @ 0x1
  3313                           
  3314  0021                     SoftI2cRxByte@ack:	
  3315                           ; 0 bytes @ 0x1
  3316                           
  3317  0021                     Mrf49TxCmd@val:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     Mrf49RxCmd@cmd:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323  0021                     Mrf49xaTxPacket@needAck:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326                           
  3327                           ; 1 bytes @ 0x1
  3328  0021                     	ds	1
  3329  0022                     ??_Sleepy:	
  3330  0022                     ??_Mrf49TxCmd:	
  3331                           ; 0 bytes @ 0x2
  3332                           
  3333  0022                     ??_Mrf49xaTxPacket:	
  3334                           ; 0 bytes @ 0x2
  3335                           
  3336  0022                     ??_AdcGetResult:	
  3337                           ; 0 bytes @ 0x2
  3338                           
  3339  0022                     ?_AdcSample:	
  3340                           ; 0 bytes @ 0x2
  3341                           
  3342  0022                     SoftI2cTxByte@data:	
  3343                           ; 2 bytes @ 0x2
  3344                           
  3345  0022                     SoftI2cRxByte@data:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0022                     Mrf49TxCmd@cmd:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0022                     Mrf49RxCmd@val:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354                           
  3355                           ; 1 bytes @ 0x2
  3356  0022                     	ds	1
  3357  0023                     ??_Mrf49xaModeRx:	
  3358  0023                     ??_Mrf49xaModeTx:	
  3359                           ; 0 bytes @ 0x3
  3360                           
  3361  0023                     ??_Mrf49xaModeSleep:	
  3362                           ; 0 bytes @ 0x3
  3363                           
  3364  0023                     ??_Mrf49RxByte:	
  3365                           ; 0 bytes @ 0x3
  3366                           
  3367  0023                     ??_Mrf49TxByte:	
  3368                           ; 0 bytes @ 0x3
  3369                           
  3370  0023                     SoftI2cTxByte@i:	
  3371                           ; 0 bytes @ 0x3
  3372                           
  3373  0023                     SoftI2cRxByte@i:	
  3374                           ; 1 bytes @ 0x3
  3375                           
  3376  0023                     Mrf49xaModeRx@k:	
  3377                           ; 1 bytes @ 0x3
  3378                           
  3379  0023                     Mrf49xaModeTx@k:	
  3380                           ; 1 bytes @ 0x3
  3381                           
  3382  0023                     Mrf49xaModeSleep@k:	
  3383                           ; 1 bytes @ 0x3
  3384                           
  3385  0023                     Mrf49TxByte@byte:	
  3386                           ; 1 bytes @ 0x3
  3387                           
  3388  0023                     Mrf49xaTxPacket@crc:	
  3389                           ; 1 bytes @ 0x3
  3390                           
  3391  0023                     Sleepy@b:	
  3392                           ; 1 bytes @ 0x3
  3393                           
  3394                           
  3395                           ; 1 bytes @ 0x3
  3396  0023                     	ds	1
  3397  0024                     ??_Mrf49xaServe:	
  3398  0024                     ??_PwrI2cInit:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     ??_PwrRfSleep:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_PwrRfWake:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_SoftI2cInit:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??_AdcSample:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??_Mcp9800Start:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     ??_Mrf49xaShutdown:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     ??_Mrf49xaReboot:	
  3420                           ; 0 bytes @ 0x4
  3421                           
  3422  0024                     ?_eepromRxBytes:	
  3423                           ; 0 bytes @ 0x4
  3424                           
  3425  0024                     ?_Mcp9800Read:	
  3426                           ; 0 bytes @ 0x4
  3427                           
  3428  0024                     Mcp9800Start@resolution:	
  3429                           ; 2 bytes @ 0x4
  3430                           
  3431  0024                     Mrf49xaTxPacket@i:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0024                     eepromRxBytes@address:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437                           
  3438                           ; 2 bytes @ 0x4
  3439  0024                     	ds	1
  3440  0025                     AdcSample@ch:	
  3441  0025                     Mrf49xaTxPacket@packet:	
  3442                           ; 1 bytes @ 0x5
  3443                           
  3444  0025                     Mrf49xaServe@data:	
  3445                           ; 1 bytes @ 0x5
  3446                           
  3447                           
  3448                           ; 1 bytes @ 0x5
  3449  0025                     	ds	1
  3450  0026                     ??_Mcp9800Read:	
  3451  0026                     ??_Mrf49xaInit:	
  3452                           ; 0 bytes @ 0x6
  3453                           
  3454  0026                     ??_Mrf49xaTxAck:	
  3455                           ; 0 bytes @ 0x6
  3456                           
  3457  0026                     ?_RfSendSampleWeatherNode:	
  3458                           ; 0 bytes @ 0x6
  3459                           
  3460  0026                     Mcp9800Read@tempH:	
  3461                           ; 0 bytes @ 0x6
  3462                           
  3463  0026                     Mrf49xaInit@k:	
  3464                           ; 1 bytes @ 0x6
  3465                           
  3466  0026                     Mrf49xaTxAck@packet:	
  3467                           ; 1 bytes @ 0x6
  3468                           
  3469  0026                     eepromRxBytes@data:	
  3470                           ; 1 bytes @ 0x6
  3471                           
  3472  0026                     RfSendSampleWeatherNode@temperature:	
  3473                           ; 1 bytes @ 0x6
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x6
  3477  0026                     	ds	1
  3478  0027                     ??_PwrRfInit:	
  3479  0027                     Mcp9800Read@tempL:	
  3480                           ; 0 bytes @ 0x7
  3481                           
  3482  0027                     eepromRxBytes@size:	
  3483                           ; 1 bytes @ 0x7
  3484                           
  3485                           
  3486                           ; 1 bytes @ 0x7
  3487  0027                     	ds	1
  3488  0028                     ??_CfgInit:	
  3489  0028                     ??_eepromRxBytes:	
  3490                           ; 0 bytes @ 0x8
  3491                           
  3492  0028                     ??_handleFwCmd:	
  3493                           ; 0 bytes @ 0x8
  3494                           
  3495  0028                     handleFwCmd@packet:	
  3496                           ; 0 bytes @ 0x8
  3497                           
  3498  0028                     RfSendSampleWeatherNode@humidity:	
  3499                           ; 1 bytes @ 0x8
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x8
  3503  0028                     	ds	1
  3504  0029                     ??_HandlePacket:	
  3505  0029                     HandlePacket@response:	
  3506                           ; 0 bytes @ 0x9
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0x9
  3510  0029                     	ds	1
  3511  002A                     ??_RfSendSampleWeatherNode:	
  3512  002A                     HandlePacket@packet:	
  3513                           ; 0 bytes @ 0xA
  3514                           
  3515  002A                     RfSendSampleWeatherNode@packet:	
  3516                           ; 1 bytes @ 0xA
  3517                           
  3518                           
  3519                           ; 1 bytes @ 0xA
  3520  002A                     	ds	1
  3521  002B                     ??_Mrf49xaTick:	
  3522                           
  3523                           ; 0 bytes @ 0xB
  3524  002B                     	ds	1
  3525  002C                     Mrf49xaTick@timeout:	
  3526                           
  3527                           ; 1 bytes @ 0xC
  3528  002C                     	ds	1
  3529  002D                     Mrf49xaTick@packet:	
  3530                           
  3531                           ; 1 bytes @ 0xD
  3532  002D                     	ds	1
  3533  002E                     ??_main:	
  3534  002E                     main@humidity:	
  3535                           ; 0 bytes @ 0xE
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0xE
  3539  002E                     	ds	2
  3540  0030                     main@temperature:	
  3541                           
  3542                           ; 2 bytes @ 0x10
  3543  0030                     	ds	2
  3544                           
  3545                           	psect	text1
  3546  0618                     __ptext1:	
  3547 ;; *************** function _RfSendSampleWeatherNode *****************
  3548 ;; Defined at:
  3549 ;;		line 33 in file "../../../src/rfstack/packets.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  temperature     2    6[BANK0 ] unsigned int 
  3552 ;;  humidity        2    8[BANK0 ] unsigned int 
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  3555 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  3556 ;; Return value:  Size  Location     Type
  3557 ;;		None               void
  3558 ;; Registers used:
  3559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3560 ;; Tracked objects:
  3561 ;;		On entry : 1F/0
  3562 ;;		On exit  : 1F/1
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3565 ;;      Params:         0       4       0       0
  3566 ;;      Locals:         0       1       0       0
  3567 ;;      Temps:          0       0       0       0
  3568 ;;      Totals:         0       5       0       0
  3569 ;;Total ram usage:        5 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    6
  3572 ;; This function calls:
  3573 ;;		_Mrf49xaAllocPacket
  3574 ;;		_Mrf49xaTxPacket
  3575 ;; This function is called by:
  3576 ;;		_main
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           
  3581                           ;psect for function _RfSendSampleWeatherNode
  3582  0618                     _RfSendSampleWeatherNode:	
  3583                           
  3584                           ;packets.c: 35: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  3585                           
  3586                           ;incstack = 0
  3587                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3588  0618  265C  3186         	fcall	_Mrf49xaAllocPacket
  3589  061A  0020               	movlb	0	; select bank0
  3590  061B  00AA               	movwf	RfSendSampleWeatherNode@packet
  3591                           
  3592                           ;packets.c: 37: packet->packet.size = 10;
  3593  061C  0A2A               	incf	RfSendSampleWeatherNode@packet,w
  3594  061D  0086               	movwf	6
  3595  061E  300A               	movlw	10
  3596  061F  0187               	clrf	7
  3597  0620  0081               	movwf	1
  3598                           
  3599                           ;packets.c: 38: packet->packet.id = RF_APP_SAMPLE;
  3600  0621  082A               	movf	RfSendSampleWeatherNode@packet,w
  3601  0622  3E04               	addlw	4
  3602  0623  0086               	movwf	6
  3603  0624  0181               	clrf	1
  3604                           
  3605                           ;packets.c: 39: packet->packet.dst = 0xFF;
  3606  0625  082A               	movf	RfSendSampleWeatherNode@packet,w
  3607  0626  3E03               	addlw	3
  3608  0627  0086               	movwf	6
  3609  0628  30FF               	movlw	255
  3610  0629  0081               	movwf	1
  3611                           
  3612                           ;packets.c: 41: packet->packet.data[0] = 0;
  3613  062A  082A               	movf	RfSendSampleWeatherNode@packet,w
  3614  062B  3E06               	addlw	6
  3615  062C  0086               	movwf	6
  3616  062D  0181               	clrf	1
  3617                           
  3618                           ;packets.c: 42: packet->packet.data[1] = 0;
  3619  062E  082A               	movf	RfSendSampleWeatherNode@packet,w
  3620  062F  3E07               	addlw	7
  3621  0630  0086               	movwf	6
  3622  0631  0181               	clrf	1
  3623                           
  3624                           ;packets.c: 43: packet->packet.data[2] = 0;
  3625  0632  082A               	movf	RfSendSampleWeatherNode@packet,w
  3626  0633  3E08               	addlw	8
  3627  0634  0086               	movwf	6
  3628  0635  0181               	clrf	1
  3629                           
  3630                           ;packets.c: 44: packet->packet.data[3] = 0;
  3631  0636  082A               	movf	RfSendSampleWeatherNode@packet,w
  3632  0637  3E09               	addlw	9
  3633  0638  0086               	movwf	6
  3634  0639  0181               	clrf	1
  3635                           
  3636                           ;packets.c: 46: packet->packet.data[4] = 0;
  3637  063A  082A               	movf	RfSendSampleWeatherNode@packet,w
  3638  063B  3E0A               	addlw	10
  3639  063C  0086               	movwf	6
  3640  063D  0181               	clrf	1
  3641                           
  3642                           ;packets.c: 48: packet->packet.data[6] = temperature >> 8;
  3643  063E  082A               	movf	RfSendSampleWeatherNode@packet,w
  3644  063F  3E0C               	addlw	12
  3645  0640  0086               	movwf	6
  3646  0641  0827               	movf	RfSendSampleWeatherNode@temperature+1,w
  3647  0642  0081               	movwf	1
  3648                           
  3649                           ;packets.c: 49: packet->packet.data[5] = temperature & 0xFF;
  3650  0643  082A               	movf	RfSendSampleWeatherNode@packet,w
  3651  0644  3E0B               	addlw	11
  3652  0645  0086               	movwf	6
  3653  0646  0826               	movf	RfSendSampleWeatherNode@temperature,w
  3654  0647  0081               	movwf	1
  3655                           
  3656                           ;packets.c: 51: packet->packet.data[7] = 1;
  3657  0648  082A               	movf	RfSendSampleWeatherNode@packet,w
  3658  0649  3E0D               	addlw	13
  3659  064A  0086               	movwf	6
  3660  064B  0181               	clrf	1
  3661  064C  0A81               	incf	1,f
  3662                           
  3663                           ;packets.c: 53: packet->packet.data[9] = humidity >> 8;
  3664  064D  082A               	movf	RfSendSampleWeatherNode@packet,w
  3665  064E  3E0F               	addlw	15
  3666  064F  0086               	movwf	6
  3667  0650  0829               	movf	RfSendSampleWeatherNode@humidity+1,w
  3668  0651  0081               	movwf	1
  3669                           
  3670                           ;packets.c: 54: packet->packet.data[8] = humidity & 0xFF;
  3671  0652  082A               	movf	RfSendSampleWeatherNode@packet,w
  3672  0653  3E0E               	addlw	14
  3673  0654  0086               	movwf	6
  3674  0655  0828               	movf	RfSendSampleWeatherNode@humidity,w
  3675  0656  0081               	movwf	1
  3676                           
  3677                           ;packets.c: 56: Mrf49xaTxPacket(packet, 0, 1);
  3678  0657  01A0               	clrf	Mrf49xaTxPacket@response
  3679  0658  01A1               	clrf	Mrf49xaTxPacket@needAck
  3680  0659  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  3681  065A  082A               	movf	RfSendSampleWeatherNode@packet,w
  3682  065B  2EDC               	ljmp	_Mrf49xaTxPacket
  3683  065C                     __end_of_RfSendSampleWeatherNode:	
  3684  065C                     __ptext2:	
  3685 ;; *************** function _Mrf49xaAllocPacket *****************
  3686 ;; Defined at:
  3687 ;;		line 112 in file "../../../src/devices/mrf49xa_packet.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      PTR struct rfTrcvPacket_
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : 1F/0
  3698 ;;		On exit  : 1F/1
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3701 ;;      Params:         0       0       0       0
  3702 ;;      Locals:         0       0       0       0
  3703 ;;      Temps:          0       0       0       0
  3704 ;;      Totals:         0       0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    5
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_RfSendSampleWeatherNode
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           
  3716                           ;psect for function _Mrf49xaAllocPacket
  3717  065C                     _Mrf49xaAllocPacket:	
  3718                           
  3719                           ;mrf49xa_packet.c: 114: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  3720                           
  3721                           ;incstack = 0
  3722                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  3723  065C  0021               	movlb	1	; select bank1
  3724  065D  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  3725  065E  1D03               	skipz
  3726  065F  2E63               	goto	l2944
  3727                           
  3728                           ;mrf49xa_packet.c: 115: {
  3729                           ;mrf49xa_packet.c: 116: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  3730  0660  3006               	movlw	6
  3731  0661  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3732                           
  3733                           ;mrf49xa_packet.c: 117: return &(rfTrcvStatus.rxPacket[0]);
  3734  0662  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  3735  0663                     l2944:	
  3736                           
  3737                           ;mrf49xa_packet.c: 118: }
  3738                           ;mrf49xa_packet.c: 120: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  3739  0663  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  3740  0664  1D03               	skipz
  3741  0665  3400               	retlw	0
  3742                           
  3743                           ;mrf49xa_packet.c: 121: {
  3744                           ;mrf49xa_packet.c: 122: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  3745  0666  3006               	movlw	6
  3746  0667  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  3747                           
  3748                           ;mrf49xa_packet.c: 123: return &(rfTrcvStatus.rxPacket[1]);
  3749  0668  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  3750  0669                     __end_of_Mrf49xaAllocPacket:	
  3751                           ;mrf49xa_packet.c: 124: }
  3752                           ;mrf49xa_packet.c: 126: return (0);
  3753                           
  3754  0669                     __ptext37:	
  3755 ;; *************** function _HandlePacket *****************
  3756 ;; Defined at:
  3757 ;;		line 99 in file "../../../src/rfstack/client.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3760 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  3763 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  3764 ;;  response        1    9[BANK0 ] struct .
  3765 ;; Return value:  Size  Location     Type
  3766 ;;		None               void
  3767 ;; Registers used:
  3768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 1F/0
  3771 ;;		On exit  : 1E/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3774 ;;      Params:         0       0       0       0
  3775 ;;      Locals:         0       2       0       0
  3776 ;;      Temps:          0       0       0       0
  3777 ;;      Totals:         0       2       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    9
  3781 ;; This function calls:
  3782 ;;		_Mrf49xaFreePacket
  3783 ;;		_Mrf49xaTxAck
  3784 ;;		_Mrf49xaTxPacket
  3785 ;;		_handleFwCmd
  3786 ;; This function is called by:
  3787 ;;		_Mrf49xaTick
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           
  3792                           ;psect for function _HandlePacket
  3793  0669                     _HandlePacket:	
  3794                           
  3795                           ;incstack = 0
  3796                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3797                           ;HandlePacket@packet stored from wreg
  3798  0669  00AA               	movwf	HandlePacket@packet
  3799                           
  3800                           ;client.c: 102: struct
  3801                           ;client.c: 103: {
  3802                           ;client.c: 104: bool_t needAck:1;
  3803                           ;client.c: 105: bool_t sendAck:1;
  3804                           ;client.c: 106: bool_t sendMsg:1;
  3805                           ;client.c: 107: } response;
  3806                           ;client.c: 110: switch (packet->packet.id)
  3807  066A  2E91               	goto	l2972
  3808  066B                     l2956:	
  3809                           
  3810                           ;client.c: 113: packet->packet.data[0] = 2;
  3811  066B  082A               	movf	HandlePacket@packet,w
  3812  066C  3E06               	addlw	6
  3813  066D  0086               	movwf	6
  3814  066E  3002               	movlw	2
  3815  066F  0187               	clrf	7
  3816  0670  0081               	movwf	1
  3817  0671                     l2958:	
  3818                           
  3819                           ;client.c: 114: response.sendMsg = 1;
  3820  0671  0020               	movlb	0	; select bank0
  3821  0672  1529               	bsf	HandlePacket@response,2
  3822                           
  3823                           ;client.c: 115: break;
  3824  0673  2EA6               	goto	l529
  3825  0674                     l2960:	
  3826                           
  3827                           ;client.c: 118: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  3828                           ;client.c: 119: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  3829  0674  082A               	movf	HandlePacket@packet,w
  3830  0675  3E07               	addlw	7
  3831  0676  0086               	movwf	6
  3832  0677  0187               	clrf	7
  3833  0678  0021               	movlb	1	; select bank1
  3834  0679  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  3835  067A  0601               	xorwf	1,w
  3836  067B  1D03               	skipz
  3837  067C  2EA6               	goto	l529
  3838  067D  0020               	movlb	0	; select bank0
  3839  067E  082A               	movf	HandlePacket@packet,w
  3840  067F  3E06               	addlw	6
  3841  0680  0086               	movwf	6
  3842  0681  0021               	movlb	1	; select bank1
  3843  0682  0855               	movf	(_rfTrcvStatus^(0+128)+53),w
  3844  0683  0601               	xorwf	1,w
  3845  0684  1D03               	skipz
  3846  0685  2EA6               	goto	l529
  3847                           
  3848                           ;client.c: 120: {
  3849                           ;client.c: 121: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  3850  0686  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3851  0687  393F               	andlw	-193
  3852  0688  3880               	iorlw	128
  3853  0689  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  3854  068A  2EA6               	goto	l529
  3855  068B                     l532:	
  3856                           ;client.c: 126: syncedTime = *((uint32_t*) packet->packet.data);
  3857                           
  3858                           
  3859                           ;client.c: 127: response.sendAck = 1;
  3860  068B  14A9               	bsf	HandlePacket@response,1
  3861                           
  3862                           ;client.c: 128: break;
  3863  068C  2EA6               	goto	l529
  3864  068D                     l2966:	
  3865                           
  3866                           ;client.c: 136: handleFwCmd(packet);
  3867  068D  082A               	movf	HandlePacket@packet,w
  3868  068E  26B8  3186         	fcall	_handleFwCmd
  3869  0690  2E71               	goto	l2958
  3870  0691                     l2972:	
  3871  0691  082A               	movf	HandlePacket@packet,w
  3872  0692  3E04               	addlw	4
  3873  0693  0086               	movwf	6
  3874  0694  0187               	clrf	7
  3875  0695  0801               	movf	1,w
  3876                           
  3877                           ; Switch size 1, requested type "space"
  3878                           ; Number of cases is 5, Range of values is 160 to 192
  3879                           ; switch strategies available:
  3880                           ; Name         Instructions Cycles
  3881                           ; simple_byte           16     9 (average)
  3882                           ; direct_byte           75     9 (fixed)
  3883                           ; jumptable            263     9 (fixed)
  3884                           ;	Chosen strategy is simple_byte
  3885  0696  3AA0               	xorlw	160	; case 160
  3886  0697  1903               	skipnz
  3887  0698  2E6B               	goto	l2956
  3888  0699  3A01               	xorlw	1	; case 161
  3889  069A  1903               	skipnz
  3890  069B  2E74               	goto	l2960
  3891  069C  3A03               	xorlw	3	; case 162
  3892  069D  1903               	skipnz
  3893  069E  2E8B               	goto	l532
  3894  069F  3A01               	xorlw	1	; case 163
  3895  06A0  1903               	skipnz
  3896  06A1  2EA6               	goto	l529
  3897  06A2  3A63               	xorlw	99	; case 192
  3898  06A3  1903               	skipnz
  3899  06A4  2E8D               	goto	l2966
  3900  06A5  2EA6               	goto	l529
  3901  06A6                     l529:	
  3902                           
  3903                           ;client.c: 160: if (response.sendMsg)
  3904  06A6  0020               	movlb	0	; select bank0
  3905  06A7  1D29               	btfss	HandlePacket@response,2
  3906  06A8  2EB1               	goto	l535
  3907  06A9  3000               	movlw	0
  3908                           
  3909                           ;client.c: 161: Mrf49xaTxPacket(packet, 1, response.needAck);
  3910  06AA  01A0               	clrf	Mrf49xaTxPacket@response
  3911  06AB  0AA0               	incf	Mrf49xaTxPacket@response,f
  3912  06AC  1829               	btfsc	HandlePacket@response,0
  3913  06AD  3001               	movlw	1
  3914  06AE  00A1               	movwf	Mrf49xaTxPacket@needAck
  3915  06AF  082A               	movf	HandlePacket@packet,w
  3916  06B0  2EDC               	ljmp	_Mrf49xaTxPacket
  3917  06B1                     l535:	
  3918                           
  3919                           ;client.c: 162: else if (response.sendAck)
  3920  06B1  1CA9               	btfss	HandlePacket@response,1
  3921  06B2  2EB5               	goto	l2978
  3922                           
  3923                           ;client.c: 163: Mrf49xaTxAck(packet);
  3924  06B3  082A               	movf	HandlePacket@packet,w
  3925  06B4  2F22               	ljmp	_Mrf49xaTxAck
  3926  06B5                     l2978:	
  3927                           
  3928                           ;client.c: 164: else
  3929                           ;client.c: 165: Mrf49xaFreePacket(packet);
  3930  06B5  082A               	movf	HandlePacket@packet,w
  3931  06B6  3183  2BCA         	ljmp	_Mrf49xaFreePacket
  3932  06B8                     __end_of_HandlePacket:	
  3933  06B8                     __ptext38:	
  3934 ;; *************** function _handleFwCmd *****************
  3935 ;; Defined at:
  3936 ;;		line 6 in file "../../../src/rfstack/client.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3939 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  3942 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;		None               void
  3945 ;; Registers used:
  3946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 1F/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3952 ;;      Params:         0       0       0       0
  3953 ;;      Locals:         0       1       0       0
  3954 ;;      Temps:          0       0       0       0
  3955 ;;      Totals:         0       1       0       0
  3956 ;;Total ram usage:        1 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    8
  3959 ;; This function calls:
  3960 ;;		_eepromRxBytes
  3961 ;; This function is called by:
  3962 ;;		_HandlePacket
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _handleFwCmd
  3968  06B8                     _handleFwCmd:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3972                           ;handleFwCmd@packet stored from wreg
  3973  06B8  00A8               	movwf	handleFwCmd@packet
  3974                           
  3975                           ;client.c: 21: break;
  3976                           
  3977                           ;client.c: 8: switch(packet->packet.data[0])
  3978  06B9  3E06               	addlw	6
  3979  06BA  0086               	movwf	6
  3980  06BB  0187               	clrf	7
  3981  06BC  0801               	movf	1,w
  3982                           
  3983                           ; Switch size 1, requested type "space"
  3984                           ; Number of cases is 2, Range of values is 0 to 1
  3985                           ; switch strategies available:
  3986                           ; Name         Instructions Cycles
  3987                           ; simple_byte            7     4 (average)
  3988                           ; direct_byte           10     6 (fixed)
  3989                           ; jumptable            260     6 (fixed)
  3990                           ;	Chosen strategy is simple_byte
  3991  06BD  3A00               	xorlw	0	; case 0
  3992  06BE  1903               	skipnz
  3993  06BF  2EDB               	goto	l524
  3994  06C0  3A01               	xorlw	1	; case 1
  3995  06C1  1903               	skipnz
  3996  06C2  2EC4               	goto	l2780
  3997  06C3  2EDB               	goto	l524
  3998  06C4                     l2780:	
  3999                           
  4000                           ;client.c: 15: packet->packet.size = 5;
  4001  06C4  0A28               	incf	handleFwCmd@packet,w
  4002  06C5  0086               	movwf	6
  4003  06C6  3005               	movlw	5
  4004  06C7  0187               	clrf	7
  4005  06C8  0081               	movwf	1
  4006                           
  4007                           ;client.c: 16: packet->packet.data[1] = 0;
  4008  06C9  0828               	movf	handleFwCmd@packet,w
  4009  06CA  3E07               	addlw	7
  4010  06CB  0086               	movwf	6
  4011  06CC  0181               	clrf	1
  4012                           
  4013                           ;client.c: 17: packet->packet.data[2] = 1;
  4014  06CD  0828               	movf	handleFwCmd@packet,w
  4015  06CE  3E08               	addlw	8
  4016  06CF  0086               	movwf	6
  4017  06D0  0181               	clrf	1
  4018  06D1  0A81               	incf	1,f
  4019                           
  4020                           ;client.c: 19: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  4021  06D2  01A4               	clrf	eepromRxBytes@address
  4022  06D3  01A5               	clrf	eepromRxBytes@address+1
  4023  06D4  0828               	movf	handleFwCmd@packet,w
  4024  06D5  3E09               	addlw	9
  4025  06D6  00A6               	movwf	eepromRxBytes@data
  4026  06D7  3002               	movlw	2
  4027  06D8  00A7               	movwf	eepromRxBytes@size
  4028  06D9  3183  2B1E         	ljmp	l2552
  4029  06DB                     l524:	
  4030  06DB  0008               	return
  4031  06DC                     __end_of_handleFwCmd:	
  4032  06DC                     __ptext40:	
  4033 ;; *************** function _Mrf49xaTxPacket *****************
  4034 ;; Defined at:
  4035 ;;		line 32 in file "../../../src/devices/mrf49xa_packet.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4038 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  4039 ;;  response        1    0[BANK0 ] unsigned char 
  4040 ;;  needAck         1    1[BANK0 ] unsigned char 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  4043 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  4044 ;;  i               1    4[BANK0 ] unsigned char 
  4045 ;;  crc             1    3[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      unsigned char 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4050 ;; Tracked objects:
  4051 ;;		On entry : 1F/0
  4052 ;;		On exit  : 1F/1
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4055 ;;      Params:         0       2       0       0
  4056 ;;      Locals:         0       3       0       0
  4057 ;;      Temps:          0       1       0       0
  4058 ;;      Totals:         0       6       0       0
  4059 ;;Total ram usage:        6 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    5
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_Mrf49xaTxAck
  4066 ;;		_HandlePacket
  4067 ;;		_RfSendSampleWeatherNode
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           
  4072                           ;psect for function _Mrf49xaTxPacket
  4073  06DC                     _Mrf49xaTxPacket:	
  4074                           
  4075                           ;incstack = 0
  4076                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  4077                           ;Mrf49xaTxPacket@packet stored from wreg
  4078  06DC  00A5               	movwf	Mrf49xaTxPacket@packet
  4079  06DD  3031               	movlw	49
  4080                           
  4081                           ;mrf49xa_packet.c: 34: uint8_t i, crc = 0;
  4082  06DE  01A3               	clrf	Mrf49xaTxPacket@crc
  4083                           
  4084                           ;mrf49xa_packet.c: 36: if (&(rfTrcvStatus.txPacket) == packet)
  4085  06DF  3EA0               	addlw	_rfTrcvStatus& (0+255)
  4086  06E0  0625               	xorwf	Mrf49xaTxPacket@packet,w
  4087  06E1  1D03               	skipz
  4088  06E2  2EEC               	goto	l2506
  4089                           
  4090                           ;mrf49xa_packet.c: 37: {
  4091                           ;mrf49xa_packet.c: 38: if (response)
  4092  06E3  0820               	movf	Mrf49xaTxPacket@response,w
  4093  06E4  1903               	btfsc	3,2
  4094  06E5  2EE9               	goto	l2490
  4095                           
  4096                           ;mrf49xa_packet.c: 39: {
  4097                           ;mrf49xa_packet.c: 40: packet->packet.dst = packet->packet.src;
  4098  06E6  0825               	movf	Mrf49xaTxPacket@packet,w
  4099  06E7  2765  3186         	fcall	PL14	;call to abstracted procedure
  4100  06E9                     l2490:	
  4101                           
  4102                           ;mrf49xa_packet.c: 41: }
  4103                           ;mrf49xa_packet.c: 42: packet->packet.src = cfgRam.nodeId;
  4104                           
  4105                           ;mrf49xa_packet.c: 43: packet->packet.size += 5;
  4106                           
  4107                           ;mrf49xa_packet.c: 45: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4108                           
  4109                           ;mrf49xa_packet.c: 46: rfTrcvStatus.txPacket.retry = 0;
  4110                           
  4111                           ;mrf49xa_packet.c: 47: rfTrcvStatus.txPacket.retransmit = 0;
  4112                           
  4113                           ;mrf49xa_packet.c: 48: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4114  06E9  2742               	fcall	PL8	;call to abstracted procedure
  4115                           
  4116                           ;mrf49xa_packet.c: 49: rfTrcvStatus.txPacket.crc = 0;
  4117  06EA  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  4118  06EB  0008               	return
  4119  06EC                     l2506:	
  4120                           
  4121                           ;mrf49xa_packet.c: 51: }
  4122                           ;mrf49xa_packet.c: 54: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4123  06EC  0021               	movlb	1	; select bank1
  4124  06ED  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  4125  06EE  1D03               	skipz
  4126  06EF  0008               	return
  4127                           
  4128                           ;mrf49xa_packet.c: 59: else
  4129                           ;mrf49xa_packet.c: 60: {
  4130                           ;mrf49xa_packet.c: 61: if (response)
  4131  06F0  0020               	movlb	0	; select bank0
  4132  06F1  0820               	movf	Mrf49xaTxPacket@response,w
  4133  06F2  1903               	btfsc	3,2
  4134  06F3  2EF7               	goto	l2516
  4135                           
  4136                           ;mrf49xa_packet.c: 62: {
  4137                           ;mrf49xa_packet.c: 63: packet->packet.dst = packet->packet.src;
  4138  06F4  0825               	movf	Mrf49xaTxPacket@packet,w
  4139  06F5  2765  3186         	fcall	PL14	;call to abstracted procedure
  4140  06F7                     l2516:	
  4141                           
  4142                           ;mrf49xa_packet.c: 64: }
  4143                           ;mrf49xa_packet.c: 65: packet->packet.src = cfgRam.nodeId;
  4144                           
  4145                           ;mrf49xa_packet.c: 66: packet->packet.size += 5;
  4146                           
  4147                           ;mrf49xa_packet.c: 68: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4148                           
  4149                           ;mrf49xa_packet.c: 69: rfTrcvStatus.txPacket.retry = 0;
  4150                           
  4151                           ;mrf49xa_packet.c: 70: rfTrcvStatus.txPacket.retransmit = 0;
  4152                           
  4153                           ;mrf49xa_packet.c: 71: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4154  06F7  2742  3186         	fcall	PL8	;call to abstracted procedure
  4155                           
  4156                           ;mrf49xa_packet.c: 73: packet->state = PKT_FREE;
  4157  06F9  0020               	movlb	0	; select bank0
  4158  06FA  0825               	movf	Mrf49xaTxPacket@packet,w
  4159  06FB  0086               	movwf	6
  4160  06FC  0181               	clrf	1
  4161                           
  4162                           ;mrf49xa_packet.c: 76: for (i = 0; i < (16 + 5); i++)
  4163  06FD  01A4               	clrf	Mrf49xaTxPacket@i
  4164  06FE                     l2536:	
  4165                           
  4166                           ;mrf49xa_packet.c: 77: {
  4167                           ;mrf49xa_packet.c: 78: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4168  06FE  0824               	movf	Mrf49xaTxPacket@i,w
  4169  06FF  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  4170  0700  0086               	movwf	6
  4171  0701  0187               	clrf	7
  4172  0702  0824               	movf	Mrf49xaTxPacket@i,w
  4173  0703  0725               	addwf	Mrf49xaTxPacket@packet,w
  4174  0704  00A2               	movwf	??_Mrf49xaTxPacket
  4175  0705  0A22               	incf	??_Mrf49xaTxPacket,w
  4176  0706  0084               	movwf	4
  4177  0707  0185               	clrf	5
  4178  0708  0800               	movf	0,w
  4179  0709  0081               	movwf	1
  4180  070A  3015               	movlw	21
  4181  070B  0AA4               	incf	Mrf49xaTxPacket@i,f
  4182  070C  0224               	subwf	Mrf49xaTxPacket@i,w
  4183  070D  1C03               	skipc
  4184  070E  2EFE               	goto	l2536
  4185                           
  4186                           ;mrf49xa_packet.c: 79: }
  4187                           ;mrf49xa_packet.c: 80: for (i = 0; i < packet->packet.size; i++)
  4188  070F  01A4               	clrf	Mrf49xaTxPacket@i
  4189  0710                     l384:	
  4190  0710  0A25               	incf	Mrf49xaTxPacket@packet,w
  4191  0711  0086               	movwf	6
  4192  0712  0187               	clrf	7
  4193  0713  0801               	movf	1,w
  4194  0714  0224               	subwf	Mrf49xaTxPacket@i,w
  4195  0715  1803               	btfsc	3,0
  4196  0716  2F1E               	goto	l2548
  4197                           
  4198                           ;mrf49xa_packet.c: 81: {
  4199                           ;mrf49xa_packet.c: 82: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  4200  0717  0824               	movf	Mrf49xaTxPacket@i,w
  4201  0718  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  4202  0719  0086               	movwf	6
  4203  071A  0801               	movf	1,w
  4204  071B  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  4205  071C  0AA4               	incf	Mrf49xaTxPacket@i,f
  4206  071D  2F10               	goto	l384
  4207  071E                     l2548:	
  4208                           
  4209                           ;mrf49xa_packet.c: 83: }
  4210                           ;mrf49xa_packet.c: 85: rfTrcvStatus.txPacket.crc = crc;
  4211  071E  0823               	movf	Mrf49xaTxPacket@crc,w
  4212  071F  0021               	movlb	1	; select bank1
  4213  0720  00E7               	movwf	(_rfTrcvStatus^(0+128)+71)
  4214  0721  0008               	return
  4215  0722                     __end_of_Mrf49xaTxPacket:	
  4216  0722                     __ptext39:	
  4217 ;; *************** function _Mrf49xaTxAck *****************
  4218 ;; Defined at:
  4219 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4222 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  4225 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  4226 ;; Return value:  Size  Location     Type
  4227 ;;		None               void
  4228 ;; Registers used:
  4229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4230 ;; Tracked objects:
  4231 ;;		On entry : 1F/0
  4232 ;;		On exit  : 1F/1
  4233 ;;		Unchanged: 0/0
  4234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4235 ;;      Params:         0       0       0       0
  4236 ;;      Locals:         0       1       0       0
  4237 ;;      Temps:          0       0       0       0
  4238 ;;      Totals:         0       1       0       0
  4239 ;;Total ram usage:        1 bytes
  4240 ;; Hardware stack levels used:    1
  4241 ;; Hardware stack levels required when called:    6
  4242 ;; This function calls:
  4243 ;;		_Mrf49xaTxPacket
  4244 ;; This function is called by:
  4245 ;;		_HandlePacket
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           
  4250                           ;psect for function _Mrf49xaTxAck
  4251  0722                     _Mrf49xaTxAck:	
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4255                           ;Mrf49xaTxAck@packet stored from wreg
  4256  0722  00A6               	movwf	Mrf49xaTxAck@packet
  4257                           
  4258                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  4259  0723  3E06               	addlw	6
  4260  0724  0086               	movwf	6
  4261  0725  0187               	clrf	7
  4262  0726  0826               	movf	Mrf49xaTxAck@packet,w
  4263  0727  3E04               	addlw	4
  4264  0728  0084               	movwf	4
  4265  0729  0185               	clrf	5
  4266  072A  0800               	movf	0,w
  4267  072B  0081               	movwf	1
  4268                           
  4269                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  4270  072C  0826               	movf	Mrf49xaTxAck@packet,w
  4271  072D  3E07               	addlw	7
  4272  072E  0086               	movwf	6
  4273  072F  0826               	movf	Mrf49xaTxAck@packet,w
  4274  0730  3E16               	addlw	22
  4275  0731  0084               	movwf	4
  4276  0732  0800               	movf	0,w
  4277  0733  0081               	movwf	1
  4278                           
  4279                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  4280  0734  0826               	movf	Mrf49xaTxAck@packet,w
  4281  0735  3E04               	addlw	4
  4282  0736  0086               	movwf	6
  4283  0737  30A1               	movlw	161
  4284  0738  0081               	movwf	1
  4285                           
  4286                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  4287  0739  0A26               	incf	Mrf49xaTxAck@packet,w
  4288  073A  0086               	movwf	6
  4289  073B  3002               	movlw	2
  4290  073C  0081               	movwf	1
  4291                           
  4292                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  4293  073D  01A0               	clrf	Mrf49xaTxPacket@response
  4294  073E  0AA0               	incf	Mrf49xaTxPacket@response,f
  4295  073F  01A1               	clrf	Mrf49xaTxPacket@needAck
  4296  0740  0826               	movf	Mrf49xaTxAck@packet,w
  4297  0741  2EDC               	ljmp	_Mrf49xaTxPacket
  4298  0742                     __end_of_Mrf49xaTxAck:	
  4299  0742                     PL8:	
  4300  0742  0825               	movf	Mrf49xaTxPacket@packet,w
  4301  0743  3E02               	addlw	2
  4302  0744  0086               	movwf	6
  4303  0745  0187               	clrf	7
  4304  0746  0832               	movf	_cfgRam,w
  4305  0747  0081               	movwf	1
  4306  0748  0A25               	incf	Mrf49xaTxPacket@packet,w
  4307  0749  0086               	movwf	6
  4308  074A  3005               	movlw	5
  4309  074B  0781               	addwf	1,f
  4310  074C  0021               	movlb	1	; select bank1
  4311  074D  30F0               	movlw	-16
  4312  074E  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  4313  074F  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  4314  0750  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  4315  0751  30CF               	movlw	-49
  4316  0752  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  4317  0753  0020               	movlb	0	; select bank0
  4318  0754  0321               	decf	Mrf49xaTxPacket@needAck,w
  4319  0755  3000               	movlw	0
  4320  0756  1903               	skipnz
  4321  0757  3001               	movlw	1
  4322  0758  00A2               	movwf	??_Mrf49xaTxPacket
  4323  0759  0EA2               	swapf	??_Mrf49xaTxPacket,f
  4324  075A  0DA2               	rlf	??_Mrf49xaTxPacket,f
  4325  075B  0DA2               	rlf	??_Mrf49xaTxPacket,f
  4326  075C  0021               	movlb	1	; select bank1
  4327  075D  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  4328  075E  0020               	movlb	0	; select bank0
  4329  075F  0622               	xorwf	??_Mrf49xaTxPacket,w
  4330  0760  393F               	andlw	-193
  4331  0761  0622               	xorwf	??_Mrf49xaTxPacket,w
  4332  0762  0021               	movlb	1	; select bank1
  4333  0763  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  4334  0764  0008               	return
  4335  0765                     __end_ofPL8:	
  4336  0765                     PL14:	
  4337  0765  3E03               	addlw	3
  4338  0766  0086               	movwf	6
  4339  0767  0187               	clrf	7
  4340  0768  0825               	movf	Mrf49xaTxPacket@packet,w
  4341  0769  3E02               	addlw	2
  4342  076A  0084               	movwf	4
  4343  076B  0185               	clrf	5
  4344  076C  0800               	movf	0,w
  4345  076D  0081               	movwf	1
  4346  076E  0008               	return
  4347  076F                     __end_ofPL14:	
  4348                           
  4349                           	psect	text3
  4350  0ECD                     __ptext3:	
  4351 ;; *************** function _PwrSensorWake *****************
  4352 ;; Defined at:
  4353 ;;		line 144 in file "../../../src/node/power.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		None
  4362 ;; Tracked objects:
  4363 ;;		On entry : 1F/0
  4364 ;;		On exit  : 1F/2
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4367 ;;      Params:         0       0       0       0
  4368 ;;      Locals:         0       0       0       0
  4369 ;;      Temps:          0       0       0       0
  4370 ;;      Totals:         0       0       0       0
  4371 ;;Total ram usage:        0 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    5
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _PwrSensorWake
  4383  0ECD                     _PwrSensorWake:	
  4384                           
  4385                           ;power.c: 146: LATCbits.LATC2 = 1;
  4386                           
  4387                           ;incstack = 0
  4388                           ; Regs used in _PwrSensorWake: []
  4389  0ECD  0022               	movlb	2	; select bank2
  4390  0ECE  150E               	bsf	14,2	;volatile
  4391  0ECF  0008               	return
  4392  0ED0                     __end_of_PwrSensorWake:	
  4393                           
  4394                           	psect	text8
  4395  0F08                     __ptext8:	
  4396 ;; *************** function _PwrRfSleep *****************
  4397 ;; Defined at:
  4398 ;;		line 119 in file "../../../src/node/power.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;		None               void
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0, pclath, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 1E/1
  4409 ;;		On exit  : 1F/1
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4412 ;;      Params:         0       0       0       0
  4413 ;;      Locals:         0       0       0       0
  4414 ;;      Temps:          0       0       0       0
  4415 ;;      Totals:         0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    9
  4419 ;; This function calls:
  4420 ;;		_Mrf49xaShutdown
  4421 ;; This function is called by:
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _PwrRfSleep
  4428  0F08                     _PwrRfSleep:	
  4429                           
  4430                           ;power.c: 121: Mrf49xaShutdown();
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  4434  0F08  270B               	fcall	_Mrf49xaShutdown
  4435                           
  4436                           ;power.c: 122: INTCONbits.INTE = 1;
  4437  0F09  160B               	bsf	11,4	;volatile
  4438  0F0A  0008               	return
  4439  0F0B                     __end_of_PwrRfSleep:	
  4440  0F0B                     __ptext9:	
  4441 ;; *************** function _Mrf49xaShutdown *****************
  4442 ;; Defined at:
  4443 ;;		line 131 in file "../../../src/devices/mrf49xa.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		wreg, status,2, status,0, pclath, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 1E/1
  4454 ;;		On exit  : 1F/1
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4457 ;;      Params:         0       0       0       0
  4458 ;;      Locals:         0       0       0       0
  4459 ;;      Temps:          0       0       0       0
  4460 ;;      Totals:         0       0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    8
  4464 ;; This function calls:
  4465 ;;		_Mrf49xaModeSleep
  4466 ;; This function is called by:
  4467 ;;		_PwrRfSleep
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _Mrf49xaShutdown
  4473  0F0B                     _Mrf49xaShutdown:	
  4474                           
  4475                           ;mrf49xa.c: 133: Mrf49xaModeSleep();
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  4479  0F0B  2F0C               	ljmp	l2752
  4480  0F0C                     __end_of_Mrf49xaShutdown:	
  4481  0F0C                     __ptext10:	
  4482 ;; *************** function _Mrf49xaModeSleep *****************
  4483 ;; Defined at:
  4484 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;		None
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  k               1    3[BANK0 ] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;		None               void
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, pclath, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 1E/1
  4495 ;;		On exit  : 1F/1
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4498 ;;      Params:         0       0       0       0
  4499 ;;      Locals:         0       1       0       0
  4500 ;;      Temps:          0       0       0       0
  4501 ;;      Totals:         0       1       0       0
  4502 ;;Total ram usage:        1 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    7
  4505 ;; This function calls:
  4506 ;;		_Mrf49TxCmd
  4507 ;; This function is called by:
  4508 ;;		_Mrf49xaShutdown
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           
  4513                           ;psect for function _Mrf49xaModeSleep
  4514  0F0C                     _Mrf49xaModeSleep:	
  4515  0F0C                     l2752:	
  4516                           ;incstack = 0
  4517                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  4518                           
  4519                           
  4520                           ;mrf49xa.c: 123: UI08_t k;
  4521                           ;mrf49xa.c: 124: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  4522  0F0C  0020               	movlb	0	; select bank0
  4523  0F0D  3072               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  4524  0F0E  01A3               	clrf	Mrf49xaModeSleep@k
  4525  0F0F  3187               	movlp	high __stringtab
  4526  0F10  000A               	callw
  4527  0F11  318F               	pagesel	$	;select current page
  4528  0F12  3800               	iorlw	0
  4529  0F13  1903               	btfsc	3,2
  4530  0F14  2F29               	goto	l2764
  4531  0F15                     l2758:	
  4532  0F15  3523               	lslf	Mrf49xaModeSleep@k,w
  4533  0F16  3EA9               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  4534  0F17  3187               	movlp	high __stringtab
  4535  0F18  000A               	callw
  4536  0F19  00A1               	movwf	Mrf49TxCmd@val
  4537  0F1A  3523               	lslf	Mrf49xaModeSleep@k,w
  4538  0F1B  3EA8               	addlw	low (_mrfRegset_Sleep| (0+32768))
  4539  0F1C  3187               	movlp	high __stringtab
  4540  0F1D  000A               	callw
  4541  0F1E  3182  22C1  318F   	fcall	_Mrf49TxCmd
  4542  0F21  3072               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  4543  0F22  0AA3               	incf	Mrf49xaModeSleep@k,f
  4544  0F23  3187               	movlp	high __stringtab
  4545  0F24  000A               	callw
  4546  0F25  318F               	pagesel	$	;select current page
  4547  0F26  0223               	subwf	Mrf49xaModeSleep@k,w
  4548  0F27  1C03               	skipc
  4549  0F28  2F15               	goto	l2758
  4550  0F29                     l2764:	
  4551                           
  4552                           ;mrf49xa.c: 126: rfTrcvStatus.state = POWERED_OFF;
  4553  0F29  0021               	movlb	1	; select bank1
  4554  0F2A  3080               	movlw	-128
  4555  0F2B  01EB               	clrf	(_rfTrcvStatus^(0+128)+75)
  4556                           
  4557                           ;mrf49xa.c: 127: rfTrcvStatus.hwByte = 0;
  4558  0F2C  05EC               	andwf	(_rfTrcvStatus^(0+128)+76),f
  4559  0F2D  0008               	return
  4560  0F2E                     __end_of_Mrf49xaModeSleep:	
  4561                           
  4562                           	psect	text11
  4563  0F2E                     __ptext11:	
  4564 ;; *************** function _PwrRfInit *****************
  4565 ;; Defined at:
  4566 ;;		line 88 in file "../../../src/node/power.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;		None               void
  4573 ;; Registers used:
  4574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 1F/0
  4577 ;;		On exit  : 1F/1
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4580 ;;      Params:         0       0       0       0
  4581 ;;      Locals:         0       0       0       0
  4582 ;;      Temps:          0       0       0       0
  4583 ;;      Totals:         0       0       0       0
  4584 ;;Total ram usage:        0 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:   10
  4587 ;; This function calls:
  4588 ;;		_ExtIntInit
  4589 ;;		_Mrf49xaInit
  4590 ;;		_Sleepy
  4591 ;; This function is called by:
  4592 ;;		_main
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _PwrRfInit
  4598  0F2E                     _PwrRfInit:	
  4599                           
  4600                           ;power.c: 90: TRISAbits.TRISA2 = 1;
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _PwrRfInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4604  0F2E  0021               	movlb	1	; select bank1
  4605  0F2F  150C               	bsf	12,2	;volatile
  4606                           
  4607                           ;power.c: 91: TRISAbits.TRISA4 = 0;
  4608  0F30  120C               	bcf	12,4	;volatile
  4609                           
  4610                           ;power.c: 92: TRISAbits.TRISA5 = 0;
  4611  0F31  128C               	bcf	12,5	;volatile
  4612                           
  4613                           ;power.c: 94: TRISBbits.TRISB7 = 0;
  4614  0F32  138D               	bcf	13,7	;volatile
  4615                           
  4616                           ;power.c: 96: TRISCbits.TRISC1 = 0;
  4617  0F33  108E               	bcf	14,1	;volatile
  4618                           
  4619                           ;power.c: 97: TRISCbits.TRISC4 = 0;
  4620  0F34  120E               	bcf	14,4	;volatile
  4621                           
  4622                           ;power.c: 98: TRISCbits.TRISC6 = 0;
  4623  0F35  130E               	bcf	14,6	;volatile
  4624                           
  4625                           ;power.c: 99: TRISCbits.TRISC7 = 0;
  4626  0F36  138E               	bcf	14,7	;volatile
  4627                           
  4628                           ;power.c: 100: TRISCbits.TRISC3 = 1;
  4629  0F37  158E               	bsf	14,3	;volatile
  4630                           
  4631                           ;power.c: 101: TRISCbits.TRISC5 = 1;
  4632  0F38  168E               	bsf	14,5	;volatile
  4633                           
  4634                           ;power.c: 103: LATCbits.LATC1 = 0;
  4635  0F39  0022               	movlb	2	; select bank2
  4636  0F3A  108E               	bcf	14,1	;volatile
  4637                           
  4638                           ;power.c: 105: LATAbits.LATA4 = 0;
  4639  0F3B  120C               	bcf	12,4	;volatile
  4640                           
  4641                           ;power.c: 106: LATAbits.LATA5 = 0;
  4642  0F3C  128C               	bcf	12,5	;volatile
  4643                           
  4644                           ;power.c: 107: LATCbits.LATC4 = 0;
  4645  0F3D  120E               	bcf	14,4	;volatile
  4646                           
  4647                           ;power.c: 108: PORTCbits.RC6 = 1;
  4648  0F3E  0020               	movlb	0	; select bank0
  4649  0F3F  170E               	bsf	14,6	;volatile
  4650                           
  4651                           ;power.c: 109: LATCbits.LATC7 = 0;
  4652  0F40  0022               	movlb	2	; select bank2
  4653  0F41  138E               	bcf	14,7	;volatile
  4654                           
  4655                           ;power.c: 110: PORTBbits.RB7 = 0;
  4656  0F42  0020               	movlb	0	; select bank0
  4657  0F43  138D               	bcf	13,7	;volatile
  4658                           
  4659                           ;power.c: 112: WPUAbits.WPUA2 = 1;
  4660  0F44  0024               	movlb	4	; select bank4
  4661  0F45  150C               	bsf	12,2	;volatile
  4662                           
  4663                           ;power.c: 113: Sleepy(10);
  4664  0F46  300A               	movlw	10
  4665  0F47  0020               	movlb	0	; select bank0
  4666  0F48  00A0               	movwf	Sleepy@ms
  4667  0F49  01A1               	clrf	Sleepy@ms+1
  4668  0F4A  3181  218E  318F   	fcall	_Sleepy
  4669                           
  4670                           ;power.c: 115: Mrf49xaInit();
  4671  0F4D  3181  212E  318F   	fcall	_Mrf49xaInit
  4672                           
  4673                           ;power.c: 116: ExtIntInit();
  4674  0F50  2F51               	ljmp	l2836
  4675  0F51                     __end_of_PwrRfInit:	
  4676  0F51                     __ptext42:	
  4677 ;; *************** function _ExtIntInit *****************
  4678 ;; Defined at:
  4679 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;		None               void
  4686 ;; Registers used:
  4687 ;;		None
  4688 ;; Tracked objects:
  4689 ;;		On entry : 1F/0
  4690 ;;		On exit  : 1F/1
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4693 ;;      Params:         0       0       0       0
  4694 ;;      Locals:         0       0       0       0
  4695 ;;      Temps:          0       0       0       0
  4696 ;;      Totals:         0       0       0       0
  4697 ;;Total ram usage:        0 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    5
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_Mrf49xaTick
  4704 ;;		_PwrRfInit
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           
  4709                           ;psect for function _ExtIntInit
  4710  0F51                     _ExtIntInit:	
  4711  0F51                     l2836:	
  4712                           ;incstack = 0
  4713                           ; Regs used in _ExtIntInit: []
  4714                           
  4715                           
  4716                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4717  0F51  0021               	movlb	1	; select bank1
  4718  0F52  1315               	bcf	21,6	;volatile
  4719                           
  4720                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4721  0F53  108B               	bcf	11,1	;volatile
  4722                           
  4723                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4724  0F54  160B               	bsf	11,4	;volatile
  4725                           
  4726                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4727  0F55  178B               	bsf	11,7	;volatile
  4728  0F56  0008               	return
  4729  0F57                     __end_of_ExtIntInit:	
  4730                           
  4731                           	psect	text14
  4732  07F6                     __ptext14:	
  4733 ;; *************** function _PwrI2cInit *****************
  4734 ;; Defined at:
  4735 ;;		line 62 in file "../../../src/node/power.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;		None               void
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 17F/2
  4746 ;;		On exit  : 1F/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4749 ;;      Params:         0       0       0       0
  4750 ;;      Locals:         0       0       0       0
  4751 ;;      Temps:          0       0       0       0
  4752 ;;      Totals:         0       0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    8
  4756 ;; This function calls:
  4757 ;;		_SoftI2cInit
  4758 ;; This function is called by:
  4759 ;;		_main
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           
  4764                           ;psect for function _PwrI2cInit
  4765  07F6                     _PwrI2cInit:	
  4766                           
  4767                           ;power.c: 64: SoftI2cInit();
  4768                           
  4769                           ;incstack = 0
  4770                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  4771  07F6  3180  2031         	fcall	_SoftI2cInit
  4772                           
  4773                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  4774  07F8  0021               	movlb	1	; select bank1
  4775  07F9  120D               	bcf	13,4	;volatile
  4776                           
  4777                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  4778  07FA  130D               	bcf	13,6	;volatile
  4779                           
  4780                           ;power.c: 69: TRISBbits.TRISB5 = 1;
  4781  07FB  168D               	bsf	13,5	;volatile
  4782                           
  4783                           ;power.c: 70: PORTBbits.RB5 = 1;
  4784  07FC  0020               	movlb	0	; select bank0
  4785  07FD  168D               	bsf	13,5	;volatile
  4786  07FE  0008               	return
  4787  07FF                     __end_of_PwrI2cInit:	
  4788                           
  4789                           	psect	text15
  4790  0031                     __ptext15:	
  4791 ;; *************** function _SoftI2cInit *****************
  4792 ;; Defined at:
  4793 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 17F/2
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4807 ;;      Params:         0       0       0       0
  4808 ;;      Locals:         0       0       0       0
  4809 ;;      Temps:          0       0       0       0
  4810 ;;      Totals:         0       0       0       0
  4811 ;;Total ram usage:        0 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    7
  4814 ;; This function calls:
  4815 ;;		_SoftI2cStart
  4816 ;;		_SoftI2cStop
  4817 ;;		_SoftI2cTxByte
  4818 ;; This function is called by:
  4819 ;;		_PwrI2cInit
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _SoftI2cInit
  4825  0031                     _SoftI2cInit:	
  4826                           
  4827                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  4831                           
  4832                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  4833                           
  4834                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  4835                           
  4836                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  4837  0031  2410  3180         	fcall	PL20	;call to abstracted procedure
  4838                           
  4839                           ;softI2c.c: 32: SoftI2cStart();
  4840  0033  23B0  3180         	fcall	_SoftI2cStart
  4841                           
  4842                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  4843  0035  3000               	movlw	0
  4844  0036  2342  3180         	fcall	_SoftI2cTxByte
  4845                           
  4846                           ;softI2c.c: 34: SoftI2cStop();
  4847  0038  2ACC               	ljmp	l2366
  4848  0039                     __end_of_SoftI2cInit:	
  4849  0039                     __pmaintext:	
  4850 ;;
  4851 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4852 ;;
  4853 ;; *************** function _main *****************
  4854 ;; Defined at:
  4855 ;;		line 29 in file "../../../src/node/main.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  temperature     2   16[BANK0 ] unsigned int 
  4860 ;;  humidity        2   14[BANK0 ] unsigned int 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;		None               void
  4863 ;; Registers used:
  4864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 17F/0
  4867 ;;		On exit  : 1F/1
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4870 ;;      Params:         0       0       0       0
  4871 ;;      Locals:         0       4       0       0
  4872 ;;      Temps:          0       0       0       0
  4873 ;;      Totals:         0       4       0       0
  4874 ;;Total ram usage:        4 bytes
  4875 ;; Hardware stack levels required when called:   11
  4876 ;; This function calls:
  4877 ;;		_AdcSample
  4878 ;;		_CfgInit
  4879 ;;		_Mcp9800Read
  4880 ;;		_Mcp9800Start
  4881 ;;		_Mrf49xaNeedsReset
  4882 ;;		_Mrf49xaTick
  4883 ;;		_PwrAdcInit
  4884 ;;		_PwrAdcSleep
  4885 ;;		_PwrAdcWake
  4886 ;;		_PwrI2cInit
  4887 ;;		_PwrI2cSleep
  4888 ;;		_PwrI2cWake
  4889 ;;		_PwrRfInit
  4890 ;;		_PwrRfSleep
  4891 ;;		_PwrRfWake
  4892 ;;		_PwrSensorInit
  4893 ;;		_PwrSensorSleep
  4894 ;;		_PwrSensorWake
  4895 ;;		_RfSendSampleWeatherNode
  4896 ;;		_Sleepy
  4897 ;; This function is called by:
  4898 ;;		Startup code after reset
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _main
  4904  0039                     _main:	
  4905                           
  4906                           ;main.c: 32: OSCCON = 0b01111000;
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  0039  3078               	movlw	120
  4911  003A  0021               	movlb	1	; select bank1
  4912  003B  0099               	movwf	25	;volatile
  4913                           
  4914                           ;main.c: 34: PwrAdcInit();
  4915  003C  23E5  3180         	fcall	_PwrAdcInit
  4916                           
  4917                           ;main.c: 35: PwrSensorInit();
  4918  003E  242C               	fcall	_PwrSensorInit
  4919                           
  4920                           ;main.c: 36: PwrI2cInit();
  4921  003F  3187  27F6  3180   	fcall	_PwrI2cInit
  4922                           
  4923                           ;main.c: 37: PwrRfInit();
  4924  0042  318F  272E  3180   	fcall	_PwrRfInit
  4925                           
  4926                           ;main.c: 39: CfgInit();
  4927  0045  23C2               	fcall	_CfgInit
  4928                           
  4929                           ;main.c: 41: PwrAdcSleep();
  4930  0046  318E  26D6  3180   	fcall	_PwrAdcSleep
  4931                           
  4932                           ;main.c: 42: PwrSensorSleep();
  4933  0049  23BF  3180         	fcall	_PwrSensorSleep
  4934                           
  4935                           ;main.c: 43: PwrI2cSleep();
  4936  004B  23BD               	fcall	_PwrI2cSleep
  4937  004C                     l3348:	
  4938                           
  4939                           ;main.c: 44: PwrRfSleep();
  4940  004C  318F  2708  3180   	fcall	_PwrRfSleep
  4941                           
  4942                           ;main.c: 47: {
  4943                           ;main.c: 50: Sleepy(1000);
  4944  004F  30E8               	movlw	232
  4945  0050  0020               	movlb	0	; select bank0
  4946  0051  00A0               	movwf	Sleepy@ms
  4947  0052  3003               	movlw	3
  4948  0053  00A1               	movwf	Sleepy@ms+1
  4949  0054  218E               	fcall	_Sleepy
  4950                           
  4951                           ;main.c: 52: PwrSensorWake();
  4952  0055  318E  26CD  3180   	fcall	_PwrSensorWake
  4953                           
  4954                           ;main.c: 53: PwrI2cWake();
  4955  0058  23EE  3180         	fcall	_PwrI2cWake
  4956                           
  4957                           ;main.c: 55: Mcp9800Start(Mcp9800_12bit);
  4958  005A  3060               	movlw	96
  4959  005B  2305               	fcall	_Mcp9800Start
  4960                           
  4961                           ;main.c: 57: PwrAdcWake();
  4962  005C  3187  27E5  3180   	fcall	_PwrAdcWake
  4963                           
  4964                           ;main.c: 58: uint16_t humidity = AdcSample(ADC_AN4);
  4965  005F  3004               	movlw	4
  4966  0060  3187  27AE  3180   	fcall	_AdcSample
  4967  0063  0823               	movf	?_AdcSample+1,w
  4968  0064  01AF               	clrf	main@humidity+1
  4969  0065  07AF               	addwf	main@humidity+1,f
  4970  0066  0822               	movf	?_AdcSample,w
  4971  0067  01AE               	clrf	main@humidity
  4972  0068  07AE               	addwf	main@humidity,f
  4973                           
  4974                           ;main.c: 59: Sleepy(300);
  4975  0069  302C               	movlw	44
  4976  006A  00A0               	movwf	Sleepy@ms
  4977  006B  3001               	movlw	1
  4978  006C  00A1               	movwf	Sleepy@ms+1
  4979  006D  218E  3180         	fcall	_Sleepy
  4980                           
  4981                           ;main.c: 60: uint16_t temperature = Mcp9800Read();
  4982  006F  22DB  3180         	fcall	_Mcp9800Read
  4983  0071  0825               	movf	?_Mcp9800Read+1,w
  4984  0072  01B1               	clrf	main@temperature+1
  4985  0073  07B1               	addwf	main@temperature+1,f
  4986  0074  0824               	movf	?_Mcp9800Read,w
  4987  0075  01B0               	clrf	main@temperature
  4988  0076  07B0               	addwf	main@temperature,f
  4989                           
  4990                           ;main.c: 62: PwrSensorSleep();
  4991  0077  23BF  3180         	fcall	_PwrSensorSleep
  4992                           
  4993                           ;main.c: 63: PwrI2cSleep();
  4994  0079  23BD  3180         	fcall	_PwrI2cSleep
  4995                           
  4996                           ;main.c: 65: PwrRfWake();
  4997  007B  2429  3180         	fcall	_PwrRfWake
  4998                           
  4999                           ;main.c: 67: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  5000  007D  0021               	movlb	1	; select bank1
  5001  007E  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  5002  007F  1903               	btfsc	3,2
  5003  0080  2885               	goto	l3378
  5004                           
  5005                           ;main.c: 68: {
  5006                           ;main.c: 69: Mrf49xaNeedsReset();
  5007  0081  22BE  3180         	fcall	_Mrf49xaNeedsReset
  5008                           
  5009                           ;main.c: 70: Mrf49xaTick();
  5010  0083  20A0  3180         	fcall	_Mrf49xaTick
  5011  0085                     l3378:	
  5012                           
  5013                           ;main.c: 75: {
  5014                           ;main.c: 76: Mrf49xaTick();
  5015  0085  20A0  3180         	fcall	_Mrf49xaTick
  5016                           
  5017                           ;main.c: 77: }
  5018                           ;main.c: 78: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  5019  0087  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  5020  0088  1D03               	skipz
  5021  0089  2885               	goto	l3378
  5022                           
  5023                           ;main.c: 80: RfSendSampleWeatherNode(temperature, humidity);
  5024  008A  0020               	movlb	0	; select bank0
  5025  008B  0831               	movf	main@temperature+1,w
  5026  008C  01A7               	clrf	RfSendSampleWeatherNode@temperature+1
  5027  008D  07A7               	addwf	RfSendSampleWeatherNode@temperature+1,f
  5028  008E  0830               	movf	main@temperature,w
  5029  008F  01A6               	clrf	RfSendSampleWeatherNode@temperature
  5030  0090  07A6               	addwf	RfSendSampleWeatherNode@temperature,f
  5031  0091  082F               	movf	main@humidity+1,w
  5032  0092  01A9               	clrf	RfSendSampleWeatherNode@humidity+1
  5033  0093  07A9               	addwf	RfSendSampleWeatherNode@humidity+1,f
  5034  0094  082E               	movf	main@humidity,w
  5035  0095  01A8               	clrf	RfSendSampleWeatherNode@humidity
  5036  0096  07A8               	addwf	RfSendSampleWeatherNode@humidity,f
  5037  0097  3186  2618  3180   	fcall	_RfSendSampleWeatherNode
  5038  009A                     l610:	
  5039                           ;main.c: 81: do
  5040                           
  5041                           
  5042                           ;main.c: 82: {
  5043                           ;main.c: 83: Mrf49xaTick();
  5044  009A  20A0  3180         	fcall	_Mrf49xaTick
  5045                           
  5046                           ;main.c: 84: }
  5047                           ;main.c: 85: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  5048  009C  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  5049  009D  1903               	btfsc	3,2
  5050  009E  284C               	goto	l3348
  5051  009F  289A               	goto	l610
  5052  00A0                     __end_of_main:	
  5053  00A0                     __ptext21:	
  5054 ;; *************** function _Mrf49xaTick *****************
  5055 ;; Defined at:
  5056 ;;		line 129 in file "../../../src/devices/mrf49xa_packet.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  timeout         1   12[BANK0 ] unsigned char 
  5061 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  5062 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;		None               void
  5065 ;; Registers used:
  5066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 1E/1
  5069 ;;		On exit  : 1F/1
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5072 ;;      Params:         0       0       0       0
  5073 ;;      Locals:         0       2       0       0
  5074 ;;      Temps:          0       1       0       0
  5075 ;;      Totals:         0       3       0       0
  5076 ;;Total ram usage:        3 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:   10
  5079 ;; This function calls:
  5080 ;;		_ExtIntInit
  5081 ;;		_HandlePacket
  5082 ;;		_Mrf49xaFreePacket
  5083 ;;		_Mrf49xaInit
  5084 ;;		_Mrf49xaModeTx
  5085 ;;		_Mrf49xaPacketPending
  5086 ;;		_Mrf49xaRxPacket
  5087 ;;		_Mrf49xaServe
  5088 ;;		_Sleepy
  5089 ;; This function is called by:
  5090 ;;		_main
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _Mrf49xaTick
  5096  00A0                     _Mrf49xaTick:	
  5097                           
  5098                           ;mrf49xa_packet.c: 131: if (rfTrcvStatus.needsReset)
  5099                           
  5100                           ;incstack = 0
  5101                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5102  00A0  0021               	movlb	1	; select bank1
  5103  00A1  1FEC               	btfss	(_rfTrcvStatus^(0+128)+76),7
  5104  00A2  28A6               	goto	l3044
  5105                           
  5106                           ;mrf49xa_packet.c: 132: {
  5107                           ;mrf49xa_packet.c: 133: Mrf49xaInit();
  5108  00A3  212E               	fcall	_Mrf49xaInit
  5109                           
  5110                           ;mrf49xa_packet.c: 134: ExtIntInit();
  5111  00A4  318F  2F51         	ljmp	l2836
  5112  00A6                     l3044:	
  5113                           
  5114                           ;mrf49xa_packet.c: 136: }
  5115                           ;mrf49xa_packet.c: 138: if (Mrf49xaPacketPending())
  5116  00A6  23DC  3180         	fcall	_Mrf49xaPacketPending
  5117  00A8  3A00               	xorlw	0
  5118  00A9  1903               	skipnz
  5119  00AA  28CA               	goto	l3058
  5120                           
  5121                           ;mrf49xa_packet.c: 139: {
  5122                           ;mrf49xa_packet.c: 140: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  5123  00AB  241B  3180         	fcall	_Mrf49xaRxPacket
  5124  00AD  0020               	movlb	0	; select bank0
  5125  00AE  00AD               	movwf	Mrf49xaTick@packet
  5126                           
  5127                           ;mrf49xa_packet.c: 148: if (packet->packet.dst == 0xFF || packet->packet.dst == cfgRam.n
      +                          odeId)
  5128  00AF  3E03               	addlw	3
  5129  00B0  0086               	movwf	6
  5130  00B1  0187               	clrf	7
  5131  00B2  0801               	movf	1,w
  5132  00B3  3AFF               	xorlw	255
  5133  00B4  1903               	skipnz
  5134  00B5  28BD               	goto	l3052
  5135  00B6  082D               	movf	Mrf49xaTick@packet,w
  5136  00B7  3E03               	addlw	3
  5137  00B8  0086               	movwf	6
  5138  00B9  0801               	movf	1,w
  5139  00BA  0632               	xorwf	_cfgRam,w
  5140  00BB  1D03               	skipz
  5141  00BC  28C7               	goto	l3056
  5142  00BD                     l3052:	
  5143                           
  5144                           ;mrf49xa_packet.c: 149: {
  5145                           ;mrf49xa_packet.c: 150: packet->packet.size -= 5;
  5146  00BD  0A2D               	incf	Mrf49xaTick@packet,w
  5147  00BE  0086               	movwf	6
  5148  00BF  3005               	movlw	5
  5149  00C0  0187               	clrf	7
  5150  00C1  0281               	subwf	1,f
  5151                           
  5152                           ;mrf49xa_packet.c: 153: HandlePacket(packet);
  5153  00C2  082D               	movf	Mrf49xaTick@packet,w
  5154  00C3  3186  2669  3180   	fcall	_HandlePacket
  5155                           
  5156                           ;mrf49xa_packet.c: 155: }
  5157  00C6  28CA               	goto	l3058
  5158  00C7                     l3056:	
  5159                           
  5160                           ;mrf49xa_packet.c: 156: else
  5161                           ;mrf49xa_packet.c: 157: {
  5162                           ;mrf49xa_packet.c: 158: Mrf49xaFreePacket(packet);
  5163  00C7  082D               	movf	Mrf49xaTick@packet,w
  5164  00C8  23CA  3180         	fcall	_Mrf49xaFreePacket
  5165  00CA                     l3058:	
  5166                           
  5167                           ;mrf49xa_packet.c: 159: }
  5168                           ;mrf49xa_packet.c: 163: }
  5169                           ;mrf49xa_packet.c: 165: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  5170  00CA  0021               	movlb	1	; select bank1
  5171  00CB  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  5172  00CC  3A03               	xorlw	3
  5173  00CD  1D03               	skipz
  5174  00CE  28FD               	goto	l3078
  5175                           
  5176                           ;mrf49xa_packet.c: 166: {
  5177                           ;mrf49xa_packet.c: 167: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  5178  00CF  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  5179  00D0  0C89               	rrf	9,f
  5180  00D1  0C89               	rrf	9,f
  5181  00D2  3903               	andlw	3
  5182  00D3  3A02               	xorlw	2
  5183  00D4  1D03               	skipz
  5184  00D5  28D8               	goto	l3064
  5185  00D6                     l3062:	
  5186                           
  5187                           ;mrf49xa_packet.c: 168: {
  5188                           ;mrf49xa_packet.c: 169: rfTrcvStatus.txPacket.state = PKT_FREE;
  5189  00D6  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  5190                           
  5191                           ;mrf49xa_packet.c: 170: }
  5192  00D7  28FD               	goto	l3078
  5193  00D8                     l3064:	
  5194                           
  5195                           ;mrf49xa_packet.c: 171: else if (rfTrcvStatus.txPacket.retry == 10)
  5196  00D8  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  5197  00D9  390F               	andlw	15
  5198  00DA  3A0A               	xorlw	10
  5199  00DB  1D03               	skipz
  5200  00DC  28F5               	goto	l3074
  5201                           
  5202                           ;mrf49xa_packet.c: 172: {
  5203                           ;mrf49xa_packet.c: 173: if (rfTrcvStatus.txPacket.retransmit == 1)
  5204  00DD  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  5205  00DE  3903               	andlw	3
  5206  00DF  3A01               	xorlw	1
  5207  00E0  1903               	btfsc	3,2
  5208  00E1  28D6               	goto	l3062
  5209                           
  5210                           ;mrf49xa_packet.c: 179: else
  5211                           ;mrf49xa_packet.c: 180: {
  5212                           ;mrf49xa_packet.c: 182: rfTrcvStatus.txPacket.retry = 0;
  5213  00E2  30F0               	movlw	-16
  5214  00E3  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  5215                           
  5216                           ;mrf49xa_packet.c: 183: rfTrcvStatus.txPacket.retransmit++;
  5217  00E4  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  5218  00E5  3903               	andlw	3
  5219  00E6  0020               	movlb	0	; select bank0
  5220  00E7  00AB               	movwf	??_Mrf49xaTick
  5221  00E8  0AAB               	incf	??_Mrf49xaTick,f
  5222  00E9  0EAB               	swapf	??_Mrf49xaTick,f
  5223  00EA  0021               	movlb	1	; select bank1
  5224  00EB  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  5225  00EC  0020               	movlb	0	; select bank0
  5226  00ED  062B               	xorwf	??_Mrf49xaTick,w
  5227  00EE  39CF               	andlw	-49
  5228  00EF  062B               	xorwf	??_Mrf49xaTick,w
  5229  00F0  0021               	movlb	1	; select bank1
  5230  00F1  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  5231                           
  5232                           ;mrf49xa_packet.c: 184: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  5233  00F2  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  5234  00F3  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  5235  00F4  28FD               	goto	l3078
  5236  00F5                     l3074:	
  5237                           
  5238                           ;mrf49xa_packet.c: 187: else
  5239                           ;mrf49xa_packet.c: 188: {
  5240                           ;mrf49xa_packet.c: 189: rfTrcvStatus.txPacket.retry++;
  5241  00F5  23EF  3180         	fcall	PL10	;call to abstracted procedure
  5242                           
  5243                           ;mrf49xa_packet.c: 190: Sleepy(8);
  5244  00F7  3008               	movlw	8
  5245  00F8  0020               	movlb	0	; select bank0
  5246  00F9  00A0               	movwf	Sleepy@ms
  5247  00FA  01A1               	clrf	Sleepy@ms+1
  5248  00FB  218E  3180         	fcall	_Sleepy
  5249  00FD                     l3078:	
  5250                           
  5251                           ;mrf49xa_packet.c: 191: }
  5252                           ;mrf49xa_packet.c: 192: }
  5253                           ;mrf49xa_packet.c: 194: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  5254                           ;mrf49xa_packet.c: 195: rfTrcvStatus.state == RECV_IDLE)
  5255  00FD  0021               	movlb	1	; select bank1
  5256  00FE  0B51               	decfsz	(_rfTrcvStatus^(0+128)+49),w
  5257  00FF  0008               	return
  5258  0100  0B6B               	decfsz	(_rfTrcvStatus^(0+128)+75),w
  5259  0101  0008               	return
  5260                           
  5261                           ;mrf49xa_packet.c: 196: {
  5262                           ;mrf49xa_packet.c: 197: if (rfTrcvStatus.txPacket.retry >= 10)
  5263  0102  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  5264  0103  390F               	andlw	15
  5265  0104  0020               	movlb	0	; select bank0
  5266  0105  00AB               	movwf	??_Mrf49xaTick
  5267  0106  300A               	movlw	10
  5268  0107  022B               	subwf	??_Mrf49xaTick,w
  5269  0108  1C03               	skipc
  5270  0109  2910               	goto	l3090
  5271                           
  5272                           ;mrf49xa_packet.c: 198: {
  5273                           ;mrf49xa_packet.c: 200: rfTrcvStatus.txPacket.retry = 0;
  5274  010A  30F0               	movlw	-16
  5275  010B  0021               	movlb	1	; select bank1
  5276  010C  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  5277                           
  5278                           ;mrf49xa_packet.c: 201: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5279  010D  3003               	movlw	3
  5280  010E  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  5281  010F  0008               	return
  5282  0110                     l3090:	
  5283                           
  5284                           ;mrf49xa_packet.c: 203: }
  5285                           ;mrf49xa_packet.c: 207: uint8_t timeout = 0;
  5286  0110  01AC               	clrf	Mrf49xaTick@timeout
  5287  0111                     l3092:	
  5288                           
  5289                           ;mrf49xa_packet.c: 211: {
  5290                           ;mrf49xa_packet.c: 212: Mrf49xaServe();
  5291  0111  21A9  3180         	fcall	_Mrf49xaServe
  5292                           
  5293                           ;mrf49xa_packet.c: 214: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  5294  0113  0021               	movlb	1	; select bank1
  5295  0114  0B6B               	decfsz	(_rfTrcvStatus^(0+128)+75),w
  5296  0115  2919               	goto	l3100
  5297  0116  0020               	movlb	0	; select bank0
  5298  0117  1C35               	btfss	_mrf49Status,0
  5299  0118  2927               	goto	l420
  5300  0119                     l3100:	
  5301                           
  5302                           ;mrf49xa_packet.c: 218: }
  5303                           ;mrf49xa_packet.c: 220: Sleepy(8);
  5304  0119  3008               	movlw	8
  5305  011A  0020               	movlb	0	; select bank0
  5306  011B  00A0               	movwf	Sleepy@ms
  5307  011C  01A1               	clrf	Sleepy@ms+1
  5308  011D  218E  3180         	fcall	_Sleepy
  5309  011F  300B               	movlw	11
  5310                           
  5311                           ;mrf49xa_packet.c: 221: timeout++;
  5312  0120  0AAC               	incf	Mrf49xaTick@timeout,f
  5313                           
  5314                           ;mrf49xa_packet.c: 223: if (timeout > 10)
  5315  0121  022C               	subwf	Mrf49xaTick@timeout,w
  5316  0122  1C03               	skipc
  5317  0123  2911               	goto	l3092
  5318                           
  5319                           ;mrf49xa_packet.c: 224: {
  5320                           ;mrf49xa_packet.c: 225: rfTrcvStatus.txPacket.retry++;
  5321  0124  0021               	movlb	1	; select bank1
  5322  0125  23EF               	fcall	PL10	;call to abstracted procedure
  5323  0126  0008               	return
  5324  0127                     l420:	
  5325                           
  5326                           ;mrf49xa_packet.c: 239: INTCONbits.INTE = 0;;
  5327  0127  120B               	bcf	11,4	;volatile
  5328                           
  5329                           ;mrf49xa_packet.c: 240: Mrf49xaModeTx();
  5330  0128  318E  26E4         	fcall	_Mrf49xaModeTx
  5331                           
  5332                           ;mrf49xa_packet.c: 241: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  5333  012A  3002               	movlw	2
  5334  012B  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  5335                           
  5336                           ;mrf49xa_packet.c: 242: INTCONbits.INTE = 1;;
  5337  012C  160B               	bsf	11,4	;volatile
  5338  012D  0008               	return
  5339  012E                     __end_of_Mrf49xaTick:	
  5340  012E                     __ptext25:	
  5341 ;; *************** function _Mrf49xaInit *****************
  5342 ;; Defined at:
  5343 ;;		line 150 in file "../../../src/devices/mrf49xa.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;  k               1    6[BANK0 ] unsigned char 
  5348 ;;  j               1    0        unsigned char 
  5349 ;;  i               1    0        unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 1E/0
  5356 ;;		On exit  : 1F/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5359 ;;      Params:         0       0       0       0
  5360 ;;      Locals:         0       1       0       0
  5361 ;;      Temps:          0       0       0       0
  5362 ;;      Totals:         0       1       0       0
  5363 ;;Total ram usage:        1 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    9
  5366 ;; This function calls:
  5367 ;;		_Mrf49TxCmd
  5368 ;;		_Mrf49xaModeRx
  5369 ;;		_Mrf49xaServe
  5370 ;;		_Sleepy
  5371 ;; This function is called by:
  5372 ;;		_Mrf49xaTick
  5373 ;;		_PwrRfInit
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           
  5378                           ;psect for function _Mrf49xaInit
  5379  012E                     _Mrf49xaInit:	
  5380  012E                     l234:	
  5381                           ;incstack = 0
  5382                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5383                           ;mrf49xa.c: 152: UI08_t k;
  5384                           ;mrf49xa.c: 154: UI08_t i, j;
  5385                           ;mrf49xa.c: 156: reset:
  5386                           
  5387                           
  5388                           ;mrf49xa.c: 158: for (k = 0; k < sizeof(rfTrcvStatus_t); k++)
  5389  012E  0020               	movlb	0	; select bank0
  5390  012F  01A6               	clrf	Mrf49xaInit@k
  5391  0130                     l2864:	
  5392                           
  5393                           ;mrf49xa.c: 159: {
  5394                           ;mrf49xa.c: 160: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  5395  0130  0826               	movf	Mrf49xaInit@k,w
  5396  0131  3EA0               	addlw	_rfTrcvStatus& (0+255)
  5397  0132  0086               	movwf	6
  5398  0133  304D               	movlw	77
  5399  0134  0187               	clrf	7
  5400  0135  0181               	clrf	1
  5401  0136  0AA6               	incf	Mrf49xaInit@k,f
  5402  0137  0226               	subwf	Mrf49xaInit@k,w
  5403  0138  1C03               	skipc
  5404  0139  2930               	goto	l2864
  5405                           
  5406                           ;mrf49xa.c: 161: }
  5407                           ;mrf49xa.c: 164: PORTCbits.RC6 = 1;
  5408  013A  170E               	bsf	14,6	;volatile
  5409                           
  5410                           ;mrf49xa.c: 165: LATCbits.LATC7 = 0;
  5411  013B  0022               	movlb	2	; select bank2
  5412  013C  138E               	bcf	14,7	;volatile
  5413                           
  5414                           ;mrf49xa.c: 166: PORTBbits.RB7 = 0;
  5415  013D  0020               	movlb	0	; select bank0
  5416  013E  138D               	bcf	13,7	;volatile
  5417                           
  5418                           ;mrf49xa.c: 168: LATCbits.LATC1 = 0;
  5419  013F  0022               	movlb	2	; select bank2
  5420  0140  108E               	bcf	14,1	;volatile
  5421                           
  5422                           ;mrf49xa.c: 169: LATCbits.LATC4 = 1;
  5423  0141  160E               	bsf	14,4	;volatile
  5424                           
  5425                           ;mrf49xa.c: 171: LATAbits.LATA5 = 1;
  5426  0142  168C               	bsf	12,5	;volatile
  5427                           
  5428                           ;mrf49xa.c: 173: Sleepy(64);
  5429  0143  2416  3180         	fcall	PL22	;call to abstracted procedure
  5430  0145  218E  3180         	fcall	_Sleepy
  5431                           
  5432                           ;mrf49xa.c: 174: LATAbits.LATA4 = 0;
  5433  0147  0022               	movlb	2	; select bank2
  5434  0148  120C               	bcf	12,4	;volatile
  5435                           
  5436                           ;mrf49xa.c: 175: Sleepy(64);
  5437  0149  2416  3180         	fcall	PL22	;call to abstracted procedure
  5438  014B  218E  3180         	fcall	_Sleepy
  5439                           
  5440                           ;mrf49xa.c: 176: LATAbits.LATA4 = 1;
  5441  014D  0022               	movlb	2	; select bank2
  5442  014E  160C               	bsf	12,4	;volatile
  5443                           
  5444                           ;mrf49xa.c: 177: Sleepy(64);
  5445  014F  2416  3180         	fcall	PL22	;call to abstracted procedure
  5446  0151  218E               	fcall	_Sleepy
  5447                           
  5448                           ;mrf49xa.c: 179: rfTrcvStatus.state = RECV_IDLE;
  5449  0152  0021               	movlb	1	; select bank1
  5450  0153  01EB               	clrf	(_rfTrcvStatus^(0+128)+75)
  5451  0154  0AEB               	incf	(_rfTrcvStatus^(0+128)+75),f
  5452                           
  5453                           ;mrf49xa.c: 181: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(8); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  5454  0155  0020               	movlb	0	; select bank0
  5455  0156  3070               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  5456  0157  01A6               	clrf	Mrf49xaInit@k
  5457  0158  3187               	movlp	high __stringtab
  5458  0159  000A               	callw
  5459  015A  3180               	pagesel	$	;select current page
  5460  015B  3800               	iorlw	0
  5461  015C  1903               	btfsc	3,2
  5462  015D  2980               	goto	l2894
  5463  015E                     l2884:	
  5464  015E  3526               	lslf	Mrf49xaInit@k,w
  5465  015F  3E74               	addlw	low (_mrfRegset_Init| (0+32768))
  5466  0160  3187               	movlp	high __stringtab
  5467  0161  000A               	callw
  5468  0162  3180               	pagesel	$	;select current page
  5469  0163  3A55               	xorlw	85
  5470  0164  1D03               	skipz
  5471  0165  296C               	goto	l2888
  5472  0166  3008               	movlw	8
  5473  0167  00A0               	movwf	Sleepy@ms
  5474  0168  01A1               	clrf	Sleepy@ms+1
  5475  0169  218E  3180         	fcall	_Sleepy
  5476  016B  2978               	goto	l2890
  5477  016C                     l2888:	
  5478  016C  3526               	lslf	Mrf49xaInit@k,w
  5479  016D  3E75               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  5480  016E  3187               	movlp	high __stringtab
  5481  016F  000A               	callw
  5482  0170  00A1               	movwf	Mrf49TxCmd@val
  5483  0171  3526               	lslf	Mrf49xaInit@k,w
  5484  0172  3E74               	addlw	low (_mrfRegset_Init| (0+32768))
  5485  0173  3187               	movlp	high __stringtab
  5486  0174  000A               	callw
  5487  0175  3180               	pagesel	$	;select current page
  5488  0176  3182  22C1         	fcall	_Mrf49TxCmd
  5489  0178                     l2890:	
  5490  0178  3070               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  5491  0179  0AA6               	incf	Mrf49xaInit@k,f
  5492  017A  3187               	movlp	high __stringtab
  5493  017B  000A               	callw
  5494  017C  3180               	pagesel	$	;select current page
  5495  017D  0226               	subwf	Mrf49xaInit@k,w
  5496  017E  1C03               	skipc
  5497  017F  295E               	goto	l2884
  5498  0180                     l2894:	
  5499                           
  5500                           ;mrf49xa.c: 184: Mrf49xaModeRx();
  5501  0180  2299  3180         	fcall	_Mrf49xaModeRx
  5502                           
  5503                           ;mrf49xa.c: 186: k = 0;
  5504  0182  01A6               	clrf	Mrf49xaInit@k
  5505  0183                     l2906:	
  5506                           ;mrf49xa.c: 187: while(PORTAbits.RA2 == 0)
  5507                           
  5508  0183  0020               	movlb	0	; select bank0
  5509  0184  190C               	btfsc	12,2	;volatile
  5510  0185  0008               	return
  5511                           
  5512                           ;mrf49xa.c: 188: {
  5513                           ;mrf49xa.c: 189: k++;
  5514  0186  0AA6               	incf	Mrf49xaInit@k,f
  5515                           
  5516                           ;mrf49xa.c: 190: if (k == 255)
  5517  0187  0826               	movf	Mrf49xaInit@k,w
  5518  0188  3AFF               	xorlw	255
  5519  0189  1903               	btfsc	3,2
  5520  018A  292E               	goto	l234
  5521                           
  5522                           ;mrf49xa.c: 195: }
  5523                           ;mrf49xa.c: 200: Mrf49xaServe();
  5524                           
  5525                           ;mrf49xa.c: 194: goto reset;
  5526  018B  21A9  3180         	fcall	_Mrf49xaServe
  5527  018D  2983               	goto	l2906
  5528  018E                     __end_of_Mrf49xaInit:	
  5529  018E                     __ptext26:	
  5530 ;; *************** function _Sleepy *****************
  5531 ;; Defined at:
  5532 ;;		line 42 in file "../../../src/node/power.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  ms              2    0[BANK0 ] unsigned int 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  b               1    3[BANK0 ] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;		None               void
  5539 ;; Registers used:
  5540 ;;		wreg, status,2, status,0
  5541 ;; Tracked objects:
  5542 ;;		On entry : 1F/0
  5543 ;;		On exit  : 1F/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5546 ;;      Params:         0       2       0       0
  5547 ;;      Locals:         0       1       0       0
  5548 ;;      Temps:          0       1       0       0
  5549 ;;      Totals:         0       4       0       0
  5550 ;;Total ram usage:        4 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    5
  5553 ;; This function calls:
  5554 ;;		Nothing
  5555 ;; This function is called by:
  5556 ;;		_Mrf49xaInit
  5557 ;;		_Mrf49xaTick
  5558 ;;		_main
  5559 ;;		_PwrRfInit
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _Sleepy
  5565  018E                     _Sleepy:	
  5566                           
  5567                           ;power.c: 44: uint8_t b = 0;
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  5571  018E  01A3               	clrf	Sleepy@b
  5572  018F                     l2750:	
  5573                           ;power.c: 46: while (ms != 0)
  5574                           
  5575  018F  0821               	movf	Sleepy@ms+1,w
  5576  0190  0420               	iorwf	Sleepy@ms,w
  5577  0191  1903               	btfsc	3,2
  5578  0192  0008               	return
  5579                           
  5580                           ;power.c: 47: {
  5581                           ;power.c: 48: if ((ms & 1) != 0)
  5582  0193  1C20               	btfss	Sleepy@ms,0
  5583  0194  29A4               	goto	l2746
  5584                           
  5585                           ;power.c: 49: {
  5586                           ;power.c: 50: WDTCONbits.WDTPS = b;
  5587  0195  0823               	movf	Sleepy@b,w
  5588  0196  00A2               	movwf	??_Sleepy
  5589  0197  0DA2               	rlf	??_Sleepy,f
  5590  0198  0021               	movlb	1	; select bank1
  5591  0199  0817               	movf	23,w	;volatile
  5592  019A  0020               	movlb	0	; select bank0
  5593  019B  0622               	xorwf	??_Sleepy,w
  5594  019C  39C1               	andlw	-63
  5595  019D  0622               	xorwf	??_Sleepy,w
  5596  019E  0021               	movlb	1	; select bank1
  5597  019F  0097               	movwf	23	;volatile
  5598                           
  5599                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  5600  01A0  1417               	bsf	23,0	;volatile
  5601  01A1  0063               	sleep	;# 
  5602                           
  5603                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  5604  01A2  0021               	movlb	1	; select bank1
  5605  01A3  1017               	bcf	23,0	;volatile
  5606  01A4                     l2746:	
  5607                           
  5608                           ;power.c: 56: }
  5609                           ;power.c: 57: ms = ms >> 1;
  5610  01A4  0020               	movlb	0	; select bank0
  5611  01A5  36A1               	lsrf	Sleepy@ms+1,f
  5612  01A6  0CA0               	rrf	Sleepy@ms,f
  5613                           
  5614                           ;power.c: 58: b++;
  5615  01A7  0AA3               	incf	Sleepy@b,f
  5616  01A8  298F               	goto	l2750
  5617  01A9                     __end_of_Sleepy:	
  5618  01A9                     __ptext27:	
  5619 ;; *************** function _Mrf49xaServe *****************
  5620 ;; Defined at:
  5621 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;		None
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  data            1    5[BANK0 ] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      unsigned char 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 1E/0
  5632 ;;		On exit  : 1E/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5635 ;;      Params:         0       0       0       0
  5636 ;;      Locals:         0       1       0       0
  5637 ;;      Temps:          0       1       0       0
  5638 ;;      Totals:         0       2       0       0
  5639 ;;Total ram usage:        2 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    8
  5642 ;; This function calls:
  5643 ;;		_Mrf49RxByte
  5644 ;;		_Mrf49RxSts
  5645 ;;		_Mrf49TxByte
  5646 ;;		_Mrf49xaModeRx
  5647 ;;		_Mrf49xaNeedsReset
  5648 ;; This function is called by:
  5649 ;;		_Mrf49xaInit
  5650 ;;		_Mrf49xaTick
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           
  5655                           ;psect for function _Mrf49xaServe
  5656  01A9                     _Mrf49xaServe:	
  5657                           
  5658                           ;mrf49xa_data.c: 10: uint8_t data;
  5659                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5663  01A9  0021               	movlb	1	; select bank1
  5664  01AA  08EB               	movf	(_rfTrcvStatus^(0+128)+75),f
  5665  01AB  1903               	btfsc	3,2
  5666                           
  5667                           ;mrf49xa_data.c: 13: return 0;
  5668  01AC  3400               	retlw	0
  5669                           
  5670                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  5671  01AD  1BEC               	btfsc	(_rfTrcvStatus^(0+128)+76),7
  5672  01AE  3400               	retlw	0
  5673                           
  5674                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  5675  01AF  23CF  3180         	fcall	_Mrf49RxSts
  5676                           
  5677                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  5678  01B1  0835               	movf	_mrf49Status,w
  5679  01B2  3AFF               	xorlw	255
  5680  01B3  1D03               	skipz
  5681  01B4  29B9               	goto	l444
  5682  01B5  0836               	movf	_mrf49Status+1,w
  5683  01B6  3AFF               	xorlw	255
  5684  01B7  1903               	btfsc	3,2
  5685  01B8  3400               	retlw	0
  5686  01B9                     l444:	
  5687                           ;mrf49xa_data.c: 26: {
  5688                           
  5689                           
  5690                           ;mrf49xa_data.c: 28: }
  5691                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  5692  01B9  1AB5               	btfsc	_mrf49Status,5
  5693  01BA  29C8               	goto	l2650
  5694  01BB  29D7               	goto	l445
  5695  01BC                     l2644:	
  5696                           
  5697                           ;mrf49xa_data.c: 36: case RECV_DATA:
  5698                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  5699  01BC  2296  3180         	fcall	_Mrf49RxByte
  5700  01BE  00A5               	movwf	Mrf49xaServe@data
  5701                           
  5702                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  5703  01BF  2296  3180         	fcall	_Mrf49RxByte
  5704  01C1  00A5               	movwf	Mrf49xaServe@data
  5705                           
  5706                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  5707  01C2  2299  3180         	fcall	_Mrf49xaModeRx
  5708                           
  5709                           ;mrf49xa_data.c: 47: break;
  5710  01C4  29D7               	goto	l445
  5711  01C5                     l2646:	
  5712                           
  5713                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  5714  01C5  22BE  3180         	fcall	_Mrf49xaNeedsReset
  5715                           
  5716                           ;mrf49xa_data.c: 51: break;
  5717  01C7  29D7               	goto	l445
  5718  01C8                     l2650:	
  5719  01C8  0021               	movlb	1	; select bank1
  5720  01C9  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5721                           
  5722                           ; Switch size 1, requested type "space"
  5723                           ; Number of cases is 4, Range of values is 0 to 3
  5724                           ; switch strategies available:
  5725                           ; Name         Instructions Cycles
  5726                           ; simple_byte           13     7 (average)
  5727                           ; direct_byte           14     6 (fixed)
  5728                           ; jumptable            260     6 (fixed)
  5729                           ;	Chosen strategy is simple_byte
  5730  01CA  3A00               	xorlw	0	; case 0
  5731  01CB  1903               	skipnz
  5732  01CC  29C5               	goto	l2646
  5733  01CD  3A01               	xorlw	1	; case 1
  5734  01CE  1903               	skipnz
  5735  01CF  29BC               	goto	l2644
  5736  01D0  3A03               	xorlw	3	; case 2
  5737  01D1  1903               	skipnz
  5738  01D2  29BC               	goto	l2644
  5739  01D3  3A01               	xorlw	1	; case 3
  5740  01D4  1903               	skipnz
  5741  01D5  29D7               	goto	l445
  5742  01D6  29D7               	goto	l445
  5743  01D7                     l445:	
  5744                           
  5745                           ;mrf49xa_data.c: 60: }
  5746                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  5747  01D7  0020               	movlb	0	; select bank0
  5748  01D8  1BB5               	btfsc	_mrf49Status,7
  5749  01D9  2A7D               	goto	l2732
  5750  01DA  2A8C               	goto	l2734
  5751  01DB                     l2654:	
  5752                           
  5753                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  5754  01DB  22BE  3180         	fcall	_Mrf49xaNeedsReset
  5755                           
  5756                           ;mrf49xa_data.c: 76: break;
  5757  01DD  2A8C               	goto	l2734
  5758  01DE                     l2656:	
  5759                           
  5760                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  5761  01DE  2296  3180         	fcall	_Mrf49RxByte
  5762  01E0  00A5               	movwf	Mrf49xaServe@data
  5763                           
  5764                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5765  01E1  1BB6               	btfsc	_mrf49Status+1,7
  5766  01E2  29E6               	goto	l2662
  5767  01E3                     l2660:	
  5768                           
  5769                           ;mrf49xa_data.c: 84: {
  5770                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  5771  01E3  2299  3180         	fcall	_Mrf49xaModeRx
  5772                           
  5773                           ;mrf49xa_data.c: 86: break;
  5774  01E5  2A8C               	goto	l2734
  5775  01E6                     l2662:	
  5776                           
  5777                           ;mrf49xa_data.c: 87: }
  5778                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  5779  01E6  0021               	movlb	1	; select bank1
  5780  01E7  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  5781  01E8  1D03               	skipz
  5782  01E9  29EC               	goto	l2666
  5783  01EA  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  5784  01EB  29F0               	goto	L1
  5785  01EC                     l2666:	
  5786                           
  5787                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  5788  01EC  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  5789  01ED  1D03               	skipz
  5790  01EE  29E3               	goto	l2660
  5791  01EF  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  5792  01F0                     L1:	
  5793  01F0  00A0               	movwf	_rfTrcvStatus^(0+128)
  5794                           
  5795                           ;mrf49xa_data.c: 97: }
  5796                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  5797  01F1  0A20               	incf	_rfTrcvStatus^(0+128),w
  5798  01F2  0086               	movwf	6
  5799  01F3  0187               	clrf	7
  5800                           
  5801                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  5802  01F4  240A  3180         	fcall	PL18	;call to abstracted procedure
  5803  01F6  3E16               	addlw	22
  5804  01F7  0086               	movwf	6
  5805  01F8  0181               	clrf	1
  5806                           
  5807                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  5808  01F9  0820               	movf	_rfTrcvStatus^(0+128),w
  5809  01FA  0086               	movwf	6
  5810  01FB  3004               	movlw	4
  5811  01FC  0081               	movwf	1
  5812                           
  5813                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  5814  01FD  3002               	movlw	2
  5815  01FE  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  5816                           
  5817                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  5818  01FF  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5819  0200  3980               	andlw	-128
  5820  0201  3801               	iorlw	1
  5821  0202  2A2D               	goto	L2
  5822  0203                     l2682:	
  5823                           ;mrf49xa_data.c: 105: break;
  5824                           
  5825                           
  5826                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  5827  0203  2296  3180         	fcall	_Mrf49RxByte
  5828  0205  00A5               	movwf	Mrf49xaServe@data
  5829                           
  5830                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  5831  0206  1BB6               	btfsc	_mrf49Status+1,7
  5832  0207  2A0E               	goto	l2690
  5833                           
  5834                           ;mrf49xa_data.c: 114: {
  5835                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5836  0208  0021               	movlb	1	; select bank1
  5837  0209  0820               	movf	_rfTrcvStatus^(0+128),w
  5838  020A  0086               	movwf	6
  5839  020B  3005               	movlw	5
  5840  020C  0187               	clrf	7
  5841  020D  2A1E               	goto	L3
  5842  020E                     l2690:	
  5843                           
  5844                           ;mrf49xa_data.c: 118: }
  5845                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  5846  020E  0021               	movlb	1	; select bank1
  5847  020F  0A20               	incf	_rfTrcvStatus^(0+128),w
  5848  0210  0086               	movwf	6
  5849  0211  0187               	clrf	7
  5850  0212  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5851  0213  397F               	andlw	127
  5852  0214  0601               	xorwf	1,w
  5853  0215  1D03               	skipz
  5854  0216  2A20               	goto	l2696
  5855                           
  5856                           ;mrf49xa_data.c: 121: {
  5857                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
  5858  0217  0820               	movf	_rfTrcvStatus^(0+128),w
  5859  0218  3E16               	addlw	22
  5860  0219  0086               	movwf	6
  5861                           
  5862                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  5863  021A  240A  3180         	fcall	PL18	;call to abstracted procedure
  5864  021C  0086               	movwf	6
  5865  021D  3005               	movlw	5
  5866  021E                     L3:	
  5867  021E  0081               	movwf	1
  5868  021F  29E3               	goto	l2660
  5869  0220                     l2696:	
  5870                           
  5871                           ;mrf49xa_data.c: 135: else
  5872                           ;mrf49xa_data.c: 136: {
  5873                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  5874  0220  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5875  0221  397F               	andlw	127
  5876  0222  0720               	addwf	_rfTrcvStatus^(0+128),w
  5877  0223  0020               	movlb	0	; select bank0
  5878  0224  00A4               	movwf	??_Mrf49xaServe
  5879  0225  0A24               	incf	??_Mrf49xaServe,w
  5880  0226  0086               	movwf	6
  5881  0227  0187               	clrf	7
  5882  0228  0825               	movf	Mrf49xaServe@data,w
  5883  0229  0081               	movwf	1
  5884  022A  0021               	movlb	1	; select bank1
  5885  022B  23FD  3180         	fcall	PL12	;call to abstracted procedure
  5886  022D                     L2:	
  5887  022D  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  5888  022E  2A8C               	goto	l2734
  5889  022F                     l2700:	
  5890                           
  5891                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
  5892  022F  23FD  3180         	fcall	PL12	;call to abstracted procedure
  5893  0231  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  5894                           
  5895                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5896  0232  397F               	andlw	127
  5897  0233  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  5898  0234  1D03               	skipz
  5899  0235  2A6B               	goto	l2728
  5900                           
  5901                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
  5902  0236  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5903  0237  3980               	andlw	-128
  5904  0238  3831               	iorlw	49
  5905  0239  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  5906  023A  2A6B               	goto	l2728
  5907  023B                     l2704:	
  5908                           
  5909                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
  5910  023B  302D               	movlw	45
  5911  023C  2291  3180         	fcall	_Mrf49TxByte
  5912                           
  5913                           ;mrf49xa_data.c: 152: break;
  5914  023E  2A8C               	goto	l2734
  5915  023F                     l2706:	
  5916                           
  5917                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
  5918  023F  30D4               	movlw	212
  5919  0240  2291  3180         	fcall	_Mrf49TxByte
  5920                           
  5921                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
  5922  0242  307F               	movlw	127
  5923  0243  0021               	movlb	1	; select bank1
  5924  0244  04EC               	iorwf	(_rfTrcvStatus^(0+128)+76),f
  5925                           
  5926                           ;mrf49xa_data.c: 157: break;
  5927  0245  2A8C               	goto	l2734
  5928  0246                     l2710:	
  5929                           
  5930                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5931  0246  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5932  0247  397F               	andlw	127
  5933  0248  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  5934  0249  0086               	movwf	6
  5935  024A  0187               	clrf	7
  5936  024B  0801               	movf	1,w
  5937  024C  2291  3180         	fcall	_Mrf49TxByte
  5938                           
  5939                           ;mrf49xa_data.c: 162: break;
  5940  024E  2A8C               	goto	l2734
  5941  024F                     l2712:	
  5942                           
  5943                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5944  024F  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  5945  0250  2291  3180         	fcall	_Mrf49TxByte
  5946                           
  5947                           ;mrf49xa_data.c: 166: break;
  5948  0252  2A8C               	goto	l2734
  5949  0253                     l2714:	
  5950                           
  5951                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
  5952  0253  3000               	movlw	0
  5953  0254  2291  3180         	fcall	_Mrf49TxByte
  5954                           
  5955                           ;mrf49xa_data.c: 170: break;
  5956  0256  2A8C               	goto	l2734
  5957  0257                     l2716:	
  5958                           
  5959                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
  5960  0257  3000               	movlw	0
  5961  0258  2291  3180         	fcall	_Mrf49TxByte
  5962                           
  5963                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
  5964  025A  2299  3180         	fcall	_Mrf49xaModeRx
  5965                           
  5966                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
  5967  025C  30F0               	movlw	-16
  5968  025D  0021               	movlb	1	; select bank1
  5969  025E  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  5970                           
  5971                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  5972  025F  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  5973  0260  0C89               	rrf	9,f
  5974  0261  0C89               	rrf	9,f
  5975  0262  3903               	andlw	3
  5976  0263  3A01               	xorlw	1
  5977  0264  1D03               	skipz
  5978  0265  2A69               	goto	l2724
  5979                           
  5980                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  5981  0266  3003               	movlw	3
  5982  0267  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  5983  0268  2A8C               	goto	l2734
  5984  0269                     l2724:	
  5985                           
  5986                           ;mrf49xa_data.c: 180: else
  5987                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
  5988  0269  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  5989  026A  2A8C               	goto	l2734
  5990  026B                     l2728:	
  5991  026B  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  5992  026C  397F               	andlw	127
  5993                           
  5994                           ; Switch size 1, requested type "space"
  5995                           ; Number of cases is 5, Range of values is 49 to 101
  5996                           ; switch strategies available:
  5997                           ; Name         Instructions Cycles
  5998                           ; simple_byte           16     9 (average)
  5999                           ; direct_byte          115     9 (fixed)
  6000                           ; jumptable            263     9 (fixed)
  6001                           ;	Chosen strategy is simple_byte
  6002  026D  3A31               	xorlw	49	; case 49
  6003  026E  1903               	skipnz
  6004  026F  2A4F               	goto	l2712
  6005  0270  3A03               	xorlw	3	; case 50
  6006  0271  1903               	skipnz
  6007  0272  2A53               	goto	l2714
  6008  0273  3A01               	xorlw	1	; case 51
  6009  0274  1903               	skipnz
  6010  0275  2A57               	goto	l2716
  6011  0276  3A57               	xorlw	87	; case 100
  6012  0277  1903               	skipnz
  6013  0278  2A3B               	goto	l2704
  6014  0279  3A01               	xorlw	1	; case 101
  6015  027A  1903               	skipnz
  6016  027B  2A3F               	goto	l2706
  6017  027C  2A46               	goto	l2710
  6018  027D                     l2732:	
  6019  027D  0021               	movlb	1	; select bank1
  6020  027E  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  6021                           
  6022                           ; Switch size 1, requested type "space"
  6023                           ; Number of cases is 4, Range of values is 0 to 3
  6024                           ; switch strategies available:
  6025                           ; Name         Instructions Cycles
  6026                           ; simple_byte           13     7 (average)
  6027                           ; direct_byte           14     6 (fixed)
  6028                           ; jumptable            260     6 (fixed)
  6029                           ;	Chosen strategy is simple_byte
  6030  027F  3A00               	xorlw	0	; case 0
  6031  0280  1903               	skipnz
  6032  0281  29DB               	goto	l2654
  6033  0282  3A01               	xorlw	1	; case 1
  6034  0283  1903               	skipnz
  6035  0284  29DE               	goto	l2656
  6036  0285  3A03               	xorlw	3	; case 2
  6037  0286  1903               	skipnz
  6038  0287  2A03               	goto	l2682
  6039  0288  3A01               	xorlw	1	; case 3
  6040  0289  1903               	skipnz
  6041  028A  2A2F               	goto	l2700
  6042  028B  2A8C               	goto	l2734
  6043  028C                     l2734:	
  6044                           
  6045                           ;mrf49xa_data.c: 188: }
  6046                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
  6047  028C  0020               	movlb	0	; select bank0
  6048  028D  0C0C               	rrf	12,w	;volatile
  6049  028E  0C89               	rrf	9,f
  6050  028F  3901               	andlw	1
  6051  0290  0008               	return
  6052  0291                     __end_of_Mrf49xaServe:	
  6053  0291                     __ptext30:	
  6054 ;; *************** function _Mrf49TxByte *****************
  6055 ;; Defined at:
  6056 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  byte            1    wreg     unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  byte            1    3[BANK0 ] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;		None               void
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0, pclath, cstack
  6065 ;; Tracked objects:
  6066 ;;		On entry : 1E/1
  6067 ;;		On exit  : 1F/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6070 ;;      Params:         0       0       0       0
  6071 ;;      Locals:         0       1       0       0
  6072 ;;      Temps:          0       0       0       0
  6073 ;;      Totals:         0       1       0       0
  6074 ;;Total ram usage:        1 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    7
  6077 ;; This function calls:
  6078 ;;		_Mrf49TxCmd
  6079 ;; This function is called by:
  6080 ;;		_Mrf49xaServe
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           
  6085                           ;psect for function _Mrf49TxByte
  6086  0291                     _Mrf49TxByte:	
  6087                           
  6088                           ;incstack = 0
  6089                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6090                           ;Mrf49TxByte@byte stored from wreg
  6091  0291  0020               	movlb	0	; select bank0
  6092  0292  00A3               	movwf	Mrf49TxByte@byte
  6093                           
  6094                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6095  0293  00A1               	movwf	Mrf49TxCmd@val
  6096  0294  30B8               	movlw	184
  6097  0295  2AC1               	ljmp	_Mrf49TxCmd
  6098  0296                     __end_of_Mrf49TxByte:	
  6099  0296                     __ptext33:	
  6100 ;; *************** function _Mrf49RxByte *****************
  6101 ;; Defined at:
  6102 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;		None
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      unsigned char 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0, pclath, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 1E/1
  6113 ;;		On exit  : 1F/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6116 ;;      Params:         0       0       0       0
  6117 ;;      Locals:         0       0       0       0
  6118 ;;      Temps:          0       0       0       0
  6119 ;;      Totals:         0       0       0       0
  6120 ;;Total ram usage:        0 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    7
  6123 ;; This function calls:
  6124 ;;		_Mrf49RxCmd
  6125 ;; This function is called by:
  6126 ;;		_Mrf49xaServe
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           
  6131                           ;psect for function _Mrf49RxByte
  6132  0296                     _Mrf49RxByte:	
  6133                           
  6134                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6135                           
  6136                           ;incstack = 0
  6137                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6138  0296  30B0               	movlw	176
  6139  0297  318F  2F57         	ljmp	_Mrf49RxCmd
  6140  0299                     __end_of_Mrf49RxByte:	
  6141  0299                     __ptext29:	
  6142 ;; *************** function _Mrf49xaModeRx *****************
  6143 ;; Defined at:
  6144 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;		None
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;  k               1    3[BANK0 ] unsigned char 
  6149 ;; Return value:  Size  Location     Type
  6150 ;;		None               void
  6151 ;; Registers used:
  6152 ;;		wreg, status,2, status,0, pclath, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 1E/1
  6155 ;;		On exit  : 1F/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6158 ;;      Params:         0       0       0       0
  6159 ;;      Locals:         0       1       0       0
  6160 ;;      Temps:          0       0       0       0
  6161 ;;      Totals:         0       1       0       0
  6162 ;;Total ram usage:        1 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    7
  6165 ;; This function calls:
  6166 ;;		_Mrf49TxCmd
  6167 ;; This function is called by:
  6168 ;;		_Mrf49xaReboot
  6169 ;;		_Mrf49xaInit
  6170 ;;		_Mrf49xaServe
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function _Mrf49xaModeRx
  6176  0299                     _Mrf49xaModeRx:	
  6177  0299                     l2460:	
  6178                           ;incstack = 0
  6179                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6180                           
  6181                           
  6182                           ;mrf49xa.c: 101: UI08_t k;
  6183                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  6184  0299  0020               	movlb	0	; select bank0
  6185  029A  3071               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6186  029B  01A3               	clrf	Mrf49xaModeRx@k
  6187  029C  3187               	movlp	high __stringtab
  6188  029D  000A               	callw
  6189  029E  3180               	pagesel	$	;select current page
  6190  029F  3800               	iorlw	0
  6191  02A0  1903               	btfsc	3,2
  6192  02A1  2AB6               	goto	l211
  6193  02A2                     l2466:	
  6194  02A2  3523               	lslf	Mrf49xaModeRx@k,w
  6195  02A3  3E95               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6196  02A4  3187               	movlp	high __stringtab
  6197  02A5  000A               	callw
  6198  02A6  00A1               	movwf	Mrf49TxCmd@val
  6199  02A7  3523               	lslf	Mrf49xaModeRx@k,w
  6200  02A8  3E94               	addlw	low (_mrfRegset_Rx| (0+32768))
  6201  02A9  3187               	movlp	high __stringtab
  6202  02AA  000A               	callw
  6203  02AB  3180               	pagesel	$	;select current page
  6204  02AC  3182  22C1         	fcall	_Mrf49TxCmd
  6205  02AE  3071               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6206  02AF  0AA3               	incf	Mrf49xaModeRx@k,f
  6207  02B0  3187               	movlp	high __stringtab
  6208  02B1  000A               	callw
  6209  02B2  3180               	pagesel	$	;select current page
  6210  02B3  0223               	subwf	Mrf49xaModeRx@k,w
  6211  02B4  1C03               	skipc
  6212  02B5  2AA2               	goto	l2466
  6213  02B6                     l211:	
  6214                           
  6215                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  6216  02B6  0021               	movlb	1	; select bank1
  6217  02B7  3080               	movlw	-128
  6218  02B8  01EB               	clrf	(_rfTrcvStatus^(0+128)+75)
  6219  02B9  0AEB               	incf	(_rfTrcvStatus^(0+128)+75),f
  6220                           
  6221                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  6222  02BA  05EC               	andwf	(_rfTrcvStatus^(0+128)+76),f
  6223                           
  6224                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  6225  02BB  0020               	movlb	0	; select bank0
  6226  02BC  13B5               	bcf	_mrf49Status,7
  6227  02BD  0008               	return
  6228  02BE                     __end_of_Mrf49xaModeRx:	
  6229  02BE                     __ptext28:	
  6230 ;; *************** function _Mrf49xaNeedsReset *****************
  6231 ;; Defined at:
  6232 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;		None
  6237 ;; Return value:  Size  Location     Type
  6238 ;;		None               void
  6239 ;; Registers used:
  6240 ;;		None
  6241 ;; Tracked objects:
  6242 ;;		On entry : 1E/1
  6243 ;;		On exit  : 1F/1
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6246 ;;      Params:         0       0       0       0
  6247 ;;      Locals:         0       0       0       0
  6248 ;;      Temps:          0       0       0       0
  6249 ;;      Totals:         0       0       0       0
  6250 ;;Total ram usage:        0 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    5
  6253 ;; This function calls:
  6254 ;;		Nothing
  6255 ;; This function is called by:
  6256 ;;		_Mrf49xaServe
  6257 ;;		_main
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           
  6262                           ;psect for function _Mrf49xaNeedsReset
  6263  02BE                     _Mrf49xaNeedsReset:	
  6264                           
  6265                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in _Mrf49xaNeedsReset: []
  6269  02BE  0021               	movlb	1	; select bank1
  6270  02BF  17EC               	bsf	(_rfTrcvStatus^(0+128)+76),7
  6271  02C0  0008               	return
  6272  02C1                     __end_of_Mrf49xaNeedsReset:	
  6273  02C1                     __ptext31:	
  6274 ;; *************** function _Mrf49TxCmd *****************
  6275 ;; Defined at:
  6276 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  cmd             1    wreg     unsigned char 
  6279 ;;  val             1    1[BANK0 ] unsigned char 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  cmd             1    2[BANK0 ] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;		None               void
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0, pclath, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 1F/0
  6288 ;;		On exit  : 1F/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6291 ;;      Params:         0       1       0       0
  6292 ;;      Locals:         0       1       0       0
  6293 ;;      Temps:          0       0       0       0
  6294 ;;      Totals:         0       2       0       0
  6295 ;;Total ram usage:        2 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    6
  6298 ;; This function calls:
  6299 ;;		_Mrf49SpiTx
  6300 ;; This function is called by:
  6301 ;;		_Mrf49xaModeRx
  6302 ;;		_Mrf49xaModeTx
  6303 ;;		_Mrf49xaModeSleep
  6304 ;;		_Mrf49xaInit
  6305 ;;		_Mrf49TxByte
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _Mrf49TxCmd
  6311  02C1                     _Mrf49TxCmd:	
  6312                           
  6313                           ;incstack = 0
  6314                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6315                           ;Mrf49TxCmd@cmd stored from wreg
  6316  02C1  00A2               	movwf	Mrf49TxCmd@cmd
  6317                           
  6318                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6319  02C2  130E               	bcf	14,6	;volatile
  6320                           
  6321                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6322  02C3  0822               	movf	Mrf49TxCmd@cmd,w
  6323  02C4  318F  2761  3180   	fcall	_Mrf49SpiTx
  6324                           
  6325                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6326  02C7  0821               	movf	Mrf49TxCmd@val,w
  6327  02C8  318F  2761         	fcall	_Mrf49SpiTx
  6328                           
  6329                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6330  02CA  170E               	bsf	14,6	;volatile
  6331  02CB  0008               	return
  6332  02CC                     __end_of_Mrf49TxCmd:	
  6333  02CC                     __ptext48:	
  6334 ;; *************** function _SoftI2cStop *****************
  6335 ;; Defined at:
  6336 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;		None
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;		None
  6341 ;; Return value:  Size  Location     Type
  6342 ;;		None               void
  6343 ;; Registers used:
  6344 ;;		wreg, status,2, status,0, pclath, cstack
  6345 ;; Tracked objects:
  6346 ;;		On entry : 0/1
  6347 ;;		On exit  : 0/0
  6348 ;;		Unchanged: 0/0
  6349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6350 ;;      Params:         0       0       0       0
  6351 ;;      Locals:         0       0       0       0
  6352 ;;      Temps:          0       0       0       0
  6353 ;;      Totals:         0       0       0       0
  6354 ;;Total ram usage:        0 bytes
  6355 ;; Hardware stack levels used:    1
  6356 ;; Hardware stack levels required when called:    6
  6357 ;; This function calls:
  6358 ;;		_SoftI2cNop
  6359 ;; This function is called by:
  6360 ;;		_SoftI2cInit
  6361 ;;		_Mcp9800Start
  6362 ;;		_Mcp9800Read
  6363 ;;		_eepromRxBytes
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           
  6368                           ;psect for function _SoftI2cStop
  6369  02CC                     _SoftI2cStop:	
  6370  02CC                     l2366:	
  6371                           ;incstack = 0
  6372                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  6373                           
  6374                           
  6375                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  6376  02CC  0021               	movlb	1	; select bank1
  6377  02CD  120D               	bcf	13,4	;volatile
  6378                           
  6379                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  6380  02CE  0022               	movlb	2	; select bank2
  6381  02CF  120D               	bcf	13,4	;volatile
  6382                           
  6383                           ;softI2c.c: 78: SoftI2cNop();
  6384  02D0  23A9  3180         	fcall	_SoftI2cNop
  6385                           
  6386                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  6387  02D2  0022               	movlb	2	; select bank2
  6388  02D3  170D               	bsf	13,6	;volatile
  6389                           
  6390                           ;softI2c.c: 81: SoftI2cNop();
  6391  02D4  23A9  3180         	fcall	_SoftI2cNop
  6392                           
  6393                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  6394  02D6  0022               	movlb	2	; select bank2
  6395  02D7  160D               	bsf	13,4	;volatile
  6396                           
  6397                           ;softI2c.c: 83: SoftI2cNop();
  6398  02D8  23A9  3180         	fcall	_SoftI2cNop
  6399                           
  6400                           ;softI2c.c: 84: SoftI2cNop();
  6401  02DA  2BA9               	ljmp	l2264
  6402  02DB                     __end_of_SoftI2cStop:	
  6403  02DB                     __ptext44:	
  6404 ;; *************** function _Mcp9800Read *****************
  6405 ;; Defined at:
  6406 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;  tempL           1    7[BANK0 ] unsigned char 
  6411 ;;  tempH           1    6[BANK0 ] unsigned char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  2    4[BANK0 ] unsigned int 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0, pclath, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 1F/0
  6418 ;;		On exit  : 1F/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6421 ;;      Params:         0       2       0       0
  6422 ;;      Locals:         0       2       0       0
  6423 ;;      Temps:          0       0       0       0
  6424 ;;      Totals:         0       4       0       0
  6425 ;;Total ram usage:        4 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    7
  6428 ;; This function calls:
  6429 ;;		_SoftI2cRxByte
  6430 ;;		_SoftI2cStart
  6431 ;;		_SoftI2cStop
  6432 ;;		_SoftI2cTxByte
  6433 ;; This function is called by:
  6434 ;;		_main
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _Mcp9800Read
  6440  02DB                     _Mcp9800Read:	
  6441                           
  6442                           ;mcp9800.c: 21: SoftI2cStart();
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  6446  02DB  23B0  3180         	fcall	_SoftI2cStart
  6447                           
  6448                           ;mcp9800.c: 25: SoftI2cTxByte(0b10010001);
  6449  02DD  3091               	movlw	145
  6450  02DE  2342  3180         	fcall	_SoftI2cTxByte
  6451                           
  6452                           ;mcp9800.c: 26: UI08_t tempH = SoftI2cRxByte(1);
  6453  02E0  3001               	movlw	1
  6454  02E1  2370  3180         	fcall	_SoftI2cRxByte
  6455  02E3  00A6               	movwf	Mcp9800Read@tempH
  6456                           
  6457                           ;mcp9800.c: 27: UI08_t tempL = SoftI2cRxByte(0);
  6458  02E4  3000               	movlw	0
  6459  02E5  2370  3180         	fcall	_SoftI2cRxByte
  6460  02E7  00A7               	movwf	Mcp9800Read@tempL
  6461                           
  6462                           ;mcp9800.c: 28: SoftI2cStop();
  6463  02E8  22CC               	fcall	_SoftI2cStop
  6464                           
  6465                           ;mcp9800.c: 30: return (tempH << 8) | tempL;
  6466  02E9  0020               	movlb	0	; select bank0
  6467  02EA  0826               	movf	Mcp9800Read@tempH,w
  6468  02EB  00A5               	movwf	?_Mcp9800Read+1
  6469  02EC  01A4               	clrf	?_Mcp9800Read
  6470  02ED  0827               	movf	Mcp9800Read@tempL,w
  6471  02EE  04A4               	iorwf	?_Mcp9800Read,f
  6472  02EF  0008               	return
  6473  02F0                     __end_of_Mcp9800Read:	
  6474  02F0                     __ptext51:	
  6475 ;; *************** function _SoftI2cRepeatedStart *****************
  6476 ;; Defined at:
  6477 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;		None
  6482 ;; Return value:  Size  Location     Type
  6483 ;;		None               void
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0, pclath, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6491 ;;      Params:         0       0       0       0
  6492 ;;      Locals:         0       0       0       0
  6493 ;;      Temps:          0       0       0       0
  6494 ;;      Totals:         0       0       0       0
  6495 ;;Total ram usage:        0 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    6
  6498 ;; This function calls:
  6499 ;;		_SoftI2cNop
  6500 ;; This function is called by:
  6501 ;;		_eepromRxBytes
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           
  6506                           ;psect for function _SoftI2cRepeatedStart
  6507  02F0                     _SoftI2cRepeatedStart:	
  6508                           
  6509                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  6513  02F0  0021               	movlb	1	; select bank1
  6514  02F1  120D               	bcf	13,4	;volatile
  6515                           
  6516                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  6517  02F2  0022               	movlb	2	; select bank2
  6518  02F3  130D               	bcf	13,6	;volatile
  6519                           
  6520                           ;softI2c.c: 57: SoftI2cNop();
  6521  02F4  23A9  3180         	fcall	_SoftI2cNop
  6522                           
  6523                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  6524  02F6  0022               	movlb	2	; select bank2
  6525  02F7  160D               	bsf	13,4	;volatile
  6526                           
  6527                           ;softI2c.c: 60: SoftI2cNop();
  6528  02F8  23A9  3180         	fcall	_SoftI2cNop
  6529                           
  6530                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  6531  02FA  0022               	movlb	2	; select bank2
  6532  02FB  170D               	bsf	13,6	;volatile
  6533                           
  6534                           ;softI2c.c: 63: SoftI2cNop();
  6535  02FC  23A9  3180         	fcall	_SoftI2cNop
  6536                           
  6537                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  6538  02FE  0022               	movlb	2	; select bank2
  6539  02FF  120D               	bcf	13,4	;volatile
  6540                           
  6541                           ;softI2c.c: 66: SoftI2cNop();
  6542  0300  23A9  3180         	fcall	_SoftI2cNop
  6543                           
  6544                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  6545  0302  0022               	movlb	2	; select bank2
  6546  0303  130D               	bcf	13,6	;volatile
  6547                           
  6548                           ;softI2c.c: 69: SoftI2cNop();
  6549  0304  2BA9               	ljmp	l2264
  6550  0305                     __end_of_SoftI2cRepeatedStart:	
  6551  0305                     __ptext43:	
  6552 ;; *************** function _Mcp9800Start *****************
  6553 ;; Defined at:
  6554 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  resolution      1    wreg     enum E4252
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  resolution      1    4[BANK0 ] enum E4252
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 1F/2
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6568 ;;      Params:         0       0       0       0
  6569 ;;      Locals:         0       1       0       0
  6570 ;;      Temps:          0       0       0       0
  6571 ;;      Totals:         0       1       0       0
  6572 ;;Total ram usage:        1 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    7
  6575 ;; This function calls:
  6576 ;;		_SoftI2cStart
  6577 ;;		_SoftI2cStop
  6578 ;;		_SoftI2cTxByte
  6579 ;; This function is called by:
  6580 ;;		_main
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           
  6585                           ;psect for function _Mcp9800Start
  6586  0305                     _Mcp9800Start:	
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  6590                           ;Mcp9800Start@resolution stored from wreg
  6591  0305  0020               	movlb	0	; select bank0
  6592  0306  00A4               	movwf	Mcp9800Start@resolution
  6593                           
  6594                           ;mcp9800.c: 6: SoftI2cStart();
  6595  0307  23B0  3180         	fcall	_SoftI2cStart
  6596                           
  6597                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  6598  0309  3090               	movlw	144
  6599  030A  2342  3180         	fcall	_SoftI2cTxByte
  6600                           
  6601                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  6602  030C  3001               	movlw	1
  6603  030D  2342  3180         	fcall	_SoftI2cTxByte
  6604                           
  6605                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  6606  030F  0020               	movlb	0	; select bank0
  6607  0310  0824               	movf	Mcp9800Start@resolution,w
  6608  0311  2342  3180         	fcall	_SoftI2cTxByte
  6609                           
  6610                           ;mcp9800.c: 10: SoftI2cStop();
  6611  0313  22CC  3180         	fcall	_SoftI2cStop
  6612                           
  6613                           ;mcp9800.c: 12: SoftI2cStart();
  6614  0315  23B0  3180         	fcall	_SoftI2cStart
  6615                           
  6616                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  6617  0317  3090               	movlw	144
  6618  0318  2342  3180         	fcall	_SoftI2cTxByte
  6619                           
  6620                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  6621  031A  3000               	movlw	0
  6622  031B  2342  3180         	fcall	_SoftI2cTxByte
  6623                           
  6624                           ;mcp9800.c: 15: SoftI2cStop();
  6625  031D  2ACC               	ljmp	l2366
  6626  031E                     __end_of_Mcp9800Start:	
  6627  031E                     __ptext46:	
  6628 ;; *************** function _eepromRxBytes *****************
  6629 ;; Defined at:
  6630 ;;		line 4 in file "../../../src/devices/24aa64.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;  address         2    4[BANK0 ] unsigned int 
  6633 ;;  data            1    6[BANK0 ] PTR unsigned char 
  6634 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  6635 ;;		 -> NULL(0), cfgRam(3), 
  6636 ;;  size            1    7[BANK0 ] unsigned char 
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;		None
  6639 ;; Return value:  Size  Location     Type
  6640 ;;		None               void
  6641 ;; Registers used:
  6642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 1F/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6648 ;;      Params:         0       4       0       0
  6649 ;;      Locals:         0       0       0       0
  6650 ;;      Temps:          0       0       0       0
  6651 ;;      Totals:         0       4       0       0
  6652 ;;Total ram usage:        4 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    7
  6655 ;; This function calls:
  6656 ;;		_SoftI2cRepeatedStart
  6657 ;;		_SoftI2cRxByte
  6658 ;;		_SoftI2cStart
  6659 ;;		_SoftI2cStop
  6660 ;;		_SoftI2cTxByte
  6661 ;; This function is called by:
  6662 ;;		_handleFwCmd
  6663 ;;		_CfgInit
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _eepromRxBytes
  6669  031E                     _eepromRxBytes:	
  6670  031E                     l2552:	
  6671                           ;incstack = 0
  6672                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6673                           
  6674                           
  6675                           ;24aa64.c: 7: SoftI2cStart();
  6676  031E  23B0  3180         	fcall	_SoftI2cStart
  6677                           
  6678                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  6679  0320  30A0               	movlw	160
  6680  0321  2342  3180         	fcall	_SoftI2cTxByte
  6681                           
  6682                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  6683  0323  0020               	movlb	0	; select bank0
  6684  0324  0825               	movf	eepromRxBytes@address+1,w
  6685  0325  2342  3180         	fcall	_SoftI2cTxByte
  6686                           
  6687                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  6688  0327  0020               	movlb	0	; select bank0
  6689  0328  0824               	movf	eepromRxBytes@address,w
  6690  0329  2342  3180         	fcall	_SoftI2cTxByte
  6691                           
  6692                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  6693  032B  22F0  3180         	fcall	_SoftI2cRepeatedStart
  6694                           
  6695                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  6696  032D  30A1               	movlw	161
  6697  032E  2342  3180         	fcall	_SoftI2cTxByte
  6698  0330                     l2560:	
  6699                           ;24aa64.c: 15: while (size != 0)
  6700                           
  6701  0330  0020               	movlb	0	; select bank0
  6702  0331  08A7               	movf	eepromRxBytes@size,f
  6703  0332  1903               	btfsc	3,2
  6704  0333  2B41               	goto	l2562
  6705                           
  6706                           ;24aa64.c: 16: {
  6707                           ;24aa64.c: 17: size--;
  6708  0334  03A7               	decf	eepromRxBytes@size,f
  6709                           
  6710                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  6711  0335  0826               	movf	eepromRxBytes@data,w
  6712  0336  0086               	movwf	6
  6713  0337  3000               	movlw	0
  6714  0338  0187               	clrf	7
  6715  0339  08A7               	movf	eepromRxBytes@size,f
  6716  033A  1D03               	skipz
  6717  033B  3001               	movlw	1
  6718  033C  2370  3180         	fcall	_SoftI2cRxByte
  6719  033E  0081               	movwf	1
  6720                           
  6721                           ;24aa64.c: 21: data++;
  6722  033F  0AA6               	incf	eepromRxBytes@data,f
  6723  0340  2B30               	goto	l2560
  6724  0341                     l2562:	
  6725                           
  6726                           ;24aa64.c: 22: }
  6727                           ;24aa64.c: 23: SoftI2cStop();
  6728  0341  2ACC               	ljmp	l2366
  6729  0342                     __end_of_eepromRxBytes:	
  6730  0342                     __ptext47:	
  6731 ;; *************** function _SoftI2cTxByte *****************
  6732 ;; Defined at:
  6733 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  data            1    wreg     unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  data            1    2[BANK0 ] unsigned char 
  6738 ;;  i               1    3[BANK0 ] unsigned char 
  6739 ;;  ack             1    0        unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      unsigned char 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0, pclath, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/1
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6749 ;;      Params:         0       0       0       0
  6750 ;;      Locals:         0       3       0       0
  6751 ;;      Temps:          0       0       0       0
  6752 ;;      Totals:         0       3       0       0
  6753 ;;Total ram usage:        3 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    6
  6756 ;; This function calls:
  6757 ;;		_SoftI2cNop
  6758 ;; This function is called by:
  6759 ;;		_SoftI2cInit
  6760 ;;		_Mcp9800Start
  6761 ;;		_Mcp9800Read
  6762 ;;		_eepromRxBytes
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766                           
  6767                           ;psect for function _SoftI2cTxByte
  6768  0342                     _SoftI2cTxByte:	
  6769                           
  6770                           ;incstack = 0
  6771                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  6772                           ;SoftI2cTxByte@data stored from wreg
  6773  0342  0020               	movlb	0	; select bank0
  6774  0343  00A2               	movwf	SoftI2cTxByte@data
  6775                           
  6776                           ;softI2c.c: 89: UI08_t i;
  6777                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  6778  0344  3080               	movlw	128
  6779  0345  00A3               	movwf	SoftI2cTxByte@i
  6780  0346                     l32:	
  6781                           
  6782                           ;softI2c.c: 92: {
  6783                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  6784  0346  0022               	movlb	2	; select bank2
  6785  0347  130D               	bcf	13,6	;volatile
  6786                           
  6787                           ;softI2c.c: 94: SoftI2cNop();
  6788  0348  23A9  3180         	fcall	_SoftI2cNop
  6789                           
  6790                           ;softI2c.c: 96: if(data & i)
  6791  034A  0020               	movlb	0	; select bank0
  6792  034B  0822               	movf	SoftI2cTxByte@data,w
  6793  034C  0523               	andwf	SoftI2cTxByte@i,w
  6794  034D  1903               	btfsc	3,2
  6795  034E  2B52               	goto	l34
  6796                           
  6797                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  6798  034F  0022               	movlb	2	; select bank2
  6799  0350  160D               	bsf	13,4	;volatile
  6800  0351  2B54               	goto	l35
  6801  0352                     l34:	
  6802                           
  6803                           ;softI2c.c: 98: else
  6804                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  6805  0352  0022               	movlb	2	; select bank2
  6806  0353  120D               	bcf	13,4	;volatile
  6807  0354                     l35:	
  6808                           
  6809                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  6810  0354  0021               	movlb	1	; select bank1
  6811  0355  120D               	bcf	13,4	;volatile
  6812                           
  6813                           ;softI2c.c: 102: SoftI2cNop();
  6814  0356  23A9  3180         	fcall	_SoftI2cNop
  6815                           
  6816                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  6817  0358  0022               	movlb	2	; select bank2
  6818  0359  170D               	bsf	13,6	;volatile
  6819                           
  6820                           ;softI2c.c: 105: SoftI2cNop();
  6821  035A  23A9  3180         	fcall	_SoftI2cNop
  6822  035C  0020               	movlb	0	; select bank0
  6823  035D  36A3               	lsrf	SoftI2cTxByte@i,f
  6824  035E  08A3               	movf	SoftI2cTxByte@i,f
  6825  035F  1D03               	skipz
  6826  0360  2B46               	goto	l32
  6827                           
  6828                           ;softI2c.c: 109: }
  6829                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  6830  0361  0022               	movlb	2	; select bank2
  6831  0362  130D               	bcf	13,6	;volatile
  6832                           
  6833                           ;softI2c.c: 113: SoftI2cNop();
  6834  0363  23A9  3180         	fcall	_SoftI2cNop
  6835                           
  6836                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  6837  0365  0021               	movlb	1	; select bank1
  6838  0366  160D               	bsf	13,4	;volatile
  6839                           
  6840                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  6841  0367  0022               	movlb	2	; select bank2
  6842  0368  170D               	bsf	13,6	;volatile
  6843                           
  6844                           ;softI2c.c: 118: SoftI2cNop();
  6845  0369  23A9  3180         	fcall	_SoftI2cNop
  6846  036B  0020               	movlb	0	; select bank0
  6847  036C  080D               	movf	13,w	;volatile
  6848                           
  6849                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  6850  036D  0022               	movlb	2	; select bank2
  6851  036E  130D               	bcf	13,6	;volatile
  6852                           
  6853                           ;softI2c.c: 123: SoftI2cNop();
  6854  036F  2BA9               	ljmp	l2264
  6855  0370                     __end_of_SoftI2cTxByte:	
  6856  0370                     __ptext50:	
  6857 ;; *************** function _SoftI2cRxByte *****************
  6858 ;; Defined at:
  6859 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;  ack             1    wreg     unsigned char 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  ack             1    1[BANK0 ] unsigned char 
  6864 ;;  i               1    3[BANK0 ] unsigned char 
  6865 ;;  data            1    2[BANK0 ] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      unsigned char 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0, pclath, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 1F/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6875 ;;      Params:         0       0       0       0
  6876 ;;      Locals:         0       3       0       0
  6877 ;;      Temps:          0       0       0       0
  6878 ;;      Totals:         0       3       0       0
  6879 ;;Total ram usage:        3 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    6
  6882 ;; This function calls:
  6883 ;;		_SoftI2cNop
  6884 ;; This function is called by:
  6885 ;;		_Mcp9800Read
  6886 ;;		_eepromRxBytes
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function _SoftI2cRxByte
  6892  0370                     _SoftI2cRxByte:	
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  6896                           ;SoftI2cRxByte@ack stored from wreg
  6897  0370  0020               	movlb	0	; select bank0
  6898  0371  00A1               	movwf	SoftI2cRxByte@ack
  6899                           
  6900                           ;softI2c.c: 131: UI08_t data=0x00;
  6901  0372  01A2               	clrf	SoftI2cRxByte@data
  6902                           
  6903                           ;softI2c.c: 132: UI08_t i;
  6904                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  6905  0373  0022               	movlb	2	; select bank2
  6906  0374  130D               	bcf	13,6	;volatile
  6907                           
  6908                           ;softI2c.c: 135: SoftI2cNop();
  6909  0375  23A9  3180         	fcall	_SoftI2cNop
  6910                           
  6911                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  6912  0377  0021               	movlb	1	; select bank1
  6913  0378  160D               	bsf	13,4	;volatile
  6914                           
  6915                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  6916  0379  0022               	movlb	2	; select bank2
  6917  037A  160D               	bsf	13,4	;volatile
  6918                           
  6919                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  6920  037B  3080               	movlw	128
  6921  037C  0020               	movlb	0	; select bank0
  6922  037D  00A3               	movwf	SoftI2cRxByte@i
  6923  037E                     l39:	
  6924                           
  6925                           ;softI2c.c: 140: {
  6926                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  6927  037E  0022               	movlb	2	; select bank2
  6928  037F  130D               	bcf	13,6	;volatile
  6929                           
  6930                           ;softI2c.c: 142: SoftI2cNop();
  6931  0380  23A9  3180         	fcall	_SoftI2cNop
  6932                           
  6933                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  6934  0382  0022               	movlb	2	; select bank2
  6935  0383  170D               	bsf	13,6	;volatile
  6936                           
  6937                           ;softI2c.c: 144: SoftI2cNop();
  6938  0384  23A9  3180         	fcall	_SoftI2cNop
  6939                           
  6940                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  6941  0386  0020               	movlb	0	; select bank0
  6942                           
  6943                           ;softI2c.c: 150: data |= i;
  6944  0387  0823               	movf	SoftI2cRxByte@i,w
  6945  0388  1A0D               	btfsc	13,4	;volatile
  6946  0389  04A2               	iorwf	SoftI2cRxByte@data,f
  6947  038A  36A3               	lsrf	SoftI2cRxByte@i,f
  6948  038B  08A3               	movf	SoftI2cRxByte@i,f
  6949  038C  1D03               	skipz
  6950  038D  2B7E               	goto	l39
  6951                           
  6952                           ;softI2c.c: 152: }
  6953                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  6954  038E  0022               	movlb	2	; select bank2
  6955  038F  130D               	bcf	13,6	;volatile
  6956                           
  6957                           ;softI2c.c: 155: SoftI2cNop();
  6958  0390  23A9  3180         	fcall	_SoftI2cNop
  6959                           
  6960                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  6961  0392  0021               	movlb	1	; select bank1
  6962  0393  120D               	bcf	13,4	;volatile
  6963                           
  6964                           ;softI2c.c: 158: if(ack)
  6965  0394  0020               	movlb	0	; select bank0
  6966  0395  0821               	movf	SoftI2cRxByte@ack,w
  6967  0396  1903               	btfsc	3,2
  6968  0397  2B9B               	goto	l42
  6969                           
  6970                           ;softI2c.c: 159: {
  6971                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  6972  0398  0022               	movlb	2	; select bank2
  6973  0399  120D               	bcf	13,4	;volatile
  6974                           
  6975                           ;softI2c.c: 161: }
  6976  039A  2B9D               	goto	l2422
  6977  039B                     l42:	
  6978                           
  6979                           ;softI2c.c: 162: else
  6980                           ;softI2c.c: 163: {
  6981                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  6982  039B  0022               	movlb	2	; select bank2
  6983  039C  160D               	bsf	13,4	;volatile
  6984  039D                     l2422:	
  6985                           
  6986                           ;softI2c.c: 165: }
  6987                           ;softI2c.c: 166: SoftI2cNop();
  6988  039D  23A9  3180         	fcall	_SoftI2cNop
  6989                           
  6990                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  6991  039F  0022               	movlb	2	; select bank2
  6992  03A0  170D               	bsf	13,6	;volatile
  6993                           
  6994                           ;softI2c.c: 169: SoftI2cNop();
  6995  03A1  23A9  3180         	fcall	_SoftI2cNop
  6996                           
  6997                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  6998  03A3  0022               	movlb	2	; select bank2
  6999  03A4  130D               	bcf	13,6	;volatile
  7000                           
  7001                           ;softI2c.c: 172: SoftI2cNop();
  7002  03A5  23A9               	fcall	_SoftI2cNop
  7003                           
  7004                           ;softI2c.c: 174: return data;
  7005  03A6  0020               	movlb	0	; select bank0
  7006  03A7  0822               	movf	SoftI2cRxByte@data,w
  7007  03A8  0008               	return
  7008  03A9                     __end_of_SoftI2cRxByte:	
  7009  03A9                     __ptext52:	
  7010 ;; *************** function _SoftI2cNop *****************
  7011 ;; Defined at:
  7012 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/2
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7026 ;;      Params:         0       0       0       0
  7027 ;;      Locals:         0       0       0       0
  7028 ;;      Temps:          0       1       0       0
  7029 ;;      Totals:         0       1       0       0
  7030 ;;Total ram usage:        1 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    5
  7033 ;; This function calls:
  7034 ;;		Nothing
  7035 ;; This function is called by:
  7036 ;;		_SoftI2cStart
  7037 ;;		_SoftI2cRepeatedStart
  7038 ;;		_SoftI2cStop
  7039 ;;		_SoftI2cTxByte
  7040 ;;		_SoftI2cRxByte
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           
  7045                           ;psect for function _SoftI2cNop
  7046  03A9                     _SoftI2cNop:	
  7047  03A9                     l2264:	
  7048                           ;incstack = 0
  7049                           ; Regs used in _SoftI2cNop: [wreg]
  7050                           
  7051                           
  7052                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  7053  03A9  300A               	movlw	10
  7054  03AA  0020               	movlb	0	; select bank0
  7055  03AB  00A0               	movwf	??_SoftI2cNop
  7056  03AC                     u2377:	
  7057  03AC  0BA0               	decfsz	??_SoftI2cNop,f
  7058  03AD  2BAC               	goto	u2377
  7059  03AE  0000               	nop
  7060  03AF  0008               	return
  7061  03B0                     __end_of_SoftI2cNop:	
  7062  03B0                     __ptext49:	
  7063 ;; *************** function _SoftI2cStart *****************
  7064 ;; Defined at:
  7065 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;		None
  7070 ;; Return value:  Size  Location     Type
  7071 ;;		None               void
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/1
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7079 ;;      Params:         0       0       0       0
  7080 ;;      Locals:         0       0       0       0
  7081 ;;      Temps:          0       0       0       0
  7082 ;;      Totals:         0       0       0       0
  7083 ;;Total ram usage:        0 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    6
  7086 ;; This function calls:
  7087 ;;		_SoftI2cNop
  7088 ;; This function is called by:
  7089 ;;		_SoftI2cInit
  7090 ;;		_Mcp9800Start
  7091 ;;		_Mcp9800Read
  7092 ;;		_eepromRxBytes
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function _SoftI2cStart
  7098  03B0                     _SoftI2cStart:	
  7099                           
  7100                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  7104  03B0  0021               	movlb	1	; select bank1
  7105  03B1  120D               	bcf	13,4	;volatile
  7106                           
  7107                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  7108  03B2  0022               	movlb	2	; select bank2
  7109  03B3  170D               	bsf	13,6	;volatile
  7110                           
  7111                           ;softI2c.c: 43: SoftI2cNop();
  7112  03B4  23A9  3180         	fcall	_SoftI2cNop
  7113                           
  7114                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  7115  03B6  0022               	movlb	2	; select bank2
  7116  03B7  120D               	bcf	13,4	;volatile
  7117                           
  7118                           ;softI2c.c: 46: SoftI2cNop();
  7119  03B8  23A9  3180         	fcall	_SoftI2cNop
  7120                           
  7121                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  7122  03BA  0022               	movlb	2	; select bank2
  7123  03BB  130D               	bcf	13,6	;volatile
  7124                           
  7125                           ;softI2c.c: 48: SoftI2cNop();
  7126  03BC  2BA9               	ljmp	l2264
  7127  03BD                     __end_of_SoftI2cStart:	
  7128  03BD                     __ptext13:	
  7129 ;; *************** function _PwrI2cSleep *****************
  7130 ;; Defined at:
  7131 ;;		line 73 in file "../../../src/node/power.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;		None               void
  7138 ;; Registers used:
  7139 ;;		None
  7140 ;; Tracked objects:
  7141 ;;		On entry : 1F/2
  7142 ;;		On exit  : 1F/1
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7145 ;;      Params:         0       0       0       0
  7146 ;;      Locals:         0       0       0       0
  7147 ;;      Temps:          0       0       0       0
  7148 ;;      Totals:         0       0       0       0
  7149 ;;Total ram usage:        0 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    5
  7152 ;; This function calls:
  7153 ;;		Nothing
  7154 ;; This function is called by:
  7155 ;;		_main
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           
  7160                           ;psect for function _PwrI2cSleep
  7161  03BD                     _PwrI2cSleep:	
  7162                           
  7163                           ;power.c: 75: LATBbits.LATB6 = 1;
  7164                           
  7165                           ;incstack = 0
  7166                           ; Regs used in _PwrI2cSleep: []
  7167                           
  7168                           ;power.c: 76: LATBbits.LATB4 = 1;
  7169                           
  7170                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  7171                           
  7172                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  7173  03BD  2410               	fcall	PL20	;call to abstracted procedure
  7174  03BE  0008               	return
  7175  03BF                     __end_of_PwrI2cSleep:	
  7176  03BF                     __ptext4:	
  7177 ;; *************** function _PwrSensorSleep *****************
  7178 ;; Defined at:
  7179 ;;		line 139 in file "../../../src/node/power.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;		None               void
  7186 ;; Registers used:
  7187 ;;		None
  7188 ;; Tracked objects:
  7189 ;;		On entry : 1E/1
  7190 ;;		On exit  : 1F/2
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7193 ;;      Params:         0       0       0       0
  7194 ;;      Locals:         0       0       0       0
  7195 ;;      Temps:          0       0       0       0
  7196 ;;      Totals:         0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    5
  7200 ;; This function calls:
  7201 ;;		Nothing
  7202 ;; This function is called by:
  7203 ;;		_main
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           
  7208                           ;psect for function _PwrSensorSleep
  7209  03BF                     _PwrSensorSleep:	
  7210                           
  7211                           ;power.c: 141: LATCbits.LATC2 = 0;
  7212                           
  7213                           ;incstack = 0
  7214                           ; Regs used in _PwrSensorSleep: []
  7215  03BF  0022               	movlb	2	; select bank2
  7216  03C0  110E               	bcf	14,2	;volatile
  7217  03C1  0008               	return
  7218  03C2                     __end_of_PwrSensorSleep:	
  7219  03C2                     __ptext45:	
  7220 ;; *************** function _CfgInit *****************
  7221 ;; Defined at:
  7222 ;;		line 33 in file "../../../src/node/config.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  2  571[COMMON] int 
  7229 ;; Registers used:
  7230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 1F/1
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7236 ;;      Params:         0       0       0       0
  7237 ;;      Locals:         0       0       0       0
  7238 ;;      Temps:          0       0       0       0
  7239 ;;      Totals:         0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    8
  7243 ;; This function calls:
  7244 ;;		_eepromRxBytes
  7245 ;; This function is called by:
  7246 ;;		_main
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           
  7251                           ;psect for function _CfgInit
  7252  03C2                     _CfgInit:	
  7253                           
  7254                           ;config.c: 35: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  7255                           
  7256                           ;incstack = 0
  7257                           ; Regs used in _CfgInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7258  03C2  0020               	movlb	0	; select bank0
  7259  03C3  3032               	movlw	_cfgRam& (0+255)
  7260  03C4  01A4               	clrf	eepromRxBytes@address
  7261  03C5  01A5               	clrf	eepromRxBytes@address+1
  7262  03C6  00A6               	movwf	eepromRxBytes@data
  7263  03C7  3003               	movlw	3
  7264  03C8  00A7               	movwf	eepromRxBytes@size
  7265  03C9  2B1E               	ljmp	l2552
  7266  03CA                     __end_of_CfgInit:	
  7267  03CA                     __ptext41:	
  7268 ;; *************** function _Mrf49xaFreePacket *****************
  7269 ;; Defined at:
  7270 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  7273 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  7276 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(77), 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;		None               void
  7279 ;; Registers used:
  7280 ;;		wreg, fsr1l, fsr1h, status,2
  7281 ;; Tracked objects:
  7282 ;;		On entry : 1F/0
  7283 ;;		On exit  : 1F/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7286 ;;      Params:         0       0       0       0
  7287 ;;      Locals:         0       1       0       0
  7288 ;;      Temps:          0       0       0       0
  7289 ;;      Totals:         0       1       0       0
  7290 ;;Total ram usage:        1 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    5
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_Mrf49xaTick
  7297 ;;		_HandlePacket
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           
  7302                           ;psect for function _Mrf49xaFreePacket
  7303  03CA                     _Mrf49xaFreePacket:	
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  7307                           ;Mrf49xaFreePacket@packet stored from wreg
  7308  03CA  00A0               	movwf	Mrf49xaFreePacket@packet
  7309                           
  7310                           ;mrf49xa_packet.c: 92: packet->state = PKT_FREE;
  7311  03CB  0086               	movwf	6
  7312  03CC  0187               	clrf	7
  7313  03CD  0181               	clrf	1
  7314  03CE  0008               	return
  7315  03CF                     __end_of_Mrf49xaFreePacket:	
  7316  03CF                     __ptext32:	
  7317 ;; *************** function _Mrf49RxSts *****************
  7318 ;; Defined at:
  7319 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;		None
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;		None
  7324 ;; Return value:  Size  Location     Type
  7325 ;;		None               void
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, pclath, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 1F/1
  7330 ;;		On exit  : 1F/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7333 ;;      Params:         0       0       0       0
  7334 ;;      Locals:         0       0       0       0
  7335 ;;      Temps:          0       0       0       0
  7336 ;;      Totals:         0       0       0       0
  7337 ;;Total ram usage:        0 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    6
  7340 ;; This function calls:
  7341 ;;		_Mrf49SpiRx
  7342 ;; This function is called by:
  7343 ;;		_Mrf49xaServe
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function _Mrf49RxSts
  7349  03CF                     _Mrf49RxSts:	
  7350                           
  7351                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7352                           
  7353                           ;incstack = 0
  7354                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7355  03CF  120B               	bcf	11,4	;volatile
  7356                           
  7357                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  7358  03D0  0020               	movlb	0	; select bank0
  7359  03D1  130E               	bcf	14,6	;volatile
  7360                           
  7361                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7362  03D2  318F  27BC  3180   	fcall	_Mrf49SpiRx
  7363  03D5  00B5               	movwf	_mrf49Status
  7364                           
  7365                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7366  03D6  318F  27BC         	fcall	_Mrf49SpiRx
  7367  03D8  00B6               	movwf	_mrf49Status+1
  7368                           
  7369                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  7370  03D9  170E               	bsf	14,6	;volatile
  7371                           
  7372                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7373  03DA  160B               	bsf	11,4	;volatile
  7374  03DB  0008               	return
  7375  03DC                     __end_of_Mrf49RxSts:	
  7376  03DC                     __ptext23:	
  7377 ;; *************** function _Mrf49xaPacketPending *****************
  7378 ;; Defined at:
  7379 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;		None
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;		None
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      unsigned char 
  7386 ;; Registers used:
  7387 ;;		wreg
  7388 ;; Tracked objects:
  7389 ;;		On entry : 1F/1
  7390 ;;		On exit  : 1F/1
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7393 ;;      Params:         0       0       0       0
  7394 ;;      Locals:         0       0       0       0
  7395 ;;      Temps:          0       0       0       0
  7396 ;;      Totals:         0       0       0       0
  7397 ;;Total ram usage:        0 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    5
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_Mrf49xaTick
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           
  7408                           ;psect for function _Mrf49xaPacketPending
  7409  03DC                     _Mrf49xaPacketPending:	
  7410                           
  7411                           ;mrf49xa_packet.c: 8: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  7412                           ;mrf49xa_packet.c: 9: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  7413                           
  7414                           ;incstack = 0
  7415                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  7416  03DC  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  7417  03DD  3A05               	xorlw	5
  7418  03DE  1903               	skipnz
  7419  03DF  3401               	retlw	1
  7420  03E0  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  7421  03E1  3A05               	xorlw	5
  7422  03E2  1903               	btfsc	3,2
  7423                           
  7424                           ;mrf49xa_packet.c: 10: return 1;
  7425  03E3  3401               	retlw	1
  7426                           
  7427                           ;mrf49xa_packet.c: 11: else
  7428                           ;mrf49xa_packet.c: 12: return 0;
  7429  03E4  3400               	retlw	0
  7430  03E5                     __end_of_Mrf49xaPacketPending:	
  7431  03E5                     __ptext20:	
  7432 ;; *************** function _PwrAdcInit *****************
  7433 ;; Defined at:
  7434 ;;		line 150 in file "../../../src/node/power.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;		None               void
  7441 ;; Registers used:
  7442 ;;		status,2
  7443 ;; Tracked objects:
  7444 ;;		On entry : 17F/1
  7445 ;;		On exit  : 17F/1
  7446 ;;		Unchanged: 160/0
  7447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7448 ;;      Params:         0       0       0       0
  7449 ;;      Locals:         0       0       0       0
  7450 ;;      Temps:          0       0       0       0
  7451 ;;      Totals:         0       0       0       0
  7452 ;;Total ram usage:        0 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    5
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		_main
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           
  7463                           ;psect for function _PwrAdcInit
  7464  03E5                     _PwrAdcInit:	
  7465                           
  7466                           ;power.c: 152: ANSELA = 0;
  7467                           
  7468                           ;incstack = 0
  7469                           ; Regs used in _PwrAdcInit: [status,2]
  7470  03E5  0023               	movlb	3	; select bank3
  7471  03E6  018C               	clrf	12	;volatile
  7472                           
  7473                           ;power.c: 153: ANSELB = 0;
  7474  03E7  018D               	clrf	13	;volatile
  7475                           
  7476                           ;power.c: 154: ANSELC = 0;
  7477  03E8  018E               	clrf	14	;volatile
  7478                           
  7479                           ;power.c: 156: PORTCbits.RC0 = 1;
  7480  03E9  0020               	movlb	0	; select bank0
  7481  03EA  140E               	bsf	14,0	;volatile
  7482                           
  7483                           ;power.c: 157: TRISCbits.TRISC0 = 0;
  7484  03EB  0021               	movlb	1	; select bank1
  7485  03EC  100E               	bcf	14,0	;volatile
  7486  03ED  0008               	return
  7487  03EE                     __end_of_PwrAdcInit:	
  7488  03EE                     __ptext12:	
  7489 ;; *************** function _PwrI2cWake *****************
  7490 ;; Defined at:
  7491 ;;		line 82 in file "../../../src/node/power.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;		None
  7496 ;; Return value:  Size  Location     Type
  7497 ;;		None               void
  7498 ;; Registers used:
  7499 ;;		None
  7500 ;; Tracked objects:
  7501 ;;		On entry : 1F/2
  7502 ;;		On exit  : 1F/2
  7503 ;;		Unchanged: 1F/0
  7504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7505 ;;      Params:         0       0       0       0
  7506 ;;      Locals:         0       0       0       0
  7507 ;;      Temps:          0       0       0       0
  7508 ;;      Totals:         0       0       0       0
  7509 ;;Total ram usage:        0 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    5
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_main
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function _PwrI2cWake
  7521  03EE                     _PwrI2cWake:	
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in _PwrI2cWake: []
  7525  03EE  0008               	return
  7526  03EF                     __end_of_PwrI2cWake:	
  7527  03EF                     PL10:	
  7528  03EF  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  7529  03F0  390F               	andlw	15
  7530  03F1  0020               	movlb	0	; select bank0
  7531  03F2  00AB               	movwf	??_Mrf49xaTick
  7532  03F3  0AAB               	incf	??_Mrf49xaTick,f
  7533  03F4  0021               	movlb	1	; select bank1
  7534  03F5  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  7535  03F6  0020               	movlb	0	; select bank0
  7536  03F7  062B               	xorwf	??_Mrf49xaTick,w
  7537  03F8  39F0               	andlw	-16
  7538  03F9  062B               	xorwf	??_Mrf49xaTick,w
  7539  03FA  0021               	movlb	1	; select bank1
  7540  03FB  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  7541  03FC  0008               	return
  7542  03FD                     __end_ofPL10:	
  7543  03FD                     PL12:	
  7544  03FD  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7545  03FE  397F               	andlw	127
  7546  03FF  0020               	movlb	0	; select bank0
  7547  0400  00A4               	movwf	??_Mrf49xaServe
  7548  0401  0AA4               	incf	??_Mrf49xaServe,f
  7549  0402  0021               	movlb	1	; select bank1
  7550  0403  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7551  0404  0020               	movlb	0	; select bank0
  7552  0405  0624               	xorwf	??_Mrf49xaServe,w
  7553  0406  3980               	andlw	-128
  7554  0407  0624               	xorwf	??_Mrf49xaServe,w
  7555  0408  0021               	movlb	1	; select bank1
  7556  0409  0008               	return
  7557  040A                     __end_ofPL12:	
  7558  040A                     PL18:	
  7559  040A  0020               	movlb	0	; select bank0
  7560  040B  0825               	movf	Mrf49xaServe@data,w
  7561  040C  0081               	movwf	1
  7562  040D  0021               	movlb	1	; select bank1
  7563  040E  0820               	movf	_rfTrcvStatus^(0+128),w
  7564  040F  0008               	return
  7565  0410                     __end_ofPL18:	
  7566  0410                     PL20:	
  7567  0410  170D               	bsf	13,6	;volatile
  7568  0411  160D               	bsf	13,4	;volatile
  7569  0412  0021               	movlb	1	; select bank1
  7570  0413  130D               	bcf	13,6	;volatile
  7571  0414  120D               	bcf	13,4	;volatile
  7572  0415  0008               	return
  7573  0416                     __end_ofPL20:	
  7574  0416                     PL22:	
  7575  0416  3040               	movlw	64
  7576  0417  0020               	movlb	0	; select bank0
  7577  0418  00A0               	movwf	Sleepy@ms
  7578  0419  01A1               	clrf	Sleepy@ms+1
  7579  041A  0008               	return
  7580  041B                     __end_ofPL22:	
  7581  041B                     __ptext22:	
  7582 ;; *************** function _Mrf49xaRxPacket *****************
  7583 ;; Defined at:
  7584 ;;		line 95 in file "../../../src/devices/mrf49xa_packet.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;		None
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;		None
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7591 ;; Registers used:
  7592 ;;		wreg
  7593 ;; Tracked objects:
  7594 ;;		On entry : 1F/1
  7595 ;;		On exit  : 1F/1
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7598 ;;      Params:         0       0       0       0
  7599 ;;      Locals:         0       0       0       0
  7600 ;;      Temps:          0       0       0       0
  7601 ;;      Totals:         0       0       0       0
  7602 ;;Total ram usage:        0 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    5
  7605 ;; This function calls:
  7606 ;;		Nothing
  7607 ;; This function is called by:
  7608 ;;		_Mrf49xaTick
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           
  7613                           ;psect for function _Mrf49xaRxPacket
  7614  041B                     _Mrf49xaRxPacket:	
  7615                           
  7616                           ;mrf49xa_packet.c: 97: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  7617                           
  7618                           ;incstack = 0
  7619                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  7620  041B  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  7621  041C  3A05               	xorlw	5
  7622  041D  1D03               	skipz
  7623  041E  2C22               	goto	l2928
  7624                           
  7625                           ;mrf49xa_packet.c: 98: {
  7626                           ;mrf49xa_packet.c: 99: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  7627  041F  3006               	movlw	6
  7628  0420  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  7629                           
  7630                           ;mrf49xa_packet.c: 100: return &(rfTrcvStatus.rxPacket[0]);
  7631  0421  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  7632  0422                     l2928:	
  7633                           
  7634                           ;mrf49xa_packet.c: 101: }
  7635                           ;mrf49xa_packet.c: 103: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  7636  0422  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  7637  0423  3A05               	xorlw	5
  7638  0424  1D03               	skipz
  7639  0425  3400               	retlw	0
  7640                           
  7641                           ;mrf49xa_packet.c: 104: {
  7642                           ;mrf49xa_packet.c: 105: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  7643  0426  3006               	movlw	6
  7644  0427  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  7645                           
  7646                           ;mrf49xa_packet.c: 106: return &(rfTrcvStatus.rxPacket[1]);
  7647  0428  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  7648  0429                     __end_of_Mrf49xaRxPacket:	
  7649                           ;mrf49xa_packet.c: 107: }
  7650                           ;mrf49xa_packet.c: 109: return (0);
  7651                           
  7652  0429                     __ptext6:	
  7653 ;; *************** function _PwrRfWake *****************
  7654 ;; Defined at:
  7655 ;;		line 125 in file "../../../src/node/power.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;		None
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, status,2, status,0, pclath, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 1F/1
  7666 ;;		On exit  : 1F/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7669 ;;      Params:         0       0       0       0
  7670 ;;      Locals:         0       0       0       0
  7671 ;;      Temps:          0       0       0       0
  7672 ;;      Totals:         0       0       0       0
  7673 ;;Total ram usage:        0 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    9
  7676 ;; This function calls:
  7677 ;;		_Mrf49xaReboot
  7678 ;; This function is called by:
  7679 ;;		_main
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _PwrRfWake
  7685  0429                     _PwrRfWake:	
  7686                           
  7687                           ;power.c: 127: INTCONbits.INTE = 0;
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  7691  0429  120B               	bcf	11,4	;volatile
  7692                           
  7693                           ;power.c: 128: Mrf49xaReboot();
  7694  042A  2A99               	ljmp	l2460
  7695  042B                     __end_of_PwrRfWake:	
  7696  042B                     __ptext7:	
  7697 ;; *************** function _Mrf49xaReboot *****************
  7698 ;; Defined at:
  7699 ;;		line 139 in file "../../../src/devices/mrf49xa.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;		None
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;		None
  7704 ;; Return value:  Size  Location     Type
  7705 ;;		None               void
  7706 ;; Registers used:
  7707 ;;		wreg, status,2, status,0, pclath, cstack
  7708 ;; Tracked objects:
  7709 ;;		On entry : 1F/1
  7710 ;;		On exit  : 1F/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7713 ;;      Params:         0       0       0       0
  7714 ;;      Locals:         0       0       0       0
  7715 ;;      Temps:          0       0       0       0
  7716 ;;      Totals:         0       0       0       0
  7717 ;;Total ram usage:        0 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    8
  7720 ;; This function calls:
  7721 ;;		_Mrf49xaModeRx
  7722 ;; This function is called by:
  7723 ;;		_PwrRfWake
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           
  7728                           ;psect for function _Mrf49xaReboot
  7729  042B                     _Mrf49xaReboot:	
  7730                           
  7731                           ;mrf49xa.c: 141: Mrf49xaModeRx();
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  7735  042B  2A99               	ljmp	l2460
  7736  042C                     __end_of_Mrf49xaReboot:	
  7737  042C                     __ptext5:	
  7738 ;; *************** function _PwrSensorInit *****************
  7739 ;; Defined at:
  7740 ;;		line 132 in file "../../../src/node/power.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;		None
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;		None
  7745 ;; Return value:  Size  Location     Type
  7746 ;;		None               void
  7747 ;; Registers used:
  7748 ;;		None
  7749 ;; Tracked objects:
  7750 ;;		On entry : 17F/1
  7751 ;;		On exit  : 17F/2
  7752 ;;		Unchanged: 160/0
  7753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7754 ;;      Params:         0       0       0       0
  7755 ;;      Locals:         0       0       0       0
  7756 ;;      Temps:          0       0       0       0
  7757 ;;      Totals:         0       0       0       0
  7758 ;;Total ram usage:        0 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    5
  7761 ;; This function calls:
  7762 ;;		Nothing
  7763 ;; This function is called by:
  7764 ;;		_main
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           
  7769                           ;psect for function _PwrSensorInit
  7770  042C                     _PwrSensorInit:	
  7771                           
  7772                           ;power.c: 134: TRISCbits.TRISC2 = 0;
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in _PwrSensorInit: []
  7776  042C  110E               	bcf	14,2	;volatile
  7777                           
  7778                           ;power.c: 136: LATCbits.LATC2 = 0;
  7779  042D  0022               	movlb	2	; select bank2
  7780  042E  110E               	bcf	14,2	;volatile
  7781  042F  0008               	return
  7782  0430                     __end_of_PwrSensorInit:	
  7783                           
  7784                           	psect	text16
  7785  07E5                     __ptext16:	
  7786 ;; *************** function _PwrAdcWake *****************
  7787 ;; Defined at:
  7788 ;;		line 169 in file "../../../src/node/power.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;		None               void
  7795 ;; Registers used:
  7796 ;;		wreg, status,2, status,0, pclath, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/2
  7799 ;;		On exit  : 1F/1
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7802 ;;      Params:         0       0       0       0
  7803 ;;      Locals:         0       0       0       0
  7804 ;;      Temps:          0       0       0       0
  7805 ;;      Totals:         0       0       0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    6
  7809 ;; This function calls:
  7810 ;;		_AdcInit
  7811 ;; This function is called by:
  7812 ;;		_main
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function _PwrAdcWake
  7818  07E5                     _PwrAdcWake:	
  7819                           
  7820                           ;power.c: 171: ANSELC = (1<<0);
  7821                           
  7822                           ;incstack = 0
  7823                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7824  07E5  3001               	movlw	1
  7825  07E6  0023               	movlb	3	; select bank3
  7826  07E7  008E               	movwf	14	;volatile
  7827                           
  7828                           ;power.c: 172: TRISCbits.TRISC0 = 1;
  7829  07E8  0021               	movlb	1	; select bank1
  7830  07E9  140E               	bsf	14,0	;volatile
  7831                           
  7832                           ;power.c: 174: AdcInit();
  7833  07EA  2FEB               	ljmp	l2814
  7834  07EB                     __end_of_PwrAdcWake:	
  7835  07EB                     __ptext17:	
  7836 ;; *************** function _AdcInit *****************
  7837 ;; Defined at:
  7838 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;		None               void
  7845 ;; Registers used:
  7846 ;;		wreg, status,2
  7847 ;; Tracked objects:
  7848 ;;		On entry : 1F/1
  7849 ;;		On exit  : 1F/1
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7852 ;;      Params:         0       0       0       0
  7853 ;;      Locals:         0       0       0       0
  7854 ;;      Temps:          0       0       0       0
  7855 ;;      Totals:         0       0       0       0
  7856 ;;Total ram usage:        0 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    5
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_PwrAdcWake
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           
  7867                           ;psect for function _AdcInit
  7868  07EB                     _AdcInit:	
  7869  07EB                     l2814:	
  7870                           ;incstack = 0
  7871                           ; Regs used in _AdcInit: [wreg+status,2]
  7872                           
  7873                           
  7874                           ;adc16.c: 6: FVRCON = 0b11100001;
  7875  07EB  30E1               	movlw	225
  7876  07EC  0022               	movlb	2	; select bank2
  7877  07ED  0097               	movwf	23	;volatile
  7878                           
  7879                           ;adc16.c: 8: ADCON2 = 0b00000000;
  7880  07EE  0021               	movlb	1	; select bank1
  7881  07EF  019F               	clrf	31	;volatile
  7882                           
  7883                           ;adc16.c: 9: ADCON1 = 0b11110000;
  7884  07F0  30F0               	movlw	240
  7885  07F1  009E               	movwf	30	;volatile
  7886                           
  7887                           ;adc16.c: 10: ADCON0 = 0b00000000;
  7888  07F2  019D               	clrf	29	;volatile
  7889                           
  7890                           ;adc16.c: 12: ADCON0 = 0b00010011;
  7891  07F3  3013               	movlw	19
  7892  07F4  009D               	movwf	29	;volatile
  7893  07F5  0008               	return
  7894  07F6                     __end_of_AdcInit:	
  7895                           
  7896                           	psect	text18
  7897  0ED6                     __ptext18:	
  7898 ;; *************** function _PwrAdcSleep *****************
  7899 ;; Defined at:
  7900 ;;		line 160 in file "../../../src/node/power.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;		None
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;		None               void
  7907 ;; Registers used:
  7908 ;;		status,2, status,0, pclath, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/1
  7911 ;;		On exit  : 1F/1
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7914 ;;      Params:         0       0       0       0
  7915 ;;      Locals:         0       0       0       0
  7916 ;;      Temps:          0       0       0       0
  7917 ;;      Totals:         0       0       0       0
  7918 ;;Total ram usage:        0 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    6
  7921 ;; This function calls:
  7922 ;;		_AdcDeinit
  7923 ;; This function is called by:
  7924 ;;		_main
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           
  7929                           ;psect for function _PwrAdcSleep
  7930  0ED6                     _PwrAdcSleep:	
  7931                           
  7932                           ;power.c: 162: ANSELC = 0;
  7933                           
  7934                           ;incstack = 0
  7935                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7936  0ED6  0023               	movlb	3	; select bank3
  7937  0ED7  018E               	clrf	14	;volatile
  7938                           
  7939                           ;power.c: 163: PORTCbits.RC0 = 1;
  7940  0ED8  0020               	movlb	0	; select bank0
  7941  0ED9  140E               	bsf	14,0	;volatile
  7942                           
  7943                           ;power.c: 164: TRISCbits.TRISC0 = 0;
  7944  0EDA  0021               	movlb	1	; select bank1
  7945  0EDB  100E               	bcf	14,0	;volatile
  7946                           
  7947                           ;power.c: 166: AdcDeinit();
  7948  0EDC  2EDD               	ljmp	l2822
  7949  0EDD                     __end_of_PwrAdcSleep:	
  7950  0EDD                     __ptext19:	
  7951 ;; *************** function _AdcDeinit *****************
  7952 ;; Defined at:
  7953 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;		None
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;		None
  7958 ;; Return value:  Size  Location     Type
  7959 ;;		None               void
  7960 ;; Registers used:
  7961 ;;		status,2
  7962 ;; Tracked objects:
  7963 ;;		On entry : 1F/1
  7964 ;;		On exit  : 1F/1
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7967 ;;      Params:         0       0       0       0
  7968 ;;      Locals:         0       0       0       0
  7969 ;;      Temps:          0       0       0       0
  7970 ;;      Totals:         0       0       0       0
  7971 ;;Total ram usage:        0 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    5
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_PwrAdcSleep
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function _AdcDeinit
  7983  0EDD                     _AdcDeinit:	
  7984  0EDD                     l2822:	
  7985                           ;incstack = 0
  7986                           ; Regs used in _AdcDeinit: [status,2]
  7987                           
  7988                           
  7989                           ;adc16.c: 17: FVRCON = 0;
  7990  0EDD  0022               	movlb	2	; select bank2
  7991  0EDE  0197               	clrf	23	;volatile
  7992                           
  7993                           ;adc16.c: 19: ADCON2 = 0;
  7994  0EDF  0021               	movlb	1	; select bank1
  7995  0EE0  019F               	clrf	31	;volatile
  7996                           
  7997                           ;adc16.c: 20: ADCON1 = 0;
  7998  0EE1  019E               	clrf	30	;volatile
  7999                           
  8000                           ;adc16.c: 21: ADCON0 = 0;
  8001  0EE2  019D               	clrf	29	;volatile
  8002  0EE3  0008               	return
  8003  0EE4                     __end_of_AdcDeinit:	
  8004                           
  8005                           	psect	text24
  8006  0EE4                     __ptext24:	
  8007 ;; *************** function _Mrf49xaModeTx *****************
  8008 ;; Defined at:
  8009 ;;		line 111 in file "../../../src/devices/mrf49xa.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  k               1    3[BANK0 ] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;		None               void
  8016 ;; Registers used:
  8017 ;;		wreg, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 1F/0
  8020 ;;		On exit  : 1F/1
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8023 ;;      Params:         0       0       0       0
  8024 ;;      Locals:         0       1       0       0
  8025 ;;      Temps:          0       0       0       0
  8026 ;;      Totals:         0       1       0       0
  8027 ;;Total ram usage:        1 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    7
  8030 ;; This function calls:
  8031 ;;		_Mrf49TxCmd
  8032 ;; This function is called by:
  8033 ;;		_Mrf49xaTick
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           
  8038                           ;psect for function _Mrf49xaModeTx
  8039  0EE4                     _Mrf49xaModeTx:	
  8040  0EE4  3073               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8041                           
  8042                           ;mrf49xa.c: 113: UI08_t k;
  8043                           ;mrf49xa.c: 114: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  8047  0EE5  01A3               	clrf	Mrf49xaModeTx@k
  8048  0EE6  3187               	movlp	high __stringtab
  8049  0EE7  000A               	callw
  8050  0EE8  318E               	pagesel	$	;select current page
  8051  0EE9  3800               	iorlw	0
  8052  0EEA  1903               	btfsc	3,2
  8053  0EEB  2F00               	goto	l2850
  8054  0EEC                     l2844:	
  8055  0EEC  3523               	lslf	Mrf49xaModeTx@k,w
  8056  0EED  3EA1               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  8057  0EEE  3187               	movlp	high __stringtab
  8058  0EEF  000A               	callw
  8059  0EF0  00A1               	movwf	Mrf49TxCmd@val
  8060  0EF1  3523               	lslf	Mrf49xaModeTx@k,w
  8061  0EF2  3EA0               	addlw	low (_mrfRegset_Tx| (0+32768))
  8062  0EF3  3187               	movlp	high __stringtab
  8063  0EF4  000A               	callw
  8064  0EF5  3182  22C1  318E   	fcall	_Mrf49TxCmd
  8065  0EF8  3073               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8066  0EF9  0AA3               	incf	Mrf49xaModeTx@k,f
  8067  0EFA  3187               	movlp	high __stringtab
  8068  0EFB  000A               	callw
  8069  0EFC  318E               	pagesel	$	;select current page
  8070  0EFD  0223               	subwf	Mrf49xaModeTx@k,w
  8071  0EFE  1C03               	skipc
  8072  0EFF  2EEC               	goto	l2844
  8073  0F00                     l2850:	
  8074                           
  8075                           ;mrf49xa.c: 117: rfTrcvStatus.state = TX_PACKET;
  8076  0F00  3003               	movlw	3
  8077  0F01  0021               	movlb	1	; select bank1
  8078  0F02  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  8079                           
  8080                           ;mrf49xa.c: 118: rfTrcvStatus.hwByte = 99;
  8081  0F03  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  8082  0F04  3980               	andlw	-128
  8083  0F05  3863               	iorlw	99
  8084  0F06  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  8085  0F07  0008               	return
  8086  0F08                     __end_of_Mrf49xaModeTx:	
  8087                           
  8088                           	psect	text34
  8089  0F57                     __ptext34:	
  8090 ;; *************** function _Mrf49RxCmd *****************
  8091 ;; Defined at:
  8092 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  cmd             1    wreg     unsigned char 
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;  cmd             1    1[BANK0 ] unsigned char 
  8097 ;;  val             1    2[BANK0 ] unsigned char 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      unsigned char 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0, pclath, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 1E/1
  8104 ;;		On exit  : 1F/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8107 ;;      Params:         0       0       0       0
  8108 ;;      Locals:         0       2       0       0
  8109 ;;      Temps:          0       0       0       0
  8110 ;;      Totals:         0       2       0       0
  8111 ;;Total ram usage:        2 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    6
  8114 ;; This function calls:
  8115 ;;		_Mrf49SpiRx
  8116 ;;		_Mrf49SpiTx
  8117 ;; This function is called by:
  8118 ;;		_Mrf49RxByte
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _Mrf49RxCmd
  8124  0F57                     _Mrf49RxCmd:	
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8128                           ;Mrf49RxCmd@cmd stored from wreg
  8129  0F57  0020               	movlb	0	; select bank0
  8130  0F58  00A1               	movwf	Mrf49RxCmd@cmd
  8131                           
  8132                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8133  0F59  130E               	bcf	14,6	;volatile
  8134                           
  8135                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8136  0F5A  0821               	movf	Mrf49RxCmd@cmd,w
  8137  0F5B  2761  318F         	fcall	_Mrf49SpiTx
  8138                           
  8139                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8140  0F5D  27BC               	fcall	_Mrf49SpiRx
  8141  0F5E  00A2               	movwf	Mrf49RxCmd@val
  8142                           
  8143                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8144  0F5F  170E               	bsf	14,6	;volatile
  8145                           
  8146                           ;mrf49xa_cmd.c: 27: return val;
  8147  0F60  0008               	return
  8148  0F61                     __end_of_Mrf49RxCmd:	
  8149  0F61                     __ptext35:	
  8150 ;; *************** function _Mrf49SpiTx *****************
  8151 ;; Defined at:
  8152 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  byte            1    wreg     unsigned char 
  8155 ;; Auto vars:     Size  Location     Type
  8156 ;;  byte            1    0[BANK0 ] unsigned char 
  8157 ;; Return value:  Size  Location     Type
  8158 ;;		None               void
  8159 ;; Registers used:
  8160 ;;		wreg
  8161 ;; Tracked objects:
  8162 ;;		On entry : 1F/0
  8163 ;;		On exit  : 1F/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8166 ;;      Params:         0       0       0       0
  8167 ;;      Locals:         0       1       0       0
  8168 ;;      Temps:          0       0       0       0
  8169 ;;      Totals:         0       1       0       0
  8170 ;;Total ram usage:        1 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    5
  8173 ;; This function calls:
  8174 ;;		Nothing
  8175 ;; This function is called by:
  8176 ;;		_Mrf49TxCmd
  8177 ;;		_Mrf49RxCmd
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _Mrf49SpiTx
  8183  0F61                     _Mrf49SpiTx:	
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in _Mrf49SpiTx: [wreg]
  8187                           ;Mrf49SpiTx@byte stored from wreg
  8188  0F61  00A0               	movwf	Mrf49SpiTx@byte
  8189                           
  8190                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  8191  0F62  1FA0               	btfss	Mrf49SpiTx@byte,7
  8192  0F63  2F66               	goto	l255
  8193  0F64  178D               	bsf	13,7	;volatile
  8194  0F65  2F67               	goto	l256
  8195  0F66                     l255:	
  8196  0F66  138D               	bcf	13,7	;volatile
  8197  0F67                     l256:	
  8198  0F67  0022               	movlb	2	; select bank2
  8199  0F68  178E               	bsf	14,7	;volatile
  8200  0F69  0000               	nop	;# 
  8201  0F6A  0022               	movlb	2	; select bank2
  8202  0F6B  138E               	bcf	14,7	;volatile
  8203  0F6C  0020               	movlb	0	; select bank0
  8204  0F6D  1F20               	btfss	Mrf49SpiTx@byte,6
  8205  0F6E  2F71               	goto	l259
  8206  0F6F  178D               	bsf	13,7	;volatile
  8207  0F70  2F72               	goto	l260
  8208  0F71                     l259:	
  8209  0F71  138D               	bcf	13,7	;volatile
  8210  0F72                     l260:	
  8211  0F72  0022               	movlb	2	; select bank2
  8212  0F73  178E               	bsf	14,7	;volatile
  8213  0F74  0000               	nop	;# 
  8214  0F75  0022               	movlb	2	; select bank2
  8215  0F76  138E               	bcf	14,7	;volatile
  8216  0F77  0020               	movlb	0	; select bank0
  8217  0F78  1EA0               	btfss	Mrf49SpiTx@byte,5
  8218  0F79  2F7C               	goto	l263
  8219  0F7A  178D               	bsf	13,7	;volatile
  8220  0F7B  2F7D               	goto	l264
  8221  0F7C                     l263:	
  8222  0F7C  138D               	bcf	13,7	;volatile
  8223  0F7D                     l264:	
  8224  0F7D  0022               	movlb	2	; select bank2
  8225  0F7E  178E               	bsf	14,7	;volatile
  8226  0F7F  0000               	nop	;# 
  8227  0F80  0022               	movlb	2	; select bank2
  8228  0F81  138E               	bcf	14,7	;volatile
  8229  0F82  0020               	movlb	0	; select bank0
  8230  0F83  1E20               	btfss	Mrf49SpiTx@byte,4
  8231  0F84  2F87               	goto	l267
  8232  0F85  178D               	bsf	13,7	;volatile
  8233  0F86  2F88               	goto	l268
  8234  0F87                     l267:	
  8235  0F87  138D               	bcf	13,7	;volatile
  8236  0F88                     l268:	
  8237  0F88  0022               	movlb	2	; select bank2
  8238  0F89  178E               	bsf	14,7	;volatile
  8239  0F8A  0000               	nop	;# 
  8240  0F8B  0022               	movlb	2	; select bank2
  8241  0F8C  138E               	bcf	14,7	;volatile
  8242  0F8D  0020               	movlb	0	; select bank0
  8243  0F8E  1DA0               	btfss	Mrf49SpiTx@byte,3
  8244  0F8F  2F92               	goto	l271
  8245  0F90  178D               	bsf	13,7	;volatile
  8246  0F91  2F93               	goto	l272
  8247  0F92                     l271:	
  8248  0F92  138D               	bcf	13,7	;volatile
  8249  0F93                     l272:	
  8250  0F93  0022               	movlb	2	; select bank2
  8251  0F94  178E               	bsf	14,7	;volatile
  8252  0F95  0000               	nop	;# 
  8253  0F96  0022               	movlb	2	; select bank2
  8254  0F97  138E               	bcf	14,7	;volatile
  8255  0F98  0020               	movlb	0	; select bank0
  8256  0F99  1D20               	btfss	Mrf49SpiTx@byte,2
  8257  0F9A  2F9D               	goto	l275
  8258  0F9B  178D               	bsf	13,7	;volatile
  8259  0F9C  2F9E               	goto	l276
  8260  0F9D                     l275:	
  8261  0F9D  138D               	bcf	13,7	;volatile
  8262  0F9E                     l276:	
  8263  0F9E  0022               	movlb	2	; select bank2
  8264  0F9F  178E               	bsf	14,7	;volatile
  8265  0FA0  0000               	nop	;# 
  8266  0FA1  0022               	movlb	2	; select bank2
  8267  0FA2  138E               	bcf	14,7	;volatile
  8268  0FA3  0020               	movlb	0	; select bank0
  8269  0FA4  1CA0               	btfss	Mrf49SpiTx@byte,1
  8270  0FA5  2FA8               	goto	l279
  8271  0FA6  178D               	bsf	13,7	;volatile
  8272  0FA7  2FA9               	goto	l280
  8273  0FA8                     l279:	
  8274  0FA8  138D               	bcf	13,7	;volatile
  8275  0FA9                     l280:	
  8276  0FA9  0022               	movlb	2	; select bank2
  8277  0FAA  178E               	bsf	14,7	;volatile
  8278  0FAB  0000               	nop	;# 
  8279  0FAC  0022               	movlb	2	; select bank2
  8280  0FAD  138E               	bcf	14,7	;volatile
  8281  0FAE  0020               	movlb	0	; select bank0
  8282  0FAF  1C20               	btfss	Mrf49SpiTx@byte,0
  8283  0FB0  2FB3               	goto	l283
  8284  0FB1  178D               	bsf	13,7	;volatile
  8285  0FB2  2FB4               	goto	l284
  8286  0FB3                     l283:	
  8287  0FB3  138D               	bcf	13,7	;volatile
  8288  0FB4                     l284:	
  8289  0FB4  0022               	movlb	2	; select bank2
  8290  0FB5  178E               	bsf	14,7	;volatile
  8291  0FB6  0000               	nop	;# 
  8292  0FB7  0022               	movlb	2	; select bank2
  8293  0FB8  138E               	bcf	14,7	;volatile
  8294                           
  8295                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  8296  0FB9  0020               	movlb	0	; select bank0
  8297  0FBA  138D               	bcf	13,7	;volatile
  8298  0FBB  0008               	return
  8299  0FBC                     __end_of_Mrf49SpiTx:	
  8300  0FBC                     __ptext36:	
  8301 ;; *************** function _Mrf49SpiRx *****************
  8302 ;; Defined at:
  8303 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;		None
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;  data            1    0[BANK0 ] unsigned char 
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      unsigned char 
  8310 ;; Registers used:
  8311 ;;		wreg, status,2
  8312 ;; Tracked objects:
  8313 ;;		On entry : 1F/0
  8314 ;;		On exit  : 1F/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8317 ;;      Params:         0       0       0       0
  8318 ;;      Locals:         0       1       0       0
  8319 ;;      Temps:          0       0       0       0
  8320 ;;      Totals:         0       1       0       0
  8321 ;;Total ram usage:        1 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    5
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_Mrf49RxCmd
  8328 ;;		_Mrf49RxSts
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function _Mrf49SpiRx
  8334  0FBC                     _Mrf49SpiRx:	
  8335                           
  8336                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  8340  0FBC  01A0               	clrf	Mrf49SpiRx@data
  8341                           
  8342                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  8343  0FBD  138D               	bcf	13,7	;volatile
  8344  0FBE  1A8E               	btfsc	14,5	;volatile
  8345  0FBF  17A0               	bsf	Mrf49SpiRx@data,7
  8346  0FC0  0022               	movlb	2	; select bank2
  8347  0FC1  178E               	bsf	14,7	;volatile
  8348  0FC2  0000               	nop	;# 
  8349  0FC3  0022               	movlb	2	; select bank2
  8350  0FC4  138E               	bcf	14,7	;volatile
  8351                           
  8352                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8353  0FC5  0020               	movlb	0	; select bank0
  8354  0FC6  1A8E               	btfsc	14,5	;volatile
  8355  0FC7  1720               	bsf	Mrf49SpiRx@data,6
  8356  0FC8  0022               	movlb	2	; select bank2
  8357  0FC9  178E               	bsf	14,7	;volatile
  8358  0FCA  0000               	nop	;# 
  8359  0FCB  0022               	movlb	2	; select bank2
  8360  0FCC  138E               	bcf	14,7	;volatile
  8361                           
  8362                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8363  0FCD  0020               	movlb	0	; select bank0
  8364  0FCE  1A8E               	btfsc	14,5	;volatile
  8365  0FCF  16A0               	bsf	Mrf49SpiRx@data,5
  8366  0FD0  0022               	movlb	2	; select bank2
  8367  0FD1  178E               	bsf	14,7	;volatile
  8368  0FD2  0000               	nop	;# 
  8369  0FD3  0022               	movlb	2	; select bank2
  8370  0FD4  138E               	bcf	14,7	;volatile
  8371                           
  8372                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8373  0FD5  0020               	movlb	0	; select bank0
  8374  0FD6  1A8E               	btfsc	14,5	;volatile
  8375  0FD7  1620               	bsf	Mrf49SpiRx@data,4
  8376  0FD8  0022               	movlb	2	; select bank2
  8377  0FD9  178E               	bsf	14,7	;volatile
  8378  0FDA  0000               	nop	;# 
  8379  0FDB  0022               	movlb	2	; select bank2
  8380  0FDC  138E               	bcf	14,7	;volatile
  8381                           
  8382                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8383  0FDD  0020               	movlb	0	; select bank0
  8384  0FDE  1A8E               	btfsc	14,5	;volatile
  8385  0FDF  15A0               	bsf	Mrf49SpiRx@data,3
  8386  0FE0  0022               	movlb	2	; select bank2
  8387  0FE1  178E               	bsf	14,7	;volatile
  8388  0FE2  0000               	nop	;# 
  8389  0FE3  0022               	movlb	2	; select bank2
  8390  0FE4  138E               	bcf	14,7	;volatile
  8391                           
  8392                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8393  0FE5  0020               	movlb	0	; select bank0
  8394  0FE6  1A8E               	btfsc	14,5	;volatile
  8395  0FE7  1520               	bsf	Mrf49SpiRx@data,2
  8396  0FE8  0022               	movlb	2	; select bank2
  8397  0FE9  178E               	bsf	14,7	;volatile
  8398  0FEA  0000               	nop	;# 
  8399  0FEB  0022               	movlb	2	; select bank2
  8400  0FEC  138E               	bcf	14,7	;volatile
  8401                           
  8402                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8403  0FED  0020               	movlb	0	; select bank0
  8404  0FEE  1A8E               	btfsc	14,5	;volatile
  8405  0FEF  14A0               	bsf	Mrf49SpiRx@data,1
  8406  0FF0  0022               	movlb	2	; select bank2
  8407  0FF1  178E               	bsf	14,7	;volatile
  8408  0FF2  0000               	nop	;# 
  8409  0FF3  0022               	movlb	2	; select bank2
  8410  0FF4  138E               	bcf	14,7	;volatile
  8411                           
  8412                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  8413  0FF5  0020               	movlb	0	; select bank0
  8414  0FF6  1A8E               	btfsc	14,5	;volatile
  8415  0FF7  1420               	bsf	Mrf49SpiRx@data,0
  8416  0FF8  0022               	movlb	2	; select bank2
  8417  0FF9  178E               	bsf	14,7	;volatile
  8418  0FFA  0000               	nop	;# 
  8419  0FFB  0022               	movlb	2	; select bank2
  8420  0FFC  138E               	bcf	14,7	;volatile
  8421                           
  8422                           ;mrf49xa_spi_pic16.c: 40: return data;
  8423  0FFD  0020               	movlb	0	; select bank0
  8424  0FFE  0820               	movf	Mrf49SpiRx@data,w
  8425  0FFF  0008               	return
  8426  1000                     __end_of_Mrf49SpiRx:	
  8427                           
  8428                           	psect	text53
  8429  07AE                     __ptext53:	
  8430 ;; *************** function _AdcSample *****************
  8431 ;; Defined at:
  8432 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;  ch              1    wreg     unsigned char 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  ch              1    5[BANK0 ] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  2    2[BANK0 ] unsigned int 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 1F/1
  8443 ;;		On exit  : 1F/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8446 ;;      Params:         0       2       0       0
  8447 ;;      Locals:         0       1       0       0
  8448 ;;      Temps:          0       1       0       0
  8449 ;;      Totals:         0       4       0       0
  8450 ;;Total ram usage:        4 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    6
  8453 ;; This function calls:
  8454 ;;		_AdcChSelect
  8455 ;;		_AdcGetResult
  8456 ;;		_AdcGo
  8457 ;;		_AdcIsBusy
  8458 ;; This function is called by:
  8459 ;;		_main
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           
  8464                           ;psect for function _AdcSample
  8465  07AE                     _AdcSample:	
  8466                           
  8467                           ;incstack = 0
  8468                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  8469                           ;AdcSample@ch stored from wreg
  8470  07AE  0020               	movlb	0	; select bank0
  8471  07AF  00A5               	movwf	AdcSample@ch
  8472                           
  8473                           ;adc16.c: 83: AdcChSelect(ch);
  8474  07B0  0825               	movf	AdcSample@ch,w
  8475  07B1  27DE  3187         	fcall	_AdcChSelect
  8476                           
  8477                           ;adc16.c: 86: AdcGo();
  8478  07B3  27D8  3187         	fcall	_AdcGo
  8479                           
  8480                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  8481  07B5  30C7               	movlw	199
  8482  07B6  0020               	movlb	0	; select bank0
  8483  07B7  00A4               	movwf	??_AdcSample
  8484  07B8                     u2387:	
  8485  07B8  0000               	nop
  8486  07B9  0BA4               	decfsz	??_AdcSample,f
  8487  07BA  2FB8               	goto	u2387
  8488  07BB  3200               	nop2	;nop
  8489  07BC  0000               	nop
  8490  07BD                     l3016:	
  8491                           ;adc16.c: 88: while (AdcIsBusy());
  8492                           
  8493  07BD  27DA  3187         	fcall	_AdcIsBusy
  8494  07BF  3800               	iorlw	0
  8495  07C0  1D03               	skipz
  8496  07C1  2FBD               	goto	l3016
  8497                           
  8498                           ;adc16.c: 89: AdcGo();
  8499  07C2  27D8  3187         	fcall	_AdcGo
  8500  07C4                     l3020:	
  8501                           ;adc16.c: 90: while (AdcIsBusy());
  8502                           
  8503  07C4  27DA  3187         	fcall	_AdcIsBusy
  8504  07C6  3800               	iorlw	0
  8505  07C7  1D03               	skipz
  8506  07C8  2FC4               	goto	l3020
  8507                           
  8508                           ;psect for function _AdcGetResult
  8509                           
  8510                           ;adc16.c: 92: return AdcGetResult();
  8511  07C9                     i1L_AdcGetResult:	
  8512  07C9                     i1Ll2824:	
  8513                           
  8514                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  8515  07C9  081C               	movf	28,w	;volatile
  8516  07CA  0020               	movlb	0	; select bank0
  8517  07CB  00A1               	movwf	?_AdcGetResult+1
  8518  07CC  01A0               	clrf	?_AdcGetResult
  8519  07CD  0021               	movlb	1	; select bank1
  8520  07CE  081B               	movf	27,w	;volatile
  8521  07CF  0020               	movlb	0	; select bank0
  8522  07D0  04A0               	iorwf	?_AdcGetResult,f
  8523  07D1                     i1Ll79:	
  8524  07D1  0821               	movf	?_AdcGetResult+1,w
  8525  07D2  01A3               	clrf	?_AdcSample+1
  8526  07D3  07A3               	addwf	?_AdcSample+1,f
  8527  07D4  0820               	movf	?_AdcGetResult,w
  8528  07D5  01A2               	clrf	?_AdcSample
  8529  07D6  07A2               	addwf	?_AdcSample,f
  8530  07D7  0008               	return
  8531  07D8                     __end_of_AdcSample:	
  8532  07D8                     __ptext55:	
  8533 ;; *************** function _AdcGo *****************
  8534 ;; Defined at:
  8535 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;		None               void
  8542 ;; Registers used:
  8543 ;;		None
  8544 ;; Tracked objects:
  8545 ;;		On entry : 1F/1
  8546 ;;		On exit  : 1F/1
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8549 ;;      Params:         0       0       0       0
  8550 ;;      Locals:         0       0       0       0
  8551 ;;      Temps:          0       0       0       0
  8552 ;;      Totals:         0       0       0       0
  8553 ;;Total ram usage:        0 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    5
  8556 ;; This function calls:
  8557 ;;		Nothing
  8558 ;; This function is called by:
  8559 ;;		_AdcSample
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           
  8564                           ;psect for function _AdcGo
  8565  07D8                     _AdcGo:	
  8566                           
  8567                           ;adc16.c: 31: ADCON0 |= 1<<1;
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _AdcGo: []
  8571  07D8  149D               	bsf	29,1	;volatile
  8572  07D9  0008               	return
  8573  07DA                     __end_of_AdcGo:	
  8574  07DA                     __ptext54:	
  8575 ;; *************** function _AdcIsBusy *****************
  8576 ;; Defined at:
  8577 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;		None
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;		None
  8582 ;; Return value:  Size  Location     Type
  8583 ;;                  1    wreg      unsigned char 
  8584 ;; Registers used:
  8585 ;;		wreg, status,2, status,0
  8586 ;; Tracked objects:
  8587 ;;		On entry : 0/1
  8588 ;;		On exit  : 1F/1
  8589 ;;		Unchanged: 0/0
  8590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8591 ;;      Params:         0       0       0       0
  8592 ;;      Locals:         0       0       0       0
  8593 ;;      Temps:          0       0       0       0
  8594 ;;      Totals:         0       0       0       0
  8595 ;;Total ram usage:        0 bytes
  8596 ;; Hardware stack levels used:    1
  8597 ;; Hardware stack levels required when called:    5
  8598 ;; This function calls:
  8599 ;;		Nothing
  8600 ;; This function is called by:
  8601 ;;		_AdcSample
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           
  8606                           ;psect for function _AdcIsBusy
  8607  07DA                     _AdcIsBusy:	
  8608                           
  8609                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  8613  07DA  0021               	movlb	1	; select bank1
  8614  07DB  361D               	lsrf	29,w	;volatile
  8615  07DC  3901               	andlw	1
  8616  07DD  0008               	return
  8617  07DE                     __end_of_AdcIsBusy:	
  8618  07DE                     __ptext57:	
  8619 ;; *************** function _AdcChSelect *****************
  8620 ;; Defined at:
  8621 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  channel         1    wreg     enum E4222
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  channel         1    0[BANK0 ] enum E4222
  8626 ;; Return value:  Size  Location     Type
  8627 ;;		None               void
  8628 ;; Registers used:
  8629 ;;		wreg, status,2, status,0
  8630 ;; Tracked objects:
  8631 ;;		On entry : 1F/0
  8632 ;;		On exit  : 1F/1
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8635 ;;      Params:         0       0       0       0
  8636 ;;      Locals:         0       1       0       0
  8637 ;;      Temps:          0       0       0       0
  8638 ;;      Totals:         0       1       0       0
  8639 ;;Total ram usage:        1 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    5
  8642 ;; This function calls:
  8643 ;;		Nothing
  8644 ;; This function is called by:
  8645 ;;		_AdcSample
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           
  8650                           ;psect for function _AdcChSelect
  8651  07DE                     _AdcChSelect:	
  8652                           
  8653                           ;incstack = 0
  8654                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  8655                           ;AdcChSelect@channel stored from wreg
  8656  07DE  00A0               	movwf	AdcChSelect@channel
  8657                           
  8658                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  8659  07DF  0709               	addwf	9,w
  8660  07E0  0709               	addwf	9,w
  8661  07E1  3801               	iorlw	1
  8662  07E2  0021               	movlb	1	; select bank1
  8663  07E3  009D               	movwf	29	;volatile
  8664  07E4  0008               	return
  8665  07E5                     __end_of_AdcChSelect:	
  8666                           
  8667                           	psect	text56
  8668  0000                     __ptext56:	
  8669 ;; *************** function _AdcGetResult *****************
  8670 ;; Defined at:
  8671 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;		None
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;		None
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  2    0[BANK0 ] unsigned int 
  8678 ;; Registers used:
  8679 ;;		wreg
  8680 ;; Tracked objects:
  8681 ;;		On entry : 1F/1
  8682 ;;		On exit  : 1F/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8685 ;;      Params:         0       2       0       0
  8686 ;;      Locals:         0       0       0       0
  8687 ;;      Temps:          0       0       0       0
  8688 ;;      Totals:         0       2       0       0
  8689 ;;Total ram usage:        2 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    5
  8692 ;; This function calls:
  8693 ;;		Nothing
  8694 ;; This function is called by:
  8695 ;;		_AdcSample
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699  0000                     _AdcGetResult:	
  8700                           ;psect for function _AdcGetResult
  8701                           
  8702  0000                     __end_of_AdcGetResult:	
  8703                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  8704                           
  8705                           ;incstack = 0
  8706                           ; Regs used in _AdcGetResult: [wreg]
  8707                           
  8708                           
  8709                           	psect	intentry
  8710  0004                     __pintentry:	
  8711 ;; *************** function _extInt *****************
  8712 ;; Defined at:
  8713 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;		None
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  ofw             1    7[COMMON] unsigned char 
  8718 ;; Return value:  Size  Location     Type
  8719 ;;		None               void
  8720 ;; Registers used:
  8721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8722 ;; Tracked objects:
  8723 ;;		On entry : 0/0
  8724 ;;		On exit  : 1F/0
  8725 ;;		Unchanged: 0/0
  8726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8727 ;;      Params:         0       0       0       0
  8728 ;;      Locals:         1       0       0       0
  8729 ;;      Temps:          1       0       0       0
  8730 ;;      Totals:         2       0       0       0
  8731 ;;Total ram usage:        2 bytes
  8732 ;; Hardware stack levels used:    1
  8733 ;; Hardware stack levels required when called:    4
  8734 ;; This function calls:
  8735 ;;		_ExtIntDeinit
  8736 ;;		i1_Mrf49xaNeedsReset
  8737 ;;		i1_Mrf49xaServe
  8738 ;; This function is called by:
  8739 ;;		Interrupt level 1
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743  0004                     _extInt:	
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8747  0004  3180               	pagesel	$
  8748  0005  0020               	movlb	0	; select bank0
  8749  0006  087F               	movf	127,w
  8750  0007  00F6               	movwf	??_extInt
  8751                           
  8752                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  8753  0008  1C8B               	btfss	11,1	;volatile
  8754  0009  281C               	goto	i1l142
  8755                           
  8756                           ;interrupt.c: 39: {
  8757                           ;interrupt.c: 40: uint8_t ofw = 0;
  8758  000A  01F7               	clrf	extInt@ofw
  8759  000B                     i1l3328:	
  8760                           ;interrupt.c: 41: while (!Mrf49xaServe())
  8761                           
  8762  000B  3184  243C  3180   	fcall	i1_Mrf49xaServe
  8763  000E  3A00               	xorlw	0
  8764  000F  1D03               	btfss	3,2
  8765  0010  281B               	goto	i1l141
  8766                           
  8767                           ;interrupt.c: 42: {
  8768                           ;interrupt.c: 43: ofw++;
  8769  0011  0AF7               	incf	extInt@ofw,f
  8770                           
  8771                           ;interrupt.c: 44: if (ofw == 255)
  8772  0012  0877               	movf	extInt@ofw,w
  8773  0013  3AFF               	xorlw	255
  8774  0014  1D03               	skipz
  8775  0015  280B               	goto	i1l3328
  8776                           
  8777                           ;interrupt.c: 45: {
  8778                           ;interrupt.c: 46: ExtIntDeinit();
  8779  0016  3180  2002  3180   	fcall	_ExtIntDeinit
  8780                           
  8781                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  8782  0019  3185  2550         	fcall	i1_Mrf49xaNeedsReset
  8783  001B                     i1l141:	
  8784                           ;interrupt.c: 48: break;
  8785                           
  8786                           
  8787                           ;interrupt.c: 49: }
  8788                           ;interrupt.c: 50: }
  8789                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  8790  001B  108B               	bcf	11,1	;volatile
  8791  001C                     i1l142:	
  8792  001C  0876               	movf	??_extInt,w
  8793  001D  0020               	movlb	0	; select bank0
  8794  001E  00FF               	movwf	127
  8795  001F  0009               	retfie
  8796  0020                     __end_of_extInt:	
  8797                           
  8798                           	psect	text66
  8799  0430                     __ptext66:	
  8800 ;; *************** function i1_Mrf49RxCmd *****************
  8801 ;; Defined at:
  8802 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  cmd             1    wreg     unsigned char 
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  cmd             1    1[COMMON] unsigned char 
  8807 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      unsigned char 
  8810 ;; Registers used:
  8811 ;;		wreg, status,2, status,0, pclath, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 1E/1
  8814 ;;		On exit  : 1F/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8817 ;;      Params:         0       0       0       0
  8818 ;;      Locals:         2       0       0       0
  8819 ;;      Temps:          0       0       0       0
  8820 ;;      Totals:         2       0       0       0
  8821 ;;Total ram usage:        2 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    1
  8824 ;; This function calls:
  8825 ;;		i1_Mrf49SpiRx
  8826 ;;		i1_Mrf49SpiTx
  8827 ;; This function is called by:
  8828 ;;		i1_Mrf49RxByte
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           
  8833                           ;psect for function i1_Mrf49RxCmd
  8834  0430                     i1_Mrf49RxCmd:	
  8835                           
  8836                           ;incstack = 0
  8837                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8838                           ;i1Mrf49RxCmd@cmd stored from wreg
  8839  0430  00F1               	movwf	i1Mrf49RxCmd@cmd
  8840                           
  8841                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8842  0431  0020               	movlb	0	; select bank0
  8843  0432  130E               	bcf	14,6	;volatile
  8844                           
  8845                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8846  0433  0871               	movf	i1Mrf49RxCmd@cmd,w
  8847  0434  255D  3184         	fcall	i1_Mrf49SpiTx
  8848                           
  8849                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8850  0436  25CC               	fcall	i1_Mrf49SpiRx
  8851  0437  00F2               	movwf	i1Mrf49RxCmd@val
  8852                           
  8853                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8854  0438  0020               	movlb	0	; select bank0
  8855  0439  170E               	bsf	14,6	;volatile
  8856                           
  8857                           ;mrf49xa_cmd.c: 27: return val;
  8858  043A  0872               	movf	i1Mrf49RxCmd@val,w
  8859  043B  0008               	return
  8860  043C                     __end_ofi1_Mrf49RxCmd:	
  8861  043C                     __ptext59:	
  8862 ;; *************** function i1_Mrf49xaServe *****************
  8863 ;; Defined at:
  8864 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  8865 ;; Parameters:    Size  Location     Type
  8866 ;;		None
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  1    wreg      unsigned char 
  8871 ;; Registers used:
  8872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 1E/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8878 ;;      Params:         0       0       0       0
  8879 ;;      Locals:         1       0       0       0
  8880 ;;      Temps:          1       0       0       0
  8881 ;;      Totals:         2       0       0       0
  8882 ;;Total ram usage:        2 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    3
  8885 ;; This function calls:
  8886 ;;		i1_Mrf49RxByte
  8887 ;;		i1_Mrf49RxSts
  8888 ;;		i1_Mrf49TxByte
  8889 ;;		i1_Mrf49xaModeRx
  8890 ;;		i1_Mrf49xaNeedsReset
  8891 ;; This function is called by:
  8892 ;;		_extInt
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           
  8897                           ;psect for function i1_Mrf49xaServe
  8898  043C                     i1_Mrf49xaServe:	
  8899                           
  8900                           ;mrf49xa_data.c: 10: uint8_t data;
  8901                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8905  043C  0021               	movlb	1	; select bank1
  8906  043D  08EB               	movf	(_rfTrcvStatus^(0+128)+75),f
  8907  043E  1903               	btfsc	3,2
  8908                           
  8909                           ;mrf49xa_data.c: 13: return 0;
  8910  043F  3400               	retlw	0
  8911                           
  8912                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  8913  0440  1BEC               	btfsc	(_rfTrcvStatus^(0+128)+76),7
  8914  0441  3400               	retlw	0
  8915                           
  8916                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  8917  0442  25BF  3184         	fcall	i1_Mrf49RxSts
  8918                           
  8919                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  8920  0444  0835               	movf	_mrf49Status,w
  8921  0445  3AFF               	xorlw	255
  8922  0446  1D03               	skipz
  8923  0447  2C4C               	goto	i1l444
  8924  0448  0836               	movf	_mrf49Status+1,w
  8925  0449  3AFF               	xorlw	255
  8926  044A  1903               	btfsc	3,2
  8927  044B  3400               	retlw	0
  8928  044C                     i1l444:	
  8929                           ;mrf49xa_data.c: 26: {
  8930                           
  8931                           
  8932                           ;mrf49xa_data.c: 28: }
  8933                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  8934  044C  1AB5               	btfsc	_mrf49Status,5
  8935  044D  2C5B               	goto	i1l3230
  8936  044E  2C6A               	goto	i1l445
  8937  044F                     i1l3224:	
  8938                           
  8939                           ;mrf49xa_data.c: 36: case RECV_DATA:
  8940                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  8941  044F  2529  3184         	fcall	i1_Mrf49RxByte
  8942  0451  00F5               	movwf	i1Mrf49xaServe@data
  8943                           
  8944                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  8945  0452  2529  3184         	fcall	i1_Mrf49RxByte
  8946  0454  00F5               	movwf	i1Mrf49xaServe@data
  8947                           
  8948                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  8949  0455  252C  3184         	fcall	i1_Mrf49xaModeRx
  8950                           
  8951                           ;mrf49xa_data.c: 47: break;
  8952  0457  2C6A               	goto	i1l445
  8953  0458                     i1l3226:	
  8954                           
  8955                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  8956  0458  2550  3184         	fcall	i1_Mrf49xaNeedsReset
  8957                           
  8958                           ;mrf49xa_data.c: 51: break;
  8959  045A  2C6A               	goto	i1l445
  8960  045B                     i1l3230:	
  8961  045B  0021               	movlb	1	; select bank1
  8962  045C  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  8963                           
  8964                           ; Switch size 1, requested type "space"
  8965                           ; Number of cases is 4, Range of values is 0 to 3
  8966                           ; switch strategies available:
  8967                           ; Name         Instructions Cycles
  8968                           ; simple_byte           13     7 (average)
  8969                           ; direct_byte           14     6 (fixed)
  8970                           ; jumptable            260     6 (fixed)
  8971                           ;	Chosen strategy is simple_byte
  8972  045D  3A00               	xorlw	0	; case 0
  8973  045E  1903               	skipnz
  8974  045F  2C58               	goto	i1l3226
  8975  0460  3A01               	xorlw	1	; case 1
  8976  0461  1903               	skipnz
  8977  0462  2C4F               	goto	i1l3224
  8978  0463  3A03               	xorlw	3	; case 2
  8979  0464  1903               	skipnz
  8980  0465  2C4F               	goto	i1l3224
  8981  0466  3A01               	xorlw	1	; case 3
  8982  0467  1903               	skipnz
  8983  0468  2C6A               	goto	i1l445
  8984  0469  2C6A               	goto	i1l445
  8985  046A                     i1l445:	
  8986                           
  8987                           ;mrf49xa_data.c: 60: }
  8988                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  8989  046A  0020               	movlb	0	; select bank0
  8990  046B  1BB5               	btfsc	_mrf49Status,7
  8991  046C  2D10               	goto	i1l3312
  8992  046D  2D1F               	goto	i1l3314
  8993  046E                     i1l3234:	
  8994                           
  8995                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  8996  046E  2550  3184         	fcall	i1_Mrf49xaNeedsReset
  8997                           
  8998                           ;mrf49xa_data.c: 76: break;
  8999  0470  2D1F               	goto	i1l3314
  9000  0471                     i1l3236:	
  9001                           
  9002                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  9003  0471  2529  3184         	fcall	i1_Mrf49RxByte
  9004  0473  00F5               	movwf	i1Mrf49xaServe@data
  9005                           
  9006                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9007  0474  1BB6               	btfsc	_mrf49Status+1,7
  9008  0475  2C79               	goto	i1l3242
  9009  0476                     i1l3240:	
  9010                           
  9011                           ;mrf49xa_data.c: 84: {
  9012                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  9013  0476  252C  3184         	fcall	i1_Mrf49xaModeRx
  9014                           
  9015                           ;mrf49xa_data.c: 86: break;
  9016  0478  2D1F               	goto	i1l3314
  9017  0479                     i1l3242:	
  9018                           
  9019                           ;mrf49xa_data.c: 87: }
  9020                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  9021  0479  0021               	movlb	1	; select bank1
  9022  047A  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  9023  047B  1D03               	skipz
  9024  047C  2C7F               	goto	i1l3246
  9025  047D  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  9026  047E  2C83               	goto	L4
  9027  047F                     i1l3246:	
  9028                           
  9029                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  9030  047F  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  9031  0480  1D03               	skipz
  9032  0481  2C76               	goto	i1l3240
  9033  0482  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  9034  0483                     L4:	
  9035  0483  00A0               	movwf	_rfTrcvStatus^(0+128)
  9036                           
  9037                           ;mrf49xa_data.c: 97: }
  9038                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  9039  0484  0A20               	incf	_rfTrcvStatus^(0+128),w
  9040  0485  0086               	movwf	6
  9041  0486  0187               	clrf	7
  9042  0487  0875               	movf	i1Mrf49xaServe@data,w
  9043  0488  0081               	movwf	1
  9044                           
  9045                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  9046  0489  0820               	movf	_rfTrcvStatus^(0+128),w
  9047  048A  3E16               	addlw	22
  9048  048B  0086               	movwf	6
  9049  048C  0181               	clrf	1
  9050                           
  9051                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  9052  048D  0820               	movf	_rfTrcvStatus^(0+128),w
  9053  048E  0086               	movwf	6
  9054  048F  3004               	movlw	4
  9055  0490  0081               	movwf	1
  9056                           
  9057                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  9058  0491  3002               	movlw	2
  9059  0492  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  9060                           
  9061                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  9062  0493  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9063  0494  3980               	andlw	-128
  9064  0495  3801               	iorlw	1
  9065  0496  2CC0               	goto	L5
  9066  0497                     i1l3262:	
  9067                           ;mrf49xa_data.c: 105: break;
  9068                           
  9069                           
  9070                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  9071  0497  2529  3184         	fcall	i1_Mrf49RxByte
  9072  0499  00F5               	movwf	i1Mrf49xaServe@data
  9073                           
  9074                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9075  049A  1BB6               	btfsc	_mrf49Status+1,7
  9076  049B  2CA2               	goto	i1l3270
  9077                           
  9078                           ;mrf49xa_data.c: 114: {
  9079                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9080  049C  0021               	movlb	1	; select bank1
  9081  049D  0820               	movf	_rfTrcvStatus^(0+128),w
  9082  049E  0086               	movwf	6
  9083  049F  3005               	movlw	5
  9084  04A0  0187               	clrf	7
  9085  04A1  2CB3               	goto	L6
  9086  04A2                     i1l3270:	
  9087                           
  9088                           ;mrf49xa_data.c: 118: }
  9089                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  9090  04A2  0021               	movlb	1	; select bank1
  9091  04A3  0A20               	incf	_rfTrcvStatus^(0+128),w
  9092  04A4  0086               	movwf	6
  9093  04A5  0187               	clrf	7
  9094  04A6  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9095  04A7  397F               	andlw	127
  9096  04A8  0601               	xorwf	1,w
  9097  04A9  1D03               	skipz
  9098  04AA  2CB5               	goto	i1l3276
  9099                           
  9100                           ;mrf49xa_data.c: 121: {
  9101                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
  9102  04AB  0820               	movf	_rfTrcvStatus^(0+128),w
  9103  04AC  3E16               	addlw	22
  9104  04AD  0086               	movwf	6
  9105  04AE  0875               	movf	i1Mrf49xaServe@data,w
  9106  04AF  0081               	movwf	1
  9107                           
  9108                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9109  04B0  0820               	movf	_rfTrcvStatus^(0+128),w
  9110  04B1  0086               	movwf	6
  9111  04B2  3005               	movlw	5
  9112  04B3                     L6:	
  9113  04B3  0081               	movwf	1
  9114  04B4  2C76               	goto	i1l3240
  9115  04B5                     i1l3276:	
  9116                           
  9117                           ;mrf49xa_data.c: 135: else
  9118                           ;mrf49xa_data.c: 136: {
  9119                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  9120  04B5  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9121  04B6  397F               	andlw	127
  9122  04B7  0720               	addwf	_rfTrcvStatus^(0+128),w
  9123  04B8  00F4               	movwf	??i1_Mrf49xaServe
  9124  04B9  0A74               	incf	??i1_Mrf49xaServe,w
  9125  04BA  0086               	movwf	6
  9126  04BB  0187               	clrf	7
  9127  04BC  0875               	movf	i1Mrf49xaServe@data,w
  9128  04BD  0081               	movwf	1
  9129  04BE  260F  3184         	fcall	PL16	;call to abstracted procedure
  9130  04C0                     L5:	
  9131  04C0  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  9132  04C1  2D1F               	goto	i1l3314
  9133  04C2                     i1l3280:	
  9134                           
  9135                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
  9136  04C2  260F  3184         	fcall	PL16	;call to abstracted procedure
  9137  04C4  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  9138                           
  9139                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  9140  04C5  397F               	andlw	127
  9141  04C6  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  9142  04C7  1D03               	skipz
  9143  04C8  2CFE               	goto	i1l3308
  9144                           
  9145                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
  9146  04C9  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9147  04CA  3980               	andlw	-128
  9148  04CB  3831               	iorlw	49
  9149  04CC  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  9150  04CD  2CFE               	goto	i1l3308
  9151  04CE                     i1l3284:	
  9152                           
  9153                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
  9154  04CE  302D               	movlw	45
  9155  04CF  2524  3184         	fcall	i1_Mrf49TxByte
  9156                           
  9157                           ;mrf49xa_data.c: 152: break;
  9158  04D1  2D1F               	goto	i1l3314
  9159  04D2                     i1l3286:	
  9160                           
  9161                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
  9162  04D2  30D4               	movlw	212
  9163  04D3  2524  3184         	fcall	i1_Mrf49TxByte
  9164                           
  9165                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
  9166  04D5  307F               	movlw	127
  9167  04D6  0021               	movlb	1	; select bank1
  9168  04D7  04EC               	iorwf	(_rfTrcvStatus^(0+128)+76),f
  9169                           
  9170                           ;mrf49xa_data.c: 157: break;
  9171  04D8  2D1F               	goto	i1l3314
  9172  04D9                     i1l3290:	
  9173                           
  9174                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  9175  04D9  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9176  04DA  397F               	andlw	127
  9177  04DB  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  9178  04DC  0086               	movwf	6
  9179  04DD  0187               	clrf	7
  9180  04DE  0801               	movf	1,w
  9181  04DF  2524  3184         	fcall	i1_Mrf49TxByte
  9182                           
  9183                           ;mrf49xa_data.c: 162: break;
  9184  04E1  2D1F               	goto	i1l3314
  9185  04E2                     i1l3292:	
  9186                           
  9187                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  9188  04E2  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  9189  04E3  2524  3184         	fcall	i1_Mrf49TxByte
  9190                           
  9191                           ;mrf49xa_data.c: 166: break;
  9192  04E5  2D1F               	goto	i1l3314
  9193  04E6                     i1l3294:	
  9194                           
  9195                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
  9196  04E6  3000               	movlw	0
  9197  04E7  2524  3184         	fcall	i1_Mrf49TxByte
  9198                           
  9199                           ;mrf49xa_data.c: 170: break;
  9200  04E9  2D1F               	goto	i1l3314
  9201  04EA                     i1l3296:	
  9202                           
  9203                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
  9204  04EA  3000               	movlw	0
  9205  04EB  2524  3184         	fcall	i1_Mrf49TxByte
  9206                           
  9207                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
  9208  04ED  252C  3184         	fcall	i1_Mrf49xaModeRx
  9209                           
  9210                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
  9211  04EF  30F0               	movlw	-16
  9212  04F0  0021               	movlb	1	; select bank1
  9213  04F1  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  9214                           
  9215                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  9216  04F2  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  9217  04F3  0C89               	rrf	9,f
  9218  04F4  0C89               	rrf	9,f
  9219  04F5  3903               	andlw	3
  9220  04F6  3A01               	xorlw	1
  9221  04F7  1D03               	skipz
  9222  04F8  2CFC               	goto	i1l3304
  9223                           
  9224                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  9225  04F9  3003               	movlw	3
  9226  04FA  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  9227  04FB  2D1F               	goto	i1l3314
  9228  04FC                     i1l3304:	
  9229                           
  9230                           ;mrf49xa_data.c: 180: else
  9231                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
  9232  04FC  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  9233  04FD  2D1F               	goto	i1l3314
  9234  04FE                     i1l3308:	
  9235  04FE  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9236  04FF  397F               	andlw	127
  9237                           
  9238                           ; Switch size 1, requested type "space"
  9239                           ; Number of cases is 5, Range of values is 49 to 101
  9240                           ; switch strategies available:
  9241                           ; Name         Instructions Cycles
  9242                           ; simple_byte           16     9 (average)
  9243                           ; direct_byte          115     9 (fixed)
  9244                           ; jumptable            263     9 (fixed)
  9245                           ;	Chosen strategy is simple_byte
  9246  0500  3A31               	xorlw	49	; case 49
  9247  0501  1903               	skipnz
  9248  0502  2CE2               	goto	i1l3292
  9249  0503  3A03               	xorlw	3	; case 50
  9250  0504  1903               	skipnz
  9251  0505  2CE6               	goto	i1l3294
  9252  0506  3A01               	xorlw	1	; case 51
  9253  0507  1903               	skipnz
  9254  0508  2CEA               	goto	i1l3296
  9255  0509  3A57               	xorlw	87	; case 100
  9256  050A  1903               	skipnz
  9257  050B  2CCE               	goto	i1l3284
  9258  050C  3A01               	xorlw	1	; case 101
  9259  050D  1903               	skipnz
  9260  050E  2CD2               	goto	i1l3286
  9261  050F  2CD9               	goto	i1l3290
  9262  0510                     i1l3312:	
  9263  0510  0021               	movlb	1	; select bank1
  9264  0511  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  9265                           
  9266                           ; Switch size 1, requested type "space"
  9267                           ; Number of cases is 4, Range of values is 0 to 3
  9268                           ; switch strategies available:
  9269                           ; Name         Instructions Cycles
  9270                           ; simple_byte           13     7 (average)
  9271                           ; direct_byte           14     6 (fixed)
  9272                           ; jumptable            260     6 (fixed)
  9273                           ;	Chosen strategy is simple_byte
  9274  0512  3A00               	xorlw	0	; case 0
  9275  0513  1903               	skipnz
  9276  0514  2C6E               	goto	i1l3234
  9277  0515  3A01               	xorlw	1	; case 1
  9278  0516  1903               	skipnz
  9279  0517  2C71               	goto	i1l3236
  9280  0518  3A03               	xorlw	3	; case 2
  9281  0519  1903               	skipnz
  9282  051A  2C97               	goto	i1l3262
  9283  051B  3A01               	xorlw	1	; case 3
  9284  051C  1903               	skipnz
  9285  051D  2CC2               	goto	i1l3280
  9286  051E  2D1F               	goto	i1l3314
  9287  051F                     i1l3314:	
  9288                           
  9289                           ;mrf49xa_data.c: 188: }
  9290                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
  9291  051F  0020               	movlb	0	; select bank0
  9292  0520  0C0C               	rrf	12,w	;volatile
  9293  0521  0C89               	rrf	9,f
  9294  0522  3901               	andlw	1
  9295  0523  0008               	return
  9296  0524                     __end_ofi1_Mrf49xaServe:	
  9297  0524                     __ptext62:	
  9298 ;; *************** function i1_Mrf49TxByte *****************
  9299 ;; Defined at:
  9300 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;  byte            1    wreg     unsigned char 
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;  byte            1    3[COMMON] unsigned char 
  9305 ;; Return value:  Size  Location     Type
  9306 ;;		None               void
  9307 ;; Registers used:
  9308 ;;		wreg, status,2, status,0, pclath, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 1E/1
  9311 ;;		On exit  : 1F/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9314 ;;      Params:         0       0       0       0
  9315 ;;      Locals:         1       0       0       0
  9316 ;;      Temps:          0       0       0       0
  9317 ;;      Totals:         1       0       0       0
  9318 ;;Total ram usage:        1 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    2
  9321 ;; This function calls:
  9322 ;;		i1_Mrf49TxCmd
  9323 ;; This function is called by:
  9324 ;;		i1_Mrf49xaServe
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           
  9329                           ;psect for function i1_Mrf49TxByte
  9330  0524                     i1_Mrf49TxByte:	
  9331                           
  9332                           ;incstack = 0
  9333                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  9334                           ;i1Mrf49TxByte@byte stored from wreg
  9335  0524  00F3               	movwf	i1Mrf49TxByte@byte
  9336                           
  9337                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  9338  0525  00F1               	movwf	i1Mrf49TxCmd@val
  9339  0526  30B8               	movlw	184
  9340  0527  2553               	fcall	i1_Mrf49TxCmd
  9341  0528  0008               	return
  9342  0529                     __end_ofi1_Mrf49TxByte:	
  9343  0529                     __ptext65:	
  9344 ;; *************** function i1_Mrf49RxByte *****************
  9345 ;; Defined at:
  9346 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;		None
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;		None
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  1    wreg      unsigned char 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0, pclath, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 1E/1
  9357 ;;		On exit  : 1F/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9360 ;;      Params:         0       0       0       0
  9361 ;;      Locals:         0       0       0       0
  9362 ;;      Temps:          0       0       0       0
  9363 ;;      Totals:         0       0       0       0
  9364 ;;Total ram usage:        0 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    2
  9367 ;; This function calls:
  9368 ;;		i1_Mrf49RxCmd
  9369 ;; This function is called by:
  9370 ;;		i1_Mrf49xaServe
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function i1_Mrf49RxByte
  9376  0529                     i1_Mrf49RxByte:	
  9377                           
  9378                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  9379                           
  9380                           ;incstack = 0
  9381                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  9382  0529  30B0               	movlw	176
  9383  052A  2430               	fcall	i1_Mrf49RxCmd
  9384  052B  0008               	return
  9385  052C                     __end_ofi1_Mrf49RxByte:	
  9386  052C                     __ptext61:	
  9387 ;; *************** function i1_Mrf49xaModeRx *****************
  9388 ;; Defined at:
  9389 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;		None
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;		None               void
  9396 ;; Registers used:
  9397 ;;		wreg, status,2, status,0, pclath, cstack
  9398 ;; Tracked objects:
  9399 ;;		On entry : 1E/0
  9400 ;;		On exit  : 1F/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9403 ;;      Params:         0       0       0       0
  9404 ;;      Locals:         1       0       0       0
  9405 ;;      Temps:          0       0       0       0
  9406 ;;      Totals:         1       0       0       0
  9407 ;;Total ram usage:        1 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    2
  9410 ;; This function calls:
  9411 ;;		i1_Mrf49TxCmd
  9412 ;; This function is called by:
  9413 ;;		i1_Mrf49xaServe
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           
  9418                           ;psect for function i1_Mrf49xaModeRx
  9419  052C                     i1_Mrf49xaModeRx:	
  9420  052C  3071               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  9421                           
  9422                           ;mrf49xa.c: 101: UI08_t k;
  9423                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  9424                           
  9425                           ;incstack = 0
  9426                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  9427  052D  01F3               	clrf	i1Mrf49xaModeRx@k
  9428  052E  3187               	movlp	high __stringtab
  9429  052F  000A               	callw
  9430  0530  3184               	pagesel	$	;select current page
  9431  0531  3800               	iorlw	0
  9432  0532  1903               	btfsc	3,2
  9433  0533  2D48               	goto	i1l211
  9434  0534                     i1l2986:	
  9435  0534  3573               	lslf	i1Mrf49xaModeRx@k,w
  9436  0535  3E95               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  9437  0536  3187               	movlp	high __stringtab
  9438  0537  000A               	callw
  9439  0538  00F1               	movwf	i1Mrf49TxCmd@val
  9440  0539  3573               	lslf	i1Mrf49xaModeRx@k,w
  9441  053A  3E94               	addlw	low (_mrfRegset_Rx| (0+32768))
  9442  053B  3187               	movlp	high __stringtab
  9443  053C  000A               	callw
  9444  053D  3184               	pagesel	$	;select current page
  9445  053E  3185  2553         	fcall	i1_Mrf49TxCmd
  9446  0540  3071               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  9447  0541  0AF3               	incf	i1Mrf49xaModeRx@k,f
  9448  0542  3187               	movlp	high __stringtab
  9449  0543  000A               	callw
  9450  0544  3184               	pagesel	$	;select current page
  9451  0545  0273               	subwf	i1Mrf49xaModeRx@k,w
  9452  0546  1C03               	skipc
  9453  0547  2D34               	goto	i1l2986
  9454  0548                     i1l211:	
  9455                           
  9456                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  9457  0548  0021               	movlb	1	; select bank1
  9458  0549  3080               	movlw	-128
  9459  054A  01EB               	clrf	(_rfTrcvStatus^(0+128)+75)
  9460  054B  0AEB               	incf	(_rfTrcvStatus^(0+128)+75),f
  9461                           
  9462                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  9463  054C  05EC               	andwf	(_rfTrcvStatus^(0+128)+76),f
  9464                           
  9465                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  9466  054D  0020               	movlb	0	; select bank0
  9467  054E  13B5               	bcf	_mrf49Status,7
  9468  054F  0008               	return
  9469  0550                     __end_ofi1_Mrf49xaModeRx:	
  9470  0550                     __ptext60:	
  9471 ;; *************** function i1_Mrf49xaNeedsReset *****************
  9472 ;; Defined at:
  9473 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;		None
  9478 ;; Return value:  Size  Location     Type
  9479 ;;		None               void
  9480 ;; Registers used:
  9481 ;;		None
  9482 ;; Tracked objects:
  9483 ;;		On entry : 1E/0
  9484 ;;		On exit  : 1F/1
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9487 ;;      Params:         0       0       0       0
  9488 ;;      Locals:         0       0       0       0
  9489 ;;      Temps:          0       0       0       0
  9490 ;;      Totals:         0       0       0       0
  9491 ;;Total ram usage:        0 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; This function calls:
  9494 ;;		Nothing
  9495 ;; This function is called by:
  9496 ;;		_extInt
  9497 ;;		i1_Mrf49xaServe
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           
  9502                           ;psect for function i1_Mrf49xaNeedsReset
  9503  0550                     i1_Mrf49xaNeedsReset:	
  9504                           
  9505                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in i1_Mrf49xaNeedsReset: []
  9509  0550  0021               	movlb	1	; select bank1
  9510  0551  17EC               	bsf	(_rfTrcvStatus^(0+128)+76),7
  9511  0552  0008               	return
  9512  0553                     __end_ofi1_Mrf49xaNeedsReset:	
  9513  0553                     __ptext63:	
  9514 ;; *************** function i1_Mrf49TxCmd *****************
  9515 ;; Defined at:
  9516 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;  cmd             1    wreg     unsigned char 
  9519 ;;  val             1    1[COMMON] unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  cmd             1    2[COMMON] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 1E/0
  9528 ;;		On exit  : 1F/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9531 ;;      Params:         1       0       0       0
  9532 ;;      Locals:         1       0       0       0
  9533 ;;      Temps:          0       0       0       0
  9534 ;;      Totals:         2       0       0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    1
  9538 ;; This function calls:
  9539 ;;		i1_Mrf49SpiTx
  9540 ;; This function is called by:
  9541 ;;		i1_Mrf49xaModeRx
  9542 ;;		i1_Mrf49TxByte
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           
  9547                           ;psect for function i1_Mrf49TxCmd
  9548  0553                     i1_Mrf49TxCmd:	
  9549                           
  9550                           ;incstack = 0
  9551                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  9552                           ;i1Mrf49TxCmd@cmd stored from wreg
  9553  0553  00F2               	movwf	i1Mrf49TxCmd@cmd
  9554                           
  9555                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  9556  0554  0020               	movlb	0	; select bank0
  9557  0555  130E               	bcf	14,6	;volatile
  9558                           
  9559                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  9560  0556  0872               	movf	i1Mrf49TxCmd@cmd,w
  9561  0557  255D  3184         	fcall	i1_Mrf49SpiTx
  9562                           
  9563                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  9564  0559  0871               	movf	i1Mrf49TxCmd@val,w
  9565  055A  255D               	fcall	i1_Mrf49SpiTx
  9566                           
  9567                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  9568  055B  170E               	bsf	14,6	;volatile
  9569  055C  0008               	return
  9570  055D                     __end_ofi1_Mrf49TxCmd:	
  9571  055D                     __ptext67:	
  9572 ;; *************** function i1_Mrf49SpiTx *****************
  9573 ;; Defined at:
  9574 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  byte            1    wreg     unsigned char 
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;  byte            1    0[COMMON] unsigned char 
  9579 ;; Return value:  Size  Location     Type
  9580 ;;		None               void
  9581 ;; Registers used:
  9582 ;;		wreg
  9583 ;; Tracked objects:
  9584 ;;		On entry : 1F/0
  9585 ;;		On exit  : 1F/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9588 ;;      Params:         0       0       0       0
  9589 ;;      Locals:         1       0       0       0
  9590 ;;      Temps:          0       0       0       0
  9591 ;;      Totals:         1       0       0       0
  9592 ;;Total ram usage:        1 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		i1_Mrf49TxCmd
  9598 ;;		i1_Mrf49RxCmd
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function i1_Mrf49SpiTx
  9604  055D                     i1_Mrf49SpiTx:	
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  9608                           ;i1Mrf49SpiTx@byte stored from wreg
  9609  055D  00F0               	movwf	i1Mrf49SpiTx@byte
  9610                           
  9611                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  9612  055E  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  9613  055F  2D62               	goto	i1l255
  9614  0560  178D               	bsf	13,7	;volatile
  9615  0561  2D63               	goto	i1l256
  9616  0562                     i1l255:	
  9617  0562  138D               	bcf	13,7	;volatile
  9618  0563                     i1l256:	
  9619  0563  0022               	movlb	2	; select bank2
  9620  0564  178E               	bsf	14,7	;volatile
  9621  0565  0000               	nop	;# 
  9622  0566  0022               	movlb	2	; select bank2
  9623  0567  138E               	bcf	14,7	;volatile
  9624  0568  1F70               	btfss	i1Mrf49SpiTx@byte,6
  9625  0569  2D6D               	goto	i1l259
  9626  056A  0020               	movlb	0	; select bank0
  9627  056B  178D               	bsf	13,7	;volatile
  9628  056C  2D6F               	goto	i1l260
  9629  056D                     i1l259:	
  9630  056D  0020               	movlb	0	; select bank0
  9631  056E  138D               	bcf	13,7	;volatile
  9632  056F                     i1l260:	
  9633  056F  0022               	movlb	2	; select bank2
  9634  0570  178E               	bsf	14,7	;volatile
  9635  0571  0000               	nop	;# 
  9636  0572  0022               	movlb	2	; select bank2
  9637  0573  138E               	bcf	14,7	;volatile
  9638  0574  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  9639  0575  2D79               	goto	i1l263
  9640  0576  0020               	movlb	0	; select bank0
  9641  0577  178D               	bsf	13,7	;volatile
  9642  0578  2D7B               	goto	i1l264
  9643  0579                     i1l263:	
  9644  0579  0020               	movlb	0	; select bank0
  9645  057A  138D               	bcf	13,7	;volatile
  9646  057B                     i1l264:	
  9647  057B  0022               	movlb	2	; select bank2
  9648  057C  178E               	bsf	14,7	;volatile
  9649  057D  0000               	nop	;# 
  9650  057E  0022               	movlb	2	; select bank2
  9651  057F  138E               	bcf	14,7	;volatile
  9652  0580  1E70               	btfss	i1Mrf49SpiTx@byte,4
  9653  0581  2D85               	goto	i1l267
  9654  0582  0020               	movlb	0	; select bank0
  9655  0583  178D               	bsf	13,7	;volatile
  9656  0584  2D87               	goto	i1l268
  9657  0585                     i1l267:	
  9658  0585  0020               	movlb	0	; select bank0
  9659  0586  138D               	bcf	13,7	;volatile
  9660  0587                     i1l268:	
  9661  0587  0022               	movlb	2	; select bank2
  9662  0588  178E               	bsf	14,7	;volatile
  9663  0589  0000               	nop	;# 
  9664  058A  0022               	movlb	2	; select bank2
  9665  058B  138E               	bcf	14,7	;volatile
  9666  058C  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  9667  058D  2D91               	goto	i1l271
  9668  058E  0020               	movlb	0	; select bank0
  9669  058F  178D               	bsf	13,7	;volatile
  9670  0590  2D93               	goto	i1l272
  9671  0591                     i1l271:	
  9672  0591  0020               	movlb	0	; select bank0
  9673  0592  138D               	bcf	13,7	;volatile
  9674  0593                     i1l272:	
  9675  0593  0022               	movlb	2	; select bank2
  9676  0594  178E               	bsf	14,7	;volatile
  9677  0595  0000               	nop	;# 
  9678  0596  0022               	movlb	2	; select bank2
  9679  0597  138E               	bcf	14,7	;volatile
  9680  0598  1D70               	btfss	i1Mrf49SpiTx@byte,2
  9681  0599  2D9D               	goto	i1l275
  9682  059A  0020               	movlb	0	; select bank0
  9683  059B  178D               	bsf	13,7	;volatile
  9684  059C  2D9F               	goto	i1l276
  9685  059D                     i1l275:	
  9686  059D  0020               	movlb	0	; select bank0
  9687  059E  138D               	bcf	13,7	;volatile
  9688  059F                     i1l276:	
  9689  059F  0022               	movlb	2	; select bank2
  9690  05A0  178E               	bsf	14,7	;volatile
  9691  05A1  0000               	nop	;# 
  9692  05A2  0022               	movlb	2	; select bank2
  9693  05A3  138E               	bcf	14,7	;volatile
  9694  05A4  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  9695  05A5  2DA9               	goto	i1l279
  9696  05A6  0020               	movlb	0	; select bank0
  9697  05A7  178D               	bsf	13,7	;volatile
  9698  05A8  2DAB               	goto	i1l280
  9699  05A9                     i1l279:	
  9700  05A9  0020               	movlb	0	; select bank0
  9701  05AA  138D               	bcf	13,7	;volatile
  9702  05AB                     i1l280:	
  9703  05AB  0022               	movlb	2	; select bank2
  9704  05AC  178E               	bsf	14,7	;volatile
  9705  05AD  0000               	nop	;# 
  9706  05AE  0022               	movlb	2	; select bank2
  9707  05AF  138E               	bcf	14,7	;volatile
  9708  05B0  1C70               	btfss	i1Mrf49SpiTx@byte,0
  9709  05B1  2DB5               	goto	i1l283
  9710  05B2  0020               	movlb	0	; select bank0
  9711  05B3  178D               	bsf	13,7	;volatile
  9712  05B4  2DB7               	goto	i1l284
  9713  05B5                     i1l283:	
  9714  05B5  0020               	movlb	0	; select bank0
  9715  05B6  138D               	bcf	13,7	;volatile
  9716  05B7                     i1l284:	
  9717  05B7  0022               	movlb	2	; select bank2
  9718  05B8  178E               	bsf	14,7	;volatile
  9719  05B9  0000               	nop	;# 
  9720  05BA  0022               	movlb	2	; select bank2
  9721  05BB  138E               	bcf	14,7	;volatile
  9722                           
  9723                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  9724  05BC  0020               	movlb	0	; select bank0
  9725  05BD  138D               	bcf	13,7	;volatile
  9726  05BE  0008               	return
  9727  05BF                     __end_ofi1_Mrf49SpiTx:	
  9728  05BF                     __ptext64:	
  9729 ;; *************** function i1_Mrf49RxSts *****************
  9730 ;; Defined at:
  9731 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;		None
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;		None
  9736 ;; Return value:  Size  Location     Type
  9737 ;;		None               void
  9738 ;; Registers used:
  9739 ;;		wreg, status,2, pclath, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 1F/1
  9742 ;;		On exit  : 1F/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9745 ;;      Params:         0       0       0       0
  9746 ;;      Locals:         0       0       0       0
  9747 ;;      Temps:          0       0       0       0
  9748 ;;      Totals:         0       0       0       0
  9749 ;;Total ram usage:        0 bytes
  9750 ;; Hardware stack levels used:    1
  9751 ;; Hardware stack levels required when called:    1
  9752 ;; This function calls:
  9753 ;;		i1_Mrf49SpiRx
  9754 ;; This function is called by:
  9755 ;;		i1_Mrf49xaServe
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           
  9760                           ;psect for function i1_Mrf49RxSts
  9761  05BF                     i1_Mrf49RxSts:	
  9762                           
  9763                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  9764                           
  9765                           ;incstack = 0
  9766                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  9767  05BF  120B               	bcf	11,4	;volatile
  9768                           
  9769                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  9770  05C0  0020               	movlb	0	; select bank0
  9771  05C1  130E               	bcf	14,6	;volatile
  9772                           
  9773                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  9774  05C2  25CC  3184         	fcall	i1_Mrf49SpiRx
  9775  05C4  0020               	movlb	0	; select bank0
  9776  05C5  00B5               	movwf	_mrf49Status
  9777                           
  9778                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  9779  05C6  25CC               	fcall	i1_Mrf49SpiRx
  9780  05C7  0020               	movlb	0	; select bank0
  9781  05C8  00B6               	movwf	_mrf49Status+1
  9782                           
  9783                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  9784  05C9  170E               	bsf	14,6	;volatile
  9785                           
  9786                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  9787  05CA  160B               	bsf	11,4	;volatile
  9788  05CB  0008               	return
  9789  05CC                     __end_ofi1_Mrf49RxSts:	
  9790  05CC                     __ptext68:	
  9791 ;; *************** function i1_Mrf49SpiRx *****************
  9792 ;; Defined at:
  9793 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      unsigned char 
  9800 ;; Registers used:
  9801 ;;		wreg, status,2
  9802 ;; Tracked objects:
  9803 ;;		On entry : 1F/0
  9804 ;;		On exit  : 1F/2
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9807 ;;      Params:         0       0       0       0
  9808 ;;      Locals:         1       0       0       0
  9809 ;;      Temps:          0       0       0       0
  9810 ;;      Totals:         1       0       0       0
  9811 ;;Total ram usage:        1 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; This function calls:
  9814 ;;		Nothing
  9815 ;; This function is called by:
  9816 ;;		i1_Mrf49RxCmd
  9817 ;;		i1_Mrf49RxSts
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function i1_Mrf49SpiRx
  9823  05CC                     i1_Mrf49SpiRx:	
  9824                           
  9825                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  9829  05CC  01F0               	clrf	i1Mrf49SpiRx@data
  9830                           
  9831                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  9832  05CD  138D               	bcf	13,7	;volatile
  9833  05CE  1A8E               	btfsc	14,5	;volatile
  9834  05CF  17F0               	bsf	i1Mrf49SpiRx@data,7
  9835  05D0  0022               	movlb	2	; select bank2
  9836  05D1  178E               	bsf	14,7	;volatile
  9837  05D2  0000               	nop	;# 
  9838  05D3  0022               	movlb	2	; select bank2
  9839  05D4  138E               	bcf	14,7	;volatile
  9840                           
  9841                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9842  05D5  0020               	movlb	0	; select bank0
  9843  05D6  1A8E               	btfsc	14,5	;volatile
  9844  05D7  1770               	bsf	i1Mrf49SpiRx@data,6
  9845  05D8  0022               	movlb	2	; select bank2
  9846  05D9  178E               	bsf	14,7	;volatile
  9847  05DA  0000               	nop	;# 
  9848  05DB  0022               	movlb	2	; select bank2
  9849  05DC  138E               	bcf	14,7	;volatile
  9850                           
  9851                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9852  05DD  0020               	movlb	0	; select bank0
  9853  05DE  1A8E               	btfsc	14,5	;volatile
  9854  05DF  16F0               	bsf	i1Mrf49SpiRx@data,5
  9855  05E0  0022               	movlb	2	; select bank2
  9856  05E1  178E               	bsf	14,7	;volatile
  9857  05E2  0000               	nop	;# 
  9858  05E3  0022               	movlb	2	; select bank2
  9859  05E4  138E               	bcf	14,7	;volatile
  9860                           
  9861                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9862  05E5  0020               	movlb	0	; select bank0
  9863  05E6  1A8E               	btfsc	14,5	;volatile
  9864  05E7  1670               	bsf	i1Mrf49SpiRx@data,4
  9865  05E8  0022               	movlb	2	; select bank2
  9866  05E9  178E               	bsf	14,7	;volatile
  9867  05EA  0000               	nop	;# 
  9868  05EB  0022               	movlb	2	; select bank2
  9869  05EC  138E               	bcf	14,7	;volatile
  9870                           
  9871                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9872  05ED  0020               	movlb	0	; select bank0
  9873  05EE  1A8E               	btfsc	14,5	;volatile
  9874  05EF  15F0               	bsf	i1Mrf49SpiRx@data,3
  9875  05F0  0022               	movlb	2	; select bank2
  9876  05F1  178E               	bsf	14,7	;volatile
  9877  05F2  0000               	nop	;# 
  9878  05F3  0022               	movlb	2	; select bank2
  9879  05F4  138E               	bcf	14,7	;volatile
  9880                           
  9881                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9882  05F5  0020               	movlb	0	; select bank0
  9883  05F6  1A8E               	btfsc	14,5	;volatile
  9884  05F7  1570               	bsf	i1Mrf49SpiRx@data,2
  9885  05F8  0022               	movlb	2	; select bank2
  9886  05F9  178E               	bsf	14,7	;volatile
  9887  05FA  0000               	nop	;# 
  9888  05FB  0022               	movlb	2	; select bank2
  9889  05FC  138E               	bcf	14,7	;volatile
  9890                           
  9891                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9892  05FD  0020               	movlb	0	; select bank0
  9893  05FE  1A8E               	btfsc	14,5	;volatile
  9894  05FF  14F0               	bsf	i1Mrf49SpiRx@data,1
  9895  0600  0022               	movlb	2	; select bank2
  9896  0601  178E               	bsf	14,7	;volatile
  9897  0602  0000               	nop	;# 
  9898  0603  0022               	movlb	2	; select bank2
  9899  0604  138E               	bcf	14,7	;volatile
  9900                           
  9901                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9902  0605  0020               	movlb	0	; select bank0
  9903  0606  1A8E               	btfsc	14,5	;volatile
  9904  0607  1470               	bsf	i1Mrf49SpiRx@data,0
  9905  0608  0022               	movlb	2	; select bank2
  9906  0609  178E               	bsf	14,7	;volatile
  9907  060A  0000               	nop	;# 
  9908  060B  0022               	movlb	2	; select bank2
  9909  060C  138E               	bcf	14,7	;volatile
  9910                           
  9911                           ;mrf49xa_spi_pic16.c: 40: return data;
  9912  060D  0870               	movf	i1Mrf49SpiRx@data,w
  9913  060E  0008               	return
  9914  060F                     __end_ofi1_Mrf49SpiRx:	
  9915  060F                     PL16:	
  9916  060F  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9917  0610  397F               	andlw	127
  9918  0611  00F4               	movwf	??i1_Mrf49xaServe
  9919  0612  0AF4               	incf	??i1_Mrf49xaServe,f
  9920  0613  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9921  0614  0674               	xorwf	??i1_Mrf49xaServe,w
  9922  0615  3980               	andlw	-128
  9923  0616  0674               	xorwf	??i1_Mrf49xaServe,w
  9924  0617  0008               	return
  9925  0618                     __end_ofPL16:	
  9926                           
  9927                           	psect	text69
  9928  0002                     __ptext69:	
  9929 ;; *************** function _ExtIntDeinit *****************
  9930 ;; Defined at:
  9931 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;		None
  9934 ;; Auto vars:     Size  Location     Type
  9935 ;;		None
  9936 ;; Return value:  Size  Location     Type
  9937 ;;		None               void
  9938 ;; Registers used:
  9939 ;;		None
  9940 ;; Tracked objects:
  9941 ;;		On entry : 1E/0
  9942 ;;		On exit  : 1E/0
  9943 ;;		Unchanged: 1E/0
  9944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9945 ;;      Params:         0       0       0       0
  9946 ;;      Locals:         0       0       0       0
  9947 ;;      Temps:          0       0       0       0
  9948 ;;      Totals:         0       0       0       0
  9949 ;;Total ram usage:        0 bytes
  9950 ;; Hardware stack levels used:    1
  9951 ;; This function calls:
  9952 ;;		Nothing
  9953 ;; This function is called by:
  9954 ;;		_extInt
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           
  9959                           ;psect for function _ExtIntDeinit
  9960  0002                     _ExtIntDeinit:	
  9961                           
  9962                           ;interrupt.c: 19: INTCONbits.INTE = 0;
  9963                           
  9964                           ;incstack = 0
  9965                           ; Regs used in _ExtIntDeinit: []
  9966  0002  120B               	bcf	11,4	;volatile
  9967  0003  0008               	return
  9968  0004                     __end_of_ExtIntDeinit:	
  9969  007E                     btemp	set	126	;btemp
  9970  007E                     wtemp	set	126
  9971  007E                     wtemp0	set	126
  9972  0080                     wtemp1	set	128
  9973  0082                     wtemp2	set	130
  9974  0084                     wtemp3	set	132
  9975  0086                     wtemp4	set	134
  9976  0088                     wtemp5	set	136
  9977  007F                     wtemp6	set	127
  9978  007E                     ttemp	set	126
  9979  007E                     ttemp0	set	126
  9980  0081                     ttemp1	set	129
  9981  0084                     ttemp2	set	132
  9982  0087                     ttemp3	set	135
  9983  007F                     ttemp4	set	127
  9984  007E                     ltemp	set	126
  9985  007E                     ltemp0	set	126
  9986  0082                     ltemp1	set	130
  9987  0086                     ltemp2	set	134
  9988  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    62
    Data        0
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     18      23
    BANK1            80      0      77
    BANK2            80      0       0

Pointer List with Targets:

    sp__memcpy	PTR void  size(1) Largest target is 3
		 -> cfgRam(BANK0[3]), 

    S1574CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 3
		 -> cfgRam(BANK0[3]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 3
		 -> cfgRam(BANK0[3]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 
		 -> NULL(NULL[0]), cfgRam(BANK0[3]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    S333rfTrcvStatus_s$txPacketHandler	PTR unsigned char  size(1) Largest target is 0

    rfTrcvStatus.txPacketHandler	PTR unsigned char  size(1) Largest target is 0

    S333rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> rfTrcvStatus(BANK1[77]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 78
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[77]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _CfgInit->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _SoftI2cRepeatedStart->_SoftI2cNop
    _AdcSample->_AdcGetResult

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   24903
                                             14 BANK0      4     4      0
                          _AdcSample
                            _CfgInit
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              5     1      4    1917
                                              6 BANK0      5     1      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     831
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     831
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     831
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     831
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    5616
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (2) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (2) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          3     3      0   13114
                                             11 BANK0      3     3      0
                         _ExtIntInit
                       _HandlePacket
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    4670
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    1947
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         2     2      0    4491
                                              9 BANK0      2     2      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1231
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1532
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1342
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _CfgInit                                              0     0      0    1085
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1085
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (2) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               2     2      0    1033
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaNeedsReset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgInit
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaNeedsReset
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     12      17       6       28.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4D       8       96.2%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      6C      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Fri Jul  4 17:43:12 2014

                Mrf49xaTxPacket@crc 0023                         __CFG_CP$OFF 0000  
                                PL8 0742                                  l32 0346  
                                l42 039B                                  l34 0352  
                                l35 0354                                  l39 037E  
                                l79 0008                                 PL10 03EF  
                               PL20 0410                                 PL12 03FD  
                               PL22 0416                                 PL14 0765  
                               PL16 060F                                 PL18 040A  
             Mrf49xaTxPacket@packet 0025                                 l211 02B6  
                               l234 012E                                 l260 0F72  
                               l420 0127                                 l271 0F92  
                               l263 0F7C                                 l255 0F66  
                               l280 0FA9                                 l272 0F93  
                               l264 0F7D                                 l256 0F67  
                               l610 009A                                 l283 0FB3  
                               l275 0F9D                                 l267 0F87  
                               l259 0F71                                 l524 06DB  
                               l532 068B                                 l284 0FB4  
                               l276 0F9E                                 l268 0F88  
                               l444 01B9                                 l445 01D7  
                               l535 06B1                                 l279 0FA8  
                               l384 0710                                 l529 06A6  
                   ??_PwrSensorInit 0020                     ??_PwrSensorWake 0020  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                  i1Mrf49xaModeRx@k 0073                        __CFG_IESO$ON 0000  
            ??_SoftI2cRepeatedStart 0021                        __CFG_LVP$OFF 0000  
            Mrf49xaTxPacket@needAck 0021                                l3020 07C4  
                              l3100 0119                                l3016 07BD  
                              l3052 00BD                                l3044 00A6  
                              l2422 039D                                l3062 00D6  
                              l2264 03A9                                l3064 00D8  
                              l3056 00C7                                l2506 06EC  
                              l3090 0110                                l3074 00F5  
                              l3058 00CA                                l2516 06F7  
                              l2460 0299                                l2700 022F  
                              l3092 0111                                l2366 02CC  
                              l2710 0246                                l3078 00FD  
                              l2560 0330                                l2552 031E  
                              l2536 06FE                                l2712 024F  
                              l2704 023B                                l2562 0341  
                              l2490 06E9                                l2466 02A2  
                              l2714 0253                                l2706 023F  
                              l2650 01C8                                l2548 071E  
                              l2724 0269                                l2716 0257  
                              l2660 01E3                                l2732 027D  
                              l2644 01BC                                l3348 004C  
                              l2662 01E6                                l2654 01DB  
                              l2734 028C                                l2646 01C5  
                              l2750 018F                                l2822 0EDD  
                              l2814 07EB                                l2824 0000  
                              l2728 026B                                l2656 01DE  
                              l2752 0F0C                                l2690 020E  
                              l2682 0203                                l2666 01EC  
                              l2746 01A4                                l2906 0183  
                              l2850 0F00                                l3378 0085  
                              l2836 0F51                                l2780 06C4  
                              l2844 0EEC                                l2764 0F29  
                              l2758 0F15                     Mrf49TxByte@byte 0023  
                              l2960 0674                                l2696 0220  
                              l2864 0130                                l2928 0422  
                              l2944 0663                                l2890 0178  
                              l2956 066B                                l2972 0691  
                              l2884 015E                                l2966 068D  
                              l2958 0671                                l2894 0180  
                              l2888 016C                                l2978 06B5  
                              u2377 03AC                                u2387 07B8  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _main 0039                     __end_of_AdcInit 07F6  
                              fsr0h 0005                                fsr1h 0007  
                  ??_PwrSensorSleep 0020                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                   __end_of_CfgInit 03CA                                ltemp 007E  
                              start 0020                                ttemp 007E  
                              wtemp 007E                __end_of_HandlePacket 06B8  
           __end_ofi1_Mrf49xaModeRx 0550                       __CFG_MCLRE$ON 0000  
               __end_of_Mrf49RxByte 0299                       ?_ExtIntDeinit 0070  
               __end_of_Mrf49TxByte 0296                     ??_eepromRxBytes 0028  
                       _Mcp9800Read 02DB                 __end_of_Mrf49xaInit 018E  
               __end_of_Mrf49xaTick 012E                _Mrf49xaPacketPending 03DC  
                             ?_main 0070                               i1l211 0548  
                             i1l141 001B                               i1l142 001C  
                             i1l260 056F                               i1l271 0591  
                             i1l263 0579                               i1l255 0562  
                             i1l280 05AB                               i1l272 0593  
                             i1l264 057B                               i1l256 0563  
                             i1l283 05B5                               i1l275 059D  
                             i1l267 0585                               i1l259 056D  
                             i1l284 05B7                               i1l276 059F  
                             i1l268 0587                               i1l444 044C  
                             i1l445 046A                               i1l279 05A9  
                        _Mrf49RxCmd 0F57                          _Mrf49TxCmd 02C1  
                             _AdcGo 07D8                          _Mrf49SpiRx 0FBC  
                        _Mrf49SpiTx 0F61                          _Mrf49RxSts 03CF  
        __end_of_Mrf49xaAllocPacket 0669               __end_of_SoftI2cRxByte 03A9  
             __end_of_SoftI2cTxByte 0370                        main@humidity 002E  
             __size_of_Mcp9800Start 0019                  __size_of_AdcDeinit 0007  
           Mrf49xaTxPacket@response 0020                  __size_of_AdcIsBusy 0004  
                __size_of_AdcSample 002A                      __CFG_BOREN$OFF 0000  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F              Mcp9800Start@resolution 0024  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
               i1_Mrf49xaNeedsReset 0550                      ??_ExtIntDeinit 0070  
                   __initialization 0022                          _ExtIntInit 0F51  
                      __end_of_main 00A0  RfSendSampleWeatherNode@temperature 0026  
                    __CFG_LPBOR$OFF 0000               ?_Mrf49xaPacketPending 0070  
                      _Mcp9800Start 0305                              ??_main 002E  
              ?i1_Mrf49xaNeedsReset 0070                              ?_AdcGo 0070  
              __size_of_handleFwCmd 0024                __end_of_Mrf49xaTxAck 0742  
              __end_of_Mrf49xaServe 0291                       ??_PwrI2cSleep 0020  
                            _ADCON0 009D                              _ADCON1 009E  
                            _ADCON2 009F                           ??_AdcInit 0020  
                            _ADRESH 009C                              _ADRESL 009B  
                            _ANSELA 018C                              _ANSELB 018D  
                            _ANSELC 018E                           ??_CfgInit 0028  
                i1Mrf49xaServe@data 0075                              i1l3230 045B  
                            i1l3304 04FC                              i1l3240 0476  
                            i1l3312 0510                              i1l3224 044F  
                            i1l3242 0479                              i1l3234 046E  
                            i1l3314 051F                              i1l3226 0458  
                            i1l3308 04FE                              i1l3236 0471  
                            i1l3270 04A2                              i1l3262 0497  
                            i1l3246 047F                              i1l3280 04C2  
                            i1l3328 000B                              i1l3290 04D9  
                            i1l3292 04E2                              i1l3284 04CE  
                            i1l3276 04B5                              i1l3294 04E6  
                            i1l3286 04D2                              i1l3296 04EA  
                            i1l2986 0534                              _FVRCON 0117  
                            _OSCCON 0099                          _PwrI2cInit 07F6  
                AdcChSelect@channel 0020                          _PwrI2cWake 03EE  
                       _Mrf49RxByte 0296                         _Mrf49TxByte 0291  
                     ??_SoftI2cInit 0024                       ??_SoftI2cStop 0021  
         __size_of_Mrf49xaModeSleep 0022                      __CFG_PWRTE$OFF 0000  
                        _SoftI2cNop 03A9                        ?_AdcChSelect 0070  
                  ?i1_Mrf49xaModeRx 0070                         _Mrf49xaInit 012E  
                            _Sleepy 018E                         _Mrf49xaTick 00A0  
                        _PwrAdcInit 03E5                          _PwrAdcWake 07E5  
                     ??_PwrAdcSleep 0020                              _cfgRam 0032  
                   _Mrf49xaRxPacket 041B                   __end_of_AdcDeinit 0EE4  
                    __CFG_STVREN$ON 0000                   __end_of_AdcIsBusy 07DE  
                   _Mrf49xaTxPacket 06DC                              _extInt 0004  
                 __end_of_AdcSample 07D8                     _Mrf49xaShutdown 0F0B  
                        _PwrRfSleep 0F08               ??i1_Mrf49xaNeedsReset 0070  
                       ?_Mrf49RxCmd 0070                         ?_Mrf49TxCmd 0021  
                       ?_Mrf49SpiRx 0070                         ?_Mrf49SpiTx 0070  
                       ?_Mrf49RxSts 0070                  __size_of_PwrRfInit 0023  
                __size_of_PwrRfWake 0002               __size_of_HandlePacket 004F  
           __end_of__initialization 002E               __end_ofi1_Mrf49RxByte 052C  
               __end_of_PwrI2cSleep 03BF               __end_ofi1_Mrf49TxByte 0529  
                     __end_of_AdcGo 07DA     RfSendSampleWeatherNode@humidity 0028  
                       ?_ExtIntInit 0070                      __pcstackCOMMON 0070  
                  SoftI2cRxByte@ack 0021                 __end_of_SoftI2cInit 0039  
               __end_of_SoftI2cStop 02DB              ??_Mrf49xaPacketPending 0020  
           __size_ofi1_Mrf49xaServe 00E8                          __end_ofPL8 0765  
               __end_of_PwrAdcSleep 0EDD                             ??_AdcGo 0020  
                    _OPTION_REGbits 0095                        _HandlePacket 0669  
           Mrf49xaFreePacket@packet 0020                __end_of_ExtIntDeinit 0004  
                        __pbssBANK0 0032                          __pbssBANK1 00A0  
                       ?_PwrI2cInit 0070                         ?_PwrI2cWake 0070  
                     ?_SoftI2cStart 0070             __end_of_Mrf49xaRxPacket 0429  
           __end_of_Mrf49xaTxPacket 0722               __end_of_Mrf49xaModeRx 02BE  
             __end_of_Mrf49xaModeTx 0F08                         ?_SoftI2cNop 0070  
             __end_of_Mrf49xaReboot 042C                 __size_of_Mrf49RxCmd 000A  
                 __end_of_PwrRfInit 0F51                 __size_of_Mrf49TxCmd 000B  
                 __end_of_PwrRfWake 042B                 __size_of_Mrf49SpiRx 0044  
               __size_of_Mrf49SpiTx 005B                 __size_of_Mrf49RxSts 000D  
                        __pmaintext 0039                             ?_Sleepy 0020  
           __end_of_Mrf49xaShutdown 0F0C                         ?_PwrAdcInit 0070  
                       ?_PwrAdcWake 0070            ?_RfSendSampleWeatherNode 0026  
                      ?_Mcp9800Read 0024                          __pintentry 0004  
                           ?_extInt 0070               __size_of_Mrf49xaTxAck 0020  
             __size_of_Mrf49xaServe 00E8                         ?_PwrRfSleep 0070  
              HandlePacket@response 0029                   handleFwCmd@packet 0028  
             __end_of_PwrSensorInit 0430               __end_of_PwrSensorWake 0ED0  
                       _PwrI2cSleep 03BD                             _AdcInit 07EB  
               __size_of_ExtIntInit 0006       __size_of_SoftI2cRepeatedStart 0015  
                           _CfgInit 03C2                          __stringtab 076F  
                    ??_SoftI2cStart 0021                  _Mrf49xaAllocPacket 065C  
                  _Mrf49xaModeSleep 0F0C                         _SoftI2cInit 0031  
                     ?i1_Mrf49RxCmd 0070                       ?i1_Mrf49TxCmd 0071  
                     ?i1_Mrf49SpiRx 0070                       ?i1_Mrf49SpiTx 0070  
                       _SoftI2cStop 02CC                       ?i1_Mrf49RxSts 0070  
                           Sleepy@b 0023                        _Mrf49xaTxAck 0722  
                      _Mrf49xaServe 01A9                     __size_of_Sleepy 001B  
              eepromRxBytes@address 0024                         _PwrAdcSleep 0ED6  
               ?_Mrf49xaAllocPacket 0070                __size_of_AdcChSelect 0007  
             __end_of_eepromRxBytes 0342                     __size_of_extInt 001C  
                 _mrfRegset_InitCnt 0770                             __ptext1 0618  
                           __ptext2 065C                             __ptext3 0ECD  
                           __ptext4 03BF                             __ptext5 042C  
                           __ptext6 0429                             __ptext7 042B  
                           __ptext8 0F08                             __ptext9 0F0B  
               __size_of_PwrI2cInit 0009                 __size_of_PwrI2cWake 0001  
                     ?_AdcGetResult 0020                 __size_of_SoftI2cNop 0007  
              ??_Mrf49xaAllocPacket 0020                 __size_of_PwrAdcInit 0009  
               __size_of_PwrAdcWake 0006                             clrloop0 0ED1  
              end_of_initialization 002E                        ?_Mrf49RxByte 0070  
                      ?_Mrf49TxByte 0070                      ??i1_Mrf49RxCmd 0071  
                    ??i1_Mrf49TxCmd 0072                      ??i1_Mrf49SpiRx 0070  
                    ??i1_Mrf49SpiTx 0070                      ??i1_Mrf49RxSts 0071  
                  ?_Mrf49xaRxPacket 0070                 __size_of_PwrRfSleep 0003  
   __end_of_RfSendSampleWeatherNode 065C                    ?_Mrf49xaTxPacket 0020  
                      ?_Mrf49xaInit 0070                __end_of_mrfRegset_Rx 07A0  
              __end_of_mrfRegset_Tx 07A8                        ?_Mrf49xaTick 0070  
                  ?_Mrf49xaShutdown 0070              __size_of_SoftI2cRxByte 0039  
            __size_of_SoftI2cTxByte 002E                      i1_Mrf49xaServe 043C  
         __end_of_mrfRegset_InitCnt 0771             __size_of_PwrSensorSleep 0003  
                     ??_handleFwCmd 0028                           _PORTAbits 000C  
                         _PORTBbits 000D                           _PORTCbits 000E  
                         _AdcDeinit 0EDD               __size_of_ExtIntDeinit 0002  
                         _AdcIsBusy 07DA                        ??_Mrf49RxCmd 0021  
                      ??_Mrf49TxCmd 0022                        ??_Mrf49SpiRx 0020  
                      ??_Mrf49SpiTx 0020                        ??_Mrf49RxSts 0021  
                         _AdcSample 07AE                    __CFG_FOSC$INTOSC 0000  
                    ??_AdcGetResult 0022                           _TRISAbits 008C  
                         _TRISBbits 008D                           _TRISCbits 008E  
                       AdcSample@ch 0025                      Mrf49SpiRx@data 0020  
                    Mrf49SpiTx@byte 0020                  __end_of_Mrf49RxCmd 0F61  
                __end_of_Mrf49TxCmd 02CC              __end_ofi1_Mrf49xaServe 0524  
                      ??_ExtIntInit 0020                  __end_of_Mrf49SpiRx 1000  
                __end_of_Mrf49SpiTx 0FBC                  __end_of_Mrf49RxSts 03DC  
                      _ExtIntDeinit 0002         __end_ofi1_Mrf49xaNeedsReset 0553  
                    __end_of_Sleepy 01A9                   SoftI2cRxByte@data 0022  
              __size_of_Mcp9800Read 0015                   eepromRxBytes@data 0026  
              __end_of_SoftI2cStart 03BD            __size_ofi1_Mrf49xaModeRx 0024  
                        ?_AdcDeinit 0070                      __end_of_extInt 0020  
                 eepromRxBytes@size 0027                          ?_AdcIsBusy 0070  
        __end_of_mrfRegset_SleepCnt 0773                          ?_AdcSample 0022  
                       __end_ofPL10 03FD                         __end_ofPL20 0416  
                       __end_ofPL12 040A                         __end_ofPL22 041B  
                       __end_ofPL14 076F                         __end_ofPL16 0618  
                       __end_ofPL18 0410                 start_initialization 0022  
                     _SoftI2cRxByte 0370                 __end_of_handleFwCmd 06DC  
                     _SoftI2cTxByte 0342                  __end_of_ExtIntInit 0F57  
                 SoftI2cTxByte@data 0022                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002A  
                      ??_SoftI2cNop 0020                            ??_Sleepy 0022  
                      ??_PwrAdcInit 0020                        ??_PwrAdcWake 0020  
                   ?i1_Mrf49xaServe 0070                     _mrfRegset_RxCnt 0771  
                   _mrfRegset_TxCnt 0773                     _mrfRegset_Sleep 07A8  
                         _PwrRfInit 0F2E                           _PwrRfWake 0429  
                          ??_extInt 0076       __size_of_Mrf49xaPacketPending 0009  
                      ??_PwrRfSleep 0024              __size_ofi1_Mrf49RxByte 0003  
            __size_ofi1_Mrf49TxByte 0005            __end_of_Mrf49xaModeSleep 0F2E  
                __end_of_PwrI2cInit 07FF                __end_ofi1_Mrf49RxCmd 043C  
              __end_ofi1_Mrf49TxCmd 055D                  __end_of_PwrI2cWake 03EF  
              __end_ofi1_Mrf49SpiRx 060F                __end_ofi1_Mrf49SpiTx 05BF  
              __end_ofi1_Mrf49RxSts 05CC                           ___latbits 0001  
                     __pcstackBANK0 0020                      ?_SoftI2cRxByte 0070  
  __size_of_RfSendSampleWeatherNode 0044                      ?_SoftI2cTxByte 0070  
                 i1Mrf49TxByte@byte 0073                        ?_PwrI2cSleep 0070  
                __end_of_SoftI2cNop 03B0                            ?_AdcInit 0070  
                __end_of_PwrAdcInit 03EE                            ?_CfgInit 0070  
                __end_of_PwrAdcWake 07EB                        _rfTrcvStatus 00A0  
                      ?_SoftI2cInit 0070                        ?_SoftI2cStop 0070  
              __size_of_Mrf49RxByte 0003                  __end_of_PwrRfSleep 0F0B  
              __size_of_Mrf49TxByte 0005                __end_of_AdcGetResult 0000  
      __end_of_SoftI2cRepeatedStart 0305                        ?_PwrAdcSleep 0070  
              __size_of_Mrf49xaInit 0060                __size_of_Mrf49xaTick 008E  
                        ?_PwrRfInit 0070                          ?_PwrRfWake 0070  
                    _PwrSensorSleep 03BF                       ?_Mcp9800Start 0070  
                         __pstrings 076F                         ??_AdcDeinit 0020  
                       ??_AdcIsBusy 0020                         _handleFwCmd 06B8  
                       ??_AdcSample 0024                      __size_of_AdcGo 0002  
            __size_of_Mrf49xaModeRx 0025              __size_of_Mrf49xaModeTx 0024  
                      _mrfRegset_Rx 0794                        _mrfRegset_Tx 07A0  
            __size_of_Mrf49xaReboot 0001                   ??i1_Mrf49xaModeRx 0073  
                  __CFG_WDTE$SWDTEN 0000                            _LATAbits 010C  
                          _LATBbits 010D                            _LATCbits 010E  
                     i1_Mrf49RxByte 0529             __end_of_mrfRegset_RxCnt 0772  
                     i1_Mrf49TxByte 0524             __end_of_mrfRegset_TxCnt 0774  
           __end_of_mrfRegset_Sleep 07AE                           clear_ram0 0ED0  
                     ??_AdcChSelect 0020                         _mrf49Status 0035  
                 _Mrf49xaFreePacket 03CA                      Mrf49xaModeRx@k 0023  
                    Mrf49xaModeTx@k 0023              __end_of_PwrSensorSleep 03C2  
             __size_of_SoftI2cStart 000D              __size_of_PwrSensorInit 0004  
            __size_of_PwrSensorWake 0003                       Mrf49RxCmd@cmd 0021  
                ?_Mrf49xaFreePacket 0070                       Mrf49RxCmd@val 0022  
                    ??_Mcp9800Start 0024                       Mrf49TxCmd@cmd 0022  
                     Mrf49TxCmd@val 0021                 ??_Mrf49xaFreePacket 0020  
                   ??_SoftI2cRxByte 0021                   _Mrf49xaNeedsReset 02BE  
                   ??_SoftI2cTxByte 0021                            _WPUAbits 020C  
                ?_Mrf49xaNeedsReset 0070         __size_of_Mrf49xaAllocPacket 000D  
                  __size_of_AdcInit 000B                    __size_of_CfgInit 0008  
               ??_Mrf49xaNeedsReset 0020              __size_of_eepromRxBytes 0024  
                    ?i1_Mrf49RxByte 0070                        _SoftI2cStart 03B0  
                    ?i1_Mrf49TxByte 0070           __end_of_Mrf49xaFreePacket 03CF  
                         extInt@ofw 0077                            Sleepy@ms 0020  
                     _Mrf49xaModeRx 0299                       _Mrf49xaModeTx 0EE4  
                     _Mrf49xaReboot 042B                      _mrfRegset_Init 0774  
                   ?_PwrSensorSleep 0070                         ??_PwrRfInit 0027  
                       ??_PwrRfWake 0024            __size_of_Mrf49xaRxPacket 000E  
             __size_ofi1_Mrf49RxCmd 000C               __size_ofi1_Mrf49TxCmd 000A  
             __size_ofi1_Mrf49SpiRx 0043               __size_ofi1_Mrf49SpiTx 0062  
                  i1Mrf49SpiRx@data 0070               __size_ofi1_Mrf49RxSts 000D  
               __end_of_AdcChSelect 07E5            __size_of_Mrf49xaTxPacket 0046  
                  i1Mrf49SpiTx@byte 0070                      SoftI2cRxByte@i 0023  
         __end_of_Mrf49xaNeedsReset 02C1                  __end_of__stringtab 0770  
          __size_of_Mrf49xaShutdown 0001                      SoftI2cTxByte@i 0023  
           _RfSendSampleWeatherNode 0618                       ?_HandlePacket 0070  
                          __ptext10 0F0C                            __ptext11 0F2E  
                          __ptext20 03E5                            __ptext12 03EE  
                          __ptext21 00A0                            __ptext13 03BD  
                          __ptext30 0291                            __ptext22 041B  
                          __ptext14 07F6                            __ptext31 02C1  
                          __ptext23 03DC                            __ptext15 0031  
                          __ptext40 06DC                            __ptext32 03CF  
                          __ptext24 0EE4                            __ptext16 07E5  
                          __ptext41 03CA                            __ptext33 0296  
                          __ptext25 012E                            __ptext17 07EB  
                          __ptext50 0370                            __ptext42 0F51  
                          __ptext34 0F57                            __ptext26 018E  
                          __ptext18 0ED6                            __ptext51 02F0  
                          __ptext43 0305                            __ptext35 0F61  
                          __ptext27 01A9                            __ptext19 0EDD  
                          __ptext60 0550                            __ptext52 03A9  
                          __ptext44 02DB                            __ptext36 0FBC  
                          __ptext28 02BE                            __ptext61 052C  
                          __ptext53 07AE                            __ptext45 03C2  
                          __ptext37 0669                            __ptext29 0299  
                          __ptext62 0524                            __ptext54 07DA  
                          __ptext46 031E                            __ptext38 06B8  
                          __ptext63 0553                            __ptext55 07D8  
                          __ptext47 0342                            __ptext39 0722  
                          __ptext64 05BF                            __ptext56 0000  
                          __ptext48 02CC                            __ptext65 0529  
                          __ptext57 07DE                            __ptext49 03B0  
                     _PwrSensorInit 042C                            __ptext66 0430  
                          __ptext67 055D                            __ptext59 043C  
                          __ptext68 05CC                            __ptext69 0002  
                     _PwrSensorWake 0ECD                _SoftI2cRepeatedStart 02F0  
              __size_of_PwrI2cSleep 0002               __size_of_AdcGetResult 0000  
                _mrfRegset_SleepCnt 0772                    Mcp9800Read@tempH 0026  
                  Mcp9800Read@tempL 0027                    ??i1_Mrf49xaServe 0074  
                     __size_of_main 0067                        i1_Mrf49RxCmd 0430  
            __end_of_mrfRegset_Init 0794                  Mrf49xaTxAck@packet 0026  
                      i1_Mrf49TxCmd 0553                        i1_Mrf49SpiRx 05CC  
                      i1_Mrf49SpiTx 055D                      ?_Mrf49xaModeRx 0070  
                    ?_Mrf49xaModeTx 0070                        i1_Mrf49RxSts 05BF  
                    ?_Mrf49xaReboot 0070                __size_of_SoftI2cInit 0008  
              __size_of_SoftI2cStop 000F                       ??_Mcp9800Read 0026  
              __size_of_PwrAdcSleep 0007                       _eepromRxBytes 031E  
                 Mrf49xaModeSleep@k 0023                     i1Mrf49RxCmd@cmd 0071  
                   main@temperature 0030                     i1Mrf49RxCmd@val 0072  
                    ??_HandlePacket 0029        __size_ofi1_Mrf49xaNeedsReset 0003  
                Mrf49xaTick@timeout 002C                          _INTCONbits 000B  
                 ?_Mrf49xaModeSleep 0070                     i1Mrf49TxCmd@cmd 0072  
                   i1Mrf49TxCmd@val 0071                      ?_PwrSensorInit 0070  
                      _AdcGetResult 0000                      ?_PwrSensorWake 0070  
                ??_Mrf49xaModeSleep 0023               ?_SoftI2cRepeatedStart 0070  
                   ??i1_Mrf49RxByte 0073                            intlevel1 0000  
                   ??i1_Mrf49TxByte 0073        __end_of_Mrf49xaPacketPending 03E5  
              __end_of_Mcp9800Start 031E       RfSendSampleWeatherNode@packet 002A  
                 __CFG_CLKOUTEN$OFF 0000          __size_of_Mrf49xaFreePacket 0005  
                     ?_Mrf49xaTxAck 0070                         _AdcChSelect 07DE  
                      Mrf49xaInit@k 0026                       ?_Mrf49xaServe 0070  
                 Mrf49xaTick@packet 002D                      ?_eepromRxBytes 0024  
                   i1_Mrf49xaModeRx 052C           ??_RfSendSampleWeatherNode 002A  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 02F0                   ??_Mrf49xaRxPacket 0020  
                 ??_Mrf49xaTxPacket 0022                          _WDTCONbits 0097  
                 ??_Mrf49xaShutdown 0024                       ??_Mrf49RxByte 0023  
                     ??_Mrf49TxByte 0023                     ??_Mrf49xaModeRx 0023  
                   ??_Mrf49xaModeTx 0023                     ??_Mrf49xaReboot 0024  
                    ??_Mrf49xaTxAck 0026                    Mrf49xaServe@data 0025  
                    ??_Mrf49xaServe 0024                       ??_Mrf49xaInit 0026  
                     ??_Mrf49xaTick 002B                    Mrf49xaTxPacket@i 0024  

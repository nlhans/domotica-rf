

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Sun May 18 15:17:18 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text8,local,class=CODE,merge=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text21,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text43,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  008C                     	;# 
    47  008D                     	;# 
    48  008E                     	;# 
    49  0091                     	;# 
    50  0092                     	;# 
    51  0093                     	;# 
    52  0095                     	;# 
    53  0096                     	;# 
    54  0097                     	;# 
    55  0099                     	;# 
    56  009A                     	;# 
    57  009B                     	;# 
    58  009B                     	;# 
    59  009C                     	;# 
    60  009D                     	;# 
    61  009E                     	;# 
    62  009F                     	;# 
    63  010C                     	;# 
    64  010D                     	;# 
    65  010E                     	;# 
    66  0111                     	;# 
    67  0112                     	;# 
    68  0113                     	;# 
    69  0114                     	;# 
    70  0115                     	;# 
    71  0116                     	;# 
    72  0117                     	;# 
    73  0118                     	;# 
    74  0119                     	;# 
    75  011D                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  018E                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0194                     	;# 
    85  0195                     	;# 
    86  0196                     	;# 
    87  0199                     	;# 
    88  019A                     	;# 
    89  019B                     	;# 
    90  019B                     	;# 
    91  019C                     	;# 
    92  019D                     	;# 
    93  019E                     	;# 
    94  019F                     	;# 
    95  020C                     	;# 
    96  020D                     	;# 
    97  0211                     	;# 
    98  0211                     	;# 
    99  0212                     	;# 
   100  0212                     	;# 
   101  0213                     	;# 
   102  0213                     	;# 
   103  0214                     	;# 
   104  0214                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0216                     	;# 
   109  0216                     	;# 
   110  0217                     	;# 
   111  0217                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0394                     	;# 
   116  0395                     	;# 
   117  0396                     	;# 
   118  0498                     	;# 
   119  0498                     	;# 
   120  0499                     	;# 
   121  049A                     	;# 
   122  049B                     	;# 
   123  049B                     	;# 
   124  049C                     	;# 
   125  049E                     	;# 
   126  049F                     	;# 
   127  0611                     	;# 
   128  0612                     	;# 
   129  0613                     	;# 
   130  0613                     	;# 
   131  0614                     	;# 
   132  0615                     	;# 
   133  0616                     	;# 
   134  0616                     	;# 
   135  0617                     	;# 
   136  0618                     	;# 
   137  0619                     	;# 
   138  0619                     	;# 
   139  061A                     	;# 
   140  061B                     	;# 
   141  061C                     	;# 
   142  061C                     	;# 
   143  0691                     	;# 
   144  0692                     	;# 
   145  0693                     	;# 
   146  0694                     	;# 
   147  0695                     	;# 
   148  0F0F                     	;# 
   149  0F10                     	;# 
   150  0F11                     	;# 
   151  0F12                     	;# 
   152  0F13                     	;# 
   153  0F14                     	;# 
   154  0F15                     	;# 
   155  0F16                     	;# 
   156  0F17                     	;# 
   157  0F18                     	;# 
   158  0F19                     	;# 
   159  0F1A                     	;# 
   160  0F1B                     	;# 
   161  0F1C                     	;# 
   162  0F1D                     	;# 
   163  0F1E                     	;# 
   164  0F1F                     	;# 
   165  0F20                     	;# 
   166  0F21                     	;# 
   167  0F22                     	;# 
   168  0F23                     	;# 
   169  0F24                     	;# 
   170  0F25                     	;# 
   171  0F26                     	;# 
   172  0F27                     	;# 
   173  0F28                     	;# 
   174  0F29                     	;# 
   175  0F2A                     	;# 
   176  0F2B                     	;# 
   177  0F2C                     	;# 
   178  0F2D                     	;# 
   179  0F2E                     	;# 
   180  0F2F                     	;# 
   181  0F8C                     	;# 
   182  0F8D                     	;# 
   183  0F91                     	;# 
   184  0F95                     	;# 
   185  0F96                     	;# 
   186  0F97                     	;# 
   187  0F9C                     	;# 
   188  0F9D                     	;# 
   189  0F9E                     	;# 
   190  0FE3                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019C                     	;# 
   275  019D                     	;# 
   276  019E                     	;# 
   277  019F                     	;# 
   278  020C                     	;# 
   279  020D                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0216                     	;# 
   292  0216                     	;# 
   293  0217                     	;# 
   294  0217                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  0393                     	;# 
   298  0394                     	;# 
   299  0395                     	;# 
   300  0396                     	;# 
   301  0498                     	;# 
   302  0498                     	;# 
   303  0499                     	;# 
   304  049A                     	;# 
   305  049B                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0611                     	;# 
   311  0612                     	;# 
   312  0613                     	;# 
   313  0613                     	;# 
   314  0614                     	;# 
   315  0615                     	;# 
   316  0616                     	;# 
   317  0616                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0F0F                     	;# 
   332  0F10                     	;# 
   333  0F11                     	;# 
   334  0F12                     	;# 
   335  0F13                     	;# 
   336  0F14                     	;# 
   337  0F15                     	;# 
   338  0F16                     	;# 
   339  0F17                     	;# 
   340  0F18                     	;# 
   341  0F19                     	;# 
   342  0F1A                     	;# 
   343  0F1B                     	;# 
   344  0F1C                     	;# 
   345  0F1D                     	;# 
   346  0F1E                     	;# 
   347  0F1F                     	;# 
   348  0F20                     	;# 
   349  0F21                     	;# 
   350  0F22                     	;# 
   351  0F23                     	;# 
   352  0F24                     	;# 
   353  0F25                     	;# 
   354  0F26                     	;# 
   355  0F27                     	;# 
   356  0F28                     	;# 
   357  0F29                     	;# 
   358  0F2A                     	;# 
   359  0F2B                     	;# 
   360  0F2C                     	;# 
   361  0F2D                     	;# 
   362  0F2E                     	;# 
   363  0F2F                     	;# 
   364  0F8C                     	;# 
   365  0F8D                     	;# 
   366  0F91                     	;# 
   367  0F95                     	;# 
   368  0F96                     	;# 
   369  0F97                     	;# 
   370  0F9C                     	;# 
   371  0F9D                     	;# 
   372  0F9E                     	;# 
   373  0FE3                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020C                     	;# 
   462  020D                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0391                     	;# 
   479  0392                     	;# 
   480  0393                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0498                     	;# 
   485  0498                     	;# 
   486  0499                     	;# 
   487  049A                     	;# 
   488  049B                     	;# 
   489  049B                     	;# 
   490  049C                     	;# 
   491  049E                     	;# 
   492  049F                     	;# 
   493  0611                     	;# 
   494  0612                     	;# 
   495  0613                     	;# 
   496  0613                     	;# 
   497  0614                     	;# 
   498  0615                     	;# 
   499  0616                     	;# 
   500  0616                     	;# 
   501  0617                     	;# 
   502  0618                     	;# 
   503  0619                     	;# 
   504  0619                     	;# 
   505  061A                     	;# 
   506  061B                     	;# 
   507  061C                     	;# 
   508  061C                     	;# 
   509  0691                     	;# 
   510  0692                     	;# 
   511  0693                     	;# 
   512  0694                     	;# 
   513  0695                     	;# 
   514  0F0F                     	;# 
   515  0F10                     	;# 
   516  0F11                     	;# 
   517  0F12                     	;# 
   518  0F13                     	;# 
   519  0F14                     	;# 
   520  0F15                     	;# 
   521  0F16                     	;# 
   522  0F17                     	;# 
   523  0F18                     	;# 
   524  0F19                     	;# 
   525  0F1A                     	;# 
   526  0F1B                     	;# 
   527  0F1C                     	;# 
   528  0F1D                     	;# 
   529  0F1E                     	;# 
   530  0F1F                     	;# 
   531  0F20                     	;# 
   532  0F21                     	;# 
   533  0F22                     	;# 
   534  0F23                     	;# 
   535  0F24                     	;# 
   536  0F25                     	;# 
   537  0F26                     	;# 
   538  0F27                     	;# 
   539  0F28                     	;# 
   540  0F29                     	;# 
   541  0F2A                     	;# 
   542  0F2B                     	;# 
   543  0F2C                     	;# 
   544  0F2D                     	;# 
   545  0F2E                     	;# 
   546  0F2F                     	;# 
   547  0F8C                     	;# 
   548  0F8D                     	;# 
   549  0F91                     	;# 
   550  0F95                     	;# 
   551  0F96                     	;# 
   552  0F97                     	;# 
   553  0F9C                     	;# 
   554  0F9D                     	;# 
   555  0F9E                     	;# 
   556  0FE3                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011D                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018E                     	;# 
   628  0191                     	;# 
   629  0191                     	;# 
   630  0192                     	;# 
   631  0193                     	;# 
   632  0193                     	;# 
   633  0194                     	;# 
   634  0195                     	;# 
   635  0196                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020D                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0391                     	;# 
   662  0392                     	;# 
   663  0393                     	;# 
   664  0394                     	;# 
   665  0395                     	;# 
   666  0396                     	;# 
   667  0498                     	;# 
   668  0498                     	;# 
   669  0499                     	;# 
   670  049A                     	;# 
   671  049B                     	;# 
   672  049B                     	;# 
   673  049C                     	;# 
   674  049E                     	;# 
   675  049F                     	;# 
   676  0611                     	;# 
   677  0612                     	;# 
   678  0613                     	;# 
   679  0613                     	;# 
   680  0614                     	;# 
   681  0615                     	;# 
   682  0616                     	;# 
   683  0616                     	;# 
   684  0617                     	;# 
   685  0618                     	;# 
   686  0619                     	;# 
   687  0619                     	;# 
   688  061A                     	;# 
   689  061B                     	;# 
   690  061C                     	;# 
   691  061C                     	;# 
   692  0691                     	;# 
   693  0692                     	;# 
   694  0693                     	;# 
   695  0694                     	;# 
   696  0695                     	;# 
   697  0F0F                     	;# 
   698  0F10                     	;# 
   699  0F11                     	;# 
   700  0F12                     	;# 
   701  0F13                     	;# 
   702  0F14                     	;# 
   703  0F15                     	;# 
   704  0F16                     	;# 
   705  0F17                     	;# 
   706  0F18                     	;# 
   707  0F19                     	;# 
   708  0F1A                     	;# 
   709  0F1B                     	;# 
   710  0F1C                     	;# 
   711  0F1D                     	;# 
   712  0F1E                     	;# 
   713  0F1F                     	;# 
   714  0F20                     	;# 
   715  0F21                     	;# 
   716  0F22                     	;# 
   717  0F23                     	;# 
   718  0F24                     	;# 
   719  0F25                     	;# 
   720  0F26                     	;# 
   721  0F27                     	;# 
   722  0F28                     	;# 
   723  0F29                     	;# 
   724  0F2A                     	;# 
   725  0F2B                     	;# 
   726  0F2C                     	;# 
   727  0F2D                     	;# 
   728  0F2E                     	;# 
   729  0F2F                     	;# 
   730  0F8C                     	;# 
   731  0F8D                     	;# 
   732  0F91                     	;# 
   733  0F95                     	;# 
   734  0F96                     	;# 
   735  0F97                     	;# 
   736  0F9C                     	;# 
   737  0F9D                     	;# 
   738  0F9E                     	;# 
   739  0FE3                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  0011                     	;# 
   767  0012                     	;# 
   768  0013                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  0091                     	;# 
   782  0092                     	;# 
   783  0093                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0111                     	;# 
   799  0112                     	;# 
   800  0113                     	;# 
   801  0114                     	;# 
   802  0115                     	;# 
   803  0116                     	;# 
   804  0117                     	;# 
   805  0118                     	;# 
   806  0119                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0199                     	;# 
   820  019A                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019C                     	;# 
   824  019D                     	;# 
   825  019E                     	;# 
   826  019F                     	;# 
   827  020C                     	;# 
   828  020D                     	;# 
   829  0211                     	;# 
   830  0211                     	;# 
   831  0212                     	;# 
   832  0212                     	;# 
   833  0213                     	;# 
   834  0213                     	;# 
   835  0214                     	;# 
   836  0214                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0216                     	;# 
   841  0216                     	;# 
   842  0217                     	;# 
   843  0217                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  0394                     	;# 
   848  0395                     	;# 
   849  0396                     	;# 
   850  0498                     	;# 
   851  0498                     	;# 
   852  0499                     	;# 
   853  049A                     	;# 
   854  049B                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049E                     	;# 
   858  049F                     	;# 
   859  0611                     	;# 
   860  0612                     	;# 
   861  0613                     	;# 
   862  0613                     	;# 
   863  0614                     	;# 
   864  0615                     	;# 
   865  0616                     	;# 
   866  0616                     	;# 
   867  0617                     	;# 
   868  0618                     	;# 
   869  0619                     	;# 
   870  0619                     	;# 
   871  061A                     	;# 
   872  061B                     	;# 
   873  061C                     	;# 
   874  061C                     	;# 
   875  0691                     	;# 
   876  0692                     	;# 
   877  0693                     	;# 
   878  0694                     	;# 
   879  0695                     	;# 
   880  0F0F                     	;# 
   881  0F10                     	;# 
   882  0F11                     	;# 
   883  0F12                     	;# 
   884  0F13                     	;# 
   885  0F14                     	;# 
   886  0F15                     	;# 
   887  0F16                     	;# 
   888  0F17                     	;# 
   889  0F18                     	;# 
   890  0F19                     	;# 
   891  0F1A                     	;# 
   892  0F1B                     	;# 
   893  0F1C                     	;# 
   894  0F1D                     	;# 
   895  0F1E                     	;# 
   896  0F1F                     	;# 
   897  0F20                     	;# 
   898  0F21                     	;# 
   899  0F22                     	;# 
   900  0F23                     	;# 
   901  0F24                     	;# 
   902  0F25                     	;# 
   903  0F26                     	;# 
   904  0F27                     	;# 
   905  0F28                     	;# 
   906  0F29                     	;# 
   907  0F2A                     	;# 
   908  0F2B                     	;# 
   909  0F2C                     	;# 
   910  0F2D                     	;# 
   911  0F2E                     	;# 
   912  0F2F                     	;# 
   913  0F8C                     	;# 
   914  0F8D                     	;# 
   915  0F91                     	;# 
   916  0F95                     	;# 
   917  0F96                     	;# 
   918  0F97                     	;# 
   919  0F9C                     	;# 
   920  0F9D                     	;# 
   921  0F9E                     	;# 
   922  0FE3                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0013                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  009F                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0111                     	;# 
   982  0112                     	;# 
   983  0113                     	;# 
   984  0114                     	;# 
   985  0115                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  0118                     	;# 
   989  0119                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020C                     	;# 
  1011  020D                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0391                     	;# 
  1028  0392                     	;# 
  1029  0393                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0498                     	;# 
  1034  0498                     	;# 
  1035  0499                     	;# 
  1036  049A                     	;# 
  1037  049B                     	;# 
  1038  049B                     	;# 
  1039  049C                     	;# 
  1040  049E                     	;# 
  1041  049F                     	;# 
  1042  0611                     	;# 
  1043  0612                     	;# 
  1044  0613                     	;# 
  1045  0613                     	;# 
  1046  0614                     	;# 
  1047  0615                     	;# 
  1048  0616                     	;# 
  1049  0616                     	;# 
  1050  0617                     	;# 
  1051  0618                     	;# 
  1052  0619                     	;# 
  1053  0619                     	;# 
  1054  061A                     	;# 
  1055  061B                     	;# 
  1056  061C                     	;# 
  1057  061C                     	;# 
  1058  0691                     	;# 
  1059  0692                     	;# 
  1060  0693                     	;# 
  1061  0694                     	;# 
  1062  0695                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F8C                     	;# 
  1097  0F8D                     	;# 
  1098  0F91                     	;# 
  1099  0F95                     	;# 
  1100  0F96                     	;# 
  1101  0F97                     	;# 
  1102  0F9C                     	;# 
  1103  0F9D                     	;# 
  1104  0F9E                     	;# 
  1105  0FE3                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000D                     	;# 
  1131  000E                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  0091                     	;# 
  1148  0092                     	;# 
  1149  0093                     	;# 
  1150  0095                     	;# 
  1151  0096                     	;# 
  1152  0097                     	;# 
  1153  0099                     	;# 
  1154  009A                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  011D                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0391                     	;# 
  1211  0392                     	;# 
  1212  0393                     	;# 
  1213  0394                     	;# 
  1214  0395                     	;# 
  1215  0396                     	;# 
  1216  0498                     	;# 
  1217  0498                     	;# 
  1218  0499                     	;# 
  1219  049A                     	;# 
  1220  049B                     	;# 
  1221  049B                     	;# 
  1222  049C                     	;# 
  1223  049E                     	;# 
  1224  049F                     	;# 
  1225  0611                     	;# 
  1226  0612                     	;# 
  1227  0613                     	;# 
  1228  0613                     	;# 
  1229  0614                     	;# 
  1230  0615                     	;# 
  1231  0616                     	;# 
  1232  0616                     	;# 
  1233  0617                     	;# 
  1234  0618                     	;# 
  1235  0619                     	;# 
  1236  0619                     	;# 
  1237  061A                     	;# 
  1238  061B                     	;# 
  1239  061C                     	;# 
  1240  061C                     	;# 
  1241  0691                     	;# 
  1242  0692                     	;# 
  1243  0693                     	;# 
  1244  0694                     	;# 
  1245  0695                     	;# 
  1246  0F0F                     	;# 
  1247  0F10                     	;# 
  1248  0F11                     	;# 
  1249  0F12                     	;# 
  1250  0F13                     	;# 
  1251  0F14                     	;# 
  1252  0F15                     	;# 
  1253  0F16                     	;# 
  1254  0F17                     	;# 
  1255  0F18                     	;# 
  1256  0F19                     	;# 
  1257  0F1A                     	;# 
  1258  0F1B                     	;# 
  1259  0F1C                     	;# 
  1260  0F1D                     	;# 
  1261  0F1E                     	;# 
  1262  0F1F                     	;# 
  1263  0F20                     	;# 
  1264  0F21                     	;# 
  1265  0F22                     	;# 
  1266  0F23                     	;# 
  1267  0F24                     	;# 
  1268  0F25                     	;# 
  1269  0F26                     	;# 
  1270  0F27                     	;# 
  1271  0F28                     	;# 
  1272  0F29                     	;# 
  1273  0F2A                     	;# 
  1274  0F2B                     	;# 
  1275  0F2C                     	;# 
  1276  0F2D                     	;# 
  1277  0F2E                     	;# 
  1278  0F2F                     	;# 
  1279  0F8C                     	;# 
  1280  0F8D                     	;# 
  1281  0F91                     	;# 
  1282  0F95                     	;# 
  1283  0F96                     	;# 
  1284  0F97                     	;# 
  1285  0F9C                     	;# 
  1286  0F9D                     	;# 
  1287  0F9E                     	;# 
  1288  0FE3                     	;# 
  1289  0FE4                     	;# 
  1290  0FE5                     	;# 
  1291  0FE6                     	;# 
  1292  0FE7                     	;# 
  1293  0FE8                     	;# 
  1294  0FE9                     	;# 
  1295  0FEA                     	;# 
  1296  0FEB                     	;# 
  1297  0FED                     	;# 
  1298  0FEE                     	;# 
  1299  0FEF                     	;# 
  1300  0000                     	;# 
  1301  0001                     	;# 
  1302  0002                     	;# 
  1303  0003                     	;# 
  1304  0004                     	;# 
  1305  0005                     	;# 
  1306  0006                     	;# 
  1307  0007                     	;# 
  1308  0008                     	;# 
  1309  0009                     	;# 
  1310  000A                     	;# 
  1311  000B                     	;# 
  1312  000C                     	;# 
  1313  000D                     	;# 
  1314  000E                     	;# 
  1315  0011                     	;# 
  1316  0012                     	;# 
  1317  0013                     	;# 
  1318  0015                     	;# 
  1319  0016                     	;# 
  1320  0016                     	;# 
  1321  0017                     	;# 
  1322  0018                     	;# 
  1323  0019                     	;# 
  1324  001A                     	;# 
  1325  001B                     	;# 
  1326  001C                     	;# 
  1327  008C                     	;# 
  1328  008D                     	;# 
  1329  008E                     	;# 
  1330  0091                     	;# 
  1331  0092                     	;# 
  1332  0093                     	;# 
  1333  0095                     	;# 
  1334  0096                     	;# 
  1335  0097                     	;# 
  1336  0099                     	;# 
  1337  009A                     	;# 
  1338  009B                     	;# 
  1339  009B                     	;# 
  1340  009C                     	;# 
  1341  009D                     	;# 
  1342  009E                     	;# 
  1343  009F                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0111                     	;# 
  1348  0112                     	;# 
  1349  0113                     	;# 
  1350  0114                     	;# 
  1351  0115                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  0118                     	;# 
  1355  0119                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0498                     	;# 
  1400  0498                     	;# 
  1401  0499                     	;# 
  1402  049A                     	;# 
  1403  049B                     	;# 
  1404  049B                     	;# 
  1405  049C                     	;# 
  1406  049E                     	;# 
  1407  049F                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0613                     	;# 
  1412  0614                     	;# 
  1413  0615                     	;# 
  1414  0616                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  0619                     	;# 
  1420  061A                     	;# 
  1421  061B                     	;# 
  1422  061C                     	;# 
  1423  061C                     	;# 
  1424  0691                     	;# 
  1425  0692                     	;# 
  1426  0693                     	;# 
  1427  0694                     	;# 
  1428  0695                     	;# 
  1429  0F0F                     	;# 
  1430  0F10                     	;# 
  1431  0F11                     	;# 
  1432  0F12                     	;# 
  1433  0F13                     	;# 
  1434  0F14                     	;# 
  1435  0F15                     	;# 
  1436  0F16                     	;# 
  1437  0F17                     	;# 
  1438  0F18                     	;# 
  1439  0F19                     	;# 
  1440  0F1A                     	;# 
  1441  0F1B                     	;# 
  1442  0F1C                     	;# 
  1443  0F1D                     	;# 
  1444  0F1E                     	;# 
  1445  0F1F                     	;# 
  1446  0F20                     	;# 
  1447  0F21                     	;# 
  1448  0F22                     	;# 
  1449  0F23                     	;# 
  1450  0F24                     	;# 
  1451  0F25                     	;# 
  1452  0F26                     	;# 
  1453  0F27                     	;# 
  1454  0F28                     	;# 
  1455  0F29                     	;# 
  1456  0F2A                     	;# 
  1457  0F2B                     	;# 
  1458  0F2C                     	;# 
  1459  0F2D                     	;# 
  1460  0F2E                     	;# 
  1461  0F2F                     	;# 
  1462  0F8C                     	;# 
  1463  0F8D                     	;# 
  1464  0F91                     	;# 
  1465  0F95                     	;# 
  1466  0F96                     	;# 
  1467  0F97                     	;# 
  1468  0F9C                     	;# 
  1469  0F9D                     	;# 
  1470  0F9E                     	;# 
  1471  0FE3                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0011                     	;# 
  1499  0012                     	;# 
  1500  0013                     	;# 
  1501  0015                     	;# 
  1502  0016                     	;# 
  1503  0016                     	;# 
  1504  0017                     	;# 
  1505  0018                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  009F                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020D                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0498                     	;# 
  1583  0498                     	;# 
  1584  0499                     	;# 
  1585  049A                     	;# 
  1586  049B                     	;# 
  1587  049B                     	;# 
  1588  049C                     	;# 
  1589  049E                     	;# 
  1590  049F                     	;# 
  1591  0611                     	;# 
  1592  0612                     	;# 
  1593  0613                     	;# 
  1594  0613                     	;# 
  1595  0614                     	;# 
  1596  0615                     	;# 
  1597  0616                     	;# 
  1598  0616                     	;# 
  1599  0617                     	;# 
  1600  0618                     	;# 
  1601  0619                     	;# 
  1602  0619                     	;# 
  1603  061A                     	;# 
  1604  061B                     	;# 
  1605  061C                     	;# 
  1606  061C                     	;# 
  1607  0691                     	;# 
  1608  0692                     	;# 
  1609  0693                     	;# 
  1610  0694                     	;# 
  1611  0695                     	;# 
  1612  0F0F                     	;# 
  1613  0F10                     	;# 
  1614  0F11                     	;# 
  1615  0F12                     	;# 
  1616  0F13                     	;# 
  1617  0F14                     	;# 
  1618  0F15                     	;# 
  1619  0F16                     	;# 
  1620  0F17                     	;# 
  1621  0F18                     	;# 
  1622  0F19                     	;# 
  1623  0F1A                     	;# 
  1624  0F1B                     	;# 
  1625  0F1C                     	;# 
  1626  0F1D                     	;# 
  1627  0F1E                     	;# 
  1628  0F1F                     	;# 
  1629  0F20                     	;# 
  1630  0F21                     	;# 
  1631  0F22                     	;# 
  1632  0F23                     	;# 
  1633  0F24                     	;# 
  1634  0F25                     	;# 
  1635  0F26                     	;# 
  1636  0F27                     	;# 
  1637  0F28                     	;# 
  1638  0F29                     	;# 
  1639  0F2A                     	;# 
  1640  0F2B                     	;# 
  1641  0F2C                     	;# 
  1642  0F2D                     	;# 
  1643  0F2E                     	;# 
  1644  0F2F                     	;# 
  1645  0F8C                     	;# 
  1646  0F8D                     	;# 
  1647  0F91                     	;# 
  1648  0F95                     	;# 
  1649  0F96                     	;# 
  1650  0F97                     	;# 
  1651  0F9C                     	;# 
  1652  0F9D                     	;# 
  1653  0F9E                     	;# 
  1654  0FE3                     	;# 
  1655  0FE4                     	;# 
  1656  0FE5                     	;# 
  1657  0FE6                     	;# 
  1658  0FE7                     	;# 
  1659  0FE8                     	;# 
  1660  0FE9                     	;# 
  1661  0FEA                     	;# 
  1662  0FEB                     	;# 
  1663  0FED                     	;# 
  1664  0FEE                     	;# 
  1665  0FEF                     	;# 
  1666  0000                     	;# 
  1667  0001                     	;# 
  1668  0002                     	;# 
  1669  0003                     	;# 
  1670  0004                     	;# 
  1671  0005                     	;# 
  1672  0006                     	;# 
  1673  0007                     	;# 
  1674  0008                     	;# 
  1675  0009                     	;# 
  1676  000A                     	;# 
  1677  000B                     	;# 
  1678  000C                     	;# 
  1679  000D                     	;# 
  1680  000E                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  0091                     	;# 
  1697  0092                     	;# 
  1698  0093                     	;# 
  1699  0095                     	;# 
  1700  0096                     	;# 
  1701  0097                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  009F                     	;# 
  1710  010C                     	;# 
  1711  010D                     	;# 
  1712  010E                     	;# 
  1713  0111                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  0118                     	;# 
  1721  0119                     	;# 
  1722  011D                     	;# 
  1723  018C                     	;# 
  1724  018D                     	;# 
  1725  018E                     	;# 
  1726  0191                     	;# 
  1727  0191                     	;# 
  1728  0192                     	;# 
  1729  0193                     	;# 
  1730  0193                     	;# 
  1731  0194                     	;# 
  1732  0195                     	;# 
  1733  0196                     	;# 
  1734  0199                     	;# 
  1735  019A                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019C                     	;# 
  1739  019D                     	;# 
  1740  019E                     	;# 
  1741  019F                     	;# 
  1742  020C                     	;# 
  1743  020D                     	;# 
  1744  0211                     	;# 
  1745  0211                     	;# 
  1746  0212                     	;# 
  1747  0212                     	;# 
  1748  0213                     	;# 
  1749  0213                     	;# 
  1750  0214                     	;# 
  1751  0214                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0216                     	;# 
  1756  0216                     	;# 
  1757  0217                     	;# 
  1758  0217                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0498                     	;# 
  1766  0498                     	;# 
  1767  0499                     	;# 
  1768  049A                     	;# 
  1769  049B                     	;# 
  1770  049B                     	;# 
  1771  049C                     	;# 
  1772  049E                     	;# 
  1773  049F                     	;# 
  1774  0611                     	;# 
  1775  0612                     	;# 
  1776  0613                     	;# 
  1777  0613                     	;# 
  1778  0614                     	;# 
  1779  0615                     	;# 
  1780  0616                     	;# 
  1781  0616                     	;# 
  1782  0617                     	;# 
  1783  0618                     	;# 
  1784  0619                     	;# 
  1785  0619                     	;# 
  1786  061A                     	;# 
  1787  061B                     	;# 
  1788  061C                     	;# 
  1789  061C                     	;# 
  1790  0691                     	;# 
  1791  0692                     	;# 
  1792  0693                     	;# 
  1793  0694                     	;# 
  1794  0695                     	;# 
  1795  0F0F                     	;# 
  1796  0F10                     	;# 
  1797  0F11                     	;# 
  1798  0F12                     	;# 
  1799  0F13                     	;# 
  1800  0F14                     	;# 
  1801  0F15                     	;# 
  1802  0F16                     	;# 
  1803  0F17                     	;# 
  1804  0F18                     	;# 
  1805  0F19                     	;# 
  1806  0F1A                     	;# 
  1807  0F1B                     	;# 
  1808  0F1C                     	;# 
  1809  0F1D                     	;# 
  1810  0F1E                     	;# 
  1811  0F1F                     	;# 
  1812  0F20                     	;# 
  1813  0F21                     	;# 
  1814  0F22                     	;# 
  1815  0F23                     	;# 
  1816  0F24                     	;# 
  1817  0F25                     	;# 
  1818  0F26                     	;# 
  1819  0F27                     	;# 
  1820  0F28                     	;# 
  1821  0F29                     	;# 
  1822  0F2A                     	;# 
  1823  0F2B                     	;# 
  1824  0F2C                     	;# 
  1825  0F2D                     	;# 
  1826  0F2E                     	;# 
  1827  0F2F                     	;# 
  1828  0F8C                     	;# 
  1829  0F8D                     	;# 
  1830  0F91                     	;# 
  1831  0F95                     	;# 
  1832  0F96                     	;# 
  1833  0F97                     	;# 
  1834  0F9C                     	;# 
  1835  0F9D                     	;# 
  1836  0F9E                     	;# 
  1837  0FE3                     	;# 
  1838  0FE4                     	;# 
  1839  0FE5                     	;# 
  1840  0FE6                     	;# 
  1841  0FE7                     	;# 
  1842  0FE8                     	;# 
  1843  0FE9                     	;# 
  1844  0FEA                     	;# 
  1845  0FEB                     	;# 
  1846  0FED                     	;# 
  1847  0FEE                     	;# 
  1848  0FEF                     	;# 
  1849  0000                     	;# 
  1850  0001                     	;# 
  1851  0002                     	;# 
  1852  0003                     	;# 
  1853  0004                     	;# 
  1854  0005                     	;# 
  1855  0006                     	;# 
  1856  0007                     	;# 
  1857  0008                     	;# 
  1858  0009                     	;# 
  1859  000A                     	;# 
  1860  000B                     	;# 
  1861  000C                     	;# 
  1862  000D                     	;# 
  1863  000E                     	;# 
  1864  0011                     	;# 
  1865  0012                     	;# 
  1866  0013                     	;# 
  1867  0015                     	;# 
  1868  0016                     	;# 
  1869  0016                     	;# 
  1870  0017                     	;# 
  1871  0018                     	;# 
  1872  0019                     	;# 
  1873  001A                     	;# 
  1874  001B                     	;# 
  1875  001C                     	;# 
  1876  008C                     	;# 
  1877  008D                     	;# 
  1878  008E                     	;# 
  1879  0091                     	;# 
  1880  0092                     	;# 
  1881  0093                     	;# 
  1882  0095                     	;# 
  1883  0096                     	;# 
  1884  0097                     	;# 
  1885  0099                     	;# 
  1886  009A                     	;# 
  1887  009B                     	;# 
  1888  009B                     	;# 
  1889  009C                     	;# 
  1890  009D                     	;# 
  1891  009E                     	;# 
  1892  009F                     	;# 
  1893  010C                     	;# 
  1894  010D                     	;# 
  1895  010E                     	;# 
  1896  0111                     	;# 
  1897  0112                     	;# 
  1898  0113                     	;# 
  1899  0114                     	;# 
  1900  0115                     	;# 
  1901  0116                     	;# 
  1902  0117                     	;# 
  1903  0118                     	;# 
  1904  0119                     	;# 
  1905  011D                     	;# 
  1906  018C                     	;# 
  1907  018D                     	;# 
  1908  018E                     	;# 
  1909  0191                     	;# 
  1910  0191                     	;# 
  1911  0192                     	;# 
  1912  0193                     	;# 
  1913  0193                     	;# 
  1914  0194                     	;# 
  1915  0195                     	;# 
  1916  0196                     	;# 
  1917  0199                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019C                     	;# 
  1922  019D                     	;# 
  1923  019E                     	;# 
  1924  019F                     	;# 
  1925  020C                     	;# 
  1926  020D                     	;# 
  1927  0211                     	;# 
  1928  0211                     	;# 
  1929  0212                     	;# 
  1930  0212                     	;# 
  1931  0213                     	;# 
  1932  0213                     	;# 
  1933  0214                     	;# 
  1934  0214                     	;# 
  1935  0215                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0216                     	;# 
  1939  0216                     	;# 
  1940  0217                     	;# 
  1941  0217                     	;# 
  1942  0391                     	;# 
  1943  0392                     	;# 
  1944  0393                     	;# 
  1945  0394                     	;# 
  1946  0395                     	;# 
  1947  0396                     	;# 
  1948  0498                     	;# 
  1949  0498                     	;# 
  1950  0499                     	;# 
  1951  049A                     	;# 
  1952  049B                     	;# 
  1953  049B                     	;# 
  1954  049C                     	;# 
  1955  049E                     	;# 
  1956  049F                     	;# 
  1957  0611                     	;# 
  1958  0612                     	;# 
  1959  0613                     	;# 
  1960  0613                     	;# 
  1961  0614                     	;# 
  1962  0615                     	;# 
  1963  0616                     	;# 
  1964  0616                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0F0F                     	;# 
  1979  0F10                     	;# 
  1980  0F11                     	;# 
  1981  0F12                     	;# 
  1982  0F13                     	;# 
  1983  0F14                     	;# 
  1984  0F15                     	;# 
  1985  0F16                     	;# 
  1986  0F17                     	;# 
  1987  0F18                     	;# 
  1988  0F19                     	;# 
  1989  0F1A                     	;# 
  1990  0F1B                     	;# 
  1991  0F1C                     	;# 
  1992  0F1D                     	;# 
  1993  0F1E                     	;# 
  1994  0F1F                     	;# 
  1995  0F20                     	;# 
  1996  0F21                     	;# 
  1997  0F22                     	;# 
  1998  0F23                     	;# 
  1999  0F24                     	;# 
  2000  0F25                     	;# 
  2001  0F26                     	;# 
  2002  0F27                     	;# 
  2003  0F28                     	;# 
  2004  0F29                     	;# 
  2005  0F2A                     	;# 
  2006  0F2B                     	;# 
  2007  0F2C                     	;# 
  2008  0F2D                     	;# 
  2009  0F2E                     	;# 
  2010  0F2F                     	;# 
  2011  0F8C                     	;# 
  2012  0F8D                     	;# 
  2013  0F91                     	;# 
  2014  0F95                     	;# 
  2015  0F96                     	;# 
  2016  0F97                     	;# 
  2017  0F9C                     	;# 
  2018  0F9D                     	;# 
  2019  0F9E                     	;# 
  2020  0FE3                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032  0000                     	;# 
  2033  0001                     	;# 
  2034  0002                     	;# 
  2035  0003                     	;# 
  2036  0004                     	;# 
  2037  0005                     	;# 
  2038  0006                     	;# 
  2039  0007                     	;# 
  2040  0008                     	;# 
  2041  0009                     	;# 
  2042  000A                     	;# 
  2043  000B                     	;# 
  2044  000C                     	;# 
  2045  000D                     	;# 
  2046  000E                     	;# 
  2047  0011                     	;# 
  2048  0012                     	;# 
  2049  0013                     	;# 
  2050  0015                     	;# 
  2051  0016                     	;# 
  2052  0016                     	;# 
  2053  0017                     	;# 
  2054  0018                     	;# 
  2055  0019                     	;# 
  2056  001A                     	;# 
  2057  001B                     	;# 
  2058  001C                     	;# 
  2059  008C                     	;# 
  2060  008D                     	;# 
  2061  008E                     	;# 
  2062  0091                     	;# 
  2063  0092                     	;# 
  2064  0093                     	;# 
  2065  0095                     	;# 
  2066  0096                     	;# 
  2067  0097                     	;# 
  2068  0099                     	;# 
  2069  009A                     	;# 
  2070  009B                     	;# 
  2071  009B                     	;# 
  2072  009C                     	;# 
  2073  009D                     	;# 
  2074  009E                     	;# 
  2075  009F                     	;# 
  2076  010C                     	;# 
  2077  010D                     	;# 
  2078  010E                     	;# 
  2079  0111                     	;# 
  2080  0112                     	;# 
  2081  0113                     	;# 
  2082  0114                     	;# 
  2083  0115                     	;# 
  2084  0116                     	;# 
  2085  0117                     	;# 
  2086  0118                     	;# 
  2087  0119                     	;# 
  2088  011D                     	;# 
  2089  018C                     	;# 
  2090  018D                     	;# 
  2091  018E                     	;# 
  2092  0191                     	;# 
  2093  0191                     	;# 
  2094  0192                     	;# 
  2095  0193                     	;# 
  2096  0193                     	;# 
  2097  0194                     	;# 
  2098  0195                     	;# 
  2099  0196                     	;# 
  2100  0199                     	;# 
  2101  019A                     	;# 
  2102  019B                     	;# 
  2103  019B                     	;# 
  2104  019C                     	;# 
  2105  019D                     	;# 
  2106  019E                     	;# 
  2107  019F                     	;# 
  2108  020C                     	;# 
  2109  020D                     	;# 
  2110  0211                     	;# 
  2111  0211                     	;# 
  2112  0212                     	;# 
  2113  0212                     	;# 
  2114  0213                     	;# 
  2115  0213                     	;# 
  2116  0214                     	;# 
  2117  0214                     	;# 
  2118  0215                     	;# 
  2119  0215                     	;# 
  2120  0215                     	;# 
  2121  0216                     	;# 
  2122  0216                     	;# 
  2123  0217                     	;# 
  2124  0217                     	;# 
  2125  0391                     	;# 
  2126  0392                     	;# 
  2127  0393                     	;# 
  2128  0394                     	;# 
  2129  0395                     	;# 
  2130  0396                     	;# 
  2131  0498                     	;# 
  2132  0498                     	;# 
  2133  0499                     	;# 
  2134  049A                     	;# 
  2135  049B                     	;# 
  2136  049B                     	;# 
  2137  049C                     	;# 
  2138  049E                     	;# 
  2139  049F                     	;# 
  2140  0611                     	;# 
  2141  0612                     	;# 
  2142  0613                     	;# 
  2143  0613                     	;# 
  2144  0614                     	;# 
  2145  0615                     	;# 
  2146  0616                     	;# 
  2147  0616                     	;# 
  2148  0617                     	;# 
  2149  0618                     	;# 
  2150  0619                     	;# 
  2151  0619                     	;# 
  2152  061A                     	;# 
  2153  061B                     	;# 
  2154  061C                     	;# 
  2155  061C                     	;# 
  2156  0691                     	;# 
  2157  0692                     	;# 
  2158  0693                     	;# 
  2159  0694                     	;# 
  2160  0695                     	;# 
  2161  0F0F                     	;# 
  2162  0F10                     	;# 
  2163  0F11                     	;# 
  2164  0F12                     	;# 
  2165  0F13                     	;# 
  2166  0F14                     	;# 
  2167  0F15                     	;# 
  2168  0F16                     	;# 
  2169  0F17                     	;# 
  2170  0F18                     	;# 
  2171  0F19                     	;# 
  2172  0F1A                     	;# 
  2173  0F1B                     	;# 
  2174  0F1C                     	;# 
  2175  0F1D                     	;# 
  2176  0F1E                     	;# 
  2177  0F1F                     	;# 
  2178  0F20                     	;# 
  2179  0F21                     	;# 
  2180  0F22                     	;# 
  2181  0F23                     	;# 
  2182  0F24                     	;# 
  2183  0F25                     	;# 
  2184  0F26                     	;# 
  2185  0F27                     	;# 
  2186  0F28                     	;# 
  2187  0F29                     	;# 
  2188  0F2A                     	;# 
  2189  0F2B                     	;# 
  2190  0F2C                     	;# 
  2191  0F2D                     	;# 
  2192  0F2E                     	;# 
  2193  0F2F                     	;# 
  2194  0F8C                     	;# 
  2195  0F8D                     	;# 
  2196  0F91                     	;# 
  2197  0F95                     	;# 
  2198  0F96                     	;# 
  2199  0F97                     	;# 
  2200  0F9C                     	;# 
  2201  0F9D                     	;# 
  2202  0F9E                     	;# 
  2203  0FE3                     	;# 
  2204  0FE4                     	;# 
  2205  0FE5                     	;# 
  2206  0FE6                     	;# 
  2207  0FE7                     	;# 
  2208  0FE8                     	;# 
  2209  0FE9                     	;# 
  2210  0FEA                     	;# 
  2211  0FEB                     	;# 
  2212  0FED                     	;# 
  2213  0FEE                     	;# 
  2214  0FEF                     	;# 
  2215  0000                     	;# 
  2216  0001                     	;# 
  2217  0002                     	;# 
  2218  0003                     	;# 
  2219  0004                     	;# 
  2220  0005                     	;# 
  2221  0006                     	;# 
  2222  0007                     	;# 
  2223  0008                     	;# 
  2224  0009                     	;# 
  2225  000A                     	;# 
  2226  000B                     	;# 
  2227  000C                     	;# 
  2228  000D                     	;# 
  2229  000E                     	;# 
  2230  0011                     	;# 
  2231  0012                     	;# 
  2232  0013                     	;# 
  2233  0015                     	;# 
  2234  0016                     	;# 
  2235  0016                     	;# 
  2236  0017                     	;# 
  2237  0018                     	;# 
  2238  0019                     	;# 
  2239  001A                     	;# 
  2240  001B                     	;# 
  2241  001C                     	;# 
  2242  008C                     	;# 
  2243  008D                     	;# 
  2244  008E                     	;# 
  2245  0091                     	;# 
  2246  0092                     	;# 
  2247  0093                     	;# 
  2248  0095                     	;# 
  2249  0096                     	;# 
  2250  0097                     	;# 
  2251  0099                     	;# 
  2252  009A                     	;# 
  2253  009B                     	;# 
  2254  009B                     	;# 
  2255  009C                     	;# 
  2256  009D                     	;# 
  2257  009E                     	;# 
  2258  009F                     	;# 
  2259  010C                     	;# 
  2260  010D                     	;# 
  2261  010E                     	;# 
  2262  0111                     	;# 
  2263  0112                     	;# 
  2264  0113                     	;# 
  2265  0114                     	;# 
  2266  0115                     	;# 
  2267  0116                     	;# 
  2268  0117                     	;# 
  2269  0118                     	;# 
  2270  0119                     	;# 
  2271  011D                     	;# 
  2272  018C                     	;# 
  2273  018D                     	;# 
  2274  018E                     	;# 
  2275  0191                     	;# 
  2276  0191                     	;# 
  2277  0192                     	;# 
  2278  0193                     	;# 
  2279  0193                     	;# 
  2280  0194                     	;# 
  2281  0195                     	;# 
  2282  0196                     	;# 
  2283  0199                     	;# 
  2284  019A                     	;# 
  2285  019B                     	;# 
  2286  019B                     	;# 
  2287  019C                     	;# 
  2288  019D                     	;# 
  2289  019E                     	;# 
  2290  019F                     	;# 
  2291  020C                     	;# 
  2292  020D                     	;# 
  2293  0211                     	;# 
  2294  0211                     	;# 
  2295  0212                     	;# 
  2296  0212                     	;# 
  2297  0213                     	;# 
  2298  0213                     	;# 
  2299  0214                     	;# 
  2300  0214                     	;# 
  2301  0215                     	;# 
  2302  0215                     	;# 
  2303  0215                     	;# 
  2304  0216                     	;# 
  2305  0216                     	;# 
  2306  0217                     	;# 
  2307  0217                     	;# 
  2308  0391                     	;# 
  2309  0392                     	;# 
  2310  0393                     	;# 
  2311  0394                     	;# 
  2312  0395                     	;# 
  2313  0396                     	;# 
  2314  0498                     	;# 
  2315  0498                     	;# 
  2316  0499                     	;# 
  2317  049A                     	;# 
  2318  049B                     	;# 
  2319  049B                     	;# 
  2320  049C                     	;# 
  2321  049E                     	;# 
  2322  049F                     	;# 
  2323  0611                     	;# 
  2324  0612                     	;# 
  2325  0613                     	;# 
  2326  0613                     	;# 
  2327  0614                     	;# 
  2328  0615                     	;# 
  2329  0616                     	;# 
  2330  0616                     	;# 
  2331  0617                     	;# 
  2332  0618                     	;# 
  2333  0619                     	;# 
  2334  0619                     	;# 
  2335  061A                     	;# 
  2336  061B                     	;# 
  2337  061C                     	;# 
  2338  061C                     	;# 
  2339  0691                     	;# 
  2340  0692                     	;# 
  2341  0693                     	;# 
  2342  0694                     	;# 
  2343  0695                     	;# 
  2344  0F0F                     	;# 
  2345  0F10                     	;# 
  2346  0F11                     	;# 
  2347  0F12                     	;# 
  2348  0F13                     	;# 
  2349  0F14                     	;# 
  2350  0F15                     	;# 
  2351  0F16                     	;# 
  2352  0F17                     	;# 
  2353  0F18                     	;# 
  2354  0F19                     	;# 
  2355  0F1A                     	;# 
  2356  0F1B                     	;# 
  2357  0F1C                     	;# 
  2358  0F1D                     	;# 
  2359  0F1E                     	;# 
  2360  0F1F                     	;# 
  2361  0F20                     	;# 
  2362  0F21                     	;# 
  2363  0F22                     	;# 
  2364  0F23                     	;# 
  2365  0F24                     	;# 
  2366  0F25                     	;# 
  2367  0F26                     	;# 
  2368  0F27                     	;# 
  2369  0F28                     	;# 
  2370  0F29                     	;# 
  2371  0F2A                     	;# 
  2372  0F2B                     	;# 
  2373  0F2C                     	;# 
  2374  0F2D                     	;# 
  2375  0F2E                     	;# 
  2376  0F2F                     	;# 
  2377  0F8C                     	;# 
  2378  0F8D                     	;# 
  2379  0F91                     	;# 
  2380  0F95                     	;# 
  2381  0F96                     	;# 
  2382  0F97                     	;# 
  2383  0F9C                     	;# 
  2384  0F9D                     	;# 
  2385  0F9E                     	;# 
  2386  0FE3                     	;# 
  2387  0FE4                     	;# 
  2388  0FE5                     	;# 
  2389  0FE6                     	;# 
  2390  0FE7                     	;# 
  2391  0FE8                     	;# 
  2392  0FE9                     	;# 
  2393  0FEA                     	;# 
  2394  0FEB                     	;# 
  2395  0FED                     	;# 
  2396  0FEE                     	;# 
  2397  0FEF                     	;# 
  2398                           
  2399                           	psect	strings
  2400  0792                     __pstrings:	
  2401  0792                     __stringtab:	
  2402  0792  3400               	retlw	0
  2403  0793                     __end_of__stringtab:	
  2404  0793                     _mrfRegset_InitCnt:	
  2405  0793  3410               	retlw	16
  2406  0794                     __end_of_mrfRegset_InitCnt:	
  2407  0794                     _mrfRegset_RxCnt:	
  2408  0794  3406               	retlw	6
  2409  0795                     __end_of_mrfRegset_RxCnt:	
  2410  0795                     _mrfRegset_TxCnt:	
  2411  0795  3404               	retlw	4
  2412  0796                     __end_of_mrfRegset_TxCnt:	
  2413  0796                     _mrfRegset_Init:	
  2414  0796  34CA               	retlw	202
  2415  0797  3471               	retlw	113
  2416  0798  34CA               	retlw	202
  2417  0799  3473               	retlw	115
  2418  079A  3480               	retlw	128
  2419  079B  3428               	retlw	40
  2420  079C  34C4               	retlw	196
  2421  079D  34E7               	retlw	231
  2422  079E  34A8               	retlw	168
  2423  079F  3460               	retlw	96
  2424  07A0  34C6               	retlw	198
  2425  07A1  3405               	retlw	5
  2426  07A2  3482               	retlw	130
  2427  07A3  3400               	retlw	0
  2428  07A4  3490               	retlw	144
  2429  07A5  3462               	retlw	98
  2430  07A6  3498               	retlw	152
  2431  07A7  3490               	retlw	144
  2432  07A8  34C2               	retlw	194
  2433  07A9  34AC               	retlw	172
  2434  07AA  3482               	retlw	130
  2435  07AB  3420               	retlw	32
  2436  07AC  3455               	retlw	85
  2437  07AD  3400               	retlw	0
  2438  07AE  3482               	retlw	130
  2439  07AF  3480               	retlw	128
  2440  07B0  3480               	retlw	128
  2441  07B1  3468               	retlw	104
  2442  07B2  34CA               	retlw	202
  2443  07B3  3471               	retlw	113
  2444  07B4  34CA               	retlw	202
  2445  07B5  3473               	retlw	115
  2446  07B6                     __end_of_mrfRegset_Init:	
  2447  07B6                     _mrfRegset_Rx:	
  2448  07B6  3482               	retlw	130
  2449  07B7  3400               	retlw	0
  2450  07B8  34CA               	retlw	202
  2451  07B9  3471               	retlw	113
  2452  07BA  3480               	retlw	128
  2453  07BB  3428               	retlw	40
  2454  07BC  3482               	retlw	130
  2455  07BD  3480               	retlw	128
  2456  07BE  3480               	retlw	128
  2457  07BF  3468               	retlw	104
  2458  07C0  34CA               	retlw	202
  2459  07C1  3473               	retlw	115
  2460  07C2                     __end_of_mrfRegset_Rx:	
  2461  07C2                     _mrfRegset_Tx:	
  2462  07C2  3482               	retlw	130
  2463  07C3  3400               	retlw	0
  2464  07C4  34CA               	retlw	202
  2465  07C5  3471               	retlw	113
  2466  07C6  3480               	retlw	128
  2467  07C7  34A8               	retlw	168
  2468  07C8  3482               	retlw	130
  2469  07C9  3420               	retlw	32
  2470  07CA                     __end_of_mrfRegset_Tx:	
  2471  000B                     _INTCONbits	set	11
  2472  000C                     _PORTAbits	set	12
  2473  000D                     _PORTBbits	set	13
  2474  000E                     _PORTCbits	set	14
  2475  009D                     _ADCON0	set	157
  2476  009E                     _ADCON1	set	158
  2477  009F                     _ADCON2	set	159
  2478  0095                     _OPTION_REGbits	set	149
  2479  0099                     _OSCCON	set	153
  2480  008C                     _TRISAbits	set	140
  2481  008D                     _TRISBbits	set	141
  2482  008E                     _TRISCbits	set	142
  2483  0117                     _FVRCON	set	279
  2484  010C                     _LATAbits	set	268
  2485  010D                     _LATBbits	set	269
  2486  010E                     _LATCbits	set	270
  2487  018C                     _ANSELA	set	396
  2488  018D                     _ANSELB	set	397
  2489  018E                     _ANSELC	set	398
  2490  020C                     _WPUAbits	set	524
  2491                           
  2492                           ; #config settings
  2493  0000                     
  2494                           	psect	cinit
  2495  0016                     start_initialization:	
  2496  0016                     __initialization:	
  2497  0016  30A0               	movlw	low __pbssBANK1
  2498                           
  2499                           ; Clear objects allocated to BANK0
  2500  0017  01BA               	clrf	__pbssBANK0& (0+127)
  2501  0018  01BB               	clrf	(__pbssBANK0+1)& (0+127)
  2502                           
  2503                           ; Clear objects allocated to BANK1
  2504  0019  0084               	movwf	4
  2505  001A  3000               	movlw	high __pbssBANK1
  2506  001B  0085               	movwf	5
  2507  001C  304F               	movlw	79
  2508  001D  3187  27F4  3180   	fcall	clear_ram0
  2509  0020                     end_of_initialization:	
  2510                           ;End of C runtime variable initialization code
  2511                           
  2512  0020                     __end_of__initialization:	
  2513  0020  0020               	movlb	0
  2514  0021  2822               	ljmp	_main	;jump to C main() function
  2515  0022                     __pmaintext:	
  2516 ;;
  2517 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2518 ;;
  2519 ;; *************** function _main *****************
  2520 ;; Defined at:
  2521 ;;		line 41 in file "../../../src/node/main.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;		None
  2526 ;; Return value:  Size  Location     Type
  2527 ;;		None               void
  2528 ;; Registers used:
  2529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2530 ;; Tracked objects:
  2531 ;;		On entry : 17F/0
  2532 ;;		On exit  : 1F/1
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2535 ;;      Params:         0       0       0       0
  2536 ;;      Locals:         0       0       0       0
  2537 ;;      Temps:          0       0       0       0
  2538 ;;      Totals:         0       0       0       0
  2539 ;;Total ram usage:        0 bytes
  2540 ;; Hardware stack levels required when called:   11
  2541 ;; This function calls:
  2542 ;;		_AdcInit
  2543 ;;		_ExtIntInit
  2544 ;;		_Mrf49xaInit
  2545 ;;		_Mrf49xaTick
  2546 ;;		_RfSendPowerState
  2547 ;;		_SoftI2cInit
  2548 ;;		_SysInitGpio
  2549 ;; This function is called by:
  2550 ;;		Startup code after reset
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function _main
  2556  0022                     _main:	
  2557                           
  2558                           ;main.c: 44: OSCCON = 0b01111000;
  2559                           
  2560                           ;incstack = 0
  2561                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2562  0022  3078               	movlw	120
  2563  0023  0021               	movlb	1	; select bank1
  2564  0024  0099               	movwf	25	;volatile
  2565                           
  2566                           ;main.c: 45: WPUAbits.WPUA2 = 1;
  2567  0025  0024               	movlb	4	; select bank4
  2568  0026  150C               	bsf	12,2	;volatile
  2569                           
  2570                           ;main.c: 47: SysInitGpio();
  2571  0027  23CD               	fcall	_SysInitGpio
  2572                           
  2573                           ;main.c: 48: SoftI2cInit();
  2574  0028  3185  25CF  3180   	fcall	_SoftI2cInit
  2575                           
  2576                           ;main.c: 49: AdcInit();
  2577  002B  22D7  3180         	fcall	_AdcInit
  2578                           
  2579                           ;main.c: 50: ExtIntInit();
  2580  002D  22E6  3180         	fcall	_ExtIntInit
  2581                           
  2582                           ;main.c: 70: Mrf49xaInit();
  2583  002F  20D0  3180         	fcall	_Mrf49xaInit
  2584                           
  2585                           ;main.c: 72: RfSendPowerState();
  2586  0031  23AB  3180         	fcall	_RfSendPowerState
  2587  0033                     l2852:	
  2588                           
  2589                           ;main.c: 75: {
  2590                           ;main.c: 76: Mrf49xaTick();
  2591  0033  2036  3180         	fcall	_Mrf49xaTick
  2592  0035  2833               	goto	l2852
  2593  0036                     __end_of_main:	
  2594  0036                     __ptext5:	
  2595 ;; *************** function _Mrf49xaTick *****************
  2596 ;; Defined at:
  2597 ;;		line 123 in file "../../../src/devices/mrf49xa_packet.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  timeout         1   24[BANK0 ] unsigned char 
  2602 ;;  packet          1   25[BANK0 ] PTR struct rfTrcvPacket_
  2603 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;		None               void
  2606 ;; Registers used:
  2607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 1E/1
  2610 ;;		On exit  : 1F/1
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2613 ;;      Params:         0       0       0       0
  2614 ;;      Locals:         0       2       0       0
  2615 ;;      Temps:          0       2       0       0
  2616 ;;      Totals:         0       4       0       0
  2617 ;;Total ram usage:        4 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:   10
  2620 ;; This function calls:
  2621 ;;		_HandlePacket
  2622 ;;		_Mrf49RxSts
  2623 ;;		_Mrf49xaFreePacket
  2624 ;;		_Mrf49xaModeTx
  2625 ;;		_Mrf49xaPacketPending
  2626 ;;		_Mrf49xaRxPacket
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _Mrf49xaTick
  2634  0036                     _Mrf49xaTick:	
  2635                           
  2636                           ;mrf49xa_packet.c: 125: if (Mrf49xaPacketPending())
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2640  0036  2393  3180         	fcall	_Mrf49xaPacketPending
  2641  0038  3A00               	xorlw	0
  2642  0039  1903               	skipnz
  2643  003A  285C               	goto	l2656
  2644                           
  2645                           ;mrf49xa_packet.c: 126: {
  2646                           ;mrf49xa_packet.c: 127: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2647  003B  239D  3180         	fcall	_Mrf49xaRxPacket
  2648  003D  0020               	movlb	0	; select bank0
  2649  003E  00B9               	movwf	Mrf49xaTick@packet
  2650                           
  2651                           ;mrf49xa_packet.c: 135: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  2652  003F  3E03               	addlw	3
  2653  0040  0086               	movwf	6
  2654  0041  0187               	clrf	7
  2655  0042  0801               	movf	1,w
  2656  0043  3AFF               	xorlw	255
  2657  0044  1903               	skipnz
  2658  0045  284E               	goto	l2650
  2659  0046  0839               	movf	Mrf49xaTick@packet,w
  2660  0047  3E03               	addlw	3
  2661  0048  0086               	movwf	6
  2662  0049  0801               	movf	1,w
  2663  004A  0021               	movlb	1	; select bank1
  2664  004B  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  2665  004C  1D03               	skipz
  2666  004D  2858               	goto	l2654
  2667  004E                     l2650:	
  2668                           
  2669                           ;mrf49xa_packet.c: 136: {
  2670                           ;mrf49xa_packet.c: 137: packet->packet.size -= 5;
  2671  004E  0020               	movlb	0	; select bank0
  2672  004F  0A39               	incf	Mrf49xaTick@packet,w
  2673  0050  0086               	movwf	6
  2674  0051  3005               	movlw	5
  2675  0052  0187               	clrf	7
  2676  0053  0281               	subwf	1,f
  2677                           
  2678                           ;mrf49xa_packet.c: 140: HandlePacket(packet);
  2679  0054  0839               	movf	Mrf49xaTick@packet,w
  2680  0055  22F0  3180         	fcall	_HandlePacket
  2681                           
  2682                           ;mrf49xa_packet.c: 142: }
  2683  0057  285C               	goto	l2656
  2684  0058                     l2654:	
  2685                           
  2686                           ;mrf49xa_packet.c: 143: else
  2687                           ;mrf49xa_packet.c: 144: {
  2688                           ;mrf49xa_packet.c: 145: Mrf49xaFreePacket(packet);
  2689  0058  0020               	movlb	0	; select bank0
  2690  0059  0839               	movf	Mrf49xaTick@packet,w
  2691  005A  22EB  3180         	fcall	_Mrf49xaFreePacket
  2692  005C                     l2656:	
  2693                           
  2694                           ;mrf49xa_packet.c: 146: }
  2695                           ;mrf49xa_packet.c: 150: }
  2696                           ;mrf49xa_packet.c: 152: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  2697  005C  0021               	movlb	1	; select bank1
  2698  005D  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  2699  005E  3A02               	xorlw	2
  2700  005F  1D03               	skipz
  2701  0060  2890               	goto	l2676
  2702                           
  2703                           ;mrf49xa_packet.c: 153: {
  2704                           ;mrf49xa_packet.c: 154: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  2705  0061  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2706  0062  3A02               	xorlw	2
  2707  0063  1D03               	skipz
  2708  0064  2867               	goto	l2662
  2709  0065                     l2660:	
  2710                           
  2711                           ;mrf49xa_packet.c: 155: {
  2712                           ;mrf49xa_packet.c: 156: rfTrcvStatus.txPacket.state = PKT_FREE;
  2713  0065  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  2714                           
  2715                           ;mrf49xa_packet.c: 157: }
  2716  0066  2890               	goto	l2676
  2717  0067                     l2662:	
  2718                           
  2719                           ;mrf49xa_packet.c: 158: else if (rfTrcvStatus.txPacket.retry == 10)
  2720  0067  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  2721  0068  390F               	andlw	15
  2722  0069  3A0A               	xorlw	10
  2723  006A  1D03               	skipz
  2724  006B  2884               	goto	l2672
  2725                           
  2726                           ;mrf49xa_packet.c: 159: {
  2727                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.retransmit == 3)
  2728  006C  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  2729  006D  3903               	andlw	3
  2730  006E  3A03               	xorlw	3
  2731  006F  1903               	btfsc	3,2
  2732  0070  2865               	goto	l2660
  2733                           
  2734                           ;mrf49xa_packet.c: 166: else
  2735                           ;mrf49xa_packet.c: 167: {
  2736                           ;mrf49xa_packet.c: 169: rfTrcvStatus.txPacket.retry = 0;
  2737  0071  30F0               	movlw	-16
  2738  0072  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  2739                           
  2740                           ;mrf49xa_packet.c: 170: rfTrcvStatus.txPacket.retransmit++;
  2741  0073  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  2742  0074  3903               	andlw	3
  2743  0075  0020               	movlb	0	; select bank0
  2744  0076  00B6               	movwf	??_Mrf49xaTick
  2745  0077  0AB6               	incf	??_Mrf49xaTick,f
  2746  0078  0EB6               	swapf	??_Mrf49xaTick,f
  2747  0079  0021               	movlb	1	; select bank1
  2748  007A  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  2749  007B  0020               	movlb	0	; select bank0
  2750  007C  0636               	xorwf	??_Mrf49xaTick,w
  2751  007D  39CF               	andlw	-49
  2752  007E  0636               	xorwf	??_Mrf49xaTick,w
  2753  007F  0021               	movlb	1	; select bank1
  2754  0080  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  2755                           
  2756                           ;mrf49xa_packet.c: 171: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  2757  0081  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  2758  0082  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  2759  0083  2890               	goto	l2676
  2760  0084                     l2672:	
  2761                           
  2762                           ;mrf49xa_packet.c: 174: else
  2763                           ;mrf49xa_packet.c: 175: {
  2764                           ;mrf49xa_packet.c: 176: rfTrcvStatus.txPacket.retry++;
  2765  0084  23F9  3180         	fcall	PL4	;call to abstracted procedure
  2766                           
  2767                           ;mrf49xa_packet.c: 177: _delay(40000);
  2768  0086  3034               	movlw	52
  2769  0087  0020               	movlb	0	; select bank0
  2770  0088  00B7               	movwf	??_Mrf49xaTick+1
  2771  0089  30F1               	movlw	241
  2772  008A  00B6               	movwf	??_Mrf49xaTick
  2773  008B                     u2137:	
  2774  008B  0BB6               	decfsz	??_Mrf49xaTick,f
  2775  008C  288B               	goto	u2137
  2776  008D  0BB7               	decfsz	??_Mrf49xaTick+1,f
  2777  008E  288B               	goto	u2137
  2778  008F  3200               	nop2
  2779  0090                     l2676:	
  2780                           
  2781                           ;mrf49xa_packet.c: 178: }
  2782                           ;mrf49xa_packet.c: 179: }
  2783                           ;mrf49xa_packet.c: 181: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2784                           ;mrf49xa_packet.c: 182: rfTrcvStatus.state == RECV_IDLE)
  2785  0090  0021               	movlb	1	; select bank1
  2786  0091  0B53               	decfsz	(_rfTrcvStatus^(0+128)+51),w
  2787  0092  0008               	return
  2788  0093  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  2789  0094  1D03               	skipz
  2790  0095  0008               	return
  2791                           
  2792                           ;mrf49xa_packet.c: 183: {
  2793                           ;mrf49xa_packet.c: 188: if (rfTrcvStatus.txPacket.retry >= 10)
  2794  0096  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  2795  0097  390F               	andlw	15
  2796  0098  0020               	movlb	0	; select bank0
  2797  0099  00B6               	movwf	??_Mrf49xaTick
  2798  009A  300A               	movlw	10
  2799  009B  0236               	subwf	??_Mrf49xaTick,w
  2800  009C  1C03               	skipc
  2801  009D  28A4               	goto	l2688
  2802                           
  2803                           ;mrf49xa_packet.c: 189: {
  2804                           ;mrf49xa_packet.c: 191: rfTrcvStatus.txPacket.retry = 0;
  2805  009E  30F0               	movlw	-16
  2806  009F  0021               	movlb	1	; select bank1
  2807  00A0  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  2808                           
  2809                           ;mrf49xa_packet.c: 192: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  2810  00A1  3002               	movlw	2
  2811  00A2  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  2812  00A3  0008               	return
  2813  00A4                     l2688:	
  2814                           
  2815                           ;mrf49xa_packet.c: 194: }
  2816                           ;mrf49xa_packet.c: 198: uint8_t timeout = 0;
  2817  00A4  01B8               	clrf	Mrf49xaTick@timeout
  2818  00A5                     l2690:	
  2819                           
  2820                           ;mrf49xa_packet.c: 200: {
  2821                           ;mrf49xa_packet.c: 201: Mrf49RxSts();
  2822  00A5  2288  3180         	fcall	_Mrf49RxSts
  2823                           
  2824                           ;mrf49xa_packet.c: 203: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  2825  00A7  0021               	movlb	1	; select bank1
  2826  00A8  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  2827  00A9  1D03               	skipz
  2828  00AA  28AE               	goto	l2698
  2829  00AB  0020               	movlb	0	; select bank0
  2830  00AC  1C3A               	btfss	_mrf49Status,0
  2831  00AD  28C1               	goto	l368
  2832  00AE                     l2698:	
  2833                           
  2834                           ;mrf49xa_packet.c: 207: }
  2835                           ;mrf49xa_packet.c: 209: _delay(40000);
  2836  00AE  3034               	movlw	52
  2837  00AF  0020               	movlb	0	; select bank0
  2838  00B0  00B7               	movwf	??_Mrf49xaTick+1
  2839  00B1  30F1               	movlw	241
  2840  00B2  00B6               	movwf	??_Mrf49xaTick
  2841  00B3                     u2147:	
  2842  00B3  0BB6               	decfsz	??_Mrf49xaTick,f
  2843  00B4  28B3               	goto	u2147
  2844  00B5  0BB7               	decfsz	??_Mrf49xaTick+1,f
  2845  00B6  28B3               	goto	u2147
  2846  00B7  3200               	nop2
  2847                           
  2848                           ;mrf49xa_packet.c: 210: timeout++;
  2849  00B8  0020               	movlb	0	; select bank0
  2850  00B9  300B               	movlw	11
  2851  00BA  0AB8               	incf	Mrf49xaTick@timeout,f
  2852                           
  2853                           ;mrf49xa_packet.c: 212: if (timeout > 10)
  2854  00BB  0238               	subwf	Mrf49xaTick@timeout,w
  2855  00BC  1C03               	skipc
  2856  00BD  28A5               	goto	l2690
  2857                           
  2858                           ;mrf49xa_packet.c: 213: {
  2859                           ;mrf49xa_packet.c: 214: rfTrcvStatus.txPacket.retry++;
  2860  00BE  0021               	movlb	1	; select bank1
  2861  00BF  23F9               	fcall	PL4	;call to abstracted procedure
  2862  00C0  0008               	return
  2863  00C1                     l368:	
  2864                           
  2865                           ;mrf49xa_packet.c: 225: INTCONbits.INTE = 0;;
  2866  00C1  120B               	bcf	11,4	;volatile
  2867                           
  2868                           ;mrf49xa_packet.c: 226: Mrf49xaModeTx();
  2869  00C2  3187  27CA         	fcall	_Mrf49xaModeTx
  2870                           
  2871                           ;mrf49xa_packet.c: 227: INTCONbits.INTE = 1;;
  2872  00C4  160B               	bsf	11,4	;volatile
  2873  00C5  0008               	return
  2874  00C6                     __end_of_Mrf49xaTick:	
  2875  00C6                     __ptext31:	
  2876 ;; *************** function _Mrf49RxCmd *****************
  2877 ;; Defined at:
  2878 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  cmd             1    wreg     unsigned char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  cmd             1    1[BANK0 ] unsigned char 
  2883 ;;  val             1    2[BANK0 ] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      unsigned char 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0, pclath, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 1E/1
  2890 ;;		On exit  : 1F/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2893 ;;      Params:         0       0       0       0
  2894 ;;      Locals:         0       2       0       0
  2895 ;;      Temps:          0       0       0       0
  2896 ;;      Totals:         0       2       0       0
  2897 ;;Total ram usage:        2 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    6
  2900 ;; This function calls:
  2901 ;;		_Mrf49SpiRx
  2902 ;;		_Mrf49SpiTx
  2903 ;; This function is called by:
  2904 ;;		_Mrf49RxByte
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _Mrf49RxCmd
  2910  00C6                     _Mrf49RxCmd:	
  2911                           
  2912                           ;incstack = 0
  2913                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2914                           ;Mrf49RxCmd@cmd stored from wreg
  2915  00C6  0020               	movlb	0	; select bank0
  2916  00C7  00A1               	movwf	Mrf49RxCmd@cmd
  2917                           
  2918                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  2919  00C8  130E               	bcf	14,6	;volatile
  2920                           
  2921                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  2922  00C9  0821               	movf	Mrf49RxCmd@cmd,w
  2923  00CA  222D  3180         	fcall	_Mrf49SpiTx
  2924                           
  2925                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  2926  00CC  2293               	fcall	_Mrf49SpiRx
  2927  00CD  00A2               	movwf	Mrf49RxCmd@val
  2928                           
  2929                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  2930  00CE  170E               	bsf	14,6	;volatile
  2931                           
  2932                           ;mrf49xa_cmd.c: 27: return val;
  2933  00CF  0008               	return
  2934  00D0                     __end_of_Mrf49RxCmd:	
  2935  00D0                     __ptext24:	
  2936 ;; *************** function _Mrf49xaInit *****************
  2937 ;; Defined at:
  2938 ;;		line 122 in file "../../../src/devices/mrf49xa.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  k               1    9[BANK0 ] unsigned char 
  2943 ;;  j               1    0        unsigned char 
  2944 ;;  i               1    0        unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;		None               void
  2947 ;; Registers used:
  2948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 1F/1
  2951 ;;		On exit  : 1F/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2954 ;;      Params:         0       0       0       0
  2955 ;;      Locals:         0       1       0       0
  2956 ;;      Temps:          0       3       0       0
  2957 ;;      Totals:         0       4       0       0
  2958 ;;Total ram usage:        4 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    9
  2961 ;; This function calls:
  2962 ;;		_Mrf49TxCmd
  2963 ;;		_Mrf49xaModeRx
  2964 ;;		_Mrf49xaServe
  2965 ;; This function is called by:
  2966 ;;		_main
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           
  2971                           ;psect for function _Mrf49xaInit
  2972  00D0                     _Mrf49xaInit:	
  2973                           
  2974                           ;mrf49xa.c: 124: UI08_t k;
  2975                           ;mrf49xa.c: 126: UI08_t i, j;
  2976                           ;mrf49xa.c: 130: LATAbits.LATA4 = 0;
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2980  00D0  0022               	movlb	2	; select bank2
  2981  00D1  120C               	bcf	12,4	;volatile
  2982                           
  2983                           ;mrf49xa.c: 131: LATCbits.LATC1 = 1;
  2984  00D2  148E               	bsf	14,1	;volatile
  2985                           
  2986                           ;mrf49xa.c: 132: _delay(400000);
  2987  00D3  3003               	movlw	3
  2988  00D4  0020               	movlb	0	; select bank0
  2989  00D5  00A8               	movwf	??_Mrf49xaInit+2
  2990  00D6  3008               	movlw	8
  2991  00D7  00A7               	movwf	??_Mrf49xaInit+1
  2992  00D8  3078               	movlw	120
  2993  00D9  00A6               	movwf	??_Mrf49xaInit
  2994  00DA                     u2177:	
  2995  00DA  0BA6               	decfsz	??_Mrf49xaInit,f
  2996  00DB  28DA               	goto	u2177
  2997  00DC  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2998  00DD  28DA               	goto	u2177
  2999  00DE  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3000  00DF  28DA               	goto	u2177
  3001                           
  3002                           ;mrf49xa.c: 133: LATAbits.LATA4 = 1;
  3003  00E0  0022               	movlb	2	; select bank2
  3004  00E1  160C               	bsf	12,4	;volatile
  3005                           
  3006                           ;mrf49xa.c: 134: _delay(400000);
  3007  00E2  3003               	movlw	3
  3008  00E3  0020               	movlb	0	; select bank0
  3009  00E4  00A8               	movwf	??_Mrf49xaInit+2
  3010  00E5  3008               	movlw	8
  3011  00E6  00A7               	movwf	??_Mrf49xaInit+1
  3012  00E7  3078               	movlw	120
  3013  00E8  00A6               	movwf	??_Mrf49xaInit
  3014  00E9                     u2187:	
  3015  00E9  0BA6               	decfsz	??_Mrf49xaInit,f
  3016  00EA  28E9               	goto	u2187
  3017  00EB  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3018  00EC  28E9               	goto	u2187
  3019  00ED  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3020  00EE  28E9               	goto	u2187
  3021                           
  3022                           ;mrf49xa.c: 135: LATCbits.LATC4 = 1;
  3023  00EF  0022               	movlb	2	; select bank2
  3024  00F0  160E               	bsf	14,4	;volatile
  3025                           
  3026                           ;mrf49xa.c: 137: LATAbits.LATA5 = 1;
  3027  00F1  168C               	bsf	12,5	;volatile
  3028                           
  3029                           ;mrf49xa.c: 140: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { _delay(40000); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val)
      +                          ; } };
  3030  00F2  0020               	movlb	0	; select bank0
  3031  00F3  3093               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3032  00F4  01A9               	clrf	Mrf49xaInit@k
  3033  00F5  3187               	movlp	high __stringtab
  3034  00F6  000A               	callw
  3035  00F7  3180               	pagesel	$	;select current page
  3036  00F8  3800               	iorlw	0
  3037  00F9  1903               	btfsc	3,2
  3038  00FA  2922               	goto	l2636
  3039  00FB                     l2626:	
  3040  00FB  3529               	lslf	Mrf49xaInit@k,w
  3041  00FC  3E96               	addlw	low (_mrfRegset_Init| (0+32768))
  3042  00FD  3187               	movlp	high __stringtab
  3043  00FE  000A               	callw
  3044  00FF  3180               	pagesel	$	;select current page
  3045  0100  3A55               	xorlw	85
  3046  0101  1D03               	skipz
  3047  0102  290D               	goto	l2630
  3048  0103  3034               	movlw	52
  3049  0104  00A7               	movwf	??_Mrf49xaInit+1
  3050  0105  30F1               	movlw	241
  3051  0106  00A6               	movwf	??_Mrf49xaInit
  3052  0107                     u2197:	
  3053  0107  0BA6               	decfsz	??_Mrf49xaInit,f
  3054  0108  2907               	goto	u2197
  3055  0109  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3056  010A  2907               	goto	u2197
  3057  010B  3200               	nop2
  3058  010C  2919               	goto	l2632
  3059  010D                     l2630:	
  3060  010D  3529               	lslf	Mrf49xaInit@k,w
  3061  010E  3E97               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3062  010F  3187               	movlp	high __stringtab
  3063  0110  000A               	callw
  3064  0111  3180               	pagesel	$	;select current page
  3065  0112  00A1               	movwf	Mrf49TxCmd@val
  3066  0113  3529               	lslf	Mrf49xaInit@k,w
  3067  0114  3E96               	addlw	low (_mrfRegset_Init| (0+32768))
  3068  0115  3187               	movlp	high __stringtab
  3069  0116  000A               	callw
  3070  0117  3180               	pagesel	$	;select current page
  3071  0118  2224               	fcall	_Mrf49TxCmd
  3072  0119                     l2632:	
  3073  0119  0020               	movlb	0	; select bank0
  3074  011A  3093               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3075  011B  0AA9               	incf	Mrf49xaInit@k,f
  3076  011C  3187               	movlp	high __stringtab
  3077  011D  000A               	callw
  3078  011E  3180               	pagesel	$	;select current page
  3079  011F  0229               	subwf	Mrf49xaInit@k,w
  3080  0120  1C03               	skipc
  3081  0121  28FB               	goto	l2626
  3082  0122                     l2636:	
  3083                           
  3084                           ;mrf49xa.c: 143: Mrf49xaModeRx();
  3085  0122  21FB  3180         	fcall	_Mrf49xaModeRx
  3086  0124                     l2640:	
  3087                           ;mrf49xa.c: 150: while(PORTAbits.RA2 == 0)
  3088                           
  3089  0124  0020               	movlb	0	; select bank0
  3090  0125  190C               	btfsc	12,2	;volatile
  3091  0126  0008               	return
  3092                           
  3093                           ;mrf49xa.c: 151: Mrf49xaServe();
  3094  0127  212A  3180         	fcall	_Mrf49xaServe
  3095  0129  2924               	goto	l2640
  3096  012A                     __end_of_Mrf49xaInit:	
  3097  012A                     __ptext25:	
  3098 ;; *************** function _Mrf49xaServe *****************
  3099 ;; Defined at:
  3100 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  data            1    5[BANK0 ] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      unsigned char 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 1E/0
  3111 ;;		On exit  : 1F/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3114 ;;      Params:         0       0       0       0
  3115 ;;      Locals:         0       1       0       0
  3116 ;;      Temps:          0       1       0       0
  3117 ;;      Totals:         0       2       0       0
  3118 ;;Total ram usage:        2 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    8
  3121 ;; This function calls:
  3122 ;;		_Mrf49RxByte
  3123 ;;		_Mrf49RxSts
  3124 ;;		_Mrf49TxByte
  3125 ;;		_Mrf49xaModeRx
  3126 ;; This function is called by:
  3127 ;;		_Mrf49xaInit
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           
  3132                           ;psect for function _Mrf49xaServe
  3133  012A                     _Mrf49xaServe:	
  3134                           
  3135                           ;mrf49xa_data.c: 10: uint8_t data;
  3136                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  3137                           
  3138                           ;incstack = 0
  3139                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3140  012A  2288  3180         	fcall	_Mrf49RxSts
  3141                           
  3142                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  3143  012C  083A               	movf	_mrf49Status,w
  3144  012D  3AFF               	xorlw	255
  3145  012E  1D03               	skipz
  3146  012F  2934               	goto	l390
  3147  0130  083B               	movf	_mrf49Status+1,w
  3148  0131  3AFF               	xorlw	255
  3149  0132  1903               	btfsc	3,2
  3150                           
  3151                           ;mrf49xa_data.c: 19: return 0;
  3152  0133  3400               	retlw	0
  3153  0134                     l390:	
  3154                           ;mrf49xa_data.c: 23: {
  3155                           
  3156                           
  3157                           ;mrf49xa_data.c: 25: }
  3158                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  3159  0134  1ABA               	btfsc	_mrf49Status,5
  3160  0135  2940               	goto	l2384
  3161  0136  294C               	goto	l391
  3162  0137                     l2380:	
  3163                           
  3164                           ;mrf49xa_data.c: 33: case RECV_DATA:
  3165                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  3166  0137  21F9  3180         	fcall	_Mrf49RxByte
  3167  0139  00A5               	movwf	Mrf49xaServe@data
  3168                           
  3169                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  3170  013A  21F9  3180         	fcall	_Mrf49RxByte
  3171  013C  00A5               	movwf	Mrf49xaServe@data
  3172                           
  3173                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  3174  013D  21FB  3180         	fcall	_Mrf49xaModeRx
  3175                           
  3176                           ;mrf49xa_data.c: 44: break;
  3177  013F  294C               	goto	l391
  3178  0140                     l2384:	
  3179  0140  0021               	movlb	1	; select bank1
  3180  0141  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  3181                           
  3182                           ; Switch size 1, requested type "space"
  3183                           ; Number of cases is 3, Range of values is 0 to 2
  3184                           ; switch strategies available:
  3185                           ; Name         Instructions Cycles
  3186                           ; simple_byte           10     6 (average)
  3187                           ; direct_byte           12     6 (fixed)
  3188                           ; jumptable            260     6 (fixed)
  3189                           ;	Chosen strategy is simple_byte
  3190  0142  3A00               	xorlw	0	; case 0
  3191  0143  1903               	skipnz
  3192  0144  2937               	goto	l2380
  3193  0145  3A01               	xorlw	1	; case 1
  3194  0146  1903               	skipnz
  3195  0147  2937               	goto	l2380
  3196  0148  3A03               	xorlw	3	; case 2
  3197  0149  1903               	skipnz
  3198  014A  294C               	goto	l391
  3199  014B  294C               	goto	l391
  3200  014C                     l391:	
  3201                           
  3202                           ;mrf49xa_data.c: 52: }
  3203                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  3204  014C  0020               	movlb	0	; select bank0
  3205  014D  1BBA               	btfsc	_mrf49Status,7
  3206  014E  29E3               	goto	l2470
  3207  014F  29EF               	goto	l2472
  3208  0150                     l2388:	
  3209                           
  3210                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  3211  0150  21F9  3180         	fcall	_Mrf49RxByte
  3212  0152  00A5               	movwf	Mrf49xaServe@data
  3213                           
  3214                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3215  0153  1BBB               	btfsc	_mrf49Status+1,7
  3216  0154  2958               	goto	l2394
  3217  0155                     l2392:	
  3218                           
  3219                           ;mrf49xa_data.c: 72: {
  3220                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  3221  0155  21FB  3180         	fcall	_Mrf49xaModeRx
  3222                           
  3223                           ;mrf49xa_data.c: 74: break;
  3224  0157  29EF               	goto	l2472
  3225  0158                     l2394:	
  3226                           
  3227                           ;mrf49xa_data.c: 75: }
  3228                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  3229  0158  0021               	movlb	1	; select bank1
  3230  0159  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  3231  015A  1D03               	skipz
  3232  015B  295E               	goto	l2398
  3233  015C  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  3234  015D  2962               	goto	L1
  3235  015E                     l2398:	
  3236                           
  3237                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3238  015E  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3239  015F  1D03               	skipz
  3240  0160  2955               	goto	l2392
  3241  0161  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  3242  0162                     L1:	
  3243  0162  00A0               	movwf	_rfTrcvStatus^(0+128)
  3244                           
  3245                           ;mrf49xa_data.c: 85: }
  3246                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  3247  0163  0A20               	incf	_rfTrcvStatus^(0+128),w
  3248  0164  0086               	movwf	6
  3249  0165  0187               	clrf	7
  3250                           
  3251                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  3252  0166  2407  3180         	fcall	PL8	;call to abstracted procedure
  3253  0168  3E16               	addlw	22
  3254  0169  0086               	movwf	6
  3255  016A  0181               	clrf	1
  3256                           
  3257                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3258  016B  0820               	movf	_rfTrcvStatus^(0+128),w
  3259  016C  0086               	movwf	6
  3260  016D  3003               	movlw	3
  3261  016E  0081               	movwf	1
  3262                           
  3263                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  3264  016F  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  3265  0170  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  3266                           
  3267                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  3268  0171  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3269  0172  299F               	goto	L2
  3270  0173                     l2414:	
  3271                           ;mrf49xa_data.c: 93: break;
  3272                           
  3273                           
  3274                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  3275  0173  21F9  3180         	fcall	_Mrf49RxByte
  3276  0175  00A5               	movwf	Mrf49xaServe@data
  3277                           
  3278                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3279  0176  1BBB               	btfsc	_mrf49Status+1,7
  3280  0177  297F               	goto	l2422
  3281                           
  3282                           ;mrf49xa_data.c: 102: {
  3283                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3284  0178  0021               	movlb	1	; select bank1
  3285  0179  0820               	movf	_rfTrcvStatus^(0+128),w
  3286  017A  0086               	movwf	6
  3287  017B  3004               	movlw	4
  3288  017C  0187               	clrf	7
  3289  017D  0081               	movwf	1
  3290  017E  2955               	goto	l2392
  3291  017F                     l2422:	
  3292                           
  3293                           ;mrf49xa_data.c: 106: }
  3294                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3295  017F  0021               	movlb	1	; select bank1
  3296  0180  0A20               	incf	_rfTrcvStatus^(0+128),w
  3297  0181  0086               	movwf	6
  3298  0182  0187               	clrf	7
  3299  0183  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3300  0184  0601               	xorwf	1,w
  3301  0185  1D03               	skipz
  3302  0186  2995               	goto	l2432
  3303                           
  3304                           ;mrf49xa_data.c: 109: {
  3305                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  3306  0187  0820               	movf	_rfTrcvStatus^(0+128),w
  3307  0188  3E16               	addlw	22
  3308  0189  0086               	movwf	6
  3309                           
  3310                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3311  018A  2407  3180         	fcall	PL8	;call to abstracted procedure
  3312  018C  0086               	movwf	6
  3313  018D  3004               	movlw	4
  3314  018E  0081               	movwf	1
  3315                           
  3316                           ;mrf49xa_data.c: 120: Mrf49xaModeRx();
  3317  018F  21FB  3180         	fcall	_Mrf49xaModeRx
  3318                           
  3319                           ;mrf49xa_data.c: 123: LATCbits.LATC2 = 1;
  3320  0191  0022               	movlb	2	; select bank2
  3321  0192  150E               	bsf	14,2	;volatile
  3322                           
  3323                           ;mrf49xa_data.c: 124: LATCbits.LATC2 = 0;
  3324  0193  110E               	bcf	14,2	;volatile
  3325                           
  3326                           ;mrf49xa_data.c: 126: }
  3327  0194  29EF               	goto	l2472
  3328  0195                     l2432:	
  3329                           
  3330                           ;mrf49xa_data.c: 127: else
  3331                           ;mrf49xa_data.c: 128: {
  3332                           ;mrf49xa_data.c: 129: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3333  0195  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3334  0196  0720               	addwf	_rfTrcvStatus^(0+128),w
  3335  0197  0020               	movlb	0	; select bank0
  3336  0198  00A4               	movwf	??_Mrf49xaServe
  3337  0199  0A24               	incf	??_Mrf49xaServe,w
  3338  019A  0086               	movwf	6
  3339  019B  0187               	clrf	7
  3340  019C  0825               	movf	Mrf49xaServe@data,w
  3341  019D  0081               	movwf	1
  3342  019E  0021               	movlb	1	; select bank1
  3343  019F                     L2:	
  3344  019F  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3345  01A0  29EF               	goto	l2472
  3346  01A1                     l2436:	
  3347                           
  3348                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte++;
  3349  01A1  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3350                           
  3351                           ;mrf49xa_data.c: 137: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3352  01A2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3353  01A3  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  3354  01A4  1D03               	skipz
  3355  01A5  29D2               	goto	l2466
  3356                           
  3357                           ;mrf49xa_data.c: 138: rfTrcvStatus.hwByte = 49;
  3358  01A6  3031               	movlw	49
  3359  01A7  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3360  01A8  29D2               	goto	l2466
  3361  01A9                     l2442:	
  3362                           
  3363                           ;mrf49xa_data.c: 143: Mrf49TxByte(0x2D);
  3364  01A9  302D               	movlw	45
  3365  01AA  21F4  3180         	fcall	_Mrf49TxByte
  3366                           
  3367                           ;mrf49xa_data.c: 144: break;
  3368  01AC  29EF               	goto	l2472
  3369  01AD                     l2444:	
  3370                           
  3371                           ;mrf49xa_data.c: 147: Mrf49TxByte(0xD4);
  3372  01AD  30D4               	movlw	212
  3373  01AE  21F4  3180         	fcall	_Mrf49TxByte
  3374                           
  3375                           ;mrf49xa_data.c: 148: rfTrcvStatus.hwByte = 0xFF;
  3376  01B0  30FF               	movlw	255
  3377  01B1  0021               	movlb	1	; select bank1
  3378  01B2  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3379                           
  3380                           ;mrf49xa_data.c: 149: break;
  3381  01B3  29EF               	goto	l2472
  3382  01B4                     l2448:	
  3383                           
  3384                           ;mrf49xa_data.c: 153: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3385  01B4  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3386  01B5  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  3387  01B6  0086               	movwf	6
  3388  01B7  0187               	clrf	7
  3389  01B8  0801               	movf	1,w
  3390  01B9  21F4  3180         	fcall	_Mrf49TxByte
  3391                           
  3392                           ;mrf49xa_data.c: 154: break;
  3393  01BB  29EF               	goto	l2472
  3394  01BC                     l2450:	
  3395                           
  3396                           ;mrf49xa_data.c: 157: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3397  01BC  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  3398  01BD  21F4  3180         	fcall	_Mrf49TxByte
  3399                           
  3400                           ;mrf49xa_data.c: 158: break;
  3401  01BF  29EF               	goto	l2472
  3402  01C0                     l2452:	
  3403                           
  3404                           ;mrf49xa_data.c: 161: Mrf49TxByte(0x00);
  3405  01C0  3000               	movlw	0
  3406  01C1  21F4  3180         	fcall	_Mrf49TxByte
  3407                           
  3408                           ;mrf49xa_data.c: 162: break;
  3409  01C3  29EF               	goto	l2472
  3410  01C4                     l2454:	
  3411                           
  3412                           ;mrf49xa_data.c: 165: Mrf49TxByte(0x00);
  3413  01C4  3000               	movlw	0
  3414  01C5  21F4  3180         	fcall	_Mrf49TxByte
  3415                           
  3416                           ;mrf49xa_data.c: 166: Mrf49xaModeRx();
  3417  01C7  21FB  3180         	fcall	_Mrf49xaModeRx
  3418                           
  3419                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.retry = 0;
  3420  01C9  30F0               	movlw	-16
  3421  01CA  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  3422                           
  3423                           ;mrf49xa_data.c: 170: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  3424  01CB  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  3425  01CC  29D0               	goto	l2462
  3426                           
  3427                           ;mrf49xa_data.c: 171: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3428  01CD  3002               	movlw	2
  3429  01CE  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  3430  01CF  29EF               	goto	l2472
  3431  01D0                     l2462:	
  3432                           
  3433                           ;mrf49xa_data.c: 172: else
  3434                           ;mrf49xa_data.c: 173: rfTrcvStatus.txPacket.state = PKT_FREE;
  3435  01D0  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  3436  01D1  29EF               	goto	l2472
  3437  01D2                     l2466:	
  3438  01D2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3439                           
  3440                           ; Switch size 1, requested type "space"
  3441                           ; Number of cases is 5, Range of values is 49 to 101
  3442                           ; switch strategies available:
  3443                           ; Name         Instructions Cycles
  3444                           ; simple_byte           16     9 (average)
  3445                           ; direct_byte          115     9 (fixed)
  3446                           ; jumptable            263     9 (fixed)
  3447                           ;	Chosen strategy is simple_byte
  3448  01D3  3A31               	xorlw	49	; case 49
  3449  01D4  1903               	skipnz
  3450  01D5  29BC               	goto	l2450
  3451  01D6  3A03               	xorlw	3	; case 50
  3452  01D7  1903               	skipnz
  3453  01D8  29C0               	goto	l2452
  3454  01D9  3A01               	xorlw	1	; case 51
  3455  01DA  1903               	skipnz
  3456  01DB  29C4               	goto	l2454
  3457  01DC  3A57               	xorlw	87	; case 100
  3458  01DD  1903               	skipnz
  3459  01DE  29A9               	goto	l2442
  3460  01DF  3A01               	xorlw	1	; case 101
  3461  01E0  1903               	skipnz
  3462  01E1  29AD               	goto	l2444
  3463  01E2  29B4               	goto	l2448
  3464  01E3                     l2470:	
  3465  01E3  0021               	movlb	1	; select bank1
  3466  01E4  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  3467                           
  3468                           ; Switch size 1, requested type "space"
  3469                           ; Number of cases is 3, Range of values is 0 to 2
  3470                           ; switch strategies available:
  3471                           ; Name         Instructions Cycles
  3472                           ; simple_byte           10     6 (average)
  3473                           ; direct_byte           12     6 (fixed)
  3474                           ; jumptable            260     6 (fixed)
  3475                           ;	Chosen strategy is simple_byte
  3476  01E5  3A00               	xorlw	0	; case 0
  3477  01E6  1903               	skipnz
  3478  01E7  2950               	goto	l2388
  3479  01E8  3A01               	xorlw	1	; case 1
  3480  01E9  1903               	skipnz
  3481  01EA  2973               	goto	l2414
  3482  01EB  3A03               	xorlw	3	; case 2
  3483  01EC  1903               	skipnz
  3484  01ED  29A1               	goto	l2436
  3485  01EE  29EF               	goto	l2472
  3486  01EF                     l2472:	
  3487                           
  3488                           ;mrf49xa_data.c: 180: }
  3489                           ;mrf49xa_data.c: 194: return PORTAbits.RA2 == 1 ? 1 : 0;
  3490  01EF  0020               	movlb	0	; select bank0
  3491  01F0  0C0C               	rrf	12,w	;volatile
  3492  01F1  0C89               	rrf	9,f
  3493  01F2  3901               	andlw	1
  3494  01F3  0008               	return
  3495  01F4                     __end_of_Mrf49xaServe:	
  3496  01F4                     __ptext27:	
  3497 ;; *************** function _Mrf49TxByte *****************
  3498 ;; Defined at:
  3499 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  byte            1    wreg     unsigned char 
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  byte            1    3[BANK0 ] unsigned char 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, pclath, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 1E/1
  3510 ;;		On exit  : 1F/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3513 ;;      Params:         0       0       0       0
  3514 ;;      Locals:         0       1       0       0
  3515 ;;      Temps:          0       0       0       0
  3516 ;;      Totals:         0       1       0       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    7
  3520 ;; This function calls:
  3521 ;;		_Mrf49TxCmd
  3522 ;; This function is called by:
  3523 ;;		_Mrf49xaServe
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           
  3528                           ;psect for function _Mrf49TxByte
  3529  01F4                     _Mrf49TxByte:	
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  3533                           ;Mrf49TxByte@byte stored from wreg
  3534  01F4  0020               	movlb	0	; select bank0
  3535  01F5  00A3               	movwf	Mrf49TxByte@byte
  3536                           
  3537                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  3538  01F6  00A1               	movwf	Mrf49TxCmd@val
  3539  01F7  30B8               	movlw	184
  3540  01F8  2A24               	ljmp	_Mrf49TxCmd
  3541  01F9                     __end_of_Mrf49TxByte:	
  3542  01F9                     __ptext30:	
  3543 ;; *************** function _Mrf49RxByte *****************
  3544 ;; Defined at:
  3545 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;		None
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      unsigned char 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, pclath, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 1E/1
  3556 ;;		On exit  : 1F/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3559 ;;      Params:         0       0       0       0
  3560 ;;      Locals:         0       0       0       0
  3561 ;;      Temps:          0       0       0       0
  3562 ;;      Totals:         0       0       0       0
  3563 ;;Total ram usage:        0 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    7
  3566 ;; This function calls:
  3567 ;;		_Mrf49RxCmd
  3568 ;; This function is called by:
  3569 ;;		_Mrf49xaServe
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           
  3574                           ;psect for function _Mrf49RxByte
  3575  01F9                     _Mrf49RxByte:	
  3576                           
  3577                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3581  01F9  30B0               	movlw	176
  3582  01FA  28C6               	ljmp	_Mrf49RxCmd
  3583  01FB                     __end_of_Mrf49RxByte:	
  3584  01FB                     __ptext26:	
  3585 ;; *************** function _Mrf49xaModeRx *****************
  3586 ;; Defined at:
  3587 ;;		line 77 in file "../../../src/devices/mrf49xa.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  k               1    3[BANK0 ] unsigned char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;		None               void
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 1E/0
  3598 ;;		On exit  : 1F/1
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3601 ;;      Params:         0       0       0       0
  3602 ;;      Locals:         0       1       0       0
  3603 ;;      Temps:          0       0       0       0
  3604 ;;      Totals:         0       1       0       0
  3605 ;;Total ram usage:        1 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    7
  3608 ;; This function calls:
  3609 ;;		_Mrf49TxCmd
  3610 ;; This function is called by:
  3611 ;;		_Mrf49xaInit
  3612 ;;		_Mrf49xaServe
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _Mrf49xaModeRx
  3618  01FB                     _Mrf49xaModeRx:	
  3619                           
  3620                           ;mrf49xa.c: 79: UI08_t k;
  3621                           ;mrf49xa.c: 80: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3622                           
  3623                           ;incstack = 0
  3624                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  3625  01FB  0020               	movlb	0	; select bank0
  3626  01FC  3094               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3627  01FD  01A3               	clrf	Mrf49xaModeRx@k
  3628  01FE  3187               	movlp	high __stringtab
  3629  01FF  000A               	callw
  3630  0200  3180               	pagesel	$	;select current page
  3631  0201  3800               	iorlw	0
  3632  0202  1903               	btfsc	3,2
  3633  0203  2A20               	goto	l2266
  3634  0204                     l2258:	
  3635  0204  3523               	lslf	Mrf49xaModeRx@k,w
  3636  0205  3EB6               	addlw	low (_mrfRegset_Rx| (0+32768))
  3637  0206  3187               	movlp	high __stringtab
  3638  0207  000A               	callw
  3639  0208  3180               	pagesel	$	;select current page
  3640  0209  3A55               	xorlw	85
  3641  020A  1903               	skipnz
  3642  020B  2A18               	goto	l2262
  3643  020C  3523               	lslf	Mrf49xaModeRx@k,w
  3644  020D  3EB7               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3645  020E  3187               	movlp	high __stringtab
  3646  020F  000A               	callw
  3647  0210  3180               	pagesel	$	;select current page
  3648  0211  00A1               	movwf	Mrf49TxCmd@val
  3649  0212  3523               	lslf	Mrf49xaModeRx@k,w
  3650  0213  3EB6               	addlw	low (_mrfRegset_Rx| (0+32768))
  3651  0214  3187               	movlp	high __stringtab
  3652  0215  000A               	callw
  3653  0216  3180               	pagesel	$	;select current page
  3654  0217  2224               	fcall	_Mrf49TxCmd
  3655  0218                     l2262:	
  3656  0218  3094               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3657  0219  0AA3               	incf	Mrf49xaModeRx@k,f
  3658  021A  3187               	movlp	high __stringtab
  3659  021B  000A               	callw
  3660  021C  3180               	pagesel	$	;select current page
  3661  021D  0223               	subwf	Mrf49xaModeRx@k,w
  3662  021E  1C03               	skipc
  3663  021F  2A04               	goto	l2258
  3664  0220                     l2266:	
  3665                           
  3666                           ;mrf49xa.c: 83: rfTrcvStatus.state = RECV_IDLE;
  3667  0220  0021               	movlb	1	; select bank1
  3668  0221  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  3669                           
  3670                           ;mrf49xa.c: 84: rfTrcvStatus.hwByte = 0;
  3671  0222  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3672  0223  0008               	return
  3673  0224                     __end_of_Mrf49xaModeRx:	
  3674  0224                     __ptext28:	
  3675 ;; *************** function _Mrf49TxCmd *****************
  3676 ;; Defined at:
  3677 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  cmd             1    wreg     unsigned char 
  3680 ;;  val             1    1[BANK0 ] unsigned char 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  cmd             1    2[BANK0 ] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;		None               void
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0, pclath, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 1F/0
  3689 ;;		On exit  : 1F/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3692 ;;      Params:         0       1       0       0
  3693 ;;      Locals:         0       1       0       0
  3694 ;;      Temps:          0       0       0       0
  3695 ;;      Totals:         0       2       0       0
  3696 ;;Total ram usage:        2 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    6
  3699 ;; This function calls:
  3700 ;;		_Mrf49SpiTx
  3701 ;; This function is called by:
  3702 ;;		_Mrf49xaModeRx
  3703 ;;		_Mrf49xaModeTx
  3704 ;;		_Mrf49xaInit
  3705 ;;		_Mrf49TxByte
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _Mrf49TxCmd
  3711  0224                     _Mrf49TxCmd:	
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3715                           ;Mrf49TxCmd@cmd stored from wreg
  3716  0224  00A2               	movwf	Mrf49TxCmd@cmd
  3717                           
  3718                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  3719  0225  130E               	bcf	14,6	;volatile
  3720                           
  3721                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3722  0226  0822               	movf	Mrf49TxCmd@cmd,w
  3723  0227  222D  3180         	fcall	_Mrf49SpiTx
  3724                           
  3725                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3726  0229  0821               	movf	Mrf49TxCmd@val,w
  3727  022A  222D               	fcall	_Mrf49SpiTx
  3728                           
  3729                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  3730  022B  170E               	bsf	14,6	;volatile
  3731  022C  0008               	return
  3732  022D                     __end_of_Mrf49TxCmd:	
  3733  022D                     __ptext32:	
  3734 ;; *************** function _Mrf49SpiTx *****************
  3735 ;; Defined at:
  3736 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  byte            1    wreg     unsigned char 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  byte            1    0[BANK0 ] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;		None               void
  3743 ;; Registers used:
  3744 ;;		wreg
  3745 ;; Tracked objects:
  3746 ;;		On entry : 1F/0
  3747 ;;		On exit  : 1F/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3750 ;;      Params:         0       0       0       0
  3751 ;;      Locals:         0       1       0       0
  3752 ;;      Temps:          0       0       0       0
  3753 ;;      Totals:         0       1       0       0
  3754 ;;Total ram usage:        1 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    5
  3757 ;; This function calls:
  3758 ;;		Nothing
  3759 ;; This function is called by:
  3760 ;;		_Mrf49TxCmd
  3761 ;;		_Mrf49RxCmd
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           
  3766                           ;psect for function _Mrf49SpiTx
  3767  022D                     _Mrf49SpiTx:	
  3768                           
  3769                           ;incstack = 0
  3770                           ; Regs used in _Mrf49SpiTx: [wreg]
  3771                           ;Mrf49SpiTx@byte stored from wreg
  3772  022D  00A0               	movwf	Mrf49SpiTx@byte
  3773                           
  3774                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  3775  022E  1FA0               	btfss	Mrf49SpiTx@byte,7
  3776  022F  2A32               	goto	l213
  3777  0230  178D               	bsf	13,7	;volatile
  3778  0231  2A33               	goto	l214
  3779  0232                     l213:	
  3780  0232  138D               	bcf	13,7	;volatile
  3781  0233                     l214:	
  3782  0233  0022               	movlb	2	; select bank2
  3783  0234  178E               	bsf	14,7	;volatile
  3784  0235  0000               	nop	;# 
  3785  0236  0022               	movlb	2	; select bank2
  3786  0237  138E               	bcf	14,7	;volatile
  3787  0238  0020               	movlb	0	; select bank0
  3788  0239  1F20               	btfss	Mrf49SpiTx@byte,6
  3789  023A  2A3D               	goto	l217
  3790  023B  178D               	bsf	13,7	;volatile
  3791  023C  2A3E               	goto	l218
  3792  023D                     l217:	
  3793  023D  138D               	bcf	13,7	;volatile
  3794  023E                     l218:	
  3795  023E  0022               	movlb	2	; select bank2
  3796  023F  178E               	bsf	14,7	;volatile
  3797  0240  0000               	nop	;# 
  3798  0241  0022               	movlb	2	; select bank2
  3799  0242  138E               	bcf	14,7	;volatile
  3800  0243  0020               	movlb	0	; select bank0
  3801  0244  1EA0               	btfss	Mrf49SpiTx@byte,5
  3802  0245  2A48               	goto	l221
  3803  0246  178D               	bsf	13,7	;volatile
  3804  0247  2A49               	goto	l222
  3805  0248                     l221:	
  3806  0248  138D               	bcf	13,7	;volatile
  3807  0249                     l222:	
  3808  0249  0022               	movlb	2	; select bank2
  3809  024A  178E               	bsf	14,7	;volatile
  3810  024B  0000               	nop	;# 
  3811  024C  0022               	movlb	2	; select bank2
  3812  024D  138E               	bcf	14,7	;volatile
  3813  024E  0020               	movlb	0	; select bank0
  3814  024F  1E20               	btfss	Mrf49SpiTx@byte,4
  3815  0250  2A53               	goto	l225
  3816  0251  178D               	bsf	13,7	;volatile
  3817  0252  2A54               	goto	l226
  3818  0253                     l225:	
  3819  0253  138D               	bcf	13,7	;volatile
  3820  0254                     l226:	
  3821  0254  0022               	movlb	2	; select bank2
  3822  0255  178E               	bsf	14,7	;volatile
  3823  0256  0000               	nop	;# 
  3824  0257  0022               	movlb	2	; select bank2
  3825  0258  138E               	bcf	14,7	;volatile
  3826  0259  0020               	movlb	0	; select bank0
  3827  025A  1DA0               	btfss	Mrf49SpiTx@byte,3
  3828  025B  2A5E               	goto	l229
  3829  025C  178D               	bsf	13,7	;volatile
  3830  025D  2A5F               	goto	l230
  3831  025E                     l229:	
  3832  025E  138D               	bcf	13,7	;volatile
  3833  025F                     l230:	
  3834  025F  0022               	movlb	2	; select bank2
  3835  0260  178E               	bsf	14,7	;volatile
  3836  0261  0000               	nop	;# 
  3837  0262  0022               	movlb	2	; select bank2
  3838  0263  138E               	bcf	14,7	;volatile
  3839  0264  0020               	movlb	0	; select bank0
  3840  0265  1D20               	btfss	Mrf49SpiTx@byte,2
  3841  0266  2A69               	goto	l233
  3842  0267  178D               	bsf	13,7	;volatile
  3843  0268  2A6A               	goto	l234
  3844  0269                     l233:	
  3845  0269  138D               	bcf	13,7	;volatile
  3846  026A                     l234:	
  3847  026A  0022               	movlb	2	; select bank2
  3848  026B  178E               	bsf	14,7	;volatile
  3849  026C  0000               	nop	;# 
  3850  026D  0022               	movlb	2	; select bank2
  3851  026E  138E               	bcf	14,7	;volatile
  3852  026F  0020               	movlb	0	; select bank0
  3853  0270  1CA0               	btfss	Mrf49SpiTx@byte,1
  3854  0271  2A74               	goto	l237
  3855  0272  178D               	bsf	13,7	;volatile
  3856  0273  2A75               	goto	l238
  3857  0274                     l237:	
  3858  0274  138D               	bcf	13,7	;volatile
  3859  0275                     l238:	
  3860  0275  0022               	movlb	2	; select bank2
  3861  0276  178E               	bsf	14,7	;volatile
  3862  0277  0000               	nop	;# 
  3863  0278  0022               	movlb	2	; select bank2
  3864  0279  138E               	bcf	14,7	;volatile
  3865  027A  0020               	movlb	0	; select bank0
  3866  027B  1C20               	btfss	Mrf49SpiTx@byte,0
  3867  027C  2A7F               	goto	l241
  3868  027D  178D               	bsf	13,7	;volatile
  3869  027E  2A80               	goto	l242
  3870  027F                     l241:	
  3871  027F  138D               	bcf	13,7	;volatile
  3872  0280                     l242:	
  3873  0280  0022               	movlb	2	; select bank2
  3874  0281  178E               	bsf	14,7	;volatile
  3875  0282  0000               	nop	;# 
  3876  0283  0022               	movlb	2	; select bank2
  3877  0284  138E               	bcf	14,7	;volatile
  3878                           
  3879                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  3880  0285  0020               	movlb	0	; select bank0
  3881  0286  138D               	bcf	13,7	;volatile
  3882  0287  0008               	return
  3883  0288                     __end_of_Mrf49SpiTx:	
  3884  0288                     __ptext29:	
  3885 ;; *************** function _Mrf49RxSts *****************
  3886 ;; Defined at:
  3887 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;		None               void
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 1E/0
  3898 ;;		On exit  : 1F/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3901 ;;      Params:         0       0       0       0
  3902 ;;      Locals:         0       0       0       0
  3903 ;;      Temps:          0       0       0       0
  3904 ;;      Totals:         0       0       0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    6
  3908 ;; This function calls:
  3909 ;;		_Mrf49SpiRx
  3910 ;; This function is called by:
  3911 ;;		_Mrf49xaTick
  3912 ;;		_Mrf49xaServe
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _Mrf49RxSts
  3918  0288                     _Mrf49RxSts:	
  3919                           
  3920                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  3924  0288  120B               	bcf	11,4	;volatile
  3925                           
  3926                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  3927  0289  0020               	movlb	0	; select bank0
  3928  028A  130E               	bcf	14,6	;volatile
  3929                           
  3930                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  3931  028B  2293  3180         	fcall	_Mrf49SpiRx
  3932  028D  00BA               	movwf	_mrf49Status
  3933                           
  3934                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  3935  028E  2293               	fcall	_Mrf49SpiRx
  3936  028F  00BB               	movwf	_mrf49Status+1
  3937                           
  3938                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  3939  0290  170E               	bsf	14,6	;volatile
  3940                           
  3941                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  3942  0291  160B               	bsf	11,4	;volatile
  3943  0292  0008               	return
  3944  0293                     __end_of_Mrf49RxSts:	
  3945  0293                     __ptext33:	
  3946 ;; *************** function _Mrf49SpiRx *****************
  3947 ;; Defined at:
  3948 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;		None
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  data            1    0[BANK0 ] unsigned char 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      unsigned char 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2
  3957 ;; Tracked objects:
  3958 ;;		On entry : 1F/0
  3959 ;;		On exit  : 1F/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3962 ;;      Params:         0       0       0       0
  3963 ;;      Locals:         0       1       0       0
  3964 ;;      Temps:          0       0       0       0
  3965 ;;      Totals:         0       1       0       0
  3966 ;;Total ram usage:        1 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    5
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_Mrf49RxCmd
  3973 ;;		_Mrf49RxSts
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           
  3978                           ;psect for function _Mrf49SpiRx
  3979  0293                     _Mrf49SpiRx:	
  3980                           
  3981                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  3982                           
  3983                           ;incstack = 0
  3984                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  3985  0293  01A0               	clrf	Mrf49SpiRx@data
  3986                           
  3987                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  3988  0294  138D               	bcf	13,7	;volatile
  3989  0295  1A8E               	btfsc	14,5	;volatile
  3990  0296  17A0               	bsf	Mrf49SpiRx@data,7
  3991  0297  0022               	movlb	2	; select bank2
  3992  0298  178E               	bsf	14,7	;volatile
  3993  0299  0000               	nop	;# 
  3994  029A  0022               	movlb	2	; select bank2
  3995  029B  138E               	bcf	14,7	;volatile
  3996                           
  3997                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3998  029C  0020               	movlb	0	; select bank0
  3999  029D  1A8E               	btfsc	14,5	;volatile
  4000  029E  1720               	bsf	Mrf49SpiRx@data,6
  4001  029F  0022               	movlb	2	; select bank2
  4002  02A0  178E               	bsf	14,7	;volatile
  4003  02A1  0000               	nop	;# 
  4004  02A2  0022               	movlb	2	; select bank2
  4005  02A3  138E               	bcf	14,7	;volatile
  4006                           
  4007                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4008  02A4  0020               	movlb	0	; select bank0
  4009  02A5  1A8E               	btfsc	14,5	;volatile
  4010  02A6  16A0               	bsf	Mrf49SpiRx@data,5
  4011  02A7  0022               	movlb	2	; select bank2
  4012  02A8  178E               	bsf	14,7	;volatile
  4013  02A9  0000               	nop	;# 
  4014  02AA  0022               	movlb	2	; select bank2
  4015  02AB  138E               	bcf	14,7	;volatile
  4016                           
  4017                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4018  02AC  0020               	movlb	0	; select bank0
  4019  02AD  1A8E               	btfsc	14,5	;volatile
  4020  02AE  1620               	bsf	Mrf49SpiRx@data,4
  4021  02AF  0022               	movlb	2	; select bank2
  4022  02B0  178E               	bsf	14,7	;volatile
  4023  02B1  0000               	nop	;# 
  4024  02B2  0022               	movlb	2	; select bank2
  4025  02B3  138E               	bcf	14,7	;volatile
  4026                           
  4027                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4028  02B4  0020               	movlb	0	; select bank0
  4029  02B5  1A8E               	btfsc	14,5	;volatile
  4030  02B6  15A0               	bsf	Mrf49SpiRx@data,3
  4031  02B7  0022               	movlb	2	; select bank2
  4032  02B8  178E               	bsf	14,7	;volatile
  4033  02B9  0000               	nop	;# 
  4034  02BA  0022               	movlb	2	; select bank2
  4035  02BB  138E               	bcf	14,7	;volatile
  4036                           
  4037                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4038  02BC  0020               	movlb	0	; select bank0
  4039  02BD  1A8E               	btfsc	14,5	;volatile
  4040  02BE  1520               	bsf	Mrf49SpiRx@data,2
  4041  02BF  0022               	movlb	2	; select bank2
  4042  02C0  178E               	bsf	14,7	;volatile
  4043  02C1  0000               	nop	;# 
  4044  02C2  0022               	movlb	2	; select bank2
  4045  02C3  138E               	bcf	14,7	;volatile
  4046                           
  4047                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4048  02C4  0020               	movlb	0	; select bank0
  4049  02C5  1A8E               	btfsc	14,5	;volatile
  4050  02C6  14A0               	bsf	Mrf49SpiRx@data,1
  4051  02C7  0022               	movlb	2	; select bank2
  4052  02C8  178E               	bsf	14,7	;volatile
  4053  02C9  0000               	nop	;# 
  4054  02CA  0022               	movlb	2	; select bank2
  4055  02CB  138E               	bcf	14,7	;volatile
  4056                           
  4057                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4058  02CC  0020               	movlb	0	; select bank0
  4059  02CD  1A8E               	btfsc	14,5	;volatile
  4060  02CE  1420               	bsf	Mrf49SpiRx@data,0
  4061  02CF  0022               	movlb	2	; select bank2
  4062  02D0  178E               	bsf	14,7	;volatile
  4063  02D1  0000               	nop	;# 
  4064  02D2  0022               	movlb	2	; select bank2
  4065  02D3  138E               	bcf	14,7	;volatile
  4066                           
  4067                           ;mrf49xa_spi_pic16.c: 40: return data;
  4068  02D4  0020               	movlb	0	; select bank0
  4069  02D5  0820               	movf	Mrf49SpiRx@data,w
  4070  02D6  0008               	return
  4071  02D7                     __end_of_Mrf49SpiRx:	
  4072  02D7                     __ptext35:	
  4073 ;; *************** function _AdcInit *****************
  4074 ;; Defined at:
  4075 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;		None
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, status,2
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/2
  4086 ;;		On exit  : 1F/1
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4089 ;;      Params:         0       0       0       0
  4090 ;;      Locals:         0       0       0       0
  4091 ;;      Temps:          0       0       0       0
  4092 ;;      Totals:         0       0       0       0
  4093 ;;Total ram usage:        0 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    5
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _AdcInit
  4105  02D7                     _AdcInit:	
  4106                           
  4107                           ;adc16.c: 6: ANSELA = 0;
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in _AdcInit: [wreg+status,2]
  4111  02D7  0023               	movlb	3	; select bank3
  4112  02D8  018C               	clrf	12	;volatile
  4113                           
  4114                           ;adc16.c: 7: ANSELB = 0;
  4115  02D9  018D               	clrf	13	;volatile
  4116                           
  4117                           ;adc16.c: 8: ANSELC = 0;
  4118  02DA  018E               	clrf	14	;volatile
  4119                           
  4120                           ;adc16.c: 10: FVRCON = 0b11100001;
  4121  02DB  30E1               	movlw	225
  4122  02DC  0022               	movlb	2	; select bank2
  4123  02DD  0097               	movwf	23	;volatile
  4124                           
  4125                           ;adc16.c: 12: ADCON2 = 0b00000000;
  4126  02DE  0021               	movlb	1	; select bank1
  4127  02DF  019F               	clrf	31	;volatile
  4128                           
  4129                           ;adc16.c: 13: ADCON1 = 0b11110000;
  4130  02E0  30F0               	movlw	240
  4131  02E1  009E               	movwf	30	;volatile
  4132                           
  4133                           ;adc16.c: 14: ADCON0 = 0b00000000;
  4134  02E2  019D               	clrf	29	;volatile
  4135                           
  4136                           ;adc16.c: 16: ADCON0 = 0b00010011;
  4137  02E3  3013               	movlw	19
  4138  02E4  009D               	movwf	29	;volatile
  4139  02E5  0008               	return
  4140  02E6                     __end_of_AdcInit:	
  4141  02E6                     __ptext34:	
  4142 ;; *************** function _ExtIntInit *****************
  4143 ;; Defined at:
  4144 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;		None
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;		None
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		None
  4153 ;; Tracked objects:
  4154 ;;		On entry : 1F/1
  4155 ;;		On exit  : 1F/1
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4158 ;;      Params:         0       0       0       0
  4159 ;;      Locals:         0       0       0       0
  4160 ;;      Temps:          0       0       0       0
  4161 ;;      Totals:         0       0       0       0
  4162 ;;Total ram usage:        0 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    5
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _ExtIntInit
  4174  02E6                     _ExtIntInit:	
  4175                           
  4176                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4177                           
  4178                           ;incstack = 0
  4179                           ; Regs used in _ExtIntInit: []
  4180  02E6  1315               	bcf	21,6	;volatile
  4181                           
  4182                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4183  02E7  108B               	bcf	11,1	;volatile
  4184                           
  4185                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4186  02E8  160B               	bsf	11,4	;volatile
  4187                           
  4188                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4189  02E9  178B               	bsf	11,7	;volatile
  4190  02EA  0008               	return
  4191  02EB                     __end_of_ExtIntInit:	
  4192  02EB                     __ptext23:	
  4193 ;; *************** function _Mrf49xaFreePacket *****************
  4194 ;; Defined at:
  4195 ;;		line 84 in file "../../../src/devices/mrf49xa_packet.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4198 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  4201 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		wreg, fsr1l, fsr1h, status,2
  4206 ;; Tracked objects:
  4207 ;;		On entry : 1F/0
  4208 ;;		On exit  : 1F/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4211 ;;      Params:         0       0       0       0
  4212 ;;      Locals:         0       1       0       0
  4213 ;;      Temps:          0       0       0       0
  4214 ;;      Totals:         0       1       0       0
  4215 ;;Total ram usage:        1 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    5
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_Mrf49xaTick
  4222 ;;		_HandlePacket
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function _Mrf49xaFreePacket
  4228  02EB                     _Mrf49xaFreePacket:	
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  4232                           ;Mrf49xaFreePacket@packet stored from wreg
  4233  02EB  00A0               	movwf	Mrf49xaFreePacket@packet
  4234                           
  4235                           ;mrf49xa_packet.c: 86: packet->state = PKT_FREE;
  4236  02EC  0086               	movwf	6
  4237  02ED  0187               	clrf	7
  4238  02EE  0181               	clrf	1
  4239  02EF  0008               	return
  4240  02F0                     __end_of_Mrf49xaFreePacket:	
  4241  02F0                     __ptext9:	
  4242 ;; *************** function _HandlePacket *****************
  4243 ;; Defined at:
  4244 ;;		line 108 in file "../../../src/rfstack/client.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4247 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  packet          1   21[BANK0 ] PTR struct rfTrcvPacket_
  4250 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4251 ;;  sendMsg         1   20[BANK0 ] unsigned char 
  4252 ;;  sendAck         1   19[BANK0 ] unsigned char 
  4253 ;;  needAck         1    0        unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;		None               void
  4256 ;; Registers used:
  4257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 1F/0
  4260 ;;		On exit  : 1E/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4263 ;;      Params:         0       0       0       0
  4264 ;;      Locals:         0       4       0       0
  4265 ;;      Temps:          0       0       0       0
  4266 ;;      Totals:         0       4       0       0
  4267 ;;Total ram usage:        4 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    9
  4270 ;; This function calls:
  4271 ;;		_Mrf49xaFreePacket
  4272 ;;		_Mrf49xaTxAck
  4273 ;;		_Mrf49xaTxPacket
  4274 ;;		_handleFwCmd
  4275 ;;		_handleFwRead
  4276 ;;		_handleFwWrite
  4277 ;; This function is called by:
  4278 ;;		_Mrf49xaTick
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           
  4283                           ;psect for function _HandlePacket
  4284  02F0                     _HandlePacket:	
  4285                           
  4286                           ;incstack = 0
  4287                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4288                           ;HandlePacket@packet stored from wreg
  4289  02F0  00B5               	movwf	HandlePacket@packet
  4290                           
  4291                           ;client.c: 110: bool_t sendMsg = 0;
  4292  02F1  01B4               	clrf	HandlePacket@sendMsg
  4293                           
  4294                           ;client.c: 111: bool_t sendAck = 0;
  4295  02F2  01B3               	clrf	HandlePacket@sendAck
  4296                           
  4297                           ;client.c: 115: switch (packet->packet.id)
  4298  02F3  2B23               	goto	l2564
  4299  02F4                     l2540:	
  4300                           
  4301                           ;client.c: 118: packet->packet.data[0] = 2;
  4302  02F4  0835               	movf	HandlePacket@packet,w
  4303  02F5  3E06               	addlw	6
  4304  02F6  0086               	movwf	6
  4305  02F7  3002               	movlw	2
  4306  02F8  0187               	clrf	7
  4307  02F9  0081               	movwf	1
  4308  02FA                     l2542:	
  4309                           
  4310                           ;client.c: 119: sendMsg = 1;
  4311  02FA  0020               	movlb	0	; select bank0
  4312  02FB  01B4               	clrf	HandlePacket@sendMsg
  4313  02FC  0AB4               	incf	HandlePacket@sendMsg,f
  4314                           
  4315                           ;client.c: 120: break;
  4316  02FD  2B3E               	goto	l2566
  4317  02FE                     l2544:	
  4318                           
  4319                           ;client.c: 123: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  4320                           ;client.c: 124: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  4321  02FE  0835               	movf	HandlePacket@packet,w
  4322  02FF  3E07               	addlw	7
  4323  0300  0086               	movwf	6
  4324  0301  0187               	clrf	7
  4325  0302  0021               	movlb	1	; select bank1
  4326  0303  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  4327  0304  0601               	xorwf	1,w
  4328  0305  1D03               	skipz
  4329  0306  2B3E               	goto	l2566
  4330  0307  0020               	movlb	0	; select bank0
  4331  0308  0835               	movf	HandlePacket@packet,w
  4332  0309  3E06               	addlw	6
  4333  030A  0086               	movwf	6
  4334  030B  0021               	movlb	1	; select bank1
  4335  030C  0857               	movf	(_rfTrcvStatus^(0+128)+55),w
  4336  030D  0601               	xorwf	1,w
  4337  030E  1D03               	skipz
  4338  030F  2B3E               	goto	l2566
  4339                           
  4340                           ;client.c: 125: {
  4341                           ;client.c: 126: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  4342  0310  3002               	movlw	2
  4343  0311  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4344  0312  2B3E               	goto	l2566
  4345  0313                     l499:	
  4346                           ;client.c: 131: syncedTime = *((uint32_t*) packet->packet.data);
  4347                           
  4348                           
  4349                           ;client.c: 132: sendAck = 1;
  4350  0313  01B3               	clrf	HandlePacket@sendAck
  4351  0314  0AB3               	incf	HandlePacket@sendAck,f
  4352                           
  4353                           ;client.c: 133: break;
  4354  0315  2B3E               	goto	l2566
  4355  0316                     l2550:	
  4356                           
  4357                           ;client.c: 140: handleFwCmd(packet);
  4358  0316  0835               	movf	HandlePacket@packet,w
  4359  0317  2350  3180         	fcall	_handleFwCmd
  4360  0319  2AFA               	goto	l2542
  4361  031A                     l2554:	
  4362                           
  4363                           ;client.c: 145: handleFwWrite(packet);
  4364  031A  0835               	movf	HandlePacket@packet,w
  4365  031B  3185  25DA  3180   	fcall	_handleFwWrite
  4366  031E  2AFA               	goto	l2542
  4367  031F                     l2558:	
  4368                           
  4369                           ;client.c: 150: handleFwRead(packet);
  4370  031F  0835               	movf	HandlePacket@packet,w
  4371  0320  2384  3180         	fcall	_handleFwRead
  4372  0322  2AFA               	goto	l2542
  4373  0323                     l2564:	
  4374  0323  0835               	movf	HandlePacket@packet,w
  4375  0324  3E04               	addlw	4
  4376  0325  0086               	movwf	6
  4377  0326  0187               	clrf	7
  4378  0327  0801               	movf	1,w
  4379                           
  4380                           ; Switch size 1, requested type "space"
  4381                           ; Number of cases is 7, Range of values is 160 to 194
  4382                           ; switch strategies available:
  4383                           ; Name         Instructions Cycles
  4384                           ; simple_byte           22    12 (average)
  4385                           ; direct_byte           79     9 (fixed)
  4386                           ; jumptable            263     9 (fixed)
  4387                           ;	Chosen strategy is simple_byte
  4388  0328  3AA0               	xorlw	160	; case 160
  4389  0329  1903               	skipnz
  4390  032A  2AF4               	goto	l2540
  4391  032B  3A01               	xorlw	1	; case 161
  4392  032C  1903               	skipnz
  4393  032D  2AFE               	goto	l2544
  4394  032E  3A03               	xorlw	3	; case 162
  4395  032F  1903               	skipnz
  4396  0330  2B13               	goto	l499
  4397  0331  3A01               	xorlw	1	; case 163
  4398  0332  1903               	skipnz
  4399  0333  2B3E               	goto	l2566
  4400  0334  3A63               	xorlw	99	; case 192
  4401  0335  1903               	skipnz
  4402  0336  2B16               	goto	l2550
  4403  0337  3A01               	xorlw	1	; case 193
  4404  0338  1903               	skipnz
  4405  0339  2B1A               	goto	l2554
  4406  033A  3A03               	xorlw	3	; case 194
  4407  033B  1903               	skipnz
  4408  033C  2B1F               	goto	l2558
  4409  033D  2B3E               	goto	l2566
  4410  033E                     l2566:	
  4411                           
  4412                           ;client.c: 156: if (sendMsg)
  4413  033E  0020               	movlb	0	; select bank0
  4414  033F  0834               	movf	HandlePacket@sendMsg,w
  4415  0340  1903               	btfsc	3,2
  4416  0341  2B48               	goto	l2570
  4417                           
  4418                           ;client.c: 157: Mrf49xaTxPacket(packet, 1, needAck);
  4419  0342  01A0               	clrf	Mrf49xaTxPacket@response
  4420  0343  0AA0               	incf	Mrf49xaTxPacket@response,f
  4421  0344  01A1               	clrf	Mrf49xaTxPacket@needAck
  4422  0345  0835               	movf	HandlePacket@packet,w
  4423  0346  3187  2F27         	ljmp	_Mrf49xaTxPacket
  4424  0348                     l2570:	
  4425                           
  4426                           ;client.c: 158: else if (sendAck)
  4427  0348  0833               	movf	HandlePacket@sendAck,w
  4428  0349  1903               	btfsc	3,2
  4429  034A  2B4E               	goto	l2574
  4430                           
  4431                           ;client.c: 159: Mrf49xaTxAck(packet);
  4432  034B  0835               	movf	HandlePacket@packet,w
  4433  034C  3187  2F07         	ljmp	_Mrf49xaTxAck
  4434  034E                     l2574:	
  4435                           
  4436                           ;client.c: 160: else
  4437                           ;client.c: 161: Mrf49xaFreePacket(packet);
  4438  034E  0835               	movf	HandlePacket@packet,w
  4439  034F  2AEB               	ljmp	_Mrf49xaFreePacket
  4440  0350                     __end_of_HandlePacket:	
  4441  0350                     __ptext13:	
  4442 ;; *************** function _handleFwCmd *****************
  4443 ;; Defined at:
  4444 ;;		line 19 in file "../../../src/rfstack/client.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4447 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  4450 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;		None               void
  4453 ;; Registers used:
  4454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4455 ;; Tracked objects:
  4456 ;;		On entry : 1F/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4460 ;;      Params:         0       0       0       0
  4461 ;;      Locals:         0       1       0       0
  4462 ;;      Temps:          0       0       0       0
  4463 ;;      Totals:         0       1       0       0
  4464 ;;Total ram usage:        1 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    8
  4467 ;; This function calls:
  4468 ;;		_eepromRxBytes
  4469 ;; This function is called by:
  4470 ;;		_HandlePacket
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           
  4475                           ;psect for function _handleFwCmd
  4476  0350                     _handleFwCmd:	
  4477                           
  4478                           ;incstack = 0
  4479                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4480                           ;handleFwCmd@packet stored from wreg
  4481  0350  00A8               	movwf	handleFwCmd@packet
  4482                           
  4483                           ;client.c: 41: break;
  4484                           
  4485                           ;client.c: 21: switch(packet->packet.data[0])
  4486  0351  3E06               	addlw	6
  4487  0352  0086               	movwf	6
  4488  0353  0187               	clrf	7
  4489  0354  0801               	movf	1,w
  4490                           
  4491                           ; Switch size 1, requested type "space"
  4492                           ; Number of cases is 8, Range of values is 0 to 7
  4493                           ; switch strategies available:
  4494                           ; Name         Instructions Cycles
  4495                           ; direct_byte           22     6 (fixed)
  4496                           ; simple_byte           25    13 (average)
  4497                           ; jumptable            260     6 (fixed)
  4498                           ;	Chosen strategy is direct_byte
  4499  0355  0084               	movwf	4
  4500  0356  3008               	movlw	8
  4501  0357  0204               	subwf	4,w
  4502  0358  1803               	skipnc
  4503  0359  0008               	return
  4504  035A  3188               	movlp	high S2874
  4505  035B  3504               	lslf	4,w
  4506  035C  3E00               	addlw	low S2874
  4507  035D  0082               	movwf	2
  4508  035E                     l483:	
  4509  035E  0008               	return
  4510  035F                     l2294:	
  4511                           
  4512                           ;client.c: 28: packet->packet.size = 5;
  4513  035F  0A28               	incf	handleFwCmd@packet,w
  4514  0360  0086               	movwf	6
  4515  0361  3005               	movlw	5
  4516  0362  0187               	clrf	7
  4517  0363  0081               	movwf	1
  4518                           
  4519                           ;client.c: 29: packet->packet.data[1] = 0;
  4520  0364  0828               	movf	handleFwCmd@packet,w
  4521  0365  3E07               	addlw	7
  4522  0366  0086               	movwf	6
  4523  0367  0181               	clrf	1
  4524                           
  4525                           ;client.c: 30: packet->packet.data[2] = 1;
  4526  0368  0828               	movf	handleFwCmd@packet,w
  4527  0369  3E08               	addlw	8
  4528  036A  0086               	movwf	6
  4529  036B  0181               	clrf	1
  4530  036C  0A81               	incf	1,f
  4531                           
  4532                           ;client.c: 32: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  4533  036D  01A4               	clrf	eepromRxBytes@address
  4534  036E  01A5               	clrf	eepromRxBytes@address+1
  4535  036F  0828               	movf	handleFwCmd@packet,w
  4536  0370  3E09               	addlw	9
  4537  0371  00A6               	movwf	eepromRxBytes@data
  4538  0372  3002               	movlw	2
  4539  0373  00A7               	movwf	eepromRxBytes@size
  4540  0374  3186  2E69         	ljmp	l2170
  4541  0376                     l2302:	
  4542                           ;client.c: 34: break;
  4543                           
  4544                           
  4545                           ;client.c: 37: packet->packet.size = 2;
  4546  0376  0A28               	incf	handleFwCmd@packet,w
  4547  0377  0086               	movwf	6
  4548  0378  3002               	movlw	2
  4549  0379  0187               	clrf	7
  4550  037A  0081               	movwf	1
  4551                           
  4552                           ;client.c: 38: eepromRxBytes(0x2, &(packet->packet.data[1]), 1);
  4553  037B  00A4               	movwf	eepromRxBytes@address
  4554  037C  01A5               	clrf	eepromRxBytes@address+1
  4555  037D  0828               	movf	handleFwCmd@packet,w
  4556  037E  3E07               	addlw	7
  4557  037F  00A6               	movwf	eepromRxBytes@data
  4558  0380  01A7               	clrf	eepromRxBytes@size
  4559  0381  0AA7               	incf	eepromRxBytes@size,f
  4560  0382  3186  2E69         	ljmp	l2170
  4561  0384                     __end_of_handleFwCmd:	
  4562  0384                     __ptext12:	
  4563 ;; *************** function _handleFwRead *****************
  4564 ;; Defined at:
  4565 ;;		line 94 in file "../../../src/rfstack/client.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4568 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  4571 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4572 ;;  address         2    0        unsigned int 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;		None               void
  4575 ;; Registers used:
  4576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4577 ;; Tracked objects:
  4578 ;;		On entry : 1F/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4582 ;;      Params:         0       0       0       0
  4583 ;;      Locals:         0       3       0       0
  4584 ;;      Temps:          0       0       0       0
  4585 ;;      Totals:         0       3       0       0
  4586 ;;Total ram usage:        3 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    8
  4589 ;; This function calls:
  4590 ;;		_eepromRxBytes
  4591 ;; This function is called by:
  4592 ;;		_HandlePacket
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           
  4597                           ;psect for function _handleFwRead
  4598  0384                     _handleFwRead:	
  4599                           
  4600                           ;incstack = 0
  4601                           ; Regs used in _handleFwRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4602                           ;handleFwRead@packet stored from wreg
  4603  0384  00AA               	movwf	handleFwRead@packet
  4604                           
  4605                           ;client.c: 96: packet->packet.size = 16;
  4606  0385  0A2A               	incf	handleFwRead@packet,w
  4607  0386  0086               	movwf	6
  4608  0387  3010               	movlw	16
  4609  0388  0187               	clrf	7
  4610  0389  0081               	movwf	1
  4611                           
  4612                           ;client.c: 104: eepromRxBytes(address, packet->packet.data+8, 8);
  4613  038A  01A4               	clrf	eepromRxBytes@address
  4614  038B  01A5               	clrf	eepromRxBytes@address+1
  4615  038C  082A               	movf	handleFwRead@packet,w
  4616  038D  3E0E               	addlw	14
  4617  038E  00A6               	movwf	eepromRxBytes@data
  4618  038F  3008               	movlw	8
  4619  0390  00A7               	movwf	eepromRxBytes@size
  4620  0391  3186  2E69         	ljmp	l2170
  4621  0393                     __end_of_handleFwRead:	
  4622  0393                     __ptext7:	
  4623 ;; *************** function _Mrf49xaPacketPending *****************
  4624 ;; Defined at:
  4625 ;;		line 5 in file "../../../src/devices/mrf49xa_packet.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;		None
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;		None
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      unsigned char 
  4632 ;; Registers used:
  4633 ;;		wreg
  4634 ;; Tracked objects:
  4635 ;;		On entry : 1E/1
  4636 ;;		On exit  : 1F/1
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4639 ;;      Params:         0       0       0       0
  4640 ;;      Locals:         0       0       0       0
  4641 ;;      Temps:          0       0       0       0
  4642 ;;      Totals:         0       0       0       0
  4643 ;;Total ram usage:        0 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    5
  4646 ;; This function calls:
  4647 ;;		Nothing
  4648 ;; This function is called by:
  4649 ;;		_Mrf49xaTick
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           
  4654                           ;psect for function _Mrf49xaPacketPending
  4655  0393                     _Mrf49xaPacketPending:	
  4656                           
  4657                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  4658                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  4662  0393  0021               	movlb	1	; select bank1
  4663  0394  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4664  0395  3A04               	xorlw	4
  4665  0396  1903               	skipnz
  4666  0397  3401               	retlw	1
  4667  0398  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4668  0399  3A04               	xorlw	4
  4669  039A  1903               	btfsc	3,2
  4670                           
  4671                           ;mrf49xa_packet.c: 9: return 1;
  4672  039B  3401               	retlw	1
  4673                           
  4674                           ;mrf49xa_packet.c: 10: else
  4675                           ;mrf49xa_packet.c: 11: return 0;
  4676  039C  3400               	retlw	0
  4677  039D                     __end_of_Mrf49xaPacketPending:	
  4678  039D                     __ptext6:	
  4679 ;; *************** function _Mrf49xaRxPacket *****************
  4680 ;; Defined at:
  4681 ;;		line 89 in file "../../../src/devices/mrf49xa_packet.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4688 ;; Registers used:
  4689 ;;		wreg
  4690 ;; Tracked objects:
  4691 ;;		On entry : 1F/1
  4692 ;;		On exit  : 1F/1
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4695 ;;      Params:         0       0       0       0
  4696 ;;      Locals:         0       0       0       0
  4697 ;;      Temps:          0       0       0       0
  4698 ;;      Totals:         0       0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    5
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_Mrf49xaTick
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           
  4710                           ;psect for function _Mrf49xaRxPacket
  4711  039D                     _Mrf49xaRxPacket:	
  4712                           
  4713                           ;mrf49xa_packet.c: 91: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  4717  039D  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4718  039E  3A04               	xorlw	4
  4719  039F  1D03               	skipz
  4720  03A0  2BA4               	goto	l2512
  4721                           
  4722                           ;mrf49xa_packet.c: 92: {
  4723                           ;mrf49xa_packet.c: 93: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4724  03A1  3005               	movlw	5
  4725  03A2  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  4726                           
  4727                           ;mrf49xa_packet.c: 94: return &(rfTrcvStatus.rxPacket[0]);
  4728  03A3  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  4729  03A4                     l2512:	
  4730                           
  4731                           ;mrf49xa_packet.c: 95: }
  4732                           ;mrf49xa_packet.c: 97: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4733  03A4  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  4734  03A5  3A04               	xorlw	4
  4735  03A6  1D03               	skipz
  4736  03A7  3400               	retlw	0
  4737                           
  4738                           ;mrf49xa_packet.c: 98: {
  4739                           ;mrf49xa_packet.c: 99: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4740  03A8  3005               	movlw	5
  4741  03A9  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4742                           
  4743                           ;mrf49xa_packet.c: 100: return &(rfTrcvStatus.rxPacket[1]);
  4744  03AA  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4745  03AB                     __end_of_Mrf49xaRxPacket:	
  4746                           ;mrf49xa_packet.c: 101: }
  4747                           ;mrf49xa_packet.c: 103: return (0);
  4748                           
  4749  03AB                     __ptext3:	
  4750 ;; *************** function _RfSendPowerState *****************
  4751 ;; Defined at:
  4752 ;;		line 5 in file "../../../src/rfstack/client.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  4757 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;		None               void
  4760 ;; Registers used:
  4761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 1F/0
  4764 ;;		On exit  : 1F/1
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4767 ;;      Params:         0       0       0       0
  4768 ;;      Locals:         0       1       0       0
  4769 ;;      Temps:          0       0       0       0
  4770 ;;      Totals:         0       1       0       0
  4771 ;;Total ram usage:        1 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    6
  4774 ;; This function calls:
  4775 ;;		_Mrf49xaAllocPacket
  4776 ;;		_Mrf49xaTxPacket
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _RfSendPowerState
  4784  03AB                     _RfSendPowerState:	
  4785                           
  4786                           ;client.c: 7: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4790  03AB  23EC               	fcall	_Mrf49xaAllocPacket
  4791  03AC  0020               	movlb	0	; select bank0
  4792  03AD  00A6               	movwf	RfSendPowerState@packet
  4793                           
  4794                           ;client.c: 9: packet->packet.size = 2;
  4795  03AE  0A26               	incf	RfSendPowerState@packet,w
  4796  03AF  0086               	movwf	6
  4797  03B0  3002               	movlw	2
  4798  03B1  0187               	clrf	7
  4799  03B2  0081               	movwf	1
  4800                           
  4801                           ;client.c: 10: packet->packet.id = RF_POWER_STATUS;
  4802  03B3  0826               	movf	RfSendPowerState@packet,w
  4803  03B4  3E04               	addlw	4
  4804  03B5  0086               	movwf	6
  4805  03B6  30A3               	movlw	163
  4806  03B7  0081               	movwf	1
  4807                           
  4808                           ;client.c: 11: packet->packet.dst = 0xFF;
  4809  03B8  0826               	movf	RfSendPowerState@packet,w
  4810  03B9  3E03               	addlw	3
  4811  03BA  0086               	movwf	6
  4812  03BB  30FF               	movlw	255
  4813  03BC  0081               	movwf	1
  4814                           
  4815                           ;client.c: 13: packet->packet.data[0] = 0x55;
  4816  03BD  0826               	movf	RfSendPowerState@packet,w
  4817  03BE  3E06               	addlw	6
  4818  03BF  0086               	movwf	6
  4819  03C0  3055               	movlw	85
  4820  03C1  0081               	movwf	1
  4821                           
  4822                           ;client.c: 14: packet->packet.data[1] = 0xAA;
  4823  03C2  0826               	movf	RfSendPowerState@packet,w
  4824  03C3  3E07               	addlw	7
  4825  03C4  0086               	movwf	6
  4826  03C5  30AA               	movlw	170
  4827  03C6  0081               	movwf	1
  4828                           
  4829                           ;client.c: 16: Mrf49xaTxPacket(packet, 0, 1);
  4830  03C7  01A0               	clrf	Mrf49xaTxPacket@response
  4831  03C8  01A1               	clrf	Mrf49xaTxPacket@needAck
  4832  03C9  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  4833  03CA  0826               	movf	RfSendPowerState@packet,w
  4834  03CB  3187  2F27         	ljmp	_Mrf49xaTxPacket
  4835  03CD                     __end_of_RfSendPowerState:	
  4836  03CD                     __ptext1:	
  4837 ;; *************** function _SysInitGpio *****************
  4838 ;; Defined at:
  4839 ;;		line 28 in file "../../../src/node/main.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;		None
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;		None
  4844 ;; Return value:  Size  Location     Type
  4845 ;;		None               void
  4846 ;; Registers used:
  4847 ;;		None
  4848 ;; Tracked objects:
  4849 ;;		On entry : 17F/4
  4850 ;;		On exit  : 17F/2
  4851 ;;		Unchanged: 160/0
  4852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4853 ;;      Params:         0       0       0       0
  4854 ;;      Locals:         0       0       0       0
  4855 ;;      Temps:          0       0       0       0
  4856 ;;      Totals:         0       0       0       0
  4857 ;;Total ram usage:        0 bytes
  4858 ;; Hardware stack levels used:    1
  4859 ;; Hardware stack levels required when called:    5
  4860 ;; This function calls:
  4861 ;;		Nothing
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           
  4868                           ;psect for function _SysInitGpio
  4869  03CD                     _SysInitGpio:	
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _SysInitGpio: []
  4873                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4874  03CD  0021               	movlb	1	; select bank1
  4875  03CE  150C               	bsf	12,2	;volatile
  4876  03CF  120C               	bcf	12,4	;volatile
  4877  03D0  128C               	bcf	12,5	;volatile
  4878  03D1  0022               	movlb	2	; select bank2
  4879  03D2  120C               	bcf	12,4	;volatile
  4880  03D3  128C               	bcf	12,5	;volatile
  4881                           
  4882                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4883  03D4  0021               	movlb	1	; select bank1
  4884  03D5  120D               	bcf	13,4	;volatile
  4885  03D6  130D               	bcf	13,6	;volatile
  4886  03D7  138D               	bcf	13,7	;volatile
  4887  03D8  168D               	bsf	13,5	;volatile
  4888                           
  4889                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; PORTCbits
  4890  03D9  108E               	bcf	14,1	;volatile
  4891  03DA  110E               	bcf	14,2	;volatile
  4892  03DB  120E               	bcf	14,4	;volatile
  4893  03DC  130E               	bcf	14,6	;volatile
  4894  03DD  138E               	bcf	14,7	;volatile
  4895  03DE  140E               	bsf	14,0	;volatile
  4896  03DF  158E               	bsf	14,3	;volatile
  4897  03E0  168E               	bsf	14,5	;volatile
  4898  03E1  0022               	movlb	2	; select bank2
  4899  03E2  108E               	bcf	14,1	;volatile
  4900  03E3  110E               	bcf	14,2	;volatile
  4901  03E4  120E               	bcf	14,4	;volatile
  4902  03E5  0020               	movlb	0	; select bank0
  4903  03E6  170E               	bsf	14,6	;volatile
  4904  03E7  0022               	movlb	2	; select bank2
  4905  03E8  138E               	bcf	14,7	;volatile
  4906                           
  4907                           ;main.c: 34: LATCbits.LATC1 = 0;
  4908  03E9  108E               	bcf	14,1	;volatile
  4909                           
  4910                           ;main.c: 35: LATCbits.LATC2 = 0;
  4911  03EA  110E               	bcf	14,2	;volatile
  4912  03EB  0008               	return
  4913  03EC                     __end_of_SysInitGpio:	
  4914  03EC                     __ptext4:	
  4915 ;; *************** function _Mrf49xaAllocPacket *****************
  4916 ;; Defined at:
  4917 ;;		line 106 in file "../../../src/devices/mrf49xa_packet.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0
  4926 ;; Tracked objects:
  4927 ;;		On entry : 1F/0
  4928 ;;		On exit  : 1F/1
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4931 ;;      Params:         0       0       0       0
  4932 ;;      Locals:         0       0       0       0
  4933 ;;      Temps:          0       0       0       0
  4934 ;;      Totals:         0       0       0       0
  4935 ;;Total ram usage:        0 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    5
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_RfSendPowerState
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Mrf49xaAllocPacket
  4947  03EC                     _Mrf49xaAllocPacket:	
  4948                           
  4949                           ;mrf49xa_packet.c: 108: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  4953  03EC  0021               	movlb	1	; select bank1
  4954  03ED  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  4955  03EE  1D03               	skipz
  4956  03EF  2BF3               	goto	l2528
  4957                           
  4958                           ;mrf49xa_packet.c: 109: {
  4959                           ;mrf49xa_packet.c: 110: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4960  03F0  3005               	movlw	5
  4961  03F1  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  4962                           
  4963                           ;mrf49xa_packet.c: 111: return &(rfTrcvStatus.rxPacket[0]);
  4964  03F2  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  4965  03F3                     l2528:	
  4966                           
  4967                           ;mrf49xa_packet.c: 112: }
  4968                           ;mrf49xa_packet.c: 114: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  4969  03F3  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  4970  03F4  1D03               	skipz
  4971  03F5  3400               	retlw	0
  4972                           
  4973                           ;mrf49xa_packet.c: 115: {
  4974                           ;mrf49xa_packet.c: 116: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4975  03F6  3005               	movlw	5
  4976  03F7  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  4977                           
  4978                           ;mrf49xa_packet.c: 117: return &(rfTrcvStatus.rxPacket[1]);
  4979  03F8  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  4980  03F9                     __end_of_Mrf49xaAllocPacket:	
  4981                           ;mrf49xa_packet.c: 118: }
  4982                           ;mrf49xa_packet.c: 120: return (0);
  4983                           
  4984  03F9                     PL4:	
  4985  03F9  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4986  03FA  390F               	andlw	15
  4987  03FB  0020               	movlb	0	; select bank0
  4988  03FC  00B6               	movwf	??_Mrf49xaTick
  4989  03FD  0AB6               	incf	??_Mrf49xaTick,f
  4990  03FE  0021               	movlb	1	; select bank1
  4991  03FF  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4992  0400  0020               	movlb	0	; select bank0
  4993  0401  0636               	xorwf	??_Mrf49xaTick,w
  4994  0402  39F0               	andlw	-16
  4995  0403  0636               	xorwf	??_Mrf49xaTick,w
  4996  0404  0021               	movlb	1	; select bank1
  4997  0405  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  4998  0406  0008               	return
  4999  0407                     __end_ofPL4:	
  5000  0407                     PL8:	
  5001  0407  0020               	movlb	0	; select bank0
  5002  0408  0825               	movf	Mrf49xaServe@data,w
  5003  0409  0081               	movwf	1
  5004  040A  0021               	movlb	1	; select bank1
  5005  040B  0820               	movf	_rfTrcvStatus^(0+128),w
  5006  040C  0008               	return
  5007  040D                     __end_ofPL8:	
  5008                           
  5009                           	psect	bssBANK0
  5010  003A                     __pbssBANK0:	
  5011  003A                     _mrf49Status:	
  5012  003A                     	ds	2
  5013                           
  5014                           	psect	bssBANK1
  5015  00A0                     __pbssBANK1:	
  5016  00A0                     _rfTrcvStatus:	
  5017  00A0                     	ds	79
  5018                           
  5019                           	psect	clrtext
  5020  07F4                     clear_ram0:	
  5021                           ;	Called with FSR0 containing the base address, and
  5022                           ;	WREG with the size to clear
  5023                           
  5024  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
  5025  07F5                     clrloop0:	
  5026  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
  5027  07F6  3101               	addfsr 0,1
  5028  07F7  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5029  07F8  2FF5               	goto	clrloop0	;have we reached the end yet?
  5030  07F9  3400               	retlw	0	;all done for this memory range, return
  5031                           
  5032                           	psect	cstackCOMMON
  5033  0070                     __pcstackCOMMON:	
  5034  0070                     ?_SoftI2cStart:	
  5035  0070                     ?_SoftI2cStop:	
  5036                           ; 0 bytes @ 0x0
  5037                           
  5038  0070                     ?_HandlePacket:	
  5039                           ; 0 bytes @ 0x0
  5040                           
  5041  0070                     ?_SoftI2cNop:	
  5042                           ; 0 bytes @ 0x0
  5043                           
  5044  0070                     ?_SoftI2cInit:	
  5045                           ; 0 bytes @ 0x0
  5046                           
  5047  0070                     ?_SoftI2cRepeatedStart:	
  5048                           ; 0 bytes @ 0x0
  5049                           
  5050  0070                     ?_AdcInit:	
  5051                           ; 0 bytes @ 0x0
  5052                           
  5053  0070                     ?_ExtIntInit:	
  5054                           ; 0 bytes @ 0x0
  5055                           
  5056  0070                     ?_extInt:	
  5057                           ; 0 bytes @ 0x0
  5058                           
  5059  0070                     ?_Mrf49xaModeRx:	
  5060                           ; 0 bytes @ 0x0
  5061                           
  5062  0070                     ?_Mrf49xaModeTx:	
  5063                           ; 0 bytes @ 0x0
  5064                           
  5065  0070                     ?_Mrf49xaInit:	
  5066                           ; 0 bytes @ 0x0
  5067                           
  5068  0070                     ?_Mrf49SpiTx:	
  5069                           ; 0 bytes @ 0x0
  5070                           
  5071  0070                     ?_Mrf49RxSts:	
  5072                           ; 0 bytes @ 0x0
  5073                           
  5074  0070                     ?_Mrf49TxByte:	
  5075                           ; 0 bytes @ 0x0
  5076                           
  5077  0070                     ?_Mrf49xaTxAck:	
  5078                           ; 0 bytes @ 0x0
  5079                           
  5080  0070                     ?_Mrf49xaFreePacket:	
  5081                           ; 0 bytes @ 0x0
  5082                           
  5083  0070                     ?_Mrf49xaTick:	
  5084                           ; 0 bytes @ 0x0
  5085                           
  5086  0070                     ?_RfSendPowerState:	
  5087                           ; 0 bytes @ 0x0
  5088                           
  5089  0070                     ?_handleFwCmd:	
  5090                           ; 0 bytes @ 0x0
  5091                           
  5092  0070                     ?_handleFwWrite:	
  5093                           ; 0 bytes @ 0x0
  5094                           
  5095  0070                     ?_handleFwRead:	
  5096                           ; 0 bytes @ 0x0
  5097                           
  5098  0070                     ?_SysInitGpio:	
  5099                           ; 0 bytes @ 0x0
  5100                           
  5101  0070                     ?_main:	
  5102                           ; 0 bytes @ 0x0
  5103                           
  5104  0070                     ?i1_Mrf49xaModeRx:	
  5105                           ; 0 bytes @ 0x0
  5106                           
  5107  0070                     ?i1_Mrf49SpiTx:	
  5108                           ; 0 bytes @ 0x0
  5109                           
  5110  0070                     ??i1_Mrf49SpiTx:	
  5111                           ; 0 bytes @ 0x0
  5112                           
  5113  0070                     ??i1_Mrf49SpiRx:	
  5114                           ; 0 bytes @ 0x0
  5115                           
  5116  0070                     ?i1_Mrf49RxSts:	
  5117                           ; 0 bytes @ 0x0
  5118                           
  5119  0070                     ?i1_Mrf49TxByte:	
  5120                           ; 0 bytes @ 0x0
  5121                           
  5122  0070                     ?_SoftI2cTxByte:	
  5123                           ; 0 bytes @ 0x0
  5124                           
  5125  0070                     ?_Mrf49xaServe:	
  5126                           ; 1 bytes @ 0x0
  5127                           
  5128  0070                     ?_SoftI2cRxByte:	
  5129                           ; 1 bytes @ 0x0
  5130                           
  5131  0070                     ?_Mrf49SpiRx:	
  5132                           ; 1 bytes @ 0x0
  5133                           
  5134  0070                     ?_Mrf49RxCmd:	
  5135                           ; 1 bytes @ 0x0
  5136                           
  5137  0070                     ?_Mrf49RxByte:	
  5138                           ; 1 bytes @ 0x0
  5139                           
  5140  0070                     ?_Mrf49xaPacketPending:	
  5141                           ; 1 bytes @ 0x0
  5142                           
  5143  0070                     ?_Mrf49xaRxPacket:	
  5144                           ; 1 bytes @ 0x0
  5145                           
  5146  0070                     ?_Mrf49xaAllocPacket:	
  5147                           ; 1 bytes @ 0x0
  5148                           
  5149  0070                     ?i1_Mrf49SpiRx:	
  5150                           ; 1 bytes @ 0x0
  5151                           
  5152  0070                     ?i1_Mrf49RxCmd:	
  5153                           ; 1 bytes @ 0x0
  5154                           
  5155  0070                     ?i1_Mrf49RxByte:	
  5156                           ; 1 bytes @ 0x0
  5157                           
  5158  0070                     ?i1_Mrf49xaServe:	
  5159                           ; 1 bytes @ 0x0
  5160                           
  5161  0070                     i1Mrf49SpiTx@byte:	
  5162                           ; 1 bytes @ 0x0
  5163                           
  5164  0070                     i1Mrf49SpiRx@data:	
  5165                           ; 1 bytes @ 0x0
  5166                           
  5167                           
  5168                           ; 1 bytes @ 0x0
  5169  0070                     	ds	1
  5170  0071                     ?i1_Mrf49TxCmd:	
  5171  0071                     ??i1_Mrf49RxCmd:	
  5172                           ; 0 bytes @ 0x1
  5173                           
  5174  0071                     ??i1_Mrf49RxSts:	
  5175                           ; 0 bytes @ 0x1
  5176                           
  5177  0071                     i1Mrf49TxCmd@val:	
  5178                           ; 0 bytes @ 0x1
  5179                           
  5180  0071                     i1Mrf49RxCmd@cmd:	
  5181                           ; 1 bytes @ 0x1
  5182                           
  5183                           
  5184                           ; 1 bytes @ 0x1
  5185  0071                     	ds	1
  5186  0072                     ??i1_Mrf49TxCmd:	
  5187  0072                     i1Mrf49TxCmd@cmd:	
  5188                           ; 0 bytes @ 0x2
  5189                           
  5190  0072                     i1Mrf49RxCmd@val:	
  5191                           ; 1 bytes @ 0x2
  5192                           
  5193                           
  5194                           ; 1 bytes @ 0x2
  5195  0072                     	ds	1
  5196  0073                     ??i1_Mrf49xaModeRx:	
  5197  0073                     ??i1_Mrf49RxByte:	
  5198                           ; 0 bytes @ 0x3
  5199                           
  5200  0073                     ??i1_Mrf49TxByte:	
  5201                           ; 0 bytes @ 0x3
  5202                           
  5203  0073                     i1Mrf49xaModeRx@k:	
  5204                           ; 0 bytes @ 0x3
  5205                           
  5206  0073                     i1Mrf49TxByte@byte:	
  5207                           ; 1 bytes @ 0x3
  5208                           
  5209                           
  5210                           ; 1 bytes @ 0x3
  5211  0073                     	ds	1
  5212  0074                     ??i1_Mrf49xaServe:	
  5213                           
  5214                           ; 0 bytes @ 0x4
  5215  0074                     	ds	1
  5216  0075                     i1Mrf49xaServe@data:	
  5217                           
  5218                           ; 1 bytes @ 0x5
  5219  0075                     	ds	1
  5220  0076                     ??_extInt:	
  5221                           
  5222                           ; 0 bytes @ 0x6
  5223  0076                     	ds	1
  5224  0077                     ??_SoftI2cStart:	
  5225  0077                     ??_SoftI2cTxByte:	
  5226                           ; 0 bytes @ 0x7
  5227                           
  5228  0077                     ??_SoftI2cStop:	
  5229                           ; 0 bytes @ 0x7
  5230                           
  5231  0077                     ??_Mrf49TxCmd:	
  5232                           ; 0 bytes @ 0x7
  5233                           
  5234  0077                     ??_HandlePacket:	
  5235                           ; 0 bytes @ 0x7
  5236                           
  5237  0077                     ??_SoftI2cInit:	
  5238                           ; 0 bytes @ 0x7
  5239                           
  5240  0077                     ??_SoftI2cRepeatedStart:	
  5241                           ; 0 bytes @ 0x7
  5242                           
  5243  0077                     ??_SoftI2cRxByte:	
  5244                           ; 0 bytes @ 0x7
  5245                           
  5246  0077                     ??_AdcInit:	
  5247                           ; 0 bytes @ 0x7
  5248                           
  5249  0077                     ??_ExtIntInit:	
  5250                           ; 0 bytes @ 0x7
  5251                           
  5252  0077                     ??_Mrf49xaModeRx:	
  5253                           ; 0 bytes @ 0x7
  5254                           
  5255  0077                     ??_Mrf49xaModeTx:	
  5256                           ; 0 bytes @ 0x7
  5257                           
  5258  0077                     ??_Mrf49SpiTx:	
  5259                           ; 0 bytes @ 0x7
  5260                           
  5261  0077                     ??_Mrf49SpiRx:	
  5262                           ; 0 bytes @ 0x7
  5263                           
  5264  0077                     ??_Mrf49RxCmd:	
  5265                           ; 0 bytes @ 0x7
  5266                           
  5267  0077                     ??_Mrf49RxSts:	
  5268                           ; 0 bytes @ 0x7
  5269                           
  5270  0077                     ??_Mrf49RxByte:	
  5271                           ; 0 bytes @ 0x7
  5272                           
  5273  0077                     ??_Mrf49TxByte:	
  5274                           ; 0 bytes @ 0x7
  5275                           
  5276  0077                     ??_Mrf49xaPacketPending:	
  5277                           ; 0 bytes @ 0x7
  5278                           
  5279  0077                     ??_Mrf49xaTxAck:	
  5280                           ; 0 bytes @ 0x7
  5281                           
  5282  0077                     ??_Mrf49xaFreePacket:	
  5283                           ; 0 bytes @ 0x7
  5284                           
  5285  0077                     ??_Mrf49xaRxPacket:	
  5286                           ; 0 bytes @ 0x7
  5287                           
  5288  0077                     ??_Mrf49xaAllocPacket:	
  5289                           ; 0 bytes @ 0x7
  5290                           
  5291  0077                     ??_eepromRxBytes:	
  5292                           ; 0 bytes @ 0x7
  5293                           
  5294  0077                     ??_eepromTxBytes:	
  5295                           ; 0 bytes @ 0x7
  5296                           
  5297  0077                     ??_RfSendPowerState:	
  5298                           ; 0 bytes @ 0x7
  5299                           
  5300  0077                     ??_handleFwCmd:	
  5301                           ; 0 bytes @ 0x7
  5302                           
  5303  0077                     ??_handleFwRead:	
  5304                           ; 0 bytes @ 0x7
  5305                           
  5306  0077                     ??_SysInitGpio:	
  5307                           ; 0 bytes @ 0x7
  5308                           
  5309  0077                     ??_main:	
  5310                           ; 0 bytes @ 0x7
  5311                           
  5312                           
  5313                           	psect	cstackBANK0
  5314  0020                     __pcstackBANK0:	
  5315                           ; 0 bytes @ 0x7
  5316                           
  5317  0020                     ??_SoftI2cNop:	
  5318  0020                     ?_Mrf49xaTxPacket:	
  5319                           ; 0 bytes @ 0x0
  5320                           
  5321  0020                     Mrf49SpiTx@byte:	
  5322                           ; 1 bytes @ 0x0
  5323                           
  5324  0020                     Mrf49SpiRx@data:	
  5325                           ; 1 bytes @ 0x0
  5326                           
  5327  0020                     Mrf49xaTxPacket@response:	
  5328                           ; 1 bytes @ 0x0
  5329                           
  5330  0020                     Mrf49xaFreePacket@packet:	
  5331                           ; 1 bytes @ 0x0
  5332                           
  5333                           
  5334                           ; 1 bytes @ 0x0
  5335  0020                     	ds	1
  5336  0021                     ?_Mrf49TxCmd:	
  5337  0021                     SoftI2cRxByte@ack:	
  5338                           ; 0 bytes @ 0x1
  5339                           
  5340  0021                     Mrf49TxCmd@val:	
  5341                           ; 1 bytes @ 0x1
  5342                           
  5343  0021                     Mrf49RxCmd@cmd:	
  5344                           ; 1 bytes @ 0x1
  5345                           
  5346  0021                     Mrf49xaTxPacket@needAck:	
  5347                           ; 1 bytes @ 0x1
  5348                           
  5349                           
  5350                           ; 1 bytes @ 0x1
  5351  0021                     	ds	1
  5352  0022                     ??_Mrf49xaTxPacket:	
  5353  0022                     SoftI2cTxByte@data:	
  5354                           ; 0 bytes @ 0x2
  5355                           
  5356  0022                     SoftI2cRxByte@data:	
  5357                           ; 1 bytes @ 0x2
  5358                           
  5359  0022                     Mrf49TxCmd@cmd:	
  5360                           ; 1 bytes @ 0x2
  5361                           
  5362  0022                     Mrf49RxCmd@val:	
  5363                           ; 1 bytes @ 0x2
  5364                           
  5365                           
  5366                           ; 1 bytes @ 0x2
  5367  0022                     	ds	1
  5368  0023                     SoftI2cTxByte@i:	
  5369  0023                     SoftI2cRxByte@i:	
  5370                           ; 1 bytes @ 0x3
  5371                           
  5372  0023                     Mrf49xaModeRx@k:	
  5373                           ; 1 bytes @ 0x3
  5374                           
  5375  0023                     Mrf49xaModeTx@k:	
  5376                           ; 1 bytes @ 0x3
  5377                           
  5378  0023                     Mrf49TxByte@byte:	
  5379                           ; 1 bytes @ 0x3
  5380                           
  5381  0023                     Mrf49xaTxPacket@crc:	
  5382                           ; 1 bytes @ 0x3
  5383                           
  5384                           
  5385                           ; 1 bytes @ 0x3
  5386  0023                     	ds	1
  5387  0024                     ??_Mrf49xaServe:	
  5388  0024                     ?_eepromRxBytes:	
  5389                           ; 0 bytes @ 0x4
  5390                           
  5391  0024                     ?_eepromTxBytes:	
  5392                           ; 0 bytes @ 0x4
  5393                           
  5394  0024                     Mrf49xaTxPacket@i:	
  5395                           ; 0 bytes @ 0x4
  5396                           
  5397  0024                     eepromRxBytes@address:	
  5398                           ; 1 bytes @ 0x4
  5399                           
  5400  0024                     eepromTxBytes@address:	
  5401                           ; 2 bytes @ 0x4
  5402                           
  5403                           
  5404                           ; 2 bytes @ 0x4
  5405  0024                     	ds	1
  5406  0025                     Mrf49xaTxPacket@packet:	
  5407  0025                     Mrf49xaServe@data:	
  5408                           ; 1 bytes @ 0x5
  5409                           
  5410                           
  5411                           ; 1 bytes @ 0x5
  5412  0025                     	ds	1
  5413  0026                     ??_Mrf49xaInit:	
  5414  0026                     Mrf49xaTxAck@packet:	
  5415                           ; 0 bytes @ 0x6
  5416                           
  5417  0026                     eepromRxBytes@data:	
  5418                           ; 1 bytes @ 0x6
  5419                           
  5420  0026                     eepromTxBytes@data:	
  5421                           ; 1 bytes @ 0x6
  5422                           
  5423  0026                     RfSendPowerState@packet:	
  5424                           ; 1 bytes @ 0x6
  5425                           
  5426                           
  5427                           ; 1 bytes @ 0x6
  5428  0026                     	ds	1
  5429  0027                     eepromRxBytes@size:	
  5430  0027                     eepromTxBytes@size:	
  5431                           ; 1 bytes @ 0x7
  5432                           
  5433                           
  5434                           ; 1 bytes @ 0x7
  5435  0027                     	ds	1
  5436  0028                     ??_handleFwWrite:	
  5437  0028                     handleFwCmd@packet:	
  5438                           ; 0 bytes @ 0x8
  5439                           
  5440                           
  5441                           ; 1 bytes @ 0x8
  5442  0028                     	ds	1
  5443  0029                     Mrf49xaInit@k:	
  5444                           
  5445                           ; 1 bytes @ 0x9
  5446  0029                     	ds	1
  5447  002A                     handleFwRead@packet:	
  5448                           
  5449                           ; 1 bytes @ 0xA
  5450  002A                     	ds	3
  5451  002D                     handleFwWrite@packetData:	
  5452                           
  5453                           ; 1 bytes @ 0xD
  5454  002D                     	ds	1
  5455  002E                     handleFwWrite@i:	
  5456                           
  5457                           ; 1 bytes @ 0xE
  5458  002E                     	ds	1
  5459  002F                     handleFwWrite@address:	
  5460                           
  5461                           ; 2 bytes @ 0xF
  5462  002F                     	ds	2
  5463  0031                     handleFwWrite@packet:	
  5464                           
  5465                           ; 1 bytes @ 0x11
  5466  0031                     	ds	2
  5467  0033                     HandlePacket@sendAck:	
  5468                           
  5469                           ; 1 bytes @ 0x13
  5470  0033                     	ds	1
  5471  0034                     HandlePacket@sendMsg:	
  5472                           
  5473                           ; 1 bytes @ 0x14
  5474  0034                     	ds	1
  5475  0035                     HandlePacket@packet:	
  5476                           
  5477                           ; 1 bytes @ 0x15
  5478  0035                     	ds	1
  5479  0036                     ??_Mrf49xaTick:	
  5480                           
  5481                           ; 0 bytes @ 0x16
  5482  0036                     	ds	2
  5483  0038                     Mrf49xaTick@timeout:	
  5484                           
  5485                           ; 1 bytes @ 0x18
  5486  0038                     	ds	1
  5487  0039                     Mrf49xaTick@packet:	
  5488                           
  5489                           ; 1 bytes @ 0x19
  5490  0039                     	ds	1
  5491                           
  5492                           	psect	text2
  5493  05CF                     __ptext2:	
  5494 ;; *************** function _SoftI2cInit *****************
  5495 ;; Defined at:
  5496 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;		None
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;		None
  5501 ;; Return value:  Size  Location     Type
  5502 ;;		None               void
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 17F/2
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5510 ;;      Params:         0       0       0       0
  5511 ;;      Locals:         0       0       0       0
  5512 ;;      Temps:          0       0       0       0
  5513 ;;      Totals:         0       0       0       0
  5514 ;;Total ram usage:        0 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    7
  5517 ;; This function calls:
  5518 ;;		_SoftI2cStart
  5519 ;;		_SoftI2cStop
  5520 ;;		_SoftI2cTxByte
  5521 ;; This function is called by:
  5522 ;;		_main
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _SoftI2cInit
  5528  05CF                     _SoftI2cInit:	
  5529                           
  5530                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  5534  05CF  170D               	bsf	13,6	;volatile
  5535                           
  5536                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  5537  05D0  160D               	bsf	13,4	;volatile
  5538                           
  5539                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  5540  05D1  0021               	movlb	1	; select bank1
  5541  05D2  130D               	bcf	13,6	;volatile
  5542                           
  5543                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  5544  05D3  120D               	bcf	13,4	;volatile
  5545                           
  5546                           ;softI2c.c: 32: SoftI2cStart();
  5547  05D4  26FA  3185         	fcall	_SoftI2cStart
  5548                           
  5549                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  5550  05D6  3000               	movlw	0
  5551  05D7  268D  3185         	fcall	_SoftI2cTxByte
  5552                           
  5553                           ;softI2c.c: 34: SoftI2cStop();
  5554  05D9  2E29               	ljmp	l1958
  5555  05DA                     __end_of_SoftI2cInit:	
  5556  05DA                     __ptext10:	
  5557 ;; *************** function _handleFwWrite *****************
  5558 ;; Defined at:
  5559 ;;		line 66 in file "../../../src/rfstack/client.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5562 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  packet          1   17[BANK0 ] PTR struct rfTrcvPacket_
  5565 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5566 ;;  i               1   14[BANK0 ] unsigned char 
  5567 ;;  address         2   15[BANK0 ] unsigned int 
  5568 ;;  packetData      1   13[BANK0 ] PTR unsigned int 
  5569 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), NULL(0), 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;		None               void
  5572 ;; Registers used:
  5573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 1F/0
  5576 ;;		On exit  : 1F/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5579 ;;      Params:         0       0       0       0
  5580 ;;      Locals:         0       5       0       0
  5581 ;;      Temps:          0       5       0       0
  5582 ;;      Totals:         0      10       0       0
  5583 ;;Total ram usage:       10 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    8
  5586 ;; This function calls:
  5587 ;;		_eepromRxBytes
  5588 ;;		_eepromTxBytes
  5589 ;; This function is called by:
  5590 ;;		_HandlePacket
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _handleFwWrite
  5596  05DA                     _handleFwWrite:	
  5597                           
  5598                           ;incstack = 0
  5599                           ; Regs used in _handleFwWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5600                           ;handleFwWrite@packet stored from wreg
  5601  05DA  00B1               	movwf	handleFwWrite@packet
  5602                           
  5603                           ;client.c: 69: UI16_t* packetData = (UI16_t*) &(packet->packet.data[8]);
  5604  05DB  3E0E               	addlw	14
  5605  05DC  00AD               	movwf	handleFwWrite@packetData
  5606                           
  5607                           ;client.c: 72: eepromTxBytes(address, packet->packet.data+8, 8);
  5608  05DD  01A4               	clrf	eepromTxBytes@address
  5609  05DE  01A5               	clrf	eepromTxBytes@address+1
  5610  05DF  0831               	movf	handleFwWrite@packet,w
  5611  05E0  3E0E               	addlw	14
  5612  05E1  00A6               	movwf	eepromTxBytes@data
  5613  05E2  3008               	movlw	8
  5614  05E3  00A7               	movwf	eepromTxBytes@size
  5615  05E4  264D  3185         	fcall	_eepromTxBytes
  5616                           
  5617                           ;client.c: 75: _delay((unsigned long)((5)*(16000000/4000.0)));
  5618  05E6  301A               	movlw	26
  5619  05E7  0020               	movlb	0	; select bank0
  5620  05E8  00A9               	movwf	??_handleFwWrite+1
  5621  05E9  30F8               	movlw	248
  5622  05EA  00A8               	movwf	??_handleFwWrite
  5623  05EB                     u2157:	
  5624  05EB  0BA8               	decfsz	??_handleFwWrite,f
  5625  05EC  2DEB               	goto	u2157
  5626  05ED  0BA9               	decfsz	??_handleFwWrite+1,f
  5627  05EE  2DEB               	goto	u2157
  5628  05EF  0000               	nop
  5629                           
  5630                           ;client.c: 77: eepromRxBytes(address, packet->packet.data+8, 8);
  5631  05F0  0020               	movlb	0	; select bank0
  5632  05F1  01A4               	clrf	eepromRxBytes@address
  5633  05F2  01A5               	clrf	eepromRxBytes@address+1
  5634  05F3  0831               	movf	handleFwWrite@packet,w
  5635  05F4  3E0E               	addlw	14
  5636  05F5  00A6               	movwf	eepromRxBytes@data
  5637  05F6  3008               	movlw	8
  5638  05F7  00A7               	movwf	eepromRxBytes@size
  5639  05F8  2669  3185         	fcall	_eepromRxBytes
  5640                           
  5641                           ;client.c: 80: address = 0xCAFE;
  5642  05FA  30FE               	movlw	254
  5643  05FB  0020               	movlb	0	; select bank0
  5644  05FC  00AF               	movwf	handleFwWrite@address
  5645  05FD  30CA               	movlw	202
  5646  05FE  00B0               	movwf	handleFwWrite@address+1
  5647                           
  5648                           ;client.c: 82: for (uint8_t i = 0; i < 4; i++)
  5649  05FF  01AE               	clrf	handleFwWrite@i
  5650  0600                     l2334:	
  5651                           
  5652                           ;client.c: 83: {
  5653                           ;client.c: 84: address = address ^ (packetData[i] ^ 0x5AA5);
  5654  0600  352E               	lslf	handleFwWrite@i,w
  5655  0601  072D               	addwf	handleFwWrite@packetData,w
  5656  0602  00A8               	movwf	??_handleFwWrite
  5657  0603  0086               	movwf	6
  5658  0604  0187               	clrf	7
  5659  0605  3F40               	moviw [0]fsr1
  5660  0606  00A9               	movwf	??_handleFwWrite+1
  5661  0607  3F41               	moviw [1]fsr1
  5662  0608  00AA               	movwf	??_handleFwWrite+2
  5663  0609  082F               	movf	handleFwWrite@address,w
  5664  060A  0629               	xorwf	??_handleFwWrite+1,w
  5665  060B  00AB               	movwf	??_handleFwWrite+3
  5666  060C  0830               	movf	handleFwWrite@address+1,w
  5667  060D  062A               	xorwf	??_handleFwWrite+2,w
  5668  060E  00AC               	movwf	??_handleFwWrite+4
  5669  060F  30A5               	movlw	165
  5670  0610  062B               	xorwf	??_handleFwWrite+3,w
  5671  0611  00AF               	movwf	handleFwWrite@address
  5672  0612  305A               	movlw	90
  5673  0613  062C               	xorwf	??_handleFwWrite+4,w
  5674  0614  00B0               	movwf	handleFwWrite@address+1
  5675  0615  3004               	movlw	4
  5676  0616  0AAE               	incf	handleFwWrite@i,f
  5677  0617  022E               	subwf	handleFwWrite@i,w
  5678  0618  1C03               	skipc
  5679  0619  2E00               	goto	l2334
  5680                           
  5681                           ;client.c: 85: }
  5682                           ;client.c: 87: packet->packet.data[8] = address >> 8;
  5683  061A  0831               	movf	handleFwWrite@packet,w
  5684  061B  3E0E               	addlw	14
  5685  061C  0086               	movwf	6
  5686  061D  0830               	movf	handleFwWrite@address+1,w
  5687  061E  0081               	movwf	1
  5688                           
  5689                           ;client.c: 88: packet->packet.data[9] = address & 0xFF;
  5690  061F  0831               	movf	handleFwWrite@packet,w
  5691  0620  3E0F               	addlw	15
  5692  0621  0086               	movwf	6
  5693  0622  082F               	movf	handleFwWrite@address,w
  5694  0623  0081               	movwf	1
  5695                           
  5696                           ;client.c: 90: packet->packet.size = 10;
  5697  0624  0A31               	incf	handleFwWrite@packet,w
  5698  0625  0086               	movwf	6
  5699  0626  300A               	movlw	10
  5700  0627  0081               	movwf	1
  5701  0628  0008               	return
  5702  0629                     __end_of_handleFwWrite:	
  5703  0629                     __ptext16:	
  5704 ;; *************** function _SoftI2cStop *****************
  5705 ;; Defined at:
  5706 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;		None
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;		None
  5711 ;; Return value:  Size  Location     Type
  5712 ;;		None               void
  5713 ;; Registers used:
  5714 ;;		wreg, status,2, status,0, pclath, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/1
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5720 ;;      Params:         0       0       0       0
  5721 ;;      Locals:         0       0       0       0
  5722 ;;      Temps:          0       0       0       0
  5723 ;;      Totals:         0       0       0       0
  5724 ;;Total ram usage:        0 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:    6
  5727 ;; This function calls:
  5728 ;;		_SoftI2cNop
  5729 ;; This function is called by:
  5730 ;;		_SoftI2cInit
  5731 ;;		_eepromRxBytes
  5732 ;;		_eepromTxBytes
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           
  5737                           ;psect for function _SoftI2cStop
  5738  0629                     _SoftI2cStop:	
  5739  0629                     l1958:	
  5740                           ;incstack = 0
  5741                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5742                           
  5743                           
  5744                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  5745  0629  0021               	movlb	1	; select bank1
  5746  062A  120D               	bcf	13,4	;volatile
  5747                           
  5748                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  5749  062B  0022               	movlb	2	; select bank2
  5750  062C  120D               	bcf	13,4	;volatile
  5751                           
  5752                           ;softI2c.c: 78: SoftI2cNop();
  5753  062D  26F3  3185         	fcall	_SoftI2cNop
  5754                           
  5755                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  5756  062F  0022               	movlb	2	; select bank2
  5757  0630  170D               	bsf	13,6	;volatile
  5758                           
  5759                           ;softI2c.c: 81: SoftI2cNop();
  5760  0631  26F3  3185         	fcall	_SoftI2cNop
  5761                           
  5762                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  5763  0633  0022               	movlb	2	; select bank2
  5764  0634  160D               	bsf	13,4	;volatile
  5765                           
  5766                           ;softI2c.c: 83: SoftI2cNop();
  5767  0635  26F3  3185         	fcall	_SoftI2cNop
  5768                           
  5769                           ;softI2c.c: 84: SoftI2cNop();
  5770  0637  2EF3               	ljmp	l1914
  5771  0638                     __end_of_SoftI2cStop:	
  5772  0638                     __ptext19:	
  5773 ;; *************** function _SoftI2cRepeatedStart *****************
  5774 ;; Defined at:
  5775 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;		None               void
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, pclath, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5789 ;;      Params:         0       0       0       0
  5790 ;;      Locals:         0       0       0       0
  5791 ;;      Temps:          0       0       0       0
  5792 ;;      Totals:         0       0       0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    6
  5796 ;; This function calls:
  5797 ;;		_SoftI2cNop
  5798 ;; This function is called by:
  5799 ;;		_eepromRxBytes
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function _SoftI2cRepeatedStart
  5805  0638                     _SoftI2cRepeatedStart:	
  5806                           
  5807                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5811  0638  0021               	movlb	1	; select bank1
  5812  0639  120D               	bcf	13,4	;volatile
  5813                           
  5814                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  5815  063A  0022               	movlb	2	; select bank2
  5816  063B  130D               	bcf	13,6	;volatile
  5817                           
  5818                           ;softI2c.c: 57: SoftI2cNop();
  5819  063C  26F3  3185         	fcall	_SoftI2cNop
  5820                           
  5821                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  5822  063E  0022               	movlb	2	; select bank2
  5823  063F  160D               	bsf	13,4	;volatile
  5824                           
  5825                           ;softI2c.c: 60: SoftI2cNop();
  5826  0640  26F3  3185         	fcall	_SoftI2cNop
  5827                           
  5828                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  5829  0642  0022               	movlb	2	; select bank2
  5830  0643  170D               	bsf	13,6	;volatile
  5831                           
  5832                           ;softI2c.c: 63: SoftI2cNop();
  5833  0644  26F3  3185         	fcall	_SoftI2cNop
  5834                           
  5835                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  5836  0646  0022               	movlb	2	; select bank2
  5837  0647  120D               	bcf	13,4	;volatile
  5838                           
  5839                           ;softI2c.c: 66: SoftI2cNop();
  5840  0648  26F3  3185         	fcall	_SoftI2cNop
  5841                           
  5842                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  5843  064A  0022               	movlb	2	; select bank2
  5844  064B  130D               	bcf	13,6	;volatile
  5845                           
  5846                           ;softI2c.c: 69: SoftI2cNop();
  5847  064C  2EF3               	ljmp	l1914
  5848  064D                     __end_of_SoftI2cRepeatedStart:	
  5849  064D                     __ptext11:	
  5850 ;; *************** function _eepromTxBytes *****************
  5851 ;; Defined at:
  5852 ;;		line 25 in file "../../../src/devices/24aa64.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  address         2    4[BANK0 ] unsigned int 
  5855 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5856 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), eepromTxByte@byte(1), 
  5857 ;;		 -> NULL(0), 
  5858 ;;  size            1    7[BANK0 ] unsigned char 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;		None               void
  5863 ;; Registers used:
  5864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 1F/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5870 ;;      Params:         0       4       0       0
  5871 ;;      Locals:         0       0       0       0
  5872 ;;      Temps:          0       0       0       0
  5873 ;;      Totals:         0       4       0       0
  5874 ;;Total ram usage:        4 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    7
  5877 ;; This function calls:
  5878 ;;		_SoftI2cStart
  5879 ;;		_SoftI2cStop
  5880 ;;		_SoftI2cTxByte
  5881 ;; This function is called by:
  5882 ;;		_handleFwWrite
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _eepromTxBytes
  5888  064D                     _eepromTxBytes:	
  5889                           
  5890                           ;24aa64.c: 28: SoftI2cStart();
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5894  064D  26FA  3185         	fcall	_SoftI2cStart
  5895                           
  5896                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  5897  064F  30A0               	movlw	160
  5898  0650  268D  3185         	fcall	_SoftI2cTxByte
  5899                           
  5900                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  5901  0652  0020               	movlb	0	; select bank0
  5902  0653  0825               	movf	eepromTxBytes@address+1,w
  5903  0654  268D  3185         	fcall	_SoftI2cTxByte
  5904                           
  5905                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  5906  0656  0020               	movlb	0	; select bank0
  5907  0657  0824               	movf	eepromTxBytes@address,w
  5908  0658  268D  3185         	fcall	_SoftI2cTxByte
  5909  065A                     l2190:	
  5910                           ;24aa64.c: 33: while (size != 0)
  5911                           
  5912  065A  0020               	movlb	0	; select bank0
  5913  065B  08A7               	movf	eepromTxBytes@size,f
  5914  065C  1903               	btfsc	3,2
  5915  065D  2E68               	goto	l2192
  5916                           
  5917                           ;24aa64.c: 34: {
  5918                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  5919  065E  0826               	movf	eepromTxBytes@data,w
  5920  065F  0086               	movwf	6
  5921  0660  0187               	clrf	7
  5922  0661  0801               	movf	1,w
  5923  0662  268D  3185         	fcall	_SoftI2cTxByte
  5924                           
  5925                           ;24aa64.c: 37: data++;
  5926  0664  0020               	movlb	0	; select bank0
  5927  0665  0AA6               	incf	eepromTxBytes@data,f
  5928                           
  5929                           ;24aa64.c: 38: size--;
  5930  0666  03A7               	decf	eepromTxBytes@size,f
  5931  0667  2E5A               	goto	l2190
  5932  0668                     l2192:	
  5933                           
  5934                           ;24aa64.c: 39: }
  5935                           ;24aa64.c: 40: SoftI2cStop();
  5936  0668  2E29               	ljmp	l1958
  5937  0669                     __end_of_eepromTxBytes:	
  5938  0669                     __ptext14:	
  5939 ;; *************** function _eepromRxBytes *****************
  5940 ;; Defined at:
  5941 ;;		line 4 in file "../../../src/devices/24aa64.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  address         2    4[BANK0 ] unsigned int 
  5944 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5945 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwRead@packet..(21), handleFwWrite@packet..(21)
      +, 
  5946 ;;		 -> handleFwCmd@packet..(21), eepromRxByte@dat(1), NULL(0), 
  5947 ;;  size            1    7[BANK0 ] unsigned char 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;		None
  5950 ;; Return value:  Size  Location     Type
  5951 ;;		None               void
  5952 ;; Registers used:
  5953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 1F/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5959 ;;      Params:         0       4       0       0
  5960 ;;      Locals:         0       0       0       0
  5961 ;;      Temps:          0       0       0       0
  5962 ;;      Totals:         0       4       0       0
  5963 ;;Total ram usage:        4 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    7
  5966 ;; This function calls:
  5967 ;;		_SoftI2cRepeatedStart
  5968 ;;		_SoftI2cRxByte
  5969 ;;		_SoftI2cStart
  5970 ;;		_SoftI2cStop
  5971 ;;		_SoftI2cTxByte
  5972 ;; This function is called by:
  5973 ;;		_handleFwCmd
  5974 ;;		_handleFwWrite
  5975 ;;		_handleFwRead
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _eepromRxBytes
  5981  0669                     _eepromRxBytes:	
  5982  0669                     l2170:	
  5983                           ;incstack = 0
  5984                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5985                           
  5986                           
  5987                           ;24aa64.c: 7: SoftI2cStart();
  5988  0669  26FA  3185         	fcall	_SoftI2cStart
  5989                           
  5990                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  5991  066B  30A0               	movlw	160
  5992  066C  268D  3185         	fcall	_SoftI2cTxByte
  5993                           
  5994                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  5995  066E  0020               	movlb	0	; select bank0
  5996  066F  0825               	movf	eepromRxBytes@address+1,w
  5997  0670  268D  3185         	fcall	_SoftI2cTxByte
  5998                           
  5999                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  6000  0672  0020               	movlb	0	; select bank0
  6001  0673  0824               	movf	eepromRxBytes@address,w
  6002  0674  268D  3185         	fcall	_SoftI2cTxByte
  6003                           
  6004                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  6005  0676  2638  3185         	fcall	_SoftI2cRepeatedStart
  6006                           
  6007                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  6008  0678  30A1               	movlw	161
  6009  0679  268D  3185         	fcall	_SoftI2cTxByte
  6010  067B                     l2178:	
  6011                           ;24aa64.c: 15: while (size != 0)
  6012                           
  6013  067B  0020               	movlb	0	; select bank0
  6014  067C  08A7               	movf	eepromRxBytes@size,f
  6015  067D  1903               	btfsc	3,2
  6016  067E  2E8C               	goto	l2180
  6017                           
  6018                           ;24aa64.c: 16: {
  6019                           ;24aa64.c: 17: size--;
  6020  067F  03A7               	decf	eepromRxBytes@size,f
  6021                           
  6022                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  6023  0680  0826               	movf	eepromRxBytes@data,w
  6024  0681  0086               	movwf	6
  6025  0682  3000               	movlw	0
  6026  0683  0187               	clrf	7
  6027  0684  08A7               	movf	eepromRxBytes@size,f
  6028  0685  1D03               	skipz
  6029  0686  3001               	movlw	1
  6030  0687  26BB  3185         	fcall	_SoftI2cRxByte
  6031  0689  0081               	movwf	1
  6032                           
  6033                           ;24aa64.c: 21: data++;
  6034  068A  0AA6               	incf	eepromRxBytes@data,f
  6035  068B  2E7B               	goto	l2178
  6036  068C                     l2180:	
  6037                           
  6038                           ;24aa64.c: 22: }
  6039                           ;24aa64.c: 23: SoftI2cStop();
  6040  068C  2E29               	ljmp	l1958
  6041  068D                     __end_of_eepromRxBytes:	
  6042  068D                     __ptext15:	
  6043 ;; *************** function _SoftI2cTxByte *****************
  6044 ;; Defined at:
  6045 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  data            1    wreg     unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  data            1    2[BANK0 ] unsigned char 
  6050 ;;  i               1    3[BANK0 ] unsigned char 
  6051 ;;  ack             1    0        unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;                  1    wreg      unsigned char 
  6054 ;; Registers used:
  6055 ;;		wreg, status,2, status,0, pclath, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/1
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6061 ;;      Params:         0       0       0       0
  6062 ;;      Locals:         0       3       0       0
  6063 ;;      Temps:          0       0       0       0
  6064 ;;      Totals:         0       3       0       0
  6065 ;;Total ram usage:        3 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    6
  6068 ;; This function calls:
  6069 ;;		_SoftI2cNop
  6070 ;; This function is called by:
  6071 ;;		_SoftI2cInit
  6072 ;;		_eepromRxBytes
  6073 ;;		_eepromTxBytes
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           
  6078                           ;psect for function _SoftI2cTxByte
  6079  068D                     _SoftI2cTxByte:	
  6080                           
  6081                           ;incstack = 0
  6082                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  6083                           ;SoftI2cTxByte@data stored from wreg
  6084  068D  0020               	movlb	0	; select bank0
  6085  068E  00A2               	movwf	SoftI2cTxByte@data
  6086                           
  6087                           ;softI2c.c: 89: UI08_t i;
  6088                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  6089  068F  3080               	movlw	128
  6090  0690  00A3               	movwf	SoftI2cTxByte@i
  6091  0691                     l32:	
  6092                           
  6093                           ;softI2c.c: 92: {
  6094                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  6095  0691  0022               	movlb	2	; select bank2
  6096  0692  130D               	bcf	13,6	;volatile
  6097                           
  6098                           ;softI2c.c: 94: SoftI2cNop();
  6099  0693  26F3  3185         	fcall	_SoftI2cNop
  6100                           
  6101                           ;softI2c.c: 96: if(data & i)
  6102  0695  0020               	movlb	0	; select bank0
  6103  0696  0822               	movf	SoftI2cTxByte@data,w
  6104  0697  0523               	andwf	SoftI2cTxByte@i,w
  6105  0698  1903               	btfsc	3,2
  6106  0699  2E9D               	goto	l34
  6107                           
  6108                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  6109  069A  0022               	movlb	2	; select bank2
  6110  069B  160D               	bsf	13,4	;volatile
  6111  069C  2E9F               	goto	l35
  6112  069D                     l34:	
  6113                           
  6114                           ;softI2c.c: 98: else
  6115                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  6116  069D  0022               	movlb	2	; select bank2
  6117  069E  120D               	bcf	13,4	;volatile
  6118  069F                     l35:	
  6119                           
  6120                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  6121  069F  0021               	movlb	1	; select bank1
  6122  06A0  120D               	bcf	13,4	;volatile
  6123                           
  6124                           ;softI2c.c: 102: SoftI2cNop();
  6125  06A1  26F3  3185         	fcall	_SoftI2cNop
  6126                           
  6127                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  6128  06A3  0022               	movlb	2	; select bank2
  6129  06A4  170D               	bsf	13,6	;volatile
  6130                           
  6131                           ;softI2c.c: 105: SoftI2cNop();
  6132  06A5  26F3  3185         	fcall	_SoftI2cNop
  6133  06A7  0020               	movlb	0	; select bank0
  6134  06A8  36A3               	lsrf	SoftI2cTxByte@i,f
  6135  06A9  08A3               	movf	SoftI2cTxByte@i,f
  6136  06AA  1D03               	skipz
  6137  06AB  2E91               	goto	l32
  6138                           
  6139                           ;softI2c.c: 109: }
  6140                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  6141  06AC  0022               	movlb	2	; select bank2
  6142  06AD  130D               	bcf	13,6	;volatile
  6143                           
  6144                           ;softI2c.c: 113: SoftI2cNop();
  6145  06AE  26F3  3185         	fcall	_SoftI2cNop
  6146                           
  6147                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  6148  06B0  0021               	movlb	1	; select bank1
  6149  06B1  160D               	bsf	13,4	;volatile
  6150                           
  6151                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  6152  06B2  0022               	movlb	2	; select bank2
  6153  06B3  170D               	bsf	13,6	;volatile
  6154                           
  6155                           ;softI2c.c: 118: SoftI2cNop();
  6156  06B4  26F3  3185         	fcall	_SoftI2cNop
  6157  06B6  0020               	movlb	0	; select bank0
  6158  06B7  080D               	movf	13,w	;volatile
  6159                           
  6160                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  6161  06B8  0022               	movlb	2	; select bank2
  6162  06B9  130D               	bcf	13,6	;volatile
  6163                           
  6164                           ;softI2c.c: 123: SoftI2cNop();
  6165  06BA  2EF3               	ljmp	l1914
  6166  06BB                     __end_of_SoftI2cTxByte:	
  6167  06BB                     __ptext18:	
  6168 ;; *************** function _SoftI2cRxByte *****************
  6169 ;; Defined at:
  6170 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  ack             1    wreg     unsigned char 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  ack             1    1[BANK0 ] unsigned char 
  6175 ;;  i               1    3[BANK0 ] unsigned char 
  6176 ;;  data            1    2[BANK0 ] unsigned char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      unsigned char 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0, pclath, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 1F/0
  6183 ;;		On exit  : 1F/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6186 ;;      Params:         0       0       0       0
  6187 ;;      Locals:         0       3       0       0
  6188 ;;      Temps:          0       0       0       0
  6189 ;;      Totals:         0       3       0       0
  6190 ;;Total ram usage:        3 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    6
  6193 ;; This function calls:
  6194 ;;		_SoftI2cNop
  6195 ;; This function is called by:
  6196 ;;		_eepromRxBytes
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           
  6201                           ;psect for function _SoftI2cRxByte
  6202  06BB                     _SoftI2cRxByte:	
  6203                           
  6204                           ;incstack = 0
  6205                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  6206                           ;SoftI2cRxByte@ack stored from wreg
  6207  06BB  00A1               	movwf	SoftI2cRxByte@ack
  6208                           
  6209                           ;softI2c.c: 131: UI08_t data=0x00;
  6210  06BC  01A2               	clrf	SoftI2cRxByte@data
  6211                           
  6212                           ;softI2c.c: 132: UI08_t i;
  6213                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  6214  06BD  0022               	movlb	2	; select bank2
  6215  06BE  130D               	bcf	13,6	;volatile
  6216                           
  6217                           ;softI2c.c: 135: SoftI2cNop();
  6218  06BF  26F3  3185         	fcall	_SoftI2cNop
  6219                           
  6220                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  6221  06C1  0021               	movlb	1	; select bank1
  6222  06C2  160D               	bsf	13,4	;volatile
  6223                           
  6224                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  6225  06C3  0022               	movlb	2	; select bank2
  6226  06C4  160D               	bsf	13,4	;volatile
  6227                           
  6228                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  6229  06C5  3080               	movlw	128
  6230  06C6  0020               	movlb	0	; select bank0
  6231  06C7  00A3               	movwf	SoftI2cRxByte@i
  6232  06C8                     l39:	
  6233                           
  6234                           ;softI2c.c: 140: {
  6235                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  6236  06C8  0022               	movlb	2	; select bank2
  6237  06C9  130D               	bcf	13,6	;volatile
  6238                           
  6239                           ;softI2c.c: 142: SoftI2cNop();
  6240  06CA  26F3  3185         	fcall	_SoftI2cNop
  6241                           
  6242                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  6243  06CC  0022               	movlb	2	; select bank2
  6244  06CD  170D               	bsf	13,6	;volatile
  6245                           
  6246                           ;softI2c.c: 144: SoftI2cNop();
  6247  06CE  26F3  3185         	fcall	_SoftI2cNop
  6248                           
  6249                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  6250  06D0  0020               	movlb	0	; select bank0
  6251                           
  6252                           ;softI2c.c: 150: data |= i;
  6253  06D1  0823               	movf	SoftI2cRxByte@i,w
  6254  06D2  1A0D               	btfsc	13,4	;volatile
  6255  06D3  04A2               	iorwf	SoftI2cRxByte@data,f
  6256  06D4  36A3               	lsrf	SoftI2cRxByte@i,f
  6257  06D5  08A3               	movf	SoftI2cRxByte@i,f
  6258  06D6  1D03               	skipz
  6259  06D7  2EC8               	goto	l39
  6260                           
  6261                           ;softI2c.c: 152: }
  6262                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  6263  06D8  0022               	movlb	2	; select bank2
  6264  06D9  130D               	bcf	13,6	;volatile
  6265                           
  6266                           ;softI2c.c: 155: SoftI2cNop();
  6267  06DA  26F3  3185         	fcall	_SoftI2cNop
  6268                           
  6269                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  6270  06DC  0021               	movlb	1	; select bank1
  6271  06DD  120D               	bcf	13,4	;volatile
  6272                           
  6273                           ;softI2c.c: 158: if(ack)
  6274  06DE  0020               	movlb	0	; select bank0
  6275  06DF  0821               	movf	SoftI2cRxByte@ack,w
  6276  06E0  1903               	btfsc	3,2
  6277  06E1  2EE5               	goto	l42
  6278                           
  6279                           ;softI2c.c: 159: {
  6280                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  6281  06E2  0022               	movlb	2	; select bank2
  6282  06E3  120D               	bcf	13,4	;volatile
  6283                           
  6284                           ;softI2c.c: 161: }
  6285  06E4  2EE7               	goto	l2014
  6286  06E5                     l42:	
  6287                           
  6288                           ;softI2c.c: 162: else
  6289                           ;softI2c.c: 163: {
  6290                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  6291  06E5  0022               	movlb	2	; select bank2
  6292  06E6  160D               	bsf	13,4	;volatile
  6293  06E7                     l2014:	
  6294                           
  6295                           ;softI2c.c: 165: }
  6296                           ;softI2c.c: 166: SoftI2cNop();
  6297  06E7  26F3  3185         	fcall	_SoftI2cNop
  6298                           
  6299                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  6300  06E9  0022               	movlb	2	; select bank2
  6301  06EA  170D               	bsf	13,6	;volatile
  6302                           
  6303                           ;softI2c.c: 169: SoftI2cNop();
  6304  06EB  26F3  3185         	fcall	_SoftI2cNop
  6305                           
  6306                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  6307  06ED  0022               	movlb	2	; select bank2
  6308  06EE  130D               	bcf	13,6	;volatile
  6309                           
  6310                           ;softI2c.c: 172: SoftI2cNop();
  6311  06EF  26F3               	fcall	_SoftI2cNop
  6312                           
  6313                           ;softI2c.c: 174: return data;
  6314  06F0  0020               	movlb	0	; select bank0
  6315  06F1  0822               	movf	SoftI2cRxByte@data,w
  6316  06F2  0008               	return
  6317  06F3                     __end_of_SoftI2cRxByte:	
  6318  06F3                     __ptext20:	
  6319 ;; *************** function _SoftI2cNop *****************
  6320 ;; Defined at:
  6321 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;		None
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;		None               void
  6328 ;; Registers used:
  6329 ;;		wreg
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/2
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6335 ;;      Params:         0       0       0       0
  6336 ;;      Locals:         0       0       0       0
  6337 ;;      Temps:          0       1       0       0
  6338 ;;      Totals:         0       1       0       0
  6339 ;;Total ram usage:        1 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    5
  6342 ;; This function calls:
  6343 ;;		Nothing
  6344 ;; This function is called by:
  6345 ;;		_SoftI2cStart
  6346 ;;		_SoftI2cRepeatedStart
  6347 ;;		_SoftI2cStop
  6348 ;;		_SoftI2cTxByte
  6349 ;;		_SoftI2cRxByte
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           
  6354                           ;psect for function _SoftI2cNop
  6355  06F3                     _SoftI2cNop:	
  6356  06F3                     l1914:	
  6357                           ;incstack = 0
  6358                           ; Regs used in _SoftI2cNop: [wreg]
  6359                           
  6360                           
  6361                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  6362  06F3  300A               	movlw	10
  6363  06F4  0020               	movlb	0	; select bank0
  6364  06F5  00A0               	movwf	??_SoftI2cNop
  6365  06F6                     u2167:	
  6366  06F6  0BA0               	decfsz	??_SoftI2cNop,f
  6367  06F7  2EF6               	goto	u2167
  6368  06F8  0000               	nop
  6369  06F9  0008               	return
  6370  06FA                     __end_of_SoftI2cNop:	
  6371  06FA                     __ptext17:	
  6372 ;; *************** function _SoftI2cStart *****************
  6373 ;; Defined at:
  6374 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;		None
  6379 ;; Return value:  Size  Location     Type
  6380 ;;		None               void
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0, pclath, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 1E/1
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6388 ;;      Params:         0       0       0       0
  6389 ;;      Locals:         0       0       0       0
  6390 ;;      Temps:          0       0       0       0
  6391 ;;      Totals:         0       0       0       0
  6392 ;;Total ram usage:        0 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    6
  6395 ;; This function calls:
  6396 ;;		_SoftI2cNop
  6397 ;; This function is called by:
  6398 ;;		_SoftI2cInit
  6399 ;;		_eepromRxBytes
  6400 ;;		_eepromTxBytes
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function _SoftI2cStart
  6406  06FA                     _SoftI2cStart:	
  6407                           
  6408                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  6412  06FA  0021               	movlb	1	; select bank1
  6413  06FB  120D               	bcf	13,4	;volatile
  6414                           
  6415                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  6416  06FC  0022               	movlb	2	; select bank2
  6417  06FD  170D               	bsf	13,6	;volatile
  6418                           
  6419                           ;softI2c.c: 43: SoftI2cNop();
  6420  06FE  26F3  3185         	fcall	_SoftI2cNop
  6421                           
  6422                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  6423  0700  0022               	movlb	2	; select bank2
  6424  0701  120D               	bcf	13,4	;volatile
  6425                           
  6426                           ;softI2c.c: 46: SoftI2cNop();
  6427  0702  26F3  3185         	fcall	_SoftI2cNop
  6428                           
  6429                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  6430  0704  0022               	movlb	2	; select bank2
  6431  0705  130D               	bcf	13,6	;volatile
  6432                           
  6433                           ;softI2c.c: 48: SoftI2cNop();
  6434  0706  2EF3               	ljmp	l1914
  6435  0707                     __end_of_SoftI2cStart:	
  6436                           
  6437                           	psect	text8
  6438  07CA                     __ptext8:	
  6439 ;; *************** function _Mrf49xaModeTx *****************
  6440 ;; Defined at:
  6441 ;;		line 87 in file "../../../src/devices/mrf49xa.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  k               1    3[BANK0 ] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;		None               void
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0, pclath, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 1F/0
  6452 ;;		On exit  : 1F/1
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6455 ;;      Params:         0       0       0       0
  6456 ;;      Locals:         0       1       0       0
  6457 ;;      Temps:          0       0       0       0
  6458 ;;      Totals:         0       1       0       0
  6459 ;;Total ram usage:        1 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    7
  6462 ;; This function calls:
  6463 ;;		_Mrf49TxCmd
  6464 ;; This function is called by:
  6465 ;;		_Mrf49xaTick
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _Mrf49xaModeTx
  6471  07CA                     _Mrf49xaModeTx:	
  6472  07CA  3095               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  6473                           
  6474                           ;mrf49xa.c: 89: UI08_t k;
  6475                           ;mrf49xa.c: 90: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  6476                           
  6477                           ;incstack = 0
  6478                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  6479  07CB  01A3               	clrf	Mrf49xaModeTx@k
  6480  07CC  3187               	movlp	high __stringtab
  6481  07CD  000A               	callw
  6482  07CE  3187               	pagesel	$	;select current page
  6483  07CF  3800               	iorlw	0
  6484  07D0  1903               	btfsc	3,2
  6485  07D1  2FEE               	goto	l2490
  6486  07D2                     l2482:	
  6487  07D2  3523               	lslf	Mrf49xaModeTx@k,w
  6488  07D3  3EC2               	addlw	low (_mrfRegset_Tx| (0+32768))
  6489  07D4  3187               	movlp	high __stringtab
  6490  07D5  000A               	callw
  6491  07D6  3187               	pagesel	$	;select current page
  6492  07D7  3A55               	xorlw	85
  6493  07D8  1903               	skipnz
  6494  07D9  2FE6               	goto	l2486
  6495  07DA  3523               	lslf	Mrf49xaModeTx@k,w
  6496  07DB  3EC3               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  6497  07DC  3187               	movlp	high __stringtab
  6498  07DD  000A               	callw
  6499  07DE  00A1               	movwf	Mrf49TxCmd@val
  6500  07DF  3523               	lslf	Mrf49xaModeTx@k,w
  6501  07E0  3EC2               	addlw	low (_mrfRegset_Tx| (0+32768))
  6502  07E1  3187               	movlp	high __stringtab
  6503  07E2  000A               	callw
  6504  07E3  3182  2224  3187   	fcall	_Mrf49TxCmd
  6505  07E6                     l2486:	
  6506  07E6  3095               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  6507  07E7  0AA3               	incf	Mrf49xaModeTx@k,f
  6508  07E8  3187               	movlp	high __stringtab
  6509  07E9  000A               	callw
  6510  07EA  3187               	pagesel	$	;select current page
  6511  07EB  0223               	subwf	Mrf49xaModeTx@k,w
  6512  07EC  1C03               	skipc
  6513  07ED  2FD2               	goto	l2482
  6514  07EE                     l2490:	
  6515                           
  6516                           ;mrf49xa.c: 93: rfTrcvStatus.state = TX_PACKET;
  6517  07EE  3002               	movlw	2
  6518  07EF  0021               	movlb	1	; select bank1
  6519  07F0  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  6520                           
  6521                           ;mrf49xa.c: 94: rfTrcvStatus.hwByte = 99;
  6522  07F1  3063               	movlw	99
  6523  07F2  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6524  07F3  0008               	return
  6525  07F4                     __end_of_Mrf49xaModeTx:	
  6526                           
  6527                           	psect	swtext1
  6528  0800                     __pswtext1:	
  6529  0800                     S2874:	
  6530  0800  3183  2B5E         	ljmp	l483
  6531  0802  3183  2B5F         	ljmp	l2294
  6532  0804  3183  2B76         	ljmp	l2302
  6533  0806  3183  2B5E         	ljmp	l483
  6534  0808  3183  2B5E         	ljmp	l483
  6535  080A  3183  2B5E         	ljmp	l483
  6536  080C  3183  2B5E         	ljmp	l483
  6537  080E  3183  2B5E         	ljmp	l483
  6538                           
  6539                           	psect	text21
  6540  0707                     __ptext21:	
  6541 ;; *************** function _Mrf49xaTxAck *****************
  6542 ;; Defined at:
  6543 ;;		line 14 in file "../../../src/devices/mrf49xa_packet.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6546 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  6549 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6550 ;; Return value:  Size  Location     Type
  6551 ;;		None               void
  6552 ;; Registers used:
  6553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 1F/0
  6556 ;;		On exit  : 1F/1
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6559 ;;      Params:         0       0       0       0
  6560 ;;      Locals:         0       1       0       0
  6561 ;;      Temps:          0       0       0       0
  6562 ;;      Totals:         0       1       0       0
  6563 ;;Total ram usage:        1 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:    6
  6566 ;; This function calls:
  6567 ;;		_Mrf49xaTxPacket
  6568 ;; This function is called by:
  6569 ;;		_HandlePacket
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           
  6574                           ;psect for function _Mrf49xaTxAck
  6575  0707                     _Mrf49xaTxAck:	
  6576                           
  6577                           ;incstack = 0
  6578                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6579                           ;Mrf49xaTxAck@packet stored from wreg
  6580  0707  00A6               	movwf	Mrf49xaTxAck@packet
  6581                           
  6582                           ;mrf49xa_packet.c: 16: packet->packet.data[0] = packet->packet.id;
  6583  0708  3E06               	addlw	6
  6584  0709  0086               	movwf	6
  6585  070A  0187               	clrf	7
  6586  070B  0826               	movf	Mrf49xaTxAck@packet,w
  6587  070C  3E04               	addlw	4
  6588  070D  0084               	movwf	4
  6589  070E  0185               	clrf	5
  6590  070F  0800               	movf	0,w
  6591  0710  0081               	movwf	1
  6592                           
  6593                           ;mrf49xa_packet.c: 17: packet->packet.data[1] = packet->crc;
  6594  0711  0826               	movf	Mrf49xaTxAck@packet,w
  6595  0712  3E07               	addlw	7
  6596  0713  0086               	movwf	6
  6597  0714  0826               	movf	Mrf49xaTxAck@packet,w
  6598  0715  3E16               	addlw	22
  6599  0716  0084               	movwf	4
  6600  0717  0800               	movf	0,w
  6601  0718  0081               	movwf	1
  6602                           
  6603                           ;mrf49xa_packet.c: 20: packet->packet.id = RF_ACK;
  6604  0719  0826               	movf	Mrf49xaTxAck@packet,w
  6605  071A  3E04               	addlw	4
  6606  071B  0086               	movwf	6
  6607  071C  30A1               	movlw	161
  6608  071D  0081               	movwf	1
  6609                           
  6610                           ;mrf49xa_packet.c: 21: packet->packet.size = 2;
  6611  071E  0A26               	incf	Mrf49xaTxAck@packet,w
  6612  071F  0086               	movwf	6
  6613  0720  3002               	movlw	2
  6614  0721  0081               	movwf	1
  6615                           
  6616                           ;mrf49xa_packet.c: 23: Mrf49xaTxPacket(packet, 1, 0);
  6617  0722  01A0               	clrf	Mrf49xaTxPacket@response
  6618  0723  0AA0               	incf	Mrf49xaTxPacket@response,f
  6619  0724  01A1               	clrf	Mrf49xaTxPacket@needAck
  6620  0725  0826               	movf	Mrf49xaTxAck@packet,w
  6621  0726  2F27               	ljmp	_Mrf49xaTxPacket
  6622  0727                     __end_of_Mrf49xaTxAck:	
  6623  0727                     __ptext22:	
  6624 ;; *************** function _Mrf49xaTxPacket *****************
  6625 ;; Defined at:
  6626 ;;		line 26 in file "../../../src/devices/mrf49xa_packet.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6629 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6630 ;;  response        1    0[BANK0 ] unsigned char 
  6631 ;;  needAck         1    1[BANK0 ] unsigned char 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6634 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6635 ;;  i               1    4[BANK0 ] unsigned char 
  6636 ;;  crc             1    3[BANK0 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      unsigned char 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6641 ;; Tracked objects:
  6642 ;;		On entry : 1F/0
  6643 ;;		On exit  : 1F/1
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6646 ;;      Params:         0       2       0       0
  6647 ;;      Locals:         0       3       0       0
  6648 ;;      Temps:          0       1       0       0
  6649 ;;      Totals:         0       6       0       0
  6650 ;;Total ram usage:        6 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    5
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_Mrf49xaTxAck
  6657 ;;		_RfSendPowerState
  6658 ;;		_HandlePacket
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _Mrf49xaTxPacket
  6664  0727                     _Mrf49xaTxPacket:	
  6665                           
  6666                           ;incstack = 0
  6667                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6668                           ;Mrf49xaTxPacket@packet stored from wreg
  6669  0727  00A5               	movwf	Mrf49xaTxPacket@packet
  6670  0728  3033               	movlw	51
  6671                           
  6672                           ;mrf49xa_packet.c: 28: uint8_t i, crc = 0;
  6673  0729  01A3               	clrf	Mrf49xaTxPacket@crc
  6674                           
  6675                           ;mrf49xa_packet.c: 30: if (&(rfTrcvStatus.txPacket) == packet)
  6676  072A  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6677  072B  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6678  072C  1D03               	skipz
  6679  072D  2F37               	goto	l2124
  6680                           
  6681                           ;mrf49xa_packet.c: 31: {
  6682                           ;mrf49xa_packet.c: 32: if (response)
  6683  072E  0820               	movf	Mrf49xaTxPacket@response,w
  6684  072F  1903               	btfsc	3,2
  6685  0730  2F34               	goto	l2108
  6686                           
  6687                           ;mrf49xa_packet.c: 33: {
  6688                           ;mrf49xa_packet.c: 34: packet->packet.dst = packet->packet.src;
  6689  0731  0825               	movf	Mrf49xaTxPacket@packet,w
  6690  0732  2788  3187         	fcall	PL6	;call to abstracted procedure
  6691  0734                     l2108:	
  6692                           
  6693                           ;mrf49xa_packet.c: 35: }
  6694                           ;mrf49xa_packet.c: 36: packet->packet.src = rfTrcvStatus.src;
  6695                           
  6696                           ;mrf49xa_packet.c: 37: packet->packet.size += 5;
  6697                           
  6698                           ;mrf49xa_packet.c: 39: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6699                           
  6700                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.retry = 0;
  6701                           
  6702                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retransmit = 0;
  6703                           
  6704                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6705  0734  276D               	fcall	PL2	;call to abstracted procedure
  6706                           
  6707                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.crc = 0;
  6708  0735  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  6709  0736  0008               	return
  6710  0737                     l2124:	
  6711                           
  6712                           ;mrf49xa_packet.c: 45: }
  6713                           ;mrf49xa_packet.c: 48: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6714  0737  0021               	movlb	1	; select bank1
  6715  0738  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  6716  0739  1D03               	skipz
  6717  073A  0008               	return
  6718                           
  6719                           ;mrf49xa_packet.c: 53: else
  6720                           ;mrf49xa_packet.c: 54: {
  6721                           ;mrf49xa_packet.c: 55: if (response)
  6722  073B  0020               	movlb	0	; select bank0
  6723  073C  0820               	movf	Mrf49xaTxPacket@response,w
  6724  073D  1903               	btfsc	3,2
  6725  073E  2F42               	goto	l2134
  6726                           
  6727                           ;mrf49xa_packet.c: 56: {
  6728                           ;mrf49xa_packet.c: 57: packet->packet.dst = packet->packet.src;
  6729  073F  0825               	movf	Mrf49xaTxPacket@packet,w
  6730  0740  2788  3187         	fcall	PL6	;call to abstracted procedure
  6731  0742                     l2134:	
  6732                           
  6733                           ;mrf49xa_packet.c: 58: }
  6734                           ;mrf49xa_packet.c: 59: packet->packet.src = rfTrcvStatus.src;
  6735                           
  6736                           ;mrf49xa_packet.c: 60: packet->packet.size += 5;
  6737                           
  6738                           ;mrf49xa_packet.c: 62: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6739                           
  6740                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.retry = 0;
  6741                           
  6742                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retransmit = 0;
  6743                           
  6744                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6745  0742  276D  3187         	fcall	PL2	;call to abstracted procedure
  6746                           
  6747                           ;mrf49xa_packet.c: 67: packet->state = PKT_FREE;
  6748  0744  0020               	movlb	0	; select bank0
  6749  0745  0825               	movf	Mrf49xaTxPacket@packet,w
  6750  0746  0086               	movwf	6
  6751  0747  0181               	clrf	1
  6752                           
  6753                           ;mrf49xa_packet.c: 70: for (i = 0; i < (16 + 5); i++)
  6754  0748  01A4               	clrf	Mrf49xaTxPacket@i
  6755  0749                     l2154:	
  6756                           
  6757                           ;mrf49xa_packet.c: 71: {
  6758                           ;mrf49xa_packet.c: 72: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6759  0749  0824               	movf	Mrf49xaTxPacket@i,w
  6760  074A  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6761  074B  0086               	movwf	6
  6762  074C  0187               	clrf	7
  6763  074D  0824               	movf	Mrf49xaTxPacket@i,w
  6764  074E  0725               	addwf	Mrf49xaTxPacket@packet,w
  6765  074F  00A2               	movwf	??_Mrf49xaTxPacket
  6766  0750  0A22               	incf	??_Mrf49xaTxPacket,w
  6767  0751  0084               	movwf	4
  6768  0752  0185               	clrf	5
  6769  0753  0800               	movf	0,w
  6770  0754  0081               	movwf	1
  6771  0755  3015               	movlw	21
  6772  0756  0AA4               	incf	Mrf49xaTxPacket@i,f
  6773  0757  0224               	subwf	Mrf49xaTxPacket@i,w
  6774  0758  1C03               	skipc
  6775  0759  2F49               	goto	l2154
  6776                           
  6777                           ;mrf49xa_packet.c: 73: }
  6778                           ;mrf49xa_packet.c: 74: for (i = 0; i < packet->packet.size; i++)
  6779  075A  01A4               	clrf	Mrf49xaTxPacket@i
  6780  075B                     l333:	
  6781  075B  0A25               	incf	Mrf49xaTxPacket@packet,w
  6782  075C  0086               	movwf	6
  6783  075D  0187               	clrf	7
  6784  075E  0801               	movf	1,w
  6785  075F  0224               	subwf	Mrf49xaTxPacket@i,w
  6786  0760  1803               	btfsc	3,0
  6787  0761  2F69               	goto	l2166
  6788                           
  6789                           ;mrf49xa_packet.c: 75: {
  6790                           ;mrf49xa_packet.c: 76: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6791  0762  0824               	movf	Mrf49xaTxPacket@i,w
  6792  0763  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6793  0764  0086               	movwf	6
  6794  0765  0801               	movf	1,w
  6795  0766  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6796  0767  0AA4               	incf	Mrf49xaTxPacket@i,f
  6797  0768  2F5B               	goto	l333
  6798  0769                     l2166:	
  6799                           
  6800                           ;mrf49xa_packet.c: 77: }
  6801                           ;mrf49xa_packet.c: 79: rfTrcvStatus.txPacket.crc = crc;
  6802  0769  0823               	movf	Mrf49xaTxPacket@crc,w
  6803  076A  0021               	movlb	1	; select bank1
  6804  076B  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  6805  076C  0008               	return
  6806  076D                     __end_of_Mrf49xaTxPacket:	
  6807  076D                     PL2:	
  6808  076D  0825               	movf	Mrf49xaTxPacket@packet,w
  6809  076E  3E02               	addlw	2
  6810  076F  0086               	movwf	6
  6811  0770  0187               	clrf	7
  6812  0771  0021               	movlb	1	; select bank1
  6813  0772  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  6814  0773  0081               	movwf	1
  6815  0774  0020               	movlb	0	; select bank0
  6816  0775  0A25               	incf	Mrf49xaTxPacket@packet,w
  6817  0776  0086               	movwf	6
  6818  0777  3005               	movlw	5
  6819  0778  0781               	addwf	1,f
  6820  0779  0021               	movlb	1	; select bank1
  6821  077A  30F0               	movlw	-16
  6822  077B  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  6823  077C  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  6824  077D  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6825  077E  30CF               	movlw	-49
  6826  077F  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6827  0780  0020               	movlb	0	; select bank0
  6828  0781  0321               	decf	Mrf49xaTxPacket@needAck,w
  6829  0782  3000               	movlw	0
  6830  0783  1903               	skipnz
  6831  0784  3001               	movlw	1
  6832  0785  0021               	movlb	1	; select bank1
  6833  0786  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6834  0787  0008               	return
  6835  0788                     __end_ofPL2:	
  6836  0788                     PL6:	
  6837  0788  3E03               	addlw	3
  6838  0789  0086               	movwf	6
  6839  078A  0187               	clrf	7
  6840  078B  0825               	movf	Mrf49xaTxPacket@packet,w
  6841  078C  3E02               	addlw	2
  6842  078D  0084               	movwf	4
  6843  078E  0185               	clrf	5
  6844  078F  0800               	movf	0,w
  6845  0790  0081               	movwf	1
  6846  0791  0008               	return
  6847  0792                     __end_ofPL6:	
  6848                           
  6849                           	psect	intentry
  6850  0004                     __pintentry:	
  6851 ;; *************** function _extInt *****************
  6852 ;; Defined at:
  6853 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;		None               void
  6860 ;; Registers used:
  6861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 1F/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6867 ;;      Params:         0       0       0       0
  6868 ;;      Locals:         0       0       0       0
  6869 ;;      Temps:          1       0       0       0
  6870 ;;      Totals:         1       0       0       0
  6871 ;;Total ram usage:        1 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    4
  6874 ;; This function calls:
  6875 ;;		i1_Mrf49xaServe
  6876 ;; This function is called by:
  6877 ;;		Interrupt level 1
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881  0004                     _extInt:	
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6885  0004  3180               	pagesel	$
  6886  0005  0020               	movlb	0	; select bank0
  6887  0006  087F               	movf	127,w
  6888  0007  00F6               	movwf	??_extInt
  6889                           
  6890                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  6891  0008  1C8B               	btfss	11,1	;volatile
  6892  0009  2811               	goto	i1l131
  6893                           
  6894                           ;interrupt.c: 34: {
  6895                           ;interrupt.c: 35: if (Mrf49xaServe())
  6896  000A  3184  2419  3180   	fcall	i1_Mrf49xaServe
  6897  000D  3A00               	xorlw	0
  6898  000E  1903               	skipnz
  6899  000F  2811               	goto	i1l131
  6900                           
  6901                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  6902  0010  108B               	bcf	11,1	;volatile
  6903  0011                     i1l131:	
  6904  0011  0876               	movf	??_extInt,w
  6905  0012  00FF               	movwf	127
  6906  0013  0009               	retfie
  6907  0014                     __end_of_extInt:	
  6908                           
  6909                           	psect	text43
  6910  040D                     __ptext43:	
  6911 ;; *************** function i1_Mrf49RxCmd *****************
  6912 ;; Defined at:
  6913 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  cmd             1    wreg     unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  cmd             1    1[COMMON] unsigned char 
  6918 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      unsigned char 
  6921 ;; Registers used:
  6922 ;;		wreg, status,2, status,0, pclath, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 1E/1
  6925 ;;		On exit  : 1F/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6928 ;;      Params:         0       0       0       0
  6929 ;;      Locals:         2       0       0       0
  6930 ;;      Temps:          0       0       0       0
  6931 ;;      Totals:         2       0       0       0
  6932 ;;Total ram usage:        2 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    1
  6935 ;; This function calls:
  6936 ;;		i1_Mrf49SpiRx
  6937 ;;		i1_Mrf49SpiTx
  6938 ;; This function is called by:
  6939 ;;		i1_Mrf49RxByte
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function i1_Mrf49RxCmd
  6945  040D                     i1_Mrf49RxCmd:	
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  6949                           ;i1Mrf49RxCmd@cmd stored from wreg
  6950  040D  00F1               	movwf	i1Mrf49RxCmd@cmd
  6951                           
  6952                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  6953  040E  0020               	movlb	0	; select bank0
  6954  040F  130E               	bcf	14,6	;volatile
  6955                           
  6956                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  6957  0410  0871               	movf	i1Mrf49RxCmd@cmd,w
  6958  0411  251D  3184         	fcall	i1_Mrf49SpiTx
  6959                           
  6960                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  6961  0413  258C               	fcall	i1_Mrf49SpiRx
  6962  0414  00F2               	movwf	i1Mrf49RxCmd@val
  6963                           
  6964                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  6965  0415  0020               	movlb	0	; select bank0
  6966  0416  170E               	bsf	14,6	;volatile
  6967                           
  6968                           ;mrf49xa_cmd.c: 27: return val;
  6969  0417  0872               	movf	i1Mrf49RxCmd@val,w
  6970  0418  0008               	return
  6971  0419                     __end_ofi1_Mrf49RxCmd:	
  6972  0419                     __ptext37:	
  6973 ;; *************** function i1_Mrf49xaServe *****************
  6974 ;; Defined at:
  6975 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      unsigned char 
  6982 ;; Registers used:
  6983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 1F/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6989 ;;      Params:         0       0       0       0
  6990 ;;      Locals:         1       0       0       0
  6991 ;;      Temps:          1       0       0       0
  6992 ;;      Totals:         2       0       0       0
  6993 ;;Total ram usage:        2 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    3
  6996 ;; This function calls:
  6997 ;;		i1_Mrf49RxByte
  6998 ;;		i1_Mrf49RxSts
  6999 ;;		i1_Mrf49TxByte
  7000 ;;		i1_Mrf49xaModeRx
  7001 ;; This function is called by:
  7002 ;;		_extInt
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function i1_Mrf49xaServe
  7008  0419                     i1_Mrf49xaServe:	
  7009                           
  7010                           ;mrf49xa_data.c: 10: uint8_t data;
  7011                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  7012                           
  7013                           ;incstack = 0
  7014                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7015  0419  257F  3184         	fcall	i1_Mrf49RxSts
  7016                           
  7017                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  7018  041B  083A               	movf	_mrf49Status,w
  7019  041C  3AFF               	xorlw	255
  7020  041D  1D03               	skipz
  7021  041E  2C23               	goto	i1l390
  7022  041F  083B               	movf	_mrf49Status+1,w
  7023  0420  3AFF               	xorlw	255
  7024  0421  1903               	btfsc	3,2
  7025                           
  7026                           ;mrf49xa_data.c: 19: return 0;
  7027  0422  3400               	retlw	0
  7028  0423                     i1l390:	
  7029                           ;mrf49xa_data.c: 23: {
  7030                           
  7031                           
  7032                           ;mrf49xa_data.c: 25: }
  7033                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  7034  0423  1ABA               	btfsc	_mrf49Status,5
  7035  0424  2C2F               	goto	i1l2742
  7036  0425  2C3B               	goto	i1l391
  7037  0426                     i1l2738:	
  7038                           
  7039                           ;mrf49xa_data.c: 33: case RECV_DATA:
  7040                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  7041  0426  24E8  3184         	fcall	i1_Mrf49RxByte
  7042  0428  00F5               	movwf	i1Mrf49xaServe@data
  7043                           
  7044                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  7045  0429  24E8  3184         	fcall	i1_Mrf49RxByte
  7046  042B  00F5               	movwf	i1Mrf49xaServe@data
  7047                           
  7048                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  7049  042C  24EB  3184         	fcall	i1_Mrf49xaModeRx
  7050                           
  7051                           ;mrf49xa_data.c: 44: break;
  7052  042E  2C3B               	goto	i1l391
  7053  042F                     i1l2742:	
  7054  042F  0021               	movlb	1	; select bank1
  7055  0430  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7056                           
  7057                           ; Switch size 1, requested type "space"
  7058                           ; Number of cases is 3, Range of values is 0 to 2
  7059                           ; switch strategies available:
  7060                           ; Name         Instructions Cycles
  7061                           ; simple_byte           10     6 (average)
  7062                           ; direct_byte           12     6 (fixed)
  7063                           ; jumptable            260     6 (fixed)
  7064                           ;	Chosen strategy is simple_byte
  7065  0431  3A00               	xorlw	0	; case 0
  7066  0432  1903               	skipnz
  7067  0433  2C26               	goto	i1l2738
  7068  0434  3A01               	xorlw	1	; case 1
  7069  0435  1903               	skipnz
  7070  0436  2C26               	goto	i1l2738
  7071  0437  3A03               	xorlw	3	; case 2
  7072  0438  1903               	skipnz
  7073  0439  2C3B               	goto	i1l391
  7074  043A  2C3B               	goto	i1l391
  7075  043B                     i1l391:	
  7076                           
  7077                           ;mrf49xa_data.c: 52: }
  7078                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  7079  043B  0020               	movlb	0	; select bank0
  7080  043C  1BBA               	btfsc	_mrf49Status,7
  7081  043D  2CD2               	goto	i1l2828
  7082  043E  2CDE               	goto	i1l2830
  7083  043F                     i1l2746:	
  7084                           
  7085                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  7086  043F  24E8  3184         	fcall	i1_Mrf49RxByte
  7087  0441  00F5               	movwf	i1Mrf49xaServe@data
  7088                           
  7089                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  7090  0442  1BBB               	btfsc	_mrf49Status+1,7
  7091  0443  2C47               	goto	i1l2752
  7092  0444                     i1l2750:	
  7093                           
  7094                           ;mrf49xa_data.c: 72: {
  7095                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  7096  0444  24EB  3184         	fcall	i1_Mrf49xaModeRx
  7097                           
  7098                           ;mrf49xa_data.c: 74: break;
  7099  0446  2CDE               	goto	i1l2830
  7100  0447                     i1l2752:	
  7101                           
  7102                           ;mrf49xa_data.c: 75: }
  7103                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  7104  0447  0021               	movlb	1	; select bank1
  7105  0448  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  7106  0449  1D03               	skipz
  7107  044A  2C4D               	goto	i1l2756
  7108  044B  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  7109  044C  2C51               	goto	L3
  7110  044D                     i1l2756:	
  7111                           
  7112                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  7113  044D  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  7114  044E  1D03               	skipz
  7115  044F  2C44               	goto	i1l2750
  7116  0450  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  7117  0451                     L3:	
  7118  0451  00A0               	movwf	_rfTrcvStatus^(0+128)
  7119                           
  7120                           ;mrf49xa_data.c: 85: }
  7121                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  7122  0452  0A20               	incf	_rfTrcvStatus^(0+128),w
  7123  0453  0086               	movwf	6
  7124  0454  0187               	clrf	7
  7125  0455  0875               	movf	i1Mrf49xaServe@data,w
  7126  0456  0081               	movwf	1
  7127                           
  7128                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  7129  0457  0820               	movf	_rfTrcvStatus^(0+128),w
  7130  0458  3E16               	addlw	22
  7131  0459  0086               	movwf	6
  7132  045A  0181               	clrf	1
  7133                           
  7134                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  7135  045B  0820               	movf	_rfTrcvStatus^(0+128),w
  7136  045C  0086               	movwf	6
  7137  045D  3003               	movlw	3
  7138  045E  0081               	movwf	1
  7139                           
  7140                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  7141  045F  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7142  0460  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  7143                           
  7144                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  7145  0461  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7146  0462  2C8E               	goto	i1l2792
  7147  0463                     i1l2772:	
  7148                           ;mrf49xa_data.c: 93: break;
  7149                           
  7150                           
  7151                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  7152  0463  24E8  3184         	fcall	i1_Mrf49RxByte
  7153  0465  00F5               	movwf	i1Mrf49xaServe@data
  7154                           
  7155                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  7156  0466  1BBB               	btfsc	_mrf49Status+1,7
  7157  0467  2C6F               	goto	i1l2780
  7158                           
  7159                           ;mrf49xa_data.c: 102: {
  7160                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7161  0468  0021               	movlb	1	; select bank1
  7162  0469  0820               	movf	_rfTrcvStatus^(0+128),w
  7163  046A  0086               	movwf	6
  7164  046B  3004               	movlw	4
  7165  046C  0187               	clrf	7
  7166  046D  0081               	movwf	1
  7167  046E  2C44               	goto	i1l2750
  7168  046F                     i1l2780:	
  7169                           
  7170                           ;mrf49xa_data.c: 106: }
  7171                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  7172  046F  0021               	movlb	1	; select bank1
  7173  0470  0A20               	incf	_rfTrcvStatus^(0+128),w
  7174  0471  0086               	movwf	6
  7175  0472  0187               	clrf	7
  7176  0473  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7177  0474  0601               	xorwf	1,w
  7178  0475  1D03               	skipz
  7179  0476  2C86               	goto	i1l2790
  7180                           
  7181                           ;mrf49xa_data.c: 109: {
  7182                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  7183  0477  0820               	movf	_rfTrcvStatus^(0+128),w
  7184  0478  3E16               	addlw	22
  7185  0479  0086               	movwf	6
  7186  047A  0875               	movf	i1Mrf49xaServe@data,w
  7187  047B  0081               	movwf	1
  7188                           
  7189                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7190  047C  0820               	movf	_rfTrcvStatus^(0+128),w
  7191  047D  0086               	movwf	6
  7192  047E  3004               	movlw	4
  7193  047F  0081               	movwf	1
  7194                           
  7195                           ;mrf49xa_data.c: 120: Mrf49xaModeRx();
  7196  0480  24EB  3184         	fcall	i1_Mrf49xaModeRx
  7197                           
  7198                           ;mrf49xa_data.c: 123: LATCbits.LATC2 = 1;
  7199  0482  0022               	movlb	2	; select bank2
  7200  0483  150E               	bsf	14,2	;volatile
  7201                           
  7202                           ;mrf49xa_data.c: 124: LATCbits.LATC2 = 0;
  7203  0484  110E               	bcf	14,2	;volatile
  7204                           
  7205                           ;mrf49xa_data.c: 126: }
  7206  0485  2CDE               	goto	i1l2830
  7207  0486                     i1l2790:	
  7208                           
  7209                           ;mrf49xa_data.c: 127: else
  7210                           ;mrf49xa_data.c: 128: {
  7211                           ;mrf49xa_data.c: 129: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  7212  0486  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7213  0487  0720               	addwf	_rfTrcvStatus^(0+128),w
  7214  0488  00F4               	movwf	??i1_Mrf49xaServe
  7215  0489  0A74               	incf	??i1_Mrf49xaServe,w
  7216  048A  0086               	movwf	6
  7217  048B  0187               	clrf	7
  7218  048C  0875               	movf	i1Mrf49xaServe@data,w
  7219  048D  0081               	movwf	1
  7220  048E                     i1l2792:	
  7221  048E  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7222  048F  2CDE               	goto	i1l2830
  7223  0490                     i1l2794:	
  7224                           
  7225                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte++;
  7226  0490  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7227                           
  7228                           ;mrf49xa_data.c: 137: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  7229  0491  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7230  0492  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  7231  0493  1D03               	skipz
  7232  0494  2CC1               	goto	i1l2824
  7233                           
  7234                           ;mrf49xa_data.c: 138: rfTrcvStatus.hwByte = 49;
  7235  0495  3031               	movlw	49
  7236  0496  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7237  0497  2CC1               	goto	i1l2824
  7238  0498                     i1l2800:	
  7239                           
  7240                           ;mrf49xa_data.c: 143: Mrf49TxByte(0x2D);
  7241  0498  302D               	movlw	45
  7242  0499  24E3  3184         	fcall	i1_Mrf49TxByte
  7243                           
  7244                           ;mrf49xa_data.c: 144: break;
  7245  049B  2CDE               	goto	i1l2830
  7246  049C                     i1l2802:	
  7247                           
  7248                           ;mrf49xa_data.c: 147: Mrf49TxByte(0xD4);
  7249  049C  30D4               	movlw	212
  7250  049D  24E3  3184         	fcall	i1_Mrf49TxByte
  7251                           
  7252                           ;mrf49xa_data.c: 148: rfTrcvStatus.hwByte = 0xFF;
  7253  049F  30FF               	movlw	255
  7254  04A0  0021               	movlb	1	; select bank1
  7255  04A1  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7256                           
  7257                           ;mrf49xa_data.c: 149: break;
  7258  04A2  2CDE               	goto	i1l2830
  7259  04A3                     i1l2806:	
  7260                           
  7261                           ;mrf49xa_data.c: 153: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  7262  04A3  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7263  04A4  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  7264  04A5  0086               	movwf	6
  7265  04A6  0187               	clrf	7
  7266  04A7  0801               	movf	1,w
  7267  04A8  24E3  3184         	fcall	i1_Mrf49TxByte
  7268                           
  7269                           ;mrf49xa_data.c: 154: break;
  7270  04AA  2CDE               	goto	i1l2830
  7271  04AB                     i1l2808:	
  7272                           
  7273                           ;mrf49xa_data.c: 157: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  7274  04AB  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  7275  04AC  24E3  3184         	fcall	i1_Mrf49TxByte
  7276                           
  7277                           ;mrf49xa_data.c: 158: break;
  7278  04AE  2CDE               	goto	i1l2830
  7279  04AF                     i1l2810:	
  7280                           
  7281                           ;mrf49xa_data.c: 161: Mrf49TxByte(0x00);
  7282  04AF  3000               	movlw	0
  7283  04B0  24E3  3184         	fcall	i1_Mrf49TxByte
  7284                           
  7285                           ;mrf49xa_data.c: 162: break;
  7286  04B2  2CDE               	goto	i1l2830
  7287  04B3                     i1l2812:	
  7288                           
  7289                           ;mrf49xa_data.c: 165: Mrf49TxByte(0x00);
  7290  04B3  3000               	movlw	0
  7291  04B4  24E3  3184         	fcall	i1_Mrf49TxByte
  7292                           
  7293                           ;mrf49xa_data.c: 166: Mrf49xaModeRx();
  7294  04B6  24EB  3184         	fcall	i1_Mrf49xaModeRx
  7295                           
  7296                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.retry = 0;
  7297  04B8  30F0               	movlw	-16
  7298  04B9  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  7299                           
  7300                           ;mrf49xa_data.c: 170: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  7301  04BA  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  7302  04BB  2CBF               	goto	i1l2820
  7303                           
  7304                           ;mrf49xa_data.c: 171: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  7305  04BC  3002               	movlw	2
  7306  04BD  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  7307  04BE  2CDE               	goto	i1l2830
  7308  04BF                     i1l2820:	
  7309                           
  7310                           ;mrf49xa_data.c: 172: else
  7311                           ;mrf49xa_data.c: 173: rfTrcvStatus.txPacket.state = PKT_FREE;
  7312  04BF  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  7313  04C0  2CDE               	goto	i1l2830
  7314  04C1                     i1l2824:	
  7315  04C1  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7316                           
  7317                           ; Switch size 1, requested type "space"
  7318                           ; Number of cases is 5, Range of values is 49 to 101
  7319                           ; switch strategies available:
  7320                           ; Name         Instructions Cycles
  7321                           ; simple_byte           16     9 (average)
  7322                           ; direct_byte          115     9 (fixed)
  7323                           ; jumptable            263     9 (fixed)
  7324                           ;	Chosen strategy is simple_byte
  7325  04C2  3A31               	xorlw	49	; case 49
  7326  04C3  1903               	skipnz
  7327  04C4  2CAB               	goto	i1l2808
  7328  04C5  3A03               	xorlw	3	; case 50
  7329  04C6  1903               	skipnz
  7330  04C7  2CAF               	goto	i1l2810
  7331  04C8  3A01               	xorlw	1	; case 51
  7332  04C9  1903               	skipnz
  7333  04CA  2CB3               	goto	i1l2812
  7334  04CB  3A57               	xorlw	87	; case 100
  7335  04CC  1903               	skipnz
  7336  04CD  2C98               	goto	i1l2800
  7337  04CE  3A01               	xorlw	1	; case 101
  7338  04CF  1903               	skipnz
  7339  04D0  2C9C               	goto	i1l2802
  7340  04D1  2CA3               	goto	i1l2806
  7341  04D2                     i1l2828:	
  7342  04D2  0021               	movlb	1	; select bank1
  7343  04D3  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7344                           
  7345                           ; Switch size 1, requested type "space"
  7346                           ; Number of cases is 3, Range of values is 0 to 2
  7347                           ; switch strategies available:
  7348                           ; Name         Instructions Cycles
  7349                           ; simple_byte           10     6 (average)
  7350                           ; direct_byte           12     6 (fixed)
  7351                           ; jumptable            260     6 (fixed)
  7352                           ;	Chosen strategy is simple_byte
  7353  04D4  3A00               	xorlw	0	; case 0
  7354  04D5  1903               	skipnz
  7355  04D6  2C3F               	goto	i1l2746
  7356  04D7  3A01               	xorlw	1	; case 1
  7357  04D8  1903               	skipnz
  7358  04D9  2C63               	goto	i1l2772
  7359  04DA  3A03               	xorlw	3	; case 2
  7360  04DB  1903               	skipnz
  7361  04DC  2C90               	goto	i1l2794
  7362  04DD  2CDE               	goto	i1l2830
  7363  04DE                     i1l2830:	
  7364                           
  7365                           ;mrf49xa_data.c: 180: }
  7366                           ;mrf49xa_data.c: 194: return PORTAbits.RA2 == 1 ? 1 : 0;
  7367  04DE  0020               	movlb	0	; select bank0
  7368  04DF  0C0C               	rrf	12,w	;volatile
  7369  04E0  0C89               	rrf	9,f
  7370  04E1  3901               	andlw	1
  7371  04E2  0008               	return
  7372  04E3                     __end_ofi1_Mrf49xaServe:	
  7373  04E3                     __ptext39:	
  7374 ;; *************** function i1_Mrf49TxByte *****************
  7375 ;; Defined at:
  7376 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  byte            1    wreg     unsigned char 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  byte            1    3[COMMON] unsigned char 
  7381 ;; Return value:  Size  Location     Type
  7382 ;;		None               void
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 1E/1
  7387 ;;		On exit  : 1F/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7390 ;;      Params:         0       0       0       0
  7391 ;;      Locals:         1       0       0       0
  7392 ;;      Temps:          0       0       0       0
  7393 ;;      Totals:         1       0       0       0
  7394 ;;Total ram usage:        1 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    2
  7397 ;; This function calls:
  7398 ;;		i1_Mrf49TxCmd
  7399 ;; This function is called by:
  7400 ;;		i1_Mrf49xaServe
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function i1_Mrf49TxByte
  7406  04E3                     i1_Mrf49TxByte:	
  7407                           
  7408                           ;incstack = 0
  7409                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  7410                           ;i1Mrf49TxByte@byte stored from wreg
  7411  04E3  00F3               	movwf	i1Mrf49TxByte@byte
  7412                           
  7413                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  7414  04E4  00F1               	movwf	i1Mrf49TxCmd@val
  7415  04E5  30B8               	movlw	184
  7416  04E6  2513               	fcall	i1_Mrf49TxCmd
  7417  04E7  0008               	return
  7418  04E8                     __end_ofi1_Mrf49TxByte:	
  7419  04E8                     __ptext42:	
  7420 ;; *************** function i1_Mrf49RxByte *****************
  7421 ;; Defined at:
  7422 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;		None
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;		None
  7427 ;; Return value:  Size  Location     Type
  7428 ;;                  1    wreg      unsigned char 
  7429 ;; Registers used:
  7430 ;;		wreg, status,2, status,0, pclath, cstack
  7431 ;; Tracked objects:
  7432 ;;		On entry : 1E/1
  7433 ;;		On exit  : 1F/0
  7434 ;;		Unchanged: 0/0
  7435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7436 ;;      Params:         0       0       0       0
  7437 ;;      Locals:         0       0       0       0
  7438 ;;      Temps:          0       0       0       0
  7439 ;;      Totals:         0       0       0       0
  7440 ;;Total ram usage:        0 bytes
  7441 ;; Hardware stack levels used:    1
  7442 ;; Hardware stack levels required when called:    2
  7443 ;; This function calls:
  7444 ;;		i1_Mrf49RxCmd
  7445 ;; This function is called by:
  7446 ;;		i1_Mrf49xaServe
  7447 ;; This function uses a non-reentrant model
  7448 ;;
  7449                           
  7450                           
  7451                           ;psect for function i1_Mrf49RxByte
  7452  04E8                     i1_Mrf49RxByte:	
  7453                           
  7454                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  7455                           
  7456                           ;incstack = 0
  7457                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  7458  04E8  30B0               	movlw	176
  7459  04E9  240D               	fcall	i1_Mrf49RxCmd
  7460  04EA  0008               	return
  7461  04EB                     __end_ofi1_Mrf49RxByte:	
  7462  04EB                     __ptext38:	
  7463 ;; *************** function i1_Mrf49xaModeRx *****************
  7464 ;; Defined at:
  7465 ;;		line 77 in file "../../../src/devices/mrf49xa.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;		None               void
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0, pclath, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 1E/0
  7476 ;;		On exit  : 1F/1
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7479 ;;      Params:         0       0       0       0
  7480 ;;      Locals:         1       0       0       0
  7481 ;;      Temps:          0       0       0       0
  7482 ;;      Totals:         1       0       0       0
  7483 ;;Total ram usage:        1 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    2
  7486 ;; This function calls:
  7487 ;;		i1_Mrf49TxCmd
  7488 ;; This function is called by:
  7489 ;;		i1_Mrf49xaServe
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           
  7494                           ;psect for function i1_Mrf49xaModeRx
  7495  04EB                     i1_Mrf49xaModeRx:	
  7496  04EB  3094               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  7497                           
  7498                           ;mrf49xa.c: 79: UI08_t k;
  7499                           ;mrf49xa.c: 80: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  7500                           
  7501                           ;incstack = 0
  7502                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  7503  04EC  01F3               	clrf	i1Mrf49xaModeRx@k
  7504  04ED  3187               	movlp	high __stringtab
  7505  04EE  000A               	callw
  7506  04EF  3184               	pagesel	$	;select current page
  7507  04F0  3800               	iorlw	0
  7508  04F1  1903               	btfsc	3,2
  7509  04F2  2D0F               	goto	i1l2590
  7510  04F3                     i1l2582:	
  7511  04F3  3573               	lslf	i1Mrf49xaModeRx@k,w
  7512  04F4  3EB6               	addlw	low (_mrfRegset_Rx| (0+32768))
  7513  04F5  3187               	movlp	high __stringtab
  7514  04F6  000A               	callw
  7515  04F7  3184               	pagesel	$	;select current page
  7516  04F8  3A55               	xorlw	85
  7517  04F9  1903               	skipnz
  7518  04FA  2D07               	goto	i1l2586
  7519  04FB  3573               	lslf	i1Mrf49xaModeRx@k,w
  7520  04FC  3EB7               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  7521  04FD  3187               	movlp	high __stringtab
  7522  04FE  000A               	callw
  7523  04FF  00F1               	movwf	i1Mrf49TxCmd@val
  7524  0500  3573               	lslf	i1Mrf49xaModeRx@k,w
  7525  0501  3EB6               	addlw	low (_mrfRegset_Rx| (0+32768))
  7526  0502  3187               	movlp	high __stringtab
  7527  0503  000A               	callw
  7528  0504  3184               	pagesel	$	;select current page
  7529  0505  3185  2513         	fcall	i1_Mrf49TxCmd
  7530  0507                     i1l2586:	
  7531  0507  3094               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  7532  0508  0AF3               	incf	i1Mrf49xaModeRx@k,f
  7533  0509  3187               	movlp	high __stringtab
  7534  050A  000A               	callw
  7535  050B  3184               	pagesel	$	;select current page
  7536  050C  0273               	subwf	i1Mrf49xaModeRx@k,w
  7537  050D  1C03               	skipc
  7538  050E  2CF3               	goto	i1l2582
  7539  050F                     i1l2590:	
  7540                           
  7541                           ;mrf49xa.c: 83: rfTrcvStatus.state = RECV_IDLE;
  7542  050F  0021               	movlb	1	; select bank1
  7543  0510  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7544                           
  7545                           ;mrf49xa.c: 84: rfTrcvStatus.hwByte = 0;
  7546  0511  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7547  0512  0008               	return
  7548  0513                     __end_ofi1_Mrf49xaModeRx:	
  7549  0513                     __ptext40:	
  7550 ;; *************** function i1_Mrf49TxCmd *****************
  7551 ;; Defined at:
  7552 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  cmd             1    wreg     unsigned char 
  7555 ;;  val             1    1[COMMON] unsigned char 
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;  cmd             1    2[COMMON] unsigned char 
  7558 ;; Return value:  Size  Location     Type
  7559 ;;		None               void
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0, pclath, cstack
  7562 ;; Tracked objects:
  7563 ;;		On entry : 1E/0
  7564 ;;		On exit  : 1F/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7567 ;;      Params:         1       0       0       0
  7568 ;;      Locals:         1       0       0       0
  7569 ;;      Temps:          0       0       0       0
  7570 ;;      Totals:         2       0       0       0
  7571 ;;Total ram usage:        2 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    1
  7574 ;; This function calls:
  7575 ;;		i1_Mrf49SpiTx
  7576 ;; This function is called by:
  7577 ;;		i1_Mrf49xaModeRx
  7578 ;;		i1_Mrf49TxByte
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function i1_Mrf49TxCmd
  7584  0513                     i1_Mrf49TxCmd:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  7588                           ;i1Mrf49TxCmd@cmd stored from wreg
  7589  0513  00F2               	movwf	i1Mrf49TxCmd@cmd
  7590                           
  7591                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  7592  0514  0020               	movlb	0	; select bank0
  7593  0515  130E               	bcf	14,6	;volatile
  7594                           
  7595                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  7596  0516  0872               	movf	i1Mrf49TxCmd@cmd,w
  7597  0517  251D  3184         	fcall	i1_Mrf49SpiTx
  7598                           
  7599                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  7600  0519  0871               	movf	i1Mrf49TxCmd@val,w
  7601  051A  251D               	fcall	i1_Mrf49SpiTx
  7602                           
  7603                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  7604  051B  170E               	bsf	14,6	;volatile
  7605  051C  0008               	return
  7606  051D                     __end_ofi1_Mrf49TxCmd:	
  7607  051D                     __ptext44:	
  7608 ;; *************** function i1_Mrf49SpiTx *****************
  7609 ;; Defined at:
  7610 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;  byte            1    wreg     unsigned char 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  byte            1    0[COMMON] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;		None               void
  7617 ;; Registers used:
  7618 ;;		wreg
  7619 ;; Tracked objects:
  7620 ;;		On entry : 1F/0
  7621 ;;		On exit  : 1F/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7624 ;;      Params:         0       0       0       0
  7625 ;;      Locals:         1       0       0       0
  7626 ;;      Temps:          0       0       0       0
  7627 ;;      Totals:         1       0       0       0
  7628 ;;Total ram usage:        1 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		i1_Mrf49TxCmd
  7634 ;;		i1_Mrf49RxCmd
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function i1_Mrf49SpiTx
  7640  051D                     i1_Mrf49SpiTx:	
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  7644                           ;i1Mrf49SpiTx@byte stored from wreg
  7645  051D  00F0               	movwf	i1Mrf49SpiTx@byte
  7646                           
  7647                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7648  051E  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  7649  051F  2D22               	goto	i1l213
  7650  0520  178D               	bsf	13,7	;volatile
  7651  0521  2D23               	goto	i1l214
  7652  0522                     i1l213:	
  7653  0522  138D               	bcf	13,7	;volatile
  7654  0523                     i1l214:	
  7655  0523  0022               	movlb	2	; select bank2
  7656  0524  178E               	bsf	14,7	;volatile
  7657  0525  0000               	nop	;# 
  7658  0526  0022               	movlb	2	; select bank2
  7659  0527  138E               	bcf	14,7	;volatile
  7660  0528  1F70               	btfss	i1Mrf49SpiTx@byte,6
  7661  0529  2D2D               	goto	i1l217
  7662  052A  0020               	movlb	0	; select bank0
  7663  052B  178D               	bsf	13,7	;volatile
  7664  052C  2D2F               	goto	i1l218
  7665  052D                     i1l217:	
  7666  052D  0020               	movlb	0	; select bank0
  7667  052E  138D               	bcf	13,7	;volatile
  7668  052F                     i1l218:	
  7669  052F  0022               	movlb	2	; select bank2
  7670  0530  178E               	bsf	14,7	;volatile
  7671  0531  0000               	nop	;# 
  7672  0532  0022               	movlb	2	; select bank2
  7673  0533  138E               	bcf	14,7	;volatile
  7674  0534  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  7675  0535  2D39               	goto	i1l221
  7676  0536  0020               	movlb	0	; select bank0
  7677  0537  178D               	bsf	13,7	;volatile
  7678  0538  2D3B               	goto	i1l222
  7679  0539                     i1l221:	
  7680  0539  0020               	movlb	0	; select bank0
  7681  053A  138D               	bcf	13,7	;volatile
  7682  053B                     i1l222:	
  7683  053B  0022               	movlb	2	; select bank2
  7684  053C  178E               	bsf	14,7	;volatile
  7685  053D  0000               	nop	;# 
  7686  053E  0022               	movlb	2	; select bank2
  7687  053F  138E               	bcf	14,7	;volatile
  7688  0540  1E70               	btfss	i1Mrf49SpiTx@byte,4
  7689  0541  2D45               	goto	i1l225
  7690  0542  0020               	movlb	0	; select bank0
  7691  0543  178D               	bsf	13,7	;volatile
  7692  0544  2D47               	goto	i1l226
  7693  0545                     i1l225:	
  7694  0545  0020               	movlb	0	; select bank0
  7695  0546  138D               	bcf	13,7	;volatile
  7696  0547                     i1l226:	
  7697  0547  0022               	movlb	2	; select bank2
  7698  0548  178E               	bsf	14,7	;volatile
  7699  0549  0000               	nop	;# 
  7700  054A  0022               	movlb	2	; select bank2
  7701  054B  138E               	bcf	14,7	;volatile
  7702  054C  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  7703  054D  2D51               	goto	i1l229
  7704  054E  0020               	movlb	0	; select bank0
  7705  054F  178D               	bsf	13,7	;volatile
  7706  0550  2D53               	goto	i1l230
  7707  0551                     i1l229:	
  7708  0551  0020               	movlb	0	; select bank0
  7709  0552  138D               	bcf	13,7	;volatile
  7710  0553                     i1l230:	
  7711  0553  0022               	movlb	2	; select bank2
  7712  0554  178E               	bsf	14,7	;volatile
  7713  0555  0000               	nop	;# 
  7714  0556  0022               	movlb	2	; select bank2
  7715  0557  138E               	bcf	14,7	;volatile
  7716  0558  1D70               	btfss	i1Mrf49SpiTx@byte,2
  7717  0559  2D5D               	goto	i1l233
  7718  055A  0020               	movlb	0	; select bank0
  7719  055B  178D               	bsf	13,7	;volatile
  7720  055C  2D5F               	goto	i1l234
  7721  055D                     i1l233:	
  7722  055D  0020               	movlb	0	; select bank0
  7723  055E  138D               	bcf	13,7	;volatile
  7724  055F                     i1l234:	
  7725  055F  0022               	movlb	2	; select bank2
  7726  0560  178E               	bsf	14,7	;volatile
  7727  0561  0000               	nop	;# 
  7728  0562  0022               	movlb	2	; select bank2
  7729  0563  138E               	bcf	14,7	;volatile
  7730  0564  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  7731  0565  2D69               	goto	i1l237
  7732  0566  0020               	movlb	0	; select bank0
  7733  0567  178D               	bsf	13,7	;volatile
  7734  0568  2D6B               	goto	i1l238
  7735  0569                     i1l237:	
  7736  0569  0020               	movlb	0	; select bank0
  7737  056A  138D               	bcf	13,7	;volatile
  7738  056B                     i1l238:	
  7739  056B  0022               	movlb	2	; select bank2
  7740  056C  178E               	bsf	14,7	;volatile
  7741  056D  0000               	nop	;# 
  7742  056E  0022               	movlb	2	; select bank2
  7743  056F  138E               	bcf	14,7	;volatile
  7744  0570  1C70               	btfss	i1Mrf49SpiTx@byte,0
  7745  0571  2D75               	goto	i1l241
  7746  0572  0020               	movlb	0	; select bank0
  7747  0573  178D               	bsf	13,7	;volatile
  7748  0574  2D77               	goto	i1l242
  7749  0575                     i1l241:	
  7750  0575  0020               	movlb	0	; select bank0
  7751  0576  138D               	bcf	13,7	;volatile
  7752  0577                     i1l242:	
  7753  0577  0022               	movlb	2	; select bank2
  7754  0578  178E               	bsf	14,7	;volatile
  7755  0579  0000               	nop	;# 
  7756  057A  0022               	movlb	2	; select bank2
  7757  057B  138E               	bcf	14,7	;volatile
  7758                           
  7759                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7760  057C  0020               	movlb	0	; select bank0
  7761  057D  138D               	bcf	13,7	;volatile
  7762  057E  0008               	return
  7763  057F                     __end_ofi1_Mrf49SpiTx:	
  7764  057F                     __ptext41:	
  7765 ;; *************** function i1_Mrf49RxSts *****************
  7766 ;; Defined at:
  7767 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;		None
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;		None               void
  7774 ;; Registers used:
  7775 ;;		wreg, status,2, pclath, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 1F/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7781 ;;      Params:         0       0       0       0
  7782 ;;      Locals:         0       0       0       0
  7783 ;;      Temps:          0       0       0       0
  7784 ;;      Totals:         0       0       0       0
  7785 ;;Total ram usage:        0 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    1
  7788 ;; This function calls:
  7789 ;;		i1_Mrf49SpiRx
  7790 ;; This function is called by:
  7791 ;;		i1_Mrf49xaServe
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           
  7796                           ;psect for function i1_Mrf49RxSts
  7797  057F                     i1_Mrf49RxSts:	
  7798                           
  7799                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7800                           
  7801                           ;incstack = 0
  7802                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7803  057F  120B               	bcf	11,4	;volatile
  7804                           
  7805                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  7806  0580  0020               	movlb	0	; select bank0
  7807  0581  130E               	bcf	14,6	;volatile
  7808                           
  7809                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7810  0582  258C  3184         	fcall	i1_Mrf49SpiRx
  7811  0584  0020               	movlb	0	; select bank0
  7812  0585  00BA               	movwf	_mrf49Status
  7813                           
  7814                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7815  0586  258C               	fcall	i1_Mrf49SpiRx
  7816  0587  0020               	movlb	0	; select bank0
  7817  0588  00BB               	movwf	_mrf49Status+1
  7818                           
  7819                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  7820  0589  170E               	bsf	14,6	;volatile
  7821                           
  7822                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7823  058A  160B               	bsf	11,4	;volatile
  7824  058B  0008               	return
  7825  058C                     __end_ofi1_Mrf49RxSts:	
  7826  058C                     __ptext45:	
  7827 ;; *************** function i1_Mrf49SpiRx *****************
  7828 ;; Defined at:
  7829 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;		None
  7832 ;; Auto vars:     Size  Location     Type
  7833 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  1    wreg      unsigned char 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2
  7838 ;; Tracked objects:
  7839 ;;		On entry : 1F/0
  7840 ;;		On exit  : 1F/2
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7843 ;;      Params:         0       0       0       0
  7844 ;;      Locals:         1       0       0       0
  7845 ;;      Temps:          0       0       0       0
  7846 ;;      Totals:         1       0       0       0
  7847 ;;Total ram usage:        1 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; This function calls:
  7850 ;;		Nothing
  7851 ;; This function is called by:
  7852 ;;		i1_Mrf49RxCmd
  7853 ;;		i1_Mrf49RxSts
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function i1_Mrf49SpiRx
  7859  058C                     i1_Mrf49SpiRx:	
  7860                           
  7861                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7862                           
  7863                           ;incstack = 0
  7864                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  7865  058C  01F0               	clrf	i1Mrf49SpiRx@data
  7866                           
  7867                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7868  058D  138D               	bcf	13,7	;volatile
  7869  058E  1A8E               	btfsc	14,5	;volatile
  7870  058F  17F0               	bsf	i1Mrf49SpiRx@data,7
  7871  0590  0022               	movlb	2	; select bank2
  7872  0591  178E               	bsf	14,7	;volatile
  7873  0592  0000               	nop	;# 
  7874  0593  0022               	movlb	2	; select bank2
  7875  0594  138E               	bcf	14,7	;volatile
  7876                           
  7877                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7878  0595  0020               	movlb	0	; select bank0
  7879  0596  1A8E               	btfsc	14,5	;volatile
  7880  0597  1770               	bsf	i1Mrf49SpiRx@data,6
  7881  0598  0022               	movlb	2	; select bank2
  7882  0599  178E               	bsf	14,7	;volatile
  7883  059A  0000               	nop	;# 
  7884  059B  0022               	movlb	2	; select bank2
  7885  059C  138E               	bcf	14,7	;volatile
  7886                           
  7887                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7888  059D  0020               	movlb	0	; select bank0
  7889  059E  1A8E               	btfsc	14,5	;volatile
  7890  059F  16F0               	bsf	i1Mrf49SpiRx@data,5
  7891  05A0  0022               	movlb	2	; select bank2
  7892  05A1  178E               	bsf	14,7	;volatile
  7893  05A2  0000               	nop	;# 
  7894  05A3  0022               	movlb	2	; select bank2
  7895  05A4  138E               	bcf	14,7	;volatile
  7896                           
  7897                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7898  05A5  0020               	movlb	0	; select bank0
  7899  05A6  1A8E               	btfsc	14,5	;volatile
  7900  05A7  1670               	bsf	i1Mrf49SpiRx@data,4
  7901  05A8  0022               	movlb	2	; select bank2
  7902  05A9  178E               	bsf	14,7	;volatile
  7903  05AA  0000               	nop	;# 
  7904  05AB  0022               	movlb	2	; select bank2
  7905  05AC  138E               	bcf	14,7	;volatile
  7906                           
  7907                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7908  05AD  0020               	movlb	0	; select bank0
  7909  05AE  1A8E               	btfsc	14,5	;volatile
  7910  05AF  15F0               	bsf	i1Mrf49SpiRx@data,3
  7911  05B0  0022               	movlb	2	; select bank2
  7912  05B1  178E               	bsf	14,7	;volatile
  7913  05B2  0000               	nop	;# 
  7914  05B3  0022               	movlb	2	; select bank2
  7915  05B4  138E               	bcf	14,7	;volatile
  7916                           
  7917                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7918  05B5  0020               	movlb	0	; select bank0
  7919  05B6  1A8E               	btfsc	14,5	;volatile
  7920  05B7  1570               	bsf	i1Mrf49SpiRx@data,2
  7921  05B8  0022               	movlb	2	; select bank2
  7922  05B9  178E               	bsf	14,7	;volatile
  7923  05BA  0000               	nop	;# 
  7924  05BB  0022               	movlb	2	; select bank2
  7925  05BC  138E               	bcf	14,7	;volatile
  7926                           
  7927                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7928  05BD  0020               	movlb	0	; select bank0
  7929  05BE  1A8E               	btfsc	14,5	;volatile
  7930  05BF  14F0               	bsf	i1Mrf49SpiRx@data,1
  7931  05C0  0022               	movlb	2	; select bank2
  7932  05C1  178E               	bsf	14,7	;volatile
  7933  05C2  0000               	nop	;# 
  7934  05C3  0022               	movlb	2	; select bank2
  7935  05C4  138E               	bcf	14,7	;volatile
  7936                           
  7937                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7938  05C5  0020               	movlb	0	; select bank0
  7939  05C6  1A8E               	btfsc	14,5	;volatile
  7940  05C7  1470               	bsf	i1Mrf49SpiRx@data,0
  7941  05C8  0022               	movlb	2	; select bank2
  7942  05C9  178E               	bsf	14,7	;volatile
  7943  05CA  0000               	nop	;# 
  7944  05CB  0022               	movlb	2	; select bank2
  7945  05CC  138E               	bcf	14,7	;volatile
  7946                           
  7947                           ;mrf49xa_spi_pic16.c: 40: return data;
  7948  05CD  0870               	movf	i1Mrf49SpiRx@data,w
  7949  05CE  0008               	return
  7950  05CF                     __end_ofi1_Mrf49SpiRx:	
  7951  007E                     btemp	set	126	;btemp
  7952  007E                     wtemp	set	126
  7953  007E                     wtemp0	set	126
  7954  0080                     wtemp1	set	128
  7955  0082                     wtemp2	set	130
  7956  0084                     wtemp3	set	132
  7957  0086                     wtemp4	set	134
  7958  0088                     wtemp5	set	136
  7959  007F                     wtemp6	set	127
  7960  007E                     ttemp	set	126
  7961  007E                     ttemp0	set	126
  7962  0081                     ttemp1	set	129
  7963  0084                     ttemp2	set	132
  7964  0087                     ttemp3	set	135
  7965  007F                     ttemp4	set	127
  7966  007E                     ltemp	set	126
  7967  007E                     ltemp0	set	126
  7968  0082                     ltemp1	set	130
  7969  0086                     ltemp2	set	134
  7970  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     26      28
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwWrite@packetData	PTR unsigned int  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), NULL(NULL[0]), 

    handleFwWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), eepromTxByte@byte(COMMON[1]), 
		 -> NULL(NULL[0]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwRead@packet..(COMMON[21]), handleFwWrite@packet..(COMMON[21]), 
		 -> handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), NULL(NULL[0]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    S328rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _SoftI2cInit->_SoftI2cTxByte
    _RfSendPowerState->_Mrf49xaTxPacket
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _HandlePacket->_handleFwWrite
    _handleFwWrite->_eepromRxBytes
    _handleFwWrite->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _handleFwRead->_eepromRxBytes
    _handleFwCmd->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14954
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                   _RfSendPowerState
                        _SoftI2cInit
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     1     1      0    1287
                                              6 BANK0      1     1      0
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   10251
                                             22 BANK0      4     4      0
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     764
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0    9227
                                             18 BANK0      4     4      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
                       _handleFwRead
                      _handleFwWrite
 ---------------------------------------------------------------------------------
 (3) _handleFwWrite                                       10    10      0    2718
                                              8 BANK0     10    10      0
                      _eepromRxBytes
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _handleFwRead                                         3     3      0    1767
                                              8 BANK0      3     3      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1809
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1619
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (2) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1344
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1154
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    3319
                                              6 BANK0      4     4      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0    1791
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     764
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     674
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     652
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               1     1      0    1031
                                              6 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1031
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     384
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49TxCmd
       _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _Mrf49xaTick
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwRead
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwWrite
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
         _eepromTxBytes
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
   _RfSendPowerState
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _SoftI2cInit
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      72       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1A      1C       6       35.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      72      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sun May 18 15:17:18 2014

           Mrf49xaTxPacket@crc 0023                              pc 0002                    __CFG_CP$OFF 0000  
                           PL2 076D                             PL4 03F9                             PL6 0788  
                           PL8 0407                             l32 0691                             l42 06E5  
                           l34 069D                             l35 069F                             l39 06C8  
                  __CFG_LVP$ON 0000          Mrf49xaTxPacket@packet 0025                            l221 0248  
                          l213 0232                            l230 025F                            l222 0249  
                          l214 0233                            l241 027F                            l233 0269  
                          l225 0253                            l217 023D                            l242 0280  
                          l234 026A                            l226 0254                            l218 023E  
                          l237 0274                            l229 025E                            l333 075B  
                          l238 0275                            l390 0134                            l391 014C  
                          l368 00C1                            l483 035E                            l499 0313  
                 __CFG_BORV$LO 0000                            wreg 0009               i1Mrf49xaModeRx@k 0073  
                 __CFG_IESO$ON 0000         ??_SoftI2cRepeatedStart 0077                           S2874 0800  
       Mrf49xaTxPacket@needAck 0021                           l2014 06E7                           l2108 0734  
                         l2124 0737                           l2134 0742                           l2302 0376  
                         l2154 0749                           l2170 0669                           l2180 068C  
                         l2262 0218                           l2422 017F                           l2414 0173  
                         l2166 0769                           l2190 065A                           l2334 0600  
                         l2432 0195                           l2192 0668                           l2512 03A4  
                         l2266 0220                           l2258 0204                           l2450 01BC  
                         l2442 01A9                           l2178 067B                           l2452 01C0  
                         l2444 01AD                           l2436 01A1                           l2380 0137  
                         l2540 02F4                           l2462 01D0                           l2454 01C4  
                         l2470 01E3                           l2630 010D                           l2294 035F  
                         l2550 0316                           l2542 02FA                           l2448 01B4  
                         l2392 0155                           l2472 01EF                           l2384 0140  
                         l2640 0124                           l2632 0119                           l2544 02FE  
                         l2528 03F3                           l2466 01D2                           l2394 0158  
                         l2626 00FB                           l1914 06F3                           l2570 0348  
                         l2554 031A                           l2490 07EE                           l2482 07D2  
                         l2650 004E                           l2388 0150                           l2636 0122  
                         l2564 0323                           l2660 0065                           l2398 015E  
                         l2574 034E                           l2558 031F                           l2566 033E  
                         l2486 07E6                           l2662 0067                           l2654 0058  
                         l2672 0084                           l2656 005C                           l2690 00A5  
                         l2676 0090                           l2852 0033                           l1958 0629  
              Mrf49TxByte@byte 0023                           l2688 00A4                           l2698 00AE  
                         u2137 008B                           u2147 00B3                           u2157 05EB  
                         u2167 06F6                           u2177 00DA                           u2187 00E9  
                         u2197 0107                   __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000  
                         _main 0022                __end_of_AdcInit 02E6                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 0014                           ttemp 007E  
                         wtemp 007E           __end_of_HandlePacket 0350        __end_ofi1_Mrf49xaModeRx 0513  
                __CFG_MCLRE$ON 0000            __end_of_Mrf49RxByte 01FB            __end_of_Mrf49TxByte 01F9  
              ??_eepromRxBytes 0077                ??_eepromTxBytes 0077               _RfSendPowerState 03AB  
          __end_of_Mrf49xaInit 012A            __end_of_Mrf49xaTick 00C6           _Mrf49xaPacketPending 0393  
                        ?_main 0070                  __CFG_WDTE$OFF 0000                          i1l131 0011  
                        i1l221 0539                          i1l213 0522                          i1l230 0553  
                        i1l222 053B                          i1l214 0523                          i1l241 0575  
                        i1l233 055D                          i1l225 0545                          i1l217 052D  
                        i1l242 0577                          i1l234 055F                          i1l226 0547  
                        i1l218 052F                          i1l237 0569                          i1l229 0551  
                        i1l238 056B                          i1l390 0423                          i1l391 043B  
                   _Mrf49RxCmd 00C6                     _Mrf49TxCmd 0224                     _Mrf49SpiRx 0293  
                   _Mrf49SpiTx 022D                     _Mrf49RxSts 0288     __end_of_Mrf49xaAllocPacket 03F9  
        __end_of_SoftI2cRxByte 06F3          __end_of_SoftI2cTxByte 06BB        Mrf49xaTxPacket@response 0020  
               __CFG_BOREN$OFF 0000                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __initialization 0016                     _ExtIntInit 02E6                   __end_of_main 0036  
         __end_of_handleFwRead 0393                 __CFG_LPBOR$OFF 0000          ?_Mrf49xaPacketPending 0070  
                       ??_main 0077           __size_of_handleFwCmd 0034           __end_of_Mrf49xaTxAck 0727  
         __end_of_Mrf49xaServe 01F4            HandlePacket@sendAck 0033                         _ADCON0 009D  
                       _ADCON1 009E                         _ADCON2 009F            HandlePacket@sendMsg 0034  
                    ??_AdcInit 0077                         _ANSELA 018C                         _ANSELB 018D  
                       _ANSELC 018E             i1Mrf49xaServe@data 0075                         i1l2800 0498  
                       i1l2810 04AF                         i1l2802 049C                         i1l2820 04BF  
                       i1l2812 04B3                         i1l2590 050F                         i1l2582 04F3  
                       i1l2806 04A3                         i1l2750 0444                         i1l2830 04DE  
                       i1l2742 042F                         i1l2808 04AB                         i1l2824 04C1  
                       i1l2752 0447                         i1l2586 0507                         i1l2746 043F  
                       i1l2738 0426                         i1l2780 046F                         i1l2772 0463  
                       i1l2756 044D                         i1l2828 04D2                         i1l2790 0486  
                       i1l2792 048E                         i1l2794 0490                         _FVRCON 0117  
                       _OSCCON 0099                    _Mrf49RxByte 01F9                    _Mrf49TxByte 01F4  
                ??_SoftI2cInit 0077                  ??_SoftI2cStop 0077                 __CFG_PWRTE$OFF 0000  
                   _SoftI2cNop 06F3               ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 00D0  
                  _Mrf49xaTick 0036                _Mrf49xaRxPacket 039D                 __CFG_STVREN$ON 0000  
              _Mrf49xaTxPacket 0727                         _extInt 0004                    ?_Mrf49RxCmd 0070  
                  ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070  
                  ?_Mrf49RxSts 0070          __size_of_HandlePacket 0060        __end_of__initialization 0020  
        __end_ofi1_Mrf49RxByte 04EB          __end_ofi1_Mrf49TxByte 04E8                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070               SoftI2cRxByte@ack 0021            __end_of_SoftI2cInit 05DA  
          __end_of_SoftI2cStop 0638         ??_Mrf49xaPacketPending 0077        __size_ofi1_Mrf49xaServe 00CA  
                   __end_ofPL2 0788                     __end_ofPL4 0407                     __end_ofPL6 0792  
                   __end_ofPL8 040D          __end_of_handleFwWrite 0629                 _OPTION_REGbits 0095  
                 _HandlePacket 02F0        Mrf49xaFreePacket@packet 0020       __end_of_RfSendPowerState 03CD  
                ??_SysInitGpio 0077                     __pbssBANK0 003A                     __pbssBANK1 00A0  
                ?_SoftI2cStart 0070        __end_of_Mrf49xaRxPacket 03AB        __end_of_Mrf49xaTxPacket 076D  
        __size_of_handleFwRead 000F          __end_of_Mrf49xaModeRx 0224          __end_of_Mrf49xaModeTx 07F4  
                  ?_SoftI2cNop 0070            __size_of_Mrf49RxCmd 000A            __size_of_Mrf49TxCmd 0009  
          __size_of_Mrf49SpiRx 0044            __size_of_Mrf49SpiTx 005B            __size_of_Mrf49RxSts 000B  
                   __pmaintext 0022                     __pintentry 0004                        ?_extInt 0070  
        __size_of_Mrf49xaTxAck 0020          __size_of_Mrf49xaServe 00CA              handleFwCmd@packet 0028  
                      _AdcInit 02D7            __size_of_ExtIntInit 0005  __size_of_SoftI2cRepeatedStart 0015  
                   __stringtab 0792                   _handleFwRead 0384                 ??_SoftI2cStart 0077  
           _Mrf49xaAllocPacket 03EC                    _SoftI2cInit 05CF                  ?i1_Mrf49RxCmd 0070  
                ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070  
                  _SoftI2cStop 0629                  ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 03EC  
                 _Mrf49xaTxAck 0707                   _Mrf49xaServe 012A           eepromRxBytes@address 0024  
          ?_Mrf49xaAllocPacket 0070          __end_of_eepromRxBytes 068D          __end_of_eepromTxBytes 0669  
              __size_of_extInt 0010              _mrfRegset_InitCnt 0793                        __ptext1 03CD  
                      __ptext2 05CF                        __ptext3 03AB                        __ptext4 03EC  
                      __ptext5 0036                        __ptext6 039D                        __ptext7 0393  
                      __ptext8 07CA                        __ptext9 02F0            handleFwWrite@packet 0031  
          __size_of_SoftI2cNop 0007           ??_Mrf49xaAllocPacket 0077                        clrloop0 07F5  
         end_of_initialization 0020                   ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070  
               ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070  
               ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070  
             ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 07C2  
         __end_of_mrfRegset_Tx 07CA                   ?_Mrf49xaTick 0070         __size_of_SoftI2cRxByte 0038  
       __size_of_SoftI2cTxByte 002E                 i1_Mrf49xaServe 0419      __end_of_mrfRegset_InitCnt 0794  
                ??_handleFwCmd 0077                      _PORTAbits 000C                      _PORTBbits 000D  
                    _PORTCbits 000E                   ??_Mrf49RxCmd 0077                   ??_Mrf49TxCmd 0077  
                 ??_Mrf49SpiRx 0077                   ??_Mrf49SpiTx 0077                   ??_Mrf49RxSts 0077  
             __CFG_FOSC$INTOSC 0000                      _TRISAbits 008C                      _TRISBbits 008D  
                    _TRISCbits 008E                    _SysInitGpio 03CD                 Mrf49SpiRx@data 0020  
               Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 00D0             __end_of_Mrf49TxCmd 022D  
       __end_ofi1_Mrf49xaServe 04E3                   ??_ExtIntInit 0077             __end_of_Mrf49SpiRx 02D7  
           __end_of_Mrf49SpiTx 0288             __end_of_Mrf49RxSts 0293              SoftI2cRxByte@data 0022  
            eepromRxBytes@data 0026           __end_of_SoftI2cStart 0707       __size_ofi1_Mrf49xaModeRx 0028  
               __end_of_extInt 0014              eepromRxBytes@size 0027            start_initialization 0016  
                _SoftI2cRxByte 06BB            __end_of_handleFwCmd 0384                  _SoftI2cTxByte 068D  
               handleFwWrite@i 002E             __end_of_ExtIntInit 02EB              SoftI2cTxByte@data 0022  
            ?_RfSendPowerState 0070             HandlePacket@packet 0035             ??_RfSendPowerState 0077  
                 ??_SoftI2cNop 0020                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0794  
              _mrfRegset_TxCnt 0795                       ??_extInt 0076  __size_of_Mrf49xaPacketPending 000A  
            eepromTxBytes@data 0026              eepromTxBytes@size 0027         __size_ofi1_Mrf49RxByte 0003  
       __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 0419           __end_ofi1_Mrf49TxCmd 051D  
         __end_ofi1_Mrf49SpiRx 05CF           __end_ofi1_Mrf49SpiTx 057F           __end_ofi1_Mrf49RxSts 058C  
                    ___latbits 0001                  __pcstackBANK0 0020                 ?_SoftI2cRxByte 0070  
               ?_SoftI2cTxByte 0070              i1Mrf49TxByte@byte 0073             __end_of_SoftI2cNop 06FA  
                     ?_AdcInit 0070                   _rfTrcvStatus 00A0                   ?_SoftI2cInit 0070  
                 ?_SoftI2cStop 0070         __size_of_handleFwWrite 004F           __size_of_Mrf49RxByte 0002  
         __size_of_Mrf49TxByte 0005   __end_of_SoftI2cRepeatedStart 064D           __size_of_Mrf49xaInit 005A  
         __size_of_Mrf49xaTick 0090                      __pstrings 0792                      __pswtext1 0800  
                  _handleFwCmd 0350         __size_of_Mrf49xaModeRx 0029         __size_of_Mrf49xaModeTx 002A  
                 _mrfRegset_Rx 07B6                   _mrfRegset_Tx 07C2              ??i1_Mrf49xaModeRx 0073  
                     _LATAbits 010C                       _LATBbits 010D                       _LATCbits 010E  
                i1_Mrf49RxByte 04E8        __end_of_mrfRegset_RxCnt 0795                  i1_Mrf49TxByte 04E3  
      __end_of_mrfRegset_TxCnt 0796                      clear_ram0 07F4                    _mrf49Status 003A  
            _Mrf49xaFreePacket 02EB                 Mrf49xaModeRx@k 0023                 Mrf49xaModeTx@k 0023  
        __size_of_SoftI2cStart 000D                  Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070  
                Mrf49RxCmd@val 0022                  Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021  
          ??_Mrf49xaFreePacket 0077                ??_SoftI2cRxByte 0077                  _handleFwWrite 05DA  
              ??_SoftI2cTxByte 0077                       _WPUAbits 020C    __size_of_Mrf49xaAllocPacket 000D  
             __size_of_AdcInit 000F                   ?_SysInitGpio 0070        handleFwWrite@packetData 002D  
       __size_of_eepromRxBytes 0024                 ?i1_Mrf49RxByte 0070         __size_of_eepromTxBytes 001C  
                 _SoftI2cStart 06FA                 ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 02F0  
                _Mrf49xaModeRx 01FB                  _Mrf49xaModeTx 07CA                 _mrfRegset_Init 0796  
     __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000C          __size_ofi1_Mrf49TxCmd 000A  
        __size_ofi1_Mrf49SpiRx 0043          __size_ofi1_Mrf49SpiTx 0062               i1Mrf49SpiRx@data 0070  
        __size_ofi1_Mrf49RxSts 000D       __size_of_Mrf49xaTxPacket 0046               i1Mrf49SpiTx@byte 0070  
               SoftI2cRxByte@i 0023             __end_of__stringtab 0793                 ?_handleFwWrite 0070  
               SoftI2cTxByte@i 0023                  ?_HandlePacket 0070           handleFwWrite@address 002F  
                     __ptext10 05DA                       __ptext11 064D                       __ptext20 06F3  
                     __ptext12 0384                       __ptext21 0707                       __ptext13 0350  
                     __ptext30 01F9                       __ptext22 0727                       __ptext14 0669  
                     __ptext31 00C6                       __ptext23 02EB                       __ptext15 068D  
                     __ptext40 0513                       __ptext32 022D                       __ptext24 00D0  
                     __ptext16 0629                       __ptext41 057F                       __ptext33 0293  
                     __ptext25 012A                       __ptext17 06FA                       __ptext42 04E8  
                     __ptext34 02E6                       __ptext26 01FB                       __ptext18 06BB  
                     __ptext43 040D                       __ptext35 02D7                       __ptext27 01F4  
                     __ptext19 0638                       __ptext44 051D                       __ptext28 0224  
                     __ptext45 058C                       __ptext37 0419                       __ptext29 0288  
                     __ptext38 04EB                       __ptext39 04E3           _SoftI2cRepeatedStart 0638  
             ??i1_Mrf49xaServe 0074                  __size_of_main 0014                   i1_Mrf49RxCmd 040D  
       __end_of_mrfRegset_Init 07B6             Mrf49xaTxAck@packet 0026                   i1_Mrf49TxCmd 0513  
                 i1_Mrf49SpiRx 058C                   i1_Mrf49SpiTx 051D                 ?_Mrf49xaModeRx 0070  
               ?_Mrf49xaModeTx 0070                   i1_Mrf49RxSts 057F           __size_of_SoftI2cInit 000B  
         __size_of_SoftI2cStop 000F      __size_of_RfSendPowerState 0022                  _eepromRxBytes 0669  
                _eepromTxBytes 064D                i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072  
               ??_HandlePacket 0077             Mrf49xaTick@timeout 0038                     _INTCONbits 000B  
              i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071          ?_SoftI2cRepeatedStart 0070  
                ?_handleFwRead 0070                ??i1_Mrf49RxByte 0073                       intlevel1 0000  
              ??i1_Mrf49TxByte 0073   __end_of_Mrf49xaPacketPending 039D              __CFG_CLKOUTEN$OFF 0000  
   __size_of_Mrf49xaFreePacket 0005         RfSendPowerState@packet 0026                  ?_Mrf49xaTxAck 0070  
                 Mrf49xaInit@k 0029             handleFwRead@packet 002A                  ?_Mrf49xaServe 0070  
            Mrf49xaTick@packet 0039                 ?_eepromRxBytes 0024           eepromTxBytes@address 0024  
              i1_Mrf49xaModeRx 04EB                 ?_eepromTxBytes 0024                ??_handleFwWrite 0028  
                 ?_handleFwCmd 0070              ??_Mrf49xaRxPacket 0077              ??_Mrf49xaTxPacket 0022  
               ??_handleFwRead 0077                  ??_Mrf49RxByte 0077                  ??_Mrf49TxByte 0077  
              ??_Mrf49xaModeRx 0077                ??_Mrf49xaModeTx 0077           __size_of_SysInitGpio 001F  
               ??_Mrf49xaTxAck 0077               Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024  
                ??_Mrf49xaInit 0026                  ??_Mrf49xaTick 0036               Mrf49xaTxPacket@i 0024  

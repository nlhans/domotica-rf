

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Fri Apr 18 11:25:22 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	swtext1,local,class=CONST,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	swtext2,local,class=CONST,delta=2
    14                           	psect	text26,local,class=CODE,merge=1,delta=2
    15                           	psect	pa_nodes,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  008C                     	;# 
    45  008D                     	;# 
    46  008E                     	;# 
    47  0091                     	;# 
    48  0092                     	;# 
    49  0093                     	;# 
    50  0095                     	;# 
    51  0096                     	;# 
    52  0097                     	;# 
    53  0099                     	;# 
    54  009A                     	;# 
    55  009B                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009E                     	;# 
    60  009F                     	;# 
    61  010C                     	;# 
    62  010D                     	;# 
    63  010E                     	;# 
    64  0111                     	;# 
    65  0112                     	;# 
    66  0113                     	;# 
    67  0114                     	;# 
    68  0115                     	;# 
    69  0116                     	;# 
    70  0117                     	;# 
    71  0118                     	;# 
    72  0119                     	;# 
    73  011D                     	;# 
    74  018C                     	;# 
    75  018D                     	;# 
    76  018E                     	;# 
    77  0191                     	;# 
    78  0191                     	;# 
    79  0192                     	;# 
    80  0193                     	;# 
    81  0193                     	;# 
    82  0194                     	;# 
    83  0195                     	;# 
    84  0196                     	;# 
    85  0199                     	;# 
    86  019A                     	;# 
    87  019B                     	;# 
    88  019B                     	;# 
    89  019C                     	;# 
    90  019D                     	;# 
    91  019E                     	;# 
    92  019F                     	;# 
    93  020C                     	;# 
    94  020D                     	;# 
    95  0211                     	;# 
    96  0211                     	;# 
    97  0212                     	;# 
    98  0212                     	;# 
    99  0213                     	;# 
   100  0213                     	;# 
   101  0214                     	;# 
   102  0214                     	;# 
   103  0215                     	;# 
   104  0215                     	;# 
   105  0215                     	;# 
   106  0216                     	;# 
   107  0216                     	;# 
   108  0217                     	;# 
   109  0217                     	;# 
   110  0391                     	;# 
   111  0392                     	;# 
   112  0393                     	;# 
   113  0394                     	;# 
   114  0395                     	;# 
   115  0396                     	;# 
   116  0498                     	;# 
   117  0498                     	;# 
   118  0499                     	;# 
   119  049A                     	;# 
   120  049B                     	;# 
   121  049B                     	;# 
   122  049C                     	;# 
   123  049E                     	;# 
   124  049F                     	;# 
   125  0611                     	;# 
   126  0612                     	;# 
   127  0613                     	;# 
   128  0613                     	;# 
   129  0614                     	;# 
   130  0615                     	;# 
   131  0616                     	;# 
   132  0616                     	;# 
   133  0617                     	;# 
   134  0618                     	;# 
   135  0619                     	;# 
   136  0619                     	;# 
   137  061A                     	;# 
   138  061B                     	;# 
   139  061C                     	;# 
   140  061C                     	;# 
   141  0691                     	;# 
   142  0692                     	;# 
   143  0693                     	;# 
   144  0694                     	;# 
   145  0695                     	;# 
   146  0F0F                     	;# 
   147  0F10                     	;# 
   148  0F11                     	;# 
   149  0F12                     	;# 
   150  0F13                     	;# 
   151  0F14                     	;# 
   152  0F15                     	;# 
   153  0F16                     	;# 
   154  0F17                     	;# 
   155  0F18                     	;# 
   156  0F19                     	;# 
   157  0F1A                     	;# 
   158  0F1B                     	;# 
   159  0F1C                     	;# 
   160  0F1D                     	;# 
   161  0F1E                     	;# 
   162  0F1F                     	;# 
   163  0F20                     	;# 
   164  0F21                     	;# 
   165  0F22                     	;# 
   166  0F23                     	;# 
   167  0F24                     	;# 
   168  0F25                     	;# 
   169  0F26                     	;# 
   170  0F27                     	;# 
   171  0F28                     	;# 
   172  0F29                     	;# 
   173  0F2A                     	;# 
   174  0F2B                     	;# 
   175  0F2C                     	;# 
   176  0F2D                     	;# 
   177  0F2E                     	;# 
   178  0F2F                     	;# 
   179  0F8C                     	;# 
   180  0F8D                     	;# 
   181  0F91                     	;# 
   182  0F95                     	;# 
   183  0F96                     	;# 
   184  0F97                     	;# 
   185  0F9C                     	;# 
   186  0F9D                     	;# 
   187  0F9E                     	;# 
   188  0FE3                     	;# 
   189  0FE4                     	;# 
   190  0FE5                     	;# 
   191  0FE6                     	;# 
   192  0FE7                     	;# 
   193  0FE8                     	;# 
   194  0FE9                     	;# 
   195  0FEA                     	;# 
   196  0FEB                     	;# 
   197  0FED                     	;# 
   198  0FEE                     	;# 
   199  0FEF                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0013                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  008E                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0099                     	;# 
   237  009A                     	;# 
   238  009B                     	;# 
   239  009B                     	;# 
   240  009C                     	;# 
   241  009D                     	;# 
   242  009E                     	;# 
   243  009F                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  010E                     	;# 
   247  0111                     	;# 
   248  0112                     	;# 
   249  0113                     	;# 
   250  0114                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  0199                     	;# 
   269  019A                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020C                     	;# 
   277  020D                     	;# 
   278  0211                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0212                     	;# 
   282  0213                     	;# 
   283  0213                     	;# 
   284  0214                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0216                     	;# 
   291  0217                     	;# 
   292  0217                     	;# 
   293  0391                     	;# 
   294  0392                     	;# 
   295  0393                     	;# 
   296  0394                     	;# 
   297  0395                     	;# 
   298  0396                     	;# 
   299  0498                     	;# 
   300  0498                     	;# 
   301  0499                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049B                     	;# 
   305  049C                     	;# 
   306  049E                     	;# 
   307  049F                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0613                     	;# 
   312  0614                     	;# 
   313  0615                     	;# 
   314  0616                     	;# 
   315  0616                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  0619                     	;# 
   320  061A                     	;# 
   321  061B                     	;# 
   322  061C                     	;# 
   323  061C                     	;# 
   324  0691                     	;# 
   325  0692                     	;# 
   326  0693                     	;# 
   327  0694                     	;# 
   328  0695                     	;# 
   329  0F0F                     	;# 
   330  0F10                     	;# 
   331  0F11                     	;# 
   332  0F12                     	;# 
   333  0F13                     	;# 
   334  0F14                     	;# 
   335  0F15                     	;# 
   336  0F16                     	;# 
   337  0F17                     	;# 
   338  0F18                     	;# 
   339  0F19                     	;# 
   340  0F1A                     	;# 
   341  0F1B                     	;# 
   342  0F1C                     	;# 
   343  0F1D                     	;# 
   344  0F1E                     	;# 
   345  0F1F                     	;# 
   346  0F20                     	;# 
   347  0F21                     	;# 
   348  0F22                     	;# 
   349  0F23                     	;# 
   350  0F24                     	;# 
   351  0F25                     	;# 
   352  0F26                     	;# 
   353  0F27                     	;# 
   354  0F28                     	;# 
   355  0F29                     	;# 
   356  0F2A                     	;# 
   357  0F2B                     	;# 
   358  0F2C                     	;# 
   359  0F2D                     	;# 
   360  0F2E                     	;# 
   361  0F2F                     	;# 
   362  0F8C                     	;# 
   363  0F8D                     	;# 
   364  0F91                     	;# 
   365  0F95                     	;# 
   366  0F96                     	;# 
   367  0F97                     	;# 
   368  0F9C                     	;# 
   369  0F9D                     	;# 
   370  0F9E                     	;# 
   371  0FE3                     	;# 
   372  0FE4                     	;# 
   373  0FE5                     	;# 
   374  0FE6                     	;# 
   375  0FE7                     	;# 
   376  0FE8                     	;# 
   377  0FE9                     	;# 
   378  0FEA                     	;# 
   379  0FEB                     	;# 
   380  0FED                     	;# 
   381  0FEE                     	;# 
   382  0FEF                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  008C                     	;# 
   411  008D                     	;# 
   412  008E                     	;# 
   413  0091                     	;# 
   414  0092                     	;# 
   415  0093                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  0111                     	;# 
   431  0112                     	;# 
   432  0113                     	;# 
   433  0114                     	;# 
   434  0115                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  0118                     	;# 
   438  0119                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018E                     	;# 
   443  0191                     	;# 
   444  0191                     	;# 
   445  0192                     	;# 
   446  0193                     	;# 
   447  0193                     	;# 
   448  0194                     	;# 
   449  0195                     	;# 
   450  0196                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0391                     	;# 
   477  0392                     	;# 
   478  0393                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  0498                     	;# 
   483  0498                     	;# 
   484  0499                     	;# 
   485  049A                     	;# 
   486  049B                     	;# 
   487  049B                     	;# 
   488  049C                     	;# 
   489  049E                     	;# 
   490  049F                     	;# 
   491  0611                     	;# 
   492  0612                     	;# 
   493  0613                     	;# 
   494  0613                     	;# 
   495  0614                     	;# 
   496  0615                     	;# 
   497  0616                     	;# 
   498  0616                     	;# 
   499  0617                     	;# 
   500  0618                     	;# 
   501  0619                     	;# 
   502  0619                     	;# 
   503  061A                     	;# 
   504  061B                     	;# 
   505  061C                     	;# 
   506  061C                     	;# 
   507  0691                     	;# 
   508  0692                     	;# 
   509  0693                     	;# 
   510  0694                     	;# 
   511  0695                     	;# 
   512  0F0F                     	;# 
   513  0F10                     	;# 
   514  0F11                     	;# 
   515  0F12                     	;# 
   516  0F13                     	;# 
   517  0F14                     	;# 
   518  0F15                     	;# 
   519  0F16                     	;# 
   520  0F17                     	;# 
   521  0F18                     	;# 
   522  0F19                     	;# 
   523  0F1A                     	;# 
   524  0F1B                     	;# 
   525  0F1C                     	;# 
   526  0F1D                     	;# 
   527  0F1E                     	;# 
   528  0F1F                     	;# 
   529  0F20                     	;# 
   530  0F21                     	;# 
   531  0F22                     	;# 
   532  0F23                     	;# 
   533  0F24                     	;# 
   534  0F25                     	;# 
   535  0F26                     	;# 
   536  0F27                     	;# 
   537  0F28                     	;# 
   538  0F29                     	;# 
   539  0F2A                     	;# 
   540  0F2B                     	;# 
   541  0F2C                     	;# 
   542  0F2D                     	;# 
   543  0F2E                     	;# 
   544  0F2F                     	;# 
   545  0F8C                     	;# 
   546  0F8D                     	;# 
   547  0F91                     	;# 
   548  0F95                     	;# 
   549  0F96                     	;# 
   550  0F97                     	;# 
   551  0F9C                     	;# 
   552  0F9D                     	;# 
   553  0F9E                     	;# 
   554  0FE3                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000D                     	;# 
   580  000E                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  0091                     	;# 
   597  0092                     	;# 
   598  0093                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  009F                     	;# 
   610  010C                     	;# 
   611  010D                     	;# 
   612  010E                     	;# 
   613  0111                     	;# 
   614  0112                     	;# 
   615  0113                     	;# 
   616  0114                     	;# 
   617  0115                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  0118                     	;# 
   621  0119                     	;# 
   622  011D                     	;# 
   623  018C                     	;# 
   624  018D                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0199                     	;# 
   635  019A                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020D                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0391                     	;# 
   660  0392                     	;# 
   661  0393                     	;# 
   662  0394                     	;# 
   663  0395                     	;# 
   664  0396                     	;# 
   665  0498                     	;# 
   666  0498                     	;# 
   667  0499                     	;# 
   668  049A                     	;# 
   669  049B                     	;# 
   670  049B                     	;# 
   671  049C                     	;# 
   672  049E                     	;# 
   673  049F                     	;# 
   674  0611                     	;# 
   675  0612                     	;# 
   676  0613                     	;# 
   677  0613                     	;# 
   678  0614                     	;# 
   679  0615                     	;# 
   680  0616                     	;# 
   681  0616                     	;# 
   682  0617                     	;# 
   683  0618                     	;# 
   684  0619                     	;# 
   685  0619                     	;# 
   686  061A                     	;# 
   687  061B                     	;# 
   688  061C                     	;# 
   689  061C                     	;# 
   690  0691                     	;# 
   691  0692                     	;# 
   692  0693                     	;# 
   693  0694                     	;# 
   694  0695                     	;# 
   695  0F0F                     	;# 
   696  0F10                     	;# 
   697  0F11                     	;# 
   698  0F12                     	;# 
   699  0F13                     	;# 
   700  0F14                     	;# 
   701  0F15                     	;# 
   702  0F16                     	;# 
   703  0F17                     	;# 
   704  0F18                     	;# 
   705  0F19                     	;# 
   706  0F1A                     	;# 
   707  0F1B                     	;# 
   708  0F1C                     	;# 
   709  0F1D                     	;# 
   710  0F1E                     	;# 
   711  0F1F                     	;# 
   712  0F20                     	;# 
   713  0F21                     	;# 
   714  0F22                     	;# 
   715  0F23                     	;# 
   716  0F24                     	;# 
   717  0F25                     	;# 
   718  0F26                     	;# 
   719  0F27                     	;# 
   720  0F28                     	;# 
   721  0F29                     	;# 
   722  0F2A                     	;# 
   723  0F2B                     	;# 
   724  0F2C                     	;# 
   725  0F2D                     	;# 
   726  0F2E                     	;# 
   727  0F2F                     	;# 
   728  0F8C                     	;# 
   729  0F8D                     	;# 
   730  0F91                     	;# 
   731  0F95                     	;# 
   732  0F96                     	;# 
   733  0F97                     	;# 
   734  0F9C                     	;# 
   735  0F9D                     	;# 
   736  0F9E                     	;# 
   737  0FE3                     	;# 
   738  0FE4                     	;# 
   739  0FE5                     	;# 
   740  0FE6                     	;# 
   741  0FE7                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEB                     	;# 
   746  0FED                     	;# 
   747  0FEE                     	;# 
   748  0FEF                     	;# 
   749  0000                     	;# 
   750  0001                     	;# 
   751  0002                     	;# 
   752  0003                     	;# 
   753  0004                     	;# 
   754  0005                     	;# 
   755  0006                     	;# 
   756  0007                     	;# 
   757  0008                     	;# 
   758  0009                     	;# 
   759  000A                     	;# 
   760  000B                     	;# 
   761  000C                     	;# 
   762  000D                     	;# 
   763  000E                     	;# 
   764  0011                     	;# 
   765  0012                     	;# 
   766  0013                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0016                     	;# 
   770  0017                     	;# 
   771  0018                     	;# 
   772  0019                     	;# 
   773  001A                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  008C                     	;# 
   777  008D                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0099                     	;# 
   786  009A                     	;# 
   787  009B                     	;# 
   788  009B                     	;# 
   789  009C                     	;# 
   790  009D                     	;# 
   791  009E                     	;# 
   792  009F                     	;# 
   793  010C                     	;# 
   794  010D                     	;# 
   795  010E                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0113                     	;# 
   799  0114                     	;# 
   800  0115                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  0118                     	;# 
   804  0119                     	;# 
   805  011D                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  018E                     	;# 
   809  0191                     	;# 
   810  0191                     	;# 
   811  0192                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0199                     	;# 
   818  019A                     	;# 
   819  019B                     	;# 
   820  019B                     	;# 
   821  019C                     	;# 
   822  019D                     	;# 
   823  019E                     	;# 
   824  019F                     	;# 
   825  020C                     	;# 
   826  020D                     	;# 
   827  0211                     	;# 
   828  0211                     	;# 
   829  0212                     	;# 
   830  0212                     	;# 
   831  0213                     	;# 
   832  0213                     	;# 
   833  0214                     	;# 
   834  0214                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0216                     	;# 
   839  0216                     	;# 
   840  0217                     	;# 
   841  0217                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  0394                     	;# 
   846  0395                     	;# 
   847  0396                     	;# 
   848  0498                     	;# 
   849  0498                     	;# 
   850  0499                     	;# 
   851  049A                     	;# 
   852  049B                     	;# 
   853  049B                     	;# 
   854  049C                     	;# 
   855  049E                     	;# 
   856  049F                     	;# 
   857  0611                     	;# 
   858  0612                     	;# 
   859  0613                     	;# 
   860  0613                     	;# 
   861  0614                     	;# 
   862  0615                     	;# 
   863  0616                     	;# 
   864  0616                     	;# 
   865  0617                     	;# 
   866  0618                     	;# 
   867  0619                     	;# 
   868  0619                     	;# 
   869  061A                     	;# 
   870  061B                     	;# 
   871  061C                     	;# 
   872  061C                     	;# 
   873  0691                     	;# 
   874  0692                     	;# 
   875  0693                     	;# 
   876  0694                     	;# 
   877  0695                     	;# 
   878  0F0F                     	;# 
   879  0F10                     	;# 
   880  0F11                     	;# 
   881  0F12                     	;# 
   882  0F13                     	;# 
   883  0F14                     	;# 
   884  0F15                     	;# 
   885  0F16                     	;# 
   886  0F17                     	;# 
   887  0F18                     	;# 
   888  0F19                     	;# 
   889  0F1A                     	;# 
   890  0F1B                     	;# 
   891  0F1C                     	;# 
   892  0F1D                     	;# 
   893  0F1E                     	;# 
   894  0F1F                     	;# 
   895  0F20                     	;# 
   896  0F21                     	;# 
   897  0F22                     	;# 
   898  0F23                     	;# 
   899  0F24                     	;# 
   900  0F25                     	;# 
   901  0F26                     	;# 
   902  0F27                     	;# 
   903  0F28                     	;# 
   904  0F29                     	;# 
   905  0F2A                     	;# 
   906  0F2B                     	;# 
   907  0F2C                     	;# 
   908  0F2D                     	;# 
   909  0F2E                     	;# 
   910  0F2F                     	;# 
   911  0F8C                     	;# 
   912  0F8D                     	;# 
   913  0F91                     	;# 
   914  0F95                     	;# 
   915  0F96                     	;# 
   916  0F97                     	;# 
   917  0F9C                     	;# 
   918  0F9D                     	;# 
   919  0F9E                     	;# 
   920  0FE3                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0013                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0093                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  009F                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0111                     	;# 
   980  0112                     	;# 
   981  0113                     	;# 
   982  0114                     	;# 
   983  0115                     	;# 
   984  0116                     	;# 
   985  0117                     	;# 
   986  0118                     	;# 
   987  0119                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020C                     	;# 
  1009  020D                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0391                     	;# 
  1026  0392                     	;# 
  1027  0393                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0498                     	;# 
  1032  0498                     	;# 
  1033  0499                     	;# 
  1034  049A                     	;# 
  1035  049B                     	;# 
  1036  049B                     	;# 
  1037  049C                     	;# 
  1038  049E                     	;# 
  1039  049F                     	;# 
  1040  0611                     	;# 
  1041  0612                     	;# 
  1042  0613                     	;# 
  1043  0613                     	;# 
  1044  0614                     	;# 
  1045  0615                     	;# 
  1046  0616                     	;# 
  1047  0616                     	;# 
  1048  0617                     	;# 
  1049  0618                     	;# 
  1050  0619                     	;# 
  1051  0619                     	;# 
  1052  061A                     	;# 
  1053  061B                     	;# 
  1054  061C                     	;# 
  1055  061C                     	;# 
  1056  0691                     	;# 
  1057  0692                     	;# 
  1058  0693                     	;# 
  1059  0694                     	;# 
  1060  0695                     	;# 
  1061  0F0F                     	;# 
  1062  0F10                     	;# 
  1063  0F11                     	;# 
  1064  0F12                     	;# 
  1065  0F13                     	;# 
  1066  0F14                     	;# 
  1067  0F15                     	;# 
  1068  0F16                     	;# 
  1069  0F17                     	;# 
  1070  0F18                     	;# 
  1071  0F19                     	;# 
  1072  0F1A                     	;# 
  1073  0F1B                     	;# 
  1074  0F1C                     	;# 
  1075  0F1D                     	;# 
  1076  0F1E                     	;# 
  1077  0F1F                     	;# 
  1078  0F20                     	;# 
  1079  0F21                     	;# 
  1080  0F22                     	;# 
  1081  0F23                     	;# 
  1082  0F24                     	;# 
  1083  0F25                     	;# 
  1084  0F26                     	;# 
  1085  0F27                     	;# 
  1086  0F28                     	;# 
  1087  0F29                     	;# 
  1088  0F2A                     	;# 
  1089  0F2B                     	;# 
  1090  0F2C                     	;# 
  1091  0F2D                     	;# 
  1092  0F2E                     	;# 
  1093  0F2F                     	;# 
  1094  0F8C                     	;# 
  1095  0F8D                     	;# 
  1096  0F91                     	;# 
  1097  0F95                     	;# 
  1098  0F96                     	;# 
  1099  0F97                     	;# 
  1100  0F9C                     	;# 
  1101  0F9D                     	;# 
  1102  0F9E                     	;# 
  1103  0FE3                     	;# 
  1104  0FE4                     	;# 
  1105  0FE5                     	;# 
  1106  0FE6                     	;# 
  1107  0FE7                     	;# 
  1108  0FE8                     	;# 
  1109  0FE9                     	;# 
  1110  0FEA                     	;# 
  1111  0FEB                     	;# 
  1112  0FED                     	;# 
  1113  0FEE                     	;# 
  1114  0FEF                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0008                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0016                     	;# 
  1136  0017                     	;# 
  1137  0018                     	;# 
  1138  0019                     	;# 
  1139  001A                     	;# 
  1140  001B                     	;# 
  1141  001C                     	;# 
  1142  008C                     	;# 
  1143  008D                     	;# 
  1144  008E                     	;# 
  1145  0091                     	;# 
  1146  0092                     	;# 
  1147  0093                     	;# 
  1148  0095                     	;# 
  1149  0096                     	;# 
  1150  0097                     	;# 
  1151  0099                     	;# 
  1152  009A                     	;# 
  1153  009B                     	;# 
  1154  009B                     	;# 
  1155  009C                     	;# 
  1156  009D                     	;# 
  1157  009E                     	;# 
  1158  009F                     	;# 
  1159  010C                     	;# 
  1160  010D                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  011D                     	;# 
  1172  018C                     	;# 
  1173  018D                     	;# 
  1174  018E                     	;# 
  1175  0191                     	;# 
  1176  0191                     	;# 
  1177  0192                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0194                     	;# 
  1181  0195                     	;# 
  1182  0196                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  0211                     	;# 
  1194  0211                     	;# 
  1195  0212                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0213                     	;# 
  1199  0214                     	;# 
  1200  0214                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0216                     	;# 
  1205  0216                     	;# 
  1206  0217                     	;# 
  1207  0217                     	;# 
  1208  0391                     	;# 
  1209  0392                     	;# 
  1210  0393                     	;# 
  1211  0394                     	;# 
  1212  0395                     	;# 
  1213  0396                     	;# 
  1214  0498                     	;# 
  1215  0498                     	;# 
  1216  0499                     	;# 
  1217  049A                     	;# 
  1218  049B                     	;# 
  1219  049B                     	;# 
  1220  049C                     	;# 
  1221  049E                     	;# 
  1222  049F                     	;# 
  1223  0611                     	;# 
  1224  0612                     	;# 
  1225  0613                     	;# 
  1226  0613                     	;# 
  1227  0614                     	;# 
  1228  0615                     	;# 
  1229  0616                     	;# 
  1230  0616                     	;# 
  1231  0617                     	;# 
  1232  0618                     	;# 
  1233  0619                     	;# 
  1234  0619                     	;# 
  1235  061A                     	;# 
  1236  061B                     	;# 
  1237  061C                     	;# 
  1238  061C                     	;# 
  1239  0691                     	;# 
  1240  0692                     	;# 
  1241  0693                     	;# 
  1242  0694                     	;# 
  1243  0695                     	;# 
  1244  0F0F                     	;# 
  1245  0F10                     	;# 
  1246  0F11                     	;# 
  1247  0F12                     	;# 
  1248  0F13                     	;# 
  1249  0F14                     	;# 
  1250  0F15                     	;# 
  1251  0F16                     	;# 
  1252  0F17                     	;# 
  1253  0F18                     	;# 
  1254  0F19                     	;# 
  1255  0F1A                     	;# 
  1256  0F1B                     	;# 
  1257  0F1C                     	;# 
  1258  0F1D                     	;# 
  1259  0F1E                     	;# 
  1260  0F1F                     	;# 
  1261  0F20                     	;# 
  1262  0F21                     	;# 
  1263  0F22                     	;# 
  1264  0F23                     	;# 
  1265  0F24                     	;# 
  1266  0F25                     	;# 
  1267  0F26                     	;# 
  1268  0F27                     	;# 
  1269  0F28                     	;# 
  1270  0F29                     	;# 
  1271  0F2A                     	;# 
  1272  0F2B                     	;# 
  1273  0F2C                     	;# 
  1274  0F2D                     	;# 
  1275  0F2E                     	;# 
  1276  0F2F                     	;# 
  1277  0F8C                     	;# 
  1278  0F8D                     	;# 
  1279  0F91                     	;# 
  1280  0F95                     	;# 
  1281  0F96                     	;# 
  1282  0F97                     	;# 
  1283  0F9C                     	;# 
  1284  0F9D                     	;# 
  1285  0F9E                     	;# 
  1286  0FE3                     	;# 
  1287  0FE4                     	;# 
  1288  0FE5                     	;# 
  1289  0FE6                     	;# 
  1290  0FE7                     	;# 
  1291  0FE8                     	;# 
  1292  0FE9                     	;# 
  1293  0FEA                     	;# 
  1294  0FEB                     	;# 
  1295  0FED                     	;# 
  1296  0FEE                     	;# 
  1297  0FEF                     	;# 
  1298  0000                     	;# 
  1299  0001                     	;# 
  1300  0002                     	;# 
  1301  0003                     	;# 
  1302  0004                     	;# 
  1303  0005                     	;# 
  1304  0006                     	;# 
  1305  0007                     	;# 
  1306  0008                     	;# 
  1307  0009                     	;# 
  1308  000A                     	;# 
  1309  000B                     	;# 
  1310  000C                     	;# 
  1311  000D                     	;# 
  1312  000E                     	;# 
  1313  0011                     	;# 
  1314  0012                     	;# 
  1315  0013                     	;# 
  1316  0015                     	;# 
  1317  0016                     	;# 
  1318  0016                     	;# 
  1319  0017                     	;# 
  1320  0018                     	;# 
  1321  0019                     	;# 
  1322  001A                     	;# 
  1323  001B                     	;# 
  1324  001C                     	;# 
  1325  008C                     	;# 
  1326  008D                     	;# 
  1327  008E                     	;# 
  1328  0091                     	;# 
  1329  0092                     	;# 
  1330  0093                     	;# 
  1331  0095                     	;# 
  1332  0096                     	;# 
  1333  0097                     	;# 
  1334  0099                     	;# 
  1335  009A                     	;# 
  1336  009B                     	;# 
  1337  009B                     	;# 
  1338  009C                     	;# 
  1339  009D                     	;# 
  1340  009E                     	;# 
  1341  009F                     	;# 
  1342  010C                     	;# 
  1343  010D                     	;# 
  1344  010E                     	;# 
  1345  0111                     	;# 
  1346  0112                     	;# 
  1347  0113                     	;# 
  1348  0114                     	;# 
  1349  0115                     	;# 
  1350  0116                     	;# 
  1351  0117                     	;# 
  1352  0118                     	;# 
  1353  0119                     	;# 
  1354  011D                     	;# 
  1355  018C                     	;# 
  1356  018D                     	;# 
  1357  018E                     	;# 
  1358  0191                     	;# 
  1359  0191                     	;# 
  1360  0192                     	;# 
  1361  0193                     	;# 
  1362  0193                     	;# 
  1363  0194                     	;# 
  1364  0195                     	;# 
  1365  0196                     	;# 
  1366  0199                     	;# 
  1367  019A                     	;# 
  1368  019B                     	;# 
  1369  019B                     	;# 
  1370  019C                     	;# 
  1371  019D                     	;# 
  1372  019E                     	;# 
  1373  019F                     	;# 
  1374  020C                     	;# 
  1375  020D                     	;# 
  1376  0211                     	;# 
  1377  0211                     	;# 
  1378  0212                     	;# 
  1379  0212                     	;# 
  1380  0213                     	;# 
  1381  0213                     	;# 
  1382  0214                     	;# 
  1383  0214                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0215                     	;# 
  1387  0216                     	;# 
  1388  0216                     	;# 
  1389  0217                     	;# 
  1390  0217                     	;# 
  1391  0391                     	;# 
  1392  0392                     	;# 
  1393  0393                     	;# 
  1394  0394                     	;# 
  1395  0395                     	;# 
  1396  0396                     	;# 
  1397  0498                     	;# 
  1398  0498                     	;# 
  1399  0499                     	;# 
  1400  049A                     	;# 
  1401  049B                     	;# 
  1402  049B                     	;# 
  1403  049C                     	;# 
  1404  049E                     	;# 
  1405  049F                     	;# 
  1406  0611                     	;# 
  1407  0612                     	;# 
  1408  0613                     	;# 
  1409  0613                     	;# 
  1410  0614                     	;# 
  1411  0615                     	;# 
  1412  0616                     	;# 
  1413  0616                     	;# 
  1414  0617                     	;# 
  1415  0618                     	;# 
  1416  0619                     	;# 
  1417  0619                     	;# 
  1418  061A                     	;# 
  1419  061B                     	;# 
  1420  061C                     	;# 
  1421  061C                     	;# 
  1422  0691                     	;# 
  1423  0692                     	;# 
  1424  0693                     	;# 
  1425  0694                     	;# 
  1426  0695                     	;# 
  1427  0F0F                     	;# 
  1428  0F10                     	;# 
  1429  0F11                     	;# 
  1430  0F12                     	;# 
  1431  0F13                     	;# 
  1432  0F14                     	;# 
  1433  0F15                     	;# 
  1434  0F16                     	;# 
  1435  0F17                     	;# 
  1436  0F18                     	;# 
  1437  0F19                     	;# 
  1438  0F1A                     	;# 
  1439  0F1B                     	;# 
  1440  0F1C                     	;# 
  1441  0F1D                     	;# 
  1442  0F1E                     	;# 
  1443  0F1F                     	;# 
  1444  0F20                     	;# 
  1445  0F21                     	;# 
  1446  0F22                     	;# 
  1447  0F23                     	;# 
  1448  0F24                     	;# 
  1449  0F25                     	;# 
  1450  0F26                     	;# 
  1451  0F27                     	;# 
  1452  0F28                     	;# 
  1453  0F29                     	;# 
  1454  0F2A                     	;# 
  1455  0F2B                     	;# 
  1456  0F2C                     	;# 
  1457  0F2D                     	;# 
  1458  0F2E                     	;# 
  1459  0F2F                     	;# 
  1460  0F8C                     	;# 
  1461  0F8D                     	;# 
  1462  0F91                     	;# 
  1463  0F95                     	;# 
  1464  0F96                     	;# 
  1465  0F97                     	;# 
  1466  0F9C                     	;# 
  1467  0F9D                     	;# 
  1468  0F9E                     	;# 
  1469  0FE3                     	;# 
  1470  0FE4                     	;# 
  1471  0FE5                     	;# 
  1472  0FE6                     	;# 
  1473  0FE7                     	;# 
  1474  0FE8                     	;# 
  1475  0FE9                     	;# 
  1476  0FEA                     	;# 
  1477  0FEB                     	;# 
  1478  0FED                     	;# 
  1479  0FEE                     	;# 
  1480  0FEF                     	;# 
  1481  0000                     	;# 
  1482  0001                     	;# 
  1483  0002                     	;# 
  1484  0003                     	;# 
  1485  0004                     	;# 
  1486  0005                     	;# 
  1487  0006                     	;# 
  1488  0007                     	;# 
  1489  0008                     	;# 
  1490  0009                     	;# 
  1491  000A                     	;# 
  1492  000B                     	;# 
  1493  000C                     	;# 
  1494  000D                     	;# 
  1495  000E                     	;# 
  1496  0011                     	;# 
  1497  0012                     	;# 
  1498  0013                     	;# 
  1499  0015                     	;# 
  1500  0016                     	;# 
  1501  0016                     	;# 
  1502  0017                     	;# 
  1503  0018                     	;# 
  1504  0019                     	;# 
  1505  001A                     	;# 
  1506  001B                     	;# 
  1507  001C                     	;# 
  1508  008C                     	;# 
  1509  008D                     	;# 
  1510  008E                     	;# 
  1511  0091                     	;# 
  1512  0092                     	;# 
  1513  0093                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  009F                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  010E                     	;# 
  1528  0111                     	;# 
  1529  0112                     	;# 
  1530  0113                     	;# 
  1531  0114                     	;# 
  1532  0115                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  0118                     	;# 
  1536  0119                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020C                     	;# 
  1558  020D                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0391                     	;# 
  1575  0392                     	;# 
  1576  0393                     	;# 
  1577  0394                     	;# 
  1578  0395                     	;# 
  1579  0396                     	;# 
  1580  0498                     	;# 
  1581  0498                     	;# 
  1582  0499                     	;# 
  1583  049A                     	;# 
  1584  049B                     	;# 
  1585  049B                     	;# 
  1586  049C                     	;# 
  1587  049E                     	;# 
  1588  049F                     	;# 
  1589  0611                     	;# 
  1590  0612                     	;# 
  1591  0613                     	;# 
  1592  0613                     	;# 
  1593  0614                     	;# 
  1594  0615                     	;# 
  1595  0616                     	;# 
  1596  0616                     	;# 
  1597  0617                     	;# 
  1598  0618                     	;# 
  1599  0619                     	;# 
  1600  0619                     	;# 
  1601  061A                     	;# 
  1602  061B                     	;# 
  1603  061C                     	;# 
  1604  061C                     	;# 
  1605  0691                     	;# 
  1606  0692                     	;# 
  1607  0693                     	;# 
  1608  0694                     	;# 
  1609  0695                     	;# 
  1610  0F0F                     	;# 
  1611  0F10                     	;# 
  1612  0F11                     	;# 
  1613  0F12                     	;# 
  1614  0F13                     	;# 
  1615  0F14                     	;# 
  1616  0F15                     	;# 
  1617  0F16                     	;# 
  1618  0F17                     	;# 
  1619  0F18                     	;# 
  1620  0F19                     	;# 
  1621  0F1A                     	;# 
  1622  0F1B                     	;# 
  1623  0F1C                     	;# 
  1624  0F1D                     	;# 
  1625  0F1E                     	;# 
  1626  0F1F                     	;# 
  1627  0F20                     	;# 
  1628  0F21                     	;# 
  1629  0F22                     	;# 
  1630  0F23                     	;# 
  1631  0F24                     	;# 
  1632  0F25                     	;# 
  1633  0F26                     	;# 
  1634  0F27                     	;# 
  1635  0F28                     	;# 
  1636  0F29                     	;# 
  1637  0F2A                     	;# 
  1638  0F2B                     	;# 
  1639  0F2C                     	;# 
  1640  0F2D                     	;# 
  1641  0F2E                     	;# 
  1642  0F2F                     	;# 
  1643  0F8C                     	;# 
  1644  0F8D                     	;# 
  1645  0F91                     	;# 
  1646  0F95                     	;# 
  1647  0F96                     	;# 
  1648  0F97                     	;# 
  1649  0F9C                     	;# 
  1650  0F9D                     	;# 
  1651  0F9E                     	;# 
  1652  0FE3                     	;# 
  1653  0FE4                     	;# 
  1654  0FE5                     	;# 
  1655  0FE6                     	;# 
  1656  0FE7                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEB                     	;# 
  1661  0FED                     	;# 
  1662  0FEE                     	;# 
  1663  0FEF                     	;# 
  1664  0000                     	;# 
  1665  0001                     	;# 
  1666  0002                     	;# 
  1667  0003                     	;# 
  1668  0004                     	;# 
  1669  0005                     	;# 
  1670  0006                     	;# 
  1671  0007                     	;# 
  1672  0008                     	;# 
  1673  0009                     	;# 
  1674  000A                     	;# 
  1675  000B                     	;# 
  1676  000C                     	;# 
  1677  000D                     	;# 
  1678  000E                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0015                     	;# 
  1683  0016                     	;# 
  1684  0016                     	;# 
  1685  0017                     	;# 
  1686  0018                     	;# 
  1687  0019                     	;# 
  1688  001A                     	;# 
  1689  001B                     	;# 
  1690  001C                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0095                     	;# 
  1698  0096                     	;# 
  1699  0097                     	;# 
  1700  0099                     	;# 
  1701  009A                     	;# 
  1702  009B                     	;# 
  1703  009B                     	;# 
  1704  009C                     	;# 
  1705  009D                     	;# 
  1706  009E                     	;# 
  1707  009F                     	;# 
  1708  010C                     	;# 
  1709  010D                     	;# 
  1710  010E                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0113                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0117                     	;# 
  1718  0118                     	;# 
  1719  0119                     	;# 
  1720  011D                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018E                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0199                     	;# 
  1733  019A                     	;# 
  1734  019B                     	;# 
  1735  019B                     	;# 
  1736  019C                     	;# 
  1737  019D                     	;# 
  1738  019E                     	;# 
  1739  019F                     	;# 
  1740  020C                     	;# 
  1741  020D                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0391                     	;# 
  1758  0392                     	;# 
  1759  0393                     	;# 
  1760  0394                     	;# 
  1761  0395                     	;# 
  1762  0396                     	;# 
  1763  0498                     	;# 
  1764  0498                     	;# 
  1765  0499                     	;# 
  1766  049A                     	;# 
  1767  049B                     	;# 
  1768  049B                     	;# 
  1769  049C                     	;# 
  1770  049E                     	;# 
  1771  049F                     	;# 
  1772  0611                     	;# 
  1773  0612                     	;# 
  1774  0613                     	;# 
  1775  0613                     	;# 
  1776  0614                     	;# 
  1777  0615                     	;# 
  1778  0616                     	;# 
  1779  0616                     	;# 
  1780  0617                     	;# 
  1781  0618                     	;# 
  1782  0619                     	;# 
  1783  0619                     	;# 
  1784  061A                     	;# 
  1785  061B                     	;# 
  1786  061C                     	;# 
  1787  061C                     	;# 
  1788  0691                     	;# 
  1789  0692                     	;# 
  1790  0693                     	;# 
  1791  0694                     	;# 
  1792  0695                     	;# 
  1793  0F0F                     	;# 
  1794  0F10                     	;# 
  1795  0F11                     	;# 
  1796  0F12                     	;# 
  1797  0F13                     	;# 
  1798  0F14                     	;# 
  1799  0F15                     	;# 
  1800  0F16                     	;# 
  1801  0F17                     	;# 
  1802  0F18                     	;# 
  1803  0F19                     	;# 
  1804  0F1A                     	;# 
  1805  0F1B                     	;# 
  1806  0F1C                     	;# 
  1807  0F1D                     	;# 
  1808  0F1E                     	;# 
  1809  0F1F                     	;# 
  1810  0F20                     	;# 
  1811  0F21                     	;# 
  1812  0F22                     	;# 
  1813  0F23                     	;# 
  1814  0F24                     	;# 
  1815  0F25                     	;# 
  1816  0F26                     	;# 
  1817  0F27                     	;# 
  1818  0F28                     	;# 
  1819  0F29                     	;# 
  1820  0F2A                     	;# 
  1821  0F2B                     	;# 
  1822  0F2C                     	;# 
  1823  0F2D                     	;# 
  1824  0F2E                     	;# 
  1825  0F2F                     	;# 
  1826  0F8C                     	;# 
  1827  0F8D                     	;# 
  1828  0F91                     	;# 
  1829  0F95                     	;# 
  1830  0F96                     	;# 
  1831  0F97                     	;# 
  1832  0F9C                     	;# 
  1833  0F9D                     	;# 
  1834  0F9E                     	;# 
  1835  0FE3                     	;# 
  1836  0FE4                     	;# 
  1837  0FE5                     	;# 
  1838  0FE6                     	;# 
  1839  0FE7                     	;# 
  1840  0FE8                     	;# 
  1841  0FE9                     	;# 
  1842  0FEA                     	;# 
  1843  0FEB                     	;# 
  1844  0FED                     	;# 
  1845  0FEE                     	;# 
  1846  0FEF                     	;# 
  1847  0000                     	;# 
  1848  0001                     	;# 
  1849  0002                     	;# 
  1850  0003                     	;# 
  1851  0004                     	;# 
  1852  0005                     	;# 
  1853  0006                     	;# 
  1854  0007                     	;# 
  1855  0008                     	;# 
  1856  0009                     	;# 
  1857  000A                     	;# 
  1858  000B                     	;# 
  1859  000C                     	;# 
  1860  000D                     	;# 
  1861  000E                     	;# 
  1862  0011                     	;# 
  1863  0012                     	;# 
  1864  0013                     	;# 
  1865  0015                     	;# 
  1866  0016                     	;# 
  1867  0016                     	;# 
  1868  0017                     	;# 
  1869  0018                     	;# 
  1870  0019                     	;# 
  1871  001A                     	;# 
  1872  001B                     	;# 
  1873  001C                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  0091                     	;# 
  1878  0092                     	;# 
  1879  0093                     	;# 
  1880  0095                     	;# 
  1881  0096                     	;# 
  1882  0097                     	;# 
  1883  0099                     	;# 
  1884  009A                     	;# 
  1885  009B                     	;# 
  1886  009B                     	;# 
  1887  009C                     	;# 
  1888  009D                     	;# 
  1889  009E                     	;# 
  1890  009F                     	;# 
  1891  010C                     	;# 
  1892  010D                     	;# 
  1893  010E                     	;# 
  1894  0111                     	;# 
  1895  0112                     	;# 
  1896  0113                     	;# 
  1897  0114                     	;# 
  1898  0115                     	;# 
  1899  0116                     	;# 
  1900  0117                     	;# 
  1901  0118                     	;# 
  1902  0119                     	;# 
  1903  011D                     	;# 
  1904  018C                     	;# 
  1905  018D                     	;# 
  1906  018E                     	;# 
  1907  0191                     	;# 
  1908  0191                     	;# 
  1909  0192                     	;# 
  1910  0193                     	;# 
  1911  0193                     	;# 
  1912  0194                     	;# 
  1913  0195                     	;# 
  1914  0196                     	;# 
  1915  0199                     	;# 
  1916  019A                     	;# 
  1917  019B                     	;# 
  1918  019B                     	;# 
  1919  019C                     	;# 
  1920  019D                     	;# 
  1921  019E                     	;# 
  1922  019F                     	;# 
  1923  020C                     	;# 
  1924  020D                     	;# 
  1925  0211                     	;# 
  1926  0211                     	;# 
  1927  0212                     	;# 
  1928  0212                     	;# 
  1929  0213                     	;# 
  1930  0213                     	;# 
  1931  0214                     	;# 
  1932  0214                     	;# 
  1933  0215                     	;# 
  1934  0215                     	;# 
  1935  0215                     	;# 
  1936  0216                     	;# 
  1937  0216                     	;# 
  1938  0217                     	;# 
  1939  0217                     	;# 
  1940  0391                     	;# 
  1941  0392                     	;# 
  1942  0393                     	;# 
  1943  0394                     	;# 
  1944  0395                     	;# 
  1945  0396                     	;# 
  1946  0498                     	;# 
  1947  0498                     	;# 
  1948  0499                     	;# 
  1949  049A                     	;# 
  1950  049B                     	;# 
  1951  049B                     	;# 
  1952  049C                     	;# 
  1953  049E                     	;# 
  1954  049F                     	;# 
  1955  0611                     	;# 
  1956  0612                     	;# 
  1957  0613                     	;# 
  1958  0613                     	;# 
  1959  0614                     	;# 
  1960  0615                     	;# 
  1961  0616                     	;# 
  1962  0616                     	;# 
  1963  0617                     	;# 
  1964  0618                     	;# 
  1965  0619                     	;# 
  1966  0619                     	;# 
  1967  061A                     	;# 
  1968  061B                     	;# 
  1969  061C                     	;# 
  1970  061C                     	;# 
  1971  0691                     	;# 
  1972  0692                     	;# 
  1973  0693                     	;# 
  1974  0694                     	;# 
  1975  0695                     	;# 
  1976  0F0F                     	;# 
  1977  0F10                     	;# 
  1978  0F11                     	;# 
  1979  0F12                     	;# 
  1980  0F13                     	;# 
  1981  0F14                     	;# 
  1982  0F15                     	;# 
  1983  0F16                     	;# 
  1984  0F17                     	;# 
  1985  0F18                     	;# 
  1986  0F19                     	;# 
  1987  0F1A                     	;# 
  1988  0F1B                     	;# 
  1989  0F1C                     	;# 
  1990  0F1D                     	;# 
  1991  0F1E                     	;# 
  1992  0F1F                     	;# 
  1993  0F20                     	;# 
  1994  0F21                     	;# 
  1995  0F22                     	;# 
  1996  0F23                     	;# 
  1997  0F24                     	;# 
  1998  0F25                     	;# 
  1999  0F26                     	;# 
  2000  0F27                     	;# 
  2001  0F28                     	;# 
  2002  0F29                     	;# 
  2003  0F2A                     	;# 
  2004  0F2B                     	;# 
  2005  0F2C                     	;# 
  2006  0F2D                     	;# 
  2007  0F2E                     	;# 
  2008  0F2F                     	;# 
  2009  0F8C                     	;# 
  2010  0F8D                     	;# 
  2011  0F91                     	;# 
  2012  0F95                     	;# 
  2013  0F96                     	;# 
  2014  0F97                     	;# 
  2015  0F9C                     	;# 
  2016  0F9D                     	;# 
  2017  0F9E                     	;# 
  2018  0FE3                     	;# 
  2019  0FE4                     	;# 
  2020  0FE5                     	;# 
  2021  0FE6                     	;# 
  2022  0FE7                     	;# 
  2023  0FE8                     	;# 
  2024  0FE9                     	;# 
  2025  0FEA                     	;# 
  2026  0FEB                     	;# 
  2027  0FED                     	;# 
  2028  0FEE                     	;# 
  2029  0FEF                     	;# 
  2030  0000                     	;# 
  2031  0001                     	;# 
  2032  0002                     	;# 
  2033  0003                     	;# 
  2034  0004                     	;# 
  2035  0005                     	;# 
  2036  0006                     	;# 
  2037  0007                     	;# 
  2038  0008                     	;# 
  2039  0009                     	;# 
  2040  000A                     	;# 
  2041  000B                     	;# 
  2042  000C                     	;# 
  2043  000D                     	;# 
  2044  000E                     	;# 
  2045  0011                     	;# 
  2046  0012                     	;# 
  2047  0013                     	;# 
  2048  0015                     	;# 
  2049  0016                     	;# 
  2050  0016                     	;# 
  2051  0017                     	;# 
  2052  0018                     	;# 
  2053  0019                     	;# 
  2054  001A                     	;# 
  2055  001B                     	;# 
  2056  001C                     	;# 
  2057  008C                     	;# 
  2058  008D                     	;# 
  2059  008E                     	;# 
  2060  0091                     	;# 
  2061  0092                     	;# 
  2062  0093                     	;# 
  2063  0095                     	;# 
  2064  0096                     	;# 
  2065  0097                     	;# 
  2066  0099                     	;# 
  2067  009A                     	;# 
  2068  009B                     	;# 
  2069  009B                     	;# 
  2070  009C                     	;# 
  2071  009D                     	;# 
  2072  009E                     	;# 
  2073  009F                     	;# 
  2074  010C                     	;# 
  2075  010D                     	;# 
  2076  010E                     	;# 
  2077  0111                     	;# 
  2078  0112                     	;# 
  2079  0113                     	;# 
  2080  0114                     	;# 
  2081  0115                     	;# 
  2082  0116                     	;# 
  2083  0117                     	;# 
  2084  0118                     	;# 
  2085  0119                     	;# 
  2086  011D                     	;# 
  2087  018C                     	;# 
  2088  018D                     	;# 
  2089  018E                     	;# 
  2090  0191                     	;# 
  2091  0191                     	;# 
  2092  0192                     	;# 
  2093  0193                     	;# 
  2094  0193                     	;# 
  2095  0194                     	;# 
  2096  0195                     	;# 
  2097  0196                     	;# 
  2098  0199                     	;# 
  2099  019A                     	;# 
  2100  019B                     	;# 
  2101  019B                     	;# 
  2102  019C                     	;# 
  2103  019D                     	;# 
  2104  019E                     	;# 
  2105  019F                     	;# 
  2106  020C                     	;# 
  2107  020D                     	;# 
  2108  0211                     	;# 
  2109  0211                     	;# 
  2110  0212                     	;# 
  2111  0212                     	;# 
  2112  0213                     	;# 
  2113  0213                     	;# 
  2114  0214                     	;# 
  2115  0214                     	;# 
  2116  0215                     	;# 
  2117  0215                     	;# 
  2118  0215                     	;# 
  2119  0216                     	;# 
  2120  0216                     	;# 
  2121  0217                     	;# 
  2122  0217                     	;# 
  2123  0391                     	;# 
  2124  0392                     	;# 
  2125  0393                     	;# 
  2126  0394                     	;# 
  2127  0395                     	;# 
  2128  0396                     	;# 
  2129  0498                     	;# 
  2130  0498                     	;# 
  2131  0499                     	;# 
  2132  049A                     	;# 
  2133  049B                     	;# 
  2134  049B                     	;# 
  2135  049C                     	;# 
  2136  049E                     	;# 
  2137  049F                     	;# 
  2138  0611                     	;# 
  2139  0612                     	;# 
  2140  0613                     	;# 
  2141  0613                     	;# 
  2142  0614                     	;# 
  2143  0615                     	;# 
  2144  0616                     	;# 
  2145  0616                     	;# 
  2146  0617                     	;# 
  2147  0618                     	;# 
  2148  0619                     	;# 
  2149  0619                     	;# 
  2150  061A                     	;# 
  2151  061B                     	;# 
  2152  061C                     	;# 
  2153  061C                     	;# 
  2154  0691                     	;# 
  2155  0692                     	;# 
  2156  0693                     	;# 
  2157  0694                     	;# 
  2158  0695                     	;# 
  2159  0F0F                     	;# 
  2160  0F10                     	;# 
  2161  0F11                     	;# 
  2162  0F12                     	;# 
  2163  0F13                     	;# 
  2164  0F14                     	;# 
  2165  0F15                     	;# 
  2166  0F16                     	;# 
  2167  0F17                     	;# 
  2168  0F18                     	;# 
  2169  0F19                     	;# 
  2170  0F1A                     	;# 
  2171  0F1B                     	;# 
  2172  0F1C                     	;# 
  2173  0F1D                     	;# 
  2174  0F1E                     	;# 
  2175  0F1F                     	;# 
  2176  0F20                     	;# 
  2177  0F21                     	;# 
  2178  0F22                     	;# 
  2179  0F23                     	;# 
  2180  0F24                     	;# 
  2181  0F25                     	;# 
  2182  0F26                     	;# 
  2183  0F27                     	;# 
  2184  0F28                     	;# 
  2185  0F29                     	;# 
  2186  0F2A                     	;# 
  2187  0F2B                     	;# 
  2188  0F2C                     	;# 
  2189  0F2D                     	;# 
  2190  0F2E                     	;# 
  2191  0F2F                     	;# 
  2192  0F8C                     	;# 
  2193  0F8D                     	;# 
  2194  0F91                     	;# 
  2195  0F95                     	;# 
  2196  0F96                     	;# 
  2197  0F97                     	;# 
  2198  0F9C                     	;# 
  2199  0F9D                     	;# 
  2200  0F9E                     	;# 
  2201  0FE3                     	;# 
  2202  0FE4                     	;# 
  2203  0FE5                     	;# 
  2204  0FE6                     	;# 
  2205  0FE7                     	;# 
  2206  0FE8                     	;# 
  2207  0FE9                     	;# 
  2208  0FEA                     	;# 
  2209  0FEB                     	;# 
  2210  0FED                     	;# 
  2211  0FEE                     	;# 
  2212  0FEF                     	;# 
  2213                           
  2214                           	psect	strings
  2215  0500                     __pstrings:	
  2216  0500                     __stringtab:	
  2217  0500  3400               	retlw	0
  2218  0501                     __end_of__stringtab:	
  2219  0501                     _mrfRegset_InitCnt:	
  2220  0501  3410               	retlw	16
  2221  0502                     __end_of_mrfRegset_InitCnt:	
  2222  0502                     _mrfRegset_RxCnt:	
  2223  0502  3406               	retlw	6
  2224  0503                     __end_of_mrfRegset_RxCnt:	
  2225  0503                     _mrfRegset_TxCnt:	
  2226  0503  3404               	retlw	4
  2227  0504                     __end_of_mrfRegset_TxCnt:	
  2228  0504                     _mrfRegset_Init:	
  2229  0504  34CA               	retlw	202
  2230  0505  3471               	retlw	113
  2231  0506  34CA               	retlw	202
  2232  0507  3473               	retlw	115
  2233  0508  3480               	retlw	128
  2234  0509  3428               	retlw	40
  2235  050A  34C4               	retlw	196
  2236  050B  34E7               	retlw	231
  2237  050C  34A8               	retlw	168
  2238  050D  3460               	retlw	96
  2239  050E  34C6               	retlw	198
  2240  050F  3405               	retlw	5
  2241  0510  3482               	retlw	130
  2242  0511  3400               	retlw	0
  2243  0512  3490               	retlw	144
  2244  0513  3462               	retlw	98
  2245  0514  3498               	retlw	152
  2246  0515  3490               	retlw	144
  2247  0516  34C2               	retlw	194
  2248  0517  34AC               	retlw	172
  2249  0518  3482               	retlw	130
  2250  0519  3420               	retlw	32
  2251  051A  3455               	retlw	85
  2252  051B  3400               	retlw	0
  2253  051C  3482               	retlw	130
  2254  051D  3480               	retlw	128
  2255  051E  3480               	retlw	128
  2256  051F  3468               	retlw	104
  2257  0520  34CA               	retlw	202
  2258  0521  3471               	retlw	113
  2259  0522  34CA               	retlw	202
  2260  0523  3473               	retlw	115
  2261  0524                     __end_of_mrfRegset_Init:	
  2262  0524                     _mrfRegset_Rx:	
  2263  0524  3482               	retlw	130
  2264  0525  3400               	retlw	0
  2265  0526  34CA               	retlw	202
  2266  0527  3471               	retlw	113
  2267  0528  3480               	retlw	128
  2268  0529  3428               	retlw	40
  2269  052A  3482               	retlw	130
  2270  052B  3480               	retlw	128
  2271  052C  3480               	retlw	128
  2272  052D  3468               	retlw	104
  2273  052E  34CA               	retlw	202
  2274  052F  3473               	retlw	115
  2275  0530                     __end_of_mrfRegset_Rx:	
  2276  0530                     _mrfRegset_Tx:	
  2277  0530  3482               	retlw	130
  2278  0531  3400               	retlw	0
  2279  0532  34CA               	retlw	202
  2280  0533  3471               	retlw	113
  2281  0534  3480               	retlw	128
  2282  0535  34A8               	retlw	168
  2283  0536  3482               	retlw	130
  2284  0537  3420               	retlw	32
  2285  0538                     __end_of_mrfRegset_Tx:	
  2286  000B                     _INTCONbits	set	11
  2287  000C                     _PORTAbits	set	12
  2288  000E                     _PORTCbits	set	14
  2289  009D                     _ADCON0	set	157
  2290  009E                     _ADCON1	set	158
  2291  009F                     _ADCON2	set	159
  2292  0095                     _OPTION_REGbits	set	149
  2293  0099                     _OSCCON	set	153
  2294  008C                     _TRISAbits	set	140
  2295  008D                     _TRISBbits	set	141
  2296  008E                     _TRISCbits	set	142
  2297  0117                     _FVRCON	set	279
  2298  010C                     _LATAbits	set	268
  2299  010D                     _LATBbits	set	269
  2300  010E                     _LATCbits	set	270
  2301  018C                     _ANSELA	set	396
  2302  018D                     _ANSELB	set	397
  2303  018E                     _ANSELC	set	398
  2304  020C                     _WPUAbits	set	524
  2305                           
  2306                           	psect	cinit
  2307  0016                     start_initialization:	
  2308                           ; #config settings
  2309                           
  2310  0016                     __initialization:	
  2311                           
  2312                           ; Clear objects allocated to BANK0
  2313  0016  01AA               	clrf	__pbssBANK0& (0+127)
  2314  0017  01AB               	clrf	(__pbssBANK0+1)& (0+127)
  2315                           
  2316                           ; Clear objects allocated to BANK1
  2317  0018  30A0               	movlw	low __pbssBANK1
  2318  0019  0084               	movwf	4
  2319  001A  3000               	movlw	high __pbssBANK1
  2320  001B  0085               	movwf	5
  2321  001C  304C               	movlw	76
  2322  001D  3185  2548  3180   	fcall	clear_ram0
  2323  0020                     end_of_initialization:	
  2324                           ;End of C runtime variable initialization code
  2325                           
  2326  0020                     __end_of__initialization:	
  2327  0020  0020               	movlb	0
  2328  0021  284D               	ljmp	_main	;jump to C main() function
  2329  0022                     __ptext6:	
  2330 ;; *************** function _Mrf49xaModeTx *****************
  2331 ;; Defined at:
  2332 ;;		line 82 in file "../../../src/devices/mrf49xa.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  k               1    3[BANK0 ] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0, pclath, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 1F/0
  2343 ;;		On exit  : 1F/1
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2346 ;;      Params:         0       0       0       0
  2347 ;;      Locals:         0       1       0       0
  2348 ;;      Temps:          0       0       0       0
  2349 ;;      Totals:         0       1       0       0
  2350 ;;Total ram usage:        1 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    7
  2353 ;; This function calls:
  2354 ;;		_Mrf49TxCmd
  2355 ;; This function is called by:
  2356 ;;		_Mrf49xaTick
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _Mrf49xaModeTx
  2362  0022                     _Mrf49xaModeTx:	
  2363  0022  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2364                           
  2365                           ;mrf49xa.c: 84: UI08_t k;
  2366                           ;mrf49xa.c: 85: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  2367                           
  2368                           ;incstack = 0
  2369                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  2370  0023  01A3               	clrf	Mrf49xaModeTx@k
  2371  0024  3185               	movlp	high __stringtab
  2372  0025  000A               	callw
  2373  0026  3180               	pagesel	$	;select current page
  2374  0027  3800               	iorlw	0
  2375  0028  1903               	btfsc	3,2
  2376  0029  2847               	goto	l1786
  2377  002A                     l1778:	
  2378  002A  3523               	lslf	Mrf49xaModeTx@k,w
  2379  002B  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  2380  002C  3185               	movlp	high __stringtab
  2381  002D  000A               	callw
  2382  002E  3180               	pagesel	$	;select current page
  2383  002F  3A55               	xorlw	85
  2384  0030  1903               	skipnz
  2385  0031  283E               	goto	l1782
  2386  0032  3523               	lslf	Mrf49xaModeTx@k,w
  2387  0033  3E31               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  2388  0034  3185               	movlp	high __stringtab
  2389  0035  000A               	callw
  2390  0036  3180               	pagesel	$	;select current page
  2391  0037  00A1               	movwf	Mrf49TxCmd@val
  2392  0038  3523               	lslf	Mrf49xaModeTx@k,w
  2393  0039  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  2394  003A  3185               	movlp	high __stringtab
  2395  003B  000A               	callw
  2396  003C  3180               	pagesel	$	;select current page
  2397  003D  2201               	fcall	_Mrf49TxCmd
  2398  003E                     l1782:	
  2399  003E  0020               	movlb	0	; select bank0
  2400  003F  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2401  0040  0AA3               	incf	Mrf49xaModeTx@k,f
  2402  0041  3185               	movlp	high __stringtab
  2403  0042  000A               	callw
  2404  0043  3180               	pagesel	$	;select current page
  2405  0044  0223               	subwf	Mrf49xaModeTx@k,w
  2406  0045  1C03               	skipc
  2407  0046  282A               	goto	l1778
  2408  0047                     l1786:	
  2409                           
  2410                           ;mrf49xa.c: 87: rfTrcvStatus.state = TX_PACKET;
  2411  0047  3003               	movlw	3
  2412  0048  0021               	movlb	1	; select bank1
  2413  0049  00A0               	movwf	_rfTrcvStatus^(0+128)
  2414                           
  2415                           ;mrf49xa.c: 88: rfTrcvStatus.hwByte = 99;
  2416  004A  3063               	movlw	99
  2417  004B  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  2418  004C  0008               	return
  2419  004D                     __end_of_Mrf49xaModeTx:	
  2420  004D                     __pmaintext:	
  2421 ;;
  2422 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2423 ;;
  2424 ;; *************** function _main *****************
  2425 ;; Defined at:
  2426 ;;		line 23 in file "../../../src/node/main.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;		None
  2431 ;; Return value:  Size  Location     Type
  2432 ;;		None               void
  2433 ;; Registers used:
  2434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 17F/0
  2437 ;;		On exit  : 1F/1
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2440 ;;      Params:         0       0       0       0
  2441 ;;      Locals:         0       0       0       0
  2442 ;;      Temps:          0       0       0       0
  2443 ;;      Totals:         0       0       0       0
  2444 ;;Total ram usage:        0 bytes
  2445 ;; Hardware stack levels required when called:   10
  2446 ;; This function calls:
  2447 ;;		_AdcInit
  2448 ;;		_ExtIntInit
  2449 ;;		_Mrf49xaInit
  2450 ;;		_Mrf49xaTick
  2451 ;;		_SysInitGpio
  2452 ;; This function is called by:
  2453 ;;		Startup code after reset
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _main
  2459  004D                     _main:	
  2460                           
  2461                           ;main.c: 26: OSCCON = 0b01111000;
  2462                           
  2463                           ;incstack = 0
  2464                           ; Regs used in _main: [allreg]
  2465  004D  3078               	movlw	120
  2466  004E  0021               	movlb	1	; select bank1
  2467  004F  0099               	movwf	25	;volatile
  2468                           
  2469                           ;main.c: 27: WPUAbits.WPUA2 = 1;
  2470  0050  0024               	movlb	4	; select bank4
  2471  0051  150C               	bsf	12,2	;volatile
  2472                           
  2473                           ;main.c: 29: SysInitGpio();
  2474  0052  2326  3180         	fcall	_SysInitGpio
  2475                           
  2476                           ;main.c: 30: AdcInit();
  2477  0054  22C2  3180         	fcall	_AdcInit
  2478                           
  2479                           ;main.c: 31: ExtIntInit();
  2480  0056  22D1  3180         	fcall	_ExtIntInit
  2481                           
  2482                           ;main.c: 33: Mrf49xaInit();
  2483  0058  20AE  3180         	fcall	_Mrf49xaInit
  2484  005A                     l2008:	
  2485                           
  2486                           ;main.c: 36: {
  2487                           ;main.c: 37: Mrf49xaTick();
  2488  005A  205D  3180         	fcall	_Mrf49xaTick
  2489  005C  285A               	goto	l2008
  2490  005D                     __end_of_main:	
  2491  005D                     __ptext2:	
  2492 ;; *************** function _Mrf49xaTick *****************
  2493 ;; Defined at:
  2494 ;;		line 66 in file "../../../src/devices/mrf49xa_packet.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  timeout         1    6[BANK0 ] unsigned char 
  2499 ;;  packet          1    7[BANK0 ] PTR struct rfTrcvPacket_
  2500 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(76), 
  2501 ;;  j               1    0        unsigned char 
  2502 ;;  i               1    0        unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;		None               void
  2505 ;; Registers used:
  2506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2507 ;; Tracked objects:
  2508 ;;		On entry : 1E/0
  2509 ;;		On exit  : 1F/1
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2512 ;;      Params:         0       0       0       0
  2513 ;;      Locals:         0       2       0       0
  2514 ;;      Temps:          0       2       0       0
  2515 ;;      Totals:         0       4       0       0
  2516 ;;Total ram usage:        4 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; Hardware stack levels required when called:    8
  2519 ;; This function calls:
  2520 ;;		_Mrf49RxSts
  2521 ;;		_Mrf49xaModeTx
  2522 ;;		_Mrf49xaPacketPending
  2523 ;;		_Mrf49xaRxPacket
  2524 ;;		_Mrf49xaTxPacket
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           
  2531                           ;psect for function _Mrf49xaTick
  2532  005D                     _Mrf49xaTick:	
  2533                           
  2534                           ;mrf49xa_packet.c: 68: uint8_t i, j;
  2535                           ;mrf49xa_packet.c: 69: if (Mrf49xaPacketPending())
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2539  005D  22D6  3180         	fcall	_Mrf49xaPacketPending
  2540  005F  3A00               	xorlw	0
  2541  0060  1903               	skipnz
  2542  0061  2877               	goto	l1970
  2543                           
  2544                           ;mrf49xa_packet.c: 70: {
  2545                           ;mrf49xa_packet.c: 71: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2546  0062  22E0  3180         	fcall	_Mrf49xaRxPacket
  2547  0064  0020               	movlb	0	; select bank0
  2548  0065  00A7               	movwf	Mrf49xaTick@packet
  2549                           
  2550                           ;mrf49xa_packet.c: 74: if (packet->packet.id == 0xA0)
  2551  0066  3E04               	addlw	4
  2552  0067  0086               	movwf	6
  2553  0068  0187               	clrf	7
  2554  0069  0801               	movf	1,w
  2555  006A  3AA0               	xorlw	160
  2556  006B  1D03               	skipz
  2557  006C  2872               	goto	l1968
  2558                           
  2559                           ;mrf49xa_packet.c: 75: {
  2560                           ;mrf49xa_packet.c: 76: packet->packet.data[0] = 2;
  2561  006D  0827               	movf	Mrf49xaTick@packet,w
  2562  006E  3E06               	addlw	6
  2563  006F  0086               	movwf	6
  2564  0070  3002               	movlw	2
  2565  0071  0081               	movwf	1
  2566  0072                     l1968:	
  2567                           
  2568                           ;mrf49xa_packet.c: 77: }
  2569                           ;mrf49xa_packet.c: 81: Mrf49xaTxPacket(packet, 1);
  2570  0072  01A0               	clrf	Mrf49xaTxPacket@swapSrcDst
  2571  0073  0AA0               	incf	Mrf49xaTxPacket@swapSrcDst,f
  2572  0074  0827               	movf	Mrf49xaTick@packet,w
  2573  0075  22EE  3180         	fcall	_Mrf49xaTxPacket
  2574  0077                     l1970:	
  2575                           
  2576                           ;mrf49xa_packet.c: 82: }
  2577                           ;mrf49xa_packet.c: 84: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2578                           ;mrf49xa_packet.c: 85: rfTrcvStatus.state == RECV_IDLE)
  2579  0077  0021               	movlb	1	; select bank1
  2580  0078  0B21               	decfsz	(_rfTrcvStatus^(0+128)+1),w
  2581  0079  0008               	return
  2582  007A  08A0               	movf	_rfTrcvStatus^(0+128),f
  2583  007B  1D03               	skipz
  2584  007C  0008               	return
  2585                           
  2586                           ;mrf49xa_packet.c: 86: {
  2587                           ;mrf49xa_packet.c: 87: uint8_t timeout = 0;
  2588  007D  0020               	movlb	0	; select bank0
  2589  007E  01A6               	clrf	Mrf49xaTick@timeout
  2590  007F                     l1976:	
  2591                           
  2592                           ;mrf49xa_packet.c: 92: {
  2593                           ;mrf49xa_packet.c: 93: Mrf49RxSts();
  2594  007F  226F  3180         	fcall	_Mrf49RxSts
  2595                           
  2596                           ;mrf49xa_packet.c: 95: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sign
      +                          alPresent == 0)
  2597  0081  0021               	movlb	1	; select bank1
  2598  0082  08A0               	movf	_rfTrcvStatus^(0+128),f
  2599  0083  1D03               	skipz
  2600  0084  2888               	goto	l1984
  2601  0085  0020               	movlb	0	; select bank0
  2602  0086  1C2A               	btfss	_mrf49Status,0
  2603  0087  289B               	goto	l332
  2604  0088                     l1984:	
  2605                           
  2606                           ;mrf49xa_packet.c: 99: }
  2607                           ;mrf49xa_packet.c: 101: _delay(40000);
  2608  0088  3034               	movlw	52
  2609  0089  0020               	movlb	0	; select bank0
  2610  008A  00A5               	movwf	??_Mrf49xaTick+1
  2611  008B  30F1               	movlw	241
  2612  008C  00A4               	movwf	??_Mrf49xaTick
  2613  008D                     u1827:	
  2614  008D  0BA4               	decfsz	??_Mrf49xaTick,f
  2615  008E  288D               	goto	u1827
  2616  008F  0BA5               	decfsz	??_Mrf49xaTick+1,f
  2617  0090  288D               	goto	u1827
  2618  0091  2892               	nop2
  2619                           
  2620                           ;mrf49xa_packet.c: 102: timeout++;
  2621  0092  0020               	movlb	0	; select bank0
  2622  0093  300B               	movlw	11
  2623  0094  0AA6               	incf	Mrf49xaTick@timeout,f
  2624                           
  2625                           ;mrf49xa_packet.c: 104: if (timeout > 10)
  2626  0095  0226               	subwf	Mrf49xaTick@timeout,w
  2627  0096  1C03               	skipc
  2628  0097  287F               	goto	l1976
  2629                           
  2630                           ;mrf49xa_packet.c: 105: {
  2631                           ;mrf49xa_packet.c: 106: rfTrcvStatus.txPacket.retry++;
  2632  0098  0021               	movlb	1	; select bank1
  2633  0099  0AB8               	incf	(_rfTrcvStatus^(0+128)+24),f
  2634  009A  0008               	return
  2635  009B                     l332:	
  2636                           
  2637                           ;mrf49xa_packet.c: 115: INTCONbits.INTE = 0;;
  2638  009B  120B               	bcf	11,4	;volatile
  2639                           
  2640                           ;mrf49xa_packet.c: 116: Mrf49xaModeTx();
  2641  009C  2022               	fcall	_Mrf49xaModeTx
  2642                           
  2643                           ;mrf49xa_packet.c: 117: INTCONbits.INTE = 1;;
  2644  009D  160B               	bsf	11,4	;volatile
  2645  009E  0008               	return
  2646  009F                     __end_of_Mrf49xaTick:	
  2647  009F                     __ptext14:	
  2648 ;; *************** function _Mrf49RxCmd *****************
  2649 ;; Defined at:
  2650 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  cmd             1    wreg     unsigned char 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  cmd             1    1[BANK0 ] unsigned char 
  2655 ;;  val             1    2[BANK0 ] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      unsigned char 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0, pclath, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 1E/1
  2662 ;;		On exit  : 1F/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2665 ;;      Params:         0       0       0       0
  2666 ;;      Locals:         0       2       0       0
  2667 ;;      Temps:          0       0       0       0
  2668 ;;      Totals:         0       2       0       0
  2669 ;;Total ram usage:        2 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    6
  2672 ;; This function calls:
  2673 ;;		_Mrf49SpiRx
  2674 ;;		_Mrf49SpiTx
  2675 ;; This function is called by:
  2676 ;;		_Mrf49RxByte
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           
  2681                           ;psect for function _Mrf49RxCmd
  2682  009F                     _Mrf49RxCmd:	
  2683                           
  2684                           ;incstack = 0
  2685                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2686                           ;Mrf49RxCmd@cmd stored from wreg
  2687  009F  0020               	movlb	0	; select bank0
  2688  00A0  00A1               	movwf	Mrf49RxCmd@cmd
  2689                           
  2690                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  2691  00A1  0022               	movlb	2	; select bank2
  2692  00A2  130E               	bcf	14,6	;volatile
  2693                           
  2694                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  2695  00A3  0020               	movlb	0	; select bank0
  2696  00A4  0821               	movf	Mrf49RxCmd@cmd,w
  2697  00A5  220D  3180         	fcall	_Mrf49SpiTx
  2698                           
  2699                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  2700  00A7  227B               	fcall	_Mrf49SpiRx
  2701  00A8  00A2               	movwf	Mrf49RxCmd@val
  2702                           
  2703                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  2704  00A9  0022               	movlb	2	; select bank2
  2705  00AA  170E               	bsf	14,6	;volatile
  2706                           
  2707                           ;mrf49xa_cmd.c: 25: return val;
  2708  00AB  0020               	movlb	0	; select bank0
  2709  00AC  0822               	movf	Mrf49RxCmd@val,w
  2710  00AD  0008               	return
  2711  00AE                     __end_of_Mrf49RxCmd:	
  2712  00AE                     __ptext7:	
  2713 ;; *************** function _Mrf49xaInit *****************
  2714 ;; Defined at:
  2715 ;;		line 116 in file "../../../src/devices/mrf49xa.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  k               1    9[BANK0 ] unsigned char 
  2720 ;;  j               1    0        unsigned char 
  2721 ;;  i               1    0        unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;		None               void
  2724 ;; Registers used:
  2725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 17F/1
  2728 ;;		On exit  : 1F/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2731 ;;      Params:         0       0       0       0
  2732 ;;      Locals:         0       1       0       0
  2733 ;;      Temps:          0       3       0       0
  2734 ;;      Totals:         0       4       0       0
  2735 ;;Total ram usage:        4 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    9
  2738 ;; This function calls:
  2739 ;;		_Mrf49TxCmd
  2740 ;;		_Mrf49xaModeRx
  2741 ;;		_Mrf49xaServe
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           
  2748                           ;psect for function _Mrf49xaInit
  2749  00AE                     _Mrf49xaInit:	
  2750                           
  2751                           ;mrf49xa.c: 118: UI08_t i, j, k;
  2752                           ;mrf49xa.c: 121: LATAbits.LATA4 = 0;
  2753                           
  2754                           ;incstack = 0
  2755                           ; Regs used in _Mrf49xaInit: [allreg]
  2756  00AE  0022               	movlb	2	; select bank2
  2757  00AF  120C               	bcf	12,4	;volatile
  2758                           
  2759                           ;mrf49xa.c: 122: LATCbits.LATC1 = 1;
  2760  00B0  148E               	bsf	14,1	;volatile
  2761                           
  2762                           ;mrf49xa.c: 123: _delay(400000);
  2763  00B1  3003               	movlw	3
  2764  00B2  0020               	movlb	0	; select bank0
  2765  00B3  00A8               	movwf	??_Mrf49xaInit+2
  2766  00B4  3008               	movlw	8
  2767  00B5  00A7               	movwf	??_Mrf49xaInit+1
  2768  00B6  3078               	movlw	120
  2769  00B7  00A6               	movwf	??_Mrf49xaInit
  2770  00B8                     u1837:	
  2771  00B8  0BA6               	decfsz	??_Mrf49xaInit,f
  2772  00B9  28B8               	goto	u1837
  2773  00BA  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2774  00BB  28B8               	goto	u1837
  2775  00BC  0BA8               	decfsz	??_Mrf49xaInit+2,f
  2776  00BD  28B8               	goto	u1837
  2777                           
  2778                           ;mrf49xa.c: 124: LATAbits.LATA4 = 1;
  2779  00BE  0022               	movlb	2	; select bank2
  2780  00BF  160C               	bsf	12,4	;volatile
  2781                           
  2782                           ;mrf49xa.c: 125: _delay(400000);
  2783  00C0  3003               	movlw	3
  2784  00C1  0020               	movlb	0	; select bank0
  2785  00C2  00A8               	movwf	??_Mrf49xaInit+2
  2786  00C3  3008               	movlw	8
  2787  00C4  00A7               	movwf	??_Mrf49xaInit+1
  2788  00C5  3078               	movlw	120
  2789  00C6  00A6               	movwf	??_Mrf49xaInit
  2790  00C7                     u1847:	
  2791  00C7  0BA6               	decfsz	??_Mrf49xaInit,f
  2792  00C8  28C7               	goto	u1847
  2793  00C9  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2794  00CA  28C7               	goto	u1847
  2795  00CB  0BA8               	decfsz	??_Mrf49xaInit+2,f
  2796  00CC  28C7               	goto	u1847
  2797                           
  2798                           ;mrf49xa.c: 126: LATCbits.LATC4 = 1;
  2799  00CD  0022               	movlb	2	; select bank2
  2800  00CE  160E               	bsf	14,4	;volatile
  2801                           
  2802                           ;mrf49xa.c: 127: LATAbits.LATA5 = 1;
  2803  00CF  168C               	bsf	12,5	;volatile
  2804                           
  2805                           ;mrf49xa.c: 129: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { _delay(40000); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val)
      +                          ; } };
  2806  00D0  0020               	movlb	0	; select bank0
  2807  00D1  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2808  00D2  01A9               	clrf	Mrf49xaInit@k
  2809  00D3  3185               	movlp	high __stringtab
  2810  00D4  000A               	callw
  2811  00D5  3180               	pagesel	$	;select current page
  2812  00D6  3800               	iorlw	0
  2813  00D7  1903               	btfsc	3,2
  2814  00D8  2900               	goto	l1814
  2815  00D9                     l1804:	
  2816  00D9  3529               	lslf	Mrf49xaInit@k,w
  2817  00DA  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  2818  00DB  3185               	movlp	high __stringtab
  2819  00DC  000A               	callw
  2820  00DD  3180               	pagesel	$	;select current page
  2821  00DE  3A55               	xorlw	85
  2822  00DF  1D03               	skipz
  2823  00E0  28EB               	goto	l1808
  2824  00E1  3034               	movlw	52
  2825  00E2  00A7               	movwf	??_Mrf49xaInit+1
  2826  00E3  30F1               	movlw	241
  2827  00E4  00A6               	movwf	??_Mrf49xaInit
  2828  00E5                     u1857:	
  2829  00E5  0BA6               	decfsz	??_Mrf49xaInit,f
  2830  00E6  28E5               	goto	u1857
  2831  00E7  0BA7               	decfsz	??_Mrf49xaInit+1,f
  2832  00E8  28E5               	goto	u1857
  2833  00E9  28EA               	nop2
  2834  00EA  28F7               	goto	l1810
  2835  00EB                     l1808:	
  2836  00EB  3529               	lslf	Mrf49xaInit@k,w
  2837  00EC  3E05               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  2838  00ED  3185               	movlp	high __stringtab
  2839  00EE  000A               	callw
  2840  00EF  3180               	pagesel	$	;select current page
  2841  00F0  00A1               	movwf	Mrf49TxCmd@val
  2842  00F1  3529               	lslf	Mrf49xaInit@k,w
  2843  00F2  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  2844  00F3  3185               	movlp	high __stringtab
  2845  00F4  000A               	callw
  2846  00F5  3180               	pagesel	$	;select current page
  2847  00F6  2201               	fcall	_Mrf49TxCmd
  2848  00F7                     l1810:	
  2849  00F7  0020               	movlb	0	; select bank0
  2850  00F8  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2851  00F9  0AA9               	incf	Mrf49xaInit@k,f
  2852  00FA  3185               	movlp	high __stringtab
  2853  00FB  000A               	callw
  2854  00FC  3180               	pagesel	$	;select current page
  2855  00FD  0229               	subwf	Mrf49xaInit@k,w
  2856  00FE  1C03               	skipc
  2857  00FF  28D9               	goto	l1804
  2858  0100                     l1814:	
  2859                           
  2860                           ;mrf49xa.c: 131: Mrf49xaModeRx();
  2861  0100  21D7  3180         	fcall	_Mrf49xaModeRx
  2862  0102                     l1818:	
  2863                           ;mrf49xa.c: 133: while(PORTAbits.RA2 == 0)
  2864                           
  2865  0102  0020               	movlb	0	; select bank0
  2866  0103  190C               	btfsc	12,2	;volatile
  2867  0104  0008               	return
  2868                           
  2869                           ;mrf49xa.c: 134: Mrf49xaServe();
  2870  0105  2108  3180         	fcall	_Mrf49xaServe
  2871  0107  2902               	goto	l1818
  2872  0108                     __end_of_Mrf49xaInit:	
  2873  0108                     __ptext8:	
  2874 ;; *************** function _Mrf49xaServe *****************
  2875 ;; Defined at:
  2876 ;;		line 4 in file "../../../src/devices/mrf49xa_data.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  data            1    5[BANK0 ] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      unsigned char 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 1E/0
  2887 ;;		On exit  : 1F/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2890 ;;      Params:         0       0       0       0
  2891 ;;      Locals:         0       1       0       0
  2892 ;;      Temps:          0       1       0       0
  2893 ;;      Totals:         0       2       0       0
  2894 ;;Total ram usage:        2 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    8
  2897 ;; This function calls:
  2898 ;;		_Mrf49RxByte
  2899 ;;		_Mrf49RxSts
  2900 ;;		_Mrf49TxByte
  2901 ;;		_Mrf49xaModeRx
  2902 ;; This function is called by:
  2903 ;;		_Mrf49xaInit
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function _Mrf49xaServe
  2909  0108                     _Mrf49xaServe:	
  2910                           
  2911                           ;mrf49xa_data.c: 6: uint8_t data;
  2912                           ;mrf49xa_data.c: 12: Mrf49RxSts();
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _Mrf49xaServe: [allreg]
  2916  0108  226F  3180         	fcall	_Mrf49RxSts
  2917                           
  2918                           ;mrf49xa_data.c: 17: }
  2919                           ;mrf49xa_data.c: 20: if (mrf49Status.flags.msb.overflow == 1)
  2920                           
  2921                           ;mrf49xa_data.c: 15: {
  2922  010A  0020               	movlb	0	; select bank0
  2923  010B  1AAA               	btfsc	_mrf49Status,5
  2924  010C  2917               	goto	l1658
  2925  010D  2922               	goto	l391
  2926  010E                     l1652:	
  2927                           
  2928                           ;mrf49xa_data.c: 25: case RECV_DATA:
  2929                           ;mrf49xa_data.c: 26: case RECV_TIMEOUT:
  2930                           ;mrf49xa_data.c: 29: data = Mrf49RxByte();
  2931  010E  21D5  3180         	fcall	_Mrf49RxByte
  2932  0110  00A5               	movwf	Mrf49xaServe@data
  2933                           
  2934                           ;mrf49xa_data.c: 30: data = Mrf49RxByte();
  2935  0111  21D5  3180         	fcall	_Mrf49RxByte
  2936  0113  00A5               	movwf	Mrf49xaServe@data
  2937                           
  2938                           ;mrf49xa_data.c: 33: Mrf49xaModeRx();
  2939  0114  21D7  3180         	fcall	_Mrf49xaModeRx
  2940                           
  2941                           ;mrf49xa_data.c: 37: break;
  2942  0116  2922               	goto	l391
  2943  0117                     l1658:	
  2944  0117  0021               	movlb	1	; select bank1
  2945  0118  0820               	movf	_rfTrcvStatus^(0+128),w
  2946                           
  2947                           ; Switch size 1, requested type "speed"
  2948                           ; Number of cases is 4, Range of values is 0 to 3
  2949                           ; switch strategies available:
  2950                           ; Name         Instructions Cycles
  2951                           ; direct_byte           14     6 (fixed)
  2952                           ; simple_byte           13     7 (average)
  2953                           ; jumptable            260     6 (fixed)
  2954                           ;	Chosen strategy is direct_byte
  2955  0119  0084               	movwf	4
  2956  011A  3004               	movlw	4
  2957  011B  0204               	subwf	4,w
  2958  011C  1803               	skipnc
  2959  011D  2922               	goto	l391
  2960  011E  3185               	movlp	high S2264
  2961  011F  3504               	lslf	4,w
  2962  0120  3E38               	addlw	low S2264
  2963  0121  0082               	movwf	2
  2964  0122                     l391:	
  2965                           
  2966                           ;mrf49xa_data.c: 45: }
  2967                           ;mrf49xa_data.c: 54: if (mrf49Status.flags.msb.fifoTxRx == 1)
  2968  0122  0020               	movlb	0	; select bank0
  2969  0123  1BAA               	btfsc	_mrf49Status,7
  2970  0124  29BF               	goto	l1740
  2971  0125  29CB               	goto	l1742
  2972  0126                     l1662:	
  2973                           
  2974                           ;mrf49xa_data.c: 60: data = Mrf49RxByte();
  2975  0126  21D5  3180         	fcall	_Mrf49RxByte
  2976  0128  00A5               	movwf	Mrf49xaServe@data
  2977                           
  2978                           ;mrf49xa_data.c: 64: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  2979  0129  1BAB               	btfsc	_mrf49Status+1,7
  2980  012A  292E               	goto	l1668
  2981  012B                     l1666:	
  2982                           
  2983                           ;mrf49xa_data.c: 65: {
  2984                           ;mrf49xa_data.c: 66: Mrf49xaModeRx();
  2985  012B  21D7  3180         	fcall	_Mrf49xaModeRx
  2986                           
  2987                           ;mrf49xa_data.c: 67: break;
  2988  012D  29CB               	goto	l1742
  2989  012E                     l1668:	
  2990                           
  2991                           ;mrf49xa_data.c: 68: }
  2992                           ;mrf49xa_data.c: 70: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  2993  012E  0021               	movlb	1	; select bank1
  2994  012F  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  2995  0130  1D03               	skipz
  2996  0131  2934               	goto	l1672
  2997  0132  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  2998  0133  2938               	goto	L1
  2999  0134                     l1672:	
  3000                           
  3001                           ;mrf49xa_data.c: 71: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3002  0134  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3003  0135  1D03               	skipz
  3004  0136  292B               	goto	l1666
  3005  0137  30D1               	movlw	(_rfTrcvStatus+49)& (0+255)
  3006  0138                     L1:	
  3007  0138  00E9               	movwf	(_rfTrcvStatus+73)^(0+128)
  3008                           
  3009                           ;mrf49xa_data.c: 78: }
  3010                           ;mrf49xa_data.c: 79: rfTrcvStatus.hwRx->packet.size = data;
  3011  0139  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  3012  013A  0086               	movwf	6
  3013  013B  0187               	clrf	7
  3014  013C  0020               	movlb	0	; select bank0
  3015  013D  0825               	movf	Mrf49xaServe@data,w
  3016  013E  0081               	movwf	1
  3017                           
  3018                           ;mrf49xa_data.c: 80: rfTrcvStatus.hwRx->crc = 0;
  3019  013F  0021               	movlb	1	; select bank1
  3020  0140  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  3021  0141  3E16               	addlw	22
  3022  0142  0086               	movwf	6
  3023  0143  0181               	clrf	1
  3024                           
  3025                           ;mrf49xa_data.c: 81: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3026  0144  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  3027  0145  0086               	movwf	6
  3028  0146  3002               	movlw	2
  3029  0147  0081               	movwf	1
  3030                           
  3031                           ;mrf49xa_data.c: 83: rfTrcvStatus.state = RECV_DATA;
  3032  0148  01A0               	clrf	_rfTrcvStatus^(0+128)
  3033  0149  0AA0               	incf	_rfTrcvStatus^(0+128),f
  3034                           
  3035                           ;mrf49xa_data.c: 84: rfTrcvStatus.hwByte = 1;
  3036  014A  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  3037  014B  297B               	goto	L2
  3038  014C                     l1688:	
  3039                           ;mrf49xa_data.c: 86: break;
  3040                           
  3041                           
  3042                           ;mrf49xa_data.c: 90: data = Mrf49RxByte();
  3043  014C  21D5  3180         	fcall	_Mrf49RxByte
  3044  014E  00A5               	movwf	Mrf49xaServe@data
  3045                           
  3046                           ;mrf49xa_data.c: 94: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3047  014F  1BAB               	btfsc	_mrf49Status+1,7
  3048  0150  2958               	goto	l1696
  3049                           
  3050                           ;mrf49xa_data.c: 95: {
  3051                           ;mrf49xa_data.c: 96: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3052  0151  0021               	movlb	1	; select bank1
  3053  0152  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  3054  0153  0086               	movwf	6
  3055  0154  3003               	movlw	3
  3056  0155  0187               	clrf	7
  3057  0156  0081               	movwf	1
  3058  0157  292B               	goto	l1666
  3059  0158                     l1696:	
  3060                           
  3061                           ;mrf49xa_data.c: 99: }
  3062                           ;mrf49xa_data.c: 101: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3063  0158  0021               	movlb	1	; select bank1
  3064  0159  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  3065  015A  0086               	movwf	6
  3066  015B  0187               	clrf	7
  3067  015C  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3068  015D  0601               	xorwf	1,w
  3069  015E  1D03               	skipz
  3070  015F  2971               	goto	l1706
  3071                           
  3072                           ;mrf49xa_data.c: 102: {
  3073                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->crc = data;
  3074  0160  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  3075  0161  3E16               	addlw	22
  3076  0162  0086               	movwf	6
  3077  0163  0020               	movlb	0	; select bank0
  3078  0164  0825               	movf	Mrf49xaServe@data,w
  3079  0165  0081               	movwf	1
  3080                           
  3081                           ;mrf49xa_data.c: 107: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3082  0166  0021               	movlb	1	; select bank1
  3083  0167  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  3084  0168  0086               	movwf	6
  3085  0169  3003               	movlw	3
  3086  016A  0081               	movwf	1
  3087                           
  3088                           ;mrf49xa_data.c: 110: Mrf49xaModeRx();
  3089  016B  21D7  3180         	fcall	_Mrf49xaModeRx
  3090                           
  3091                           ;mrf49xa_data.c: 113: LATCbits.LATC2 = 1;
  3092  016D  0022               	movlb	2	; select bank2
  3093  016E  150E               	bsf	14,2	;volatile
  3094                           
  3095                           ;mrf49xa_data.c: 114: LATCbits.LATC2 = 0;
  3096  016F  110E               	bcf	14,2	;volatile
  3097                           
  3098                           ;mrf49xa_data.c: 116: }
  3099  0170  29CB               	goto	l1742
  3100  0171                     l1706:	
  3101                           
  3102                           ;mrf49xa_data.c: 117: else
  3103                           ;mrf49xa_data.c: 118: {
  3104                           ;mrf49xa_data.c: 119: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3105  0171  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3106  0172  0769               	addwf	(_rfTrcvStatus+73)^(0+128),w
  3107  0173  0020               	movlb	0	; select bank0
  3108  0174  00A4               	movwf	??_Mrf49xaServe
  3109  0175  0A24               	incf	??_Mrf49xaServe,w
  3110  0176  0086               	movwf	6
  3111  0177  0187               	clrf	7
  3112  0178  0825               	movf	Mrf49xaServe@data,w
  3113  0179  0081               	movwf	1
  3114  017A  0021               	movlb	1	; select bank1
  3115  017B                     L2:	
  3116  017B  0AEA               	incf	(_rfTrcvStatus^(0+128)+74),f
  3117  017C  29CB               	goto	l1742
  3118  017D                     l1710:	
  3119                           
  3120                           ;mrf49xa_data.c: 125: rfTrcvStatus.hwByte++;
  3121  017D  0AEA               	incf	(_rfTrcvStatus^(0+128)+74),f
  3122                           
  3123                           ;mrf49xa_data.c: 127: switch (rfTrcvStatus.hwByte)
  3124  017E  29AE               	goto	l1736
  3125  017F                     l1712:	
  3126                           
  3127                           ;mrf49xa_data.c: 130: Mrf49TxByte(0x2D);
  3128  017F  302D               	movlw	45
  3129  0180  21D0  3180         	fcall	_Mrf49TxByte
  3130                           
  3131                           ;mrf49xa_data.c: 131: break;
  3132  0182  29CB               	goto	l1742
  3133  0183                     l1714:	
  3134                           
  3135                           ;mrf49xa_data.c: 134: Mrf49TxByte(0xD4);
  3136  0183  30D4               	movlw	212
  3137  0184  21D0  3180         	fcall	_Mrf49TxByte
  3138                           
  3139                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = -1;
  3140  0186  30FF               	movlw	255
  3141  0187  0021               	movlb	1	; select bank1
  3142  0188  299D               	goto	L3
  3143  0189                     l1718:	
  3144                           ;mrf49xa_data.c: 136: break;
  3145                           
  3146                           
  3147                           ;mrf49xa_data.c: 140: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3148  0189  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3149  018A  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3150  018B  0086               	movwf	6
  3151  018C  0187               	clrf	7
  3152  018D  0801               	movf	1,w
  3153  018E  21D0  3180         	fcall	_Mrf49TxByte
  3154                           
  3155                           ;mrf49xa_data.c: 141: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStat
      +                          us.txPacket.raw[rfTrcvStatus.hwByte];
  3156  0190  0021               	movlb	1	; select bank1
  3157  0191  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3158  0192  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  3159  0193  0086               	movwf	6
  3160  0194  0187               	clrf	7
  3161  0195  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3162  0196  0601               	xorwf	1,w
  3163  0197  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  3164                           
  3165                           ;mrf49xa_data.c: 142: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3166  0198  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3167  0199  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  3168  019A  1D03               	skipz
  3169  019B  29CB               	goto	l1742
  3170                           
  3171                           ;mrf49xa_data.c: 143: {
  3172                           ;mrf49xa_data.c: 144: rfTrcvStatus.hwByte = 48;
  3173  019C  3030               	movlw	48
  3174  019D                     L3:	
  3175  019D  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  3176  019E  29CB               	goto	l1742
  3177  019F                     l1726:	
  3178                           
  3179                           ;mrf49xa_data.c: 149: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3180  019F  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  3181  01A0  21D0  3180         	fcall	_Mrf49TxByte
  3182                           
  3183                           ;mrf49xa_data.c: 150: break;
  3184  01A2  29CB               	goto	l1742
  3185  01A3                     l1728:	
  3186                           
  3187                           ;mrf49xa_data.c: 153: Mrf49TxByte(0x00);
  3188  01A3  3000               	movlw	0
  3189  01A4  21D0  3180         	fcall	_Mrf49TxByte
  3190                           
  3191                           ;mrf49xa_data.c: 154: break;
  3192  01A6  29CB               	goto	l1742
  3193  01A7                     l1730:	
  3194                           
  3195                           ;mrf49xa_data.c: 157: Mrf49TxByte(0x00);
  3196  01A7  3000               	movlw	0
  3197  01A8  21D0  3180         	fcall	_Mrf49TxByte
  3198                           
  3199                           ;mrf49xa_data.c: 158: Mrf49xaModeRx();
  3200  01AA  21D7  3180         	fcall	_Mrf49xaModeRx
  3201                           
  3202                           ;mrf49xa_data.c: 159: rfTrcvStatus.txPacket.state = PKT_FREE;
  3203  01AC  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  3204                           
  3205                           ;mrf49xa_data.c: 160: break;
  3206  01AD  29CB               	goto	l1742
  3207  01AE                     l1736:	
  3208  01AE  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3209                           
  3210                           ; Switch size 1, requested type "speed"
  3211                           ; Number of cases is 5, Range of values is 49 to 101
  3212                           ; switch strategies available:
  3213                           ; Name         Instructions Cycles
  3214                           ; simple_byte           16     9 (average)
  3215                           ; direct_byte          115     9 (fixed)
  3216                           ; jumptable            263     9 (fixed)
  3217                           ;	Chosen strategy is simple_byte
  3218  01AF  3A31               	xorlw	49	; case 49
  3219  01B0  1903               	skipnz
  3220  01B1  299F               	goto	l1726
  3221  01B2  3A03               	xorlw	3	; case 50
  3222  01B3  1903               	skipnz
  3223  01B4  29A3               	goto	l1728
  3224  01B5  3A01               	xorlw	1	; case 51
  3225  01B6  1903               	skipnz
  3226  01B7  29A7               	goto	l1730
  3227  01B8  3A57               	xorlw	87	; case 100
  3228  01B9  1903               	skipnz
  3229  01BA  297F               	goto	l1712
  3230  01BB  3A01               	xorlw	1	; case 101
  3231  01BC  1903               	skipnz
  3232  01BD  2983               	goto	l1714
  3233  01BE  2989               	goto	l1718
  3234  01BF                     l1740:	
  3235  01BF  0021               	movlb	1	; select bank1
  3236  01C0  0820               	movf	_rfTrcvStatus^(0+128),w
  3237                           
  3238                           ; Switch size 1, requested type "speed"
  3239                           ; Number of cases is 3, Range of values is 0 to 3
  3240                           ; switch strategies available:
  3241                           ; Name         Instructions Cycles
  3242                           ; simple_byte           10     6 (average)
  3243                           ; direct_byte           14     6 (fixed)
  3244                           ; jumptable            260     6 (fixed)
  3245                           ;	Chosen strategy is simple_byte
  3246  01C1  3A00               	xorlw	0	; case 0
  3247  01C2  1903               	skipnz
  3248  01C3  2926               	goto	l1662
  3249  01C4  3A01               	xorlw	1	; case 1
  3250  01C5  1903               	skipnz
  3251  01C6  294C               	goto	l1688
  3252  01C7  3A02               	xorlw	2	; case 3
  3253  01C8  1903               	skipnz
  3254  01C9  297D               	goto	l1710
  3255  01CA  29CB               	goto	l1742
  3256  01CB                     l1742:	
  3257                           
  3258                           ;mrf49xa_data.c: 166: }
  3259                           ;mrf49xa_data.c: 180: return PORTAbits.RA2 == 1 ? 1 : 0;
  3260  01CB  0020               	movlb	0	; select bank0
  3261  01CC  0C0C               	rrf	12,w	;volatile
  3262  01CD  0C89               	rrf	9,f
  3263  01CE  3901               	andlw	1
  3264  01CF  0008               	return
  3265  01D0                     __end_of_Mrf49xaServe:	
  3266  01D0                     __ptext10:	
  3267 ;; *************** function _Mrf49TxByte *****************
  3268 ;; Defined at:
  3269 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  byte            1    wreg     unsigned char 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  byte            1    3[BANK0 ] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;		None               void
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, pclath, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 1E/1
  3280 ;;		On exit  : 1F/2
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3283 ;;      Params:         0       0       0       0
  3284 ;;      Locals:         0       1       0       0
  3285 ;;      Temps:          0       0       0       0
  3286 ;;      Totals:         0       1       0       0
  3287 ;;Total ram usage:        1 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    7
  3290 ;; This function calls:
  3291 ;;		_Mrf49TxCmd
  3292 ;; This function is called by:
  3293 ;;		_Mrf49xaServe
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           
  3298                           ;psect for function _Mrf49TxByte
  3299  01D0                     _Mrf49TxByte:	
  3300                           
  3301                           ;incstack = 0
  3302                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  3303                           ;Mrf49TxByte@byte stored from wreg
  3304  01D0  0020               	movlb	0	; select bank0
  3305  01D1  00A3               	movwf	Mrf49TxByte@byte
  3306                           
  3307                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  3308  01D2  00A1               	movwf	Mrf49TxCmd@val
  3309  01D3  30B8               	movlw	184
  3310  01D4  2A01               	ljmp	_Mrf49TxCmd
  3311  01D5                     __end_of_Mrf49TxByte:	
  3312  01D5                     __ptext13:	
  3313 ;; *************** function _Mrf49RxByte *****************
  3314 ;; Defined at:
  3315 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      unsigned char 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0, pclath, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 1E/1
  3326 ;;		On exit  : 1F/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3329 ;;      Params:         0       0       0       0
  3330 ;;      Locals:         0       0       0       0
  3331 ;;      Temps:          0       0       0       0
  3332 ;;      Totals:         0       0       0       0
  3333 ;;Total ram usage:        0 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    7
  3336 ;; This function calls:
  3337 ;;		_Mrf49RxCmd
  3338 ;; This function is called by:
  3339 ;;		_Mrf49xaServe
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _Mrf49RxByte
  3345  01D5                     _Mrf49RxByte:	
  3346                           
  3347                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3351  01D5  30B0               	movlw	176
  3352  01D6  289F               	ljmp	_Mrf49RxCmd
  3353  01D7                     __end_of_Mrf49RxByte:	
  3354  01D7                     __ptext9:	
  3355 ;; *************** function _Mrf49xaModeRx *****************
  3356 ;; Defined at:
  3357 ;;		line 73 in file "../../../src/devices/mrf49xa.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;  k               1    3[BANK0 ] unsigned char 
  3362 ;; Return value:  Size  Location     Type
  3363 ;;		None               void
  3364 ;; Registers used:
  3365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3366 ;; Tracked objects:
  3367 ;;		On entry : 1C/0
  3368 ;;		On exit  : 1F/1
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3371 ;;      Params:         0       0       0       0
  3372 ;;      Locals:         0       1       0       0
  3373 ;;      Temps:          0       0       0       0
  3374 ;;      Totals:         0       1       0       0
  3375 ;;Total ram usage:        1 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    7
  3378 ;; This function calls:
  3379 ;;		_Mrf49TxCmd
  3380 ;; This function is called by:
  3381 ;;		_Mrf49xaInit
  3382 ;;		_Mrf49xaServe
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           
  3387                           ;psect for function _Mrf49xaModeRx
  3388  01D7                     _Mrf49xaModeRx:	
  3389                           
  3390                           ;mrf49xa.c: 75: UI08_t k;
  3391                           ;mrf49xa.c: 76: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _Mrf49xaModeRx: [allreg]
  3395  01D7  0020               	movlb	0	; select bank0
  3396  01D8  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3397  01D9  01A3               	clrf	Mrf49xaModeRx@k
  3398  01DA  3185               	movlp	high __stringtab
  3399  01DB  000A               	callw
  3400  01DC  3180               	pagesel	$	;select current page
  3401  01DD  3800               	iorlw	0
  3402  01DE  1903               	btfsc	3,2
  3403  01DF  29FD               	goto	l1764
  3404  01E0                     l1756:	
  3405  01E0  3523               	lslf	Mrf49xaModeRx@k,w
  3406  01E1  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3407  01E2  3185               	movlp	high __stringtab
  3408  01E3  000A               	callw
  3409  01E4  3180               	pagesel	$	;select current page
  3410  01E5  3A55               	xorlw	85
  3411  01E6  1903               	skipnz
  3412  01E7  29F4               	goto	l1760
  3413  01E8  3523               	lslf	Mrf49xaModeRx@k,w
  3414  01E9  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3415  01EA  3185               	movlp	high __stringtab
  3416  01EB  000A               	callw
  3417  01EC  3180               	pagesel	$	;select current page
  3418  01ED  00A1               	movwf	Mrf49TxCmd@val
  3419  01EE  3523               	lslf	Mrf49xaModeRx@k,w
  3420  01EF  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3421  01F0  3185               	movlp	high __stringtab
  3422  01F1  000A               	callw
  3423  01F2  3180               	pagesel	$	;select current page
  3424  01F3  2201               	fcall	_Mrf49TxCmd
  3425  01F4                     l1760:	
  3426  01F4  0020               	movlb	0	; select bank0
  3427  01F5  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3428  01F6  0AA3               	incf	Mrf49xaModeRx@k,f
  3429  01F7  3185               	movlp	high __stringtab
  3430  01F8  000A               	callw
  3431  01F9  3180               	pagesel	$	;select current page
  3432  01FA  0223               	subwf	Mrf49xaModeRx@k,w
  3433  01FB  1C03               	skipc
  3434  01FC  29E0               	goto	l1756
  3435  01FD                     l1764:	
  3436                           
  3437                           ;mrf49xa.c: 78: rfTrcvStatus.state = RECV_IDLE;
  3438  01FD  0021               	movlb	1	; select bank1
  3439  01FE  01A0               	clrf	_rfTrcvStatus^(0+128)
  3440                           
  3441                           ;mrf49xa.c: 79: rfTrcvStatus.hwByte = 0;
  3442  01FF  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  3443  0200  0008               	return
  3444  0201                     __end_of_Mrf49xaModeRx:	
  3445  0201                     __ptext11:	
  3446 ;; *************** function _Mrf49TxCmd *****************
  3447 ;; Defined at:
  3448 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  cmd             1    wreg     unsigned char 
  3451 ;;  val             1    1[BANK0 ] unsigned char 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  cmd             1    2[BANK0 ] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;		None               void
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, pclath, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 1F/0
  3460 ;;		On exit  : 1F/2
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3463 ;;      Params:         0       1       0       0
  3464 ;;      Locals:         0       1       0       0
  3465 ;;      Temps:          0       0       0       0
  3466 ;;      Totals:         0       2       0       0
  3467 ;;Total ram usage:        2 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    6
  3470 ;; This function calls:
  3471 ;;		_Mrf49SpiTx
  3472 ;; This function is called by:
  3473 ;;		_Mrf49xaModeRx
  3474 ;;		_Mrf49xaModeTx
  3475 ;;		_Mrf49xaInit
  3476 ;;		_Mrf49TxByte
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           
  3481                           ;psect for function _Mrf49TxCmd
  3482  0201                     _Mrf49TxCmd:	
  3483                           
  3484                           ;incstack = 0
  3485                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3486                           ;Mrf49TxCmd@cmd stored from wreg
  3487  0201  00A2               	movwf	Mrf49TxCmd@cmd
  3488                           
  3489                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  3490  0202  0022               	movlb	2	; select bank2
  3491  0203  130E               	bcf	14,6	;volatile
  3492                           
  3493                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3494  0204  0020               	movlb	0	; select bank0
  3495  0205  0822               	movf	Mrf49TxCmd@cmd,w
  3496  0206  220D  3180         	fcall	_Mrf49SpiTx
  3497                           
  3498                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3499  0208  0020               	movlb	0	; select bank0
  3500  0209  0821               	movf	Mrf49TxCmd@val,w
  3501  020A  220D               	fcall	_Mrf49SpiTx
  3502                           
  3503                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  3504  020B  170E               	bsf	14,6	;volatile
  3505  020C  0008               	return
  3506  020D                     __end_of_Mrf49TxCmd:	
  3507  020D                     __ptext15:	
  3508 ;; *************** function _Mrf49SpiTx *****************
  3509 ;; Defined at:
  3510 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  byte            1    wreg     unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  byte            1    0[BANK0 ] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg
  3519 ;; Tracked objects:
  3520 ;;		On entry : 1F/0
  3521 ;;		On exit  : 1F/2
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3524 ;;      Params:         0       0       0       0
  3525 ;;      Locals:         0       1       0       0
  3526 ;;      Temps:          0       0       0       0
  3527 ;;      Totals:         0       1       0       0
  3528 ;;Total ram usage:        1 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    5
  3531 ;; This function calls:
  3532 ;;		Nothing
  3533 ;; This function is called by:
  3534 ;;		_Mrf49TxCmd
  3535 ;;		_Mrf49RxCmd
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           
  3540                           ;psect for function _Mrf49SpiTx
  3541  020D                     _Mrf49SpiTx:	
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _Mrf49SpiTx: [wreg]
  3545                           ;Mrf49SpiTx@byte stored from wreg
  3546  020D  00A0               	movwf	Mrf49SpiTx@byte
  3547                           
  3548                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  3549  020E  1FA0               	btfss	Mrf49SpiTx@byte,7
  3550  020F  2A13               	goto	l205
  3551  0210  0022               	movlb	2	; select bank2
  3552  0211  178D               	bsf	13,7	;volatile
  3553  0212  2A15               	goto	l206
  3554  0213                     l205:	
  3555  0213  0022               	movlb	2	; select bank2
  3556  0214  138D               	bcf	13,7	;volatile
  3557  0215                     l206:	
  3558  0215  178E               	bsf	14,7	;volatile
  3559  0216  0000               	nop	;# 
  3560  0217  0022               	movlb	2	; select bank2
  3561  0218  138E               	bcf	14,7	;volatile
  3562  0219  0020               	movlb	0	; select bank0
  3563  021A  1F20               	btfss	Mrf49SpiTx@byte,6
  3564  021B  2A1F               	goto	l209
  3565  021C  0022               	movlb	2	; select bank2
  3566  021D  178D               	bsf	13,7	;volatile
  3567  021E  2A21               	goto	l210
  3568  021F                     l209:	
  3569  021F  0022               	movlb	2	; select bank2
  3570  0220  138D               	bcf	13,7	;volatile
  3571  0221                     l210:	
  3572  0221  178E               	bsf	14,7	;volatile
  3573  0222  0000               	nop	;# 
  3574  0223  0022               	movlb	2	; select bank2
  3575  0224  138E               	bcf	14,7	;volatile
  3576  0225  0020               	movlb	0	; select bank0
  3577  0226  1EA0               	btfss	Mrf49SpiTx@byte,5
  3578  0227  2A2B               	goto	l213
  3579  0228  0022               	movlb	2	; select bank2
  3580  0229  178D               	bsf	13,7	;volatile
  3581  022A  2A2D               	goto	l214
  3582  022B                     l213:	
  3583  022B  0022               	movlb	2	; select bank2
  3584  022C  138D               	bcf	13,7	;volatile
  3585  022D                     l214:	
  3586  022D  178E               	bsf	14,7	;volatile
  3587  022E  0000               	nop	;# 
  3588  022F  0022               	movlb	2	; select bank2
  3589  0230  138E               	bcf	14,7	;volatile
  3590  0231  0020               	movlb	0	; select bank0
  3591  0232  1E20               	btfss	Mrf49SpiTx@byte,4
  3592  0233  2A37               	goto	l217
  3593  0234  0022               	movlb	2	; select bank2
  3594  0235  178D               	bsf	13,7	;volatile
  3595  0236  2A39               	goto	l218
  3596  0237                     l217:	
  3597  0237  0022               	movlb	2	; select bank2
  3598  0238  138D               	bcf	13,7	;volatile
  3599  0239                     l218:	
  3600  0239  178E               	bsf	14,7	;volatile
  3601  023A  0000               	nop	;# 
  3602  023B  0022               	movlb	2	; select bank2
  3603  023C  138E               	bcf	14,7	;volatile
  3604  023D  0020               	movlb	0	; select bank0
  3605  023E  1DA0               	btfss	Mrf49SpiTx@byte,3
  3606  023F  2A43               	goto	l221
  3607  0240  0022               	movlb	2	; select bank2
  3608  0241  178D               	bsf	13,7	;volatile
  3609  0242  2A45               	goto	l222
  3610  0243                     l221:	
  3611  0243  0022               	movlb	2	; select bank2
  3612  0244  138D               	bcf	13,7	;volatile
  3613  0245                     l222:	
  3614  0245  178E               	bsf	14,7	;volatile
  3615  0246  0000               	nop	;# 
  3616  0247  0022               	movlb	2	; select bank2
  3617  0248  138E               	bcf	14,7	;volatile
  3618  0249  0020               	movlb	0	; select bank0
  3619  024A  1D20               	btfss	Mrf49SpiTx@byte,2
  3620  024B  2A4F               	goto	l225
  3621  024C  0022               	movlb	2	; select bank2
  3622  024D  178D               	bsf	13,7	;volatile
  3623  024E  2A51               	goto	l226
  3624  024F                     l225:	
  3625  024F  0022               	movlb	2	; select bank2
  3626  0250  138D               	bcf	13,7	;volatile
  3627  0251                     l226:	
  3628  0251  178E               	bsf	14,7	;volatile
  3629  0252  0000               	nop	;# 
  3630  0253  0022               	movlb	2	; select bank2
  3631  0254  138E               	bcf	14,7	;volatile
  3632  0255  0020               	movlb	0	; select bank0
  3633  0256  1CA0               	btfss	Mrf49SpiTx@byte,1
  3634  0257  2A5B               	goto	l229
  3635  0258  0022               	movlb	2	; select bank2
  3636  0259  178D               	bsf	13,7	;volatile
  3637  025A  2A5D               	goto	l230
  3638  025B                     l229:	
  3639  025B  0022               	movlb	2	; select bank2
  3640  025C  138D               	bcf	13,7	;volatile
  3641  025D                     l230:	
  3642  025D  178E               	bsf	14,7	;volatile
  3643  025E  0000               	nop	;# 
  3644  025F  0022               	movlb	2	; select bank2
  3645  0260  138E               	bcf	14,7	;volatile
  3646  0261  0020               	movlb	0	; select bank0
  3647  0262  1C20               	btfss	Mrf49SpiTx@byte,0
  3648  0263  2A67               	goto	l233
  3649  0264  0022               	movlb	2	; select bank2
  3650  0265  178D               	bsf	13,7	;volatile
  3651  0266  2A69               	goto	l234
  3652  0267                     l233:	
  3653  0267  0022               	movlb	2	; select bank2
  3654  0268  138D               	bcf	13,7	;volatile
  3655  0269                     l234:	
  3656  0269  178E               	bsf	14,7	;volatile
  3657  026A  0000               	nop	;# 
  3658  026B  0022               	movlb	2	; select bank2
  3659  026C  138E               	bcf	14,7	;volatile
  3660                           
  3661                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  3662  026D  138D               	bcf	13,7	;volatile
  3663  026E  0008               	return
  3664  026F                     __end_of_Mrf49SpiTx:	
  3665  026F                     __ptext12:	
  3666 ;; *************** function _Mrf49RxSts *****************
  3667 ;; Defined at:
  3668 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;		None               void
  3675 ;; Registers used:
  3676 ;;		wreg, status,2, pclath, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 1E/0
  3679 ;;		On exit  : 1F/2
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3682 ;;      Params:         0       0       0       0
  3683 ;;      Locals:         0       0       0       0
  3684 ;;      Temps:          0       0       0       0
  3685 ;;      Totals:         0       0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    6
  3689 ;; This function calls:
  3690 ;;		_Mrf49SpiRx
  3691 ;; This function is called by:
  3692 ;;		_Mrf49xaTick
  3693 ;;		_Mrf49xaServe
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           
  3698                           ;psect for function _Mrf49RxSts
  3699  026F                     _Mrf49RxSts:	
  3700                           
  3701                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  3705  026F  120B               	bcf	11,4	;volatile
  3706                           
  3707                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  3708  0270  0022               	movlb	2	; select bank2
  3709  0271  130E               	bcf	14,6	;volatile
  3710                           
  3711                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  3712  0272  227B  3180         	fcall	_Mrf49SpiRx
  3713  0274  00AA               	movwf	_mrf49Status
  3714                           
  3715                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  3716  0275  227B               	fcall	_Mrf49SpiRx
  3717  0276  00AB               	movwf	_mrf49Status+1
  3718                           
  3719                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  3720  0277  0022               	movlb	2	; select bank2
  3721  0278  170E               	bsf	14,6	;volatile
  3722                           
  3723                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  3724  0279  160B               	bsf	11,4	;volatile
  3725  027A  0008               	return
  3726  027B                     __end_of_Mrf49RxSts:	
  3727  027B                     __ptext16:	
  3728 ;; *************** function _Mrf49SpiRx *****************
  3729 ;; Defined at:
  3730 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  data            1    0[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      unsigned char 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2
  3739 ;; Tracked objects:
  3740 ;;		On entry : 1D/2
  3741 ;;		On exit  : 1F/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3744 ;;      Params:         0       0       0       0
  3745 ;;      Locals:         0       1       0       0
  3746 ;;      Temps:          0       0       0       0
  3747 ;;      Totals:         0       1       0       0
  3748 ;;Total ram usage:        1 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    5
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_Mrf49RxCmd
  3755 ;;		_Mrf49RxSts
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           
  3760                           ;psect for function _Mrf49SpiRx
  3761  027B                     _Mrf49SpiRx:	
  3762                           
  3763                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  3764                           
  3765                           ;incstack = 0
  3766                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  3767  027B  0020               	movlb	0	; select bank0
  3768  027C  01A0               	clrf	Mrf49SpiRx@data
  3769                           
  3770                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  3771  027D  0022               	movlb	2	; select bank2
  3772  027E  138D               	bcf	13,7	;volatile
  3773  027F  0020               	movlb	0	; select bank0
  3774  0280  1A8E               	btfsc	14,5	;volatile
  3775  0281  17A0               	bsf	Mrf49SpiRx@data,7
  3776  0282  0022               	movlb	2	; select bank2
  3777  0283  178E               	bsf	14,7	;volatile
  3778  0284  0000               	nop	;# 
  3779  0285  0022               	movlb	2	; select bank2
  3780  0286  138E               	bcf	14,7	;volatile
  3781                           
  3782                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3783  0287  0020               	movlb	0	; select bank0
  3784  0288  1A8E               	btfsc	14,5	;volatile
  3785  0289  1720               	bsf	Mrf49SpiRx@data,6
  3786  028A  0022               	movlb	2	; select bank2
  3787  028B  178E               	bsf	14,7	;volatile
  3788  028C  0000               	nop	;# 
  3789  028D  0022               	movlb	2	; select bank2
  3790  028E  138E               	bcf	14,7	;volatile
  3791                           
  3792                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3793  028F  0020               	movlb	0	; select bank0
  3794  0290  1A8E               	btfsc	14,5	;volatile
  3795  0291  16A0               	bsf	Mrf49SpiRx@data,5
  3796  0292  0022               	movlb	2	; select bank2
  3797  0293  178E               	bsf	14,7	;volatile
  3798  0294  0000               	nop	;# 
  3799  0295  0022               	movlb	2	; select bank2
  3800  0296  138E               	bcf	14,7	;volatile
  3801                           
  3802                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3803  0297  0020               	movlb	0	; select bank0
  3804  0298  1A8E               	btfsc	14,5	;volatile
  3805  0299  1620               	bsf	Mrf49SpiRx@data,4
  3806  029A  0022               	movlb	2	; select bank2
  3807  029B  178E               	bsf	14,7	;volatile
  3808  029C  0000               	nop	;# 
  3809  029D  0022               	movlb	2	; select bank2
  3810  029E  138E               	bcf	14,7	;volatile
  3811                           
  3812                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3813  029F  0020               	movlb	0	; select bank0
  3814  02A0  1A8E               	btfsc	14,5	;volatile
  3815  02A1  15A0               	bsf	Mrf49SpiRx@data,3
  3816  02A2  0022               	movlb	2	; select bank2
  3817  02A3  178E               	bsf	14,7	;volatile
  3818  02A4  0000               	nop	;# 
  3819  02A5  0022               	movlb	2	; select bank2
  3820  02A6  138E               	bcf	14,7	;volatile
  3821                           
  3822                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3823  02A7  0020               	movlb	0	; select bank0
  3824  02A8  1A8E               	btfsc	14,5	;volatile
  3825  02A9  1520               	bsf	Mrf49SpiRx@data,2
  3826  02AA  0022               	movlb	2	; select bank2
  3827  02AB  178E               	bsf	14,7	;volatile
  3828  02AC  0000               	nop	;# 
  3829  02AD  0022               	movlb	2	; select bank2
  3830  02AE  138E               	bcf	14,7	;volatile
  3831                           
  3832                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3833  02AF  0020               	movlb	0	; select bank0
  3834  02B0  1A8E               	btfsc	14,5	;volatile
  3835  02B1  14A0               	bsf	Mrf49SpiRx@data,1
  3836  02B2  0022               	movlb	2	; select bank2
  3837  02B3  178E               	bsf	14,7	;volatile
  3838  02B4  0000               	nop	;# 
  3839  02B5  0022               	movlb	2	; select bank2
  3840  02B6  138E               	bcf	14,7	;volatile
  3841                           
  3842                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3843  02B7  0020               	movlb	0	; select bank0
  3844  02B8  1A8E               	btfsc	14,5	;volatile
  3845  02B9  1420               	bsf	Mrf49SpiRx@data,0
  3846  02BA  0022               	movlb	2	; select bank2
  3847  02BB  178E               	bsf	14,7	;volatile
  3848  02BC  0000               	nop	;# 
  3849  02BD  0022               	movlb	2	; select bank2
  3850  02BE  138E               	bcf	14,7	;volatile
  3851                           
  3852                           ;mrf49xa_spi_pic16.c: 40: return data;
  3853  02BF  0020               	movlb	0	; select bank0
  3854  02C0  0820               	movf	Mrf49SpiRx@data,w
  3855  02C1  0008               	return
  3856  02C2                     __end_of_Mrf49SpiRx:	
  3857  02C2                     __ptext18:	
  3858 ;; *************** function _AdcInit *****************
  3859 ;; Defined at:
  3860 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;		None               void
  3867 ;; Registers used:
  3868 ;;		wreg, status,2
  3869 ;; Tracked objects:
  3870 ;;		On entry : 17F/2
  3871 ;;		On exit  : 17F/1
  3872 ;;		Unchanged: 160/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3874 ;;      Params:         0       0       0       0
  3875 ;;      Locals:         0       0       0       0
  3876 ;;      Temps:          0       0       0       0
  3877 ;;      Totals:         0       0       0       0
  3878 ;;Total ram usage:        0 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    5
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_main
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           
  3889                           ;psect for function _AdcInit
  3890  02C2                     _AdcInit:	
  3891                           
  3892                           ;adc16.c: 6: ANSELA = 0;
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in _AdcInit: [wreg+status,2]
  3896  02C2  0023               	movlb	3	; select bank3
  3897  02C3  018C               	clrf	12	;volatile
  3898                           
  3899                           ;adc16.c: 7: ANSELB = 0;
  3900  02C4  018D               	clrf	13	;volatile
  3901                           
  3902                           ;adc16.c: 8: ANSELC = 0;
  3903  02C5  018E               	clrf	14	;volatile
  3904                           
  3905                           ;adc16.c: 10: FVRCON = 0b11100001;
  3906  02C6  30E1               	movlw	225
  3907  02C7  0022               	movlb	2	; select bank2
  3908  02C8  0097               	movwf	23	;volatile
  3909                           
  3910                           ;adc16.c: 12: ADCON2 = 0b00000000;
  3911  02C9  0021               	movlb	1	; select bank1
  3912  02CA  019F               	clrf	31	;volatile
  3913                           
  3914                           ;adc16.c: 13: ADCON1 = 0b11110000;
  3915  02CB  30F0               	movlw	240
  3916  02CC  009E               	movwf	30	;volatile
  3917                           
  3918                           ;adc16.c: 14: ADCON0 = 0b00000000;
  3919  02CD  019D               	clrf	29	;volatile
  3920                           
  3921                           ;adc16.c: 16: ADCON0 = 0b00010011;
  3922  02CE  3013               	movlw	19
  3923  02CF  009D               	movwf	29	;volatile
  3924  02D0  0008               	return
  3925  02D1                     __end_of_AdcInit:	
  3926  02D1                     __ptext17:	
  3927 ;; *************** function _ExtIntInit *****************
  3928 ;; Defined at:
  3929 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;		None               void
  3936 ;; Registers used:
  3937 ;;		None
  3938 ;; Tracked objects:
  3939 ;;		On entry : 17F/1
  3940 ;;		On exit  : 17F/1
  3941 ;;		Unchanged: 160/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3943 ;;      Params:         0       0       0       0
  3944 ;;      Locals:         0       0       0       0
  3945 ;;      Temps:          0       0       0       0
  3946 ;;      Totals:         0       0       0       0
  3947 ;;Total ram usage:        0 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    5
  3950 ;; This function calls:
  3951 ;;		Nothing
  3952 ;; This function is called by:
  3953 ;;		_main
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           
  3958                           ;psect for function _ExtIntInit
  3959  02D1                     _ExtIntInit:	
  3960                           
  3961                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3962                           
  3963                           ;incstack = 0
  3964                           ; Regs used in _ExtIntInit: []
  3965  02D1  1315               	bcf	21,6	;volatile
  3966                           
  3967                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3968  02D2  108B               	bcf	11,1	;volatile
  3969                           
  3970                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3971  02D3  160B               	bsf	11,4	;volatile
  3972                           
  3973                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3974  02D4  178B               	bsf	11,7	;volatile
  3975  02D5  0008               	return
  3976  02D6                     __end_of_ExtIntInit:	
  3977  02D6                     __ptext5:	
  3978 ;; *************** function _Mrf49xaPacketPending *****************
  3979 ;; Defined at:
  3980 ;;		line 3 in file "../../../src/devices/mrf49xa_packet.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      unsigned char 
  3987 ;; Registers used:
  3988 ;;		wreg
  3989 ;; Tracked objects:
  3990 ;;		On entry : 1E/0
  3991 ;;		On exit  : 1F/1
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3994 ;;      Params:         0       0       0       0
  3995 ;;      Locals:         0       0       0       0
  3996 ;;      Temps:          0       0       0       0
  3997 ;;      Totals:         0       0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    5
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_Mrf49xaTick
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           
  4009                           ;psect for function _Mrf49xaPacketPending
  4010  02D6                     _Mrf49xaPacketPending:	
  4011                           
  4012                           ;mrf49xa_packet.c: 5: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  4013                           ;mrf49xa_packet.c: 6: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4014                           
  4015                           ;incstack = 0
  4016                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  4017  02D6  0021               	movlb	1	; select bank1
  4018  02D7  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  4019  02D8  3A03               	xorlw	3
  4020  02D9  1903               	skipnz
  4021  02DA  3401               	retlw	1
  4022  02DB  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  4023  02DC  3A03               	xorlw	3
  4024  02DD  1903               	btfsc	3,2
  4025                           
  4026                           ;mrf49xa_packet.c: 7: return 1;
  4027  02DE  3401               	retlw	1
  4028                           
  4029                           ;mrf49xa_packet.c: 8: else
  4030                           ;mrf49xa_packet.c: 9: return 0;
  4031  02DF  3400               	retlw	0
  4032  02E0                     __end_of_Mrf49xaPacketPending:	
  4033  02E0                     __ptext4:	
  4034 ;; *************** function _Mrf49xaRxPacket *****************
  4035 ;; Defined at:
  4036 ;;		line 49 in file "../../../src/devices/mrf49xa_packet.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      PTR struct rfTrcvPacket_
  4043 ;; Registers used:
  4044 ;;		wreg
  4045 ;; Tracked objects:
  4046 ;;		On entry : 1F/1
  4047 ;;		On exit  : 1F/1
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4050 ;;      Params:         0       0       0       0
  4051 ;;      Locals:         0       0       0       0
  4052 ;;      Temps:          0       0       0       0
  4053 ;;      Totals:         0       0       0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    5
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_Mrf49xaTick
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           
  4065                           ;psect for function _Mrf49xaRxPacket
  4066  02E0                     _Mrf49xaRxPacket:	
  4067                           
  4068                           ;mrf49xa_packet.c: 51: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  4069                           
  4070                           ;incstack = 0
  4071                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  4072  02E0  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  4073  02E1  3A03               	xorlw	3
  4074  02E2  1D03               	skipz
  4075  02E3  2AE7               	goto	l1950
  4076                           
  4077                           ;mrf49xa_packet.c: 52: {
  4078                           ;mrf49xa_packet.c: 53: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  4079  02E4  3004               	movlw	4
  4080  02E5  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  4081                           
  4082                           ;mrf49xa_packet.c: 54: return &(rfTrcvStatus.rxPacket[0]);
  4083  02E6  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  4084  02E7                     l1950:	
  4085                           
  4086                           ;mrf49xa_packet.c: 55: }
  4087                           ;mrf49xa_packet.c: 57: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  4088  02E7  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  4089  02E8  3A03               	xorlw	3
  4090  02E9  1D03               	skipz
  4091  02EA  3400               	retlw	0
  4092                           
  4093                           ;mrf49xa_packet.c: 58: {
  4094                           ;mrf49xa_packet.c: 59: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  4095  02EB  3004               	movlw	4
  4096  02EC  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  4097                           
  4098                           ;mrf49xa_packet.c: 60: return &(rfTrcvStatus.rxPacket[1]);
  4099  02ED  34D1               	retlw	(_rfTrcvStatus+49)& (0+255)
  4100  02EE                     __end_of_Mrf49xaRxPacket:	
  4101                           ;mrf49xa_packet.c: 61: }
  4102                           ;mrf49xa_packet.c: 63: return (0);
  4103                           
  4104  02EE                     __ptext3:	
  4105 ;; *************** function _Mrf49xaTxPacket *****************
  4106 ;; Defined at:
  4107 ;;		line 12 in file "../../../src/devices/mrf49xa_packet.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4110 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(76), 
  4111 ;;  swapSrcDst      1    0[BANK0 ] unsigned char 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  packet          1    3[BANK0 ] PTR struct rfTrcvPacket_
  4114 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(76), 
  4115 ;;  i               1    2[BANK0 ] unsigned char 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      unsigned char 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4120 ;; Tracked objects:
  4121 ;;		On entry : 1F/0
  4122 ;;		On exit  : 1E/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4125 ;;      Params:         0       1       0       0
  4126 ;;      Locals:         0       2       0       0
  4127 ;;      Temps:          0       1       0       0
  4128 ;;      Totals:         0       4       0       0
  4129 ;;Total ram usage:        4 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    5
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_Mrf49xaTick
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _Mrf49xaTxPacket
  4141  02EE                     _Mrf49xaTxPacket:	
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  4145                           ;Mrf49xaTxPacket@packet stored from wreg
  4146  02EE  00A3               	movwf	Mrf49xaTxPacket@packet
  4147                           
  4148                           ;mrf49xa_packet.c: 14: uint8_t i;
  4149                           ;mrf49xa_packet.c: 17: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4150  02EF  0021               	movlb	1	; select bank1
  4151  02F0  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  4152  02F1  1D03               	skipz
  4153  02F2  0008               	return
  4154                           
  4155                           ;mrf49xa_packet.c: 22: else
  4156                           ;mrf49xa_packet.c: 23: {
  4157                           ;mrf49xa_packet.c: 24: if (swapSrcDst)
  4158  02F3  0020               	movlb	0	; select bank0
  4159  02F4  0820               	movf	Mrf49xaTxPacket@swapSrcDst,w
  4160  02F5  1903               	btfsc	3,2
  4161  02F6  2B07               	goto	l1928
  4162                           
  4163                           ;mrf49xa_packet.c: 25: {
  4164                           ;mrf49xa_packet.c: 26: packet->packet.dst = packet->packet.src;
  4165  02F7  0823               	movf	Mrf49xaTxPacket@packet,w
  4166  02F8  3E03               	addlw	3
  4167  02F9  0086               	movwf	6
  4168  02FA  0187               	clrf	7
  4169  02FB  0823               	movf	Mrf49xaTxPacket@packet,w
  4170  02FC  3E02               	addlw	2
  4171  02FD  0084               	movwf	4
  4172  02FE  0185               	clrf	5
  4173  02FF  0800               	movf	0,w
  4174  0300  0081               	movwf	1
  4175                           
  4176                           ;mrf49xa_packet.c: 27: packet->packet.src = rfTrcvStatus.src;
  4177  0301  0823               	movf	Mrf49xaTxPacket@packet,w
  4178  0302  3E02               	addlw	2
  4179  0303  0086               	movwf	6
  4180  0304  0021               	movlb	1	; select bank1
  4181  0305  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4182  0306  0081               	movwf	1
  4183  0307                     l1928:	
  4184                           
  4185                           ;mrf49xa_packet.c: 28: }
  4186                           ;mrf49xa_packet.c: 30: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4187  0307  0021               	movlb	1	; select bank1
  4188  0308  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  4189  0309  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  4190                           
  4191                           ;mrf49xa_packet.c: 31: rfTrcvStatus.txPacket.crc = 0;
  4192  030A  01B7               	clrf	(_rfTrcvStatus^(0+128)+23)
  4193                           
  4194                           ;mrf49xa_packet.c: 32: rfTrcvStatus.txPacket.retry = 0;
  4195  030B  01B8               	clrf	(_rfTrcvStatus^(0+128)+24)
  4196                           
  4197                           ;mrf49xa_packet.c: 34: packet->state = PKT_FREE;
  4198  030C  0020               	movlb	0	; select bank0
  4199  030D  0823               	movf	Mrf49xaTxPacket@packet,w
  4200  030E  0086               	movwf	6
  4201  030F  0187               	clrf	7
  4202  0310  0181               	clrf	1
  4203                           
  4204                           ;mrf49xa_packet.c: 37: for (i = 0; i <= packet->packet.size; i++)
  4205  0311  01A2               	clrf	Mrf49xaTxPacket@i
  4206  0312                     l1942:	
  4207  0312  0A23               	incf	Mrf49xaTxPacket@packet,w
  4208  0313  0086               	movwf	6
  4209  0314  0187               	clrf	7
  4210  0315  0822               	movf	Mrf49xaTxPacket@i,w
  4211  0316  0201               	subwf	1,w
  4212  0317  1C03               	btfss	3,0
  4213  0318  0008               	return
  4214                           
  4215                           ;mrf49xa_packet.c: 38: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4216  0319  0822               	movf	Mrf49xaTxPacket@i,w
  4217  031A  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  4218  031B  0086               	movwf	6
  4219  031C  0822               	movf	Mrf49xaTxPacket@i,w
  4220  031D  0723               	addwf	Mrf49xaTxPacket@packet,w
  4221  031E  00A1               	movwf	??_Mrf49xaTxPacket
  4222  031F  0A21               	incf	??_Mrf49xaTxPacket,w
  4223  0320  0084               	movwf	4
  4224  0321  0185               	clrf	5
  4225  0322  0800               	movf	0,w
  4226  0323  0081               	movwf	1
  4227  0324  0AA2               	incf	Mrf49xaTxPacket@i,f
  4228  0325  2B12               	goto	l1942
  4229  0326                     __end_of_Mrf49xaTxPacket:	
  4230  0326                     __ptext1:	
  4231 ;; *************** function _SysInitGpio *****************
  4232 ;; Defined at:
  4233 ;;		line 10 in file "../../../src/node/main.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		None
  4242 ;; Tracked objects:
  4243 ;;		On entry : 17F/4
  4244 ;;		On exit  : 17F/2
  4245 ;;		Unchanged: 160/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4247 ;;      Params:         0       0       0       0
  4248 ;;      Locals:         0       0       0       0
  4249 ;;      Temps:          0       0       0       0
  4250 ;;      Totals:         0       0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _SysInitGpio
  4263  0326                     _SysInitGpio:	
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _SysInitGpio: []
  4267                           ;main.c: 12: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4268  0326  0021               	movlb	1	; select bank1
  4269  0327  150C               	bsf	12,2	;volatile
  4270  0328  120C               	bcf	12,4	;volatile
  4271  0329  128C               	bcf	12,5	;volatile
  4272  032A  0022               	movlb	2	; select bank2
  4273  032B  120C               	bcf	12,4	;volatile
  4274  032C  128C               	bcf	12,5	;volatile
  4275                           
  4276                           ;main.c: 13: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4277  032D  0021               	movlb	1	; select bank1
  4278  032E  120D               	bcf	13,4	;volatile
  4279  032F  130D               	bcf	13,6	;volatile
  4280  0330  138D               	bcf	13,7	;volatile
  4281  0331  168D               	bsf	13,5	;volatile
  4282                           
  4283                           ;main.c: 14: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  4284  0332  108E               	bcf	14,1	;volatile
  4285  0333  110E               	bcf	14,2	;volatile
  4286  0334  120E               	bcf	14,4	;volatile
  4287  0335  130E               	bcf	14,6	;volatile
  4288  0336  138E               	bcf	14,7	;volatile
  4289  0337  140E               	bsf	14,0	;volatile
  4290  0338  158E               	bsf	14,3	;volatile
  4291  0339  168E               	bsf	14,5	;volatile
  4292  033A  0022               	movlb	2	; select bank2
  4293  033B  108E               	bcf	14,1	;volatile
  4294  033C  110E               	bcf	14,2	;volatile
  4295  033D  120E               	bcf	14,4	;volatile
  4296  033E  170E               	bsf	14,6	;volatile
  4297  033F  138E               	bcf	14,7	;volatile
  4298                           
  4299                           ;main.c: 16: LATCbits.LATC1 = 0;
  4300  0340  108E               	bcf	14,1	;volatile
  4301                           
  4302                           ;main.c: 17: LATCbits.LATC2 = 0;
  4303  0341  110E               	bcf	14,2	;volatile
  4304  0342  0008               	return
  4305  0343                     __end_of_SysInitGpio:	
  4306                           
  4307                           	psect	bssBANK0
  4308  002A                     __pbssBANK0:	
  4309  002A                     _mrf49Status:	
  4310  002A                     	ds	2
  4311                           
  4312                           	psect	bssBANK1
  4313  00A0                     __pbssBANK1:	
  4314  00A0                     _rfTrcvStatus:	
  4315  00A0                     	ds	76
  4316                           
  4317                           	psect	clrtext
  4318  0548                     clear_ram0:	
  4319                           ;	Called with FSR0 containing the base address, and
  4320                           ;	WREG with the size to clear
  4321                           
  4322  0548  0064               	clrwdt	;clear the watchdog before getting into this loop
  4323  0549                     clrloop0:	
  4324  0549  0180               	clrf	0	;clear RAM location pointed to by FSR
  4325  054A  3101               	addfsr 0,1
  4326  054B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4327  054C  2D49               	goto	clrloop0	;have we reached the end yet?
  4328  054D  3400               	retlw	0	;all done for this memory range, return
  4329                           
  4330                           	psect	cstackCOMMON
  4331  0070                     __pcstackCOMMON:	
  4332  0070                     ?_AdcInit:	
  4333  0070                     ?_ExtIntInit:	
  4334                           ; 0 bytes @ 0x0
  4335                           
  4336  0070                     ?_extInt:	
  4337                           ; 0 bytes @ 0x0
  4338                           
  4339  0070                     ?_Mrf49xaModeRx:	
  4340                           ; 0 bytes @ 0x0
  4341                           
  4342  0070                     ?_Mrf49xaModeTx:	
  4343                           ; 0 bytes @ 0x0
  4344                           
  4345  0070                     ?_Mrf49xaInit:	
  4346                           ; 0 bytes @ 0x0
  4347                           
  4348  0070                     ?_Mrf49SpiTx:	
  4349                           ; 0 bytes @ 0x0
  4350                           
  4351  0070                     ?_Mrf49RxSts:	
  4352                           ; 0 bytes @ 0x0
  4353                           
  4354  0070                     ?_Mrf49TxByte:	
  4355                           ; 0 bytes @ 0x0
  4356                           
  4357  0070                     ?_Mrf49xaTick:	
  4358                           ; 0 bytes @ 0x0
  4359                           
  4360  0070                     ?_SysInitGpio:	
  4361                           ; 0 bytes @ 0x0
  4362                           
  4363  0070                     ?_main:	
  4364                           ; 0 bytes @ 0x0
  4365                           
  4366  0070                     ?i1_Mrf49xaModeRx:	
  4367                           ; 0 bytes @ 0x0
  4368                           
  4369  0070                     ?i1_Mrf49SpiTx:	
  4370                           ; 0 bytes @ 0x0
  4371                           
  4372  0070                     ??i1_Mrf49SpiTx:	
  4373                           ; 0 bytes @ 0x0
  4374                           
  4375  0070                     ??i1_Mrf49SpiRx:	
  4376                           ; 0 bytes @ 0x0
  4377                           
  4378  0070                     ?i1_Mrf49RxSts:	
  4379                           ; 0 bytes @ 0x0
  4380                           
  4381  0070                     ?i1_Mrf49TxByte:	
  4382                           ; 0 bytes @ 0x0
  4383                           
  4384  0070                     ?_Mrf49xaServe:	
  4385                           ; 0 bytes @ 0x0
  4386                           
  4387  0070                     ?_Mrf49SpiRx:	
  4388                           ; 1 bytes @ 0x0
  4389                           
  4390  0070                     ?_Mrf49RxCmd:	
  4391                           ; 1 bytes @ 0x0
  4392                           
  4393  0070                     ?_Mrf49RxByte:	
  4394                           ; 1 bytes @ 0x0
  4395                           
  4396  0070                     ?_Mrf49xaPacketPending:	
  4397                           ; 1 bytes @ 0x0
  4398                           
  4399  0070                     ?_Mrf49xaRxPacket:	
  4400                           ; 1 bytes @ 0x0
  4401                           
  4402  0070                     ?i1_Mrf49SpiRx:	
  4403                           ; 1 bytes @ 0x0
  4404                           
  4405  0070                     ?i1_Mrf49RxCmd:	
  4406                           ; 1 bytes @ 0x0
  4407                           
  4408  0070                     ?i1_Mrf49RxByte:	
  4409                           ; 1 bytes @ 0x0
  4410                           
  4411  0070                     ?i1_Mrf49xaServe:	
  4412                           ; 1 bytes @ 0x0
  4413                           
  4414  0070                     i1Mrf49SpiTx@byte:	
  4415                           ; 1 bytes @ 0x0
  4416                           
  4417  0070                     i1Mrf49SpiRx@data:	
  4418                           ; 1 bytes @ 0x0
  4419                           
  4420                           
  4421                           ; 1 bytes @ 0x0
  4422  0070                     	ds	1
  4423  0071                     ?i1_Mrf49TxCmd:	
  4424  0071                     ??i1_Mrf49RxCmd:	
  4425                           ; 0 bytes @ 0x1
  4426                           
  4427  0071                     ??i1_Mrf49RxSts:	
  4428                           ; 0 bytes @ 0x1
  4429                           
  4430  0071                     i1Mrf49TxCmd@val:	
  4431                           ; 0 bytes @ 0x1
  4432                           
  4433  0071                     i1Mrf49RxCmd@cmd:	
  4434                           ; 1 bytes @ 0x1
  4435                           
  4436                           
  4437                           ; 1 bytes @ 0x1
  4438  0071                     	ds	1
  4439  0072                     ??i1_Mrf49TxCmd:	
  4440  0072                     i1Mrf49TxCmd@cmd:	
  4441                           ; 0 bytes @ 0x2
  4442                           
  4443  0072                     i1Mrf49RxCmd@val:	
  4444                           ; 1 bytes @ 0x2
  4445                           
  4446                           
  4447                           ; 1 bytes @ 0x2
  4448  0072                     	ds	1
  4449  0073                     ??i1_Mrf49xaModeRx:	
  4450  0073                     ??i1_Mrf49RxByte:	
  4451                           ; 0 bytes @ 0x3
  4452                           
  4453  0073                     ??i1_Mrf49TxByte:	
  4454                           ; 0 bytes @ 0x3
  4455                           
  4456  0073                     i1Mrf49xaModeRx@k:	
  4457                           ; 0 bytes @ 0x3
  4458                           
  4459  0073                     i1Mrf49TxByte@byte:	
  4460                           ; 1 bytes @ 0x3
  4461                           
  4462                           
  4463                           ; 1 bytes @ 0x3
  4464  0073                     	ds	1
  4465  0074                     ??i1_Mrf49xaServe:	
  4466                           
  4467                           ; 0 bytes @ 0x4
  4468  0074                     	ds	1
  4469  0075                     i1Mrf49xaServe@data:	
  4470                           
  4471                           ; 1 bytes @ 0x5
  4472  0075                     	ds	1
  4473  0076                     ??_extInt:	
  4474                           
  4475                           ; 0 bytes @ 0x6
  4476  0076                     	ds	1
  4477  0077                     ??_Mrf49TxCmd:	
  4478  0077                     ??_AdcInit:	
  4479                           ; 0 bytes @ 0x7
  4480                           
  4481  0077                     ??_ExtIntInit:	
  4482                           ; 0 bytes @ 0x7
  4483                           
  4484  0077                     ??_Mrf49xaModeRx:	
  4485                           ; 0 bytes @ 0x7
  4486                           
  4487  0077                     ??_Mrf49xaModeTx:	
  4488                           ; 0 bytes @ 0x7
  4489                           
  4490  0077                     ??_Mrf49SpiTx:	
  4491                           ; 0 bytes @ 0x7
  4492                           
  4493  0077                     ??_Mrf49SpiRx:	
  4494                           ; 0 bytes @ 0x7
  4495                           
  4496  0077                     ??_Mrf49RxCmd:	
  4497                           ; 0 bytes @ 0x7
  4498                           
  4499  0077                     ??_Mrf49RxSts:	
  4500                           ; 0 bytes @ 0x7
  4501                           
  4502  0077                     ??_Mrf49RxByte:	
  4503                           ; 0 bytes @ 0x7
  4504                           
  4505  0077                     ??_Mrf49TxByte:	
  4506                           ; 0 bytes @ 0x7
  4507                           
  4508  0077                     ??_Mrf49xaPacketPending:	
  4509                           ; 0 bytes @ 0x7
  4510                           
  4511  0077                     ??_Mrf49xaRxPacket:	
  4512                           ; 0 bytes @ 0x7
  4513                           
  4514  0077                     ??_SysInitGpio:	
  4515                           ; 0 bytes @ 0x7
  4516                           
  4517  0077                     ??_main:	
  4518                           ; 0 bytes @ 0x7
  4519                           
  4520                           
  4521                           	psect	cstackBANK0
  4522  0020                     __pcstackBANK0:	
  4523                           ; 0 bytes @ 0x7
  4524                           
  4525  0020                     ?_Mrf49xaTxPacket:	
  4526  0020                     Mrf49SpiTx@byte:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0020                     Mrf49SpiRx@data:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0020                     Mrf49xaTxPacket@swapSrcDst:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535                           
  4536                           ; 1 bytes @ 0x0
  4537  0020                     	ds	1
  4538  0021                     ?_Mrf49TxCmd:	
  4539  0021                     ??_Mrf49xaTxPacket:	
  4540                           ; 0 bytes @ 0x1
  4541                           
  4542  0021                     Mrf49TxCmd@val:	
  4543                           ; 0 bytes @ 0x1
  4544                           
  4545  0021                     Mrf49RxCmd@cmd:	
  4546                           ; 1 bytes @ 0x1
  4547                           
  4548                           
  4549                           ; 1 bytes @ 0x1
  4550  0021                     	ds	1
  4551  0022                     Mrf49TxCmd@cmd:	
  4552  0022                     Mrf49RxCmd@val:	
  4553                           ; 1 bytes @ 0x2
  4554                           
  4555  0022                     Mrf49xaTxPacket@i:	
  4556                           ; 1 bytes @ 0x2
  4557                           
  4558                           
  4559                           ; 1 bytes @ 0x2
  4560  0022                     	ds	1
  4561  0023                     Mrf49xaModeRx@k:	
  4562  0023                     Mrf49xaModeTx@k:	
  4563                           ; 1 bytes @ 0x3
  4564                           
  4565  0023                     Mrf49TxByte@byte:	
  4566                           ; 1 bytes @ 0x3
  4567                           
  4568  0023                     Mrf49xaTxPacket@packet:	
  4569                           ; 1 bytes @ 0x3
  4570                           
  4571                           
  4572                           ; 1 bytes @ 0x3
  4573  0023                     	ds	1
  4574  0024                     ??_Mrf49xaServe:	
  4575  0024                     ??_Mrf49xaTick:	
  4576                           ; 0 bytes @ 0x4
  4577                           
  4578                           
  4579                           ; 0 bytes @ 0x4
  4580  0024                     	ds	1
  4581  0025                     Mrf49xaServe@data:	
  4582                           
  4583                           ; 1 bytes @ 0x5
  4584  0025                     	ds	1
  4585  0026                     ??_Mrf49xaInit:	
  4586  0026                     Mrf49xaTick@timeout:	
  4587                           ; 0 bytes @ 0x6
  4588                           
  4589                           
  4590                           ; 1 bytes @ 0x6
  4591  0026                     	ds	1
  4592  0027                     Mrf49xaTick@packet:	
  4593                           
  4594                           ; 1 bytes @ 0x7
  4595  0027                     	ds	2
  4596  0029                     Mrf49xaInit@k:	
  4597                           
  4598                           ; 1 bytes @ 0x9
  4599  0029                     	ds	1
  4600                           
  4601                           	psect	swtext1
  4602  0538                     __pswtext1:	
  4603  0538                     S2264:	
  4604  0538  3181  290E         	ljmp	l1652
  4605  053A  3181  290E         	ljmp	l1652
  4606  053C  3181  290E         	ljmp	l1652
  4607  053E  3181  2922         	ljmp	l391
  4608                           
  4609                           	psect	intentry
  4610  0004                     __pintentry:	
  4611 ;; *************** function _extInt *****************
  4612 ;; Defined at:
  4613 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;		None               void
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 1F/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4627 ;;      Params:         0       0       0       0
  4628 ;;      Locals:         0       0       0       0
  4629 ;;      Temps:          1       0       0       0
  4630 ;;      Totals:         1       0       0       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    4
  4634 ;; This function calls:
  4635 ;;		i1_Mrf49xaServe
  4636 ;; This function is called by:
  4637 ;;		Interrupt level 1
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641  0004                     _extInt:	
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4645  0004  3180               	pagesel	$
  4646  0005  0020               	movlb	0	; select bank0
  4647  0006  087F               	movf	127,w
  4648  0007  00F6               	movwf	??_extInt
  4649                           
  4650                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  4651  0008  1C8B               	btfss	11,1	;volatile
  4652  0009  2811               	goto	i1l131
  4653                           
  4654                           ;interrupt.c: 34: {
  4655                           ;interrupt.c: 35: if (Mrf49xaServe())
  4656  000A  3183  234D  3180   	fcall	i1_Mrf49xaServe
  4657  000D  3A00               	xorlw	0
  4658  000E  1903               	skipnz
  4659  000F  2811               	goto	i1l131
  4660                           
  4661                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  4662  0010  108B               	bcf	11,1	;volatile
  4663  0011                     i1l131:	
  4664  0011  0876               	movf	??_extInt,w
  4665  0012  00FF               	movwf	127
  4666  0013  0009               	retfie
  4667  0014                     __end_of_extInt:	
  4668                           
  4669                           	psect	swtext2
  4670  0540                     __pswtext2:	
  4671  0540                     i1S2266:	
  4672  0540  3183  2B53         	ljmp	i1l2122
  4673  0542  3183  2B53         	ljmp	i1l2122
  4674  0544  3183  2B53         	ljmp	i1l2122
  4675  0546  3183  2B67         	ljmp	i1l391
  4676                           
  4677                           	psect	text26
  4678  0343                     __ptext26:	
  4679 ;; *************** function i1_Mrf49RxCmd *****************
  4680 ;; Defined at:
  4681 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  cmd             1    wreg     unsigned char 
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;  cmd             1    1[COMMON] unsigned char 
  4686 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      unsigned char 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0, pclath, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 1C/1
  4693 ;;		On exit  : 1F/2
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4696 ;;      Params:         0       0       0       0
  4697 ;;      Locals:         2       0       0       0
  4698 ;;      Temps:          0       0       0       0
  4699 ;;      Totals:         2       0       0       0
  4700 ;;Total ram usage:        2 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    1
  4703 ;; This function calls:
  4704 ;;		i1_Mrf49SpiRx
  4705 ;;		i1_Mrf49SpiTx
  4706 ;; This function is called by:
  4707 ;;		i1_Mrf49RxByte
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           
  4712                           ;psect for function i1_Mrf49RxCmd
  4713  0343                     i1_Mrf49RxCmd:	
  4714                           
  4715                           ;incstack = 0
  4716                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  4717                           ;i1Mrf49RxCmd@cmd stored from wreg
  4718  0343  00F1               	movwf	i1Mrf49RxCmd@cmd
  4719                           
  4720                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  4721  0344  0022               	movlb	2	; select bank2
  4722  0345  130E               	bcf	14,6	;volatile
  4723                           
  4724                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  4725  0346  0871               	movf	i1Mrf49RxCmd@cmd,w
  4726  0347  244B  3183         	fcall	i1_Mrf49SpiTx
  4727                           
  4728                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  4729  0349  24B4               	fcall	i1_Mrf49SpiRx
  4730  034A  00F2               	movwf	i1Mrf49RxCmd@val
  4731                           
  4732                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  4733  034B  170E               	bsf	14,6	;volatile
  4734                           
  4735                           ;mrf49xa_cmd.c: 25: return val;
  4736  034C  0008               	return
  4737  034D                     __end_ofi1_Mrf49RxCmd:	
  4738  034D                     __ptext20:	
  4739 ;; *************** function i1_Mrf49xaServe *****************
  4740 ;; Defined at:
  4741 ;;		line 4 in file "../../../src/devices/mrf49xa_data.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      unsigned char 
  4748 ;; Registers used:
  4749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 1F/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4755 ;;      Params:         0       0       0       0
  4756 ;;      Locals:         1       0       0       0
  4757 ;;      Temps:          1       0       0       0
  4758 ;;      Totals:         2       0       0       0
  4759 ;;Total ram usage:        2 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    3
  4762 ;; This function calls:
  4763 ;;		i1_Mrf49RxByte
  4764 ;;		i1_Mrf49RxSts
  4765 ;;		i1_Mrf49TxByte
  4766 ;;		i1_Mrf49xaModeRx
  4767 ;; This function is called by:
  4768 ;;		_extInt
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           
  4773                           ;psect for function i1_Mrf49xaServe
  4774  034D                     i1_Mrf49xaServe:	
  4775                           
  4776                           ;mrf49xa_data.c: 6: uint8_t data;
  4777                           ;mrf49xa_data.c: 12: Mrf49RxSts();
  4778                           
  4779                           ;incstack = 0
  4780                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4781  034D  24A6  3183         	fcall	i1_Mrf49RxSts
  4782                           
  4783                           ;mrf49xa_data.c: 17: }
  4784                           ;mrf49xa_data.c: 20: if (mrf49Status.flags.msb.overflow == 1)
  4785                           
  4786                           ;mrf49xa_data.c: 15: {
  4787  034F  0020               	movlb	0	; select bank0
  4788  0350  1AAA               	btfsc	_mrf49Status,5
  4789  0351  2B5C               	goto	i1l2126
  4790  0352  2B67               	goto	i1l391
  4791  0353                     i1l2122:	
  4792                           
  4793                           ;mrf49xa_data.c: 25: case RECV_DATA:
  4794                           ;mrf49xa_data.c: 26: case RECV_TIMEOUT:
  4795                           ;mrf49xa_data.c: 29: data = Mrf49RxByte();
  4796  0353  2416  3183         	fcall	i1_Mrf49RxByte
  4797  0355  00F5               	movwf	i1Mrf49xaServe@data
  4798                           
  4799                           ;mrf49xa_data.c: 30: data = Mrf49RxByte();
  4800  0356  2416  3183         	fcall	i1_Mrf49RxByte
  4801  0358  00F5               	movwf	i1Mrf49xaServe@data
  4802                           
  4803                           ;mrf49xa_data.c: 33: Mrf49xaModeRx();
  4804  0359  2419  3183         	fcall	i1_Mrf49xaModeRx
  4805                           
  4806                           ;mrf49xa_data.c: 37: break;
  4807  035B  2B67               	goto	i1l391
  4808  035C                     i1l2126:	
  4809  035C  0021               	movlb	1	; select bank1
  4810  035D  0820               	movf	_rfTrcvStatus^(0+128),w
  4811                           
  4812                           ; Switch size 1, requested type "speed"
  4813                           ; Number of cases is 4, Range of values is 0 to 3
  4814                           ; switch strategies available:
  4815                           ; Name         Instructions Cycles
  4816                           ; direct_byte           14     6 (fixed)
  4817                           ; simple_byte           13     7 (average)
  4818                           ; jumptable            260     6 (fixed)
  4819                           ;	Chosen strategy is direct_byte
  4820  035E  0084               	movwf	4
  4821  035F  3004               	movlw	4
  4822  0360  0204               	subwf	4,w
  4823  0361  1803               	skipnc
  4824  0362  2B67               	goto	i1l391
  4825  0363  3185               	movlp	high i1S2266
  4826  0364  3504               	lslf	4,w
  4827  0365  3E40               	addlw	low i1S2266
  4828  0366  0082               	movwf	2
  4829  0367                     i1l391:	
  4830                           
  4831                           ;mrf49xa_data.c: 45: }
  4832                           ;mrf49xa_data.c: 54: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4833  0367  0020               	movlb	0	; select bank0
  4834  0368  1BAA               	btfsc	_mrf49Status,7
  4835  0369  2C00               	goto	i1l2208
  4836  036A  2C0C               	goto	i1l2210
  4837  036B                     i1l2130:	
  4838                           
  4839                           ;mrf49xa_data.c: 60: data = Mrf49RxByte();
  4840  036B  2416  3183         	fcall	i1_Mrf49RxByte
  4841  036D  00F5               	movwf	i1Mrf49xaServe@data
  4842                           
  4843                           ;mrf49xa_data.c: 64: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4844  036E  0020               	movlb	0	; select bank0
  4845  036F  1BAB               	btfsc	_mrf49Status+1,7
  4846  0370  2B74               	goto	i1l2136
  4847  0371                     i1l2134:	
  4848                           
  4849                           ;mrf49xa_data.c: 65: {
  4850                           ;mrf49xa_data.c: 66: Mrf49xaModeRx();
  4851  0371  2419  3183         	fcall	i1_Mrf49xaModeRx
  4852                           
  4853                           ;mrf49xa_data.c: 67: break;
  4854  0373  2C0C               	goto	i1l2210
  4855  0374                     i1l2136:	
  4856                           
  4857                           ;mrf49xa_data.c: 68: }
  4858                           ;mrf49xa_data.c: 70: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  4859  0374  0021               	movlb	1	; select bank1
  4860  0375  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  4861  0376  1D03               	skipz
  4862  0377  2B7A               	goto	i1l2140
  4863  0378  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  4864  0379  2B7E               	goto	L4
  4865  037A                     i1l2140:	
  4866                           
  4867                           ;mrf49xa_data.c: 71: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  4868  037A  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  4869  037B  1D03               	skipz
  4870  037C  2B71               	goto	i1l2134
  4871  037D  30D1               	movlw	(_rfTrcvStatus+49)& (0+255)
  4872  037E                     L4:	
  4873  037E  00E9               	movwf	(_rfTrcvStatus+73)^(0+128)
  4874                           
  4875                           ;mrf49xa_data.c: 78: }
  4876                           ;mrf49xa_data.c: 79: rfTrcvStatus.hwRx->packet.size = data;
  4877  037F  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  4878  0380  0086               	movwf	6
  4879  0381  0187               	clrf	7
  4880  0382  0875               	movf	i1Mrf49xaServe@data,w
  4881  0383  0081               	movwf	1
  4882                           
  4883                           ;mrf49xa_data.c: 80: rfTrcvStatus.hwRx->crc = 0;
  4884  0384  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4885  0385  3E16               	addlw	22
  4886  0386  0086               	movwf	6
  4887  0387  0181               	clrf	1
  4888                           
  4889                           ;mrf49xa_data.c: 81: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  4890  0388  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4891  0389  0086               	movwf	6
  4892  038A  3002               	movlw	2
  4893  038B  0081               	movwf	1
  4894                           
  4895                           ;mrf49xa_data.c: 83: rfTrcvStatus.state = RECV_DATA;
  4896  038C  01A0               	clrf	_rfTrcvStatus^(0+128)
  4897  038D  0AA0               	incf	_rfTrcvStatus^(0+128),f
  4898                           
  4899                           ;mrf49xa_data.c: 84: rfTrcvStatus.hwByte = 1;
  4900  038E  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  4901  038F  2BBC               	goto	i1l2176
  4902  0390                     i1l2156:	
  4903                           ;mrf49xa_data.c: 86: break;
  4904                           
  4905                           
  4906                           ;mrf49xa_data.c: 90: data = Mrf49RxByte();
  4907  0390  2416  3183         	fcall	i1_Mrf49RxByte
  4908  0392  00F5               	movwf	i1Mrf49xaServe@data
  4909                           
  4910                           ;mrf49xa_data.c: 94: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4911  0393  0020               	movlb	0	; select bank0
  4912  0394  1BAB               	btfsc	_mrf49Status+1,7
  4913  0395  2B9D               	goto	i1l2164
  4914                           
  4915                           ;mrf49xa_data.c: 95: {
  4916                           ;mrf49xa_data.c: 96: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4917  0396  0021               	movlb	1	; select bank1
  4918  0397  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4919  0398  0086               	movwf	6
  4920  0399  3003               	movlw	3
  4921  039A  0187               	clrf	7
  4922  039B  0081               	movwf	1
  4923  039C  2B71               	goto	i1l2134
  4924  039D                     i1l2164:	
  4925                           
  4926                           ;mrf49xa_data.c: 99: }
  4927                           ;mrf49xa_data.c: 101: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  4928  039D  0021               	movlb	1	; select bank1
  4929  039E  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  4930  039F  0086               	movwf	6
  4931  03A0  0187               	clrf	7
  4932  03A1  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4933  03A2  0601               	xorwf	1,w
  4934  03A3  1D03               	skipz
  4935  03A4  2BB4               	goto	i1l2174
  4936                           
  4937                           ;mrf49xa_data.c: 102: {
  4938                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->crc = data;
  4939  03A5  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4940  03A6  3E16               	addlw	22
  4941  03A7  0086               	movwf	6
  4942  03A8  0875               	movf	i1Mrf49xaServe@data,w
  4943  03A9  0081               	movwf	1
  4944                           
  4945                           ;mrf49xa_data.c: 107: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4946  03AA  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4947  03AB  0086               	movwf	6
  4948  03AC  3003               	movlw	3
  4949  03AD  0081               	movwf	1
  4950                           
  4951                           ;mrf49xa_data.c: 110: Mrf49xaModeRx();
  4952  03AE  2419  3183         	fcall	i1_Mrf49xaModeRx
  4953                           
  4954                           ;mrf49xa_data.c: 113: LATCbits.LATC2 = 1;
  4955  03B0  0022               	movlb	2	; select bank2
  4956  03B1  150E               	bsf	14,2	;volatile
  4957                           
  4958                           ;mrf49xa_data.c: 114: LATCbits.LATC2 = 0;
  4959  03B2  110E               	bcf	14,2	;volatile
  4960                           
  4961                           ;mrf49xa_data.c: 116: }
  4962  03B3  2C0C               	goto	i1l2210
  4963  03B4                     i1l2174:	
  4964                           
  4965                           ;mrf49xa_data.c: 117: else
  4966                           ;mrf49xa_data.c: 118: {
  4967                           ;mrf49xa_data.c: 119: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  4968  03B4  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4969  03B5  0769               	addwf	(_rfTrcvStatus+73)^(0+128),w
  4970  03B6  00F4               	movwf	??i1_Mrf49xaServe
  4971  03B7  0A74               	incf	??i1_Mrf49xaServe,w
  4972  03B8  0086               	movwf	6
  4973  03B9  0187               	clrf	7
  4974  03BA  0875               	movf	i1Mrf49xaServe@data,w
  4975  03BB  0081               	movwf	1
  4976  03BC                     i1l2176:	
  4977  03BC  0AEA               	incf	(_rfTrcvStatus^(0+128)+74),f
  4978  03BD  2C0C               	goto	i1l2210
  4979  03BE                     i1l2178:	
  4980                           
  4981                           ;mrf49xa_data.c: 125: rfTrcvStatus.hwByte++;
  4982  03BE  0AEA               	incf	(_rfTrcvStatus^(0+128)+74),f
  4983                           
  4984                           ;mrf49xa_data.c: 127: switch (rfTrcvStatus.hwByte)
  4985  03BF  2BEF               	goto	i1l2204
  4986  03C0                     i1l2180:	
  4987                           
  4988                           ;mrf49xa_data.c: 130: Mrf49TxByte(0x2D);
  4989  03C0  302D               	movlw	45
  4990  03C1  2411  3183         	fcall	i1_Mrf49TxByte
  4991                           
  4992                           ;mrf49xa_data.c: 131: break;
  4993  03C3  2C0C               	goto	i1l2210
  4994  03C4                     i1l2182:	
  4995                           
  4996                           ;mrf49xa_data.c: 134: Mrf49TxByte(0xD4);
  4997  03C4  30D4               	movlw	212
  4998  03C5  2411  3183         	fcall	i1_Mrf49TxByte
  4999                           
  5000                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte = -1;
  5001  03C7  30FF               	movlw	255
  5002  03C8  0021               	movlb	1	; select bank1
  5003  03C9  2BDE               	goto	L5
  5004  03CA                     i1l2186:	
  5005                           ;mrf49xa_data.c: 136: break;
  5006                           
  5007                           
  5008                           ;mrf49xa_data.c: 140: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  5009  03CA  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5010  03CB  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5011  03CC  0086               	movwf	6
  5012  03CD  0187               	clrf	7
  5013  03CE  0801               	movf	1,w
  5014  03CF  2411  3183         	fcall	i1_Mrf49TxByte
  5015                           
  5016                           ;mrf49xa_data.c: 141: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStat
      +                          us.txPacket.raw[rfTrcvStatus.hwByte];
  5017  03D1  0021               	movlb	1	; select bank1
  5018  03D2  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5019  03D3  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  5020  03D4  0086               	movwf	6
  5021  03D5  0187               	clrf	7
  5022  03D6  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5023  03D7  0601               	xorwf	1,w
  5024  03D8  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  5025                           
  5026                           ;mrf49xa_data.c: 142: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  5027  03D9  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5028  03DA  0622               	xorwf	(_rfTrcvStatus^(0+128)+2),w
  5029  03DB  1D03               	skipz
  5030  03DC  2C0C               	goto	i1l2210
  5031                           
  5032                           ;mrf49xa_data.c: 143: {
  5033                           ;mrf49xa_data.c: 144: rfTrcvStatus.hwByte = 48;
  5034  03DD  3030               	movlw	48
  5035  03DE                     L5:	
  5036  03DE  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5037  03DF  2C0C               	goto	i1l2210
  5038  03E0                     i1l2194:	
  5039                           
  5040                           ;mrf49xa_data.c: 149: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5041  03E0  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5042  03E1  2411  3183         	fcall	i1_Mrf49TxByte
  5043                           
  5044                           ;mrf49xa_data.c: 150: break;
  5045  03E3  2C0C               	goto	i1l2210
  5046  03E4                     i1l2196:	
  5047                           
  5048                           ;mrf49xa_data.c: 153: Mrf49TxByte(0x00);
  5049  03E4  3000               	movlw	0
  5050  03E5  2411  3183         	fcall	i1_Mrf49TxByte
  5051                           
  5052                           ;mrf49xa_data.c: 154: break;
  5053  03E7  2C0C               	goto	i1l2210
  5054  03E8                     i1l2198:	
  5055                           
  5056                           ;mrf49xa_data.c: 157: Mrf49TxByte(0x00);
  5057  03E8  3000               	movlw	0
  5058  03E9  2411  3183         	fcall	i1_Mrf49TxByte
  5059                           
  5060                           ;mrf49xa_data.c: 158: Mrf49xaModeRx();
  5061  03EB  2419  3183         	fcall	i1_Mrf49xaModeRx
  5062                           
  5063                           ;mrf49xa_data.c: 159: rfTrcvStatus.txPacket.state = PKT_FREE;
  5064  03ED  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5065                           
  5066                           ;mrf49xa_data.c: 160: break;
  5067  03EE  2C0C               	goto	i1l2210
  5068  03EF                     i1l2204:	
  5069  03EF  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5070                           
  5071                           ; Switch size 1, requested type "speed"
  5072                           ; Number of cases is 5, Range of values is 49 to 101
  5073                           ; switch strategies available:
  5074                           ; Name         Instructions Cycles
  5075                           ; simple_byte           16     9 (average)
  5076                           ; direct_byte          115     9 (fixed)
  5077                           ; jumptable            263     9 (fixed)
  5078                           ;	Chosen strategy is simple_byte
  5079  03F0  3A31               	xorlw	49	; case 49
  5080  03F1  1903               	skipnz
  5081  03F2  2BE0               	goto	i1l2194
  5082  03F3  3A03               	xorlw	3	; case 50
  5083  03F4  1903               	skipnz
  5084  03F5  2BE4               	goto	i1l2196
  5085  03F6  3A01               	xorlw	1	; case 51
  5086  03F7  1903               	skipnz
  5087  03F8  2BE8               	goto	i1l2198
  5088  03F9  3A57               	xorlw	87	; case 100
  5089  03FA  1903               	skipnz
  5090  03FB  2BC0               	goto	i1l2180
  5091  03FC  3A01               	xorlw	1	; case 101
  5092  03FD  1903               	skipnz
  5093  03FE  2BC4               	goto	i1l2182
  5094  03FF  2BCA               	goto	i1l2186
  5095  0400                     i1l2208:	
  5096  0400  0021               	movlb	1	; select bank1
  5097  0401  0820               	movf	_rfTrcvStatus^(0+128),w
  5098                           
  5099                           ; Switch size 1, requested type "speed"
  5100                           ; Number of cases is 3, Range of values is 0 to 3
  5101                           ; switch strategies available:
  5102                           ; Name         Instructions Cycles
  5103                           ; simple_byte           10     6 (average)
  5104                           ; direct_byte           14     6 (fixed)
  5105                           ; jumptable            260     6 (fixed)
  5106                           ;	Chosen strategy is simple_byte
  5107  0402  3A00               	xorlw	0	; case 0
  5108  0403  1903               	skipnz
  5109  0404  2B6B               	goto	i1l2130
  5110  0405  3A01               	xorlw	1	; case 1
  5111  0406  1903               	skipnz
  5112  0407  2B90               	goto	i1l2156
  5113  0408  3A02               	xorlw	2	; case 3
  5114  0409  1903               	skipnz
  5115  040A  2BBE               	goto	i1l2178
  5116  040B  2C0C               	goto	i1l2210
  5117  040C                     i1l2210:	
  5118                           
  5119                           ;mrf49xa_data.c: 166: }
  5120                           ;mrf49xa_data.c: 180: return PORTAbits.RA2 == 1 ? 1 : 0;
  5121  040C  0020               	movlb	0	; select bank0
  5122  040D  0C0C               	rrf	12,w	;volatile
  5123  040E  0C89               	rrf	9,f
  5124  040F  3901               	andlw	1
  5125  0410  0008               	return
  5126  0411                     __end_ofi1_Mrf49xaServe:	
  5127  0411                     __ptext22:	
  5128 ;; *************** function i1_Mrf49TxByte *****************
  5129 ;; Defined at:
  5130 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  byte            1    wreg     unsigned char 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  byte            1    3[COMMON] unsigned char 
  5135 ;; Return value:  Size  Location     Type
  5136 ;;		None               void
  5137 ;; Registers used:
  5138 ;;		wreg, status,2, status,0, pclath, cstack
  5139 ;; Tracked objects:
  5140 ;;		On entry : 1E/1
  5141 ;;		On exit  : 1F/2
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5144 ;;      Params:         0       0       0       0
  5145 ;;      Locals:         1       0       0       0
  5146 ;;      Temps:          0       0       0       0
  5147 ;;      Totals:         1       0       0       0
  5148 ;;Total ram usage:        1 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    2
  5151 ;; This function calls:
  5152 ;;		i1_Mrf49TxCmd
  5153 ;; This function is called by:
  5154 ;;		i1_Mrf49xaServe
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           
  5159                           ;psect for function i1_Mrf49TxByte
  5160  0411                     i1_Mrf49TxByte:	
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5164                           ;i1Mrf49TxByte@byte stored from wreg
  5165  0411  00F3               	movwf	i1Mrf49TxByte@byte
  5166                           
  5167                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  5168  0412  00F1               	movwf	i1Mrf49TxCmd@val
  5169  0413  30B8               	movlw	184
  5170  0414  2441               	fcall	i1_Mrf49TxCmd
  5171  0415  0008               	return
  5172  0416                     __end_ofi1_Mrf49TxByte:	
  5173  0416                     __ptext25:	
  5174 ;; *************** function i1_Mrf49RxByte *****************
  5175 ;; Defined at:
  5176 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      unsigned char 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2, status,0, pclath, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 1C/1
  5187 ;;		On exit  : 1F/2
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5190 ;;      Params:         0       0       0       0
  5191 ;;      Locals:         0       0       0       0
  5192 ;;      Temps:          0       0       0       0
  5193 ;;      Totals:         0       0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    2
  5197 ;; This function calls:
  5198 ;;		i1_Mrf49RxCmd
  5199 ;; This function is called by:
  5200 ;;		i1_Mrf49xaServe
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function i1_Mrf49RxByte
  5206  0416                     i1_Mrf49RxByte:	
  5207                           
  5208                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5212  0416  30B0               	movlw	176
  5213  0417  2343               	fcall	i1_Mrf49RxCmd
  5214  0418  0008               	return
  5215  0419                     __end_ofi1_Mrf49RxByte:	
  5216  0419                     __ptext21:	
  5217 ;; *************** function i1_Mrf49xaModeRx *****************
  5218 ;; Defined at:
  5219 ;;		line 73 in file "../../../src/devices/mrf49xa.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;		None               void
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0, pclath, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 1C/2
  5230 ;;		On exit  : 1F/1
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5233 ;;      Params:         0       0       0       0
  5234 ;;      Locals:         1       0       0       0
  5235 ;;      Temps:          0       0       0       0
  5236 ;;      Totals:         1       0       0       0
  5237 ;;Total ram usage:        1 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    2
  5240 ;; This function calls:
  5241 ;;		i1_Mrf49TxCmd
  5242 ;; This function is called by:
  5243 ;;		i1_Mrf49xaServe
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function i1_Mrf49xaModeRx
  5249  0419                     i1_Mrf49xaModeRx:	
  5250  0419  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5251                           
  5252                           ;mrf49xa.c: 75: UI08_t k;
  5253                           ;mrf49xa.c: 76: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55)
      +                           Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5257  041A  01F3               	clrf	i1Mrf49xaModeRx@k
  5258  041B  3185               	movlp	high __stringtab
  5259  041C  000A               	callw
  5260  041D  3183               	pagesel	$	;select current page
  5261  041E  3800               	iorlw	0
  5262  041F  1903               	btfsc	3,2
  5263  0420  2C3D               	goto	i1l2108
  5264  0421                     i1l2100:	
  5265  0421  3573               	lslf	i1Mrf49xaModeRx@k,w
  5266  0422  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5267  0423  3185               	movlp	high __stringtab
  5268  0424  000A               	callw
  5269  0425  3183               	pagesel	$	;select current page
  5270  0426  3A55               	xorlw	85
  5271  0427  1903               	skipnz
  5272  0428  2C35               	goto	i1l2104
  5273  0429  3573               	lslf	i1Mrf49xaModeRx@k,w
  5274  042A  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5275  042B  3185               	movlp	high __stringtab
  5276  042C  000A               	callw
  5277  042D  00F1               	movwf	i1Mrf49TxCmd@val
  5278  042E  3573               	lslf	i1Mrf49xaModeRx@k,w
  5279  042F  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5280  0430  3185               	movlp	high __stringtab
  5281  0431  000A               	callw
  5282  0432  3183               	pagesel	$	;select current page
  5283  0433  3184  2441         	fcall	i1_Mrf49TxCmd
  5284  0435                     i1l2104:	
  5285  0435  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5286  0436  0AF3               	incf	i1Mrf49xaModeRx@k,f
  5287  0437  3185               	movlp	high __stringtab
  5288  0438  000A               	callw
  5289  0439  3183               	pagesel	$	;select current page
  5290  043A  0273               	subwf	i1Mrf49xaModeRx@k,w
  5291  043B  1C03               	skipc
  5292  043C  2C21               	goto	i1l2100
  5293  043D                     i1l2108:	
  5294                           
  5295                           ;mrf49xa.c: 78: rfTrcvStatus.state = RECV_IDLE;
  5296  043D  0021               	movlb	1	; select bank1
  5297  043E  01A0               	clrf	_rfTrcvStatus^(0+128)
  5298                           
  5299                           ;mrf49xa.c: 79: rfTrcvStatus.hwByte = 0;
  5300  043F  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  5301  0440  0008               	return
  5302  0441                     __end_ofi1_Mrf49xaModeRx:	
  5303  0441                     __ptext23:	
  5304 ;; *************** function i1_Mrf49TxCmd *****************
  5305 ;; Defined at:
  5306 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  cmd             1    wreg     unsigned char 
  5309 ;;  val             1    1[COMMON] unsigned char 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;  cmd             1    2[COMMON] unsigned char 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;		None               void
  5314 ;; Registers used:
  5315 ;;		wreg, status,2, status,0, pclath, cstack
  5316 ;; Tracked objects:
  5317 ;;		On entry : 1C/2
  5318 ;;		On exit  : 1F/2
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5321 ;;      Params:         1       0       0       0
  5322 ;;      Locals:         1       0       0       0
  5323 ;;      Temps:          0       0       0       0
  5324 ;;      Totals:         2       0       0       0
  5325 ;;Total ram usage:        2 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    1
  5328 ;; This function calls:
  5329 ;;		i1_Mrf49SpiTx
  5330 ;; This function is called by:
  5331 ;;		i1_Mrf49xaModeRx
  5332 ;;		i1_Mrf49TxByte
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           
  5337                           ;psect for function i1_Mrf49TxCmd
  5338  0441                     i1_Mrf49TxCmd:	
  5339                           
  5340                           ;incstack = 0
  5341                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5342                           ;i1Mrf49TxCmd@cmd stored from wreg
  5343  0441  00F2               	movwf	i1Mrf49TxCmd@cmd
  5344                           
  5345                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  5346  0442  0022               	movlb	2	; select bank2
  5347  0443  130E               	bcf	14,6	;volatile
  5348                           
  5349                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5350  0444  0872               	movf	i1Mrf49TxCmd@cmd,w
  5351  0445  244B  3183         	fcall	i1_Mrf49SpiTx
  5352                           
  5353                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5354  0447  0871               	movf	i1Mrf49TxCmd@val,w
  5355  0448  244B               	fcall	i1_Mrf49SpiTx
  5356                           
  5357                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  5358  0449  170E               	bsf	14,6	;volatile
  5359  044A  0008               	return
  5360  044B                     __end_ofi1_Mrf49TxCmd:	
  5361  044B                     __ptext27:	
  5362 ;; *************** function i1_Mrf49SpiTx *****************
  5363 ;; Defined at:
  5364 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  byte            1    wreg     unsigned char 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  byte            1    0[COMMON] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;		None               void
  5371 ;; Registers used:
  5372 ;;		wreg
  5373 ;; Tracked objects:
  5374 ;;		On entry : 1F/2
  5375 ;;		On exit  : 1F/2
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5378 ;;      Params:         0       0       0       0
  5379 ;;      Locals:         1       0       0       0
  5380 ;;      Temps:          0       0       0       0
  5381 ;;      Totals:         1       0       0       0
  5382 ;;Total ram usage:        1 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		i1_Mrf49TxCmd
  5388 ;;		i1_Mrf49RxCmd
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function i1_Mrf49SpiTx
  5394  044B                     i1_Mrf49SpiTx:	
  5395                           
  5396                           ;incstack = 0
  5397                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  5398                           ;i1Mrf49SpiTx@byte stored from wreg
  5399  044B  00F0               	movwf	i1Mrf49SpiTx@byte
  5400                           
  5401                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  5402  044C  1BF0               	btfsc	i1Mrf49SpiTx@byte,7
  5403  044D  2C50               	goto	i1l2012
  5404  044E  0020               	movlb	0	; select bank0
  5405  044F  2C52               	goto	i1l205
  5406  0450                     i1l2012:	
  5407  0450  178D               	bsf	13,7	;volatile
  5408  0451  2C53               	goto	i1l206
  5409  0452                     i1l205:	
  5410  0452  138D               	bcf	13,7	;volatile
  5411  0453                     i1l206:	
  5412  0453  178E               	bsf	14,7	;volatile
  5413  0454  0000               	nop	;# 
  5414  0455  0022               	movlb	2	; select bank2
  5415  0456  138E               	bcf	14,7	;volatile
  5416  0457  1B70               	btfsc	i1Mrf49SpiTx@byte,6
  5417  0458  2C5B               	goto	i1l2016
  5418  0459  0020               	movlb	0	; select bank0
  5419  045A  2C5D               	goto	i1l209
  5420  045B                     i1l2016:	
  5421  045B  178D               	bsf	13,7	;volatile
  5422  045C  2C5E               	goto	i1l210
  5423  045D                     i1l209:	
  5424  045D  138D               	bcf	13,7	;volatile
  5425  045E                     i1l210:	
  5426  045E  178E               	bsf	14,7	;volatile
  5427  045F  0000               	nop	;# 
  5428  0460  0022               	movlb	2	; select bank2
  5429  0461  138E               	bcf	14,7	;volatile
  5430  0462  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
  5431  0463  2C66               	goto	i1l2020
  5432  0464  0020               	movlb	0	; select bank0
  5433  0465  2C68               	goto	i1l213
  5434  0466                     i1l2020:	
  5435  0466  178D               	bsf	13,7	;volatile
  5436  0467  2C69               	goto	i1l214
  5437  0468                     i1l213:	
  5438  0468  138D               	bcf	13,7	;volatile
  5439  0469                     i1l214:	
  5440  0469  178E               	bsf	14,7	;volatile
  5441  046A  0000               	nop	;# 
  5442  046B  0022               	movlb	2	; select bank2
  5443  046C  138E               	bcf	14,7	;volatile
  5444  046D  1A70               	btfsc	i1Mrf49SpiTx@byte,4
  5445  046E  2C71               	goto	i1l2024
  5446  046F  0020               	movlb	0	; select bank0
  5447  0470  2C73               	goto	i1l217
  5448  0471                     i1l2024:	
  5449  0471  178D               	bsf	13,7	;volatile
  5450  0472  2C74               	goto	i1l218
  5451  0473                     i1l217:	
  5452  0473  138D               	bcf	13,7	;volatile
  5453  0474                     i1l218:	
  5454  0474  178E               	bsf	14,7	;volatile
  5455  0475  0000               	nop	;# 
  5456  0476  0022               	movlb	2	; select bank2
  5457  0477  138E               	bcf	14,7	;volatile
  5458  0478  19F0               	btfsc	i1Mrf49SpiTx@byte,3
  5459  0479  2C7C               	goto	i1l2028
  5460  047A  0020               	movlb	0	; select bank0
  5461  047B  2C7E               	goto	i1l221
  5462  047C                     i1l2028:	
  5463  047C  178D               	bsf	13,7	;volatile
  5464  047D  2C7F               	goto	i1l222
  5465  047E                     i1l221:	
  5466  047E  138D               	bcf	13,7	;volatile
  5467  047F                     i1l222:	
  5468  047F  178E               	bsf	14,7	;volatile
  5469  0480  0000               	nop	;# 
  5470  0481  0022               	movlb	2	; select bank2
  5471  0482  138E               	bcf	14,7	;volatile
  5472  0483  1970               	btfsc	i1Mrf49SpiTx@byte,2
  5473  0484  2C87               	goto	i1l2032
  5474  0485  0020               	movlb	0	; select bank0
  5475  0486  2C89               	goto	i1l225
  5476  0487                     i1l2032:	
  5477  0487  178D               	bsf	13,7	;volatile
  5478  0488  2C8A               	goto	i1l226
  5479  0489                     i1l225:	
  5480  0489  138D               	bcf	13,7	;volatile
  5481  048A                     i1l226:	
  5482  048A  178E               	bsf	14,7	;volatile
  5483  048B  0000               	nop	;# 
  5484  048C  0022               	movlb	2	; select bank2
  5485  048D  138E               	bcf	14,7	;volatile
  5486  048E  18F0               	btfsc	i1Mrf49SpiTx@byte,1
  5487  048F  2C92               	goto	i1l2036
  5488  0490  0020               	movlb	0	; select bank0
  5489  0491  2C94               	goto	i1l229
  5490  0492                     i1l2036:	
  5491  0492  178D               	bsf	13,7	;volatile
  5492  0493  2C95               	goto	i1l230
  5493  0494                     i1l229:	
  5494  0494  138D               	bcf	13,7	;volatile
  5495  0495                     i1l230:	
  5496  0495  178E               	bsf	14,7	;volatile
  5497  0496  0000               	nop	;# 
  5498  0497  0022               	movlb	2	; select bank2
  5499  0498  138E               	bcf	14,7	;volatile
  5500  0499  1870               	btfsc	i1Mrf49SpiTx@byte,0
  5501  049A  2C9D               	goto	i1l2040
  5502  049B  0020               	movlb	0	; select bank0
  5503  049C  2C9F               	goto	i1l233
  5504  049D                     i1l2040:	
  5505  049D  178D               	bsf	13,7	;volatile
  5506  049E  2CA0               	goto	i1l234
  5507  049F                     i1l233:	
  5508  049F  138D               	bcf	13,7	;volatile
  5509  04A0                     i1l234:	
  5510  04A0  178E               	bsf	14,7	;volatile
  5511  04A1  0000               	nop	;# 
  5512  04A2  0022               	movlb	2	; select bank2
  5513  04A3  138E               	bcf	14,7	;volatile
  5514                           
  5515                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  5516  04A4  138D               	bcf	13,7	;volatile
  5517  04A5  0008               	return
  5518  04A6                     __end_ofi1_Mrf49SpiTx:	
  5519  04A6                     __ptext24:	
  5520 ;; *************** function i1_Mrf49RxSts *****************
  5521 ;; Defined at:
  5522 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;		None
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;		None               void
  5529 ;; Registers used:
  5530 ;;		wreg, status,2, pclath, cstack
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 1F/2
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5536 ;;      Params:         0       0       0       0
  5537 ;;      Locals:         0       0       0       0
  5538 ;;      Temps:          0       0       0       0
  5539 ;;      Totals:         0       0       0       0
  5540 ;;Total ram usage:        0 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    1
  5543 ;; This function calls:
  5544 ;;		i1_Mrf49SpiRx
  5545 ;; This function is called by:
  5546 ;;		i1_Mrf49xaServe
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           
  5551                           ;psect for function i1_Mrf49RxSts
  5552  04A6                     i1_Mrf49RxSts:	
  5553                           
  5554                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  5555                           
  5556                           ;incstack = 0
  5557                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  5558  04A6  120B               	bcf	11,4	;volatile
  5559                           
  5560                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  5561  04A7  0022               	movlb	2	; select bank2
  5562  04A8  130E               	bcf	14,6	;volatile
  5563                           
  5564                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  5565  04A9  24B4  3183         	fcall	i1_Mrf49SpiRx
  5566  04AB  0020               	movlb	0	; select bank0
  5567  04AC  00AA               	movwf	_mrf49Status
  5568                           
  5569                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  5570  04AD  24B4               	fcall	i1_Mrf49SpiRx
  5571  04AE  0020               	movlb	0	; select bank0
  5572  04AF  00AB               	movwf	_mrf49Status+1
  5573                           
  5574                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  5575  04B0  0022               	movlb	2	; select bank2
  5576  04B1  170E               	bsf	14,6	;volatile
  5577                           
  5578                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  5579  04B2  160B               	bsf	11,4	;volatile
  5580  04B3  0008               	return
  5581  04B4                     __end_ofi1_Mrf49RxSts:	
  5582  04B4                     __ptext28:	
  5583 ;; *************** function i1_Mrf49SpiRx *****************
  5584 ;; Defined at:
  5585 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      unsigned char 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2
  5594 ;; Tracked objects:
  5595 ;;		On entry : 1D/2
  5596 ;;		On exit  : 1F/2
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5599 ;;      Params:         0       0       0       0
  5600 ;;      Locals:         1       0       0       0
  5601 ;;      Temps:          0       0       0       0
  5602 ;;      Totals:         1       0       0       0
  5603 ;;Total ram usage:        1 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		i1_Mrf49RxCmd
  5609 ;;		i1_Mrf49RxSts
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           
  5614                           ;psect for function i1_Mrf49SpiRx
  5615  04B4                     i1_Mrf49SpiRx:	
  5616                           
  5617                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  5621  04B4  01F0               	clrf	i1Mrf49SpiRx@data
  5622                           
  5623                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  5624  04B5  0022               	movlb	2	; select bank2
  5625  04B6  138D               	bcf	13,7	;volatile
  5626  04B7  0020               	movlb	0	; select bank0
  5627  04B8  1A8E               	btfsc	14,5	;volatile
  5628  04B9  17F0               	bsf	i1Mrf49SpiRx@data,7
  5629  04BA  0022               	movlb	2	; select bank2
  5630  04BB  178E               	bsf	14,7	;volatile
  5631  04BC  0000               	nop	;# 
  5632  04BD  0022               	movlb	2	; select bank2
  5633  04BE  138E               	bcf	14,7	;volatile
  5634                           
  5635                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5636  04BF  0020               	movlb	0	; select bank0
  5637  04C0  1A8E               	btfsc	14,5	;volatile
  5638  04C1  1770               	bsf	i1Mrf49SpiRx@data,6
  5639  04C2  0022               	movlb	2	; select bank2
  5640  04C3  178E               	bsf	14,7	;volatile
  5641  04C4  0000               	nop	;# 
  5642  04C5  0022               	movlb	2	; select bank2
  5643  04C6  138E               	bcf	14,7	;volatile
  5644                           
  5645                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5646  04C7  0020               	movlb	0	; select bank0
  5647  04C8  1A8E               	btfsc	14,5	;volatile
  5648  04C9  16F0               	bsf	i1Mrf49SpiRx@data,5
  5649  04CA  0022               	movlb	2	; select bank2
  5650  04CB  178E               	bsf	14,7	;volatile
  5651  04CC  0000               	nop	;# 
  5652  04CD  0022               	movlb	2	; select bank2
  5653  04CE  138E               	bcf	14,7	;volatile
  5654                           
  5655                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5656  04CF  0020               	movlb	0	; select bank0
  5657  04D0  1A8E               	btfsc	14,5	;volatile
  5658  04D1  1670               	bsf	i1Mrf49SpiRx@data,4
  5659  04D2  0022               	movlb	2	; select bank2
  5660  04D3  178E               	bsf	14,7	;volatile
  5661  04D4  0000               	nop	;# 
  5662  04D5  0022               	movlb	2	; select bank2
  5663  04D6  138E               	bcf	14,7	;volatile
  5664                           
  5665                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5666  04D7  0020               	movlb	0	; select bank0
  5667  04D8  1A8E               	btfsc	14,5	;volatile
  5668  04D9  15F0               	bsf	i1Mrf49SpiRx@data,3
  5669  04DA  0022               	movlb	2	; select bank2
  5670  04DB  178E               	bsf	14,7	;volatile
  5671  04DC  0000               	nop	;# 
  5672  04DD  0022               	movlb	2	; select bank2
  5673  04DE  138E               	bcf	14,7	;volatile
  5674                           
  5675                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5676  04DF  0020               	movlb	0	; select bank0
  5677  04E0  1A8E               	btfsc	14,5	;volatile
  5678  04E1  1570               	bsf	i1Mrf49SpiRx@data,2
  5679  04E2  0022               	movlb	2	; select bank2
  5680  04E3  178E               	bsf	14,7	;volatile
  5681  04E4  0000               	nop	;# 
  5682  04E5  0022               	movlb	2	; select bank2
  5683  04E6  138E               	bcf	14,7	;volatile
  5684                           
  5685                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5686  04E7  0020               	movlb	0	; select bank0
  5687  04E8  1A8E               	btfsc	14,5	;volatile
  5688  04E9  14F0               	bsf	i1Mrf49SpiRx@data,1
  5689  04EA  0022               	movlb	2	; select bank2
  5690  04EB  178E               	bsf	14,7	;volatile
  5691  04EC  0000               	nop	;# 
  5692  04ED  0022               	movlb	2	; select bank2
  5693  04EE  138E               	bcf	14,7	;volatile
  5694                           
  5695                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5696  04EF  0020               	movlb	0	; select bank0
  5697  04F0  1A8E               	btfsc	14,5	;volatile
  5698  04F1  1470               	bsf	i1Mrf49SpiRx@data,0
  5699  04F2  0022               	movlb	2	; select bank2
  5700  04F3  178E               	bsf	14,7	;volatile
  5701  04F4  0000               	nop	;# 
  5702  04F5  0022               	movlb	2	; select bank2
  5703  04F6  138E               	bcf	14,7	;volatile
  5704                           
  5705                           ;mrf49xa_spi_pic16.c: 40: return data;
  5706  04F7  0870               	movf	i1Mrf49SpiRx@data,w
  5707  04F8  0008               	return
  5708  04F9                     __end_ofi1_Mrf49SpiRx:	
  5709  007E                     btemp	set	126	;btemp
  5710  007E                     wtemp	set	126
  5711  007E                     wtemp0	set	126
  5712  0080                     wtemp1	set	128
  5713  0082                     wtemp2	set	130
  5714  0084                     wtemp3	set	132
  5715  0086                     wtemp4	set	134
  5716  0088                     wtemp5	set	136
  5717  007F                     wtemp6	set	127
  5718  007E                     ttemp	set	126
  5719  007E                     ttemp0	set	126
  5720  0081                     ttemp1	set	129
  5721  0084                     ttemp2	set	132
  5722  0087                     ttemp3	set	135
  5723  007F                     ttemp4	set	127
  5724  007E                     ltemp	set	126
  5725  007E                     ltemp0	set	126
  5726  0082                     ltemp1	set	130
  5727  0086                     ltemp2	set	134
  5728  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     10      12
    BANK1            80      0      76
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    S323rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaInit
    _Mrf49xaTick->_Mrf49xaModeTx
    _Mrf49xaTick->_Mrf49xaTxPacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4172
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          6     6      0    1157
                                              4 BANK0      4     4      0
                         _Mrf49RxSts
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      4     3      1     347
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     688
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    3015
                                              6 BANK0      4     4      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0    1639
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     688
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     598
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     576
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               1     1      0    3399
                                              6 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (7) i1_Mrf49xaServe                                       2     2      0    3399
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaModeRx                                      1     1      0    1277
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49TxByte                                        1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxCmd                                         2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxSts                                         0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxByte                                        0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxCmd                                         2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49SpiRx                                         1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49TxCmd
       _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _Mrf49xaTick
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Mrf49xaTxPacket
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      A       C       6       15.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      5F      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Fri Apr 18 11:25:22 2014

                            pc 0002          Mrf49xaTxPacket@packet 0023                            l210 0221  
                          l221 0243                            l213 022B                            l205 0213  
                          l230 025D                            l222 0245                            l214 022D  
                          l206 0215                            l233 0267                            l225 024F  
                          l217 0237                            l209 021F                            l234 0269  
                          l226 0251                            l218 0239                            l332 009B  
                          l229 025B                            l391 0122                            wreg 0009  
             i1Mrf49xaModeRx@k 0073                           S2264 0538                           l2008 005A  
    Mrf49xaTxPacket@swapSrcDst 0020                           l1710 017D                           l1712 017F  
                         l1730 01A7                           l1714 0183                           l1706 0171  
                         l1810 00F7                           l1740 01BF                           l1652 010E  
                         l1804 00D9                           l1726 019F                           l1718 0189  
                         l1662 0126                           l1742 01CB                           l1814 0100  
                         l1760 01F4                           l1728 01A3                           l1736 01AE  
                         l1672 0134                           l1808 00EB                           l1666 012B  
                         l1658 0117                           l1818 0102                           l1764 01FD  
                         l1756 01E0                           l1668 012E                           l1782 003E  
                         l1950 02E7                           l1942 0312                           l1696 0158  
                         l1688 014C                           l1928 0307                           l1786 0047  
                         l1778 002A                           l1970 0077                Mrf49TxByte@byte 0023  
                         l1984 0088                           l1976 007F                           l1968 0072  
                         u1827 008D                           u1837 00B8                           u1847 00C7  
                         u1857 00E5                           _main 004D                __end_of_AdcInit 02D1  
                         fsr0h 0005                           fsr1h 0007                           fsr0l 0004  
                         indf0 0000                           indf1 0001                           fsr1l 0006  
                         btemp 007E                           ltemp 007E                           start 0014  
                         ttemp 007E                           wtemp 007E        __end_ofi1_Mrf49xaModeRx 0441  
          __end_of_Mrf49RxByte 01D7            __end_of_Mrf49TxByte 01D5            __end_of_Mrf49xaInit 0108  
          __end_of_Mrf49xaTick 009F           _Mrf49xaPacketPending 02D6                          ?_main 0070  
                        i1l210 045E                          i1l131 0011                          i1l221 047E  
                        i1l213 0468                          i1l205 0452                          i1l230 0495  
                        i1l222 047F                          i1l214 0469                          i1l206 0453  
                        i1l233 049F                          i1l225 0489                          i1l217 0473  
                        i1l209 045D                          i1l234 04A0                          i1l226 048A  
                        i1l218 0474                          i1l229 0494                          i1l391 0367  
                   _Mrf49RxCmd 009F                     _Mrf49TxCmd 0201                     _Mrf49SpiRx 027B  
                   _Mrf49SpiTx 020D                     _Mrf49RxSts 026F                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __initialization 0016                     _ExtIntInit 02D1                   __end_of_main 005D  
        ?_Mrf49xaPacketPending 0070                         ??_main 0077           __end_of_Mrf49xaServe 01D0  
                       _ADCON0 009D                         _ADCON1 009E                         _ADCON2 009F  
                    ??_AdcInit 0077                         i1S2266 0540                         _ANSELA 018C  
                       _ANSELB 018D                         _ANSELC 018E             i1Mrf49xaServe@data 0075  
                       i1l2020 0466                         i1l2012 0450                         i1l2100 0421  
                       i1l2040 049D                         i1l2032 0487                         i1l2024 0471  
                       i1l2016 045B                         i1l2104 0435                         i1l2130 036B  
                       i1l2210 040C                         i1l2122 0353                         i1l2036 0492  
                       i1l2028 047C                         i1l2108 043D                         i1l2204 03EF  
                       i1l2140 037A                         i1l2134 0371                         i1l2126 035C  
                       i1l2136 0374                         i1l2208 0400                         i1l2180 03C0  
                       i1l2164 039D                         i1l2156 0390                         i1l2182 03C4  
                       i1l2174 03B4                         i1l2176 03BC                         i1l2194 03E0  
                       i1l2186 03CA                         i1l2178 03BE                         i1l2196 03E4  
                       i1l2198 03E8                         _FVRCON 0117                         _OSCCON 0099  
                  _Mrf49RxByte 01D5                    _Mrf49TxByte 01D0               ?i1_Mrf49xaModeRx 0070  
                  _Mrf49xaInit 00AE                    _Mrf49xaTick 005D                _Mrf49xaRxPacket 02E0  
              _Mrf49xaTxPacket 02EE                         _extInt 0004                    ?_Mrf49RxCmd 0070  
                  ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070  
                  ?_Mrf49RxSts 0070        __end_of__initialization 0020          __end_ofi1_Mrf49RxByte 0419  
        __end_ofi1_Mrf49TxByte 0416                    ?_ExtIntInit 0070                 __pcstackCOMMON 0070  
       ??_Mrf49xaPacketPending 0077        __size_ofi1_Mrf49xaServe 00C4                 _OPTION_REGbits 0095  
                ??_SysInitGpio 0077                     __pbssBANK0 002A                     __pbssBANK1 00A0  
      __end_of_Mrf49xaRxPacket 02EE        __end_of_Mrf49xaTxPacket 0326          __end_of_Mrf49xaModeRx 0201  
        __end_of_Mrf49xaModeTx 004D            __size_of_Mrf49RxCmd 000F            __size_of_Mrf49TxCmd 000C  
          __size_of_Mrf49SpiRx 0047            __size_of_Mrf49SpiTx 0062            __size_of_Mrf49RxSts 000C  
                   __pmaintext 004D                     __pintentry 0004                        ?_extInt 0070  
        __size_of_Mrf49xaServe 00C8                        _AdcInit 02C2            __size_of_ExtIntInit 0005  
                   __stringtab 0500                  ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071  
                ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070                  ?i1_Mrf49RxSts 0070  
          __end_of_SysInitGpio 0343                   _Mrf49xaServe 0108                __size_of_extInt 0010  
            _mrfRegset_InitCnt 0501                        __ptext1 0326                        __ptext2 005D  
                      __ptext3 02EE                        __ptext4 02E0                        __ptext5 02D6  
                      __ptext6 0022                        __ptext7 00AE                        __ptext8 0108  
                      __ptext9 01D7                        clrloop0 0549           end_of_initialization 0020  
                 ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070                 ??i1_Mrf49RxCmd 0071  
               ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070                 ??i1_Mrf49SpiTx 0070  
               ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070               ?_Mrf49xaTxPacket 0020  
                 ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 0530           __end_of_mrfRegset_Tx 0538  
                 ?_Mrf49xaTick 0070                 i1_Mrf49xaServe 034D      __end_of_mrfRegset_InitCnt 0502  
                    _PORTAbits 000C                      _PORTCbits 000E                   ??_Mrf49RxCmd 0077  
                 ??_Mrf49TxCmd 0077                   ??_Mrf49SpiRx 0077                   ??_Mrf49SpiTx 0077  
                 ??_Mrf49RxSts 0077                      _TRISAbits 008C                      _TRISBbits 008D  
                    _TRISCbits 008E                    _SysInitGpio 0326                 Mrf49SpiRx@data 0020  
               Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 00AE             __end_of_Mrf49TxCmd 020D  
       __end_ofi1_Mrf49xaServe 0411                   ??_ExtIntInit 0077             __end_of_Mrf49SpiRx 02C2  
           __end_of_Mrf49SpiTx 026F             __end_of_Mrf49RxSts 027B       __size_ofi1_Mrf49xaModeRx 0028  
               __end_of_extInt 0014            start_initialization 0016             __end_of_ExtIntInit 02D6  
              ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0502                _mrfRegset_TxCnt 0503  
                     ??_extInt 0076  __size_of_Mrf49xaPacketPending 000A         __size_ofi1_Mrf49RxByte 0003  
       __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 034D           __end_ofi1_Mrf49TxCmd 044B  
         __end_ofi1_Mrf49SpiRx 04F9           __end_ofi1_Mrf49SpiTx 04A6           __end_ofi1_Mrf49RxSts 04B4  
                    ___latbits 0001                  __pcstackBANK0 0020              i1Mrf49TxByte@byte 0073  
                     ?_AdcInit 0070                   _rfTrcvStatus 00A0           __size_of_Mrf49RxByte 0002  
         __size_of_Mrf49TxByte 0005           __size_of_Mrf49xaInit 005A           __size_of_Mrf49xaTick 0042  
                    __pstrings 0500                      __pswtext1 0538                      __pswtext2 0540  
       __size_of_Mrf49xaModeRx 002A         __size_of_Mrf49xaModeTx 002B                   _mrfRegset_Rx 0524  
                 _mrfRegset_Tx 0530              ??i1_Mrf49xaModeRx 0073                       _LATAbits 010C  
                     _LATBbits 010D                       _LATCbits 010E                  i1_Mrf49RxByte 0416  
      __end_of_mrfRegset_RxCnt 0503                  i1_Mrf49TxByte 0411        __end_of_mrfRegset_TxCnt 0504  
                    clear_ram0 0548                    _mrf49Status 002A                 Mrf49xaModeRx@k 0023  
               Mrf49xaModeTx@k 0023                  Mrf49RxCmd@cmd 0021                  Mrf49RxCmd@val 0022  
                Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021                       _WPUAbits 020C  
             __size_of_AdcInit 000F                   ?_SysInitGpio 0070                 ?i1_Mrf49RxByte 0070  
               ?i1_Mrf49TxByte 0070                  _Mrf49xaModeRx 01D7                  _Mrf49xaModeTx 0022  
               _mrfRegset_Init 0504       __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000A  
        __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0045          __size_ofi1_Mrf49SpiTx 005B  
             i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000E       __size_of_Mrf49xaTxPacket 0038  
             i1Mrf49SpiTx@byte 0070             __end_of__stringtab 0501                       __ptext10 01D0  
                     __ptext11 0201                       __ptext20 034D                       __ptext12 026F  
                     __ptext21 0419                       __ptext13 01D5                       __ptext22 0411  
                     __ptext14 009F                       __ptext23 0441                       __ptext15 020D  
                     __ptext24 04A6                       __ptext16 027B                       __ptext25 0416  
                     __ptext17 02D1                       __ptext26 0343                       __ptext18 02C2  
                     __ptext27 044B                       __ptext28 04B4               ??i1_Mrf49xaServe 0074  
                __size_of_main 0010                   i1_Mrf49RxCmd 0343         __end_of_mrfRegset_Init 0524  
                 i1_Mrf49TxCmd 0441                   i1_Mrf49SpiRx 04B4                   i1_Mrf49SpiTx 044B  
               ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070                   i1_Mrf49RxSts 04A6  
              i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072             Mrf49xaTick@timeout 0026  
                   _INTCONbits 000B                i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071  
              ??i1_Mrf49RxByte 0073                       intlevel1 0000                ??i1_Mrf49TxByte 0073  
 __end_of_Mrf49xaPacketPending 02E0                   Mrf49xaInit@k 0029                  ?_Mrf49xaServe 0070  
            Mrf49xaTick@packet 0027                i1_Mrf49xaModeRx 0419              ??_Mrf49xaRxPacket 0077  
            ??_Mrf49xaTxPacket 0021                  ??_Mrf49RxByte 0077                  ??_Mrf49TxByte 0077  
              ??_Mrf49xaModeRx 0077                ??_Mrf49xaModeTx 0077           __size_of_SysInitGpio 001D  
             Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024                  ??_Mrf49xaInit 0026  
                ??_Mrf49xaTick 0024               Mrf49xaTxPacket@i 0022  

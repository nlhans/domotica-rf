

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Fri Apr 18 10:00:10 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	swtext1,local,class=CONST,delta=2
    12                           	psect	swtext2,local,class=CONST,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	swtext3,local,class=CONST,delta=2
    15                           	psect	swtext4,local,class=CONST,delta=2
    16                           	psect	text26,local,class=CODE,merge=1,delta=2
    17                           	psect	pa_nodes,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  008C                     	;# 
    47  008D                     	;# 
    48  008E                     	;# 
    49  0091                     	;# 
    50  0092                     	;# 
    51  0093                     	;# 
    52  0095                     	;# 
    53  0096                     	;# 
    54  0097                     	;# 
    55  0099                     	;# 
    56  009A                     	;# 
    57  009B                     	;# 
    58  009B                     	;# 
    59  009C                     	;# 
    60  009D                     	;# 
    61  009E                     	;# 
    62  009F                     	;# 
    63  010C                     	;# 
    64  010D                     	;# 
    65  010E                     	;# 
    66  0111                     	;# 
    67  0112                     	;# 
    68  0113                     	;# 
    69  0114                     	;# 
    70  0115                     	;# 
    71  0116                     	;# 
    72  0117                     	;# 
    73  0118                     	;# 
    74  0119                     	;# 
    75  011D                     	;# 
    76  018C                     	;# 
    77  018D                     	;# 
    78  018E                     	;# 
    79  0191                     	;# 
    80  0191                     	;# 
    81  0192                     	;# 
    82  0193                     	;# 
    83  0193                     	;# 
    84  0194                     	;# 
    85  0195                     	;# 
    86  0196                     	;# 
    87  0199                     	;# 
    88  019A                     	;# 
    89  019B                     	;# 
    90  019B                     	;# 
    91  019C                     	;# 
    92  019D                     	;# 
    93  019E                     	;# 
    94  019F                     	;# 
    95  020C                     	;# 
    96  020D                     	;# 
    97  0211                     	;# 
    98  0211                     	;# 
    99  0212                     	;# 
   100  0212                     	;# 
   101  0213                     	;# 
   102  0213                     	;# 
   103  0214                     	;# 
   104  0214                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0216                     	;# 
   109  0216                     	;# 
   110  0217                     	;# 
   111  0217                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0394                     	;# 
   116  0395                     	;# 
   117  0396                     	;# 
   118  0498                     	;# 
   119  0498                     	;# 
   120  0499                     	;# 
   121  049A                     	;# 
   122  049B                     	;# 
   123  049B                     	;# 
   124  049C                     	;# 
   125  049E                     	;# 
   126  049F                     	;# 
   127  0611                     	;# 
   128  0612                     	;# 
   129  0613                     	;# 
   130  0613                     	;# 
   131  0614                     	;# 
   132  0615                     	;# 
   133  0616                     	;# 
   134  0616                     	;# 
   135  0617                     	;# 
   136  0618                     	;# 
   137  0619                     	;# 
   138  0619                     	;# 
   139  061A                     	;# 
   140  061B                     	;# 
   141  061C                     	;# 
   142  061C                     	;# 
   143  0691                     	;# 
   144  0692                     	;# 
   145  0693                     	;# 
   146  0694                     	;# 
   147  0695                     	;# 
   148  0F0F                     	;# 
   149  0F10                     	;# 
   150  0F11                     	;# 
   151  0F12                     	;# 
   152  0F13                     	;# 
   153  0F14                     	;# 
   154  0F15                     	;# 
   155  0F16                     	;# 
   156  0F17                     	;# 
   157  0F18                     	;# 
   158  0F19                     	;# 
   159  0F1A                     	;# 
   160  0F1B                     	;# 
   161  0F1C                     	;# 
   162  0F1D                     	;# 
   163  0F1E                     	;# 
   164  0F1F                     	;# 
   165  0F20                     	;# 
   166  0F21                     	;# 
   167  0F22                     	;# 
   168  0F23                     	;# 
   169  0F24                     	;# 
   170  0F25                     	;# 
   171  0F26                     	;# 
   172  0F27                     	;# 
   173  0F28                     	;# 
   174  0F29                     	;# 
   175  0F2A                     	;# 
   176  0F2B                     	;# 
   177  0F2C                     	;# 
   178  0F2D                     	;# 
   179  0F2E                     	;# 
   180  0F2F                     	;# 
   181  0F8C                     	;# 
   182  0F8D                     	;# 
   183  0F91                     	;# 
   184  0F95                     	;# 
   185  0F96                     	;# 
   186  0F97                     	;# 
   187  0F9C                     	;# 
   188  0F9D                     	;# 
   189  0F9E                     	;# 
   190  0FE3                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  0011                     	;# 
   218  0012                     	;# 
   219  0013                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  0111                     	;# 
   250  0112                     	;# 
   251  0113                     	;# 
   252  0114                     	;# 
   253  0115                     	;# 
   254  0116                     	;# 
   255  0117                     	;# 
   256  0118                     	;# 
   257  0119                     	;# 
   258  011D                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  018E                     	;# 
   262  0191                     	;# 
   263  0191                     	;# 
   264  0192                     	;# 
   265  0193                     	;# 
   266  0193                     	;# 
   267  0194                     	;# 
   268  0195                     	;# 
   269  0196                     	;# 
   270  0199                     	;# 
   271  019A                     	;# 
   272  019B                     	;# 
   273  019B                     	;# 
   274  019C                     	;# 
   275  019D                     	;# 
   276  019E                     	;# 
   277  019F                     	;# 
   278  020C                     	;# 
   279  020D                     	;# 
   280  0211                     	;# 
   281  0211                     	;# 
   282  0212                     	;# 
   283  0212                     	;# 
   284  0213                     	;# 
   285  0213                     	;# 
   286  0214                     	;# 
   287  0214                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0216                     	;# 
   292  0216                     	;# 
   293  0217                     	;# 
   294  0217                     	;# 
   295  0391                     	;# 
   296  0392                     	;# 
   297  0393                     	;# 
   298  0394                     	;# 
   299  0395                     	;# 
   300  0396                     	;# 
   301  0498                     	;# 
   302  0498                     	;# 
   303  0499                     	;# 
   304  049A                     	;# 
   305  049B                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049E                     	;# 
   309  049F                     	;# 
   310  0611                     	;# 
   311  0612                     	;# 
   312  0613                     	;# 
   313  0613                     	;# 
   314  0614                     	;# 
   315  0615                     	;# 
   316  0616                     	;# 
   317  0616                     	;# 
   318  0617                     	;# 
   319  0618                     	;# 
   320  0619                     	;# 
   321  0619                     	;# 
   322  061A                     	;# 
   323  061B                     	;# 
   324  061C                     	;# 
   325  061C                     	;# 
   326  0691                     	;# 
   327  0692                     	;# 
   328  0693                     	;# 
   329  0694                     	;# 
   330  0695                     	;# 
   331  0F0F                     	;# 
   332  0F10                     	;# 
   333  0F11                     	;# 
   334  0F12                     	;# 
   335  0F13                     	;# 
   336  0F14                     	;# 
   337  0F15                     	;# 
   338  0F16                     	;# 
   339  0F17                     	;# 
   340  0F18                     	;# 
   341  0F19                     	;# 
   342  0F1A                     	;# 
   343  0F1B                     	;# 
   344  0F1C                     	;# 
   345  0F1D                     	;# 
   346  0F1E                     	;# 
   347  0F1F                     	;# 
   348  0F20                     	;# 
   349  0F21                     	;# 
   350  0F22                     	;# 
   351  0F23                     	;# 
   352  0F24                     	;# 
   353  0F25                     	;# 
   354  0F26                     	;# 
   355  0F27                     	;# 
   356  0F28                     	;# 
   357  0F29                     	;# 
   358  0F2A                     	;# 
   359  0F2B                     	;# 
   360  0F2C                     	;# 
   361  0F2D                     	;# 
   362  0F2E                     	;# 
   363  0F2F                     	;# 
   364  0F8C                     	;# 
   365  0F8D                     	;# 
   366  0F91                     	;# 
   367  0F95                     	;# 
   368  0F96                     	;# 
   369  0F97                     	;# 
   370  0F9C                     	;# 
   371  0F9D                     	;# 
   372  0F9E                     	;# 
   373  0FE3                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0111                     	;# 
   433  0112                     	;# 
   434  0113                     	;# 
   435  0114                     	;# 
   436  0115                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  0118                     	;# 
   440  0119                     	;# 
   441  011D                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  018E                     	;# 
   445  0191                     	;# 
   446  0191                     	;# 
   447  0192                     	;# 
   448  0193                     	;# 
   449  0193                     	;# 
   450  0194                     	;# 
   451  0195                     	;# 
   452  0196                     	;# 
   453  0199                     	;# 
   454  019A                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020C                     	;# 
   462  020D                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0391                     	;# 
   479  0392                     	;# 
   480  0393                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0498                     	;# 
   485  0498                     	;# 
   486  0499                     	;# 
   487  049A                     	;# 
   488  049B                     	;# 
   489  049B                     	;# 
   490  049C                     	;# 
   491  049E                     	;# 
   492  049F                     	;# 
   493  0611                     	;# 
   494  0612                     	;# 
   495  0613                     	;# 
   496  0613                     	;# 
   497  0614                     	;# 
   498  0615                     	;# 
   499  0616                     	;# 
   500  0616                     	;# 
   501  0617                     	;# 
   502  0618                     	;# 
   503  0619                     	;# 
   504  0619                     	;# 
   505  061A                     	;# 
   506  061B                     	;# 
   507  061C                     	;# 
   508  061C                     	;# 
   509  0691                     	;# 
   510  0692                     	;# 
   511  0693                     	;# 
   512  0694                     	;# 
   513  0695                     	;# 
   514  0F0F                     	;# 
   515  0F10                     	;# 
   516  0F11                     	;# 
   517  0F12                     	;# 
   518  0F13                     	;# 
   519  0F14                     	;# 
   520  0F15                     	;# 
   521  0F16                     	;# 
   522  0F17                     	;# 
   523  0F18                     	;# 
   524  0F19                     	;# 
   525  0F1A                     	;# 
   526  0F1B                     	;# 
   527  0F1C                     	;# 
   528  0F1D                     	;# 
   529  0F1E                     	;# 
   530  0F1F                     	;# 
   531  0F20                     	;# 
   532  0F21                     	;# 
   533  0F22                     	;# 
   534  0F23                     	;# 
   535  0F24                     	;# 
   536  0F25                     	;# 
   537  0F26                     	;# 
   538  0F27                     	;# 
   539  0F28                     	;# 
   540  0F29                     	;# 
   541  0F2A                     	;# 
   542  0F2B                     	;# 
   543  0F2C                     	;# 
   544  0F2D                     	;# 
   545  0F2E                     	;# 
   546  0F2F                     	;# 
   547  0F8C                     	;# 
   548  0F8D                     	;# 
   549  0F91                     	;# 
   550  0F95                     	;# 
   551  0F96                     	;# 
   552  0F97                     	;# 
   553  0F9C                     	;# 
   554  0F9D                     	;# 
   555  0F9E                     	;# 
   556  0FE3                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  008C                     	;# 
   596  008D                     	;# 
   597  008E                     	;# 
   598  0091                     	;# 
   599  0092                     	;# 
   600  0093                     	;# 
   601  0095                     	;# 
   602  0096                     	;# 
   603  0097                     	;# 
   604  0099                     	;# 
   605  009A                     	;# 
   606  009B                     	;# 
   607  009B                     	;# 
   608  009C                     	;# 
   609  009D                     	;# 
   610  009E                     	;# 
   611  009F                     	;# 
   612  010C                     	;# 
   613  010D                     	;# 
   614  010E                     	;# 
   615  0111                     	;# 
   616  0112                     	;# 
   617  0113                     	;# 
   618  0114                     	;# 
   619  0115                     	;# 
   620  0116                     	;# 
   621  0117                     	;# 
   622  0118                     	;# 
   623  0119                     	;# 
   624  011D                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018E                     	;# 
   628  0191                     	;# 
   629  0191                     	;# 
   630  0192                     	;# 
   631  0193                     	;# 
   632  0193                     	;# 
   633  0194                     	;# 
   634  0195                     	;# 
   635  0196                     	;# 
   636  0199                     	;# 
   637  019A                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020D                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0391                     	;# 
   662  0392                     	;# 
   663  0393                     	;# 
   664  0394                     	;# 
   665  0395                     	;# 
   666  0396                     	;# 
   667  0498                     	;# 
   668  0498                     	;# 
   669  0499                     	;# 
   670  049A                     	;# 
   671  049B                     	;# 
   672  049B                     	;# 
   673  049C                     	;# 
   674  049E                     	;# 
   675  049F                     	;# 
   676  0611                     	;# 
   677  0612                     	;# 
   678  0613                     	;# 
   679  0613                     	;# 
   680  0614                     	;# 
   681  0615                     	;# 
   682  0616                     	;# 
   683  0616                     	;# 
   684  0617                     	;# 
   685  0618                     	;# 
   686  0619                     	;# 
   687  0619                     	;# 
   688  061A                     	;# 
   689  061B                     	;# 
   690  061C                     	;# 
   691  061C                     	;# 
   692  0691                     	;# 
   693  0692                     	;# 
   694  0693                     	;# 
   695  0694                     	;# 
   696  0695                     	;# 
   697  0F0F                     	;# 
   698  0F10                     	;# 
   699  0F11                     	;# 
   700  0F12                     	;# 
   701  0F13                     	;# 
   702  0F14                     	;# 
   703  0F15                     	;# 
   704  0F16                     	;# 
   705  0F17                     	;# 
   706  0F18                     	;# 
   707  0F19                     	;# 
   708  0F1A                     	;# 
   709  0F1B                     	;# 
   710  0F1C                     	;# 
   711  0F1D                     	;# 
   712  0F1E                     	;# 
   713  0F1F                     	;# 
   714  0F20                     	;# 
   715  0F21                     	;# 
   716  0F22                     	;# 
   717  0F23                     	;# 
   718  0F24                     	;# 
   719  0F25                     	;# 
   720  0F26                     	;# 
   721  0F27                     	;# 
   722  0F28                     	;# 
   723  0F29                     	;# 
   724  0F2A                     	;# 
   725  0F2B                     	;# 
   726  0F2C                     	;# 
   727  0F2D                     	;# 
   728  0F2E                     	;# 
   729  0F2F                     	;# 
   730  0F8C                     	;# 
   731  0F8D                     	;# 
   732  0F91                     	;# 
   733  0F95                     	;# 
   734  0F96                     	;# 
   735  0F97                     	;# 
   736  0F9C                     	;# 
   737  0F9D                     	;# 
   738  0F9E                     	;# 
   739  0FE3                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  0011                     	;# 
   767  0012                     	;# 
   768  0013                     	;# 
   769  0015                     	;# 
   770  0016                     	;# 
   771  0016                     	;# 
   772  0017                     	;# 
   773  0018                     	;# 
   774  0019                     	;# 
   775  001A                     	;# 
   776  001B                     	;# 
   777  001C                     	;# 
   778  008C                     	;# 
   779  008D                     	;# 
   780  008E                     	;# 
   781  0091                     	;# 
   782  0092                     	;# 
   783  0093                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0099                     	;# 
   788  009A                     	;# 
   789  009B                     	;# 
   790  009B                     	;# 
   791  009C                     	;# 
   792  009D                     	;# 
   793  009E                     	;# 
   794  009F                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0111                     	;# 
   799  0112                     	;# 
   800  0113                     	;# 
   801  0114                     	;# 
   802  0115                     	;# 
   803  0116                     	;# 
   804  0117                     	;# 
   805  0118                     	;# 
   806  0119                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0199                     	;# 
   820  019A                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019C                     	;# 
   824  019D                     	;# 
   825  019E                     	;# 
   826  019F                     	;# 
   827  020C                     	;# 
   828  020D                     	;# 
   829  0211                     	;# 
   830  0211                     	;# 
   831  0212                     	;# 
   832  0212                     	;# 
   833  0213                     	;# 
   834  0213                     	;# 
   835  0214                     	;# 
   836  0214                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0216                     	;# 
   841  0216                     	;# 
   842  0217                     	;# 
   843  0217                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  0394                     	;# 
   848  0395                     	;# 
   849  0396                     	;# 
   850  0498                     	;# 
   851  0498                     	;# 
   852  0499                     	;# 
   853  049A                     	;# 
   854  049B                     	;# 
   855  049B                     	;# 
   856  049C                     	;# 
   857  049E                     	;# 
   858  049F                     	;# 
   859  0611                     	;# 
   860  0612                     	;# 
   861  0613                     	;# 
   862  0613                     	;# 
   863  0614                     	;# 
   864  0615                     	;# 
   865  0616                     	;# 
   866  0616                     	;# 
   867  0617                     	;# 
   868  0618                     	;# 
   869  0619                     	;# 
   870  0619                     	;# 
   871  061A                     	;# 
   872  061B                     	;# 
   873  061C                     	;# 
   874  061C                     	;# 
   875  0691                     	;# 
   876  0692                     	;# 
   877  0693                     	;# 
   878  0694                     	;# 
   879  0695                     	;# 
   880  0F0F                     	;# 
   881  0F10                     	;# 
   882  0F11                     	;# 
   883  0F12                     	;# 
   884  0F13                     	;# 
   885  0F14                     	;# 
   886  0F15                     	;# 
   887  0F16                     	;# 
   888  0F17                     	;# 
   889  0F18                     	;# 
   890  0F19                     	;# 
   891  0F1A                     	;# 
   892  0F1B                     	;# 
   893  0F1C                     	;# 
   894  0F1D                     	;# 
   895  0F1E                     	;# 
   896  0F1F                     	;# 
   897  0F20                     	;# 
   898  0F21                     	;# 
   899  0F22                     	;# 
   900  0F23                     	;# 
   901  0F24                     	;# 
   902  0F25                     	;# 
   903  0F26                     	;# 
   904  0F27                     	;# 
   905  0F28                     	;# 
   906  0F29                     	;# 
   907  0F2A                     	;# 
   908  0F2B                     	;# 
   909  0F2C                     	;# 
   910  0F2D                     	;# 
   911  0F2E                     	;# 
   912  0F2F                     	;# 
   913  0F8C                     	;# 
   914  0F8D                     	;# 
   915  0F91                     	;# 
   916  0F95                     	;# 
   917  0F96                     	;# 
   918  0F97                     	;# 
   919  0F9C                     	;# 
   920  0F9D                     	;# 
   921  0F9E                     	;# 
   922  0FE3                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0013                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  009F                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0111                     	;# 
   982  0112                     	;# 
   983  0113                     	;# 
   984  0114                     	;# 
   985  0115                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  0118                     	;# 
   989  0119                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020C                     	;# 
  1011  020D                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0391                     	;# 
  1028  0392                     	;# 
  1029  0393                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0498                     	;# 
  1034  0498                     	;# 
  1035  0499                     	;# 
  1036  049A                     	;# 
  1037  049B                     	;# 
  1038  049B                     	;# 
  1039  049C                     	;# 
  1040  049E                     	;# 
  1041  049F                     	;# 
  1042  0611                     	;# 
  1043  0612                     	;# 
  1044  0613                     	;# 
  1045  0613                     	;# 
  1046  0614                     	;# 
  1047  0615                     	;# 
  1048  0616                     	;# 
  1049  0616                     	;# 
  1050  0617                     	;# 
  1051  0618                     	;# 
  1052  0619                     	;# 
  1053  0619                     	;# 
  1054  061A                     	;# 
  1055  061B                     	;# 
  1056  061C                     	;# 
  1057  061C                     	;# 
  1058  0691                     	;# 
  1059  0692                     	;# 
  1060  0693                     	;# 
  1061  0694                     	;# 
  1062  0695                     	;# 
  1063  0F0F                     	;# 
  1064  0F10                     	;# 
  1065  0F11                     	;# 
  1066  0F12                     	;# 
  1067  0F13                     	;# 
  1068  0F14                     	;# 
  1069  0F15                     	;# 
  1070  0F16                     	;# 
  1071  0F17                     	;# 
  1072  0F18                     	;# 
  1073  0F19                     	;# 
  1074  0F1A                     	;# 
  1075  0F1B                     	;# 
  1076  0F1C                     	;# 
  1077  0F1D                     	;# 
  1078  0F1E                     	;# 
  1079  0F1F                     	;# 
  1080  0F20                     	;# 
  1081  0F21                     	;# 
  1082  0F22                     	;# 
  1083  0F23                     	;# 
  1084  0F24                     	;# 
  1085  0F25                     	;# 
  1086  0F26                     	;# 
  1087  0F27                     	;# 
  1088  0F28                     	;# 
  1089  0F29                     	;# 
  1090  0F2A                     	;# 
  1091  0F2B                     	;# 
  1092  0F2C                     	;# 
  1093  0F2D                     	;# 
  1094  0F2E                     	;# 
  1095  0F2F                     	;# 
  1096  0F8C                     	;# 
  1097  0F8D                     	;# 
  1098  0F91                     	;# 
  1099  0F95                     	;# 
  1100  0F96                     	;# 
  1101  0F97                     	;# 
  1102  0F9C                     	;# 
  1103  0F9D                     	;# 
  1104  0F9E                     	;# 
  1105  0FE3                     	;# 
  1106  0FE4                     	;# 
  1107  0FE5                     	;# 
  1108  0FE6                     	;# 
  1109  0FE7                     	;# 
  1110  0FE8                     	;# 
  1111  0FE9                     	;# 
  1112  0FEA                     	;# 
  1113  0FEB                     	;# 
  1114  0FED                     	;# 
  1115  0FEE                     	;# 
  1116  0FEF                     	;# 
  1117  0000                     	;# 
  1118  0001                     	;# 
  1119  0002                     	;# 
  1120  0003                     	;# 
  1121  0004                     	;# 
  1122  0005                     	;# 
  1123  0006                     	;# 
  1124  0007                     	;# 
  1125  0008                     	;# 
  1126  0009                     	;# 
  1127  000A                     	;# 
  1128  000B                     	;# 
  1129  000C                     	;# 
  1130  000D                     	;# 
  1131  000E                     	;# 
  1132  0011                     	;# 
  1133  0012                     	;# 
  1134  0013                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  008C                     	;# 
  1145  008D                     	;# 
  1146  008E                     	;# 
  1147  0091                     	;# 
  1148  0092                     	;# 
  1149  0093                     	;# 
  1150  0095                     	;# 
  1151  0096                     	;# 
  1152  0097                     	;# 
  1153  0099                     	;# 
  1154  009A                     	;# 
  1155  009B                     	;# 
  1156  009B                     	;# 
  1157  009C                     	;# 
  1158  009D                     	;# 
  1159  009E                     	;# 
  1160  009F                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010E                     	;# 
  1164  0111                     	;# 
  1165  0112                     	;# 
  1166  0113                     	;# 
  1167  0114                     	;# 
  1168  0115                     	;# 
  1169  0116                     	;# 
  1170  0117                     	;# 
  1171  0118                     	;# 
  1172  0119                     	;# 
  1173  011D                     	;# 
  1174  018C                     	;# 
  1175  018D                     	;# 
  1176  018E                     	;# 
  1177  0191                     	;# 
  1178  0191                     	;# 
  1179  0192                     	;# 
  1180  0193                     	;# 
  1181  0193                     	;# 
  1182  0194                     	;# 
  1183  0195                     	;# 
  1184  0196                     	;# 
  1185  0199                     	;# 
  1186  019A                     	;# 
  1187  019B                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  019D                     	;# 
  1191  019E                     	;# 
  1192  019F                     	;# 
  1193  020C                     	;# 
  1194  020D                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0391                     	;# 
  1211  0392                     	;# 
  1212  0393                     	;# 
  1213  0394                     	;# 
  1214  0395                     	;# 
  1215  0396                     	;# 
  1216  0498                     	;# 
  1217  0498                     	;# 
  1218  0499                     	;# 
  1219  049A                     	;# 
  1220  049B                     	;# 
  1221  049B                     	;# 
  1222  049C                     	;# 
  1223  049E                     	;# 
  1224  049F                     	;# 
  1225  0611                     	;# 
  1226  0612                     	;# 
  1227  0613                     	;# 
  1228  0613                     	;# 
  1229  0614                     	;# 
  1230  0615                     	;# 
  1231  0616                     	;# 
  1232  0616                     	;# 
  1233  0617                     	;# 
  1234  0618                     	;# 
  1235  0619                     	;# 
  1236  0619                     	;# 
  1237  061A                     	;# 
  1238  061B                     	;# 
  1239  061C                     	;# 
  1240  061C                     	;# 
  1241  0691                     	;# 
  1242  0692                     	;# 
  1243  0693                     	;# 
  1244  0694                     	;# 
  1245  0695                     	;# 
  1246  0F0F                     	;# 
  1247  0F10                     	;# 
  1248  0F11                     	;# 
  1249  0F12                     	;# 
  1250  0F13                     	;# 
  1251  0F14                     	;# 
  1252  0F15                     	;# 
  1253  0F16                     	;# 
  1254  0F17                     	;# 
  1255  0F18                     	;# 
  1256  0F19                     	;# 
  1257  0F1A                     	;# 
  1258  0F1B                     	;# 
  1259  0F1C                     	;# 
  1260  0F1D                     	;# 
  1261  0F1E                     	;# 
  1262  0F1F                     	;# 
  1263  0F20                     	;# 
  1264  0F21                     	;# 
  1265  0F22                     	;# 
  1266  0F23                     	;# 
  1267  0F24                     	;# 
  1268  0F25                     	;# 
  1269  0F26                     	;# 
  1270  0F27                     	;# 
  1271  0F28                     	;# 
  1272  0F29                     	;# 
  1273  0F2A                     	;# 
  1274  0F2B                     	;# 
  1275  0F2C                     	;# 
  1276  0F2D                     	;# 
  1277  0F2E                     	;# 
  1278  0F2F                     	;# 
  1279  0F8C                     	;# 
  1280  0F8D                     	;# 
  1281  0F91                     	;# 
  1282  0F95                     	;# 
  1283  0F96                     	;# 
  1284  0F97                     	;# 
  1285  0F9C                     	;# 
  1286  0F9D                     	;# 
  1287  0F9E                     	;# 
  1288  0FE3                     	;# 
  1289  0FE4                     	;# 
  1290  0FE5                     	;# 
  1291  0FE6                     	;# 
  1292  0FE7                     	;# 
  1293  0FE8                     	;# 
  1294  0FE9                     	;# 
  1295  0FEA                     	;# 
  1296  0FEB                     	;# 
  1297  0FED                     	;# 
  1298  0FEE                     	;# 
  1299  0FEF                     	;# 
  1300  0000                     	;# 
  1301  0001                     	;# 
  1302  0002                     	;# 
  1303  0003                     	;# 
  1304  0004                     	;# 
  1305  0005                     	;# 
  1306  0006                     	;# 
  1307  0007                     	;# 
  1308  0008                     	;# 
  1309  0009                     	;# 
  1310  000A                     	;# 
  1311  000B                     	;# 
  1312  000C                     	;# 
  1313  000D                     	;# 
  1314  000E                     	;# 
  1315  0011                     	;# 
  1316  0012                     	;# 
  1317  0013                     	;# 
  1318  0015                     	;# 
  1319  0016                     	;# 
  1320  0016                     	;# 
  1321  0017                     	;# 
  1322  0018                     	;# 
  1323  0019                     	;# 
  1324  001A                     	;# 
  1325  001B                     	;# 
  1326  001C                     	;# 
  1327  008C                     	;# 
  1328  008D                     	;# 
  1329  008E                     	;# 
  1330  0091                     	;# 
  1331  0092                     	;# 
  1332  0093                     	;# 
  1333  0095                     	;# 
  1334  0096                     	;# 
  1335  0097                     	;# 
  1336  0099                     	;# 
  1337  009A                     	;# 
  1338  009B                     	;# 
  1339  009B                     	;# 
  1340  009C                     	;# 
  1341  009D                     	;# 
  1342  009E                     	;# 
  1343  009F                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0111                     	;# 
  1348  0112                     	;# 
  1349  0113                     	;# 
  1350  0114                     	;# 
  1351  0115                     	;# 
  1352  0116                     	;# 
  1353  0117                     	;# 
  1354  0118                     	;# 
  1355  0119                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019C                     	;# 
  1373  019D                     	;# 
  1374  019E                     	;# 
  1375  019F                     	;# 
  1376  020C                     	;# 
  1377  020D                     	;# 
  1378  0211                     	;# 
  1379  0211                     	;# 
  1380  0212                     	;# 
  1381  0212                     	;# 
  1382  0213                     	;# 
  1383  0213                     	;# 
  1384  0214                     	;# 
  1385  0214                     	;# 
  1386  0215                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0216                     	;# 
  1390  0216                     	;# 
  1391  0217                     	;# 
  1392  0217                     	;# 
  1393  0391                     	;# 
  1394  0392                     	;# 
  1395  0393                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0498                     	;# 
  1400  0498                     	;# 
  1401  0499                     	;# 
  1402  049A                     	;# 
  1403  049B                     	;# 
  1404  049B                     	;# 
  1405  049C                     	;# 
  1406  049E                     	;# 
  1407  049F                     	;# 
  1408  0611                     	;# 
  1409  0612                     	;# 
  1410  0613                     	;# 
  1411  0613                     	;# 
  1412  0614                     	;# 
  1413  0615                     	;# 
  1414  0616                     	;# 
  1415  0616                     	;# 
  1416  0617                     	;# 
  1417  0618                     	;# 
  1418  0619                     	;# 
  1419  0619                     	;# 
  1420  061A                     	;# 
  1421  061B                     	;# 
  1422  061C                     	;# 
  1423  061C                     	;# 
  1424  0691                     	;# 
  1425  0692                     	;# 
  1426  0693                     	;# 
  1427  0694                     	;# 
  1428  0695                     	;# 
  1429  0F0F                     	;# 
  1430  0F10                     	;# 
  1431  0F11                     	;# 
  1432  0F12                     	;# 
  1433  0F13                     	;# 
  1434  0F14                     	;# 
  1435  0F15                     	;# 
  1436  0F16                     	;# 
  1437  0F17                     	;# 
  1438  0F18                     	;# 
  1439  0F19                     	;# 
  1440  0F1A                     	;# 
  1441  0F1B                     	;# 
  1442  0F1C                     	;# 
  1443  0F1D                     	;# 
  1444  0F1E                     	;# 
  1445  0F1F                     	;# 
  1446  0F20                     	;# 
  1447  0F21                     	;# 
  1448  0F22                     	;# 
  1449  0F23                     	;# 
  1450  0F24                     	;# 
  1451  0F25                     	;# 
  1452  0F26                     	;# 
  1453  0F27                     	;# 
  1454  0F28                     	;# 
  1455  0F29                     	;# 
  1456  0F2A                     	;# 
  1457  0F2B                     	;# 
  1458  0F2C                     	;# 
  1459  0F2D                     	;# 
  1460  0F2E                     	;# 
  1461  0F2F                     	;# 
  1462  0F8C                     	;# 
  1463  0F8D                     	;# 
  1464  0F91                     	;# 
  1465  0F95                     	;# 
  1466  0F96                     	;# 
  1467  0F97                     	;# 
  1468  0F9C                     	;# 
  1469  0F9D                     	;# 
  1470  0F9E                     	;# 
  1471  0FE3                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0011                     	;# 
  1499  0012                     	;# 
  1500  0013                     	;# 
  1501  0015                     	;# 
  1502  0016                     	;# 
  1503  0016                     	;# 
  1504  0017                     	;# 
  1505  0018                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0091                     	;# 
  1514  0092                     	;# 
  1515  0093                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  009F                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0111                     	;# 
  1531  0112                     	;# 
  1532  0113                     	;# 
  1533  0114                     	;# 
  1534  0115                     	;# 
  1535  0116                     	;# 
  1536  0117                     	;# 
  1537  0118                     	;# 
  1538  0119                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020C                     	;# 
  1560  020D                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0498                     	;# 
  1583  0498                     	;# 
  1584  0499                     	;# 
  1585  049A                     	;# 
  1586  049B                     	;# 
  1587  049B                     	;# 
  1588  049C                     	;# 
  1589  049E                     	;# 
  1590  049F                     	;# 
  1591  0611                     	;# 
  1592  0612                     	;# 
  1593  0613                     	;# 
  1594  0613                     	;# 
  1595  0614                     	;# 
  1596  0615                     	;# 
  1597  0616                     	;# 
  1598  0616                     	;# 
  1599  0617                     	;# 
  1600  0618                     	;# 
  1601  0619                     	;# 
  1602  0619                     	;# 
  1603  061A                     	;# 
  1604  061B                     	;# 
  1605  061C                     	;# 
  1606  061C                     	;# 
  1607  0691                     	;# 
  1608  0692                     	;# 
  1609  0693                     	;# 
  1610  0694                     	;# 
  1611  0695                     	;# 
  1612  0F0F                     	;# 
  1613  0F10                     	;# 
  1614  0F11                     	;# 
  1615  0F12                     	;# 
  1616  0F13                     	;# 
  1617  0F14                     	;# 
  1618  0F15                     	;# 
  1619  0F16                     	;# 
  1620  0F17                     	;# 
  1621  0F18                     	;# 
  1622  0F19                     	;# 
  1623  0F1A                     	;# 
  1624  0F1B                     	;# 
  1625  0F1C                     	;# 
  1626  0F1D                     	;# 
  1627  0F1E                     	;# 
  1628  0F1F                     	;# 
  1629  0F20                     	;# 
  1630  0F21                     	;# 
  1631  0F22                     	;# 
  1632  0F23                     	;# 
  1633  0F24                     	;# 
  1634  0F25                     	;# 
  1635  0F26                     	;# 
  1636  0F27                     	;# 
  1637  0F28                     	;# 
  1638  0F29                     	;# 
  1639  0F2A                     	;# 
  1640  0F2B                     	;# 
  1641  0F2C                     	;# 
  1642  0F2D                     	;# 
  1643  0F2E                     	;# 
  1644  0F2F                     	;# 
  1645  0F8C                     	;# 
  1646  0F8D                     	;# 
  1647  0F91                     	;# 
  1648  0F95                     	;# 
  1649  0F96                     	;# 
  1650  0F97                     	;# 
  1651  0F9C                     	;# 
  1652  0F9D                     	;# 
  1653  0F9E                     	;# 
  1654  0FE3                     	;# 
  1655  0FE4                     	;# 
  1656  0FE5                     	;# 
  1657  0FE6                     	;# 
  1658  0FE7                     	;# 
  1659  0FE8                     	;# 
  1660  0FE9                     	;# 
  1661  0FEA                     	;# 
  1662  0FEB                     	;# 
  1663  0FED                     	;# 
  1664  0FEE                     	;# 
  1665  0FEF                     	;# 
  1666  0000                     	;# 
  1667  0001                     	;# 
  1668  0002                     	;# 
  1669  0003                     	;# 
  1670  0004                     	;# 
  1671  0005                     	;# 
  1672  0006                     	;# 
  1673  0007                     	;# 
  1674  0008                     	;# 
  1675  0009                     	;# 
  1676  000A                     	;# 
  1677  000B                     	;# 
  1678  000C                     	;# 
  1679  000D                     	;# 
  1680  000E                     	;# 
  1681  0011                     	;# 
  1682  0012                     	;# 
  1683  0013                     	;# 
  1684  0015                     	;# 
  1685  0016                     	;# 
  1686  0016                     	;# 
  1687  0017                     	;# 
  1688  0018                     	;# 
  1689  0019                     	;# 
  1690  001A                     	;# 
  1691  001B                     	;# 
  1692  001C                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  0091                     	;# 
  1697  0092                     	;# 
  1698  0093                     	;# 
  1699  0095                     	;# 
  1700  0096                     	;# 
  1701  0097                     	;# 
  1702  0099                     	;# 
  1703  009A                     	;# 
  1704  009B                     	;# 
  1705  009B                     	;# 
  1706  009C                     	;# 
  1707  009D                     	;# 
  1708  009E                     	;# 
  1709  009F                     	;# 
  1710  010C                     	;# 
  1711  010D                     	;# 
  1712  010E                     	;# 
  1713  0111                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0115                     	;# 
  1718  0116                     	;# 
  1719  0117                     	;# 
  1720  0118                     	;# 
  1721  0119                     	;# 
  1722  011D                     	;# 
  1723  018C                     	;# 
  1724  018D                     	;# 
  1725  018E                     	;# 
  1726  0191                     	;# 
  1727  0191                     	;# 
  1728  0192                     	;# 
  1729  0193                     	;# 
  1730  0193                     	;# 
  1731  0194                     	;# 
  1732  0195                     	;# 
  1733  0196                     	;# 
  1734  0199                     	;# 
  1735  019A                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019C                     	;# 
  1739  019D                     	;# 
  1740  019E                     	;# 
  1741  019F                     	;# 
  1742  020C                     	;# 
  1743  020D                     	;# 
  1744  0211                     	;# 
  1745  0211                     	;# 
  1746  0212                     	;# 
  1747  0212                     	;# 
  1748  0213                     	;# 
  1749  0213                     	;# 
  1750  0214                     	;# 
  1751  0214                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0216                     	;# 
  1756  0216                     	;# 
  1757  0217                     	;# 
  1758  0217                     	;# 
  1759  0391                     	;# 
  1760  0392                     	;# 
  1761  0393                     	;# 
  1762  0394                     	;# 
  1763  0395                     	;# 
  1764  0396                     	;# 
  1765  0498                     	;# 
  1766  0498                     	;# 
  1767  0499                     	;# 
  1768  049A                     	;# 
  1769  049B                     	;# 
  1770  049B                     	;# 
  1771  049C                     	;# 
  1772  049E                     	;# 
  1773  049F                     	;# 
  1774  0611                     	;# 
  1775  0612                     	;# 
  1776  0613                     	;# 
  1777  0613                     	;# 
  1778  0614                     	;# 
  1779  0615                     	;# 
  1780  0616                     	;# 
  1781  0616                     	;# 
  1782  0617                     	;# 
  1783  0618                     	;# 
  1784  0619                     	;# 
  1785  0619                     	;# 
  1786  061A                     	;# 
  1787  061B                     	;# 
  1788  061C                     	;# 
  1789  061C                     	;# 
  1790  0691                     	;# 
  1791  0692                     	;# 
  1792  0693                     	;# 
  1793  0694                     	;# 
  1794  0695                     	;# 
  1795  0F0F                     	;# 
  1796  0F10                     	;# 
  1797  0F11                     	;# 
  1798  0F12                     	;# 
  1799  0F13                     	;# 
  1800  0F14                     	;# 
  1801  0F15                     	;# 
  1802  0F16                     	;# 
  1803  0F17                     	;# 
  1804  0F18                     	;# 
  1805  0F19                     	;# 
  1806  0F1A                     	;# 
  1807  0F1B                     	;# 
  1808  0F1C                     	;# 
  1809  0F1D                     	;# 
  1810  0F1E                     	;# 
  1811  0F1F                     	;# 
  1812  0F20                     	;# 
  1813  0F21                     	;# 
  1814  0F22                     	;# 
  1815  0F23                     	;# 
  1816  0F24                     	;# 
  1817  0F25                     	;# 
  1818  0F26                     	;# 
  1819  0F27                     	;# 
  1820  0F28                     	;# 
  1821  0F29                     	;# 
  1822  0F2A                     	;# 
  1823  0F2B                     	;# 
  1824  0F2C                     	;# 
  1825  0F2D                     	;# 
  1826  0F2E                     	;# 
  1827  0F2F                     	;# 
  1828  0F8C                     	;# 
  1829  0F8D                     	;# 
  1830  0F91                     	;# 
  1831  0F95                     	;# 
  1832  0F96                     	;# 
  1833  0F97                     	;# 
  1834  0F9C                     	;# 
  1835  0F9D                     	;# 
  1836  0F9E                     	;# 
  1837  0FE3                     	;# 
  1838  0FE4                     	;# 
  1839  0FE5                     	;# 
  1840  0FE6                     	;# 
  1841  0FE7                     	;# 
  1842  0FE8                     	;# 
  1843  0FE9                     	;# 
  1844  0FEA                     	;# 
  1845  0FEB                     	;# 
  1846  0FED                     	;# 
  1847  0FEE                     	;# 
  1848  0FEF                     	;# 
  1849  0000                     	;# 
  1850  0001                     	;# 
  1851  0002                     	;# 
  1852  0003                     	;# 
  1853  0004                     	;# 
  1854  0005                     	;# 
  1855  0006                     	;# 
  1856  0007                     	;# 
  1857  0008                     	;# 
  1858  0009                     	;# 
  1859  000A                     	;# 
  1860  000B                     	;# 
  1861  000C                     	;# 
  1862  000D                     	;# 
  1863  000E                     	;# 
  1864  0011                     	;# 
  1865  0012                     	;# 
  1866  0013                     	;# 
  1867  0015                     	;# 
  1868  0016                     	;# 
  1869  0016                     	;# 
  1870  0017                     	;# 
  1871  0018                     	;# 
  1872  0019                     	;# 
  1873  001A                     	;# 
  1874  001B                     	;# 
  1875  001C                     	;# 
  1876  008C                     	;# 
  1877  008D                     	;# 
  1878  008E                     	;# 
  1879  0091                     	;# 
  1880  0092                     	;# 
  1881  0093                     	;# 
  1882  0095                     	;# 
  1883  0096                     	;# 
  1884  0097                     	;# 
  1885  0099                     	;# 
  1886  009A                     	;# 
  1887  009B                     	;# 
  1888  009B                     	;# 
  1889  009C                     	;# 
  1890  009D                     	;# 
  1891  009E                     	;# 
  1892  009F                     	;# 
  1893  010C                     	;# 
  1894  010D                     	;# 
  1895  010E                     	;# 
  1896  0111                     	;# 
  1897  0112                     	;# 
  1898  0113                     	;# 
  1899  0114                     	;# 
  1900  0115                     	;# 
  1901  0116                     	;# 
  1902  0117                     	;# 
  1903  0118                     	;# 
  1904  0119                     	;# 
  1905  011D                     	;# 
  1906  018C                     	;# 
  1907  018D                     	;# 
  1908  018E                     	;# 
  1909  0191                     	;# 
  1910  0191                     	;# 
  1911  0192                     	;# 
  1912  0193                     	;# 
  1913  0193                     	;# 
  1914  0194                     	;# 
  1915  0195                     	;# 
  1916  0196                     	;# 
  1917  0199                     	;# 
  1918  019A                     	;# 
  1919  019B                     	;# 
  1920  019B                     	;# 
  1921  019C                     	;# 
  1922  019D                     	;# 
  1923  019E                     	;# 
  1924  019F                     	;# 
  1925  020C                     	;# 
  1926  020D                     	;# 
  1927  0211                     	;# 
  1928  0211                     	;# 
  1929  0212                     	;# 
  1930  0212                     	;# 
  1931  0213                     	;# 
  1932  0213                     	;# 
  1933  0214                     	;# 
  1934  0214                     	;# 
  1935  0215                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0216                     	;# 
  1939  0216                     	;# 
  1940  0217                     	;# 
  1941  0217                     	;# 
  1942  0391                     	;# 
  1943  0392                     	;# 
  1944  0393                     	;# 
  1945  0394                     	;# 
  1946  0395                     	;# 
  1947  0396                     	;# 
  1948  0498                     	;# 
  1949  0498                     	;# 
  1950  0499                     	;# 
  1951  049A                     	;# 
  1952  049B                     	;# 
  1953  049B                     	;# 
  1954  049C                     	;# 
  1955  049E                     	;# 
  1956  049F                     	;# 
  1957  0611                     	;# 
  1958  0612                     	;# 
  1959  0613                     	;# 
  1960  0613                     	;# 
  1961  0614                     	;# 
  1962  0615                     	;# 
  1963  0616                     	;# 
  1964  0616                     	;# 
  1965  0617                     	;# 
  1966  0618                     	;# 
  1967  0619                     	;# 
  1968  0619                     	;# 
  1969  061A                     	;# 
  1970  061B                     	;# 
  1971  061C                     	;# 
  1972  061C                     	;# 
  1973  0691                     	;# 
  1974  0692                     	;# 
  1975  0693                     	;# 
  1976  0694                     	;# 
  1977  0695                     	;# 
  1978  0F0F                     	;# 
  1979  0F10                     	;# 
  1980  0F11                     	;# 
  1981  0F12                     	;# 
  1982  0F13                     	;# 
  1983  0F14                     	;# 
  1984  0F15                     	;# 
  1985  0F16                     	;# 
  1986  0F17                     	;# 
  1987  0F18                     	;# 
  1988  0F19                     	;# 
  1989  0F1A                     	;# 
  1990  0F1B                     	;# 
  1991  0F1C                     	;# 
  1992  0F1D                     	;# 
  1993  0F1E                     	;# 
  1994  0F1F                     	;# 
  1995  0F20                     	;# 
  1996  0F21                     	;# 
  1997  0F22                     	;# 
  1998  0F23                     	;# 
  1999  0F24                     	;# 
  2000  0F25                     	;# 
  2001  0F26                     	;# 
  2002  0F27                     	;# 
  2003  0F28                     	;# 
  2004  0F29                     	;# 
  2005  0F2A                     	;# 
  2006  0F2B                     	;# 
  2007  0F2C                     	;# 
  2008  0F2D                     	;# 
  2009  0F2E                     	;# 
  2010  0F2F                     	;# 
  2011  0F8C                     	;# 
  2012  0F8D                     	;# 
  2013  0F91                     	;# 
  2014  0F95                     	;# 
  2015  0F96                     	;# 
  2016  0F97                     	;# 
  2017  0F9C                     	;# 
  2018  0F9D                     	;# 
  2019  0F9E                     	;# 
  2020  0FE3                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032                           
  2033                           	psect	strings
  2034  0600                     __pstrings:	
  2035  0600                     __stringtab:	
  2036  0600  3400               	retlw	0
  2037  0601                     __end_of__stringtab:	
  2038  0601                     _mrfRegset_InitCnt:	
  2039  0601  3410               	retlw	16
  2040  0602                     __end_of_mrfRegset_InitCnt:	
  2041  0602                     _mrfRegset_RxCnt:	
  2042  0602  3406               	retlw	6
  2043  0603                     __end_of_mrfRegset_RxCnt:	
  2044  0603                     _mrfRegset_TxCnt:	
  2045  0603  3404               	retlw	4
  2046  0604                     __end_of_mrfRegset_TxCnt:	
  2047  0604                     _mrfRegset_Init:	
  2048  0604  34CA               	retlw	202
  2049  0605  3471               	retlw	113
  2050  0606  34CA               	retlw	202
  2051  0607  3473               	retlw	115
  2052  0608  3480               	retlw	128
  2053  0609  3428               	retlw	40
  2054  060A  34C4               	retlw	196
  2055  060B  34E7               	retlw	231
  2056  060C  34A8               	retlw	168
  2057  060D  3460               	retlw	96
  2058  060E  34C6               	retlw	198
  2059  060F  3405               	retlw	5
  2060  0610  3482               	retlw	130
  2061  0611  3400               	retlw	0
  2062  0612  3490               	retlw	144
  2063  0613  3462               	retlw	98
  2064  0614  3498               	retlw	152
  2065  0615  3490               	retlw	144
  2066  0616  34C2               	retlw	194
  2067  0617  34AC               	retlw	172
  2068  0618  3482               	retlw	130
  2069  0619  3420               	retlw	32
  2070  061A  3455               	retlw	85
  2071  061B  3400               	retlw	0
  2072  061C  3482               	retlw	130
  2073  061D  3480               	retlw	128
  2074  061E  3480               	retlw	128
  2075  061F  3468               	retlw	104
  2076  0620  34CA               	retlw	202
  2077  0621  3471               	retlw	113
  2078  0622  34CA               	retlw	202
  2079  0623  3473               	retlw	115
  2080  0624                     __end_of_mrfRegset_Init:	
  2081  0624                     _mrfRegset_Rx:	
  2082  0624  3482               	retlw	130
  2083  0625  3400               	retlw	0
  2084  0626  34CA               	retlw	202
  2085  0627  3471               	retlw	113
  2086  0628  3480               	retlw	128
  2087  0629  3428               	retlw	40
  2088  062A  3482               	retlw	130
  2089  062B  3480               	retlw	128
  2090  062C  3480               	retlw	128
  2091  062D  3468               	retlw	104
  2092  062E  34CA               	retlw	202
  2093  062F  3473               	retlw	115
  2094  0630                     __end_of_mrfRegset_Rx:	
  2095  0630                     _mrfRegset_Tx:	
  2096  0630  3482               	retlw	130
  2097  0631  3400               	retlw	0
  2098  0632  34CA               	retlw	202
  2099  0633  3471               	retlw	113
  2100  0634  3480               	retlw	128
  2101  0635  34A8               	retlw	168
  2102  0636  3482               	retlw	130
  2103  0637  3420               	retlw	32
  2104  0638                     __end_of_mrfRegset_Tx:	
  2105  000B                     _INTCONbits	set	11
  2106  000C                     _PORTAbits	set	12
  2107  000E                     _PORTCbits	set	14
  2108  009D                     _ADCON0	set	157
  2109  009E                     _ADCON1	set	158
  2110  009F                     _ADCON2	set	159
  2111  0095                     _OPTION_REGbits	set	149
  2112  0099                     _OSCCON	set	153
  2113  008C                     _TRISAbits	set	140
  2114  008D                     _TRISBbits	set	141
  2115  008E                     _TRISCbits	set	142
  2116  0117                     _FVRCON	set	279
  2117  010C                     _LATAbits	set	268
  2118  010D                     _LATBbits	set	269
  2119  010E                     _LATCbits	set	270
  2120  018C                     _ANSELA	set	396
  2121  018D                     _ANSELB	set	397
  2122  018E                     _ANSELC	set	398
  2123  020C                     _WPUAbits	set	524
  2124                           
  2125                           	psect	cinit
  2126  0016                     start_initialization:	
  2127                           ; #config settings
  2128                           
  2129  0016                     __initialization:	
  2130                           
  2131                           ; Clear objects allocated to BANK0
  2132  0016  01AC               	clrf	__pbssBANK0& (0+127)
  2133  0017  01AD               	clrf	(__pbssBANK0+1)& (0+127)
  2134                           
  2135                           ; Clear objects allocated to BANK1
  2136  0018  30A0               	movlw	low __pbssBANK1
  2137  0019  0084               	movwf	4
  2138  001A  3000               	movlw	high __pbssBANK1
  2139  001B  0085               	movwf	5
  2140  001C  304C               	movlw	76
  2141  001D  3186  2638  3180   	fcall	clear_ram0
  2142  0020                     end_of_initialization:	
  2143                           ;End of C runtime variable initialization code
  2144                           
  2145  0020                     __end_of__initialization:	
  2146  0020  0020               	movlb	0
  2147  0021  2831               	ljmp	_main	;jump to C main() function
  2148  0022                     __ptext14:	
  2149 ;; *************** function _Mrf49RxCmd *****************
  2150 ;; Defined at:
  2151 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  cmd             1    wreg     unsigned char 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  cmd             1    1[BANK0 ] unsigned char 
  2156 ;;  val             1    2[BANK0 ] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      unsigned char 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0, pclath, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 1E/1
  2163 ;;		On exit  : 1F/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2166 ;;      Params:         0       0       0       0
  2167 ;;      Locals:         0       2       0       0
  2168 ;;      Temps:          0       0       0       0
  2169 ;;      Totals:         0       2       0       0
  2170 ;;Total ram usage:        2 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    6
  2173 ;; This function calls:
  2174 ;;		_Mrf49SpiRx
  2175 ;;		_Mrf49SpiTx
  2176 ;; This function is called by:
  2177 ;;		_Mrf49RxByte
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           
  2182                           ;psect for function _Mrf49RxCmd
  2183  0022                     _Mrf49RxCmd:	
  2184                           
  2185                           ;incstack = 0
  2186                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2187                           ;Mrf49RxCmd@cmd stored from wreg
  2188  0022  0020               	movlb	0	; select bank0
  2189  0023  00A1               	movwf	Mrf49RxCmd@cmd
  2190                           
  2191                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  2192  0024  0022               	movlb	2	; select bank2
  2193  0025  130E               	bcf	14,6	;volatile
  2194                           
  2195                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  2196  0026  0020               	movlb	0	; select bank0
  2197  0027  0821               	movf	Mrf49RxCmd@cmd,w
  2198  0028  21E9  3180         	fcall	_Mrf49SpiTx
  2199                           
  2200                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  2201  002A  2257               	fcall	_Mrf49SpiRx
  2202  002B  00A2               	movwf	Mrf49RxCmd@val
  2203                           
  2204                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  2205  002C  0022               	movlb	2	; select bank2
  2206  002D  170E               	bsf	14,6	;volatile
  2207                           
  2208                           ;mrf49xa_cmd.c: 25: return val;
  2209  002E  0020               	movlb	0	; select bank0
  2210  002F  0822               	movf	Mrf49RxCmd@val,w
  2211  0030  0008               	return
  2212  0031                     __end_of_Mrf49RxCmd:	
  2213  0031                     __pmaintext:	
  2214 ;;
  2215 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2216 ;;
  2217 ;; *************** function _main *****************
  2218 ;; Defined at:
  2219 ;;		line 23 in file "../../../src/node/main.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;		None
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  i               1   11[BANK0 ] unsigned char 
  2224 ;;  j               1   10[BANK0 ] unsigned char 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;		None               void
  2227 ;; Registers used:
  2228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 17F/0
  2231 ;;		On exit  : 1C/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2234 ;;      Params:         0       0       0       0
  2235 ;;      Locals:         0       2       0       0
  2236 ;;      Temps:          0       0       0       0
  2237 ;;      Totals:         0       2       0       0
  2238 ;;Total ram usage:        2 bytes
  2239 ;; Hardware stack levels required when called:   10
  2240 ;; This function calls:
  2241 ;;		_AdcInit
  2242 ;;		_ExtIntInit
  2243 ;;		_Mrf49xaInit
  2244 ;;		_Mrf49xaTick
  2245 ;;		_SysInitGpio
  2246 ;; This function is called by:
  2247 ;;		Startup code after reset
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           
  2252                           ;psect for function _main
  2253  0031                     _main:	
  2254                           
  2255                           ;main.c: 26: OSCCON = 0b01111000;
  2256                           
  2257                           ;incstack = 0
  2258                           ; Regs used in _main: [allreg]
  2259  0031  3078               	movlw	120
  2260  0032  0021               	movlb	1	; select bank1
  2261  0033  0099               	movwf	25	;volatile
  2262                           
  2263                           ;main.c: 27: WPUAbits.WPUA2 = 1;
  2264  0034  0024               	movlb	4	; select bank4
  2265  0035  150C               	bsf	12,2	;volatile
  2266                           
  2267                           ;main.c: 29: SysInitGpio();
  2268  0036  2339  3180         	fcall	_SysInitGpio
  2269                           
  2270                           ;main.c: 30: AdcInit();
  2271  0038  229E  3180         	fcall	_AdcInit
  2272                           
  2273                           ;main.c: 31: ExtIntInit();
  2274  003A  22AD  3180         	fcall	_ExtIntInit
  2275                           
  2276                           ;main.c: 33: uint8_t i, j;
  2277                           ;main.c: 35: LATAbits.LATA4 = 0;
  2278  003C  0022               	movlb	2	; select bank2
  2279  003D  120C               	bcf	12,4	;volatile
  2280                           
  2281                           ;main.c: 36: LATCbits.LATC1 = 1;
  2282  003E  148E               	bsf	14,1	;volatile
  2283                           
  2284                           ;main.c: 37: for (i = 0; i < 250; i++)
  2285  003F  0020               	movlb	0	; select bank0
  2286  0040  01AB               	clrf	main@i
  2287  0041                     l2161:	
  2288                           
  2289                           ;main.c: 38: {
  2290                           ;main.c: 39: if (i == 125)
  2291  0041  082B               	movf	main@i,w
  2292  0042  3A7D               	xorlw	125
  2293  0043  1D03               	skipz
  2294  0044  2847               	goto	l2165
  2295                           
  2296                           ;main.c: 40: LATAbits.LATA4 = 1;
  2297  0045  0022               	movlb	2	; select bank2
  2298  0046  160C               	bsf	12,4	;volatile
  2299  0047                     l2165:	
  2300                           
  2301                           ;main.c: 41: for (j = 0; j < 250; j++) asm ("nop");
  2302  0047  0020               	movlb	0	; select bank0
  2303  0048  01AA               	clrf	main@j
  2304  0049                     l417:	
  2305  0049  0000               	nop	;# 
  2306  004A  0020               	movlb	0	; select bank0
  2307  004B  30FA               	movlw	250
  2308  004C  0AAA               	incf	main@j,f
  2309  004D  022A               	subwf	main@j,w
  2310  004E  1C03               	skipc
  2311  004F  2849               	goto	l417
  2312  0050  30FA               	movlw	250
  2313  0051  0AAB               	incf	main@i,f
  2314  0052  022B               	subwf	main@i,w
  2315  0053  1C03               	skipc
  2316  0054  2841               	goto	l2161
  2317                           
  2318                           ;main.c: 42: }
  2319                           ;main.c: 44: LATCbits.LATC4 = 1;
  2320  0055  0022               	movlb	2	; select bank2
  2321  0056  160E               	bsf	14,4	;volatile
  2322                           
  2323                           ;main.c: 45: LATAbits.LATA5 = 1;
  2324  0057  168C               	bsf	12,5	;volatile
  2325                           
  2326                           ;main.c: 47: Mrf49xaInit();
  2327  0058  20A9  3180         	fcall	_Mrf49xaInit
  2328  005A                     l419:	
  2329                           ;main.c: 49: while(1)
  2330                           
  2331                           
  2332                           ;main.c: 50: {
  2333                           ;main.c: 51: Mrf49xaTick();
  2334  005A  205D  3180         	fcall	_Mrf49xaTick
  2335  005C  285A               	goto	l419
  2336  005D                     __end_of_main:	
  2337  005D                     __ptext2:	
  2338 ;; *************** function _Mrf49xaTick *****************
  2339 ;; Defined at:
  2340 ;;		line 66 in file "../../../src/devices/mrf49xa_packet.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  timeout         1    5[BANK0 ] unsigned char 
  2345 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  2346 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(76), 
  2347 ;;  j               1    7[BANK0 ] unsigned char 
  2348 ;;  i               1    6[BANK0 ] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;		None               void
  2351 ;; Registers used:
  2352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 1C/0
  2355 ;;		On exit  : 1C/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2358 ;;      Params:         0       0       0       0
  2359 ;;      Locals:         0       4       0       0
  2360 ;;      Temps:          0       0       0       0
  2361 ;;      Totals:         0       4       0       0
  2362 ;;Total ram usage:        4 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    8
  2365 ;; This function calls:
  2366 ;;		_Mrf49RxSts
  2367 ;;		_Mrf49TxByte
  2368 ;;		_Mrf49xaModeTx
  2369 ;;		_Mrf49xaPacketPending
  2370 ;;		_Mrf49xaRxPacket
  2371 ;;		_Mrf49xaTxPacket
  2372 ;; This function is called by:
  2373 ;;		_main
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           
  2378                           ;psect for function _Mrf49xaTick
  2379  005D                     _Mrf49xaTick:	
  2380                           
  2381                           ;mrf49xa_packet.c: 68: uint8_t i, j;
  2382                           ;mrf49xa_packet.c: 69: if (Mrf49xaPacketPending())
  2383                           
  2384                           ;incstack = 0
  2385                           ; Regs used in _Mrf49xaTick: [allreg]
  2386  005D  22DC  3180         	fcall	_Mrf49xaPacketPending
  2387  005F  3A00               	xorlw	0
  2388  0060  1903               	skipnz
  2389  0061  2877               	goto	l2093
  2390                           
  2391                           ;mrf49xa_packet.c: 70: {
  2392                           ;mrf49xa_packet.c: 71: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  2393  0062  22E6  3180         	fcall	_Mrf49xaRxPacket
  2394  0064  0020               	movlb	0	; select bank0
  2395  0065  00A8               	movwf	Mrf49xaTick@packet
  2396                           
  2397                           ;mrf49xa_packet.c: 74: if (packet->packet.id == 0xA0)
  2398  0066  3E04               	addlw	4
  2399  0067  0086               	movwf	6
  2400  0068  0187               	clrf	7
  2401  0069  0801               	movf	1,w
  2402  006A  3AA0               	xorlw	160
  2403  006B  1D03               	skipz
  2404  006C  2872               	goto	l2091
  2405                           
  2406                           ;mrf49xa_packet.c: 75: {
  2407                           ;mrf49xa_packet.c: 76: packet->packet.data[0] = 2;
  2408  006D  0828               	movf	Mrf49xaTick@packet,w
  2409  006E  3E06               	addlw	6
  2410  006F  0086               	movwf	6
  2411  0070  3002               	movlw	2
  2412  0071  0081               	movwf	1
  2413  0072                     l2091:	
  2414                           
  2415                           ;mrf49xa_packet.c: 77: }
  2416                           ;mrf49xa_packet.c: 81: Mrf49xaTxPacket(packet, 1);
  2417  0072  01A0               	clrf	Mrf49xaTxPacket@swapSrcDst
  2418  0073  0AA0               	incf	Mrf49xaTxPacket@swapSrcDst,f
  2419  0074  0828               	movf	Mrf49xaTick@packet,w
  2420  0075  22F4  3180         	fcall	_Mrf49xaTxPacket
  2421  0077                     l2093:	
  2422                           
  2423                           ;mrf49xa_packet.c: 82: }
  2424                           ;mrf49xa_packet.c: 84: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  2425                           ;mrf49xa_packet.c: 85: rfTrcvStatus.state == RECV_IDLE)
  2426  0077  0021               	movlb	1	; select bank1
  2427  0078  0B21               	decfsz	(_rfTrcvStatus^(0+128)+1),w
  2428  0079  0008               	return
  2429  007A  08A0               	movf	_rfTrcvStatus^(0+128),f
  2430  007B  1D03               	skipz
  2431  007C  0008               	return
  2432                           
  2433                           ;mrf49xa_packet.c: 86: {
  2434                           ;mrf49xa_packet.c: 87: uint8_t timeout = 0;
  2435  007D  0020               	movlb	0	; select bank0
  2436  007E  01A5               	clrf	Mrf49xaTick@timeout
  2437  007F                     l2099:	
  2438                           
  2439                           ;mrf49xa_packet.c: 92: {
  2440                           ;mrf49xa_packet.c: 93: Mrf49RxSts();
  2441  007F  224B  3180         	fcall	_Mrf49RxSts
  2442                           
  2443                           ;mrf49xa_packet.c: 95: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sign
      +                          alPresent == 0)
  2444  0081  0021               	movlb	1	; select bank1
  2445  0082  08A0               	movf	_rfTrcvStatus^(0+128),f
  2446  0083  1D03               	skipz
  2447  0084  2888               	goto	l2107
  2448  0085  0020               	movlb	0	; select bank0
  2449  0086  1C2C               	btfss	_mrf49Status,0
  2450  0087  289F               	goto	l374
  2451  0088                     l2107:	
  2452                           
  2453                           ;mrf49xa_packet.c: 99: }
  2454                           ;mrf49xa_packet.c: 101: for (i = 0; i < 36; i++) { for (j = 0; j < 250; j++) { asm ("nop
      +                          "); } };
  2455  0088  0020               	movlb	0	; select bank0
  2456  0089  01A6               	clrf	Mrf49xaTick@i
  2457  008A                     l2113:	
  2458  008A  01A7               	clrf	Mrf49xaTick@j
  2459  008B                     l377:	
  2460  008B  0000               	nop	;# 
  2461  008C  0020               	movlb	0	; select bank0
  2462  008D  30FA               	movlw	250
  2463  008E  0AA7               	incf	Mrf49xaTick@j,f
  2464  008F  0227               	subwf	Mrf49xaTick@j,w
  2465  0090  1C03               	skipc
  2466  0091  288B               	goto	l377
  2467  0092  3024               	movlw	36
  2468  0093  0AA6               	incf	Mrf49xaTick@i,f
  2469  0094  0226               	subwf	Mrf49xaTick@i,w
  2470  0095  1C03               	skipc
  2471  0096  288A               	goto	l2113
  2472  0097  300B               	movlw	11
  2473                           
  2474                           ;mrf49xa_packet.c: 102: timeout++;
  2475  0098  0AA5               	incf	Mrf49xaTick@timeout,f
  2476                           
  2477                           ;mrf49xa_packet.c: 104: if (timeout > 10)
  2478  0099  0225               	subwf	Mrf49xaTick@timeout,w
  2479  009A  1C03               	skipc
  2480  009B  287F               	goto	l2099
  2481                           
  2482                           ;mrf49xa_packet.c: 105: {
  2483                           ;mrf49xa_packet.c: 106: rfTrcvStatus.txPacket.retry++;
  2484  009C  0021               	movlb	1	; select bank1
  2485  009D  0AB8               	incf	(_rfTrcvStatus^(0+128)+24),f
  2486  009E  0008               	return
  2487  009F                     l374:	
  2488                           
  2489                           ;mrf49xa_packet.c: 116: INTCONbits.INTE = 0;;
  2490  009F  120B               	bcf	11,4	;volatile
  2491                           
  2492                           ;mrf49xa_packet.c: 117: Mrf49xaModeTx();
  2493  00A0  22B2  3180         	fcall	_Mrf49xaModeTx
  2494                           
  2495                           ;mrf49xa_packet.c: 118: Mrf49TxByte(0xAA);
  2496  00A2  30AA               	movlw	170
  2497  00A3  21AC  3180         	fcall	_Mrf49TxByte
  2498                           
  2499                           ;mrf49xa_packet.c: 119: Mrf49TxByte(0xAA);
  2500  00A5  30AA               	movlw	170
  2501  00A6  21AC               	fcall	_Mrf49TxByte
  2502                           
  2503                           ;mrf49xa_packet.c: 120: INTCONbits.INTE = 1;;
  2504  00A7  160B               	bsf	11,4	;volatile
  2505  00A8  0008               	return
  2506  00A9                     __end_of_Mrf49xaTick:	
  2507  00A9                     __ptext7:	
  2508 ;; *************** function _Mrf49xaInit *****************
  2509 ;; Defined at:
  2510 ;;		line 302 in file "../../../src/devices/mrf49xa.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  k               1    9[BANK0 ] unsigned char 
  2515 ;;  j               1    8[BANK0 ] unsigned char 
  2516 ;;  i               1    7[BANK0 ] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;		None               void
  2519 ;; Registers used:
  2520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 1F/2
  2523 ;;		On exit  : 1F/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2526 ;;      Params:         0       0       0       0
  2527 ;;      Locals:         0       3       0       0
  2528 ;;      Temps:          0       0       0       0
  2529 ;;      Totals:         0       3       0       0
  2530 ;;Total ram usage:        3 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    9
  2533 ;; This function calls:
  2534 ;;		_Mrf49TxCmd
  2535 ;;		_Mrf49xaModeRx
  2536 ;;		_Mrf49xaServe
  2537 ;; This function is called by:
  2538 ;;		_main
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           
  2543                           ;psect for function _Mrf49xaInit
  2544  00A9                     _Mrf49xaInit:	
  2545                           
  2546                           ;mrf49xa.c: 304: UI08_t i, j, k;
  2547                           ;mrf49xa.c: 305: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { for (i = 0; i < 36; i++) { for (j = 0; j < 250; j++) { asm ("nop"); } }; } else 
      +                          { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } };
  2548                           
  2549                           ;incstack = 0
  2550                           ; Regs used in _Mrf49xaInit: [allreg]
  2551  00A9  0020               	movlb	0	; select bank0
  2552  00AA  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2553  00AB  01A9               	clrf	Mrf49xaInit@k
  2554  00AC  3186               	movlp	high __stringtab
  2555  00AD  000A               	callw
  2556  00AE  3180               	pagesel	$	;select current page
  2557  00AF  3800               	iorlw	0
  2558  00B0  1903               	btfsc	3,2
  2559  00B1  28DE               	goto	l1951
  2560  00B2                     l1923:	
  2561  00B2  3529               	lslf	Mrf49xaInit@k,w
  2562  00B3  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  2563  00B4  3186               	movlp	high __stringtab
  2564  00B5  000A               	callw
  2565  00B6  3180               	pagesel	$	;select current page
  2566  00B7  3A55               	xorlw	85
  2567  00B8  1D03               	skipz
  2568  00B9  28C9               	goto	l1945
  2569  00BA  01A7               	clrf	Mrf49xaInit@i
  2570  00BB                     l1931:	
  2571  00BB  01A8               	clrf	Mrf49xaInit@j
  2572  00BC                     l231:	
  2573  00BC  0000               	nop	;# 
  2574  00BD  0020               	movlb	0	; select bank0
  2575  00BE  30FA               	movlw	250
  2576  00BF  0AA8               	incf	Mrf49xaInit@j,f
  2577  00C0  0228               	subwf	Mrf49xaInit@j,w
  2578  00C1  1C03               	skipc
  2579  00C2  28BC               	goto	l231
  2580  00C3  3024               	movlw	36
  2581  00C4  0AA7               	incf	Mrf49xaInit@i,f
  2582  00C5  0227               	subwf	Mrf49xaInit@i,w
  2583  00C6  1803               	btfsc	3,0
  2584  00C7  28D5               	goto	l1947
  2585  00C8  28BB               	goto	l1931
  2586  00C9                     l1945:	
  2587  00C9  3529               	lslf	Mrf49xaInit@k,w
  2588  00CA  3E05               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  2589  00CB  3186               	movlp	high __stringtab
  2590  00CC  000A               	callw
  2591  00CD  3180               	pagesel	$	;select current page
  2592  00CE  00A1               	movwf	Mrf49TxCmd@val
  2593  00CF  3529               	lslf	Mrf49xaInit@k,w
  2594  00D0  3E04               	addlw	low (_mrfRegset_Init| (0+32768))
  2595  00D1  3186               	movlp	high __stringtab
  2596  00D2  000A               	callw
  2597  00D3  3180               	pagesel	$	;select current page
  2598  00D4  21DD               	fcall	_Mrf49TxCmd
  2599  00D5                     l1947:	
  2600  00D5  0020               	movlb	0	; select bank0
  2601  00D6  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  2602  00D7  0AA9               	incf	Mrf49xaInit@k,f
  2603  00D8  3186               	movlp	high __stringtab
  2604  00D9  000A               	callw
  2605  00DA  3180               	pagesel	$	;select current page
  2606  00DB  0229               	subwf	Mrf49xaInit@k,w
  2607  00DC  1C03               	skipc
  2608  00DD  28B2               	goto	l1923
  2609  00DE                     l1951:	
  2610                           
  2611                           ;mrf49xa.c: 307: Mrf49xaModeRx();
  2612  00DE  21B3  3180         	fcall	_Mrf49xaModeRx
  2613  00E0                     l1955:	
  2614                           ;mrf49xa.c: 309: while(PORTAbits.RA2 == 0)
  2615                           
  2616  00E0  0020               	movlb	0	; select bank0
  2617  00E1  190C               	btfsc	12,2	;volatile
  2618  00E2  0008               	return
  2619                           
  2620                           ;mrf49xa.c: 310: Mrf49xaServe();
  2621  00E3  20E6  3180         	fcall	_Mrf49xaServe
  2622  00E5  28E0               	goto	l1955
  2623  00E6                     __end_of_Mrf49xaInit:	
  2624  00E6                     __ptext8:	
  2625 ;; *************** function _Mrf49xaServe *****************
  2626 ;; Defined at:
  2627 ;;		line 74 in file "../../../src/devices/mrf49xa.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;		None
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  data            1    6[BANK0 ] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      unsigned char 
  2634 ;; Registers used:
  2635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : 1D/0
  2638 ;;		On exit  : 1F/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2641 ;;      Params:         0       0       0       0
  2642 ;;      Locals:         0       1       0       0
  2643 ;;      Temps:          0       2       0       0
  2644 ;;      Totals:         0       3       0       0
  2645 ;;Total ram usage:        3 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    8
  2648 ;; This function calls:
  2649 ;;		_Mrf49RxByte
  2650 ;;		_Mrf49RxSts
  2651 ;;		_Mrf49TxByte
  2652 ;;		_Mrf49xaModeRx
  2653 ;; This function is called by:
  2654 ;;		_Mrf49xaInit
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           
  2659                           ;psect for function _Mrf49xaServe
  2660  00E6                     _Mrf49xaServe:	
  2661                           
  2662                           ;mrf49xa.c: 76: unsigned char data;
  2663                           ;mrf49xa.c: 82: Mrf49RxSts();
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _Mrf49xaServe: [allreg]
  2667  00E6  224B  3180         	fcall	_Mrf49RxSts
  2668                           
  2669                           ;mrf49xa.c: 87: }
  2670                           ;mrf49xa.c: 90: if (mrf49Status.flags.msb.overflow == 1)
  2671                           
  2672                           ;mrf49xa.c: 85: {
  2673  00E8  0020               	movlb	0	; select bank0
  2674  00E9  1AAC               	btfsc	_mrf49Status,5
  2675  00EA  28F5               	goto	l1769
  2676  00EB  2900               	goto	l179
  2677  00EC                     l1765:	
  2678                           
  2679                           ;mrf49xa.c: 95: case RECV_DATA:
  2680                           ;mrf49xa.c: 96: case RECV_TIMEOUT:
  2681                           ;mrf49xa.c: 99: data = Mrf49RxByte();
  2682  00EC  21B1  3180         	fcall	_Mrf49RxByte
  2683  00EE  00A6               	movwf	Mrf49xaServe@data
  2684                           
  2685                           ;mrf49xa.c: 100: data = Mrf49RxByte();
  2686  00EF  21B1  3180         	fcall	_Mrf49RxByte
  2687  00F1  00A6               	movwf	Mrf49xaServe@data
  2688                           
  2689                           ;mrf49xa.c: 103: Mrf49xaModeRx();
  2690  00F2  21B3  3180         	fcall	_Mrf49xaModeRx
  2691                           
  2692                           ;mrf49xa.c: 107: break;
  2693  00F4  2900               	goto	l179
  2694  00F5                     l1769:	
  2695  00F5  0021               	movlb	1	; select bank1
  2696  00F6  0820               	movf	_rfTrcvStatus^(0+128),w
  2697                           
  2698                           ; Switch size 1, requested type "speed"
  2699                           ; Number of cases is 4, Range of values is 0 to 3
  2700                           ; switch strategies available:
  2701                           ; Name         Instructions Cycles
  2702                           ; direct_byte           14     6 (fixed)
  2703                           ; simple_byte           13     7 (average)
  2704                           ; jumptable            260     6 (fixed)
  2705                           ;	Chosen strategy is direct_byte
  2706  00F7  0084               	movwf	4
  2707  00F8  3004               	movlw	4
  2708  00F9  0204               	subwf	4,w
  2709  00FA  1803               	skipnc
  2710  00FB  2900               	goto	l179
  2711  00FC  3185               	movlp	high S2477
  2712  00FD  3504               	lslf	4,w
  2713  00FE  3ED7               	addlw	low S2477
  2714  00FF  0082               	movwf	2
  2715  0100                     l179:	
  2716                           
  2717                           ;mrf49xa.c: 115: }
  2718                           ;mrf49xa.c: 124: if (mrf49Status.flags.msb.fifoTxRx == 1)
  2719  0100  0020               	movlb	0	; select bank0
  2720  0101  1BAC               	btfsc	_mrf49Status,7
  2721  0102  299B               	goto	l1849
  2722  0103  29A7               	goto	l1851
  2723  0104                     l1773:	
  2724                           
  2725                           ;mrf49xa.c: 130: data = Mrf49RxByte();
  2726  0104  21B1  3180         	fcall	_Mrf49RxByte
  2727  0106  00A6               	movwf	Mrf49xaServe@data
  2728                           
  2729                           ;mrf49xa.c: 134: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  2730  0107  1BAD               	btfsc	_mrf49Status+1,7
  2731  0108  290C               	goto	l1779
  2732  0109                     l1777:	
  2733                           
  2734                           ;mrf49xa.c: 135: {
  2735                           ;mrf49xa.c: 136: Mrf49xaModeRx();
  2736  0109  21B3  3180         	fcall	_Mrf49xaModeRx
  2737                           
  2738                           ;mrf49xa.c: 137: break;
  2739  010B  29A7               	goto	l1851
  2740  010C                     l1779:	
  2741                           
  2742                           ;mrf49xa.c: 138: }
  2743                           ;mrf49xa.c: 140: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = &(r
      +                          fTrcvStatus.rxPacket[0]);
  2744  010C  0021               	movlb	1	; select bank1
  2745  010D  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  2746  010E  1D03               	skipz
  2747  010F  2912               	goto	l1783
  2748  0110  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  2749  0111  2916               	goto	L1
  2750  0112                     l1783:	
  2751                           
  2752                           ;mrf49xa.c: 141: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hwRx 
      +                          = &(rfTrcvStatus.rxPacket[1]);
  2753  0112  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  2754  0113  1D03               	skipz
  2755  0114  2909               	goto	l1777
  2756  0115  30D1               	movlw	(_rfTrcvStatus+49)& (0+255)
  2757  0116                     L1:	
  2758  0116  00E9               	movwf	(_rfTrcvStatus+73)^(0+128)
  2759                           
  2760                           ;mrf49xa.c: 148: }
  2761                           ;mrf49xa.c: 149: rfTrcvStatus.hwRx->packet.size = data;
  2762  0117  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  2763  0118  0086               	movwf	6
  2764  0119  0187               	clrf	7
  2765  011A  0020               	movlb	0	; select bank0
  2766  011B  0826               	movf	Mrf49xaServe@data,w
  2767  011C  0081               	movwf	1
  2768                           
  2769                           ;mrf49xa.c: 150: rfTrcvStatus.hwRx->crc = 0;
  2770  011D  0021               	movlb	1	; select bank1
  2771  011E  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  2772  011F  3E16               	addlw	22
  2773  0120  0086               	movwf	6
  2774  0121  0181               	clrf	1
  2775                           
  2776                           ;mrf49xa.c: 151: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  2777  0122  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  2778  0123  0086               	movwf	6
  2779  0124  3002               	movlw	2
  2780  0125  0081               	movwf	1
  2781                           
  2782                           ;mrf49xa.c: 153: rfTrcvStatus.state = RECV_DATA;
  2783  0126  01A0               	clrf	_rfTrcvStatus^(0+128)
  2784  0127  0AA0               	incf	_rfTrcvStatus^(0+128),f
  2785                           
  2786                           ;mrf49xa.c: 154: rfTrcvStatus.hwByte = 1;
  2787  0128  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  2788  0129  2952               	goto	L2
  2789  012A                     l1799:	
  2790                           ;mrf49xa.c: 156: break;
  2791                           
  2792                           
  2793                           ;mrf49xa.c: 160: data = Mrf49RxByte();
  2794  012A  21B1  3180         	fcall	_Mrf49RxByte
  2795  012C  00A6               	movwf	Mrf49xaServe@data
  2796                           
  2797                           ;mrf49xa.c: 164: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  2798  012D  1FAD               	btfss	_mrf49Status+1,7
  2799  012E  2909               	goto	l1777
  2800                           
  2801                           ;mrf49xa.c: 168: }
  2802                           ;mrf49xa.c: 170: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  2803  012F  0021               	movlb	1	; select bank1
  2804  0130  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  2805  0131  0086               	movwf	6
  2806  0132  0187               	clrf	7
  2807  0133  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2808  0134  0601               	xorwf	1,w
  2809  0135  1D03               	skipz
  2810  0136  2948               	goto	l1815
  2811                           
  2812                           ;mrf49xa.c: 171: {
  2813                           ;mrf49xa.c: 172: rfTrcvStatus.hwRx->crc = data;
  2814  0137  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  2815  0138  3E16               	addlw	22
  2816  0139  0086               	movwf	6
  2817  013A  0020               	movlb	0	; select bank0
  2818  013B  0826               	movf	Mrf49xaServe@data,w
  2819  013C  0081               	movwf	1
  2820                           
  2821                           ;mrf49xa.c: 176: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  2822  013D  0021               	movlb	1	; select bank1
  2823  013E  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  2824  013F  0086               	movwf	6
  2825  0140  3003               	movlw	3
  2826  0141  0081               	movwf	1
  2827                           
  2828                           ;mrf49xa.c: 179: Mrf49xaModeRx();
  2829  0142  21B3  3180         	fcall	_Mrf49xaModeRx
  2830                           
  2831                           ;mrf49xa.c: 182: LATCbits.LATC2 = 1;
  2832  0144  0022               	movlb	2	; select bank2
  2833  0145  150E               	bsf	14,2	;volatile
  2834                           
  2835                           ;mrf49xa.c: 183: LATCbits.LATC2 = 0;
  2836  0146  110E               	bcf	14,2	;volatile
  2837                           
  2838                           ;mrf49xa.c: 185: }
  2839  0147  29A7               	goto	l1851
  2840  0148                     l1815:	
  2841                           
  2842                           ;mrf49xa.c: 186: else
  2843                           ;mrf49xa.c: 187: {
  2844                           ;mrf49xa.c: 188: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  2845  0148  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2846  0149  0769               	addwf	(_rfTrcvStatus+73)^(0+128),w
  2847  014A  0020               	movlb	0	; select bank0
  2848  014B  00A4               	movwf	??_Mrf49xaServe
  2849  014C  0A24               	incf	??_Mrf49xaServe,w
  2850  014D  0086               	movwf	6
  2851  014E  0187               	clrf	7
  2852  014F  0826               	movf	Mrf49xaServe@data,w
  2853  0150  0081               	movwf	1
  2854  0151                     l1817:	
  2855  0151  0021               	movlb	1	; select bank1
  2856  0152                     L2:	
  2857  0152  0AEA               	incf	(_rfTrcvStatus^(0+128)+74),f
  2858  0153  29A7               	goto	l1851
  2859  0154                     l1819:	
  2860                           
  2861                           ;mrf49xa.c: 197: case 1:
  2862                           ;mrf49xa.c: 198: Mrf49TxByte(0xAA);
  2863  0154  30AA               	movlw	170
  2864  0155  21AC  3180         	fcall	_Mrf49TxByte
  2865                           
  2866                           ;mrf49xa.c: 199: break;
  2867  0157  2951               	goto	l1817
  2868  0158                     l1821:	
  2869                           
  2870                           ;mrf49xa.c: 202: Mrf49TxByte(0x2D);
  2871  0158  302D               	movlw	45
  2872  0159  21AC  3180         	fcall	_Mrf49TxByte
  2873                           
  2874                           ;mrf49xa.c: 203: break;
  2875  015B  2951               	goto	l1817
  2876  015C                     l1823:	
  2877                           
  2878                           ;mrf49xa.c: 206: Mrf49TxByte(0xD4);
  2879  015C  30D4               	movlw	212
  2880  015D  21AC  3180         	fcall	_Mrf49TxByte
  2881                           
  2882                           ;mrf49xa.c: 207: break;
  2883  015F  2951               	goto	l1817
  2884  0160                     l1825:	
  2885                           
  2886                           ;mrf49xa.c: 211: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte-4]);
  2887  0160  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2888  0161  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  2889  0162  0086               	movwf	6
  2890  0163  0187               	clrf	7
  2891  0164  0801               	movf	1,w
  2892  0165  21AC  3180         	fcall	_Mrf49TxByte
  2893                           
  2894                           ;mrf49xa.c: 212: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStatus.tx
      +                          Packet.raw[rfTrcvStatus.hwByte-4];
  2895  0167  0021               	movlb	1	; select bank1
  2896  0168  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2897  0169  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  2898  016A  0086               	movwf	6
  2899  016B  0187               	clrf	7
  2900  016C  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  2901  016D  0601               	xorwf	1,w
  2902  016E  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  2903                           
  2904                           ;mrf49xa.c: 213: if (rfTrcvStatus.hwByte-4 == rfTrcvStatus.txPacket.packet.size)
  2905  016F  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2906  0170  3EFC               	addlw	252
  2907  0171  0020               	movlb	0	; select bank0
  2908  0172  00A4               	movwf	??_Mrf49xaServe
  2909  0173  30FF               	movlw	255
  2910  0174  1803               	skipnc
  2911  0175  3000               	movlw	0
  2912  0176  00A5               	movwf	??_Mrf49xaServe+1
  2913  0177  0021               	movlb	1	; select bank1
  2914  0178  0822               	movf	(_rfTrcvStatus^(0+128)+2),w
  2915  0179  0020               	movlb	0	; select bank0
  2916  017A  0624               	xorwf	??_Mrf49xaServe,w
  2917  017B  0425               	iorwf	??_Mrf49xaServe+1,w
  2918  017C  1D03               	skipz
  2919  017D  2951               	goto	l1817
  2920                           
  2921                           ;mrf49xa.c: 214: {
  2922                           ;mrf49xa.c: 215: rfTrcvStatus.hwByte = 48;
  2923  017E  3030               	movlw	48
  2924  017F  0021               	movlb	1	; select bank1
  2925  0180  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  2926  0181  2951               	goto	l1817
  2927  0182                     l1833:	
  2928                           
  2929                           ;mrf49xa.c: 220: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  2930  0182  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  2931  0183  21AC  3180         	fcall	_Mrf49TxByte
  2932                           
  2933                           ;mrf49xa.c: 221: break;
  2934  0185  2951               	goto	l1817
  2935  0186                     l1835:	
  2936                           
  2937                           ;mrf49xa.c: 224: Mrf49TxByte(0x00);
  2938  0186  3000               	movlw	0
  2939  0187  21AC  3180         	fcall	_Mrf49TxByte
  2940                           
  2941                           ;mrf49xa.c: 225: break;
  2942  0189  2951               	goto	l1817
  2943  018A                     l1837:	
  2944                           
  2945                           ;mrf49xa.c: 228: Mrf49TxByte(0x00);
  2946  018A  3000               	movlw	0
  2947  018B  21AC  3180         	fcall	_Mrf49TxByte
  2948                           
  2949                           ;mrf49xa.c: 229: Mrf49xaModeRx();
  2950  018D  21B3  3180         	fcall	_Mrf49xaModeRx
  2951                           
  2952                           ;mrf49xa.c: 230: rfTrcvStatus.txPacket.state = PKT_FREE;
  2953  018F  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  2954                           
  2955                           ;mrf49xa.c: 231: break;
  2956  0190  2951               	goto	l1817
  2957  0191                     l1843:	
  2958  0191  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  2959                           
  2960                           ; Switch size 1, requested type "speed"
  2961                           ; Number of cases is 7, Range of values is 0 to 51
  2962                           ; switch strategies available:
  2963                           ; Name         Instructions Cycles
  2964                           ; direct_byte          110     6 (fixed)
  2965                           ; simple_byte           22    12 (average)
  2966                           ; jumptable            260     6 (fixed)
  2967                           ;	Chosen strategy is direct_byte
  2968  0192  0084               	movwf	4
  2969  0193  3034               	movlw	52
  2970  0194  0204               	subwf	4,w
  2971  0195  1803               	skipnc
  2972  0196  2960               	goto	l1825
  2973  0197  3185               	movlp	high S2479
  2974  0198  3504               	lslf	4,w
  2975  0199  3E07               	addlw	low S2479
  2976  019A  0082               	movwf	2
  2977  019B                     l1849:	
  2978  019B  0021               	movlb	1	; select bank1
  2979  019C  0820               	movf	_rfTrcvStatus^(0+128),w
  2980                           
  2981                           ; Switch size 1, requested type "speed"
  2982                           ; Number of cases is 3, Range of values is 0 to 3
  2983                           ; switch strategies available:
  2984                           ; Name         Instructions Cycles
  2985                           ; simple_byte           10     6 (average)
  2986                           ; direct_byte           14     6 (fixed)
  2987                           ; jumptable            260     6 (fixed)
  2988                           ;	Chosen strategy is simple_byte
  2989  019D  3A00               	xorlw	0	; case 0
  2990  019E  1903               	skipnz
  2991  019F  2904               	goto	l1773
  2992  01A0  3A01               	xorlw	1	; case 1
  2993  01A1  1903               	skipnz
  2994  01A2  292A               	goto	l1799
  2995  01A3  3A02               	xorlw	2	; case 3
  2996  01A4  1903               	skipnz
  2997  01A5  2991               	goto	l1843
  2998  01A6  29A7               	goto	l1851
  2999  01A7                     l1851:	
  3000                           
  3001                           ;mrf49xa.c: 238: }
  3002                           ;mrf49xa.c: 252: return PORTAbits.RA2 == 1 ? 1 : 0;
  3003  01A7  0020               	movlb	0	; select bank0
  3004  01A8  0C0C               	rrf	12,w	;volatile
  3005  01A9  0C89               	rrf	9,f
  3006  01AA  3901               	andlw	1
  3007  01AB  0008               	return
  3008  01AC                     __end_of_Mrf49xaServe:	
  3009  01AC                     __ptext10:	
  3010 ;; *************** function _Mrf49TxByte *****************
  3011 ;; Defined at:
  3012 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  byte            1    wreg     unsigned char 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  byte            1    3[BANK0 ] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;		None               void
  3019 ;; Registers used:
  3020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 1C/1
  3023 ;;		On exit  : 1F/2
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3026 ;;      Params:         0       0       0       0
  3027 ;;      Locals:         0       1       0       0
  3028 ;;      Temps:          0       0       0       0
  3029 ;;      Totals:         0       1       0       0
  3030 ;;Total ram usage:        1 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    7
  3033 ;; This function calls:
  3034 ;;		_Mrf49TxCmd
  3035 ;; This function is called by:
  3036 ;;		_Mrf49xaServe
  3037 ;;		_Mrf49xaTick
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           
  3042                           ;psect for function _Mrf49TxByte
  3043  01AC                     _Mrf49TxByte:	
  3044                           
  3045                           ;incstack = 0
  3046                           ; Regs used in _Mrf49TxByte: [allreg]
  3047                           ;Mrf49TxByte@byte stored from wreg
  3048  01AC  0020               	movlb	0	; select bank0
  3049  01AD  00A3               	movwf	Mrf49TxByte@byte
  3050                           
  3051                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  3052  01AE  00A1               	movwf	Mrf49TxCmd@val
  3053  01AF  30B8               	movlw	184
  3054  01B0  29DD               	ljmp	_Mrf49TxCmd
  3055  01B1                     __end_of_Mrf49TxByte:	
  3056  01B1                     __ptext13:	
  3057 ;; *************** function _Mrf49RxByte *****************
  3058 ;; Defined at:
  3059 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      unsigned char 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, pclath, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 1E/1
  3070 ;;		On exit  : 1F/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3073 ;;      Params:         0       0       0       0
  3074 ;;      Locals:         0       0       0       0
  3075 ;;      Temps:          0       0       0       0
  3076 ;;      Totals:         0       0       0       0
  3077 ;;Total ram usage:        0 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    7
  3080 ;; This function calls:
  3081 ;;		_Mrf49RxCmd
  3082 ;; This function is called by:
  3083 ;;		_Mrf49xaServe
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           
  3088                           ;psect for function _Mrf49RxByte
  3089  01B1                     _Mrf49RxByte:	
  3090                           
  3091                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  3092                           
  3093                           ;incstack = 0
  3094                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  3095  01B1  30B0               	movlw	176
  3096  01B2  2822               	ljmp	_Mrf49RxCmd
  3097  01B3                     __end_of_Mrf49RxByte:	
  3098  01B3                     __ptext9:	
  3099 ;; *************** function _Mrf49xaModeRx *****************
  3100 ;; Defined at:
  3101 ;;		line 255 in file "../../../src/devices/mrf49xa.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  k               1    3[BANK0 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;		None               void
  3108 ;; Registers used:
  3109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 1C/0
  3112 ;;		On exit  : 1F/1
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3115 ;;      Params:         0       0       0       0
  3116 ;;      Locals:         0       1       0       0
  3117 ;;      Temps:          0       0       0       0
  3118 ;;      Totals:         0       1       0       0
  3119 ;;Total ram usage:        1 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    7
  3122 ;; This function calls:
  3123 ;;		_Mrf49TxCmd
  3124 ;; This function is called by:
  3125 ;;		_Mrf49xaServe
  3126 ;;		_Mrf49xaInit
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           
  3131                           ;psect for function _Mrf49xaModeRx
  3132  01B3                     _Mrf49xaModeRx:	
  3133                           
  3134                           ;mrf49xa.c: 257: UI08_t k;
  3135                           ;mrf49xa.c: 258: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55
      +                          ) Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  3136                           
  3137                           ;incstack = 0
  3138                           ; Regs used in _Mrf49xaModeRx: [allreg]
  3139  01B3  0020               	movlb	0	; select bank0
  3140  01B4  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3141  01B5  01A3               	clrf	Mrf49xaModeRx@k
  3142  01B6  3186               	movlp	high __stringtab
  3143  01B7  000A               	callw
  3144  01B8  3180               	pagesel	$	;select current page
  3145  01B9  3800               	iorlw	0
  3146  01BA  1903               	btfsc	3,2
  3147  01BB  29D9               	goto	l1889
  3148  01BC                     l1881:	
  3149  01BC  3523               	lslf	Mrf49xaModeRx@k,w
  3150  01BD  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3151  01BE  3186               	movlp	high __stringtab
  3152  01BF  000A               	callw
  3153  01C0  3180               	pagesel	$	;select current page
  3154  01C1  3A55               	xorlw	85
  3155  01C2  1903               	skipnz
  3156  01C3  29D0               	goto	l1885
  3157  01C4  3523               	lslf	Mrf49xaModeRx@k,w
  3158  01C5  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  3159  01C6  3186               	movlp	high __stringtab
  3160  01C7  000A               	callw
  3161  01C8  3180               	pagesel	$	;select current page
  3162  01C9  00A1               	movwf	Mrf49TxCmd@val
  3163  01CA  3523               	lslf	Mrf49xaModeRx@k,w
  3164  01CB  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  3165  01CC  3186               	movlp	high __stringtab
  3166  01CD  000A               	callw
  3167  01CE  3180               	pagesel	$	;select current page
  3168  01CF  21DD               	fcall	_Mrf49TxCmd
  3169  01D0                     l1885:	
  3170  01D0  0020               	movlb	0	; select bank0
  3171  01D1  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  3172  01D2  0AA3               	incf	Mrf49xaModeRx@k,f
  3173  01D3  3186               	movlp	high __stringtab
  3174  01D4  000A               	callw
  3175  01D5  3180               	pagesel	$	;select current page
  3176  01D6  0223               	subwf	Mrf49xaModeRx@k,w
  3177  01D7  1C03               	skipc
  3178  01D8  29BC               	goto	l1881
  3179  01D9                     l1889:	
  3180                           
  3181                           ;mrf49xa.c: 260: rfTrcvStatus.state = RECV_IDLE;
  3182  01D9  0021               	movlb	1	; select bank1
  3183  01DA  01A0               	clrf	_rfTrcvStatus^(0+128)
  3184                           
  3185                           ;mrf49xa.c: 261: rfTrcvStatus.hwByte = 0;
  3186  01DB  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  3187  01DC  0008               	return
  3188  01DD                     __end_of_Mrf49xaModeRx:	
  3189  01DD                     __ptext11:	
  3190 ;; *************** function _Mrf49TxCmd *****************
  3191 ;; Defined at:
  3192 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  cmd             1    wreg     unsigned char 
  3195 ;;  val             1    1[BANK0 ] unsigned char 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  cmd             1    2[BANK0 ] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 1F/0
  3204 ;;		On exit  : 1F/2
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3207 ;;      Params:         0       1       0       0
  3208 ;;      Locals:         0       1       0       0
  3209 ;;      Temps:          0       0       0       0
  3210 ;;      Totals:         0       2       0       0
  3211 ;;Total ram usage:        2 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    6
  3214 ;; This function calls:
  3215 ;;		_Mrf49SpiTx
  3216 ;; This function is called by:
  3217 ;;		_Mrf49xaModeRx
  3218 ;;		_Mrf49xaModeTx
  3219 ;;		_Mrf49xaInit
  3220 ;;		_Mrf49TxByte
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _Mrf49TxCmd
  3226  01DD                     _Mrf49TxCmd:	
  3227                           
  3228                           ;incstack = 0
  3229                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  3230                           ;Mrf49TxCmd@cmd stored from wreg
  3231  01DD  00A2               	movwf	Mrf49TxCmd@cmd
  3232                           
  3233                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  3234  01DE  0022               	movlb	2	; select bank2
  3235  01DF  130E               	bcf	14,6	;volatile
  3236                           
  3237                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  3238  01E0  0020               	movlb	0	; select bank0
  3239  01E1  0822               	movf	Mrf49TxCmd@cmd,w
  3240  01E2  21E9  3180         	fcall	_Mrf49SpiTx
  3241                           
  3242                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  3243  01E4  0020               	movlb	0	; select bank0
  3244  01E5  0821               	movf	Mrf49TxCmd@val,w
  3245  01E6  21E9               	fcall	_Mrf49SpiTx
  3246                           
  3247                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  3248  01E7  170E               	bsf	14,6	;volatile
  3249  01E8  0008               	return
  3250  01E9                     __end_of_Mrf49TxCmd:	
  3251  01E9                     __ptext15:	
  3252 ;; *************** function _Mrf49SpiTx *****************
  3253 ;; Defined at:
  3254 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  byte            1    wreg     unsigned char 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  byte            1    0[BANK0 ] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;		None               void
  3261 ;; Registers used:
  3262 ;;		wreg
  3263 ;; Tracked objects:
  3264 ;;		On entry : 1F/0
  3265 ;;		On exit  : 1F/2
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3268 ;;      Params:         0       0       0       0
  3269 ;;      Locals:         0       1       0       0
  3270 ;;      Temps:          0       0       0       0
  3271 ;;      Totals:         0       1       0       0
  3272 ;;Total ram usage:        1 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    5
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_Mrf49TxCmd
  3279 ;;		_Mrf49RxCmd
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _Mrf49SpiTx
  3285  01E9                     _Mrf49SpiTx:	
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _Mrf49SpiTx: [wreg]
  3289                           ;Mrf49SpiTx@byte stored from wreg
  3290  01E9  00A0               	movwf	Mrf49SpiTx@byte
  3291                           
  3292                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  3293  01EA  1FA0               	btfss	Mrf49SpiTx@byte,7
  3294  01EB  29EF               	goto	l247
  3295  01EC  0022               	movlb	2	; select bank2
  3296  01ED  178D               	bsf	13,7	;volatile
  3297  01EE  29F1               	goto	l248
  3298  01EF                     l247:	
  3299  01EF  0022               	movlb	2	; select bank2
  3300  01F0  138D               	bcf	13,7	;volatile
  3301  01F1                     l248:	
  3302  01F1  178E               	bsf	14,7	;volatile
  3303  01F2  0000               	nop	;# 
  3304  01F3  0022               	movlb	2	; select bank2
  3305  01F4  138E               	bcf	14,7	;volatile
  3306  01F5  0020               	movlb	0	; select bank0
  3307  01F6  1F20               	btfss	Mrf49SpiTx@byte,6
  3308  01F7  29FB               	goto	l251
  3309  01F8  0022               	movlb	2	; select bank2
  3310  01F9  178D               	bsf	13,7	;volatile
  3311  01FA  29FD               	goto	l252
  3312  01FB                     l251:	
  3313  01FB  0022               	movlb	2	; select bank2
  3314  01FC  138D               	bcf	13,7	;volatile
  3315  01FD                     l252:	
  3316  01FD  178E               	bsf	14,7	;volatile
  3317  01FE  0000               	nop	;# 
  3318  01FF  0022               	movlb	2	; select bank2
  3319  0200  138E               	bcf	14,7	;volatile
  3320  0201  0020               	movlb	0	; select bank0
  3321  0202  1EA0               	btfss	Mrf49SpiTx@byte,5
  3322  0203  2A07               	goto	l255
  3323  0204  0022               	movlb	2	; select bank2
  3324  0205  178D               	bsf	13,7	;volatile
  3325  0206  2A09               	goto	l256
  3326  0207                     l255:	
  3327  0207  0022               	movlb	2	; select bank2
  3328  0208  138D               	bcf	13,7	;volatile
  3329  0209                     l256:	
  3330  0209  178E               	bsf	14,7	;volatile
  3331  020A  0000               	nop	;# 
  3332  020B  0022               	movlb	2	; select bank2
  3333  020C  138E               	bcf	14,7	;volatile
  3334  020D  0020               	movlb	0	; select bank0
  3335  020E  1E20               	btfss	Mrf49SpiTx@byte,4
  3336  020F  2A13               	goto	l259
  3337  0210  0022               	movlb	2	; select bank2
  3338  0211  178D               	bsf	13,7	;volatile
  3339  0212  2A15               	goto	l260
  3340  0213                     l259:	
  3341  0213  0022               	movlb	2	; select bank2
  3342  0214  138D               	bcf	13,7	;volatile
  3343  0215                     l260:	
  3344  0215  178E               	bsf	14,7	;volatile
  3345  0216  0000               	nop	;# 
  3346  0217  0022               	movlb	2	; select bank2
  3347  0218  138E               	bcf	14,7	;volatile
  3348  0219  0020               	movlb	0	; select bank0
  3349  021A  1DA0               	btfss	Mrf49SpiTx@byte,3
  3350  021B  2A1F               	goto	l263
  3351  021C  0022               	movlb	2	; select bank2
  3352  021D  178D               	bsf	13,7	;volatile
  3353  021E  2A21               	goto	l264
  3354  021F                     l263:	
  3355  021F  0022               	movlb	2	; select bank2
  3356  0220  138D               	bcf	13,7	;volatile
  3357  0221                     l264:	
  3358  0221  178E               	bsf	14,7	;volatile
  3359  0222  0000               	nop	;# 
  3360  0223  0022               	movlb	2	; select bank2
  3361  0224  138E               	bcf	14,7	;volatile
  3362  0225  0020               	movlb	0	; select bank0
  3363  0226  1D20               	btfss	Mrf49SpiTx@byte,2
  3364  0227  2A2B               	goto	l267
  3365  0228  0022               	movlb	2	; select bank2
  3366  0229  178D               	bsf	13,7	;volatile
  3367  022A  2A2D               	goto	l268
  3368  022B                     l267:	
  3369  022B  0022               	movlb	2	; select bank2
  3370  022C  138D               	bcf	13,7	;volatile
  3371  022D                     l268:	
  3372  022D  178E               	bsf	14,7	;volatile
  3373  022E  0000               	nop	;# 
  3374  022F  0022               	movlb	2	; select bank2
  3375  0230  138E               	bcf	14,7	;volatile
  3376  0231  0020               	movlb	0	; select bank0
  3377  0232  1CA0               	btfss	Mrf49SpiTx@byte,1
  3378  0233  2A37               	goto	l271
  3379  0234  0022               	movlb	2	; select bank2
  3380  0235  178D               	bsf	13,7	;volatile
  3381  0236  2A39               	goto	l272
  3382  0237                     l271:	
  3383  0237  0022               	movlb	2	; select bank2
  3384  0238  138D               	bcf	13,7	;volatile
  3385  0239                     l272:	
  3386  0239  178E               	bsf	14,7	;volatile
  3387  023A  0000               	nop	;# 
  3388  023B  0022               	movlb	2	; select bank2
  3389  023C  138E               	bcf	14,7	;volatile
  3390  023D  0020               	movlb	0	; select bank0
  3391  023E  1C20               	btfss	Mrf49SpiTx@byte,0
  3392  023F  2A43               	goto	l275
  3393  0240  0022               	movlb	2	; select bank2
  3394  0241  178D               	bsf	13,7	;volatile
  3395  0242  2A45               	goto	l276
  3396  0243                     l275:	
  3397  0243  0022               	movlb	2	; select bank2
  3398  0244  138D               	bcf	13,7	;volatile
  3399  0245                     l276:	
  3400  0245  178E               	bsf	14,7	;volatile
  3401  0246  0000               	nop	;# 
  3402  0247  0022               	movlb	2	; select bank2
  3403  0248  138E               	bcf	14,7	;volatile
  3404                           
  3405                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  3406  0249  138D               	bcf	13,7	;volatile
  3407  024A  0008               	return
  3408  024B                     __end_of_Mrf49SpiTx:	
  3409  024B                     __ptext12:	
  3410 ;; *************** function _Mrf49RxSts *****************
  3411 ;; Defined at:
  3412 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;		None               void
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, pclath, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 1C/0
  3423 ;;		On exit  : 1F/2
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3426 ;;      Params:         0       0       0       0
  3427 ;;      Locals:         0       0       0       0
  3428 ;;      Temps:          0       0       0       0
  3429 ;;      Totals:         0       0       0       0
  3430 ;;Total ram usage:        0 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    6
  3433 ;; This function calls:
  3434 ;;		_Mrf49SpiRx
  3435 ;; This function is called by:
  3436 ;;		_Mrf49xaServe
  3437 ;;		_Mrf49xaTick
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _Mrf49RxSts
  3443  024B                     _Mrf49RxSts:	
  3444                           
  3445                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  3446                           
  3447                           ;incstack = 0
  3448                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  3449  024B  120B               	bcf	11,4	;volatile
  3450                           
  3451                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  3452  024C  0022               	movlb	2	; select bank2
  3453  024D  130E               	bcf	14,6	;volatile
  3454                           
  3455                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  3456  024E  2257  3180         	fcall	_Mrf49SpiRx
  3457  0250  00AC               	movwf	_mrf49Status
  3458                           
  3459                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  3460  0251  2257               	fcall	_Mrf49SpiRx
  3461  0252  00AD               	movwf	_mrf49Status+1
  3462                           
  3463                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  3464  0253  0022               	movlb	2	; select bank2
  3465  0254  170E               	bsf	14,6	;volatile
  3466                           
  3467                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  3468  0255  160B               	bsf	11,4	;volatile
  3469  0256  0008               	return
  3470  0257                     __end_of_Mrf49RxSts:	
  3471  0257                     __ptext16:	
  3472 ;; *************** function _Mrf49SpiRx *****************
  3473 ;; Defined at:
  3474 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  data            1    0[BANK0 ] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      unsigned char 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2
  3483 ;; Tracked objects:
  3484 ;;		On entry : 1D/2
  3485 ;;		On exit  : 1F/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3488 ;;      Params:         0       0       0       0
  3489 ;;      Locals:         0       1       0       0
  3490 ;;      Temps:          0       0       0       0
  3491 ;;      Totals:         0       1       0       0
  3492 ;;Total ram usage:        1 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    5
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_Mrf49RxCmd
  3499 ;;		_Mrf49RxSts
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           
  3504                           ;psect for function _Mrf49SpiRx
  3505  0257                     _Mrf49SpiRx:	
  3506                           
  3507                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  3511  0257  0020               	movlb	0	; select bank0
  3512  0258  01A0               	clrf	Mrf49SpiRx@data
  3513                           
  3514                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  3515  0259  0022               	movlb	2	; select bank2
  3516  025A  138D               	bcf	13,7	;volatile
  3517  025B  0020               	movlb	0	; select bank0
  3518  025C  1A8E               	btfsc	14,5	;volatile
  3519  025D  17A0               	bsf	Mrf49SpiRx@data,7
  3520  025E  0022               	movlb	2	; select bank2
  3521  025F  178E               	bsf	14,7	;volatile
  3522  0260  0000               	nop	;# 
  3523  0261  0022               	movlb	2	; select bank2
  3524  0262  138E               	bcf	14,7	;volatile
  3525                           
  3526                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3527  0263  0020               	movlb	0	; select bank0
  3528  0264  1A8E               	btfsc	14,5	;volatile
  3529  0265  1720               	bsf	Mrf49SpiRx@data,6
  3530  0266  0022               	movlb	2	; select bank2
  3531  0267  178E               	bsf	14,7	;volatile
  3532  0268  0000               	nop	;# 
  3533  0269  0022               	movlb	2	; select bank2
  3534  026A  138E               	bcf	14,7	;volatile
  3535                           
  3536                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3537  026B  0020               	movlb	0	; select bank0
  3538  026C  1A8E               	btfsc	14,5	;volatile
  3539  026D  16A0               	bsf	Mrf49SpiRx@data,5
  3540  026E  0022               	movlb	2	; select bank2
  3541  026F  178E               	bsf	14,7	;volatile
  3542  0270  0000               	nop	;# 
  3543  0271  0022               	movlb	2	; select bank2
  3544  0272  138E               	bcf	14,7	;volatile
  3545                           
  3546                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3547  0273  0020               	movlb	0	; select bank0
  3548  0274  1A8E               	btfsc	14,5	;volatile
  3549  0275  1620               	bsf	Mrf49SpiRx@data,4
  3550  0276  0022               	movlb	2	; select bank2
  3551  0277  178E               	bsf	14,7	;volatile
  3552  0278  0000               	nop	;# 
  3553  0279  0022               	movlb	2	; select bank2
  3554  027A  138E               	bcf	14,7	;volatile
  3555                           
  3556                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3557  027B  0020               	movlb	0	; select bank0
  3558  027C  1A8E               	btfsc	14,5	;volatile
  3559  027D  15A0               	bsf	Mrf49SpiRx@data,3
  3560  027E  0022               	movlb	2	; select bank2
  3561  027F  178E               	bsf	14,7	;volatile
  3562  0280  0000               	nop	;# 
  3563  0281  0022               	movlb	2	; select bank2
  3564  0282  138E               	bcf	14,7	;volatile
  3565                           
  3566                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3567  0283  0020               	movlb	0	; select bank0
  3568  0284  1A8E               	btfsc	14,5	;volatile
  3569  0285  1520               	bsf	Mrf49SpiRx@data,2
  3570  0286  0022               	movlb	2	; select bank2
  3571  0287  178E               	bsf	14,7	;volatile
  3572  0288  0000               	nop	;# 
  3573  0289  0022               	movlb	2	; select bank2
  3574  028A  138E               	bcf	14,7	;volatile
  3575                           
  3576                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3577  028B  0020               	movlb	0	; select bank0
  3578  028C  1A8E               	btfsc	14,5	;volatile
  3579  028D  14A0               	bsf	Mrf49SpiRx@data,1
  3580  028E  0022               	movlb	2	; select bank2
  3581  028F  178E               	bsf	14,7	;volatile
  3582  0290  0000               	nop	;# 
  3583  0291  0022               	movlb	2	; select bank2
  3584  0292  138E               	bcf	14,7	;volatile
  3585                           
  3586                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  3587  0293  0020               	movlb	0	; select bank0
  3588  0294  1A8E               	btfsc	14,5	;volatile
  3589  0295  1420               	bsf	Mrf49SpiRx@data,0
  3590  0296  0022               	movlb	2	; select bank2
  3591  0297  178E               	bsf	14,7	;volatile
  3592  0298  0000               	nop	;# 
  3593  0299  0022               	movlb	2	; select bank2
  3594  029A  138E               	bcf	14,7	;volatile
  3595                           
  3596                           ;mrf49xa_spi_pic16.c: 40: return data;
  3597  029B  0020               	movlb	0	; select bank0
  3598  029C  0820               	movf	Mrf49SpiRx@data,w
  3599  029D  0008               	return
  3600  029E                     __end_of_Mrf49SpiRx:	
  3601  029E                     __ptext18:	
  3602 ;; *************** function _AdcInit *****************
  3603 ;; Defined at:
  3604 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;		None               void
  3611 ;; Registers used:
  3612 ;;		wreg, status,2
  3613 ;; Tracked objects:
  3614 ;;		On entry : 17F/2
  3615 ;;		On exit  : 17F/1
  3616 ;;		Unchanged: 160/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3618 ;;      Params:         0       0       0       0
  3619 ;;      Locals:         0       0       0       0
  3620 ;;      Temps:          0       0       0       0
  3621 ;;      Totals:         0       0       0       0
  3622 ;;Total ram usage:        0 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    5
  3625 ;; This function calls:
  3626 ;;		Nothing
  3627 ;; This function is called by:
  3628 ;;		_main
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           
  3633                           ;psect for function _AdcInit
  3634  029E                     _AdcInit:	
  3635                           
  3636                           ;adc16.c: 6: ANSELA = 0;
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _AdcInit: [wreg+status,2]
  3640  029E  0023               	movlb	3	; select bank3
  3641  029F  018C               	clrf	12	;volatile
  3642                           
  3643                           ;adc16.c: 7: ANSELB = 0;
  3644  02A0  018D               	clrf	13	;volatile
  3645                           
  3646                           ;adc16.c: 8: ANSELC = 0;
  3647  02A1  018E               	clrf	14	;volatile
  3648                           
  3649                           ;adc16.c: 10: FVRCON = 0b11100001;
  3650  02A2  30E1               	movlw	225
  3651  02A3  0022               	movlb	2	; select bank2
  3652  02A4  0097               	movwf	23	;volatile
  3653                           
  3654                           ;adc16.c: 12: ADCON2 = 0b00000000;
  3655  02A5  0021               	movlb	1	; select bank1
  3656  02A6  019F               	clrf	31	;volatile
  3657                           
  3658                           ;adc16.c: 13: ADCON1 = 0b11110000;
  3659  02A7  30F0               	movlw	240
  3660  02A8  009E               	movwf	30	;volatile
  3661                           
  3662                           ;adc16.c: 14: ADCON0 = 0b00000000;
  3663  02A9  019D               	clrf	29	;volatile
  3664                           
  3665                           ;adc16.c: 16: ADCON0 = 0b00010011;
  3666  02AA  3013               	movlw	19
  3667  02AB  009D               	movwf	29	;volatile
  3668  02AC  0008               	return
  3669  02AD                     __end_of_AdcInit:	
  3670  02AD                     __ptext17:	
  3671 ;; *************** function _ExtIntInit *****************
  3672 ;; Defined at:
  3673 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		None
  3682 ;; Tracked objects:
  3683 ;;		On entry : 17F/1
  3684 ;;		On exit  : 17F/1
  3685 ;;		Unchanged: 160/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3687 ;;      Params:         0       0       0       0
  3688 ;;      Locals:         0       0       0       0
  3689 ;;      Temps:          0       0       0       0
  3690 ;;      Totals:         0       0       0       0
  3691 ;;Total ram usage:        0 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    5
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_main
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           
  3702                           ;psect for function _ExtIntInit
  3703  02AD                     _ExtIntInit:	
  3704                           
  3705                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3706                           
  3707                           ;incstack = 0
  3708                           ; Regs used in _ExtIntInit: []
  3709  02AD  1315               	bcf	21,6	;volatile
  3710                           
  3711                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3712  02AE  108B               	bcf	11,1	;volatile
  3713                           
  3714                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3715  02AF  160B               	bsf	11,4	;volatile
  3716                           
  3717                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3718  02B0  178B               	bsf	11,7	;volatile
  3719  02B1  0008               	return
  3720  02B2                     __end_of_ExtIntInit:	
  3721  02B2                     __ptext6:	
  3722 ;; *************** function _Mrf49xaModeTx *****************
  3723 ;; Defined at:
  3724 ;;		line 264 in file "../../../src/devices/mrf49xa.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;		None
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;  k               1    3[BANK0 ] unsigned char 
  3729 ;; Return value:  Size  Location     Type
  3730 ;;		None               void
  3731 ;; Registers used:
  3732 ;;		wreg, status,2, status,0, pclath, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 1F/0
  3735 ;;		On exit  : 1F/1
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3738 ;;      Params:         0       0       0       0
  3739 ;;      Locals:         0       1       0       0
  3740 ;;      Temps:          0       0       0       0
  3741 ;;      Totals:         0       1       0       0
  3742 ;;Total ram usage:        1 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:    7
  3745 ;; This function calls:
  3746 ;;		_Mrf49TxCmd
  3747 ;; This function is called by:
  3748 ;;		_Mrf49xaTick
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           
  3753                           ;psect for function _Mrf49xaModeTx
  3754  02B2                     _Mrf49xaModeTx:	
  3755  02B2  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  3756                           
  3757                           ;mrf49xa.c: 266: UI08_t k;
  3758                           ;mrf49xa.c: 267: for (k = 0; k < mrfRegset_TxCnt; k++) { if (mrfRegset_Tx[k].reg != 0x55
      +                          ) Mrf49TxCmd(mrfRegset_Tx[k].reg, mrfRegset_Tx[k].val); };
  3759                           
  3760                           ;incstack = 0
  3761                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  3762  02B3  01A3               	clrf	Mrf49xaModeTx@k
  3763  02B4  3186               	movlp	high __stringtab
  3764  02B5  000A               	callw
  3765  02B6  3180               	pagesel	$	;select current page
  3766  02B7  3800               	iorlw	0
  3767  02B8  1903               	btfsc	3,2
  3768  02B9  2AD7               	goto	l1913
  3769  02BA                     l1905:	
  3770  02BA  3523               	lslf	Mrf49xaModeTx@k,w
  3771  02BB  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  3772  02BC  3186               	movlp	high __stringtab
  3773  02BD  000A               	callw
  3774  02BE  3180               	pagesel	$	;select current page
  3775  02BF  3A55               	xorlw	85
  3776  02C0  1903               	skipnz
  3777  02C1  2ACE               	goto	l1909
  3778  02C2  3523               	lslf	Mrf49xaModeTx@k,w
  3779  02C3  3E31               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  3780  02C4  3186               	movlp	high __stringtab
  3781  02C5  000A               	callw
  3782  02C6  3180               	pagesel	$	;select current page
  3783  02C7  00A1               	movwf	Mrf49TxCmd@val
  3784  02C8  3523               	lslf	Mrf49xaModeTx@k,w
  3785  02C9  3E30               	addlw	low (_mrfRegset_Tx| (0+32768))
  3786  02CA  3186               	movlp	high __stringtab
  3787  02CB  000A               	callw
  3788  02CC  3180               	pagesel	$	;select current page
  3789  02CD  21DD               	fcall	_Mrf49TxCmd
  3790  02CE                     l1909:	
  3791  02CE  0020               	movlb	0	; select bank0
  3792  02CF  3003               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  3793  02D0  0AA3               	incf	Mrf49xaModeTx@k,f
  3794  02D1  3186               	movlp	high __stringtab
  3795  02D2  000A               	callw
  3796  02D3  3180               	pagesel	$	;select current page
  3797  02D4  0223               	subwf	Mrf49xaModeTx@k,w
  3798  02D5  1C03               	skipc
  3799  02D6  2ABA               	goto	l1905
  3800  02D7                     l1913:	
  3801                           
  3802                           ;mrf49xa.c: 269: rfTrcvStatus.state = TX_PACKET;
  3803  02D7  3003               	movlw	3
  3804  02D8  0021               	movlb	1	; select bank1
  3805  02D9  00A0               	movwf	_rfTrcvStatus^(0+128)
  3806                           
  3807                           ;mrf49xa.c: 270: rfTrcvStatus.hwByte = 0;
  3808  02DA  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  3809  02DB  0008               	return
  3810  02DC                     __end_of_Mrf49xaModeTx:	
  3811  02DC                     __ptext5:	
  3812 ;; *************** function _Mrf49xaPacketPending *****************
  3813 ;; Defined at:
  3814 ;;		line 3 in file "../../../src/devices/mrf49xa_packet.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;		None
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      unsigned char 
  3821 ;; Registers used:
  3822 ;;		wreg
  3823 ;; Tracked objects:
  3824 ;;		On entry : 1C/0
  3825 ;;		On exit  : 1F/1
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3828 ;;      Params:         0       0       0       0
  3829 ;;      Locals:         0       0       0       0
  3830 ;;      Temps:          0       0       0       0
  3831 ;;      Totals:         0       0       0       0
  3832 ;;Total ram usage:        0 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    5
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_Mrf49xaTick
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           
  3843                           ;psect for function _Mrf49xaPacketPending
  3844  02DC                     _Mrf49xaPacketPending:	
  3845                           
  3846                           ;mrf49xa_packet.c: 5: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  3847                           ;mrf49xa_packet.c: 6: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  3848                           
  3849                           ;incstack = 0
  3850                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  3851  02DC  0021               	movlb	1	; select bank1
  3852  02DD  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  3853  02DE  3A03               	xorlw	3
  3854  02DF  1903               	skipnz
  3855  02E0  3401               	retlw	1
  3856  02E1  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3857  02E2  3A03               	xorlw	3
  3858  02E3  1903               	btfsc	3,2
  3859                           
  3860                           ;mrf49xa_packet.c: 7: return 1;
  3861  02E4  3401               	retlw	1
  3862                           
  3863                           ;mrf49xa_packet.c: 8: else
  3864                           ;mrf49xa_packet.c: 9: return 0;
  3865  02E5  3400               	retlw	0
  3866  02E6                     __end_of_Mrf49xaPacketPending:	
  3867  02E6                     __ptext4:	
  3868 ;; *************** function _Mrf49xaRxPacket *****************
  3869 ;; Defined at:
  3870 ;;		line 49 in file "../../../src/devices/mrf49xa_packet.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;		None
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      PTR struct rfTrcvPacket_
  3877 ;; Registers used:
  3878 ;;		wreg
  3879 ;; Tracked objects:
  3880 ;;		On entry : 1F/1
  3881 ;;		On exit  : 1F/1
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3884 ;;      Params:         0       0       0       0
  3885 ;;      Locals:         0       0       0       0
  3886 ;;      Temps:          0       0       0       0
  3887 ;;      Totals:         0       0       0       0
  3888 ;;Total ram usage:        0 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    5
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		_Mrf49xaTick
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _Mrf49xaRxPacket
  3900  02E6                     _Mrf49xaRxPacket:	
  3901                           
  3902                           ;mrf49xa_packet.c: 51: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  3906  02E6  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  3907  02E7  3A03               	xorlw	3
  3908  02E8  1D03               	skipz
  3909  02E9  2AED               	goto	l2073
  3910                           
  3911                           ;mrf49xa_packet.c: 52: {
  3912                           ;mrf49xa_packet.c: 53: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  3913  02EA  3004               	movlw	4
  3914  02EB  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  3915                           
  3916                           ;mrf49xa_packet.c: 54: return &(rfTrcvStatus.rxPacket[0]);
  3917  02EC  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  3918  02ED                     l2073:	
  3919                           
  3920                           ;mrf49xa_packet.c: 55: }
  3921                           ;mrf49xa_packet.c: 57: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  3922  02ED  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3923  02EE  3A03               	xorlw	3
  3924  02EF  1D03               	skipz
  3925  02F0  3400               	retlw	0
  3926                           
  3927                           ;mrf49xa_packet.c: 58: {
  3928                           ;mrf49xa_packet.c: 59: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  3929  02F1  3004               	movlw	4
  3930  02F2  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3931                           
  3932                           ;mrf49xa_packet.c: 60: return &(rfTrcvStatus.rxPacket[1]);
  3933  02F3  34D1               	retlw	(_rfTrcvStatus+49)& (0+255)
  3934  02F4                     __end_of_Mrf49xaRxPacket:	
  3935                           ;mrf49xa_packet.c: 61: }
  3936                           ;mrf49xa_packet.c: 63: return (0);
  3937                           
  3938  02F4                     __ptext3:	
  3939 ;; *************** function _Mrf49xaTxPacket *****************
  3940 ;; Defined at:
  3941 ;;		line 12 in file "../../../src/devices/mrf49xa_packet.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3944 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(76), 
  3945 ;;  swapSrcDst      1    0[BANK0 ] unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  packet          1    4[BANK0 ] PTR struct rfTrcvPacket_
  3948 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(76), 
  3949 ;;  i               1    3[BANK0 ] unsigned char 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      unsigned char 
  3952 ;; Registers used:
  3953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 1F/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       1       0       0
  3960 ;;      Locals:         0       2       0       0
  3961 ;;      Temps:          0       2       0       0
  3962 ;;      Totals:         0       5       0       0
  3963 ;;Total ram usage:        5 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    5
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		_Mrf49xaTick
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function _Mrf49xaTxPacket
  3975  02F4                     _Mrf49xaTxPacket:	
  3976                           
  3977                           ;incstack = 0
  3978                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  3979                           ;Mrf49xaTxPacket@packet stored from wreg
  3980  02F4  00A4               	movwf	Mrf49xaTxPacket@packet
  3981                           
  3982                           ;mrf49xa_packet.c: 14: uint8_t i;
  3983                           ;mrf49xa_packet.c: 17: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3984  02F5  0021               	movlb	1	; select bank1
  3985  02F6  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  3986  02F7  1D03               	skipz
  3987  02F8  0008               	return
  3988                           
  3989                           ;mrf49xa_packet.c: 22: else
  3990                           ;mrf49xa_packet.c: 23: {
  3991                           ;mrf49xa_packet.c: 24: if (swapSrcDst)
  3992  02F9  0020               	movlb	0	; select bank0
  3993  02FA  0820               	movf	Mrf49xaTxPacket@swapSrcDst,w
  3994  02FB  1903               	btfsc	3,2
  3995  02FC  2B0D               	goto	l2051
  3996                           
  3997                           ;mrf49xa_packet.c: 25: {
  3998                           ;mrf49xa_packet.c: 26: packet->packet.dst = packet->packet.src;
  3999  02FD  0824               	movf	Mrf49xaTxPacket@packet,w
  4000  02FE  3E03               	addlw	3
  4001  02FF  0086               	movwf	6
  4002  0300  0187               	clrf	7
  4003  0301  0824               	movf	Mrf49xaTxPacket@packet,w
  4004  0302  3E02               	addlw	2
  4005  0303  0084               	movwf	4
  4006  0304  0185               	clrf	5
  4007  0305  0800               	movf	0,w
  4008  0306  0081               	movwf	1
  4009                           
  4010                           ;mrf49xa_packet.c: 27: packet->packet.src = rfTrcvStatus.src;
  4011  0307  0824               	movf	Mrf49xaTxPacket@packet,w
  4012  0308  3E02               	addlw	2
  4013  0309  0086               	movwf	6
  4014  030A  0021               	movlb	1	; select bank1
  4015  030B  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4016  030C  0081               	movwf	1
  4017  030D                     l2051:	
  4018                           
  4019                           ;mrf49xa_packet.c: 28: }
  4020                           ;mrf49xa_packet.c: 30: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4021  030D  0021               	movlb	1	; select bank1
  4022  030E  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  4023  030F  0AA1               	incf	(_rfTrcvStatus^(0+128)+1),f
  4024                           
  4025                           ;mrf49xa_packet.c: 31: rfTrcvStatus.txPacket.crc = 0;
  4026  0310  01B7               	clrf	(_rfTrcvStatus^(0+128)+23)
  4027                           
  4028                           ;mrf49xa_packet.c: 32: rfTrcvStatus.txPacket.retry = 0;
  4029  0311  01B8               	clrf	(_rfTrcvStatus^(0+128)+24)
  4030                           
  4031                           ;mrf49xa_packet.c: 34: packet->state = PKT_FREE;
  4032  0312  0020               	movlb	0	; select bank0
  4033  0313  0824               	movf	Mrf49xaTxPacket@packet,w
  4034  0314  0086               	movwf	6
  4035  0315  0187               	clrf	7
  4036  0316  0181               	clrf	1
  4037                           
  4038                           ;mrf49xa_packet.c: 37: for (i = 0; i < packet->packet.size+1; i++)
  4039  0317  01A3               	clrf	Mrf49xaTxPacket@i
  4040  0318                     l2065:	
  4041  0318  0A24               	incf	Mrf49xaTxPacket@packet,w
  4042  0319  0086               	movwf	6
  4043  031A  0187               	clrf	7
  4044  031B  0801               	movf	1,w
  4045  031C  3E01               	addlw	1
  4046  031D  00A1               	movwf	??_Mrf49xaTxPacket
  4047  031E  3000               	movlw	0
  4048  031F  1803               	skipnc
  4049  0320  3001               	movlw	1
  4050  0321  00A2               	movwf	??_Mrf49xaTxPacket+1
  4051  0322  3A80               	xorlw	128
  4052  0323  3C80               	sublw	128
  4053  0324  1D03               	skipz
  4054  0325  2B28               	goto	u1525
  4055  0326  0821               	movf	??_Mrf49xaTxPacket,w
  4056  0327  0223               	subwf	Mrf49xaTxPacket@i,w
  4057  0328                     u1525:	
  4058  0328  1803               	btfsc	3,0
  4059  0329  0008               	return
  4060                           
  4061                           ;mrf49xa_packet.c: 38: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4062  032A  0020               	movlb	0	; select bank0
  4063  032B  0823               	movf	Mrf49xaTxPacket@i,w
  4064  032C  3EA2               	addlw	(_rfTrcvStatus+2)& (0+255)
  4065  032D  0086               	movwf	6
  4066  032E  0187               	clrf	7
  4067  032F  0823               	movf	Mrf49xaTxPacket@i,w
  4068  0330  0724               	addwf	Mrf49xaTxPacket@packet,w
  4069  0331  00A1               	movwf	??_Mrf49xaTxPacket
  4070  0332  0A21               	incf	??_Mrf49xaTxPacket,w
  4071  0333  0084               	movwf	4
  4072  0334  0185               	clrf	5
  4073  0335  0800               	movf	0,w
  4074  0336  0081               	movwf	1
  4075  0337  0AA3               	incf	Mrf49xaTxPacket@i,f
  4076  0338  2B18               	goto	l2065
  4077  0339                     __end_of_Mrf49xaTxPacket:	
  4078  0339                     __ptext1:	
  4079 ;; *************** function _SysInitGpio *****************
  4080 ;; Defined at:
  4081 ;;		line 10 in file "../../../src/node/main.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;		None
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;		None
  4086 ;; Return value:  Size  Location     Type
  4087 ;;		None               void
  4088 ;; Registers used:
  4089 ;;		None
  4090 ;; Tracked objects:
  4091 ;;		On entry : 17F/4
  4092 ;;		On exit  : 17F/2
  4093 ;;		Unchanged: 160/0
  4094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4095 ;;      Params:         0       0       0       0
  4096 ;;      Locals:         0       0       0       0
  4097 ;;      Temps:          0       0       0       0
  4098 ;;      Totals:         0       0       0       0
  4099 ;;Total ram usage:        0 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    5
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_main
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           
  4110                           ;psect for function _SysInitGpio
  4111  0339                     _SysInitGpio:	
  4112                           
  4113                           ;incstack = 0
  4114                           ; Regs used in _SysInitGpio: []
  4115                           ;main.c: 12: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  4116  0339  0021               	movlb	1	; select bank1
  4117  033A  150C               	bsf	12,2	;volatile
  4118  033B  120C               	bcf	12,4	;volatile
  4119  033C  128C               	bcf	12,5	;volatile
  4120  033D  0022               	movlb	2	; select bank2
  4121  033E  120C               	bcf	12,4	;volatile
  4122  033F  128C               	bcf	12,5	;volatile
  4123                           
  4124                           ;main.c: 13: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4125  0340  0021               	movlb	1	; select bank1
  4126  0341  120D               	bcf	13,4	;volatile
  4127  0342  130D               	bcf	13,6	;volatile
  4128  0343  138D               	bcf	13,7	;volatile
  4129  0344  168D               	bsf	13,5	;volatile
  4130                           
  4131                           ;main.c: 14: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  4132  0345  108E               	bcf	14,1	;volatile
  4133  0346  110E               	bcf	14,2	;volatile
  4134  0347  120E               	bcf	14,4	;volatile
  4135  0348  130E               	bcf	14,6	;volatile
  4136  0349  138E               	bcf	14,7	;volatile
  4137  034A  140E               	bsf	14,0	;volatile
  4138  034B  158E               	bsf	14,3	;volatile
  4139  034C  168E               	bsf	14,5	;volatile
  4140  034D  0022               	movlb	2	; select bank2
  4141  034E  108E               	bcf	14,1	;volatile
  4142  034F  110E               	bcf	14,2	;volatile
  4143  0350  120E               	bcf	14,4	;volatile
  4144  0351  170E               	bsf	14,6	;volatile
  4145  0352  138E               	bcf	14,7	;volatile
  4146                           
  4147                           ;main.c: 16: LATCbits.LATC1 = 0;
  4148  0353  108E               	bcf	14,1	;volatile
  4149                           
  4150                           ;main.c: 17: LATCbits.LATC2 = 0;
  4151  0354  110E               	bcf	14,2	;volatile
  4152  0355  0008               	return
  4153  0356                     __end_of_SysInitGpio:	
  4154                           
  4155                           	psect	bssBANK0
  4156  002C                     __pbssBANK0:	
  4157  002C                     _mrf49Status:	
  4158  002C                     	ds	2
  4159                           
  4160                           	psect	bssBANK1
  4161  00A0                     __pbssBANK1:	
  4162  00A0                     _rfTrcvStatus:	
  4163  00A0                     	ds	76
  4164                           
  4165                           	psect	clrtext
  4166  0638                     clear_ram0:	
  4167                           ;	Called with FSR0 containing the base address, and
  4168                           ;	WREG with the size to clear
  4169                           
  4170  0638  0064               	clrwdt	;clear the watchdog before getting into this loop
  4171  0639                     clrloop0:	
  4172  0639  0180               	clrf	0	;clear RAM location pointed to by FSR
  4173  063A  3101               	addfsr 0,1
  4174  063B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4175  063C  2E39               	goto	clrloop0	;have we reached the end yet?
  4176  063D  3400               	retlw	0	;all done for this memory range, return
  4177                           
  4178                           	psect	cstackCOMMON
  4179  0070                     __pcstackCOMMON:	
  4180  0070                     ?_Mrf49RxSts:	
  4181  0070                     ?_Mrf49xaModeRx:	
  4182                           ; 0 bytes @ 0x0
  4183                           
  4184  0070                     ?_Mrf49TxByte:	
  4185                           ; 0 bytes @ 0x0
  4186                           
  4187  0070                     ?_AdcInit:	
  4188                           ; 0 bytes @ 0x0
  4189                           
  4190  0070                     ?_ExtIntInit:	
  4191                           ; 0 bytes @ 0x0
  4192                           
  4193  0070                     ?_extInt:	
  4194                           ; 0 bytes @ 0x0
  4195                           
  4196  0070                     ?_Mrf49xaModeTx:	
  4197                           ; 0 bytes @ 0x0
  4198                           
  4199  0070                     ?_Mrf49xaInit:	
  4200                           ; 0 bytes @ 0x0
  4201                           
  4202  0070                     ?_Mrf49SpiTx:	
  4203                           ; 0 bytes @ 0x0
  4204                           
  4205  0070                     ?_Mrf49xaTick:	
  4206                           ; 0 bytes @ 0x0
  4207                           
  4208  0070                     ?_SysInitGpio:	
  4209                           ; 0 bytes @ 0x0
  4210                           
  4211  0070                     ?_main:	
  4212                           ; 0 bytes @ 0x0
  4213                           
  4214  0070                     ?i1_Mrf49xaModeRx:	
  4215                           ; 0 bytes @ 0x0
  4216                           
  4217  0070                     ?i1_Mrf49SpiTx:	
  4218                           ; 0 bytes @ 0x0
  4219                           
  4220  0070                     ??i1_Mrf49SpiTx:	
  4221                           ; 0 bytes @ 0x0
  4222                           
  4223  0070                     ??i1_Mrf49SpiRx:	
  4224                           ; 0 bytes @ 0x0
  4225                           
  4226  0070                     ?i1_Mrf49RxSts:	
  4227                           ; 0 bytes @ 0x0
  4228                           
  4229  0070                     ?i1_Mrf49TxByte:	
  4230                           ; 0 bytes @ 0x0
  4231                           
  4232  0070                     ?_Mrf49xaServe:	
  4233                           ; 0 bytes @ 0x0
  4234                           
  4235  0070                     ?_Mrf49RxByte:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?_Mrf49SpiRx:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?_Mrf49RxCmd:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ?_Mrf49xaPacketPending:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ?_Mrf49xaRxPacket:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?i1_Mrf49xaServe:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ?i1_Mrf49SpiRx:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     ?i1_Mrf49RxCmd:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     ?i1_Mrf49RxByte:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     i1Mrf49SpiTx@byte:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0070                     i1Mrf49SpiRx@data:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268                           
  4269                           ; 1 bytes @ 0x0
  4270  0070                     	ds	1
  4271  0071                     ?i1_Mrf49TxCmd:	
  4272  0071                     ??i1_Mrf49RxCmd:	
  4273                           ; 0 bytes @ 0x1
  4274                           
  4275  0071                     ??i1_Mrf49RxSts:	
  4276                           ; 0 bytes @ 0x1
  4277                           
  4278  0071                     i1Mrf49TxCmd@val:	
  4279                           ; 0 bytes @ 0x1
  4280                           
  4281  0071                     i1Mrf49RxCmd@cmd:	
  4282                           ; 1 bytes @ 0x1
  4283                           
  4284                           
  4285                           ; 1 bytes @ 0x1
  4286  0071                     	ds	1
  4287  0072                     ??i1_Mrf49TxCmd:	
  4288  0072                     i1Mrf49TxCmd@cmd:	
  4289                           ; 0 bytes @ 0x2
  4290                           
  4291  0072                     i1Mrf49RxCmd@val:	
  4292                           ; 1 bytes @ 0x2
  4293                           
  4294                           
  4295                           ; 1 bytes @ 0x2
  4296  0072                     	ds	1
  4297  0073                     ??i1_Mrf49xaModeRx:	
  4298  0073                     ??i1_Mrf49RxByte:	
  4299                           ; 0 bytes @ 0x3
  4300                           
  4301  0073                     ??i1_Mrf49TxByte:	
  4302                           ; 0 bytes @ 0x3
  4303                           
  4304  0073                     i1Mrf49xaModeRx@k:	
  4305                           ; 0 bytes @ 0x3
  4306                           
  4307  0073                     i1Mrf49TxByte@byte:	
  4308                           ; 1 bytes @ 0x3
  4309                           
  4310                           
  4311                           ; 1 bytes @ 0x3
  4312  0073                     	ds	1
  4313  0074                     ??i1_Mrf49xaServe:	
  4314                           
  4315                           ; 0 bytes @ 0x4
  4316  0074                     	ds	2
  4317  0076                     i1Mrf49xaServe@data:	
  4318                           
  4319                           ; 1 bytes @ 0x6
  4320  0076                     	ds	1
  4321  0077                     ??_extInt:	
  4322                           
  4323                           ; 0 bytes @ 0x7
  4324  0077                     	ds	1
  4325                           
  4326                           	psect	cstackBANK0
  4327  0020                     __pcstackBANK0:	
  4328  0020                     ??_AdcInit:	
  4329  0020                     ??_ExtIntInit:	
  4330                           ; 0 bytes @ 0x0
  4331                           
  4332  0020                     ??_Mrf49SpiTx:	
  4333                           ; 0 bytes @ 0x0
  4334                           
  4335  0020                     ??_Mrf49SpiRx:	
  4336                           ; 0 bytes @ 0x0
  4337                           
  4338  0020                     ??_Mrf49xaPacketPending:	
  4339                           ; 0 bytes @ 0x0
  4340                           
  4341  0020                     ??_Mrf49xaRxPacket:	
  4342                           ; 0 bytes @ 0x0
  4343                           
  4344  0020                     ??_SysInitGpio:	
  4345                           ; 0 bytes @ 0x0
  4346                           
  4347  0020                     ?_Mrf49xaTxPacket:	
  4348                           ; 0 bytes @ 0x0
  4349                           
  4350  0020                     Mrf49SpiTx@byte:	
  4351                           ; 1 bytes @ 0x0
  4352                           
  4353  0020                     Mrf49SpiRx@data:	
  4354                           ; 1 bytes @ 0x0
  4355                           
  4356  0020                     Mrf49xaTxPacket@swapSrcDst:	
  4357                           ; 1 bytes @ 0x0
  4358                           
  4359                           
  4360                           ; 1 bytes @ 0x0
  4361  0020                     	ds	1
  4362  0021                     ??_Mrf49RxSts:	
  4363  0021                     ?_Mrf49TxCmd:	
  4364                           ; 0 bytes @ 0x1
  4365                           
  4366  0021                     ??_Mrf49RxCmd:	
  4367                           ; 0 bytes @ 0x1
  4368                           
  4369  0021                     ??_Mrf49xaTxPacket:	
  4370                           ; 0 bytes @ 0x1
  4371                           
  4372  0021                     Mrf49TxCmd@val:	
  4373                           ; 0 bytes @ 0x1
  4374                           
  4375  0021                     Mrf49RxCmd@cmd:	
  4376                           ; 1 bytes @ 0x1
  4377                           
  4378                           
  4379                           ; 1 bytes @ 0x1
  4380  0021                     	ds	1
  4381  0022                     ??_Mrf49TxCmd:	
  4382  0022                     Mrf49TxCmd@cmd:	
  4383                           ; 0 bytes @ 0x2
  4384                           
  4385  0022                     Mrf49RxCmd@val:	
  4386                           ; 1 bytes @ 0x2
  4387                           
  4388                           
  4389                           ; 1 bytes @ 0x2
  4390  0022                     	ds	1
  4391  0023                     ??_Mrf49RxByte:	
  4392  0023                     ??_Mrf49xaModeRx:	
  4393                           ; 0 bytes @ 0x3
  4394                           
  4395  0023                     ??_Mrf49TxByte:	
  4396                           ; 0 bytes @ 0x3
  4397                           
  4398  0023                     ??_Mrf49xaModeTx:	
  4399                           ; 0 bytes @ 0x3
  4400                           
  4401  0023                     Mrf49xaModeRx@k:	
  4402                           ; 0 bytes @ 0x3
  4403                           
  4404  0023                     Mrf49xaModeTx@k:	
  4405                           ; 1 bytes @ 0x3
  4406                           
  4407  0023                     Mrf49TxByte@byte:	
  4408                           ; 1 bytes @ 0x3
  4409                           
  4410  0023                     Mrf49xaTxPacket@i:	
  4411                           ; 1 bytes @ 0x3
  4412                           
  4413                           
  4414                           ; 1 bytes @ 0x3
  4415  0023                     	ds	1
  4416  0024                     ??_Mrf49xaServe:	
  4417  0024                     Mrf49xaTxPacket@packet:	
  4418                           ; 0 bytes @ 0x4
  4419                           
  4420                           
  4421                           ; 1 bytes @ 0x4
  4422  0024                     	ds	1
  4423  0025                     ??_Mrf49xaTick:	
  4424  0025                     Mrf49xaTick@timeout:	
  4425                           ; 0 bytes @ 0x5
  4426                           
  4427                           
  4428                           ; 1 bytes @ 0x5
  4429  0025                     	ds	1
  4430  0026                     Mrf49xaServe@data:	
  4431  0026                     Mrf49xaTick@i:	
  4432                           ; 1 bytes @ 0x6
  4433                           
  4434                           
  4435                           ; 1 bytes @ 0x6
  4436  0026                     	ds	1
  4437  0027                     ??_Mrf49xaInit:	
  4438  0027                     Mrf49xaInit@i:	
  4439                           ; 0 bytes @ 0x7
  4440                           
  4441  0027                     Mrf49xaTick@j:	
  4442                           ; 1 bytes @ 0x7
  4443                           
  4444                           
  4445                           ; 1 bytes @ 0x7
  4446  0027                     	ds	1
  4447  0028                     Mrf49xaInit@j:	
  4448  0028                     Mrf49xaTick@packet:	
  4449                           ; 1 bytes @ 0x8
  4450                           
  4451                           
  4452                           ; 1 bytes @ 0x8
  4453  0028                     	ds	1
  4454  0029                     Mrf49xaInit@k:	
  4455                           
  4456                           ; 1 bytes @ 0x9
  4457  0029                     	ds	1
  4458  002A                     ??_main:	
  4459  002A                     main@j:	
  4460                           ; 0 bytes @ 0xA
  4461                           
  4462                           
  4463                           ; 1 bytes @ 0xA
  4464  002A                     	ds	1
  4465  002B                     main@i:	
  4466                           
  4467                           ; 1 bytes @ 0xB
  4468  002B                     	ds	1
  4469                           
  4470                           	psect	swtext1
  4471  05D7                     __pswtext1:	
  4472  05D7                     S2477:	
  4473  05D7  3180  28EC         	ljmp	l1765
  4474  05D9  3180  28EC         	ljmp	l1765
  4475  05DB  3180  28EC         	ljmp	l1765
  4476  05DD  3181  2900         	ljmp	l179
  4477                           
  4478                           	psect	swtext2
  4479  0507                     __pswtext2:	
  4480  0507                     S2479:	
  4481  0507  3181  2954         	ljmp	l1819
  4482  0509  3181  2954         	ljmp	l1819
  4483  050B  3181  2958         	ljmp	l1821
  4484  050D  3181  295C         	ljmp	l1823
  4485  050F  3181  2960         	ljmp	l1825
  4486  0511  3181  2960         	ljmp	l1825
  4487  0513  3181  2960         	ljmp	l1825
  4488  0515  3181  2960         	ljmp	l1825
  4489  0517  3181  2960         	ljmp	l1825
  4490  0519  3181  2960         	ljmp	l1825
  4491  051B  3181  2960         	ljmp	l1825
  4492  051D  3181  2960         	ljmp	l1825
  4493  051F  3181  2960         	ljmp	l1825
  4494  0521  3181  2960         	ljmp	l1825
  4495  0523  3181  2960         	ljmp	l1825
  4496  0525  3181  2960         	ljmp	l1825
  4497  0527  3181  2960         	ljmp	l1825
  4498  0529  3181  2960         	ljmp	l1825
  4499  052B  3181  2960         	ljmp	l1825
  4500  052D  3181  2960         	ljmp	l1825
  4501  052F  3181  2960         	ljmp	l1825
  4502  0531  3181  2960         	ljmp	l1825
  4503  0533  3181  2960         	ljmp	l1825
  4504  0535  3181  2960         	ljmp	l1825
  4505  0537  3181  2960         	ljmp	l1825
  4506  0539  3181  2960         	ljmp	l1825
  4507  053B  3181  2960         	ljmp	l1825
  4508  053D  3181  2960         	ljmp	l1825
  4509  053F  3181  2960         	ljmp	l1825
  4510  0541  3181  2960         	ljmp	l1825
  4511  0543  3181  2960         	ljmp	l1825
  4512  0545  3181  2960         	ljmp	l1825
  4513  0547  3181  2960         	ljmp	l1825
  4514  0549  3181  2960         	ljmp	l1825
  4515  054B  3181  2960         	ljmp	l1825
  4516  054D  3181  2960         	ljmp	l1825
  4517  054F  3181  2960         	ljmp	l1825
  4518  0551  3181  2960         	ljmp	l1825
  4519  0553  3181  2960         	ljmp	l1825
  4520  0555  3181  2960         	ljmp	l1825
  4521  0557  3181  2960         	ljmp	l1825
  4522  0559  3181  2960         	ljmp	l1825
  4523  055B  3181  2960         	ljmp	l1825
  4524  055D  3181  2960         	ljmp	l1825
  4525  055F  3181  2960         	ljmp	l1825
  4526  0561  3181  2960         	ljmp	l1825
  4527  0563  3181  2960         	ljmp	l1825
  4528  0565  3181  2960         	ljmp	l1825
  4529  0567  3181  2960         	ljmp	l1825
  4530  0569  3181  2982         	ljmp	l1833
  4531  056B  3181  2986         	ljmp	l1835
  4532  056D  3181  298A         	ljmp	l1837
  4533                           
  4534                           	psect	intentry
  4535  0004                     __pintentry:	
  4536 ;; *************** function _extInt *****************
  4537 ;; Defined at:
  4538 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;		None
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;		None
  4543 ;; Return value:  Size  Location     Type
  4544 ;;		None               void
  4545 ;; Registers used:
  4546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 1F/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4552 ;;      Params:         0       0       0       0
  4553 ;;      Locals:         0       0       0       0
  4554 ;;      Temps:          1       0       0       0
  4555 ;;      Totals:         1       0       0       0
  4556 ;;Total ram usage:        1 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    4
  4559 ;; This function calls:
  4560 ;;		i1_Mrf49xaServe
  4561 ;; This function is called by:
  4562 ;;		Interrupt level 1
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566  0004                     _extInt:	
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4570  0004  3180               	pagesel	$
  4571  0005  0020               	movlb	0	; select bank0
  4572  0006  087F               	movf	127,w
  4573  0007  00F7               	movwf	??_extInt
  4574                           
  4575                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  4576  0008  1C8B               	btfss	11,1	;volatile
  4577  0009  2811               	goto	i1l131
  4578                           
  4579                           ;interrupt.c: 34: {
  4580                           ;interrupt.c: 35: if (Mrf49xaServe())
  4581  000A  3183  2360  3180   	fcall	i1_Mrf49xaServe
  4582  000D  3A00               	xorlw	0
  4583  000E  1903               	skipnz
  4584  000F  2811               	goto	i1l131
  4585                           
  4586                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  4587  0010  108B               	bcf	11,1	;volatile
  4588  0011                     i1l131:	
  4589  0011  0877               	movf	??_extInt,w
  4590  0012  00FF               	movwf	127
  4591  0013  0009               	retfie
  4592  0014                     __end_of_extInt:	
  4593                           
  4594                           	psect	swtext3
  4595  05DF                     __pswtext3:	
  4596  05DF                     i1S2481:	
  4597  05DF  3183  2B66         	ljmp	i1l2293
  4598  05E1  3183  2B66         	ljmp	i1l2293
  4599  05E3  3183  2B66         	ljmp	i1l2293
  4600  05E5  3183  2B7A         	ljmp	i1l179
  4601                           
  4602                           	psect	swtext4
  4603  056F                     __pswtext4:	
  4604  056F                     i1S2483:	
  4605  056F  3183  2BCB         	ljmp	i1l2347
  4606  0571  3183  2BCB         	ljmp	i1l2347
  4607  0573  3183  2BCF         	ljmp	i1l2349
  4608  0575  3183  2BD3         	ljmp	i1l2351
  4609  0577  3183  2BD7         	ljmp	i1l2353
  4610  0579  3183  2BD7         	ljmp	i1l2353
  4611  057B  3183  2BD7         	ljmp	i1l2353
  4612  057D  3183  2BD7         	ljmp	i1l2353
  4613  057F  3183  2BD7         	ljmp	i1l2353
  4614  0581  3183  2BD7         	ljmp	i1l2353
  4615  0583  3183  2BD7         	ljmp	i1l2353
  4616  0585  3183  2BD7         	ljmp	i1l2353
  4617  0587  3183  2BD7         	ljmp	i1l2353
  4618  0589  3183  2BD7         	ljmp	i1l2353
  4619  058B  3183  2BD7         	ljmp	i1l2353
  4620  058D  3183  2BD7         	ljmp	i1l2353
  4621  058F  3183  2BD7         	ljmp	i1l2353
  4622  0591  3183  2BD7         	ljmp	i1l2353
  4623  0593  3183  2BD7         	ljmp	i1l2353
  4624  0595  3183  2BD7         	ljmp	i1l2353
  4625  0597  3183  2BD7         	ljmp	i1l2353
  4626  0599  3183  2BD7         	ljmp	i1l2353
  4627  059B  3183  2BD7         	ljmp	i1l2353
  4628  059D  3183  2BD7         	ljmp	i1l2353
  4629  059F  3183  2BD7         	ljmp	i1l2353
  4630  05A1  3183  2BD7         	ljmp	i1l2353
  4631  05A3  3183  2BD7         	ljmp	i1l2353
  4632  05A5  3183  2BD7         	ljmp	i1l2353
  4633  05A7  3183  2BD7         	ljmp	i1l2353
  4634  05A9  3183  2BD7         	ljmp	i1l2353
  4635  05AB  3183  2BD7         	ljmp	i1l2353
  4636  05AD  3183  2BD7         	ljmp	i1l2353
  4637  05AF  3183  2BD7         	ljmp	i1l2353
  4638  05B1  3183  2BD7         	ljmp	i1l2353
  4639  05B3  3183  2BD7         	ljmp	i1l2353
  4640  05B5  3183  2BD7         	ljmp	i1l2353
  4641  05B7  3183  2BD7         	ljmp	i1l2353
  4642  05B9  3183  2BD7         	ljmp	i1l2353
  4643  05BB  3183  2BD7         	ljmp	i1l2353
  4644  05BD  3183  2BD7         	ljmp	i1l2353
  4645  05BF  3183  2BD7         	ljmp	i1l2353
  4646  05C1  3183  2BD7         	ljmp	i1l2353
  4647  05C3  3183  2BD7         	ljmp	i1l2353
  4648  05C5  3183  2BD7         	ljmp	i1l2353
  4649  05C7  3183  2BD7         	ljmp	i1l2353
  4650  05C9  3183  2BD7         	ljmp	i1l2353
  4651  05CB  3183  2BD7         	ljmp	i1l2353
  4652  05CD  3183  2BD7         	ljmp	i1l2353
  4653  05CF  3183  2BD7         	ljmp	i1l2353
  4654  05D1  3183  2BF5         	ljmp	i1l2361
  4655  05D3  3183  2BF9         	ljmp	i1l2363
  4656  05D5  3183  2BFD         	ljmp	i1l2365
  4657                           
  4658                           	psect	text26
  4659  0356                     __ptext26:	
  4660 ;; *************** function i1_Mrf49RxCmd *****************
  4661 ;; Defined at:
  4662 ;;		line 16 in file "../../../src/devices/mrf49xa_cmd.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  cmd             1    wreg     unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  cmd             1    1[COMMON] unsigned char 
  4667 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  1    wreg      unsigned char 
  4670 ;; Registers used:
  4671 ;;		wreg, status,2, status,0, pclath, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 1C/1
  4674 ;;		On exit  : 1F/2
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4677 ;;      Params:         0       0       0       0
  4678 ;;      Locals:         2       0       0       0
  4679 ;;      Temps:          0       0       0       0
  4680 ;;      Totals:         2       0       0       0
  4681 ;;Total ram usage:        2 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    1
  4684 ;; This function calls:
  4685 ;;		i1_Mrf49SpiRx
  4686 ;;		i1_Mrf49SpiTx
  4687 ;; This function is called by:
  4688 ;;		i1_Mrf49RxByte
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function i1_Mrf49RxCmd
  4694  0356                     i1_Mrf49RxCmd:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  4698                           ;i1Mrf49RxCmd@cmd stored from wreg
  4699  0356  00F1               	movwf	i1Mrf49RxCmd@cmd
  4700                           
  4701                           ;mrf49xa_cmd.c: 18: LATCbits.LATC6 = 0;;
  4702  0357  0022               	movlb	2	; select bank2
  4703  0358  130E               	bcf	14,6	;volatile
  4704                           
  4705                           ;mrf49xa_cmd.c: 20: Mrf49SpiTx(cmd);
  4706  0359  0871               	movf	i1Mrf49RxCmd@cmd,w
  4707  035A  2459  3183         	fcall	i1_Mrf49SpiTx
  4708                           
  4709                           ;mrf49xa_cmd.c: 21: uint8_t val = Mrf49SpiRx();
  4710  035C  24C2               	fcall	i1_Mrf49SpiRx
  4711  035D  00F2               	movwf	i1Mrf49RxCmd@val
  4712                           
  4713                           ;mrf49xa_cmd.c: 23: LATCbits.LATC6 = 1;;
  4714  035E  170E               	bsf	14,6	;volatile
  4715                           
  4716                           ;mrf49xa_cmd.c: 25: return val;
  4717  035F  0008               	return
  4718  0360                     __end_ofi1_Mrf49RxCmd:	
  4719  0360                     __ptext20:	
  4720 ;; *************** function i1_Mrf49xaServe *****************
  4721 ;; Defined at:
  4722 ;;		line 74 in file "../../../src/devices/mrf49xa.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  Mrf49xaServe    1    6[COMMON] unsigned char 
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      unsigned char 
  4729 ;; Registers used:
  4730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4731 ;; Tracked objects:
  4732 ;;		On entry : 0/0
  4733 ;;		On exit  : 1F/0
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4736 ;;      Params:         0       0       0       0
  4737 ;;      Locals:         1       0       0       0
  4738 ;;      Temps:          2       0       0       0
  4739 ;;      Totals:         3       0       0       0
  4740 ;;Total ram usage:        3 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    3
  4743 ;; This function calls:
  4744 ;;		i1_Mrf49RxByte
  4745 ;;		i1_Mrf49RxSts
  4746 ;;		i1_Mrf49TxByte
  4747 ;;		i1_Mrf49xaModeRx
  4748 ;; This function is called by:
  4749 ;;		_extInt
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function i1_Mrf49xaServe
  4755  0360                     i1_Mrf49xaServe:	
  4756                           
  4757                           ;mrf49xa.c: 76: unsigned char data;
  4758                           ;mrf49xa.c: 82: Mrf49RxSts();
  4759                           
  4760                           ;incstack = 0
  4761                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4762  0360  24B4  3183         	fcall	i1_Mrf49RxSts
  4763                           
  4764                           ;mrf49xa.c: 87: }
  4765                           ;mrf49xa.c: 90: if (mrf49Status.flags.msb.overflow == 1)
  4766                           
  4767                           ;mrf49xa.c: 85: {
  4768  0362  0020               	movlb	0	; select bank0
  4769  0363  1AAC               	btfsc	_mrf49Status,5
  4770  0364  2B6F               	goto	i1l2297
  4771  0365  2B7A               	goto	i1l179
  4772  0366                     i1l2293:	
  4773                           
  4774                           ;mrf49xa.c: 95: case RECV_DATA:
  4775                           ;mrf49xa.c: 96: case RECV_TIMEOUT:
  4776                           ;mrf49xa.c: 99: data = Mrf49RxByte();
  4777  0366  2424  3183         	fcall	i1_Mrf49RxByte
  4778  0368  00F6               	movwf	i1Mrf49xaServe@data
  4779                           
  4780                           ;mrf49xa.c: 100: data = Mrf49RxByte();
  4781  0369  2424  3183         	fcall	i1_Mrf49RxByte
  4782  036B  00F6               	movwf	i1Mrf49xaServe@data
  4783                           
  4784                           ;mrf49xa.c: 103: Mrf49xaModeRx();
  4785  036C  2427  3183         	fcall	i1_Mrf49xaModeRx
  4786                           
  4787                           ;mrf49xa.c: 107: break;
  4788  036E  2B7A               	goto	i1l179
  4789  036F                     i1l2297:	
  4790  036F  0021               	movlb	1	; select bank1
  4791  0370  0820               	movf	_rfTrcvStatus^(0+128),w
  4792                           
  4793                           ; Switch size 1, requested type "speed"
  4794                           ; Number of cases is 4, Range of values is 0 to 3
  4795                           ; switch strategies available:
  4796                           ; Name         Instructions Cycles
  4797                           ; direct_byte           14     6 (fixed)
  4798                           ; simple_byte           13     7 (average)
  4799                           ; jumptable            260     6 (fixed)
  4800                           ;	Chosen strategy is direct_byte
  4801  0371  0084               	movwf	4
  4802  0372  3004               	movlw	4
  4803  0373  0204               	subwf	4,w
  4804  0374  1803               	skipnc
  4805  0375  2B7A               	goto	i1l179
  4806  0376  3185               	movlp	high i1S2481
  4807  0377  3504               	lslf	4,w
  4808  0378  3EDF               	addlw	low i1S2481
  4809  0379  0082               	movwf	2
  4810  037A                     i1l179:	
  4811                           
  4812                           ;mrf49xa.c: 115: }
  4813                           ;mrf49xa.c: 124: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4814  037A  0020               	movlb	0	; select bank0
  4815  037B  1BAC               	btfsc	_mrf49Status,7
  4816  037C  2C0E               	goto	i1l2377
  4817  037D  2C1A               	goto	i1l2379
  4818  037E                     i1l2301:	
  4819                           
  4820                           ;mrf49xa.c: 130: data = Mrf49RxByte();
  4821  037E  2424  3183         	fcall	i1_Mrf49RxByte
  4822  0380  00F6               	movwf	i1Mrf49xaServe@data
  4823                           
  4824                           ;mrf49xa.c: 134: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4825  0381  0020               	movlb	0	; select bank0
  4826  0382  1BAD               	btfsc	_mrf49Status+1,7
  4827  0383  2B87               	goto	i1l2307
  4828  0384                     i1l2305:	
  4829                           
  4830                           ;mrf49xa.c: 135: {
  4831                           ;mrf49xa.c: 136: Mrf49xaModeRx();
  4832  0384  2427  3183         	fcall	i1_Mrf49xaModeRx
  4833                           
  4834                           ;mrf49xa.c: 137: break;
  4835  0386  2C1A               	goto	i1l2379
  4836  0387                     i1l2307:	
  4837                           
  4838                           ;mrf49xa.c: 138: }
  4839                           ;mrf49xa.c: 140: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx = &(r
      +                          fTrcvStatus.rxPacket[0]);
  4840  0387  0021               	movlb	1	; select bank1
  4841  0388  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  4842  0389  1D03               	skipz
  4843  038A  2B8D               	goto	i1l2311
  4844  038B  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  4845  038C  2B91               	goto	L3
  4846  038D                     i1l2311:	
  4847                           
  4848                           ;mrf49xa.c: 141: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.hwRx 
      +                          = &(rfTrcvStatus.rxPacket[1]);
  4849  038D  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  4850  038E  1D03               	skipz
  4851  038F  2B84               	goto	i1l2305
  4852  0390  30D1               	movlw	(_rfTrcvStatus+49)& (0+255)
  4853  0391                     L3:	
  4854  0391  00E9               	movwf	(_rfTrcvStatus+73)^(0+128)
  4855                           
  4856                           ;mrf49xa.c: 148: }
  4857                           ;mrf49xa.c: 149: rfTrcvStatus.hwRx->packet.size = data;
  4858  0392  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  4859  0393  0086               	movwf	6
  4860  0394  0187               	clrf	7
  4861  0395  0876               	movf	i1Mrf49xaServe@data,w
  4862  0396  0081               	movwf	1
  4863                           
  4864                           ;mrf49xa.c: 150: rfTrcvStatus.hwRx->crc = 0;
  4865  0397  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4866  0398  3E16               	addlw	22
  4867  0399  0086               	movwf	6
  4868  039A  0181               	clrf	1
  4869                           
  4870                           ;mrf49xa.c: 151: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  4871  039B  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4872  039C  0086               	movwf	6
  4873  039D  3002               	movlw	2
  4874  039E  0081               	movwf	1
  4875                           
  4876                           ;mrf49xa.c: 153: rfTrcvStatus.state = RECV_DATA;
  4877  039F  01A0               	clrf	_rfTrcvStatus^(0+128)
  4878  03A0  0AA0               	incf	_rfTrcvStatus^(0+128),f
  4879                           
  4880                           ;mrf49xa.c: 154: rfTrcvStatus.hwByte = 1;
  4881  03A1  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  4882  03A2  2BC9               	goto	L4
  4883  03A3                     i1l2327:	
  4884                           ;mrf49xa.c: 156: break;
  4885                           
  4886                           
  4887                           ;mrf49xa.c: 160: data = Mrf49RxByte();
  4888  03A3  2424  3183         	fcall	i1_Mrf49RxByte
  4889  03A5  00F6               	movwf	i1Mrf49xaServe@data
  4890                           
  4891                           ;mrf49xa.c: 164: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4892  03A6  0020               	movlb	0	; select bank0
  4893  03A7  1FAD               	btfss	_mrf49Status+1,7
  4894  03A8  2B84               	goto	i1l2305
  4895                           
  4896                           ;mrf49xa.c: 168: }
  4897                           ;mrf49xa.c: 170: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  4898  03A9  0021               	movlb	1	; select bank1
  4899  03AA  0A69               	incf	(_rfTrcvStatus+73)^(0+128),w
  4900  03AB  0086               	movwf	6
  4901  03AC  0187               	clrf	7
  4902  03AD  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4903  03AE  0601               	xorwf	1,w
  4904  03AF  1D03               	skipz
  4905  03B0  2BC0               	goto	i1l2343
  4906                           
  4907                           ;mrf49xa.c: 171: {
  4908                           ;mrf49xa.c: 172: rfTrcvStatus.hwRx->crc = data;
  4909  03B1  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4910  03B2  3E16               	addlw	22
  4911  03B3  0086               	movwf	6
  4912  03B4  0876               	movf	i1Mrf49xaServe@data,w
  4913  03B5  0081               	movwf	1
  4914                           
  4915                           ;mrf49xa.c: 176: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4916  03B6  0869               	movf	(_rfTrcvStatus+73)^(0+128),w
  4917  03B7  0086               	movwf	6
  4918  03B8  3003               	movlw	3
  4919  03B9  0081               	movwf	1
  4920                           
  4921                           ;mrf49xa.c: 179: Mrf49xaModeRx();
  4922  03BA  2427  3183         	fcall	i1_Mrf49xaModeRx
  4923                           
  4924                           ;mrf49xa.c: 182: LATCbits.LATC2 = 1;
  4925  03BC  0022               	movlb	2	; select bank2
  4926  03BD  150E               	bsf	14,2	;volatile
  4927                           
  4928                           ;mrf49xa.c: 183: LATCbits.LATC2 = 0;
  4929  03BE  110E               	bcf	14,2	;volatile
  4930                           
  4931                           ;mrf49xa.c: 185: }
  4932  03BF  2C1A               	goto	i1l2379
  4933  03C0                     i1l2343:	
  4934                           
  4935                           ;mrf49xa.c: 186: else
  4936                           ;mrf49xa.c: 187: {
  4937                           ;mrf49xa.c: 188: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  4938  03C0  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4939  03C1  0769               	addwf	(_rfTrcvStatus+73)^(0+128),w
  4940  03C2  00F4               	movwf	??i1_Mrf49xaServe
  4941  03C3  0A74               	incf	??i1_Mrf49xaServe,w
  4942  03C4  0086               	movwf	6
  4943  03C5  0187               	clrf	7
  4944  03C6  0876               	movf	i1Mrf49xaServe@data,w
  4945  03C7  0081               	movwf	1
  4946  03C8                     i1l2345:	
  4947  03C8  0021               	movlb	1	; select bank1
  4948  03C9                     L4:	
  4949  03C9  0AEA               	incf	(_rfTrcvStatus^(0+128)+74),f
  4950  03CA  2C1A               	goto	i1l2379
  4951  03CB                     i1l2347:	
  4952                           
  4953                           ;mrf49xa.c: 197: case 1:
  4954                           ;mrf49xa.c: 198: Mrf49TxByte(0xAA);
  4955  03CB  30AA               	movlw	170
  4956  03CC  241F  3183         	fcall	i1_Mrf49TxByte
  4957                           
  4958                           ;mrf49xa.c: 199: break;
  4959  03CE  2BC8               	goto	i1l2345
  4960  03CF                     i1l2349:	
  4961                           
  4962                           ;mrf49xa.c: 202: Mrf49TxByte(0x2D);
  4963  03CF  302D               	movlw	45
  4964  03D0  241F  3183         	fcall	i1_Mrf49TxByte
  4965                           
  4966                           ;mrf49xa.c: 203: break;
  4967  03D2  2BC8               	goto	i1l2345
  4968  03D3                     i1l2351:	
  4969                           
  4970                           ;mrf49xa.c: 206: Mrf49TxByte(0xD4);
  4971  03D3  30D4               	movlw	212
  4972  03D4  241F  3183         	fcall	i1_Mrf49TxByte
  4973                           
  4974                           ;mrf49xa.c: 207: break;
  4975  03D6  2BC8               	goto	i1l2345
  4976  03D7                     i1l2353:	
  4977                           
  4978                           ;mrf49xa.c: 211: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte-4]);
  4979  03D7  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4980  03D8  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  4981  03D9  0086               	movwf	6
  4982  03DA  0187               	clrf	7
  4983  03DB  0801               	movf	1,w
  4984  03DC  241F  3183         	fcall	i1_Mrf49TxByte
  4985                           
  4986                           ;mrf49xa.c: 212: rfTrcvStatus.txPacket.crc = rfTrcvStatus.txPacket.crc ^ rfTrcvStatus.tx
      +                          Packet.raw[rfTrcvStatus.hwByte-4];
  4987  03DE  0021               	movlb	1	; select bank1
  4988  03DF  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4989  03E0  3E9E               	addlw	(_rfTrcvStatus+254)& (0+255)
  4990  03E1  0086               	movwf	6
  4991  03E2  0187               	clrf	7
  4992  03E3  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  4993  03E4  0601               	xorwf	1,w
  4994  03E5  00B7               	movwf	(_rfTrcvStatus^(0+128)+23)
  4995                           
  4996                           ;mrf49xa.c: 213: if (rfTrcvStatus.hwByte-4 == rfTrcvStatus.txPacket.packet.size)
  4997  03E6  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4998  03E7  3EFC               	addlw	252
  4999  03E8  00F4               	movwf	??i1_Mrf49xaServe
  5000  03E9  30FF               	movlw	255
  5001  03EA  1803               	skipnc
  5002  03EB  3000               	movlw	0
  5003  03EC  00F5               	movwf	??i1_Mrf49xaServe+1
  5004  03ED  0822               	movf	(_rfTrcvStatus^(0+128)+2),w
  5005  03EE  0674               	xorwf	??i1_Mrf49xaServe,w
  5006  03EF  0475               	iorwf	??i1_Mrf49xaServe+1,w
  5007  03F0  1D03               	skipz
  5008  03F1  2BC8               	goto	i1l2345
  5009                           
  5010                           ;mrf49xa.c: 214: {
  5011                           ;mrf49xa.c: 215: rfTrcvStatus.hwByte = 48;
  5012  03F2  3030               	movlw	48
  5013  03F3  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  5014  03F4  2BC8               	goto	i1l2345
  5015  03F5                     i1l2361:	
  5016                           
  5017                           ;mrf49xa.c: 220: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  5018  03F5  0837               	movf	(_rfTrcvStatus^(0+128)+23),w
  5019  03F6  241F  3183         	fcall	i1_Mrf49TxByte
  5020                           
  5021                           ;mrf49xa.c: 221: break;
  5022  03F8  2BC8               	goto	i1l2345
  5023  03F9                     i1l2363:	
  5024                           
  5025                           ;mrf49xa.c: 224: Mrf49TxByte(0x00);
  5026  03F9  3000               	movlw	0
  5027  03FA  241F  3183         	fcall	i1_Mrf49TxByte
  5028                           
  5029                           ;mrf49xa.c: 225: break;
  5030  03FC  2BC8               	goto	i1l2345
  5031  03FD                     i1l2365:	
  5032                           
  5033                           ;mrf49xa.c: 228: Mrf49TxByte(0x00);
  5034  03FD  3000               	movlw	0
  5035  03FE  241F  3183         	fcall	i1_Mrf49TxByte
  5036                           
  5037                           ;mrf49xa.c: 229: Mrf49xaModeRx();
  5038  0400  2427  3183         	fcall	i1_Mrf49xaModeRx
  5039                           
  5040                           ;mrf49xa.c: 230: rfTrcvStatus.txPacket.state = PKT_FREE;
  5041  0402  01A1               	clrf	(_rfTrcvStatus^(0+128)+1)
  5042                           
  5043                           ;mrf49xa.c: 231: break;
  5044  0403  2BC8               	goto	i1l2345
  5045  0404                     i1l2371:	
  5046  0404  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  5047                           
  5048                           ; Switch size 1, requested type "speed"
  5049                           ; Number of cases is 7, Range of values is 0 to 51
  5050                           ; switch strategies available:
  5051                           ; Name         Instructions Cycles
  5052                           ; direct_byte          110     6 (fixed)
  5053                           ; simple_byte           22    12 (average)
  5054                           ; jumptable            260     6 (fixed)
  5055                           ;	Chosen strategy is direct_byte
  5056  0405  0084               	movwf	4
  5057  0406  3034               	movlw	52
  5058  0407  0204               	subwf	4,w
  5059  0408  1803               	skipnc
  5060  0409  2BD7               	goto	i1l2353
  5061  040A  3185               	movlp	high i1S2483
  5062  040B  3504               	lslf	4,w
  5063  040C  3E6F               	addlw	low i1S2483
  5064  040D  0082               	movwf	2
  5065  040E                     i1l2377:	
  5066  040E  0021               	movlb	1	; select bank1
  5067  040F  0820               	movf	_rfTrcvStatus^(0+128),w
  5068                           
  5069                           ; Switch size 1, requested type "speed"
  5070                           ; Number of cases is 3, Range of values is 0 to 3
  5071                           ; switch strategies available:
  5072                           ; Name         Instructions Cycles
  5073                           ; simple_byte           10     6 (average)
  5074                           ; direct_byte           14     6 (fixed)
  5075                           ; jumptable            260     6 (fixed)
  5076                           ;	Chosen strategy is simple_byte
  5077  0410  3A00               	xorlw	0	; case 0
  5078  0411  1903               	skipnz
  5079  0412  2B7E               	goto	i1l2301
  5080  0413  3A01               	xorlw	1	; case 1
  5081  0414  1903               	skipnz
  5082  0415  2BA3               	goto	i1l2327
  5083  0416  3A02               	xorlw	2	; case 3
  5084  0417  1903               	skipnz
  5085  0418  2C04               	goto	i1l2371
  5086  0419  2C1A               	goto	i1l2379
  5087  041A                     i1l2379:	
  5088                           
  5089                           ;mrf49xa.c: 238: }
  5090                           ;mrf49xa.c: 252: return PORTAbits.RA2 == 1 ? 1 : 0;
  5091  041A  0020               	movlb	0	; select bank0
  5092  041B  0C0C               	rrf	12,w	;volatile
  5093  041C  0C89               	rrf	9,f
  5094  041D  3901               	andlw	1
  5095  041E  0008               	return
  5096  041F                     __end_ofi1_Mrf49xaServe:	
  5097  041F                     __ptext22:	
  5098 ;; *************** function i1_Mrf49TxByte *****************
  5099 ;; Defined at:
  5100 ;;		line 46 in file "../../../src/devices/mrf49xa_cmd.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  byte            1    wreg     unsigned char 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  byte            1    3[COMMON] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;		None               void
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, status,0, pclath, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 1E/1
  5111 ;;		On exit  : 1F/2
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5114 ;;      Params:         0       0       0       0
  5115 ;;      Locals:         1       0       0       0
  5116 ;;      Temps:          0       0       0       0
  5117 ;;      Totals:         1       0       0       0
  5118 ;;Total ram usage:        1 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    2
  5121 ;; This function calls:
  5122 ;;		i1_Mrf49TxCmd
  5123 ;; This function is called by:
  5124 ;;		i1_Mrf49xaServe
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function i1_Mrf49TxByte
  5130  041F                     i1_Mrf49TxByte:	
  5131                           
  5132                           ;incstack = 0
  5133                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  5134                           ;i1Mrf49TxByte@byte stored from wreg
  5135  041F  00F3               	movwf	i1Mrf49TxByte@byte
  5136                           
  5137                           ;mrf49xa_cmd.c: 48: Mrf49TxCmd(0xB8, byte);
  5138  0420  00F1               	movwf	i1Mrf49TxCmd@val
  5139  0421  30B8               	movlw	184
  5140  0422  244F               	fcall	i1_Mrf49TxCmd
  5141  0423  0008               	return
  5142  0424                     __end_ofi1_Mrf49TxByte:	
  5143  0424                     __ptext25:	
  5144 ;; *************** function i1_Mrf49RxByte *****************
  5145 ;; Defined at:
  5146 ;;		line 41 in file "../../../src/devices/mrf49xa_cmd.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;                  1    wreg      unsigned char 
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0, pclath, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 1C/1
  5157 ;;		On exit  : 1F/2
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5160 ;;      Params:         0       0       0       0
  5161 ;;      Locals:         0       0       0       0
  5162 ;;      Temps:          0       0       0       0
  5163 ;;      Totals:         0       0       0       0
  5164 ;;Total ram usage:        0 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    2
  5167 ;; This function calls:
  5168 ;;		i1_Mrf49RxCmd
  5169 ;; This function is called by:
  5170 ;;		i1_Mrf49xaServe
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           
  5175                           ;psect for function i1_Mrf49RxByte
  5176  0424                     i1_Mrf49RxByte:	
  5177                           
  5178                           ;mrf49xa_cmd.c: 43: return Mrf49RxCmd(0xB0);
  5179                           
  5180                           ;incstack = 0
  5181                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  5182  0424  30B0               	movlw	176
  5183  0425  2356               	fcall	i1_Mrf49RxCmd
  5184  0426  0008               	return
  5185  0427                     __end_ofi1_Mrf49RxByte:	
  5186  0427                     __ptext21:	
  5187 ;; *************** function i1_Mrf49xaModeRx *****************
  5188 ;; Defined at:
  5189 ;;		line 255 in file "../../../src/devices/mrf49xa.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;		None               void
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0, pclath, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 1C/2
  5200 ;;		On exit  : 1F/1
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5203 ;;      Params:         0       0       0       0
  5204 ;;      Locals:         1       0       0       0
  5205 ;;      Temps:          0       0       0       0
  5206 ;;      Totals:         1       0       0       0
  5207 ;;Total ram usage:        1 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    2
  5210 ;; This function calls:
  5211 ;;		i1_Mrf49TxCmd
  5212 ;; This function is called by:
  5213 ;;		i1_Mrf49xaServe
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           
  5218                           ;psect for function i1_Mrf49xaModeRx
  5219  0427                     i1_Mrf49xaModeRx:	
  5220  0427  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5221                           
  5222                           ;mrf49xa.c: 257: UI08_t k;
  5223                           ;mrf49xa.c: 258: for (k = 0; k < mrfRegset_RxCnt; k++) { if (mrfRegset_Rx[k].reg != 0x55
      +                          ) Mrf49TxCmd(mrfRegset_Rx[k].reg, mrfRegset_Rx[k].val); };
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  5227  0428  01F3               	clrf	i1Mrf49xaModeRx@k
  5228  0429  3186               	movlp	high __stringtab
  5229  042A  000A               	callw
  5230  042B  3183               	pagesel	$	;select current page
  5231  042C  3800               	iorlw	0
  5232  042D  1903               	btfsc	3,2
  5233  042E  2C4B               	goto	i1l2279
  5234  042F                     i1l2271:	
  5235  042F  3573               	lslf	i1Mrf49xaModeRx@k,w
  5236  0430  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5237  0431  3186               	movlp	high __stringtab
  5238  0432  000A               	callw
  5239  0433  3183               	pagesel	$	;select current page
  5240  0434  3A55               	xorlw	85
  5241  0435  1903               	skipnz
  5242  0436  2C43               	goto	i1l2275
  5243  0437  3573               	lslf	i1Mrf49xaModeRx@k,w
  5244  0438  3E25               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  5245  0439  3186               	movlp	high __stringtab
  5246  043A  000A               	callw
  5247  043B  00F1               	movwf	i1Mrf49TxCmd@val
  5248  043C  3573               	lslf	i1Mrf49xaModeRx@k,w
  5249  043D  3E24               	addlw	low (_mrfRegset_Rx| (0+32768))
  5250  043E  3186               	movlp	high __stringtab
  5251  043F  000A               	callw
  5252  0440  3183               	pagesel	$	;select current page
  5253  0441  3184  244F         	fcall	i1_Mrf49TxCmd
  5254  0443                     i1l2275:	
  5255  0443  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  5256  0444  0AF3               	incf	i1Mrf49xaModeRx@k,f
  5257  0445  3186               	movlp	high __stringtab
  5258  0446  000A               	callw
  5259  0447  3183               	pagesel	$	;select current page
  5260  0448  0273               	subwf	i1Mrf49xaModeRx@k,w
  5261  0449  1C03               	skipc
  5262  044A  2C2F               	goto	i1l2271
  5263  044B                     i1l2279:	
  5264                           
  5265                           ;mrf49xa.c: 260: rfTrcvStatus.state = RECV_IDLE;
  5266  044B  0021               	movlb	1	; select bank1
  5267  044C  01A0               	clrf	_rfTrcvStatus^(0+128)
  5268                           
  5269                           ;mrf49xa.c: 261: rfTrcvStatus.hwByte = 0;
  5270  044D  01EA               	clrf	(_rfTrcvStatus^(0+128)+74)
  5271  044E  0008               	return
  5272  044F                     __end_ofi1_Mrf49xaModeRx:	
  5273  044F                     __ptext23:	
  5274 ;; *************** function i1_Mrf49TxCmd *****************
  5275 ;; Defined at:
  5276 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  cmd             1    wreg     unsigned char 
  5279 ;;  val             1    1[COMMON] unsigned char 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  cmd             1    2[COMMON] unsigned char 
  5282 ;; Return value:  Size  Location     Type
  5283 ;;		None               void
  5284 ;; Registers used:
  5285 ;;		wreg, status,2, status,0, pclath, cstack
  5286 ;; Tracked objects:
  5287 ;;		On entry : 1C/2
  5288 ;;		On exit  : 1F/2
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5291 ;;      Params:         1       0       0       0
  5292 ;;      Locals:         1       0       0       0
  5293 ;;      Temps:          0       0       0       0
  5294 ;;      Totals:         2       0       0       0
  5295 ;;Total ram usage:        2 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; Hardware stack levels required when called:    1
  5298 ;; This function calls:
  5299 ;;		i1_Mrf49SpiTx
  5300 ;; This function is called by:
  5301 ;;		i1_Mrf49xaModeRx
  5302 ;;		i1_Mrf49TxByte
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           
  5307                           ;psect for function i1_Mrf49TxCmd
  5308  044F                     i1_Mrf49TxCmd:	
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  5312                           ;i1Mrf49TxCmd@cmd stored from wreg
  5313  044F  00F2               	movwf	i1Mrf49TxCmd@cmd
  5314                           
  5315                           ;mrf49xa_cmd.c: 8: LATCbits.LATC6 = 0;;
  5316  0450  0022               	movlb	2	; select bank2
  5317  0451  130E               	bcf	14,6	;volatile
  5318                           
  5319                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  5320  0452  0872               	movf	i1Mrf49TxCmd@cmd,w
  5321  0453  2459  3183         	fcall	i1_Mrf49SpiTx
  5322                           
  5323                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  5324  0455  0871               	movf	i1Mrf49TxCmd@val,w
  5325  0456  2459               	fcall	i1_Mrf49SpiTx
  5326                           
  5327                           ;mrf49xa_cmd.c: 13: LATCbits.LATC6 = 1;;
  5328  0457  170E               	bsf	14,6	;volatile
  5329  0458  0008               	return
  5330  0459                     __end_ofi1_Mrf49TxCmd:	
  5331  0459                     __ptext27:	
  5332 ;; *************** function i1_Mrf49SpiTx *****************
  5333 ;; Defined at:
  5334 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  byte            1    wreg     unsigned char 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  byte            1    0[COMMON] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;		None               void
  5341 ;; Registers used:
  5342 ;;		wreg
  5343 ;; Tracked objects:
  5344 ;;		On entry : 1F/2
  5345 ;;		On exit  : 1F/2
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5348 ;;      Params:         0       0       0       0
  5349 ;;      Locals:         1       0       0       0
  5350 ;;      Temps:          0       0       0       0
  5351 ;;      Totals:         1       0       0       0
  5352 ;;Total ram usage:        1 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		i1_Mrf49TxCmd
  5358 ;;		i1_Mrf49RxCmd
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function i1_Mrf49SpiTx
  5364  0459                     i1_Mrf49SpiTx:	
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  5368                           ;i1Mrf49SpiTx@byte stored from wreg
  5369  0459  00F0               	movwf	i1Mrf49SpiTx@byte
  5370                           
  5371                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) LATBbits.LATB7 = 1; else LATBbi
      +                          ts.LATB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  5372  045A  1BF0               	btfsc	i1Mrf49SpiTx@byte,7
  5373  045B  2C5E               	goto	i1l2183
  5374  045C  0020               	movlb	0	; select bank0
  5375  045D  2C60               	goto	i1l247
  5376  045E                     i1l2183:	
  5377  045E  178D               	bsf	13,7	;volatile
  5378  045F  2C61               	goto	i1l248
  5379  0460                     i1l247:	
  5380  0460  138D               	bcf	13,7	;volatile
  5381  0461                     i1l248:	
  5382  0461  178E               	bsf	14,7	;volatile
  5383  0462  0000               	nop	;# 
  5384  0463  0022               	movlb	2	; select bank2
  5385  0464  138E               	bcf	14,7	;volatile
  5386  0465  1B70               	btfsc	i1Mrf49SpiTx@byte,6
  5387  0466  2C69               	goto	i1l2187
  5388  0467  0020               	movlb	0	; select bank0
  5389  0468  2C6B               	goto	i1l251
  5390  0469                     i1l2187:	
  5391  0469  178D               	bsf	13,7	;volatile
  5392  046A  2C6C               	goto	i1l252
  5393  046B                     i1l251:	
  5394  046B  138D               	bcf	13,7	;volatile
  5395  046C                     i1l252:	
  5396  046C  178E               	bsf	14,7	;volatile
  5397  046D  0000               	nop	;# 
  5398  046E  0022               	movlb	2	; select bank2
  5399  046F  138E               	bcf	14,7	;volatile
  5400  0470  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
  5401  0471  2C74               	goto	i1l2191
  5402  0472  0020               	movlb	0	; select bank0
  5403  0473  2C76               	goto	i1l255
  5404  0474                     i1l2191:	
  5405  0474  178D               	bsf	13,7	;volatile
  5406  0475  2C77               	goto	i1l256
  5407  0476                     i1l255:	
  5408  0476  138D               	bcf	13,7	;volatile
  5409  0477                     i1l256:	
  5410  0477  178E               	bsf	14,7	;volatile
  5411  0478  0000               	nop	;# 
  5412  0479  0022               	movlb	2	; select bank2
  5413  047A  138E               	bcf	14,7	;volatile
  5414  047B  1A70               	btfsc	i1Mrf49SpiTx@byte,4
  5415  047C  2C7F               	goto	i1l2195
  5416  047D  0020               	movlb	0	; select bank0
  5417  047E  2C81               	goto	i1l259
  5418  047F                     i1l2195:	
  5419  047F  178D               	bsf	13,7	;volatile
  5420  0480  2C82               	goto	i1l260
  5421  0481                     i1l259:	
  5422  0481  138D               	bcf	13,7	;volatile
  5423  0482                     i1l260:	
  5424  0482  178E               	bsf	14,7	;volatile
  5425  0483  0000               	nop	;# 
  5426  0484  0022               	movlb	2	; select bank2
  5427  0485  138E               	bcf	14,7	;volatile
  5428  0486  19F0               	btfsc	i1Mrf49SpiTx@byte,3
  5429  0487  2C8A               	goto	i1l2199
  5430  0488  0020               	movlb	0	; select bank0
  5431  0489  2C8C               	goto	i1l263
  5432  048A                     i1l2199:	
  5433  048A  178D               	bsf	13,7	;volatile
  5434  048B  2C8D               	goto	i1l264
  5435  048C                     i1l263:	
  5436  048C  138D               	bcf	13,7	;volatile
  5437  048D                     i1l264:	
  5438  048D  178E               	bsf	14,7	;volatile
  5439  048E  0000               	nop	;# 
  5440  048F  0022               	movlb	2	; select bank2
  5441  0490  138E               	bcf	14,7	;volatile
  5442  0491  1970               	btfsc	i1Mrf49SpiTx@byte,2
  5443  0492  2C95               	goto	i1l2203
  5444  0493  0020               	movlb	0	; select bank0
  5445  0494  2C97               	goto	i1l267
  5446  0495                     i1l2203:	
  5447  0495  178D               	bsf	13,7	;volatile
  5448  0496  2C98               	goto	i1l268
  5449  0497                     i1l267:	
  5450  0497  138D               	bcf	13,7	;volatile
  5451  0498                     i1l268:	
  5452  0498  178E               	bsf	14,7	;volatile
  5453  0499  0000               	nop	;# 
  5454  049A  0022               	movlb	2	; select bank2
  5455  049B  138E               	bcf	14,7	;volatile
  5456  049C  18F0               	btfsc	i1Mrf49SpiTx@byte,1
  5457  049D  2CA0               	goto	i1l2207
  5458  049E  0020               	movlb	0	; select bank0
  5459  049F  2CA2               	goto	i1l271
  5460  04A0                     i1l2207:	
  5461  04A0  178D               	bsf	13,7	;volatile
  5462  04A1  2CA3               	goto	i1l272
  5463  04A2                     i1l271:	
  5464  04A2  138D               	bcf	13,7	;volatile
  5465  04A3                     i1l272:	
  5466  04A3  178E               	bsf	14,7	;volatile
  5467  04A4  0000               	nop	;# 
  5468  04A5  0022               	movlb	2	; select bank2
  5469  04A6  138E               	bcf	14,7	;volatile
  5470  04A7  1870               	btfsc	i1Mrf49SpiTx@byte,0
  5471  04A8  2CAB               	goto	i1l2211
  5472  04A9  0020               	movlb	0	; select bank0
  5473  04AA  2CAD               	goto	i1l275
  5474  04AB                     i1l2211:	
  5475  04AB  178D               	bsf	13,7	;volatile
  5476  04AC  2CAE               	goto	i1l276
  5477  04AD                     i1l275:	
  5478  04AD  138D               	bcf	13,7	;volatile
  5479  04AE                     i1l276:	
  5480  04AE  178E               	bsf	14,7	;volatile
  5481  04AF  0000               	nop	;# 
  5482  04B0  0022               	movlb	2	; select bank2
  5483  04B1  138E               	bcf	14,7	;volatile
  5484                           
  5485                           ;mrf49xa_spi_pic16.c: 18: LATBbits.LATB7 = 0;
  5486  04B2  138D               	bcf	13,7	;volatile
  5487  04B3  0008               	return
  5488  04B4                     __end_ofi1_Mrf49SpiTx:	
  5489  04B4                     __ptext24:	
  5490 ;; *************** function i1_Mrf49RxSts *****************
  5491 ;; Defined at:
  5492 ;;		line 29 in file "../../../src/devices/mrf49xa_cmd.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;		None
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, pclath, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 1F/2
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5506 ;;      Params:         0       0       0       0
  5507 ;;      Locals:         0       0       0       0
  5508 ;;      Temps:          0       0       0       0
  5509 ;;      Totals:         0       0       0       0
  5510 ;;Total ram usage:        0 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    1
  5513 ;; This function calls:
  5514 ;;		i1_Mrf49SpiRx
  5515 ;; This function is called by:
  5516 ;;		i1_Mrf49xaServe
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function i1_Mrf49RxSts
  5522  04B4                     i1_Mrf49RxSts:	
  5523                           
  5524                           ;mrf49xa_cmd.c: 31: INTCONbits.INTE = 0;;
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  5528  04B4  120B               	bcf	11,4	;volatile
  5529                           
  5530                           ;mrf49xa_cmd.c: 32: LATCbits.LATC6 = 0;;
  5531  04B5  0022               	movlb	2	; select bank2
  5532  04B6  130E               	bcf	14,6	;volatile
  5533                           
  5534                           ;mrf49xa_cmd.c: 34: mrf49Status.byte[0] = Mrf49SpiRx();
  5535  04B7  24C2  3183         	fcall	i1_Mrf49SpiRx
  5536  04B9  0020               	movlb	0	; select bank0
  5537  04BA  00AC               	movwf	_mrf49Status
  5538                           
  5539                           ;mrf49xa_cmd.c: 35: mrf49Status.byte[1] = Mrf49SpiRx();
  5540  04BB  24C2               	fcall	i1_Mrf49SpiRx
  5541  04BC  0020               	movlb	0	; select bank0
  5542  04BD  00AD               	movwf	_mrf49Status+1
  5543                           
  5544                           ;mrf49xa_cmd.c: 37: LATCbits.LATC6 = 1;;
  5545  04BE  0022               	movlb	2	; select bank2
  5546  04BF  170E               	bsf	14,6	;volatile
  5547                           
  5548                           ;mrf49xa_cmd.c: 38: INTCONbits.INTE = 1;;
  5549  04C0  160B               	bsf	11,4	;volatile
  5550  04C1  0008               	return
  5551  04C2                     __end_ofi1_Mrf49RxSts:	
  5552  04C2                     __ptext28:	
  5553 ;; *************** function i1_Mrf49SpiRx *****************
  5554 ;; Defined at:
  5555 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;		None
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  1    wreg      unsigned char 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2
  5564 ;; Tracked objects:
  5565 ;;		On entry : 1D/2
  5566 ;;		On exit  : 1F/2
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5569 ;;      Params:         0       0       0       0
  5570 ;;      Locals:         1       0       0       0
  5571 ;;      Temps:          0       0       0       0
  5572 ;;      Totals:         1       0       0       0
  5573 ;;Total ram usage:        1 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		i1_Mrf49RxCmd
  5579 ;;		i1_Mrf49RxSts
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           
  5584                           ;psect for function i1_Mrf49SpiRx
  5585  04C2                     i1_Mrf49SpiRx:	
  5586                           
  5587                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  5588                           
  5589                           ;incstack = 0
  5590                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  5591  04C2  01F0               	clrf	i1Mrf49SpiRx@data
  5592                           
  5593                           ;mrf49xa_spi_pic16.c: 24: LATBbits.LATB7 = 0;
  5594  04C3  0022               	movlb	2	; select bank2
  5595  04C4  138D               	bcf	13,7	;volatile
  5596  04C5  0020               	movlb	0	; select bank0
  5597  04C6  1A8E               	btfsc	14,5	;volatile
  5598  04C7  17F0               	bsf	i1Mrf49SpiRx@data,7
  5599  04C8  0022               	movlb	2	; select bank2
  5600  04C9  178E               	bsf	14,7	;volatile
  5601  04CA  0000               	nop	;# 
  5602  04CB  0022               	movlb	2	; select bank2
  5603  04CC  138E               	bcf	14,7	;volatile
  5604                           
  5605                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5606  04CD  0020               	movlb	0	; select bank0
  5607  04CE  1A8E               	btfsc	14,5	;volatile
  5608  04CF  1770               	bsf	i1Mrf49SpiRx@data,6
  5609  04D0  0022               	movlb	2	; select bank2
  5610  04D1  178E               	bsf	14,7	;volatile
  5611  04D2  0000               	nop	;# 
  5612  04D3  0022               	movlb	2	; select bank2
  5613  04D4  138E               	bcf	14,7	;volatile
  5614                           
  5615                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5616  04D5  0020               	movlb	0	; select bank0
  5617  04D6  1A8E               	btfsc	14,5	;volatile
  5618  04D7  16F0               	bsf	i1Mrf49SpiRx@data,5
  5619  04D8  0022               	movlb	2	; select bank2
  5620  04D9  178E               	bsf	14,7	;volatile
  5621  04DA  0000               	nop	;# 
  5622  04DB  0022               	movlb	2	; select bank2
  5623  04DC  138E               	bcf	14,7	;volatile
  5624                           
  5625                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5626  04DD  0020               	movlb	0	; select bank0
  5627  04DE  1A8E               	btfsc	14,5	;volatile
  5628  04DF  1670               	bsf	i1Mrf49SpiRx@data,4
  5629  04E0  0022               	movlb	2	; select bank2
  5630  04E1  178E               	bsf	14,7	;volatile
  5631  04E2  0000               	nop	;# 
  5632  04E3  0022               	movlb	2	; select bank2
  5633  04E4  138E               	bcf	14,7	;volatile
  5634                           
  5635                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5636  04E5  0020               	movlb	0	; select bank0
  5637  04E6  1A8E               	btfsc	14,5	;volatile
  5638  04E7  15F0               	bsf	i1Mrf49SpiRx@data,3
  5639  04E8  0022               	movlb	2	; select bank2
  5640  04E9  178E               	bsf	14,7	;volatile
  5641  04EA  0000               	nop	;# 
  5642  04EB  0022               	movlb	2	; select bank2
  5643  04EC  138E               	bcf	14,7	;volatile
  5644                           
  5645                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5646  04ED  0020               	movlb	0	; select bank0
  5647  04EE  1A8E               	btfsc	14,5	;volatile
  5648  04EF  1570               	bsf	i1Mrf49SpiRx@data,2
  5649  04F0  0022               	movlb	2	; select bank2
  5650  04F1  178E               	bsf	14,7	;volatile
  5651  04F2  0000               	nop	;# 
  5652  04F3  0022               	movlb	2	; select bank2
  5653  04F4  138E               	bcf	14,7	;volatile
  5654                           
  5655                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5656  04F5  0020               	movlb	0	; select bank0
  5657  04F6  1A8E               	btfsc	14,5	;volatile
  5658  04F7  14F0               	bsf	i1Mrf49SpiRx@data,1
  5659  04F8  0022               	movlb	2	; select bank2
  5660  04F9  178E               	bsf	14,7	;volatile
  5661  04FA  0000               	nop	;# 
  5662  04FB  0022               	movlb	2	; select bank2
  5663  04FC  138E               	bcf	14,7	;volatile
  5664                           
  5665                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  5666  04FD  0020               	movlb	0	; select bank0
  5667  04FE  1A8E               	btfsc	14,5	;volatile
  5668  04FF  1470               	bsf	i1Mrf49SpiRx@data,0
  5669  0500  0022               	movlb	2	; select bank2
  5670  0501  178E               	bsf	14,7	;volatile
  5671  0502  0000               	nop	;# 
  5672  0503  0022               	movlb	2	; select bank2
  5673  0504  138E               	bcf	14,7	;volatile
  5674                           
  5675                           ;mrf49xa_spi_pic16.c: 40: return data;
  5676  0505  0870               	movf	i1Mrf49SpiRx@data,w
  5677  0506  0008               	return
  5678  0507                     __end_ofi1_Mrf49SpiRx:	
  5679  007E                     btemp	set	126	;btemp
  5680  007E                     wtemp	set	126
  5681  007E                     wtemp0	set	126
  5682  0080                     wtemp1	set	128
  5683  0082                     wtemp2	set	130
  5684  0084                     wtemp3	set	132
  5685  0086                     wtemp4	set	134
  5686  0088                     wtemp5	set	136
  5687  007F                     wtemp6	set	127
  5688  007E                     ttemp	set	126
  5689  007E                     ttemp0	set	126
  5690  0081                     ttemp1	set	129
  5691  0084                     ttemp2	set	132
  5692  0087                     ttemp3	set	135
  5693  007F                     ttemp4	set	127
  5694  007E                     ltemp	set	126
  5695  007E                     ltemp0	set	126
  5696  0082                     ltemp1	set	130
  5697  0086                     ltemp2	set	134
  5698  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     12      14
    BANK1            80      0      76
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    S323rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus(BANK1[76]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 77
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[76]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaInit
    _Mrf49xaTick->_Mrf49xaTxPacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5068
                                             10 BANK0      2     2      0
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0    1847
                                              5 BANK0      4     4      0
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      5     4      1     347
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     688
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          3     3      0    3107
                                              7 BANK0      3     3      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         3     3      0    1639
                                              4 BANK0      3     3      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     688
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49TxByte                                          1     1      0     598
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     576
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               1     1      0    3399
                                              7 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (7) i1_Mrf49xaServe                                       3     3      0    3399
                                              4 COMMON     3     3      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaModeRx                                      1     1      0    1277
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49TxByte                                        1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxCmd                                         2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxSts                                         0     0      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49RxByte                                        0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxCmd                                         2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49SpiRx                                         1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49TxCmd
       _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _Mrf49xaTick
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49TxByte
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Mrf49xaTxPacket
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      62       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C       E       6       17.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      62      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Fri Apr 18 10:00:10 2014

                            pc 0002          Mrf49xaTxPacket@packet 0024                            l231 00BC  
                          l251 01FB                            l260 0215                            l252 01FD  
                          l271 0237                            l263 021F                            l255 0207  
                          l247 01EF                            l272 0239                            l264 0221  
                          l256 0209                            l248 01F1                            l417 0049  
                          l275 0243                            l267 022B                            l259 0213  
                          l179 0100                            l419 005A                            l276 0245  
                          l268 022D                            l374 009F                            l377 008B  
                          wreg 0009               i1Mrf49xaModeRx@k 0073                           S2477 05D7  
                         S2479 0507                           l2113 008A                           l2051 030D  
                         l2107 0088      Mrf49xaTxPacket@swapSrcDst 0020                           l2073 02ED  
                         l2065 0318                           l2161 0041                           l2091 0072  
                         l2093 0077                           l2165 0047                           l2099 007F  
                         l1821 0158                           l1823 015C                           l1815 0148  
                         l1833 0182                           l1825 0160                           l1817 0151  
                         l1913 02D7                           l1905 02BA                           l1843 0191  
                         l1835 0186                           l1819 0154                           l1851 01A7  
                         l1931 00BB                           l1923 00B2                           l1837 018A  
                         l1773 0104                           l1765 00EC                           l1909 02CE  
                         l1783 0112                           l1951 00DE                           l1881 01BC  
                         l1777 0109                           l1849 019B                           l1769 00F5  
                         l1945 00C9                           l1779 010C                           l1955 00E0  
                         l1947 00D5                           l1885 01D0                Mrf49TxByte@byte 0023  
                         l1799 012A                           l1889 01D9                           u1525 0328  
                         _main 0031                __end_of_AdcInit 02AD                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 0014                           ttemp 007E  
                         wtemp 007E        __end_ofi1_Mrf49xaModeRx 044F            __end_of_Mrf49RxByte 01B3  
          __end_of_Mrf49TxByte 01B1            __end_of_Mrf49xaInit 00E6            __end_of_Mrf49xaTick 00A9  
         _Mrf49xaPacketPending 02DC                          ?_main 0070                          i1l131 0011  
                        i1l251 046B                          i1l260 0482                          i1l252 046C  
                        i1l271 04A2                          i1l263 048C                          i1l255 0476  
                        i1l247 0460                          i1l272 04A3                          i1l264 048D  
                        i1l256 0477                          i1l248 0461                          i1l275 04AD  
                        i1l267 0497                          i1l259 0481                          i1l179 037A  
                        i1l276 04AE                          i1l268 0498                     _Mrf49RxCmd 0022  
                   _Mrf49TxCmd 01DD                     _Mrf49SpiRx 0257                     _Mrf49SpiTx 01E9  
                   _Mrf49RxSts 024B                          main@i 002B                          main@j 002A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __initialization 0016                     _ExtIntInit 02AD  
                 __end_of_main 005D          ?_Mrf49xaPacketPending 0070                         ??_main 002A  
         __end_of_Mrf49xaServe 01AC                         _ADCON0 009D                         _ADCON1 009E  
                       _ADCON2 009F                      ??_AdcInit 0020                         i1S2481 05DF  
                       i1S2483 056F                         _ANSELA 018C                         _ANSELB 018D  
                       _ANSELC 018E             i1Mrf49xaServe@data 0076                         i1l2211 04AB  
                       i1l2203 0495                         i1l2301 037E                         i1l2207 04A0  
                       i1l2311 038D                         i1l2305 0384                         i1l2307 0387  
                       i1l2191 0474                         i1l2183 045E                         i1l2271 042F  
                       i1l2351 03D3                         i1l2343 03C0                         i1l2327 03A3  
                       i1l2361 03F5                         i1l2353 03D7                         i1l2345 03C8  
                       i1l2195 047F                         i1l2187 0469                         i1l2275 0443  
                       i1l2371 0404                         i1l2363 03F9                         i1l2347 03CB  
                       i1l2365 03FD                         i1l2349 03CF                         i1l2293 0366  
                       i1l2199 048A                         i1l2279 044B                         i1l2377 040E  
                       i1l2297 036F                         i1l2379 041A                         _FVRCON 0117  
                       _OSCCON 0099                    _Mrf49RxByte 01B1                    _Mrf49TxByte 01AC  
             ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 00A9                    _Mrf49xaTick 005D  
              _Mrf49xaRxPacket 02E6                _Mrf49xaTxPacket 02F4                         _extInt 0004  
                  ?_Mrf49RxCmd 0070                    ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070  
                  ?_Mrf49SpiTx 0070                    ?_Mrf49RxSts 0070        __end_of__initialization 0020  
        __end_ofi1_Mrf49RxByte 0427          __end_ofi1_Mrf49TxByte 0424                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070         ??_Mrf49xaPacketPending 0020        __size_ofi1_Mrf49xaServe 00BF  
               _OPTION_REGbits 0095                  ??_SysInitGpio 0020                     __pbssBANK0 002C  
                   __pbssBANK1 00A0        __end_of_Mrf49xaRxPacket 02F4        __end_of_Mrf49xaTxPacket 0339  
        __end_of_Mrf49xaModeRx 01DD          __end_of_Mrf49xaModeTx 02DC            __size_of_Mrf49RxCmd 000F  
          __size_of_Mrf49TxCmd 000C            __size_of_Mrf49SpiRx 0047            __size_of_Mrf49SpiTx 0062  
          __size_of_Mrf49RxSts 000C                     __pmaintext 0031                     __pintentry 0004  
                      ?_extInt 0070          __size_of_Mrf49xaServe 00C6                        _AdcInit 029E  
          __size_of_ExtIntInit 0005                     __stringtab 0600                  ?i1_Mrf49RxCmd 0070  
                ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070  
                ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 0356                   _Mrf49xaServe 00E6  
              __size_of_extInt 0010              _mrfRegset_InitCnt 0601                        __ptext1 0339  
                      __ptext2 005D                        __ptext3 02F4                        __ptext4 02E6  
                      __ptext5 02DC                        __ptext6 02B2                        __ptext7 00A9  
                      __ptext8 00E6                        __ptext9 01B3                        clrloop0 0639  
         end_of_initialization 0020                   ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070  
               ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070  
               ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070  
             ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 0630  
         __end_of_mrfRegset_Tx 0638                   ?_Mrf49xaTick 0070                 i1_Mrf49xaServe 0360  
    __end_of_mrfRegset_InitCnt 0602                      _PORTAbits 000C                      _PORTCbits 000E  
                 ??_Mrf49RxCmd 0021                   ??_Mrf49TxCmd 0022                   ??_Mrf49SpiRx 0020  
                 ??_Mrf49SpiTx 0020                   ??_Mrf49RxSts 0021                      _TRISAbits 008C  
                    _TRISBbits 008D                      _TRISCbits 008E                    _SysInitGpio 0339  
               Mrf49SpiRx@data 0020                 Mrf49SpiTx@byte 0020             __end_of_Mrf49RxCmd 0031  
           __end_of_Mrf49TxCmd 01E9         __end_ofi1_Mrf49xaServe 041F                   ??_ExtIntInit 0020  
           __end_of_Mrf49SpiRx 029E             __end_of_Mrf49SpiTx 024B             __end_of_Mrf49RxSts 0257  
     __size_ofi1_Mrf49xaModeRx 0028                 __end_of_extInt 0014            start_initialization 0016  
           __end_of_ExtIntInit 02B2                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0602  
              _mrfRegset_TxCnt 0603                       ??_extInt 0077  __size_of_Mrf49xaPacketPending 000A  
       __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005           __end_ofi1_Mrf49RxCmd 0360  
         __end_ofi1_Mrf49TxCmd 0459           __end_ofi1_Mrf49SpiRx 0507           __end_ofi1_Mrf49SpiTx 04B4  
         __end_ofi1_Mrf49RxSts 04C2                      ___latbits 0001                  __pcstackBANK0 0020  
            i1Mrf49TxByte@byte 0073                       ?_AdcInit 0070                   _rfTrcvStatus 00A0  
         __size_of_Mrf49RxByte 0002           __size_of_Mrf49TxByte 0005           __size_of_Mrf49xaInit 003D  
         __size_of_Mrf49xaTick 004C                      __pstrings 0600                      __pswtext1 05D7  
                    __pswtext2 0507                      __pswtext3 05DF                      __pswtext4 056F  
       __size_of_Mrf49xaModeRx 002A         __size_of_Mrf49xaModeTx 002A                   _mrfRegset_Rx 0624  
                 _mrfRegset_Tx 0630              ??i1_Mrf49xaModeRx 0073                       _LATAbits 010C  
                     _LATBbits 010D                       _LATCbits 010E                  i1_Mrf49RxByte 0424  
      __end_of_mrfRegset_RxCnt 0603                  i1_Mrf49TxByte 041F        __end_of_mrfRegset_TxCnt 0604  
                    clear_ram0 0638                    _mrf49Status 002C                 Mrf49xaModeRx@k 0023  
               Mrf49xaModeTx@k 0023                  Mrf49RxCmd@cmd 0021                  Mrf49RxCmd@val 0022  
                Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021                       _WPUAbits 020C  
             __size_of_AdcInit 000F                   ?_SysInitGpio 0070                 ?i1_Mrf49RxByte 0070  
               ?i1_Mrf49TxByte 0070                  _Mrf49xaModeRx 01B3                  _Mrf49xaModeTx 02B2  
               _mrfRegset_Init 0604       __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000A  
        __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0045          __size_ofi1_Mrf49SpiTx 005B  
             i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000E       __size_of_Mrf49xaTxPacket 0045  
             i1Mrf49SpiTx@byte 0070             __end_of__stringtab 0601                       __ptext10 01AC  
                     __ptext11 01DD                       __ptext20 0360                       __ptext12 024B  
                     __ptext21 0427                       __ptext13 01B1                       __ptext22 041F  
                     __ptext14 0022                       __ptext23 044F                       __ptext15 01E9  
                     __ptext24 04B4                       __ptext16 0257                       __ptext25 0424  
                     __ptext17 02AD                       __ptext26 0356                       __ptext18 029E  
                     __ptext27 0459                       __ptext28 04C2               ??i1_Mrf49xaServe 0074  
                __size_of_main 002C                   i1_Mrf49RxCmd 0356         __end_of_mrfRegset_Init 0624  
                 i1_Mrf49TxCmd 044F                   i1_Mrf49SpiRx 04C2                   i1_Mrf49SpiTx 0459  
               ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070                   i1_Mrf49RxSts 04B4  
              i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072             Mrf49xaTick@timeout 0025  
                   _INTCONbits 000B                i1Mrf49TxCmd@cmd 0072                i1Mrf49TxCmd@val 0071  
              ??i1_Mrf49RxByte 0073                       intlevel1 0000                ??i1_Mrf49TxByte 0073  
 __end_of_Mrf49xaPacketPending 02E6                   Mrf49xaInit@i 0027                   Mrf49xaInit@j 0028  
                 Mrf49xaInit@k 0029                  ?_Mrf49xaServe 0070                   Mrf49xaTick@i 0026  
                 Mrf49xaTick@j 0027              Mrf49xaTick@packet 0028                i1_Mrf49xaModeRx 0427  
            ??_Mrf49xaRxPacket 0020              ??_Mrf49xaTxPacket 0021                  ??_Mrf49RxByte 0023  
                ??_Mrf49TxByte 0023                ??_Mrf49xaModeRx 0023                ??_Mrf49xaModeTx 0023  
         __size_of_SysInitGpio 001D               Mrf49xaServe@data 0026                 ??_Mrf49xaServe 0024  
                ??_Mrf49xaInit 0027                  ??_Mrf49xaTick 0025               Mrf49xaTxPacket@i 0023  

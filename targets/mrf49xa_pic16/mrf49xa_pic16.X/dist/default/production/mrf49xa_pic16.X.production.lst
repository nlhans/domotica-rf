

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Fri Jul 04 20:14:33 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text73,local,class=CODE,merge=1,delta=2
    14                           	psect	text76,local,class=CODE,merge=1,delta=2
    15                           	psect	pa_nodes,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  0008                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  008C                     	;# 
    45  008D                     	;# 
    46  008E                     	;# 
    47  0091                     	;# 
    48  0092                     	;# 
    49  0093                     	;# 
    50  0095                     	;# 
    51  0096                     	;# 
    52  0097                     	;# 
    53  0099                     	;# 
    54  009A                     	;# 
    55  009B                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009E                     	;# 
    60  009F                     	;# 
    61  010C                     	;# 
    62  010D                     	;# 
    63  010E                     	;# 
    64  0111                     	;# 
    65  0112                     	;# 
    66  0113                     	;# 
    67  0114                     	;# 
    68  0115                     	;# 
    69  0116                     	;# 
    70  0117                     	;# 
    71  0118                     	;# 
    72  0119                     	;# 
    73  011D                     	;# 
    74  018C                     	;# 
    75  018D                     	;# 
    76  018E                     	;# 
    77  0191                     	;# 
    78  0191                     	;# 
    79  0192                     	;# 
    80  0193                     	;# 
    81  0193                     	;# 
    82  0194                     	;# 
    83  0195                     	;# 
    84  0196                     	;# 
    85  0199                     	;# 
    86  019A                     	;# 
    87  019B                     	;# 
    88  019B                     	;# 
    89  019C                     	;# 
    90  019D                     	;# 
    91  019E                     	;# 
    92  019F                     	;# 
    93  020C                     	;# 
    94  020D                     	;# 
    95  0211                     	;# 
    96  0211                     	;# 
    97  0212                     	;# 
    98  0212                     	;# 
    99  0213                     	;# 
   100  0213                     	;# 
   101  0214                     	;# 
   102  0214                     	;# 
   103  0215                     	;# 
   104  0215                     	;# 
   105  0215                     	;# 
   106  0216                     	;# 
   107  0216                     	;# 
   108  0217                     	;# 
   109  0217                     	;# 
   110  0391                     	;# 
   111  0392                     	;# 
   112  0393                     	;# 
   113  0394                     	;# 
   114  0395                     	;# 
   115  0396                     	;# 
   116  0498                     	;# 
   117  0498                     	;# 
   118  0499                     	;# 
   119  049A                     	;# 
   120  049B                     	;# 
   121  049B                     	;# 
   122  049C                     	;# 
   123  049E                     	;# 
   124  049F                     	;# 
   125  0611                     	;# 
   126  0612                     	;# 
   127  0613                     	;# 
   128  0613                     	;# 
   129  0614                     	;# 
   130  0615                     	;# 
   131  0616                     	;# 
   132  0616                     	;# 
   133  0617                     	;# 
   134  0618                     	;# 
   135  0619                     	;# 
   136  0619                     	;# 
   137  061A                     	;# 
   138  061B                     	;# 
   139  061C                     	;# 
   140  061C                     	;# 
   141  0691                     	;# 
   142  0692                     	;# 
   143  0693                     	;# 
   144  0694                     	;# 
   145  0695                     	;# 
   146  0F0F                     	;# 
   147  0F10                     	;# 
   148  0F11                     	;# 
   149  0F12                     	;# 
   150  0F13                     	;# 
   151  0F14                     	;# 
   152  0F15                     	;# 
   153  0F16                     	;# 
   154  0F17                     	;# 
   155  0F18                     	;# 
   156  0F19                     	;# 
   157  0F1A                     	;# 
   158  0F1B                     	;# 
   159  0F1C                     	;# 
   160  0F1D                     	;# 
   161  0F1E                     	;# 
   162  0F1F                     	;# 
   163  0F20                     	;# 
   164  0F21                     	;# 
   165  0F22                     	;# 
   166  0F23                     	;# 
   167  0F24                     	;# 
   168  0F25                     	;# 
   169  0F26                     	;# 
   170  0F27                     	;# 
   171  0F28                     	;# 
   172  0F29                     	;# 
   173  0F2A                     	;# 
   174  0F2B                     	;# 
   175  0F2C                     	;# 
   176  0F2D                     	;# 
   177  0F2E                     	;# 
   178  0F2F                     	;# 
   179  0F8C                     	;# 
   180  0F8D                     	;# 
   181  0F91                     	;# 
   182  0F95                     	;# 
   183  0F96                     	;# 
   184  0F97                     	;# 
   185  0F9C                     	;# 
   186  0F9D                     	;# 
   187  0F9E                     	;# 
   188  0FE3                     	;# 
   189  0FE4                     	;# 
   190  0FE5                     	;# 
   191  0FE6                     	;# 
   192  0FE7                     	;# 
   193  0FE8                     	;# 
   194  0FE9                     	;# 
   195  0FEA                     	;# 
   196  0FEB                     	;# 
   197  0FED                     	;# 
   198  0FEE                     	;# 
   199  0FEF                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0013                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0016                     	;# 
   221  0017                     	;# 
   222  0018                     	;# 
   223  0019                     	;# 
   224  001A                     	;# 
   225  001B                     	;# 
   226  001C                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  008E                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0099                     	;# 
   237  009A                     	;# 
   238  009B                     	;# 
   239  009B                     	;# 
   240  009C                     	;# 
   241  009D                     	;# 
   242  009E                     	;# 
   243  009F                     	;# 
   244  010C                     	;# 
   245  010D                     	;# 
   246  010E                     	;# 
   247  0111                     	;# 
   248  0112                     	;# 
   249  0113                     	;# 
   250  0114                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0117                     	;# 
   254  0118                     	;# 
   255  0119                     	;# 
   256  011D                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  018E                     	;# 
   260  0191                     	;# 
   261  0191                     	;# 
   262  0192                     	;# 
   263  0193                     	;# 
   264  0193                     	;# 
   265  0194                     	;# 
   266  0195                     	;# 
   267  0196                     	;# 
   268  0199                     	;# 
   269  019A                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020C                     	;# 
   277  020D                     	;# 
   278  0211                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0212                     	;# 
   282  0213                     	;# 
   283  0213                     	;# 
   284  0214                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0216                     	;# 
   291  0217                     	;# 
   292  0217                     	;# 
   293  0391                     	;# 
   294  0392                     	;# 
   295  0393                     	;# 
   296  0394                     	;# 
   297  0395                     	;# 
   298  0396                     	;# 
   299  0498                     	;# 
   300  0498                     	;# 
   301  0499                     	;# 
   302  049A                     	;# 
   303  049B                     	;# 
   304  049B                     	;# 
   305  049C                     	;# 
   306  049E                     	;# 
   307  049F                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0613                     	;# 
   312  0614                     	;# 
   313  0615                     	;# 
   314  0616                     	;# 
   315  0616                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  0619                     	;# 
   320  061A                     	;# 
   321  061B                     	;# 
   322  061C                     	;# 
   323  061C                     	;# 
   324  0691                     	;# 
   325  0692                     	;# 
   326  0693                     	;# 
   327  0694                     	;# 
   328  0695                     	;# 
   329  0F0F                     	;# 
   330  0F10                     	;# 
   331  0F11                     	;# 
   332  0F12                     	;# 
   333  0F13                     	;# 
   334  0F14                     	;# 
   335  0F15                     	;# 
   336  0F16                     	;# 
   337  0F17                     	;# 
   338  0F18                     	;# 
   339  0F19                     	;# 
   340  0F1A                     	;# 
   341  0F1B                     	;# 
   342  0F1C                     	;# 
   343  0F1D                     	;# 
   344  0F1E                     	;# 
   345  0F1F                     	;# 
   346  0F20                     	;# 
   347  0F21                     	;# 
   348  0F22                     	;# 
   349  0F23                     	;# 
   350  0F24                     	;# 
   351  0F25                     	;# 
   352  0F26                     	;# 
   353  0F27                     	;# 
   354  0F28                     	;# 
   355  0F29                     	;# 
   356  0F2A                     	;# 
   357  0F2B                     	;# 
   358  0F2C                     	;# 
   359  0F2D                     	;# 
   360  0F2E                     	;# 
   361  0F2F                     	;# 
   362  0F8C                     	;# 
   363  0F8D                     	;# 
   364  0F91                     	;# 
   365  0F95                     	;# 
   366  0F96                     	;# 
   367  0F97                     	;# 
   368  0F9C                     	;# 
   369  0F9D                     	;# 
   370  0F9E                     	;# 
   371  0FE3                     	;# 
   372  0FE4                     	;# 
   373  0FE5                     	;# 
   374  0FE6                     	;# 
   375  0FE7                     	;# 
   376  0FE8                     	;# 
   377  0FE9                     	;# 
   378  0FEA                     	;# 
   379  0FEB                     	;# 
   380  0FED                     	;# 
   381  0FEE                     	;# 
   382  0FEF                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  008C                     	;# 
   411  008D                     	;# 
   412  008E                     	;# 
   413  0091                     	;# 
   414  0092                     	;# 
   415  0093                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  0111                     	;# 
   431  0112                     	;# 
   432  0113                     	;# 
   433  0114                     	;# 
   434  0115                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  0118                     	;# 
   438  0119                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018E                     	;# 
   443  0191                     	;# 
   444  0191                     	;# 
   445  0192                     	;# 
   446  0193                     	;# 
   447  0193                     	;# 
   448  0194                     	;# 
   449  0195                     	;# 
   450  0196                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020C                     	;# 
   460  020D                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0391                     	;# 
   477  0392                     	;# 
   478  0393                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  0498                     	;# 
   483  0498                     	;# 
   484  0499                     	;# 
   485  049A                     	;# 
   486  049B                     	;# 
   487  049B                     	;# 
   488  049C                     	;# 
   489  049E                     	;# 
   490  049F                     	;# 
   491  0611                     	;# 
   492  0612                     	;# 
   493  0613                     	;# 
   494  0613                     	;# 
   495  0614                     	;# 
   496  0615                     	;# 
   497  0616                     	;# 
   498  0616                     	;# 
   499  0617                     	;# 
   500  0618                     	;# 
   501  0619                     	;# 
   502  0619                     	;# 
   503  061A                     	;# 
   504  061B                     	;# 
   505  061C                     	;# 
   506  061C                     	;# 
   507  0691                     	;# 
   508  0692                     	;# 
   509  0693                     	;# 
   510  0694                     	;# 
   511  0695                     	;# 
   512  0F0F                     	;# 
   513  0F10                     	;# 
   514  0F11                     	;# 
   515  0F12                     	;# 
   516  0F13                     	;# 
   517  0F14                     	;# 
   518  0F15                     	;# 
   519  0F16                     	;# 
   520  0F17                     	;# 
   521  0F18                     	;# 
   522  0F19                     	;# 
   523  0F1A                     	;# 
   524  0F1B                     	;# 
   525  0F1C                     	;# 
   526  0F1D                     	;# 
   527  0F1E                     	;# 
   528  0F1F                     	;# 
   529  0F20                     	;# 
   530  0F21                     	;# 
   531  0F22                     	;# 
   532  0F23                     	;# 
   533  0F24                     	;# 
   534  0F25                     	;# 
   535  0F26                     	;# 
   536  0F27                     	;# 
   537  0F28                     	;# 
   538  0F29                     	;# 
   539  0F2A                     	;# 
   540  0F2B                     	;# 
   541  0F2C                     	;# 
   542  0F2D                     	;# 
   543  0F2E                     	;# 
   544  0F2F                     	;# 
   545  0F8C                     	;# 
   546  0F8D                     	;# 
   547  0F91                     	;# 
   548  0F95                     	;# 
   549  0F96                     	;# 
   550  0F97                     	;# 
   551  0F9C                     	;# 
   552  0F9D                     	;# 
   553  0F9E                     	;# 
   554  0FE3                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000D                     	;# 
   580  000E                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  0091                     	;# 
   597  0092                     	;# 
   598  0093                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  009F                     	;# 
   610  010C                     	;# 
   611  010D                     	;# 
   612  010E                     	;# 
   613  0111                     	;# 
   614  0112                     	;# 
   615  0113                     	;# 
   616  0114                     	;# 
   617  0115                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  0118                     	;# 
   621  0119                     	;# 
   622  011D                     	;# 
   623  018C                     	;# 
   624  018D                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0199                     	;# 
   635  019A                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020D                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0391                     	;# 
   660  0392                     	;# 
   661  0393                     	;# 
   662  0394                     	;# 
   663  0395                     	;# 
   664  0396                     	;# 
   665  0498                     	;# 
   666  0498                     	;# 
   667  0499                     	;# 
   668  049A                     	;# 
   669  049B                     	;# 
   670  049B                     	;# 
   671  049C                     	;# 
   672  049E                     	;# 
   673  049F                     	;# 
   674  0611                     	;# 
   675  0612                     	;# 
   676  0613                     	;# 
   677  0613                     	;# 
   678  0614                     	;# 
   679  0615                     	;# 
   680  0616                     	;# 
   681  0616                     	;# 
   682  0617                     	;# 
   683  0618                     	;# 
   684  0619                     	;# 
   685  0619                     	;# 
   686  061A                     	;# 
   687  061B                     	;# 
   688  061C                     	;# 
   689  061C                     	;# 
   690  0691                     	;# 
   691  0692                     	;# 
   692  0693                     	;# 
   693  0694                     	;# 
   694  0695                     	;# 
   695  0F0F                     	;# 
   696  0F10                     	;# 
   697  0F11                     	;# 
   698  0F12                     	;# 
   699  0F13                     	;# 
   700  0F14                     	;# 
   701  0F15                     	;# 
   702  0F16                     	;# 
   703  0F17                     	;# 
   704  0F18                     	;# 
   705  0F19                     	;# 
   706  0F1A                     	;# 
   707  0F1B                     	;# 
   708  0F1C                     	;# 
   709  0F1D                     	;# 
   710  0F1E                     	;# 
   711  0F1F                     	;# 
   712  0F20                     	;# 
   713  0F21                     	;# 
   714  0F22                     	;# 
   715  0F23                     	;# 
   716  0F24                     	;# 
   717  0F25                     	;# 
   718  0F26                     	;# 
   719  0F27                     	;# 
   720  0F28                     	;# 
   721  0F29                     	;# 
   722  0F2A                     	;# 
   723  0F2B                     	;# 
   724  0F2C                     	;# 
   725  0F2D                     	;# 
   726  0F2E                     	;# 
   727  0F2F                     	;# 
   728  0F8C                     	;# 
   729  0F8D                     	;# 
   730  0F91                     	;# 
   731  0F95                     	;# 
   732  0F96                     	;# 
   733  0F97                     	;# 
   734  0F9C                     	;# 
   735  0F9D                     	;# 
   736  0F9E                     	;# 
   737  0FE3                     	;# 
   738  0FE4                     	;# 
   739  0FE5                     	;# 
   740  0FE6                     	;# 
   741  0FE7                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEB                     	;# 
   746  0FED                     	;# 
   747  0FEE                     	;# 
   748  0FEF                     	;# 
   749  0000                     	;# 
   750  0001                     	;# 
   751  0002                     	;# 
   752  0003                     	;# 
   753  0004                     	;# 
   754  0005                     	;# 
   755  0006                     	;# 
   756  0007                     	;# 
   757  0008                     	;# 
   758  0009                     	;# 
   759  000A                     	;# 
   760  000B                     	;# 
   761  000C                     	;# 
   762  000D                     	;# 
   763  000E                     	;# 
   764  0011                     	;# 
   765  0012                     	;# 
   766  0013                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0016                     	;# 
   770  0017                     	;# 
   771  0018                     	;# 
   772  0019                     	;# 
   773  001A                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  008C                     	;# 
   777  008D                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0099                     	;# 
   786  009A                     	;# 
   787  009B                     	;# 
   788  009B                     	;# 
   789  009C                     	;# 
   790  009D                     	;# 
   791  009E                     	;# 
   792  009F                     	;# 
   793  010C                     	;# 
   794  010D                     	;# 
   795  010E                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0113                     	;# 
   799  0114                     	;# 
   800  0115                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  0118                     	;# 
   804  0119                     	;# 
   805  011D                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  018E                     	;# 
   809  0191                     	;# 
   810  0191                     	;# 
   811  0192                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0199                     	;# 
   818  019A                     	;# 
   819  019B                     	;# 
   820  019B                     	;# 
   821  019C                     	;# 
   822  019D                     	;# 
   823  019E                     	;# 
   824  019F                     	;# 
   825  020C                     	;# 
   826  020D                     	;# 
   827  0211                     	;# 
   828  0211                     	;# 
   829  0212                     	;# 
   830  0212                     	;# 
   831  0213                     	;# 
   832  0213                     	;# 
   833  0214                     	;# 
   834  0214                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0216                     	;# 
   839  0216                     	;# 
   840  0217                     	;# 
   841  0217                     	;# 
   842  0391                     	;# 
   843  0392                     	;# 
   844  0393                     	;# 
   845  0394                     	;# 
   846  0395                     	;# 
   847  0396                     	;# 
   848  0498                     	;# 
   849  0498                     	;# 
   850  0499                     	;# 
   851  049A                     	;# 
   852  049B                     	;# 
   853  049B                     	;# 
   854  049C                     	;# 
   855  049E                     	;# 
   856  049F                     	;# 
   857  0611                     	;# 
   858  0612                     	;# 
   859  0613                     	;# 
   860  0613                     	;# 
   861  0614                     	;# 
   862  0615                     	;# 
   863  0616                     	;# 
   864  0616                     	;# 
   865  0617                     	;# 
   866  0618                     	;# 
   867  0619                     	;# 
   868  0619                     	;# 
   869  061A                     	;# 
   870  061B                     	;# 
   871  061C                     	;# 
   872  061C                     	;# 
   873  0691                     	;# 
   874  0692                     	;# 
   875  0693                     	;# 
   876  0694                     	;# 
   877  0695                     	;# 
   878  0F0F                     	;# 
   879  0F10                     	;# 
   880  0F11                     	;# 
   881  0F12                     	;# 
   882  0F13                     	;# 
   883  0F14                     	;# 
   884  0F15                     	;# 
   885  0F16                     	;# 
   886  0F17                     	;# 
   887  0F18                     	;# 
   888  0F19                     	;# 
   889  0F1A                     	;# 
   890  0F1B                     	;# 
   891  0F1C                     	;# 
   892  0F1D                     	;# 
   893  0F1E                     	;# 
   894  0F1F                     	;# 
   895  0F20                     	;# 
   896  0F21                     	;# 
   897  0F22                     	;# 
   898  0F23                     	;# 
   899  0F24                     	;# 
   900  0F25                     	;# 
   901  0F26                     	;# 
   902  0F27                     	;# 
   903  0F28                     	;# 
   904  0F29                     	;# 
   905  0F2A                     	;# 
   906  0F2B                     	;# 
   907  0F2C                     	;# 
   908  0F2D                     	;# 
   909  0F2E                     	;# 
   910  0F2F                     	;# 
   911  0F8C                     	;# 
   912  0F8D                     	;# 
   913  0F91                     	;# 
   914  0F95                     	;# 
   915  0F96                     	;# 
   916  0F97                     	;# 
   917  0F9C                     	;# 
   918  0F9D                     	;# 
   919  0F9E                     	;# 
   920  0FE3                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0013                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0093                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  009F                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0111                     	;# 
   980  0112                     	;# 
   981  0113                     	;# 
   982  0114                     	;# 
   983  0115                     	;# 
   984  0116                     	;# 
   985  0117                     	;# 
   986  0118                     	;# 
   987  0119                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020C                     	;# 
  1009  020D                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0391                     	;# 
  1026  0392                     	;# 
  1027  0393                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0498                     	;# 
  1032  0498                     	;# 
  1033  0499                     	;# 
  1034  049A                     	;# 
  1035  049B                     	;# 
  1036  049B                     	;# 
  1037  049C                     	;# 
  1038  049E                     	;# 
  1039  049F                     	;# 
  1040  0611                     	;# 
  1041  0612                     	;# 
  1042  0613                     	;# 
  1043  0613                     	;# 
  1044  0614                     	;# 
  1045  0615                     	;# 
  1046  0616                     	;# 
  1047  0616                     	;# 
  1048  0617                     	;# 
  1049  0618                     	;# 
  1050  0619                     	;# 
  1051  0619                     	;# 
  1052  061A                     	;# 
  1053  061B                     	;# 
  1054  061C                     	;# 
  1055  061C                     	;# 
  1056  0691                     	;# 
  1057  0692                     	;# 
  1058  0693                     	;# 
  1059  0694                     	;# 
  1060  0695                     	;# 
  1061  0F0F                     	;# 
  1062  0F10                     	;# 
  1063  0F11                     	;# 
  1064  0F12                     	;# 
  1065  0F13                     	;# 
  1066  0F14                     	;# 
  1067  0F15                     	;# 
  1068  0F16                     	;# 
  1069  0F17                     	;# 
  1070  0F18                     	;# 
  1071  0F19                     	;# 
  1072  0F1A                     	;# 
  1073  0F1B                     	;# 
  1074  0F1C                     	;# 
  1075  0F1D                     	;# 
  1076  0F1E                     	;# 
  1077  0F1F                     	;# 
  1078  0F20                     	;# 
  1079  0F21                     	;# 
  1080  0F22                     	;# 
  1081  0F23                     	;# 
  1082  0F24                     	;# 
  1083  0F25                     	;# 
  1084  0F26                     	;# 
  1085  0F27                     	;# 
  1086  0F28                     	;# 
  1087  0F29                     	;# 
  1088  0F2A                     	;# 
  1089  0F2B                     	;# 
  1090  0F2C                     	;# 
  1091  0F2D                     	;# 
  1092  0F2E                     	;# 
  1093  0F2F                     	;# 
  1094  0F8C                     	;# 
  1095  0F8D                     	;# 
  1096  0F91                     	;# 
  1097  0F95                     	;# 
  1098  0F96                     	;# 
  1099  0F97                     	;# 
  1100  0F9C                     	;# 
  1101  0F9D                     	;# 
  1102  0F9E                     	;# 
  1103  0FE3                     	;# 
  1104  0FE4                     	;# 
  1105  0FE5                     	;# 
  1106  0FE6                     	;# 
  1107  0FE7                     	;# 
  1108  0FE8                     	;# 
  1109  0FE9                     	;# 
  1110  0FEA                     	;# 
  1111  0FEB                     	;# 
  1112  0FED                     	;# 
  1113  0FEE                     	;# 
  1114  0FEF                     	;# 
  1115  0000                     	;# 
  1116  0001                     	;# 
  1117  0002                     	;# 
  1118  0003                     	;# 
  1119  0004                     	;# 
  1120  0005                     	;# 
  1121  0006                     	;# 
  1122  0007                     	;# 
  1123  0008                     	;# 
  1124  0009                     	;# 
  1125  000A                     	;# 
  1126  000B                     	;# 
  1127  000C                     	;# 
  1128  000D                     	;# 
  1129  000E                     	;# 
  1130  0011                     	;# 
  1131  0012                     	;# 
  1132  0013                     	;# 
  1133  0015                     	;# 
  1134  0016                     	;# 
  1135  0016                     	;# 
  1136  0017                     	;# 
  1137  0018                     	;# 
  1138  0019                     	;# 
  1139  001A                     	;# 
  1140  001B                     	;# 
  1141  001C                     	;# 
  1142  008C                     	;# 
  1143  008D                     	;# 
  1144  008E                     	;# 
  1145  0091                     	;# 
  1146  0092                     	;# 
  1147  0093                     	;# 
  1148  0095                     	;# 
  1149  0096                     	;# 
  1150  0097                     	;# 
  1151  0099                     	;# 
  1152  009A                     	;# 
  1153  009B                     	;# 
  1154  009B                     	;# 
  1155  009C                     	;# 
  1156  009D                     	;# 
  1157  009E                     	;# 
  1158  009F                     	;# 
  1159  010C                     	;# 
  1160  010D                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  011D                     	;# 
  1172  018C                     	;# 
  1173  018D                     	;# 
  1174  018E                     	;# 
  1175  0191                     	;# 
  1176  0191                     	;# 
  1177  0192                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0194                     	;# 
  1181  0195                     	;# 
  1182  0196                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  0211                     	;# 
  1194  0211                     	;# 
  1195  0212                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0213                     	;# 
  1199  0214                     	;# 
  1200  0214                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0216                     	;# 
  1205  0216                     	;# 
  1206  0217                     	;# 
  1207  0217                     	;# 
  1208  0391                     	;# 
  1209  0392                     	;# 
  1210  0393                     	;# 
  1211  0394                     	;# 
  1212  0395                     	;# 
  1213  0396                     	;# 
  1214  0498                     	;# 
  1215  0498                     	;# 
  1216  0499                     	;# 
  1217  049A                     	;# 
  1218  049B                     	;# 
  1219  049B                     	;# 
  1220  049C                     	;# 
  1221  049E                     	;# 
  1222  049F                     	;# 
  1223  0611                     	;# 
  1224  0612                     	;# 
  1225  0613                     	;# 
  1226  0613                     	;# 
  1227  0614                     	;# 
  1228  0615                     	;# 
  1229  0616                     	;# 
  1230  0616                     	;# 
  1231  0617                     	;# 
  1232  0618                     	;# 
  1233  0619                     	;# 
  1234  0619                     	;# 
  1235  061A                     	;# 
  1236  061B                     	;# 
  1237  061C                     	;# 
  1238  061C                     	;# 
  1239  0691                     	;# 
  1240  0692                     	;# 
  1241  0693                     	;# 
  1242  0694                     	;# 
  1243  0695                     	;# 
  1244  0F0F                     	;# 
  1245  0F10                     	;# 
  1246  0F11                     	;# 
  1247  0F12                     	;# 
  1248  0F13                     	;# 
  1249  0F14                     	;# 
  1250  0F15                     	;# 
  1251  0F16                     	;# 
  1252  0F17                     	;# 
  1253  0F18                     	;# 
  1254  0F19                     	;# 
  1255  0F1A                     	;# 
  1256  0F1B                     	;# 
  1257  0F1C                     	;# 
  1258  0F1D                     	;# 
  1259  0F1E                     	;# 
  1260  0F1F                     	;# 
  1261  0F20                     	;# 
  1262  0F21                     	;# 
  1263  0F22                     	;# 
  1264  0F23                     	;# 
  1265  0F24                     	;# 
  1266  0F25                     	;# 
  1267  0F26                     	;# 
  1268  0F27                     	;# 
  1269  0F28                     	;# 
  1270  0F29                     	;# 
  1271  0F2A                     	;# 
  1272  0F2B                     	;# 
  1273  0F2C                     	;# 
  1274  0F2D                     	;# 
  1275  0F2E                     	;# 
  1276  0F2F                     	;# 
  1277  0F8C                     	;# 
  1278  0F8D                     	;# 
  1279  0F91                     	;# 
  1280  0F95                     	;# 
  1281  0F96                     	;# 
  1282  0F97                     	;# 
  1283  0F9C                     	;# 
  1284  0F9D                     	;# 
  1285  0F9E                     	;# 
  1286  0FE3                     	;# 
  1287  0FE4                     	;# 
  1288  0FE5                     	;# 
  1289  0FE6                     	;# 
  1290  0FE7                     	;# 
  1291  0FE8                     	;# 
  1292  0FE9                     	;# 
  1293  0FEA                     	;# 
  1294  0FEB                     	;# 
  1295  0FED                     	;# 
  1296  0FEE                     	;# 
  1297  0FEF                     	;# 
  1298  0000                     	;# 
  1299  0001                     	;# 
  1300  0002                     	;# 
  1301  0003                     	;# 
  1302  0004                     	;# 
  1303  0005                     	;# 
  1304  0006                     	;# 
  1305  0007                     	;# 
  1306  0008                     	;# 
  1307  0009                     	;# 
  1308  000A                     	;# 
  1309  000B                     	;# 
  1310  000C                     	;# 
  1311  000D                     	;# 
  1312  000E                     	;# 
  1313  0011                     	;# 
  1314  0012                     	;# 
  1315  0013                     	;# 
  1316  0015                     	;# 
  1317  0016                     	;# 
  1318  0016                     	;# 
  1319  0017                     	;# 
  1320  0018                     	;# 
  1321  0019                     	;# 
  1322  001A                     	;# 
  1323  001B                     	;# 
  1324  001C                     	;# 
  1325  008C                     	;# 
  1326  008D                     	;# 
  1327  008E                     	;# 
  1328  0091                     	;# 
  1329  0092                     	;# 
  1330  0093                     	;# 
  1331  0095                     	;# 
  1332  0096                     	;# 
  1333  0097                     	;# 
  1334  0099                     	;# 
  1335  009A                     	;# 
  1336  009B                     	;# 
  1337  009B                     	;# 
  1338  009C                     	;# 
  1339  009D                     	;# 
  1340  009E                     	;# 
  1341  009F                     	;# 
  1342  010C                     	;# 
  1343  010D                     	;# 
  1344  010E                     	;# 
  1345  0111                     	;# 
  1346  0112                     	;# 
  1347  0113                     	;# 
  1348  0114                     	;# 
  1349  0115                     	;# 
  1350  0116                     	;# 
  1351  0117                     	;# 
  1352  0118                     	;# 
  1353  0119                     	;# 
  1354  011D                     	;# 
  1355  018C                     	;# 
  1356  018D                     	;# 
  1357  018E                     	;# 
  1358  0191                     	;# 
  1359  0191                     	;# 
  1360  0192                     	;# 
  1361  0193                     	;# 
  1362  0193                     	;# 
  1363  0194                     	;# 
  1364  0195                     	;# 
  1365  0196                     	;# 
  1366  0199                     	;# 
  1367  019A                     	;# 
  1368  019B                     	;# 
  1369  019B                     	;# 
  1370  019C                     	;# 
  1371  019D                     	;# 
  1372  019E                     	;# 
  1373  019F                     	;# 
  1374  020C                     	;# 
  1375  020D                     	;# 
  1376  0211                     	;# 
  1377  0211                     	;# 
  1378  0212                     	;# 
  1379  0212                     	;# 
  1380  0213                     	;# 
  1381  0213                     	;# 
  1382  0214                     	;# 
  1383  0214                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0215                     	;# 
  1387  0216                     	;# 
  1388  0216                     	;# 
  1389  0217                     	;# 
  1390  0217                     	;# 
  1391  0391                     	;# 
  1392  0392                     	;# 
  1393  0393                     	;# 
  1394  0394                     	;# 
  1395  0395                     	;# 
  1396  0396                     	;# 
  1397  0498                     	;# 
  1398  0498                     	;# 
  1399  0499                     	;# 
  1400  049A                     	;# 
  1401  049B                     	;# 
  1402  049B                     	;# 
  1403  049C                     	;# 
  1404  049E                     	;# 
  1405  049F                     	;# 
  1406  0611                     	;# 
  1407  0612                     	;# 
  1408  0613                     	;# 
  1409  0613                     	;# 
  1410  0614                     	;# 
  1411  0615                     	;# 
  1412  0616                     	;# 
  1413  0616                     	;# 
  1414  0617                     	;# 
  1415  0618                     	;# 
  1416  0619                     	;# 
  1417  0619                     	;# 
  1418  061A                     	;# 
  1419  061B                     	;# 
  1420  061C                     	;# 
  1421  061C                     	;# 
  1422  0691                     	;# 
  1423  0692                     	;# 
  1424  0693                     	;# 
  1425  0694                     	;# 
  1426  0695                     	;# 
  1427  0F0F                     	;# 
  1428  0F10                     	;# 
  1429  0F11                     	;# 
  1430  0F12                     	;# 
  1431  0F13                     	;# 
  1432  0F14                     	;# 
  1433  0F15                     	;# 
  1434  0F16                     	;# 
  1435  0F17                     	;# 
  1436  0F18                     	;# 
  1437  0F19                     	;# 
  1438  0F1A                     	;# 
  1439  0F1B                     	;# 
  1440  0F1C                     	;# 
  1441  0F1D                     	;# 
  1442  0F1E                     	;# 
  1443  0F1F                     	;# 
  1444  0F20                     	;# 
  1445  0F21                     	;# 
  1446  0F22                     	;# 
  1447  0F23                     	;# 
  1448  0F24                     	;# 
  1449  0F25                     	;# 
  1450  0F26                     	;# 
  1451  0F27                     	;# 
  1452  0F28                     	;# 
  1453  0F29                     	;# 
  1454  0F2A                     	;# 
  1455  0F2B                     	;# 
  1456  0F2C                     	;# 
  1457  0F2D                     	;# 
  1458  0F2E                     	;# 
  1459  0F2F                     	;# 
  1460  0F8C                     	;# 
  1461  0F8D                     	;# 
  1462  0F91                     	;# 
  1463  0F95                     	;# 
  1464  0F96                     	;# 
  1465  0F97                     	;# 
  1466  0F9C                     	;# 
  1467  0F9D                     	;# 
  1468  0F9E                     	;# 
  1469  0FE3                     	;# 
  1470  0FE4                     	;# 
  1471  0FE5                     	;# 
  1472  0FE6                     	;# 
  1473  0FE7                     	;# 
  1474  0FE8                     	;# 
  1475  0FE9                     	;# 
  1476  0FEA                     	;# 
  1477  0FEB                     	;# 
  1478  0FED                     	;# 
  1479  0FEE                     	;# 
  1480  0FEF                     	;# 
  1481  0000                     	;# 
  1482  0001                     	;# 
  1483  0002                     	;# 
  1484  0003                     	;# 
  1485  0004                     	;# 
  1486  0005                     	;# 
  1487  0006                     	;# 
  1488  0007                     	;# 
  1489  0008                     	;# 
  1490  0009                     	;# 
  1491  000A                     	;# 
  1492  000B                     	;# 
  1493  000C                     	;# 
  1494  000D                     	;# 
  1495  000E                     	;# 
  1496  0011                     	;# 
  1497  0012                     	;# 
  1498  0013                     	;# 
  1499  0015                     	;# 
  1500  0016                     	;# 
  1501  0016                     	;# 
  1502  0017                     	;# 
  1503  0018                     	;# 
  1504  0019                     	;# 
  1505  001A                     	;# 
  1506  001B                     	;# 
  1507  001C                     	;# 
  1508  008C                     	;# 
  1509  008D                     	;# 
  1510  008E                     	;# 
  1511  0091                     	;# 
  1512  0092                     	;# 
  1513  0093                     	;# 
  1514  0095                     	;# 
  1515  0096                     	;# 
  1516  0097                     	;# 
  1517  0099                     	;# 
  1518  009A                     	;# 
  1519  009B                     	;# 
  1520  009B                     	;# 
  1521  009C                     	;# 
  1522  009D                     	;# 
  1523  009E                     	;# 
  1524  009F                     	;# 
  1525  010C                     	;# 
  1526  010D                     	;# 
  1527  010E                     	;# 
  1528  0111                     	;# 
  1529  0112                     	;# 
  1530  0113                     	;# 
  1531  0114                     	;# 
  1532  0115                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  0118                     	;# 
  1536  0119                     	;# 
  1537  011D                     	;# 
  1538  018C                     	;# 
  1539  018D                     	;# 
  1540  018E                     	;# 
  1541  0191                     	;# 
  1542  0191                     	;# 
  1543  0192                     	;# 
  1544  0193                     	;# 
  1545  0193                     	;# 
  1546  0194                     	;# 
  1547  0195                     	;# 
  1548  0196                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020C                     	;# 
  1558  020D                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0391                     	;# 
  1575  0392                     	;# 
  1576  0393                     	;# 
  1577  0394                     	;# 
  1578  0395                     	;# 
  1579  0396                     	;# 
  1580  0498                     	;# 
  1581  0498                     	;# 
  1582  0499                     	;# 
  1583  049A                     	;# 
  1584  049B                     	;# 
  1585  049B                     	;# 
  1586  049C                     	;# 
  1587  049E                     	;# 
  1588  049F                     	;# 
  1589  0611                     	;# 
  1590  0612                     	;# 
  1591  0613                     	;# 
  1592  0613                     	;# 
  1593  0614                     	;# 
  1594  0615                     	;# 
  1595  0616                     	;# 
  1596  0616                     	;# 
  1597  0617                     	;# 
  1598  0618                     	;# 
  1599  0619                     	;# 
  1600  0619                     	;# 
  1601  061A                     	;# 
  1602  061B                     	;# 
  1603  061C                     	;# 
  1604  061C                     	;# 
  1605  0691                     	;# 
  1606  0692                     	;# 
  1607  0693                     	;# 
  1608  0694                     	;# 
  1609  0695                     	;# 
  1610  0F0F                     	;# 
  1611  0F10                     	;# 
  1612  0F11                     	;# 
  1613  0F12                     	;# 
  1614  0F13                     	;# 
  1615  0F14                     	;# 
  1616  0F15                     	;# 
  1617  0F16                     	;# 
  1618  0F17                     	;# 
  1619  0F18                     	;# 
  1620  0F19                     	;# 
  1621  0F1A                     	;# 
  1622  0F1B                     	;# 
  1623  0F1C                     	;# 
  1624  0F1D                     	;# 
  1625  0F1E                     	;# 
  1626  0F1F                     	;# 
  1627  0F20                     	;# 
  1628  0F21                     	;# 
  1629  0F22                     	;# 
  1630  0F23                     	;# 
  1631  0F24                     	;# 
  1632  0F25                     	;# 
  1633  0F26                     	;# 
  1634  0F27                     	;# 
  1635  0F28                     	;# 
  1636  0F29                     	;# 
  1637  0F2A                     	;# 
  1638  0F2B                     	;# 
  1639  0F2C                     	;# 
  1640  0F2D                     	;# 
  1641  0F2E                     	;# 
  1642  0F2F                     	;# 
  1643  0F8C                     	;# 
  1644  0F8D                     	;# 
  1645  0F91                     	;# 
  1646  0F95                     	;# 
  1647  0F96                     	;# 
  1648  0F97                     	;# 
  1649  0F9C                     	;# 
  1650  0F9D                     	;# 
  1651  0F9E                     	;# 
  1652  0FE3                     	;# 
  1653  0FE4                     	;# 
  1654  0FE5                     	;# 
  1655  0FE6                     	;# 
  1656  0FE7                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEB                     	;# 
  1661  0FED                     	;# 
  1662  0FEE                     	;# 
  1663  0FEF                     	;# 
  1664  0000                     	;# 
  1665  0001                     	;# 
  1666  0002                     	;# 
  1667  0003                     	;# 
  1668  0004                     	;# 
  1669  0005                     	;# 
  1670  0006                     	;# 
  1671  0007                     	;# 
  1672  0008                     	;# 
  1673  0009                     	;# 
  1674  000A                     	;# 
  1675  000B                     	;# 
  1676  000C                     	;# 
  1677  000D                     	;# 
  1678  000E                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0015                     	;# 
  1683  0016                     	;# 
  1684  0016                     	;# 
  1685  0017                     	;# 
  1686  0018                     	;# 
  1687  0019                     	;# 
  1688  001A                     	;# 
  1689  001B                     	;# 
  1690  001C                     	;# 
  1691  008C                     	;# 
  1692  008D                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0095                     	;# 
  1698  0096                     	;# 
  1699  0097                     	;# 
  1700  0099                     	;# 
  1701  009A                     	;# 
  1702  009B                     	;# 
  1703  009B                     	;# 
  1704  009C                     	;# 
  1705  009D                     	;# 
  1706  009E                     	;# 
  1707  009F                     	;# 
  1708  010C                     	;# 
  1709  010D                     	;# 
  1710  010E                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0113                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0117                     	;# 
  1718  0118                     	;# 
  1719  0119                     	;# 
  1720  011D                     	;# 
  1721  018C                     	;# 
  1722  018D                     	;# 
  1723  018E                     	;# 
  1724  0191                     	;# 
  1725  0191                     	;# 
  1726  0192                     	;# 
  1727  0193                     	;# 
  1728  0193                     	;# 
  1729  0194                     	;# 
  1730  0195                     	;# 
  1731  0196                     	;# 
  1732  0199                     	;# 
  1733  019A                     	;# 
  1734  019B                     	;# 
  1735  019B                     	;# 
  1736  019C                     	;# 
  1737  019D                     	;# 
  1738  019E                     	;# 
  1739  019F                     	;# 
  1740  020C                     	;# 
  1741  020D                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0391                     	;# 
  1758  0392                     	;# 
  1759  0393                     	;# 
  1760  0394                     	;# 
  1761  0395                     	;# 
  1762  0396                     	;# 
  1763  0498                     	;# 
  1764  0498                     	;# 
  1765  0499                     	;# 
  1766  049A                     	;# 
  1767  049B                     	;# 
  1768  049B                     	;# 
  1769  049C                     	;# 
  1770  049E                     	;# 
  1771  049F                     	;# 
  1772  0611                     	;# 
  1773  0612                     	;# 
  1774  0613                     	;# 
  1775  0613                     	;# 
  1776  0614                     	;# 
  1777  0615                     	;# 
  1778  0616                     	;# 
  1779  0616                     	;# 
  1780  0617                     	;# 
  1781  0618                     	;# 
  1782  0619                     	;# 
  1783  0619                     	;# 
  1784  061A                     	;# 
  1785  061B                     	;# 
  1786  061C                     	;# 
  1787  061C                     	;# 
  1788  0691                     	;# 
  1789  0692                     	;# 
  1790  0693                     	;# 
  1791  0694                     	;# 
  1792  0695                     	;# 
  1793  0F0F                     	;# 
  1794  0F10                     	;# 
  1795  0F11                     	;# 
  1796  0F12                     	;# 
  1797  0F13                     	;# 
  1798  0F14                     	;# 
  1799  0F15                     	;# 
  1800  0F16                     	;# 
  1801  0F17                     	;# 
  1802  0F18                     	;# 
  1803  0F19                     	;# 
  1804  0F1A                     	;# 
  1805  0F1B                     	;# 
  1806  0F1C                     	;# 
  1807  0F1D                     	;# 
  1808  0F1E                     	;# 
  1809  0F1F                     	;# 
  1810  0F20                     	;# 
  1811  0F21                     	;# 
  1812  0F22                     	;# 
  1813  0F23                     	;# 
  1814  0F24                     	;# 
  1815  0F25                     	;# 
  1816  0F26                     	;# 
  1817  0F27                     	;# 
  1818  0F28                     	;# 
  1819  0F29                     	;# 
  1820  0F2A                     	;# 
  1821  0F2B                     	;# 
  1822  0F2C                     	;# 
  1823  0F2D                     	;# 
  1824  0F2E                     	;# 
  1825  0F2F                     	;# 
  1826  0F8C                     	;# 
  1827  0F8D                     	;# 
  1828  0F91                     	;# 
  1829  0F95                     	;# 
  1830  0F96                     	;# 
  1831  0F97                     	;# 
  1832  0F9C                     	;# 
  1833  0F9D                     	;# 
  1834  0F9E                     	;# 
  1835  0FE3                     	;# 
  1836  0FE4                     	;# 
  1837  0FE5                     	;# 
  1838  0FE6                     	;# 
  1839  0FE7                     	;# 
  1840  0FE8                     	;# 
  1841  0FE9                     	;# 
  1842  0FEA                     	;# 
  1843  0FEB                     	;# 
  1844  0FED                     	;# 
  1845  0FEE                     	;# 
  1846  0FEF                     	;# 
  1847  0000                     	;# 
  1848  0001                     	;# 
  1849  0002                     	;# 
  1850  0003                     	;# 
  1851  0004                     	;# 
  1852  0005                     	;# 
  1853  0006                     	;# 
  1854  0007                     	;# 
  1855  0008                     	;# 
  1856  0009                     	;# 
  1857  000A                     	;# 
  1858  000B                     	;# 
  1859  000C                     	;# 
  1860  000D                     	;# 
  1861  000E                     	;# 
  1862  0011                     	;# 
  1863  0012                     	;# 
  1864  0013                     	;# 
  1865  0015                     	;# 
  1866  0016                     	;# 
  1867  0016                     	;# 
  1868  0017                     	;# 
  1869  0018                     	;# 
  1870  0019                     	;# 
  1871  001A                     	;# 
  1872  001B                     	;# 
  1873  001C                     	;# 
  1874  008C                     	;# 
  1875  008D                     	;# 
  1876  008E                     	;# 
  1877  0091                     	;# 
  1878  0092                     	;# 
  1879  0093                     	;# 
  1880  0095                     	;# 
  1881  0096                     	;# 
  1882  0097                     	;# 
  1883  0099                     	;# 
  1884  009A                     	;# 
  1885  009B                     	;# 
  1886  009B                     	;# 
  1887  009C                     	;# 
  1888  009D                     	;# 
  1889  009E                     	;# 
  1890  009F                     	;# 
  1891  010C                     	;# 
  1892  010D                     	;# 
  1893  010E                     	;# 
  1894  0111                     	;# 
  1895  0112                     	;# 
  1896  0113                     	;# 
  1897  0114                     	;# 
  1898  0115                     	;# 
  1899  0116                     	;# 
  1900  0117                     	;# 
  1901  0118                     	;# 
  1902  0119                     	;# 
  1903  011D                     	;# 
  1904  018C                     	;# 
  1905  018D                     	;# 
  1906  018E                     	;# 
  1907  0191                     	;# 
  1908  0191                     	;# 
  1909  0192                     	;# 
  1910  0193                     	;# 
  1911  0193                     	;# 
  1912  0194                     	;# 
  1913  0195                     	;# 
  1914  0196                     	;# 
  1915  0199                     	;# 
  1916  019A                     	;# 
  1917  019B                     	;# 
  1918  019B                     	;# 
  1919  019C                     	;# 
  1920  019D                     	;# 
  1921  019E                     	;# 
  1922  019F                     	;# 
  1923  020C                     	;# 
  1924  020D                     	;# 
  1925  0211                     	;# 
  1926  0211                     	;# 
  1927  0212                     	;# 
  1928  0212                     	;# 
  1929  0213                     	;# 
  1930  0213                     	;# 
  1931  0214                     	;# 
  1932  0214                     	;# 
  1933  0215                     	;# 
  1934  0215                     	;# 
  1935  0215                     	;# 
  1936  0216                     	;# 
  1937  0216                     	;# 
  1938  0217                     	;# 
  1939  0217                     	;# 
  1940  0391                     	;# 
  1941  0392                     	;# 
  1942  0393                     	;# 
  1943  0394                     	;# 
  1944  0395                     	;# 
  1945  0396                     	;# 
  1946  0498                     	;# 
  1947  0498                     	;# 
  1948  0499                     	;# 
  1949  049A                     	;# 
  1950  049B                     	;# 
  1951  049B                     	;# 
  1952  049C                     	;# 
  1953  049E                     	;# 
  1954  049F                     	;# 
  1955  0611                     	;# 
  1956  0612                     	;# 
  1957  0613                     	;# 
  1958  0613                     	;# 
  1959  0614                     	;# 
  1960  0615                     	;# 
  1961  0616                     	;# 
  1962  0616                     	;# 
  1963  0617                     	;# 
  1964  0618                     	;# 
  1965  0619                     	;# 
  1966  0619                     	;# 
  1967  061A                     	;# 
  1968  061B                     	;# 
  1969  061C                     	;# 
  1970  061C                     	;# 
  1971  0691                     	;# 
  1972  0692                     	;# 
  1973  0693                     	;# 
  1974  0694                     	;# 
  1975  0695                     	;# 
  1976  0F0F                     	;# 
  1977  0F10                     	;# 
  1978  0F11                     	;# 
  1979  0F12                     	;# 
  1980  0F13                     	;# 
  1981  0F14                     	;# 
  1982  0F15                     	;# 
  1983  0F16                     	;# 
  1984  0F17                     	;# 
  1985  0F18                     	;# 
  1986  0F19                     	;# 
  1987  0F1A                     	;# 
  1988  0F1B                     	;# 
  1989  0F1C                     	;# 
  1990  0F1D                     	;# 
  1991  0F1E                     	;# 
  1992  0F1F                     	;# 
  1993  0F20                     	;# 
  1994  0F21                     	;# 
  1995  0F22                     	;# 
  1996  0F23                     	;# 
  1997  0F24                     	;# 
  1998  0F25                     	;# 
  1999  0F26                     	;# 
  2000  0F27                     	;# 
  2001  0F28                     	;# 
  2002  0F29                     	;# 
  2003  0F2A                     	;# 
  2004  0F2B                     	;# 
  2005  0F2C                     	;# 
  2006  0F2D                     	;# 
  2007  0F2E                     	;# 
  2008  0F2F                     	;# 
  2009  0F8C                     	;# 
  2010  0F8D                     	;# 
  2011  0F91                     	;# 
  2012  0F95                     	;# 
  2013  0F96                     	;# 
  2014  0F97                     	;# 
  2015  0F9C                     	;# 
  2016  0F9D                     	;# 
  2017  0F9E                     	;# 
  2018  0FE3                     	;# 
  2019  0FE4                     	;# 
  2020  0FE5                     	;# 
  2021  0FE6                     	;# 
  2022  0FE7                     	;# 
  2023  0FE8                     	;# 
  2024  0FE9                     	;# 
  2025  0FEA                     	;# 
  2026  0FEB                     	;# 
  2027  0FED                     	;# 
  2028  0FEE                     	;# 
  2029  0FEF                     	;# 
  2030  0000                     	;# 
  2031  0001                     	;# 
  2032  0002                     	;# 
  2033  0003                     	;# 
  2034  0004                     	;# 
  2035  0005                     	;# 
  2036  0006                     	;# 
  2037  0007                     	;# 
  2038  0008                     	;# 
  2039  0009                     	;# 
  2040  000A                     	;# 
  2041  000B                     	;# 
  2042  000C                     	;# 
  2043  000D                     	;# 
  2044  000E                     	;# 
  2045  0011                     	;# 
  2046  0012                     	;# 
  2047  0013                     	;# 
  2048  0015                     	;# 
  2049  0016                     	;# 
  2050  0016                     	;# 
  2051  0017                     	;# 
  2052  0018                     	;# 
  2053  0019                     	;# 
  2054  001A                     	;# 
  2055  001B                     	;# 
  2056  001C                     	;# 
  2057  008C                     	;# 
  2058  008D                     	;# 
  2059  008E                     	;# 
  2060  0091                     	;# 
  2061  0092                     	;# 
  2062  0093                     	;# 
  2063  0095                     	;# 
  2064  0096                     	;# 
  2065  0097                     	;# 
  2066  0099                     	;# 
  2067  009A                     	;# 
  2068  009B                     	;# 
  2069  009B                     	;# 
  2070  009C                     	;# 
  2071  009D                     	;# 
  2072  009E                     	;# 
  2073  009F                     	;# 
  2074  010C                     	;# 
  2075  010D                     	;# 
  2076  010E                     	;# 
  2077  0111                     	;# 
  2078  0112                     	;# 
  2079  0113                     	;# 
  2080  0114                     	;# 
  2081  0115                     	;# 
  2082  0116                     	;# 
  2083  0117                     	;# 
  2084  0118                     	;# 
  2085  0119                     	;# 
  2086  011D                     	;# 
  2087  018C                     	;# 
  2088  018D                     	;# 
  2089  018E                     	;# 
  2090  0191                     	;# 
  2091  0191                     	;# 
  2092  0192                     	;# 
  2093  0193                     	;# 
  2094  0193                     	;# 
  2095  0194                     	;# 
  2096  0195                     	;# 
  2097  0196                     	;# 
  2098  0199                     	;# 
  2099  019A                     	;# 
  2100  019B                     	;# 
  2101  019B                     	;# 
  2102  019C                     	;# 
  2103  019D                     	;# 
  2104  019E                     	;# 
  2105  019F                     	;# 
  2106  020C                     	;# 
  2107  020D                     	;# 
  2108  0211                     	;# 
  2109  0211                     	;# 
  2110  0212                     	;# 
  2111  0212                     	;# 
  2112  0213                     	;# 
  2113  0213                     	;# 
  2114  0214                     	;# 
  2115  0214                     	;# 
  2116  0215                     	;# 
  2117  0215                     	;# 
  2118  0215                     	;# 
  2119  0216                     	;# 
  2120  0216                     	;# 
  2121  0217                     	;# 
  2122  0217                     	;# 
  2123  0391                     	;# 
  2124  0392                     	;# 
  2125  0393                     	;# 
  2126  0394                     	;# 
  2127  0395                     	;# 
  2128  0396                     	;# 
  2129  0498                     	;# 
  2130  0498                     	;# 
  2131  0499                     	;# 
  2132  049A                     	;# 
  2133  049B                     	;# 
  2134  049B                     	;# 
  2135  049C                     	;# 
  2136  049E                     	;# 
  2137  049F                     	;# 
  2138  0611                     	;# 
  2139  0612                     	;# 
  2140  0613                     	;# 
  2141  0613                     	;# 
  2142  0614                     	;# 
  2143  0615                     	;# 
  2144  0616                     	;# 
  2145  0616                     	;# 
  2146  0617                     	;# 
  2147  0618                     	;# 
  2148  0619                     	;# 
  2149  0619                     	;# 
  2150  061A                     	;# 
  2151  061B                     	;# 
  2152  061C                     	;# 
  2153  061C                     	;# 
  2154  0691                     	;# 
  2155  0692                     	;# 
  2156  0693                     	;# 
  2157  0694                     	;# 
  2158  0695                     	;# 
  2159  0F0F                     	;# 
  2160  0F10                     	;# 
  2161  0F11                     	;# 
  2162  0F12                     	;# 
  2163  0F13                     	;# 
  2164  0F14                     	;# 
  2165  0F15                     	;# 
  2166  0F16                     	;# 
  2167  0F17                     	;# 
  2168  0F18                     	;# 
  2169  0F19                     	;# 
  2170  0F1A                     	;# 
  2171  0F1B                     	;# 
  2172  0F1C                     	;# 
  2173  0F1D                     	;# 
  2174  0F1E                     	;# 
  2175  0F1F                     	;# 
  2176  0F20                     	;# 
  2177  0F21                     	;# 
  2178  0F22                     	;# 
  2179  0F23                     	;# 
  2180  0F24                     	;# 
  2181  0F25                     	;# 
  2182  0F26                     	;# 
  2183  0F27                     	;# 
  2184  0F28                     	;# 
  2185  0F29                     	;# 
  2186  0F2A                     	;# 
  2187  0F2B                     	;# 
  2188  0F2C                     	;# 
  2189  0F2D                     	;# 
  2190  0F2E                     	;# 
  2191  0F2F                     	;# 
  2192  0F8C                     	;# 
  2193  0F8D                     	;# 
  2194  0F91                     	;# 
  2195  0F95                     	;# 
  2196  0F96                     	;# 
  2197  0F97                     	;# 
  2198  0F9C                     	;# 
  2199  0F9D                     	;# 
  2200  0F9E                     	;# 
  2201  0FE3                     	;# 
  2202  0FE4                     	;# 
  2203  0FE5                     	;# 
  2204  0FE6                     	;# 
  2205  0FE7                     	;# 
  2206  0FE8                     	;# 
  2207  0FE9                     	;# 
  2208  0FEA                     	;# 
  2209  0FEB                     	;# 
  2210  0FED                     	;# 
  2211  0FEE                     	;# 
  2212  0FEF                     	;# 
  2213  0000                     	;# 
  2214  0001                     	;# 
  2215  0002                     	;# 
  2216  0003                     	;# 
  2217  0004                     	;# 
  2218  0005                     	;# 
  2219  0006                     	;# 
  2220  0007                     	;# 
  2221  0008                     	;# 
  2222  0009                     	;# 
  2223  000A                     	;# 
  2224  000B                     	;# 
  2225  000C                     	;# 
  2226  000D                     	;# 
  2227  000E                     	;# 
  2228  0011                     	;# 
  2229  0012                     	;# 
  2230  0013                     	;# 
  2231  0015                     	;# 
  2232  0016                     	;# 
  2233  0016                     	;# 
  2234  0017                     	;# 
  2235  0018                     	;# 
  2236  0019                     	;# 
  2237  001A                     	;# 
  2238  001B                     	;# 
  2239  001C                     	;# 
  2240  008C                     	;# 
  2241  008D                     	;# 
  2242  008E                     	;# 
  2243  0091                     	;# 
  2244  0092                     	;# 
  2245  0093                     	;# 
  2246  0095                     	;# 
  2247  0096                     	;# 
  2248  0097                     	;# 
  2249  0099                     	;# 
  2250  009A                     	;# 
  2251  009B                     	;# 
  2252  009B                     	;# 
  2253  009C                     	;# 
  2254  009D                     	;# 
  2255  009E                     	;# 
  2256  009F                     	;# 
  2257  010C                     	;# 
  2258  010D                     	;# 
  2259  010E                     	;# 
  2260  0111                     	;# 
  2261  0112                     	;# 
  2262  0113                     	;# 
  2263  0114                     	;# 
  2264  0115                     	;# 
  2265  0116                     	;# 
  2266  0117                     	;# 
  2267  0118                     	;# 
  2268  0119                     	;# 
  2269  011D                     	;# 
  2270  018C                     	;# 
  2271  018D                     	;# 
  2272  018E                     	;# 
  2273  0191                     	;# 
  2274  0191                     	;# 
  2275  0192                     	;# 
  2276  0193                     	;# 
  2277  0193                     	;# 
  2278  0194                     	;# 
  2279  0195                     	;# 
  2280  0196                     	;# 
  2281  0199                     	;# 
  2282  019A                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019C                     	;# 
  2286  019D                     	;# 
  2287  019E                     	;# 
  2288  019F                     	;# 
  2289  020C                     	;# 
  2290  020D                     	;# 
  2291  0211                     	;# 
  2292  0211                     	;# 
  2293  0212                     	;# 
  2294  0212                     	;# 
  2295  0213                     	;# 
  2296  0213                     	;# 
  2297  0214                     	;# 
  2298  0214                     	;# 
  2299  0215                     	;# 
  2300  0215                     	;# 
  2301  0215                     	;# 
  2302  0216                     	;# 
  2303  0216                     	;# 
  2304  0217                     	;# 
  2305  0217                     	;# 
  2306  0391                     	;# 
  2307  0392                     	;# 
  2308  0393                     	;# 
  2309  0394                     	;# 
  2310  0395                     	;# 
  2311  0396                     	;# 
  2312  0498                     	;# 
  2313  0498                     	;# 
  2314  0499                     	;# 
  2315  049A                     	;# 
  2316  049B                     	;# 
  2317  049B                     	;# 
  2318  049C                     	;# 
  2319  049E                     	;# 
  2320  049F                     	;# 
  2321  0611                     	;# 
  2322  0612                     	;# 
  2323  0613                     	;# 
  2324  0613                     	;# 
  2325  0614                     	;# 
  2326  0615                     	;# 
  2327  0616                     	;# 
  2328  0616                     	;# 
  2329  0617                     	;# 
  2330  0618                     	;# 
  2331  0619                     	;# 
  2332  0619                     	;# 
  2333  061A                     	;# 
  2334  061B                     	;# 
  2335  061C                     	;# 
  2336  061C                     	;# 
  2337  0691                     	;# 
  2338  0692                     	;# 
  2339  0693                     	;# 
  2340  0694                     	;# 
  2341  0695                     	;# 
  2342  0F0F                     	;# 
  2343  0F10                     	;# 
  2344  0F11                     	;# 
  2345  0F12                     	;# 
  2346  0F13                     	;# 
  2347  0F14                     	;# 
  2348  0F15                     	;# 
  2349  0F16                     	;# 
  2350  0F17                     	;# 
  2351  0F18                     	;# 
  2352  0F19                     	;# 
  2353  0F1A                     	;# 
  2354  0F1B                     	;# 
  2355  0F1C                     	;# 
  2356  0F1D                     	;# 
  2357  0F1E                     	;# 
  2358  0F1F                     	;# 
  2359  0F20                     	;# 
  2360  0F21                     	;# 
  2361  0F22                     	;# 
  2362  0F23                     	;# 
  2363  0F24                     	;# 
  2364  0F25                     	;# 
  2365  0F26                     	;# 
  2366  0F27                     	;# 
  2367  0F28                     	;# 
  2368  0F29                     	;# 
  2369  0F2A                     	;# 
  2370  0F2B                     	;# 
  2371  0F2C                     	;# 
  2372  0F2D                     	;# 
  2373  0F2E                     	;# 
  2374  0F2F                     	;# 
  2375  0F8C                     	;# 
  2376  0F8D                     	;# 
  2377  0F91                     	;# 
  2378  0F95                     	;# 
  2379  0F96                     	;# 
  2380  0F97                     	;# 
  2381  0F9C                     	;# 
  2382  0F9D                     	;# 
  2383  0F9E                     	;# 
  2384  0FE3                     	;# 
  2385  0FE4                     	;# 
  2386  0FE5                     	;# 
  2387  0FE6                     	;# 
  2388  0FE7                     	;# 
  2389  0FE8                     	;# 
  2390  0FE9                     	;# 
  2391  0FEA                     	;# 
  2392  0FEB                     	;# 
  2393  0FED                     	;# 
  2394  0FEE                     	;# 
  2395  0FEF                     	;# 
  2396  0000                     	;# 
  2397  0001                     	;# 
  2398  0002                     	;# 
  2399  0003                     	;# 
  2400  0004                     	;# 
  2401  0005                     	;# 
  2402  0006                     	;# 
  2403  0007                     	;# 
  2404  0008                     	;# 
  2405  0009                     	;# 
  2406  000A                     	;# 
  2407  000B                     	;# 
  2408  000C                     	;# 
  2409  000D                     	;# 
  2410  000E                     	;# 
  2411  0011                     	;# 
  2412  0012                     	;# 
  2413  0013                     	;# 
  2414  0015                     	;# 
  2415  0016                     	;# 
  2416  0016                     	;# 
  2417  0017                     	;# 
  2418  0018                     	;# 
  2419  0019                     	;# 
  2420  001A                     	;# 
  2421  001B                     	;# 
  2422  001C                     	;# 
  2423  008C                     	;# 
  2424  008D                     	;# 
  2425  008E                     	;# 
  2426  0091                     	;# 
  2427  0092                     	;# 
  2428  0093                     	;# 
  2429  0095                     	;# 
  2430  0096                     	;# 
  2431  0097                     	;# 
  2432  0099                     	;# 
  2433  009A                     	;# 
  2434  009B                     	;# 
  2435  009B                     	;# 
  2436  009C                     	;# 
  2437  009D                     	;# 
  2438  009E                     	;# 
  2439  009F                     	;# 
  2440  010C                     	;# 
  2441  010D                     	;# 
  2442  010E                     	;# 
  2443  0111                     	;# 
  2444  0112                     	;# 
  2445  0113                     	;# 
  2446  0114                     	;# 
  2447  0115                     	;# 
  2448  0116                     	;# 
  2449  0117                     	;# 
  2450  0118                     	;# 
  2451  0119                     	;# 
  2452  011D                     	;# 
  2453  018C                     	;# 
  2454  018D                     	;# 
  2455  018E                     	;# 
  2456  0191                     	;# 
  2457  0191                     	;# 
  2458  0192                     	;# 
  2459  0193                     	;# 
  2460  0193                     	;# 
  2461  0194                     	;# 
  2462  0195                     	;# 
  2463  0196                     	;# 
  2464  0199                     	;# 
  2465  019A                     	;# 
  2466  019B                     	;# 
  2467  019B                     	;# 
  2468  019C                     	;# 
  2469  019D                     	;# 
  2470  019E                     	;# 
  2471  019F                     	;# 
  2472  020C                     	;# 
  2473  020D                     	;# 
  2474  0211                     	;# 
  2475  0211                     	;# 
  2476  0212                     	;# 
  2477  0212                     	;# 
  2478  0213                     	;# 
  2479  0213                     	;# 
  2480  0214                     	;# 
  2481  0214                     	;# 
  2482  0215                     	;# 
  2483  0215                     	;# 
  2484  0215                     	;# 
  2485  0216                     	;# 
  2486  0216                     	;# 
  2487  0217                     	;# 
  2488  0217                     	;# 
  2489  0391                     	;# 
  2490  0392                     	;# 
  2491  0393                     	;# 
  2492  0394                     	;# 
  2493  0395                     	;# 
  2494  0396                     	;# 
  2495  0498                     	;# 
  2496  0498                     	;# 
  2497  0499                     	;# 
  2498  049A                     	;# 
  2499  049B                     	;# 
  2500  049B                     	;# 
  2501  049C                     	;# 
  2502  049E                     	;# 
  2503  049F                     	;# 
  2504  0611                     	;# 
  2505  0612                     	;# 
  2506  0613                     	;# 
  2507  0613                     	;# 
  2508  0614                     	;# 
  2509  0615                     	;# 
  2510  0616                     	;# 
  2511  0616                     	;# 
  2512  0617                     	;# 
  2513  0618                     	;# 
  2514  0619                     	;# 
  2515  0619                     	;# 
  2516  061A                     	;# 
  2517  061B                     	;# 
  2518  061C                     	;# 
  2519  061C                     	;# 
  2520  0691                     	;# 
  2521  0692                     	;# 
  2522  0693                     	;# 
  2523  0694                     	;# 
  2524  0695                     	;# 
  2525  0F0F                     	;# 
  2526  0F10                     	;# 
  2527  0F11                     	;# 
  2528  0F12                     	;# 
  2529  0F13                     	;# 
  2530  0F14                     	;# 
  2531  0F15                     	;# 
  2532  0F16                     	;# 
  2533  0F17                     	;# 
  2534  0F18                     	;# 
  2535  0F19                     	;# 
  2536  0F1A                     	;# 
  2537  0F1B                     	;# 
  2538  0F1C                     	;# 
  2539  0F1D                     	;# 
  2540  0F1E                     	;# 
  2541  0F1F                     	;# 
  2542  0F20                     	;# 
  2543  0F21                     	;# 
  2544  0F22                     	;# 
  2545  0F23                     	;# 
  2546  0F24                     	;# 
  2547  0F25                     	;# 
  2548  0F26                     	;# 
  2549  0F27                     	;# 
  2550  0F28                     	;# 
  2551  0F29                     	;# 
  2552  0F2A                     	;# 
  2553  0F2B                     	;# 
  2554  0F2C                     	;# 
  2555  0F2D                     	;# 
  2556  0F2E                     	;# 
  2557  0F2F                     	;# 
  2558  0F8C                     	;# 
  2559  0F8D                     	;# 
  2560  0F91                     	;# 
  2561  0F95                     	;# 
  2562  0F96                     	;# 
  2563  0F97                     	;# 
  2564  0F9C                     	;# 
  2565  0F9D                     	;# 
  2566  0F9E                     	;# 
  2567  0FE3                     	;# 
  2568  0FE4                     	;# 
  2569  0FE5                     	;# 
  2570  0FE6                     	;# 
  2571  0FE7                     	;# 
  2572  0FE8                     	;# 
  2573  0FE9                     	;# 
  2574  0FEA                     	;# 
  2575  0FEB                     	;# 
  2576  0FED                     	;# 
  2577  0FEE                     	;# 
  2578  0FEF                     	;# 
  2579  0000                     	;# 
  2580  0001                     	;# 
  2581  0002                     	;# 
  2582  0003                     	;# 
  2583  0004                     	;# 
  2584  0005                     	;# 
  2585  0006                     	;# 
  2586  0007                     	;# 
  2587  0008                     	;# 
  2588  0009                     	;# 
  2589  000A                     	;# 
  2590  000B                     	;# 
  2591  000C                     	;# 
  2592  000D                     	;# 
  2593  000E                     	;# 
  2594  0011                     	;# 
  2595  0012                     	;# 
  2596  0013                     	;# 
  2597  0015                     	;# 
  2598  0016                     	;# 
  2599  0016                     	;# 
  2600  0017                     	;# 
  2601  0018                     	;# 
  2602  0019                     	;# 
  2603  001A                     	;# 
  2604  001B                     	;# 
  2605  001C                     	;# 
  2606  008C                     	;# 
  2607  008D                     	;# 
  2608  008E                     	;# 
  2609  0091                     	;# 
  2610  0092                     	;# 
  2611  0093                     	;# 
  2612  0095                     	;# 
  2613  0096                     	;# 
  2614  0097                     	;# 
  2615  0099                     	;# 
  2616  009A                     	;# 
  2617  009B                     	;# 
  2618  009B                     	;# 
  2619  009C                     	;# 
  2620  009D                     	;# 
  2621  009E                     	;# 
  2622  009F                     	;# 
  2623  010C                     	;# 
  2624  010D                     	;# 
  2625  010E                     	;# 
  2626  0111                     	;# 
  2627  0112                     	;# 
  2628  0113                     	;# 
  2629  0114                     	;# 
  2630  0115                     	;# 
  2631  0116                     	;# 
  2632  0117                     	;# 
  2633  0118                     	;# 
  2634  0119                     	;# 
  2635  011D                     	;# 
  2636  018C                     	;# 
  2637  018D                     	;# 
  2638  018E                     	;# 
  2639  0191                     	;# 
  2640  0191                     	;# 
  2641  0192                     	;# 
  2642  0193                     	;# 
  2643  0193                     	;# 
  2644  0194                     	;# 
  2645  0195                     	;# 
  2646  0196                     	;# 
  2647  0199                     	;# 
  2648  019A                     	;# 
  2649  019B                     	;# 
  2650  019B                     	;# 
  2651  019C                     	;# 
  2652  019D                     	;# 
  2653  019E                     	;# 
  2654  019F                     	;# 
  2655  020C                     	;# 
  2656  020D                     	;# 
  2657  0211                     	;# 
  2658  0211                     	;# 
  2659  0212                     	;# 
  2660  0212                     	;# 
  2661  0213                     	;# 
  2662  0213                     	;# 
  2663  0214                     	;# 
  2664  0214                     	;# 
  2665  0215                     	;# 
  2666  0215                     	;# 
  2667  0215                     	;# 
  2668  0216                     	;# 
  2669  0216                     	;# 
  2670  0217                     	;# 
  2671  0217                     	;# 
  2672  0391                     	;# 
  2673  0392                     	;# 
  2674  0393                     	;# 
  2675  0394                     	;# 
  2676  0395                     	;# 
  2677  0396                     	;# 
  2678  0498                     	;# 
  2679  0498                     	;# 
  2680  0499                     	;# 
  2681  049A                     	;# 
  2682  049B                     	;# 
  2683  049B                     	;# 
  2684  049C                     	;# 
  2685  049E                     	;# 
  2686  049F                     	;# 
  2687  0611                     	;# 
  2688  0612                     	;# 
  2689  0613                     	;# 
  2690  0613                     	;# 
  2691  0614                     	;# 
  2692  0615                     	;# 
  2693  0616                     	;# 
  2694  0616                     	;# 
  2695  0617                     	;# 
  2696  0618                     	;# 
  2697  0619                     	;# 
  2698  0619                     	;# 
  2699  061A                     	;# 
  2700  061B                     	;# 
  2701  061C                     	;# 
  2702  061C                     	;# 
  2703  0691                     	;# 
  2704  0692                     	;# 
  2705  0693                     	;# 
  2706  0694                     	;# 
  2707  0695                     	;# 
  2708  0F0F                     	;# 
  2709  0F10                     	;# 
  2710  0F11                     	;# 
  2711  0F12                     	;# 
  2712  0F13                     	;# 
  2713  0F14                     	;# 
  2714  0F15                     	;# 
  2715  0F16                     	;# 
  2716  0F17                     	;# 
  2717  0F18                     	;# 
  2718  0F19                     	;# 
  2719  0F1A                     	;# 
  2720  0F1B                     	;# 
  2721  0F1C                     	;# 
  2722  0F1D                     	;# 
  2723  0F1E                     	;# 
  2724  0F1F                     	;# 
  2725  0F20                     	;# 
  2726  0F21                     	;# 
  2727  0F22                     	;# 
  2728  0F23                     	;# 
  2729  0F24                     	;# 
  2730  0F25                     	;# 
  2731  0F26                     	;# 
  2732  0F27                     	;# 
  2733  0F28                     	;# 
  2734  0F29                     	;# 
  2735  0F2A                     	;# 
  2736  0F2B                     	;# 
  2737  0F2C                     	;# 
  2738  0F2D                     	;# 
  2739  0F2E                     	;# 
  2740  0F2F                     	;# 
  2741  0F8C                     	;# 
  2742  0F8D                     	;# 
  2743  0F91                     	;# 
  2744  0F95                     	;# 
  2745  0F96                     	;# 
  2746  0F97                     	;# 
  2747  0F9C                     	;# 
  2748  0F9D                     	;# 
  2749  0F9E                     	;# 
  2750  0FE3                     	;# 
  2751  0FE4                     	;# 
  2752  0FE5                     	;# 
  2753  0FE6                     	;# 
  2754  0FE7                     	;# 
  2755  0FE8                     	;# 
  2756  0FE9                     	;# 
  2757  0FEA                     	;# 
  2758  0FEB                     	;# 
  2759  0FED                     	;# 
  2760  0FEE                     	;# 
  2761  0FEF                     	;# 
  2762                           
  2763                           	psect	strings
  2764  0800                     __pstrings:	
  2765  0800                     __stringtab:	
  2766  0800  3400               	retlw	0
  2767  0801                     __end_of__stringtab:	
  2768  0801                     _mrfRegset_InitCnt:	
  2769  0801  3410               	retlw	16
  2770  0802                     __end_of_mrfRegset_InitCnt:	
  2771  0802                     _mrfRegset_RxCnt:	
  2772  0802  3406               	retlw	6
  2773  0803                     __end_of_mrfRegset_RxCnt:	
  2774  0803                     _mrfRegset_SleepCnt:	
  2775  0803  3403               	retlw	3
  2776  0804                     __end_of_mrfRegset_SleepCnt:	
  2777  0804                     _mrfRegset_TxCnt:	
  2778  0804  3404               	retlw	4
  2779  0805                     __end_of_mrfRegset_TxCnt:	
  2780  0805                     _mrfRegset_Init:	
  2781  0805  34CA               	retlw	202
  2782  0806  3471               	retlw	113
  2783  0807  34CA               	retlw	202
  2784  0808  3473               	retlw	115
  2785  0809  3480               	retlw	128
  2786  080A  3428               	retlw	40
  2787  080B  34C4               	retlw	196
  2788  080C  34E7               	retlw	231
  2789  080D  34A8               	retlw	168
  2790  080E  3460               	retlw	96
  2791  080F  34C6               	retlw	198
  2792  0810  3405               	retlw	5
  2793  0811  3482               	retlw	130
  2794  0812  3400               	retlw	0
  2795  0813  3490               	retlw	144
  2796  0814  3462               	retlw	98
  2797  0815  3498               	retlw	152
  2798  0816  3490               	retlw	144
  2799  0817  34C2               	retlw	194
  2800  0818  34AC               	retlw	172
  2801  0819  3482               	retlw	130
  2802  081A  3420               	retlw	32
  2803  081B  3455               	retlw	85
  2804  081C  3400               	retlw	0
  2805  081D  3482               	retlw	130
  2806  081E  3480               	retlw	128
  2807  081F  3480               	retlw	128
  2808  0820  3468               	retlw	104
  2809  0821  34CA               	retlw	202
  2810  0822  3471               	retlw	113
  2811  0823  34CA               	retlw	202
  2812  0824  3473               	retlw	115
  2813  0825                     __end_of_mrfRegset_Init:	
  2814  0825                     _mrfRegset_Rx:	
  2815  0825  3482               	retlw	130
  2816  0826  3400               	retlw	0
  2817  0827  34CA               	retlw	202
  2818  0828  3471               	retlw	113
  2819  0829  3480               	retlw	128
  2820  082A  3428               	retlw	40
  2821  082B  3482               	retlw	130
  2822  082C  3480               	retlw	128
  2823  082D  3480               	retlw	128
  2824  082E  3468               	retlw	104
  2825  082F  34CA               	retlw	202
  2826  0830  3473               	retlw	115
  2827  0831                     __end_of_mrfRegset_Rx:	
  2828  0831                     _mrfRegset_Tx:	
  2829  0831  3482               	retlw	130
  2830  0832  3400               	retlw	0
  2831  0833  34CA               	retlw	202
  2832  0834  3471               	retlw	113
  2833  0835  3480               	retlw	128
  2834  0836  34A8               	retlw	168
  2835  0837  3482               	retlw	130
  2836  0838  3420               	retlw	32
  2837  0839                     __end_of_mrfRegset_Tx:	
  2838  0839                     _mrfRegset_Sleep:	
  2839  0839  3482               	retlw	130
  2840  083A  3400               	retlw	0
  2841  083B  34CA               	retlw	202
  2842  083C  3471               	retlw	113
  2843  083D  3480               	retlw	128
  2844  083E  3468               	retlw	104
  2845  083F                     __end_of_mrfRegset_Sleep:	
  2846  083F                     _parameters:	
  2847  083F  3400               	retlw	0
  2848  0840  3401               	retlw	1
  2849  0841  3432               	retlw	_cfgRam& (0+255)
  2850  0842  3401               	retlw	1
  2851  0843  3402               	retlw	2
  2852  0844  3439               	retlw	(_cfgRam+7)& (0+255)
  2853  0845                     __end_of_parameters:	
  2854  000B                     _INTCONbits	set	11
  2855  000C                     _PORTAbits	set	12
  2856  000D                     _PORTBbits	set	13
  2857  000E                     _PORTCbits	set	14
  2858  009D                     _ADCON0	set	157
  2859  009E                     _ADCON1	set	158
  2860  009F                     _ADCON2	set	159
  2861  009C                     _ADRESH	set	156
  2862  009B                     _ADRESL	set	155
  2863  0095                     _OPTION_REGbits	set	149
  2864  0099                     _OSCCON	set	153
  2865  008C                     _TRISAbits	set	140
  2866  008D                     _TRISBbits	set	141
  2867  008E                     _TRISCbits	set	142
  2868  0097                     _WDTCONbits	set	151
  2869  0117                     _FVRCON	set	279
  2870  010C                     _LATAbits	set	268
  2871  010D                     _LATBbits	set	269
  2872  010E                     _LATCbits	set	270
  2873  018C                     _ANSELA	set	396
  2874  018D                     _ANSELB	set	397
  2875  018E                     _ANSELC	set	398
  2876  020C                     _WPUAbits	set	524
  2877                           
  2878                           ; #config settings
  2879  0000                     
  2880                           	psect	cinit
  2881  0022                     start_initialization:	
  2882  0022                     __initialization:	
  2883                           
  2884                           ; Clear objects allocated to BANK0
  2885  0022  3032               	movlw	low __pbssBANK0
  2886  0023  0084               	movwf	4
  2887  0024  3000               	movlw	high __pbssBANK0
  2888  0025  0085               	movwf	5
  2889  0026  300B               	movlw	11
  2890  0027  3187  27CD  3180   	fcall	clear_ram0
  2891                           
  2892                           ; Clear objects allocated to BANK1
  2893  002A  30A0               	movlw	low __pbssBANK1
  2894  002B  0084               	movwf	4
  2895  002C  3000               	movlw	high __pbssBANK1
  2896  002D  0085               	movwf	5
  2897  002E  304B               	movlw	75
  2898  002F  3187  27CD  3180   	fcall	clear_ram0
  2899  0032                     end_of_initialization:	
  2900                           ;End of C runtime variable initialization code
  2901                           
  2902  0032                     __end_of__initialization:	
  2903  0032  0020               	movlb	0
  2904  0033  2863               	ljmp	_main	;jump to C main() function
  2905  0034                     __ptext11:	
  2906 ;; *************** function _PwrRfInit *****************
  2907 ;; Defined at:
  2908 ;;		line 88 in file "../../../src/node/power.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;		None               void
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 1F/0
  2919 ;;		On exit  : 1F/1
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2922 ;;      Params:         0       0       0       0
  2923 ;;      Locals:         0       0       0       0
  2924 ;;      Temps:          0       0       0       0
  2925 ;;      Totals:         0       0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:   10
  2929 ;; This function calls:
  2930 ;;		_ExtIntInit
  2931 ;;		_Mrf49xaInit
  2932 ;;		_Sleepy
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           
  2939                           ;psect for function _PwrRfInit
  2940  0034                     _PwrRfInit:	
  2941                           
  2942                           ;power.c: 90: TRISAbits.TRISA2 = 1;
  2943                           
  2944                           ;incstack = 0
  2945                           ; Regs used in _PwrRfInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2946  0034  0021               	movlb	1	; select bank1
  2947  0035  150C               	bsf	12,2	;volatile
  2948                           
  2949                           ;power.c: 91: TRISAbits.TRISA4 = 0;
  2950  0036  120C               	bcf	12,4	;volatile
  2951                           
  2952                           ;power.c: 92: TRISAbits.TRISA5 = 0;
  2953  0037  128C               	bcf	12,5	;volatile
  2954                           
  2955                           ;power.c: 94: TRISBbits.TRISB7 = 0;
  2956  0038  138D               	bcf	13,7	;volatile
  2957                           
  2958                           ;power.c: 96: TRISCbits.TRISC1 = 0;
  2959  0039  108E               	bcf	14,1	;volatile
  2960                           
  2961                           ;power.c: 97: TRISCbits.TRISC4 = 0;
  2962  003A  120E               	bcf	14,4	;volatile
  2963                           
  2964                           ;power.c: 98: TRISCbits.TRISC6 = 0;
  2965  003B  130E               	bcf	14,6	;volatile
  2966                           
  2967                           ;power.c: 99: TRISCbits.TRISC7 = 0;
  2968  003C  138E               	bcf	14,7	;volatile
  2969                           
  2970                           ;power.c: 100: TRISCbits.TRISC3 = 1;
  2971  003D  158E               	bsf	14,3	;volatile
  2972                           
  2973                           ;power.c: 101: TRISCbits.TRISC5 = 1;
  2974  003E  168E               	bsf	14,5	;volatile
  2975                           
  2976                           ;power.c: 103: LATCbits.LATC1 = 0;
  2977  003F  0022               	movlb	2	; select bank2
  2978  0040  108E               	bcf	14,1	;volatile
  2979                           
  2980                           ;power.c: 105: LATAbits.LATA4 = 0;
  2981  0041  120C               	bcf	12,4	;volatile
  2982                           
  2983                           ;power.c: 106: LATAbits.LATA5 = 0;
  2984  0042  128C               	bcf	12,5	;volatile
  2985                           
  2986                           ;power.c: 107: LATCbits.LATC4 = 0;
  2987  0043  120E               	bcf	14,4	;volatile
  2988                           
  2989                           ;power.c: 108: PORTCbits.RC6 = 1;
  2990  0044  0020               	movlb	0	; select bank0
  2991  0045  170E               	bsf	14,6	;volatile
  2992                           
  2993                           ;power.c: 109: LATCbits.LATC7 = 0;
  2994  0046  0022               	movlb	2	; select bank2
  2995  0047  138E               	bcf	14,7	;volatile
  2996                           
  2997                           ;power.c: 110: PORTBbits.RB7 = 0;
  2998  0048  0020               	movlb	0	; select bank0
  2999  0049  138D               	bcf	13,7	;volatile
  3000                           
  3001                           ;power.c: 112: WPUAbits.WPUA2 = 1;
  3002  004A  0024               	movlb	4	; select bank4
  3003  004B  150C               	bsf	12,2	;volatile
  3004                           
  3005                           ;power.c: 113: Sleepy(10);
  3006  004C  300A               	movlw	10
  3007  004D  0020               	movlb	0	; select bank0
  3008  004E  00A0               	movwf	Sleepy@ms
  3009  004F  01A1               	clrf	Sleepy@ms+1
  3010  0050  21AB  3180         	fcall	_Sleepy
  3011                           
  3012                           ;power.c: 115: Mrf49xaInit();
  3013  0052  214B  3180         	fcall	_Mrf49xaInit
  3014                           
  3015                           ;power.c: 116: ExtIntInit();
  3016  0054  2855               	ljmp	l3012
  3017  0055                     __end_of_PwrRfInit:	
  3018  0055                     __ptext52:	
  3019 ;; *************** function _ExtIntInit *****************
  3020 ;; Defined at:
  3021 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;		None               void
  3028 ;; Registers used:
  3029 ;;		None
  3030 ;; Tracked objects:
  3031 ;;		On entry : 1F/0
  3032 ;;		On exit  : 1F/1
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3035 ;;      Params:         0       0       0       0
  3036 ;;      Locals:         0       0       0       0
  3037 ;;      Temps:          0       0       0       0
  3038 ;;      Totals:         0       0       0       0
  3039 ;;Total ram usage:        0 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    5
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_Mrf49xaTick
  3046 ;;		_PwrRfInit
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _ExtIntInit
  3052  0055                     _ExtIntInit:	
  3053  0055                     l3012:	
  3054                           ;incstack = 0
  3055                           ; Regs used in _ExtIntInit: []
  3056                           
  3057                           
  3058                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3059  0055  0021               	movlb	1	; select bank1
  3060  0056  1315               	bcf	21,6	;volatile
  3061                           
  3062                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3063  0057  108B               	bcf	11,1	;volatile
  3064                           
  3065                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3066  0058  160B               	bsf	11,4	;volatile
  3067                           
  3068                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3069  0059  178B               	bsf	11,7	;volatile
  3070  005A  0008               	return
  3071  005B                     __end_of_ExtIntInit:	
  3072  005B                     __ptext15:	
  3073 ;; *************** function _SoftI2cInit *****************
  3074 ;; Defined at:
  3075 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;		None
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;		None               void
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0, pclath, cstack
  3084 ;; Tracked objects:
  3085 ;;		On entry : 17F/2
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3089 ;;      Params:         0       0       0       0
  3090 ;;      Locals:         0       0       0       0
  3091 ;;      Temps:          0       0       0       0
  3092 ;;      Totals:         0       0       0       0
  3093 ;;Total ram usage:        0 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    7
  3096 ;; This function calls:
  3097 ;;		_SoftI2cStart
  3098 ;;		_SoftI2cStop
  3099 ;;		_SoftI2cTxByte
  3100 ;; This function is called by:
  3101 ;;		_PwrI2cInit
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           
  3106                           ;psect for function _SoftI2cInit
  3107  005B                     _SoftI2cInit:	
  3108                           
  3109                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  3113                           
  3114                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  3115                           
  3116                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  3117                           
  3118                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  3119  005B  27B1  3180         	fcall	PL20	;call to abstracted procedure
  3120                           
  3121                           ;softI2c.c: 32: SoftI2cStart();
  3122  005D  23D7  3180         	fcall	_SoftI2cStart
  3123                           
  3124                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  3125  005F  3000               	movlw	0
  3126  0060  2369  3180         	fcall	_SoftI2cTxByte
  3127                           
  3128                           ;softI2c.c: 34: SoftI2cStop();
  3129  0062  2BE4               	ljmp	l2404
  3130  0063                     __end_of_SoftI2cInit:	
  3131  0063                     __pmaintext:	
  3132 ;;
  3133 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3134 ;;
  3135 ;; *************** function _main *****************
  3136 ;; Defined at:
  3137 ;;		line 30 in file "../../../src/node/main.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  temperature     2   16[BANK0 ] unsigned int 
  3142 ;;  humidity        2   14[BANK0 ] unsigned int 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;		None               void
  3145 ;; Registers used:
  3146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 17F/0
  3149 ;;		On exit  : 1F/1
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3152 ;;      Params:         0       0       0       0
  3153 ;;      Locals:         0       4       0       0
  3154 ;;      Temps:          0       0       0       0
  3155 ;;      Totals:         0       4       0       0
  3156 ;;Total ram usage:        4 bytes
  3157 ;; Hardware stack levels required when called:   12
  3158 ;; This function calls:
  3159 ;;		_AdcSample
  3160 ;;		_CfgLoad
  3161 ;;		_Mcp9800Read
  3162 ;;		_Mcp9800Start
  3163 ;;		_Mrf49xaNeedsReset
  3164 ;;		_Mrf49xaTick
  3165 ;;		_PwrAdcInit
  3166 ;;		_PwrAdcSleep
  3167 ;;		_PwrAdcWake
  3168 ;;		_PwrI2cInit
  3169 ;;		_PwrI2cSleep
  3170 ;;		_PwrI2cWake
  3171 ;;		_PwrRfInit
  3172 ;;		_PwrRfSleep
  3173 ;;		_PwrRfWake
  3174 ;;		_PwrSensorInit
  3175 ;;		_PwrSensorSleep
  3176 ;;		_PwrSensorWake
  3177 ;;		_RfSendSampleWeatherNode
  3178 ;;		_Sleepy
  3179 ;; This function is called by:
  3180 ;;		Startup code after reset
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _main
  3186  0063                     _main:	
  3187                           
  3188                           ;main.c: 33: OSCCON = 0b01111000;
  3189                           
  3190                           ;incstack = 0
  3191                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3192  0063  3078               	movlw	120
  3193  0064  0021               	movlb	1	; select bank1
  3194  0065  0099               	movwf	25	;volatile
  3195                           
  3196                           ;main.c: 35: PwrAdcInit();
  3197  0066  26E6  3180         	fcall	_PwrAdcInit
  3198                           
  3199                           ;main.c: 36: PwrSensorInit();
  3200  0068  2702  3180         	fcall	_PwrSensorInit
  3201                           
  3202                           ;main.c: 37: PwrI2cInit();
  3203  006A  26F5  3180         	fcall	_PwrI2cInit
  3204                           
  3205                           ;main.c: 38: PwrRfInit();
  3206  006C  2034  3180         	fcall	_PwrRfInit
  3207                           
  3208                           ;main.c: 40: CfgLoad();
  3209  006E  23FD  3180         	fcall	_CfgLoad
  3210                           
  3211                           ;main.c: 42: PwrAdcSleep();
  3212  0070  26EB  3180         	fcall	_PwrAdcSleep
  3213                           
  3214                           ;main.c: 43: PwrSensorSleep();
  3215  0072  23F5  3180         	fcall	_PwrSensorSleep
  3216                           
  3217                           ;main.c: 44: PwrI2cSleep();
  3218  0074  23F3  3180         	fcall	_PwrI2cSleep
  3219  0076                     l3530:	
  3220                           
  3221                           ;main.c: 45: PwrRfSleep();
  3222  0076  26FD  3180         	fcall	_PwrRfSleep
  3223                           
  3224                           ;main.c: 48: {
  3225                           ;main.c: 51: Sleepy(1000);
  3226  0078  30E8               	movlw	232
  3227  0079  0020               	movlb	0	; select bank0
  3228  007A  00A0               	movwf	Sleepy@ms
  3229  007B  3003               	movlw	3
  3230  007C  00A1               	movwf	Sleepy@ms+1
  3231  007D  21AB  3180         	fcall	_Sleepy
  3232                           
  3233                           ;main.c: 53: PwrSensorWake();
  3234  007F  2706  3180         	fcall	_PwrSensorWake
  3235                           
  3236                           ;main.c: 54: PwrI2cWake();
  3237  0081  240E  3180         	fcall	_PwrI2cWake
  3238                           
  3239                           ;main.c: 56: Mcp9800Start(Mcp9800_12bit);
  3240  0083  3060               	movlw	96
  3241  0084  232C  3180         	fcall	_Mcp9800Start
  3242                           
  3243                           ;main.c: 58: PwrAdcWake();
  3244  0086  26EF  3180         	fcall	_PwrAdcWake
  3245                           
  3246                           ;main.c: 59: uint16_t humidity = AdcSample(ADC_AN4);
  3247  0088  3004               	movlw	4
  3248  0089  26A3  3180         	fcall	_AdcSample
  3249  008B  0823               	movf	?_AdcSample+1,w
  3250  008C  00AF               	movwf	main@humidity+1
  3251  008D  0822               	movf	?_AdcSample,w
  3252  008E  00AE               	movwf	main@humidity
  3253                           
  3254                           ;main.c: 60: Sleepy(300);
  3255  008F  302C               	movlw	44
  3256  0090  00A0               	movwf	Sleepy@ms
  3257  0091  3001               	movlw	1
  3258  0092  00A1               	movwf	Sleepy@ms+1
  3259  0093  21AB  3180         	fcall	_Sleepy
  3260                           
  3261                           ;main.c: 61: uint16_t temperature = Mcp9800Read();
  3262  0095  22FB  3180         	fcall	_Mcp9800Read
  3263  0097  0825               	movf	?_Mcp9800Read+1,w
  3264  0098  00B1               	movwf	main@temperature+1
  3265  0099  0824               	movf	?_Mcp9800Read,w
  3266  009A  00B0               	movwf	main@temperature
  3267                           
  3268                           ;main.c: 63: PwrSensorSleep();
  3269  009B  23F5  3180         	fcall	_PwrSensorSleep
  3270                           
  3271                           ;main.c: 64: PwrI2cSleep();
  3272  009D  23F3  3180         	fcall	_PwrI2cSleep
  3273                           
  3274                           ;main.c: 66: PwrRfWake();
  3275  009F  2700  3180         	fcall	_PwrRfWake
  3276                           
  3277                           ;main.c: 68: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  3278  00A1  0021               	movlb	1	; select bank1
  3279  00A2  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3280  00A3  1903               	btfsc	3,2
  3281  00A4  28A9               	goto	l3560
  3282                           
  3283                           ;main.c: 69: {
  3284                           ;main.c: 70: Mrf49xaNeedsReset();
  3285  00A5  22DA  3180         	fcall	_Mrf49xaNeedsReset
  3286                           
  3287                           ;main.c: 71: Mrf49xaTick();
  3288  00A7  20BF  3180         	fcall	_Mrf49xaTick
  3289  00A9                     l3560:	
  3290                           
  3291                           ;main.c: 76: {
  3292                           ;main.c: 77: Mrf49xaTick();
  3293  00A9  20BF  3180         	fcall	_Mrf49xaTick
  3294                           
  3295                           ;main.c: 78: }
  3296                           ;main.c: 79: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3297  00AB  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3298  00AC  1D03               	skipz
  3299  00AD  28A9               	goto	l3560
  3300                           
  3301                           ;main.c: 81: RfSendSampleWeatherNode(temperature, humidity);
  3302  00AE  0020               	movlb	0	; select bank0
  3303  00AF  0831               	movf	main@temperature+1,w
  3304  00B0  00A7               	movwf	RfSendSampleWeatherNode@temperature+1
  3305  00B1  0830               	movf	main@temperature,w
  3306  00B2  00A6               	movwf	RfSendSampleWeatherNode@temperature
  3307  00B3  082F               	movf	main@humidity+1,w
  3308  00B4  00A9               	movwf	RfSendSampleWeatherNode@humidity+1
  3309  00B5  082E               	movf	main@humidity,w
  3310  00B6  00A8               	movwf	RfSendSampleWeatherNode@humidity
  3311  00B7  240F  3180         	fcall	_RfSendSampleWeatherNode
  3312  00B9                     l639:	
  3313                           ;main.c: 82: do
  3314                           
  3315                           
  3316                           ;main.c: 83: {
  3317                           ;main.c: 84: Mrf49xaTick();
  3318  00B9  20BF  3180         	fcall	_Mrf49xaTick
  3319                           
  3320                           ;main.c: 85: }
  3321                           ;main.c: 86: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  3322  00BB  08D1               	movf	(_rfTrcvStatus^(0+128)+49),f
  3323  00BC  1903               	btfsc	3,2
  3324  00BD  2876               	goto	l3530
  3325  00BE  28B9               	goto	l639
  3326  00BF                     __end_of_main:	
  3327  00BF                     __ptext21:	
  3328 ;; *************** function _Mrf49xaTick *****************
  3329 ;; Defined at:
  3330 ;;		line 124 in file "../../../src/devices/mrf49xa_packet.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  timeout         1   12[BANK0 ] unsigned char 
  3335 ;;  packet          1   13[BANK0 ] PTR struct rfTrcvPacket_
  3336 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;		None               void
  3339 ;; Registers used:
  3340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 1E/1
  3343 ;;		On exit  : 1F/1
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3346 ;;      Params:         0       0       0       0
  3347 ;;      Locals:         0       2       0       0
  3348 ;;      Temps:          0       1       0       0
  3349 ;;      Totals:         0       3       0       0
  3350 ;;Total ram usage:        3 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:   11
  3353 ;; This function calls:
  3354 ;;		_ExtIntInit
  3355 ;;		_HandlePacket
  3356 ;;		_Mrf49xaFreePacket
  3357 ;;		_Mrf49xaInit
  3358 ;;		_Mrf49xaModeTx
  3359 ;;		_Mrf49xaPacketPending
  3360 ;;		_Mrf49xaRxPacket
  3361 ;;		_Mrf49xaServe
  3362 ;;		_Sleepy
  3363 ;; This function is called by:
  3364 ;;		_main
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           
  3369                           ;psect for function _Mrf49xaTick
  3370  00BF                     _Mrf49xaTick:	
  3371                           
  3372                           ;mrf49xa_packet.c: 126: if (rfTrcvStatus.needsReset)
  3373                           
  3374                           ;incstack = 0
  3375                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3376  00BF  0021               	movlb	1	; select bank1
  3377  00C0  1FEA               	btfss	(_rfTrcvStatus^(0+128)+74),7
  3378  00C1  28C5               	goto	l3228
  3379                           
  3380                           ;mrf49xa_packet.c: 127: {
  3381                           ;mrf49xa_packet.c: 128: Mrf49xaInit();
  3382  00C2  214B  3180         	fcall	_Mrf49xaInit
  3383                           
  3384                           ;mrf49xa_packet.c: 129: ExtIntInit();
  3385  00C4  2855               	ljmp	l3012
  3386  00C5                     l3228:	
  3387                           
  3388                           ;mrf49xa_packet.c: 131: }
  3389                           ;mrf49xa_packet.c: 133: if (Mrf49xaPacketPending())
  3390  00C5  2405  3180         	fcall	_Mrf49xaPacketPending
  3391  00C7  3A00               	xorlw	0
  3392  00C8  1903               	skipnz
  3393  00C9  28E8               	goto	l3242
  3394                           
  3395                           ;mrf49xa_packet.c: 134: {
  3396                           ;mrf49xa_packet.c: 135: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  3397  00CA  26D8  3180         	fcall	_Mrf49xaRxPacket
  3398  00CC  0020               	movlb	0	; select bank0
  3399  00CD  00AD               	movwf	Mrf49xaTick@packet
  3400                           
  3401                           ;mrf49xa_packet.c: 143: if (packet->packet.dst == 0xFF || packet->packet.dst == cfgRam.n
      +                          odeId)
  3402  00CE  3E03               	addlw	3
  3403  00CF  0086               	movwf	6
  3404  00D0  0187               	clrf	7
  3405  00D1  0801               	movf	1,w
  3406  00D2  3AFF               	xorlw	255
  3407  00D3  1903               	skipnz
  3408  00D4  28DC               	goto	l3236
  3409  00D5  082D               	movf	Mrf49xaTick@packet,w
  3410  00D6  3E03               	addlw	3
  3411  00D7  0086               	movwf	6
  3412  00D8  0801               	movf	1,w
  3413  00D9  0632               	xorwf	_cfgRam,w
  3414  00DA  1D03               	skipz
  3415  00DB  28E5               	goto	l3240
  3416  00DC                     l3236:	
  3417                           
  3418                           ;mrf49xa_packet.c: 144: {
  3419                           ;mrf49xa_packet.c: 145: packet->packet.size -= 5;
  3420  00DC  0A2D               	incf	Mrf49xaTick@packet,w
  3421  00DD  0086               	movwf	6
  3422  00DE  3005               	movlw	5
  3423  00DF  0187               	clrf	7
  3424  00E0  0281               	subwf	1,f
  3425                           
  3426                           ;mrf49xa_packet.c: 148: HandlePacket(packet);
  3427  00E1  082D               	movf	Mrf49xaTick@packet,w
  3428  00E2  2460  3180         	fcall	_HandlePacket
  3429                           
  3430                           ;mrf49xa_packet.c: 150: }
  3431  00E4  28E8               	goto	l3242
  3432  00E5                     l3240:	
  3433                           
  3434                           ;mrf49xa_packet.c: 151: else
  3435                           ;mrf49xa_packet.c: 152: {
  3436                           ;mrf49xa_packet.c: 153: Mrf49xaFreePacket(packet);
  3437  00E5  082D               	movf	Mrf49xaTick@packet,w
  3438  00E6  23F8  3180         	fcall	_Mrf49xaFreePacket
  3439  00E8                     l3242:	
  3440                           
  3441                           ;mrf49xa_packet.c: 154: }
  3442                           ;mrf49xa_packet.c: 158: }
  3443                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  3444  00E8  0021               	movlb	1	; select bank1
  3445  00E9  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  3446  00EA  3A03               	xorlw	3
  3447  00EB  1D03               	skipz
  3448  00EC  291B               	goto	l3262
  3449                           
  3450                           ;mrf49xa_packet.c: 161: {
  3451                           ;mrf49xa_packet.c: 162: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  3452  00ED  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3453  00EE  0C89               	rrf	9,f
  3454  00EF  0C89               	rrf	9,f
  3455  00F0  3903               	andlw	3
  3456  00F1  3A02               	xorlw	2
  3457  00F2  1D03               	skipz
  3458  00F3  28F6               	goto	l3248
  3459  00F4                     l3246:	
  3460                           
  3461                           ;mrf49xa_packet.c: 163: {
  3462                           ;mrf49xa_packet.c: 164: rfTrcvStatus.txPacket.state = PKT_FREE;
  3463  00F4  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  3464                           
  3465                           ;mrf49xa_packet.c: 165: }
  3466  00F5  291B               	goto	l3262
  3467  00F6                     l3248:	
  3468                           
  3469                           ;mrf49xa_packet.c: 166: else if (rfTrcvStatus.txPacket.retry == 10)
  3470  00F6  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3471  00F7  390F               	andlw	15
  3472  00F8  3A0A               	xorlw	10
  3473  00F9  1D03               	skipz
  3474  00FA  2913               	goto	l3258
  3475                           
  3476                           ;mrf49xa_packet.c: 167: {
  3477                           ;mrf49xa_packet.c: 168: if (rfTrcvStatus.txPacket.retransmit == 1)
  3478  00FB  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3479  00FC  3903               	andlw	3
  3480  00FD  3A01               	xorlw	1
  3481  00FE  1903               	btfsc	3,2
  3482  00FF  28F4               	goto	l3246
  3483                           
  3484                           ;mrf49xa_packet.c: 174: else
  3485                           ;mrf49xa_packet.c: 175: {
  3486                           ;mrf49xa_packet.c: 177: rfTrcvStatus.txPacket.retry = 0;
  3487  0100  30F0               	movlw	-16
  3488  0101  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  3489                           
  3490                           ;mrf49xa_packet.c: 178: rfTrcvStatus.txPacket.retransmit++;
  3491  0102  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  3492  0103  3903               	andlw	3
  3493  0104  0020               	movlb	0	; select bank0
  3494  0105  00AB               	movwf	??_Mrf49xaTick
  3495  0106  0AAB               	incf	??_Mrf49xaTick,f
  3496  0107  0EAB               	swapf	??_Mrf49xaTick,f
  3497  0108  0021               	movlb	1	; select bank1
  3498  0109  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3499  010A  0020               	movlb	0	; select bank0
  3500  010B  062B               	xorwf	??_Mrf49xaTick,w
  3501  010C  39CF               	andlw	-49
  3502  010D  062B               	xorwf	??_Mrf49xaTick,w
  3503  010E  0021               	movlb	1	; select bank1
  3504  010F  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  3505                           
  3506                           ;mrf49xa_packet.c: 179: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  3507  0110  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  3508  0111  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  3509  0112  291B               	goto	l3262
  3510  0113                     l3258:	
  3511                           
  3512                           ;mrf49xa_packet.c: 182: else
  3513                           ;mrf49xa_packet.c: 183: {
  3514                           ;mrf49xa_packet.c: 184: rfTrcvStatus.txPacket.retry++;
  3515  0113  2786  3180         	fcall	PL10	;call to abstracted procedure
  3516                           
  3517                           ;mrf49xa_packet.c: 185: Sleepy(8);
  3518  0115  3008               	movlw	8
  3519  0116  0020               	movlb	0	; select bank0
  3520  0117  00A0               	movwf	Sleepy@ms
  3521  0118  01A1               	clrf	Sleepy@ms+1
  3522  0119  21AB  3180         	fcall	_Sleepy
  3523  011B                     l3262:	
  3524                           
  3525                           ;mrf49xa_packet.c: 186: }
  3526                           ;mrf49xa_packet.c: 187: }
  3527                           ;mrf49xa_packet.c: 189: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  3528                           ;mrf49xa_packet.c: 190: rfTrcvStatus.state == RECV_IDLE)
  3529  011B  0021               	movlb	1	; select bank1
  3530  011C  0B51               	decfsz	(_rfTrcvStatus^(0+128)+49),w
  3531  011D  0008               	return
  3532  011E  0B69               	decfsz	(_rfTrcvStatus^(0+128)+73),w
  3533  011F  0008               	return
  3534                           
  3535                           ;mrf49xa_packet.c: 191: {
  3536                           ;mrf49xa_packet.c: 192: if (rfTrcvStatus.txPacket.retry >= 10)
  3537  0120  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  3538  0121  390F               	andlw	15
  3539  0122  0020               	movlb	0	; select bank0
  3540  0123  00AB               	movwf	??_Mrf49xaTick
  3541  0124  300A               	movlw	10
  3542  0125  022B               	subwf	??_Mrf49xaTick,w
  3543  0126  1C03               	skipc
  3544  0127  292E               	goto	l3274
  3545                           
  3546                           ;mrf49xa_packet.c: 193: {
  3547                           ;mrf49xa_packet.c: 195: rfTrcvStatus.txPacket.retry = 0;
  3548  0128  30F0               	movlw	-16
  3549  0129  0021               	movlb	1	; select bank1
  3550  012A  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  3551                           
  3552                           ;mrf49xa_packet.c: 196: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3553  012B  3003               	movlw	3
  3554  012C  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3555  012D  0008               	return
  3556  012E                     l3274:	
  3557                           
  3558                           ;mrf49xa_packet.c: 198: }
  3559                           ;mrf49xa_packet.c: 202: uint8_t timeout = 0;
  3560  012E  01AC               	clrf	Mrf49xaTick@timeout
  3561  012F                     l3276:	
  3562                           
  3563                           ;mrf49xa_packet.c: 206: {
  3564                           ;mrf49xa_packet.c: 207: Mrf49xaServe();
  3565  012F  21C6  3180         	fcall	_Mrf49xaServe
  3566                           
  3567                           ;mrf49xa_packet.c: 209: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  3568  0131  0021               	movlb	1	; select bank1
  3569  0132  0B69               	decfsz	(_rfTrcvStatus^(0+128)+73),w
  3570  0133  2937               	goto	l3284
  3571  0134  0020               	movlb	0	; select bank0
  3572  0135  1C3B               	btfss	_mrf49Status,0
  3573  0136  2945               	goto	l417
  3574  0137                     l3284:	
  3575                           
  3576                           ;mrf49xa_packet.c: 213: }
  3577                           ;mrf49xa_packet.c: 215: Sleepy(8);
  3578  0137  3008               	movlw	8
  3579  0138  0020               	movlb	0	; select bank0
  3580  0139  00A0               	movwf	Sleepy@ms
  3581  013A  01A1               	clrf	Sleepy@ms+1
  3582  013B  21AB  3180         	fcall	_Sleepy
  3583  013D  300B               	movlw	11
  3584                           
  3585                           ;mrf49xa_packet.c: 216: timeout++;
  3586  013E  0AAC               	incf	Mrf49xaTick@timeout,f
  3587                           
  3588                           ;mrf49xa_packet.c: 218: if (timeout > 10)
  3589  013F  022C               	subwf	Mrf49xaTick@timeout,w
  3590  0140  1C03               	skipc
  3591  0141  292F               	goto	l3276
  3592                           
  3593                           ;mrf49xa_packet.c: 219: {
  3594                           ;mrf49xa_packet.c: 220: rfTrcvStatus.txPacket.retry++;
  3595  0142  0021               	movlb	1	; select bank1
  3596  0143  2786               	fcall	PL10	;call to abstracted procedure
  3597  0144  0008               	return
  3598  0145                     l417:	
  3599                           
  3600                           ;mrf49xa_packet.c: 234: INTCONbits.INTE = 0;;
  3601  0145  120B               	bcf	11,4	;volatile
  3602                           
  3603                           ;mrf49xa_packet.c: 235: Mrf49xaModeTx();
  3604  0146  2709               	fcall	_Mrf49xaModeTx
  3605                           
  3606                           ;mrf49xa_packet.c: 236: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  3607  0147  3002               	movlw	2
  3608  0148  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  3609                           
  3610                           ;mrf49xa_packet.c: 237: INTCONbits.INTE = 1;;
  3611  0149  160B               	bsf	11,4	;volatile
  3612  014A  0008               	return
  3613  014B                     __end_of_Mrf49xaTick:	
  3614  014B                     __ptext25:	
  3615 ;; *************** function _Mrf49xaInit *****************
  3616 ;; Defined at:
  3617 ;;		line 150 in file "../../../src/devices/mrf49xa.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;		None
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  k               1    6[BANK0 ] unsigned char 
  3622 ;;  j               1    0        unsigned char 
  3623 ;;  i               1    0        unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;		None               void
  3626 ;; Registers used:
  3627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 1E/0
  3630 ;;		On exit  : 1F/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3633 ;;      Params:         0       0       0       0
  3634 ;;      Locals:         0       1       0       0
  3635 ;;      Temps:          0       0       0       0
  3636 ;;      Totals:         0       1       0       0
  3637 ;;Total ram usage:        1 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    9
  3640 ;; This function calls:
  3641 ;;		_Mrf49TxCmd
  3642 ;;		_Mrf49xaModeRx
  3643 ;;		_Mrf49xaServe
  3644 ;;		_Sleepy
  3645 ;; This function is called by:
  3646 ;;		_Mrf49xaTick
  3647 ;;		_PwrRfInit
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function _Mrf49xaInit
  3653  014B                     _Mrf49xaInit:	
  3654  014B                     l234:	
  3655                           ;incstack = 0
  3656                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3657                           ;mrf49xa.c: 152: UI08_t k;
  3658                           ;mrf49xa.c: 154: UI08_t i, j;
  3659                           ;mrf49xa.c: 156: reset:
  3660                           
  3661                           
  3662                           ;mrf49xa.c: 158: for (k = 0; k < sizeof(rfTrcvStatus_t); k++)
  3663  014B  0020               	movlb	0	; select bank0
  3664  014C  01A6               	clrf	Mrf49xaInit@k
  3665  014D                     l3040:	
  3666                           
  3667                           ;mrf49xa.c: 159: {
  3668                           ;mrf49xa.c: 160: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  3669  014D  0826               	movf	Mrf49xaInit@k,w
  3670  014E  3EA0               	addlw	_rfTrcvStatus& (0+255)
  3671  014F  0086               	movwf	6
  3672  0150  304B               	movlw	75
  3673  0151  0187               	clrf	7
  3674  0152  0181               	clrf	1
  3675  0153  0AA6               	incf	Mrf49xaInit@k,f
  3676  0154  0226               	subwf	Mrf49xaInit@k,w
  3677  0155  1C03               	skipc
  3678  0156  294D               	goto	l3040
  3679                           
  3680                           ;mrf49xa.c: 161: }
  3681                           ;mrf49xa.c: 164: PORTCbits.RC6 = 1;
  3682  0157  170E               	bsf	14,6	;volatile
  3683                           
  3684                           ;mrf49xa.c: 165: LATCbits.LATC7 = 0;
  3685  0158  0022               	movlb	2	; select bank2
  3686  0159  138E               	bcf	14,7	;volatile
  3687                           
  3688                           ;mrf49xa.c: 166: PORTBbits.RB7 = 0;
  3689  015A  0020               	movlb	0	; select bank0
  3690  015B  138D               	bcf	13,7	;volatile
  3691                           
  3692                           ;mrf49xa.c: 168: LATCbits.LATC1 = 0;
  3693  015C  0022               	movlb	2	; select bank2
  3694  015D  108E               	bcf	14,1	;volatile
  3695                           
  3696                           ;mrf49xa.c: 169: LATCbits.LATC4 = 1;
  3697  015E  160E               	bsf	14,4	;volatile
  3698                           
  3699                           ;mrf49xa.c: 171: LATAbits.LATA5 = 1;
  3700  015F  168C               	bsf	12,5	;volatile
  3701                           
  3702                           ;mrf49xa.c: 173: Sleepy(64);
  3703  0160  27C3  3180         	fcall	PL26	;call to abstracted procedure
  3704  0162  21AB  3180         	fcall	_Sleepy
  3705                           
  3706                           ;mrf49xa.c: 174: LATAbits.LATA4 = 0;
  3707  0164  0022               	movlb	2	; select bank2
  3708  0165  120C               	bcf	12,4	;volatile
  3709                           
  3710                           ;mrf49xa.c: 175: Sleepy(64);
  3711  0166  27C3  3180         	fcall	PL26	;call to abstracted procedure
  3712  0168  21AB  3180         	fcall	_Sleepy
  3713                           
  3714                           ;mrf49xa.c: 176: LATAbits.LATA4 = 1;
  3715  016A  0022               	movlb	2	; select bank2
  3716  016B  160C               	bsf	12,4	;volatile
  3717                           
  3718                           ;mrf49xa.c: 177: Sleepy(64);
  3719  016C  27C3  3180         	fcall	PL26	;call to abstracted procedure
  3720  016E  21AB               	fcall	_Sleepy
  3721                           
  3722                           ;mrf49xa.c: 179: rfTrcvStatus.state = RECV_IDLE;
  3723  016F  0021               	movlb	1	; select bank1
  3724  0170  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  3725  0171  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  3726                           
  3727                           ;mrf49xa.c: 181: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(8); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3728  0172  0020               	movlb	0	; select bank0
  3729  0173  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3730  0174  01A6               	clrf	Mrf49xaInit@k
  3731  0175  3188               	movlp	high __stringtab
  3732  0176  000A               	callw
  3733  0177  3180               	pagesel	$	;select current page
  3734  0178  3800               	iorlw	0
  3735  0179  1903               	btfsc	3,2
  3736  017A  299D               	goto	l3070
  3737  017B                     l3060:	
  3738  017B  3526               	lslf	Mrf49xaInit@k,w
  3739  017C  3E05               	addlw	low (_mrfRegset_Init| (0+32768))
  3740  017D  3188               	movlp	high __stringtab
  3741  017E  000A               	callw
  3742  017F  3180               	pagesel	$	;select current page
  3743  0180  3A55               	xorlw	85
  3744  0181  1D03               	skipz
  3745  0182  2989               	goto	l3064
  3746  0183  3008               	movlw	8
  3747  0184  00A0               	movwf	Sleepy@ms
  3748  0185  01A1               	clrf	Sleepy@ms+1
  3749  0186  21AB  3180         	fcall	_Sleepy
  3750  0188  2995               	goto	l3066
  3751  0189                     l3064:	
  3752  0189  3526               	lslf	Mrf49xaInit@k,w
  3753  018A  3E06               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3754  018B  3188               	movlp	high __stringtab
  3755  018C  000A               	callw
  3756  018D  3180               	pagesel	$	;select current page
  3757  018E  00A1               	movwf	Mrf49TxCmd@val
  3758  018F  3526               	lslf	Mrf49xaInit@k,w
  3759  0190  3E05               	addlw	low (_mrfRegset_Init| (0+32768))
  3760  0191  3188               	movlp	high __stringtab
  3761  0192  000A               	callw
  3762  0193  3180               	pagesel	$	;select current page
  3763  0194  22DD               	fcall	_Mrf49TxCmd
  3764  0195                     l3066:	
  3765  0195  3001               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3766  0196  0AA6               	incf	Mrf49xaInit@k,f
  3767  0197  3188               	movlp	high __stringtab
  3768  0198  000A               	callw
  3769  0199  3180               	pagesel	$	;select current page
  3770  019A  0226               	subwf	Mrf49xaInit@k,w
  3771  019B  1C03               	skipc
  3772  019C  297B               	goto	l3060
  3773  019D                     l3070:	
  3774                           
  3775                           ;mrf49xa.c: 184: Mrf49xaModeRx();
  3776  019D  22B5  3180         	fcall	_Mrf49xaModeRx
  3777                           
  3778                           ;mrf49xa.c: 186: k = 0;
  3779  019F  01A6               	clrf	Mrf49xaInit@k
  3780  01A0                     l3082:	
  3781                           ;mrf49xa.c: 187: while(PORTAbits.RA2 == 0)
  3782                           
  3783  01A0  0020               	movlb	0	; select bank0
  3784  01A1  190C               	btfsc	12,2	;volatile
  3785  01A2  0008               	return
  3786                           
  3787                           ;mrf49xa.c: 188: {
  3788                           ;mrf49xa.c: 189: k++;
  3789  01A3  0AA6               	incf	Mrf49xaInit@k,f
  3790                           
  3791                           ;mrf49xa.c: 190: if (k == 255)
  3792  01A4  0826               	movf	Mrf49xaInit@k,w
  3793  01A5  3AFF               	xorlw	255
  3794  01A6  1903               	btfsc	3,2
  3795  01A7  294B               	goto	l234
  3796                           
  3797                           ;mrf49xa.c: 195: }
  3798                           ;mrf49xa.c: 200: Mrf49xaServe();
  3799                           
  3800                           ;mrf49xa.c: 194: goto reset;
  3801  01A8  21C6  3180         	fcall	_Mrf49xaServe
  3802  01AA  29A0               	goto	l3082
  3803  01AB                     __end_of_Mrf49xaInit:	
  3804  01AB                     __ptext26:	
  3805 ;; *************** function _Sleepy *****************
  3806 ;; Defined at:
  3807 ;;		line 42 in file "../../../src/node/power.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  ms              2    0[BANK0 ] unsigned int 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  b               1    3[BANK0 ] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;		None               void
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0
  3816 ;; Tracked objects:
  3817 ;;		On entry : 1F/0
  3818 ;;		On exit  : 1F/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3821 ;;      Params:         0       2       0       0
  3822 ;;      Locals:         0       1       0       0
  3823 ;;      Temps:          0       1       0       0
  3824 ;;      Totals:         0       4       0       0
  3825 ;;Total ram usage:        4 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    5
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_Mrf49xaInit
  3832 ;;		_Mrf49xaTick
  3833 ;;		_main
  3834 ;;		_PwrRfInit
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _Sleepy
  3840  01AB                     _Sleepy:	
  3841                           
  3842                           ;power.c: 44: uint8_t b = 0;
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  3846  01AB  01A3               	clrf	Sleepy@b
  3847  01AC                     l2894:	
  3848                           ;power.c: 46: while (ms != 0)
  3849                           
  3850  01AC  0821               	movf	Sleepy@ms+1,w
  3851  01AD  0420               	iorwf	Sleepy@ms,w
  3852  01AE  1903               	btfsc	3,2
  3853  01AF  0008               	return
  3854                           
  3855                           ;power.c: 47: {
  3856                           ;power.c: 48: if ((ms & 1) != 0)
  3857  01B0  1C20               	btfss	Sleepy@ms,0
  3858  01B1  29C1               	goto	l2890
  3859                           
  3860                           ;power.c: 49: {
  3861                           ;power.c: 50: WDTCONbits.WDTPS = b;
  3862  01B2  0823               	movf	Sleepy@b,w
  3863  01B3  00A2               	movwf	??_Sleepy
  3864  01B4  0DA2               	rlf	??_Sleepy,f
  3865  01B5  0021               	movlb	1	; select bank1
  3866  01B6  0817               	movf	23,w	;volatile
  3867  01B7  0020               	movlb	0	; select bank0
  3868  01B8  0622               	xorwf	??_Sleepy,w
  3869  01B9  39C1               	andlw	-63
  3870  01BA  0622               	xorwf	??_Sleepy,w
  3871  01BB  0021               	movlb	1	; select bank1
  3872  01BC  0097               	movwf	23	;volatile
  3873                           
  3874                           ;power.c: 51: WDTCONbits.SWDTEN = 1;
  3875  01BD  1417               	bsf	23,0	;volatile
  3876  01BE  0063               	sleep	;# 
  3877                           
  3878                           ;power.c: 55: WDTCONbits.SWDTEN = 0;
  3879  01BF  0021               	movlb	1	; select bank1
  3880  01C0  1017               	bcf	23,0	;volatile
  3881  01C1                     l2890:	
  3882                           
  3883                           ;power.c: 56: }
  3884                           ;power.c: 57: ms = ms >> 1;
  3885  01C1  0020               	movlb	0	; select bank0
  3886  01C2  36A1               	lsrf	Sleepy@ms+1,f
  3887  01C3  0CA0               	rrf	Sleepy@ms,f
  3888                           
  3889                           ;power.c: 58: b++;
  3890  01C4  0AA3               	incf	Sleepy@b,f
  3891  01C5  29AC               	goto	l2894
  3892  01C6                     __end_of_Sleepy:	
  3893  01C6                     __ptext27:	
  3894 ;; *************** function _Mrf49xaServe *****************
  3895 ;; Defined at:
  3896 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;  data            1    5[BANK0 ] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      unsigned char 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 1E/0
  3907 ;;		On exit  : 1E/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3910 ;;      Params:         0       0       0       0
  3911 ;;      Locals:         0       1       0       0
  3912 ;;      Temps:          0       1       0       0
  3913 ;;      Totals:         0       2       0       0
  3914 ;;Total ram usage:        2 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    8
  3917 ;; This function calls:
  3918 ;;		_Mrf49RxByte
  3919 ;;		_Mrf49RxSts
  3920 ;;		_Mrf49TxByte
  3921 ;;		_Mrf49xaModeRx
  3922 ;;		_Mrf49xaNeedsReset
  3923 ;; This function is called by:
  3924 ;;		_Mrf49xaInit
  3925 ;;		_Mrf49xaTick
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _Mrf49xaServe
  3931  01C6                     _Mrf49xaServe:	
  3932                           
  3933                           ;mrf49xa_data.c: 10: uint8_t data;
  3934                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3938  01C6  0021               	movlb	1	; select bank1
  3939  01C7  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  3940  01C8  1903               	btfsc	3,2
  3941                           
  3942                           ;mrf49xa_data.c: 13: return 0;
  3943  01C9  3400               	retlw	0
  3944                           
  3945                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  3946  01CA  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  3947  01CB  3400               	retlw	0
  3948                           
  3949                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  3950  01CC  2654  3180         	fcall	_Mrf49RxSts
  3951                           
  3952                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  3953  01CE  083B               	movf	_mrf49Status,w
  3954  01CF  3AFF               	xorlw	255
  3955  01D0  1D03               	skipz
  3956  01D1  29D6               	goto	l441
  3957  01D2  083C               	movf	_mrf49Status+1,w
  3958  01D3  3AFF               	xorlw	255
  3959  01D4  1903               	btfsc	3,2
  3960  01D5  3400               	retlw	0
  3961  01D6                     l441:	
  3962                           ;mrf49xa_data.c: 26: {
  3963                           
  3964                           
  3965                           ;mrf49xa_data.c: 28: }
  3966                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  3967  01D6  1ABB               	btfsc	_mrf49Status,5
  3968  01D7  29E5               	goto	l2794
  3969  01D8  29F4               	goto	l442
  3970  01D9                     l2788:	
  3971                           
  3972                           ;mrf49xa_data.c: 36: case RECV_DATA:
  3973                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  3974  01D9  22B3  3180         	fcall	_Mrf49RxByte
  3975  01DB  00A5               	movwf	Mrf49xaServe@data
  3976                           
  3977                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  3978  01DC  22B3  3180         	fcall	_Mrf49RxByte
  3979  01DE  00A5               	movwf	Mrf49xaServe@data
  3980                           
  3981                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  3982  01DF  22B5  3180         	fcall	_Mrf49xaModeRx
  3983                           
  3984                           ;mrf49xa_data.c: 47: break;
  3985  01E1  29F4               	goto	l442
  3986  01E2                     l2790:	
  3987                           
  3988                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  3989  01E2  22DA  3180         	fcall	_Mrf49xaNeedsReset
  3990                           
  3991                           ;mrf49xa_data.c: 51: break;
  3992  01E4  29F4               	goto	l442
  3993  01E5                     l2794:	
  3994  01E5  0021               	movlb	1	; select bank1
  3995  01E6  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  3996                           
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 4, Range of values is 0 to 3
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte           13     7 (average)
  4002                           ; direct_byte           14     6 (fixed)
  4003                           ; jumptable            260     6 (fixed)
  4004                           ;	Chosen strategy is simple_byte
  4005  01E7  3A00               	xorlw	0	; case 0
  4006  01E8  1903               	skipnz
  4007  01E9  29E2               	goto	l2790
  4008  01EA  3A01               	xorlw	1	; case 1
  4009  01EB  1903               	skipnz
  4010  01EC  29D9               	goto	l2788
  4011  01ED  3A03               	xorlw	3	; case 2
  4012  01EE  1903               	skipnz
  4013  01EF  29D9               	goto	l2788
  4014  01F0  3A01               	xorlw	1	; case 3
  4015  01F1  1903               	skipnz
  4016  01F2  29F4               	goto	l442
  4017  01F3  29F4               	goto	l442
  4018  01F4                     l442:	
  4019                           
  4020                           ;mrf49xa_data.c: 60: }
  4021                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  4022  01F4  0020               	movlb	0	; select bank0
  4023  01F5  1BBB               	btfsc	_mrf49Status,7
  4024  01F6  2A9A               	goto	l2876
  4025  01F7  2AA9               	goto	l2878
  4026  01F8                     l2798:	
  4027                           
  4028                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  4029  01F8  22DA  3180         	fcall	_Mrf49xaNeedsReset
  4030                           
  4031                           ;mrf49xa_data.c: 76: break;
  4032  01FA  2AA9               	goto	l2878
  4033  01FB                     l2800:	
  4034                           
  4035                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  4036  01FB  22B3  3180         	fcall	_Mrf49RxByte
  4037  01FD  00A5               	movwf	Mrf49xaServe@data
  4038                           
  4039                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4040  01FE  1BBC               	btfsc	_mrf49Status+1,7
  4041  01FF  2A03               	goto	l2806
  4042  0200                     l2804:	
  4043                           
  4044                           ;mrf49xa_data.c: 84: {
  4045                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  4046  0200  22B5  3180         	fcall	_Mrf49xaModeRx
  4047                           
  4048                           ;mrf49xa_data.c: 86: break;
  4049  0202  2AA9               	goto	l2878
  4050  0203                     l2806:	
  4051                           
  4052                           ;mrf49xa_data.c: 87: }
  4053                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  4054  0203  0021               	movlb	1	; select bank1
  4055  0204  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  4056  0205  1D03               	skipz
  4057  0206  2A09               	goto	l2810
  4058  0207  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  4059  0208  2A0D               	goto	L1
  4060  0209                     l2810:	
  4061                           
  4062                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  4063  0209  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  4064  020A  1D03               	skipz
  4065  020B  2A00               	goto	l2804
  4066  020C  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  4067  020D                     L1:	
  4068  020D  00A0               	movwf	_rfTrcvStatus^(0+128)
  4069                           
  4070                           ;mrf49xa_data.c: 97: }
  4071                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  4072  020E  0A20               	incf	_rfTrcvStatus^(0+128),w
  4073  020F  0086               	movwf	6
  4074  0210  0187               	clrf	7
  4075                           
  4076                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  4077  0211  27BD  3180         	fcall	PL24	;call to abstracted procedure
  4078  0213  3E16               	addlw	22
  4079  0214  0086               	movwf	6
  4080  0215  0181               	clrf	1
  4081                           
  4082                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  4083  0216  0820               	movf	_rfTrcvStatus^(0+128),w
  4084  0217  0086               	movwf	6
  4085  0218  3004               	movlw	4
  4086  0219  0081               	movwf	1
  4087                           
  4088                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  4089  021A  3002               	movlw	2
  4090  021B  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  4091                           
  4092                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  4093  021C  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4094  021D  3980               	andlw	-128
  4095  021E  3801               	iorlw	1
  4096  021F  2A4A               	goto	L2
  4097  0220                     l2826:	
  4098                           ;mrf49xa_data.c: 105: break;
  4099                           
  4100                           
  4101                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  4102  0220  22B3  3180         	fcall	_Mrf49RxByte
  4103  0222  00A5               	movwf	Mrf49xaServe@data
  4104                           
  4105                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  4106  0223  1BBC               	btfsc	_mrf49Status+1,7
  4107  0224  2A2B               	goto	l2834
  4108                           
  4109                           ;mrf49xa_data.c: 114: {
  4110                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4111  0225  0021               	movlb	1	; select bank1
  4112  0226  0820               	movf	_rfTrcvStatus^(0+128),w
  4113  0227  0086               	movwf	6
  4114  0228  3005               	movlw	5
  4115  0229  0187               	clrf	7
  4116  022A  2A3B               	goto	L3
  4117  022B                     l2834:	
  4118                           
  4119                           ;mrf49xa_data.c: 118: }
  4120                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  4121  022B  0021               	movlb	1	; select bank1
  4122  022C  0A20               	incf	_rfTrcvStatus^(0+128),w
  4123  022D  0086               	movwf	6
  4124  022E  0187               	clrf	7
  4125  022F  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4126  0230  397F               	andlw	127
  4127  0231  0601               	xorwf	1,w
  4128  0232  1D03               	skipz
  4129  0233  2A3D               	goto	l2840
  4130                           
  4131                           ;mrf49xa_data.c: 121: {
  4132                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
  4133  0234  0820               	movf	_rfTrcvStatus^(0+128),w
  4134  0235  3E16               	addlw	22
  4135  0236  0086               	movwf	6
  4136                           
  4137                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  4138  0237  27BD  3180         	fcall	PL24	;call to abstracted procedure
  4139  0239  0086               	movwf	6
  4140  023A  3005               	movlw	5
  4141  023B                     L3:	
  4142  023B  0081               	movwf	1
  4143  023C  2A00               	goto	l2804
  4144  023D                     l2840:	
  4145                           
  4146                           ;mrf49xa_data.c: 135: else
  4147                           ;mrf49xa_data.c: 136: {
  4148                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  4149  023D  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4150  023E  397F               	andlw	127
  4151  023F  0720               	addwf	_rfTrcvStatus^(0+128),w
  4152  0240  0020               	movlb	0	; select bank0
  4153  0241  00A4               	movwf	??_Mrf49xaServe
  4154  0242  0A24               	incf	??_Mrf49xaServe,w
  4155  0243  0086               	movwf	6
  4156  0244  0187               	clrf	7
  4157  0245  0825               	movf	Mrf49xaServe@data,w
  4158  0246  0081               	movwf	1
  4159  0247  0021               	movlb	1	; select bank1
  4160  0248  2794  3180         	fcall	PL12	;call to abstracted procedure
  4161  024A                     L2:	
  4162  024A  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4163  024B  2AA9               	goto	l2878
  4164  024C                     l2844:	
  4165                           
  4166                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
  4167  024C  2794  3180         	fcall	PL12	;call to abstracted procedure
  4168  024E  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4169                           
  4170                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  4171  024F  397F               	andlw	127
  4172  0250  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  4173  0251  1D03               	skipz
  4174  0252  2A88               	goto	l2872
  4175                           
  4176                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
  4177  0253  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4178  0254  3980               	andlw	-128
  4179  0255  3831               	iorlw	49
  4180  0256  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4181  0257  2A88               	goto	l2872
  4182  0258                     l2848:	
  4183                           
  4184                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
  4185  0258  302D               	movlw	45
  4186  0259  22AE  3180         	fcall	_Mrf49TxByte
  4187                           
  4188                           ;mrf49xa_data.c: 152: break;
  4189  025B  2AA9               	goto	l2878
  4190  025C                     l2850:	
  4191                           
  4192                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
  4193  025C  30D4               	movlw	212
  4194  025D  22AE  3180         	fcall	_Mrf49TxByte
  4195                           
  4196                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
  4197  025F  307F               	movlw	127
  4198  0260  0021               	movlb	1	; select bank1
  4199  0261  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
  4200                           
  4201                           ;mrf49xa_data.c: 157: break;
  4202  0262  2AA9               	goto	l2878
  4203  0263                     l2854:	
  4204                           
  4205                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  4206  0263  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4207  0264  397F               	andlw	127
  4208  0265  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  4209  0266  0086               	movwf	6
  4210  0267  0187               	clrf	7
  4211  0268  0801               	movf	1,w
  4212  0269  22AE  3180         	fcall	_Mrf49TxByte
  4213                           
  4214                           ;mrf49xa_data.c: 162: break;
  4215  026B  2AA9               	goto	l2878
  4216  026C                     l2856:	
  4217                           
  4218                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  4219  026C  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  4220  026D  22AE  3180         	fcall	_Mrf49TxByte
  4221                           
  4222                           ;mrf49xa_data.c: 166: break;
  4223  026F  2AA9               	goto	l2878
  4224  0270                     l2858:	
  4225                           
  4226                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
  4227  0270  3000               	movlw	0
  4228  0271  22AE  3180         	fcall	_Mrf49TxByte
  4229                           
  4230                           ;mrf49xa_data.c: 170: break;
  4231  0273  2AA9               	goto	l2878
  4232  0274                     l2860:	
  4233                           
  4234                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
  4235  0274  3000               	movlw	0
  4236  0275  22AE  3180         	fcall	_Mrf49TxByte
  4237                           
  4238                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
  4239  0277  22B5  3180         	fcall	_Mrf49xaModeRx
  4240                           
  4241                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
  4242  0279  30F0               	movlw	-16
  4243  027A  0021               	movlb	1	; select bank1
  4244  027B  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  4245                           
  4246                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  4247  027C  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  4248  027D  0C89               	rrf	9,f
  4249  027E  0C89               	rrf	9,f
  4250  027F  3903               	andlw	3
  4251  0280  3A01               	xorlw	1
  4252  0281  1D03               	skipz
  4253  0282  2A86               	goto	l2868
  4254                           
  4255                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  4256  0283  3003               	movlw	3
  4257  0284  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  4258  0285  2AA9               	goto	l2878
  4259  0286                     l2868:	
  4260                           
  4261                           ;mrf49xa_data.c: 180: else
  4262                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
  4263  0286  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  4264  0287  2AA9               	goto	l2878
  4265  0288                     l2872:	
  4266  0288  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4267  0289  397F               	andlw	127
  4268                           
  4269                           ; Switch size 1, requested type "space"
  4270                           ; Number of cases is 5, Range of values is 49 to 101
  4271                           ; switch strategies available:
  4272                           ; Name         Instructions Cycles
  4273                           ; simple_byte           16     9 (average)
  4274                           ; direct_byte          115     9 (fixed)
  4275                           ; jumptable            263     9 (fixed)
  4276                           ;	Chosen strategy is simple_byte
  4277  028A  3A31               	xorlw	49	; case 49
  4278  028B  1903               	skipnz
  4279  028C  2A6C               	goto	l2856
  4280  028D  3A03               	xorlw	3	; case 50
  4281  028E  1903               	skipnz
  4282  028F  2A70               	goto	l2858
  4283  0290  3A01               	xorlw	1	; case 51
  4284  0291  1903               	skipnz
  4285  0292  2A74               	goto	l2860
  4286  0293  3A57               	xorlw	87	; case 100
  4287  0294  1903               	skipnz
  4288  0295  2A58               	goto	l2848
  4289  0296  3A01               	xorlw	1	; case 101
  4290  0297  1903               	skipnz
  4291  0298  2A5C               	goto	l2850
  4292  0299  2A63               	goto	l2854
  4293  029A                     l2876:	
  4294  029A  0021               	movlb	1	; select bank1
  4295  029B  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  4296                           
  4297                           ; Switch size 1, requested type "space"
  4298                           ; Number of cases is 4, Range of values is 0 to 3
  4299                           ; switch strategies available:
  4300                           ; Name         Instructions Cycles
  4301                           ; simple_byte           13     7 (average)
  4302                           ; direct_byte           14     6 (fixed)
  4303                           ; jumptable            260     6 (fixed)
  4304                           ;	Chosen strategy is simple_byte
  4305  029C  3A00               	xorlw	0	; case 0
  4306  029D  1903               	skipnz
  4307  029E  29F8               	goto	l2798
  4308  029F  3A01               	xorlw	1	; case 1
  4309  02A0  1903               	skipnz
  4310  02A1  29FB               	goto	l2800
  4311  02A2  3A03               	xorlw	3	; case 2
  4312  02A3  1903               	skipnz
  4313  02A4  2A20               	goto	l2826
  4314  02A5  3A01               	xorlw	1	; case 3
  4315  02A6  1903               	skipnz
  4316  02A7  2A4C               	goto	l2844
  4317  02A8  2AA9               	goto	l2878
  4318  02A9                     l2878:	
  4319                           
  4320                           ;mrf49xa_data.c: 188: }
  4321                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
  4322  02A9  0020               	movlb	0	; select bank0
  4323  02AA  0C0C               	rrf	12,w	;volatile
  4324  02AB  0C89               	rrf	9,f
  4325  02AC  3901               	andlw	1
  4326  02AD  0008               	return
  4327  02AE                     __end_of_Mrf49xaServe:	
  4328  02AE                     __ptext30:	
  4329 ;; *************** function _Mrf49TxByte *****************
  4330 ;; Defined at:
  4331 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  byte            1    wreg     unsigned char 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  byte            1    3[BANK0 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;		None               void
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 1E/1
  4342 ;;		On exit  : 1F/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4345 ;;      Params:         0       0       0       0
  4346 ;;      Locals:         0       1       0       0
  4347 ;;      Temps:          0       0       0       0
  4348 ;;      Totals:         0       1       0       0
  4349 ;;Total ram usage:        1 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    7
  4352 ;; This function calls:
  4353 ;;		_Mrf49TxCmd
  4354 ;; This function is called by:
  4355 ;;		_Mrf49xaServe
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _Mrf49TxByte
  4361  02AE                     _Mrf49TxByte:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  4365                           ;Mrf49TxByte@byte stored from wreg
  4366  02AE  0020               	movlb	0	; select bank0
  4367  02AF  00A3               	movwf	Mrf49TxByte@byte
  4368                           
  4369                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  4370  02B0  00A1               	movwf	Mrf49TxCmd@val
  4371  02B1  30B8               	movlw	184
  4372  02B2  2ADD               	ljmp	_Mrf49TxCmd
  4373  02B3                     __end_of_Mrf49TxByte:	
  4374  02B3                     __ptext33:	
  4375 ;; *************** function _Mrf49RxByte *****************
  4376 ;; Defined at:
  4377 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;		None
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      unsigned char 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0, pclath, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 1E/1
  4388 ;;		On exit  : 1F/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4391 ;;      Params:         0       0       0       0
  4392 ;;      Locals:         0       0       0       0
  4393 ;;      Temps:          0       0       0       0
  4394 ;;      Totals:         0       0       0       0
  4395 ;;Total ram usage:        0 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    7
  4398 ;; This function calls:
  4399 ;;		_Mrf49RxCmd
  4400 ;; This function is called by:
  4401 ;;		_Mrf49xaServe
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           
  4406                           ;psect for function _Mrf49RxByte
  4407  02B3                     _Mrf49RxByte:	
  4408                           
  4409                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  4410                           
  4411                           ;incstack = 0
  4412                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  4413  02B3  30B0               	movlw	176
  4414  02B4  2DEF               	ljmp	_Mrf49RxCmd
  4415  02B5                     __end_of_Mrf49RxByte:	
  4416  02B5                     __ptext29:	
  4417 ;; *************** function _Mrf49xaModeRx *****************
  4418 ;; Defined at:
  4419 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  k               1    3[BANK0 ] unsigned char 
  4424 ;; Return value:  Size  Location     Type
  4425 ;;		None               void
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0, pclath, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 1E/1
  4430 ;;		On exit  : 1F/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4433 ;;      Params:         0       0       0       0
  4434 ;;      Locals:         0       1       0       0
  4435 ;;      Temps:          0       0       0       0
  4436 ;;      Totals:         0       1       0       0
  4437 ;;Total ram usage:        1 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    7
  4440 ;; This function calls:
  4441 ;;		_Mrf49TxCmd
  4442 ;; This function is called by:
  4443 ;;		_Mrf49xaReboot
  4444 ;;		_Mrf49xaInit
  4445 ;;		_Mrf49xaServe
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           
  4450                           ;psect for function _Mrf49xaModeRx
  4451  02B5                     _Mrf49xaModeRx:	
  4452  02B5                     l2580:	
  4453                           ;incstack = 0
  4454                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  4455                           
  4456                           
  4457                           ;mrf49xa.c: 101: UI08_t k;
  4458                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  4459  02B5  0020               	movlb	0	; select bank0
  4460  02B6  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  4461  02B7  01A3               	clrf	Mrf49xaModeRx@k
  4462  02B8  3188               	movlp	high __stringtab
  4463  02B9  000A               	callw
  4464  02BA  3180               	pagesel	$	;select current page
  4465  02BB  3800               	iorlw	0
  4466  02BC  1903               	btfsc	3,2
  4467  02BD  2AD2               	goto	l211
  4468  02BE                     l2586:	
  4469  02BE  3523               	lslf	Mrf49xaModeRx@k,w
  4470  02BF  3E26               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  4471  02C0  3188               	movlp	high __stringtab
  4472  02C1  000A               	callw
  4473  02C2  3180               	pagesel	$	;select current page
  4474  02C3  00A1               	movwf	Mrf49TxCmd@val
  4475  02C4  3523               	lslf	Mrf49xaModeRx@k,w
  4476  02C5  3E25               	addlw	low (_mrfRegset_Rx| (0+32768))
  4477  02C6  3188               	movlp	high __stringtab
  4478  02C7  000A               	callw
  4479  02C8  3180               	pagesel	$	;select current page
  4480  02C9  22DD               	fcall	_Mrf49TxCmd
  4481  02CA  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  4482  02CB  0AA3               	incf	Mrf49xaModeRx@k,f
  4483  02CC  3188               	movlp	high __stringtab
  4484  02CD  000A               	callw
  4485  02CE  3180               	pagesel	$	;select current page
  4486  02CF  0223               	subwf	Mrf49xaModeRx@k,w
  4487  02D0  1C03               	skipc
  4488  02D1  2ABE               	goto	l2586
  4489  02D2                     l211:	
  4490                           
  4491                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  4492  02D2  0021               	movlb	1	; select bank1
  4493  02D3  3080               	movlw	-128
  4494  02D4  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  4495  02D5  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
  4496                           
  4497                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  4498  02D6  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  4499                           
  4500                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  4501  02D7  0020               	movlb	0	; select bank0
  4502  02D8  13BB               	bcf	_mrf49Status,7
  4503  02D9  0008               	return
  4504  02DA                     __end_of_Mrf49xaModeRx:	
  4505  02DA                     __ptext28:	
  4506 ;; *************** function _Mrf49xaNeedsReset *****************
  4507 ;; Defined at:
  4508 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;		None               void
  4515 ;; Registers used:
  4516 ;;		None
  4517 ;; Tracked objects:
  4518 ;;		On entry : 1E/1
  4519 ;;		On exit  : 1F/1
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4522 ;;      Params:         0       0       0       0
  4523 ;;      Locals:         0       0       0       0
  4524 ;;      Temps:          0       0       0       0
  4525 ;;      Totals:         0       0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    5
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_Mrf49xaServe
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _Mrf49xaNeedsReset
  4539  02DA                     _Mrf49xaNeedsReset:	
  4540                           
  4541                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _Mrf49xaNeedsReset: []
  4545  02DA  0021               	movlb	1	; select bank1
  4546  02DB  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
  4547  02DC  0008               	return
  4548  02DD                     __end_of_Mrf49xaNeedsReset:	
  4549  02DD                     __ptext31:	
  4550 ;; *************** function _Mrf49TxCmd *****************
  4551 ;; Defined at:
  4552 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  cmd             1    wreg     unsigned char 
  4555 ;;  val             1    1[BANK0 ] unsigned char 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  cmd             1    2[BANK0 ] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0, pclath, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 1F/0
  4564 ;;		On exit  : 1F/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4567 ;;      Params:         0       1       0       0
  4568 ;;      Locals:         0       1       0       0
  4569 ;;      Temps:          0       0       0       0
  4570 ;;      Totals:         0       2       0       0
  4571 ;;Total ram usage:        2 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    6
  4574 ;; This function calls:
  4575 ;;		_Mrf49SpiTx
  4576 ;; This function is called by:
  4577 ;;		_Mrf49xaModeRx
  4578 ;;		_Mrf49xaModeTx
  4579 ;;		_Mrf49xaModeSleep
  4580 ;;		_Mrf49xaInit
  4581 ;;		_Mrf49TxByte
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           
  4586                           ;psect for function _Mrf49TxCmd
  4587  02DD                     _Mrf49TxCmd:	
  4588                           
  4589                           ;incstack = 0
  4590                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  4591                           ;Mrf49TxCmd@cmd stored from wreg
  4592  02DD  00A2               	movwf	Mrf49TxCmd@cmd
  4593                           
  4594                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  4595  02DE  130E               	bcf	14,6	;volatile
  4596                           
  4597                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  4598  02DF  0822               	movf	Mrf49TxCmd@cmd,w
  4599  02E0  25F9  3180         	fcall	_Mrf49SpiTx
  4600                           
  4601                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  4602  02E2  0821               	movf	Mrf49TxCmd@val,w
  4603  02E3  25F9               	fcall	_Mrf49SpiTx
  4604                           
  4605                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  4606  02E4  170E               	bsf	14,6	;volatile
  4607  02E5  0008               	return
  4608  02E6                     __end_of_Mrf49TxCmd:	
  4609  02E6                     __ptext48:	
  4610 ;; *************** function _SoftI2cRepeatedStart *****************
  4611 ;; Defined at:
  4612 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;		None               void
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4626 ;;      Params:         0       0       0       0
  4627 ;;      Locals:         0       0       0       0
  4628 ;;      Temps:          0       0       0       0
  4629 ;;      Totals:         0       0       0       0
  4630 ;;Total ram usage:        0 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    6
  4633 ;; This function calls:
  4634 ;;		_SoftI2cNop
  4635 ;; This function is called by:
  4636 ;;		_eepromRxBytes
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _SoftI2cRepeatedStart
  4642  02E6                     _SoftI2cRepeatedStart:	
  4643                           
  4644                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4648  02E6  0021               	movlb	1	; select bank1
  4649  02E7  120D               	bcf	13,4	;volatile
  4650                           
  4651                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  4652  02E8  0022               	movlb	2	; select bank2
  4653  02E9  130D               	bcf	13,6	;volatile
  4654                           
  4655                           ;softI2c.c: 57: SoftI2cNop();
  4656  02EA  23D0  3180         	fcall	_SoftI2cNop
  4657                           
  4658                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  4659  02EC  0022               	movlb	2	; select bank2
  4660  02ED  160D               	bsf	13,4	;volatile
  4661                           
  4662                           ;softI2c.c: 60: SoftI2cNop();
  4663  02EE  23D0  3180         	fcall	_SoftI2cNop
  4664                           
  4665                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  4666  02F0  0022               	movlb	2	; select bank2
  4667  02F1  170D               	bsf	13,6	;volatile
  4668                           
  4669                           ;softI2c.c: 63: SoftI2cNop();
  4670  02F2  23D0  3180         	fcall	_SoftI2cNop
  4671                           
  4672                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  4673  02F4  0022               	movlb	2	; select bank2
  4674  02F5  120D               	bcf	13,4	;volatile
  4675                           
  4676                           ;softI2c.c: 66: SoftI2cNop();
  4677  02F6  23D0  3180         	fcall	_SoftI2cNop
  4678                           
  4679                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  4680  02F8  0022               	movlb	2	; select bank2
  4681  02F9  130D               	bcf	13,6	;volatile
  4682                           
  4683                           ;softI2c.c: 69: SoftI2cNop();
  4684  02FA  2BD0               	ljmp	l2360
  4685  02FB                     __end_of_SoftI2cRepeatedStart:	
  4686  02FB                     __ptext54:	
  4687 ;; *************** function _Mcp9800Read *****************
  4688 ;; Defined at:
  4689 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  tempL           1    7[BANK0 ] unsigned char 
  4694 ;;  tempH           1    6[BANK0 ] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  2    4[BANK0 ] unsigned int 
  4697 ;; Registers used:
  4698 ;;		wreg, status,2, status,0, pclath, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 1F/0
  4701 ;;		On exit  : 1F/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4704 ;;      Params:         0       2       0       0
  4705 ;;      Locals:         0       2       0       0
  4706 ;;      Temps:          0       0       0       0
  4707 ;;      Totals:         0       4       0       0
  4708 ;;Total ram usage:        4 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    7
  4711 ;; This function calls:
  4712 ;;		_SoftI2cRxByte
  4713 ;;		_SoftI2cStart
  4714 ;;		_SoftI2cStop
  4715 ;;		_SoftI2cTxByte
  4716 ;; This function is called by:
  4717 ;;		_main
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function _Mcp9800Read
  4723  02FB                     _Mcp9800Read:	
  4724                           
  4725                           ;mcp9800.c: 21: SoftI2cStart();
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4729  02FB  23D7  3180         	fcall	_SoftI2cStart
  4730                           
  4731                           ;mcp9800.c: 25: SoftI2cTxByte(0b10010001);
  4732  02FD  3091               	movlw	145
  4733  02FE  2369  3180         	fcall	_SoftI2cTxByte
  4734                           
  4735                           ;mcp9800.c: 26: UI08_t tempH = SoftI2cRxByte(1);
  4736  0300  3001               	movlw	1
  4737  0301  2397  3180         	fcall	_SoftI2cRxByte
  4738  0303  00A6               	movwf	Mcp9800Read@tempH
  4739                           
  4740                           ;mcp9800.c: 27: UI08_t tempL = SoftI2cRxByte(0);
  4741  0304  3000               	movlw	0
  4742  0305  2397  3180         	fcall	_SoftI2cRxByte
  4743  0307  00A7               	movwf	Mcp9800Read@tempL
  4744                           
  4745                           ;mcp9800.c: 28: SoftI2cStop();
  4746  0308  23E4               	fcall	_SoftI2cStop
  4747                           
  4748                           ;mcp9800.c: 30: return (tempH << 8) | tempL;
  4749  0309  0020               	movlb	0	; select bank0
  4750  030A  0826               	movf	Mcp9800Read@tempH,w
  4751  030B  00A5               	movwf	?_Mcp9800Read+1
  4752  030C  01A4               	clrf	?_Mcp9800Read
  4753  030D  0827               	movf	Mcp9800Read@tempL,w
  4754  030E  04A4               	iorwf	?_Mcp9800Read,f
  4755  030F  0008               	return
  4756  0310                     __end_of_Mcp9800Read:	
  4757  0310                     __ptext45:	
  4758 ;; *************** function _eepromTxBytes *****************
  4759 ;; Defined at:
  4760 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  address         2    4[BANK0 ] unsigned int 
  4763 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4764 ;;		 -> eepromTxByte@byte(1), cfgRam(9), 
  4765 ;;  size            1    7[BANK0 ] unsigned char 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;		None               void
  4770 ;; Registers used:
  4771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : 1F/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4777 ;;      Params:         0       4       0       0
  4778 ;;      Locals:         0       0       0       0
  4779 ;;      Temps:          0       0       0       0
  4780 ;;      Totals:         0       4       0       0
  4781 ;;Total ram usage:        4 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    7
  4784 ;; This function calls:
  4785 ;;		_SoftI2cStart
  4786 ;;		_SoftI2cStop
  4787 ;;		_SoftI2cTxByte
  4788 ;; This function is called by:
  4789 ;;		_CfgSave
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           
  4794                           ;psect for function _eepromTxBytes
  4795  0310                     _eepromTxBytes:	
  4796  0310                     l2558:	
  4797                           ;incstack = 0
  4798                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4799                           
  4800                           
  4801                           ;24aa64.c: 28: SoftI2cStart();
  4802  0310  23D7  3180         	fcall	_SoftI2cStart
  4803                           
  4804                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4805  0312  30A0               	movlw	160
  4806  0313  2369  3180         	fcall	_SoftI2cTxByte
  4807                           
  4808                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4809  0315  0020               	movlb	0	; select bank0
  4810  0316  0825               	movf	eepromTxBytes@address+1,w
  4811  0317  2369  3180         	fcall	_SoftI2cTxByte
  4812                           
  4813                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4814  0319  0020               	movlb	0	; select bank0
  4815  031A  0824               	movf	eepromTxBytes@address,w
  4816  031B  2369  3180         	fcall	_SoftI2cTxByte
  4817  031D                     l2566:	
  4818                           ;24aa64.c: 33: while (size != 0)
  4819                           
  4820  031D  0020               	movlb	0	; select bank0
  4821  031E  08A7               	movf	eepromTxBytes@size,f
  4822  031F  1903               	btfsc	3,2
  4823  0320  2B2B               	goto	l2568
  4824                           
  4825                           ;24aa64.c: 34: {
  4826                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4827  0321  0826               	movf	eepromTxBytes@data,w
  4828  0322  0086               	movwf	6
  4829  0323  0187               	clrf	7
  4830  0324  0801               	movf	1,w
  4831  0325  2369  3180         	fcall	_SoftI2cTxByte
  4832                           
  4833                           ;24aa64.c: 37: data++;
  4834  0327  0020               	movlb	0	; select bank0
  4835  0328  0AA6               	incf	eepromTxBytes@data,f
  4836                           
  4837                           ;24aa64.c: 38: size--;
  4838  0329  03A7               	decf	eepromTxBytes@size,f
  4839  032A  2B1D               	goto	l2566
  4840  032B                     l2568:	
  4841                           
  4842                           ;24aa64.c: 39: }
  4843                           ;24aa64.c: 40: SoftI2cStop();
  4844  032B  2BE4               	ljmp	l2404
  4845  032C                     __end_of_eepromTxBytes:	
  4846  032C                     __ptext53:	
  4847 ;; *************** function _Mcp9800Start *****************
  4848 ;; Defined at:
  4849 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  resolution      1    wreg     enum E4252
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  resolution      1    4[BANK0 ] enum E4252
  4854 ;; Return value:  Size  Location     Type
  4855 ;;		None               void
  4856 ;; Registers used:
  4857 ;;		wreg, status,2, status,0, pclath, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 1F/2
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4863 ;;      Params:         0       0       0       0
  4864 ;;      Locals:         0       1       0       0
  4865 ;;      Temps:          0       0       0       0
  4866 ;;      Totals:         0       1       0       0
  4867 ;;Total ram usage:        1 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    7
  4870 ;; This function calls:
  4871 ;;		_SoftI2cStart
  4872 ;;		_SoftI2cStop
  4873 ;;		_SoftI2cTxByte
  4874 ;; This function is called by:
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _Mcp9800Start
  4881  032C                     _Mcp9800Start:	
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4885                           ;Mcp9800Start@resolution stored from wreg
  4886  032C  0020               	movlb	0	; select bank0
  4887  032D  00A4               	movwf	Mcp9800Start@resolution
  4888                           
  4889                           ;mcp9800.c: 6: SoftI2cStart();
  4890  032E  23D7  3180         	fcall	_SoftI2cStart
  4891                           
  4892                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4893  0330  3090               	movlw	144
  4894  0331  2369  3180         	fcall	_SoftI2cTxByte
  4895                           
  4896                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4897  0333  3001               	movlw	1
  4898  0334  2369  3180         	fcall	_SoftI2cTxByte
  4899                           
  4900                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4901  0336  0020               	movlb	0	; select bank0
  4902  0337  0824               	movf	Mcp9800Start@resolution,w
  4903  0338  2369  3180         	fcall	_SoftI2cTxByte
  4904                           
  4905                           ;mcp9800.c: 10: SoftI2cStop();
  4906  033A  23E4  3180         	fcall	_SoftI2cStop
  4907                           
  4908                           ;mcp9800.c: 12: SoftI2cStart();
  4909  033C  23D7  3180         	fcall	_SoftI2cStart
  4910                           
  4911                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4912  033E  3090               	movlw	144
  4913  033F  2369  3180         	fcall	_SoftI2cTxByte
  4914                           
  4915                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4916  0341  3000               	movlw	0
  4917  0342  2369  3180         	fcall	_SoftI2cTxByte
  4918                           
  4919                           ;mcp9800.c: 15: SoftI2cStop();
  4920  0344  2BE4               	ljmp	l2404
  4921  0345                     __end_of_Mcp9800Start:	
  4922  0345                     __ptext47:	
  4923 ;; *************** function _eepromRxBytes *****************
  4924 ;; Defined at:
  4925 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  address         2    4[BANK0 ] unsigned int 
  4928 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4929 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  4930 ;;		 -> NULL(0), cfgRam(9), 
  4931 ;;  size            1    7[BANK0 ] unsigned char 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;		None               void
  4936 ;; Registers used:
  4937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 1F/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4943 ;;      Params:         0       4       0       0
  4944 ;;      Locals:         0       0       0       0
  4945 ;;      Temps:          0       0       0       0
  4946 ;;      Totals:         0       4       0       0
  4947 ;;Total ram usage:        4 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    7
  4950 ;; This function calls:
  4951 ;;		_SoftI2cRepeatedStart
  4952 ;;		_SoftI2cRxByte
  4953 ;;		_SoftI2cStart
  4954 ;;		_SoftI2cStop
  4955 ;;		_SoftI2cTxByte
  4956 ;; This function is called by:
  4957 ;;		_handleFwCmd
  4958 ;;		_CfgLoad
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _eepromRxBytes
  4964  0345                     _eepromRxBytes:	
  4965  0345                     l2546:	
  4966                           ;incstack = 0
  4967                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4968                           
  4969                           
  4970                           ;24aa64.c: 7: SoftI2cStart();
  4971  0345  23D7  3180         	fcall	_SoftI2cStart
  4972                           
  4973                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4974  0347  30A0               	movlw	160
  4975  0348  2369  3180         	fcall	_SoftI2cTxByte
  4976                           
  4977                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4978  034A  0020               	movlb	0	; select bank0
  4979  034B  0825               	movf	eepromRxBytes@address+1,w
  4980  034C  2369  3180         	fcall	_SoftI2cTxByte
  4981                           
  4982                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4983  034E  0020               	movlb	0	; select bank0
  4984  034F  0824               	movf	eepromRxBytes@address,w
  4985  0350  2369  3180         	fcall	_SoftI2cTxByte
  4986                           
  4987                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4988  0352  22E6  3180         	fcall	_SoftI2cRepeatedStart
  4989                           
  4990                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4991  0354  30A1               	movlw	161
  4992  0355  2369  3180         	fcall	_SoftI2cTxByte
  4993  0357                     l2554:	
  4994                           ;24aa64.c: 15: while (size != 0)
  4995                           
  4996  0357  0020               	movlb	0	; select bank0
  4997  0358  08A7               	movf	eepromRxBytes@size,f
  4998  0359  1903               	btfsc	3,2
  4999  035A  2B68               	goto	l2556
  5000                           
  5001                           ;24aa64.c: 16: {
  5002                           ;24aa64.c: 17: size--;
  5003  035B  03A7               	decf	eepromRxBytes@size,f
  5004                           
  5005                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  5006  035C  0826               	movf	eepromRxBytes@data,w
  5007  035D  0086               	movwf	6
  5008  035E  3000               	movlw	0
  5009  035F  0187               	clrf	7
  5010  0360  08A7               	movf	eepromRxBytes@size,f
  5011  0361  1D03               	skipz
  5012  0362  3001               	movlw	1
  5013  0363  2397  3180         	fcall	_SoftI2cRxByte
  5014  0365  0081               	movwf	1
  5015                           
  5016                           ;24aa64.c: 21: data++;
  5017  0366  0AA6               	incf	eepromRxBytes@data,f
  5018  0367  2B57               	goto	l2554
  5019  0368                     l2556:	
  5020                           
  5021                           ;24aa64.c: 22: }
  5022                           ;24aa64.c: 23: SoftI2cStop();
  5023  0368  2BE4               	ljmp	l2404
  5024  0369                     __end_of_eepromRxBytes:	
  5025  0369                     __ptext55:	
  5026 ;; *************** function _SoftI2cTxByte *****************
  5027 ;; Defined at:
  5028 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  data            1    wreg     unsigned char 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  data            1    2[BANK0 ] unsigned char 
  5033 ;;  i               1    3[BANK0 ] unsigned char 
  5034 ;;  ack             1    0        unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      unsigned char 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0, pclath, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/1
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5044 ;;      Params:         0       0       0       0
  5045 ;;      Locals:         0       3       0       0
  5046 ;;      Temps:          0       0       0       0
  5047 ;;      Totals:         0       3       0       0
  5048 ;;Total ram usage:        3 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    6
  5051 ;; This function calls:
  5052 ;;		_SoftI2cNop
  5053 ;; This function is called by:
  5054 ;;		_SoftI2cInit
  5055 ;;		_Mcp9800Start
  5056 ;;		_Mcp9800Read
  5057 ;;		_eepromRxBytes
  5058 ;;		_eepromTxBytes
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _SoftI2cTxByte
  5064  0369                     _SoftI2cTxByte:	
  5065                           
  5066                           ;incstack = 0
  5067                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  5068                           ;SoftI2cTxByte@data stored from wreg
  5069  0369  0020               	movlb	0	; select bank0
  5070  036A  00A2               	movwf	SoftI2cTxByte@data
  5071                           
  5072                           ;softI2c.c: 89: UI08_t i;
  5073                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  5074  036B  3080               	movlw	128
  5075  036C  00A3               	movwf	SoftI2cTxByte@i
  5076  036D                     l32:	
  5077                           
  5078                           ;softI2c.c: 92: {
  5079                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  5080  036D  0022               	movlb	2	; select bank2
  5081  036E  130D               	bcf	13,6	;volatile
  5082                           
  5083                           ;softI2c.c: 94: SoftI2cNop();
  5084  036F  23D0  3180         	fcall	_SoftI2cNop
  5085                           
  5086                           ;softI2c.c: 96: if(data & i)
  5087  0371  0020               	movlb	0	; select bank0
  5088  0372  0822               	movf	SoftI2cTxByte@data,w
  5089  0373  0523               	andwf	SoftI2cTxByte@i,w
  5090  0374  1903               	btfsc	3,2
  5091  0375  2B79               	goto	l34
  5092                           
  5093                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  5094  0376  0022               	movlb	2	; select bank2
  5095  0377  160D               	bsf	13,4	;volatile
  5096  0378  2B7B               	goto	l35
  5097  0379                     l34:	
  5098                           
  5099                           ;softI2c.c: 98: else
  5100                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  5101  0379  0022               	movlb	2	; select bank2
  5102  037A  120D               	bcf	13,4	;volatile
  5103  037B                     l35:	
  5104                           
  5105                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  5106  037B  0021               	movlb	1	; select bank1
  5107  037C  120D               	bcf	13,4	;volatile
  5108                           
  5109                           ;softI2c.c: 102: SoftI2cNop();
  5110  037D  23D0  3180         	fcall	_SoftI2cNop
  5111                           
  5112                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  5113  037F  0022               	movlb	2	; select bank2
  5114  0380  170D               	bsf	13,6	;volatile
  5115                           
  5116                           ;softI2c.c: 105: SoftI2cNop();
  5117  0381  23D0  3180         	fcall	_SoftI2cNop
  5118  0383  0020               	movlb	0	; select bank0
  5119  0384  36A3               	lsrf	SoftI2cTxByte@i,f
  5120  0385  08A3               	movf	SoftI2cTxByte@i,f
  5121  0386  1D03               	skipz
  5122  0387  2B6D               	goto	l32
  5123                           
  5124                           ;softI2c.c: 109: }
  5125                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  5126  0388  0022               	movlb	2	; select bank2
  5127  0389  130D               	bcf	13,6	;volatile
  5128                           
  5129                           ;softI2c.c: 113: SoftI2cNop();
  5130  038A  23D0  3180         	fcall	_SoftI2cNop
  5131                           
  5132                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  5133  038C  0021               	movlb	1	; select bank1
  5134  038D  160D               	bsf	13,4	;volatile
  5135                           
  5136                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  5137  038E  0022               	movlb	2	; select bank2
  5138  038F  170D               	bsf	13,6	;volatile
  5139                           
  5140                           ;softI2c.c: 118: SoftI2cNop();
  5141  0390  23D0  3180         	fcall	_SoftI2cNop
  5142  0392  0020               	movlb	0	; select bank0
  5143  0393  080D               	movf	13,w	;volatile
  5144                           
  5145                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  5146  0394  0022               	movlb	2	; select bank2
  5147  0395  130D               	bcf	13,6	;volatile
  5148                           
  5149                           ;softI2c.c: 123: SoftI2cNop();
  5150  0396  2BD0               	ljmp	l2360
  5151  0397                     __end_of_SoftI2cTxByte:	
  5152  0397                     __ptext58:	
  5153 ;; *************** function _SoftI2cRxByte *****************
  5154 ;; Defined at:
  5155 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  ack             1    wreg     unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  ack             1    1[BANK0 ] unsigned char 
  5160 ;;  i               1    3[BANK0 ] unsigned char 
  5161 ;;  data            1    2[BANK0 ] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      unsigned char 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, pclath, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 1F/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5171 ;;      Params:         0       0       0       0
  5172 ;;      Locals:         0       3       0       0
  5173 ;;      Temps:          0       0       0       0
  5174 ;;      Totals:         0       3       0       0
  5175 ;;Total ram usage:        3 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    6
  5178 ;; This function calls:
  5179 ;;		_SoftI2cNop
  5180 ;; This function is called by:
  5181 ;;		_Mcp9800Read
  5182 ;;		_eepromRxBytes
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           
  5187                           ;psect for function _SoftI2cRxByte
  5188  0397                     _SoftI2cRxByte:	
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  5192                           ;SoftI2cRxByte@ack stored from wreg
  5193  0397  0020               	movlb	0	; select bank0
  5194  0398  00A1               	movwf	SoftI2cRxByte@ack
  5195                           
  5196                           ;softI2c.c: 131: UI08_t data=0x00;
  5197  0399  01A2               	clrf	SoftI2cRxByte@data
  5198                           
  5199                           ;softI2c.c: 132: UI08_t i;
  5200                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  5201  039A  0022               	movlb	2	; select bank2
  5202  039B  130D               	bcf	13,6	;volatile
  5203                           
  5204                           ;softI2c.c: 135: SoftI2cNop();
  5205  039C  23D0  3180         	fcall	_SoftI2cNop
  5206                           
  5207                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  5208  039E  0021               	movlb	1	; select bank1
  5209  039F  160D               	bsf	13,4	;volatile
  5210                           
  5211                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  5212  03A0  0022               	movlb	2	; select bank2
  5213  03A1  160D               	bsf	13,4	;volatile
  5214                           
  5215                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  5216  03A2  3080               	movlw	128
  5217  03A3  0020               	movlb	0	; select bank0
  5218  03A4  00A3               	movwf	SoftI2cRxByte@i
  5219  03A5                     l39:	
  5220                           
  5221                           ;softI2c.c: 140: {
  5222                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  5223  03A5  0022               	movlb	2	; select bank2
  5224  03A6  130D               	bcf	13,6	;volatile
  5225                           
  5226                           ;softI2c.c: 142: SoftI2cNop();
  5227  03A7  23D0  3180         	fcall	_SoftI2cNop
  5228                           
  5229                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  5230  03A9  0022               	movlb	2	; select bank2
  5231  03AA  170D               	bsf	13,6	;volatile
  5232                           
  5233                           ;softI2c.c: 144: SoftI2cNop();
  5234  03AB  23D0  3180         	fcall	_SoftI2cNop
  5235                           
  5236                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  5237  03AD  0020               	movlb	0	; select bank0
  5238                           
  5239                           ;softI2c.c: 150: data |= i;
  5240  03AE  0823               	movf	SoftI2cRxByte@i,w
  5241  03AF  1A0D               	btfsc	13,4	;volatile
  5242  03B0  04A2               	iorwf	SoftI2cRxByte@data,f
  5243  03B1  36A3               	lsrf	SoftI2cRxByte@i,f
  5244  03B2  08A3               	movf	SoftI2cRxByte@i,f
  5245  03B3  1D03               	skipz
  5246  03B4  2BA5               	goto	l39
  5247                           
  5248                           ;softI2c.c: 152: }
  5249                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  5250  03B5  0022               	movlb	2	; select bank2
  5251  03B6  130D               	bcf	13,6	;volatile
  5252                           
  5253                           ;softI2c.c: 155: SoftI2cNop();
  5254  03B7  23D0  3180         	fcall	_SoftI2cNop
  5255                           
  5256                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  5257  03B9  0021               	movlb	1	; select bank1
  5258  03BA  120D               	bcf	13,4	;volatile
  5259                           
  5260                           ;softI2c.c: 158: if(ack)
  5261  03BB  0020               	movlb	0	; select bank0
  5262  03BC  0821               	movf	SoftI2cRxByte@ack,w
  5263  03BD  1903               	btfsc	3,2
  5264  03BE  2BC2               	goto	l42
  5265                           
  5266                           ;softI2c.c: 159: {
  5267                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  5268  03BF  0022               	movlb	2	; select bank2
  5269  03C0  120D               	bcf	13,4	;volatile
  5270                           
  5271                           ;softI2c.c: 161: }
  5272  03C1  2BC4               	goto	l2460
  5273  03C2                     l42:	
  5274                           
  5275                           ;softI2c.c: 162: else
  5276                           ;softI2c.c: 163: {
  5277                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  5278  03C2  0022               	movlb	2	; select bank2
  5279  03C3  160D               	bsf	13,4	;volatile
  5280  03C4                     l2460:	
  5281                           
  5282                           ;softI2c.c: 165: }
  5283                           ;softI2c.c: 166: SoftI2cNop();
  5284  03C4  23D0  3180         	fcall	_SoftI2cNop
  5285                           
  5286                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  5287  03C6  0022               	movlb	2	; select bank2
  5288  03C7  170D               	bsf	13,6	;volatile
  5289                           
  5290                           ;softI2c.c: 169: SoftI2cNop();
  5291  03C8  23D0  3180         	fcall	_SoftI2cNop
  5292                           
  5293                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  5294  03CA  0022               	movlb	2	; select bank2
  5295  03CB  130D               	bcf	13,6	;volatile
  5296                           
  5297                           ;softI2c.c: 172: SoftI2cNop();
  5298  03CC  23D0               	fcall	_SoftI2cNop
  5299                           
  5300                           ;softI2c.c: 174: return data;
  5301  03CD  0020               	movlb	0	; select bank0
  5302  03CE  0822               	movf	SoftI2cRxByte@data,w
  5303  03CF  0008               	return
  5304  03D0                     __end_of_SoftI2cRxByte:	
  5305  03D0                     __ptext59:	
  5306 ;; *************** function _SoftI2cNop *****************
  5307 ;; Defined at:
  5308 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;		None               void
  5315 ;; Registers used:
  5316 ;;		wreg
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/2
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5322 ;;      Params:         0       0       0       0
  5323 ;;      Locals:         0       0       0       0
  5324 ;;      Temps:          0       1       0       0
  5325 ;;      Totals:         0       1       0       0
  5326 ;;Total ram usage:        1 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    5
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_SoftI2cStart
  5333 ;;		_SoftI2cRepeatedStart
  5334 ;;		_SoftI2cStop
  5335 ;;		_SoftI2cTxByte
  5336 ;;		_SoftI2cRxByte
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _SoftI2cNop
  5342  03D0                     _SoftI2cNop:	
  5343  03D0                     l2360:	
  5344                           ;incstack = 0
  5345                           ; Regs used in _SoftI2cNop: [wreg]
  5346                           
  5347                           
  5348                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  5349  03D0  300A               	movlw	10
  5350  03D1  0020               	movlb	0	; select bank0
  5351  03D2  00A0               	movwf	??_SoftI2cNop
  5352  03D3                     u2417:	
  5353  03D3  0BA0               	decfsz	??_SoftI2cNop,f
  5354  03D4  2BD3               	goto	u2417
  5355  03D5  0000               	nop
  5356  03D6  0008               	return
  5357  03D7                     __end_of_SoftI2cNop:	
  5358  03D7                     __ptext57:	
  5359 ;; *************** function _SoftI2cStart *****************
  5360 ;; Defined at:
  5361 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;		None
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;		None
  5366 ;; Return value:  Size  Location     Type
  5367 ;;		None               void
  5368 ;; Registers used:
  5369 ;;		wreg, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/1
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5375 ;;      Params:         0       0       0       0
  5376 ;;      Locals:         0       0       0       0
  5377 ;;      Temps:          0       0       0       0
  5378 ;;      Totals:         0       0       0       0
  5379 ;;Total ram usage:        0 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    6
  5382 ;; This function calls:
  5383 ;;		_SoftI2cNop
  5384 ;; This function is called by:
  5385 ;;		_SoftI2cInit
  5386 ;;		_Mcp9800Start
  5387 ;;		_Mcp9800Read
  5388 ;;		_eepromRxBytes
  5389 ;;		_eepromTxBytes
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function _SoftI2cStart
  5395  03D7                     _SoftI2cStart:	
  5396                           
  5397                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  5401  03D7  0021               	movlb	1	; select bank1
  5402  03D8  120D               	bcf	13,4	;volatile
  5403                           
  5404                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  5405  03D9  0022               	movlb	2	; select bank2
  5406  03DA  170D               	bsf	13,6	;volatile
  5407                           
  5408                           ;softI2c.c: 43: SoftI2cNop();
  5409  03DB  23D0  3180         	fcall	_SoftI2cNop
  5410                           
  5411                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  5412  03DD  0022               	movlb	2	; select bank2
  5413  03DE  120D               	bcf	13,4	;volatile
  5414                           
  5415                           ;softI2c.c: 46: SoftI2cNop();
  5416  03DF  23D0  3180         	fcall	_SoftI2cNop
  5417                           
  5418                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  5419  03E1  0022               	movlb	2	; select bank2
  5420  03E2  130D               	bcf	13,6	;volatile
  5421                           
  5422                           ;softI2c.c: 48: SoftI2cNop();
  5423  03E3  2BD0               	ljmp	l2360
  5424  03E4                     __end_of_SoftI2cStart:	
  5425  03E4                     __ptext56:	
  5426 ;; *************** function _SoftI2cStop *****************
  5427 ;; Defined at:
  5428 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  5429 ;; Parameters:    Size  Location     Type
  5430 ;;		None
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;		None               void
  5435 ;; Registers used:
  5436 ;;		wreg, status,2, status,0, pclath, cstack
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/1
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5442 ;;      Params:         0       0       0       0
  5443 ;;      Locals:         0       0       0       0
  5444 ;;      Temps:          0       0       0       0
  5445 ;;      Totals:         0       0       0       0
  5446 ;;Total ram usage:        0 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    6
  5449 ;; This function calls:
  5450 ;;		_SoftI2cNop
  5451 ;; This function is called by:
  5452 ;;		_SoftI2cInit
  5453 ;;		_Mcp9800Start
  5454 ;;		_Mcp9800Read
  5455 ;;		_eepromRxBytes
  5456 ;;		_eepromTxBytes
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _SoftI2cStop
  5462  03E4                     _SoftI2cStop:	
  5463  03E4                     l2404:	
  5464                           ;incstack = 0
  5465                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5466                           
  5467                           
  5468                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  5469  03E4  0021               	movlb	1	; select bank1
  5470  03E5  120D               	bcf	13,4	;volatile
  5471                           
  5472                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  5473  03E6  0022               	movlb	2	; select bank2
  5474  03E7  120D               	bcf	13,4	;volatile
  5475                           
  5476                           ;softI2c.c: 78: SoftI2cNop();
  5477  03E8  23D0  3180         	fcall	_SoftI2cNop
  5478                           
  5479                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  5480  03EA  0022               	movlb	2	; select bank2
  5481  03EB  170D               	bsf	13,6	;volatile
  5482                           
  5483                           ;softI2c.c: 81: SoftI2cNop();
  5484  03EC  23D0  3180         	fcall	_SoftI2cNop
  5485                           
  5486                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  5487  03EE  0022               	movlb	2	; select bank2
  5488  03EF  160D               	bsf	13,4	;volatile
  5489                           
  5490                           ;softI2c.c: 83: SoftI2cNop();
  5491  03F0  23D0  3180         	fcall	_SoftI2cNop
  5492                           
  5493                           ;softI2c.c: 84: SoftI2cNop();
  5494  03F2  2BD0               	ljmp	l2360
  5495  03F3                     __end_of_SoftI2cStop:	
  5496  03F3                     __ptext13:	
  5497 ;; *************** function _PwrI2cSleep *****************
  5498 ;; Defined at:
  5499 ;;		line 73 in file "../../../src/node/power.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;		None               void
  5506 ;; Registers used:
  5507 ;;		None
  5508 ;; Tracked objects:
  5509 ;;		On entry : 1F/2
  5510 ;;		On exit  : 1F/1
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5513 ;;      Params:         0       0       0       0
  5514 ;;      Locals:         0       0       0       0
  5515 ;;      Temps:          0       0       0       0
  5516 ;;      Totals:         0       0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    5
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_main
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _PwrI2cSleep
  5529  03F3                     _PwrI2cSleep:	
  5530                           
  5531                           ;power.c: 75: LATBbits.LATB6 = 1;
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in _PwrI2cSleep: []
  5535                           
  5536                           ;power.c: 76: LATBbits.LATB4 = 1;
  5537                           
  5538                           ;power.c: 78: TRISBbits.TRISB6 = 0;
  5539                           
  5540                           ;power.c: 79: TRISBbits.TRISB4 = 0;
  5541  03F3  27B1               	fcall	PL20	;call to abstracted procedure
  5542  03F4  0008               	return
  5543  03F5                     __end_of_PwrI2cSleep:	
  5544  03F5                     __ptext4:	
  5545 ;; *************** function _PwrSensorSleep *****************
  5546 ;; Defined at:
  5547 ;;		line 139 in file "../../../src/node/power.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;		None               void
  5554 ;; Registers used:
  5555 ;;		None
  5556 ;; Tracked objects:
  5557 ;;		On entry : 1E/1
  5558 ;;		On exit  : 1F/2
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5561 ;;      Params:         0       0       0       0
  5562 ;;      Locals:         0       0       0       0
  5563 ;;      Temps:          0       0       0       0
  5564 ;;      Totals:         0       0       0       0
  5565 ;;Total ram usage:        0 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    5
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_main
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _PwrSensorSleep
  5577  03F5                     _PwrSensorSleep:	
  5578                           
  5579                           ;power.c: 141: LATCbits.LATC2 = 0;
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in _PwrSensorSleep: []
  5583  03F5  0022               	movlb	2	; select bank2
  5584  03F6  110E               	bcf	14,2	;volatile
  5585  03F7  0008               	return
  5586  03F8                     __end_of_PwrSensorSleep:	
  5587  03F8                     __ptext51:	
  5588 ;; *************** function _Mrf49xaFreePacket *****************
  5589 ;; Defined at:
  5590 ;;		line 85 in file "../../../src/devices/mrf49xa_packet.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5593 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5596 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		wreg, fsr1l, fsr1h, status,2
  5601 ;; Tracked objects:
  5602 ;;		On entry : 1F/0
  5603 ;;		On exit  : 1F/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5606 ;;      Params:         0       0       0       0
  5607 ;;      Locals:         0       1       0       0
  5608 ;;      Temps:          0       0       0       0
  5609 ;;      Totals:         0       1       0       0
  5610 ;;Total ram usage:        1 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    5
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_Mrf49xaTick
  5617 ;;		_HandlePacket
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _Mrf49xaFreePacket
  5623  03F8                     _Mrf49xaFreePacket:	
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5627                           ;Mrf49xaFreePacket@packet stored from wreg
  5628  03F8  00A0               	movwf	Mrf49xaFreePacket@packet
  5629                           
  5630                           ;mrf49xa_packet.c: 87: packet->state = PKT_FREE;
  5631  03F9  0086               	movwf	6
  5632  03FA  0187               	clrf	7
  5633  03FB  0181               	clrf	1
  5634  03FC  0008               	return
  5635  03FD                     __end_of_Mrf49xaFreePacket:	
  5636  03FD                     __ptext46:	
  5637 ;; *************** function _CfgLoad *****************
  5638 ;; Defined at:
  5639 ;;		line 19 in file "../../../src/node/config.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;		None
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;		None
  5644 ;; Return value:  Size  Location     Type
  5645 ;;		None               void
  5646 ;; Registers used:
  5647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 1E/1
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5653 ;;      Params:         0       0       0       0
  5654 ;;      Locals:         0       0       0       0
  5655 ;;      Temps:          0       0       0       0
  5656 ;;      Totals:         0       0       0       0
  5657 ;;Total ram usage:        0 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    8
  5660 ;; This function calls:
  5661 ;;		_eepromRxBytes
  5662 ;; This function is called by:
  5663 ;;		_handleCfgCmd
  5664 ;;		_main
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _CfgLoad
  5670  03FD                     _CfgLoad:	
  5671  03FD                     l2706:	
  5672                           ;incstack = 0
  5673                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5674                           
  5675                           
  5676                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  5677  03FD  0020               	movlb	0	; select bank0
  5678  03FE  3032               	movlw	_cfgRam& (0+255)
  5679  03FF  01A4               	clrf	eepromRxBytes@address
  5680  0400  01A5               	clrf	eepromRxBytes@address+1
  5681  0401  00A6               	movwf	eepromRxBytes@data
  5682  0402  3009               	movlw	9
  5683  0403  00A7               	movwf	eepromRxBytes@size
  5684  0404  2B45               	ljmp	l2546
  5685  0405                     __end_of_CfgLoad:	
  5686  0405                     __ptext23:	
  5687 ;; *************** function _Mrf49xaPacketPending *****************
  5688 ;; Defined at:
  5689 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      unsigned char 
  5696 ;; Registers used:
  5697 ;;		wreg
  5698 ;; Tracked objects:
  5699 ;;		On entry : 1F/1
  5700 ;;		On exit  : 1F/1
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5703 ;;      Params:         0       0       0       0
  5704 ;;      Locals:         0       0       0       0
  5705 ;;      Temps:          0       0       0       0
  5706 ;;      Totals:         0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    5
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_Mrf49xaTick
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _Mrf49xaPacketPending
  5719  0405                     _Mrf49xaPacketPending:	
  5720                           
  5721                           ;mrf49xa_packet.c: 8: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  5722                           ;mrf49xa_packet.c: 9: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  5726  0405  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  5727  0406  3A05               	xorlw	5
  5728  0407  1903               	skipnz
  5729  0408  3401               	retlw	1
  5730  0409  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  5731  040A  3A05               	xorlw	5
  5732  040B  1903               	btfsc	3,2
  5733                           
  5734                           ;mrf49xa_packet.c: 10: return 1;
  5735  040C  3401               	retlw	1
  5736                           
  5737                           ;mrf49xa_packet.c: 11: else
  5738                           ;mrf49xa_packet.c: 12: return 0;
  5739  040D  3400               	retlw	0
  5740  040E                     __end_of_Mrf49xaPacketPending:	
  5741  040E                     __ptext12:	
  5742 ;; *************** function _PwrI2cWake *****************
  5743 ;; Defined at:
  5744 ;;		line 82 in file "../../../src/node/power.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		None
  5753 ;; Tracked objects:
  5754 ;;		On entry : 1F/2
  5755 ;;		On exit  : 1F/2
  5756 ;;		Unchanged: 1F/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5758 ;;      Params:         0       0       0       0
  5759 ;;      Locals:         0       0       0       0
  5760 ;;      Temps:          0       0       0       0
  5761 ;;      Totals:         0       0       0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    5
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _PwrI2cWake
  5774  040E                     _PwrI2cWake:	
  5775                           
  5776                           ;incstack = 0
  5777                           ; Regs used in _PwrI2cWake: []
  5778  040E  0008               	return
  5779  040F                     __end_of_PwrI2cWake:	
  5780  040F                     __ptext1:	
  5781 ;; *************** function _RfSendSampleWeatherNode *****************
  5782 ;; Defined at:
  5783 ;;		line 33 in file "../../../src/rfstack/packets.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  temperature     2    6[BANK0 ] unsigned int 
  5786 ;;  humidity        2    8[BANK0 ] unsigned int 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  5789 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;		None               void
  5792 ;; Registers used:
  5793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 1F/0
  5796 ;;		On exit  : 1F/1
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5799 ;;      Params:         0       4       0       0
  5800 ;;      Locals:         0       1       0       0
  5801 ;;      Temps:          0       0       0       0
  5802 ;;      Totals:         0       5       0       0
  5803 ;;Total ram usage:        5 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    6
  5806 ;; This function calls:
  5807 ;;		_Mrf49xaAllocPacket
  5808 ;;		_Mrf49xaTxPacket
  5809 ;; This function is called by:
  5810 ;;		_main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           
  5815                           ;psect for function _RfSendSampleWeatherNode
  5816  040F                     _RfSendSampleWeatherNode:	
  5817                           
  5818                           ;packets.c: 35: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  5819                           
  5820                           ;incstack = 0
  5821                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5822  040F  2453  3180         	fcall	_Mrf49xaAllocPacket
  5823  0411  0020               	movlb	0	; select bank0
  5824  0412  00AA               	movwf	RfSendSampleWeatherNode@packet
  5825                           
  5826                           ;packets.c: 37: packet->packet.size = 10;
  5827  0413  0A2A               	incf	RfSendSampleWeatherNode@packet,w
  5828  0414  0086               	movwf	6
  5829  0415  300A               	movlw	10
  5830  0416  0187               	clrf	7
  5831  0417  0081               	movwf	1
  5832                           
  5833                           ;packets.c: 38: packet->packet.id = RF_APP_SAMPLE;
  5834  0418  082A               	movf	RfSendSampleWeatherNode@packet,w
  5835  0419  3E04               	addlw	4
  5836  041A  0086               	movwf	6
  5837  041B  0181               	clrf	1
  5838                           
  5839                           ;packets.c: 39: packet->packet.dst = 0xFF;
  5840  041C  082A               	movf	RfSendSampleWeatherNode@packet,w
  5841  041D  3E03               	addlw	3
  5842  041E  0086               	movwf	6
  5843  041F  30FF               	movlw	255
  5844  0420  0081               	movwf	1
  5845                           
  5846                           ;packets.c: 41: packet->packet.data[0] = 0;
  5847  0421  082A               	movf	RfSendSampleWeatherNode@packet,w
  5848  0422  3E06               	addlw	6
  5849  0423  0086               	movwf	6
  5850  0424  0181               	clrf	1
  5851                           
  5852                           ;packets.c: 42: packet->packet.data[1] = 0;
  5853  0425  082A               	movf	RfSendSampleWeatherNode@packet,w
  5854  0426  3E07               	addlw	7
  5855  0427  0086               	movwf	6
  5856  0428  0181               	clrf	1
  5857                           
  5858                           ;packets.c: 43: packet->packet.data[2] = 0;
  5859  0429  082A               	movf	RfSendSampleWeatherNode@packet,w
  5860  042A  3E08               	addlw	8
  5861  042B  0086               	movwf	6
  5862  042C  0181               	clrf	1
  5863                           
  5864                           ;packets.c: 44: packet->packet.data[3] = 0;
  5865  042D  082A               	movf	RfSendSampleWeatherNode@packet,w
  5866  042E  3E09               	addlw	9
  5867  042F  0086               	movwf	6
  5868  0430  0181               	clrf	1
  5869                           
  5870                           ;packets.c: 46: packet->packet.data[4] = 0;
  5871  0431  082A               	movf	RfSendSampleWeatherNode@packet,w
  5872  0432  3E0A               	addlw	10
  5873  0433  0086               	movwf	6
  5874  0434  0181               	clrf	1
  5875                           
  5876                           ;packets.c: 48: packet->packet.data[6] = temperature >> 8;
  5877  0435  082A               	movf	RfSendSampleWeatherNode@packet,w
  5878  0436  3E0C               	addlw	12
  5879  0437  0086               	movwf	6
  5880  0438  0827               	movf	RfSendSampleWeatherNode@temperature+1,w
  5881  0439  0081               	movwf	1
  5882                           
  5883                           ;packets.c: 49: packet->packet.data[5] = temperature & 0xFF;
  5884  043A  082A               	movf	RfSendSampleWeatherNode@packet,w
  5885  043B  3E0B               	addlw	11
  5886  043C  0086               	movwf	6
  5887  043D  0826               	movf	RfSendSampleWeatherNode@temperature,w
  5888  043E  0081               	movwf	1
  5889                           
  5890                           ;packets.c: 51: packet->packet.data[7] = 1;
  5891  043F  082A               	movf	RfSendSampleWeatherNode@packet,w
  5892  0440  3E0D               	addlw	13
  5893  0441  0086               	movwf	6
  5894  0442  0181               	clrf	1
  5895  0443  0A81               	incf	1,f
  5896                           
  5897                           ;packets.c: 53: packet->packet.data[9] = humidity >> 8;
  5898  0444  082A               	movf	RfSendSampleWeatherNode@packet,w
  5899  0445  3E0F               	addlw	15
  5900  0446  0086               	movwf	6
  5901  0447  0829               	movf	RfSendSampleWeatherNode@humidity+1,w
  5902  0448  0081               	movwf	1
  5903                           
  5904                           ;packets.c: 54: packet->packet.data[8] = humidity & 0xFF;
  5905  0449  082A               	movf	RfSendSampleWeatherNode@packet,w
  5906  044A  3E0E               	addlw	14
  5907  044B  0086               	movwf	6
  5908  044C  0828               	movf	RfSendSampleWeatherNode@humidity,w
  5909  044D  0081               	movwf	1
  5910                           
  5911                           ;packets.c: 56: Mrf49xaTxPacket(packet, 0, 1);
  5912  044E  01A0               	clrf	Mrf49xaTxPacket@response
  5913  044F  01A1               	clrf	Mrf49xaTxPacket@needAck
  5914  0450  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  5915  0451  082A               	movf	RfSendSampleWeatherNode@packet,w
  5916  0452  2D82               	ljmp	_Mrf49xaTxPacket
  5917  0453                     __end_of_RfSendSampleWeatherNode:	
  5918  0453                     __ptext2:	
  5919 ;; *************** function _Mrf49xaAllocPacket *****************
  5920 ;; Defined at:
  5921 ;;		line 107 in file "../../../src/devices/mrf49xa_packet.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;		None
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;		None
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  1    wreg      PTR struct rfTrcvPacket_
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 1F/0
  5932 ;;		On exit  : 1F/1
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5935 ;;      Params:         0       0       0       0
  5936 ;;      Locals:         0       0       0       0
  5937 ;;      Temps:          0       0       0       0
  5938 ;;      Totals:         0       0       0       0
  5939 ;;Total ram usage:        0 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    5
  5942 ;; This function calls:
  5943 ;;		Nothing
  5944 ;; This function is called by:
  5945 ;;		_RfSendSampleWeatherNode
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           
  5950                           ;psect for function _Mrf49xaAllocPacket
  5951  0453                     _Mrf49xaAllocPacket:	
  5952                           
  5953                           ;mrf49xa_packet.c: 109: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  5954                           
  5955                           ;incstack = 0
  5956                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  5957  0453  0021               	movlb	1	; select bank1
  5958  0454  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  5959  0455  1D03               	skipz
  5960  0456  2C5A               	goto	l3120
  5961                           
  5962                           ;mrf49xa_packet.c: 110: {
  5963                           ;mrf49xa_packet.c: 111: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  5964  0457  3006               	movlw	6
  5965  0458  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  5966                           
  5967                           ;mrf49xa_packet.c: 112: return &(rfTrcvStatus.rxPacket[0]);
  5968  0459  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  5969  045A                     l3120:	
  5970                           
  5971                           ;mrf49xa_packet.c: 113: }
  5972                           ;mrf49xa_packet.c: 115: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  5973  045A  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  5974  045B  1D03               	skipz
  5975  045C  3400               	retlw	0
  5976                           
  5977                           ;mrf49xa_packet.c: 116: {
  5978                           ;mrf49xa_packet.c: 117: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  5979  045D  3006               	movlw	6
  5980  045E  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  5981                           
  5982                           ;mrf49xa_packet.c: 118: return &(rfTrcvStatus.rxPacket[1]);
  5983  045F  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  5984  0460                     __end_of_Mrf49xaAllocPacket:	
  5985                           ;mrf49xa_packet.c: 119: }
  5986                           ;mrf49xa_packet.c: 121: return (0);
  5987                           
  5988  0460                     __ptext37:	
  5989 ;; *************** function _HandlePacket *****************
  5990 ;; Defined at:
  5991 ;;		line 150 in file "../../../src/rfstack/client.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5994 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  5997 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  5998 ;;  response        1    9[BANK0 ] struct .
  5999 ;; Return value:  Size  Location     Type
  6000 ;;		None               void
  6001 ;; Registers used:
  6002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 1F/0
  6005 ;;		On exit  : 1E/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6008 ;;      Params:         0       0       0       0
  6009 ;;      Locals:         0       2       0       0
  6010 ;;      Temps:          0       0       0       0
  6011 ;;      Totals:         0       2       0       0
  6012 ;;Total ram usage:        2 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:   10
  6015 ;; This function calls:
  6016 ;;		_Mrf49xaFreePacket
  6017 ;;		_Mrf49xaTxAck
  6018 ;;		_Mrf49xaTxPacket
  6019 ;;		_handleCfgCmd
  6020 ;;		_handleCfgRead
  6021 ;;		_handleCfgWrite
  6022 ;;		_handleFwCmd
  6023 ;; This function is called by:
  6024 ;;		_Mrf49xaTick
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           
  6029                           ;psect for function _HandlePacket
  6030  0460                     _HandlePacket:	
  6031                           
  6032                           ;incstack = 0
  6033                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6034                           ;HandlePacket@packet stored from wreg
  6035  0460  00AA               	movwf	HandlePacket@packet
  6036                           
  6037                           ;client.c: 153: struct
  6038                           ;client.c: 154: {
  6039                           ;client.c: 155: bool_t needAck:1;
  6040                           ;client.c: 156: bool_t sendAck:1;
  6041                           ;client.c: 157: bool_t sendMsg:1;
  6042                           ;client.c: 158: } response;
  6043                           ;client.c: 161: switch (packet->packet.id)
  6044  0461  2C93               	goto	l3156
  6045  0462                     l3132:	
  6046                           
  6047                           ;client.c: 164: packet->packet.data[0] = 2;
  6048  0462  082A               	movf	HandlePacket@packet,w
  6049  0463  3E06               	addlw	6
  6050  0464  0086               	movwf	6
  6051  0465  3002               	movlw	2
  6052  0466  0187               	clrf	7
  6053  0467  0081               	movwf	1
  6054  0468                     l3134:	
  6055                           
  6056                           ;client.c: 165: response.sendMsg = 1;
  6057  0468  0020               	movlb	0	; select bank0
  6058  0469  1529               	bsf	HandlePacket@response,2
  6059                           
  6060                           ;client.c: 166: break;
  6061  046A  2CB1               	goto	l555
  6062  046B                     l3136:	
  6063                           
  6064                           ;client.c: 169: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  6065                           ;client.c: 170: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  6066  046B  082A               	movf	HandlePacket@packet,w
  6067  046C  3E07               	addlw	7
  6068  046D  0086               	movwf	6
  6069  046E  0187               	clrf	7
  6070  046F  0021               	movlb	1	; select bank1
  6071  0470  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  6072  0471  0601               	xorwf	1,w
  6073  0472  1D03               	skipz
  6074  0473  2CB1               	goto	l555
  6075  0474  0020               	movlb	0	; select bank0
  6076  0475  082A               	movf	HandlePacket@packet,w
  6077  0476  3E06               	addlw	6
  6078  0477  0086               	movwf	6
  6079  0478  0021               	movlb	1	; select bank1
  6080  0479  0855               	movf	(_rfTrcvStatus^(0+128)+53),w
  6081  047A  0601               	xorwf	1,w
  6082  047B  1D03               	skipz
  6083  047C  2CB1               	goto	l555
  6084                           
  6085                           ;client.c: 171: {
  6086                           ;client.c: 172: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  6087  047D  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  6088  047E  393F               	andlw	-193
  6089  047F  3880               	iorlw	128
  6090  0480  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  6091  0481  2CB1               	goto	l555
  6092  0482                     l558:	
  6093                           ;client.c: 177: syncedTime = *((uint32_t*) packet->packet.data);
  6094                           
  6095                           
  6096                           ;client.c: 178: response.sendAck = 1;
  6097  0482  14A9               	bsf	HandlePacket@response,1
  6098                           
  6099                           ;client.c: 179: break;
  6100  0483  2CB1               	goto	l555
  6101  0484                     l3142:	
  6102                           
  6103                           ;client.c: 189: handleCfgCmd(packet);
  6104  0484  082A               	movf	HandlePacket@packet,w
  6105  0485  24C2  3180         	fcall	_handleCfgCmd
  6106  0487  2C68               	goto	l3134
  6107  0488                     l3146:	
  6108                           
  6109                           ;client.c: 195: handleCfgWrite(packet);
  6110  0488  082A               	movf	HandlePacket@packet,w
  6111  0489  252D  3180         	fcall	_handleCfgWrite
  6112  048B                     l562:	
  6113                           ;client.c: 196: case RF_CFG_READ:
  6114                           
  6115                           
  6116                           ;client.c: 197: handleCfgRead(packet);
  6117  048B  082A               	movf	HandlePacket@packet,w
  6118  048C  24EA  3180         	fcall	_handleCfgRead
  6119  048E  2C68               	goto	l3134
  6120  048F                     l3150:	
  6121                           
  6122                           ;client.c: 204: handleFwCmd(packet);
  6123  048F  082A               	movf	HandlePacket@packet,w
  6124  0490  2561  3180         	fcall	_handleFwCmd
  6125  0492  2C68               	goto	l3134
  6126  0493                     l3156:	
  6127  0493  082A               	movf	HandlePacket@packet,w
  6128  0494  3E04               	addlw	4
  6129  0495  0086               	movwf	6
  6130  0496  0187               	clrf	7
  6131  0497  0801               	movf	1,w
  6132                           
  6133                           ; Switch size 1, requested type "space"
  6134                           ; Number of cases is 8, Range of values is 160 to 192
  6135                           ; switch strategies available:
  6136                           ; Name         Instructions Cycles
  6137                           ; simple_byte           25    13 (average)
  6138                           ; direct_byte           75     9 (fixed)
  6139                           ; jumptable            263     9 (fixed)
  6140                           ;	Chosen strategy is simple_byte
  6141  0498  3AA0               	xorlw	160	; case 160
  6142  0499  1903               	skipnz
  6143  049A  2C62               	goto	l3132
  6144  049B  3A01               	xorlw	1	; case 161
  6145  049C  1903               	skipnz
  6146  049D  2C6B               	goto	l3136
  6147  049E  3A03               	xorlw	3	; case 162
  6148  049F  1903               	skipnz
  6149  04A0  2C82               	goto	l558
  6150  04A1  3A01               	xorlw	1	; case 163
  6151  04A2  1903               	skipnz
  6152  04A3  2CB1               	goto	l555
  6153  04A4  3A13               	xorlw	19	; case 176
  6154  04A5  1903               	skipnz
  6155  04A6  2C84               	goto	l3142
  6156  04A7  3A01               	xorlw	1	; case 177
  6157  04A8  1903               	skipnz
  6158  04A9  2C88               	goto	l3146
  6159  04AA  3A03               	xorlw	3	; case 178
  6160  04AB  1903               	skipnz
  6161  04AC  2C8B               	goto	l562
  6162  04AD  3A72               	xorlw	114	; case 192
  6163  04AE  1903               	skipnz
  6164  04AF  2C8F               	goto	l3150
  6165  04B0  2CB1               	goto	l555
  6166  04B1                     l555:	
  6167                           
  6168                           ;client.c: 228: if (response.sendMsg)
  6169  04B1  0020               	movlb	0	; select bank0
  6170  04B2  1D29               	btfss	HandlePacket@response,2
  6171  04B3  2CBC               	goto	l564
  6172  04B4  3000               	movlw	0
  6173                           
  6174                           ;client.c: 229: Mrf49xaTxPacket(packet, 1, response.needAck);
  6175  04B5  01A0               	clrf	Mrf49xaTxPacket@response
  6176  04B6  0AA0               	incf	Mrf49xaTxPacket@response,f
  6177  04B7  1829               	btfsc	HandlePacket@response,0
  6178  04B8  3001               	movlw	1
  6179  04B9  00A1               	movwf	Mrf49xaTxPacket@needAck
  6180  04BA  082A               	movf	HandlePacket@packet,w
  6181  04BB  2D82               	ljmp	_Mrf49xaTxPacket
  6182  04BC                     l564:	
  6183                           
  6184                           ;client.c: 230: else if (response.sendAck)
  6185  04BC  1CA9               	btfss	HandlePacket@response,1
  6186  04BD  2CC0               	goto	l3162
  6187                           
  6188                           ;client.c: 231: Mrf49xaTxAck(packet);
  6189  04BE  082A               	movf	HandlePacket@packet,w
  6190  04BF  2DC8               	ljmp	_Mrf49xaTxAck
  6191  04C0                     l3162:	
  6192                           
  6193                           ;client.c: 232: else
  6194                           ;client.c: 233: Mrf49xaFreePacket(packet);
  6195  04C0  082A               	movf	HandlePacket@packet,w
  6196  04C1  2BF8               	ljmp	_Mrf49xaFreePacket
  6197  04C2                     __end_of_HandlePacket:	
  6198  04C2                     __ptext43:	
  6199 ;; *************** function _handleCfgCmd *****************
  6200 ;; Defined at:
  6201 ;;		line 124 in file "../../../src/rfstack/client.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6204 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  6207 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;		None               void
  6210 ;; Registers used:
  6211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 1F/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6217 ;;      Params:         0       0       0       0
  6218 ;;      Locals:         0       1       0       0
  6219 ;;      Temps:          0       0       0       0
  6220 ;;      Totals:         0       1       0       0
  6221 ;;Total ram usage:        1 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    9
  6224 ;; This function calls:
  6225 ;;		_CfgLoad
  6226 ;;		_CfgSave
  6227 ;; This function is called by:
  6228 ;;		_HandlePacket
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           
  6233                           ;psect for function _handleCfgCmd
  6234  04C2                     _handleCfgCmd:	
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6238                           ;handleCfgCmd@packet stored from wreg
  6239  04C2  00A8               	movwf	handleCfgCmd@packet
  6240                           
  6241                           ;client.c: 126: switch (packet->packet.data[0])
  6242  04C3  2CD9               	goto	l2966
  6243  04C4                     l2956:	
  6244                           
  6245                           ;client.c: 129: CfgSave();
  6246  04C4  2DE8               	ljmp	l2704
  6247  04C5                     l2958:	
  6248                           ;client.c: 130: break;
  6249                           
  6250                           
  6251                           ;client.c: 133: CfgLoad();
  6252  04C5  2BFD               	ljmp	l2706
  6253  04C6                     l2960:	
  6254                           ;client.c: 134: break;
  6255                           
  6256                           
  6257                           ;client.c: 137: packet->packet.size = 2;
  6258  04C6  0A28               	incf	handleCfgCmd@packet,w
  6259  04C7  0086               	movwf	6
  6260  04C8  3002               	movlw	2
  6261  04C9  27AB               	fcall	PL18	;call to abstracted procedure
  6262  04CA  3002               	movlw	2
  6263  04CB  0081               	movwf	1
  6264                           
  6265                           ;client.c: 139: break;
  6266  04CC  0008               	return
  6267  04CD                     l2962:	
  6268                           
  6269                           ;client.c: 142: packet->packet.size = 3;
  6270  04CD  0A28               	incf	handleCfgCmd@packet,w
  6271  04CE  0086               	movwf	6
  6272  04CF  3003               	movlw	3
  6273                           
  6274                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  6275  04D0  27AB               	fcall	PL18	;call to abstracted procedure
  6276  04D1  083A               	movf	_cfgRam+8,w
  6277  04D2  0081               	movwf	1
  6278                           
  6279                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  6280  04D3  0828               	movf	handleCfgCmd@packet,w
  6281  04D4  3E08               	addlw	8
  6282  04D5  0086               	movwf	6
  6283  04D6  0839               	movf	_cfgRam+7,w
  6284  04D7  0081               	movwf	1
  6285                           
  6286                           ;client.c: 145: break;
  6287  04D8  0008               	return
  6288  04D9                     l2966:	
  6289  04D9  0828               	movf	handleCfgCmd@packet,w
  6290  04DA  27C8  3180         	fcall	PL28	;call to abstracted procedure
  6291                           
  6292                           ; Switch size 1, requested type "space"
  6293                           ; Number of cases is 4, Range of values is 1 to 4
  6294                           ; switch strategies available:
  6295                           ; Name         Instructions Cycles
  6296                           ; simple_byte           13     7 (average)
  6297                           ; direct_byte           17     9 (fixed)
  6298                           ; jumptable            263     9 (fixed)
  6299                           ;	Chosen strategy is simple_byte
  6300  04DC  3A01               	xorlw	1	; case 1
  6301  04DD  1903               	skipnz
  6302  04DE  2CC4               	goto	l2956
  6303  04DF  3A03               	xorlw	3	; case 2
  6304  04E0  1903               	skipnz
  6305  04E1  2CC5               	goto	l2958
  6306  04E2  3A01               	xorlw	1	; case 3
  6307  04E3  1903               	skipnz
  6308  04E4  2CC6               	goto	l2960
  6309  04E5  3A07               	xorlw	7	; case 4
  6310  04E6  1903               	skipnz
  6311  04E7  2CCD               	goto	l2962
  6312  04E8  2CE9               	goto	l550
  6313  04E9                     l550:	
  6314  04E9  0008               	return
  6315  04EA                     __end_of_handleCfgCmd:	
  6316  04EA                     __ptext40:	
  6317 ;; *************** function _handleCfgRead *****************
  6318 ;; Defined at:
  6319 ;;		line 102 in file "../../../src/rfstack/client.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6322 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  6325 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6326 ;;  index           1    7[BANK0 ] unsigned char 
  6327 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;		None               void
  6330 ;; Registers used:
  6331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 1F/0
  6334 ;;		On exit  : 1F/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6337 ;;      Params:         0       0       0       0
  6338 ;;      Locals:         0       3       0       0
  6339 ;;      Temps:          0       0       0       0
  6340 ;;      Totals:         0       3       0       0
  6341 ;;Total ram usage:        3 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    6
  6344 ;; This function calls:
  6345 ;;		_CfgGetSizeByType
  6346 ;;		_memcpy
  6347 ;; This function is called by:
  6348 ;;		_HandlePacket
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _handleCfgRead
  6354  04EA                     _handleCfgRead:	
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6358                           ;handleCfgRead@packet stored from wreg
  6359  04EA  00A8               	movwf	handleCfgRead@packet
  6360                           
  6361                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  6362  04EB  0086               	movwf	6
  6363  04EC  0187               	clrf	7
  6364  04ED  3F46               	moviw [6]fsr1
  6365  04EE  00A7               	movwf	handleCfgRead@index
  6366                           
  6367                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  6368  04EF  0727               	addwf	handleCfgRead@index,w
  6369  04F0  0727               	addwf	handleCfgRead@index,w
  6370  04F1  3E3F               	addlw	low (_parameters| (0+32768))
  6371  04F2  3188               	movlp	high __stringtab
  6372  04F3  000A               	callw
  6373  04F4  3180               	pagesel	$	;select current page
  6374  04F5  251B               	fcall	_CfgGetSizeByType
  6375  04F6  00A6               	movwf	handleCfgRead@nrOfBytes
  6376                           
  6377                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  6378  04F7  0A28               	incf	handleCfgRead@packet,w
  6379  04F8  0086               	movwf	6
  6380  04F9  0187               	clrf	7
  6381  04FA  0826               	movf	handleCfgRead@nrOfBytes,w
  6382  04FB  3E02               	addlw	2
  6383  04FC  0081               	movwf	1
  6384                           
  6385                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  6386  04FD  0828               	movf	handleCfgRead@packet,w
  6387  04FE  3E04               	addlw	4
  6388  04FF  0086               	movwf	6
  6389  0500  30B2               	movlw	178
  6390  0501  0081               	movwf	1
  6391                           
  6392                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  6393  0502  0828               	movf	handleCfgRead@packet,w
  6394  0503  3E07               	addlw	7
  6395  0504  0086               	movwf	6
  6396  0505  0827               	movf	handleCfgRead@index,w
  6397  0506  0727               	addwf	handleCfgRead@index,w
  6398  0507  0727               	addwf	handleCfgRead@index,w
  6399  0508  3E40               	addlw	low ((_parameters| (0+32768)+1))
  6400  0509  3188               	movlp	high __stringtab
  6401  050A  000A               	callw
  6402  050B  3180               	pagesel	$	;select current page
  6403  050C  0081               	movwf	1
  6404                           
  6405                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  6406  050D  0827               	movf	handleCfgRead@index,w
  6407  050E  0727               	addwf	handleCfgRead@index,w
  6408  050F  0727               	addwf	handleCfgRead@index,w
  6409  0510  3E41               	addlw	low ((_parameters| (0+32768)+2))
  6410  0511  3188               	movlp	high __stringtab
  6411  0512  000A               	callw
  6412  0513  3180               	pagesel	$	;select current page
  6413  0514  00A0               	movwf	memcpy@s1
  6414  0515  0826               	movf	handleCfgRead@nrOfBytes,w
  6415  0516  00A1               	movwf	memcpy@n
  6416  0517  01A2               	clrf	memcpy@n+1
  6417  0518  0828               	movf	handleCfgRead@packet,w
  6418  0519  3E08               	addlw	8
  6419  051A  2D48               	ljmp	_memcpy
  6420  051B                     __end_of_handleCfgRead:	
  6421  051B                     __ptext42:	
  6422 ;; *************** function _CfgGetSizeByType *****************
  6423 ;; Defined at:
  6424 ;;		line 29 in file "../../../src/node/config.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  type            1    wreg     enum E4252
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  type            1    0[BANK0 ] enum E4252
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      unsigned char 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6433 ;; Tracked objects:
  6434 ;;		On entry : 1F/0
  6435 ;;		On exit  : 1F/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6438 ;;      Params:         0       0       0       0
  6439 ;;      Locals:         0       1       0       0
  6440 ;;      Temps:          0       0       0       0
  6441 ;;      Totals:         0       1       0       0
  6442 ;;Total ram usage:        1 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    5
  6445 ;; This function calls:
  6446 ;;		Nothing
  6447 ;; This function is called by:
  6448 ;;		_handleCfgRead
  6449 ;;		_handleCfgWrite
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           
  6454                           ;psect for function _CfgGetSizeByType
  6455  051B                     _CfgGetSizeByType:	
  6456                           
  6457                           ;incstack = 0
  6458                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  6459                           ;CfgGetSizeByType@type stored from wreg
  6460  051B  00A0               	movwf	CfgGetSizeByType@type
  6461                           
  6462                           ;config.c: 31: switch(type)
  6463  051C  2D21               	goto	l2692
  6464  051D                     l2674:	
  6465  051D  3401               	retlw	1
  6466  051E                     l2678:	
  6467  051E  3402               	retlw	2
  6468  051F                     l2682:	
  6469  051F  3404               	retlw	4
  6470  0520                     l2686:	
  6471  0520  3400               	retlw	0
  6472  0521                     l2692:	
  6473  0521  0820               	movf	CfgGetSizeByType@type,w
  6474                           
  6475                           ; Switch size 1, requested type "space"
  6476                           ; Number of cases is 3, Range of values is 0 to 2
  6477                           ; switch strategies available:
  6478                           ; Name         Instructions Cycles
  6479                           ; simple_byte           10     6 (average)
  6480                           ; direct_byte           12     6 (fixed)
  6481                           ; jumptable            260     6 (fixed)
  6482                           ;	Chosen strategy is simple_byte
  6483  0522  3A00               	xorlw	0	; case 0
  6484  0523  1903               	skipnz
  6485  0524  2D1D               	goto	l2674
  6486  0525  3A01               	xorlw	1	; case 1
  6487  0526  1903               	skipnz
  6488  0527  2D1E               	goto	l2678
  6489  0528  3A03               	xorlw	3	; case 2
  6490  0529  1903               	skipnz
  6491  052A  2D1F               	goto	l2682
  6492  052B  2D20               	goto	l2686
  6493  052C  0008               	return
  6494  052D                     __end_of_CfgGetSizeByType:	
  6495  052D                     __ptext39:	
  6496 ;; *************** function _handleCfgWrite *****************
  6497 ;; Defined at:
  6498 ;;		line 115 in file "../../../src/rfstack/client.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6501 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  6504 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6505 ;;  index           1    7[BANK0 ] unsigned char 
  6506 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;		None               void
  6509 ;; Registers used:
  6510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 1F/0
  6513 ;;		On exit  : 1F/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6516 ;;      Params:         0       0       0       0
  6517 ;;      Locals:         0       3       0       0
  6518 ;;      Temps:          0       0       0       0
  6519 ;;      Totals:         0       3       0       0
  6520 ;;Total ram usage:        3 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    6
  6523 ;; This function calls:
  6524 ;;		_CfgGetSizeByType
  6525 ;;		_memcpy
  6526 ;; This function is called by:
  6527 ;;		_HandlePacket
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           
  6532                           ;psect for function _handleCfgWrite
  6533  052D                     _handleCfgWrite:	
  6534                           
  6535                           ;incstack = 0
  6536                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6537                           ;handleCfgWrite@packet stored from wreg
  6538  052D  00A8               	movwf	handleCfgWrite@packet
  6539                           
  6540                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  6541  052E  0086               	movwf	6
  6542  052F  0187               	clrf	7
  6543  0530  3F46               	moviw [6]fsr1
  6544  0531  00A7               	movwf	handleCfgWrite@index
  6545                           
  6546                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  6547  0532  0727               	addwf	handleCfgWrite@index,w
  6548  0533  0727               	addwf	handleCfgWrite@index,w
  6549  0534  3E3F               	addlw	low (_parameters| (0+32768))
  6550  0535  3188               	movlp	high __stringtab
  6551  0536  000A               	callw
  6552  0537  3180               	pagesel	$	;select current page
  6553  0538  251B               	fcall	_CfgGetSizeByType
  6554  0539  00A6               	movwf	handleCfgWrite@nrOfBytes
  6555                           
  6556                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  6557  053A  0828               	movf	handleCfgWrite@packet,w
  6558  053B  3E07               	addlw	7
  6559  053C  00A0               	movwf	memcpy@s1
  6560  053D  0826               	movf	handleCfgWrite@nrOfBytes,w
  6561  053E  00A1               	movwf	memcpy@n
  6562  053F  01A2               	clrf	memcpy@n+1
  6563  0540  0827               	movf	handleCfgWrite@index,w
  6564  0541  0727               	addwf	handleCfgWrite@index,w
  6565  0542  0727               	addwf	handleCfgWrite@index,w
  6566  0543  3E41               	addlw	low ((_parameters| (0+32768)+2))
  6567  0544  3188               	movlp	high __stringtab
  6568  0545  000A               	callw
  6569  0546  3180               	pagesel	$	;select current page
  6570  0547  2D48               	ljmp	_memcpy
  6571  0548                     __end_of_handleCfgWrite:	
  6572  0548                     __ptext41:	
  6573 ;; *************** function _memcpy *****************
  6574 ;; Defined at:
  6575 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\memcpy.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  d1              1    wreg     PTR void 
  6578 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  6579 ;;		 -> cfgRam(9), 
  6580 ;;  s1              1    0[BANK0 ] PTR const void 
  6581 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), NULL(0), 
  6582 ;;		 -> cfgRam(9), 
  6583 ;;  n               2    1[BANK0 ] unsigned int 
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;  d1              1    5[BANK0 ] PTR void 
  6586 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  6587 ;;		 -> cfgRam(9), 
  6588 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  6589 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgWrite@packet..(21), NULL(0), 
  6590 ;;		 -> cfgRam(9), 
  6591 ;;  d               1    3[BANK0 ] PTR unsigned char 
  6592 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleCfgRead@packet..(21), NULL(0), 
  6593 ;;		 -> cfgRam(9), 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      PTR void 
  6596 ;; Registers used:
  6597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6598 ;; Tracked objects:
  6599 ;;		On entry : 1F/0
  6600 ;;		On exit  : 1F/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6603 ;;      Params:         0       3       0       0
  6604 ;;      Locals:         0       3       0       0
  6605 ;;      Temps:          0       0       0       0
  6606 ;;      Totals:         0       6       0       0
  6607 ;;Total ram usage:        6 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    5
  6610 ;; This function calls:
  6611 ;;		Nothing
  6612 ;; This function is called by:
  6613 ;;		_handleCfgRead
  6614 ;;		_handleCfgWrite
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           
  6619                           ;psect for function _memcpy
  6620  0548                     _memcpy:	
  6621                           
  6622                           ;incstack = 0
  6623                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  6624                           ;memcpy@d1 stored from wreg
  6625  0548  00A5               	movwf	memcpy@d1
  6626  0549  0820               	movf	memcpy@s1,w
  6627  054A  00A4               	movwf	memcpy@s
  6628  054B  0825               	movf	memcpy@d1,w
  6629  054C  00A3               	movwf	memcpy@d
  6630  054D                     l2702:	
  6631  054D  3001               	movlw	1
  6632  054E  02A1               	subwf	memcpy@n,f
  6633  054F  3000               	movlw	0
  6634  0550  3BA2               	subwfb	memcpy@n+1,f
  6635  0551  0A21               	incf	memcpy@n,w
  6636  0552  1903               	skipnz
  6637  0553  0A22               	incf	memcpy@n+1,w
  6638  0554  1903               	btfsc	3,2
  6639  0555  0008               	return
  6640  0556  0823               	movf	memcpy@d,w
  6641  0557  0086               	movwf	6
  6642  0558  0187               	clrf	7
  6643  0559  0824               	movf	memcpy@s,w
  6644  055A  0084               	movwf	4
  6645  055B  0185               	clrf	5
  6646  055C  0800               	movf	0,w
  6647  055D  0081               	movwf	1
  6648  055E  0AA4               	incf	memcpy@s,f
  6649  055F  0AA3               	incf	memcpy@d,f
  6650  0560  2D4D               	goto	l2702
  6651  0561                     __end_of_memcpy:	
  6652  0561                     __ptext38:	
  6653 ;; *************** function _handleFwCmd *****************
  6654 ;; Defined at:
  6655 ;;		line 8 in file "../../../src/rfstack/client.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6658 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  6661 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;		None               void
  6664 ;; Registers used:
  6665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 1F/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6671 ;;      Params:         0       0       0       0
  6672 ;;      Locals:         0       1       0       0
  6673 ;;      Temps:          0       0       0       0
  6674 ;;      Totals:         0       1       0       0
  6675 ;;Total ram usage:        1 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    8
  6678 ;; This function calls:
  6679 ;;		_eepromRxBytes
  6680 ;; This function is called by:
  6681 ;;		_HandlePacket
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _handleFwCmd
  6687  0561                     _handleFwCmd:	
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6691                           ;handleFwCmd@packet stored from wreg
  6692  0561  00A8               	movwf	handleFwCmd@packet
  6693                           
  6694                           ;client.c: 23: break;
  6695                           
  6696                           ;client.c: 10: switch(packet->packet.data[0])
  6697  0562  27C8  3180         	fcall	PL28	;call to abstracted procedure
  6698                           
  6699                           ; Switch size 1, requested type "space"
  6700                           ; Number of cases is 2, Range of values is 0 to 1
  6701                           ; switch strategies available:
  6702                           ; Name         Instructions Cycles
  6703                           ; simple_byte            7     4 (average)
  6704                           ; direct_byte           10     6 (fixed)
  6705                           ; jumptable            260     6 (fixed)
  6706                           ;	Chosen strategy is simple_byte
  6707  0564  3A00               	xorlw	0	; case 0
  6708  0565  1903               	skipnz
  6709  0566  2D81               	goto	l535
  6710  0567  3A01               	xorlw	1	; case 1
  6711  0568  1903               	skipnz
  6712  0569  2D6B               	goto	l2924
  6713  056A  2D81               	goto	l535
  6714  056B                     l2924:	
  6715                           
  6716                           ;client.c: 17: packet->packet.size = 5;
  6717  056B  0A28               	incf	handleFwCmd@packet,w
  6718  056C  0086               	movwf	6
  6719  056D  3005               	movlw	5
  6720  056E  0187               	clrf	7
  6721  056F  0081               	movwf	1
  6722                           
  6723                           ;client.c: 18: packet->packet.data[1] = 0;
  6724  0570  0828               	movf	handleFwCmd@packet,w
  6725  0571  3E07               	addlw	7
  6726  0572  0086               	movwf	6
  6727  0573  0181               	clrf	1
  6728                           
  6729                           ;client.c: 19: packet->packet.data[2] = 1;
  6730  0574  0828               	movf	handleFwCmd@packet,w
  6731  0575  3E08               	addlw	8
  6732  0576  0086               	movwf	6
  6733  0577  0181               	clrf	1
  6734  0578  0A81               	incf	1,f
  6735                           
  6736                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  6737  0579  01A4               	clrf	eepromRxBytes@address
  6738  057A  01A5               	clrf	eepromRxBytes@address+1
  6739  057B  0828               	movf	handleFwCmd@packet,w
  6740  057C  3E09               	addlw	9
  6741  057D  00A6               	movwf	eepromRxBytes@data
  6742  057E  3002               	movlw	2
  6743  057F  00A7               	movwf	eepromRxBytes@size
  6744  0580  2B45               	ljmp	l2546
  6745  0581                     l535:	
  6746  0581  0008               	return
  6747  0582                     __end_of_handleFwCmd:	
  6748  0582                     __ptext50:	
  6749 ;; *************** function _Mrf49xaTxPacket *****************
  6750 ;; Defined at:
  6751 ;;		line 27 in file "../../../src/devices/mrf49xa_packet.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6754 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6755 ;;  response        1    0[BANK0 ] unsigned char 
  6756 ;;  needAck         1    1[BANK0 ] unsigned char 
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6759 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6760 ;;  i               1    4[BANK0 ] unsigned char 
  6761 ;;  crc             1    3[BANK0 ] unsigned char 
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  1    wreg      unsigned char 
  6764 ;; Registers used:
  6765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6766 ;; Tracked objects:
  6767 ;;		On entry : 1F/0
  6768 ;;		On exit  : 1F/1
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6771 ;;      Params:         0       2       0       0
  6772 ;;      Locals:         0       3       0       0
  6773 ;;      Temps:          0       1       0       0
  6774 ;;      Totals:         0       6       0       0
  6775 ;;Total ram usage:        6 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    5
  6778 ;; This function calls:
  6779 ;;		Nothing
  6780 ;; This function is called by:
  6781 ;;		_Mrf49xaTxAck
  6782 ;;		_HandlePacket
  6783 ;;		_RfSendSampleWeatherNode
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           
  6788                           ;psect for function _Mrf49xaTxPacket
  6789  0582                     _Mrf49xaTxPacket:	
  6790                           
  6791                           ;incstack = 0
  6792                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6793                           ;Mrf49xaTxPacket@packet stored from wreg
  6794  0582  00A5               	movwf	Mrf49xaTxPacket@packet
  6795  0583  3031               	movlw	49
  6796                           
  6797                           ;mrf49xa_packet.c: 29: uint8_t i, crc = 0;
  6798  0584  01A3               	clrf	Mrf49xaTxPacket@crc
  6799                           
  6800                           ;mrf49xa_packet.c: 31: if (&(rfTrcvStatus.txPacket) == packet)
  6801  0585  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6802  0586  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6803  0587  1D03               	skipz
  6804  0588  2D92               	goto	l2626
  6805                           
  6806                           ;mrf49xa_packet.c: 32: {
  6807                           ;mrf49xa_packet.c: 33: if (response)
  6808  0589  0820               	movf	Mrf49xaTxPacket@response,w
  6809  058A  1903               	btfsc	3,2
  6810  058B  2D8F               	goto	l2610
  6811                           
  6812                           ;mrf49xa_packet.c: 34: {
  6813                           ;mrf49xa_packet.c: 35: packet->packet.dst = packet->packet.src;
  6814  058C  0825               	movf	Mrf49xaTxPacket@packet,w
  6815  058D  27A1  3180         	fcall	PL14	;call to abstracted procedure
  6816  058F                     l2610:	
  6817                           
  6818                           ;mrf49xa_packet.c: 36: }
  6819                           ;mrf49xa_packet.c: 37: packet->packet.src = cfgRam.nodeId;
  6820                           
  6821                           ;mrf49xa_packet.c: 38: packet->packet.size += 5;
  6822                           
  6823                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6824                           
  6825                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retry = 0;
  6826                           
  6827                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.retransmit = 0;
  6828                           
  6829                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6830  058F  2763               	fcall	PL8	;call to abstracted procedure
  6831                           
  6832                           ;mrf49xa_packet.c: 44: rfTrcvStatus.txPacket.crc = 0;
  6833  0590  01E7               	clrf	(_rfTrcvStatus^(0+128)+71)
  6834  0591  0008               	return
  6835  0592                     l2626:	
  6836                           
  6837                           ;mrf49xa_packet.c: 46: }
  6838                           ;mrf49xa_packet.c: 49: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6839  0592  0021               	movlb	1	; select bank1
  6840  0593  0851               	movf	(_rfTrcvStatus^(0+128)+49),w
  6841  0594  1D03               	skipz
  6842  0595  0008               	return
  6843                           
  6844                           ;mrf49xa_packet.c: 54: else
  6845                           ;mrf49xa_packet.c: 55: {
  6846                           ;mrf49xa_packet.c: 56: if (response)
  6847  0596  0020               	movlb	0	; select bank0
  6848  0597  0820               	movf	Mrf49xaTxPacket@response,w
  6849  0598  1903               	btfsc	3,2
  6850  0599  2D9D               	goto	l2636
  6851                           
  6852                           ;mrf49xa_packet.c: 57: {
  6853                           ;mrf49xa_packet.c: 58: packet->packet.dst = packet->packet.src;
  6854  059A  0825               	movf	Mrf49xaTxPacket@packet,w
  6855  059B  27A1  3180         	fcall	PL14	;call to abstracted procedure
  6856  059D                     l2636:	
  6857                           
  6858                           ;mrf49xa_packet.c: 59: }
  6859                           ;mrf49xa_packet.c: 60: packet->packet.src = cfgRam.nodeId;
  6860                           
  6861                           ;mrf49xa_packet.c: 61: packet->packet.size += 5;
  6862                           
  6863                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6864                           
  6865                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retry = 0;
  6866                           
  6867                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.retransmit = 0;
  6868                           
  6869                           ;mrf49xa_packet.c: 66: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6870  059D  2763  3180         	fcall	PL8	;call to abstracted procedure
  6871                           
  6872                           ;mrf49xa_packet.c: 68: packet->state = PKT_FREE;
  6873  059F  0020               	movlb	0	; select bank0
  6874  05A0  0825               	movf	Mrf49xaTxPacket@packet,w
  6875  05A1  0086               	movwf	6
  6876  05A2  0181               	clrf	1
  6877                           
  6878                           ;mrf49xa_packet.c: 71: for (i = 0; i < (16 + 5); i++)
  6879  05A3  01A4               	clrf	Mrf49xaTxPacket@i
  6880  05A4                     l2656:	
  6881                           
  6882                           ;mrf49xa_packet.c: 72: {
  6883                           ;mrf49xa_packet.c: 73: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6884  05A4  0824               	movf	Mrf49xaTxPacket@i,w
  6885  05A5  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6886  05A6  0086               	movwf	6
  6887  05A7  0187               	clrf	7
  6888  05A8  0824               	movf	Mrf49xaTxPacket@i,w
  6889  05A9  0725               	addwf	Mrf49xaTxPacket@packet,w
  6890  05AA  00A2               	movwf	??_Mrf49xaTxPacket
  6891  05AB  0A22               	incf	??_Mrf49xaTxPacket,w
  6892  05AC  0084               	movwf	4
  6893  05AD  0185               	clrf	5
  6894  05AE  0800               	movf	0,w
  6895  05AF  0081               	movwf	1
  6896  05B0  3015               	movlw	21
  6897  05B1  0AA4               	incf	Mrf49xaTxPacket@i,f
  6898  05B2  0224               	subwf	Mrf49xaTxPacket@i,w
  6899  05B3  1C03               	skipc
  6900  05B4  2DA4               	goto	l2656
  6901                           
  6902                           ;mrf49xa_packet.c: 74: }
  6903                           ;mrf49xa_packet.c: 75: for (i = 0; i < packet->packet.size; i++)
  6904  05B5  01A4               	clrf	Mrf49xaTxPacket@i
  6905  05B6                     l381:	
  6906  05B6  0A25               	incf	Mrf49xaTxPacket@packet,w
  6907  05B7  0086               	movwf	6
  6908  05B8  0187               	clrf	7
  6909  05B9  0801               	movf	1,w
  6910  05BA  0224               	subwf	Mrf49xaTxPacket@i,w
  6911  05BB  1803               	btfsc	3,0
  6912  05BC  2DC4               	goto	l2668
  6913                           
  6914                           ;mrf49xa_packet.c: 76: {
  6915                           ;mrf49xa_packet.c: 77: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6916  05BD  0824               	movf	Mrf49xaTxPacket@i,w
  6917  05BE  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  6918  05BF  0086               	movwf	6
  6919  05C0  0801               	movf	1,w
  6920  05C1  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6921  05C2  0AA4               	incf	Mrf49xaTxPacket@i,f
  6922  05C3  2DB6               	goto	l381
  6923  05C4                     l2668:	
  6924                           
  6925                           ;mrf49xa_packet.c: 78: }
  6926                           ;mrf49xa_packet.c: 80: rfTrcvStatus.txPacket.crc = crc;
  6927  05C4  0823               	movf	Mrf49xaTxPacket@crc,w
  6928  05C5  0021               	movlb	1	; select bank1
  6929  05C6  00E7               	movwf	(_rfTrcvStatus^(0+128)+71)
  6930  05C7  0008               	return
  6931  05C8                     __end_of_Mrf49xaTxPacket:	
  6932  05C8                     __ptext49:	
  6933 ;; *************** function _Mrf49xaTxAck *****************
  6934 ;; Defined at:
  6935 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6938 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  6941 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(48), rfTrcvStatus(75), 
  6942 ;; Return value:  Size  Location     Type
  6943 ;;		None               void
  6944 ;; Registers used:
  6945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6946 ;; Tracked objects:
  6947 ;;		On entry : 1F/0
  6948 ;;		On exit  : 1F/1
  6949 ;;		Unchanged: 0/0
  6950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6951 ;;      Params:         0       0       0       0
  6952 ;;      Locals:         0       1       0       0
  6953 ;;      Temps:          0       0       0       0
  6954 ;;      Totals:         0       1       0       0
  6955 ;;Total ram usage:        1 bytes
  6956 ;; Hardware stack levels used:    1
  6957 ;; Hardware stack levels required when called:    6
  6958 ;; This function calls:
  6959 ;;		_Mrf49xaTxPacket
  6960 ;; This function is called by:
  6961 ;;		_HandlePacket
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           
  6966                           ;psect for function _Mrf49xaTxAck
  6967  05C8                     _Mrf49xaTxAck:	
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6971                           ;Mrf49xaTxAck@packet stored from wreg
  6972  05C8  00A6               	movwf	Mrf49xaTxAck@packet
  6973                           
  6974                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  6975  05C9  3E06               	addlw	6
  6976  05CA  0086               	movwf	6
  6977  05CB  0187               	clrf	7
  6978  05CC  0826               	movf	Mrf49xaTxAck@packet,w
  6979  05CD  3E04               	addlw	4
  6980  05CE  0084               	movwf	4
  6981  05CF  0185               	clrf	5
  6982  05D0  0800               	movf	0,w
  6983  05D1  0081               	movwf	1
  6984                           
  6985                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  6986  05D2  0826               	movf	Mrf49xaTxAck@packet,w
  6987  05D3  3E07               	addlw	7
  6988  05D4  0086               	movwf	6
  6989  05D5  0826               	movf	Mrf49xaTxAck@packet,w
  6990  05D6  3E16               	addlw	22
  6991  05D7  0084               	movwf	4
  6992  05D8  0800               	movf	0,w
  6993  05D9  0081               	movwf	1
  6994                           
  6995                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  6996  05DA  0826               	movf	Mrf49xaTxAck@packet,w
  6997  05DB  3E04               	addlw	4
  6998  05DC  0086               	movwf	6
  6999  05DD  30A1               	movlw	161
  7000  05DE  0081               	movwf	1
  7001                           
  7002                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  7003  05DF  0A26               	incf	Mrf49xaTxAck@packet,w
  7004  05E0  0086               	movwf	6
  7005  05E1  3002               	movlw	2
  7006  05E2  0081               	movwf	1
  7007                           
  7008                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  7009  05E3  01A0               	clrf	Mrf49xaTxPacket@response
  7010  05E4  0AA0               	incf	Mrf49xaTxPacket@response,f
  7011  05E5  01A1               	clrf	Mrf49xaTxPacket@needAck
  7012  05E6  0826               	movf	Mrf49xaTxAck@packet,w
  7013  05E7  2D82               	ljmp	_Mrf49xaTxPacket
  7014  05E8                     __end_of_Mrf49xaTxAck:	
  7015  05E8                     __ptext44:	
  7016 ;; *************** function _CfgSave *****************
  7017 ;; Defined at:
  7018 ;;		line 24 in file "../../../src/node/config.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;		None               void
  7025 ;; Registers used:
  7026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 1F/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7032 ;;      Params:         0       0       0       0
  7033 ;;      Locals:         0       0       0       0
  7034 ;;      Temps:          0       0       0       0
  7035 ;;      Totals:         0       0       0       0
  7036 ;;Total ram usage:        0 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    8
  7039 ;; This function calls:
  7040 ;;		_eepromTxBytes
  7041 ;; This function is called by:
  7042 ;;		_handleCfgCmd
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           
  7047                           ;psect for function _CfgSave
  7048  05E8                     _CfgSave:	
  7049  05E8                     l2704:	
  7050                           ;incstack = 0
  7051                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7052                           
  7053  05E8  3032               	movlw	_cfgRam& (0+255)
  7054                           
  7055                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  7056  05E9  01A4               	clrf	eepromTxBytes@address
  7057  05EA  01A5               	clrf	eepromTxBytes@address+1
  7058  05EB  00A6               	movwf	eepromTxBytes@data
  7059  05EC  3009               	movlw	9
  7060  05ED  00A7               	movwf	eepromTxBytes@size
  7061  05EE  2B10               	ljmp	l2558
  7062  05EF                     __end_of_CfgSave:	
  7063  05EF                     __ptext34:	
  7064 ;; *************** function _Mrf49RxCmd *****************
  7065 ;; Defined at:
  7066 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;  cmd             1    wreg     unsigned char 
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;  cmd             1    1[BANK0 ] unsigned char 
  7071 ;;  val             1    2[BANK0 ] unsigned char 
  7072 ;; Return value:  Size  Location     Type
  7073 ;;                  1    wreg      unsigned char 
  7074 ;; Registers used:
  7075 ;;		wreg, status,2, status,0, pclath, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 1E/1
  7078 ;;		On exit  : 1F/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7081 ;;      Params:         0       0       0       0
  7082 ;;      Locals:         0       2       0       0
  7083 ;;      Temps:          0       0       0       0
  7084 ;;      Totals:         0       2       0       0
  7085 ;;Total ram usage:        2 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    6
  7088 ;; This function calls:
  7089 ;;		_Mrf49SpiRx
  7090 ;;		_Mrf49SpiTx
  7091 ;; This function is called by:
  7092 ;;		_Mrf49RxByte
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function _Mrf49RxCmd
  7098  05EF                     _Mrf49RxCmd:	
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  7102                           ;Mrf49RxCmd@cmd stored from wreg
  7103  05EF  0020               	movlb	0	; select bank0
  7104  05F0  00A1               	movwf	Mrf49RxCmd@cmd
  7105                           
  7106                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  7107  05F1  130E               	bcf	14,6	;volatile
  7108                           
  7109                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  7110  05F2  0821               	movf	Mrf49RxCmd@cmd,w
  7111  05F3  25F9  3180         	fcall	_Mrf49SpiTx
  7112                           
  7113                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  7114  05F5  265F               	fcall	_Mrf49SpiRx
  7115  05F6  00A2               	movwf	Mrf49RxCmd@val
  7116                           
  7117                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  7118  05F7  170E               	bsf	14,6	;volatile
  7119                           
  7120                           ;mrf49xa_cmd.c: 27: return val;
  7121  05F8  0008               	return
  7122  05F9                     __end_of_Mrf49RxCmd:	
  7123  05F9                     __ptext35:	
  7124 ;; *************** function _Mrf49SpiTx *****************
  7125 ;; Defined at:
  7126 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  byte            1    wreg     unsigned char 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  byte            1    0[BANK0 ] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;		None               void
  7133 ;; Registers used:
  7134 ;;		wreg
  7135 ;; Tracked objects:
  7136 ;;		On entry : 1F/0
  7137 ;;		On exit  : 1F/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7140 ;;      Params:         0       0       0       0
  7141 ;;      Locals:         0       1       0       0
  7142 ;;      Temps:          0       0       0       0
  7143 ;;      Totals:         0       1       0       0
  7144 ;;Total ram usage:        1 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    5
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_Mrf49TxCmd
  7151 ;;		_Mrf49RxCmd
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _Mrf49SpiTx
  7157  05F9                     _Mrf49SpiTx:	
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _Mrf49SpiTx: [wreg]
  7161                           ;Mrf49SpiTx@byte stored from wreg
  7162  05F9  00A0               	movwf	Mrf49SpiTx@byte
  7163                           
  7164                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7165  05FA  1FA0               	btfss	Mrf49SpiTx@byte,7
  7166  05FB  2DFE               	goto	l255
  7167  05FC  178D               	bsf	13,7	;volatile
  7168  05FD  2DFF               	goto	l256
  7169  05FE                     l255:	
  7170  05FE  138D               	bcf	13,7	;volatile
  7171  05FF                     l256:	
  7172  05FF  0022               	movlb	2	; select bank2
  7173  0600  178E               	bsf	14,7	;volatile
  7174  0601  0000               	nop	;# 
  7175  0602  0022               	movlb	2	; select bank2
  7176  0603  138E               	bcf	14,7	;volatile
  7177  0604  0020               	movlb	0	; select bank0
  7178  0605  1F20               	btfss	Mrf49SpiTx@byte,6
  7179  0606  2E09               	goto	l259
  7180  0607  178D               	bsf	13,7	;volatile
  7181  0608  2E0A               	goto	l260
  7182  0609                     l259:	
  7183  0609  138D               	bcf	13,7	;volatile
  7184  060A                     l260:	
  7185  060A  0022               	movlb	2	; select bank2
  7186  060B  178E               	bsf	14,7	;volatile
  7187  060C  0000               	nop	;# 
  7188  060D  0022               	movlb	2	; select bank2
  7189  060E  138E               	bcf	14,7	;volatile
  7190  060F  0020               	movlb	0	; select bank0
  7191  0610  1EA0               	btfss	Mrf49SpiTx@byte,5
  7192  0611  2E14               	goto	l263
  7193  0612  178D               	bsf	13,7	;volatile
  7194  0613  2E15               	goto	l264
  7195  0614                     l263:	
  7196  0614  138D               	bcf	13,7	;volatile
  7197  0615                     l264:	
  7198  0615  0022               	movlb	2	; select bank2
  7199  0616  178E               	bsf	14,7	;volatile
  7200  0617  0000               	nop	;# 
  7201  0618  0022               	movlb	2	; select bank2
  7202  0619  138E               	bcf	14,7	;volatile
  7203  061A  0020               	movlb	0	; select bank0
  7204  061B  1E20               	btfss	Mrf49SpiTx@byte,4
  7205  061C  2E1F               	goto	l267
  7206  061D  178D               	bsf	13,7	;volatile
  7207  061E  2E20               	goto	l268
  7208  061F                     l267:	
  7209  061F  138D               	bcf	13,7	;volatile
  7210  0620                     l268:	
  7211  0620  0022               	movlb	2	; select bank2
  7212  0621  178E               	bsf	14,7	;volatile
  7213  0622  0000               	nop	;# 
  7214  0623  0022               	movlb	2	; select bank2
  7215  0624  138E               	bcf	14,7	;volatile
  7216  0625  0020               	movlb	0	; select bank0
  7217  0626  1DA0               	btfss	Mrf49SpiTx@byte,3
  7218  0627  2E2A               	goto	l271
  7219  0628  178D               	bsf	13,7	;volatile
  7220  0629  2E2B               	goto	l272
  7221  062A                     l271:	
  7222  062A  138D               	bcf	13,7	;volatile
  7223  062B                     l272:	
  7224  062B  0022               	movlb	2	; select bank2
  7225  062C  178E               	bsf	14,7	;volatile
  7226  062D  0000               	nop	;# 
  7227  062E  0022               	movlb	2	; select bank2
  7228  062F  138E               	bcf	14,7	;volatile
  7229  0630  0020               	movlb	0	; select bank0
  7230  0631  1D20               	btfss	Mrf49SpiTx@byte,2
  7231  0632  2E35               	goto	l275
  7232  0633  178D               	bsf	13,7	;volatile
  7233  0634  2E36               	goto	l276
  7234  0635                     l275:	
  7235  0635  138D               	bcf	13,7	;volatile
  7236  0636                     l276:	
  7237  0636  0022               	movlb	2	; select bank2
  7238  0637  178E               	bsf	14,7	;volatile
  7239  0638  0000               	nop	;# 
  7240  0639  0022               	movlb	2	; select bank2
  7241  063A  138E               	bcf	14,7	;volatile
  7242  063B  0020               	movlb	0	; select bank0
  7243  063C  1CA0               	btfss	Mrf49SpiTx@byte,1
  7244  063D  2E40               	goto	l279
  7245  063E  178D               	bsf	13,7	;volatile
  7246  063F  2E41               	goto	l280
  7247  0640                     l279:	
  7248  0640  138D               	bcf	13,7	;volatile
  7249  0641                     l280:	
  7250  0641  0022               	movlb	2	; select bank2
  7251  0642  178E               	bsf	14,7	;volatile
  7252  0643  0000               	nop	;# 
  7253  0644  0022               	movlb	2	; select bank2
  7254  0645  138E               	bcf	14,7	;volatile
  7255  0646  0020               	movlb	0	; select bank0
  7256  0647  1C20               	btfss	Mrf49SpiTx@byte,0
  7257  0648  2E4B               	goto	l283
  7258  0649  178D               	bsf	13,7	;volatile
  7259  064A  2E4C               	goto	l284
  7260  064B                     l283:	
  7261  064B  138D               	bcf	13,7	;volatile
  7262  064C                     l284:	
  7263  064C  0022               	movlb	2	; select bank2
  7264  064D  178E               	bsf	14,7	;volatile
  7265  064E  0000               	nop	;# 
  7266  064F  0022               	movlb	2	; select bank2
  7267  0650  138E               	bcf	14,7	;volatile
  7268                           
  7269                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7270  0651  0020               	movlb	0	; select bank0
  7271  0652  138D               	bcf	13,7	;volatile
  7272  0653  0008               	return
  7273  0654                     __end_of_Mrf49SpiTx:	
  7274  0654                     __ptext32:	
  7275 ;; *************** function _Mrf49RxSts *****************
  7276 ;; Defined at:
  7277 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;		None
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;		None
  7282 ;; Return value:  Size  Location     Type
  7283 ;;		None               void
  7284 ;; Registers used:
  7285 ;;		wreg, status,2, pclath, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : 1F/1
  7288 ;;		On exit  : 1F/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7291 ;;      Params:         0       0       0       0
  7292 ;;      Locals:         0       0       0       0
  7293 ;;      Temps:          0       0       0       0
  7294 ;;      Totals:         0       0       0       0
  7295 ;;Total ram usage:        0 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    6
  7298 ;; This function calls:
  7299 ;;		_Mrf49SpiRx
  7300 ;; This function is called by:
  7301 ;;		_Mrf49xaServe
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _Mrf49RxSts
  7307  0654                     _Mrf49RxSts:	
  7308                           
  7309                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7310                           
  7311                           ;incstack = 0
  7312                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7313  0654  120B               	bcf	11,4	;volatile
  7314                           
  7315                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  7316  0655  0020               	movlb	0	; select bank0
  7317  0656  130E               	bcf	14,6	;volatile
  7318                           
  7319                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7320  0657  265F  3180         	fcall	_Mrf49SpiRx
  7321  0659  00BB               	movwf	_mrf49Status
  7322                           
  7323                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7324  065A  265F               	fcall	_Mrf49SpiRx
  7325  065B  00BC               	movwf	_mrf49Status+1
  7326                           
  7327                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  7328  065C  170E               	bsf	14,6	;volatile
  7329                           
  7330                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7331  065D  160B               	bsf	11,4	;volatile
  7332  065E  0008               	return
  7333  065F                     __end_of_Mrf49RxSts:	
  7334  065F                     __ptext36:	
  7335 ;; *************** function _Mrf49SpiRx *****************
  7336 ;; Defined at:
  7337 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;		None
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;  data            1    0[BANK0 ] unsigned char 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;                  1    wreg      unsigned char 
  7344 ;; Registers used:
  7345 ;;		wreg, status,2
  7346 ;; Tracked objects:
  7347 ;;		On entry : 1F/0
  7348 ;;		On exit  : 1F/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7351 ;;      Params:         0       0       0       0
  7352 ;;      Locals:         0       1       0       0
  7353 ;;      Temps:          0       0       0       0
  7354 ;;      Totals:         0       1       0       0
  7355 ;;Total ram usage:        1 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:    5
  7358 ;; This function calls:
  7359 ;;		Nothing
  7360 ;; This function is called by:
  7361 ;;		_Mrf49RxCmd
  7362 ;;		_Mrf49RxSts
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           
  7367                           ;psect for function _Mrf49SpiRx
  7368  065F                     _Mrf49SpiRx:	
  7369                           
  7370                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  7374  065F  01A0               	clrf	Mrf49SpiRx@data
  7375                           
  7376                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7377  0660  138D               	bcf	13,7	;volatile
  7378  0661  1A8E               	btfsc	14,5	;volatile
  7379  0662  17A0               	bsf	Mrf49SpiRx@data,7
  7380  0663  0022               	movlb	2	; select bank2
  7381  0664  178E               	bsf	14,7	;volatile
  7382  0665  0000               	nop	;# 
  7383  0666  0022               	movlb	2	; select bank2
  7384  0667  138E               	bcf	14,7	;volatile
  7385                           
  7386                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7387  0668  0020               	movlb	0	; select bank0
  7388  0669  1A8E               	btfsc	14,5	;volatile
  7389  066A  1720               	bsf	Mrf49SpiRx@data,6
  7390  066B  0022               	movlb	2	; select bank2
  7391  066C  178E               	bsf	14,7	;volatile
  7392  066D  0000               	nop	;# 
  7393  066E  0022               	movlb	2	; select bank2
  7394  066F  138E               	bcf	14,7	;volatile
  7395                           
  7396                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7397  0670  0020               	movlb	0	; select bank0
  7398  0671  1A8E               	btfsc	14,5	;volatile
  7399  0672  16A0               	bsf	Mrf49SpiRx@data,5
  7400  0673  0022               	movlb	2	; select bank2
  7401  0674  178E               	bsf	14,7	;volatile
  7402  0675  0000               	nop	;# 
  7403  0676  0022               	movlb	2	; select bank2
  7404  0677  138E               	bcf	14,7	;volatile
  7405                           
  7406                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7407  0678  0020               	movlb	0	; select bank0
  7408  0679  1A8E               	btfsc	14,5	;volatile
  7409  067A  1620               	bsf	Mrf49SpiRx@data,4
  7410  067B  0022               	movlb	2	; select bank2
  7411  067C  178E               	bsf	14,7	;volatile
  7412  067D  0000               	nop	;# 
  7413  067E  0022               	movlb	2	; select bank2
  7414  067F  138E               	bcf	14,7	;volatile
  7415                           
  7416                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7417  0680  0020               	movlb	0	; select bank0
  7418  0681  1A8E               	btfsc	14,5	;volatile
  7419  0682  15A0               	bsf	Mrf49SpiRx@data,3
  7420  0683  0022               	movlb	2	; select bank2
  7421  0684  178E               	bsf	14,7	;volatile
  7422  0685  0000               	nop	;# 
  7423  0686  0022               	movlb	2	; select bank2
  7424  0687  138E               	bcf	14,7	;volatile
  7425                           
  7426                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7427  0688  0020               	movlb	0	; select bank0
  7428  0689  1A8E               	btfsc	14,5	;volatile
  7429  068A  1520               	bsf	Mrf49SpiRx@data,2
  7430  068B  0022               	movlb	2	; select bank2
  7431  068C  178E               	bsf	14,7	;volatile
  7432  068D  0000               	nop	;# 
  7433  068E  0022               	movlb	2	; select bank2
  7434  068F  138E               	bcf	14,7	;volatile
  7435                           
  7436                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7437  0690  0020               	movlb	0	; select bank0
  7438  0691  1A8E               	btfsc	14,5	;volatile
  7439  0692  14A0               	bsf	Mrf49SpiRx@data,1
  7440  0693  0022               	movlb	2	; select bank2
  7441  0694  178E               	bsf	14,7	;volatile
  7442  0695  0000               	nop	;# 
  7443  0696  0022               	movlb	2	; select bank2
  7444  0697  138E               	bcf	14,7	;volatile
  7445                           
  7446                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7447  0698  0020               	movlb	0	; select bank0
  7448  0699  1A8E               	btfsc	14,5	;volatile
  7449  069A  1420               	bsf	Mrf49SpiRx@data,0
  7450  069B  0022               	movlb	2	; select bank2
  7451  069C  178E               	bsf	14,7	;volatile
  7452  069D  0000               	nop	;# 
  7453  069E  0022               	movlb	2	; select bank2
  7454  069F  138E               	bcf	14,7	;volatile
  7455                           
  7456                           ;mrf49xa_spi_pic16.c: 40: return data;
  7457  06A0  0020               	movlb	0	; select bank0
  7458  06A1  0820               	movf	Mrf49SpiRx@data,w
  7459  06A2  0008               	return
  7460  06A3                     __end_of_Mrf49SpiRx:	
  7461  06A3                     __ptext60:	
  7462 ;; *************** function _AdcSample *****************
  7463 ;; Defined at:
  7464 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  ch              1    wreg     unsigned char 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  ch              1    5[BANK0 ] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  2    2[BANK0 ] unsigned int 
  7471 ;; Registers used:
  7472 ;;		wreg, status,2, status,0, pclath, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 1F/1
  7475 ;;		On exit  : 1F/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7478 ;;      Params:         0       2       0       0
  7479 ;;      Locals:         0       1       0       0
  7480 ;;      Temps:          0       1       0       0
  7481 ;;      Totals:         0       4       0       0
  7482 ;;Total ram usage:        4 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    6
  7485 ;; This function calls:
  7486 ;;		_AdcChSelect
  7487 ;;		_AdcGetResult
  7488 ;;		_AdcGo
  7489 ;;		_AdcIsBusy
  7490 ;; This function is called by:
  7491 ;;		_main
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495                           
  7496                           ;psect for function _AdcSample
  7497  06A3                     _AdcSample:	
  7498                           
  7499                           ;incstack = 0
  7500                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  7501                           ;AdcSample@ch stored from wreg
  7502  06A3  0020               	movlb	0	; select bank0
  7503  06A4  00A5               	movwf	AdcSample@ch
  7504                           
  7505                           ;adc16.c: 83: AdcChSelect(ch);
  7506  06A5  0825               	movf	AdcSample@ch,w
  7507  06A6  26D1  3180         	fcall	_AdcChSelect
  7508                           
  7509                           ;adc16.c: 86: AdcGo();
  7510  06A8  26CB  3180         	fcall	_AdcGo
  7511                           
  7512                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7513  06AA  30C7               	movlw	199
  7514  06AB  0020               	movlb	0	; select bank0
  7515  06AC  00A4               	movwf	??_AdcSample
  7516  06AD                     u2427:	
  7517  06AD  0000               	nop
  7518  06AE  0BA4               	decfsz	??_AdcSample,f
  7519  06AF  2EAD               	goto	u2427
  7520  06B0  3200               	nop2	;nop
  7521  06B1  0000               	nop
  7522  06B2                     l3200:	
  7523                           ;adc16.c: 88: while (AdcIsBusy());
  7524                           
  7525  06B2  26CD  3180         	fcall	_AdcIsBusy
  7526  06B4  3800               	iorlw	0
  7527  06B5  1D03               	skipz
  7528  06B6  2EB2               	goto	l3200
  7529                           
  7530                           ;adc16.c: 89: AdcGo();
  7531  06B7  26CB  3180         	fcall	_AdcGo
  7532  06B9                     l3204:	
  7533                           ;adc16.c: 90: while (AdcIsBusy());
  7534                           
  7535  06B9  26CD  3180         	fcall	_AdcIsBusy
  7536  06BB  3800               	iorlw	0
  7537  06BC  1D03               	skipz
  7538  06BD  2EB9               	goto	l3204
  7539                           
  7540                           ;psect for function _AdcGetResult
  7541                           
  7542                           ;adc16.c: 92: return AdcGetResult();
  7543  06BE                     i1L_AdcGetResult:	
  7544  06BE                     i1Ll3000:	
  7545                           
  7546                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  7547  06BE  081C               	movf	28,w	;volatile
  7548  06BF  0020               	movlb	0	; select bank0
  7549  06C0  00A1               	movwf	?_AdcGetResult+1
  7550  06C1  01A0               	clrf	?_AdcGetResult
  7551  06C2  0021               	movlb	1	; select bank1
  7552  06C3  081B               	movf	27,w	;volatile
  7553  06C4  0020               	movlb	0	; select bank0
  7554  06C5  04A0               	iorwf	?_AdcGetResult,f
  7555  06C6                     i1Ll79:	
  7556  06C6  0821               	movf	?_AdcGetResult+1,w
  7557  06C7  00A3               	movwf	?_AdcSample+1
  7558  06C8  0820               	movf	?_AdcGetResult,w
  7559  06C9  00A2               	movwf	?_AdcSample
  7560  06CA  0008               	return
  7561  06CB                     __end_of_AdcSample:	
  7562  06CB                     __ptext62:	
  7563 ;; *************** function _AdcGo *****************
  7564 ;; Defined at:
  7565 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;		None
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;		None
  7570 ;; Return value:  Size  Location     Type
  7571 ;;		None               void
  7572 ;; Registers used:
  7573 ;;		None
  7574 ;; Tracked objects:
  7575 ;;		On entry : 1F/1
  7576 ;;		On exit  : 1F/1
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7579 ;;      Params:         0       0       0       0
  7580 ;;      Locals:         0       0       0       0
  7581 ;;      Temps:          0       0       0       0
  7582 ;;      Totals:         0       0       0       0
  7583 ;;Total ram usage:        0 bytes
  7584 ;; Hardware stack levels used:    1
  7585 ;; Hardware stack levels required when called:    5
  7586 ;; This function calls:
  7587 ;;		Nothing
  7588 ;; This function is called by:
  7589 ;;		_AdcSample
  7590 ;; This function uses a non-reentrant model
  7591 ;;
  7592                           
  7593                           
  7594                           ;psect for function _AdcGo
  7595  06CB                     _AdcGo:	
  7596                           
  7597                           ;adc16.c: 31: ADCON0 |= 1<<1;
  7598                           
  7599                           ;incstack = 0
  7600                           ; Regs used in _AdcGo: []
  7601  06CB  149D               	bsf	29,1	;volatile
  7602  06CC  0008               	return
  7603  06CD                     __end_of_AdcGo:	
  7604  06CD                     __ptext61:	
  7605 ;; *************** function _AdcIsBusy *****************
  7606 ;; Defined at:
  7607 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      unsigned char 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/1
  7618 ;;		On exit  : 1F/1
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7621 ;;      Params:         0       0       0       0
  7622 ;;      Locals:         0       0       0       0
  7623 ;;      Temps:          0       0       0       0
  7624 ;;      Totals:         0       0       0       0
  7625 ;;Total ram usage:        0 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    5
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_AdcSample
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _AdcIsBusy
  7637  06CD                     _AdcIsBusy:	
  7638                           
  7639                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  7643  06CD  0021               	movlb	1	; select bank1
  7644  06CE  361D               	lsrf	29,w	;volatile
  7645  06CF  3901               	andlw	1
  7646  06D0  0008               	return
  7647  06D1                     __end_of_AdcIsBusy:	
  7648  06D1                     __ptext64:	
  7649 ;; *************** function _AdcChSelect *****************
  7650 ;; Defined at:
  7651 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  channel         1    wreg     enum E4222
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  channel         1    0[BANK0 ] enum E4222
  7656 ;; Return value:  Size  Location     Type
  7657 ;;		None               void
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0
  7660 ;; Tracked objects:
  7661 ;;		On entry : 1F/0
  7662 ;;		On exit  : 1F/1
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7665 ;;      Params:         0       0       0       0
  7666 ;;      Locals:         0       1       0       0
  7667 ;;      Temps:          0       0       0       0
  7668 ;;      Totals:         0       1       0       0
  7669 ;;Total ram usage:        1 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    5
  7672 ;; This function calls:
  7673 ;;		Nothing
  7674 ;; This function is called by:
  7675 ;;		_AdcSample
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           
  7680                           ;psect for function _AdcChSelect
  7681  06D1                     _AdcChSelect:	
  7682                           
  7683                           ;incstack = 0
  7684                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  7685                           ;AdcChSelect@channel stored from wreg
  7686  06D1  00A0               	movwf	AdcChSelect@channel
  7687                           
  7688                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  7689  06D2  0709               	addwf	9,w
  7690  06D3  0709               	addwf	9,w
  7691  06D4  3801               	iorlw	1
  7692  06D5  0021               	movlb	1	; select bank1
  7693  06D6  009D               	movwf	29	;volatile
  7694  06D7  0008               	return
  7695  06D8                     __end_of_AdcChSelect:	
  7696  06D8                     __ptext22:	
  7697 ;; *************** function _Mrf49xaRxPacket *****************
  7698 ;; Defined at:
  7699 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;		None
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;		None
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7706 ;; Registers used:
  7707 ;;		wreg
  7708 ;; Tracked objects:
  7709 ;;		On entry : 1F/1
  7710 ;;		On exit  : 1F/1
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7713 ;;      Params:         0       0       0       0
  7714 ;;      Locals:         0       0       0       0
  7715 ;;      Temps:          0       0       0       0
  7716 ;;      Totals:         0       0       0       0
  7717 ;;Total ram usage:        0 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    5
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		_Mrf49xaTick
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           
  7728                           ;psect for function _Mrf49xaRxPacket
  7729  06D8                     _Mrf49xaRxPacket:	
  7730                           
  7731                           ;mrf49xa_packet.c: 92: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  7735  06D8  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  7736  06D9  3A05               	xorlw	5
  7737  06DA  1D03               	skipz
  7738  06DB  2EDF               	goto	l3104
  7739                           
  7740                           ;mrf49xa_packet.c: 93: {
  7741                           ;mrf49xa_packet.c: 94: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  7742  06DC  3006               	movlw	6
  7743  06DD  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  7744                           
  7745                           ;mrf49xa_packet.c: 95: return &(rfTrcvStatus.rxPacket[0]);
  7746  06DE  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  7747  06DF                     l3104:	
  7748                           
  7749                           ;mrf49xa_packet.c: 96: }
  7750                           ;mrf49xa_packet.c: 98: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  7751  06DF  0839               	movf	(_rfTrcvStatus^(0+128)+25),w
  7752  06E0  3A05               	xorlw	5
  7753  06E1  1D03               	skipz
  7754  06E2  3400               	retlw	0
  7755                           
  7756                           ;mrf49xa_packet.c: 99: {
  7757                           ;mrf49xa_packet.c: 100: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  7758  06E3  3006               	movlw	6
  7759  06E4  00B9               	movwf	(_rfTrcvStatus^(0+128)+25)
  7760                           
  7761                           ;mrf49xa_packet.c: 101: return &(rfTrcvStatus.rxPacket[1]);
  7762  06E5  34B9               	retlw	(_rfTrcvStatus+25)& (0+255)
  7763  06E6                     __end_of_Mrf49xaRxPacket:	
  7764                           ;mrf49xa_packet.c: 102: }
  7765                           ;mrf49xa_packet.c: 104: return (0);
  7766                           
  7767  06E6                     __ptext20:	
  7768 ;; *************** function _PwrAdcInit *****************
  7769 ;; Defined at:
  7770 ;;		line 150 in file "../../../src/node/power.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;		None
  7775 ;; Return value:  Size  Location     Type
  7776 ;;		None               void
  7777 ;; Registers used:
  7778 ;;		status,2
  7779 ;; Tracked objects:
  7780 ;;		On entry : 17F/1
  7781 ;;		On exit  : 17F/1
  7782 ;;		Unchanged: 160/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7784 ;;      Params:         0       0       0       0
  7785 ;;      Locals:         0       0       0       0
  7786 ;;      Temps:          0       0       0       0
  7787 ;;      Totals:         0       0       0       0
  7788 ;;Total ram usage:        0 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    5
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_main
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _PwrAdcInit
  7800  06E6                     _PwrAdcInit:	
  7801                           
  7802                           ;power.c: 152: ANSELA = 0;
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _PwrAdcInit: [status,2]
  7806  06E6  0023               	movlb	3	; select bank3
  7807  06E7  018C               	clrf	12	;volatile
  7808                           
  7809                           ;power.c: 153: ANSELB = 0;
  7810  06E8  018D               	clrf	13	;volatile
  7811                           
  7812                           ;power.c: 154: ANSELC = 0;
  7813                           
  7814                           ;power.c: 156: PORTCbits.RC0 = 1;
  7815                           
  7816                           ;power.c: 157: TRISCbits.TRISC0 = 0;
  7817  06E9  27B7               	fcall	PL22	;call to abstracted procedure
  7818  06EA  0008               	return
  7819  06EB                     __end_of_PwrAdcInit:	
  7820  06EB                     __ptext18:	
  7821 ;; *************** function _PwrAdcSleep *****************
  7822 ;; Defined at:
  7823 ;;		line 160 in file "../../../src/node/power.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;		None
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;		None
  7828 ;; Return value:  Size  Location     Type
  7829 ;;		None               void
  7830 ;; Registers used:
  7831 ;;		status,2, status,0, pclath, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/1
  7834 ;;		On exit  : 1F/1
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7837 ;;      Params:         0       0       0       0
  7838 ;;      Locals:         0       0       0       0
  7839 ;;      Temps:          0       0       0       0
  7840 ;;      Totals:         0       0       0       0
  7841 ;;Total ram usage:        0 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:    6
  7844 ;; This function calls:
  7845 ;;		_AdcDeinit
  7846 ;; This function is called by:
  7847 ;;		_main
  7848 ;; This function uses a non-reentrant model
  7849 ;;
  7850                           
  7851                           
  7852                           ;psect for function _PwrAdcSleep
  7853  06EB                     _PwrAdcSleep:	
  7854                           
  7855                           ;power.c: 162: ANSELC = 0;
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7859  06EB  0023               	movlb	3	; select bank3
  7860                           
  7861                           ;power.c: 163: PORTCbits.RC0 = 1;
  7862                           
  7863                           ;power.c: 164: TRISCbits.TRISC0 = 0;
  7864  06EC  27B7  3180         	fcall	PL22	;call to abstracted procedure
  7865                           
  7866                           ;power.c: 166: AdcDeinit();
  7867  06EE  2F2D               	ljmp	l2998
  7868  06EF                     __end_of_PwrAdcSleep:	
  7869  06EF                     __ptext16:	
  7870 ;; *************** function _PwrAdcWake *****************
  7871 ;; Defined at:
  7872 ;;		line 169 in file "../../../src/node/power.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;		None
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;		None               void
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0, pclath, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/2
  7883 ;;		On exit  : 1F/1
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7886 ;;      Params:         0       0       0       0
  7887 ;;      Locals:         0       0       0       0
  7888 ;;      Temps:          0       0       0       0
  7889 ;;      Totals:         0       0       0       0
  7890 ;;Total ram usage:        0 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    6
  7893 ;; This function calls:
  7894 ;;		_AdcInit
  7895 ;; This function is called by:
  7896 ;;		_main
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           
  7901                           ;psect for function _PwrAdcWake
  7902  06EF                     _PwrAdcWake:	
  7903                           
  7904                           ;power.c: 171: ANSELC = (1<<0);
  7905                           
  7906                           ;incstack = 0
  7907                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7908  06EF  3001               	movlw	1
  7909  06F0  0023               	movlb	3	; select bank3
  7910  06F1  008E               	movwf	14	;volatile
  7911                           
  7912                           ;power.c: 172: TRISCbits.TRISC0 = 1;
  7913  06F2  0021               	movlb	1	; select bank1
  7914  06F3  140E               	bsf	14,0	;volatile
  7915                           
  7916                           ;power.c: 174: AdcInit();
  7917  06F4  2F34               	ljmp	l2990
  7918  06F5                     __end_of_PwrAdcWake:	
  7919  06F5                     __ptext14:	
  7920 ;; *************** function _PwrI2cInit *****************
  7921 ;; Defined at:
  7922 ;;		line 62 in file "../../../src/node/power.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;		None
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;		None
  7927 ;; Return value:  Size  Location     Type
  7928 ;;		None               void
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, pclath, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 17F/2
  7933 ;;		On exit  : 1F/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7936 ;;      Params:         0       0       0       0
  7937 ;;      Locals:         0       0       0       0
  7938 ;;      Temps:          0       0       0       0
  7939 ;;      Totals:         0       0       0       0
  7940 ;;Total ram usage:        0 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    8
  7943 ;; This function calls:
  7944 ;;		_SoftI2cInit
  7945 ;; This function is called by:
  7946 ;;		_main
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           
  7951                           ;psect for function _PwrI2cInit
  7952  06F5                     _PwrI2cInit:	
  7953                           
  7954                           ;power.c: 64: SoftI2cInit();
  7955                           
  7956                           ;incstack = 0
  7957                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  7958  06F5  205B               	fcall	_SoftI2cInit
  7959                           
  7960                           ;power.c: 66: TRISBbits.TRISB4 = 0;
  7961  06F6  0021               	movlb	1	; select bank1
  7962  06F7  120D               	bcf	13,4	;volatile
  7963                           
  7964                           ;power.c: 67: TRISBbits.TRISB6 = 0;
  7965  06F8  130D               	bcf	13,6	;volatile
  7966                           
  7967                           ;power.c: 69: TRISBbits.TRISB5 = 1;
  7968  06F9  168D               	bsf	13,5	;volatile
  7969                           
  7970                           ;power.c: 70: PORTBbits.RB5 = 1;
  7971  06FA  0020               	movlb	0	; select bank0
  7972  06FB  168D               	bsf	13,5	;volatile
  7973  06FC  0008               	return
  7974  06FD                     __end_of_PwrI2cInit:	
  7975  06FD                     __ptext8:	
  7976 ;; *************** function _PwrRfSleep *****************
  7977 ;; Defined at:
  7978 ;;		line 119 in file "../../../src/node/power.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		wreg, status,2, status,0, pclath, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 1E/1
  7989 ;;		On exit  : 1F/1
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7992 ;;      Params:         0       0       0       0
  7993 ;;      Locals:         0       0       0       0
  7994 ;;      Temps:          0       0       0       0
  7995 ;;      Totals:         0       0       0       0
  7996 ;;Total ram usage:        0 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    9
  7999 ;; This function calls:
  8000 ;;		_Mrf49xaShutdown
  8001 ;; This function is called by:
  8002 ;;		_main
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           
  8007                           ;psect for function _PwrRfSleep
  8008  06FD                     _PwrRfSleep:	
  8009                           
  8010                           ;power.c: 121: Mrf49xaShutdown();
  8011                           
  8012                           ;incstack = 0
  8013                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  8014  06FD  273F               	fcall	_Mrf49xaShutdown
  8015                           
  8016                           ;power.c: 122: INTCONbits.INTE = 1;
  8017  06FE  160B               	bsf	11,4	;volatile
  8018  06FF  0008               	return
  8019  0700                     __end_of_PwrRfSleep:	
  8020  0700                     __ptext6:	
  8021 ;; *************** function _PwrRfWake *****************
  8022 ;; Defined at:
  8023 ;;		line 125 in file "../../../src/node/power.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;		None               void
  8030 ;; Registers used:
  8031 ;;		wreg, status,2, status,0, pclath, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 1F/1
  8034 ;;		On exit  : 1F/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8037 ;;      Params:         0       0       0       0
  8038 ;;      Locals:         0       0       0       0
  8039 ;;      Temps:          0       0       0       0
  8040 ;;      Totals:         0       0       0       0
  8041 ;;Total ram usage:        0 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    9
  8044 ;; This function calls:
  8045 ;;		_Mrf49xaReboot
  8046 ;; This function is called by:
  8047 ;;		_main
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           
  8052                           ;psect for function _PwrRfWake
  8053  0700                     _PwrRfWake:	
  8054                           
  8055                           ;power.c: 127: INTCONbits.INTE = 0;
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  8059  0700  120B               	bcf	11,4	;volatile
  8060                           
  8061                           ;power.c: 128: Mrf49xaReboot();
  8062  0701  2AB5               	ljmp	l2580
  8063  0702                     __end_of_PwrRfWake:	
  8064  0702                     __ptext5:	
  8065 ;; *************** function _PwrSensorInit *****************
  8066 ;; Defined at:
  8067 ;;		line 132 in file "../../../src/node/power.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;		None               void
  8074 ;; Registers used:
  8075 ;;		None
  8076 ;; Tracked objects:
  8077 ;;		On entry : 17F/1
  8078 ;;		On exit  : 17F/2
  8079 ;;		Unchanged: 160/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8081 ;;      Params:         0       0       0       0
  8082 ;;      Locals:         0       0       0       0
  8083 ;;      Temps:          0       0       0       0
  8084 ;;      Totals:         0       0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    5
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_main
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function _PwrSensorInit
  8097  0702                     _PwrSensorInit:	
  8098                           
  8099                           ;power.c: 134: TRISCbits.TRISC2 = 0;
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _PwrSensorInit: []
  8103  0702  110E               	bcf	14,2	;volatile
  8104                           
  8105                           ;power.c: 136: LATCbits.LATC2 = 0;
  8106  0703  0022               	movlb	2	; select bank2
  8107  0704  110E               	bcf	14,2	;volatile
  8108  0705  0008               	return
  8109  0706                     __end_of_PwrSensorInit:	
  8110  0706                     __ptext3:	
  8111 ;; *************** function _PwrSensorWake *****************
  8112 ;; Defined at:
  8113 ;;		line 144 in file "../../../src/node/power.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;		None
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;		None
  8118 ;; Return value:  Size  Location     Type
  8119 ;;		None               void
  8120 ;; Registers used:
  8121 ;;		None
  8122 ;; Tracked objects:
  8123 ;;		On entry : 1F/0
  8124 ;;		On exit  : 1F/2
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8127 ;;      Params:         0       0       0       0
  8128 ;;      Locals:         0       0       0       0
  8129 ;;      Temps:          0       0       0       0
  8130 ;;      Totals:         0       0       0       0
  8131 ;;Total ram usage:        0 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    5
  8134 ;; This function calls:
  8135 ;;		Nothing
  8136 ;; This function is called by:
  8137 ;;		_main
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           
  8142                           ;psect for function _PwrSensorWake
  8143  0706                     _PwrSensorWake:	
  8144                           
  8145                           ;power.c: 146: LATCbits.LATC2 = 1;
  8146                           
  8147                           ;incstack = 0
  8148                           ; Regs used in _PwrSensorWake: []
  8149  0706  0022               	movlb	2	; select bank2
  8150  0707  150E               	bsf	14,2	;volatile
  8151  0708  0008               	return
  8152  0709                     __end_of_PwrSensorWake:	
  8153  0709                     __ptext24:	
  8154 ;; *************** function _Mrf49xaModeTx *****************
  8155 ;; Defined at:
  8156 ;;		line 111 in file "../../../src/devices/mrf49xa.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;		None
  8159 ;; Auto vars:     Size  Location     Type
  8160 ;;  k               1    3[BANK0 ] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;		None               void
  8163 ;; Registers used:
  8164 ;;		wreg, status,2, status,0, pclath, cstack
  8165 ;; Tracked objects:
  8166 ;;		On entry : 1F/0
  8167 ;;		On exit  : 1F/1
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8170 ;;      Params:         0       0       0       0
  8171 ;;      Locals:         0       1       0       0
  8172 ;;      Temps:          0       0       0       0
  8173 ;;      Totals:         0       1       0       0
  8174 ;;Total ram usage:        1 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:    7
  8177 ;; This function calls:
  8178 ;;		_Mrf49TxCmd
  8179 ;; This function is called by:
  8180 ;;		_Mrf49xaTick
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           
  8185                           ;psect for function _Mrf49xaModeTx
  8186  0709                     _Mrf49xaModeTx:	
  8187  0709  3004               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8188                           
  8189                           ;mrf49xa.c: 113: UI08_t k;
  8190                           ;mrf49xa.c: 114: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  8194  070A  01A3               	clrf	Mrf49xaModeTx@k
  8195  070B  3188               	movlp	high __stringtab
  8196  070C  000A               	callw
  8197  070D  3180               	pagesel	$	;select current page
  8198  070E  3800               	iorlw	0
  8199  070F  1903               	btfsc	3,2
  8200  0710  2F25               	goto	l3026
  8201  0711                     l3020:	
  8202  0711  3523               	lslf	Mrf49xaModeTx@k,w
  8203  0712  3E32               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  8204  0713  3188               	movlp	high __stringtab
  8205  0714  000A               	callw
  8206  0715  3180               	pagesel	$	;select current page
  8207  0716  00A1               	movwf	Mrf49TxCmd@val
  8208  0717  3523               	lslf	Mrf49xaModeTx@k,w
  8209  0718  3E31               	addlw	low (_mrfRegset_Tx| (0+32768))
  8210  0719  3188               	movlp	high __stringtab
  8211  071A  000A               	callw
  8212  071B  3180               	pagesel	$	;select current page
  8213  071C  22DD               	fcall	_Mrf49TxCmd
  8214  071D  3004               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  8215  071E  0AA3               	incf	Mrf49xaModeTx@k,f
  8216  071F  3188               	movlp	high __stringtab
  8217  0720  000A               	callw
  8218  0721  3180               	pagesel	$	;select current page
  8219  0722  0223               	subwf	Mrf49xaModeTx@k,w
  8220  0723  1C03               	skipc
  8221  0724  2F11               	goto	l3020
  8222  0725                     l3026:	
  8223                           
  8224                           ;mrf49xa.c: 117: rfTrcvStatus.state = TX_PACKET;
  8225  0725  3003               	movlw	3
  8226  0726  0021               	movlb	1	; select bank1
  8227  0727  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  8228                           
  8229                           ;mrf49xa.c: 118: rfTrcvStatus.hwByte = 99;
  8230  0728  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8231  0729  3980               	andlw	-128
  8232  072A  3863               	iorlw	99
  8233  072B  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  8234  072C  0008               	return
  8235  072D                     __end_of_Mrf49xaModeTx:	
  8236  072D                     __ptext19:	
  8237 ;; *************** function _AdcDeinit *****************
  8238 ;; Defined at:
  8239 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;		None
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;		None
  8244 ;; Return value:  Size  Location     Type
  8245 ;;		None               void
  8246 ;; Registers used:
  8247 ;;		status,2
  8248 ;; Tracked objects:
  8249 ;;		On entry : 1F/1
  8250 ;;		On exit  : 1F/1
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8253 ;;      Params:         0       0       0       0
  8254 ;;      Locals:         0       0       0       0
  8255 ;;      Temps:          0       0       0       0
  8256 ;;      Totals:         0       0       0       0
  8257 ;;Total ram usage:        0 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; Hardware stack levels required when called:    5
  8260 ;; This function calls:
  8261 ;;		Nothing
  8262 ;; This function is called by:
  8263 ;;		_PwrAdcSleep
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           
  8268                           ;psect for function _AdcDeinit
  8269  072D                     _AdcDeinit:	
  8270  072D                     l2998:	
  8271                           ;incstack = 0
  8272                           ; Regs used in _AdcDeinit: [status,2]
  8273                           
  8274                           
  8275                           ;adc16.c: 17: FVRCON = 0;
  8276  072D  0022               	movlb	2	; select bank2
  8277  072E  0197               	clrf	23	;volatile
  8278                           
  8279                           ;adc16.c: 19: ADCON2 = 0;
  8280  072F  0021               	movlb	1	; select bank1
  8281  0730  019F               	clrf	31	;volatile
  8282                           
  8283                           ;adc16.c: 20: ADCON1 = 0;
  8284  0731  019E               	clrf	30	;volatile
  8285                           
  8286                           ;adc16.c: 21: ADCON0 = 0;
  8287  0732  019D               	clrf	29	;volatile
  8288  0733  0008               	return
  8289  0734                     __end_of_AdcDeinit:	
  8290  0734                     __ptext17:	
  8291 ;; *************** function _AdcInit *****************
  8292 ;; Defined at:
  8293 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;		None
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;		None
  8298 ;; Return value:  Size  Location     Type
  8299 ;;		None               void
  8300 ;; Registers used:
  8301 ;;		wreg, status,2
  8302 ;; Tracked objects:
  8303 ;;		On entry : 1F/1
  8304 ;;		On exit  : 1F/1
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8307 ;;      Params:         0       0       0       0
  8308 ;;      Locals:         0       0       0       0
  8309 ;;      Temps:          0       0       0       0
  8310 ;;      Totals:         0       0       0       0
  8311 ;;Total ram usage:        0 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    5
  8314 ;; This function calls:
  8315 ;;		Nothing
  8316 ;; This function is called by:
  8317 ;;		_PwrAdcWake
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           
  8322                           ;psect for function _AdcInit
  8323  0734                     _AdcInit:	
  8324  0734                     l2990:	
  8325                           ;incstack = 0
  8326                           ; Regs used in _AdcInit: [wreg+status,2]
  8327                           
  8328                           
  8329                           ;adc16.c: 6: FVRCON = 0b11100001;
  8330  0734  30E1               	movlw	225
  8331  0735  0022               	movlb	2	; select bank2
  8332  0736  0097               	movwf	23	;volatile
  8333                           
  8334                           ;adc16.c: 8: ADCON2 = 0b00000000;
  8335  0737  0021               	movlb	1	; select bank1
  8336  0738  019F               	clrf	31	;volatile
  8337                           
  8338                           ;adc16.c: 9: ADCON1 = 0b11110000;
  8339  0739  30F0               	movlw	240
  8340  073A  009E               	movwf	30	;volatile
  8341                           
  8342                           ;adc16.c: 10: ADCON0 = 0b00000000;
  8343  073B  019D               	clrf	29	;volatile
  8344                           
  8345                           ;adc16.c: 12: ADCON0 = 0b00010011;
  8346  073C  3013               	movlw	19
  8347  073D  009D               	movwf	29	;volatile
  8348  073E  0008               	return
  8349  073F                     __end_of_AdcInit:	
  8350  073F                     __ptext9:	
  8351 ;; *************** function _Mrf49xaShutdown *****************
  8352 ;; Defined at:
  8353 ;;		line 131 in file "../../../src/devices/mrf49xa.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;		None
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;		None
  8358 ;; Return value:  Size  Location     Type
  8359 ;;		None               void
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0, pclath, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 1E/1
  8364 ;;		On exit  : 1F/1
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8367 ;;      Params:         0       0       0       0
  8368 ;;      Locals:         0       0       0       0
  8369 ;;      Temps:          0       0       0       0
  8370 ;;      Totals:         0       0       0       0
  8371 ;;Total ram usage:        0 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    8
  8374 ;; This function calls:
  8375 ;;		_Mrf49xaModeSleep
  8376 ;; This function is called by:
  8377 ;;		_PwrRfSleep
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _Mrf49xaShutdown
  8383  073F                     _Mrf49xaShutdown:	
  8384                           
  8385                           ;mrf49xa.c: 133: Mrf49xaModeSleep();
  8386                           
  8387                           ;incstack = 0
  8388                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  8389  073F  2F40               	ljmp	l2896
  8390  0740                     __end_of_Mrf49xaShutdown:	
  8391  0740                     __ptext10:	
  8392 ;; *************** function _Mrf49xaModeSleep *****************
  8393 ;; Defined at:
  8394 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;		None
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;  k               1    3[BANK0 ] unsigned char 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;		None               void
  8401 ;; Registers used:
  8402 ;;		wreg, status,2, status,0, pclath, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 1E/1
  8405 ;;		On exit  : 1F/1
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8408 ;;      Params:         0       0       0       0
  8409 ;;      Locals:         0       1       0       0
  8410 ;;      Temps:          0       0       0       0
  8411 ;;      Totals:         0       1       0       0
  8412 ;;Total ram usage:        1 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    7
  8415 ;; This function calls:
  8416 ;;		_Mrf49TxCmd
  8417 ;; This function is called by:
  8418 ;;		_Mrf49xaShutdown
  8419 ;; This function uses a non-reentrant model
  8420 ;;
  8421                           
  8422                           
  8423                           ;psect for function _Mrf49xaModeSleep
  8424  0740                     _Mrf49xaModeSleep:	
  8425  0740                     l2896:	
  8426                           ;incstack = 0
  8427                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  8428                           
  8429                           
  8430                           ;mrf49xa.c: 123: UI08_t k;
  8431                           ;mrf49xa.c: 124: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  8432  0740  0020               	movlb	0	; select bank0
  8433  0741  3003               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  8434  0742  01A3               	clrf	Mrf49xaModeSleep@k
  8435  0743  3188               	movlp	high __stringtab
  8436  0744  000A               	callw
  8437  0745  3180               	pagesel	$	;select current page
  8438  0746  3800               	iorlw	0
  8439  0747  1903               	btfsc	3,2
  8440  0748  2F5D               	goto	l2908
  8441  0749                     l2902:	
  8442  0749  3523               	lslf	Mrf49xaModeSleep@k,w
  8443  074A  3E3A               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  8444  074B  3188               	movlp	high __stringtab
  8445  074C  000A               	callw
  8446  074D  3180               	pagesel	$	;select current page
  8447  074E  00A1               	movwf	Mrf49TxCmd@val
  8448  074F  3523               	lslf	Mrf49xaModeSleep@k,w
  8449  0750  3E39               	addlw	low (_mrfRegset_Sleep| (0+32768))
  8450  0751  3188               	movlp	high __stringtab
  8451  0752  000A               	callw
  8452  0753  3180               	pagesel	$	;select current page
  8453  0754  22DD               	fcall	_Mrf49TxCmd
  8454  0755  3003               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  8455  0756  0AA3               	incf	Mrf49xaModeSleep@k,f
  8456  0757  3188               	movlp	high __stringtab
  8457  0758  000A               	callw
  8458  0759  3180               	pagesel	$	;select current page
  8459  075A  0223               	subwf	Mrf49xaModeSleep@k,w
  8460  075B  1C03               	skipc
  8461  075C  2F49               	goto	l2902
  8462  075D                     l2908:	
  8463                           
  8464                           ;mrf49xa.c: 126: rfTrcvStatus.state = POWERED_OFF;
  8465  075D  0021               	movlb	1	; select bank1
  8466  075E  3080               	movlw	-128
  8467  075F  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  8468                           
  8469                           ;mrf49xa.c: 127: rfTrcvStatus.hwByte = 0;
  8470  0760  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
  8471  0761  0008               	return
  8472  0762                     __end_of_Mrf49xaModeSleep:	
  8473  0762                     __ptext7:	
  8474 ;; *************** function _Mrf49xaReboot *****************
  8475 ;; Defined at:
  8476 ;;		line 139 in file "../../../src/devices/mrf49xa.c"
  8477 ;; Parameters:    Size  Location     Type
  8478 ;;		None
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;		None
  8481 ;; Return value:  Size  Location     Type
  8482 ;;		None               void
  8483 ;; Registers used:
  8484 ;;		wreg, status,2, status,0, pclath, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 1F/1
  8487 ;;		On exit  : 1F/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8490 ;;      Params:         0       0       0       0
  8491 ;;      Locals:         0       0       0       0
  8492 ;;      Temps:          0       0       0       0
  8493 ;;      Totals:         0       0       0       0
  8494 ;;Total ram usage:        0 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    8
  8497 ;; This function calls:
  8498 ;;		_Mrf49xaModeRx
  8499 ;; This function is called by:
  8500 ;;		_PwrRfWake
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           
  8505                           ;psect for function _Mrf49xaReboot
  8506  0762                     _Mrf49xaReboot:	
  8507                           
  8508                           ;mrf49xa.c: 141: Mrf49xaModeRx();
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  8512  0762  2AB5               	ljmp	l2580
  8513  0763                     __end_of_Mrf49xaReboot:	
  8514  0763                     PL8:	
  8515  0763  0825               	movf	Mrf49xaTxPacket@packet,w
  8516  0764  3E02               	addlw	2
  8517  0765  0086               	movwf	6
  8518  0766  0187               	clrf	7
  8519  0767  0832               	movf	_cfgRam,w
  8520  0768  0081               	movwf	1
  8521  0769  0A25               	incf	Mrf49xaTxPacket@packet,w
  8522  076A  0086               	movwf	6
  8523  076B  3005               	movlw	5
  8524  076C  0781               	addwf	1,f
  8525  076D  0021               	movlb	1	; select bank1
  8526  076E  30F0               	movlw	-16
  8527  076F  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  8528  0770  0AD1               	incf	(_rfTrcvStatus^(0+128)+49),f
  8529  0771  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  8530  0772  30CF               	movlw	-49
  8531  0773  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  8532  0774  0020               	movlb	0	; select bank0
  8533  0775  0321               	decf	Mrf49xaTxPacket@needAck,w
  8534  0776  3000               	movlw	0
  8535  0777  1903               	skipnz
  8536  0778  3001               	movlw	1
  8537  0779  00A2               	movwf	??_Mrf49xaTxPacket
  8538  077A  0EA2               	swapf	??_Mrf49xaTxPacket,f
  8539  077B  0DA2               	rlf	??_Mrf49xaTxPacket,f
  8540  077C  0DA2               	rlf	??_Mrf49xaTxPacket,f
  8541  077D  0021               	movlb	1	; select bank1
  8542  077E  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8543  077F  0020               	movlb	0	; select bank0
  8544  0780  0622               	xorwf	??_Mrf49xaTxPacket,w
  8545  0781  393F               	andlw	-193
  8546  0782  0622               	xorwf	??_Mrf49xaTxPacket,w
  8547  0783  0021               	movlb	1	; select bank1
  8548  0784  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  8549  0785  0008               	return
  8550  0786                     __end_ofPL8:	
  8551  0786                     PL10:	
  8552  0786  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8553  0787  390F               	andlw	15
  8554  0788  0020               	movlb	0	; select bank0
  8555  0789  00AB               	movwf	??_Mrf49xaTick
  8556  078A  0AAB               	incf	??_Mrf49xaTick,f
  8557  078B  0021               	movlb	1	; select bank1
  8558  078C  0868               	movf	(_rfTrcvStatus^(0+128)+72),w
  8559  078D  0020               	movlb	0	; select bank0
  8560  078E  062B               	xorwf	??_Mrf49xaTick,w
  8561  078F  39F0               	andlw	-16
  8562  0790  062B               	xorwf	??_Mrf49xaTick,w
  8563  0791  0021               	movlb	1	; select bank1
  8564  0792  00E8               	movwf	(_rfTrcvStatus^(0+128)+72)
  8565  0793  0008               	return
  8566  0794                     __end_ofPL10:	
  8567  0794                     PL12:	
  8568  0794  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8569  0795  397F               	andlw	127
  8570  0796  0020               	movlb	0	; select bank0
  8571  0797  00A4               	movwf	??_Mrf49xaServe
  8572  0798  0AA4               	incf	??_Mrf49xaServe,f
  8573  0799  0021               	movlb	1	; select bank1
  8574  079A  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  8575  079B  0020               	movlb	0	; select bank0
  8576  079C  0624               	xorwf	??_Mrf49xaServe,w
  8577  079D  3980               	andlw	-128
  8578  079E  0624               	xorwf	??_Mrf49xaServe,w
  8579  079F  0021               	movlb	1	; select bank1
  8580  07A0  0008               	return
  8581  07A1                     __end_ofPL12:	
  8582  07A1                     PL14:	
  8583  07A1  3E03               	addlw	3
  8584  07A2  0086               	movwf	6
  8585  07A3  0187               	clrf	7
  8586  07A4  0825               	movf	Mrf49xaTxPacket@packet,w
  8587  07A5  3E02               	addlw	2
  8588  07A6  0084               	movwf	4
  8589  07A7  0185               	clrf	5
  8590  07A8  0800               	movf	0,w
  8591  07A9  0081               	movwf	1
  8592  07AA  0008               	return
  8593  07AB                     __end_ofPL14:	
  8594  07AB                     PL18:	
  8595  07AB  0187               	clrf	7
  8596  07AC  0081               	movwf	1
  8597  07AD  0828               	movf	handleCfgCmd@packet,w
  8598  07AE  3E07               	addlw	7
  8599  07AF  0086               	movwf	6
  8600  07B0  0008               	return
  8601  07B1                     __end_ofPL18:	
  8602  07B1                     PL20:	
  8603  07B1  170D               	bsf	13,6	;volatile
  8604  07B2  160D               	bsf	13,4	;volatile
  8605  07B3  0021               	movlb	1	; select bank1
  8606  07B4  130D               	bcf	13,6	;volatile
  8607  07B5  120D               	bcf	13,4	;volatile
  8608  07B6  0008               	return
  8609  07B7                     __end_ofPL20:	
  8610  07B7                     PL22:	
  8611  07B7  018E               	clrf	14	;volatile
  8612  07B8  0020               	movlb	0	; select bank0
  8613  07B9  140E               	bsf	14,0	;volatile
  8614  07BA  0021               	movlb	1	; select bank1
  8615  07BB  100E               	bcf	14,0	;volatile
  8616  07BC  0008               	return
  8617  07BD                     __end_ofPL22:	
  8618  07BD                     PL24:	
  8619  07BD  0020               	movlb	0	; select bank0
  8620  07BE  0825               	movf	Mrf49xaServe@data,w
  8621  07BF  0081               	movwf	1
  8622  07C0  0021               	movlb	1	; select bank1
  8623  07C1  0820               	movf	_rfTrcvStatus^(0+128),w
  8624  07C2  0008               	return
  8625  07C3                     __end_ofPL24:	
  8626  07C3                     PL26:	
  8627  07C3  3040               	movlw	64
  8628  07C4  0020               	movlb	0	; select bank0
  8629  07C5  00A0               	movwf	Sleepy@ms
  8630  07C6  01A1               	clrf	Sleepy@ms+1
  8631  07C7  0008               	return
  8632  07C8                     __end_ofPL26:	
  8633  07C8                     PL28:	
  8634  07C8  3E06               	addlw	6
  8635  07C9  0086               	movwf	6
  8636  07CA  0187               	clrf	7
  8637  07CB  0801               	movf	1,w
  8638  07CC  0008               	return
  8639  07CD                     __end_ofPL28:	
  8640                           
  8641                           	psect	bssBANK0
  8642  0032                     __pbssBANK0:	
  8643  0032                     _cfgRam:	
  8644  0032                     	ds	9
  8645  003B                     _mrf49Status:	
  8646  003B                     	ds	2
  8647                           
  8648                           	psect	bssBANK1
  8649  00A0                     __pbssBANK1:	
  8650  00A0                     _rfTrcvStatus:	
  8651  00A0                     	ds	75
  8652                           
  8653                           	psect	clrtext
  8654  07CD                     clear_ram0:	
  8655                           ;	Called with FSR0 containing the base address, and
  8656                           ;	WREG with the size to clear
  8657                           
  8658  07CD  0064               	clrwdt	;clear the watchdog before getting into this loop
  8659  07CE                     clrloop0:	
  8660  07CE  0180               	clrf	0	;clear RAM location pointed to by FSR
  8661  07CF  3101               	addfsr 0,1
  8662  07D0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8663  07D1  2FCE               	goto	clrloop0	;have we reached the end yet?
  8664  07D2  3400               	retlw	0	;all done for this memory range, return
  8665                           
  8666                           	psect	cstackCOMMON
  8667  0070                     __pcstackCOMMON:	
  8668  0070                     ?_SoftI2cStart:	
  8669  0070                     ?_SoftI2cStop:	
  8670                           ; 0 bytes @ 0x0
  8671                           
  8672  0070                     ?_Mrf49xaNeedsReset:	
  8673                           ; 0 bytes @ 0x0
  8674                           
  8675  0070                     ?_Mrf49RxSts:	
  8676                           ; 0 bytes @ 0x0
  8677                           
  8678  0070                     ?_HandlePacket:	
  8679                           ; 0 bytes @ 0x0
  8680                           
  8681  0070                     ?_CfgSave:	
  8682                           ; 0 bytes @ 0x0
  8683                           
  8684  0070                     ?_CfgLoad:	
  8685                           ; 0 bytes @ 0x0
  8686                           
  8687  0070                     ?_PwrAdcWake:	
  8688                           ; 0 bytes @ 0x0
  8689                           
  8690  0070                     ?_PwrAdcSleep:	
  8691                           ; 0 bytes @ 0x0
  8692                           
  8693  0070                     ?_PwrAdcInit:	
  8694                           ; 0 bytes @ 0x0
  8695                           
  8696  0070                     ?_PwrSensorInit:	
  8697                           ; 0 bytes @ 0x0
  8698                           
  8699  0070                     ?_PwrI2cInit:	
  8700                           ; 0 bytes @ 0x0
  8701                           
  8702  0070                     ?_PwrRfInit:	
  8703                           ; 0 bytes @ 0x0
  8704                           
  8705  0070                     ?_PwrSensorSleep:	
  8706                           ; 0 bytes @ 0x0
  8707                           
  8708  0070                     ?_PwrI2cSleep:	
  8709                           ; 0 bytes @ 0x0
  8710                           
  8711  0070                     ?_PwrRfSleep:	
  8712                           ; 0 bytes @ 0x0
  8713                           
  8714  0070                     ?_PwrSensorWake:	
  8715                           ; 0 bytes @ 0x0
  8716                           
  8717  0070                     ?_PwrI2cWake:	
  8718                           ; 0 bytes @ 0x0
  8719                           
  8720  0070                     ?_PwrRfWake:	
  8721                           ; 0 bytes @ 0x0
  8722                           
  8723  0070                     ?_SoftI2cNop:	
  8724                           ; 0 bytes @ 0x0
  8725                           
  8726  0070                     ?_SoftI2cInit:	
  8727                           ; 0 bytes @ 0x0
  8728                           
  8729  0070                     ?_SoftI2cRepeatedStart:	
  8730                           ; 0 bytes @ 0x0
  8731                           
  8732  0070                     ?_AdcInit:	
  8733                           ; 0 bytes @ 0x0
  8734                           
  8735  0070                     ?_AdcDeinit:	
  8736                           ; 0 bytes @ 0x0
  8737                           
  8738  0070                     ?_AdcGo:	
  8739                           ; 0 bytes @ 0x0
  8740                           
  8741  0070                     ?_AdcChSelect:	
  8742                           ; 0 bytes @ 0x0
  8743                           
  8744  0070                     ?_ExtIntInit:	
  8745                           ; 0 bytes @ 0x0
  8746                           
  8747  0070                     ?_ExtIntDeinit:	
  8748                           ; 0 bytes @ 0x0
  8749                           
  8750  0070                     ??_ExtIntDeinit:	
  8751                           ; 0 bytes @ 0x0
  8752                           
  8753  0070                     ?_extInt:	
  8754                           ; 0 bytes @ 0x0
  8755                           
  8756  0070                     ?_Mcp9800Start:	
  8757                           ; 0 bytes @ 0x0
  8758                           
  8759  0070                     ?_Mrf49xaModeRx:	
  8760                           ; 0 bytes @ 0x0
  8761                           
  8762  0070                     ?_Mrf49xaModeTx:	
  8763                           ; 0 bytes @ 0x0
  8764                           
  8765  0070                     ?_Mrf49xaModeSleep:	
  8766                           ; 0 bytes @ 0x0
  8767                           
  8768  0070                     ?_Mrf49xaShutdown:	
  8769                           ; 0 bytes @ 0x0
  8770                           
  8771  0070                     ?_Mrf49xaReboot:	
  8772                           ; 0 bytes @ 0x0
  8773                           
  8774  0070                     ?_Mrf49xaInit:	
  8775                           ; 0 bytes @ 0x0
  8776                           
  8777  0070                     ?_Mrf49SpiTx:	
  8778                           ; 0 bytes @ 0x0
  8779                           
  8780  0070                     ?_Mrf49TxByte:	
  8781                           ; 0 bytes @ 0x0
  8782                           
  8783  0070                     ?_Mrf49xaTxAck:	
  8784                           ; 0 bytes @ 0x0
  8785                           
  8786  0070                     ?_Mrf49xaFreePacket:	
  8787                           ; 0 bytes @ 0x0
  8788                           
  8789  0070                     ?_Mrf49xaTick:	
  8790                           ; 0 bytes @ 0x0
  8791                           
  8792  0070                     ?_handleFwCmd:	
  8793                           ; 0 bytes @ 0x0
  8794                           
  8795  0070                     ?_handleCfgRead:	
  8796                           ; 0 bytes @ 0x0
  8797                           
  8798  0070                     ?_handleCfgWrite:	
  8799                           ; 0 bytes @ 0x0
  8800                           
  8801  0070                     ?_handleCfgCmd:	
  8802                           ; 0 bytes @ 0x0
  8803                           
  8804  0070                     ?_main:	
  8805                           ; 0 bytes @ 0x0
  8806                           
  8807  0070                     ?i1_Mrf49xaModeRx:	
  8808                           ; 0 bytes @ 0x0
  8809                           
  8810  0070                     ?i1_Mrf49xaNeedsReset:	
  8811                           ; 0 bytes @ 0x0
  8812                           
  8813  0070                     ??i1_Mrf49xaNeedsReset:	
  8814                           ; 0 bytes @ 0x0
  8815                           
  8816  0070                     ?i1_Mrf49SpiTx:	
  8817                           ; 0 bytes @ 0x0
  8818                           
  8819  0070                     ??i1_Mrf49SpiTx:	
  8820                           ; 0 bytes @ 0x0
  8821                           
  8822  0070                     ??i1_Mrf49SpiRx:	
  8823                           ; 0 bytes @ 0x0
  8824                           
  8825  0070                     ?i1_Mrf49RxSts:	
  8826                           ; 0 bytes @ 0x0
  8827                           
  8828  0070                     ?i1_Mrf49TxByte:	
  8829                           ; 0 bytes @ 0x0
  8830                           
  8831  0070                     ?_SoftI2cTxByte:	
  8832                           ; 0 bytes @ 0x0
  8833                           
  8834  0070                     ?_Mrf49xaServe:	
  8835                           ; 1 bytes @ 0x0
  8836                           
  8837  0070                     ?_CfgGetSizeByType:	
  8838                           ; 1 bytes @ 0x0
  8839                           
  8840  0070                     ?_SoftI2cRxByte:	
  8841                           ; 1 bytes @ 0x0
  8842                           
  8843  0070                     ?_AdcIsBusy:	
  8844                           ; 1 bytes @ 0x0
  8845                           
  8846  0070                     ?_Mrf49SpiRx:	
  8847                           ; 1 bytes @ 0x0
  8848                           
  8849  0070                     ?_Mrf49RxCmd:	
  8850                           ; 1 bytes @ 0x0
  8851                           
  8852  0070                     ?_Mrf49RxByte:	
  8853                           ; 1 bytes @ 0x0
  8854                           
  8855  0070                     ?_Mrf49xaPacketPending:	
  8856                           ; 1 bytes @ 0x0
  8857                           
  8858  0070                     ?_Mrf49xaRxPacket:	
  8859                           ; 1 bytes @ 0x0
  8860                           
  8861  0070                     ?_Mrf49xaAllocPacket:	
  8862                           ; 1 bytes @ 0x0
  8863                           
  8864  0070                     ?i1_Mrf49SpiRx:	
  8865                           ; 1 bytes @ 0x0
  8866                           
  8867  0070                     ?i1_Mrf49RxCmd:	
  8868                           ; 1 bytes @ 0x0
  8869                           
  8870  0070                     ?i1_Mrf49RxByte:	
  8871                           ; 1 bytes @ 0x0
  8872                           
  8873  0070                     ?i1_Mrf49xaServe:	
  8874                           ; 1 bytes @ 0x0
  8875                           
  8876  0070                     i1Mrf49SpiTx@byte:	
  8877                           ; 1 bytes @ 0x0
  8878                           
  8879  0070                     i1Mrf49SpiRx@data:	
  8880                           ; 1 bytes @ 0x0
  8881                           
  8882                           
  8883                           ; 1 bytes @ 0x0
  8884  0070                     	ds	1
  8885  0071                     ?i1_Mrf49TxCmd:	
  8886  0071                     ??i1_Mrf49RxCmd:	
  8887                           ; 0 bytes @ 0x1
  8888                           
  8889  0071                     ??i1_Mrf49RxSts:	
  8890                           ; 0 bytes @ 0x1
  8891                           
  8892  0071                     i1Mrf49TxCmd@val:	
  8893                           ; 0 bytes @ 0x1
  8894                           
  8895  0071                     i1Mrf49RxCmd@cmd:	
  8896                           ; 1 bytes @ 0x1
  8897                           
  8898                           
  8899                           ; 1 bytes @ 0x1
  8900  0071                     	ds	1
  8901  0072                     ??i1_Mrf49TxCmd:	
  8902  0072                     i1Mrf49TxCmd@cmd:	
  8903                           ; 0 bytes @ 0x2
  8904                           
  8905  0072                     i1Mrf49RxCmd@val:	
  8906                           ; 1 bytes @ 0x2
  8907                           
  8908                           
  8909                           ; 1 bytes @ 0x2
  8910  0072                     	ds	1
  8911  0073                     ??i1_Mrf49xaModeRx:	
  8912  0073                     ??i1_Mrf49RxByte:	
  8913                           ; 0 bytes @ 0x3
  8914                           
  8915  0073                     ??i1_Mrf49TxByte:	
  8916                           ; 0 bytes @ 0x3
  8917                           
  8918  0073                     i1Mrf49xaModeRx@k:	
  8919                           ; 0 bytes @ 0x3
  8920                           
  8921  0073                     i1Mrf49TxByte@byte:	
  8922                           ; 1 bytes @ 0x3
  8923                           
  8924                           
  8925                           ; 1 bytes @ 0x3
  8926  0073                     	ds	1
  8927  0074                     ??i1_Mrf49xaServe:	
  8928                           
  8929                           ; 0 bytes @ 0x4
  8930  0074                     	ds	1
  8931  0075                     i1Mrf49xaServe@data:	
  8932                           
  8933                           ; 1 bytes @ 0x5
  8934  0075                     	ds	1
  8935  0076                     ??_extInt:	
  8936                           
  8937                           ; 0 bytes @ 0x6
  8938  0076                     	ds	1
  8939  0077                     extInt@ofw:	
  8940                           
  8941                           ; 1 bytes @ 0x7
  8942  0077                     	ds	1
  8943                           
  8944                           	psect	cstackBANK0
  8945  0020                     __pcstackBANK0:	
  8946  0020                     ??_Mrf49xaNeedsReset:	
  8947  0020                     ?_Sleepy:	
  8948                           ; 0 bytes @ 0x0
  8949                           
  8950  0020                     ??_CfgGetSizeByType:	
  8951                           ; 0 bytes @ 0x0
  8952                           
  8953  0020                     ??_PwrAdcWake:	
  8954                           ; 0 bytes @ 0x0
  8955                           
  8956  0020                     ??_PwrAdcSleep:	
  8957                           ; 0 bytes @ 0x0
  8958                           
  8959  0020                     ??_PwrAdcInit:	
  8960                           ; 0 bytes @ 0x0
  8961                           
  8962  0020                     ??_PwrSensorInit:	
  8963                           ; 0 bytes @ 0x0
  8964                           
  8965  0020                     ??_PwrSensorSleep:	
  8966                           ; 0 bytes @ 0x0
  8967                           
  8968  0020                     ??_PwrI2cSleep:	
  8969                           ; 0 bytes @ 0x0
  8970                           
  8971  0020                     ??_PwrSensorWake:	
  8972                           ; 0 bytes @ 0x0
  8973                           
  8974  0020                     ??_PwrI2cWake:	
  8975                           ; 0 bytes @ 0x0
  8976                           
  8977  0020                     ??_SoftI2cNop:	
  8978                           ; 0 bytes @ 0x0
  8979                           
  8980  0020                     ??_AdcInit:	
  8981                           ; 0 bytes @ 0x0
  8982                           
  8983  0020                     ??_AdcDeinit:	
  8984                           ; 0 bytes @ 0x0
  8985                           
  8986  0020                     ??_AdcGo:	
  8987                           ; 0 bytes @ 0x0
  8988                           
  8989  0020                     ??_AdcIsBusy:	
  8990                           ; 0 bytes @ 0x0
  8991                           
  8992  0020                     ??_AdcChSelect:	
  8993                           ; 0 bytes @ 0x0
  8994                           
  8995  0020                     ??_ExtIntInit:	
  8996                           ; 0 bytes @ 0x0
  8997                           
  8998  0020                     ??_Mrf49SpiTx:	
  8999                           ; 0 bytes @ 0x0
  9000                           
  9001  0020                     ??_Mrf49SpiRx:	
  9002                           ; 0 bytes @ 0x0
  9003                           
  9004  0020                     ??_Mrf49xaPacketPending:	
  9005                           ; 0 bytes @ 0x0
  9006                           
  9007  0020                     ??_Mrf49xaFreePacket:	
  9008                           ; 0 bytes @ 0x0
  9009                           
  9010  0020                     ??_Mrf49xaRxPacket:	
  9011                           ; 0 bytes @ 0x0
  9012                           
  9013  0020                     ??_Mrf49xaAllocPacket:	
  9014                           ; 0 bytes @ 0x0
  9015                           
  9016  0020                     ?_Mrf49xaTxPacket:	
  9017                           ; 0 bytes @ 0x0
  9018                           
  9019  0020                     ?_memcpy:	
  9020                           ; 1 bytes @ 0x0
  9021                           
  9022  0020                     ?_AdcGetResult:	
  9023                           ; 1 bytes @ 0x0
  9024                           
  9025  0020                     AdcChSelect@channel:	
  9026                           ; 2 bytes @ 0x0
  9027                           
  9028  0020                     Mrf49SpiTx@byte:	
  9029                           ; 1 bytes @ 0x0
  9030                           
  9031  0020                     Mrf49SpiRx@data:	
  9032                           ; 1 bytes @ 0x0
  9033                           
  9034  0020                     Mrf49xaTxPacket@response:	
  9035                           ; 1 bytes @ 0x0
  9036                           
  9037  0020                     Mrf49xaFreePacket@packet:	
  9038                           ; 1 bytes @ 0x0
  9039                           
  9040  0020                     CfgGetSizeByType@type:	
  9041                           ; 1 bytes @ 0x0
  9042                           
  9043  0020                     memcpy@s1:	
  9044                           ; 1 bytes @ 0x0
  9045                           
  9046  0020                     Sleepy@ms:	
  9047                           ; 1 bytes @ 0x0
  9048                           
  9049                           
  9050                           ; 2 bytes @ 0x0
  9051  0020                     	ds	1
  9052  0021                     ??_SoftI2cStart:	
  9053  0021                     ??_SoftI2cTxByte:	
  9054                           ; 0 bytes @ 0x1
  9055                           
  9056  0021                     ??_SoftI2cStop:	
  9057                           ; 0 bytes @ 0x1
  9058                           
  9059  0021                     ?_Mrf49TxCmd:	
  9060                           ; 0 bytes @ 0x1
  9061                           
  9062  0021                     ??_Mrf49RxSts:	
  9063                           ; 0 bytes @ 0x1
  9064                           
  9065  0021                     ??_SoftI2cRepeatedStart:	
  9066                           ; 0 bytes @ 0x1
  9067                           
  9068  0021                     ??_SoftI2cRxByte:	
  9069                           ; 0 bytes @ 0x1
  9070                           
  9071  0021                     ??_Mrf49RxCmd:	
  9072                           ; 0 bytes @ 0x1
  9073                           
  9074  0021                     SoftI2cRxByte@ack:	
  9075                           ; 0 bytes @ 0x1
  9076                           
  9077  0021                     Mrf49TxCmd@val:	
  9078                           ; 1 bytes @ 0x1
  9079                           
  9080  0021                     Mrf49RxCmd@cmd:	
  9081                           ; 1 bytes @ 0x1
  9082                           
  9083  0021                     Mrf49xaTxPacket@needAck:	
  9084                           ; 1 bytes @ 0x1
  9085                           
  9086  0021                     memcpy@n:	
  9087                           ; 1 bytes @ 0x1
  9088                           
  9089                           
  9090                           ; 2 bytes @ 0x1
  9091  0021                     	ds	1
  9092  0022                     ??_Sleepy:	
  9093  0022                     ??_Mrf49TxCmd:	
  9094                           ; 0 bytes @ 0x2
  9095                           
  9096  0022                     ??_Mrf49xaTxPacket:	
  9097                           ; 0 bytes @ 0x2
  9098                           
  9099  0022                     ??_AdcGetResult:	
  9100                           ; 0 bytes @ 0x2
  9101                           
  9102  0022                     ?_AdcSample:	
  9103                           ; 0 bytes @ 0x2
  9104                           
  9105  0022                     SoftI2cTxByte@data:	
  9106                           ; 2 bytes @ 0x2
  9107                           
  9108  0022                     SoftI2cRxByte@data:	
  9109                           ; 1 bytes @ 0x2
  9110                           
  9111  0022                     Mrf49TxCmd@cmd:	
  9112                           ; 1 bytes @ 0x2
  9113                           
  9114  0022                     Mrf49RxCmd@val:	
  9115                           ; 1 bytes @ 0x2
  9116                           
  9117                           
  9118                           ; 1 bytes @ 0x2
  9119  0022                     	ds	1
  9120  0023                     ??_memcpy:	
  9121  0023                     ??_Mrf49xaModeRx:	
  9122                           ; 0 bytes @ 0x3
  9123                           
  9124  0023                     ??_Mrf49xaModeTx:	
  9125                           ; 0 bytes @ 0x3
  9126                           
  9127  0023                     ??_Mrf49xaModeSleep:	
  9128                           ; 0 bytes @ 0x3
  9129                           
  9130  0023                     ??_Mrf49RxByte:	
  9131                           ; 0 bytes @ 0x3
  9132                           
  9133  0023                     ??_Mrf49TxByte:	
  9134                           ; 0 bytes @ 0x3
  9135                           
  9136  0023                     SoftI2cTxByte@i:	
  9137                           ; 0 bytes @ 0x3
  9138                           
  9139  0023                     SoftI2cRxByte@i:	
  9140                           ; 1 bytes @ 0x3
  9141                           
  9142  0023                     Mrf49xaModeRx@k:	
  9143                           ; 1 bytes @ 0x3
  9144                           
  9145  0023                     Mrf49xaModeTx@k:	
  9146                           ; 1 bytes @ 0x3
  9147                           
  9148  0023                     Mrf49xaModeSleep@k:	
  9149                           ; 1 bytes @ 0x3
  9150                           
  9151  0023                     Mrf49TxByte@byte:	
  9152                           ; 1 bytes @ 0x3
  9153                           
  9154  0023                     Mrf49xaTxPacket@crc:	
  9155                           ; 1 bytes @ 0x3
  9156                           
  9157  0023                     Sleepy@b:	
  9158                           ; 1 bytes @ 0x3
  9159                           
  9160  0023                     memcpy@d:	
  9161                           ; 1 bytes @ 0x3
  9162                           
  9163                           
  9164                           ; 1 bytes @ 0x3
  9165  0023                     	ds	1
  9166  0024                     ??_Mrf49xaServe:	
  9167  0024                     ??_PwrI2cInit:	
  9168                           ; 0 bytes @ 0x4
  9169                           
  9170  0024                     ??_PwrRfSleep:	
  9171                           ; 0 bytes @ 0x4
  9172                           
  9173  0024                     ??_PwrRfWake:	
  9174                           ; 0 bytes @ 0x4
  9175                           
  9176  0024                     ??_SoftI2cInit:	
  9177                           ; 0 bytes @ 0x4
  9178                           
  9179  0024                     ??_AdcSample:	
  9180                           ; 0 bytes @ 0x4
  9181                           
  9182  0024                     ??_Mcp9800Start:	
  9183                           ; 0 bytes @ 0x4
  9184                           
  9185  0024                     ??_Mrf49xaShutdown:	
  9186                           ; 0 bytes @ 0x4
  9187                           
  9188  0024                     ??_Mrf49xaReboot:	
  9189                           ; 0 bytes @ 0x4
  9190                           
  9191  0024                     ?_eepromRxBytes:	
  9192                           ; 0 bytes @ 0x4
  9193                           
  9194  0024                     ?_eepromTxBytes:	
  9195                           ; 0 bytes @ 0x4
  9196                           
  9197  0024                     ?_Mcp9800Read:	
  9198                           ; 0 bytes @ 0x4
  9199                           
  9200  0024                     Mcp9800Start@resolution:	
  9201                           ; 2 bytes @ 0x4
  9202                           
  9203  0024                     Mrf49xaTxPacket@i:	
  9204                           ; 1 bytes @ 0x4
  9205                           
  9206  0024                     memcpy@s:	
  9207                           ; 1 bytes @ 0x4
  9208                           
  9209  0024                     eepromRxBytes@address:	
  9210                           ; 1 bytes @ 0x4
  9211                           
  9212  0024                     eepromTxBytes@address:	
  9213                           ; 2 bytes @ 0x4
  9214                           
  9215                           
  9216                           ; 2 bytes @ 0x4
  9217  0024                     	ds	1
  9218  0025                     AdcSample@ch:	
  9219  0025                     Mrf49xaTxPacket@packet:	
  9220                           ; 1 bytes @ 0x5
  9221                           
  9222  0025                     Mrf49xaServe@data:	
  9223                           ; 1 bytes @ 0x5
  9224                           
  9225  0025                     memcpy@d1:	
  9226                           ; 1 bytes @ 0x5
  9227                           
  9228                           
  9229                           ; 1 bytes @ 0x5
  9230  0025                     	ds	1
  9231  0026                     ??_Mcp9800Read:	
  9232  0026                     ??_Mrf49xaInit:	
  9233                           ; 0 bytes @ 0x6
  9234                           
  9235  0026                     ??_Mrf49xaTxAck:	
  9236                           ; 0 bytes @ 0x6
  9237                           
  9238  0026                     ??_handleCfgRead:	
  9239                           ; 0 bytes @ 0x6
  9240                           
  9241  0026                     ??_handleCfgWrite:	
  9242                           ; 0 bytes @ 0x6
  9243                           
  9244  0026                     ?_RfSendSampleWeatherNode:	
  9245                           ; 0 bytes @ 0x6
  9246                           
  9247  0026                     Mcp9800Read@tempH:	
  9248                           ; 0 bytes @ 0x6
  9249                           
  9250  0026                     Mrf49xaInit@k:	
  9251                           ; 1 bytes @ 0x6
  9252                           
  9253  0026                     Mrf49xaTxAck@packet:	
  9254                           ; 1 bytes @ 0x6
  9255                           
  9256  0026                     eepromRxBytes@data:	
  9257                           ; 1 bytes @ 0x6
  9258                           
  9259  0026                     eepromTxBytes@data:	
  9260                           ; 1 bytes @ 0x6
  9261                           
  9262  0026                     handleCfgRead@nrOfBytes:	
  9263                           ; 1 bytes @ 0x6
  9264                           
  9265  0026                     handleCfgWrite@nrOfBytes:	
  9266                           ; 1 bytes @ 0x6
  9267                           
  9268  0026                     RfSendSampleWeatherNode@temperature:	
  9269                           ; 1 bytes @ 0x6
  9270                           
  9271                           
  9272                           ; 2 bytes @ 0x6
  9273  0026                     	ds	1
  9274  0027                     ??_PwrRfInit:	
  9275  0027                     Mcp9800Read@tempL:	
  9276                           ; 0 bytes @ 0x7
  9277                           
  9278  0027                     eepromRxBytes@size:	
  9279                           ; 1 bytes @ 0x7
  9280                           
  9281  0027                     eepromTxBytes@size:	
  9282                           ; 1 bytes @ 0x7
  9283                           
  9284  0027                     handleCfgRead@index:	
  9285                           ; 1 bytes @ 0x7
  9286                           
  9287  0027                     handleCfgWrite@index:	
  9288                           ; 1 bytes @ 0x7
  9289                           
  9290                           
  9291                           ; 1 bytes @ 0x7
  9292  0027                     	ds	1
  9293  0028                     ??_CfgSave:	
  9294  0028                     ??_CfgLoad:	
  9295                           ; 0 bytes @ 0x8
  9296                           
  9297  0028                     ??_eepromRxBytes:	
  9298                           ; 0 bytes @ 0x8
  9299                           
  9300  0028                     ??_eepromTxBytes:	
  9301                           ; 0 bytes @ 0x8
  9302                           
  9303  0028                     ??_handleFwCmd:	
  9304                           ; 0 bytes @ 0x8
  9305                           
  9306  0028                     ??_handleCfgCmd:	
  9307                           ; 0 bytes @ 0x8
  9308                           
  9309  0028                     handleFwCmd@packet:	
  9310                           ; 0 bytes @ 0x8
  9311                           
  9312  0028                     handleCfgRead@packet:	
  9313                           ; 1 bytes @ 0x8
  9314                           
  9315  0028                     handleCfgWrite@packet:	
  9316                           ; 1 bytes @ 0x8
  9317                           
  9318  0028                     handleCfgCmd@packet:	
  9319                           ; 1 bytes @ 0x8
  9320                           
  9321  0028                     RfSendSampleWeatherNode@humidity:	
  9322                           ; 1 bytes @ 0x8
  9323                           
  9324                           
  9325                           ; 2 bytes @ 0x8
  9326  0028                     	ds	1
  9327  0029                     ??_HandlePacket:	
  9328  0029                     HandlePacket@response:	
  9329                           ; 0 bytes @ 0x9
  9330                           
  9331                           
  9332                           ; 1 bytes @ 0x9
  9333  0029                     	ds	1
  9334  002A                     ??_RfSendSampleWeatherNode:	
  9335  002A                     HandlePacket@packet:	
  9336                           ; 0 bytes @ 0xA
  9337                           
  9338  002A                     RfSendSampleWeatherNode@packet:	
  9339                           ; 1 bytes @ 0xA
  9340                           
  9341                           
  9342                           ; 1 bytes @ 0xA
  9343  002A                     	ds	1
  9344  002B                     ??_Mrf49xaTick:	
  9345                           
  9346                           ; 0 bytes @ 0xB
  9347  002B                     	ds	1
  9348  002C                     Mrf49xaTick@timeout:	
  9349                           
  9350                           ; 1 bytes @ 0xC
  9351  002C                     	ds	1
  9352  002D                     Mrf49xaTick@packet:	
  9353                           
  9354                           ; 1 bytes @ 0xD
  9355  002D                     	ds	1
  9356  002E                     ??_main:	
  9357  002E                     main@humidity:	
  9358                           ; 0 bytes @ 0xE
  9359                           
  9360                           
  9361                           ; 2 bytes @ 0xE
  9362  002E                     	ds	2
  9363  0030                     main@temperature:	
  9364                           
  9365                           ; 2 bytes @ 0x10
  9366  0030                     	ds	2
  9367                           
  9368                           	psect	text63
  9369  0000                     __ptext63:	
  9370 ;; *************** function _AdcGetResult *****************
  9371 ;; Defined at:
  9372 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;		None
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;		None
  9377 ;; Return value:  Size  Location     Type
  9378 ;;                  2    0[BANK0 ] unsigned int 
  9379 ;; Registers used:
  9380 ;;		wreg
  9381 ;; Tracked objects:
  9382 ;;		On entry : 1F/1
  9383 ;;		On exit  : 1F/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9386 ;;      Params:         0       2       0       0
  9387 ;;      Locals:         0       0       0       0
  9388 ;;      Temps:          0       0       0       0
  9389 ;;      Totals:         0       2       0       0
  9390 ;;Total ram usage:        2 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    5
  9393 ;; This function calls:
  9394 ;;		Nothing
  9395 ;; This function is called by:
  9396 ;;		_AdcSample
  9397 ;; This function uses a non-reentrant model
  9398 ;;
  9399                           
  9400  0000                     _AdcGetResult:	
  9401                           ;psect for function _AdcGetResult
  9402                           
  9403  0000                     __end_of_AdcGetResult:	
  9404                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9405                           
  9406                           ;incstack = 0
  9407                           ; Regs used in _AdcGetResult: [wreg]
  9408                           
  9409                           
  9410                           	psect	intentry
  9411  0004                     __pintentry:	
  9412 ;; *************** function _extInt *****************
  9413 ;; Defined at:
  9414 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;		None
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  ofw             1    7[COMMON] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;		None               void
  9421 ;; Registers used:
  9422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 1F/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9428 ;;      Params:         0       0       0       0
  9429 ;;      Locals:         1       0       0       0
  9430 ;;      Temps:          1       0       0       0
  9431 ;;      Totals:         2       0       0       0
  9432 ;;Total ram usage:        2 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    4
  9435 ;; This function calls:
  9436 ;;		_ExtIntDeinit
  9437 ;;		i1_Mrf49xaNeedsReset
  9438 ;;		i1_Mrf49xaServe
  9439 ;; This function is called by:
  9440 ;;		Interrupt level 1
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444  0004                     _extInt:	
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9448  0004  3180               	pagesel	$
  9449  0005  0020               	movlb	0	; select bank0
  9450  0006  087F               	movf	127,w
  9451  0007  00F6               	movwf	??_extInt
  9452                           
  9453                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  9454  0008  1C8B               	btfss	11,1	;volatile
  9455  0009  281C               	goto	i1l142
  9456                           
  9457                           ;interrupt.c: 39: {
  9458                           ;interrupt.c: 40: uint8_t ofw = 0;
  9459  000A  01F7               	clrf	extInt@ofw
  9460  000B                     i1l3510:	
  9461                           ;interrupt.c: 41: while (!Mrf49xaServe())
  9462                           
  9463  000B  318E  2624  3180   	fcall	i1_Mrf49xaServe
  9464  000E  3A00               	xorlw	0
  9465  000F  1D03               	btfss	3,2
  9466  0010  281B               	goto	i1l141
  9467                           
  9468                           ;interrupt.c: 42: {
  9469                           ;interrupt.c: 43: ofw++;
  9470  0011  0AF7               	incf	extInt@ofw,f
  9471                           
  9472                           ;interrupt.c: 44: if (ofw == 255)
  9473  0012  0877               	movf	extInt@ofw,w
  9474  0013  3AFF               	xorlw	255
  9475  0014  1D03               	skipz
  9476  0015  280B               	goto	i1l3510
  9477                           
  9478                           ;interrupt.c: 45: {
  9479                           ;interrupt.c: 46: ExtIntDeinit();
  9480  0016  3187  27D3  3180   	fcall	_ExtIntDeinit
  9481                           
  9482                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  9483  0019  318F  2738         	fcall	i1_Mrf49xaNeedsReset
  9484  001B                     i1l141:	
  9485                           ;interrupt.c: 48: break;
  9486                           
  9487                           
  9488                           ;interrupt.c: 49: }
  9489                           ;interrupt.c: 50: }
  9490                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  9491  001B  108B               	bcf	11,1	;volatile
  9492  001C                     i1l142:	
  9493  001C  0876               	movf	??_extInt,w
  9494  001D  0020               	movlb	0	; select bank0
  9495  001E  00FF               	movwf	127
  9496  001F  0009               	retfie
  9497  0020                     __end_of_extInt:	
  9498                           
  9499                           	psect	text73
  9500  0E18                     __ptext73:	
  9501 ;; *************** function i1_Mrf49RxCmd *****************
  9502 ;; Defined at:
  9503 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;  cmd             1    wreg     unsigned char 
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;  cmd             1    1[COMMON] unsigned char 
  9508 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      unsigned char 
  9511 ;; Registers used:
  9512 ;;		wreg, status,2, status,0, pclath, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 1E/1
  9515 ;;		On exit  : 1F/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9518 ;;      Params:         0       0       0       0
  9519 ;;      Locals:         2       0       0       0
  9520 ;;      Temps:          0       0       0       0
  9521 ;;      Totals:         2       0       0       0
  9522 ;;Total ram usage:        2 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    1
  9525 ;; This function calls:
  9526 ;;		i1_Mrf49SpiRx
  9527 ;;		i1_Mrf49SpiTx
  9528 ;; This function is called by:
  9529 ;;		i1_Mrf49RxByte
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           
  9534                           ;psect for function i1_Mrf49RxCmd
  9535  0E18                     i1_Mrf49RxCmd:	
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  9539                           ;i1Mrf49RxCmd@cmd stored from wreg
  9540  0E18  00F1               	movwf	i1Mrf49RxCmd@cmd
  9541                           
  9542                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  9543  0E19  0020               	movlb	0	; select bank0
  9544  0E1A  130E               	bcf	14,6	;volatile
  9545                           
  9546                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  9547  0E1B  0871               	movf	i1Mrf49RxCmd@cmd,w
  9548  0E1C  2745  318E         	fcall	i1_Mrf49SpiTx
  9549                           
  9550                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  9551  0E1E  27B4               	fcall	i1_Mrf49SpiRx
  9552  0E1F  00F2               	movwf	i1Mrf49RxCmd@val
  9553                           
  9554                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  9555  0E20  0020               	movlb	0	; select bank0
  9556  0E21  170E               	bsf	14,6	;volatile
  9557                           
  9558                           ;mrf49xa_cmd.c: 27: return val;
  9559  0E22  0872               	movf	i1Mrf49RxCmd@val,w
  9560  0E23  0008               	return
  9561  0E24                     __end_ofi1_Mrf49RxCmd:	
  9562  0E24                     __ptext66:	
  9563 ;; *************** function i1_Mrf49xaServe *****************
  9564 ;; Defined at:
  9565 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;                  1    wreg      unsigned char 
  9572 ;; Registers used:
  9573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/0
  9576 ;;		On exit  : 1E/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9579 ;;      Params:         0       0       0       0
  9580 ;;      Locals:         1       0       0       0
  9581 ;;      Temps:          1       0       0       0
  9582 ;;      Totals:         2       0       0       0
  9583 ;;Total ram usage:        2 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    3
  9586 ;; This function calls:
  9587 ;;		i1_Mrf49RxByte
  9588 ;;		i1_Mrf49RxSts
  9589 ;;		i1_Mrf49TxByte
  9590 ;;		i1_Mrf49xaModeRx
  9591 ;;		i1_Mrf49xaNeedsReset
  9592 ;; This function is called by:
  9593 ;;		_extInt
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           
  9598                           ;psect for function i1_Mrf49xaServe
  9599  0E24                     i1_Mrf49xaServe:	
  9600                           
  9601                           ;mrf49xa_data.c: 10: uint8_t data;
  9602                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9606  0E24  0021               	movlb	1	; select bank1
  9607  0E25  08E9               	movf	(_rfTrcvStatus^(0+128)+73),f
  9608  0E26  1903               	btfsc	3,2
  9609                           
  9610                           ;mrf49xa_data.c: 13: return 0;
  9611  0E27  3400               	retlw	0
  9612                           
  9613                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  9614  0E28  1BEA               	btfsc	(_rfTrcvStatus^(0+128)+74),7
  9615  0E29  3400               	retlw	0
  9616                           
  9617                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  9618  0E2A  27A7  318E         	fcall	i1_Mrf49RxSts
  9619                           
  9620                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  9621  0E2C  083B               	movf	_mrf49Status,w
  9622  0E2D  3AFF               	xorlw	255
  9623  0E2E  1D03               	skipz
  9624  0E2F  2E34               	goto	i1l441
  9625  0E30  083C               	movf	_mrf49Status+1,w
  9626  0E31  3AFF               	xorlw	255
  9627  0E32  1903               	btfsc	3,2
  9628  0E33  3400               	retlw	0
  9629  0E34                     i1l441:	
  9630                           ;mrf49xa_data.c: 26: {
  9631                           
  9632                           
  9633                           ;mrf49xa_data.c: 28: }
  9634                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  9635  0E34  1ABB               	btfsc	_mrf49Status,5
  9636  0E35  2E43               	goto	i1l3412
  9637  0E36  2E52               	goto	i1l442
  9638  0E37                     i1l3406:	
  9639                           
  9640                           ;mrf49xa_data.c: 36: case RECV_DATA:
  9641                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  9642  0E37  2711  318E         	fcall	i1_Mrf49RxByte
  9643  0E39  00F5               	movwf	i1Mrf49xaServe@data
  9644                           
  9645                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  9646  0E3A  2711  318E         	fcall	i1_Mrf49RxByte
  9647  0E3C  00F5               	movwf	i1Mrf49xaServe@data
  9648                           
  9649                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  9650  0E3D  2714  318E         	fcall	i1_Mrf49xaModeRx
  9651                           
  9652                           ;mrf49xa_data.c: 47: break;
  9653  0E3F  2E52               	goto	i1l442
  9654  0E40                     i1l3408:	
  9655                           
  9656                           ;mrf49xa_data.c: 50: Mrf49xaNeedsReset();
  9657  0E40  2738  318E         	fcall	i1_Mrf49xaNeedsReset
  9658                           
  9659                           ;mrf49xa_data.c: 51: break;
  9660  0E42  2E52               	goto	i1l442
  9661  0E43                     i1l3412:	
  9662  0E43  0021               	movlb	1	; select bank1
  9663  0E44  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  9664                           
  9665                           ; Switch size 1, requested type "space"
  9666                           ; Number of cases is 4, Range of values is 0 to 3
  9667                           ; switch strategies available:
  9668                           ; Name         Instructions Cycles
  9669                           ; simple_byte           13     7 (average)
  9670                           ; direct_byte           14     6 (fixed)
  9671                           ; jumptable            260     6 (fixed)
  9672                           ;	Chosen strategy is simple_byte
  9673  0E45  3A00               	xorlw	0	; case 0
  9674  0E46  1903               	skipnz
  9675  0E47  2E40               	goto	i1l3408
  9676  0E48  3A01               	xorlw	1	; case 1
  9677  0E49  1903               	skipnz
  9678  0E4A  2E37               	goto	i1l3406
  9679  0E4B  3A03               	xorlw	3	; case 2
  9680  0E4C  1903               	skipnz
  9681  0E4D  2E37               	goto	i1l3406
  9682  0E4E  3A01               	xorlw	1	; case 3
  9683  0E4F  1903               	skipnz
  9684  0E50  2E52               	goto	i1l442
  9685  0E51  2E52               	goto	i1l442
  9686  0E52                     i1l442:	
  9687                           
  9688                           ;mrf49xa_data.c: 60: }
  9689                           ;mrf49xa_data.c: 69: if (mrf49Status.flags.msb.fifoTxRx == 1)
  9690  0E52  0020               	movlb	0	; select bank0
  9691  0E53  1BBB               	btfsc	_mrf49Status,7
  9692  0E54  2EF8               	goto	i1l3494
  9693  0E55  2F07               	goto	i1l3496
  9694  0E56                     i1l3416:	
  9695                           
  9696                           ;mrf49xa_data.c: 75: Mrf49xaNeedsReset();
  9697  0E56  2738  318E         	fcall	i1_Mrf49xaNeedsReset
  9698                           
  9699                           ;mrf49xa_data.c: 76: break;
  9700  0E58  2F07               	goto	i1l3496
  9701  0E59                     i1l3418:	
  9702                           
  9703                           ;mrf49xa_data.c: 79: data = Mrf49RxByte();
  9704  0E59  2711  318E         	fcall	i1_Mrf49RxByte
  9705  0E5B  00F5               	movwf	i1Mrf49xaServe@data
  9706                           
  9707                           ;mrf49xa_data.c: 83: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9708  0E5C  1BBC               	btfsc	_mrf49Status+1,7
  9709  0E5D  2E61               	goto	i1l3424
  9710  0E5E                     i1l3422:	
  9711                           
  9712                           ;mrf49xa_data.c: 84: {
  9713                           ;mrf49xa_data.c: 85: Mrf49xaModeRx();
  9714  0E5E  2714  318E         	fcall	i1_Mrf49xaModeRx
  9715                           
  9716                           ;mrf49xa_data.c: 86: break;
  9717  0E60  2F07               	goto	i1l3496
  9718  0E61                     i1l3424:	
  9719                           
  9720                           ;mrf49xa_data.c: 87: }
  9721                           ;mrf49xa_data.c: 89: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  9722  0E61  0021               	movlb	1	; select bank1
  9723  0E62  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  9724  0E63  1D03               	skipz
  9725  0E64  2E67               	goto	i1l3428
  9726  0E65  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  9727  0E66  2E6B               	goto	L4
  9728  0E67                     i1l3428:	
  9729                           
  9730                           ;mrf49xa_data.c: 90: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  9731  0E67  08B9               	movf	(_rfTrcvStatus^(0+128)+25),f
  9732  0E68  1D03               	skipz
  9733  0E69  2E5E               	goto	i1l3422
  9734  0E6A  30B9               	movlw	(_rfTrcvStatus+25)& (0+255)
  9735  0E6B                     L4:	
  9736  0E6B  00A0               	movwf	_rfTrcvStatus^(0+128)
  9737                           
  9738                           ;mrf49xa_data.c: 97: }
  9739                           ;mrf49xa_data.c: 98: rfTrcvStatus.hwRx->packet.size = data;
  9740  0E6C  0A20               	incf	_rfTrcvStatus^(0+128),w
  9741  0E6D  0086               	movwf	6
  9742  0E6E  0187               	clrf	7
  9743  0E6F  0875               	movf	i1Mrf49xaServe@data,w
  9744  0E70  0081               	movwf	1
  9745                           
  9746                           ;mrf49xa_data.c: 99: rfTrcvStatus.hwRx->crc = 0;
  9747  0E71  0820               	movf	_rfTrcvStatus^(0+128),w
  9748  0E72  3E16               	addlw	22
  9749  0E73  0086               	movwf	6
  9750  0E74  0181               	clrf	1
  9751                           
  9752                           ;mrf49xa_data.c: 100: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  9753  0E75  0820               	movf	_rfTrcvStatus^(0+128),w
  9754  0E76  0086               	movwf	6
  9755  0E77  3004               	movlw	4
  9756  0E78  0081               	movwf	1
  9757                           
  9758                           ;mrf49xa_data.c: 102: rfTrcvStatus.state = RECV_DATA;
  9759  0E79  3002               	movlw	2
  9760  0E7A  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  9761                           
  9762                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwByte = 1;
  9763  0E7B  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9764  0E7C  3980               	andlw	-128
  9765  0E7D  3801               	iorlw	1
  9766  0E7E  2EA8               	goto	L5
  9767  0E7F                     i1l3444:	
  9768                           ;mrf49xa_data.c: 105: break;
  9769                           
  9770                           
  9771                           ;mrf49xa_data.c: 109: data = Mrf49RxByte();
  9772  0E7F  2711  318E         	fcall	i1_Mrf49RxByte
  9773  0E81  00F5               	movwf	i1Mrf49xaServe@data
  9774                           
  9775                           ;mrf49xa_data.c: 113: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9776  0E82  1BBC               	btfsc	_mrf49Status+1,7
  9777  0E83  2E8A               	goto	i1l3452
  9778                           
  9779                           ;mrf49xa_data.c: 114: {
  9780                           ;mrf49xa_data.c: 115: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9781  0E84  0021               	movlb	1	; select bank1
  9782  0E85  0820               	movf	_rfTrcvStatus^(0+128),w
  9783  0E86  0086               	movwf	6
  9784  0E87  3005               	movlw	5
  9785  0E88  0187               	clrf	7
  9786  0E89  2E9B               	goto	L6
  9787  0E8A                     i1l3452:	
  9788                           
  9789                           ;mrf49xa_data.c: 118: }
  9790                           ;mrf49xa_data.c: 120: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  9791  0E8A  0021               	movlb	1	; select bank1
  9792  0E8B  0A20               	incf	_rfTrcvStatus^(0+128),w
  9793  0E8C  0086               	movwf	6
  9794  0E8D  0187               	clrf	7
  9795  0E8E  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9796  0E8F  397F               	andlw	127
  9797  0E90  0601               	xorwf	1,w
  9798  0E91  1D03               	skipz
  9799  0E92  2E9D               	goto	i1l3458
  9800                           
  9801                           ;mrf49xa_data.c: 121: {
  9802                           ;mrf49xa_data.c: 122: rfTrcvStatus.hwRx->crc = data;
  9803  0E93  0820               	movf	_rfTrcvStatus^(0+128),w
  9804  0E94  3E16               	addlw	22
  9805  0E95  0086               	movwf	6
  9806  0E96  0875               	movf	i1Mrf49xaServe@data,w
  9807  0E97  0081               	movwf	1
  9808                           
  9809                           ;mrf49xa_data.c: 126: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9810  0E98  0820               	movf	_rfTrcvStatus^(0+128),w
  9811  0E99  0086               	movwf	6
  9812  0E9A  3005               	movlw	5
  9813  0E9B                     L6:	
  9814  0E9B  0081               	movwf	1
  9815  0E9C  2E5E               	goto	i1l3422
  9816  0E9D                     i1l3458:	
  9817                           
  9818                           ;mrf49xa_data.c: 135: else
  9819                           ;mrf49xa_data.c: 136: {
  9820                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  9821  0E9D  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9822  0E9E  397F               	andlw	127
  9823  0E9F  0720               	addwf	_rfTrcvStatus^(0+128),w
  9824  0EA0  00F4               	movwf	??i1_Mrf49xaServe
  9825  0EA1  0A74               	incf	??i1_Mrf49xaServe,w
  9826  0EA2  0086               	movwf	6
  9827  0EA3  0187               	clrf	7
  9828  0EA4  0875               	movf	i1Mrf49xaServe@data,w
  9829  0EA5  0081               	movwf	1
  9830  0EA6  27F7  318E         	fcall	PL16	;call to abstracted procedure
  9831  0EA8                     L5:	
  9832  0EA8  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  9833  0EA9  2F07               	goto	i1l3496
  9834  0EAA                     i1l3462:	
  9835                           
  9836                           ;mrf49xa_data.c: 143: rfTrcvStatus.hwByte++;
  9837  0EAA  27F7  318E         	fcall	PL16	;call to abstracted procedure
  9838  0EAC  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  9839                           
  9840                           ;mrf49xa_data.c: 145: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  9841  0EAD  397F               	andlw	127
  9842  0EAE  0652               	xorwf	(_rfTrcvStatus^(0+128)+50),w
  9843  0EAF  1D03               	skipz
  9844  0EB0  2EE6               	goto	i1l3490
  9845                           
  9846                           ;mrf49xa_data.c: 146: rfTrcvStatus.hwByte = 49;
  9847  0EB1  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9848  0EB2  3980               	andlw	-128
  9849  0EB3  3831               	iorlw	49
  9850  0EB4  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  9851  0EB5  2EE6               	goto	i1l3490
  9852  0EB6                     i1l3466:	
  9853                           
  9854                           ;mrf49xa_data.c: 151: Mrf49TxByte(0x2D);
  9855  0EB6  302D               	movlw	45
  9856  0EB7  270C  318E         	fcall	i1_Mrf49TxByte
  9857                           
  9858                           ;mrf49xa_data.c: 152: break;
  9859  0EB9  2F07               	goto	i1l3496
  9860  0EBA                     i1l3468:	
  9861                           
  9862                           ;mrf49xa_data.c: 155: Mrf49TxByte(0xD4);
  9863  0EBA  30D4               	movlw	212
  9864  0EBB  270C  318E         	fcall	i1_Mrf49TxByte
  9865                           
  9866                           ;mrf49xa_data.c: 156: rfTrcvStatus.hwByte = 0x7F;
  9867  0EBD  307F               	movlw	127
  9868  0EBE  0021               	movlb	1	; select bank1
  9869  0EBF  04EA               	iorwf	(_rfTrcvStatus^(0+128)+74),f
  9870                           
  9871                           ;mrf49xa_data.c: 157: break;
  9872  0EC0  2F07               	goto	i1l3496
  9873  0EC1                     i1l3472:	
  9874                           
  9875                           ;mrf49xa_data.c: 161: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  9876  0EC1  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9877  0EC2  397F               	andlw	127
  9878  0EC3  3ED2               	addlw	(_rfTrcvStatus+50)& (0+255)
  9879  0EC4  0086               	movwf	6
  9880  0EC5  0187               	clrf	7
  9881  0EC6  0801               	movf	1,w
  9882  0EC7  270C  318E         	fcall	i1_Mrf49TxByte
  9883                           
  9884                           ;mrf49xa_data.c: 162: break;
  9885  0EC9  2F07               	goto	i1l3496
  9886  0ECA                     i1l3474:	
  9887                           
  9888                           ;mrf49xa_data.c: 165: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  9889  0ECA  0867               	movf	(_rfTrcvStatus^(0+128)+71),w
  9890  0ECB  270C  318E         	fcall	i1_Mrf49TxByte
  9891                           
  9892                           ;mrf49xa_data.c: 166: break;
  9893  0ECD  2F07               	goto	i1l3496
  9894  0ECE                     i1l3476:	
  9895                           
  9896                           ;mrf49xa_data.c: 169: Mrf49TxByte(0x00);
  9897  0ECE  3000               	movlw	0
  9898  0ECF  270C  318E         	fcall	i1_Mrf49TxByte
  9899                           
  9900                           ;mrf49xa_data.c: 170: break;
  9901  0ED1  2F07               	goto	i1l3496
  9902  0ED2                     i1l3478:	
  9903                           
  9904                           ;mrf49xa_data.c: 173: Mrf49TxByte(0x00);
  9905  0ED2  3000               	movlw	0
  9906  0ED3  270C  318E         	fcall	i1_Mrf49TxByte
  9907                           
  9908                           ;mrf49xa_data.c: 174: Mrf49xaModeRx();
  9909  0ED5  2714  318E         	fcall	i1_Mrf49xaModeRx
  9910                           
  9911                           ;mrf49xa_data.c: 176: rfTrcvStatus.txPacket.retry = 0;
  9912  0ED7  30F0               	movlw	-16
  9913  0ED8  0021               	movlb	1	; select bank1
  9914  0ED9  05E8               	andwf	(_rfTrcvStatus^(0+128)+72),f
  9915                           
  9916                           ;mrf49xa_data.c: 178: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  9917  0EDA  0E68               	swapf	(_rfTrcvStatus^(0+128)+72),w
  9918  0EDB  0C89               	rrf	9,f
  9919  0EDC  0C89               	rrf	9,f
  9920  0EDD  3903               	andlw	3
  9921  0EDE  3A01               	xorlw	1
  9922  0EDF  1D03               	skipz
  9923  0EE0  2EE4               	goto	i1l3486
  9924                           
  9925                           ;mrf49xa_data.c: 179: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  9926  0EE1  3003               	movlw	3
  9927  0EE2  00D1               	movwf	(_rfTrcvStatus^(0+128)+49)
  9928  0EE3  2F07               	goto	i1l3496
  9929  0EE4                     i1l3486:	
  9930                           
  9931                           ;mrf49xa_data.c: 180: else
  9932                           ;mrf49xa_data.c: 181: rfTrcvStatus.txPacket.state = PKT_FREE;
  9933  0EE4  01D1               	clrf	(_rfTrcvStatus^(0+128)+49)
  9934  0EE5  2F07               	goto	i1l3496
  9935  0EE6                     i1l3490:	
  9936  0EE6  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  9937  0EE7  397F               	andlw	127
  9938                           
  9939                           ; Switch size 1, requested type "space"
  9940                           ; Number of cases is 5, Range of values is 49 to 101
  9941                           ; switch strategies available:
  9942                           ; Name         Instructions Cycles
  9943                           ; simple_byte           16     9 (average)
  9944                           ; direct_byte          115     9 (fixed)
  9945                           ; jumptable            263     9 (fixed)
  9946                           ;	Chosen strategy is simple_byte
  9947  0EE8  3A31               	xorlw	49	; case 49
  9948  0EE9  1903               	skipnz
  9949  0EEA  2ECA               	goto	i1l3474
  9950  0EEB  3A03               	xorlw	3	; case 50
  9951  0EEC  1903               	skipnz
  9952  0EED  2ECE               	goto	i1l3476
  9953  0EEE  3A01               	xorlw	1	; case 51
  9954  0EEF  1903               	skipnz
  9955  0EF0  2ED2               	goto	i1l3478
  9956  0EF1  3A57               	xorlw	87	; case 100
  9957  0EF2  1903               	skipnz
  9958  0EF3  2EB6               	goto	i1l3466
  9959  0EF4  3A01               	xorlw	1	; case 101
  9960  0EF5  1903               	skipnz
  9961  0EF6  2EBA               	goto	i1l3468
  9962  0EF7  2EC1               	goto	i1l3472
  9963  0EF8                     i1l3494:	
  9964  0EF8  0021               	movlb	1	; select bank1
  9965  0EF9  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  9966                           
  9967                           ; Switch size 1, requested type "space"
  9968                           ; Number of cases is 4, Range of values is 0 to 3
  9969                           ; switch strategies available:
  9970                           ; Name         Instructions Cycles
  9971                           ; simple_byte           13     7 (average)
  9972                           ; direct_byte           14     6 (fixed)
  9973                           ; jumptable            260     6 (fixed)
  9974                           ;	Chosen strategy is simple_byte
  9975  0EFA  3A00               	xorlw	0	; case 0
  9976  0EFB  1903               	skipnz
  9977  0EFC  2E56               	goto	i1l3416
  9978  0EFD  3A01               	xorlw	1	; case 1
  9979  0EFE  1903               	skipnz
  9980  0EFF  2E59               	goto	i1l3418
  9981  0F00  3A03               	xorlw	3	; case 2
  9982  0F01  1903               	skipnz
  9983  0F02  2E7F               	goto	i1l3444
  9984  0F03  3A01               	xorlw	1	; case 3
  9985  0F04  1903               	skipnz
  9986  0F05  2EAA               	goto	i1l3462
  9987  0F06  2F07               	goto	i1l3496
  9988  0F07                     i1l3496:	
  9989                           
  9990                           ;mrf49xa_data.c: 188: }
  9991                           ;mrf49xa_data.c: 202: return PORTAbits.RA2 == 1 ? 1 : 0;
  9992  0F07  0020               	movlb	0	; select bank0
  9993  0F08  0C0C               	rrf	12,w	;volatile
  9994  0F09  0C89               	rrf	9,f
  9995  0F0A  3901               	andlw	1
  9996  0F0B  0008               	return
  9997  0F0C                     __end_ofi1_Mrf49xaServe:	
  9998  0F0C                     __ptext69:	
  9999 ;; *************** function i1_Mrf49TxByte *****************
 10000 ;; Defined at:
 10001 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;  byte            1    wreg     unsigned char 
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;  byte            1    3[COMMON] unsigned char 
 10006 ;; Return value:  Size  Location     Type
 10007 ;;		None               void
 10008 ;; Registers used:
 10009 ;;		wreg, status,2, status,0, pclath, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 1E/1
 10012 ;;		On exit  : 1F/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10015 ;;      Params:         0       0       0       0
 10016 ;;      Locals:         1       0       0       0
 10017 ;;      Temps:          0       0       0       0
 10018 ;;      Totals:         1       0       0       0
 10019 ;;Total ram usage:        1 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    2
 10022 ;; This function calls:
 10023 ;;		i1_Mrf49TxCmd
 10024 ;; This function is called by:
 10025 ;;		i1_Mrf49xaServe
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           
 10030                           ;psect for function i1_Mrf49TxByte
 10031  0F0C                     i1_Mrf49TxByte:	
 10032                           
 10033                           ;incstack = 0
 10034                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10035                           ;i1Mrf49TxByte@byte stored from wreg
 10036  0F0C  00F3               	movwf	i1Mrf49TxByte@byte
 10037                           
 10038                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10039  0F0D  00F1               	movwf	i1Mrf49TxCmd@val
 10040  0F0E  30B8               	movlw	184
 10041  0F0F  273B               	fcall	i1_Mrf49TxCmd
 10042  0F10  0008               	return
 10043  0F11                     __end_ofi1_Mrf49TxByte:	
 10044  0F11                     __ptext72:	
 10045 ;; *************** function i1_Mrf49RxByte *****************
 10046 ;; Defined at:
 10047 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      unsigned char 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0, pclath, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 1E/1
 10058 ;;		On exit  : 1F/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10061 ;;      Params:         0       0       0       0
 10062 ;;      Locals:         0       0       0       0
 10063 ;;      Temps:          0       0       0       0
 10064 ;;      Totals:         0       0       0       0
 10065 ;;Total ram usage:        0 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    2
 10068 ;; This function calls:
 10069 ;;		i1_Mrf49RxCmd
 10070 ;; This function is called by:
 10071 ;;		i1_Mrf49xaServe
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function i1_Mrf49RxByte
 10077  0F11                     i1_Mrf49RxByte:	
 10078                           
 10079                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10080                           
 10081                           ;incstack = 0
 10082                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10083  0F11  30B0               	movlw	176
 10084  0F12  2618               	fcall	i1_Mrf49RxCmd
 10085  0F13  0008               	return
 10086  0F14                     __end_ofi1_Mrf49RxByte:	
 10087  0F14                     __ptext68:	
 10088 ;; *************** function i1_Mrf49xaModeRx *****************
 10089 ;; Defined at:
 10090 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;		None
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10095 ;; Return value:  Size  Location     Type
 10096 ;;		None               void
 10097 ;; Registers used:
 10098 ;;		wreg, status,2, status,0, pclath, cstack
 10099 ;; Tracked objects:
 10100 ;;		On entry : 1E/0
 10101 ;;		On exit  : 1F/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10104 ;;      Params:         0       0       0       0
 10105 ;;      Locals:         1       0       0       0
 10106 ;;      Temps:          0       0       0       0
 10107 ;;      Totals:         1       0       0       0
 10108 ;;Total ram usage:        1 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    2
 10111 ;; This function calls:
 10112 ;;		i1_Mrf49TxCmd
 10113 ;; This function is called by:
 10114 ;;		i1_Mrf49xaServe
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           
 10119                           ;psect for function i1_Mrf49xaModeRx
 10120  0F14                     i1_Mrf49xaModeRx:	
 10121  0F14  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10122                           
 10123                           ;mrf49xa.c: 101: UI08_t k;
 10124                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
 10125                           
 10126                           ;incstack = 0
 10127                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10128  0F15  01F3               	clrf	i1Mrf49xaModeRx@k
 10129  0F16  3188               	movlp	high __stringtab
 10130  0F17  000A               	callw
 10131  0F18  318E               	pagesel	$	;select current page
 10132  0F19  3800               	iorlw	0
 10133  0F1A  1903               	btfsc	3,2
 10134  0F1B  2F30               	goto	i1l211
 10135  0F1C                     i1l3170:	
 10136  0F1C  3573               	lslf	i1Mrf49xaModeRx@k,w
 10137  0F1D  3E26               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10138  0F1E  3188               	movlp	high __stringtab
 10139  0F1F  000A               	callw
 10140  0F20  00F1               	movwf	i1Mrf49TxCmd@val
 10141  0F21  3573               	lslf	i1Mrf49xaModeRx@k,w
 10142  0F22  3E25               	addlw	low (_mrfRegset_Rx| (0+32768))
 10143  0F23  3188               	movlp	high __stringtab
 10144  0F24  000A               	callw
 10145  0F25  318E               	pagesel	$	;select current page
 10146  0F26  318F  273B         	fcall	i1_Mrf49TxCmd
 10147  0F28  3002               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10148  0F29  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10149  0F2A  3188               	movlp	high __stringtab
 10150  0F2B  000A               	callw
 10151  0F2C  318E               	pagesel	$	;select current page
 10152  0F2D  0273               	subwf	i1Mrf49xaModeRx@k,w
 10153  0F2E  1C03               	skipc
 10154  0F2F  2F1C               	goto	i1l3170
 10155  0F30                     i1l211:	
 10156                           
 10157                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
 10158  0F30  0021               	movlb	1	; select bank1
 10159  0F31  3080               	movlw	-128
 10160  0F32  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
 10161  0F33  0AE9               	incf	(_rfTrcvStatus^(0+128)+73),f
 10162                           
 10163                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
 10164  0F34  05EA               	andwf	(_rfTrcvStatus^(0+128)+74),f
 10165                           
 10166                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
 10167  0F35  0020               	movlb	0	; select bank0
 10168  0F36  13BB               	bcf	_mrf49Status,7
 10169  0F37  0008               	return
 10170  0F38                     __end_ofi1_Mrf49xaModeRx:	
 10171  0F38                     __ptext67:	
 10172 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10173 ;; Defined at:
 10174 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;		None
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;		None               void
 10181 ;; Registers used:
 10182 ;;		None
 10183 ;; Tracked objects:
 10184 ;;		On entry : 1E/0
 10185 ;;		On exit  : 1F/1
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10188 ;;      Params:         0       0       0       0
 10189 ;;      Locals:         0       0       0       0
 10190 ;;      Temps:          0       0       0       0
 10191 ;;      Totals:         0       0       0       0
 10192 ;;Total ram usage:        0 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; This function calls:
 10195 ;;		Nothing
 10196 ;; This function is called by:
 10197 ;;		_extInt
 10198 ;;		i1_Mrf49xaServe
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           
 10203                           ;psect for function i1_Mrf49xaNeedsReset
 10204  0F38                     i1_Mrf49xaNeedsReset:	
 10205                           
 10206                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in i1_Mrf49xaNeedsReset: []
 10210  0F38  0021               	movlb	1	; select bank1
 10211  0F39  17EA               	bsf	(_rfTrcvStatus^(0+128)+74),7
 10212  0F3A  0008               	return
 10213  0F3B                     __end_ofi1_Mrf49xaNeedsReset:	
 10214  0F3B                     __ptext70:	
 10215 ;; *************** function i1_Mrf49TxCmd *****************
 10216 ;; Defined at:
 10217 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;  cmd             1    wreg     unsigned char 
 10220 ;;  val             1    1[COMMON] unsigned char 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  cmd             1    2[COMMON] unsigned char 
 10223 ;; Return value:  Size  Location     Type
 10224 ;;		None               void
 10225 ;; Registers used:
 10226 ;;		wreg, status,2, status,0, pclath, cstack
 10227 ;; Tracked objects:
 10228 ;;		On entry : 1E/0
 10229 ;;		On exit  : 1F/0
 10230 ;;		Unchanged: 0/0
 10231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10232 ;;      Params:         1       0       0       0
 10233 ;;      Locals:         1       0       0       0
 10234 ;;      Temps:          0       0       0       0
 10235 ;;      Totals:         2       0       0       0
 10236 ;;Total ram usage:        2 bytes
 10237 ;; Hardware stack levels used:    1
 10238 ;; Hardware stack levels required when called:    1
 10239 ;; This function calls:
 10240 ;;		i1_Mrf49SpiTx
 10241 ;; This function is called by:
 10242 ;;		i1_Mrf49xaModeRx
 10243 ;;		i1_Mrf49TxByte
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           
 10248                           ;psect for function i1_Mrf49TxCmd
 10249  0F3B                     i1_Mrf49TxCmd:	
 10250                           
 10251                           ;incstack = 0
 10252                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 10253                           ;i1Mrf49TxCmd@cmd stored from wreg
 10254  0F3B  00F2               	movwf	i1Mrf49TxCmd@cmd
 10255                           
 10256                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 10257  0F3C  0020               	movlb	0	; select bank0
 10258  0F3D  130E               	bcf	14,6	;volatile
 10259                           
 10260                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 10261  0F3E  0872               	movf	i1Mrf49TxCmd@cmd,w
 10262  0F3F  2745  318E         	fcall	i1_Mrf49SpiTx
 10263                           
 10264                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 10265  0F41  0871               	movf	i1Mrf49TxCmd@val,w
 10266  0F42  2745               	fcall	i1_Mrf49SpiTx
 10267                           
 10268                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 10269  0F43  170E               	bsf	14,6	;volatile
 10270  0F44  0008               	return
 10271  0F45                     __end_ofi1_Mrf49TxCmd:	
 10272  0F45                     __ptext74:	
 10273 ;; *************** function i1_Mrf49SpiTx *****************
 10274 ;; Defined at:
 10275 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  byte            1    wreg     unsigned char 
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;  byte            1    0[COMMON] unsigned char 
 10280 ;; Return value:  Size  Location     Type
 10281 ;;		None               void
 10282 ;; Registers used:
 10283 ;;		wreg
 10284 ;; Tracked objects:
 10285 ;;		On entry : 1F/0
 10286 ;;		On exit  : 1F/0
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10289 ;;      Params:         0       0       0       0
 10290 ;;      Locals:         1       0       0       0
 10291 ;;      Temps:          0       0       0       0
 10292 ;;      Totals:         1       0       0       0
 10293 ;;Total ram usage:        1 bytes
 10294 ;; Hardware stack levels used:    1
 10295 ;; This function calls:
 10296 ;;		Nothing
 10297 ;; This function is called by:
 10298 ;;		i1_Mrf49TxCmd
 10299 ;;		i1_Mrf49RxCmd
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           
 10304                           ;psect for function i1_Mrf49SpiTx
 10305  0F45                     i1_Mrf49SpiTx:	
 10306                           
 10307                           ;incstack = 0
 10308                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 10309                           ;i1Mrf49SpiTx@byte stored from wreg
 10310  0F45  00F0               	movwf	i1Mrf49SpiTx@byte
 10311                           
 10312                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 10313  0F46  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 10314  0F47  2F4A               	goto	i1l255
 10315  0F48  178D               	bsf	13,7	;volatile
 10316  0F49  2F4B               	goto	i1l256
 10317  0F4A                     i1l255:	
 10318  0F4A  138D               	bcf	13,7	;volatile
 10319  0F4B                     i1l256:	
 10320  0F4B  0022               	movlb	2	; select bank2
 10321  0F4C  178E               	bsf	14,7	;volatile
 10322  0F4D  0000               	nop	;# 
 10323  0F4E  0022               	movlb	2	; select bank2
 10324  0F4F  138E               	bcf	14,7	;volatile
 10325  0F50  1F70               	btfss	i1Mrf49SpiTx@byte,6
 10326  0F51  2F55               	goto	i1l259
 10327  0F52  0020               	movlb	0	; select bank0
 10328  0F53  178D               	bsf	13,7	;volatile
 10329  0F54  2F57               	goto	i1l260
 10330  0F55                     i1l259:	
 10331  0F55  0020               	movlb	0	; select bank0
 10332  0F56  138D               	bcf	13,7	;volatile
 10333  0F57                     i1l260:	
 10334  0F57  0022               	movlb	2	; select bank2
 10335  0F58  178E               	bsf	14,7	;volatile
 10336  0F59  0000               	nop	;# 
 10337  0F5A  0022               	movlb	2	; select bank2
 10338  0F5B  138E               	bcf	14,7	;volatile
 10339  0F5C  1EF0               	btfss	i1Mrf49SpiTx@byte,5
 10340  0F5D  2F61               	goto	i1l263
 10341  0F5E  0020               	movlb	0	; select bank0
 10342  0F5F  178D               	bsf	13,7	;volatile
 10343  0F60  2F63               	goto	i1l264
 10344  0F61                     i1l263:	
 10345  0F61  0020               	movlb	0	; select bank0
 10346  0F62  138D               	bcf	13,7	;volatile
 10347  0F63                     i1l264:	
 10348  0F63  0022               	movlb	2	; select bank2
 10349  0F64  178E               	bsf	14,7	;volatile
 10350  0F65  0000               	nop	;# 
 10351  0F66  0022               	movlb	2	; select bank2
 10352  0F67  138E               	bcf	14,7	;volatile
 10353  0F68  1E70               	btfss	i1Mrf49SpiTx@byte,4
 10354  0F69  2F6D               	goto	i1l267
 10355  0F6A  0020               	movlb	0	; select bank0
 10356  0F6B  178D               	bsf	13,7	;volatile
 10357  0F6C  2F6F               	goto	i1l268
 10358  0F6D                     i1l267:	
 10359  0F6D  0020               	movlb	0	; select bank0
 10360  0F6E  138D               	bcf	13,7	;volatile
 10361  0F6F                     i1l268:	
 10362  0F6F  0022               	movlb	2	; select bank2
 10363  0F70  178E               	bsf	14,7	;volatile
 10364  0F71  0000               	nop	;# 
 10365  0F72  0022               	movlb	2	; select bank2
 10366  0F73  138E               	bcf	14,7	;volatile
 10367  0F74  1DF0               	btfss	i1Mrf49SpiTx@byte,3
 10368  0F75  2F79               	goto	i1l271
 10369  0F76  0020               	movlb	0	; select bank0
 10370  0F77  178D               	bsf	13,7	;volatile
 10371  0F78  2F7B               	goto	i1l272
 10372  0F79                     i1l271:	
 10373  0F79  0020               	movlb	0	; select bank0
 10374  0F7A  138D               	bcf	13,7	;volatile
 10375  0F7B                     i1l272:	
 10376  0F7B  0022               	movlb	2	; select bank2
 10377  0F7C  178E               	bsf	14,7	;volatile
 10378  0F7D  0000               	nop	;# 
 10379  0F7E  0022               	movlb	2	; select bank2
 10380  0F7F  138E               	bcf	14,7	;volatile
 10381  0F80  1D70               	btfss	i1Mrf49SpiTx@byte,2
 10382  0F81  2F85               	goto	i1l275
 10383  0F82  0020               	movlb	0	; select bank0
 10384  0F83  178D               	bsf	13,7	;volatile
 10385  0F84  2F87               	goto	i1l276
 10386  0F85                     i1l275:	
 10387  0F85  0020               	movlb	0	; select bank0
 10388  0F86  138D               	bcf	13,7	;volatile
 10389  0F87                     i1l276:	
 10390  0F87  0022               	movlb	2	; select bank2
 10391  0F88  178E               	bsf	14,7	;volatile
 10392  0F89  0000               	nop	;# 
 10393  0F8A  0022               	movlb	2	; select bank2
 10394  0F8B  138E               	bcf	14,7	;volatile
 10395  0F8C  1CF0               	btfss	i1Mrf49SpiTx@byte,1
 10396  0F8D  2F91               	goto	i1l279
 10397  0F8E  0020               	movlb	0	; select bank0
 10398  0F8F  178D               	bsf	13,7	;volatile
 10399  0F90  2F93               	goto	i1l280
 10400  0F91                     i1l279:	
 10401  0F91  0020               	movlb	0	; select bank0
 10402  0F92  138D               	bcf	13,7	;volatile
 10403  0F93                     i1l280:	
 10404  0F93  0022               	movlb	2	; select bank2
 10405  0F94  178E               	bsf	14,7	;volatile
 10406  0F95  0000               	nop	;# 
 10407  0F96  0022               	movlb	2	; select bank2
 10408  0F97  138E               	bcf	14,7	;volatile
 10409  0F98  1C70               	btfss	i1Mrf49SpiTx@byte,0
 10410  0F99  2F9D               	goto	i1l283
 10411  0F9A  0020               	movlb	0	; select bank0
 10412  0F9B  178D               	bsf	13,7	;volatile
 10413  0F9C  2F9F               	goto	i1l284
 10414  0F9D                     i1l283:	
 10415  0F9D  0020               	movlb	0	; select bank0
 10416  0F9E  138D               	bcf	13,7	;volatile
 10417  0F9F                     i1l284:	
 10418  0F9F  0022               	movlb	2	; select bank2
 10419  0FA0  178E               	bsf	14,7	;volatile
 10420  0FA1  0000               	nop	;# 
 10421  0FA2  0022               	movlb	2	; select bank2
 10422  0FA3  138E               	bcf	14,7	;volatile
 10423                           
 10424                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 10425  0FA4  0020               	movlb	0	; select bank0
 10426  0FA5  138D               	bcf	13,7	;volatile
 10427  0FA6  0008               	return
 10428  0FA7                     __end_ofi1_Mrf49SpiTx:	
 10429  0FA7                     __ptext71:	
 10430 ;; *************** function i1_Mrf49RxSts *****************
 10431 ;; Defined at:
 10432 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;		None
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;		None
 10437 ;; Return value:  Size  Location     Type
 10438 ;;		None               void
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, pclath, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 1F/1
 10443 ;;		On exit  : 1F/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10446 ;;      Params:         0       0       0       0
 10447 ;;      Locals:         0       0       0       0
 10448 ;;      Temps:          0       0       0       0
 10449 ;;      Totals:         0       0       0       0
 10450 ;;Total ram usage:        0 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    1
 10453 ;; This function calls:
 10454 ;;		i1_Mrf49SpiRx
 10455 ;; This function is called by:
 10456 ;;		i1_Mrf49xaServe
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           
 10461                           ;psect for function i1_Mrf49RxSts
 10462  0FA7                     i1_Mrf49RxSts:	
 10463                           
 10464                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 10465                           
 10466                           ;incstack = 0
 10467                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 10468  0FA7  120B               	bcf	11,4	;volatile
 10469                           
 10470                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 10471  0FA8  0020               	movlb	0	; select bank0
 10472  0FA9  130E               	bcf	14,6	;volatile
 10473                           
 10474                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
 10475  0FAA  27B4  318E         	fcall	i1_Mrf49SpiRx
 10476  0FAC  0020               	movlb	0	; select bank0
 10477  0FAD  00BB               	movwf	_mrf49Status
 10478                           
 10479                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
 10480  0FAE  27B4               	fcall	i1_Mrf49SpiRx
 10481  0FAF  0020               	movlb	0	; select bank0
 10482  0FB0  00BC               	movwf	_mrf49Status+1
 10483                           
 10484                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 10485  0FB1  170E               	bsf	14,6	;volatile
 10486                           
 10487                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 10488  0FB2  160B               	bsf	11,4	;volatile
 10489  0FB3  0008               	return
 10490  0FB4                     __end_ofi1_Mrf49RxSts:	
 10491  0FB4                     __ptext75:	
 10492 ;; *************** function i1_Mrf49SpiRx *****************
 10493 ;; Defined at:
 10494 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 10495 ;; Parameters:    Size  Location     Type
 10496 ;;		None
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 10499 ;; Return value:  Size  Location     Type
 10500 ;;                  1    wreg      unsigned char 
 10501 ;; Registers used:
 10502 ;;		wreg, status,2
 10503 ;; Tracked objects:
 10504 ;;		On entry : 1F/0
 10505 ;;		On exit  : 1F/2
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10508 ;;      Params:         0       0       0       0
 10509 ;;      Locals:         1       0       0       0
 10510 ;;      Temps:          0       0       0       0
 10511 ;;      Totals:         1       0       0       0
 10512 ;;Total ram usage:        1 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; This function calls:
 10515 ;;		Nothing
 10516 ;; This function is called by:
 10517 ;;		i1_Mrf49RxCmd
 10518 ;;		i1_Mrf49RxSts
 10519 ;; This function uses a non-reentrant model
 10520 ;;
 10521                           
 10522                           
 10523                           ;psect for function i1_Mrf49SpiRx
 10524  0FB4                     i1_Mrf49SpiRx:	
 10525                           
 10526                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 10527                           
 10528                           ;incstack = 0
 10529                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 10530  0FB4  01F0               	clrf	i1Mrf49SpiRx@data
 10531                           
 10532                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 10533  0FB5  138D               	bcf	13,7	;volatile
 10534  0FB6  1A8E               	btfsc	14,5	;volatile
 10535  0FB7  17F0               	bsf	i1Mrf49SpiRx@data,7
 10536  0FB8  0022               	movlb	2	; select bank2
 10537  0FB9  178E               	bsf	14,7	;volatile
 10538  0FBA  0000               	nop	;# 
 10539  0FBB  0022               	movlb	2	; select bank2
 10540  0FBC  138E               	bcf	14,7	;volatile
 10541                           
 10542                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10543  0FBD  0020               	movlb	0	; select bank0
 10544  0FBE  1A8E               	btfsc	14,5	;volatile
 10545  0FBF  1770               	bsf	i1Mrf49SpiRx@data,6
 10546  0FC0  0022               	movlb	2	; select bank2
 10547  0FC1  178E               	bsf	14,7	;volatile
 10548  0FC2  0000               	nop	;# 
 10549  0FC3  0022               	movlb	2	; select bank2
 10550  0FC4  138E               	bcf	14,7	;volatile
 10551                           
 10552                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10553  0FC5  0020               	movlb	0	; select bank0
 10554  0FC6  1A8E               	btfsc	14,5	;volatile
 10555  0FC7  16F0               	bsf	i1Mrf49SpiRx@data,5
 10556  0FC8  0022               	movlb	2	; select bank2
 10557  0FC9  178E               	bsf	14,7	;volatile
 10558  0FCA  0000               	nop	;# 
 10559  0FCB  0022               	movlb	2	; select bank2
 10560  0FCC  138E               	bcf	14,7	;volatile
 10561                           
 10562                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10563  0FCD  0020               	movlb	0	; select bank0
 10564  0FCE  1A8E               	btfsc	14,5	;volatile
 10565  0FCF  1670               	bsf	i1Mrf49SpiRx@data,4
 10566  0FD0  0022               	movlb	2	; select bank2
 10567  0FD1  178E               	bsf	14,7	;volatile
 10568  0FD2  0000               	nop	;# 
 10569  0FD3  0022               	movlb	2	; select bank2
 10570  0FD4  138E               	bcf	14,7	;volatile
 10571                           
 10572                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10573  0FD5  0020               	movlb	0	; select bank0
 10574  0FD6  1A8E               	btfsc	14,5	;volatile
 10575  0FD7  15F0               	bsf	i1Mrf49SpiRx@data,3
 10576  0FD8  0022               	movlb	2	; select bank2
 10577  0FD9  178E               	bsf	14,7	;volatile
 10578  0FDA  0000               	nop	;# 
 10579  0FDB  0022               	movlb	2	; select bank2
 10580  0FDC  138E               	bcf	14,7	;volatile
 10581                           
 10582                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10583  0FDD  0020               	movlb	0	; select bank0
 10584  0FDE  1A8E               	btfsc	14,5	;volatile
 10585  0FDF  1570               	bsf	i1Mrf49SpiRx@data,2
 10586  0FE0  0022               	movlb	2	; select bank2
 10587  0FE1  178E               	bsf	14,7	;volatile
 10588  0FE2  0000               	nop	;# 
 10589  0FE3  0022               	movlb	2	; select bank2
 10590  0FE4  138E               	bcf	14,7	;volatile
 10591                           
 10592                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10593  0FE5  0020               	movlb	0	; select bank0
 10594  0FE6  1A8E               	btfsc	14,5	;volatile
 10595  0FE7  14F0               	bsf	i1Mrf49SpiRx@data,1
 10596  0FE8  0022               	movlb	2	; select bank2
 10597  0FE9  178E               	bsf	14,7	;volatile
 10598  0FEA  0000               	nop	;# 
 10599  0FEB  0022               	movlb	2	; select bank2
 10600  0FEC  138E               	bcf	14,7	;volatile
 10601                           
 10602                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 10603  0FED  0020               	movlb	0	; select bank0
 10604  0FEE  1A8E               	btfsc	14,5	;volatile
 10605  0FEF  1470               	bsf	i1Mrf49SpiRx@data,0
 10606  0FF0  0022               	movlb	2	; select bank2
 10607  0FF1  178E               	bsf	14,7	;volatile
 10608  0FF2  0000               	nop	;# 
 10609  0FF3  0022               	movlb	2	; select bank2
 10610  0FF4  138E               	bcf	14,7	;volatile
 10611                           
 10612                           ;mrf49xa_spi_pic16.c: 40: return data;
 10613  0FF5  0870               	movf	i1Mrf49SpiRx@data,w
 10614  0FF6  0008               	return
 10615  0FF7                     __end_ofi1_Mrf49SpiRx:	
 10616  0FF7                     PL16:	
 10617  0FF7  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10618  0FF8  397F               	andlw	127
 10619  0FF9  00F4               	movwf	??i1_Mrf49xaServe
 10620  0FFA  0AF4               	incf	??i1_Mrf49xaServe,f
 10621  0FFB  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
 10622  0FFC  0674               	xorwf	??i1_Mrf49xaServe,w
 10623  0FFD  3980               	andlw	-128
 10624  0FFE  0674               	xorwf	??i1_Mrf49xaServe,w
 10625  0FFF  0008               	return
 10626  1000                     __end_ofPL16:	
 10627                           
 10628                           	psect	text76
 10629  07D3                     __ptext76:	
 10630 ;; *************** function _ExtIntDeinit *****************
 10631 ;; Defined at:
 10632 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;		None
 10635 ;; Auto vars:     Size  Location     Type
 10636 ;;		None
 10637 ;; Return value:  Size  Location     Type
 10638 ;;		None               void
 10639 ;; Registers used:
 10640 ;;		None
 10641 ;; Tracked objects:
 10642 ;;		On entry : 1E/0
 10643 ;;		On exit  : 1E/0
 10644 ;;		Unchanged: 1E/0
 10645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10646 ;;      Params:         0       0       0       0
 10647 ;;      Locals:         0       0       0       0
 10648 ;;      Temps:          0       0       0       0
 10649 ;;      Totals:         0       0       0       0
 10650 ;;Total ram usage:        0 bytes
 10651 ;; Hardware stack levels used:    1
 10652 ;; This function calls:
 10653 ;;		Nothing
 10654 ;; This function is called by:
 10655 ;;		_extInt
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           
 10660                           ;psect for function _ExtIntDeinit
 10661  07D3                     _ExtIntDeinit:	
 10662                           
 10663                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 10664                           
 10665                           ;incstack = 0
 10666                           ; Regs used in _ExtIntDeinit: []
 10667  07D3  120B               	bcf	11,4	;volatile
 10668  07D4  0008               	return
 10669  07D5                     __end_of_ExtIntDeinit:	
 10670  007E                     btemp	set	126	;btemp
 10671  007E                     wtemp	set	126
 10672  007E                     wtemp0	set	126
 10673  0080                     wtemp1	set	128
 10674  0082                     wtemp2	set	130
 10675  0084                     wtemp3	set	132
 10676  0086                     wtemp4	set	134
 10677  0088                     wtemp5	set	136
 10678  007F                     wtemp6	set	127
 10679  007E                     ttemp	set	126
 10680  007E                     ttemp0	set	126
 10681  0081                     ttemp1	set	129
 10682  0084                     ttemp2	set	132
 10683  0087                     ttemp3	set	135
 10684  007F                     ttemp4	set	127
 10685  007E                     ltemp	set	126
 10686  007E                     ltemp0	set	126
 10687  0082                     ltemp1	set	130
 10688  0086                     ltemp2	set	134
 10689  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    68
    Data        0
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     18      29
    BANK1            80      0      75
    BANK2            80      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgWrite@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleCfgRead@packet..(COMMON[21]), NULL(NULL[0]), 
		 -> cfgRam(BANK0[9]), 

    S1054CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> eepromTxByte@byte(COMMON[1]), cfgRam(BANK0[9]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 
		 -> NULL(NULL[0]), cfgRam(BANK0[9]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    S333rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus(BANK1[75]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 76
		 -> rfTrcvStatus.rxPacket(BANK1[48]), rfTrcvStatus(BANK1[75]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_handleCfgCmd
    _HandlePacket->_handleCfgRead
    _HandlePacket->_handleCfgWrite
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _AdcSample->_AdcGetResult

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   28560
                                             14 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              5     1      4    1917
                                              6 BANK0      5     1      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     831
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     831
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     831
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     831
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    5616
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (2) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (2) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          3     3      0   16771
                                             11 BANK0      3     3      0
                         _ExtIntInit
                       _HandlePacket
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    4670
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    1947
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         2     2      0    8148
                                              9 BANK0      2     2      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1231
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     772
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     882
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     602
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    1935
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     682
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1085
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1085
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1532
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1342
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (2) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    1033
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaNeedsReset
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      70       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     12      1D       6       36.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4B       8       93.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      70      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Fri Jul 04 20:14:33 2014

                Mrf49xaTxPacket@crc 0023                         __CFG_CP$OFF 0000  
                                PL8 0763                                  l32 036D  
                                l42 03C2                                  l34 0379  
                                l35 037B                                  l39 03A5  
                                l79 0008                                 PL10 0786  
                               PL20 07B1                                 PL12 0794  
                               PL22 07B7                                 PL14 07A1  
                               PL24 07BD                                 PL16 0FF7  
                               PL26 07C3                                 PL18 07AB  
                               PL28 07C8               Mrf49xaTxPacket@packet 0025  
                               l211 02D2                                 l234 014B  
                               l260 060A                                 l271 062A  
                               l263 0614                                 l255 05FE  
                               l280 0641                                 l272 062B  
                               l264 0615                                 l256 05FF  
                               l441 01D6                                 l417 0145  
                               l442 01F4                                 l283 064B  
                               l275 0635                                 l267 061F  
                               l259 0609                                 l284 064C  
                               l276 0636                                 l268 0620  
                               l381 05B6                                 l550 04E9  
                               l535 0581                                 l279 0640  
                               l562 048B                                 l555 04B1  
                               l564 04BC                                 l558 0482  
                               l639 00B9                     ??_PwrSensorInit 0020  
                   ??_PwrSensorWake 0020                        __CFG_BORV$LO 0000  
               handleCfgWrite@index 0027                                 wreg 0009  
                  i1Mrf49xaModeRx@k 0073                        __CFG_IESO$ON 0000  
            ??_SoftI2cRepeatedStart 0021                        __CFG_LVP$OFF 0000  
            Mrf49xaTxPacket@needAck 0021                                l3000 0000  
                              l3012 0055                                l3020 0711  
                              l3200 06B2                                l3040 014D  
                              l3104 06DF                                l3120 045A  
                              l3026 0725                                l3204 06B9  
                              l2404 03E4                                l3132 0462  
                              l3060 017B                                l3150 048F  
                              l3142 0484                                l3134 0468  
                              l3070 019D                                l2360 03D0  
                              l3136 046B                                l3064 0189  
                              l3240 00E5                                l2610 058F  
                              l3162 04C0                                l3146 0488  
                              l3082 01A0                                l3066 0195  
                              l3242 00E8                                l2460 03C4  
                              l3156 0493                                l3236 00DC  
                              l3228 00C5                                l2702 054D  
                              l3246 00F4                                l3262 011B  
                              l2704 05E8                                l2800 01FB  
                              l3248 00F6                                l2626 0592  
                              l2554 0357                                l2546 0345  
                              l2706 03FD                                l2810 0209  
                              l3274 012E                                l3258 0113  
                              l3530 0076                                l2636 059D  
                              l2556 0368                                l2580 02B5  
                              l2804 0200                                l3284 0137  
                              l3276 012F                                l2566 031D  
                              l2558 0310                                l2806 0203  
                              l2902 0749                                l2656 05A4  
                              l2568 032B                                l2840 023D  
                              l3560 00A9                                l2682 051F  
                              l2674 051D                                l2586 02BE  
                              l2850 025C                                l2834 022B  
                              l2826 0220                                l2668 05C4  
                              l2692 0521                                l2924 056B  
                              l2860 0274                                l2844 024C  
                              l2908 075D                                l2686 0520  
                              l2678 051E                                l2854 0263  
                              l2790 01E2                     Mrf49TxByte@byte 0023  
                              l2960 04C6                                l2856 026C  
                              l2848 0258                                l2872 0288  
                              l2962 04CD                                l2858 0270  
                              l2794 01E5                                l2890 01C1  
                              l2956 04C4                                l2868 0286  
                              l2876 029A                                l2788 01D9  
                              l2958 04C5                                l2966 04D9  
                              l2798 01F8                                l2878 02A9  
                              l2894 01AC                                l2990 0734  
                              l2896 0740                                l2998 072D  
                              u2417 03D3                                u2427 06AD  
                      __CFG_WRT$OFF 0000                       __CFG_FCMEN$ON 0000  
                              _main 0063                     __end_of_AdcInit 073F  
                              fsr0h 0005                                fsr1h 0007  
                  ??_PwrSensorSleep 0020                                fsr0l 0004  
                              indf0 0000                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                   __end_of_CfgLoad 0405                                ltemp 007E  
                   __end_of_CfgSave 05EF                handleCfgWrite@packet 0028  
                              start 0020                                ttemp 007E  
                              wtemp 007E                __end_of_HandlePacket 04C2  
           __end_ofi1_Mrf49xaModeRx 0F38                       __CFG_MCLRE$ON 0000  
               __end_of_Mrf49RxByte 02B5                       ?_ExtIntDeinit 0070  
               __end_of_Mrf49TxByte 02B3                     ??_eepromRxBytes 0028  
                       _Mcp9800Read 02FB                     ??_eepromTxBytes 0028  
               __end_of_Mrf49xaInit 01AB                 __end_of_Mrf49xaTick 014B  
              _Mrf49xaPacketPending 0405                   ?_CfgGetSizeByType 0070  
                             ?_main 0070                               i1l211 0F30  
                             i1l141 001B                               i1l142 001C  
                             i1l260 0F57                               i1l271 0F79  
                             i1l263 0F61                               i1l255 0F4A  
                             i1l280 0F93                               i1l272 0F7B  
                             i1l264 0F63                               i1l256 0F4B  
                             i1l441 0E34                               i1l442 0E52  
                             i1l283 0F9D                               i1l275 0F85  
                             i1l267 0F6D                               i1l259 0F55  
                             i1l284 0F9F                               i1l276 0F87  
                             i1l268 0F6F                               i1l279 0F91  
                        _Mrf49RxCmd 05EF                          _Mrf49TxCmd 02DD  
                             _AdcGo 06CB                          _Mrf49SpiRx 065F  
                        _Mrf49SpiTx 05F9                          _Mrf49RxSts 0654  
                ??_CfgGetSizeByType 0020          __end_of_Mrf49xaAllocPacket 0460  
             __end_of_SoftI2cRxByte 03D0               __end_of_SoftI2cTxByte 0397  
                      main@humidity 002E               __size_of_Mcp9800Start 0019  
                __size_of_AdcDeinit 0007             Mrf49xaTxPacket@response 0020  
                __size_of_AdcIsBusy 0004                  __size_of_AdcSample 0028  
                    __CFG_BOREN$OFF 0000                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
            Mcp9800Start@resolution 0024                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 i1_Mrf49xaNeedsReset 0F38  
                    ??_ExtIntDeinit 0070                     __initialization 0022  
                        _ExtIntInit 0055                __end_of_handleCfgCmd 04EA  
                      __end_of_main 00BF  RfSendSampleWeatherNode@temperature 0026  
                    __CFG_LPBOR$OFF 0000               ?_Mrf49xaPacketPending 0070  
                      _Mcp9800Start 032C                              ??_main 002E  
              ?i1_Mrf49xaNeedsReset 0070                              ?_AdcGo 0070  
              __size_of_handleFwCmd 0021                __end_of_Mrf49xaTxAck 05E8  
              __end_of_Mrf49xaServe 02AE                       ??_PwrI2cSleep 0020  
                            _ADCON0 009D                              _ADCON1 009E  
                            _ADCON2 009F                           ??_AdcInit 0020  
                            _ADRESH 009C                              _ADRESL 009B  
                            _ANSELA 018C                              _ANSELB 018D  
                            _ANSELC 018E                           ??_CfgLoad 0028  
                         ??_CfgSave 0028                  i1Mrf49xaServe@data 0075  
                            i1l3170 0F1C                              i1l3412 0E43  
                            i1l3422 0E5E                              i1l3406 0E37  
                            i1l3510 000B                              i1l3424 0E61  
                            i1l3416 0E56                              i1l3408 0E40  
                            i1l3418 0E59                              i1l3452 0E8A  
                            i1l3444 0E7F                              i1l3428 0E67  
                            i1l3462 0EAA                              i1l3472 0EC1  
                            i1l3474 0ECA                              i1l3466 0EB6  
                            i1l3490 0EE6                              i1l3458 0E9D  
                            i1l3476 0ECE                              i1l3468 0EBA  
                            i1l3486 0EE4                              i1l3478 0ED2  
                            i1l3494 0EF8                              i1l3496 0F07  
                            _FVRCON 0117                              _OSCCON 0099  
              CfgGetSizeByType@type 0020                          _PwrI2cInit 06F5  
                AdcChSelect@channel 0020                          _PwrI2cWake 040E  
                       _Mrf49RxByte 02B3                         _Mrf49TxByte 02AE  
                     ??_SoftI2cInit 0024                       ??_SoftI2cStop 0021  
         __size_of_Mrf49xaModeSleep 0022                      __CFG_PWRTE$OFF 0000  
                        _SoftI2cNop 03D0                        ?_AdcChSelect 0070  
                  ?i1_Mrf49xaModeRx 0070                         _Mrf49xaInit 014B  
                            _Sleepy 01AB                         _Mrf49xaTick 00BF  
                        _PwrAdcInit 06E6                          _PwrAdcWake 06EF  
                     ??_PwrAdcSleep 0020                              _cfgRam 0032  
                   _Mrf49xaRxPacket 06D8                   __end_of_AdcDeinit 0734  
                    __CFG_STVREN$ON 0000                   __end_of_AdcIsBusy 06D1  
                   _Mrf49xaTxPacket 0582                              _extInt 0004  
                            _memcpy 0548                   __end_of_AdcSample 06CB  
                   _Mrf49xaShutdown 073F                          _PwrRfSleep 06FD  
             ??i1_Mrf49xaNeedsReset 0070                         ?_Mrf49RxCmd 0070  
                       ?_Mrf49TxCmd 0021                         ?_Mrf49SpiRx 0070  
                       ?_Mrf49SpiTx 0070                         ?_Mrf49RxSts 0070  
                __size_of_PwrRfInit 0021                  __size_of_PwrRfWake 0002  
             __size_of_HandlePacket 0062             __end_of__initialization 0032  
             __end_ofi1_Mrf49RxByte 0F14                 __end_of_PwrI2cSleep 03F5  
             __end_ofi1_Mrf49TxByte 0F11                       __end_of_AdcGo 06CD  
   RfSendSampleWeatherNode@humidity 0028                         ?_ExtIntInit 0070  
                    __pcstackCOMMON 0070                    SoftI2cRxByte@ack 0021  
                handleCfgCmd@packet 0028                 __end_of_SoftI2cInit 0063  
             __end_of_handleCfgRead 051B                 __end_of_SoftI2cStop 03F3  
            ??_Mrf49xaPacketPending 0020             __size_ofi1_Mrf49xaServe 00E8  
                        __end_ofPL8 0786                 __end_of_PwrAdcSleep 06EF  
                           ??_AdcGo 0020                      _OPTION_REGbits 0095  
                      _HandlePacket 0460             Mrf49xaFreePacket@packet 0020  
           __size_of_handleCfgWrite 001B                __end_of_ExtIntDeinit 07D5  
                        __pbssBANK0 0032                          __pbssBANK1 00A0  
                       ?_PwrI2cInit 0070                         ?_PwrI2cWake 0070  
                     ?_SoftI2cStart 0070               __size_of_handleCfgCmd 0028  
           __end_of_Mrf49xaRxPacket 06E6             __end_of_Mrf49xaTxPacket 05C8  
             __end_of_Mrf49xaModeRx 02DA               __end_of_Mrf49xaModeTx 072D  
                       ?_SoftI2cNop 0070               __end_of_Mrf49xaReboot 0763  
               __size_of_Mrf49RxCmd 000A                   __end_of_PwrRfInit 0055  
               __size_of_Mrf49TxCmd 0009                   __end_of_PwrRfWake 0702  
               __size_of_Mrf49SpiRx 0044                 __size_of_Mrf49SpiTx 005B  
               __size_of_Mrf49RxSts 000B                          __pmaintext 0063  
                           ?_Sleepy 0020             __end_of_Mrf49xaShutdown 0740  
                       ?_PwrAdcInit 0070                         ?_PwrAdcWake 0070  
          ?_RfSendSampleWeatherNode 0026                        ?_Mcp9800Read 0024  
                        __pintentry 0004                             ?_extInt 0070  
                           ?_memcpy 0020               __size_of_Mrf49xaTxAck 0020  
             __size_of_Mrf49xaServe 00E8                         ?_PwrRfSleep 0070  
              HandlePacket@response 0029                   handleFwCmd@packet 0028  
             __end_of_PwrSensorInit 0706               __end_of_PwrSensorWake 0709  
                       _PwrI2cSleep 03F3                        _handleCfgCmd 04C2  
                           _AdcInit 0734                 __size_of_ExtIntInit 0006  
     __size_of_SoftI2cRepeatedStart 0015                  handleCfgRead@index 0027  
                           _CfgLoad 03FD                          __stringtab 0800  
                           _CfgSave 05E8                      ??_SoftI2cStart 0021  
         __size_of_CfgGetSizeByType 0012                  _Mrf49xaAllocPacket 0453  
                  _Mrf49xaModeSleep 0740                         _SoftI2cInit 005B  
                     ?i1_Mrf49RxCmd 0070                       ?i1_Mrf49TxCmd 0071  
                     ?i1_Mrf49SpiRx 0070                       ?i1_Mrf49SpiTx 0070  
                       _SoftI2cStop 03E4                       ?i1_Mrf49RxSts 0070  
                           Sleepy@b 0023                        _Mrf49xaTxAck 05C8  
                      _Mrf49xaServe 01C6                     __size_of_Sleepy 001B  
              eepromRxBytes@address 0024                         _PwrAdcSleep 06EB  
               ?_Mrf49xaAllocPacket 0070                __size_of_AdcChSelect 0007  
             __end_of_eepromRxBytes 0369               __end_of_eepromTxBytes 032C  
                   __size_of_extInt 001C                     __size_of_memcpy 0019  
                 _mrfRegset_InitCnt 0801                             __ptext1 040F  
                           __ptext2 0453                             __ptext3 0706  
                           __ptext4 03F5                             __ptext5 0702  
                           __ptext6 0700                             __ptext7 0762  
                           __ptext8 06FD                             __ptext9 073F  
               __size_of_PwrI2cInit 0008                 __size_of_PwrI2cWake 0001  
                        _parameters 083F                       ?_AdcGetResult 0020  
               __size_of_SoftI2cNop 0007                ??_Mrf49xaAllocPacket 0020  
               __size_of_PwrAdcInit 0005                 __size_of_PwrAdcWake 0006  
                           clrloop0 07CE                end_of_initialization 0032  
                           memcpy@d 0023                             memcpy@n 0021  
                           memcpy@s 0024                        ?_Mrf49RxByte 0070  
                      ?_Mrf49TxByte 0070                      ??i1_Mrf49RxCmd 0071  
                    ??i1_Mrf49TxCmd 0072                      ??i1_Mrf49SpiRx 0070  
                    ??i1_Mrf49SpiTx 0070                      ??i1_Mrf49RxSts 0071  
                  ?_Mrf49xaRxPacket 0070                 __size_of_PwrRfSleep 0003  
   __end_of_RfSendSampleWeatherNode 0453                    ?_Mrf49xaTxPacket 0020  
                      ?_Mrf49xaInit 0070                __end_of_mrfRegset_Rx 0831  
              __end_of_mrfRegset_Tx 0839                        ?_Mrf49xaTick 0070  
                  ?_Mrf49xaShutdown 0070             handleCfgWrite@nrOfBytes 0026  
            __size_of_SoftI2cRxByte 0039              __size_of_SoftI2cTxByte 002E  
                    i1_Mrf49xaServe 0E24           __end_of_mrfRegset_InitCnt 0802  
           __size_of_PwrSensorSleep 0003                       ??_handleFwCmd 0028  
                         _PORTAbits 000C                           _PORTBbits 000D  
                         _PORTCbits 000E                           _AdcDeinit 072D  
             __size_of_ExtIntDeinit 0002                           _AdcIsBusy 06CD  
                      ??_Mrf49RxCmd 0021                        ??_Mrf49TxCmd 0022  
                      ??_Mrf49SpiRx 0020                        ??_Mrf49SpiTx 0020  
                      ??_Mrf49RxSts 0021                           _AdcSample 06A3  
                  __CFG_FOSC$INTOSC 0000                      ??_AdcGetResult 0022  
                    _handleCfgWrite 052D                           _TRISAbits 008C  
                         _TRISBbits 008D                           _TRISCbits 008E  
                       AdcSample@ch 0025                      Mrf49SpiRx@data 0020  
                    Mrf49SpiTx@byte 0020                  __end_of_Mrf49RxCmd 05F9  
                __end_of_Mrf49TxCmd 02E6              __end_ofi1_Mrf49xaServe 0F0C  
                      ??_ExtIntInit 0020                  __end_of_Mrf49SpiRx 06A3  
                __end_of_Mrf49SpiTx 0654                  __end_of_Mrf49RxSts 065F  
                      _ExtIntDeinit 07D3         __end_ofi1_Mrf49xaNeedsReset 0F3B  
                    __end_of_Sleepy 01C6                   SoftI2cRxByte@data 0022  
              __size_of_Mcp9800Read 0015                   eepromRxBytes@data 0026  
              __end_of_SoftI2cStart 03E4            __size_ofi1_Mrf49xaModeRx 0024  
                        ?_AdcDeinit 0070                      __end_of_extInt 0020  
                    __end_of_memcpy 0561                   eepromRxBytes@size 0027  
            __end_of_handleCfgWrite 0548                          ?_AdcIsBusy 0070  
        __end_of_mrfRegset_SleepCnt 0804                          ?_AdcSample 0022  
                       __end_ofPL10 0794                         __end_ofPL20 07B7  
                       __end_ofPL12 07A1                         __end_ofPL22 07BD  
                       __end_ofPL14 07AB                         __end_ofPL24 07C3  
                       __end_ofPL16 1000                         __end_ofPL26 07C8  
                       __end_ofPL18 07B1                         __end_ofPL28 07CD  
               start_initialization 0022                       _SoftI2cRxByte 0397  
               __end_of_handleFwCmd 0582                       _SoftI2cTxByte 0369  
                __end_of_ExtIntInit 005B                   SoftI2cTxByte@data 0022  
                  _CfgGetSizeByType 051B                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 002A  
                      ??_SoftI2cNop 0020                            ??_Sleepy 0022  
                      ??_PwrAdcInit 0020                        ??_PwrAdcWake 0020  
                   ?i1_Mrf49xaServe 0070                     _mrfRegset_RxCnt 0802  
                   _mrfRegset_TxCnt 0804                     _mrfRegset_Sleep 0839  
                         _PwrRfInit 0034                           _PwrRfWake 0700  
                          ??_extInt 0076                            ??_memcpy 0023  
     __size_of_Mrf49xaPacketPending 0009                   eepromTxBytes@data 0026  
                      ??_PwrRfSleep 0024                   eepromTxBytes@size 0027  
                   ?_handleCfgWrite 0070              __size_ofi1_Mrf49RxByte 0003  
            __size_ofi1_Mrf49TxByte 0005            __end_of_Mrf49xaModeSleep 0762  
                __end_of_PwrI2cInit 06FD                __end_ofi1_Mrf49RxCmd 0E24  
              __end_ofi1_Mrf49TxCmd 0F45                  __end_of_PwrI2cWake 040F  
              __end_ofi1_Mrf49SpiRx 0FF7                __end_ofi1_Mrf49SpiTx 0FA7  
              __end_ofi1_Mrf49RxSts 0FB4                           ___latbits 0001  
                     __pcstackBANK0 0020                      ?_SoftI2cRxByte 0070  
  __size_of_RfSendSampleWeatherNode 0044                      ?_SoftI2cTxByte 0070  
                 i1Mrf49TxByte@byte 0073                        ?_PwrI2cSleep 0070  
                __end_of_SoftI2cNop 03D7                            ?_AdcInit 0070  
                __end_of_PwrAdcInit 06EB                            ?_CfgLoad 0070  
                __end_of_PwrAdcWake 06F5                            ?_CfgSave 0070  
            __size_of_handleCfgRead 0031                        _rfTrcvStatus 00A0  
                      ?_SoftI2cInit 0070                        ?_SoftI2cStop 0070  
              __size_of_Mrf49RxByte 0002                  __end_of_PwrRfSleep 0700  
              __size_of_Mrf49TxByte 0005                __end_of_AdcGetResult 0000  
      __end_of_SoftI2cRepeatedStart 02FB                        ?_PwrAdcSleep 0070  
              __size_of_Mrf49xaInit 0060                __size_of_Mrf49xaTick 008C  
                        ?_PwrRfInit 0070                          ?_PwrRfWake 0070  
                    _PwrSensorSleep 03F5                       ?_Mcp9800Start 0070  
                         __pstrings 0800                         ??_AdcDeinit 0020  
                       ??_AdcIsBusy 0020                         _handleFwCmd 0561  
                       ??_AdcSample 0024                      __size_of_AdcGo 0002  
            __size_of_Mrf49xaModeRx 0025              __size_of_Mrf49xaModeTx 0024  
                      _mrfRegset_Rx 0825                        _mrfRegset_Tx 0831  
            __size_of_Mrf49xaReboot 0001                   ??i1_Mrf49xaModeRx 0073  
                  __CFG_WDTE$SWDTEN 0000                            _LATAbits 010C  
                          _LATBbits 010D                            _LATCbits 010E  
                     i1_Mrf49RxByte 0F11             __end_of_mrfRegset_RxCnt 0803  
                     i1_Mrf49TxByte 0F0C             __end_of_mrfRegset_TxCnt 0805  
           __end_of_mrfRegset_Sleep 083F                           clear_ram0 07CD  
                     ??_AdcChSelect 0020                         _mrf49Status 003B  
                 _Mrf49xaFreePacket 03F8                      Mrf49xaModeRx@k 0023  
                    Mrf49xaModeTx@k 0023              __end_of_PwrSensorSleep 03F8  
             __size_of_SoftI2cStart 000D              __size_of_PwrSensorInit 0004  
            __size_of_PwrSensorWake 0003                       Mrf49RxCmd@cmd 0021  
                ?_Mrf49xaFreePacket 0070                       Mrf49RxCmd@val 0022  
                    ??_Mcp9800Start 0024                       _handleCfgRead 04EA  
                     Mrf49TxCmd@cmd 0022                       Mrf49TxCmd@val 0021  
               handleCfgRead@packet 0028                 ??_Mrf49xaFreePacket 0020  
                   ??_SoftI2cRxByte 0021                   _Mrf49xaNeedsReset 02DA  
                   ??_SoftI2cTxByte 0021                            _WPUAbits 020C  
                ?_Mrf49xaNeedsReset 0070         __size_of_Mrf49xaAllocPacket 000D  
                  __size_of_AdcInit 000B                    __size_of_CfgLoad 0008  
                  __size_of_CfgSave 0007                 ??_Mrf49xaNeedsReset 0020  
            __size_of_eepromRxBytes 0024                      ?i1_Mrf49RxByte 0070  
            __size_of_eepromTxBytes 001C                        _SoftI2cStart 03D7  
                    ?i1_Mrf49TxByte 0070           __end_of_Mrf49xaFreePacket 03FD  
                         extInt@ofw 0077                            Sleepy@ms 0020  
                     _Mrf49xaModeRx 02B5                       _Mrf49xaModeTx 0709  
                     _Mrf49xaReboot 0762                      _mrfRegset_Init 0805  
                   ?_PwrSensorSleep 0070                         ??_PwrRfInit 0027  
                    ?_handleCfgRead 0070                         ??_PwrRfWake 0024  
          __size_of_Mrf49xaRxPacket 000E               __size_ofi1_Mrf49RxCmd 000C  
             __size_ofi1_Mrf49TxCmd 000A               __size_ofi1_Mrf49SpiRx 0043  
             __size_ofi1_Mrf49SpiTx 0062                    i1Mrf49SpiRx@data 0070  
             __size_ofi1_Mrf49RxSts 000D                 __end_of_AdcChSelect 06D8  
          __size_of_Mrf49xaTxPacket 0046            __end_of_CfgGetSizeByType 052D  
                  i1Mrf49SpiTx@byte 0070                      SoftI2cRxByte@i 0023  
         __end_of_Mrf49xaNeedsReset 02DD                  __end_of__stringtab 0801  
          __size_of_Mrf49xaShutdown 0001                      SoftI2cTxByte@i 0023  
           _RfSendSampleWeatherNode 040F                       ?_HandlePacket 0070  
                          __ptext10 0740                            __ptext11 0034  
                          __ptext20 06E6                            __ptext12 040E  
                          __ptext21 00BF                            __ptext13 03F3  
                          __ptext30 02AE                            __ptext22 06D8  
                          __ptext14 06F5                            __ptext31 02DD  
                          __ptext23 0405                            __ptext15 005B  
                          __ptext40 04EA                            __ptext32 0654  
                          __ptext24 0709                            __ptext16 06EF  
                          __ptext41 0548                            __ptext33 02B3  
                          __ptext25 014B                            __ptext17 0734  
                          __ptext50 0582                            __ptext42 051B  
                          __ptext34 05EF                            __ptext26 01AB  
                          __ptext18 06EB                            __ptext51 03F8  
                          __ptext43 04C2                            __ptext35 05F9  
                          __ptext27 01C6                            __ptext19 072D  
                          __ptext60 06A3                            __ptext52 0055  
                          __ptext44 05E8                            __ptext36 065F  
                          __ptext28 02DA                            __ptext61 06CD  
                          __ptext53 032C                            __ptext45 0310  
                          __ptext37 0460                            __ptext29 02B5  
                          __ptext70 0F3B                            __ptext62 06CB  
                          __ptext54 02FB                            __ptext46 03FD  
                          __ptext38 0561                            __ptext71 0FA7  
                          __ptext63 0000                            __ptext55 0369  
                          __ptext47 0345                            __ptext39 052D  
                          __ptext72 0F11                            __ptext64 06D1  
                          __ptext56 03E4                            __ptext48 02E6  
                          __ptext73 0E18                            __ptext57 03D7  
                          __ptext49 05C8                       _PwrSensorInit 0702  
                          __ptext74 0F45                            __ptext66 0E24  
                          __ptext58 0397                            __ptext75 0FB4  
                          __ptext67 0F38                            __ptext59 03D0  
                          __ptext76 07D3                            __ptext68 0F14  
                          __ptext69 0F0C                       _PwrSensorWake 0706  
              _SoftI2cRepeatedStart 02E6                __size_of_PwrI2cSleep 0002  
             __size_of_AdcGetResult 0000                  _mrfRegset_SleepCnt 0803  
                  Mcp9800Read@tempH 0026                    Mcp9800Read@tempL 0027  
                  ??i1_Mrf49xaServe 0074                       __size_of_main 005C  
                      i1_Mrf49RxCmd 0E18              __end_of_mrfRegset_Init 0825  
                Mrf49xaTxAck@packet 0026                        i1_Mrf49TxCmd 0F3B  
                      i1_Mrf49SpiRx 0FB4                        i1_Mrf49SpiTx 0F45  
                    ?_Mrf49xaModeRx 0070                      ?_Mrf49xaModeTx 0070  
                      i1_Mrf49RxSts 0FA7                      ?_Mrf49xaReboot 0070  
                __end_of_parameters 0845                __size_of_SoftI2cInit 0008  
              __size_of_SoftI2cStop 000F                       ??_Mcp9800Read 0026  
                  ??_handleCfgWrite 0026                __size_of_PwrAdcSleep 0004  
                     _eepromRxBytes 0345                   Mrf49xaModeSleep@k 0023  
                     _eepromTxBytes 0310                     i1Mrf49RxCmd@cmd 0071  
                   main@temperature 0030                     i1Mrf49RxCmd@val 0072  
                    ??_HandlePacket 0029        __size_ofi1_Mrf49xaNeedsReset 0003  
                Mrf49xaTick@timeout 002C                          _INTCONbits 000B  
                 ?_Mrf49xaModeSleep 0070                     i1Mrf49TxCmd@cmd 0072  
                   i1Mrf49TxCmd@val 0071                            memcpy@d1 0025  
                          memcpy@s1 0020                      ?_PwrSensorInit 0070  
                      _AdcGetResult 0000                      ?_PwrSensorWake 0070  
                ??_Mrf49xaModeSleep 0023                       ?_handleCfgCmd 0070  
             ?_SoftI2cRepeatedStart 0070                     ??i1_Mrf49RxByte 0073  
                          intlevel1 0000                     ??i1_Mrf49TxByte 0073  
      __end_of_Mrf49xaPacketPending 040E                __end_of_Mcp9800Start 0345  
     RfSendSampleWeatherNode@packet 002A                   __CFG_CLKOUTEN$OFF 0000  
        __size_of_Mrf49xaFreePacket 0005                       ?_Mrf49xaTxAck 0070  
                       _AdcChSelect 06D1                        Mrf49xaInit@k 0026  
                     ?_Mrf49xaServe 0070                     ??_handleCfgRead 0026  
                 Mrf49xaTick@packet 002D                      ?_eepromRxBytes 0024  
              eepromTxBytes@address 0024                     i1_Mrf49xaModeRx 0F14  
                    ?_eepromTxBytes 0024           ??_RfSendSampleWeatherNode 002A  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 0310                   ??_Mrf49xaRxPacket 0020  
                 ??_Mrf49xaTxPacket 0022                      ??_handleCfgCmd 0028  
                        _WDTCONbits 0097                   ??_Mrf49xaShutdown 0024  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0024                      ??_Mrf49xaTxAck 0026  
                  Mrf49xaServe@data 0025                      ??_Mrf49xaServe 0024  
                     ??_Mrf49xaInit 0026                       ??_Mrf49xaTick 002B  
            handleCfgRead@nrOfBytes 0026                    Mrf49xaTxPacket@i 0024  

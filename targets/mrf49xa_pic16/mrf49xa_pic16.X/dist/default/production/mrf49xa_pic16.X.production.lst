

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Mon Jun 30 16:08:20 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text8,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text21,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text43,local,class=CODE,merge=1,delta=2
    18                           	psect	pa_nodes,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  0007                     	;# 
    28  0008                     	;# 
    29  0009                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000D                     	;# 
    34  000E                     	;# 
    35  0011                     	;# 
    36  0012                     	;# 
    37  0013                     	;# 
    38  0015                     	;# 
    39  0016                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001B                     	;# 
    46  001C                     	;# 
    47  008C                     	;# 
    48  008D                     	;# 
    49  008E                     	;# 
    50  0091                     	;# 
    51  0092                     	;# 
    52  0093                     	;# 
    53  0095                     	;# 
    54  0096                     	;# 
    55  0097                     	;# 
    56  0099                     	;# 
    57  009A                     	;# 
    58  009B                     	;# 
    59  009B                     	;# 
    60  009C                     	;# 
    61  009D                     	;# 
    62  009E                     	;# 
    63  009F                     	;# 
    64  010C                     	;# 
    65  010D                     	;# 
    66  010E                     	;# 
    67  0111                     	;# 
    68  0112                     	;# 
    69  0113                     	;# 
    70  0114                     	;# 
    71  0115                     	;# 
    72  0116                     	;# 
    73  0117                     	;# 
    74  0118                     	;# 
    75  0119                     	;# 
    76  011D                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  018E                     	;# 
    80  0191                     	;# 
    81  0191                     	;# 
    82  0192                     	;# 
    83  0193                     	;# 
    84  0193                     	;# 
    85  0194                     	;# 
    86  0195                     	;# 
    87  0196                     	;# 
    88  0199                     	;# 
    89  019A                     	;# 
    90  019B                     	;# 
    91  019B                     	;# 
    92  019C                     	;# 
    93  019D                     	;# 
    94  019E                     	;# 
    95  019F                     	;# 
    96  020C                     	;# 
    97  020D                     	;# 
    98  0211                     	;# 
    99  0211                     	;# 
   100  0212                     	;# 
   101  0212                     	;# 
   102  0213                     	;# 
   103  0213                     	;# 
   104  0214                     	;# 
   105  0214                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0215                     	;# 
   109  0216                     	;# 
   110  0216                     	;# 
   111  0217                     	;# 
   112  0217                     	;# 
   113  0391                     	;# 
   114  0392                     	;# 
   115  0393                     	;# 
   116  0394                     	;# 
   117  0395                     	;# 
   118  0396                     	;# 
   119  0498                     	;# 
   120  0498                     	;# 
   121  0499                     	;# 
   122  049A                     	;# 
   123  049B                     	;# 
   124  049B                     	;# 
   125  049C                     	;# 
   126  049E                     	;# 
   127  049F                     	;# 
   128  0611                     	;# 
   129  0612                     	;# 
   130  0613                     	;# 
   131  0613                     	;# 
   132  0614                     	;# 
   133  0615                     	;# 
   134  0616                     	;# 
   135  0616                     	;# 
   136  0617                     	;# 
   137  0618                     	;# 
   138  0619                     	;# 
   139  0619                     	;# 
   140  061A                     	;# 
   141  061B                     	;# 
   142  061C                     	;# 
   143  061C                     	;# 
   144  0691                     	;# 
   145  0692                     	;# 
   146  0693                     	;# 
   147  0694                     	;# 
   148  0695                     	;# 
   149  0F0F                     	;# 
   150  0F10                     	;# 
   151  0F11                     	;# 
   152  0F12                     	;# 
   153  0F13                     	;# 
   154  0F14                     	;# 
   155  0F15                     	;# 
   156  0F16                     	;# 
   157  0F17                     	;# 
   158  0F18                     	;# 
   159  0F19                     	;# 
   160  0F1A                     	;# 
   161  0F1B                     	;# 
   162  0F1C                     	;# 
   163  0F1D                     	;# 
   164  0F1E                     	;# 
   165  0F1F                     	;# 
   166  0F20                     	;# 
   167  0F21                     	;# 
   168  0F22                     	;# 
   169  0F23                     	;# 
   170  0F24                     	;# 
   171  0F25                     	;# 
   172  0F26                     	;# 
   173  0F27                     	;# 
   174  0F28                     	;# 
   175  0F29                     	;# 
   176  0F2A                     	;# 
   177  0F2B                     	;# 
   178  0F2C                     	;# 
   179  0F2D                     	;# 
   180  0F2E                     	;# 
   181  0F2F                     	;# 
   182  0F8C                     	;# 
   183  0F8D                     	;# 
   184  0F91                     	;# 
   185  0F95                     	;# 
   186  0F96                     	;# 
   187  0F97                     	;# 
   188  0F9C                     	;# 
   189  0F9D                     	;# 
   190  0F9E                     	;# 
   191  0FE3                     	;# 
   192  0FE4                     	;# 
   193  0FE5                     	;# 
   194  0FE6                     	;# 
   195  0FE7                     	;# 
   196  0FE8                     	;# 
   197  0FE9                     	;# 
   198  0FEA                     	;# 
   199  0FEB                     	;# 
   200  0FED                     	;# 
   201  0FEE                     	;# 
   202  0FEF                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000D                     	;# 
   217  000E                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0013                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0016                     	;# 
   224  0017                     	;# 
   225  0018                     	;# 
   226  0019                     	;# 
   227  001A                     	;# 
   228  001B                     	;# 
   229  001C                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  0111                     	;# 
   251  0112                     	;# 
   252  0113                     	;# 
   253  0114                     	;# 
   254  0115                     	;# 
   255  0116                     	;# 
   256  0117                     	;# 
   257  0118                     	;# 
   258  0119                     	;# 
   259  011D                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  018E                     	;# 
   263  0191                     	;# 
   264  0191                     	;# 
   265  0192                     	;# 
   266  0193                     	;# 
   267  0193                     	;# 
   268  0194                     	;# 
   269  0195                     	;# 
   270  0196                     	;# 
   271  0199                     	;# 
   272  019A                     	;# 
   273  019B                     	;# 
   274  019B                     	;# 
   275  019C                     	;# 
   276  019D                     	;# 
   277  019E                     	;# 
   278  019F                     	;# 
   279  020C                     	;# 
   280  020D                     	;# 
   281  0211                     	;# 
   282  0211                     	;# 
   283  0212                     	;# 
   284  0212                     	;# 
   285  0213                     	;# 
   286  0213                     	;# 
   287  0214                     	;# 
   288  0214                     	;# 
   289  0215                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0216                     	;# 
   293  0216                     	;# 
   294  0217                     	;# 
   295  0217                     	;# 
   296  0391                     	;# 
   297  0392                     	;# 
   298  0393                     	;# 
   299  0394                     	;# 
   300  0395                     	;# 
   301  0396                     	;# 
   302  0498                     	;# 
   303  0498                     	;# 
   304  0499                     	;# 
   305  049A                     	;# 
   306  049B                     	;# 
   307  049B                     	;# 
   308  049C                     	;# 
   309  049E                     	;# 
   310  049F                     	;# 
   311  0611                     	;# 
   312  0612                     	;# 
   313  0613                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0615                     	;# 
   317  0616                     	;# 
   318  0616                     	;# 
   319  0617                     	;# 
   320  0618                     	;# 
   321  0619                     	;# 
   322  0619                     	;# 
   323  061A                     	;# 
   324  061B                     	;# 
   325  061C                     	;# 
   326  061C                     	;# 
   327  0691                     	;# 
   328  0692                     	;# 
   329  0693                     	;# 
   330  0694                     	;# 
   331  0695                     	;# 
   332  0F0F                     	;# 
   333  0F10                     	;# 
   334  0F11                     	;# 
   335  0F12                     	;# 
   336  0F13                     	;# 
   337  0F14                     	;# 
   338  0F15                     	;# 
   339  0F16                     	;# 
   340  0F17                     	;# 
   341  0F18                     	;# 
   342  0F19                     	;# 
   343  0F1A                     	;# 
   344  0F1B                     	;# 
   345  0F1C                     	;# 
   346  0F1D                     	;# 
   347  0F1E                     	;# 
   348  0F1F                     	;# 
   349  0F20                     	;# 
   350  0F21                     	;# 
   351  0F22                     	;# 
   352  0F23                     	;# 
   353  0F24                     	;# 
   354  0F25                     	;# 
   355  0F26                     	;# 
   356  0F27                     	;# 
   357  0F28                     	;# 
   358  0F29                     	;# 
   359  0F2A                     	;# 
   360  0F2B                     	;# 
   361  0F2C                     	;# 
   362  0F2D                     	;# 
   363  0F2E                     	;# 
   364  0F2F                     	;# 
   365  0F8C                     	;# 
   366  0F8D                     	;# 
   367  0F91                     	;# 
   368  0F95                     	;# 
   369  0F96                     	;# 
   370  0F97                     	;# 
   371  0F9C                     	;# 
   372  0F9D                     	;# 
   373  0F9E                     	;# 
   374  0FE3                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0013                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0093                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  009F                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0111                     	;# 
   434  0112                     	;# 
   435  0113                     	;# 
   436  0114                     	;# 
   437  0115                     	;# 
   438  0116                     	;# 
   439  0117                     	;# 
   440  0118                     	;# 
   441  0119                     	;# 
   442  011D                     	;# 
   443  018C                     	;# 
   444  018D                     	;# 
   445  018E                     	;# 
   446  0191                     	;# 
   447  0191                     	;# 
   448  0192                     	;# 
   449  0193                     	;# 
   450  0193                     	;# 
   451  0194                     	;# 
   452  0195                     	;# 
   453  0196                     	;# 
   454  0199                     	;# 
   455  019A                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020D                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0391                     	;# 
   480  0392                     	;# 
   481  0393                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0498                     	;# 
   486  0498                     	;# 
   487  0499                     	;# 
   488  049A                     	;# 
   489  049B                     	;# 
   490  049B                     	;# 
   491  049C                     	;# 
   492  049E                     	;# 
   493  049F                     	;# 
   494  0611                     	;# 
   495  0612                     	;# 
   496  0613                     	;# 
   497  0613                     	;# 
   498  0614                     	;# 
   499  0615                     	;# 
   500  0616                     	;# 
   501  0616                     	;# 
   502  0617                     	;# 
   503  0618                     	;# 
   504  0619                     	;# 
   505  0619                     	;# 
   506  061A                     	;# 
   507  061B                     	;# 
   508  061C                     	;# 
   509  061C                     	;# 
   510  0691                     	;# 
   511  0692                     	;# 
   512  0693                     	;# 
   513  0694                     	;# 
   514  0695                     	;# 
   515  0F0F                     	;# 
   516  0F10                     	;# 
   517  0F11                     	;# 
   518  0F12                     	;# 
   519  0F13                     	;# 
   520  0F14                     	;# 
   521  0F15                     	;# 
   522  0F16                     	;# 
   523  0F17                     	;# 
   524  0F18                     	;# 
   525  0F19                     	;# 
   526  0F1A                     	;# 
   527  0F1B                     	;# 
   528  0F1C                     	;# 
   529  0F1D                     	;# 
   530  0F1E                     	;# 
   531  0F1F                     	;# 
   532  0F20                     	;# 
   533  0F21                     	;# 
   534  0F22                     	;# 
   535  0F23                     	;# 
   536  0F24                     	;# 
   537  0F25                     	;# 
   538  0F26                     	;# 
   539  0F27                     	;# 
   540  0F28                     	;# 
   541  0F29                     	;# 
   542  0F2A                     	;# 
   543  0F2B                     	;# 
   544  0F2C                     	;# 
   545  0F2D                     	;# 
   546  0F2E                     	;# 
   547  0F2F                     	;# 
   548  0F8C                     	;# 
   549  0F8D                     	;# 
   550  0F91                     	;# 
   551  0F95                     	;# 
   552  0F96                     	;# 
   553  0F97                     	;# 
   554  0F9C                     	;# 
   555  0F9D                     	;# 
   556  0F9E                     	;# 
   557  0FE3                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0011                     	;# 
   585  0012                     	;# 
   586  0013                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  008C                     	;# 
   597  008D                     	;# 
   598  008E                     	;# 
   599  0091                     	;# 
   600  0092                     	;# 
   601  0093                     	;# 
   602  0095                     	;# 
   603  0096                     	;# 
   604  0097                     	;# 
   605  0099                     	;# 
   606  009A                     	;# 
   607  009B                     	;# 
   608  009B                     	;# 
   609  009C                     	;# 
   610  009D                     	;# 
   611  009E                     	;# 
   612  009F                     	;# 
   613  010C                     	;# 
   614  010D                     	;# 
   615  010E                     	;# 
   616  0111                     	;# 
   617  0112                     	;# 
   618  0113                     	;# 
   619  0114                     	;# 
   620  0115                     	;# 
   621  0116                     	;# 
   622  0117                     	;# 
   623  0118                     	;# 
   624  0119                     	;# 
   625  011D                     	;# 
   626  018C                     	;# 
   627  018D                     	;# 
   628  018E                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0194                     	;# 
   635  0195                     	;# 
   636  0196                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019C                     	;# 
   642  019D                     	;# 
   643  019E                     	;# 
   644  019F                     	;# 
   645  020C                     	;# 
   646  020D                     	;# 
   647  0211                     	;# 
   648  0211                     	;# 
   649  0212                     	;# 
   650  0212                     	;# 
   651  0213                     	;# 
   652  0213                     	;# 
   653  0214                     	;# 
   654  0214                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0216                     	;# 
   659  0216                     	;# 
   660  0217                     	;# 
   661  0217                     	;# 
   662  0391                     	;# 
   663  0392                     	;# 
   664  0393                     	;# 
   665  0394                     	;# 
   666  0395                     	;# 
   667  0396                     	;# 
   668  0498                     	;# 
   669  0498                     	;# 
   670  0499                     	;# 
   671  049A                     	;# 
   672  049B                     	;# 
   673  049B                     	;# 
   674  049C                     	;# 
   675  049E                     	;# 
   676  049F                     	;# 
   677  0611                     	;# 
   678  0612                     	;# 
   679  0613                     	;# 
   680  0613                     	;# 
   681  0614                     	;# 
   682  0615                     	;# 
   683  0616                     	;# 
   684  0616                     	;# 
   685  0617                     	;# 
   686  0618                     	;# 
   687  0619                     	;# 
   688  0619                     	;# 
   689  061A                     	;# 
   690  061B                     	;# 
   691  061C                     	;# 
   692  061C                     	;# 
   693  0691                     	;# 
   694  0692                     	;# 
   695  0693                     	;# 
   696  0694                     	;# 
   697  0695                     	;# 
   698  0F0F                     	;# 
   699  0F10                     	;# 
   700  0F11                     	;# 
   701  0F12                     	;# 
   702  0F13                     	;# 
   703  0F14                     	;# 
   704  0F15                     	;# 
   705  0F16                     	;# 
   706  0F17                     	;# 
   707  0F18                     	;# 
   708  0F19                     	;# 
   709  0F1A                     	;# 
   710  0F1B                     	;# 
   711  0F1C                     	;# 
   712  0F1D                     	;# 
   713  0F1E                     	;# 
   714  0F1F                     	;# 
   715  0F20                     	;# 
   716  0F21                     	;# 
   717  0F22                     	;# 
   718  0F23                     	;# 
   719  0F24                     	;# 
   720  0F25                     	;# 
   721  0F26                     	;# 
   722  0F27                     	;# 
   723  0F28                     	;# 
   724  0F29                     	;# 
   725  0F2A                     	;# 
   726  0F2B                     	;# 
   727  0F2C                     	;# 
   728  0F2D                     	;# 
   729  0F2E                     	;# 
   730  0F2F                     	;# 
   731  0F8C                     	;# 
   732  0F8D                     	;# 
   733  0F91                     	;# 
   734  0F95                     	;# 
   735  0F96                     	;# 
   736  0F97                     	;# 
   737  0F9C                     	;# 
   738  0F9D                     	;# 
   739  0F9E                     	;# 
   740  0FE3                     	;# 
   741  0FE4                     	;# 
   742  0FE5                     	;# 
   743  0FE6                     	;# 
   744  0FE7                     	;# 
   745  0FE8                     	;# 
   746  0FE9                     	;# 
   747  0FEA                     	;# 
   748  0FEB                     	;# 
   749  0FED                     	;# 
   750  0FEE                     	;# 
   751  0FEF                     	;# 
   752  0000                     	;# 
   753  0001                     	;# 
   754  0002                     	;# 
   755  0003                     	;# 
   756  0004                     	;# 
   757  0005                     	;# 
   758  0006                     	;# 
   759  0007                     	;# 
   760  0008                     	;# 
   761  0009                     	;# 
   762  000A                     	;# 
   763  000B                     	;# 
   764  000C                     	;# 
   765  000D                     	;# 
   766  000E                     	;# 
   767  0011                     	;# 
   768  0012                     	;# 
   769  0013                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0093                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  009F                     	;# 
   796  010C                     	;# 
   797  010D                     	;# 
   798  010E                     	;# 
   799  0111                     	;# 
   800  0112                     	;# 
   801  0113                     	;# 
   802  0114                     	;# 
   803  0115                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  0118                     	;# 
   807  0119                     	;# 
   808  011D                     	;# 
   809  018C                     	;# 
   810  018D                     	;# 
   811  018E                     	;# 
   812  0191                     	;# 
   813  0191                     	;# 
   814  0192                     	;# 
   815  0193                     	;# 
   816  0193                     	;# 
   817  0194                     	;# 
   818  0195                     	;# 
   819  0196                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019C                     	;# 
   825  019D                     	;# 
   826  019E                     	;# 
   827  019F                     	;# 
   828  020C                     	;# 
   829  020D                     	;# 
   830  0211                     	;# 
   831  0211                     	;# 
   832  0212                     	;# 
   833  0212                     	;# 
   834  0213                     	;# 
   835  0213                     	;# 
   836  0214                     	;# 
   837  0214                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0216                     	;# 
   842  0216                     	;# 
   843  0217                     	;# 
   844  0217                     	;# 
   845  0391                     	;# 
   846  0392                     	;# 
   847  0393                     	;# 
   848  0394                     	;# 
   849  0395                     	;# 
   850  0396                     	;# 
   851  0498                     	;# 
   852  0498                     	;# 
   853  0499                     	;# 
   854  049A                     	;# 
   855  049B                     	;# 
   856  049B                     	;# 
   857  049C                     	;# 
   858  049E                     	;# 
   859  049F                     	;# 
   860  0611                     	;# 
   861  0612                     	;# 
   862  0613                     	;# 
   863  0613                     	;# 
   864  0614                     	;# 
   865  0615                     	;# 
   866  0616                     	;# 
   867  0616                     	;# 
   868  0617                     	;# 
   869  0618                     	;# 
   870  0619                     	;# 
   871  0619                     	;# 
   872  061A                     	;# 
   873  061B                     	;# 
   874  061C                     	;# 
   875  061C                     	;# 
   876  0691                     	;# 
   877  0692                     	;# 
   878  0693                     	;# 
   879  0694                     	;# 
   880  0695                     	;# 
   881  0F0F                     	;# 
   882  0F10                     	;# 
   883  0F11                     	;# 
   884  0F12                     	;# 
   885  0F13                     	;# 
   886  0F14                     	;# 
   887  0F15                     	;# 
   888  0F16                     	;# 
   889  0F17                     	;# 
   890  0F18                     	;# 
   891  0F19                     	;# 
   892  0F1A                     	;# 
   893  0F1B                     	;# 
   894  0F1C                     	;# 
   895  0F1D                     	;# 
   896  0F1E                     	;# 
   897  0F1F                     	;# 
   898  0F20                     	;# 
   899  0F21                     	;# 
   900  0F22                     	;# 
   901  0F23                     	;# 
   902  0F24                     	;# 
   903  0F25                     	;# 
   904  0F26                     	;# 
   905  0F27                     	;# 
   906  0F28                     	;# 
   907  0F29                     	;# 
   908  0F2A                     	;# 
   909  0F2B                     	;# 
   910  0F2C                     	;# 
   911  0F2D                     	;# 
   912  0F2E                     	;# 
   913  0F2F                     	;# 
   914  0F8C                     	;# 
   915  0F8D                     	;# 
   916  0F91                     	;# 
   917  0F95                     	;# 
   918  0F96                     	;# 
   919  0F97                     	;# 
   920  0F9C                     	;# 
   921  0F9D                     	;# 
   922  0F9E                     	;# 
   923  0FE3                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  0011                     	;# 
   951  0012                     	;# 
   952  0013                     	;# 
   953  0015                     	;# 
   954  0016                     	;# 
   955  0016                     	;# 
   956  0017                     	;# 
   957  0018                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  008C                     	;# 
   963  008D                     	;# 
   964  008E                     	;# 
   965  0091                     	;# 
   966  0092                     	;# 
   967  0093                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  009F                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0111                     	;# 
   983  0112                     	;# 
   984  0113                     	;# 
   985  0114                     	;# 
   986  0115                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  0118                     	;# 
   990  0119                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020C                     	;# 
  1012  020D                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0391                     	;# 
  1029  0392                     	;# 
  1030  0393                     	;# 
  1031  0394                     	;# 
  1032  0395                     	;# 
  1033  0396                     	;# 
  1034  0498                     	;# 
  1035  0498                     	;# 
  1036  0499                     	;# 
  1037  049A                     	;# 
  1038  049B                     	;# 
  1039  049B                     	;# 
  1040  049C                     	;# 
  1041  049E                     	;# 
  1042  049F                     	;# 
  1043  0611                     	;# 
  1044  0612                     	;# 
  1045  0613                     	;# 
  1046  0613                     	;# 
  1047  0614                     	;# 
  1048  0615                     	;# 
  1049  0616                     	;# 
  1050  0616                     	;# 
  1051  0617                     	;# 
  1052  0618                     	;# 
  1053  0619                     	;# 
  1054  0619                     	;# 
  1055  061A                     	;# 
  1056  061B                     	;# 
  1057  061C                     	;# 
  1058  061C                     	;# 
  1059  0691                     	;# 
  1060  0692                     	;# 
  1061  0693                     	;# 
  1062  0694                     	;# 
  1063  0695                     	;# 
  1064  0F0F                     	;# 
  1065  0F10                     	;# 
  1066  0F11                     	;# 
  1067  0F12                     	;# 
  1068  0F13                     	;# 
  1069  0F14                     	;# 
  1070  0F15                     	;# 
  1071  0F16                     	;# 
  1072  0F17                     	;# 
  1073  0F18                     	;# 
  1074  0F19                     	;# 
  1075  0F1A                     	;# 
  1076  0F1B                     	;# 
  1077  0F1C                     	;# 
  1078  0F1D                     	;# 
  1079  0F1E                     	;# 
  1080  0F1F                     	;# 
  1081  0F20                     	;# 
  1082  0F21                     	;# 
  1083  0F22                     	;# 
  1084  0F23                     	;# 
  1085  0F24                     	;# 
  1086  0F25                     	;# 
  1087  0F26                     	;# 
  1088  0F27                     	;# 
  1089  0F28                     	;# 
  1090  0F29                     	;# 
  1091  0F2A                     	;# 
  1092  0F2B                     	;# 
  1093  0F2C                     	;# 
  1094  0F2D                     	;# 
  1095  0F2E                     	;# 
  1096  0F2F                     	;# 
  1097  0F8C                     	;# 
  1098  0F8D                     	;# 
  1099  0F91                     	;# 
  1100  0F95                     	;# 
  1101  0F96                     	;# 
  1102  0F97                     	;# 
  1103  0F9C                     	;# 
  1104  0F9D                     	;# 
  1105  0F9E                     	;# 
  1106  0FE3                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000D                     	;# 
  1132  000E                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  008C                     	;# 
  1146  008D                     	;# 
  1147  008E                     	;# 
  1148  0091                     	;# 
  1149  0092                     	;# 
  1150  0093                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  0111                     	;# 
  1166  0112                     	;# 
  1167  0113                     	;# 
  1168  0114                     	;# 
  1169  0115                     	;# 
  1170  0116                     	;# 
  1171  0117                     	;# 
  1172  0118                     	;# 
  1173  0119                     	;# 
  1174  011D                     	;# 
  1175  018C                     	;# 
  1176  018D                     	;# 
  1177  018E                     	;# 
  1178  0191                     	;# 
  1179  0191                     	;# 
  1180  0192                     	;# 
  1181  0193                     	;# 
  1182  0193                     	;# 
  1183  0194                     	;# 
  1184  0195                     	;# 
  1185  0196                     	;# 
  1186  0199                     	;# 
  1187  019A                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  020C                     	;# 
  1195  020D                     	;# 
  1196  0211                     	;# 
  1197  0211                     	;# 
  1198  0212                     	;# 
  1199  0212                     	;# 
  1200  0213                     	;# 
  1201  0213                     	;# 
  1202  0214                     	;# 
  1203  0214                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0216                     	;# 
  1208  0216                     	;# 
  1209  0217                     	;# 
  1210  0217                     	;# 
  1211  0391                     	;# 
  1212  0392                     	;# 
  1213  0393                     	;# 
  1214  0394                     	;# 
  1215  0395                     	;# 
  1216  0396                     	;# 
  1217  0498                     	;# 
  1218  0498                     	;# 
  1219  0499                     	;# 
  1220  049A                     	;# 
  1221  049B                     	;# 
  1222  049B                     	;# 
  1223  049C                     	;# 
  1224  049E                     	;# 
  1225  049F                     	;# 
  1226  0611                     	;# 
  1227  0612                     	;# 
  1228  0613                     	;# 
  1229  0613                     	;# 
  1230  0614                     	;# 
  1231  0615                     	;# 
  1232  0616                     	;# 
  1233  0616                     	;# 
  1234  0617                     	;# 
  1235  0618                     	;# 
  1236  0619                     	;# 
  1237  0619                     	;# 
  1238  061A                     	;# 
  1239  061B                     	;# 
  1240  061C                     	;# 
  1241  061C                     	;# 
  1242  0691                     	;# 
  1243  0692                     	;# 
  1244  0693                     	;# 
  1245  0694                     	;# 
  1246  0695                     	;# 
  1247  0F0F                     	;# 
  1248  0F10                     	;# 
  1249  0F11                     	;# 
  1250  0F12                     	;# 
  1251  0F13                     	;# 
  1252  0F14                     	;# 
  1253  0F15                     	;# 
  1254  0F16                     	;# 
  1255  0F17                     	;# 
  1256  0F18                     	;# 
  1257  0F19                     	;# 
  1258  0F1A                     	;# 
  1259  0F1B                     	;# 
  1260  0F1C                     	;# 
  1261  0F1D                     	;# 
  1262  0F1E                     	;# 
  1263  0F1F                     	;# 
  1264  0F20                     	;# 
  1265  0F21                     	;# 
  1266  0F22                     	;# 
  1267  0F23                     	;# 
  1268  0F24                     	;# 
  1269  0F25                     	;# 
  1270  0F26                     	;# 
  1271  0F27                     	;# 
  1272  0F28                     	;# 
  1273  0F29                     	;# 
  1274  0F2A                     	;# 
  1275  0F2B                     	;# 
  1276  0F2C                     	;# 
  1277  0F2D                     	;# 
  1278  0F2E                     	;# 
  1279  0F2F                     	;# 
  1280  0F8C                     	;# 
  1281  0F8D                     	;# 
  1282  0F91                     	;# 
  1283  0F95                     	;# 
  1284  0F96                     	;# 
  1285  0F97                     	;# 
  1286  0F9C                     	;# 
  1287  0F9D                     	;# 
  1288  0F9E                     	;# 
  1289  0FE3                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0011                     	;# 
  1317  0012                     	;# 
  1318  0013                     	;# 
  1319  0015                     	;# 
  1320  0016                     	;# 
  1321  0016                     	;# 
  1322  0017                     	;# 
  1323  0018                     	;# 
  1324  0019                     	;# 
  1325  001A                     	;# 
  1326  001B                     	;# 
  1327  001C                     	;# 
  1328  008C                     	;# 
  1329  008D                     	;# 
  1330  008E                     	;# 
  1331  0091                     	;# 
  1332  0092                     	;# 
  1333  0093                     	;# 
  1334  0095                     	;# 
  1335  0096                     	;# 
  1336  0097                     	;# 
  1337  0099                     	;# 
  1338  009A                     	;# 
  1339  009B                     	;# 
  1340  009B                     	;# 
  1341  009C                     	;# 
  1342  009D                     	;# 
  1343  009E                     	;# 
  1344  009F                     	;# 
  1345  010C                     	;# 
  1346  010D                     	;# 
  1347  010E                     	;# 
  1348  0111                     	;# 
  1349  0112                     	;# 
  1350  0113                     	;# 
  1351  0114                     	;# 
  1352  0115                     	;# 
  1353  0116                     	;# 
  1354  0117                     	;# 
  1355  0118                     	;# 
  1356  0119                     	;# 
  1357  011D                     	;# 
  1358  018C                     	;# 
  1359  018D                     	;# 
  1360  018E                     	;# 
  1361  0191                     	;# 
  1362  0191                     	;# 
  1363  0192                     	;# 
  1364  0193                     	;# 
  1365  0193                     	;# 
  1366  0194                     	;# 
  1367  0195                     	;# 
  1368  0196                     	;# 
  1369  0199                     	;# 
  1370  019A                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019D                     	;# 
  1375  019E                     	;# 
  1376  019F                     	;# 
  1377  020C                     	;# 
  1378  020D                     	;# 
  1379  0211                     	;# 
  1380  0211                     	;# 
  1381  0212                     	;# 
  1382  0212                     	;# 
  1383  0213                     	;# 
  1384  0213                     	;# 
  1385  0214                     	;# 
  1386  0214                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0216                     	;# 
  1391  0216                     	;# 
  1392  0217                     	;# 
  1393  0217                     	;# 
  1394  0391                     	;# 
  1395  0392                     	;# 
  1396  0393                     	;# 
  1397  0394                     	;# 
  1398  0395                     	;# 
  1399  0396                     	;# 
  1400  0498                     	;# 
  1401  0498                     	;# 
  1402  0499                     	;# 
  1403  049A                     	;# 
  1404  049B                     	;# 
  1405  049B                     	;# 
  1406  049C                     	;# 
  1407  049E                     	;# 
  1408  049F                     	;# 
  1409  0611                     	;# 
  1410  0612                     	;# 
  1411  0613                     	;# 
  1412  0613                     	;# 
  1413  0614                     	;# 
  1414  0615                     	;# 
  1415  0616                     	;# 
  1416  0616                     	;# 
  1417  0617                     	;# 
  1418  0618                     	;# 
  1419  0619                     	;# 
  1420  0619                     	;# 
  1421  061A                     	;# 
  1422  061B                     	;# 
  1423  061C                     	;# 
  1424  061C                     	;# 
  1425  0691                     	;# 
  1426  0692                     	;# 
  1427  0693                     	;# 
  1428  0694                     	;# 
  1429  0695                     	;# 
  1430  0F0F                     	;# 
  1431  0F10                     	;# 
  1432  0F11                     	;# 
  1433  0F12                     	;# 
  1434  0F13                     	;# 
  1435  0F14                     	;# 
  1436  0F15                     	;# 
  1437  0F16                     	;# 
  1438  0F17                     	;# 
  1439  0F18                     	;# 
  1440  0F19                     	;# 
  1441  0F1A                     	;# 
  1442  0F1B                     	;# 
  1443  0F1C                     	;# 
  1444  0F1D                     	;# 
  1445  0F1E                     	;# 
  1446  0F1F                     	;# 
  1447  0F20                     	;# 
  1448  0F21                     	;# 
  1449  0F22                     	;# 
  1450  0F23                     	;# 
  1451  0F24                     	;# 
  1452  0F25                     	;# 
  1453  0F26                     	;# 
  1454  0F27                     	;# 
  1455  0F28                     	;# 
  1456  0F29                     	;# 
  1457  0F2A                     	;# 
  1458  0F2B                     	;# 
  1459  0F2C                     	;# 
  1460  0F2D                     	;# 
  1461  0F2E                     	;# 
  1462  0F2F                     	;# 
  1463  0F8C                     	;# 
  1464  0F8D                     	;# 
  1465  0F91                     	;# 
  1466  0F95                     	;# 
  1467  0F96                     	;# 
  1468  0F97                     	;# 
  1469  0F9C                     	;# 
  1470  0F9D                     	;# 
  1471  0F9E                     	;# 
  1472  0FE3                     	;# 
  1473  0FE4                     	;# 
  1474  0FE5                     	;# 
  1475  0FE6                     	;# 
  1476  0FE7                     	;# 
  1477  0FE8                     	;# 
  1478  0FE9                     	;# 
  1479  0FEA                     	;# 
  1480  0FEB                     	;# 
  1481  0FED                     	;# 
  1482  0FEE                     	;# 
  1483  0FEF                     	;# 
  1484  0000                     	;# 
  1485  0001                     	;# 
  1486  0002                     	;# 
  1487  0003                     	;# 
  1488  0004                     	;# 
  1489  0005                     	;# 
  1490  0006                     	;# 
  1491  0007                     	;# 
  1492  0008                     	;# 
  1493  0009                     	;# 
  1494  000A                     	;# 
  1495  000B                     	;# 
  1496  000C                     	;# 
  1497  000D                     	;# 
  1498  000E                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0013                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0093                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  009F                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0111                     	;# 
  1532  0112                     	;# 
  1533  0113                     	;# 
  1534  0114                     	;# 
  1535  0115                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  0118                     	;# 
  1539  0119                     	;# 
  1540  011D                     	;# 
  1541  018C                     	;# 
  1542  018D                     	;# 
  1543  018E                     	;# 
  1544  0191                     	;# 
  1545  0191                     	;# 
  1546  0192                     	;# 
  1547  0193                     	;# 
  1548  0193                     	;# 
  1549  0194                     	;# 
  1550  0195                     	;# 
  1551  0196                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020C                     	;# 
  1561  020D                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0391                     	;# 
  1578  0392                     	;# 
  1579  0393                     	;# 
  1580  0394                     	;# 
  1581  0395                     	;# 
  1582  0396                     	;# 
  1583  0498                     	;# 
  1584  0498                     	;# 
  1585  0499                     	;# 
  1586  049A                     	;# 
  1587  049B                     	;# 
  1588  049B                     	;# 
  1589  049C                     	;# 
  1590  049E                     	;# 
  1591  049F                     	;# 
  1592  0611                     	;# 
  1593  0612                     	;# 
  1594  0613                     	;# 
  1595  0613                     	;# 
  1596  0614                     	;# 
  1597  0615                     	;# 
  1598  0616                     	;# 
  1599  0616                     	;# 
  1600  0617                     	;# 
  1601  0618                     	;# 
  1602  0619                     	;# 
  1603  0619                     	;# 
  1604  061A                     	;# 
  1605  061B                     	;# 
  1606  061C                     	;# 
  1607  061C                     	;# 
  1608  0691                     	;# 
  1609  0692                     	;# 
  1610  0693                     	;# 
  1611  0694                     	;# 
  1612  0695                     	;# 
  1613  0F0F                     	;# 
  1614  0F10                     	;# 
  1615  0F11                     	;# 
  1616  0F12                     	;# 
  1617  0F13                     	;# 
  1618  0F14                     	;# 
  1619  0F15                     	;# 
  1620  0F16                     	;# 
  1621  0F17                     	;# 
  1622  0F18                     	;# 
  1623  0F19                     	;# 
  1624  0F1A                     	;# 
  1625  0F1B                     	;# 
  1626  0F1C                     	;# 
  1627  0F1D                     	;# 
  1628  0F1E                     	;# 
  1629  0F1F                     	;# 
  1630  0F20                     	;# 
  1631  0F21                     	;# 
  1632  0F22                     	;# 
  1633  0F23                     	;# 
  1634  0F24                     	;# 
  1635  0F25                     	;# 
  1636  0F26                     	;# 
  1637  0F27                     	;# 
  1638  0F28                     	;# 
  1639  0F29                     	;# 
  1640  0F2A                     	;# 
  1641  0F2B                     	;# 
  1642  0F2C                     	;# 
  1643  0F2D                     	;# 
  1644  0F2E                     	;# 
  1645  0F2F                     	;# 
  1646  0F8C                     	;# 
  1647  0F8D                     	;# 
  1648  0F91                     	;# 
  1649  0F95                     	;# 
  1650  0F96                     	;# 
  1651  0F97                     	;# 
  1652  0F9C                     	;# 
  1653  0F9D                     	;# 
  1654  0F9E                     	;# 
  1655  0FE3                     	;# 
  1656  0FE4                     	;# 
  1657  0FE5                     	;# 
  1658  0FE6                     	;# 
  1659  0FE7                     	;# 
  1660  0FE8                     	;# 
  1661  0FE9                     	;# 
  1662  0FEA                     	;# 
  1663  0FEB                     	;# 
  1664  0FED                     	;# 
  1665  0FEE                     	;# 
  1666  0FEF                     	;# 
  1667  0000                     	;# 
  1668  0001                     	;# 
  1669  0002                     	;# 
  1670  0003                     	;# 
  1671  0004                     	;# 
  1672  0005                     	;# 
  1673  0006                     	;# 
  1674  0007                     	;# 
  1675  0008                     	;# 
  1676  0009                     	;# 
  1677  000A                     	;# 
  1678  000B                     	;# 
  1679  000C                     	;# 
  1680  000D                     	;# 
  1681  000E                     	;# 
  1682  0011                     	;# 
  1683  0012                     	;# 
  1684  0013                     	;# 
  1685  0015                     	;# 
  1686  0016                     	;# 
  1687  0016                     	;# 
  1688  0017                     	;# 
  1689  0018                     	;# 
  1690  0019                     	;# 
  1691  001A                     	;# 
  1692  001B                     	;# 
  1693  001C                     	;# 
  1694  008C                     	;# 
  1695  008D                     	;# 
  1696  008E                     	;# 
  1697  0091                     	;# 
  1698  0092                     	;# 
  1699  0093                     	;# 
  1700  0095                     	;# 
  1701  0096                     	;# 
  1702  0097                     	;# 
  1703  0099                     	;# 
  1704  009A                     	;# 
  1705  009B                     	;# 
  1706  009B                     	;# 
  1707  009C                     	;# 
  1708  009D                     	;# 
  1709  009E                     	;# 
  1710  009F                     	;# 
  1711  010C                     	;# 
  1712  010D                     	;# 
  1713  010E                     	;# 
  1714  0111                     	;# 
  1715  0112                     	;# 
  1716  0113                     	;# 
  1717  0114                     	;# 
  1718  0115                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  0118                     	;# 
  1722  0119                     	;# 
  1723  011D                     	;# 
  1724  018C                     	;# 
  1725  018D                     	;# 
  1726  018E                     	;# 
  1727  0191                     	;# 
  1728  0191                     	;# 
  1729  0192                     	;# 
  1730  0193                     	;# 
  1731  0193                     	;# 
  1732  0194                     	;# 
  1733  0195                     	;# 
  1734  0196                     	;# 
  1735  0199                     	;# 
  1736  019A                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019C                     	;# 
  1740  019D                     	;# 
  1741  019E                     	;# 
  1742  019F                     	;# 
  1743  020C                     	;# 
  1744  020D                     	;# 
  1745  0211                     	;# 
  1746  0211                     	;# 
  1747  0212                     	;# 
  1748  0212                     	;# 
  1749  0213                     	;# 
  1750  0213                     	;# 
  1751  0214                     	;# 
  1752  0214                     	;# 
  1753  0215                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0216                     	;# 
  1757  0216                     	;# 
  1758  0217                     	;# 
  1759  0217                     	;# 
  1760  0391                     	;# 
  1761  0392                     	;# 
  1762  0393                     	;# 
  1763  0394                     	;# 
  1764  0395                     	;# 
  1765  0396                     	;# 
  1766  0498                     	;# 
  1767  0498                     	;# 
  1768  0499                     	;# 
  1769  049A                     	;# 
  1770  049B                     	;# 
  1771  049B                     	;# 
  1772  049C                     	;# 
  1773  049E                     	;# 
  1774  049F                     	;# 
  1775  0611                     	;# 
  1776  0612                     	;# 
  1777  0613                     	;# 
  1778  0613                     	;# 
  1779  0614                     	;# 
  1780  0615                     	;# 
  1781  0616                     	;# 
  1782  0616                     	;# 
  1783  0617                     	;# 
  1784  0618                     	;# 
  1785  0619                     	;# 
  1786  0619                     	;# 
  1787  061A                     	;# 
  1788  061B                     	;# 
  1789  061C                     	;# 
  1790  061C                     	;# 
  1791  0691                     	;# 
  1792  0692                     	;# 
  1793  0693                     	;# 
  1794  0694                     	;# 
  1795  0695                     	;# 
  1796  0F0F                     	;# 
  1797  0F10                     	;# 
  1798  0F11                     	;# 
  1799  0F12                     	;# 
  1800  0F13                     	;# 
  1801  0F14                     	;# 
  1802  0F15                     	;# 
  1803  0F16                     	;# 
  1804  0F17                     	;# 
  1805  0F18                     	;# 
  1806  0F19                     	;# 
  1807  0F1A                     	;# 
  1808  0F1B                     	;# 
  1809  0F1C                     	;# 
  1810  0F1D                     	;# 
  1811  0F1E                     	;# 
  1812  0F1F                     	;# 
  1813  0F20                     	;# 
  1814  0F21                     	;# 
  1815  0F22                     	;# 
  1816  0F23                     	;# 
  1817  0F24                     	;# 
  1818  0F25                     	;# 
  1819  0F26                     	;# 
  1820  0F27                     	;# 
  1821  0F28                     	;# 
  1822  0F29                     	;# 
  1823  0F2A                     	;# 
  1824  0F2B                     	;# 
  1825  0F2C                     	;# 
  1826  0F2D                     	;# 
  1827  0F2E                     	;# 
  1828  0F2F                     	;# 
  1829  0F8C                     	;# 
  1830  0F8D                     	;# 
  1831  0F91                     	;# 
  1832  0F95                     	;# 
  1833  0F96                     	;# 
  1834  0F97                     	;# 
  1835  0F9C                     	;# 
  1836  0F9D                     	;# 
  1837  0F9E                     	;# 
  1838  0FE3                     	;# 
  1839  0FE4                     	;# 
  1840  0FE5                     	;# 
  1841  0FE6                     	;# 
  1842  0FE7                     	;# 
  1843  0FE8                     	;# 
  1844  0FE9                     	;# 
  1845  0FEA                     	;# 
  1846  0FEB                     	;# 
  1847  0FED                     	;# 
  1848  0FEE                     	;# 
  1849  0FEF                     	;# 
  1850  0000                     	;# 
  1851  0001                     	;# 
  1852  0002                     	;# 
  1853  0003                     	;# 
  1854  0004                     	;# 
  1855  0005                     	;# 
  1856  0006                     	;# 
  1857  0007                     	;# 
  1858  0008                     	;# 
  1859  0009                     	;# 
  1860  000A                     	;# 
  1861  000B                     	;# 
  1862  000C                     	;# 
  1863  000D                     	;# 
  1864  000E                     	;# 
  1865  0011                     	;# 
  1866  0012                     	;# 
  1867  0013                     	;# 
  1868  0015                     	;# 
  1869  0016                     	;# 
  1870  0016                     	;# 
  1871  0017                     	;# 
  1872  0018                     	;# 
  1873  0019                     	;# 
  1874  001A                     	;# 
  1875  001B                     	;# 
  1876  001C                     	;# 
  1877  008C                     	;# 
  1878  008D                     	;# 
  1879  008E                     	;# 
  1880  0091                     	;# 
  1881  0092                     	;# 
  1882  0093                     	;# 
  1883  0095                     	;# 
  1884  0096                     	;# 
  1885  0097                     	;# 
  1886  0099                     	;# 
  1887  009A                     	;# 
  1888  009B                     	;# 
  1889  009B                     	;# 
  1890  009C                     	;# 
  1891  009D                     	;# 
  1892  009E                     	;# 
  1893  009F                     	;# 
  1894  010C                     	;# 
  1895  010D                     	;# 
  1896  010E                     	;# 
  1897  0111                     	;# 
  1898  0112                     	;# 
  1899  0113                     	;# 
  1900  0114                     	;# 
  1901  0115                     	;# 
  1902  0116                     	;# 
  1903  0117                     	;# 
  1904  0118                     	;# 
  1905  0119                     	;# 
  1906  011D                     	;# 
  1907  018C                     	;# 
  1908  018D                     	;# 
  1909  018E                     	;# 
  1910  0191                     	;# 
  1911  0191                     	;# 
  1912  0192                     	;# 
  1913  0193                     	;# 
  1914  0193                     	;# 
  1915  0194                     	;# 
  1916  0195                     	;# 
  1917  0196                     	;# 
  1918  0199                     	;# 
  1919  019A                     	;# 
  1920  019B                     	;# 
  1921  019B                     	;# 
  1922  019C                     	;# 
  1923  019D                     	;# 
  1924  019E                     	;# 
  1925  019F                     	;# 
  1926  020C                     	;# 
  1927  020D                     	;# 
  1928  0211                     	;# 
  1929  0211                     	;# 
  1930  0212                     	;# 
  1931  0212                     	;# 
  1932  0213                     	;# 
  1933  0213                     	;# 
  1934  0214                     	;# 
  1935  0214                     	;# 
  1936  0215                     	;# 
  1937  0215                     	;# 
  1938  0215                     	;# 
  1939  0216                     	;# 
  1940  0216                     	;# 
  1941  0217                     	;# 
  1942  0217                     	;# 
  1943  0391                     	;# 
  1944  0392                     	;# 
  1945  0393                     	;# 
  1946  0394                     	;# 
  1947  0395                     	;# 
  1948  0396                     	;# 
  1949  0498                     	;# 
  1950  0498                     	;# 
  1951  0499                     	;# 
  1952  049A                     	;# 
  1953  049B                     	;# 
  1954  049B                     	;# 
  1955  049C                     	;# 
  1956  049E                     	;# 
  1957  049F                     	;# 
  1958  0611                     	;# 
  1959  0612                     	;# 
  1960  0613                     	;# 
  1961  0613                     	;# 
  1962  0614                     	;# 
  1963  0615                     	;# 
  1964  0616                     	;# 
  1965  0616                     	;# 
  1966  0617                     	;# 
  1967  0618                     	;# 
  1968  0619                     	;# 
  1969  0619                     	;# 
  1970  061A                     	;# 
  1971  061B                     	;# 
  1972  061C                     	;# 
  1973  061C                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0F0F                     	;# 
  1980  0F10                     	;# 
  1981  0F11                     	;# 
  1982  0F12                     	;# 
  1983  0F13                     	;# 
  1984  0F14                     	;# 
  1985  0F15                     	;# 
  1986  0F16                     	;# 
  1987  0F17                     	;# 
  1988  0F18                     	;# 
  1989  0F19                     	;# 
  1990  0F1A                     	;# 
  1991  0F1B                     	;# 
  1992  0F1C                     	;# 
  1993  0F1D                     	;# 
  1994  0F1E                     	;# 
  1995  0F1F                     	;# 
  1996  0F20                     	;# 
  1997  0F21                     	;# 
  1998  0F22                     	;# 
  1999  0F23                     	;# 
  2000  0F24                     	;# 
  2001  0F25                     	;# 
  2002  0F26                     	;# 
  2003  0F27                     	;# 
  2004  0F28                     	;# 
  2005  0F29                     	;# 
  2006  0F2A                     	;# 
  2007  0F2B                     	;# 
  2008  0F2C                     	;# 
  2009  0F2D                     	;# 
  2010  0F2E                     	;# 
  2011  0F2F                     	;# 
  2012  0F8C                     	;# 
  2013  0F8D                     	;# 
  2014  0F91                     	;# 
  2015  0F95                     	;# 
  2016  0F96                     	;# 
  2017  0F97                     	;# 
  2018  0F9C                     	;# 
  2019  0F9D                     	;# 
  2020  0F9E                     	;# 
  2021  0FE3                     	;# 
  2022  0FE4                     	;# 
  2023  0FE5                     	;# 
  2024  0FE6                     	;# 
  2025  0FE7                     	;# 
  2026  0FE8                     	;# 
  2027  0FE9                     	;# 
  2028  0FEA                     	;# 
  2029  0FEB                     	;# 
  2030  0FED                     	;# 
  2031  0FEE                     	;# 
  2032  0FEF                     	;# 
  2033  0000                     	;# 
  2034  0001                     	;# 
  2035  0002                     	;# 
  2036  0003                     	;# 
  2037  0004                     	;# 
  2038  0005                     	;# 
  2039  0006                     	;# 
  2040  0007                     	;# 
  2041  0008                     	;# 
  2042  0009                     	;# 
  2043  000A                     	;# 
  2044  000B                     	;# 
  2045  000C                     	;# 
  2046  000D                     	;# 
  2047  000E                     	;# 
  2048  0011                     	;# 
  2049  0012                     	;# 
  2050  0013                     	;# 
  2051  0015                     	;# 
  2052  0016                     	;# 
  2053  0016                     	;# 
  2054  0017                     	;# 
  2055  0018                     	;# 
  2056  0019                     	;# 
  2057  001A                     	;# 
  2058  001B                     	;# 
  2059  001C                     	;# 
  2060  008C                     	;# 
  2061  008D                     	;# 
  2062  008E                     	;# 
  2063  0091                     	;# 
  2064  0092                     	;# 
  2065  0093                     	;# 
  2066  0095                     	;# 
  2067  0096                     	;# 
  2068  0097                     	;# 
  2069  0099                     	;# 
  2070  009A                     	;# 
  2071  009B                     	;# 
  2072  009B                     	;# 
  2073  009C                     	;# 
  2074  009D                     	;# 
  2075  009E                     	;# 
  2076  009F                     	;# 
  2077  010C                     	;# 
  2078  010D                     	;# 
  2079  010E                     	;# 
  2080  0111                     	;# 
  2081  0112                     	;# 
  2082  0113                     	;# 
  2083  0114                     	;# 
  2084  0115                     	;# 
  2085  0116                     	;# 
  2086  0117                     	;# 
  2087  0118                     	;# 
  2088  0119                     	;# 
  2089  011D                     	;# 
  2090  018C                     	;# 
  2091  018D                     	;# 
  2092  018E                     	;# 
  2093  0191                     	;# 
  2094  0191                     	;# 
  2095  0192                     	;# 
  2096  0193                     	;# 
  2097  0193                     	;# 
  2098  0194                     	;# 
  2099  0195                     	;# 
  2100  0196                     	;# 
  2101  0199                     	;# 
  2102  019A                     	;# 
  2103  019B                     	;# 
  2104  019B                     	;# 
  2105  019C                     	;# 
  2106  019D                     	;# 
  2107  019E                     	;# 
  2108  019F                     	;# 
  2109  020C                     	;# 
  2110  020D                     	;# 
  2111  0211                     	;# 
  2112  0211                     	;# 
  2113  0212                     	;# 
  2114  0212                     	;# 
  2115  0213                     	;# 
  2116  0213                     	;# 
  2117  0214                     	;# 
  2118  0214                     	;# 
  2119  0215                     	;# 
  2120  0215                     	;# 
  2121  0215                     	;# 
  2122  0216                     	;# 
  2123  0216                     	;# 
  2124  0217                     	;# 
  2125  0217                     	;# 
  2126  0391                     	;# 
  2127  0392                     	;# 
  2128  0393                     	;# 
  2129  0394                     	;# 
  2130  0395                     	;# 
  2131  0396                     	;# 
  2132  0498                     	;# 
  2133  0498                     	;# 
  2134  0499                     	;# 
  2135  049A                     	;# 
  2136  049B                     	;# 
  2137  049B                     	;# 
  2138  049C                     	;# 
  2139  049E                     	;# 
  2140  049F                     	;# 
  2141  0611                     	;# 
  2142  0612                     	;# 
  2143  0613                     	;# 
  2144  0613                     	;# 
  2145  0614                     	;# 
  2146  0615                     	;# 
  2147  0616                     	;# 
  2148  0616                     	;# 
  2149  0617                     	;# 
  2150  0618                     	;# 
  2151  0619                     	;# 
  2152  0619                     	;# 
  2153  061A                     	;# 
  2154  061B                     	;# 
  2155  061C                     	;# 
  2156  061C                     	;# 
  2157  0691                     	;# 
  2158  0692                     	;# 
  2159  0693                     	;# 
  2160  0694                     	;# 
  2161  0695                     	;# 
  2162  0F0F                     	;# 
  2163  0F10                     	;# 
  2164  0F11                     	;# 
  2165  0F12                     	;# 
  2166  0F13                     	;# 
  2167  0F14                     	;# 
  2168  0F15                     	;# 
  2169  0F16                     	;# 
  2170  0F17                     	;# 
  2171  0F18                     	;# 
  2172  0F19                     	;# 
  2173  0F1A                     	;# 
  2174  0F1B                     	;# 
  2175  0F1C                     	;# 
  2176  0F1D                     	;# 
  2177  0F1E                     	;# 
  2178  0F1F                     	;# 
  2179  0F20                     	;# 
  2180  0F21                     	;# 
  2181  0F22                     	;# 
  2182  0F23                     	;# 
  2183  0F24                     	;# 
  2184  0F25                     	;# 
  2185  0F26                     	;# 
  2186  0F27                     	;# 
  2187  0F28                     	;# 
  2188  0F29                     	;# 
  2189  0F2A                     	;# 
  2190  0F2B                     	;# 
  2191  0F2C                     	;# 
  2192  0F2D                     	;# 
  2193  0F2E                     	;# 
  2194  0F2F                     	;# 
  2195  0F8C                     	;# 
  2196  0F8D                     	;# 
  2197  0F91                     	;# 
  2198  0F95                     	;# 
  2199  0F96                     	;# 
  2200  0F97                     	;# 
  2201  0F9C                     	;# 
  2202  0F9D                     	;# 
  2203  0F9E                     	;# 
  2204  0FE3                     	;# 
  2205  0FE4                     	;# 
  2206  0FE5                     	;# 
  2207  0FE6                     	;# 
  2208  0FE7                     	;# 
  2209  0FE8                     	;# 
  2210  0FE9                     	;# 
  2211  0FEA                     	;# 
  2212  0FEB                     	;# 
  2213  0FED                     	;# 
  2214  0FEE                     	;# 
  2215  0FEF                     	;# 
  2216  0000                     	;# 
  2217  0001                     	;# 
  2218  0002                     	;# 
  2219  0003                     	;# 
  2220  0004                     	;# 
  2221  0005                     	;# 
  2222  0006                     	;# 
  2223  0007                     	;# 
  2224  0008                     	;# 
  2225  0009                     	;# 
  2226  000A                     	;# 
  2227  000B                     	;# 
  2228  000C                     	;# 
  2229  000D                     	;# 
  2230  000E                     	;# 
  2231  0011                     	;# 
  2232  0012                     	;# 
  2233  0013                     	;# 
  2234  0015                     	;# 
  2235  0016                     	;# 
  2236  0016                     	;# 
  2237  0017                     	;# 
  2238  0018                     	;# 
  2239  0019                     	;# 
  2240  001A                     	;# 
  2241  001B                     	;# 
  2242  001C                     	;# 
  2243  008C                     	;# 
  2244  008D                     	;# 
  2245  008E                     	;# 
  2246  0091                     	;# 
  2247  0092                     	;# 
  2248  0093                     	;# 
  2249  0095                     	;# 
  2250  0096                     	;# 
  2251  0097                     	;# 
  2252  0099                     	;# 
  2253  009A                     	;# 
  2254  009B                     	;# 
  2255  009B                     	;# 
  2256  009C                     	;# 
  2257  009D                     	;# 
  2258  009E                     	;# 
  2259  009F                     	;# 
  2260  010C                     	;# 
  2261  010D                     	;# 
  2262  010E                     	;# 
  2263  0111                     	;# 
  2264  0112                     	;# 
  2265  0113                     	;# 
  2266  0114                     	;# 
  2267  0115                     	;# 
  2268  0116                     	;# 
  2269  0117                     	;# 
  2270  0118                     	;# 
  2271  0119                     	;# 
  2272  011D                     	;# 
  2273  018C                     	;# 
  2274  018D                     	;# 
  2275  018E                     	;# 
  2276  0191                     	;# 
  2277  0191                     	;# 
  2278  0192                     	;# 
  2279  0193                     	;# 
  2280  0193                     	;# 
  2281  0194                     	;# 
  2282  0195                     	;# 
  2283  0196                     	;# 
  2284  0199                     	;# 
  2285  019A                     	;# 
  2286  019B                     	;# 
  2287  019B                     	;# 
  2288  019C                     	;# 
  2289  019D                     	;# 
  2290  019E                     	;# 
  2291  019F                     	;# 
  2292  020C                     	;# 
  2293  020D                     	;# 
  2294  0211                     	;# 
  2295  0211                     	;# 
  2296  0212                     	;# 
  2297  0212                     	;# 
  2298  0213                     	;# 
  2299  0213                     	;# 
  2300  0214                     	;# 
  2301  0214                     	;# 
  2302  0215                     	;# 
  2303  0215                     	;# 
  2304  0215                     	;# 
  2305  0216                     	;# 
  2306  0216                     	;# 
  2307  0217                     	;# 
  2308  0217                     	;# 
  2309  0391                     	;# 
  2310  0392                     	;# 
  2311  0393                     	;# 
  2312  0394                     	;# 
  2313  0395                     	;# 
  2314  0396                     	;# 
  2315  0498                     	;# 
  2316  0498                     	;# 
  2317  0499                     	;# 
  2318  049A                     	;# 
  2319  049B                     	;# 
  2320  049B                     	;# 
  2321  049C                     	;# 
  2322  049E                     	;# 
  2323  049F                     	;# 
  2324  0611                     	;# 
  2325  0612                     	;# 
  2326  0613                     	;# 
  2327  0613                     	;# 
  2328  0614                     	;# 
  2329  0615                     	;# 
  2330  0616                     	;# 
  2331  0616                     	;# 
  2332  0617                     	;# 
  2333  0618                     	;# 
  2334  0619                     	;# 
  2335  0619                     	;# 
  2336  061A                     	;# 
  2337  061B                     	;# 
  2338  061C                     	;# 
  2339  061C                     	;# 
  2340  0691                     	;# 
  2341  0692                     	;# 
  2342  0693                     	;# 
  2343  0694                     	;# 
  2344  0695                     	;# 
  2345  0F0F                     	;# 
  2346  0F10                     	;# 
  2347  0F11                     	;# 
  2348  0F12                     	;# 
  2349  0F13                     	;# 
  2350  0F14                     	;# 
  2351  0F15                     	;# 
  2352  0F16                     	;# 
  2353  0F17                     	;# 
  2354  0F18                     	;# 
  2355  0F19                     	;# 
  2356  0F1A                     	;# 
  2357  0F1B                     	;# 
  2358  0F1C                     	;# 
  2359  0F1D                     	;# 
  2360  0F1E                     	;# 
  2361  0F1F                     	;# 
  2362  0F20                     	;# 
  2363  0F21                     	;# 
  2364  0F22                     	;# 
  2365  0F23                     	;# 
  2366  0F24                     	;# 
  2367  0F25                     	;# 
  2368  0F26                     	;# 
  2369  0F27                     	;# 
  2370  0F28                     	;# 
  2371  0F29                     	;# 
  2372  0F2A                     	;# 
  2373  0F2B                     	;# 
  2374  0F2C                     	;# 
  2375  0F2D                     	;# 
  2376  0F2E                     	;# 
  2377  0F2F                     	;# 
  2378  0F8C                     	;# 
  2379  0F8D                     	;# 
  2380  0F91                     	;# 
  2381  0F95                     	;# 
  2382  0F96                     	;# 
  2383  0F97                     	;# 
  2384  0F9C                     	;# 
  2385  0F9D                     	;# 
  2386  0F9E                     	;# 
  2387  0FE3                     	;# 
  2388  0FE4                     	;# 
  2389  0FE5                     	;# 
  2390  0FE6                     	;# 
  2391  0FE7                     	;# 
  2392  0FE8                     	;# 
  2393  0FE9                     	;# 
  2394  0FEA                     	;# 
  2395  0FEB                     	;# 
  2396  0FED                     	;# 
  2397  0FEE                     	;# 
  2398  0FEF                     	;# 
  2399                           
  2400                           	psect	strings
  2401  079B                     __pstrings:	
  2402  079B                     __stringtab:	
  2403  079B  3400               	retlw	0
  2404  079C                     __end_of__stringtab:	
  2405  079C                     _mrfRegset_InitCnt:	
  2406  079C  3410               	retlw	16
  2407  079D                     __end_of_mrfRegset_InitCnt:	
  2408  079D                     _mrfRegset_RxCnt:	
  2409  079D  3406               	retlw	6
  2410  079E                     __end_of_mrfRegset_RxCnt:	
  2411  079E                     _mrfRegset_TxCnt:	
  2412  079E  3404               	retlw	4
  2413  079F                     __end_of_mrfRegset_TxCnt:	
  2414  079F                     _mrfRegset_Init:	
  2415  079F  34CA               	retlw	202
  2416  07A0  3471               	retlw	113
  2417  07A1  34CA               	retlw	202
  2418  07A2  3473               	retlw	115
  2419  07A3  3480               	retlw	128
  2420  07A4  3428               	retlw	40
  2421  07A5  34C4               	retlw	196
  2422  07A6  34E7               	retlw	231
  2423  07A7  34A8               	retlw	168
  2424  07A8  3460               	retlw	96
  2425  07A9  34C6               	retlw	198
  2426  07AA  3405               	retlw	5
  2427  07AB  3482               	retlw	130
  2428  07AC  3400               	retlw	0
  2429  07AD  3490               	retlw	144
  2430  07AE  3462               	retlw	98
  2431  07AF  3498               	retlw	152
  2432  07B0  3490               	retlw	144
  2433  07B1  34C2               	retlw	194
  2434  07B2  34AC               	retlw	172
  2435  07B3  3482               	retlw	130
  2436  07B4  3420               	retlw	32
  2437  07B5  3455               	retlw	85
  2438  07B6  3400               	retlw	0
  2439  07B7  3482               	retlw	130
  2440  07B8  3480               	retlw	128
  2441  07B9  3480               	retlw	128
  2442  07BA  3468               	retlw	104
  2443  07BB  34CA               	retlw	202
  2444  07BC  3471               	retlw	113
  2445  07BD  34CA               	retlw	202
  2446  07BE  3473               	retlw	115
  2447  07BF                     __end_of_mrfRegset_Init:	
  2448  07BF                     _mrfRegset_Rx:	
  2449  07BF  3482               	retlw	130
  2450  07C0  3400               	retlw	0
  2451  07C1  34CA               	retlw	202
  2452  07C2  3471               	retlw	113
  2453  07C3  3480               	retlw	128
  2454  07C4  3428               	retlw	40
  2455  07C5  3482               	retlw	130
  2456  07C6  3480               	retlw	128
  2457  07C7  3480               	retlw	128
  2458  07C8  3468               	retlw	104
  2459  07C9  34CA               	retlw	202
  2460  07CA  3473               	retlw	115
  2461  07CB                     __end_of_mrfRegset_Rx:	
  2462  07CB                     _mrfRegset_Tx:	
  2463  07CB  3482               	retlw	130
  2464  07CC  3400               	retlw	0
  2465  07CD  34CA               	retlw	202
  2466  07CE  3471               	retlw	113
  2467  07CF  3480               	retlw	128
  2468  07D0  34A8               	retlw	168
  2469  07D1  3482               	retlw	130
  2470  07D2  3420               	retlw	32
  2471  07D3                     __end_of_mrfRegset_Tx:	
  2472  000B                     _INTCONbits	set	11
  2473  000C                     _PORTAbits	set	12
  2474  000D                     _PORTBbits	set	13
  2475  000E                     _PORTCbits	set	14
  2476  009D                     _ADCON0	set	157
  2477  009E                     _ADCON1	set	158
  2478  009F                     _ADCON2	set	159
  2479  0095                     _OPTION_REGbits	set	149
  2480  0099                     _OSCCON	set	153
  2481  008C                     _TRISAbits	set	140
  2482  008D                     _TRISBbits	set	141
  2483  008E                     _TRISCbits	set	142
  2484  0117                     _FVRCON	set	279
  2485  010C                     _LATAbits	set	268
  2486  010D                     _LATBbits	set	269
  2487  010E                     _LATCbits	set	270
  2488  018C                     _ANSELA	set	396
  2489  018D                     _ANSELB	set	397
  2490  018E                     _ANSELC	set	398
  2491  020C                     _WPUAbits	set	524
  2492                           
  2493                           ; #config settings
  2494  0000                     
  2495                           	psect	cinit
  2496  0016                     start_initialization:	
  2497  0016                     __initialization:	
  2498  0016  30A0               	movlw	low __pbssBANK1
  2499                           
  2500                           ; Clear objects allocated to BANK0
  2501  0017  01BB               	clrf	__pbssBANK0& (0+127)
  2502  0018  01BC               	clrf	(__pbssBANK0+1)& (0+127)
  2503                           
  2504                           ; Clear objects allocated to BANK1
  2505  0019  0084               	movwf	4
  2506  001A  3000               	movlw	high __pbssBANK1
  2507  001B  0085               	movwf	5
  2508  001C  304F               	movlw	79
  2509  001D  3187  27F5         	fcall	clear_ram0
  2510  001F                     end_of_initialization:	
  2511                           ;End of C runtime variable initialization code
  2512                           
  2513  001F                     __end_of__initialization:	
  2514  001F  0020               	movlb	0
  2515  0020  3180  2822         	ljmp	_main	;jump to C main() function
  2516                           
  2517                           	psect	bssBANK0
  2518  003B                     __pbssBANK0:	
  2519  003B                     _mrf49Status:	
  2520  003B                     	ds	2
  2521                           
  2522                           	psect	bssBANK1
  2523  00A0                     __pbssBANK1:	
  2524  00A0                     _rfTrcvStatus:	
  2525  00A0                     	ds	79
  2526                           
  2527                           	psect	clrtext
  2528  07F5                     clear_ram0:	
  2529                           ;	Called with FSR0 containing the base address, and
  2530                           ;	WREG with the size to clear
  2531                           
  2532  07F5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2533  07F6                     clrloop0:	
  2534  07F6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2535  07F7  3101               	addfsr 0,1
  2536  07F8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2537  07F9  2FF6               	goto	clrloop0	;have we reached the end yet?
  2538  07FA  3400               	retlw	0	;all done for this memory range, return
  2539                           
  2540                           	psect	cstackCOMMON
  2541  0070                     __pcstackCOMMON:	
  2542  0070                     ?_SoftI2cStart:	
  2543  0070                     ?_SoftI2cStop:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_Mrf49RxSts:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_HandlePacket:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_SoftI2cNop:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_SoftI2cInit:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_SoftI2cRepeatedStart:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_AdcInit:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_ExtIntInit:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_extInt:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_Mrf49xaModeRx:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_Mrf49xaModeTx:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Mrf49xaInit:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_Mrf49SpiTx:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_Mrf49TxByte:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_Mrf49xaTxAck:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_Mrf49xaFreePacket:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_Mrf49xaTick:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_RfSendPowerState:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_handleFwCmd:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_handleFwWrite:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_handleFwRead:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_SysInitGpio:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_main:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?i1_Mrf49xaModeRx:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?i1_Mrf49SpiTx:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ??i1_Mrf49SpiTx:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ??i1_Mrf49SpiRx:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?i1_Mrf49RxSts:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?i1_Mrf49TxByte:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_SoftI2cTxByte:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_Mrf49xaServe:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_SoftI2cRxByte:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_Mrf49SpiRx:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_Mrf49RxCmd:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_Mrf49RxByte:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_Mrf49xaPacketPending:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_Mrf49xaRxPacket:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_Mrf49xaAllocPacket:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?i1_Mrf49SpiRx:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?i1_Mrf49RxCmd:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?i1_Mrf49RxByte:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?i1_Mrf49xaServe:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     i1Mrf49SpiTx@byte:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     i1Mrf49SpiRx@data:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675                           
  2676                           ; 1 bytes @ 0x0
  2677  0070                     	ds	1
  2678  0071                     ?i1_Mrf49TxCmd:	
  2679  0071                     ??i1_Mrf49RxCmd:	
  2680                           ; 0 bytes @ 0x1
  2681                           
  2682  0071                     ??i1_Mrf49RxSts:	
  2683                           ; 0 bytes @ 0x1
  2684                           
  2685  0071                     i1Mrf49TxCmd@val:	
  2686                           ; 0 bytes @ 0x1
  2687                           
  2688  0071                     i1Mrf49RxCmd@cmd:	
  2689                           ; 1 bytes @ 0x1
  2690                           
  2691                           
  2692                           ; 1 bytes @ 0x1
  2693  0071                     	ds	1
  2694  0072                     ??i1_Mrf49TxCmd:	
  2695  0072                     i1Mrf49TxCmd@cmd:	
  2696                           ; 0 bytes @ 0x2
  2697                           
  2698  0072                     i1Mrf49RxCmd@val:	
  2699                           ; 1 bytes @ 0x2
  2700                           
  2701                           
  2702                           ; 1 bytes @ 0x2
  2703  0072                     	ds	1
  2704  0073                     ??i1_Mrf49xaModeRx:	
  2705  0073                     ??i1_Mrf49RxByte:	
  2706                           ; 0 bytes @ 0x3
  2707                           
  2708  0073                     ??i1_Mrf49TxByte:	
  2709                           ; 0 bytes @ 0x3
  2710                           
  2711  0073                     i1Mrf49xaModeRx@k:	
  2712                           ; 0 bytes @ 0x3
  2713                           
  2714  0073                     i1Mrf49TxByte@byte:	
  2715                           ; 1 bytes @ 0x3
  2716                           
  2717                           
  2718                           ; 1 bytes @ 0x3
  2719  0073                     	ds	1
  2720  0074                     ??i1_Mrf49xaServe:	
  2721                           
  2722                           ; 0 bytes @ 0x4
  2723  0074                     	ds	1
  2724  0075                     i1Mrf49xaServe@data:	
  2725                           
  2726                           ; 1 bytes @ 0x5
  2727  0075                     	ds	1
  2728  0076                     ??_extInt:	
  2729                           
  2730                           ; 0 bytes @ 0x6
  2731  0076                     	ds	1
  2732  0077                     ??_SoftI2cStart:	
  2733  0077                     ??_SoftI2cTxByte:	
  2734                           ; 0 bytes @ 0x7
  2735                           
  2736  0077                     ??_SoftI2cStop:	
  2737                           ; 0 bytes @ 0x7
  2738                           
  2739  0077                     ??_Mrf49TxCmd:	
  2740                           ; 0 bytes @ 0x7
  2741                           
  2742  0077                     ??_Mrf49RxSts:	
  2743                           ; 0 bytes @ 0x7
  2744                           
  2745  0077                     ??_HandlePacket:	
  2746                           ; 0 bytes @ 0x7
  2747                           
  2748  0077                     ??_SoftI2cInit:	
  2749                           ; 0 bytes @ 0x7
  2750                           
  2751  0077                     ??_SoftI2cRepeatedStart:	
  2752                           ; 0 bytes @ 0x7
  2753                           
  2754  0077                     ??_SoftI2cRxByte:	
  2755                           ; 0 bytes @ 0x7
  2756                           
  2757  0077                     ??_AdcInit:	
  2758                           ; 0 bytes @ 0x7
  2759                           
  2760  0077                     ??_ExtIntInit:	
  2761                           ; 0 bytes @ 0x7
  2762                           
  2763  0077                     ??_Mrf49xaModeRx:	
  2764                           ; 0 bytes @ 0x7
  2765                           
  2766  0077                     ??_Mrf49xaModeTx:	
  2767                           ; 0 bytes @ 0x7
  2768                           
  2769  0077                     ??_Mrf49SpiTx:	
  2770                           ; 0 bytes @ 0x7
  2771                           
  2772  0077                     ??_Mrf49SpiRx:	
  2773                           ; 0 bytes @ 0x7
  2774                           
  2775  0077                     ??_Mrf49RxCmd:	
  2776                           ; 0 bytes @ 0x7
  2777                           
  2778  0077                     ??_Mrf49RxByte:	
  2779                           ; 0 bytes @ 0x7
  2780                           
  2781  0077                     ??_Mrf49TxByte:	
  2782                           ; 0 bytes @ 0x7
  2783                           
  2784  0077                     ??_Mrf49xaPacketPending:	
  2785                           ; 0 bytes @ 0x7
  2786                           
  2787  0077                     ??_Mrf49xaTxAck:	
  2788                           ; 0 bytes @ 0x7
  2789                           
  2790  0077                     ??_Mrf49xaFreePacket:	
  2791                           ; 0 bytes @ 0x7
  2792                           
  2793  0077                     ??_Mrf49xaRxPacket:	
  2794                           ; 0 bytes @ 0x7
  2795                           
  2796  0077                     ??_Mrf49xaAllocPacket:	
  2797                           ; 0 bytes @ 0x7
  2798                           
  2799  0077                     ??_eepromRxBytes:	
  2800                           ; 0 bytes @ 0x7
  2801                           
  2802  0077                     ??_eepromTxBytes:	
  2803                           ; 0 bytes @ 0x7
  2804                           
  2805  0077                     ??_RfSendPowerState:	
  2806                           ; 0 bytes @ 0x7
  2807                           
  2808  0077                     ??_handleFwCmd:	
  2809                           ; 0 bytes @ 0x7
  2810                           
  2811  0077                     ??_handleFwRead:	
  2812                           ; 0 bytes @ 0x7
  2813                           
  2814  0077                     ??_SysInitGpio:	
  2815                           ; 0 bytes @ 0x7
  2816                           
  2817  0077                     ??_main:	
  2818                           ; 0 bytes @ 0x7
  2819                           
  2820                           
  2821                           	psect	cstackBANK0
  2822  0020                     __pcstackBANK0:	
  2823                           ; 0 bytes @ 0x7
  2824                           
  2825  0020                     ??_SoftI2cNop:	
  2826  0020                     ?_Mrf49xaTxPacket:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     Mrf49SpiTx@byte:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0020                     Mrf49SpiRx@data:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0020                     Mrf49xaTxPacket@response:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0020                     Mrf49xaFreePacket@packet:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841                           
  2842                           ; 1 bytes @ 0x0
  2843  0020                     	ds	1
  2844  0021                     ?_Mrf49TxCmd:	
  2845  0021                     SoftI2cRxByte@ack:	
  2846                           ; 0 bytes @ 0x1
  2847                           
  2848  0021                     Mrf49TxCmd@val:	
  2849                           ; 1 bytes @ 0x1
  2850                           
  2851  0021                     Mrf49RxCmd@cmd:	
  2852                           ; 1 bytes @ 0x1
  2853                           
  2854  0021                     Mrf49xaTxPacket@needAck:	
  2855                           ; 1 bytes @ 0x1
  2856                           
  2857                           
  2858                           ; 1 bytes @ 0x1
  2859  0021                     	ds	1
  2860  0022                     ??_Mrf49xaTxPacket:	
  2861  0022                     SoftI2cTxByte@data:	
  2862                           ; 0 bytes @ 0x2
  2863                           
  2864  0022                     SoftI2cRxByte@data:	
  2865                           ; 1 bytes @ 0x2
  2866                           
  2867  0022                     Mrf49TxCmd@cmd:	
  2868                           ; 1 bytes @ 0x2
  2869                           
  2870  0022                     Mrf49RxCmd@val:	
  2871                           ; 1 bytes @ 0x2
  2872                           
  2873                           
  2874                           ; 1 bytes @ 0x2
  2875  0022                     	ds	1
  2876  0023                     SoftI2cTxByte@i:	
  2877  0023                     SoftI2cRxByte@i:	
  2878                           ; 1 bytes @ 0x3
  2879                           
  2880  0023                     Mrf49xaModeRx@k:	
  2881                           ; 1 bytes @ 0x3
  2882                           
  2883  0023                     Mrf49xaModeTx@k:	
  2884                           ; 1 bytes @ 0x3
  2885                           
  2886  0023                     Mrf49TxByte@byte:	
  2887                           ; 1 bytes @ 0x3
  2888                           
  2889  0023                     Mrf49xaTxPacket@crc:	
  2890                           ; 1 bytes @ 0x3
  2891                           
  2892                           
  2893                           ; 1 bytes @ 0x3
  2894  0023                     	ds	1
  2895  0024                     ??_Mrf49xaServe:	
  2896  0024                     ?_eepromRxBytes:	
  2897                           ; 0 bytes @ 0x4
  2898                           
  2899  0024                     ?_eepromTxBytes:	
  2900                           ; 0 bytes @ 0x4
  2901                           
  2902  0024                     Mrf49xaTxPacket@i:	
  2903                           ; 0 bytes @ 0x4
  2904                           
  2905  0024                     eepromRxBytes@address:	
  2906                           ; 1 bytes @ 0x4
  2907                           
  2908  0024                     eepromTxBytes@address:	
  2909                           ; 2 bytes @ 0x4
  2910                           
  2911                           
  2912                           ; 2 bytes @ 0x4
  2913  0024                     	ds	1
  2914  0025                     Mrf49xaTxPacket@packet:	
  2915  0025                     Mrf49xaServe@data:	
  2916                           ; 1 bytes @ 0x5
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x5
  2920  0025                     	ds	1
  2921  0026                     ??_Mrf49xaInit:	
  2922  0026                     Mrf49xaTxAck@packet:	
  2923                           ; 0 bytes @ 0x6
  2924                           
  2925  0026                     eepromRxBytes@data:	
  2926                           ; 1 bytes @ 0x6
  2927                           
  2928  0026                     eepromTxBytes@data:	
  2929                           ; 1 bytes @ 0x6
  2930                           
  2931  0026                     RfSendPowerState@packet:	
  2932                           ; 1 bytes @ 0x6
  2933                           
  2934                           
  2935                           ; 1 bytes @ 0x6
  2936  0026                     	ds	1
  2937  0027                     eepromRxBytes@size:	
  2938  0027                     eepromTxBytes@size:	
  2939                           ; 1 bytes @ 0x7
  2940                           
  2941                           
  2942                           ; 1 bytes @ 0x7
  2943  0027                     	ds	1
  2944  0028                     ??_handleFwWrite:	
  2945  0028                     handleFwCmd@packet:	
  2946                           ; 0 bytes @ 0x8
  2947                           
  2948                           
  2949                           ; 1 bytes @ 0x8
  2950  0028                     	ds	1
  2951  0029                     Mrf49xaInit@k:	
  2952                           
  2953                           ; 1 bytes @ 0x9
  2954  0029                     	ds	1
  2955  002A                     handleFwRead@packet:	
  2956                           
  2957                           ; 1 bytes @ 0xA
  2958  002A                     	ds	3
  2959  002D                     handleFwWrite@packetData:	
  2960                           
  2961                           ; 1 bytes @ 0xD
  2962  002D                     	ds	1
  2963  002E                     handleFwWrite@i:	
  2964                           
  2965                           ; 1 bytes @ 0xE
  2966  002E                     	ds	1
  2967  002F                     handleFwWrite@address:	
  2968                           
  2969                           ; 2 bytes @ 0xF
  2970  002F                     	ds	2
  2971  0031                     handleFwWrite@packet:	
  2972                           
  2973                           ; 1 bytes @ 0x11
  2974  0031                     	ds	2
  2975  0033                     HandlePacket@sendAck:	
  2976                           
  2977                           ; 1 bytes @ 0x13
  2978  0033                     	ds	1
  2979  0034                     HandlePacket@sendMsg:	
  2980                           
  2981                           ; 1 bytes @ 0x14
  2982  0034                     	ds	1
  2983  0035                     HandlePacket@packet:	
  2984                           
  2985                           ; 1 bytes @ 0x15
  2986  0035                     	ds	1
  2987  0036                     ??_Mrf49xaTick:	
  2988                           
  2989                           ; 0 bytes @ 0x16
  2990  0036                     	ds	2
  2991  0038                     Mrf49xaTick@timeout:	
  2992                           
  2993                           ; 1 bytes @ 0x18
  2994  0038                     	ds	1
  2995  0039                     Mrf49xaTick@packet:	
  2996                           
  2997                           ; 1 bytes @ 0x19
  2998  0039                     	ds	1
  2999  003A                     main@k:	
  3000                           
  3001                           ; 1 bytes @ 0x1A
  3002  003A                     	ds	1
  3003                           
  3004                           	psect	maintext
  3005  0022                     __pmaintext:	
  3006 ;;
  3007 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3008 ;;
  3009 ;; *************** function _main *****************
  3010 ;; Defined at:
  3011 ;;		line 41 in file "../../../src/node/main.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  k               1   26[BANK0 ] unsigned char 
  3016 ;; Return value:  Size  Location     Type
  3017 ;;		None               void
  3018 ;; Registers used:
  3019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3020 ;; Tracked objects:
  3021 ;;		On entry : 17F/0
  3022 ;;		On exit  : 1F/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3025 ;;      Params:         0       0       0       0
  3026 ;;      Locals:         0       1       0       0
  3027 ;;      Temps:          0       0       0       0
  3028 ;;      Totals:         0       1       0       0
  3029 ;;Total ram usage:        1 bytes
  3030 ;; Hardware stack levels required when called:   11
  3031 ;; This function calls:
  3032 ;;		_AdcInit
  3033 ;;		_ExtIntInit
  3034 ;;		_Mrf49xaInit
  3035 ;;		_Mrf49xaTick
  3036 ;;		_RfSendPowerState
  3037 ;;		_SoftI2cInit
  3038 ;;		_SysInitGpio
  3039 ;; This function is called by:
  3040 ;;		Startup code after reset
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           
  3045                           ;psect for function _main
  3046  0022                     _main:	
  3047                           
  3048                           ;main.c: 44: OSCCON = 0b01111000;
  3049                           
  3050                           ;incstack = 0
  3051                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3052  0022  3078               	movlw	120
  3053  0023  0021               	movlb	1	; select bank1
  3054  0024  0099               	movwf	25	;volatile
  3055                           
  3056                           ;main.c: 45: WPUAbits.WPUA2 = 1;
  3057  0025  0024               	movlb	4	; select bank4
  3058  0026  150C               	bsf	12,2	;volatile
  3059                           
  3060                           ;main.c: 47: SysInitGpio();
  3061  0027  23DE               	fcall	_SysInitGpio
  3062                           
  3063                           ;main.c: 48: SoftI2cInit();
  3064  0028  3185  25D8  3180   	fcall	_SoftI2cInit
  3065                           
  3066                           ;main.c: 49: AdcInit();
  3067  002B  22E8  3180         	fcall	_AdcInit
  3068                           
  3069                           ;main.c: 50: ExtIntInit();
  3070  002D  22F7  3180         	fcall	_ExtIntInit
  3071                           
  3072                           ;main.c: 70: Mrf49xaInit();
  3073  002F  20DA  3180         	fcall	_Mrf49xaInit
  3074                           
  3075                           ;main.c: 72: uint8_t k = 1;
  3076  0031  01BA               	clrf	main@k
  3077  0032  0ABA               	incf	main@k,f
  3078  0033                     l2862:	
  3079                           
  3080                           ;main.c: 75: {
  3081                           ;main.c: 76: Mrf49xaTick();
  3082  0033  203E  3180         	fcall	_Mrf49xaTick
  3083                           
  3084                           ;main.c: 77: if (k)
  3085  0035  0020               	movlb	0	; select bank0
  3086  0036  083A               	movf	main@k,w
  3087  0037  1903               	btfsc	3,2
  3088  0038  2833               	goto	l2862
  3089                           
  3090                           ;main.c: 78: {
  3091                           ;main.c: 79: RfSendPowerState();
  3092  0039  23BC  3180         	fcall	_RfSendPowerState
  3093                           
  3094                           ;main.c: 80: k = 0;
  3095  003B  0020               	movlb	0	; select bank0
  3096  003C  01BA               	clrf	main@k
  3097  003D  2833               	goto	l2862
  3098  003E                     __end_of_main:	
  3099  003E                     __ptext5:	
  3100 ;; *************** function _Mrf49xaTick *****************
  3101 ;; Defined at:
  3102 ;;		line 123 in file "../../../src/devices/mrf49xa_packet.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  timeout         1   24[BANK0 ] unsigned char 
  3107 ;;  packet          1   25[BANK0 ] PTR struct rfTrcvPacket_
  3108 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3109 ;; Return value:  Size  Location     Type
  3110 ;;		None               void
  3111 ;; Registers used:
  3112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 1F/0
  3115 ;;		On exit  : 1F/1
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3118 ;;      Params:         0       0       0       0
  3119 ;;      Locals:         0       2       0       0
  3120 ;;      Temps:          0       2       0       0
  3121 ;;      Totals:         0       4       0       0
  3122 ;;Total ram usage:        4 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:   10
  3125 ;; This function calls:
  3126 ;;		_HandlePacket
  3127 ;;		_Mrf49RxSts
  3128 ;;		_Mrf49xaFreePacket
  3129 ;;		_Mrf49xaModeTx
  3130 ;;		_Mrf49xaPacketPending
  3131 ;;		_Mrf49xaRxPacket
  3132 ;; This function is called by:
  3133 ;;		_main
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           
  3138                           ;psect for function _Mrf49xaTick
  3139  003E                     _Mrf49xaTick:	
  3140                           
  3141                           ;mrf49xa_packet.c: 125: if (Mrf49xaPacketPending())
  3142                           
  3143                           ;incstack = 0
  3144                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3145  003E  23A4  3180         	fcall	_Mrf49xaPacketPending
  3146  0040  3A00               	xorlw	0
  3147  0041  1903               	skipnz
  3148  0042  2864               	goto	l2664
  3149                           
  3150                           ;mrf49xa_packet.c: 126: {
  3151                           ;mrf49xa_packet.c: 127: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  3152  0043  23AE  3180         	fcall	_Mrf49xaRxPacket
  3153  0045  0020               	movlb	0	; select bank0
  3154  0046  00B9               	movwf	Mrf49xaTick@packet
  3155                           
  3156                           ;mrf49xa_packet.c: 135: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  3157  0047  3E03               	addlw	3
  3158  0048  0086               	movwf	6
  3159  0049  0187               	clrf	7
  3160  004A  0801               	movf	1,w
  3161  004B  3AFF               	xorlw	255
  3162  004C  1903               	skipnz
  3163  004D  2856               	goto	l2658
  3164  004E  0839               	movf	Mrf49xaTick@packet,w
  3165  004F  3E03               	addlw	3
  3166  0050  0086               	movwf	6
  3167  0051  0801               	movf	1,w
  3168  0052  0021               	movlb	1	; select bank1
  3169  0053  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  3170  0054  1D03               	skipz
  3171  0055  2860               	goto	l2662
  3172  0056                     l2658:	
  3173                           
  3174                           ;mrf49xa_packet.c: 136: {
  3175                           ;mrf49xa_packet.c: 137: packet->packet.size -= 5;
  3176  0056  0020               	movlb	0	; select bank0
  3177  0057  0A39               	incf	Mrf49xaTick@packet,w
  3178  0058  0086               	movwf	6
  3179  0059  3005               	movlw	5
  3180  005A  0187               	clrf	7
  3181  005B  0281               	subwf	1,f
  3182                           
  3183                           ;mrf49xa_packet.c: 140: HandlePacket(packet);
  3184  005C  0839               	movf	Mrf49xaTick@packet,w
  3185  005D  2301  3180         	fcall	_HandlePacket
  3186                           
  3187                           ;mrf49xa_packet.c: 142: }
  3188  005F  2864               	goto	l2664
  3189  0060                     l2662:	
  3190                           
  3191                           ;mrf49xa_packet.c: 143: else
  3192                           ;mrf49xa_packet.c: 144: {
  3193                           ;mrf49xa_packet.c: 145: Mrf49xaFreePacket(packet);
  3194  0060  0020               	movlb	0	; select bank0
  3195  0061  0839               	movf	Mrf49xaTick@packet,w
  3196  0062  22FC  3180         	fcall	_Mrf49xaFreePacket
  3197  0064                     l2664:	
  3198                           
  3199                           ;mrf49xa_packet.c: 146: }
  3200                           ;mrf49xa_packet.c: 150: }
  3201                           ;mrf49xa_packet.c: 152: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  3202  0064  0021               	movlb	1	; select bank1
  3203  0065  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  3204  0066  3A03               	xorlw	3
  3205  0067  1D03               	skipz
  3206  0068  2898               	goto	l2684
  3207                           
  3208                           ;mrf49xa_packet.c: 153: {
  3209                           ;mrf49xa_packet.c: 154: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  3210  0069  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  3211  006A  3A02               	xorlw	2
  3212  006B  1D03               	skipz
  3213  006C  286F               	goto	l2670
  3214  006D                     l2668:	
  3215                           
  3216                           ;mrf49xa_packet.c: 155: {
  3217                           ;mrf49xa_packet.c: 156: rfTrcvStatus.txPacket.state = PKT_FREE;
  3218  006D  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  3219                           
  3220                           ;mrf49xa_packet.c: 157: }
  3221  006E  2898               	goto	l2684
  3222  006F                     l2670:	
  3223                           
  3224                           ;mrf49xa_packet.c: 158: else if (rfTrcvStatus.txPacket.retry == 10)
  3225  006F  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  3226  0070  390F               	andlw	15
  3227  0071  3A0A               	xorlw	10
  3228  0072  1D03               	skipz
  3229  0073  288C               	goto	l2680
  3230                           
  3231                           ;mrf49xa_packet.c: 159: {
  3232                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.retransmit == 3)
  3233  0074  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  3234  0075  3903               	andlw	3
  3235  0076  3A03               	xorlw	3
  3236  0077  1903               	btfsc	3,2
  3237  0078  286D               	goto	l2668
  3238                           
  3239                           ;mrf49xa_packet.c: 166: else
  3240                           ;mrf49xa_packet.c: 167: {
  3241                           ;mrf49xa_packet.c: 169: rfTrcvStatus.txPacket.retry = 0;
  3242  0079  30F0               	movlw	-16
  3243  007A  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  3244                           
  3245                           ;mrf49xa_packet.c: 170: rfTrcvStatus.txPacket.retransmit++;
  3246  007B  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  3247  007C  3903               	andlw	3
  3248  007D  0020               	movlb	0	; select bank0
  3249  007E  00B6               	movwf	??_Mrf49xaTick
  3250  007F  0AB6               	incf	??_Mrf49xaTick,f
  3251  0080  0EB6               	swapf	??_Mrf49xaTick,f
  3252  0081  0021               	movlb	1	; select bank1
  3253  0082  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  3254  0083  0020               	movlb	0	; select bank0
  3255  0084  0636               	xorwf	??_Mrf49xaTick,w
  3256  0085  39CF               	andlw	-49
  3257  0086  0636               	xorwf	??_Mrf49xaTick,w
  3258  0087  0021               	movlb	1	; select bank1
  3259  0088  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  3260                           
  3261                           ;mrf49xa_packet.c: 171: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  3262  0089  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  3263  008A  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  3264  008B  2898               	goto	l2684
  3265  008C                     l2680:	
  3266                           
  3267                           ;mrf49xa_packet.c: 174: else
  3268                           ;mrf49xa_packet.c: 175: {
  3269                           ;mrf49xa_packet.c: 176: rfTrcvStatus.txPacket.retry++;
  3270  008C  23FD  3180         	fcall	PL4	;call to abstracted procedure
  3271                           
  3272                           ;mrf49xa_packet.c: 177: _delay(40000);
  3273  008E  3034               	movlw	52
  3274  008F  0020               	movlb	0	; select bank0
  3275  0090  00B7               	movwf	??_Mrf49xaTick+1
  3276  0091  30F1               	movlw	241
  3277  0092  00B6               	movwf	??_Mrf49xaTick
  3278  0093                     u2097:	
  3279  0093  0BB6               	decfsz	??_Mrf49xaTick,f
  3280  0094  2893               	goto	u2097
  3281  0095  0BB7               	decfsz	??_Mrf49xaTick+1,f
  3282  0096  2893               	goto	u2097
  3283  0097  3200               	nop2
  3284  0098                     l2684:	
  3285                           
  3286                           ;mrf49xa_packet.c: 178: }
  3287                           ;mrf49xa_packet.c: 179: }
  3288                           ;mrf49xa_packet.c: 181: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  3289                           ;mrf49xa_packet.c: 182: rfTrcvStatus.state == RECV_IDLE)
  3290  0098  0021               	movlb	1	; select bank1
  3291  0099  0B53               	decfsz	(_rfTrcvStatus^(0+128)+51),w
  3292  009A  0008               	return
  3293  009B  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  3294  009C  1D03               	skipz
  3295  009D  0008               	return
  3296                           
  3297                           ;mrf49xa_packet.c: 183: {
  3298                           ;mrf49xa_packet.c: 184: if (rfTrcvStatus.txPacket.retry >= 10)
  3299  009E  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  3300  009F  390F               	andlw	15
  3301  00A0  0020               	movlb	0	; select bank0
  3302  00A1  00B6               	movwf	??_Mrf49xaTick
  3303  00A2  300A               	movlw	10
  3304  00A3  0236               	subwf	??_Mrf49xaTick,w
  3305  00A4  1C03               	skipc
  3306  00A5  28AC               	goto	l2696
  3307                           
  3308                           ;mrf49xa_packet.c: 185: {
  3309                           ;mrf49xa_packet.c: 187: rfTrcvStatus.txPacket.retry = 0;
  3310  00A6  30F0               	movlw	-16
  3311  00A7  0021               	movlb	1	; select bank1
  3312  00A8  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  3313                           
  3314                           ;mrf49xa_packet.c: 188: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3315  00A9  3003               	movlw	3
  3316  00AA  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  3317  00AB  0008               	return
  3318  00AC                     l2696:	
  3319                           
  3320                           ;mrf49xa_packet.c: 190: }
  3321                           ;mrf49xa_packet.c: 194: uint8_t timeout = 0;
  3322  00AC  01B8               	clrf	Mrf49xaTick@timeout
  3323  00AD                     l2698:	
  3324                           
  3325                           ;mrf49xa_packet.c: 198: {
  3326                           ;mrf49xa_packet.c: 199: Mrf49RxSts();
  3327  00AD  2299  3180         	fcall	_Mrf49RxSts
  3328                           
  3329                           ;mrf49xa_packet.c: 201: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  3330  00AF  0021               	movlb	1	; select bank1
  3331  00B0  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  3332  00B1  1D03               	skipz
  3333  00B2  28B6               	goto	l2706
  3334  00B3  0020               	movlb	0	; select bank0
  3335  00B4  1C3B               	btfss	_mrf49Status,0
  3336  00B5  28C9               	goto	l373
  3337  00B6                     l2706:	
  3338                           
  3339                           ;mrf49xa_packet.c: 205: }
  3340                           ;mrf49xa_packet.c: 207: _delay(40000);
  3341  00B6  3034               	movlw	52
  3342  00B7  0020               	movlb	0	; select bank0
  3343  00B8  00B7               	movwf	??_Mrf49xaTick+1
  3344  00B9  30F1               	movlw	241
  3345  00BA  00B6               	movwf	??_Mrf49xaTick
  3346  00BB                     u2107:	
  3347  00BB  0BB6               	decfsz	??_Mrf49xaTick,f
  3348  00BC  28BB               	goto	u2107
  3349  00BD  0BB7               	decfsz	??_Mrf49xaTick+1,f
  3350  00BE  28BB               	goto	u2107
  3351  00BF  3200               	nop2
  3352                           
  3353                           ;mrf49xa_packet.c: 208: timeout++;
  3354  00C0  0020               	movlb	0	; select bank0
  3355  00C1  300B               	movlw	11
  3356  00C2  0AB8               	incf	Mrf49xaTick@timeout,f
  3357                           
  3358                           ;mrf49xa_packet.c: 210: if (timeout > 10)
  3359  00C3  0238               	subwf	Mrf49xaTick@timeout,w
  3360  00C4  1C03               	skipc
  3361  00C5  28AD               	goto	l2698
  3362                           
  3363                           ;mrf49xa_packet.c: 211: {
  3364                           ;mrf49xa_packet.c: 212: rfTrcvStatus.txPacket.retry++;
  3365  00C6  0021               	movlb	1	; select bank1
  3366  00C7  23FD               	fcall	PL4	;call to abstracted procedure
  3367  00C8  0008               	return
  3368  00C9                     l373:	
  3369                           
  3370                           ;mrf49xa_packet.c: 226: INTCONbits.INTE = 0;;
  3371  00C9  120B               	bcf	11,4	;volatile
  3372                           
  3373                           ;mrf49xa_packet.c: 227: Mrf49xaModeTx();
  3374  00CA  3187  27D3         	fcall	_Mrf49xaModeTx
  3375                           
  3376                           ;mrf49xa_packet.c: 228: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  3377  00CC  3002               	movlw	2
  3378  00CD  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  3379                           
  3380                           ;mrf49xa_packet.c: 229: INTCONbits.INTE = 1;;
  3381  00CE  160B               	bsf	11,4	;volatile
  3382  00CF  0008               	return
  3383  00D0                     __end_of_Mrf49xaTick:	
  3384  00D0                     __ptext31:	
  3385 ;; *************** function _Mrf49RxCmd *****************
  3386 ;; Defined at:
  3387 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  cmd             1    wreg     unsigned char 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  cmd             1    1[BANK0 ] unsigned char 
  3392 ;;  val             1    2[BANK0 ] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      unsigned char 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, pclath, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 1E/1
  3399 ;;		On exit  : 1F/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3402 ;;      Params:         0       0       0       0
  3403 ;;      Locals:         0       2       0       0
  3404 ;;      Temps:          0       0       0       0
  3405 ;;      Totals:         0       2       0       0
  3406 ;;Total ram usage:        2 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    6
  3409 ;; This function calls:
  3410 ;;		_Mrf49SpiRx
  3411 ;;		_Mrf49SpiTx
  3412 ;; This function is called by:
  3413 ;;		_Mrf49RxByte
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _Mrf49RxCmd
  3419  00D0                     _Mrf49RxCmd:	
  3420                           
  3421                           ;incstack = 0
  3422                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  3423                           ;Mrf49RxCmd@cmd stored from wreg
  3424  00D0  0020               	movlb	0	; select bank0
  3425  00D1  00A1               	movwf	Mrf49RxCmd@cmd
  3426                           
  3427                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  3428  00D2  130E               	bcf	14,6	;volatile
  3429                           
  3430                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  3431  00D3  0821               	movf	Mrf49RxCmd@cmd,w
  3432  00D4  223E  3180         	fcall	_Mrf49SpiTx
  3433                           
  3434                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  3435  00D6  22A4               	fcall	_Mrf49SpiRx
  3436  00D7  00A2               	movwf	Mrf49RxCmd@val
  3437                           
  3438                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  3439  00D8  170E               	bsf	14,6	;volatile
  3440                           
  3441                           ;mrf49xa_cmd.c: 27: return val;
  3442  00D9  0008               	return
  3443  00DA                     __end_of_Mrf49RxCmd:	
  3444  00DA                     __ptext24:	
  3445 ;; *************** function _Mrf49xaInit *****************
  3446 ;; Defined at:
  3447 ;;		line 137 in file "../../../src/devices/mrf49xa.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;		None
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  k               1    9[BANK0 ] unsigned char 
  3452 ;;  j               1    0        unsigned char 
  3453 ;;  i               1    0        unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;		None               void
  3456 ;; Registers used:
  3457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 1F/1
  3460 ;;		On exit  : 1F/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3463 ;;      Params:         0       0       0       0
  3464 ;;      Locals:         0       1       0       0
  3465 ;;      Temps:          0       3       0       0
  3466 ;;      Totals:         0       4       0       0
  3467 ;;Total ram usage:        4 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    9
  3470 ;; This function calls:
  3471 ;;		_Mrf49TxCmd
  3472 ;;		_Mrf49xaModeRx
  3473 ;;		_Mrf49xaServe
  3474 ;; This function is called by:
  3475 ;;		_main
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _Mrf49xaInit
  3481  00DA                     _Mrf49xaInit:	
  3482                           
  3483                           ;mrf49xa.c: 139: UI08_t k;
  3484                           ;mrf49xa.c: 141: UI08_t i, j;
  3485                           ;mrf49xa.c: 145: LATCbits.LATC1 = 1;
  3486                           
  3487                           ;incstack = 0
  3488                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3489  00DA  0022               	movlb	2	; select bank2
  3490  00DB  148E               	bsf	14,1	;volatile
  3491                           
  3492                           ;mrf49xa.c: 146: LATCbits.LATC4 = 1;
  3493  00DC  160E               	bsf	14,4	;volatile
  3494                           
  3495                           ;mrf49xa.c: 148: LATAbits.LATA5 = 1;
  3496  00DD  168C               	bsf	12,5	;volatile
  3497                           
  3498                           ;mrf49xa.c: 150: _delay(400000);
  3499  00DE  3003               	movlw	3
  3500  00DF  0020               	movlb	0	; select bank0
  3501  00E0  00A8               	movwf	??_Mrf49xaInit+2
  3502  00E1  3008               	movlw	8
  3503  00E2  00A7               	movwf	??_Mrf49xaInit+1
  3504  00E3  3078               	movlw	120
  3505  00E4  00A6               	movwf	??_Mrf49xaInit
  3506  00E5                     u2137:	
  3507  00E5  0BA6               	decfsz	??_Mrf49xaInit,f
  3508  00E6  28E5               	goto	u2137
  3509  00E7  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3510  00E8  28E5               	goto	u2137
  3511  00E9  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3512  00EA  28E5               	goto	u2137
  3513                           
  3514                           ;mrf49xa.c: 151: LATAbits.LATA4 = 0;
  3515  00EB  0022               	movlb	2	; select bank2
  3516  00EC  120C               	bcf	12,4	;volatile
  3517                           
  3518                           ;mrf49xa.c: 152: _delay(400000);
  3519  00ED  3003               	movlw	3
  3520  00EE  0020               	movlb	0	; select bank0
  3521  00EF  00A8               	movwf	??_Mrf49xaInit+2
  3522  00F0  3008               	movlw	8
  3523  00F1  00A7               	movwf	??_Mrf49xaInit+1
  3524  00F2  3078               	movlw	120
  3525  00F3  00A6               	movwf	??_Mrf49xaInit
  3526  00F4                     u2147:	
  3527  00F4  0BA6               	decfsz	??_Mrf49xaInit,f
  3528  00F5  28F4               	goto	u2147
  3529  00F6  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3530  00F7  28F4               	goto	u2147
  3531  00F8  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3532  00F9  28F4               	goto	u2147
  3533                           
  3534                           ;mrf49xa.c: 153: LATAbits.LATA4 = 1;
  3535  00FA  0022               	movlb	2	; select bank2
  3536  00FB  160C               	bsf	12,4	;volatile
  3537                           
  3538                           ;mrf49xa.c: 154: _delay(400000);
  3539  00FC  3003               	movlw	3
  3540  00FD  0020               	movlb	0	; select bank0
  3541  00FE  00A8               	movwf	??_Mrf49xaInit+2
  3542  00FF  3008               	movlw	8
  3543  0100  00A7               	movwf	??_Mrf49xaInit+1
  3544  0101  3078               	movlw	120
  3545  0102  00A6               	movwf	??_Mrf49xaInit
  3546  0103                     u2157:	
  3547  0103  0BA6               	decfsz	??_Mrf49xaInit,f
  3548  0104  2903               	goto	u2157
  3549  0105  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3550  0106  2903               	goto	u2157
  3551  0107  0BA8               	decfsz	??_Mrf49xaInit+2,f
  3552  0108  2903               	goto	u2157
  3553                           
  3554                           ;mrf49xa.c: 156: rfTrcvStatus.state = RECV_IDLE;
  3555  0109  0021               	movlb	1	; select bank1
  3556  010A  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  3557                           
  3558                           ;mrf49xa.c: 158: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { _delay(40000); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val)
      +                          ; } };
  3559  010B  0020               	movlb	0	; select bank0
  3560  010C  309C               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3561  010D  01A9               	clrf	Mrf49xaInit@k
  3562  010E  3187               	movlp	high __stringtab
  3563  010F  000A               	callw
  3564  0110  3180               	pagesel	$	;select current page
  3565  0111  3800               	iorlw	0
  3566  0112  1903               	btfsc	3,2
  3567  0113  293B               	goto	l2644
  3568  0114                     l2634:	
  3569  0114  3529               	lslf	Mrf49xaInit@k,w
  3570  0115  3E9F               	addlw	low (_mrfRegset_Init| (0+32768))
  3571  0116  3187               	movlp	high __stringtab
  3572  0117  000A               	callw
  3573  0118  3180               	pagesel	$	;select current page
  3574  0119  3A55               	xorlw	85
  3575  011A  1D03               	skipz
  3576  011B  2926               	goto	l2638
  3577  011C  3034               	movlw	52
  3578  011D  00A7               	movwf	??_Mrf49xaInit+1
  3579  011E  30F1               	movlw	241
  3580  011F  00A6               	movwf	??_Mrf49xaInit
  3581  0120                     u2167:	
  3582  0120  0BA6               	decfsz	??_Mrf49xaInit,f
  3583  0121  2920               	goto	u2167
  3584  0122  0BA7               	decfsz	??_Mrf49xaInit+1,f
  3585  0123  2920               	goto	u2167
  3586  0124  3200               	nop2
  3587  0125  2932               	goto	l2640
  3588  0126                     l2638:	
  3589  0126  3529               	lslf	Mrf49xaInit@k,w
  3590  0127  3EA0               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  3591  0128  3187               	movlp	high __stringtab
  3592  0129  000A               	callw
  3593  012A  00A1               	movwf	Mrf49TxCmd@val
  3594  012B  3529               	lslf	Mrf49xaInit@k,w
  3595  012C  3E9F               	addlw	low (_mrfRegset_Init| (0+32768))
  3596  012D  3187               	movlp	high __stringtab
  3597  012E  000A               	callw
  3598  012F  3180               	pagesel	$	;select current page
  3599  0130  3182  2235         	fcall	_Mrf49TxCmd
  3600  0132                     l2640:	
  3601  0132  0020               	movlb	0	; select bank0
  3602  0133  309C               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3603  0134  0AA9               	incf	Mrf49xaInit@k,f
  3604  0135  3187               	movlp	high __stringtab
  3605  0136  000A               	callw
  3606  0137  3180               	pagesel	$	;select current page
  3607  0138  0229               	subwf	Mrf49xaInit@k,w
  3608  0139  1C03               	skipc
  3609  013A  2914               	goto	l2634
  3610  013B                     l2644:	
  3611                           
  3612                           ;mrf49xa.c: 161: Mrf49xaModeRx();
  3613  013B  2214  3180         	fcall	_Mrf49xaModeRx
  3614  013D                     l2648:	
  3615                           ;mrf49xa.c: 168: while(PORTAbits.RA2 == 0)
  3616                           
  3617  013D  0020               	movlb	0	; select bank0
  3618  013E  190C               	btfsc	12,2	;volatile
  3619  013F  0008               	return
  3620                           
  3621                           ;mrf49xa.c: 169: Mrf49xaServe();
  3622  0140  2143  3180         	fcall	_Mrf49xaServe
  3623  0142  293D               	goto	l2648
  3624  0143                     __end_of_Mrf49xaInit:	
  3625  0143                     __ptext25:	
  3626 ;; *************** function _Mrf49xaServe *****************
  3627 ;; Defined at:
  3628 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  data            1    5[BANK0 ] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      unsigned char 
  3635 ;; Registers used:
  3636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 1E/0
  3639 ;;		On exit  : 1F/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3642 ;;      Params:         0       0       0       0
  3643 ;;      Locals:         0       1       0       0
  3644 ;;      Temps:          0       1       0       0
  3645 ;;      Totals:         0       2       0       0
  3646 ;;Total ram usage:        2 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    8
  3649 ;; This function calls:
  3650 ;;		_Mrf49RxByte
  3651 ;;		_Mrf49RxSts
  3652 ;;		_Mrf49TxByte
  3653 ;;		_Mrf49xaModeRx
  3654 ;; This function is called by:
  3655 ;;		_Mrf49xaInit
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           
  3660                           ;psect for function _Mrf49xaServe
  3661  0143                     _Mrf49xaServe:	
  3662                           
  3663                           ;mrf49xa_data.c: 10: uint8_t data;
  3664                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3668  0143  2299  3180         	fcall	_Mrf49RxSts
  3669                           
  3670                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  3671  0145  083B               	movf	_mrf49Status,w
  3672  0146  3AFF               	xorlw	255
  3673  0147  1D03               	skipz
  3674  0148  294D               	goto	l395
  3675  0149  083C               	movf	_mrf49Status+1,w
  3676  014A  3AFF               	xorlw	255
  3677  014B  1903               	btfsc	3,2
  3678                           
  3679                           ;mrf49xa_data.c: 19: return 0;
  3680  014C  3400               	retlw	0
  3681  014D                     l395:	
  3682                           ;mrf49xa_data.c: 23: {
  3683                           
  3684                           
  3685                           ;mrf49xa_data.c: 25: }
  3686                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  3687  014D  1ABB               	btfsc	_mrf49Status,5
  3688  014E  2959               	goto	l2386
  3689  014F  2965               	goto	l396
  3690  0150                     l2382:	
  3691                           
  3692                           ;mrf49xa_data.c: 33: case RECV_DATA:
  3693                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  3694  0150  2212  3180         	fcall	_Mrf49RxByte
  3695  0152  00A5               	movwf	Mrf49xaServe@data
  3696                           
  3697                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  3698  0153  2212  3180         	fcall	_Mrf49RxByte
  3699  0155  00A5               	movwf	Mrf49xaServe@data
  3700                           
  3701                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  3702  0156  2214  3180         	fcall	_Mrf49xaModeRx
  3703                           
  3704                           ;mrf49xa_data.c: 44: break;
  3705  0158  2965               	goto	l396
  3706  0159                     l2386:	
  3707  0159  0021               	movlb	1	; select bank1
  3708  015A  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  3709                           
  3710                           ; Switch size 1, requested type "space"
  3711                           ; Number of cases is 3, Range of values is 0 to 2
  3712                           ; switch strategies available:
  3713                           ; Name         Instructions Cycles
  3714                           ; simple_byte           10     6 (average)
  3715                           ; direct_byte           12     6 (fixed)
  3716                           ; jumptable            260     6 (fixed)
  3717                           ;	Chosen strategy is simple_byte
  3718  015B  3A00               	xorlw	0	; case 0
  3719  015C  1903               	skipnz
  3720  015D  2950               	goto	l2382
  3721  015E  3A01               	xorlw	1	; case 1
  3722  015F  1903               	skipnz
  3723  0160  2950               	goto	l2382
  3724  0161  3A03               	xorlw	3	; case 2
  3725  0162  1903               	skipnz
  3726  0163  2965               	goto	l396
  3727  0164  2965               	goto	l396
  3728  0165                     l396:	
  3729                           
  3730                           ;mrf49xa_data.c: 52: }
  3731                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  3732  0165  0020               	movlb	0	; select bank0
  3733  0166  1BBB               	btfsc	_mrf49Status,7
  3734  0167  29FC               	goto	l2472
  3735  0168  2A08               	goto	l2474
  3736  0169                     l2390:	
  3737                           
  3738                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  3739  0169  2212  3180         	fcall	_Mrf49RxByte
  3740  016B  00A5               	movwf	Mrf49xaServe@data
  3741                           
  3742                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3743  016C  1BBC               	btfsc	_mrf49Status+1,7
  3744  016D  2971               	goto	l2396
  3745  016E                     l2394:	
  3746                           
  3747                           ;mrf49xa_data.c: 72: {
  3748                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  3749  016E  2214  3180         	fcall	_Mrf49xaModeRx
  3750                           
  3751                           ;mrf49xa_data.c: 74: break;
  3752  0170  2A08               	goto	l2474
  3753  0171                     l2396:	
  3754                           
  3755                           ;mrf49xa_data.c: 75: }
  3756                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  3757  0171  0021               	movlb	1	; select bank1
  3758  0172  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  3759  0173  1D03               	skipz
  3760  0174  2977               	goto	l2400
  3761  0175  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  3762  0176  297B               	goto	L1
  3763  0177                     l2400:	
  3764                           
  3765                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  3766  0177  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3767  0178  1D03               	skipz
  3768  0179  296E               	goto	l2394
  3769  017A  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  3770  017B                     L1:	
  3771  017B  00A0               	movwf	_rfTrcvStatus^(0+128)
  3772                           
  3773                           ;mrf49xa_data.c: 85: }
  3774                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  3775  017C  0A20               	incf	_rfTrcvStatus^(0+128),w
  3776  017D  0086               	movwf	6
  3777  017E  0187               	clrf	7
  3778                           
  3779                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  3780  017F  240B  3180         	fcall	PL8	;call to abstracted procedure
  3781  0181  3E16               	addlw	22
  3782  0182  0086               	movwf	6
  3783  0183  0181               	clrf	1
  3784                           
  3785                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  3786  0184  0820               	movf	_rfTrcvStatus^(0+128),w
  3787  0185  0086               	movwf	6
  3788  0186  3004               	movlw	4
  3789  0187  0081               	movwf	1
  3790                           
  3791                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  3792  0188  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  3793  0189  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  3794                           
  3795                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  3796  018A  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  3797  018B  29B8               	goto	L2
  3798  018C                     l2416:	
  3799                           ;mrf49xa_data.c: 93: break;
  3800                           
  3801                           
  3802                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  3803  018C  2212  3180         	fcall	_Mrf49RxByte
  3804  018E  00A5               	movwf	Mrf49xaServe@data
  3805                           
  3806                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  3807  018F  1BBC               	btfsc	_mrf49Status+1,7
  3808  0190  2998               	goto	l2424
  3809                           
  3810                           ;mrf49xa_data.c: 102: {
  3811                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3812  0191  0021               	movlb	1	; select bank1
  3813  0192  0820               	movf	_rfTrcvStatus^(0+128),w
  3814  0193  0086               	movwf	6
  3815  0194  3005               	movlw	5
  3816  0195  0187               	clrf	7
  3817  0196  0081               	movwf	1
  3818  0197  296E               	goto	l2394
  3819  0198                     l2424:	
  3820                           
  3821                           ;mrf49xa_data.c: 106: }
  3822                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  3823  0198  0021               	movlb	1	; select bank1
  3824  0199  0A20               	incf	_rfTrcvStatus^(0+128),w
  3825  019A  0086               	movwf	6
  3826  019B  0187               	clrf	7
  3827  019C  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3828  019D  0601               	xorwf	1,w
  3829  019E  1D03               	skipz
  3830  019F  29AE               	goto	l2434
  3831                           
  3832                           ;mrf49xa_data.c: 109: {
  3833                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  3834  01A0  0820               	movf	_rfTrcvStatus^(0+128),w
  3835  01A1  3E16               	addlw	22
  3836  01A2  0086               	movwf	6
  3837                           
  3838                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  3839  01A3  240B  3180         	fcall	PL8	;call to abstracted procedure
  3840  01A5  0086               	movwf	6
  3841  01A6  3005               	movlw	5
  3842  01A7  0081               	movwf	1
  3843                           
  3844                           ;mrf49xa_data.c: 120: Mrf49xaModeRx();
  3845  01A8  2214  3180         	fcall	_Mrf49xaModeRx
  3846                           
  3847                           ;mrf49xa_data.c: 123: LATCbits.LATC2 = 1;
  3848  01AA  0022               	movlb	2	; select bank2
  3849  01AB  150E               	bsf	14,2	;volatile
  3850                           
  3851                           ;mrf49xa_data.c: 124: LATCbits.LATC2 = 0;
  3852  01AC  110E               	bcf	14,2	;volatile
  3853                           
  3854                           ;mrf49xa_data.c: 126: }
  3855  01AD  2A08               	goto	l2474
  3856  01AE                     l2434:	
  3857                           
  3858                           ;mrf49xa_data.c: 127: else
  3859                           ;mrf49xa_data.c: 128: {
  3860                           ;mrf49xa_data.c: 129: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  3861  01AE  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3862  01AF  0720               	addwf	_rfTrcvStatus^(0+128),w
  3863  01B0  0020               	movlb	0	; select bank0
  3864  01B1  00A4               	movwf	??_Mrf49xaServe
  3865  01B2  0A24               	incf	??_Mrf49xaServe,w
  3866  01B3  0086               	movwf	6
  3867  01B4  0187               	clrf	7
  3868  01B5  0825               	movf	Mrf49xaServe@data,w
  3869  01B6  0081               	movwf	1
  3870  01B7  0021               	movlb	1	; select bank1
  3871  01B8                     L2:	
  3872  01B8  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3873  01B9  2A08               	goto	l2474
  3874  01BA                     l2438:	
  3875                           
  3876                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte++;
  3877  01BA  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  3878                           
  3879                           ;mrf49xa_data.c: 137: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  3880  01BB  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3881  01BC  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  3882  01BD  1D03               	skipz
  3883  01BE  29EB               	goto	l2468
  3884                           
  3885                           ;mrf49xa_data.c: 138: rfTrcvStatus.hwByte = 49;
  3886  01BF  3031               	movlw	49
  3887  01C0  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3888  01C1  29EB               	goto	l2468
  3889  01C2                     l2444:	
  3890                           
  3891                           ;mrf49xa_data.c: 143: Mrf49TxByte(0x2D);
  3892  01C2  302D               	movlw	45
  3893  01C3  220D  3180         	fcall	_Mrf49TxByte
  3894                           
  3895                           ;mrf49xa_data.c: 144: break;
  3896  01C5  2A08               	goto	l2474
  3897  01C6                     l2446:	
  3898                           
  3899                           ;mrf49xa_data.c: 147: Mrf49TxByte(0xD4);
  3900  01C6  30D4               	movlw	212
  3901  01C7  220D  3180         	fcall	_Mrf49TxByte
  3902                           
  3903                           ;mrf49xa_data.c: 148: rfTrcvStatus.hwByte = 0xFF;
  3904  01C9  30FF               	movlw	255
  3905  01CA  0021               	movlb	1	; select bank1
  3906  01CB  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  3907                           
  3908                           ;mrf49xa_data.c: 149: break;
  3909  01CC  2A08               	goto	l2474
  3910  01CD                     l2450:	
  3911                           
  3912                           ;mrf49xa_data.c: 153: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  3913  01CD  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3914  01CE  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  3915  01CF  0086               	movwf	6
  3916  01D0  0187               	clrf	7
  3917  01D1  0801               	movf	1,w
  3918  01D2  220D  3180         	fcall	_Mrf49TxByte
  3919                           
  3920                           ;mrf49xa_data.c: 154: break;
  3921  01D4  2A08               	goto	l2474
  3922  01D5                     l2452:	
  3923                           
  3924                           ;mrf49xa_data.c: 157: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  3925  01D5  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  3926  01D6  220D  3180         	fcall	_Mrf49TxByte
  3927                           
  3928                           ;mrf49xa_data.c: 158: break;
  3929  01D8  2A08               	goto	l2474
  3930  01D9                     l2454:	
  3931                           
  3932                           ;mrf49xa_data.c: 161: Mrf49TxByte(0x00);
  3933  01D9  3000               	movlw	0
  3934  01DA  220D  3180         	fcall	_Mrf49TxByte
  3935                           
  3936                           ;mrf49xa_data.c: 162: break;
  3937  01DC  2A08               	goto	l2474
  3938  01DD                     l2456:	
  3939                           
  3940                           ;mrf49xa_data.c: 165: Mrf49TxByte(0x00);
  3941  01DD  3000               	movlw	0
  3942  01DE  220D  3180         	fcall	_Mrf49TxByte
  3943                           
  3944                           ;mrf49xa_data.c: 166: Mrf49xaModeRx();
  3945  01E0  2214  3180         	fcall	_Mrf49xaModeRx
  3946                           
  3947                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.retry = 0;
  3948  01E2  30F0               	movlw	-16
  3949  01E3  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  3950                           
  3951                           ;mrf49xa_data.c: 170: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  3952  01E4  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  3953  01E5  29E9               	goto	l2464
  3954                           
  3955                           ;mrf49xa_data.c: 171: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  3956  01E6  3003               	movlw	3
  3957  01E7  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  3958  01E8  2A08               	goto	l2474
  3959  01E9                     l2464:	
  3960                           
  3961                           ;mrf49xa_data.c: 172: else
  3962                           ;mrf49xa_data.c: 173: rfTrcvStatus.txPacket.state = PKT_FREE;
  3963  01E9  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  3964  01EA  2A08               	goto	l2474
  3965  01EB                     l2468:	
  3966  01EB  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  3967                           
  3968                           ; Switch size 1, requested type "space"
  3969                           ; Number of cases is 5, Range of values is 49 to 101
  3970                           ; switch strategies available:
  3971                           ; Name         Instructions Cycles
  3972                           ; simple_byte           16     9 (average)
  3973                           ; direct_byte          115     9 (fixed)
  3974                           ; jumptable            263     9 (fixed)
  3975                           ;	Chosen strategy is simple_byte
  3976  01EC  3A31               	xorlw	49	; case 49
  3977  01ED  1903               	skipnz
  3978  01EE  29D5               	goto	l2452
  3979  01EF  3A03               	xorlw	3	; case 50
  3980  01F0  1903               	skipnz
  3981  01F1  29D9               	goto	l2454
  3982  01F2  3A01               	xorlw	1	; case 51
  3983  01F3  1903               	skipnz
  3984  01F4  29DD               	goto	l2456
  3985  01F5  3A57               	xorlw	87	; case 100
  3986  01F6  1903               	skipnz
  3987  01F7  29C2               	goto	l2444
  3988  01F8  3A01               	xorlw	1	; case 101
  3989  01F9  1903               	skipnz
  3990  01FA  29C6               	goto	l2446
  3991  01FB  29CD               	goto	l2450
  3992  01FC                     l2472:	
  3993  01FC  0021               	movlb	1	; select bank1
  3994  01FD  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  3995                           
  3996                           ; Switch size 1, requested type "space"
  3997                           ; Number of cases is 3, Range of values is 0 to 2
  3998                           ; switch strategies available:
  3999                           ; Name         Instructions Cycles
  4000                           ; simple_byte           10     6 (average)
  4001                           ; direct_byte           12     6 (fixed)
  4002                           ; jumptable            260     6 (fixed)
  4003                           ;	Chosen strategy is simple_byte
  4004  01FE  3A00               	xorlw	0	; case 0
  4005  01FF  1903               	skipnz
  4006  0200  2969               	goto	l2390
  4007  0201  3A01               	xorlw	1	; case 1
  4008  0202  1903               	skipnz
  4009  0203  298C               	goto	l2416
  4010  0204  3A03               	xorlw	3	; case 2
  4011  0205  1903               	skipnz
  4012  0206  29BA               	goto	l2438
  4013  0207  2A08               	goto	l2474
  4014  0208                     l2474:	
  4015                           
  4016                           ;mrf49xa_data.c: 180: }
  4017                           ;mrf49xa_data.c: 194: return PORTAbits.RA2 == 1 ? 1 : 0;
  4018  0208  0020               	movlb	0	; select bank0
  4019  0209  0C0C               	rrf	12,w	;volatile
  4020  020A  0C89               	rrf	9,f
  4021  020B  3901               	andlw	1
  4022  020C  0008               	return
  4023  020D                     __end_of_Mrf49xaServe:	
  4024  020D                     __ptext27:	
  4025 ;; *************** function _Mrf49TxByte *****************
  4026 ;; Defined at:
  4027 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  byte            1    wreg     unsigned char 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;  byte            1    3[BANK0 ] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;		None               void
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0, pclath, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 1E/1
  4038 ;;		On exit  : 1F/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4041 ;;      Params:         0       0       0       0
  4042 ;;      Locals:         0       1       0       0
  4043 ;;      Temps:          0       0       0       0
  4044 ;;      Totals:         0       1       0       0
  4045 ;;Total ram usage:        1 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    7
  4048 ;; This function calls:
  4049 ;;		_Mrf49TxCmd
  4050 ;; This function is called by:
  4051 ;;		_Mrf49xaServe
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _Mrf49TxByte
  4057  020D                     _Mrf49TxByte:	
  4058                           
  4059                           ;incstack = 0
  4060                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  4061                           ;Mrf49TxByte@byte stored from wreg
  4062  020D  0020               	movlb	0	; select bank0
  4063  020E  00A3               	movwf	Mrf49TxByte@byte
  4064                           
  4065                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  4066  020F  00A1               	movwf	Mrf49TxCmd@val
  4067  0210  30B8               	movlw	184
  4068  0211  2A35               	ljmp	_Mrf49TxCmd
  4069  0212                     __end_of_Mrf49TxByte:	
  4070  0212                     __ptext30:	
  4071 ;; *************** function _Mrf49RxByte *****************
  4072 ;; Defined at:
  4073 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      unsigned char 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 1E/1
  4084 ;;		On exit  : 1F/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4087 ;;      Params:         0       0       0       0
  4088 ;;      Locals:         0       0       0       0
  4089 ;;      Temps:          0       0       0       0
  4090 ;;      Totals:         0       0       0       0
  4091 ;;Total ram usage:        0 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    7
  4094 ;; This function calls:
  4095 ;;		_Mrf49RxCmd
  4096 ;; This function is called by:
  4097 ;;		_Mrf49xaServe
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function _Mrf49RxByte
  4103  0212                     _Mrf49RxByte:	
  4104                           
  4105                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  4109  0212  30B0               	movlw	176
  4110  0213  28D0               	ljmp	_Mrf49RxCmd
  4111  0214                     __end_of_Mrf49RxByte:	
  4112  0214                     __ptext26:	
  4113 ;; *************** function _Mrf49xaModeRx *****************
  4114 ;; Defined at:
  4115 ;;		line 92 in file "../../../src/devices/mrf49xa.c"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  k               1    3[BANK0 ] unsigned char 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;		None               void
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0, pclath, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 1E/0
  4126 ;;		On exit  : 1F/1
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4129 ;;      Params:         0       0       0       0
  4130 ;;      Locals:         0       1       0       0
  4131 ;;      Temps:          0       0       0       0
  4132 ;;      Totals:         0       1       0       0
  4133 ;;Total ram usage:        1 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    7
  4136 ;; This function calls:
  4137 ;;		_Mrf49TxCmd
  4138 ;; This function is called by:
  4139 ;;		_Mrf49xaInit
  4140 ;;		_Mrf49xaServe
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function _Mrf49xaModeRx
  4146  0214                     _Mrf49xaModeRx:	
  4147                           
  4148                           ;mrf49xa.c: 94: UI08_t k;
  4149                           ;mrf49xa.c: 95: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg, 
      +                          mrfRegset_Rx[k].val); };
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  4153  0214  0020               	movlb	0	; select bank0
  4154  0215  309D               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  4155  0216  01A3               	clrf	Mrf49xaModeRx@k
  4156  0217  3187               	movlp	high __stringtab
  4157  0218  000A               	callw
  4158  0219  3180               	pagesel	$	;select current page
  4159  021A  3800               	iorlw	0
  4160  021B  1903               	btfsc	3,2
  4161  021C  2A31               	goto	l2276
  4162  021D                     l2270:	
  4163  021D  3523               	lslf	Mrf49xaModeRx@k,w
  4164  021E  3EC0               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  4165  021F  3187               	movlp	high __stringtab
  4166  0220  000A               	callw
  4167  0221  00A1               	movwf	Mrf49TxCmd@val
  4168  0222  3523               	lslf	Mrf49xaModeRx@k,w
  4169  0223  3EBF               	addlw	low (_mrfRegset_Rx| (0+32768))
  4170  0224  3187               	movlp	high __stringtab
  4171  0225  000A               	callw
  4172  0226  3180               	pagesel	$	;select current page
  4173  0227  3182  2235         	fcall	_Mrf49TxCmd
  4174  0229  309D               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  4175  022A  0AA3               	incf	Mrf49xaModeRx@k,f
  4176  022B  3187               	movlp	high __stringtab
  4177  022C  000A               	callw
  4178  022D  3180               	pagesel	$	;select current page
  4179  022E  0223               	subwf	Mrf49xaModeRx@k,w
  4180  022F  1C03               	skipc
  4181  0230  2A1D               	goto	l2270
  4182  0231                     l2276:	
  4183                           
  4184                           ;mrf49xa.c: 98: rfTrcvStatus.state = RECV_IDLE;
  4185  0231  0021               	movlb	1	; select bank1
  4186  0232  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  4187                           
  4188                           ;mrf49xa.c: 99: rfTrcvStatus.hwByte = 0;
  4189  0233  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  4190  0234  0008               	return
  4191  0235                     __end_of_Mrf49xaModeRx:	
  4192  0235                     __ptext28:	
  4193 ;; *************** function _Mrf49TxCmd *****************
  4194 ;; Defined at:
  4195 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  cmd             1    wreg     unsigned char 
  4198 ;;  val             1    1[BANK0 ] unsigned char 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  cmd             1    2[BANK0 ] unsigned char 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;		None               void
  4203 ;; Registers used:
  4204 ;;		wreg, status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 1F/0
  4207 ;;		On exit  : 1F/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4210 ;;      Params:         0       1       0       0
  4211 ;;      Locals:         0       1       0       0
  4212 ;;      Temps:          0       0       0       0
  4213 ;;      Totals:         0       2       0       0
  4214 ;;Total ram usage:        2 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    6
  4217 ;; This function calls:
  4218 ;;		_Mrf49SpiTx
  4219 ;; This function is called by:
  4220 ;;		_Mrf49xaModeRx
  4221 ;;		_Mrf49xaModeTx
  4222 ;;		_Mrf49xaInit
  4223 ;;		_Mrf49TxByte
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _Mrf49TxCmd
  4229  0235                     _Mrf49TxCmd:	
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  4233                           ;Mrf49TxCmd@cmd stored from wreg
  4234  0235  00A2               	movwf	Mrf49TxCmd@cmd
  4235                           
  4236                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  4237  0236  130E               	bcf	14,6	;volatile
  4238                           
  4239                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  4240  0237  0822               	movf	Mrf49TxCmd@cmd,w
  4241  0238  223E  3180         	fcall	_Mrf49SpiTx
  4242                           
  4243                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  4244  023A  0821               	movf	Mrf49TxCmd@val,w
  4245  023B  223E               	fcall	_Mrf49SpiTx
  4246                           
  4247                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  4248  023C  170E               	bsf	14,6	;volatile
  4249  023D  0008               	return
  4250  023E                     __end_of_Mrf49TxCmd:	
  4251  023E                     __ptext32:	
  4252 ;; *************** function _Mrf49SpiTx *****************
  4253 ;; Defined at:
  4254 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  byte            1    wreg     unsigned char 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  byte            1    0[BANK0 ] unsigned char 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;		None               void
  4261 ;; Registers used:
  4262 ;;		wreg
  4263 ;; Tracked objects:
  4264 ;;		On entry : 1F/0
  4265 ;;		On exit  : 1F/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4268 ;;      Params:         0       0       0       0
  4269 ;;      Locals:         0       1       0       0
  4270 ;;      Temps:          0       0       0       0
  4271 ;;      Totals:         0       1       0       0
  4272 ;;Total ram usage:        1 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    5
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_Mrf49TxCmd
  4279 ;;		_Mrf49RxCmd
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _Mrf49SpiTx
  4285  023E                     _Mrf49SpiTx:	
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _Mrf49SpiTx: [wreg]
  4289                           ;Mrf49SpiTx@byte stored from wreg
  4290  023E  00A0               	movwf	Mrf49SpiTx@byte
  4291                           
  4292                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  4293  023F  1FA0               	btfss	Mrf49SpiTx@byte,7
  4294  0240  2A43               	goto	l218
  4295  0241  178D               	bsf	13,7	;volatile
  4296  0242  2A44               	goto	l219
  4297  0243                     l218:	
  4298  0243  138D               	bcf	13,7	;volatile
  4299  0244                     l219:	
  4300  0244  0022               	movlb	2	; select bank2
  4301  0245  178E               	bsf	14,7	;volatile
  4302  0246  0000               	nop	;# 
  4303  0247  0022               	movlb	2	; select bank2
  4304  0248  138E               	bcf	14,7	;volatile
  4305  0249  0020               	movlb	0	; select bank0
  4306  024A  1F20               	btfss	Mrf49SpiTx@byte,6
  4307  024B  2A4E               	goto	l222
  4308  024C  178D               	bsf	13,7	;volatile
  4309  024D  2A4F               	goto	l223
  4310  024E                     l222:	
  4311  024E  138D               	bcf	13,7	;volatile
  4312  024F                     l223:	
  4313  024F  0022               	movlb	2	; select bank2
  4314  0250  178E               	bsf	14,7	;volatile
  4315  0251  0000               	nop	;# 
  4316  0252  0022               	movlb	2	; select bank2
  4317  0253  138E               	bcf	14,7	;volatile
  4318  0254  0020               	movlb	0	; select bank0
  4319  0255  1EA0               	btfss	Mrf49SpiTx@byte,5
  4320  0256  2A59               	goto	l226
  4321  0257  178D               	bsf	13,7	;volatile
  4322  0258  2A5A               	goto	l227
  4323  0259                     l226:	
  4324  0259  138D               	bcf	13,7	;volatile
  4325  025A                     l227:	
  4326  025A  0022               	movlb	2	; select bank2
  4327  025B  178E               	bsf	14,7	;volatile
  4328  025C  0000               	nop	;# 
  4329  025D  0022               	movlb	2	; select bank2
  4330  025E  138E               	bcf	14,7	;volatile
  4331  025F  0020               	movlb	0	; select bank0
  4332  0260  1E20               	btfss	Mrf49SpiTx@byte,4
  4333  0261  2A64               	goto	l230
  4334  0262  178D               	bsf	13,7	;volatile
  4335  0263  2A65               	goto	l231
  4336  0264                     l230:	
  4337  0264  138D               	bcf	13,7	;volatile
  4338  0265                     l231:	
  4339  0265  0022               	movlb	2	; select bank2
  4340  0266  178E               	bsf	14,7	;volatile
  4341  0267  0000               	nop	;# 
  4342  0268  0022               	movlb	2	; select bank2
  4343  0269  138E               	bcf	14,7	;volatile
  4344  026A  0020               	movlb	0	; select bank0
  4345  026B  1DA0               	btfss	Mrf49SpiTx@byte,3
  4346  026C  2A6F               	goto	l234
  4347  026D  178D               	bsf	13,7	;volatile
  4348  026E  2A70               	goto	l235
  4349  026F                     l234:	
  4350  026F  138D               	bcf	13,7	;volatile
  4351  0270                     l235:	
  4352  0270  0022               	movlb	2	; select bank2
  4353  0271  178E               	bsf	14,7	;volatile
  4354  0272  0000               	nop	;# 
  4355  0273  0022               	movlb	2	; select bank2
  4356  0274  138E               	bcf	14,7	;volatile
  4357  0275  0020               	movlb	0	; select bank0
  4358  0276  1D20               	btfss	Mrf49SpiTx@byte,2
  4359  0277  2A7A               	goto	l238
  4360  0278  178D               	bsf	13,7	;volatile
  4361  0279  2A7B               	goto	l239
  4362  027A                     l238:	
  4363  027A  138D               	bcf	13,7	;volatile
  4364  027B                     l239:	
  4365  027B  0022               	movlb	2	; select bank2
  4366  027C  178E               	bsf	14,7	;volatile
  4367  027D  0000               	nop	;# 
  4368  027E  0022               	movlb	2	; select bank2
  4369  027F  138E               	bcf	14,7	;volatile
  4370  0280  0020               	movlb	0	; select bank0
  4371  0281  1CA0               	btfss	Mrf49SpiTx@byte,1
  4372  0282  2A85               	goto	l242
  4373  0283  178D               	bsf	13,7	;volatile
  4374  0284  2A86               	goto	l243
  4375  0285                     l242:	
  4376  0285  138D               	bcf	13,7	;volatile
  4377  0286                     l243:	
  4378  0286  0022               	movlb	2	; select bank2
  4379  0287  178E               	bsf	14,7	;volatile
  4380  0288  0000               	nop	;# 
  4381  0289  0022               	movlb	2	; select bank2
  4382  028A  138E               	bcf	14,7	;volatile
  4383  028B  0020               	movlb	0	; select bank0
  4384  028C  1C20               	btfss	Mrf49SpiTx@byte,0
  4385  028D  2A90               	goto	l246
  4386  028E  178D               	bsf	13,7	;volatile
  4387  028F  2A91               	goto	l247
  4388  0290                     l246:	
  4389  0290  138D               	bcf	13,7	;volatile
  4390  0291                     l247:	
  4391  0291  0022               	movlb	2	; select bank2
  4392  0292  178E               	bsf	14,7	;volatile
  4393  0293  0000               	nop	;# 
  4394  0294  0022               	movlb	2	; select bank2
  4395  0295  138E               	bcf	14,7	;volatile
  4396                           
  4397                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  4398  0296  0020               	movlb	0	; select bank0
  4399  0297  138D               	bcf	13,7	;volatile
  4400  0298  0008               	return
  4401  0299                     __end_of_Mrf49SpiTx:	
  4402  0299                     __ptext29:	
  4403 ;; *************** function _Mrf49RxSts *****************
  4404 ;; Defined at:
  4405 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;		None               void
  4412 ;; Registers used:
  4413 ;;		wreg, status,2, pclath, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 1E/0
  4416 ;;		On exit  : 1F/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4419 ;;      Params:         0       0       0       0
  4420 ;;      Locals:         0       0       0       0
  4421 ;;      Temps:          0       0       0       0
  4422 ;;      Totals:         0       0       0       0
  4423 ;;Total ram usage:        0 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    6
  4426 ;; This function calls:
  4427 ;;		_Mrf49SpiRx
  4428 ;; This function is called by:
  4429 ;;		_Mrf49xaTick
  4430 ;;		_Mrf49xaServe
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           
  4435                           ;psect for function _Mrf49RxSts
  4436  0299                     _Mrf49RxSts:	
  4437                           
  4438                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  4442  0299  120B               	bcf	11,4	;volatile
  4443                           
  4444                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  4445  029A  0020               	movlb	0	; select bank0
  4446  029B  130E               	bcf	14,6	;volatile
  4447                           
  4448                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  4449  029C  22A4  3180         	fcall	_Mrf49SpiRx
  4450  029E  00BB               	movwf	_mrf49Status
  4451                           
  4452                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  4453  029F  22A4               	fcall	_Mrf49SpiRx
  4454  02A0  00BC               	movwf	_mrf49Status+1
  4455                           
  4456                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  4457  02A1  170E               	bsf	14,6	;volatile
  4458                           
  4459                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  4460  02A2  160B               	bsf	11,4	;volatile
  4461  02A3  0008               	return
  4462  02A4                     __end_of_Mrf49RxSts:	
  4463  02A4                     __ptext33:	
  4464 ;; *************** function _Mrf49SpiRx *****************
  4465 ;; Defined at:
  4466 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  data            1    0[BANK0 ] unsigned char 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      unsigned char 
  4473 ;; Registers used:
  4474 ;;		wreg, status,2
  4475 ;; Tracked objects:
  4476 ;;		On entry : 1F/0
  4477 ;;		On exit  : 1F/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4480 ;;      Params:         0       0       0       0
  4481 ;;      Locals:         0       1       0       0
  4482 ;;      Temps:          0       0       0       0
  4483 ;;      Totals:         0       1       0       0
  4484 ;;Total ram usage:        1 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    5
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_Mrf49RxCmd
  4491 ;;		_Mrf49RxSts
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           
  4496                           ;psect for function _Mrf49SpiRx
  4497  02A4                     _Mrf49SpiRx:	
  4498                           
  4499                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  4500                           
  4501                           ;incstack = 0
  4502                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  4503  02A4  01A0               	clrf	Mrf49SpiRx@data
  4504                           
  4505                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  4506  02A5  138D               	bcf	13,7	;volatile
  4507  02A6  1A8E               	btfsc	14,5	;volatile
  4508  02A7  17A0               	bsf	Mrf49SpiRx@data,7
  4509  02A8  0022               	movlb	2	; select bank2
  4510  02A9  178E               	bsf	14,7	;volatile
  4511  02AA  0000               	nop	;# 
  4512  02AB  0022               	movlb	2	; select bank2
  4513  02AC  138E               	bcf	14,7	;volatile
  4514                           
  4515                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4516  02AD  0020               	movlb	0	; select bank0
  4517  02AE  1A8E               	btfsc	14,5	;volatile
  4518  02AF  1720               	bsf	Mrf49SpiRx@data,6
  4519  02B0  0022               	movlb	2	; select bank2
  4520  02B1  178E               	bsf	14,7	;volatile
  4521  02B2  0000               	nop	;# 
  4522  02B3  0022               	movlb	2	; select bank2
  4523  02B4  138E               	bcf	14,7	;volatile
  4524                           
  4525                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4526  02B5  0020               	movlb	0	; select bank0
  4527  02B6  1A8E               	btfsc	14,5	;volatile
  4528  02B7  16A0               	bsf	Mrf49SpiRx@data,5
  4529  02B8  0022               	movlb	2	; select bank2
  4530  02B9  178E               	bsf	14,7	;volatile
  4531  02BA  0000               	nop	;# 
  4532  02BB  0022               	movlb	2	; select bank2
  4533  02BC  138E               	bcf	14,7	;volatile
  4534                           
  4535                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4536  02BD  0020               	movlb	0	; select bank0
  4537  02BE  1A8E               	btfsc	14,5	;volatile
  4538  02BF  1620               	bsf	Mrf49SpiRx@data,4
  4539  02C0  0022               	movlb	2	; select bank2
  4540  02C1  178E               	bsf	14,7	;volatile
  4541  02C2  0000               	nop	;# 
  4542  02C3  0022               	movlb	2	; select bank2
  4543  02C4  138E               	bcf	14,7	;volatile
  4544                           
  4545                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4546  02C5  0020               	movlb	0	; select bank0
  4547  02C6  1A8E               	btfsc	14,5	;volatile
  4548  02C7  15A0               	bsf	Mrf49SpiRx@data,3
  4549  02C8  0022               	movlb	2	; select bank2
  4550  02C9  178E               	bsf	14,7	;volatile
  4551  02CA  0000               	nop	;# 
  4552  02CB  0022               	movlb	2	; select bank2
  4553  02CC  138E               	bcf	14,7	;volatile
  4554                           
  4555                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4556  02CD  0020               	movlb	0	; select bank0
  4557  02CE  1A8E               	btfsc	14,5	;volatile
  4558  02CF  1520               	bsf	Mrf49SpiRx@data,2
  4559  02D0  0022               	movlb	2	; select bank2
  4560  02D1  178E               	bsf	14,7	;volatile
  4561  02D2  0000               	nop	;# 
  4562  02D3  0022               	movlb	2	; select bank2
  4563  02D4  138E               	bcf	14,7	;volatile
  4564                           
  4565                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4566  02D5  0020               	movlb	0	; select bank0
  4567  02D6  1A8E               	btfsc	14,5	;volatile
  4568  02D7  14A0               	bsf	Mrf49SpiRx@data,1
  4569  02D8  0022               	movlb	2	; select bank2
  4570  02D9  178E               	bsf	14,7	;volatile
  4571  02DA  0000               	nop	;# 
  4572  02DB  0022               	movlb	2	; select bank2
  4573  02DC  138E               	bcf	14,7	;volatile
  4574                           
  4575                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  4576  02DD  0020               	movlb	0	; select bank0
  4577  02DE  1A8E               	btfsc	14,5	;volatile
  4578  02DF  1420               	bsf	Mrf49SpiRx@data,0
  4579  02E0  0022               	movlb	2	; select bank2
  4580  02E1  178E               	bsf	14,7	;volatile
  4581  02E2  0000               	nop	;# 
  4582  02E3  0022               	movlb	2	; select bank2
  4583  02E4  138E               	bcf	14,7	;volatile
  4584                           
  4585                           ;mrf49xa_spi_pic16.c: 40: return data;
  4586  02E5  0020               	movlb	0	; select bank0
  4587  02E6  0820               	movf	Mrf49SpiRx@data,w
  4588  02E7  0008               	return
  4589  02E8                     __end_of_Mrf49SpiRx:	
  4590  02E8                     __ptext35:	
  4591 ;; *************** function _AdcInit *****************
  4592 ;; Defined at:
  4593 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;		None               void
  4600 ;; Registers used:
  4601 ;;		wreg, status,2
  4602 ;; Tracked objects:
  4603 ;;		On entry : 0/2
  4604 ;;		On exit  : 1F/1
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4607 ;;      Params:         0       0       0       0
  4608 ;;      Locals:         0       0       0       0
  4609 ;;      Temps:          0       0       0       0
  4610 ;;      Totals:         0       0       0       0
  4611 ;;Total ram usage:        0 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    5
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_main
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _AdcInit
  4623  02E8                     _AdcInit:	
  4624                           
  4625                           ;adc16.c: 6: ANSELA = 0;
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _AdcInit: [wreg+status,2]
  4629  02E8  0023               	movlb	3	; select bank3
  4630  02E9  018C               	clrf	12	;volatile
  4631                           
  4632                           ;adc16.c: 7: ANSELB = 0;
  4633  02EA  018D               	clrf	13	;volatile
  4634                           
  4635                           ;adc16.c: 8: ANSELC = 0;
  4636  02EB  018E               	clrf	14	;volatile
  4637                           
  4638                           ;adc16.c: 10: FVRCON = 0b11100001;
  4639  02EC  30E1               	movlw	225
  4640  02ED  0022               	movlb	2	; select bank2
  4641  02EE  0097               	movwf	23	;volatile
  4642                           
  4643                           ;adc16.c: 12: ADCON2 = 0b00000000;
  4644  02EF  0021               	movlb	1	; select bank1
  4645  02F0  019F               	clrf	31	;volatile
  4646                           
  4647                           ;adc16.c: 13: ADCON1 = 0b11110000;
  4648  02F1  30F0               	movlw	240
  4649  02F2  009E               	movwf	30	;volatile
  4650                           
  4651                           ;adc16.c: 14: ADCON0 = 0b00000000;
  4652  02F3  019D               	clrf	29	;volatile
  4653                           
  4654                           ;adc16.c: 16: ADCON0 = 0b00010011;
  4655  02F4  3013               	movlw	19
  4656  02F5  009D               	movwf	29	;volatile
  4657  02F6  0008               	return
  4658  02F7                     __end_of_AdcInit:	
  4659  02F7                     __ptext34:	
  4660 ;; *************** function _ExtIntInit *****************
  4661 ;; Defined at:
  4662 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;		None               void
  4669 ;; Registers used:
  4670 ;;		None
  4671 ;; Tracked objects:
  4672 ;;		On entry : 1F/1
  4673 ;;		On exit  : 1F/1
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4676 ;;      Params:         0       0       0       0
  4677 ;;      Locals:         0       0       0       0
  4678 ;;      Temps:          0       0       0       0
  4679 ;;      Totals:         0       0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    5
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_main
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _ExtIntInit
  4692  02F7                     _ExtIntInit:	
  4693                           
  4694                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _ExtIntInit: []
  4698  02F7  1315               	bcf	21,6	;volatile
  4699                           
  4700                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  4701  02F8  108B               	bcf	11,1	;volatile
  4702                           
  4703                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  4704  02F9  160B               	bsf	11,4	;volatile
  4705                           
  4706                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  4707  02FA  178B               	bsf	11,7	;volatile
  4708  02FB  0008               	return
  4709  02FC                     __end_of_ExtIntInit:	
  4710  02FC                     __ptext23:	
  4711 ;; *************** function _Mrf49xaFreePacket *****************
  4712 ;; Defined at:
  4713 ;;		line 84 in file "../../../src/devices/mrf49xa_packet.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4716 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  4719 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;		None               void
  4722 ;; Registers used:
  4723 ;;		wreg, fsr1l, fsr1h, status,2
  4724 ;; Tracked objects:
  4725 ;;		On entry : 1F/0
  4726 ;;		On exit  : 1F/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4729 ;;      Params:         0       0       0       0
  4730 ;;      Locals:         0       1       0       0
  4731 ;;      Temps:          0       0       0       0
  4732 ;;      Totals:         0       1       0       0
  4733 ;;Total ram usage:        1 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    5
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_Mrf49xaTick
  4740 ;;		_HandlePacket
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _Mrf49xaFreePacket
  4746  02FC                     _Mrf49xaFreePacket:	
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  4750                           ;Mrf49xaFreePacket@packet stored from wreg
  4751  02FC  00A0               	movwf	Mrf49xaFreePacket@packet
  4752                           
  4753                           ;mrf49xa_packet.c: 86: packet->state = PKT_FREE;
  4754  02FD  0086               	movwf	6
  4755  02FE  0187               	clrf	7
  4756  02FF  0181               	clrf	1
  4757  0300  0008               	return
  4758  0301                     __end_of_Mrf49xaFreePacket:	
  4759  0301                     __ptext9:	
  4760 ;; *************** function _HandlePacket *****************
  4761 ;; Defined at:
  4762 ;;		line 108 in file "../../../src/rfstack/client.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4765 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  packet          1   21[BANK0 ] PTR struct rfTrcvPacket_
  4768 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4769 ;;  sendMsg         1   20[BANK0 ] unsigned char 
  4770 ;;  sendAck         1   19[BANK0 ] unsigned char 
  4771 ;;  needAck         1    0        unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 1F/0
  4778 ;;		On exit  : 1E/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4781 ;;      Params:         0       0       0       0
  4782 ;;      Locals:         0       4       0       0
  4783 ;;      Temps:          0       0       0       0
  4784 ;;      Totals:         0       4       0       0
  4785 ;;Total ram usage:        4 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    9
  4788 ;; This function calls:
  4789 ;;		_Mrf49xaFreePacket
  4790 ;;		_Mrf49xaTxAck
  4791 ;;		_Mrf49xaTxPacket
  4792 ;;		_handleFwCmd
  4793 ;;		_handleFwRead
  4794 ;;		_handleFwWrite
  4795 ;; This function is called by:
  4796 ;;		_Mrf49xaTick
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           
  4801                           ;psect for function _HandlePacket
  4802  0301                     _HandlePacket:	
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4806                           ;HandlePacket@packet stored from wreg
  4807  0301  00B5               	movwf	HandlePacket@packet
  4808                           
  4809                           ;client.c: 110: bool_t sendMsg = 0;
  4810  0302  01B4               	clrf	HandlePacket@sendMsg
  4811                           
  4812                           ;client.c: 111: bool_t sendAck = 0;
  4813  0303  01B3               	clrf	HandlePacket@sendAck
  4814                           
  4815                           ;client.c: 115: switch (packet->packet.id)
  4816  0304  2B34               	goto	l2564
  4817  0305                     l2540:	
  4818                           
  4819                           ;client.c: 118: packet->packet.data[0] = 2;
  4820  0305  0835               	movf	HandlePacket@packet,w
  4821  0306  3E06               	addlw	6
  4822  0307  0086               	movwf	6
  4823  0308  3002               	movlw	2
  4824  0309  0187               	clrf	7
  4825  030A  0081               	movwf	1
  4826  030B                     l2542:	
  4827                           
  4828                           ;client.c: 119: sendMsg = 1;
  4829  030B  0020               	movlb	0	; select bank0
  4830  030C  01B4               	clrf	HandlePacket@sendMsg
  4831  030D  0AB4               	incf	HandlePacket@sendMsg,f
  4832                           
  4833                           ;client.c: 120: break;
  4834  030E  2B4F               	goto	l2566
  4835  030F                     l2544:	
  4836                           
  4837                           ;client.c: 123: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  4838                           ;client.c: 124: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  4839  030F  0835               	movf	HandlePacket@packet,w
  4840  0310  3E07               	addlw	7
  4841  0311  0086               	movwf	6
  4842  0312  0187               	clrf	7
  4843  0313  0021               	movlb	1	; select bank1
  4844  0314  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  4845  0315  0601               	xorwf	1,w
  4846  0316  1D03               	skipz
  4847  0317  2B4F               	goto	l2566
  4848  0318  0020               	movlb	0	; select bank0
  4849  0319  0835               	movf	HandlePacket@packet,w
  4850  031A  3E06               	addlw	6
  4851  031B  0086               	movwf	6
  4852  031C  0021               	movlb	1	; select bank1
  4853  031D  0857               	movf	(_rfTrcvStatus^(0+128)+55),w
  4854  031E  0601               	xorwf	1,w
  4855  031F  1D03               	skipz
  4856  0320  2B4F               	goto	l2566
  4857                           
  4858                           ;client.c: 125: {
  4859                           ;client.c: 126: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  4860  0321  3002               	movlw	2
  4861  0322  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  4862  0323  2B4F               	goto	l2566
  4863  0324                     l504:	
  4864                           ;client.c: 131: syncedTime = *((uint32_t*) packet->packet.data);
  4865                           
  4866                           
  4867                           ;client.c: 132: sendAck = 1;
  4868  0324  01B3               	clrf	HandlePacket@sendAck
  4869  0325  0AB3               	incf	HandlePacket@sendAck,f
  4870                           
  4871                           ;client.c: 133: break;
  4872  0326  2B4F               	goto	l2566
  4873  0327                     l2550:	
  4874                           
  4875                           ;client.c: 140: handleFwCmd(packet);
  4876  0327  0835               	movf	HandlePacket@packet,w
  4877  0328  2361  3180         	fcall	_handleFwCmd
  4878  032A  2B0B               	goto	l2542
  4879  032B                     l2554:	
  4880                           
  4881                           ;client.c: 145: handleFwWrite(packet);
  4882  032B  0835               	movf	HandlePacket@packet,w
  4883  032C  3185  25E3  3180   	fcall	_handleFwWrite
  4884  032F  2B0B               	goto	l2542
  4885  0330                     l2558:	
  4886                           
  4887                           ;client.c: 150: handleFwRead(packet);
  4888  0330  0835               	movf	HandlePacket@packet,w
  4889  0331  2395  3180         	fcall	_handleFwRead
  4890  0333  2B0B               	goto	l2542
  4891  0334                     l2564:	
  4892  0334  0835               	movf	HandlePacket@packet,w
  4893  0335  3E04               	addlw	4
  4894  0336  0086               	movwf	6
  4895  0337  0187               	clrf	7
  4896  0338  0801               	movf	1,w
  4897                           
  4898                           ; Switch size 1, requested type "space"
  4899                           ; Number of cases is 7, Range of values is 160 to 194
  4900                           ; switch strategies available:
  4901                           ; Name         Instructions Cycles
  4902                           ; simple_byte           22    12 (average)
  4903                           ; direct_byte           79     9 (fixed)
  4904                           ; jumptable            263     9 (fixed)
  4905                           ;	Chosen strategy is simple_byte
  4906  0339  3AA0               	xorlw	160	; case 160
  4907  033A  1903               	skipnz
  4908  033B  2B05               	goto	l2540
  4909  033C  3A01               	xorlw	1	; case 161
  4910  033D  1903               	skipnz
  4911  033E  2B0F               	goto	l2544
  4912  033F  3A03               	xorlw	3	; case 162
  4913  0340  1903               	skipnz
  4914  0341  2B24               	goto	l504
  4915  0342  3A01               	xorlw	1	; case 163
  4916  0343  1903               	skipnz
  4917  0344  2B4F               	goto	l2566
  4918  0345  3A63               	xorlw	99	; case 192
  4919  0346  1903               	skipnz
  4920  0347  2B27               	goto	l2550
  4921  0348  3A01               	xorlw	1	; case 193
  4922  0349  1903               	skipnz
  4923  034A  2B2B               	goto	l2554
  4924  034B  3A03               	xorlw	3	; case 194
  4925  034C  1903               	skipnz
  4926  034D  2B30               	goto	l2558
  4927  034E  2B4F               	goto	l2566
  4928  034F                     l2566:	
  4929                           
  4930                           ;client.c: 156: if (sendMsg)
  4931  034F  0020               	movlb	0	; select bank0
  4932  0350  0834               	movf	HandlePacket@sendMsg,w
  4933  0351  1903               	btfsc	3,2
  4934  0352  2B59               	goto	l2570
  4935                           
  4936                           ;client.c: 157: Mrf49xaTxPacket(packet, 1, needAck);
  4937  0353  01A0               	clrf	Mrf49xaTxPacket@response
  4938  0354  0AA0               	incf	Mrf49xaTxPacket@response,f
  4939  0355  01A1               	clrf	Mrf49xaTxPacket@needAck
  4940  0356  0835               	movf	HandlePacket@packet,w
  4941  0357  3187  2F30         	ljmp	_Mrf49xaTxPacket
  4942  0359                     l2570:	
  4943                           
  4944                           ;client.c: 158: else if (sendAck)
  4945  0359  0833               	movf	HandlePacket@sendAck,w
  4946  035A  1903               	btfsc	3,2
  4947  035B  2B5F               	goto	l2574
  4948                           
  4949                           ;client.c: 159: Mrf49xaTxAck(packet);
  4950  035C  0835               	movf	HandlePacket@packet,w
  4951  035D  3187  2F10         	ljmp	_Mrf49xaTxAck
  4952  035F                     l2574:	
  4953                           
  4954                           ;client.c: 160: else
  4955                           ;client.c: 161: Mrf49xaFreePacket(packet);
  4956  035F  0835               	movf	HandlePacket@packet,w
  4957  0360  2AFC               	ljmp	_Mrf49xaFreePacket
  4958  0361                     __end_of_HandlePacket:	
  4959  0361                     __ptext13:	
  4960 ;; *************** function _handleFwCmd *****************
  4961 ;; Defined at:
  4962 ;;		line 19 in file "../../../src/rfstack/client.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4965 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  4968 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4969 ;; Return value:  Size  Location     Type
  4970 ;;		None               void
  4971 ;; Registers used:
  4972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4973 ;; Tracked objects:
  4974 ;;		On entry : 1F/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4978 ;;      Params:         0       0       0       0
  4979 ;;      Locals:         0       1       0       0
  4980 ;;      Temps:          0       0       0       0
  4981 ;;      Totals:         0       1       0       0
  4982 ;;Total ram usage:        1 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    8
  4985 ;; This function calls:
  4986 ;;		_eepromRxBytes
  4987 ;; This function is called by:
  4988 ;;		_HandlePacket
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _handleFwCmd
  4994  0361                     _handleFwCmd:	
  4995                           
  4996                           ;incstack = 0
  4997                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4998                           ;handleFwCmd@packet stored from wreg
  4999  0361  00A8               	movwf	handleFwCmd@packet
  5000                           
  5001                           ;client.c: 41: break;
  5002                           
  5003                           ;client.c: 21: switch(packet->packet.data[0])
  5004  0362  3E06               	addlw	6
  5005  0363  0086               	movwf	6
  5006  0364  0187               	clrf	7
  5007  0365  0801               	movf	1,w
  5008                           
  5009                           ; Switch size 1, requested type "space"
  5010                           ; Number of cases is 8, Range of values is 0 to 7
  5011                           ; switch strategies available:
  5012                           ; Name         Instructions Cycles
  5013                           ; direct_byte           22     6 (fixed)
  5014                           ; simple_byte           25    13 (average)
  5015                           ; jumptable            260     6 (fixed)
  5016                           ;	Chosen strategy is direct_byte
  5017  0366  0084               	movwf	4
  5018  0367  3008               	movlw	8
  5019  0368  0204               	subwf	4,w
  5020  0369  1803               	skipnc
  5021  036A  0008               	return
  5022  036B  3188               	movlp	high S2888
  5023  036C  3504               	lslf	4,w
  5024  036D  3E00               	addlw	low S2888
  5025  036E  0082               	movwf	2
  5026  036F                     l488:	
  5027  036F  0008               	return
  5028  0370                     l2296:	
  5029                           
  5030                           ;client.c: 28: packet->packet.size = 5;
  5031  0370  0A28               	incf	handleFwCmd@packet,w
  5032  0371  0086               	movwf	6
  5033  0372  3005               	movlw	5
  5034  0373  0187               	clrf	7
  5035  0374  0081               	movwf	1
  5036                           
  5037                           ;client.c: 29: packet->packet.data[1] = 0;
  5038  0375  0828               	movf	handleFwCmd@packet,w
  5039  0376  3E07               	addlw	7
  5040  0377  0086               	movwf	6
  5041  0378  0181               	clrf	1
  5042                           
  5043                           ;client.c: 30: packet->packet.data[2] = 1;
  5044  0379  0828               	movf	handleFwCmd@packet,w
  5045  037A  3E08               	addlw	8
  5046  037B  0086               	movwf	6
  5047  037C  0181               	clrf	1
  5048  037D  0A81               	incf	1,f
  5049                           
  5050                           ;client.c: 32: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  5051  037E  01A4               	clrf	eepromRxBytes@address
  5052  037F  01A5               	clrf	eepromRxBytes@address+1
  5053  0380  0828               	movf	handleFwCmd@packet,w
  5054  0381  3E09               	addlw	9
  5055  0382  00A6               	movwf	eepromRxBytes@data
  5056  0383  3002               	movlw	2
  5057  0384  00A7               	movwf	eepromRxBytes@size
  5058  0385  3186  2E72         	ljmp	l2174
  5059  0387                     l2304:	
  5060                           ;client.c: 34: break;
  5061                           
  5062                           
  5063                           ;client.c: 37: packet->packet.size = 2;
  5064  0387  0A28               	incf	handleFwCmd@packet,w
  5065  0388  0086               	movwf	6
  5066  0389  3002               	movlw	2
  5067  038A  0187               	clrf	7
  5068  038B  0081               	movwf	1
  5069                           
  5070                           ;client.c: 38: eepromRxBytes(0x2, &(packet->packet.data[1]), 1);
  5071  038C  00A4               	movwf	eepromRxBytes@address
  5072  038D  01A5               	clrf	eepromRxBytes@address+1
  5073  038E  0828               	movf	handleFwCmd@packet,w
  5074  038F  3E07               	addlw	7
  5075  0390  00A6               	movwf	eepromRxBytes@data
  5076  0391  01A7               	clrf	eepromRxBytes@size
  5077  0392  0AA7               	incf	eepromRxBytes@size,f
  5078  0393  3186  2E72         	ljmp	l2174
  5079  0395                     __end_of_handleFwCmd:	
  5080  0395                     __ptext12:	
  5081 ;; *************** function _handleFwRead *****************
  5082 ;; Defined at:
  5083 ;;		line 94 in file "../../../src/rfstack/client.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5086 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  5089 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5090 ;;  address         2    0        unsigned int 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 1F/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5100 ;;      Params:         0       0       0       0
  5101 ;;      Locals:         0       3       0       0
  5102 ;;      Temps:          0       0       0       0
  5103 ;;      Totals:         0       3       0       0
  5104 ;;Total ram usage:        3 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    8
  5107 ;; This function calls:
  5108 ;;		_eepromRxBytes
  5109 ;; This function is called by:
  5110 ;;		_HandlePacket
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           
  5115                           ;psect for function _handleFwRead
  5116  0395                     _handleFwRead:	
  5117                           
  5118                           ;incstack = 0
  5119                           ; Regs used in _handleFwRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5120                           ;handleFwRead@packet stored from wreg
  5121  0395  00AA               	movwf	handleFwRead@packet
  5122                           
  5123                           ;client.c: 96: packet->packet.size = 16;
  5124  0396  0A2A               	incf	handleFwRead@packet,w
  5125  0397  0086               	movwf	6
  5126  0398  3010               	movlw	16
  5127  0399  0187               	clrf	7
  5128  039A  0081               	movwf	1
  5129                           
  5130                           ;client.c: 104: eepromRxBytes(address, packet->packet.data+8, 8);
  5131  039B  01A4               	clrf	eepromRxBytes@address
  5132  039C  01A5               	clrf	eepromRxBytes@address+1
  5133  039D  082A               	movf	handleFwRead@packet,w
  5134  039E  3E0E               	addlw	14
  5135  039F  00A6               	movwf	eepromRxBytes@data
  5136  03A0  3008               	movlw	8
  5137  03A1  00A7               	movwf	eepromRxBytes@size
  5138  03A2  3186  2E72         	ljmp	l2174
  5139  03A4                     __end_of_handleFwRead:	
  5140  03A4                     __ptext7:	
  5141 ;; *************** function _Mrf49xaPacketPending *****************
  5142 ;; Defined at:
  5143 ;;		line 5 in file "../../../src/devices/mrf49xa_packet.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;		None
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;		None
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      unsigned char 
  5150 ;; Registers used:
  5151 ;;		wreg
  5152 ;; Tracked objects:
  5153 ;;		On entry : 1F/0
  5154 ;;		On exit  : 1F/1
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5157 ;;      Params:         0       0       0       0
  5158 ;;      Locals:         0       0       0       0
  5159 ;;      Temps:          0       0       0       0
  5160 ;;      Totals:         0       0       0       0
  5161 ;;Total ram usage:        0 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    5
  5164 ;; This function calls:
  5165 ;;		Nothing
  5166 ;; This function is called by:
  5167 ;;		_Mrf49xaTick
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _Mrf49xaPacketPending
  5173  03A4                     _Mrf49xaPacketPending:	
  5174                           
  5175                           ;mrf49xa_packet.c: 7: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  5176                           ;mrf49xa_packet.c: 8: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  5177                           
  5178                           ;incstack = 0
  5179                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  5180  03A4  0021               	movlb	1	; select bank1
  5181  03A5  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  5182  03A6  3A05               	xorlw	5
  5183  03A7  1903               	skipnz
  5184  03A8  3401               	retlw	1
  5185  03A9  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  5186  03AA  3A05               	xorlw	5
  5187  03AB  1903               	btfsc	3,2
  5188                           
  5189                           ;mrf49xa_packet.c: 9: return 1;
  5190  03AC  3401               	retlw	1
  5191                           
  5192                           ;mrf49xa_packet.c: 10: else
  5193                           ;mrf49xa_packet.c: 11: return 0;
  5194  03AD  3400               	retlw	0
  5195  03AE                     __end_of_Mrf49xaPacketPending:	
  5196  03AE                     __ptext6:	
  5197 ;; *************** function _Mrf49xaRxPacket *****************
  5198 ;; Defined at:
  5199 ;;		line 89 in file "../../../src/devices/mrf49xa_packet.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      PTR struct rfTrcvPacket_
  5206 ;; Registers used:
  5207 ;;		wreg
  5208 ;; Tracked objects:
  5209 ;;		On entry : 1F/1
  5210 ;;		On exit  : 1F/1
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5213 ;;      Params:         0       0       0       0
  5214 ;;      Locals:         0       0       0       0
  5215 ;;      Temps:          0       0       0       0
  5216 ;;      Totals:         0       0       0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    5
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_Mrf49xaTick
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           
  5228                           ;psect for function _Mrf49xaRxPacket
  5229  03AE                     _Mrf49xaRxPacket:	
  5230                           
  5231                           ;mrf49xa_packet.c: 91: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  5232                           
  5233                           ;incstack = 0
  5234                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  5235  03AE  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  5236  03AF  3A05               	xorlw	5
  5237  03B0  1D03               	skipz
  5238  03B1  2BB5               	goto	l2512
  5239                           
  5240                           ;mrf49xa_packet.c: 92: {
  5241                           ;mrf49xa_packet.c: 93: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  5242  03B2  3006               	movlw	6
  5243  03B3  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  5244                           
  5245                           ;mrf49xa_packet.c: 94: return &(rfTrcvStatus.rxPacket[0]);
  5246  03B4  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  5247  03B5                     l2512:	
  5248                           
  5249                           ;mrf49xa_packet.c: 95: }
  5250                           ;mrf49xa_packet.c: 97: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  5251  03B5  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  5252  03B6  3A05               	xorlw	5
  5253  03B7  1D03               	skipz
  5254  03B8  3400               	retlw	0
  5255                           
  5256                           ;mrf49xa_packet.c: 98: {
  5257                           ;mrf49xa_packet.c: 99: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  5258  03B9  3006               	movlw	6
  5259  03BA  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  5260                           
  5261                           ;mrf49xa_packet.c: 100: return &(rfTrcvStatus.rxPacket[1]);
  5262  03BB  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  5263  03BC                     __end_of_Mrf49xaRxPacket:	
  5264                           ;mrf49xa_packet.c: 101: }
  5265                           ;mrf49xa_packet.c: 103: return (0);
  5266                           
  5267  03BC                     __ptext3:	
  5268 ;; *************** function _RfSendPowerState *****************
  5269 ;; Defined at:
  5270 ;;		line 5 in file "../../../src/rfstack/client.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  5275 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 1F/0
  5282 ;;		On exit  : 1F/1
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5285 ;;      Params:         0       0       0       0
  5286 ;;      Locals:         0       1       0       0
  5287 ;;      Temps:          0       0       0       0
  5288 ;;      Totals:         0       1       0       0
  5289 ;;Total ram usage:        1 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    6
  5292 ;; This function calls:
  5293 ;;		_Mrf49xaAllocPacket
  5294 ;;		_Mrf49xaTxPacket
  5295 ;; This function is called by:
  5296 ;;		_main
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _RfSendPowerState
  5302  03BC                     _RfSendPowerState:	
  5303                           
  5304                           ;client.c: 7: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5308  03BC  2411               	fcall	_Mrf49xaAllocPacket
  5309  03BD  0020               	movlb	0	; select bank0
  5310  03BE  00A6               	movwf	RfSendPowerState@packet
  5311                           
  5312                           ;client.c: 9: packet->packet.size = 2;
  5313  03BF  0A26               	incf	RfSendPowerState@packet,w
  5314  03C0  0086               	movwf	6
  5315  03C1  3002               	movlw	2
  5316  03C2  0187               	clrf	7
  5317  03C3  0081               	movwf	1
  5318                           
  5319                           ;client.c: 10: packet->packet.id = RF_POWER_STATUS;
  5320  03C4  0826               	movf	RfSendPowerState@packet,w
  5321  03C5  3E04               	addlw	4
  5322  03C6  0086               	movwf	6
  5323  03C7  30A3               	movlw	163
  5324  03C8  0081               	movwf	1
  5325                           
  5326                           ;client.c: 11: packet->packet.dst = 0xFF;
  5327  03C9  0826               	movf	RfSendPowerState@packet,w
  5328  03CA  3E03               	addlw	3
  5329  03CB  0086               	movwf	6
  5330  03CC  30FF               	movlw	255
  5331  03CD  0081               	movwf	1
  5332                           
  5333                           ;client.c: 13: packet->packet.data[0] = 0x55;
  5334  03CE  0826               	movf	RfSendPowerState@packet,w
  5335  03CF  3E06               	addlw	6
  5336  03D0  0086               	movwf	6
  5337  03D1  3055               	movlw	85
  5338  03D2  0081               	movwf	1
  5339                           
  5340                           ;client.c: 14: packet->packet.data[1] = 0xAA;
  5341  03D3  0826               	movf	RfSendPowerState@packet,w
  5342  03D4  3E07               	addlw	7
  5343  03D5  0086               	movwf	6
  5344  03D6  30AA               	movlw	170
  5345  03D7  0081               	movwf	1
  5346                           
  5347                           ;client.c: 16: Mrf49xaTxPacket(packet, 0, 1);
  5348  03D8  01A0               	clrf	Mrf49xaTxPacket@response
  5349  03D9  01A1               	clrf	Mrf49xaTxPacket@needAck
  5350  03DA  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  5351  03DB  0826               	movf	RfSendPowerState@packet,w
  5352  03DC  3187  2F30         	ljmp	_Mrf49xaTxPacket
  5353  03DE                     __end_of_RfSendPowerState:	
  5354  03DE                     __ptext1:	
  5355 ;; *************** function _SysInitGpio *****************
  5356 ;; Defined at:
  5357 ;;		line 28 in file "../../../src/node/main.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;		None
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;		None
  5362 ;; Return value:  Size  Location     Type
  5363 ;;		None               void
  5364 ;; Registers used:
  5365 ;;		None
  5366 ;; Tracked objects:
  5367 ;;		On entry : 17F/4
  5368 ;;		On exit  : 17F/2
  5369 ;;		Unchanged: 160/0
  5370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5371 ;;      Params:         0       0       0       0
  5372 ;;      Locals:         0       0       0       0
  5373 ;;      Temps:          0       0       0       0
  5374 ;;      Totals:         0       0       0       0
  5375 ;;Total ram usage:        0 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    5
  5378 ;; This function calls:
  5379 ;;		Nothing
  5380 ;; This function is called by:
  5381 ;;		_main
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           
  5386                           ;psect for function _SysInitGpio
  5387  03DE                     _SysInitGpio:	
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in _SysInitGpio: []
  5391                           ;main.c: 30: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  5392  03DE  0021               	movlb	1	; select bank1
  5393  03DF  150C               	bsf	12,2	;volatile
  5394  03E0  120C               	bcf	12,4	;volatile
  5395  03E1  128C               	bcf	12,5	;volatile
  5396  03E2  0022               	movlb	2	; select bank2
  5397  03E3  120C               	bcf	12,4	;volatile
  5398  03E4  128C               	bcf	12,5	;volatile
  5399                           
  5400                           ;main.c: 31: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  5401  03E5  0021               	movlb	1	; select bank1
  5402  03E6  120D               	bcf	13,4	;volatile
  5403  03E7  130D               	bcf	13,6	;volatile
  5404  03E8  138D               	bcf	13,7	;volatile
  5405  03E9  168D               	bsf	13,5	;volatile
  5406                           
  5407                           ;main.c: 32: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; PORTCbits
  5408  03EA  108E               	bcf	14,1	;volatile
  5409  03EB  110E               	bcf	14,2	;volatile
  5410  03EC  120E               	bcf	14,4	;volatile
  5411  03ED  130E               	bcf	14,6	;volatile
  5412  03EE  138E               	bcf	14,7	;volatile
  5413  03EF  140E               	bsf	14,0	;volatile
  5414  03F0  158E               	bsf	14,3	;volatile
  5415  03F1  168E               	bsf	14,5	;volatile
  5416  03F2  0022               	movlb	2	; select bank2
  5417  03F3  108E               	bcf	14,1	;volatile
  5418  03F4  110E               	bcf	14,2	;volatile
  5419  03F5  120E               	bcf	14,4	;volatile
  5420  03F6  0020               	movlb	0	; select bank0
  5421  03F7  170E               	bsf	14,6	;volatile
  5422  03F8  0022               	movlb	2	; select bank2
  5423  03F9  138E               	bcf	14,7	;volatile
  5424                           
  5425                           ;main.c: 34: LATCbits.LATC1 = 0;
  5426  03FA  108E               	bcf	14,1	;volatile
  5427                           
  5428                           ;main.c: 35: LATCbits.LATC2 = 0;
  5429  03FB  110E               	bcf	14,2	;volatile
  5430  03FC  0008               	return
  5431  03FD                     __end_of_SysInitGpio:	
  5432  03FD                     PL4:	
  5433  03FD  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5434  03FE  390F               	andlw	15
  5435  03FF  0020               	movlb	0	; select bank0
  5436  0400  00B6               	movwf	??_Mrf49xaTick
  5437  0401  0AB6               	incf	??_Mrf49xaTick,f
  5438  0402  0021               	movlb	1	; select bank1
  5439  0403  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  5440  0404  0020               	movlb	0	; select bank0
  5441  0405  0636               	xorwf	??_Mrf49xaTick,w
  5442  0406  39F0               	andlw	-16
  5443  0407  0636               	xorwf	??_Mrf49xaTick,w
  5444  0408  0021               	movlb	1	; select bank1
  5445  0409  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  5446  040A  0008               	return
  5447  040B                     __end_ofPL4:	
  5448  040B                     PL8:	
  5449  040B  0020               	movlb	0	; select bank0
  5450  040C  0825               	movf	Mrf49xaServe@data,w
  5451  040D  0081               	movwf	1
  5452  040E  0021               	movlb	1	; select bank1
  5453  040F  0820               	movf	_rfTrcvStatus^(0+128),w
  5454  0410  0008               	return
  5455  0411                     __end_ofPL8:	
  5456  0411                     __ptext4:	
  5457 ;; *************** function _Mrf49xaAllocPacket *****************
  5458 ;; Defined at:
  5459 ;;		line 106 in file "../../../src/devices/mrf49xa_packet.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  1    wreg      PTR struct rfTrcvPacket_
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0
  5468 ;; Tracked objects:
  5469 ;;		On entry : 1F/0
  5470 ;;		On exit  : 1F/1
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5473 ;;      Params:         0       0       0       0
  5474 ;;      Locals:         0       0       0       0
  5475 ;;      Temps:          0       0       0       0
  5476 ;;      Totals:         0       0       0       0
  5477 ;;Total ram usage:        0 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    5
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_RfSendPowerState
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           
  5488                           ;psect for function _Mrf49xaAllocPacket
  5489  0411                     _Mrf49xaAllocPacket:	
  5490                           
  5491                           ;mrf49xa_packet.c: 108: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  5495  0411  0021               	movlb	1	; select bank1
  5496  0412  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  5497  0413  1D03               	skipz
  5498  0414  2C18               	goto	l2528
  5499                           
  5500                           ;mrf49xa_packet.c: 109: {
  5501                           ;mrf49xa_packet.c: 110: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  5502  0415  3006               	movlw	6
  5503  0416  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  5504                           
  5505                           ;mrf49xa_packet.c: 111: return &(rfTrcvStatus.rxPacket[0]);
  5506  0417  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  5507  0418                     l2528:	
  5508                           
  5509                           ;mrf49xa_packet.c: 112: }
  5510                           ;mrf49xa_packet.c: 114: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  5511  0418  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  5512  0419  1D03               	skipz
  5513  041A  3400               	retlw	0
  5514                           
  5515                           ;mrf49xa_packet.c: 115: {
  5516                           ;mrf49xa_packet.c: 116: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  5517  041B  3006               	movlw	6
  5518  041C  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  5519                           
  5520                           ;mrf49xa_packet.c: 117: return &(rfTrcvStatus.rxPacket[1]);
  5521  041D  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  5522  041E                     __end_of_Mrf49xaAllocPacket:	
  5523                           ;mrf49xa_packet.c: 118: }
  5524                           ;mrf49xa_packet.c: 120: return (0);
  5525                           
  5526                           
  5527                           	psect	text2
  5528  05D8                     __ptext2:	
  5529 ;; *************** function _SoftI2cInit *****************
  5530 ;; Defined at:
  5531 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 17F/2
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5545 ;;      Params:         0       0       0       0
  5546 ;;      Locals:         0       0       0       0
  5547 ;;      Temps:          0       0       0       0
  5548 ;;      Totals:         0       0       0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    7
  5552 ;; This function calls:
  5553 ;;		_SoftI2cStart
  5554 ;;		_SoftI2cStop
  5555 ;;		_SoftI2cTxByte
  5556 ;; This function is called by:
  5557 ;;		_main
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           
  5562                           ;psect for function _SoftI2cInit
  5563  05D8                     _SoftI2cInit:	
  5564                           
  5565                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  5569  05D8  170D               	bsf	13,6	;volatile
  5570                           
  5571                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  5572  05D9  160D               	bsf	13,4	;volatile
  5573                           
  5574                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  5575  05DA  0021               	movlb	1	; select bank1
  5576  05DB  130D               	bcf	13,6	;volatile
  5577                           
  5578                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  5579  05DC  120D               	bcf	13,4	;volatile
  5580                           
  5581                           ;softI2c.c: 32: SoftI2cStart();
  5582  05DD  2703  3185         	fcall	_SoftI2cStart
  5583                           
  5584                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  5585  05DF  3000               	movlw	0
  5586  05E0  2696  3185         	fcall	_SoftI2cTxByte
  5587                           
  5588                           ;softI2c.c: 34: SoftI2cStop();
  5589  05E2  2E32               	ljmp	l1962
  5590  05E3                     __end_of_SoftI2cInit:	
  5591  05E3                     __ptext10:	
  5592 ;; *************** function _handleFwWrite *****************
  5593 ;; Defined at:
  5594 ;;		line 66 in file "../../../src/rfstack/client.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  5597 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  packet          1   17[BANK0 ] PTR struct rfTrcvPacket_
  5600 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  5601 ;;  i               1   14[BANK0 ] unsigned char 
  5602 ;;  address         2   15[BANK0 ] unsigned int 
  5603 ;;  packetData      1   13[BANK0 ] PTR unsigned int 
  5604 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), NULL(0), 
  5605 ;; Return value:  Size  Location     Type
  5606 ;;		None               void
  5607 ;; Registers used:
  5608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 1F/0
  5611 ;;		On exit  : 1F/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5614 ;;      Params:         0       0       0       0
  5615 ;;      Locals:         0       5       0       0
  5616 ;;      Temps:          0       5       0       0
  5617 ;;      Totals:         0      10       0       0
  5618 ;;Total ram usage:       10 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    8
  5621 ;; This function calls:
  5622 ;;		_eepromRxBytes
  5623 ;;		_eepromTxBytes
  5624 ;; This function is called by:
  5625 ;;		_HandlePacket
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           
  5630                           ;psect for function _handleFwWrite
  5631  05E3                     _handleFwWrite:	
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in _handleFwWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5635                           ;handleFwWrite@packet stored from wreg
  5636  05E3  00B1               	movwf	handleFwWrite@packet
  5637                           
  5638                           ;client.c: 69: UI16_t* packetData = (UI16_t*) &(packet->packet.data[8]);
  5639  05E4  3E0E               	addlw	14
  5640  05E5  00AD               	movwf	handleFwWrite@packetData
  5641                           
  5642                           ;client.c: 72: eepromTxBytes(address, packet->packet.data+8, 8);
  5643  05E6  01A4               	clrf	eepromTxBytes@address
  5644  05E7  01A5               	clrf	eepromTxBytes@address+1
  5645  05E8  0831               	movf	handleFwWrite@packet,w
  5646  05E9  3E0E               	addlw	14
  5647  05EA  00A6               	movwf	eepromTxBytes@data
  5648  05EB  3008               	movlw	8
  5649  05EC  00A7               	movwf	eepromTxBytes@size
  5650  05ED  2656  3185         	fcall	_eepromTxBytes
  5651                           
  5652                           ;client.c: 75: _delay((unsigned long)((5)*(16000000/4000.0)));
  5653  05EF  301A               	movlw	26
  5654  05F0  0020               	movlb	0	; select bank0
  5655  05F1  00A9               	movwf	??_handleFwWrite+1
  5656  05F2  30F8               	movlw	248
  5657  05F3  00A8               	movwf	??_handleFwWrite
  5658  05F4                     u2117:	
  5659  05F4  0BA8               	decfsz	??_handleFwWrite,f
  5660  05F5  2DF4               	goto	u2117
  5661  05F6  0BA9               	decfsz	??_handleFwWrite+1,f
  5662  05F7  2DF4               	goto	u2117
  5663  05F8  0000               	nop
  5664                           
  5665                           ;client.c: 77: eepromRxBytes(address, packet->packet.data+8, 8);
  5666  05F9  0020               	movlb	0	; select bank0
  5667  05FA  01A4               	clrf	eepromRxBytes@address
  5668  05FB  01A5               	clrf	eepromRxBytes@address+1
  5669  05FC  0831               	movf	handleFwWrite@packet,w
  5670  05FD  3E0E               	addlw	14
  5671  05FE  00A6               	movwf	eepromRxBytes@data
  5672  05FF  3008               	movlw	8
  5673  0600  00A7               	movwf	eepromRxBytes@size
  5674  0601  2672  3185         	fcall	_eepromRxBytes
  5675                           
  5676                           ;client.c: 80: address = 0xCAFE;
  5677  0603  30FE               	movlw	254
  5678  0604  0020               	movlb	0	; select bank0
  5679  0605  00AF               	movwf	handleFwWrite@address
  5680  0606  30CA               	movlw	202
  5681  0607  00B0               	movwf	handleFwWrite@address+1
  5682                           
  5683                           ;client.c: 82: for (uint8_t i = 0; i < 4; i++)
  5684  0608  01AE               	clrf	handleFwWrite@i
  5685  0609                     l2336:	
  5686                           
  5687                           ;client.c: 83: {
  5688                           ;client.c: 84: address = address ^ (packetData[i] ^ 0x5AA5);
  5689  0609  352E               	lslf	handleFwWrite@i,w
  5690  060A  072D               	addwf	handleFwWrite@packetData,w
  5691  060B  00A8               	movwf	??_handleFwWrite
  5692  060C  0086               	movwf	6
  5693  060D  0187               	clrf	7
  5694  060E  3F40               	moviw [0]fsr1
  5695  060F  00A9               	movwf	??_handleFwWrite+1
  5696  0610  3F41               	moviw [1]fsr1
  5697  0611  00AA               	movwf	??_handleFwWrite+2
  5698  0612  082F               	movf	handleFwWrite@address,w
  5699  0613  0629               	xorwf	??_handleFwWrite+1,w
  5700  0614  00AB               	movwf	??_handleFwWrite+3
  5701  0615  0830               	movf	handleFwWrite@address+1,w
  5702  0616  062A               	xorwf	??_handleFwWrite+2,w
  5703  0617  00AC               	movwf	??_handleFwWrite+4
  5704  0618  30A5               	movlw	165
  5705  0619  062B               	xorwf	??_handleFwWrite+3,w
  5706  061A  00AF               	movwf	handleFwWrite@address
  5707  061B  305A               	movlw	90
  5708  061C  062C               	xorwf	??_handleFwWrite+4,w
  5709  061D  00B0               	movwf	handleFwWrite@address+1
  5710  061E  3004               	movlw	4
  5711  061F  0AAE               	incf	handleFwWrite@i,f
  5712  0620  022E               	subwf	handleFwWrite@i,w
  5713  0621  1C03               	skipc
  5714  0622  2E09               	goto	l2336
  5715                           
  5716                           ;client.c: 85: }
  5717                           ;client.c: 87: packet->packet.data[8] = address >> 8;
  5718  0623  0831               	movf	handleFwWrite@packet,w
  5719  0624  3E0E               	addlw	14
  5720  0625  0086               	movwf	6
  5721  0626  0830               	movf	handleFwWrite@address+1,w
  5722  0627  0081               	movwf	1
  5723                           
  5724                           ;client.c: 88: packet->packet.data[9] = address & 0xFF;
  5725  0628  0831               	movf	handleFwWrite@packet,w
  5726  0629  3E0F               	addlw	15
  5727  062A  0086               	movwf	6
  5728  062B  082F               	movf	handleFwWrite@address,w
  5729  062C  0081               	movwf	1
  5730                           
  5731                           ;client.c: 90: packet->packet.size = 10;
  5732  062D  0A31               	incf	handleFwWrite@packet,w
  5733  062E  0086               	movwf	6
  5734  062F  300A               	movlw	10
  5735  0630  0081               	movwf	1
  5736  0631  0008               	return
  5737  0632                     __end_of_handleFwWrite:	
  5738  0632                     __ptext16:	
  5739 ;; *************** function _SoftI2cStop *****************
  5740 ;; Defined at:
  5741 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;		None
  5746 ;; Return value:  Size  Location     Type
  5747 ;;		None               void
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0, pclath, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/1
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5755 ;;      Params:         0       0       0       0
  5756 ;;      Locals:         0       0       0       0
  5757 ;;      Temps:          0       0       0       0
  5758 ;;      Totals:         0       0       0       0
  5759 ;;Total ram usage:        0 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    6
  5762 ;; This function calls:
  5763 ;;		_SoftI2cNop
  5764 ;; This function is called by:
  5765 ;;		_SoftI2cInit
  5766 ;;		_eepromRxBytes
  5767 ;;		_eepromTxBytes
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _SoftI2cStop
  5773  0632                     _SoftI2cStop:	
  5774  0632                     l1962:	
  5775                           ;incstack = 0
  5776                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5777                           
  5778                           
  5779                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  5780  0632  0021               	movlb	1	; select bank1
  5781  0633  120D               	bcf	13,4	;volatile
  5782                           
  5783                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  5784  0634  0022               	movlb	2	; select bank2
  5785  0635  120D               	bcf	13,4	;volatile
  5786                           
  5787                           ;softI2c.c: 78: SoftI2cNop();
  5788  0636  26FC  3185         	fcall	_SoftI2cNop
  5789                           
  5790                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  5791  0638  0022               	movlb	2	; select bank2
  5792  0639  170D               	bsf	13,6	;volatile
  5793                           
  5794                           ;softI2c.c: 81: SoftI2cNop();
  5795  063A  26FC  3185         	fcall	_SoftI2cNop
  5796                           
  5797                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  5798  063C  0022               	movlb	2	; select bank2
  5799  063D  160D               	bsf	13,4	;volatile
  5800                           
  5801                           ;softI2c.c: 83: SoftI2cNop();
  5802  063E  26FC  3185         	fcall	_SoftI2cNop
  5803                           
  5804                           ;softI2c.c: 84: SoftI2cNop();
  5805  0640  2EFC               	ljmp	l1918
  5806  0641                     __end_of_SoftI2cStop:	
  5807  0641                     __ptext19:	
  5808 ;; *************** function _SoftI2cRepeatedStart *****************
  5809 ;; Defined at:
  5810 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;		None
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;		None
  5815 ;; Return value:  Size  Location     Type
  5816 ;;		None               void
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0, pclath, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5824 ;;      Params:         0       0       0       0
  5825 ;;      Locals:         0       0       0       0
  5826 ;;      Temps:          0       0       0       0
  5827 ;;      Totals:         0       0       0       0
  5828 ;;Total ram usage:        0 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    6
  5831 ;; This function calls:
  5832 ;;		_SoftI2cNop
  5833 ;; This function is called by:
  5834 ;;		_eepromRxBytes
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           
  5839                           ;psect for function _SoftI2cRepeatedStart
  5840  0641                     _SoftI2cRepeatedStart:	
  5841                           
  5842                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  5843                           
  5844                           ;incstack = 0
  5845                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5846  0641  0021               	movlb	1	; select bank1
  5847  0642  120D               	bcf	13,4	;volatile
  5848                           
  5849                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  5850  0643  0022               	movlb	2	; select bank2
  5851  0644  130D               	bcf	13,6	;volatile
  5852                           
  5853                           ;softI2c.c: 57: SoftI2cNop();
  5854  0645  26FC  3185         	fcall	_SoftI2cNop
  5855                           
  5856                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  5857  0647  0022               	movlb	2	; select bank2
  5858  0648  160D               	bsf	13,4	;volatile
  5859                           
  5860                           ;softI2c.c: 60: SoftI2cNop();
  5861  0649  26FC  3185         	fcall	_SoftI2cNop
  5862                           
  5863                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  5864  064B  0022               	movlb	2	; select bank2
  5865  064C  170D               	bsf	13,6	;volatile
  5866                           
  5867                           ;softI2c.c: 63: SoftI2cNop();
  5868  064D  26FC  3185         	fcall	_SoftI2cNop
  5869                           
  5870                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  5871  064F  0022               	movlb	2	; select bank2
  5872  0650  120D               	bcf	13,4	;volatile
  5873                           
  5874                           ;softI2c.c: 66: SoftI2cNop();
  5875  0651  26FC  3185         	fcall	_SoftI2cNop
  5876                           
  5877                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  5878  0653  0022               	movlb	2	; select bank2
  5879  0654  130D               	bcf	13,6	;volatile
  5880                           
  5881                           ;softI2c.c: 69: SoftI2cNop();
  5882  0655  2EFC               	ljmp	l1918
  5883  0656                     __end_of_SoftI2cRepeatedStart:	
  5884  0656                     __ptext11:	
  5885 ;; *************** function _eepromTxBytes *****************
  5886 ;; Defined at:
  5887 ;;		line 25 in file "../../../src/devices/24aa64.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  address         2    4[BANK0 ] unsigned int 
  5890 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5891 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), eepromTxByte@byte(1), 
  5892 ;;		 -> NULL(0), 
  5893 ;;  size            1    7[BANK0 ] unsigned char 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;		None
  5896 ;; Return value:  Size  Location     Type
  5897 ;;		None               void
  5898 ;; Registers used:
  5899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 1F/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5905 ;;      Params:         0       4       0       0
  5906 ;;      Locals:         0       0       0       0
  5907 ;;      Temps:          0       0       0       0
  5908 ;;      Totals:         0       4       0       0
  5909 ;;Total ram usage:        4 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    7
  5912 ;; This function calls:
  5913 ;;		_SoftI2cStart
  5914 ;;		_SoftI2cStop
  5915 ;;		_SoftI2cTxByte
  5916 ;; This function is called by:
  5917 ;;		_handleFwWrite
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           
  5922                           ;psect for function _eepromTxBytes
  5923  0656                     _eepromTxBytes:	
  5924                           
  5925                           ;24aa64.c: 28: SoftI2cStart();
  5926                           
  5927                           ;incstack = 0
  5928                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5929  0656  2703  3185         	fcall	_SoftI2cStart
  5930                           
  5931                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  5932  0658  30A0               	movlw	160
  5933  0659  2696  3185         	fcall	_SoftI2cTxByte
  5934                           
  5935                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  5936  065B  0020               	movlb	0	; select bank0
  5937  065C  0825               	movf	eepromTxBytes@address+1,w
  5938  065D  2696  3185         	fcall	_SoftI2cTxByte
  5939                           
  5940                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  5941  065F  0020               	movlb	0	; select bank0
  5942  0660  0824               	movf	eepromTxBytes@address,w
  5943  0661  2696  3185         	fcall	_SoftI2cTxByte
  5944  0663                     l2194:	
  5945                           ;24aa64.c: 33: while (size != 0)
  5946                           
  5947  0663  0020               	movlb	0	; select bank0
  5948  0664  08A7               	movf	eepromTxBytes@size,f
  5949  0665  1903               	btfsc	3,2
  5950  0666  2E71               	goto	l2196
  5951                           
  5952                           ;24aa64.c: 34: {
  5953                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  5954  0667  0826               	movf	eepromTxBytes@data,w
  5955  0668  0086               	movwf	6
  5956  0669  0187               	clrf	7
  5957  066A  0801               	movf	1,w
  5958  066B  2696  3185         	fcall	_SoftI2cTxByte
  5959                           
  5960                           ;24aa64.c: 37: data++;
  5961  066D  0020               	movlb	0	; select bank0
  5962  066E  0AA6               	incf	eepromTxBytes@data,f
  5963                           
  5964                           ;24aa64.c: 38: size--;
  5965  066F  03A7               	decf	eepromTxBytes@size,f
  5966  0670  2E63               	goto	l2194
  5967  0671                     l2196:	
  5968                           
  5969                           ;24aa64.c: 39: }
  5970                           ;24aa64.c: 40: SoftI2cStop();
  5971  0671  2E32               	ljmp	l1962
  5972  0672                     __end_of_eepromTxBytes:	
  5973  0672                     __ptext14:	
  5974 ;; *************** function _eepromRxBytes *****************
  5975 ;; Defined at:
  5976 ;;		line 4 in file "../../../src/devices/24aa64.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  address         2    4[BANK0 ] unsigned int 
  5979 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5980 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwRead@packet..(21), handleFwWrite@packet..(21)
      +, 
  5981 ;;		 -> handleFwCmd@packet..(21), eepromRxByte@dat(1), NULL(0), 
  5982 ;;  size            1    7[BANK0 ] unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;		None               void
  5987 ;; Registers used:
  5988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : 1F/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5994 ;;      Params:         0       4       0       0
  5995 ;;      Locals:         0       0       0       0
  5996 ;;      Temps:          0       0       0       0
  5997 ;;      Totals:         0       4       0       0
  5998 ;;Total ram usage:        4 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    7
  6001 ;; This function calls:
  6002 ;;		_SoftI2cRepeatedStart
  6003 ;;		_SoftI2cRxByte
  6004 ;;		_SoftI2cStart
  6005 ;;		_SoftI2cStop
  6006 ;;		_SoftI2cTxByte
  6007 ;; This function is called by:
  6008 ;;		_handleFwCmd
  6009 ;;		_handleFwWrite
  6010 ;;		_handleFwRead
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _eepromRxBytes
  6016  0672                     _eepromRxBytes:	
  6017  0672                     l2174:	
  6018                           ;incstack = 0
  6019                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6020                           
  6021                           
  6022                           ;24aa64.c: 7: SoftI2cStart();
  6023  0672  2703  3185         	fcall	_SoftI2cStart
  6024                           
  6025                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  6026  0674  30A0               	movlw	160
  6027  0675  2696  3185         	fcall	_SoftI2cTxByte
  6028                           
  6029                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  6030  0677  0020               	movlb	0	; select bank0
  6031  0678  0825               	movf	eepromRxBytes@address+1,w
  6032  0679  2696  3185         	fcall	_SoftI2cTxByte
  6033                           
  6034                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  6035  067B  0020               	movlb	0	; select bank0
  6036  067C  0824               	movf	eepromRxBytes@address,w
  6037  067D  2696  3185         	fcall	_SoftI2cTxByte
  6038                           
  6039                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  6040  067F  2641  3185         	fcall	_SoftI2cRepeatedStart
  6041                           
  6042                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  6043  0681  30A1               	movlw	161
  6044  0682  2696  3185         	fcall	_SoftI2cTxByte
  6045  0684                     l2182:	
  6046                           ;24aa64.c: 15: while (size != 0)
  6047                           
  6048  0684  0020               	movlb	0	; select bank0
  6049  0685  08A7               	movf	eepromRxBytes@size,f
  6050  0686  1903               	btfsc	3,2
  6051  0687  2E95               	goto	l2184
  6052                           
  6053                           ;24aa64.c: 16: {
  6054                           ;24aa64.c: 17: size--;
  6055  0688  03A7               	decf	eepromRxBytes@size,f
  6056                           
  6057                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  6058  0689  0826               	movf	eepromRxBytes@data,w
  6059  068A  0086               	movwf	6
  6060  068B  3000               	movlw	0
  6061  068C  0187               	clrf	7
  6062  068D  08A7               	movf	eepromRxBytes@size,f
  6063  068E  1D03               	skipz
  6064  068F  3001               	movlw	1
  6065  0690  26C4  3185         	fcall	_SoftI2cRxByte
  6066  0692  0081               	movwf	1
  6067                           
  6068                           ;24aa64.c: 21: data++;
  6069  0693  0AA6               	incf	eepromRxBytes@data,f
  6070  0694  2E84               	goto	l2182
  6071  0695                     l2184:	
  6072                           
  6073                           ;24aa64.c: 22: }
  6074                           ;24aa64.c: 23: SoftI2cStop();
  6075  0695  2E32               	ljmp	l1962
  6076  0696                     __end_of_eepromRxBytes:	
  6077  0696                     __ptext15:	
  6078 ;; *************** function _SoftI2cTxByte *****************
  6079 ;; Defined at:
  6080 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  data            1    wreg     unsigned char 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  data            1    2[BANK0 ] unsigned char 
  6085 ;;  i               1    3[BANK0 ] unsigned char 
  6086 ;;  ack             1    0        unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      unsigned char 
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0, pclath, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/1
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6096 ;;      Params:         0       0       0       0
  6097 ;;      Locals:         0       3       0       0
  6098 ;;      Temps:          0       0       0       0
  6099 ;;      Totals:         0       3       0       0
  6100 ;;Total ram usage:        3 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    6
  6103 ;; This function calls:
  6104 ;;		_SoftI2cNop
  6105 ;; This function is called by:
  6106 ;;		_SoftI2cInit
  6107 ;;		_eepromRxBytes
  6108 ;;		_eepromTxBytes
  6109 ;; This function uses a non-reentrant model
  6110 ;;
  6111                           
  6112                           
  6113                           ;psect for function _SoftI2cTxByte
  6114  0696                     _SoftI2cTxByte:	
  6115                           
  6116                           ;incstack = 0
  6117                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  6118                           ;SoftI2cTxByte@data stored from wreg
  6119  0696  0020               	movlb	0	; select bank0
  6120  0697  00A2               	movwf	SoftI2cTxByte@data
  6121                           
  6122                           ;softI2c.c: 89: UI08_t i;
  6123                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  6124  0698  3080               	movlw	128
  6125  0699  00A3               	movwf	SoftI2cTxByte@i
  6126  069A                     l32:	
  6127                           
  6128                           ;softI2c.c: 92: {
  6129                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  6130  069A  0022               	movlb	2	; select bank2
  6131  069B  130D               	bcf	13,6	;volatile
  6132                           
  6133                           ;softI2c.c: 94: SoftI2cNop();
  6134  069C  26FC  3185         	fcall	_SoftI2cNop
  6135                           
  6136                           ;softI2c.c: 96: if(data & i)
  6137  069E  0020               	movlb	0	; select bank0
  6138  069F  0822               	movf	SoftI2cTxByte@data,w
  6139  06A0  0523               	andwf	SoftI2cTxByte@i,w
  6140  06A1  1903               	btfsc	3,2
  6141  06A2  2EA6               	goto	l34
  6142                           
  6143                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  6144  06A3  0022               	movlb	2	; select bank2
  6145  06A4  160D               	bsf	13,4	;volatile
  6146  06A5  2EA8               	goto	l35
  6147  06A6                     l34:	
  6148                           
  6149                           ;softI2c.c: 98: else
  6150                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  6151  06A6  0022               	movlb	2	; select bank2
  6152  06A7  120D               	bcf	13,4	;volatile
  6153  06A8                     l35:	
  6154                           
  6155                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  6156  06A8  0021               	movlb	1	; select bank1
  6157  06A9  120D               	bcf	13,4	;volatile
  6158                           
  6159                           ;softI2c.c: 102: SoftI2cNop();
  6160  06AA  26FC  3185         	fcall	_SoftI2cNop
  6161                           
  6162                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  6163  06AC  0022               	movlb	2	; select bank2
  6164  06AD  170D               	bsf	13,6	;volatile
  6165                           
  6166                           ;softI2c.c: 105: SoftI2cNop();
  6167  06AE  26FC  3185         	fcall	_SoftI2cNop
  6168  06B0  0020               	movlb	0	; select bank0
  6169  06B1  36A3               	lsrf	SoftI2cTxByte@i,f
  6170  06B2  08A3               	movf	SoftI2cTxByte@i,f
  6171  06B3  1D03               	skipz
  6172  06B4  2E9A               	goto	l32
  6173                           
  6174                           ;softI2c.c: 109: }
  6175                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  6176  06B5  0022               	movlb	2	; select bank2
  6177  06B6  130D               	bcf	13,6	;volatile
  6178                           
  6179                           ;softI2c.c: 113: SoftI2cNop();
  6180  06B7  26FC  3185         	fcall	_SoftI2cNop
  6181                           
  6182                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  6183  06B9  0021               	movlb	1	; select bank1
  6184  06BA  160D               	bsf	13,4	;volatile
  6185                           
  6186                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  6187  06BB  0022               	movlb	2	; select bank2
  6188  06BC  170D               	bsf	13,6	;volatile
  6189                           
  6190                           ;softI2c.c: 118: SoftI2cNop();
  6191  06BD  26FC  3185         	fcall	_SoftI2cNop
  6192  06BF  0020               	movlb	0	; select bank0
  6193  06C0  080D               	movf	13,w	;volatile
  6194                           
  6195                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  6196  06C1  0022               	movlb	2	; select bank2
  6197  06C2  130D               	bcf	13,6	;volatile
  6198                           
  6199                           ;softI2c.c: 123: SoftI2cNop();
  6200  06C3  2EFC               	ljmp	l1918
  6201  06C4                     __end_of_SoftI2cTxByte:	
  6202  06C4                     __ptext18:	
  6203 ;; *************** function _SoftI2cRxByte *****************
  6204 ;; Defined at:
  6205 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;  ack             1    wreg     unsigned char 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  ack             1    1[BANK0 ] unsigned char 
  6210 ;;  i               1    3[BANK0 ] unsigned char 
  6211 ;;  data            1    2[BANK0 ] unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      unsigned char 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2, status,0, pclath, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 1F/0
  6218 ;;		On exit  : 1F/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6221 ;;      Params:         0       0       0       0
  6222 ;;      Locals:         0       3       0       0
  6223 ;;      Temps:          0       0       0       0
  6224 ;;      Totals:         0       3       0       0
  6225 ;;Total ram usage:        3 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    6
  6228 ;; This function calls:
  6229 ;;		_SoftI2cNop
  6230 ;; This function is called by:
  6231 ;;		_eepromRxBytes
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function _SoftI2cRxByte
  6237  06C4                     _SoftI2cRxByte:	
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  6241                           ;SoftI2cRxByte@ack stored from wreg
  6242  06C4  00A1               	movwf	SoftI2cRxByte@ack
  6243                           
  6244                           ;softI2c.c: 131: UI08_t data=0x00;
  6245  06C5  01A2               	clrf	SoftI2cRxByte@data
  6246                           
  6247                           ;softI2c.c: 132: UI08_t i;
  6248                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  6249  06C6  0022               	movlb	2	; select bank2
  6250  06C7  130D               	bcf	13,6	;volatile
  6251                           
  6252                           ;softI2c.c: 135: SoftI2cNop();
  6253  06C8  26FC  3185         	fcall	_SoftI2cNop
  6254                           
  6255                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  6256  06CA  0021               	movlb	1	; select bank1
  6257  06CB  160D               	bsf	13,4	;volatile
  6258                           
  6259                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  6260  06CC  0022               	movlb	2	; select bank2
  6261  06CD  160D               	bsf	13,4	;volatile
  6262                           
  6263                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  6264  06CE  3080               	movlw	128
  6265  06CF  0020               	movlb	0	; select bank0
  6266  06D0  00A3               	movwf	SoftI2cRxByte@i
  6267  06D1                     l39:	
  6268                           
  6269                           ;softI2c.c: 140: {
  6270                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  6271  06D1  0022               	movlb	2	; select bank2
  6272  06D2  130D               	bcf	13,6	;volatile
  6273                           
  6274                           ;softI2c.c: 142: SoftI2cNop();
  6275  06D3  26FC  3185         	fcall	_SoftI2cNop
  6276                           
  6277                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  6278  06D5  0022               	movlb	2	; select bank2
  6279  06D6  170D               	bsf	13,6	;volatile
  6280                           
  6281                           ;softI2c.c: 144: SoftI2cNop();
  6282  06D7  26FC  3185         	fcall	_SoftI2cNop
  6283                           
  6284                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  6285  06D9  0020               	movlb	0	; select bank0
  6286                           
  6287                           ;softI2c.c: 150: data |= i;
  6288  06DA  0823               	movf	SoftI2cRxByte@i,w
  6289  06DB  1A0D               	btfsc	13,4	;volatile
  6290  06DC  04A2               	iorwf	SoftI2cRxByte@data,f
  6291  06DD  36A3               	lsrf	SoftI2cRxByte@i,f
  6292  06DE  08A3               	movf	SoftI2cRxByte@i,f
  6293  06DF  1D03               	skipz
  6294  06E0  2ED1               	goto	l39
  6295                           
  6296                           ;softI2c.c: 152: }
  6297                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  6298  06E1  0022               	movlb	2	; select bank2
  6299  06E2  130D               	bcf	13,6	;volatile
  6300                           
  6301                           ;softI2c.c: 155: SoftI2cNop();
  6302  06E3  26FC  3185         	fcall	_SoftI2cNop
  6303                           
  6304                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  6305  06E5  0021               	movlb	1	; select bank1
  6306  06E6  120D               	bcf	13,4	;volatile
  6307                           
  6308                           ;softI2c.c: 158: if(ack)
  6309  06E7  0020               	movlb	0	; select bank0
  6310  06E8  0821               	movf	SoftI2cRxByte@ack,w
  6311  06E9  1903               	btfsc	3,2
  6312  06EA  2EEE               	goto	l42
  6313                           
  6314                           ;softI2c.c: 159: {
  6315                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  6316  06EB  0022               	movlb	2	; select bank2
  6317  06EC  120D               	bcf	13,4	;volatile
  6318                           
  6319                           ;softI2c.c: 161: }
  6320  06ED  2EF0               	goto	l2018
  6321  06EE                     l42:	
  6322                           
  6323                           ;softI2c.c: 162: else
  6324                           ;softI2c.c: 163: {
  6325                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  6326  06EE  0022               	movlb	2	; select bank2
  6327  06EF  160D               	bsf	13,4	;volatile
  6328  06F0                     l2018:	
  6329                           
  6330                           ;softI2c.c: 165: }
  6331                           ;softI2c.c: 166: SoftI2cNop();
  6332  06F0  26FC  3185         	fcall	_SoftI2cNop
  6333                           
  6334                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  6335  06F2  0022               	movlb	2	; select bank2
  6336  06F3  170D               	bsf	13,6	;volatile
  6337                           
  6338                           ;softI2c.c: 169: SoftI2cNop();
  6339  06F4  26FC  3185         	fcall	_SoftI2cNop
  6340                           
  6341                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  6342  06F6  0022               	movlb	2	; select bank2
  6343  06F7  130D               	bcf	13,6	;volatile
  6344                           
  6345                           ;softI2c.c: 172: SoftI2cNop();
  6346  06F8  26FC               	fcall	_SoftI2cNop
  6347                           
  6348                           ;softI2c.c: 174: return data;
  6349  06F9  0020               	movlb	0	; select bank0
  6350  06FA  0822               	movf	SoftI2cRxByte@data,w
  6351  06FB  0008               	return
  6352  06FC                     __end_of_SoftI2cRxByte:	
  6353  06FC                     __ptext20:	
  6354 ;; *************** function _SoftI2cNop *****************
  6355 ;; Defined at:
  6356 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;		None
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;		None
  6361 ;; Return value:  Size  Location     Type
  6362 ;;		None               void
  6363 ;; Registers used:
  6364 ;;		wreg
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/2
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6370 ;;      Params:         0       0       0       0
  6371 ;;      Locals:         0       0       0       0
  6372 ;;      Temps:          0       1       0       0
  6373 ;;      Totals:         0       1       0       0
  6374 ;;Total ram usage:        1 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    5
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_SoftI2cStart
  6381 ;;		_SoftI2cRepeatedStart
  6382 ;;		_SoftI2cStop
  6383 ;;		_SoftI2cTxByte
  6384 ;;		_SoftI2cRxByte
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           
  6389                           ;psect for function _SoftI2cNop
  6390  06FC                     _SoftI2cNop:	
  6391  06FC                     l1918:	
  6392                           ;incstack = 0
  6393                           ; Regs used in _SoftI2cNop: [wreg]
  6394                           
  6395                           
  6396                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  6397  06FC  300A               	movlw	10
  6398  06FD  0020               	movlb	0	; select bank0
  6399  06FE  00A0               	movwf	??_SoftI2cNop
  6400  06FF                     u2127:	
  6401  06FF  0BA0               	decfsz	??_SoftI2cNop,f
  6402  0700  2EFF               	goto	u2127
  6403  0701  0000               	nop
  6404  0702  0008               	return
  6405  0703                     __end_of_SoftI2cNop:	
  6406  0703                     __ptext17:	
  6407 ;; *************** function _SoftI2cStart *****************
  6408 ;; Defined at:
  6409 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;		None               void
  6416 ;; Registers used:
  6417 ;;		wreg, status,2, status,0, pclath, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 1E/1
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6423 ;;      Params:         0       0       0       0
  6424 ;;      Locals:         0       0       0       0
  6425 ;;      Temps:          0       0       0       0
  6426 ;;      Totals:         0       0       0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    6
  6430 ;; This function calls:
  6431 ;;		_SoftI2cNop
  6432 ;; This function is called by:
  6433 ;;		_SoftI2cInit
  6434 ;;		_eepromRxBytes
  6435 ;;		_eepromTxBytes
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           
  6440                           ;psect for function _SoftI2cStart
  6441  0703                     _SoftI2cStart:	
  6442                           
  6443                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  6447  0703  0021               	movlb	1	; select bank1
  6448  0704  120D               	bcf	13,4	;volatile
  6449                           
  6450                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  6451  0705  0022               	movlb	2	; select bank2
  6452  0706  170D               	bsf	13,6	;volatile
  6453                           
  6454                           ;softI2c.c: 43: SoftI2cNop();
  6455  0707  26FC  3185         	fcall	_SoftI2cNop
  6456                           
  6457                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  6458  0709  0022               	movlb	2	; select bank2
  6459  070A  120D               	bcf	13,4	;volatile
  6460                           
  6461                           ;softI2c.c: 46: SoftI2cNop();
  6462  070B  26FC  3185         	fcall	_SoftI2cNop
  6463                           
  6464                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  6465  070D  0022               	movlb	2	; select bank2
  6466  070E  130D               	bcf	13,6	;volatile
  6467                           
  6468                           ;softI2c.c: 48: SoftI2cNop();
  6469  070F  2EFC               	ljmp	l1918
  6470  0710                     __end_of_SoftI2cStart:	
  6471                           
  6472                           	psect	text8
  6473  07D3                     __ptext8:	
  6474 ;; *************** function _Mrf49xaModeTx *****************
  6475 ;; Defined at:
  6476 ;;		line 102 in file "../../../src/devices/mrf49xa.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  k               1    3[BANK0 ] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;		None               void
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 1F/0
  6487 ;;		On exit  : 1F/1
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6490 ;;      Params:         0       0       0       0
  6491 ;;      Locals:         0       1       0       0
  6492 ;;      Temps:          0       0       0       0
  6493 ;;      Totals:         0       1       0       0
  6494 ;;Total ram usage:        1 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    7
  6497 ;; This function calls:
  6498 ;;		_Mrf49TxCmd
  6499 ;; This function is called by:
  6500 ;;		_Mrf49xaTick
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           
  6505                           ;psect for function _Mrf49xaModeTx
  6506  07D3                     _Mrf49xaModeTx:	
  6507  07D3  309E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  6508                           
  6509                           ;mrf49xa.c: 104: UI08_t k;
  6510                           ;mrf49xa.c: 105: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  6511                           
  6512                           ;incstack = 0
  6513                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  6514  07D4  01A3               	clrf	Mrf49xaModeTx@k
  6515  07D5  3187               	movlp	high __stringtab
  6516  07D6  000A               	callw
  6517  07D7  3187               	pagesel	$	;select current page
  6518  07D8  3800               	iorlw	0
  6519  07D9  1903               	btfsc	3,2
  6520  07DA  2FEF               	goto	l2490
  6521  07DB                     l2484:	
  6522  07DB  3523               	lslf	Mrf49xaModeTx@k,w
  6523  07DC  3ECC               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  6524  07DD  3187               	movlp	high __stringtab
  6525  07DE  000A               	callw
  6526  07DF  00A1               	movwf	Mrf49TxCmd@val
  6527  07E0  3523               	lslf	Mrf49xaModeTx@k,w
  6528  07E1  3ECB               	addlw	low (_mrfRegset_Tx| (0+32768))
  6529  07E2  3187               	movlp	high __stringtab
  6530  07E3  000A               	callw
  6531  07E4  3182  2235  3187   	fcall	_Mrf49TxCmd
  6532  07E7  309E               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  6533  07E8  0AA3               	incf	Mrf49xaModeTx@k,f
  6534  07E9  3187               	movlp	high __stringtab
  6535  07EA  000A               	callw
  6536  07EB  3187               	pagesel	$	;select current page
  6537  07EC  0223               	subwf	Mrf49xaModeTx@k,w
  6538  07ED  1C03               	skipc
  6539  07EE  2FDB               	goto	l2484
  6540  07EF                     l2490:	
  6541                           
  6542                           ;mrf49xa.c: 108: rfTrcvStatus.state = TX_PACKET;
  6543  07EF  3002               	movlw	2
  6544  07F0  0021               	movlb	1	; select bank1
  6545  07F1  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  6546                           
  6547                           ;mrf49xa.c: 109: rfTrcvStatus.hwByte = 99;
  6548  07F2  3063               	movlw	99
  6549  07F3  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6550  07F4  0008               	return
  6551  07F5                     __end_of_Mrf49xaModeTx:	
  6552                           
  6553                           	psect	swtext1
  6554  0800                     __pswtext1:	
  6555  0800                     S2888:	
  6556  0800  3183  2B6F         	ljmp	l488
  6557  0802  3183  2B70         	ljmp	l2296
  6558  0804  3183  2B87         	ljmp	l2304
  6559  0806  3183  2B6F         	ljmp	l488
  6560  0808  3183  2B6F         	ljmp	l488
  6561  080A  3183  2B6F         	ljmp	l488
  6562  080C  3183  2B6F         	ljmp	l488
  6563  080E  3183  2B6F         	ljmp	l488
  6564                           
  6565                           	psect	text21
  6566  0710                     __ptext21:	
  6567 ;; *************** function _Mrf49xaTxAck *****************
  6568 ;; Defined at:
  6569 ;;		line 14 in file "../../../src/devices/mrf49xa_packet.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6572 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  6575 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;		None               void
  6578 ;; Registers used:
  6579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 1F/0
  6582 ;;		On exit  : 1F/1
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6585 ;;      Params:         0       0       0       0
  6586 ;;      Locals:         0       1       0       0
  6587 ;;      Temps:          0       0       0       0
  6588 ;;      Totals:         0       1       0       0
  6589 ;;Total ram usage:        1 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    6
  6592 ;; This function calls:
  6593 ;;		_Mrf49xaTxPacket
  6594 ;; This function is called by:
  6595 ;;		_HandlePacket
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _Mrf49xaTxAck
  6601  0710                     _Mrf49xaTxAck:	
  6602                           
  6603                           ;incstack = 0
  6604                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6605                           ;Mrf49xaTxAck@packet stored from wreg
  6606  0710  00A6               	movwf	Mrf49xaTxAck@packet
  6607                           
  6608                           ;mrf49xa_packet.c: 16: packet->packet.data[0] = packet->packet.id;
  6609  0711  3E06               	addlw	6
  6610  0712  0086               	movwf	6
  6611  0713  0187               	clrf	7
  6612  0714  0826               	movf	Mrf49xaTxAck@packet,w
  6613  0715  3E04               	addlw	4
  6614  0716  0084               	movwf	4
  6615  0717  0185               	clrf	5
  6616  0718  0800               	movf	0,w
  6617  0719  0081               	movwf	1
  6618                           
  6619                           ;mrf49xa_packet.c: 17: packet->packet.data[1] = packet->crc;
  6620  071A  0826               	movf	Mrf49xaTxAck@packet,w
  6621  071B  3E07               	addlw	7
  6622  071C  0086               	movwf	6
  6623  071D  0826               	movf	Mrf49xaTxAck@packet,w
  6624  071E  3E16               	addlw	22
  6625  071F  0084               	movwf	4
  6626  0720  0800               	movf	0,w
  6627  0721  0081               	movwf	1
  6628                           
  6629                           ;mrf49xa_packet.c: 20: packet->packet.id = RF_ACK;
  6630  0722  0826               	movf	Mrf49xaTxAck@packet,w
  6631  0723  3E04               	addlw	4
  6632  0724  0086               	movwf	6
  6633  0725  30A1               	movlw	161
  6634  0726  0081               	movwf	1
  6635                           
  6636                           ;mrf49xa_packet.c: 21: packet->packet.size = 2;
  6637  0727  0A26               	incf	Mrf49xaTxAck@packet,w
  6638  0728  0086               	movwf	6
  6639  0729  3002               	movlw	2
  6640  072A  0081               	movwf	1
  6641                           
  6642                           ;mrf49xa_packet.c: 23: Mrf49xaTxPacket(packet, 1, 0);
  6643  072B  01A0               	clrf	Mrf49xaTxPacket@response
  6644  072C  0AA0               	incf	Mrf49xaTxPacket@response,f
  6645  072D  01A1               	clrf	Mrf49xaTxPacket@needAck
  6646  072E  0826               	movf	Mrf49xaTxAck@packet,w
  6647  072F  2F30               	ljmp	_Mrf49xaTxPacket
  6648  0730                     __end_of_Mrf49xaTxAck:	
  6649  0730                     __ptext22:	
  6650 ;; *************** function _Mrf49xaTxPacket *****************
  6651 ;; Defined at:
  6652 ;;		line 26 in file "../../../src/devices/mrf49xa_packet.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6655 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6656 ;;  response        1    0[BANK0 ] unsigned char 
  6657 ;;  needAck         1    1[BANK0 ] unsigned char 
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  6660 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6661 ;;  i               1    4[BANK0 ] unsigned char 
  6662 ;;  crc             1    3[BANK0 ] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      unsigned char 
  6665 ;; Registers used:
  6666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6667 ;; Tracked objects:
  6668 ;;		On entry : 1F/0
  6669 ;;		On exit  : 1F/1
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6672 ;;      Params:         0       2       0       0
  6673 ;;      Locals:         0       3       0       0
  6674 ;;      Temps:          0       1       0       0
  6675 ;;      Totals:         0       6       0       0
  6676 ;;Total ram usage:        6 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    5
  6679 ;; This function calls:
  6680 ;;		Nothing
  6681 ;; This function is called by:
  6682 ;;		_Mrf49xaTxAck
  6683 ;;		_RfSendPowerState
  6684 ;;		_HandlePacket
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           
  6689                           ;psect for function _Mrf49xaTxPacket
  6690  0730                     _Mrf49xaTxPacket:	
  6691                           
  6692                           ;incstack = 0
  6693                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  6694                           ;Mrf49xaTxPacket@packet stored from wreg
  6695  0730  00A5               	movwf	Mrf49xaTxPacket@packet
  6696  0731  3033               	movlw	51
  6697                           
  6698                           ;mrf49xa_packet.c: 28: uint8_t i, crc = 0;
  6699  0732  01A3               	clrf	Mrf49xaTxPacket@crc
  6700                           
  6701                           ;mrf49xa_packet.c: 30: if (&(rfTrcvStatus.txPacket) == packet)
  6702  0733  3EA0               	addlw	_rfTrcvStatus& (0+255)
  6703  0734  0625               	xorwf	Mrf49xaTxPacket@packet,w
  6704  0735  1D03               	skipz
  6705  0736  2F40               	goto	l2128
  6706                           
  6707                           ;mrf49xa_packet.c: 31: {
  6708                           ;mrf49xa_packet.c: 32: if (response)
  6709  0737  0820               	movf	Mrf49xaTxPacket@response,w
  6710  0738  1903               	btfsc	3,2
  6711  0739  2F3D               	goto	l2112
  6712                           
  6713                           ;mrf49xa_packet.c: 33: {
  6714                           ;mrf49xa_packet.c: 34: packet->packet.dst = packet->packet.src;
  6715  073A  0825               	movf	Mrf49xaTxPacket@packet,w
  6716  073B  2791  3187         	fcall	PL6	;call to abstracted procedure
  6717  073D                     l2112:	
  6718                           
  6719                           ;mrf49xa_packet.c: 35: }
  6720                           ;mrf49xa_packet.c: 36: packet->packet.src = rfTrcvStatus.src;
  6721                           
  6722                           ;mrf49xa_packet.c: 37: packet->packet.size += 5;
  6723                           
  6724                           ;mrf49xa_packet.c: 39: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6725                           
  6726                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.retry = 0;
  6727                           
  6728                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retransmit = 0;
  6729                           
  6730                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6731  073D  2776               	fcall	PL2	;call to abstracted procedure
  6732                           
  6733                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.crc = 0;
  6734  073E  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  6735  073F  0008               	return
  6736  0740                     l2128:	
  6737                           
  6738                           ;mrf49xa_packet.c: 45: }
  6739                           ;mrf49xa_packet.c: 48: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  6740  0740  0021               	movlb	1	; select bank1
  6741  0741  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  6742  0742  1D03               	skipz
  6743  0743  0008               	return
  6744                           
  6745                           ;mrf49xa_packet.c: 53: else
  6746                           ;mrf49xa_packet.c: 54: {
  6747                           ;mrf49xa_packet.c: 55: if (response)
  6748  0744  0020               	movlb	0	; select bank0
  6749  0745  0820               	movf	Mrf49xaTxPacket@response,w
  6750  0746  1903               	btfsc	3,2
  6751  0747  2F4B               	goto	l2138
  6752                           
  6753                           ;mrf49xa_packet.c: 56: {
  6754                           ;mrf49xa_packet.c: 57: packet->packet.dst = packet->packet.src;
  6755  0748  0825               	movf	Mrf49xaTxPacket@packet,w
  6756  0749  2791  3187         	fcall	PL6	;call to abstracted procedure
  6757  074B                     l2138:	
  6758                           
  6759                           ;mrf49xa_packet.c: 58: }
  6760                           ;mrf49xa_packet.c: 59: packet->packet.src = rfTrcvStatus.src;
  6761                           
  6762                           ;mrf49xa_packet.c: 60: packet->packet.size += 5;
  6763                           
  6764                           ;mrf49xa_packet.c: 62: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  6765                           
  6766                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.retry = 0;
  6767                           
  6768                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retransmit = 0;
  6769                           
  6770                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  6771  074B  2776  3187         	fcall	PL2	;call to abstracted procedure
  6772                           
  6773                           ;mrf49xa_packet.c: 67: packet->state = PKT_FREE;
  6774  074D  0020               	movlb	0	; select bank0
  6775  074E  0825               	movf	Mrf49xaTxPacket@packet,w
  6776  074F  0086               	movwf	6
  6777  0750  0181               	clrf	1
  6778                           
  6779                           ;mrf49xa_packet.c: 70: for (i = 0; i < (16 + 5); i++)
  6780  0751  01A4               	clrf	Mrf49xaTxPacket@i
  6781  0752                     l2158:	
  6782                           
  6783                           ;mrf49xa_packet.c: 71: {
  6784                           ;mrf49xa_packet.c: 72: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  6785  0752  0824               	movf	Mrf49xaTxPacket@i,w
  6786  0753  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6787  0754  0086               	movwf	6
  6788  0755  0187               	clrf	7
  6789  0756  0824               	movf	Mrf49xaTxPacket@i,w
  6790  0757  0725               	addwf	Mrf49xaTxPacket@packet,w
  6791  0758  00A2               	movwf	??_Mrf49xaTxPacket
  6792  0759  0A22               	incf	??_Mrf49xaTxPacket,w
  6793  075A  0084               	movwf	4
  6794  075B  0185               	clrf	5
  6795  075C  0800               	movf	0,w
  6796  075D  0081               	movwf	1
  6797  075E  3015               	movlw	21
  6798  075F  0AA4               	incf	Mrf49xaTxPacket@i,f
  6799  0760  0224               	subwf	Mrf49xaTxPacket@i,w
  6800  0761  1C03               	skipc
  6801  0762  2F52               	goto	l2158
  6802                           
  6803                           ;mrf49xa_packet.c: 73: }
  6804                           ;mrf49xa_packet.c: 74: for (i = 0; i < packet->packet.size; i++)
  6805  0763  01A4               	clrf	Mrf49xaTxPacket@i
  6806  0764                     l338:	
  6807  0764  0A25               	incf	Mrf49xaTxPacket@packet,w
  6808  0765  0086               	movwf	6
  6809  0766  0187               	clrf	7
  6810  0767  0801               	movf	1,w
  6811  0768  0224               	subwf	Mrf49xaTxPacket@i,w
  6812  0769  1803               	btfsc	3,0
  6813  076A  2F72               	goto	l2170
  6814                           
  6815                           ;mrf49xa_packet.c: 75: {
  6816                           ;mrf49xa_packet.c: 76: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  6817  076B  0824               	movf	Mrf49xaTxPacket@i,w
  6818  076C  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6819  076D  0086               	movwf	6
  6820  076E  0801               	movf	1,w
  6821  076F  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  6822  0770  0AA4               	incf	Mrf49xaTxPacket@i,f
  6823  0771  2F64               	goto	l338
  6824  0772                     l2170:	
  6825                           
  6826                           ;mrf49xa_packet.c: 77: }
  6827                           ;mrf49xa_packet.c: 79: rfTrcvStatus.txPacket.crc = crc;
  6828  0772  0823               	movf	Mrf49xaTxPacket@crc,w
  6829  0773  0021               	movlb	1	; select bank1
  6830  0774  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  6831  0775  0008               	return
  6832  0776                     __end_of_Mrf49xaTxPacket:	
  6833  0776                     PL2:	
  6834  0776  0825               	movf	Mrf49xaTxPacket@packet,w
  6835  0777  3E02               	addlw	2
  6836  0778  0086               	movwf	6
  6837  0779  0187               	clrf	7
  6838  077A  0021               	movlb	1	; select bank1
  6839  077B  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  6840  077C  0081               	movwf	1
  6841  077D  0020               	movlb	0	; select bank0
  6842  077E  0A25               	incf	Mrf49xaTxPacket@packet,w
  6843  077F  0086               	movwf	6
  6844  0780  3005               	movlw	5
  6845  0781  0781               	addwf	1,f
  6846  0782  0021               	movlb	1	; select bank1
  6847  0783  30F0               	movlw	-16
  6848  0784  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  6849  0785  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  6850  0786  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6851  0787  30CF               	movlw	-49
  6852  0788  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6853  0789  0020               	movlb	0	; select bank0
  6854  078A  0321               	decf	Mrf49xaTxPacket@needAck,w
  6855  078B  3000               	movlw	0
  6856  078C  1903               	skipnz
  6857  078D  3001               	movlw	1
  6858  078E  0021               	movlb	1	; select bank1
  6859  078F  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  6860  0790  0008               	return
  6861  0791                     __end_ofPL2:	
  6862  0791                     PL6:	
  6863  0791  3E03               	addlw	3
  6864  0792  0086               	movwf	6
  6865  0793  0187               	clrf	7
  6866  0794  0825               	movf	Mrf49xaTxPacket@packet,w
  6867  0795  3E02               	addlw	2
  6868  0796  0084               	movwf	4
  6869  0797  0185               	clrf	5
  6870  0798  0800               	movf	0,w
  6871  0799  0081               	movwf	1
  6872  079A  0008               	return
  6873  079B                     __end_ofPL6:	
  6874                           
  6875                           	psect	intentry
  6876  0004                     __pintentry:	
  6877 ;; *************** function _extInt *****************
  6878 ;; Defined at:
  6879 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;		None
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;		None
  6884 ;; Return value:  Size  Location     Type
  6885 ;;		None               void
  6886 ;; Registers used:
  6887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 1F/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6893 ;;      Params:         0       0       0       0
  6894 ;;      Locals:         0       0       0       0
  6895 ;;      Temps:          1       0       0       0
  6896 ;;      Totals:         1       0       0       0
  6897 ;;Total ram usage:        1 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    4
  6900 ;; This function calls:
  6901 ;;		i1_Mrf49xaServe
  6902 ;; This function is called by:
  6903 ;;		Interrupt level 1
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907  0004                     _extInt:	
  6908                           
  6909                           ;incstack = 0
  6910                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6911  0004  3180               	pagesel	$
  6912  0005  0020               	movlb	0	; select bank0
  6913  0006  087F               	movf	127,w
  6914  0007  00F6               	movwf	??_extInt
  6915                           
  6916                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  6917  0008  1C8B               	btfss	11,1	;volatile
  6918  0009  2811               	goto	i1l131
  6919                           
  6920                           ;interrupt.c: 34: {
  6921                           ;interrupt.c: 35: if (Mrf49xaServe())
  6922  000A  3184  242A  3180   	fcall	i1_Mrf49xaServe
  6923  000D  3A00               	xorlw	0
  6924  000E  1903               	skipnz
  6925  000F  2811               	goto	i1l131
  6926                           
  6927                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  6928  0010  108B               	bcf	11,1	;volatile
  6929  0011                     i1l131:	
  6930  0011  0876               	movf	??_extInt,w
  6931  0012  00FF               	movwf	127
  6932  0013  0009               	retfie
  6933  0014                     __end_of_extInt:	
  6934                           
  6935                           	psect	text43
  6936  041E                     __ptext43:	
  6937 ;; *************** function i1_Mrf49RxCmd *****************
  6938 ;; Defined at:
  6939 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  cmd             1    wreg     unsigned char 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  cmd             1    1[COMMON] unsigned char 
  6944 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      unsigned char 
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 1E/1
  6951 ;;		On exit  : 1F/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6954 ;;      Params:         0       0       0       0
  6955 ;;      Locals:         2       0       0       0
  6956 ;;      Temps:          0       0       0       0
  6957 ;;      Totals:         2       0       0       0
  6958 ;;Total ram usage:        2 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    1
  6961 ;; This function calls:
  6962 ;;		i1_Mrf49SpiRx
  6963 ;;		i1_Mrf49SpiTx
  6964 ;; This function is called by:
  6965 ;;		i1_Mrf49RxByte
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           
  6970                           ;psect for function i1_Mrf49RxCmd
  6971  041E                     i1_Mrf49RxCmd:	
  6972                           
  6973                           ;incstack = 0
  6974                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  6975                           ;i1Mrf49RxCmd@cmd stored from wreg
  6976  041E  00F1               	movwf	i1Mrf49RxCmd@cmd
  6977                           
  6978                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  6979  041F  0020               	movlb	0	; select bank0
  6980  0420  130E               	bcf	14,6	;volatile
  6981                           
  6982                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  6983  0421  0871               	movf	i1Mrf49RxCmd@cmd,w
  6984  0422  2526  3184         	fcall	i1_Mrf49SpiTx
  6985                           
  6986                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  6987  0424  2595               	fcall	i1_Mrf49SpiRx
  6988  0425  00F2               	movwf	i1Mrf49RxCmd@val
  6989                           
  6990                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  6991  0426  0020               	movlb	0	; select bank0
  6992  0427  170E               	bsf	14,6	;volatile
  6993                           
  6994                           ;mrf49xa_cmd.c: 27: return val;
  6995  0428  0872               	movf	i1Mrf49RxCmd@val,w
  6996  0429  0008               	return
  6997  042A                     __end_ofi1_Mrf49RxCmd:	
  6998  042A                     __ptext37:	
  6999 ;; *************** function i1_Mrf49xaServe *****************
  7000 ;; Defined at:
  7001 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  1    wreg      unsigned char 
  7008 ;; Registers used:
  7009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 1F/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7015 ;;      Params:         0       0       0       0
  7016 ;;      Locals:         1       0       0       0
  7017 ;;      Temps:          1       0       0       0
  7018 ;;      Totals:         2       0       0       0
  7019 ;;Total ram usage:        2 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    3
  7022 ;; This function calls:
  7023 ;;		i1_Mrf49RxByte
  7024 ;;		i1_Mrf49RxSts
  7025 ;;		i1_Mrf49TxByte
  7026 ;;		i1_Mrf49xaModeRx
  7027 ;; This function is called by:
  7028 ;;		_extInt
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           
  7033                           ;psect for function i1_Mrf49xaServe
  7034  042A                     i1_Mrf49xaServe:	
  7035                           
  7036                           ;mrf49xa_data.c: 10: uint8_t data;
  7037                           ;mrf49xa_data.c: 16: Mrf49RxSts();
  7038                           
  7039                           ;incstack = 0
  7040                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7041  042A  2588  3184         	fcall	i1_Mrf49RxSts
  7042                           
  7043                           ;mrf49xa_data.c: 18: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  7044  042C  083B               	movf	_mrf49Status,w
  7045  042D  3AFF               	xorlw	255
  7046  042E  1D03               	skipz
  7047  042F  2C34               	goto	i1l395
  7048  0430  083C               	movf	_mrf49Status+1,w
  7049  0431  3AFF               	xorlw	255
  7050  0432  1903               	btfsc	3,2
  7051                           
  7052                           ;mrf49xa_data.c: 19: return 0;
  7053  0433  3400               	retlw	0
  7054  0434                     i1l395:	
  7055                           ;mrf49xa_data.c: 23: {
  7056                           
  7057                           
  7058                           ;mrf49xa_data.c: 25: }
  7059                           ;mrf49xa_data.c: 28: if (mrf49Status.flags.msb.overflow == 1)
  7060  0434  1ABB               	btfsc	_mrf49Status,5
  7061  0435  2C40               	goto	i1l2752
  7062  0436  2C4C               	goto	i1l396
  7063  0437                     i1l2748:	
  7064                           
  7065                           ;mrf49xa_data.c: 33: case RECV_DATA:
  7066                           ;mrf49xa_data.c: 36: data = Mrf49RxByte();
  7067  0437  24F9  3184         	fcall	i1_Mrf49RxByte
  7068  0439  00F5               	movwf	i1Mrf49xaServe@data
  7069                           
  7070                           ;mrf49xa_data.c: 37: data = Mrf49RxByte();
  7071  043A  24F9  3184         	fcall	i1_Mrf49RxByte
  7072  043C  00F5               	movwf	i1Mrf49xaServe@data
  7073                           
  7074                           ;mrf49xa_data.c: 40: Mrf49xaModeRx();
  7075  043D  24FC  3184         	fcall	i1_Mrf49xaModeRx
  7076                           
  7077                           ;mrf49xa_data.c: 44: break;
  7078  043F  2C4C               	goto	i1l396
  7079  0440                     i1l2752:	
  7080  0440  0021               	movlb	1	; select bank1
  7081  0441  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7082                           
  7083                           ; Switch size 1, requested type "space"
  7084                           ; Number of cases is 3, Range of values is 0 to 2
  7085                           ; switch strategies available:
  7086                           ; Name         Instructions Cycles
  7087                           ; simple_byte           10     6 (average)
  7088                           ; direct_byte           12     6 (fixed)
  7089                           ; jumptable            260     6 (fixed)
  7090                           ;	Chosen strategy is simple_byte
  7091  0442  3A00               	xorlw	0	; case 0
  7092  0443  1903               	skipnz
  7093  0444  2C37               	goto	i1l2748
  7094  0445  3A01               	xorlw	1	; case 1
  7095  0446  1903               	skipnz
  7096  0447  2C37               	goto	i1l2748
  7097  0448  3A03               	xorlw	3	; case 2
  7098  0449  1903               	skipnz
  7099  044A  2C4C               	goto	i1l396
  7100  044B  2C4C               	goto	i1l396
  7101  044C                     i1l396:	
  7102                           
  7103                           ;mrf49xa_data.c: 52: }
  7104                           ;mrf49xa_data.c: 61: if (mrf49Status.flags.msb.fifoTxRx == 1)
  7105  044C  0020               	movlb	0	; select bank0
  7106  044D  1BBB               	btfsc	_mrf49Status,7
  7107  044E  2CE3               	goto	i1l2838
  7108  044F  2CEF               	goto	i1l2840
  7109  0450                     i1l2756:	
  7110                           
  7111                           ;mrf49xa_data.c: 67: data = Mrf49RxByte();
  7112  0450  24F9  3184         	fcall	i1_Mrf49RxByte
  7113  0452  00F5               	movwf	i1Mrf49xaServe@data
  7114                           
  7115                           ;mrf49xa_data.c: 71: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  7116  0453  1BBC               	btfsc	_mrf49Status+1,7
  7117  0454  2C58               	goto	i1l2762
  7118  0455                     i1l2760:	
  7119                           
  7120                           ;mrf49xa_data.c: 72: {
  7121                           ;mrf49xa_data.c: 73: Mrf49xaModeRx();
  7122  0455  24FC  3184         	fcall	i1_Mrf49xaModeRx
  7123                           
  7124                           ;mrf49xa_data.c: 74: break;
  7125  0457  2CEF               	goto	i1l2840
  7126  0458                     i1l2762:	
  7127                           
  7128                           ;mrf49xa_data.c: 75: }
  7129                           ;mrf49xa_data.c: 77: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  7130  0458  0021               	movlb	1	; select bank1
  7131  0459  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  7132  045A  1D03               	skipz
  7133  045B  2C5E               	goto	i1l2766
  7134  045C  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  7135  045D  2C62               	goto	L3
  7136  045E                     i1l2766:	
  7137                           
  7138                           ;mrf49xa_data.c: 78: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  7139  045E  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  7140  045F  1D03               	skipz
  7141  0460  2C55               	goto	i1l2760
  7142  0461  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  7143  0462                     L3:	
  7144  0462  00A0               	movwf	_rfTrcvStatus^(0+128)
  7145                           
  7146                           ;mrf49xa_data.c: 85: }
  7147                           ;mrf49xa_data.c: 86: rfTrcvStatus.hwRx->packet.size = data;
  7148  0463  0A20               	incf	_rfTrcvStatus^(0+128),w
  7149  0464  0086               	movwf	6
  7150  0465  0187               	clrf	7
  7151  0466  0875               	movf	i1Mrf49xaServe@data,w
  7152  0467  0081               	movwf	1
  7153                           
  7154                           ;mrf49xa_data.c: 87: rfTrcvStatus.hwRx->crc = 0;
  7155  0468  0820               	movf	_rfTrcvStatus^(0+128),w
  7156  0469  3E16               	addlw	22
  7157  046A  0086               	movwf	6
  7158  046B  0181               	clrf	1
  7159                           
  7160                           ;mrf49xa_data.c: 88: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  7161  046C  0820               	movf	_rfTrcvStatus^(0+128),w
  7162  046D  0086               	movwf	6
  7163  046E  3004               	movlw	4
  7164  046F  0081               	movwf	1
  7165                           
  7166                           ;mrf49xa_data.c: 90: rfTrcvStatus.state = RECV_DATA;
  7167  0470  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7168  0471  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  7169                           
  7170                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwByte = 1;
  7171  0472  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7172  0473  2C9F               	goto	i1l2802
  7173  0474                     i1l2782:	
  7174                           ;mrf49xa_data.c: 93: break;
  7175                           
  7176                           
  7177                           ;mrf49xa_data.c: 97: data = Mrf49RxByte();
  7178  0474  24F9  3184         	fcall	i1_Mrf49RxByte
  7179  0476  00F5               	movwf	i1Mrf49xaServe@data
  7180                           
  7181                           ;mrf49xa_data.c: 101: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  7182  0477  1BBC               	btfsc	_mrf49Status+1,7
  7183  0478  2C80               	goto	i1l2790
  7184                           
  7185                           ;mrf49xa_data.c: 102: {
  7186                           ;mrf49xa_data.c: 103: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7187  0479  0021               	movlb	1	; select bank1
  7188  047A  0820               	movf	_rfTrcvStatus^(0+128),w
  7189  047B  0086               	movwf	6
  7190  047C  3005               	movlw	5
  7191  047D  0187               	clrf	7
  7192  047E  0081               	movwf	1
  7193  047F  2C55               	goto	i1l2760
  7194  0480                     i1l2790:	
  7195                           
  7196                           ;mrf49xa_data.c: 106: }
  7197                           ;mrf49xa_data.c: 108: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  7198  0480  0021               	movlb	1	; select bank1
  7199  0481  0A20               	incf	_rfTrcvStatus^(0+128),w
  7200  0482  0086               	movwf	6
  7201  0483  0187               	clrf	7
  7202  0484  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7203  0485  0601               	xorwf	1,w
  7204  0486  1D03               	skipz
  7205  0487  2C97               	goto	i1l2800
  7206                           
  7207                           ;mrf49xa_data.c: 109: {
  7208                           ;mrf49xa_data.c: 110: rfTrcvStatus.hwRx->crc = data;
  7209  0488  0820               	movf	_rfTrcvStatus^(0+128),w
  7210  0489  3E16               	addlw	22
  7211  048A  0086               	movwf	6
  7212  048B  0875               	movf	i1Mrf49xaServe@data,w
  7213  048C  0081               	movwf	1
  7214                           
  7215                           ;mrf49xa_data.c: 114: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  7216  048D  0820               	movf	_rfTrcvStatus^(0+128),w
  7217  048E  0086               	movwf	6
  7218  048F  3005               	movlw	5
  7219  0490  0081               	movwf	1
  7220                           
  7221                           ;mrf49xa_data.c: 120: Mrf49xaModeRx();
  7222  0491  24FC  3184         	fcall	i1_Mrf49xaModeRx
  7223                           
  7224                           ;mrf49xa_data.c: 123: LATCbits.LATC2 = 1;
  7225  0493  0022               	movlb	2	; select bank2
  7226  0494  150E               	bsf	14,2	;volatile
  7227                           
  7228                           ;mrf49xa_data.c: 124: LATCbits.LATC2 = 0;
  7229  0495  110E               	bcf	14,2	;volatile
  7230                           
  7231                           ;mrf49xa_data.c: 126: }
  7232  0496  2CEF               	goto	i1l2840
  7233  0497                     i1l2800:	
  7234                           
  7235                           ;mrf49xa_data.c: 127: else
  7236                           ;mrf49xa_data.c: 128: {
  7237                           ;mrf49xa_data.c: 129: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  7238  0497  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7239  0498  0720               	addwf	_rfTrcvStatus^(0+128),w
  7240  0499  00F4               	movwf	??i1_Mrf49xaServe
  7241  049A  0A74               	incf	??i1_Mrf49xaServe,w
  7242  049B  0086               	movwf	6
  7243  049C  0187               	clrf	7
  7244  049D  0875               	movf	i1Mrf49xaServe@data,w
  7245  049E  0081               	movwf	1
  7246  049F                     i1l2802:	
  7247  049F  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7248  04A0  2CEF               	goto	i1l2840
  7249  04A1                     i1l2804:	
  7250                           
  7251                           ;mrf49xa_data.c: 135: rfTrcvStatus.hwByte++;
  7252  04A1  0AED               	incf	(_rfTrcvStatus^(0+128)+77),f
  7253                           
  7254                           ;mrf49xa_data.c: 137: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  7255  04A2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7256  04A3  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  7257  04A4  1D03               	skipz
  7258  04A5  2CD2               	goto	i1l2834
  7259                           
  7260                           ;mrf49xa_data.c: 138: rfTrcvStatus.hwByte = 49;
  7261  04A6  3031               	movlw	49
  7262  04A7  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7263  04A8  2CD2               	goto	i1l2834
  7264  04A9                     i1l2810:	
  7265                           
  7266                           ;mrf49xa_data.c: 143: Mrf49TxByte(0x2D);
  7267  04A9  302D               	movlw	45
  7268  04AA  24F4  3184         	fcall	i1_Mrf49TxByte
  7269                           
  7270                           ;mrf49xa_data.c: 144: break;
  7271  04AC  2CEF               	goto	i1l2840
  7272  04AD                     i1l2812:	
  7273                           
  7274                           ;mrf49xa_data.c: 147: Mrf49TxByte(0xD4);
  7275  04AD  30D4               	movlw	212
  7276  04AE  24F4  3184         	fcall	i1_Mrf49TxByte
  7277                           
  7278                           ;mrf49xa_data.c: 148: rfTrcvStatus.hwByte = 0xFF;
  7279  04B0  30FF               	movlw	255
  7280  04B1  0021               	movlb	1	; select bank1
  7281  04B2  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  7282                           
  7283                           ;mrf49xa_data.c: 149: break;
  7284  04B3  2CEF               	goto	i1l2840
  7285  04B4                     i1l2816:	
  7286                           
  7287                           ;mrf49xa_data.c: 153: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  7288  04B4  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7289  04B5  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  7290  04B6  0086               	movwf	6
  7291  04B7  0187               	clrf	7
  7292  04B8  0801               	movf	1,w
  7293  04B9  24F4  3184         	fcall	i1_Mrf49TxByte
  7294                           
  7295                           ;mrf49xa_data.c: 154: break;
  7296  04BB  2CEF               	goto	i1l2840
  7297  04BC                     i1l2818:	
  7298                           
  7299                           ;mrf49xa_data.c: 157: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  7300  04BC  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  7301  04BD  24F4  3184         	fcall	i1_Mrf49TxByte
  7302                           
  7303                           ;mrf49xa_data.c: 158: break;
  7304  04BF  2CEF               	goto	i1l2840
  7305  04C0                     i1l2820:	
  7306                           
  7307                           ;mrf49xa_data.c: 161: Mrf49TxByte(0x00);
  7308  04C0  3000               	movlw	0
  7309  04C1  24F4  3184         	fcall	i1_Mrf49TxByte
  7310                           
  7311                           ;mrf49xa_data.c: 162: break;
  7312  04C3  2CEF               	goto	i1l2840
  7313  04C4                     i1l2822:	
  7314                           
  7315                           ;mrf49xa_data.c: 165: Mrf49TxByte(0x00);
  7316  04C4  3000               	movlw	0
  7317  04C5  24F4  3184         	fcall	i1_Mrf49TxByte
  7318                           
  7319                           ;mrf49xa_data.c: 166: Mrf49xaModeRx();
  7320  04C7  24FC  3184         	fcall	i1_Mrf49xaModeRx
  7321                           
  7322                           ;mrf49xa_data.c: 168: rfTrcvStatus.txPacket.retry = 0;
  7323  04C9  30F0               	movlw	-16
  7324  04CA  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  7325                           
  7326                           ;mrf49xa_data.c: 170: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  7327  04CB  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  7328  04CC  2CD0               	goto	i1l2830
  7329                           
  7330                           ;mrf49xa_data.c: 171: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  7331  04CD  3003               	movlw	3
  7332  04CE  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  7333  04CF  2CEF               	goto	i1l2840
  7334  04D0                     i1l2830:	
  7335                           
  7336                           ;mrf49xa_data.c: 172: else
  7337                           ;mrf49xa_data.c: 173: rfTrcvStatus.txPacket.state = PKT_FREE;
  7338  04D0  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  7339  04D1  2CEF               	goto	i1l2840
  7340  04D2                     i1l2834:	
  7341  04D2  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7342                           
  7343                           ; Switch size 1, requested type "space"
  7344                           ; Number of cases is 5, Range of values is 49 to 101
  7345                           ; switch strategies available:
  7346                           ; Name         Instructions Cycles
  7347                           ; simple_byte           16     9 (average)
  7348                           ; direct_byte          115     9 (fixed)
  7349                           ; jumptable            263     9 (fixed)
  7350                           ;	Chosen strategy is simple_byte
  7351  04D3  3A31               	xorlw	49	; case 49
  7352  04D4  1903               	skipnz
  7353  04D5  2CBC               	goto	i1l2818
  7354  04D6  3A03               	xorlw	3	; case 50
  7355  04D7  1903               	skipnz
  7356  04D8  2CC0               	goto	i1l2820
  7357  04D9  3A01               	xorlw	1	; case 51
  7358  04DA  1903               	skipnz
  7359  04DB  2CC4               	goto	i1l2822
  7360  04DC  3A57               	xorlw	87	; case 100
  7361  04DD  1903               	skipnz
  7362  04DE  2CA9               	goto	i1l2810
  7363  04DF  3A01               	xorlw	1	; case 101
  7364  04E0  1903               	skipnz
  7365  04E1  2CAD               	goto	i1l2812
  7366  04E2  2CB4               	goto	i1l2816
  7367  04E3                     i1l2838:	
  7368  04E3  0021               	movlb	1	; select bank1
  7369  04E4  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  7370                           
  7371                           ; Switch size 1, requested type "space"
  7372                           ; Number of cases is 3, Range of values is 0 to 2
  7373                           ; switch strategies available:
  7374                           ; Name         Instructions Cycles
  7375                           ; simple_byte           10     6 (average)
  7376                           ; direct_byte           12     6 (fixed)
  7377                           ; jumptable            260     6 (fixed)
  7378                           ;	Chosen strategy is simple_byte
  7379  04E5  3A00               	xorlw	0	; case 0
  7380  04E6  1903               	skipnz
  7381  04E7  2C50               	goto	i1l2756
  7382  04E8  3A01               	xorlw	1	; case 1
  7383  04E9  1903               	skipnz
  7384  04EA  2C74               	goto	i1l2782
  7385  04EB  3A03               	xorlw	3	; case 2
  7386  04EC  1903               	skipnz
  7387  04ED  2CA1               	goto	i1l2804
  7388  04EE  2CEF               	goto	i1l2840
  7389  04EF                     i1l2840:	
  7390                           
  7391                           ;mrf49xa_data.c: 180: }
  7392                           ;mrf49xa_data.c: 194: return PORTAbits.RA2 == 1 ? 1 : 0;
  7393  04EF  0020               	movlb	0	; select bank0
  7394  04F0  0C0C               	rrf	12,w	;volatile
  7395  04F1  0C89               	rrf	9,f
  7396  04F2  3901               	andlw	1
  7397  04F3  0008               	return
  7398  04F4                     __end_ofi1_Mrf49xaServe:	
  7399  04F4                     __ptext39:	
  7400 ;; *************** function i1_Mrf49TxByte *****************
  7401 ;; Defined at:
  7402 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  byte            1    wreg     unsigned char 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  byte            1    3[COMMON] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, pclath, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 1E/1
  7413 ;;		On exit  : 1F/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7416 ;;      Params:         0       0       0       0
  7417 ;;      Locals:         1       0       0       0
  7418 ;;      Temps:          0       0       0       0
  7419 ;;      Totals:         1       0       0       0
  7420 ;;Total ram usage:        1 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    2
  7423 ;; This function calls:
  7424 ;;		i1_Mrf49TxCmd
  7425 ;; This function is called by:
  7426 ;;		i1_Mrf49xaServe
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           
  7431                           ;psect for function i1_Mrf49TxByte
  7432  04F4                     i1_Mrf49TxByte:	
  7433                           
  7434                           ;incstack = 0
  7435                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  7436                           ;i1Mrf49TxByte@byte stored from wreg
  7437  04F4  00F3               	movwf	i1Mrf49TxByte@byte
  7438                           
  7439                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  7440  04F5  00F1               	movwf	i1Mrf49TxCmd@val
  7441  04F6  30B8               	movlw	184
  7442  04F7  251C               	fcall	i1_Mrf49TxCmd
  7443  04F8  0008               	return
  7444  04F9                     __end_ofi1_Mrf49TxByte:	
  7445  04F9                     __ptext42:	
  7446 ;; *************** function i1_Mrf49RxByte *****************
  7447 ;; Defined at:
  7448 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;		None
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      unsigned char 
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 1E/1
  7459 ;;		On exit  : 1F/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7462 ;;      Params:         0       0       0       0
  7463 ;;      Locals:         0       0       0       0
  7464 ;;      Temps:          0       0       0       0
  7465 ;;      Totals:         0       0       0       0
  7466 ;;Total ram usage:        0 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; Hardware stack levels required when called:    2
  7469 ;; This function calls:
  7470 ;;		i1_Mrf49RxCmd
  7471 ;; This function is called by:
  7472 ;;		i1_Mrf49xaServe
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function i1_Mrf49RxByte
  7478  04F9                     i1_Mrf49RxByte:	
  7479                           
  7480                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  7484  04F9  30B0               	movlw	176
  7485  04FA  241E               	fcall	i1_Mrf49RxCmd
  7486  04FB  0008               	return
  7487  04FC                     __end_ofi1_Mrf49RxByte:	
  7488  04FC                     __ptext38:	
  7489 ;; *************** function i1_Mrf49xaModeRx *****************
  7490 ;; Defined at:
  7491 ;;		line 92 in file "../../../src/devices/mrf49xa.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;		None               void
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0, pclath, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 1E/0
  7502 ;;		On exit  : 1F/1
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7505 ;;      Params:         0       0       0       0
  7506 ;;      Locals:         1       0       0       0
  7507 ;;      Temps:          0       0       0       0
  7508 ;;      Totals:         1       0       0       0
  7509 ;;Total ram usage:        1 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    2
  7512 ;; This function calls:
  7513 ;;		i1_Mrf49TxCmd
  7514 ;; This function is called by:
  7515 ;;		i1_Mrf49xaServe
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function i1_Mrf49xaModeRx
  7521  04FC                     i1_Mrf49xaModeRx:	
  7522  04FC  309D               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  7523                           
  7524                           ;mrf49xa.c: 94: UI08_t k;
  7525                           ;mrf49xa.c: 95: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg, 
      +                          mrfRegset_Rx[k].val); };
  7526                           
  7527                           ;incstack = 0
  7528                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  7529  04FD  01F3               	clrf	i1Mrf49xaModeRx@k
  7530  04FE  3187               	movlp	high __stringtab
  7531  04FF  000A               	callw
  7532  0500  3184               	pagesel	$	;select current page
  7533  0501  3800               	iorlw	0
  7534  0502  1903               	btfsc	3,2
  7535  0503  2D18               	goto	i1l2588
  7536  0504                     i1l2582:	
  7537  0504  3573               	lslf	i1Mrf49xaModeRx@k,w
  7538  0505  3EC0               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  7539  0506  3187               	movlp	high __stringtab
  7540  0507  000A               	callw
  7541  0508  00F1               	movwf	i1Mrf49TxCmd@val
  7542  0509  3573               	lslf	i1Mrf49xaModeRx@k,w
  7543  050A  3EBF               	addlw	low (_mrfRegset_Rx| (0+32768))
  7544  050B  3187               	movlp	high __stringtab
  7545  050C  000A               	callw
  7546  050D  3184               	pagesel	$	;select current page
  7547  050E  3185  251C         	fcall	i1_Mrf49TxCmd
  7548  0510  309D               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  7549  0511  0AF3               	incf	i1Mrf49xaModeRx@k,f
  7550  0512  3187               	movlp	high __stringtab
  7551  0513  000A               	callw
  7552  0514  3184               	pagesel	$	;select current page
  7553  0515  0273               	subwf	i1Mrf49xaModeRx@k,w
  7554  0516  1C03               	skipc
  7555  0517  2D04               	goto	i1l2582
  7556  0518                     i1l2588:	
  7557                           
  7558                           ;mrf49xa.c: 98: rfTrcvStatus.state = RECV_IDLE;
  7559  0518  0021               	movlb	1	; select bank1
  7560  0519  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  7561                           
  7562                           ;mrf49xa.c: 99: rfTrcvStatus.hwByte = 0;
  7563  051A  01ED               	clrf	(_rfTrcvStatus^(0+128)+77)
  7564  051B  0008               	return
  7565  051C                     __end_ofi1_Mrf49xaModeRx:	
  7566  051C                     __ptext40:	
  7567 ;; *************** function i1_Mrf49TxCmd *****************
  7568 ;; Defined at:
  7569 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  cmd             1    wreg     unsigned char 
  7572 ;;  val             1    1[COMMON] unsigned char 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  cmd             1    2[COMMON] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;		None               void
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0, pclath, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 1E/0
  7581 ;;		On exit  : 1F/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7584 ;;      Params:         1       0       0       0
  7585 ;;      Locals:         1       0       0       0
  7586 ;;      Temps:          0       0       0       0
  7587 ;;      Totals:         2       0       0       0
  7588 ;;Total ram usage:        2 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    1
  7591 ;; This function calls:
  7592 ;;		i1_Mrf49SpiTx
  7593 ;; This function is called by:
  7594 ;;		i1_Mrf49xaModeRx
  7595 ;;		i1_Mrf49TxByte
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function i1_Mrf49TxCmd
  7601  051C                     i1_Mrf49TxCmd:	
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  7605                           ;i1Mrf49TxCmd@cmd stored from wreg
  7606  051C  00F2               	movwf	i1Mrf49TxCmd@cmd
  7607                           
  7608                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  7609  051D  0020               	movlb	0	; select bank0
  7610  051E  130E               	bcf	14,6	;volatile
  7611                           
  7612                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  7613  051F  0872               	movf	i1Mrf49TxCmd@cmd,w
  7614  0520  2526  3184         	fcall	i1_Mrf49SpiTx
  7615                           
  7616                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  7617  0522  0871               	movf	i1Mrf49TxCmd@val,w
  7618  0523  2526               	fcall	i1_Mrf49SpiTx
  7619                           
  7620                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  7621  0524  170E               	bsf	14,6	;volatile
  7622  0525  0008               	return
  7623  0526                     __end_ofi1_Mrf49TxCmd:	
  7624  0526                     __ptext44:	
  7625 ;; *************** function i1_Mrf49SpiTx *****************
  7626 ;; Defined at:
  7627 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  byte            1    wreg     unsigned char 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  byte            1    0[COMMON] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;		None               void
  7634 ;; Registers used:
  7635 ;;		wreg
  7636 ;; Tracked objects:
  7637 ;;		On entry : 1F/0
  7638 ;;		On exit  : 1F/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7641 ;;      Params:         0       0       0       0
  7642 ;;      Locals:         1       0       0       0
  7643 ;;      Temps:          0       0       0       0
  7644 ;;      Totals:         1       0       0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		i1_Mrf49TxCmd
  7651 ;;		i1_Mrf49RxCmd
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function i1_Mrf49SpiTx
  7657  0526                     i1_Mrf49SpiTx:	
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  7661                           ;i1Mrf49SpiTx@byte stored from wreg
  7662  0526  00F0               	movwf	i1Mrf49SpiTx@byte
  7663                           
  7664                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7665  0527  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  7666  0528  2D2B               	goto	i1l218
  7667  0529  178D               	bsf	13,7	;volatile
  7668  052A  2D2C               	goto	i1l219
  7669  052B                     i1l218:	
  7670  052B  138D               	bcf	13,7	;volatile
  7671  052C                     i1l219:	
  7672  052C  0022               	movlb	2	; select bank2
  7673  052D  178E               	bsf	14,7	;volatile
  7674  052E  0000               	nop	;# 
  7675  052F  0022               	movlb	2	; select bank2
  7676  0530  138E               	bcf	14,7	;volatile
  7677  0531  1F70               	btfss	i1Mrf49SpiTx@byte,6
  7678  0532  2D36               	goto	i1l222
  7679  0533  0020               	movlb	0	; select bank0
  7680  0534  178D               	bsf	13,7	;volatile
  7681  0535  2D38               	goto	i1l223
  7682  0536                     i1l222:	
  7683  0536  0020               	movlb	0	; select bank0
  7684  0537  138D               	bcf	13,7	;volatile
  7685  0538                     i1l223:	
  7686  0538  0022               	movlb	2	; select bank2
  7687  0539  178E               	bsf	14,7	;volatile
  7688  053A  0000               	nop	;# 
  7689  053B  0022               	movlb	2	; select bank2
  7690  053C  138E               	bcf	14,7	;volatile
  7691  053D  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  7692  053E  2D42               	goto	i1l226
  7693  053F  0020               	movlb	0	; select bank0
  7694  0540  178D               	bsf	13,7	;volatile
  7695  0541  2D44               	goto	i1l227
  7696  0542                     i1l226:	
  7697  0542  0020               	movlb	0	; select bank0
  7698  0543  138D               	bcf	13,7	;volatile
  7699  0544                     i1l227:	
  7700  0544  0022               	movlb	2	; select bank2
  7701  0545  178E               	bsf	14,7	;volatile
  7702  0546  0000               	nop	;# 
  7703  0547  0022               	movlb	2	; select bank2
  7704  0548  138E               	bcf	14,7	;volatile
  7705  0549  1E70               	btfss	i1Mrf49SpiTx@byte,4
  7706  054A  2D4E               	goto	i1l230
  7707  054B  0020               	movlb	0	; select bank0
  7708  054C  178D               	bsf	13,7	;volatile
  7709  054D  2D50               	goto	i1l231
  7710  054E                     i1l230:	
  7711  054E  0020               	movlb	0	; select bank0
  7712  054F  138D               	bcf	13,7	;volatile
  7713  0550                     i1l231:	
  7714  0550  0022               	movlb	2	; select bank2
  7715  0551  178E               	bsf	14,7	;volatile
  7716  0552  0000               	nop	;# 
  7717  0553  0022               	movlb	2	; select bank2
  7718  0554  138E               	bcf	14,7	;volatile
  7719  0555  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  7720  0556  2D5A               	goto	i1l234
  7721  0557  0020               	movlb	0	; select bank0
  7722  0558  178D               	bsf	13,7	;volatile
  7723  0559  2D5C               	goto	i1l235
  7724  055A                     i1l234:	
  7725  055A  0020               	movlb	0	; select bank0
  7726  055B  138D               	bcf	13,7	;volatile
  7727  055C                     i1l235:	
  7728  055C  0022               	movlb	2	; select bank2
  7729  055D  178E               	bsf	14,7	;volatile
  7730  055E  0000               	nop	;# 
  7731  055F  0022               	movlb	2	; select bank2
  7732  0560  138E               	bcf	14,7	;volatile
  7733  0561  1D70               	btfss	i1Mrf49SpiTx@byte,2
  7734  0562  2D66               	goto	i1l238
  7735  0563  0020               	movlb	0	; select bank0
  7736  0564  178D               	bsf	13,7	;volatile
  7737  0565  2D68               	goto	i1l239
  7738  0566                     i1l238:	
  7739  0566  0020               	movlb	0	; select bank0
  7740  0567  138D               	bcf	13,7	;volatile
  7741  0568                     i1l239:	
  7742  0568  0022               	movlb	2	; select bank2
  7743  0569  178E               	bsf	14,7	;volatile
  7744  056A  0000               	nop	;# 
  7745  056B  0022               	movlb	2	; select bank2
  7746  056C  138E               	bcf	14,7	;volatile
  7747  056D  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  7748  056E  2D72               	goto	i1l242
  7749  056F  0020               	movlb	0	; select bank0
  7750  0570  178D               	bsf	13,7	;volatile
  7751  0571  2D74               	goto	i1l243
  7752  0572                     i1l242:	
  7753  0572  0020               	movlb	0	; select bank0
  7754  0573  138D               	bcf	13,7	;volatile
  7755  0574                     i1l243:	
  7756  0574  0022               	movlb	2	; select bank2
  7757  0575  178E               	bsf	14,7	;volatile
  7758  0576  0000               	nop	;# 
  7759  0577  0022               	movlb	2	; select bank2
  7760  0578  138E               	bcf	14,7	;volatile
  7761  0579  1C70               	btfss	i1Mrf49SpiTx@byte,0
  7762  057A  2D7E               	goto	i1l246
  7763  057B  0020               	movlb	0	; select bank0
  7764  057C  178D               	bsf	13,7	;volatile
  7765  057D  2D80               	goto	i1l247
  7766  057E                     i1l246:	
  7767  057E  0020               	movlb	0	; select bank0
  7768  057F  138D               	bcf	13,7	;volatile
  7769  0580                     i1l247:	
  7770  0580  0022               	movlb	2	; select bank2
  7771  0581  178E               	bsf	14,7	;volatile
  7772  0582  0000               	nop	;# 
  7773  0583  0022               	movlb	2	; select bank2
  7774  0584  138E               	bcf	14,7	;volatile
  7775                           
  7776                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7777  0585  0020               	movlb	0	; select bank0
  7778  0586  138D               	bcf	13,7	;volatile
  7779  0587  0008               	return
  7780  0588                     __end_ofi1_Mrf49SpiTx:	
  7781  0588                     __ptext41:	
  7782 ;; *************** function i1_Mrf49RxSts *****************
  7783 ;; Defined at:
  7784 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;		None
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;		None               void
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, pclath, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 1F/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7798 ;;      Params:         0       0       0       0
  7799 ;;      Locals:         0       0       0       0
  7800 ;;      Temps:          0       0       0       0
  7801 ;;      Totals:         0       0       0       0
  7802 ;;Total ram usage:        0 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    1
  7805 ;; This function calls:
  7806 ;;		i1_Mrf49SpiRx
  7807 ;; This function is called by:
  7808 ;;		i1_Mrf49xaServe
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           
  7813                           ;psect for function i1_Mrf49RxSts
  7814  0588                     i1_Mrf49RxSts:	
  7815                           
  7816                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  7817                           
  7818                           ;incstack = 0
  7819                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  7820  0588  120B               	bcf	11,4	;volatile
  7821                           
  7822                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  7823  0589  0020               	movlb	0	; select bank0
  7824  058A  130E               	bcf	14,6	;volatile
  7825                           
  7826                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  7827  058B  2595  3184         	fcall	i1_Mrf49SpiRx
  7828  058D  0020               	movlb	0	; select bank0
  7829  058E  00BB               	movwf	_mrf49Status
  7830                           
  7831                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  7832  058F  2595               	fcall	i1_Mrf49SpiRx
  7833  0590  0020               	movlb	0	; select bank0
  7834  0591  00BC               	movwf	_mrf49Status+1
  7835                           
  7836                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  7837  0592  170E               	bsf	14,6	;volatile
  7838                           
  7839                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  7840  0593  160B               	bsf	11,4	;volatile
  7841  0594  0008               	return
  7842  0595                     __end_ofi1_Mrf49RxSts:	
  7843  0595                     __ptext45:	
  7844 ;; *************** function i1_Mrf49SpiRx *****************
  7845 ;; Defined at:
  7846 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;		None
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      unsigned char 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2
  7855 ;; Tracked objects:
  7856 ;;		On entry : 1F/0
  7857 ;;		On exit  : 1F/2
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7860 ;;      Params:         0       0       0       0
  7861 ;;      Locals:         1       0       0       0
  7862 ;;      Temps:          0       0       0       0
  7863 ;;      Totals:         1       0       0       0
  7864 ;;Total ram usage:        1 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; This function calls:
  7867 ;;		Nothing
  7868 ;; This function is called by:
  7869 ;;		i1_Mrf49RxCmd
  7870 ;;		i1_Mrf49RxSts
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           
  7875                           ;psect for function i1_Mrf49SpiRx
  7876  0595                     i1_Mrf49SpiRx:	
  7877                           
  7878                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  7882  0595  01F0               	clrf	i1Mrf49SpiRx@data
  7883                           
  7884                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7885  0596  138D               	bcf	13,7	;volatile
  7886  0597  1A8E               	btfsc	14,5	;volatile
  7887  0598  17F0               	bsf	i1Mrf49SpiRx@data,7
  7888  0599  0022               	movlb	2	; select bank2
  7889  059A  178E               	bsf	14,7	;volatile
  7890  059B  0000               	nop	;# 
  7891  059C  0022               	movlb	2	; select bank2
  7892  059D  138E               	bcf	14,7	;volatile
  7893                           
  7894                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7895  059E  0020               	movlb	0	; select bank0
  7896  059F  1A8E               	btfsc	14,5	;volatile
  7897  05A0  1770               	bsf	i1Mrf49SpiRx@data,6
  7898  05A1  0022               	movlb	2	; select bank2
  7899  05A2  178E               	bsf	14,7	;volatile
  7900  05A3  0000               	nop	;# 
  7901  05A4  0022               	movlb	2	; select bank2
  7902  05A5  138E               	bcf	14,7	;volatile
  7903                           
  7904                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7905  05A6  0020               	movlb	0	; select bank0
  7906  05A7  1A8E               	btfsc	14,5	;volatile
  7907  05A8  16F0               	bsf	i1Mrf49SpiRx@data,5
  7908  05A9  0022               	movlb	2	; select bank2
  7909  05AA  178E               	bsf	14,7	;volatile
  7910  05AB  0000               	nop	;# 
  7911  05AC  0022               	movlb	2	; select bank2
  7912  05AD  138E               	bcf	14,7	;volatile
  7913                           
  7914                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7915  05AE  0020               	movlb	0	; select bank0
  7916  05AF  1A8E               	btfsc	14,5	;volatile
  7917  05B0  1670               	bsf	i1Mrf49SpiRx@data,4
  7918  05B1  0022               	movlb	2	; select bank2
  7919  05B2  178E               	bsf	14,7	;volatile
  7920  05B3  0000               	nop	;# 
  7921  05B4  0022               	movlb	2	; select bank2
  7922  05B5  138E               	bcf	14,7	;volatile
  7923                           
  7924                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7925  05B6  0020               	movlb	0	; select bank0
  7926  05B7  1A8E               	btfsc	14,5	;volatile
  7927  05B8  15F0               	bsf	i1Mrf49SpiRx@data,3
  7928  05B9  0022               	movlb	2	; select bank2
  7929  05BA  178E               	bsf	14,7	;volatile
  7930  05BB  0000               	nop	;# 
  7931  05BC  0022               	movlb	2	; select bank2
  7932  05BD  138E               	bcf	14,7	;volatile
  7933                           
  7934                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7935  05BE  0020               	movlb	0	; select bank0
  7936  05BF  1A8E               	btfsc	14,5	;volatile
  7937  05C0  1570               	bsf	i1Mrf49SpiRx@data,2
  7938  05C1  0022               	movlb	2	; select bank2
  7939  05C2  178E               	bsf	14,7	;volatile
  7940  05C3  0000               	nop	;# 
  7941  05C4  0022               	movlb	2	; select bank2
  7942  05C5  138E               	bcf	14,7	;volatile
  7943                           
  7944                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7945  05C6  0020               	movlb	0	; select bank0
  7946  05C7  1A8E               	btfsc	14,5	;volatile
  7947  05C8  14F0               	bsf	i1Mrf49SpiRx@data,1
  7948  05C9  0022               	movlb	2	; select bank2
  7949  05CA  178E               	bsf	14,7	;volatile
  7950  05CB  0000               	nop	;# 
  7951  05CC  0022               	movlb	2	; select bank2
  7952  05CD  138E               	bcf	14,7	;volatile
  7953                           
  7954                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7955  05CE  0020               	movlb	0	; select bank0
  7956  05CF  1A8E               	btfsc	14,5	;volatile
  7957  05D0  1470               	bsf	i1Mrf49SpiRx@data,0
  7958  05D1  0022               	movlb	2	; select bank2
  7959  05D2  178E               	bsf	14,7	;volatile
  7960  05D3  0000               	nop	;# 
  7961  05D4  0022               	movlb	2	; select bank2
  7962  05D5  138E               	bcf	14,7	;volatile
  7963                           
  7964                           ;mrf49xa_spi_pic16.c: 40: return data;
  7965  05D6  0870               	movf	i1Mrf49SpiRx@data,w
  7966  05D7  0008               	return
  7967  05D8                     __end_ofi1_Mrf49SpiRx:	
  7968  007E                     btemp	set	126	;btemp
  7969  007E                     wtemp	set	126
  7970  007E                     wtemp0	set	126
  7971  0080                     wtemp1	set	128
  7972  0082                     wtemp2	set	130
  7973  0084                     wtemp3	set	132
  7974  0086                     wtemp4	set	134
  7975  0088                     wtemp5	set	136
  7976  007F                     wtemp6	set	127
  7977  007E                     ttemp	set	126
  7978  007E                     ttemp0	set	126
  7979  0081                     ttemp1	set	129
  7980  0084                     ttemp2	set	132
  7981  0087                     ttemp3	set	135
  7982  007F                     ttemp4	set	127
  7983  007E                     ltemp	set	126
  7984  007E                     ltemp0	set	126
  7985  0082                     ltemp1	set	130
  7986  0086                     ltemp2	set	134
  7987  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    55
    Data        0
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     27      29
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwWrite@packetData	PTR unsigned int  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), NULL(NULL[0]), 

    handleFwWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), eepromTxByte@byte(COMMON[1]), 
		 -> NULL(NULL[0]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwRead@packet..(COMMON[21]), handleFwWrite@packet..(COMMON[21]), 
		 -> handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), NULL(NULL[0]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    S329rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _SoftI2cInit->_SoftI2cTxByte
    _RfSendPowerState->_Mrf49xaTxPacket
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _HandlePacket->_handleFwWrite
    _handleFwWrite->_eepromRxBytes
    _handleFwWrite->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _handleFwRead->_eepromRxBytes
    _handleFwCmd->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14912
                                             26 BANK0      1     1      0
                            _AdcInit
                         _ExtIntInit
                        _Mrf49xaInit
                        _Mrf49xaTick
                   _RfSendPowerState
                        _SoftI2cInit
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     1     1      0    1287
                                              6 BANK0      1     1      0
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   10229
                                             22 BANK0      4     4      0
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     742
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0    9227
                                             18 BANK0      4     4      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
                       _handleFwRead
                      _handleFwWrite
 ---------------------------------------------------------------------------------
 (3) _handleFwWrite                                       10    10      0    2718
                                              8 BANK0     10    10      0
                      _eepromRxBytes
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _handleFwRead                                         3     3      0    1767
                                              8 BANK0      3     3      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1809
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1619
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (2) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (2) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1344
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1154
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaInit                                          6     6      0    3275
                                              6 BANK0      4     4      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaServe                                         2     2      0    1769
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     742
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxByte                                          1     1      0     674
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (3) _Mrf49TxCmd                                           2     1      1     652
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (2) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               1     1      0    1009
                                              6 COMMON     1     1      0
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _Mrf49xaInit
     _Mrf49TxCmd
       _Mrf49SpiTx
     _Mrf49xaModeRx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaServe
       _Mrf49RxByte
         _Mrf49RxCmd
           _Mrf49SpiRx
           _Mrf49SpiTx
       _Mrf49RxSts
         _Mrf49SpiRx
       _Mrf49TxByte
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _Mrf49xaTick
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwRead
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwWrite
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
         _eepromTxBytes
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
   _RfSendPowerState
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _SoftI2cInit
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _SysInitGpio

 _extInt (ROOT)
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      73       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1B      1D       6       36.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      73      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Mon Jun 30 16:08:20 2014

           Mrf49xaTxPacket@crc 0023                              pc 0002                    __CFG_CP$OFF 0000  
                           PL2 0776                             PL4 03FD                             PL6 0791  
                           PL8 040B                             l32 069A                             l42 06EE  
                           l34 06A6                             l35 06A8                             l39 06D1  
                  __CFG_LVP$ON 0000          Mrf49xaTxPacket@packet 0025                            l230 0264  
                          l222 024E                            l231 0265                            l223 024F  
                          l242 0285                            l234 026F                            l226 0259  
                          l218 0243                            l243 0286                            l235 0270  
                          l227 025A                            l219 0244                            l246 0290  
                          l238 027A                            l247 0291                            l239 027B  
                          l504 0324                            l338 0764                            l373 00C9  
                          l395 014D                            l396 0165                            l488 036F  
                 __CFG_BORV$LO 0000                            wreg 0009               i1Mrf49xaModeRx@k 0073  
                 __CFG_IESO$ON 0000         ??_SoftI2cRepeatedStart 0077                           S2888 0800  
       Mrf49xaTxPacket@needAck 0021                           l2112 073D                           l2018 06F0  
                         l2400 0177                           l2128 0740                           l2304 0387  
                         l2170 0772                           l2138 074B                           l2270 021D  
                         l2158 0752                           l2182 0684                           l2174 0672  
                         l2424 0198                           l2416 018C                           l2184 0695  
                         l2336 0609                           l2512 03B5                           l2450 01CD  
                         l2434 01AE                           l2194 0663                           l2276 0231  
                         l2452 01D5                           l2444 01C2                           l2196 0671  
                         l2540 0305                           l2454 01D9                           l2446 01C6  
                         l2438 01BA                           l2390 0169                           l2382 0150  
                         l2550 0327                           l2542 030B                           l2464 01E9  
                         l2456 01DD                           l2472 01FC                           l2640 0132  
                         l2296 0370                           l2544 030F                           l2528 0418  
                         l2394 016E                           l2474 0208                           l2386 0159  
                         l2634 0114                           l2570 0359                           l2554 032B  
                         l2490 07EF                           l2706 00B6                           l2468 01EB  
                         l2396 0171                           l2644 013B                           l2564 0334  
                         l2484 07DB                           l2638 0126                           l1918 06FC  
                         l2574 035F                           l2558 0330                           l2566 034F  
                         l2670 006F                           l2662 0060                           l2648 013D  
                         l2680 008C                           l2664 0064                           l1962 0632  
                         l2658 0056                           l2668 006D                           l2684 0098  
                         l2862 0033                Mrf49TxByte@byte 0023                           l2696 00AC  
                         l2698 00AD                           u2107 00BB                           u2117 05F4  
                         u2127 06FF                           u2137 00E5                           u2147 00F4  
                         u2157 0103                           u2167 0120                           u2097 0093  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                           _main 0022  
              __end_of_AdcInit 02F7                           fsr0h 0005                           fsr1h 0007  
                         fsr0l 0004                           indf0 0000                           indf1 0001  
                         fsr1l 0006                           btemp 007E                           ltemp 007E  
                         start 0014                           ttemp 007E                           wtemp 007E  
         __end_of_HandlePacket 0361        __end_ofi1_Mrf49xaModeRx 051C                  __CFG_MCLRE$ON 0000  
          __end_of_Mrf49RxByte 0214            __end_of_Mrf49TxByte 0212                ??_eepromRxBytes 0077  
              ??_eepromTxBytes 0077               _RfSendPowerState 03BC            __end_of_Mrf49xaInit 0143  
          __end_of_Mrf49xaTick 00D0           _Mrf49xaPacketPending 03A4                          ?_main 0070  
                __CFG_WDTE$OFF 0000                          i1l131 0011                          i1l230 054E  
                        i1l222 0536                          i1l231 0550                          i1l223 0538  
                        i1l242 0572                          i1l234 055A                          i1l226 0542  
                        i1l218 052B                          i1l243 0574                          i1l235 055C  
                        i1l227 0544                          i1l219 052C                          i1l246 057E  
                        i1l238 0566                          i1l247 0580                          i1l239 0568  
                        i1l395 0434                          i1l396 044C                     _Mrf49RxCmd 00D0  
                   _Mrf49TxCmd 0235                     _Mrf49SpiRx 02A4                     _Mrf49SpiTx 023E  
                   _Mrf49RxSts 0299     __end_of_Mrf49xaAllocPacket 041E          __end_of_SoftI2cRxByte 06FC  
        __end_of_SoftI2cTxByte 06C4        Mrf49xaTxPacket@response 0020                          main@k 003A  
               __CFG_BOREN$OFF 0000                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __initialization 0016                     _ExtIntInit 02F7                   __end_of_main 003E  
         __end_of_handleFwRead 03A4                 __CFG_LPBOR$OFF 0000          ?_Mrf49xaPacketPending 0070  
                       ??_main 0077           __size_of_handleFwCmd 0034           __end_of_Mrf49xaTxAck 0730  
         __end_of_Mrf49xaServe 020D            HandlePacket@sendAck 0033                         _ADCON0 009D  
                       _ADCON1 009E                         _ADCON2 009F            HandlePacket@sendMsg 0034  
                    ??_AdcInit 0077                         _ANSELA 018C                         _ANSELB 018D  
                       _ANSELC 018E             i1Mrf49xaServe@data 0075                         i1l2800 0497  
                       i1l2810 04A9                         i1l2802 049F                         i1l2820 04C0  
                       i1l2812 04AD                         i1l2804 04A1                         i1l2582 0504  
                       i1l2830 04D0                         i1l2822 04C4                         i1l2816 04B4  
                       i1l2760 0455                         i1l2840 04EF                         i1l2752 0440  
                       i1l2818 04BC                         i1l2834 04D2                         i1l2762 0458  
                       i1l2588 0518                         i1l2756 0450                         i1l2748 0437  
                       i1l2790 0480                         i1l2782 0474                         i1l2766 045E  
                       i1l2838 04E3                         _FVRCON 0117                         _OSCCON 0099  
                  _Mrf49RxByte 0212                    _Mrf49TxByte 020D                  ??_SoftI2cInit 0077  
                ??_SoftI2cStop 0077                 __CFG_PWRTE$OFF 0000                     _SoftI2cNop 06FC  
             ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 00DA                    _Mrf49xaTick 003E  
              _Mrf49xaRxPacket 03AE                 __CFG_STVREN$ON 0000                _Mrf49xaTxPacket 0730  
                       _extInt 0004                    ?_Mrf49RxCmd 0070                    ?_Mrf49TxCmd 0021  
                  ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070                    ?_Mrf49RxSts 0070  
        __size_of_HandlePacket 0060        __end_of__initialization 001F          __end_ofi1_Mrf49RxByte 04FC  
        __end_ofi1_Mrf49TxByte 04F9                    ?_ExtIntInit 0070                 __pcstackCOMMON 0070  
             SoftI2cRxByte@ack 0021            __end_of_SoftI2cInit 05E3            __end_of_SoftI2cStop 0641  
       ??_Mrf49xaPacketPending 0077        __size_ofi1_Mrf49xaServe 00CA                     __end_ofPL2 0791  
                   __end_ofPL4 040B                     __end_ofPL6 079B                     __end_ofPL8 0411  
        __end_of_handleFwWrite 0632                 _OPTION_REGbits 0095                   _HandlePacket 0301  
      Mrf49xaFreePacket@packet 0020       __end_of_RfSendPowerState 03DE                  ??_SysInitGpio 0077  
                   __pbssBANK0 003B                     __pbssBANK1 00A0                  ?_SoftI2cStart 0070  
      __end_of_Mrf49xaRxPacket 03BC        __end_of_Mrf49xaTxPacket 0776          __size_of_handleFwRead 000F  
        __end_of_Mrf49xaModeRx 0235          __end_of_Mrf49xaModeTx 07F5                    ?_SoftI2cNop 0070  
          __size_of_Mrf49RxCmd 000A            __size_of_Mrf49TxCmd 0009            __size_of_Mrf49SpiRx 0044  
          __size_of_Mrf49SpiTx 005B            __size_of_Mrf49RxSts 000B                     __pmaintext 0022  
                   __pintentry 0004                        ?_extInt 0070          __size_of_Mrf49xaTxAck 0020  
        __size_of_Mrf49xaServe 00CA              handleFwCmd@packet 0028                        _AdcInit 02E8  
          __size_of_ExtIntInit 0005  __size_of_SoftI2cRepeatedStart 0015                     __stringtab 079B  
                 _handleFwRead 0395                 ??_SoftI2cStart 0077             _Mrf49xaAllocPacket 0411  
                  _SoftI2cInit 05D8                  ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071  
                ?i1_Mrf49SpiRx 0070                  ?i1_Mrf49SpiTx 0070                    _SoftI2cStop 0632  
                ?i1_Mrf49RxSts 0070            __end_of_SysInitGpio 03FD                   _Mrf49xaTxAck 0710  
                 _Mrf49xaServe 0143           eepromRxBytes@address 0024            ?_Mrf49xaAllocPacket 0070  
        __end_of_eepromRxBytes 0696          __end_of_eepromTxBytes 0672                __size_of_extInt 0010  
            _mrfRegset_InitCnt 079C                        __ptext1 03DE                        __ptext2 05D8  
                      __ptext3 03BC                        __ptext4 0411                        __ptext5 003E  
                      __ptext6 03AE                        __ptext7 03A4                        __ptext8 07D3  
                      __ptext9 0301            handleFwWrite@packet 0031            __size_of_SoftI2cNop 0007  
         ??_Mrf49xaAllocPacket 0077                        clrloop0 07F6           end_of_initialization 001F  
                 ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070                 ??i1_Mrf49RxCmd 0071  
               ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070                 ??i1_Mrf49SpiTx 0070  
               ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070               ?_Mrf49xaTxPacket 0020  
                 ?_Mrf49xaInit 0070           __end_of_mrfRegset_Rx 07CB           __end_of_mrfRegset_Tx 07D3  
                 ?_Mrf49xaTick 0070         __size_of_SoftI2cRxByte 0038         __size_of_SoftI2cTxByte 002E  
               i1_Mrf49xaServe 042A      __end_of_mrfRegset_InitCnt 079D                  ??_handleFwCmd 0077  
                    _PORTAbits 000C                      _PORTBbits 000D                      _PORTCbits 000E  
                 ??_Mrf49RxCmd 0077                   ??_Mrf49TxCmd 0077                   ??_Mrf49SpiRx 0077  
                 ??_Mrf49SpiTx 0077                   ??_Mrf49RxSts 0077               __CFG_FOSC$INTOSC 0000  
                    _TRISAbits 008C                      _TRISBbits 008D                      _TRISCbits 008E  
                  _SysInitGpio 03DE                 Mrf49SpiRx@data 0020                 Mrf49SpiTx@byte 0020  
           __end_of_Mrf49RxCmd 00DA             __end_of_Mrf49TxCmd 023E         __end_ofi1_Mrf49xaServe 04F4  
                 ??_ExtIntInit 0077             __end_of_Mrf49SpiRx 02E8             __end_of_Mrf49SpiTx 0299  
           __end_of_Mrf49RxSts 02A4              SoftI2cRxByte@data 0022              eepromRxBytes@data 0026  
         __end_of_SoftI2cStart 0710       __size_ofi1_Mrf49xaModeRx 0020                 __end_of_extInt 0014  
            eepromRxBytes@size 0027            start_initialization 0016                  _SoftI2cRxByte 06C4  
          __end_of_handleFwCmd 0395                  _SoftI2cTxByte 0696                 handleFwWrite@i 002E  
           __end_of_ExtIntInit 02FC              SoftI2cTxByte@data 0022              ?_RfSendPowerState 0070  
           HandlePacket@packet 0035             ??_RfSendPowerState 0077                   ??_SoftI2cNop 0020  
              ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 079D                _mrfRegset_TxCnt 079E  
                     ??_extInt 0076  __size_of_Mrf49xaPacketPending 000A              eepromTxBytes@data 0026  
            eepromTxBytes@size 0027         __size_ofi1_Mrf49RxByte 0003         __size_ofi1_Mrf49TxByte 0005  
         __end_ofi1_Mrf49RxCmd 042A           __end_ofi1_Mrf49TxCmd 0526           __end_ofi1_Mrf49SpiRx 05D8  
         __end_ofi1_Mrf49SpiTx 0588           __end_ofi1_Mrf49RxSts 0595                      ___latbits 0001  
                __pcstackBANK0 0020                 ?_SoftI2cRxByte 0070                 ?_SoftI2cTxByte 0070  
            i1Mrf49TxByte@byte 0073             __end_of_SoftI2cNop 0703                       ?_AdcInit 0070  
                 _rfTrcvStatus 00A0                   ?_SoftI2cInit 0070                   ?_SoftI2cStop 0070  
       __size_of_handleFwWrite 004F           __size_of_Mrf49RxByte 0002           __size_of_Mrf49TxByte 0005  
 __end_of_SoftI2cRepeatedStart 0656           __size_of_Mrf49xaInit 0069           __size_of_Mrf49xaTick 0092  
                    __pstrings 079B                      __pswtext1 0800                    _handleFwCmd 0361  
       __size_of_Mrf49xaModeRx 0021         __size_of_Mrf49xaModeTx 0022                   _mrfRegset_Rx 07BF  
                 _mrfRegset_Tx 07CB              ??i1_Mrf49xaModeRx 0073                       _LATAbits 010C  
                     _LATBbits 010D                       _LATCbits 010E                  i1_Mrf49RxByte 04F9  
      __end_of_mrfRegset_RxCnt 079E                  i1_Mrf49TxByte 04F4        __end_of_mrfRegset_TxCnt 079F  
                    clear_ram0 07F5                    _mrf49Status 003B              _Mrf49xaFreePacket 02FC  
               Mrf49xaModeRx@k 0023                 Mrf49xaModeTx@k 0023          __size_of_SoftI2cStart 000D  
                Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070                  Mrf49RxCmd@val 0022  
                Mrf49TxCmd@cmd 0022                  Mrf49TxCmd@val 0021            ??_Mrf49xaFreePacket 0077  
              ??_SoftI2cRxByte 0077                  _handleFwWrite 05E3                ??_SoftI2cTxByte 0077  
                     _WPUAbits 020C    __size_of_Mrf49xaAllocPacket 000D               __size_of_AdcInit 000F  
                 ?_SysInitGpio 0070        handleFwWrite@packetData 002D         __size_of_eepromRxBytes 0024  
               ?i1_Mrf49RxByte 0070         __size_of_eepromTxBytes 001C                   _SoftI2cStart 0703  
               ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 0301                  _Mrf49xaModeRx 0214  
                _Mrf49xaModeTx 07D3                 _mrfRegset_Init 079F       __size_of_Mrf49xaRxPacket 000E  
        __size_ofi1_Mrf49RxCmd 000C          __size_ofi1_Mrf49TxCmd 000A          __size_ofi1_Mrf49SpiRx 0043  
        __size_ofi1_Mrf49SpiTx 0062               i1Mrf49SpiRx@data 0070          __size_ofi1_Mrf49RxSts 000D  
     __size_of_Mrf49xaTxPacket 0046               i1Mrf49SpiTx@byte 0070                 SoftI2cRxByte@i 0023  
           __end_of__stringtab 079C                 ?_handleFwWrite 0070                 SoftI2cTxByte@i 0023  
                ?_HandlePacket 0070           handleFwWrite@address 002F                       __ptext10 05E3  
                     __ptext11 0656                       __ptext20 06FC                       __ptext12 0395  
                     __ptext21 0710                       __ptext13 0361                       __ptext30 0212  
                     __ptext22 0730                       __ptext14 0672                       __ptext31 00D0  
                     __ptext23 02FC                       __ptext15 0696                       __ptext40 051C  
                     __ptext32 023E                       __ptext24 00DA                       __ptext16 0632  
                     __ptext41 0588                       __ptext33 02A4                       __ptext25 0143  
                     __ptext17 0703                       __ptext42 04F9                       __ptext34 02F7  
                     __ptext26 0214                       __ptext18 06C4                       __ptext43 041E  
                     __ptext35 02E8                       __ptext27 020D                       __ptext19 0641  
                     __ptext44 0526                       __ptext28 0235                       __ptext45 0595  
                     __ptext37 042A                       __ptext29 0299                       __ptext38 04FC  
                     __ptext39 04F4           _SoftI2cRepeatedStart 0641               ??i1_Mrf49xaServe 0074  
                __size_of_main 001C                   i1_Mrf49RxCmd 041E         __end_of_mrfRegset_Init 07BF  
           Mrf49xaTxAck@packet 0026                   i1_Mrf49TxCmd 051C                   i1_Mrf49SpiRx 0595  
                 i1_Mrf49SpiTx 0526                 ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070  
                 i1_Mrf49RxSts 0588           __size_of_SoftI2cInit 000B           __size_of_SoftI2cStop 000F  
    __size_of_RfSendPowerState 0022                  _eepromRxBytes 0672                  _eepromTxBytes 0656  
              i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072                 ??_HandlePacket 0077  
           Mrf49xaTick@timeout 0038                     _INTCONbits 000B                i1Mrf49TxCmd@cmd 0072  
              i1Mrf49TxCmd@val 0071          ?_SoftI2cRepeatedStart 0070                  ?_handleFwRead 0070  
              ??i1_Mrf49RxByte 0073                       intlevel1 0000                ??i1_Mrf49TxByte 0073  
 __end_of_Mrf49xaPacketPending 03AE              __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005  
       RfSendPowerState@packet 0026                  ?_Mrf49xaTxAck 0070                   Mrf49xaInit@k 0029  
           handleFwRead@packet 002A                  ?_Mrf49xaServe 0070              Mrf49xaTick@packet 0039  
               ?_eepromRxBytes 0024           eepromTxBytes@address 0024                i1_Mrf49xaModeRx 04FC  
               ?_eepromTxBytes 0024                ??_handleFwWrite 0028                   ?_handleFwCmd 0070  
            ??_Mrf49xaRxPacket 0077              ??_Mrf49xaTxPacket 0022                 ??_handleFwRead 0077  
                ??_Mrf49RxByte 0077                  ??_Mrf49TxByte 0077                ??_Mrf49xaModeRx 0077  
              ??_Mrf49xaModeTx 0077           __size_of_SysInitGpio 001F                 ??_Mrf49xaTxAck 0077  
             Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024                  ??_Mrf49xaInit 0026  
                ??_Mrf49xaTick 0036               Mrf49xaTxPacket@i 0024  

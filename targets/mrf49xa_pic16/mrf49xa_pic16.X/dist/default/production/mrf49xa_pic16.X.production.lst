

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Wed Jul 02 20:27:26 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text67,local,class=CODE,merge=1,delta=2
    17                           	psect	text70,local,class=CODE,merge=1,delta=2
    18                           	psect	text71,local,class=CODE,merge=1,delta=2
    19                           	psect	pa_nodes,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  0007                     	;# 
    29  0008                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  0011                     	;# 
    37  0012                     	;# 
    38  0013                     	;# 
    39  0015                     	;# 
    40  0016                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001B                     	;# 
    47  001C                     	;# 
    48  008C                     	;# 
    49  008D                     	;# 
    50  008E                     	;# 
    51  0091                     	;# 
    52  0092                     	;# 
    53  0093                     	;# 
    54  0095                     	;# 
    55  0096                     	;# 
    56  0097                     	;# 
    57  0099                     	;# 
    58  009A                     	;# 
    59  009B                     	;# 
    60  009B                     	;# 
    61  009C                     	;# 
    62  009D                     	;# 
    63  009E                     	;# 
    64  009F                     	;# 
    65  010C                     	;# 
    66  010D                     	;# 
    67  010E                     	;# 
    68  0111                     	;# 
    69  0112                     	;# 
    70  0113                     	;# 
    71  0114                     	;# 
    72  0115                     	;# 
    73  0116                     	;# 
    74  0117                     	;# 
    75  0118                     	;# 
    76  0119                     	;# 
    77  011D                     	;# 
    78  018C                     	;# 
    79  018D                     	;# 
    80  018E                     	;# 
    81  0191                     	;# 
    82  0191                     	;# 
    83  0192                     	;# 
    84  0193                     	;# 
    85  0193                     	;# 
    86  0194                     	;# 
    87  0195                     	;# 
    88  0196                     	;# 
    89  0199                     	;# 
    90  019A                     	;# 
    91  019B                     	;# 
    92  019B                     	;# 
    93  019C                     	;# 
    94  019D                     	;# 
    95  019E                     	;# 
    96  019F                     	;# 
    97  020C                     	;# 
    98  020D                     	;# 
    99  0211                     	;# 
   100  0211                     	;# 
   101  0212                     	;# 
   102  0212                     	;# 
   103  0213                     	;# 
   104  0213                     	;# 
   105  0214                     	;# 
   106  0214                     	;# 
   107  0215                     	;# 
   108  0215                     	;# 
   109  0215                     	;# 
   110  0216                     	;# 
   111  0216                     	;# 
   112  0217                     	;# 
   113  0217                     	;# 
   114  0391                     	;# 
   115  0392                     	;# 
   116  0393                     	;# 
   117  0394                     	;# 
   118  0395                     	;# 
   119  0396                     	;# 
   120  0498                     	;# 
   121  0498                     	;# 
   122  0499                     	;# 
   123  049A                     	;# 
   124  049B                     	;# 
   125  049B                     	;# 
   126  049C                     	;# 
   127  049E                     	;# 
   128  049F                     	;# 
   129  0611                     	;# 
   130  0612                     	;# 
   131  0613                     	;# 
   132  0613                     	;# 
   133  0614                     	;# 
   134  0615                     	;# 
   135  0616                     	;# 
   136  0616                     	;# 
   137  0617                     	;# 
   138  0618                     	;# 
   139  0619                     	;# 
   140  0619                     	;# 
   141  061A                     	;# 
   142  061B                     	;# 
   143  061C                     	;# 
   144  061C                     	;# 
   145  0691                     	;# 
   146  0692                     	;# 
   147  0693                     	;# 
   148  0694                     	;# 
   149  0695                     	;# 
   150  0F0F                     	;# 
   151  0F10                     	;# 
   152  0F11                     	;# 
   153  0F12                     	;# 
   154  0F13                     	;# 
   155  0F14                     	;# 
   156  0F15                     	;# 
   157  0F16                     	;# 
   158  0F17                     	;# 
   159  0F18                     	;# 
   160  0F19                     	;# 
   161  0F1A                     	;# 
   162  0F1B                     	;# 
   163  0F1C                     	;# 
   164  0F1D                     	;# 
   165  0F1E                     	;# 
   166  0F1F                     	;# 
   167  0F20                     	;# 
   168  0F21                     	;# 
   169  0F22                     	;# 
   170  0F23                     	;# 
   171  0F24                     	;# 
   172  0F25                     	;# 
   173  0F26                     	;# 
   174  0F27                     	;# 
   175  0F28                     	;# 
   176  0F29                     	;# 
   177  0F2A                     	;# 
   178  0F2B                     	;# 
   179  0F2C                     	;# 
   180  0F2D                     	;# 
   181  0F2E                     	;# 
   182  0F2F                     	;# 
   183  0F8C                     	;# 
   184  0F8D                     	;# 
   185  0F91                     	;# 
   186  0F95                     	;# 
   187  0F96                     	;# 
   188  0F97                     	;# 
   189  0F9C                     	;# 
   190  0F9D                     	;# 
   191  0F9E                     	;# 
   192  0FE3                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  0011                     	;# 
   220  0012                     	;# 
   221  0013                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0091                     	;# 
   235  0092                     	;# 
   236  0093                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  0111                     	;# 
   252  0112                     	;# 
   253  0113                     	;# 
   254  0114                     	;# 
   255  0115                     	;# 
   256  0116                     	;# 
   257  0117                     	;# 
   258  0118                     	;# 
   259  0119                     	;# 
   260  011D                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  018E                     	;# 
   264  0191                     	;# 
   265  0191                     	;# 
   266  0192                     	;# 
   267  0193                     	;# 
   268  0193                     	;# 
   269  0194                     	;# 
   270  0195                     	;# 
   271  0196                     	;# 
   272  0199                     	;# 
   273  019A                     	;# 
   274  019B                     	;# 
   275  019B                     	;# 
   276  019C                     	;# 
   277  019D                     	;# 
   278  019E                     	;# 
   279  019F                     	;# 
   280  020C                     	;# 
   281  020D                     	;# 
   282  0211                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0212                     	;# 
   286  0213                     	;# 
   287  0213                     	;# 
   288  0214                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0216                     	;# 
   294  0216                     	;# 
   295  0217                     	;# 
   296  0217                     	;# 
   297  0391                     	;# 
   298  0392                     	;# 
   299  0393                     	;# 
   300  0394                     	;# 
   301  0395                     	;# 
   302  0396                     	;# 
   303  0498                     	;# 
   304  0498                     	;# 
   305  0499                     	;# 
   306  049A                     	;# 
   307  049B                     	;# 
   308  049B                     	;# 
   309  049C                     	;# 
   310  049E                     	;# 
   311  049F                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0613                     	;# 
   316  0614                     	;# 
   317  0615                     	;# 
   318  0616                     	;# 
   319  0616                     	;# 
   320  0617                     	;# 
   321  0618                     	;# 
   322  0619                     	;# 
   323  0619                     	;# 
   324  061A                     	;# 
   325  061B                     	;# 
   326  061C                     	;# 
   327  061C                     	;# 
   328  0691                     	;# 
   329  0692                     	;# 
   330  0693                     	;# 
   331  0694                     	;# 
   332  0695                     	;# 
   333  0F0F                     	;# 
   334  0F10                     	;# 
   335  0F11                     	;# 
   336  0F12                     	;# 
   337  0F13                     	;# 
   338  0F14                     	;# 
   339  0F15                     	;# 
   340  0F16                     	;# 
   341  0F17                     	;# 
   342  0F18                     	;# 
   343  0F19                     	;# 
   344  0F1A                     	;# 
   345  0F1B                     	;# 
   346  0F1C                     	;# 
   347  0F1D                     	;# 
   348  0F1E                     	;# 
   349  0F1F                     	;# 
   350  0F20                     	;# 
   351  0F21                     	;# 
   352  0F22                     	;# 
   353  0F23                     	;# 
   354  0F24                     	;# 
   355  0F25                     	;# 
   356  0F26                     	;# 
   357  0F27                     	;# 
   358  0F28                     	;# 
   359  0F29                     	;# 
   360  0F2A                     	;# 
   361  0F2B                     	;# 
   362  0F2C                     	;# 
   363  0F2D                     	;# 
   364  0F2E                     	;# 
   365  0F2F                     	;# 
   366  0F8C                     	;# 
   367  0F8D                     	;# 
   368  0F91                     	;# 
   369  0F95                     	;# 
   370  0F96                     	;# 
   371  0F97                     	;# 
   372  0F9C                     	;# 
   373  0F9D                     	;# 
   374  0F9E                     	;# 
   375  0FE3                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0013                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0093                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  009F                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0111                     	;# 
   435  0112                     	;# 
   436  0113                     	;# 
   437  0114                     	;# 
   438  0115                     	;# 
   439  0116                     	;# 
   440  0117                     	;# 
   441  0118                     	;# 
   442  0119                     	;# 
   443  011D                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0199                     	;# 
   456  019A                     	;# 
   457  019B                     	;# 
   458  019B                     	;# 
   459  019C                     	;# 
   460  019D                     	;# 
   461  019E                     	;# 
   462  019F                     	;# 
   463  020C                     	;# 
   464  020D                     	;# 
   465  0211                     	;# 
   466  0211                     	;# 
   467  0212                     	;# 
   468  0212                     	;# 
   469  0213                     	;# 
   470  0213                     	;# 
   471  0214                     	;# 
   472  0214                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0216                     	;# 
   477  0216                     	;# 
   478  0217                     	;# 
   479  0217                     	;# 
   480  0391                     	;# 
   481  0392                     	;# 
   482  0393                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0498                     	;# 
   487  0498                     	;# 
   488  0499                     	;# 
   489  049A                     	;# 
   490  049B                     	;# 
   491  049B                     	;# 
   492  049C                     	;# 
   493  049E                     	;# 
   494  049F                     	;# 
   495  0611                     	;# 
   496  0612                     	;# 
   497  0613                     	;# 
   498  0613                     	;# 
   499  0614                     	;# 
   500  0615                     	;# 
   501  0616                     	;# 
   502  0616                     	;# 
   503  0617                     	;# 
   504  0618                     	;# 
   505  0619                     	;# 
   506  0619                     	;# 
   507  061A                     	;# 
   508  061B                     	;# 
   509  061C                     	;# 
   510  061C                     	;# 
   511  0691                     	;# 
   512  0692                     	;# 
   513  0693                     	;# 
   514  0694                     	;# 
   515  0695                     	;# 
   516  0F0F                     	;# 
   517  0F10                     	;# 
   518  0F11                     	;# 
   519  0F12                     	;# 
   520  0F13                     	;# 
   521  0F14                     	;# 
   522  0F15                     	;# 
   523  0F16                     	;# 
   524  0F17                     	;# 
   525  0F18                     	;# 
   526  0F19                     	;# 
   527  0F1A                     	;# 
   528  0F1B                     	;# 
   529  0F1C                     	;# 
   530  0F1D                     	;# 
   531  0F1E                     	;# 
   532  0F1F                     	;# 
   533  0F20                     	;# 
   534  0F21                     	;# 
   535  0F22                     	;# 
   536  0F23                     	;# 
   537  0F24                     	;# 
   538  0F25                     	;# 
   539  0F26                     	;# 
   540  0F27                     	;# 
   541  0F28                     	;# 
   542  0F29                     	;# 
   543  0F2A                     	;# 
   544  0F2B                     	;# 
   545  0F2C                     	;# 
   546  0F2D                     	;# 
   547  0F2E                     	;# 
   548  0F2F                     	;# 
   549  0F8C                     	;# 
   550  0F8D                     	;# 
   551  0F91                     	;# 
   552  0F95                     	;# 
   553  0F96                     	;# 
   554  0F97                     	;# 
   555  0F9C                     	;# 
   556  0F9D                     	;# 
   557  0F9E                     	;# 
   558  0FE3                     	;# 
   559  0FE4                     	;# 
   560  0FE5                     	;# 
   561  0FE6                     	;# 
   562  0FE7                     	;# 
   563  0FE8                     	;# 
   564  0FE9                     	;# 
   565  0FEA                     	;# 
   566  0FEB                     	;# 
   567  0FED                     	;# 
   568  0FEE                     	;# 
   569  0FEF                     	;# 
   570  0000                     	;# 
   571  0001                     	;# 
   572  0002                     	;# 
   573  0003                     	;# 
   574  0004                     	;# 
   575  0005                     	;# 
   576  0006                     	;# 
   577  0007                     	;# 
   578  0008                     	;# 
   579  0009                     	;# 
   580  000A                     	;# 
   581  000B                     	;# 
   582  000C                     	;# 
   583  000D                     	;# 
   584  000E                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0015                     	;# 
   589  0016                     	;# 
   590  0016                     	;# 
   591  0017                     	;# 
   592  0018                     	;# 
   593  0019                     	;# 
   594  001A                     	;# 
   595  001B                     	;# 
   596  001C                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  008E                     	;# 
   600  0091                     	;# 
   601  0092                     	;# 
   602  0093                     	;# 
   603  0095                     	;# 
   604  0096                     	;# 
   605  0097                     	;# 
   606  0099                     	;# 
   607  009A                     	;# 
   608  009B                     	;# 
   609  009B                     	;# 
   610  009C                     	;# 
   611  009D                     	;# 
   612  009E                     	;# 
   613  009F                     	;# 
   614  010C                     	;# 
   615  010D                     	;# 
   616  010E                     	;# 
   617  0111                     	;# 
   618  0112                     	;# 
   619  0113                     	;# 
   620  0114                     	;# 
   621  0115                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  0118                     	;# 
   625  0119                     	;# 
   626  011D                     	;# 
   627  018C                     	;# 
   628  018D                     	;# 
   629  018E                     	;# 
   630  0191                     	;# 
   631  0191                     	;# 
   632  0192                     	;# 
   633  0193                     	;# 
   634  0193                     	;# 
   635  0194                     	;# 
   636  0195                     	;# 
   637  0196                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019E                     	;# 
   645  019F                     	;# 
   646  020C                     	;# 
   647  020D                     	;# 
   648  0211                     	;# 
   649  0211                     	;# 
   650  0212                     	;# 
   651  0212                     	;# 
   652  0213                     	;# 
   653  0213                     	;# 
   654  0214                     	;# 
   655  0214                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0215                     	;# 
   659  0216                     	;# 
   660  0216                     	;# 
   661  0217                     	;# 
   662  0217                     	;# 
   663  0391                     	;# 
   664  0392                     	;# 
   665  0393                     	;# 
   666  0394                     	;# 
   667  0395                     	;# 
   668  0396                     	;# 
   669  0498                     	;# 
   670  0498                     	;# 
   671  0499                     	;# 
   672  049A                     	;# 
   673  049B                     	;# 
   674  049B                     	;# 
   675  049C                     	;# 
   676  049E                     	;# 
   677  049F                     	;# 
   678  0611                     	;# 
   679  0612                     	;# 
   680  0613                     	;# 
   681  0613                     	;# 
   682  0614                     	;# 
   683  0615                     	;# 
   684  0616                     	;# 
   685  0616                     	;# 
   686  0617                     	;# 
   687  0618                     	;# 
   688  0619                     	;# 
   689  0619                     	;# 
   690  061A                     	;# 
   691  061B                     	;# 
   692  061C                     	;# 
   693  061C                     	;# 
   694  0691                     	;# 
   695  0692                     	;# 
   696  0693                     	;# 
   697  0694                     	;# 
   698  0695                     	;# 
   699  0F0F                     	;# 
   700  0F10                     	;# 
   701  0F11                     	;# 
   702  0F12                     	;# 
   703  0F13                     	;# 
   704  0F14                     	;# 
   705  0F15                     	;# 
   706  0F16                     	;# 
   707  0F17                     	;# 
   708  0F18                     	;# 
   709  0F19                     	;# 
   710  0F1A                     	;# 
   711  0F1B                     	;# 
   712  0F1C                     	;# 
   713  0F1D                     	;# 
   714  0F1E                     	;# 
   715  0F1F                     	;# 
   716  0F20                     	;# 
   717  0F21                     	;# 
   718  0F22                     	;# 
   719  0F23                     	;# 
   720  0F24                     	;# 
   721  0F25                     	;# 
   722  0F26                     	;# 
   723  0F27                     	;# 
   724  0F28                     	;# 
   725  0F29                     	;# 
   726  0F2A                     	;# 
   727  0F2B                     	;# 
   728  0F2C                     	;# 
   729  0F2D                     	;# 
   730  0F2E                     	;# 
   731  0F2F                     	;# 
   732  0F8C                     	;# 
   733  0F8D                     	;# 
   734  0F91                     	;# 
   735  0F95                     	;# 
   736  0F96                     	;# 
   737  0F97                     	;# 
   738  0F9C                     	;# 
   739  0F9D                     	;# 
   740  0F9E                     	;# 
   741  0FE3                     	;# 
   742  0FE4                     	;# 
   743  0FE5                     	;# 
   744  0FE6                     	;# 
   745  0FE7                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEF                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  000E                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0013                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  008D                     	;# 
   782  008E                     	;# 
   783  0091                     	;# 
   784  0092                     	;# 
   785  0093                     	;# 
   786  0095                     	;# 
   787  0096                     	;# 
   788  0097                     	;# 
   789  0099                     	;# 
   790  009A                     	;# 
   791  009B                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  009F                     	;# 
   797  010C                     	;# 
   798  010D                     	;# 
   799  010E                     	;# 
   800  0111                     	;# 
   801  0112                     	;# 
   802  0113                     	;# 
   803  0114                     	;# 
   804  0115                     	;# 
   805  0116                     	;# 
   806  0117                     	;# 
   807  0118                     	;# 
   808  0119                     	;# 
   809  011D                     	;# 
   810  018C                     	;# 
   811  018D                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0199                     	;# 
   822  019A                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019C                     	;# 
   826  019D                     	;# 
   827  019E                     	;# 
   828  019F                     	;# 
   829  020C                     	;# 
   830  020D                     	;# 
   831  0211                     	;# 
   832  0211                     	;# 
   833  0212                     	;# 
   834  0212                     	;# 
   835  0213                     	;# 
   836  0213                     	;# 
   837  0214                     	;# 
   838  0214                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0216                     	;# 
   843  0216                     	;# 
   844  0217                     	;# 
   845  0217                     	;# 
   846  0391                     	;# 
   847  0392                     	;# 
   848  0393                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  0498                     	;# 
   853  0498                     	;# 
   854  0499                     	;# 
   855  049A                     	;# 
   856  049B                     	;# 
   857  049B                     	;# 
   858  049C                     	;# 
   859  049E                     	;# 
   860  049F                     	;# 
   861  0611                     	;# 
   862  0612                     	;# 
   863  0613                     	;# 
   864  0613                     	;# 
   865  0614                     	;# 
   866  0615                     	;# 
   867  0616                     	;# 
   868  0616                     	;# 
   869  0617                     	;# 
   870  0618                     	;# 
   871  0619                     	;# 
   872  0619                     	;# 
   873  061A                     	;# 
   874  061B                     	;# 
   875  061C                     	;# 
   876  061C                     	;# 
   877  0691                     	;# 
   878  0692                     	;# 
   879  0693                     	;# 
   880  0694                     	;# 
   881  0695                     	;# 
   882  0F0F                     	;# 
   883  0F10                     	;# 
   884  0F11                     	;# 
   885  0F12                     	;# 
   886  0F13                     	;# 
   887  0F14                     	;# 
   888  0F15                     	;# 
   889  0F16                     	;# 
   890  0F17                     	;# 
   891  0F18                     	;# 
   892  0F19                     	;# 
   893  0F1A                     	;# 
   894  0F1B                     	;# 
   895  0F1C                     	;# 
   896  0F1D                     	;# 
   897  0F1E                     	;# 
   898  0F1F                     	;# 
   899  0F20                     	;# 
   900  0F21                     	;# 
   901  0F22                     	;# 
   902  0F23                     	;# 
   903  0F24                     	;# 
   904  0F25                     	;# 
   905  0F26                     	;# 
   906  0F27                     	;# 
   907  0F28                     	;# 
   908  0F29                     	;# 
   909  0F2A                     	;# 
   910  0F2B                     	;# 
   911  0F2C                     	;# 
   912  0F2D                     	;# 
   913  0F2E                     	;# 
   914  0F2F                     	;# 
   915  0F8C                     	;# 
   916  0F8D                     	;# 
   917  0F91                     	;# 
   918  0F95                     	;# 
   919  0F96                     	;# 
   920  0F97                     	;# 
   921  0F9C                     	;# 
   922  0F9D                     	;# 
   923  0F9E                     	;# 
   924  0FE3                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0013                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0093                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  009F                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010E                     	;# 
   983  0111                     	;# 
   984  0112                     	;# 
   985  0113                     	;# 
   986  0114                     	;# 
   987  0115                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  0118                     	;# 
   991  0119                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020C                     	;# 
  1013  020D                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0391                     	;# 
  1030  0392                     	;# 
  1031  0393                     	;# 
  1032  0394                     	;# 
  1033  0395                     	;# 
  1034  0396                     	;# 
  1035  0498                     	;# 
  1036  0498                     	;# 
  1037  0499                     	;# 
  1038  049A                     	;# 
  1039  049B                     	;# 
  1040  049B                     	;# 
  1041  049C                     	;# 
  1042  049E                     	;# 
  1043  049F                     	;# 
  1044  0611                     	;# 
  1045  0612                     	;# 
  1046  0613                     	;# 
  1047  0613                     	;# 
  1048  0614                     	;# 
  1049  0615                     	;# 
  1050  0616                     	;# 
  1051  0616                     	;# 
  1052  0617                     	;# 
  1053  0618                     	;# 
  1054  0619                     	;# 
  1055  0619                     	;# 
  1056  061A                     	;# 
  1057  061B                     	;# 
  1058  061C                     	;# 
  1059  061C                     	;# 
  1060  0691                     	;# 
  1061  0692                     	;# 
  1062  0693                     	;# 
  1063  0694                     	;# 
  1064  0695                     	;# 
  1065  0F0F                     	;# 
  1066  0F10                     	;# 
  1067  0F11                     	;# 
  1068  0F12                     	;# 
  1069  0F13                     	;# 
  1070  0F14                     	;# 
  1071  0F15                     	;# 
  1072  0F16                     	;# 
  1073  0F17                     	;# 
  1074  0F18                     	;# 
  1075  0F19                     	;# 
  1076  0F1A                     	;# 
  1077  0F1B                     	;# 
  1078  0F1C                     	;# 
  1079  0F1D                     	;# 
  1080  0F1E                     	;# 
  1081  0F1F                     	;# 
  1082  0F20                     	;# 
  1083  0F21                     	;# 
  1084  0F22                     	;# 
  1085  0F23                     	;# 
  1086  0F24                     	;# 
  1087  0F25                     	;# 
  1088  0F26                     	;# 
  1089  0F27                     	;# 
  1090  0F28                     	;# 
  1091  0F29                     	;# 
  1092  0F2A                     	;# 
  1093  0F2B                     	;# 
  1094  0F2C                     	;# 
  1095  0F2D                     	;# 
  1096  0F2E                     	;# 
  1097  0F2F                     	;# 
  1098  0F8C                     	;# 
  1099  0F8D                     	;# 
  1100  0F91                     	;# 
  1101  0F95                     	;# 
  1102  0F96                     	;# 
  1103  0F97                     	;# 
  1104  0F9C                     	;# 
  1105  0F9D                     	;# 
  1106  0F9E                     	;# 
  1107  0FE3                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000D                     	;# 
  1133  000E                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0013                     	;# 
  1137  0015                     	;# 
  1138  0016                     	;# 
  1139  0016                     	;# 
  1140  0017                     	;# 
  1141  0018                     	;# 
  1142  0019                     	;# 
  1143  001A                     	;# 
  1144  001B                     	;# 
  1145  001C                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0095                     	;# 
  1153  0096                     	;# 
  1154  0097                     	;# 
  1155  0099                     	;# 
  1156  009A                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010D                     	;# 
  1165  010E                     	;# 
  1166  0111                     	;# 
  1167  0112                     	;# 
  1168  0113                     	;# 
  1169  0114                     	;# 
  1170  0115                     	;# 
  1171  0116                     	;# 
  1172  0117                     	;# 
  1173  0118                     	;# 
  1174  0119                     	;# 
  1175  011D                     	;# 
  1176  018C                     	;# 
  1177  018D                     	;# 
  1178  018E                     	;# 
  1179  0191                     	;# 
  1180  0191                     	;# 
  1181  0192                     	;# 
  1182  0193                     	;# 
  1183  0193                     	;# 
  1184  0194                     	;# 
  1185  0195                     	;# 
  1186  0196                     	;# 
  1187  0199                     	;# 
  1188  019A                     	;# 
  1189  019B                     	;# 
  1190  019B                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019E                     	;# 
  1194  019F                     	;# 
  1195  020C                     	;# 
  1196  020D                     	;# 
  1197  0211                     	;# 
  1198  0211                     	;# 
  1199  0212                     	;# 
  1200  0212                     	;# 
  1201  0213                     	;# 
  1202  0213                     	;# 
  1203  0214                     	;# 
  1204  0214                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0215                     	;# 
  1208  0216                     	;# 
  1209  0216                     	;# 
  1210  0217                     	;# 
  1211  0217                     	;# 
  1212  0391                     	;# 
  1213  0392                     	;# 
  1214  0393                     	;# 
  1215  0394                     	;# 
  1216  0395                     	;# 
  1217  0396                     	;# 
  1218  0498                     	;# 
  1219  0498                     	;# 
  1220  0499                     	;# 
  1221  049A                     	;# 
  1222  049B                     	;# 
  1223  049B                     	;# 
  1224  049C                     	;# 
  1225  049E                     	;# 
  1226  049F                     	;# 
  1227  0611                     	;# 
  1228  0612                     	;# 
  1229  0613                     	;# 
  1230  0613                     	;# 
  1231  0614                     	;# 
  1232  0615                     	;# 
  1233  0616                     	;# 
  1234  0616                     	;# 
  1235  0617                     	;# 
  1236  0618                     	;# 
  1237  0619                     	;# 
  1238  0619                     	;# 
  1239  061A                     	;# 
  1240  061B                     	;# 
  1241  061C                     	;# 
  1242  061C                     	;# 
  1243  0691                     	;# 
  1244  0692                     	;# 
  1245  0693                     	;# 
  1246  0694                     	;# 
  1247  0695                     	;# 
  1248  0F0F                     	;# 
  1249  0F10                     	;# 
  1250  0F11                     	;# 
  1251  0F12                     	;# 
  1252  0F13                     	;# 
  1253  0F14                     	;# 
  1254  0F15                     	;# 
  1255  0F16                     	;# 
  1256  0F17                     	;# 
  1257  0F18                     	;# 
  1258  0F19                     	;# 
  1259  0F1A                     	;# 
  1260  0F1B                     	;# 
  1261  0F1C                     	;# 
  1262  0F1D                     	;# 
  1263  0F1E                     	;# 
  1264  0F1F                     	;# 
  1265  0F20                     	;# 
  1266  0F21                     	;# 
  1267  0F22                     	;# 
  1268  0F23                     	;# 
  1269  0F24                     	;# 
  1270  0F25                     	;# 
  1271  0F26                     	;# 
  1272  0F27                     	;# 
  1273  0F28                     	;# 
  1274  0F29                     	;# 
  1275  0F2A                     	;# 
  1276  0F2B                     	;# 
  1277  0F2C                     	;# 
  1278  0F2D                     	;# 
  1279  0F2E                     	;# 
  1280  0F2F                     	;# 
  1281  0F8C                     	;# 
  1282  0F8D                     	;# 
  1283  0F91                     	;# 
  1284  0F95                     	;# 
  1285  0F96                     	;# 
  1286  0F97                     	;# 
  1287  0F9C                     	;# 
  1288  0F9D                     	;# 
  1289  0F9E                     	;# 
  1290  0FE3                     	;# 
  1291  0FE4                     	;# 
  1292  0FE5                     	;# 
  1293  0FE6                     	;# 
  1294  0FE7                     	;# 
  1295  0FE8                     	;# 
  1296  0FE9                     	;# 
  1297  0FEA                     	;# 
  1298  0FEB                     	;# 
  1299  0FED                     	;# 
  1300  0FEE                     	;# 
  1301  0FEF                     	;# 
  1302  0000                     	;# 
  1303  0001                     	;# 
  1304  0002                     	;# 
  1305  0003                     	;# 
  1306  0004                     	;# 
  1307  0005                     	;# 
  1308  0006                     	;# 
  1309  0007                     	;# 
  1310  0008                     	;# 
  1311  0009                     	;# 
  1312  000A                     	;# 
  1313  000B                     	;# 
  1314  000C                     	;# 
  1315  000D                     	;# 
  1316  000E                     	;# 
  1317  0011                     	;# 
  1318  0012                     	;# 
  1319  0013                     	;# 
  1320  0015                     	;# 
  1321  0016                     	;# 
  1322  0016                     	;# 
  1323  0017                     	;# 
  1324  0018                     	;# 
  1325  0019                     	;# 
  1326  001A                     	;# 
  1327  001B                     	;# 
  1328  001C                     	;# 
  1329  008C                     	;# 
  1330  008D                     	;# 
  1331  008E                     	;# 
  1332  0091                     	;# 
  1333  0092                     	;# 
  1334  0093                     	;# 
  1335  0095                     	;# 
  1336  0096                     	;# 
  1337  0097                     	;# 
  1338  0099                     	;# 
  1339  009A                     	;# 
  1340  009B                     	;# 
  1341  009B                     	;# 
  1342  009C                     	;# 
  1343  009D                     	;# 
  1344  009E                     	;# 
  1345  009F                     	;# 
  1346  010C                     	;# 
  1347  010D                     	;# 
  1348  010E                     	;# 
  1349  0111                     	;# 
  1350  0112                     	;# 
  1351  0113                     	;# 
  1352  0114                     	;# 
  1353  0115                     	;# 
  1354  0116                     	;# 
  1355  0117                     	;# 
  1356  0118                     	;# 
  1357  0119                     	;# 
  1358  011D                     	;# 
  1359  018C                     	;# 
  1360  018D                     	;# 
  1361  018E                     	;# 
  1362  0191                     	;# 
  1363  0191                     	;# 
  1364  0192                     	;# 
  1365  0193                     	;# 
  1366  0193                     	;# 
  1367  0194                     	;# 
  1368  0195                     	;# 
  1369  0196                     	;# 
  1370  0199                     	;# 
  1371  019A                     	;# 
  1372  019B                     	;# 
  1373  019B                     	;# 
  1374  019C                     	;# 
  1375  019D                     	;# 
  1376  019E                     	;# 
  1377  019F                     	;# 
  1378  020C                     	;# 
  1379  020D                     	;# 
  1380  0211                     	;# 
  1381  0211                     	;# 
  1382  0212                     	;# 
  1383  0212                     	;# 
  1384  0213                     	;# 
  1385  0213                     	;# 
  1386  0214                     	;# 
  1387  0214                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0216                     	;# 
  1392  0216                     	;# 
  1393  0217                     	;# 
  1394  0217                     	;# 
  1395  0391                     	;# 
  1396  0392                     	;# 
  1397  0393                     	;# 
  1398  0394                     	;# 
  1399  0395                     	;# 
  1400  0396                     	;# 
  1401  0498                     	;# 
  1402  0498                     	;# 
  1403  0499                     	;# 
  1404  049A                     	;# 
  1405  049B                     	;# 
  1406  049B                     	;# 
  1407  049C                     	;# 
  1408  049E                     	;# 
  1409  049F                     	;# 
  1410  0611                     	;# 
  1411  0612                     	;# 
  1412  0613                     	;# 
  1413  0613                     	;# 
  1414  0614                     	;# 
  1415  0615                     	;# 
  1416  0616                     	;# 
  1417  0616                     	;# 
  1418  0617                     	;# 
  1419  0618                     	;# 
  1420  0619                     	;# 
  1421  0619                     	;# 
  1422  061A                     	;# 
  1423  061B                     	;# 
  1424  061C                     	;# 
  1425  061C                     	;# 
  1426  0691                     	;# 
  1427  0692                     	;# 
  1428  0693                     	;# 
  1429  0694                     	;# 
  1430  0695                     	;# 
  1431  0F0F                     	;# 
  1432  0F10                     	;# 
  1433  0F11                     	;# 
  1434  0F12                     	;# 
  1435  0F13                     	;# 
  1436  0F14                     	;# 
  1437  0F15                     	;# 
  1438  0F16                     	;# 
  1439  0F17                     	;# 
  1440  0F18                     	;# 
  1441  0F19                     	;# 
  1442  0F1A                     	;# 
  1443  0F1B                     	;# 
  1444  0F1C                     	;# 
  1445  0F1D                     	;# 
  1446  0F1E                     	;# 
  1447  0F1F                     	;# 
  1448  0F20                     	;# 
  1449  0F21                     	;# 
  1450  0F22                     	;# 
  1451  0F23                     	;# 
  1452  0F24                     	;# 
  1453  0F25                     	;# 
  1454  0F26                     	;# 
  1455  0F27                     	;# 
  1456  0F28                     	;# 
  1457  0F29                     	;# 
  1458  0F2A                     	;# 
  1459  0F2B                     	;# 
  1460  0F2C                     	;# 
  1461  0F2D                     	;# 
  1462  0F2E                     	;# 
  1463  0F2F                     	;# 
  1464  0F8C                     	;# 
  1465  0F8D                     	;# 
  1466  0F91                     	;# 
  1467  0F95                     	;# 
  1468  0F96                     	;# 
  1469  0F97                     	;# 
  1470  0F9C                     	;# 
  1471  0F9D                     	;# 
  1472  0F9E                     	;# 
  1473  0FE3                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0013                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008D                     	;# 
  1514  008E                     	;# 
  1515  0091                     	;# 
  1516  0092                     	;# 
  1517  0093                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  009F                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0111                     	;# 
  1533  0112                     	;# 
  1534  0113                     	;# 
  1535  0114                     	;# 
  1536  0115                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  0118                     	;# 
  1540  0119                     	;# 
  1541  011D                     	;# 
  1542  018C                     	;# 
  1543  018D                     	;# 
  1544  018E                     	;# 
  1545  0191                     	;# 
  1546  0191                     	;# 
  1547  0192                     	;# 
  1548  0193                     	;# 
  1549  0193                     	;# 
  1550  0194                     	;# 
  1551  0195                     	;# 
  1552  0196                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019D                     	;# 
  1559  019E                     	;# 
  1560  019F                     	;# 
  1561  020C                     	;# 
  1562  020D                     	;# 
  1563  0211                     	;# 
  1564  0211                     	;# 
  1565  0212                     	;# 
  1566  0212                     	;# 
  1567  0213                     	;# 
  1568  0213                     	;# 
  1569  0214                     	;# 
  1570  0214                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0216                     	;# 
  1575  0216                     	;# 
  1576  0217                     	;# 
  1577  0217                     	;# 
  1578  0391                     	;# 
  1579  0392                     	;# 
  1580  0393                     	;# 
  1581  0394                     	;# 
  1582  0395                     	;# 
  1583  0396                     	;# 
  1584  0498                     	;# 
  1585  0498                     	;# 
  1586  0499                     	;# 
  1587  049A                     	;# 
  1588  049B                     	;# 
  1589  049B                     	;# 
  1590  049C                     	;# 
  1591  049E                     	;# 
  1592  049F                     	;# 
  1593  0611                     	;# 
  1594  0612                     	;# 
  1595  0613                     	;# 
  1596  0613                     	;# 
  1597  0614                     	;# 
  1598  0615                     	;# 
  1599  0616                     	;# 
  1600  0616                     	;# 
  1601  0617                     	;# 
  1602  0618                     	;# 
  1603  0619                     	;# 
  1604  0619                     	;# 
  1605  061A                     	;# 
  1606  061B                     	;# 
  1607  061C                     	;# 
  1608  061C                     	;# 
  1609  0691                     	;# 
  1610  0692                     	;# 
  1611  0693                     	;# 
  1612  0694                     	;# 
  1613  0695                     	;# 
  1614  0F0F                     	;# 
  1615  0F10                     	;# 
  1616  0F11                     	;# 
  1617  0F12                     	;# 
  1618  0F13                     	;# 
  1619  0F14                     	;# 
  1620  0F15                     	;# 
  1621  0F16                     	;# 
  1622  0F17                     	;# 
  1623  0F18                     	;# 
  1624  0F19                     	;# 
  1625  0F1A                     	;# 
  1626  0F1B                     	;# 
  1627  0F1C                     	;# 
  1628  0F1D                     	;# 
  1629  0F1E                     	;# 
  1630  0F1F                     	;# 
  1631  0F20                     	;# 
  1632  0F21                     	;# 
  1633  0F22                     	;# 
  1634  0F23                     	;# 
  1635  0F24                     	;# 
  1636  0F25                     	;# 
  1637  0F26                     	;# 
  1638  0F27                     	;# 
  1639  0F28                     	;# 
  1640  0F29                     	;# 
  1641  0F2A                     	;# 
  1642  0F2B                     	;# 
  1643  0F2C                     	;# 
  1644  0F2D                     	;# 
  1645  0F2E                     	;# 
  1646  0F2F                     	;# 
  1647  0F8C                     	;# 
  1648  0F8D                     	;# 
  1649  0F91                     	;# 
  1650  0F95                     	;# 
  1651  0F96                     	;# 
  1652  0F97                     	;# 
  1653  0F9C                     	;# 
  1654  0F9D                     	;# 
  1655  0F9E                     	;# 
  1656  0FE3                     	;# 
  1657  0FE4                     	;# 
  1658  0FE5                     	;# 
  1659  0FE6                     	;# 
  1660  0FE7                     	;# 
  1661  0FE8                     	;# 
  1662  0FE9                     	;# 
  1663  0FEA                     	;# 
  1664  0FEB                     	;# 
  1665  0FED                     	;# 
  1666  0FEE                     	;# 
  1667  0FEF                     	;# 
  1668  0000                     	;# 
  1669  0001                     	;# 
  1670  0002                     	;# 
  1671  0003                     	;# 
  1672  0004                     	;# 
  1673  0005                     	;# 
  1674  0006                     	;# 
  1675  0007                     	;# 
  1676  0008                     	;# 
  1677  0009                     	;# 
  1678  000A                     	;# 
  1679  000B                     	;# 
  1680  000C                     	;# 
  1681  000D                     	;# 
  1682  000E                     	;# 
  1683  0011                     	;# 
  1684  0012                     	;# 
  1685  0013                     	;# 
  1686  0015                     	;# 
  1687  0016                     	;# 
  1688  0016                     	;# 
  1689  0017                     	;# 
  1690  0018                     	;# 
  1691  0019                     	;# 
  1692  001A                     	;# 
  1693  001B                     	;# 
  1694  001C                     	;# 
  1695  008C                     	;# 
  1696  008D                     	;# 
  1697  008E                     	;# 
  1698  0091                     	;# 
  1699  0092                     	;# 
  1700  0093                     	;# 
  1701  0095                     	;# 
  1702  0096                     	;# 
  1703  0097                     	;# 
  1704  0099                     	;# 
  1705  009A                     	;# 
  1706  009B                     	;# 
  1707  009B                     	;# 
  1708  009C                     	;# 
  1709  009D                     	;# 
  1710  009E                     	;# 
  1711  009F                     	;# 
  1712  010C                     	;# 
  1713  010D                     	;# 
  1714  010E                     	;# 
  1715  0111                     	;# 
  1716  0112                     	;# 
  1717  0113                     	;# 
  1718  0114                     	;# 
  1719  0115                     	;# 
  1720  0116                     	;# 
  1721  0117                     	;# 
  1722  0118                     	;# 
  1723  0119                     	;# 
  1724  011D                     	;# 
  1725  018C                     	;# 
  1726  018D                     	;# 
  1727  018E                     	;# 
  1728  0191                     	;# 
  1729  0191                     	;# 
  1730  0192                     	;# 
  1731  0193                     	;# 
  1732  0193                     	;# 
  1733  0194                     	;# 
  1734  0195                     	;# 
  1735  0196                     	;# 
  1736  0199                     	;# 
  1737  019A                     	;# 
  1738  019B                     	;# 
  1739  019B                     	;# 
  1740  019C                     	;# 
  1741  019D                     	;# 
  1742  019E                     	;# 
  1743  019F                     	;# 
  1744  020C                     	;# 
  1745  020D                     	;# 
  1746  0211                     	;# 
  1747  0211                     	;# 
  1748  0212                     	;# 
  1749  0212                     	;# 
  1750  0213                     	;# 
  1751  0213                     	;# 
  1752  0214                     	;# 
  1753  0214                     	;# 
  1754  0215                     	;# 
  1755  0215                     	;# 
  1756  0215                     	;# 
  1757  0216                     	;# 
  1758  0216                     	;# 
  1759  0217                     	;# 
  1760  0217                     	;# 
  1761  0391                     	;# 
  1762  0392                     	;# 
  1763  0393                     	;# 
  1764  0394                     	;# 
  1765  0395                     	;# 
  1766  0396                     	;# 
  1767  0498                     	;# 
  1768  0498                     	;# 
  1769  0499                     	;# 
  1770  049A                     	;# 
  1771  049B                     	;# 
  1772  049B                     	;# 
  1773  049C                     	;# 
  1774  049E                     	;# 
  1775  049F                     	;# 
  1776  0611                     	;# 
  1777  0612                     	;# 
  1778  0613                     	;# 
  1779  0613                     	;# 
  1780  0614                     	;# 
  1781  0615                     	;# 
  1782  0616                     	;# 
  1783  0616                     	;# 
  1784  0617                     	;# 
  1785  0618                     	;# 
  1786  0619                     	;# 
  1787  0619                     	;# 
  1788  061A                     	;# 
  1789  061B                     	;# 
  1790  061C                     	;# 
  1791  061C                     	;# 
  1792  0691                     	;# 
  1793  0692                     	;# 
  1794  0693                     	;# 
  1795  0694                     	;# 
  1796  0695                     	;# 
  1797  0F0F                     	;# 
  1798  0F10                     	;# 
  1799  0F11                     	;# 
  1800  0F12                     	;# 
  1801  0F13                     	;# 
  1802  0F14                     	;# 
  1803  0F15                     	;# 
  1804  0F16                     	;# 
  1805  0F17                     	;# 
  1806  0F18                     	;# 
  1807  0F19                     	;# 
  1808  0F1A                     	;# 
  1809  0F1B                     	;# 
  1810  0F1C                     	;# 
  1811  0F1D                     	;# 
  1812  0F1E                     	;# 
  1813  0F1F                     	;# 
  1814  0F20                     	;# 
  1815  0F21                     	;# 
  1816  0F22                     	;# 
  1817  0F23                     	;# 
  1818  0F24                     	;# 
  1819  0F25                     	;# 
  1820  0F26                     	;# 
  1821  0F27                     	;# 
  1822  0F28                     	;# 
  1823  0F29                     	;# 
  1824  0F2A                     	;# 
  1825  0F2B                     	;# 
  1826  0F2C                     	;# 
  1827  0F2D                     	;# 
  1828  0F2E                     	;# 
  1829  0F2F                     	;# 
  1830  0F8C                     	;# 
  1831  0F8D                     	;# 
  1832  0F91                     	;# 
  1833  0F95                     	;# 
  1834  0F96                     	;# 
  1835  0F97                     	;# 
  1836  0F9C                     	;# 
  1837  0F9D                     	;# 
  1838  0F9E                     	;# 
  1839  0FE3                     	;# 
  1840  0FE4                     	;# 
  1841  0FE5                     	;# 
  1842  0FE6                     	;# 
  1843  0FE7                     	;# 
  1844  0FE8                     	;# 
  1845  0FE9                     	;# 
  1846  0FEA                     	;# 
  1847  0FEB                     	;# 
  1848  0FED                     	;# 
  1849  0FEE                     	;# 
  1850  0FEF                     	;# 
  1851  0000                     	;# 
  1852  0001                     	;# 
  1853  0002                     	;# 
  1854  0003                     	;# 
  1855  0004                     	;# 
  1856  0005                     	;# 
  1857  0006                     	;# 
  1858  0007                     	;# 
  1859  0008                     	;# 
  1860  0009                     	;# 
  1861  000A                     	;# 
  1862  000B                     	;# 
  1863  000C                     	;# 
  1864  000D                     	;# 
  1865  000E                     	;# 
  1866  0011                     	;# 
  1867  0012                     	;# 
  1868  0013                     	;# 
  1869  0015                     	;# 
  1870  0016                     	;# 
  1871  0016                     	;# 
  1872  0017                     	;# 
  1873  0018                     	;# 
  1874  0019                     	;# 
  1875  001A                     	;# 
  1876  001B                     	;# 
  1877  001C                     	;# 
  1878  008C                     	;# 
  1879  008D                     	;# 
  1880  008E                     	;# 
  1881  0091                     	;# 
  1882  0092                     	;# 
  1883  0093                     	;# 
  1884  0095                     	;# 
  1885  0096                     	;# 
  1886  0097                     	;# 
  1887  0099                     	;# 
  1888  009A                     	;# 
  1889  009B                     	;# 
  1890  009B                     	;# 
  1891  009C                     	;# 
  1892  009D                     	;# 
  1893  009E                     	;# 
  1894  009F                     	;# 
  1895  010C                     	;# 
  1896  010D                     	;# 
  1897  010E                     	;# 
  1898  0111                     	;# 
  1899  0112                     	;# 
  1900  0113                     	;# 
  1901  0114                     	;# 
  1902  0115                     	;# 
  1903  0116                     	;# 
  1904  0117                     	;# 
  1905  0118                     	;# 
  1906  0119                     	;# 
  1907  011D                     	;# 
  1908  018C                     	;# 
  1909  018D                     	;# 
  1910  018E                     	;# 
  1911  0191                     	;# 
  1912  0191                     	;# 
  1913  0192                     	;# 
  1914  0193                     	;# 
  1915  0193                     	;# 
  1916  0194                     	;# 
  1917  0195                     	;# 
  1918  0196                     	;# 
  1919  0199                     	;# 
  1920  019A                     	;# 
  1921  019B                     	;# 
  1922  019B                     	;# 
  1923  019C                     	;# 
  1924  019D                     	;# 
  1925  019E                     	;# 
  1926  019F                     	;# 
  1927  020C                     	;# 
  1928  020D                     	;# 
  1929  0211                     	;# 
  1930  0211                     	;# 
  1931  0212                     	;# 
  1932  0212                     	;# 
  1933  0213                     	;# 
  1934  0213                     	;# 
  1935  0214                     	;# 
  1936  0214                     	;# 
  1937  0215                     	;# 
  1938  0215                     	;# 
  1939  0215                     	;# 
  1940  0216                     	;# 
  1941  0216                     	;# 
  1942  0217                     	;# 
  1943  0217                     	;# 
  1944  0391                     	;# 
  1945  0392                     	;# 
  1946  0393                     	;# 
  1947  0394                     	;# 
  1948  0395                     	;# 
  1949  0396                     	;# 
  1950  0498                     	;# 
  1951  0498                     	;# 
  1952  0499                     	;# 
  1953  049A                     	;# 
  1954  049B                     	;# 
  1955  049B                     	;# 
  1956  049C                     	;# 
  1957  049E                     	;# 
  1958  049F                     	;# 
  1959  0611                     	;# 
  1960  0612                     	;# 
  1961  0613                     	;# 
  1962  0613                     	;# 
  1963  0614                     	;# 
  1964  0615                     	;# 
  1965  0616                     	;# 
  1966  0616                     	;# 
  1967  0617                     	;# 
  1968  0618                     	;# 
  1969  0619                     	;# 
  1970  0619                     	;# 
  1971  061A                     	;# 
  1972  061B                     	;# 
  1973  061C                     	;# 
  1974  061C                     	;# 
  1975  0691                     	;# 
  1976  0692                     	;# 
  1977  0693                     	;# 
  1978  0694                     	;# 
  1979  0695                     	;# 
  1980  0F0F                     	;# 
  1981  0F10                     	;# 
  1982  0F11                     	;# 
  1983  0F12                     	;# 
  1984  0F13                     	;# 
  1985  0F14                     	;# 
  1986  0F15                     	;# 
  1987  0F16                     	;# 
  1988  0F17                     	;# 
  1989  0F18                     	;# 
  1990  0F19                     	;# 
  1991  0F1A                     	;# 
  1992  0F1B                     	;# 
  1993  0F1C                     	;# 
  1994  0F1D                     	;# 
  1995  0F1E                     	;# 
  1996  0F1F                     	;# 
  1997  0F20                     	;# 
  1998  0F21                     	;# 
  1999  0F22                     	;# 
  2000  0F23                     	;# 
  2001  0F24                     	;# 
  2002  0F25                     	;# 
  2003  0F26                     	;# 
  2004  0F27                     	;# 
  2005  0F28                     	;# 
  2006  0F29                     	;# 
  2007  0F2A                     	;# 
  2008  0F2B                     	;# 
  2009  0F2C                     	;# 
  2010  0F2D                     	;# 
  2011  0F2E                     	;# 
  2012  0F2F                     	;# 
  2013  0F8C                     	;# 
  2014  0F8D                     	;# 
  2015  0F91                     	;# 
  2016  0F95                     	;# 
  2017  0F96                     	;# 
  2018  0F97                     	;# 
  2019  0F9C                     	;# 
  2020  0F9D                     	;# 
  2021  0F9E                     	;# 
  2022  0FE3                     	;# 
  2023  0FE4                     	;# 
  2024  0FE5                     	;# 
  2025  0FE6                     	;# 
  2026  0FE7                     	;# 
  2027  0FE8                     	;# 
  2028  0FE9                     	;# 
  2029  0FEA                     	;# 
  2030  0FEB                     	;# 
  2031  0FED                     	;# 
  2032  0FEE                     	;# 
  2033  0FEF                     	;# 
  2034  0000                     	;# 
  2035  0001                     	;# 
  2036  0002                     	;# 
  2037  0003                     	;# 
  2038  0004                     	;# 
  2039  0005                     	;# 
  2040  0006                     	;# 
  2041  0007                     	;# 
  2042  0008                     	;# 
  2043  0009                     	;# 
  2044  000A                     	;# 
  2045  000B                     	;# 
  2046  000C                     	;# 
  2047  000D                     	;# 
  2048  000E                     	;# 
  2049  0011                     	;# 
  2050  0012                     	;# 
  2051  0013                     	;# 
  2052  0015                     	;# 
  2053  0016                     	;# 
  2054  0016                     	;# 
  2055  0017                     	;# 
  2056  0018                     	;# 
  2057  0019                     	;# 
  2058  001A                     	;# 
  2059  001B                     	;# 
  2060  001C                     	;# 
  2061  008C                     	;# 
  2062  008D                     	;# 
  2063  008E                     	;# 
  2064  0091                     	;# 
  2065  0092                     	;# 
  2066  0093                     	;# 
  2067  0095                     	;# 
  2068  0096                     	;# 
  2069  0097                     	;# 
  2070  0099                     	;# 
  2071  009A                     	;# 
  2072  009B                     	;# 
  2073  009B                     	;# 
  2074  009C                     	;# 
  2075  009D                     	;# 
  2076  009E                     	;# 
  2077  009F                     	;# 
  2078  010C                     	;# 
  2079  010D                     	;# 
  2080  010E                     	;# 
  2081  0111                     	;# 
  2082  0112                     	;# 
  2083  0113                     	;# 
  2084  0114                     	;# 
  2085  0115                     	;# 
  2086  0116                     	;# 
  2087  0117                     	;# 
  2088  0118                     	;# 
  2089  0119                     	;# 
  2090  011D                     	;# 
  2091  018C                     	;# 
  2092  018D                     	;# 
  2093  018E                     	;# 
  2094  0191                     	;# 
  2095  0191                     	;# 
  2096  0192                     	;# 
  2097  0193                     	;# 
  2098  0193                     	;# 
  2099  0194                     	;# 
  2100  0195                     	;# 
  2101  0196                     	;# 
  2102  0199                     	;# 
  2103  019A                     	;# 
  2104  019B                     	;# 
  2105  019B                     	;# 
  2106  019C                     	;# 
  2107  019D                     	;# 
  2108  019E                     	;# 
  2109  019F                     	;# 
  2110  020C                     	;# 
  2111  020D                     	;# 
  2112  0211                     	;# 
  2113  0211                     	;# 
  2114  0212                     	;# 
  2115  0212                     	;# 
  2116  0213                     	;# 
  2117  0213                     	;# 
  2118  0214                     	;# 
  2119  0214                     	;# 
  2120  0215                     	;# 
  2121  0215                     	;# 
  2122  0215                     	;# 
  2123  0216                     	;# 
  2124  0216                     	;# 
  2125  0217                     	;# 
  2126  0217                     	;# 
  2127  0391                     	;# 
  2128  0392                     	;# 
  2129  0393                     	;# 
  2130  0394                     	;# 
  2131  0395                     	;# 
  2132  0396                     	;# 
  2133  0498                     	;# 
  2134  0498                     	;# 
  2135  0499                     	;# 
  2136  049A                     	;# 
  2137  049B                     	;# 
  2138  049B                     	;# 
  2139  049C                     	;# 
  2140  049E                     	;# 
  2141  049F                     	;# 
  2142  0611                     	;# 
  2143  0612                     	;# 
  2144  0613                     	;# 
  2145  0613                     	;# 
  2146  0614                     	;# 
  2147  0615                     	;# 
  2148  0616                     	;# 
  2149  0616                     	;# 
  2150  0617                     	;# 
  2151  0618                     	;# 
  2152  0619                     	;# 
  2153  0619                     	;# 
  2154  061A                     	;# 
  2155  061B                     	;# 
  2156  061C                     	;# 
  2157  061C                     	;# 
  2158  0691                     	;# 
  2159  0692                     	;# 
  2160  0693                     	;# 
  2161  0694                     	;# 
  2162  0695                     	;# 
  2163  0F0F                     	;# 
  2164  0F10                     	;# 
  2165  0F11                     	;# 
  2166  0F12                     	;# 
  2167  0F13                     	;# 
  2168  0F14                     	;# 
  2169  0F15                     	;# 
  2170  0F16                     	;# 
  2171  0F17                     	;# 
  2172  0F18                     	;# 
  2173  0F19                     	;# 
  2174  0F1A                     	;# 
  2175  0F1B                     	;# 
  2176  0F1C                     	;# 
  2177  0F1D                     	;# 
  2178  0F1E                     	;# 
  2179  0F1F                     	;# 
  2180  0F20                     	;# 
  2181  0F21                     	;# 
  2182  0F22                     	;# 
  2183  0F23                     	;# 
  2184  0F24                     	;# 
  2185  0F25                     	;# 
  2186  0F26                     	;# 
  2187  0F27                     	;# 
  2188  0F28                     	;# 
  2189  0F29                     	;# 
  2190  0F2A                     	;# 
  2191  0F2B                     	;# 
  2192  0F2C                     	;# 
  2193  0F2D                     	;# 
  2194  0F2E                     	;# 
  2195  0F2F                     	;# 
  2196  0F8C                     	;# 
  2197  0F8D                     	;# 
  2198  0F91                     	;# 
  2199  0F95                     	;# 
  2200  0F96                     	;# 
  2201  0F97                     	;# 
  2202  0F9C                     	;# 
  2203  0F9D                     	;# 
  2204  0F9E                     	;# 
  2205  0FE3                     	;# 
  2206  0FE4                     	;# 
  2207  0FE5                     	;# 
  2208  0FE6                     	;# 
  2209  0FE7                     	;# 
  2210  0FE8                     	;# 
  2211  0FE9                     	;# 
  2212  0FEA                     	;# 
  2213  0FEB                     	;# 
  2214  0FED                     	;# 
  2215  0FEE                     	;# 
  2216  0FEF                     	;# 
  2217  0000                     	;# 
  2218  0001                     	;# 
  2219  0002                     	;# 
  2220  0003                     	;# 
  2221  0004                     	;# 
  2222  0005                     	;# 
  2223  0006                     	;# 
  2224  0007                     	;# 
  2225  0008                     	;# 
  2226  0009                     	;# 
  2227  000A                     	;# 
  2228  000B                     	;# 
  2229  000C                     	;# 
  2230  000D                     	;# 
  2231  000E                     	;# 
  2232  0011                     	;# 
  2233  0012                     	;# 
  2234  0013                     	;# 
  2235  0015                     	;# 
  2236  0016                     	;# 
  2237  0016                     	;# 
  2238  0017                     	;# 
  2239  0018                     	;# 
  2240  0019                     	;# 
  2241  001A                     	;# 
  2242  001B                     	;# 
  2243  001C                     	;# 
  2244  008C                     	;# 
  2245  008D                     	;# 
  2246  008E                     	;# 
  2247  0091                     	;# 
  2248  0092                     	;# 
  2249  0093                     	;# 
  2250  0095                     	;# 
  2251  0096                     	;# 
  2252  0097                     	;# 
  2253  0099                     	;# 
  2254  009A                     	;# 
  2255  009B                     	;# 
  2256  009B                     	;# 
  2257  009C                     	;# 
  2258  009D                     	;# 
  2259  009E                     	;# 
  2260  009F                     	;# 
  2261  010C                     	;# 
  2262  010D                     	;# 
  2263  010E                     	;# 
  2264  0111                     	;# 
  2265  0112                     	;# 
  2266  0113                     	;# 
  2267  0114                     	;# 
  2268  0115                     	;# 
  2269  0116                     	;# 
  2270  0117                     	;# 
  2271  0118                     	;# 
  2272  0119                     	;# 
  2273  011D                     	;# 
  2274  018C                     	;# 
  2275  018D                     	;# 
  2276  018E                     	;# 
  2277  0191                     	;# 
  2278  0191                     	;# 
  2279  0192                     	;# 
  2280  0193                     	;# 
  2281  0193                     	;# 
  2282  0194                     	;# 
  2283  0195                     	;# 
  2284  0196                     	;# 
  2285  0199                     	;# 
  2286  019A                     	;# 
  2287  019B                     	;# 
  2288  019B                     	;# 
  2289  019C                     	;# 
  2290  019D                     	;# 
  2291  019E                     	;# 
  2292  019F                     	;# 
  2293  020C                     	;# 
  2294  020D                     	;# 
  2295  0211                     	;# 
  2296  0211                     	;# 
  2297  0212                     	;# 
  2298  0212                     	;# 
  2299  0213                     	;# 
  2300  0213                     	;# 
  2301  0214                     	;# 
  2302  0214                     	;# 
  2303  0215                     	;# 
  2304  0215                     	;# 
  2305  0215                     	;# 
  2306  0216                     	;# 
  2307  0216                     	;# 
  2308  0217                     	;# 
  2309  0217                     	;# 
  2310  0391                     	;# 
  2311  0392                     	;# 
  2312  0393                     	;# 
  2313  0394                     	;# 
  2314  0395                     	;# 
  2315  0396                     	;# 
  2316  0498                     	;# 
  2317  0498                     	;# 
  2318  0499                     	;# 
  2319  049A                     	;# 
  2320  049B                     	;# 
  2321  049B                     	;# 
  2322  049C                     	;# 
  2323  049E                     	;# 
  2324  049F                     	;# 
  2325  0611                     	;# 
  2326  0612                     	;# 
  2327  0613                     	;# 
  2328  0613                     	;# 
  2329  0614                     	;# 
  2330  0615                     	;# 
  2331  0616                     	;# 
  2332  0616                     	;# 
  2333  0617                     	;# 
  2334  0618                     	;# 
  2335  0619                     	;# 
  2336  0619                     	;# 
  2337  061A                     	;# 
  2338  061B                     	;# 
  2339  061C                     	;# 
  2340  061C                     	;# 
  2341  0691                     	;# 
  2342  0692                     	;# 
  2343  0693                     	;# 
  2344  0694                     	;# 
  2345  0695                     	;# 
  2346  0F0F                     	;# 
  2347  0F10                     	;# 
  2348  0F11                     	;# 
  2349  0F12                     	;# 
  2350  0F13                     	;# 
  2351  0F14                     	;# 
  2352  0F15                     	;# 
  2353  0F16                     	;# 
  2354  0F17                     	;# 
  2355  0F18                     	;# 
  2356  0F19                     	;# 
  2357  0F1A                     	;# 
  2358  0F1B                     	;# 
  2359  0F1C                     	;# 
  2360  0F1D                     	;# 
  2361  0F1E                     	;# 
  2362  0F1F                     	;# 
  2363  0F20                     	;# 
  2364  0F21                     	;# 
  2365  0F22                     	;# 
  2366  0F23                     	;# 
  2367  0F24                     	;# 
  2368  0F25                     	;# 
  2369  0F26                     	;# 
  2370  0F27                     	;# 
  2371  0F28                     	;# 
  2372  0F29                     	;# 
  2373  0F2A                     	;# 
  2374  0F2B                     	;# 
  2375  0F2C                     	;# 
  2376  0F2D                     	;# 
  2377  0F2E                     	;# 
  2378  0F2F                     	;# 
  2379  0F8C                     	;# 
  2380  0F8D                     	;# 
  2381  0F91                     	;# 
  2382  0F95                     	;# 
  2383  0F96                     	;# 
  2384  0F97                     	;# 
  2385  0F9C                     	;# 
  2386  0F9D                     	;# 
  2387  0F9E                     	;# 
  2388  0FE3                     	;# 
  2389  0FE4                     	;# 
  2390  0FE5                     	;# 
  2391  0FE6                     	;# 
  2392  0FE7                     	;# 
  2393  0FE8                     	;# 
  2394  0FE9                     	;# 
  2395  0FEA                     	;# 
  2396  0FEB                     	;# 
  2397  0FED                     	;# 
  2398  0FEE                     	;# 
  2399  0FEF                     	;# 
  2400  0000                     	;# 
  2401  0001                     	;# 
  2402  0002                     	;# 
  2403  0003                     	;# 
  2404  0004                     	;# 
  2405  0005                     	;# 
  2406  0006                     	;# 
  2407  0007                     	;# 
  2408  0008                     	;# 
  2409  0009                     	;# 
  2410  000A                     	;# 
  2411  000B                     	;# 
  2412  000C                     	;# 
  2413  000D                     	;# 
  2414  000E                     	;# 
  2415  0011                     	;# 
  2416  0012                     	;# 
  2417  0013                     	;# 
  2418  0015                     	;# 
  2419  0016                     	;# 
  2420  0016                     	;# 
  2421  0017                     	;# 
  2422  0018                     	;# 
  2423  0019                     	;# 
  2424  001A                     	;# 
  2425  001B                     	;# 
  2426  001C                     	;# 
  2427  008C                     	;# 
  2428  008D                     	;# 
  2429  008E                     	;# 
  2430  0091                     	;# 
  2431  0092                     	;# 
  2432  0093                     	;# 
  2433  0095                     	;# 
  2434  0096                     	;# 
  2435  0097                     	;# 
  2436  0099                     	;# 
  2437  009A                     	;# 
  2438  009B                     	;# 
  2439  009B                     	;# 
  2440  009C                     	;# 
  2441  009D                     	;# 
  2442  009E                     	;# 
  2443  009F                     	;# 
  2444  010C                     	;# 
  2445  010D                     	;# 
  2446  010E                     	;# 
  2447  0111                     	;# 
  2448  0112                     	;# 
  2449  0113                     	;# 
  2450  0114                     	;# 
  2451  0115                     	;# 
  2452  0116                     	;# 
  2453  0117                     	;# 
  2454  0118                     	;# 
  2455  0119                     	;# 
  2456  011D                     	;# 
  2457  018C                     	;# 
  2458  018D                     	;# 
  2459  018E                     	;# 
  2460  0191                     	;# 
  2461  0191                     	;# 
  2462  0192                     	;# 
  2463  0193                     	;# 
  2464  0193                     	;# 
  2465  0194                     	;# 
  2466  0195                     	;# 
  2467  0196                     	;# 
  2468  0199                     	;# 
  2469  019A                     	;# 
  2470  019B                     	;# 
  2471  019B                     	;# 
  2472  019C                     	;# 
  2473  019D                     	;# 
  2474  019E                     	;# 
  2475  019F                     	;# 
  2476  020C                     	;# 
  2477  020D                     	;# 
  2478  0211                     	;# 
  2479  0211                     	;# 
  2480  0212                     	;# 
  2481  0212                     	;# 
  2482  0213                     	;# 
  2483  0213                     	;# 
  2484  0214                     	;# 
  2485  0214                     	;# 
  2486  0215                     	;# 
  2487  0215                     	;# 
  2488  0215                     	;# 
  2489  0216                     	;# 
  2490  0216                     	;# 
  2491  0217                     	;# 
  2492  0217                     	;# 
  2493  0391                     	;# 
  2494  0392                     	;# 
  2495  0393                     	;# 
  2496  0394                     	;# 
  2497  0395                     	;# 
  2498  0396                     	;# 
  2499  0498                     	;# 
  2500  0498                     	;# 
  2501  0499                     	;# 
  2502  049A                     	;# 
  2503  049B                     	;# 
  2504  049B                     	;# 
  2505  049C                     	;# 
  2506  049E                     	;# 
  2507  049F                     	;# 
  2508  0611                     	;# 
  2509  0612                     	;# 
  2510  0613                     	;# 
  2511  0613                     	;# 
  2512  0614                     	;# 
  2513  0615                     	;# 
  2514  0616                     	;# 
  2515  0616                     	;# 
  2516  0617                     	;# 
  2517  0618                     	;# 
  2518  0619                     	;# 
  2519  0619                     	;# 
  2520  061A                     	;# 
  2521  061B                     	;# 
  2522  061C                     	;# 
  2523  061C                     	;# 
  2524  0691                     	;# 
  2525  0692                     	;# 
  2526  0693                     	;# 
  2527  0694                     	;# 
  2528  0695                     	;# 
  2529  0F0F                     	;# 
  2530  0F10                     	;# 
  2531  0F11                     	;# 
  2532  0F12                     	;# 
  2533  0F13                     	;# 
  2534  0F14                     	;# 
  2535  0F15                     	;# 
  2536  0F16                     	;# 
  2537  0F17                     	;# 
  2538  0F18                     	;# 
  2539  0F19                     	;# 
  2540  0F1A                     	;# 
  2541  0F1B                     	;# 
  2542  0F1C                     	;# 
  2543  0F1D                     	;# 
  2544  0F1E                     	;# 
  2545  0F1F                     	;# 
  2546  0F20                     	;# 
  2547  0F21                     	;# 
  2548  0F22                     	;# 
  2549  0F23                     	;# 
  2550  0F24                     	;# 
  2551  0F25                     	;# 
  2552  0F26                     	;# 
  2553  0F27                     	;# 
  2554  0F28                     	;# 
  2555  0F29                     	;# 
  2556  0F2A                     	;# 
  2557  0F2B                     	;# 
  2558  0F2C                     	;# 
  2559  0F2D                     	;# 
  2560  0F2E                     	;# 
  2561  0F2F                     	;# 
  2562  0F8C                     	;# 
  2563  0F8D                     	;# 
  2564  0F91                     	;# 
  2565  0F95                     	;# 
  2566  0F96                     	;# 
  2567  0F97                     	;# 
  2568  0F9C                     	;# 
  2569  0F9D                     	;# 
  2570  0F9E                     	;# 
  2571  0FE3                     	;# 
  2572  0FE4                     	;# 
  2573  0FE5                     	;# 
  2574  0FE6                     	;# 
  2575  0FE7                     	;# 
  2576  0FE8                     	;# 
  2577  0FE9                     	;# 
  2578  0FEA                     	;# 
  2579  0FEB                     	;# 
  2580  0FED                     	;# 
  2581  0FEE                     	;# 
  2582  0FEF                     	;# 
  2583                           
  2584                           	psect	idataBANK0
  2585  0000                     __pidataBANK0:	
  2586                           
  2587                           	psect	strings
  2588  072E                     __pstrings:	
  2589  072E                     __stringtab:	
  2590  072E  3400               	retlw	0
  2591  072F                     __end_of__stringtab:	
  2592  072F                     _mrfRegset_InitCnt:	
  2593  072F  3410               	retlw	16
  2594  0730                     __end_of_mrfRegset_InitCnt:	
  2595  0730                     _mrfRegset_RxCnt:	
  2596  0730  3406               	retlw	6
  2597  0731                     __end_of_mrfRegset_RxCnt:	
  2598  0731                     _mrfRegset_SleepCnt:	
  2599  0731  3403               	retlw	3
  2600  0732                     __end_of_mrfRegset_SleepCnt:	
  2601  0732                     _mrfRegset_TxCnt:	
  2602  0732  3404               	retlw	4
  2603  0733                     __end_of_mrfRegset_TxCnt:	
  2604  0733                     _mrfRegset_Init:	
  2605  0733  34CA               	retlw	202
  2606  0734  3471               	retlw	113
  2607  0735  34CA               	retlw	202
  2608  0736  3473               	retlw	115
  2609  0737  3480               	retlw	128
  2610  0738  3428               	retlw	40
  2611  0739  34C4               	retlw	196
  2612  073A  34E7               	retlw	231
  2613  073B  34A8               	retlw	168
  2614  073C  3460               	retlw	96
  2615  073D  34C6               	retlw	198
  2616  073E  3405               	retlw	5
  2617  073F  3482               	retlw	130
  2618  0740  3400               	retlw	0
  2619  0741  3490               	retlw	144
  2620  0742  3462               	retlw	98
  2621  0743  3498               	retlw	152
  2622  0744  3490               	retlw	144
  2623  0745  34C2               	retlw	194
  2624  0746  34AC               	retlw	172
  2625  0747  3482               	retlw	130
  2626  0748  3420               	retlw	32
  2627  0749  3455               	retlw	85
  2628  074A  3400               	retlw	0
  2629  074B  3482               	retlw	130
  2630  074C  3480               	retlw	128
  2631  074D  3480               	retlw	128
  2632  074E  3468               	retlw	104
  2633  074F  34CA               	retlw	202
  2634  0750  3471               	retlw	113
  2635  0751  34CA               	retlw	202
  2636  0752  3473               	retlw	115
  2637  0753                     __end_of_mrfRegset_Init:	
  2638  0753                     _mrfRegset_Rx:	
  2639  0753  3482               	retlw	130
  2640  0754  3400               	retlw	0
  2641  0755  34CA               	retlw	202
  2642  0756  3471               	retlw	113
  2643  0757  3480               	retlw	128
  2644  0758  3428               	retlw	40
  2645  0759  3482               	retlw	130
  2646  075A  3480               	retlw	128
  2647  075B  3480               	retlw	128
  2648  075C  3468               	retlw	104
  2649  075D  34CA               	retlw	202
  2650  075E  3473               	retlw	115
  2651  075F                     __end_of_mrfRegset_Rx:	
  2652  075F                     _mrfRegset_Tx:	
  2653  075F  3482               	retlw	130
  2654  0760  3400               	retlw	0
  2655  0761  34CA               	retlw	202
  2656  0762  3471               	retlw	113
  2657  0763  3480               	retlw	128
  2658  0764  34A8               	retlw	168
  2659  0765  3482               	retlw	130
  2660  0766  3420               	retlw	32
  2661  0767                     __end_of_mrfRegset_Tx:	
  2662  0767                     _mrfRegset_Sleep:	
  2663  0767  3482               	retlw	130
  2664  0768  3400               	retlw	0
  2665  0769  34CA               	retlw	202
  2666  076A  3471               	retlw	113
  2667  076B  3480               	retlw	128
  2668  076C  3468               	retlw	104
  2669  076D                     __end_of_mrfRegset_Sleep:	
  2670  000B                     _INTCONbits	set	11
  2671  000C                     _PORTAbits	set	12
  2672  000D                     _PORTBbits	set	13
  2673  000E                     _PORTCbits	set	14
  2674  009D                     _ADCON0	set	157
  2675  009E                     _ADCON1	set	158
  2676  009F                     _ADCON2	set	159
  2677  009C                     _ADRESH	set	156
  2678  009B                     _ADRESL	set	155
  2679  0095                     _OPTION_REGbits	set	149
  2680  0099                     _OSCCON	set	153
  2681  008C                     _TRISAbits	set	140
  2682  008D                     _TRISBbits	set	141
  2683  008E                     _TRISCbits	set	142
  2684  0097                     _WDTCONbits	set	151
  2685  0117                     _FVRCON	set	279
  2686  010C                     _LATAbits	set	268
  2687  010D                     _LATBbits	set	269
  2688  010E                     _LATCbits	set	270
  2689  018C                     _ANSELA	set	396
  2690  018D                     _ANSELB	set	397
  2691  018E                     _ANSELC	set	398
  2692  020C                     _WPUAbits	set	524
  2693                           
  2694                           ; #config settings
  2695  0000                     
  2696                           	psect	cinit
  2697  0022                     start_initialization:	
  2698  0022                     __initialization:	
  2699  0022  30A0               	movlw	low __pbssBANK1
  2700                           
  2701                           ; Clear objects allocated to BANK0
  2702  0023  01B9               	clrf	__pbssBANK0& (0+127)
  2703  0024  01BA               	clrf	(__pbssBANK0+1)& (0+127)
  2704                           
  2705                           ; Clear objects allocated to BANK1
  2706  0025  0084               	movwf	4
  2707  0026  3000               	movlw	high __pbssBANK1
  2708  0027  0085               	movwf	5
  2709  0028  304F               	movlw	79
  2710  0029  3187  277D  3180   	fcall	clear_ram0
  2711                           
  2712                           ;initializer for _coldBoot
  2713  002C  3001               	movlw	1
  2714  002D  00BB               	movwf	__pdataBANK0& (0+127)
  2715  002E                     end_of_initialization:	
  2716                           ;End of C runtime variable initialization code
  2717                           
  2718  002E                     __end_of__initialization:	
  2719  002E  0020               	movlb	0
  2720  002F  2A77               	ljmp	_main	;jump to C main() function
  2721  0030                     __ptext19:	
  2722 ;; *************** function _Mrf49xaModeSleep *****************
  2723 ;; Defined at:
  2724 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  k               1    3[BANK0 ] unsigned char 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, pclath, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 1E/1
  2735 ;;		On exit  : 1F/1
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2738 ;;      Params:         0       0       0       0
  2739 ;;      Locals:         0       1       0       0
  2740 ;;      Temps:          0       0       0       0
  2741 ;;      Totals:         0       1       0       0
  2742 ;;Total ram usage:        1 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    7
  2745 ;; This function calls:
  2746 ;;		_Mrf49TxCmd
  2747 ;; This function is called by:
  2748 ;;		_Mrf49xaShutdown
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           
  2753                           ;psect for function _Mrf49xaModeSleep
  2754  0030                     _Mrf49xaModeSleep:	
  2755  0030                     l2790:	
  2756                           ;incstack = 0
  2757                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  2758                           
  2759                           
  2760                           ;mrf49xa.c: 123: UI08_t k;
  2761                           ;mrf49xa.c: 124: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  2762  0030  0020               	movlb	0	; select bank0
  2763  0031  3031               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  2764  0032  01A3               	clrf	Mrf49xaModeSleep@k
  2765  0033  3187               	movlp	high __stringtab
  2766  0034  000A               	callw
  2767  0035  3180               	pagesel	$	;select current page
  2768  0036  3800               	iorlw	0
  2769  0037  1903               	btfsc	3,2
  2770  0038  284D               	goto	l2802
  2771  0039                     l2796:	
  2772  0039  3523               	lslf	Mrf49xaModeSleep@k,w
  2773  003A  3E68               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  2774  003B  3187               	movlp	high __stringtab
  2775  003C  000A               	callw
  2776  003D  3180               	pagesel	$	;select current page
  2777  003E  00A1               	movwf	Mrf49TxCmd@val
  2778  003F  3523               	lslf	Mrf49xaModeSleep@k,w
  2779  0040  3E67               	addlw	low (_mrfRegset_Sleep| (0+32768))
  2780  0041  3187               	movlp	high __stringtab
  2781  0042  000A               	callw
  2782  0043  3180               	pagesel	$	;select current page
  2783  0044  25C4               	fcall	_Mrf49TxCmd
  2784  0045  3031               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  2785  0046  0AA3               	incf	Mrf49xaModeSleep@k,f
  2786  0047  3187               	movlp	high __stringtab
  2787  0048  000A               	callw
  2788  0049  3180               	pagesel	$	;select current page
  2789  004A  0223               	subwf	Mrf49xaModeSleep@k,w
  2790  004B  1C03               	skipc
  2791  004C  2839               	goto	l2796
  2792  004D                     l2802:	
  2793                           
  2794                           ;mrf49xa.c: 126: rfTrcvStatus.state = POWERED_OFF;
  2795  004D  0021               	movlb	1	; select bank1
  2796  004E  3080               	movlw	-128
  2797  004F  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  2798                           
  2799                           ;mrf49xa.c: 127: rfTrcvStatus.hwByte = 0;
  2800  0050  05ED               	andwf	(_rfTrcvStatus^(0+128)+77),f
  2801  0051  0008               	return
  2802  0052                     __end_of_Mrf49xaModeSleep:	
  2803  0052                     __ptext29:	
  2804 ;; *************** function _Mrf49xaModeTx *****************
  2805 ;; Defined at:
  2806 ;;		line 111 in file "../../../src/devices/mrf49xa.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;		None
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  k               1    3[BANK0 ] unsigned char 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;		None               void
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0, pclath, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 1F/0
  2817 ;;		On exit  : 1F/1
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2820 ;;      Params:         0       0       0       0
  2821 ;;      Locals:         0       1       0       0
  2822 ;;      Temps:          0       0       0       0
  2823 ;;      Totals:         0       1       0       0
  2824 ;;Total ram usage:        1 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    7
  2827 ;; This function calls:
  2828 ;;		_Mrf49TxCmd
  2829 ;; This function is called by:
  2830 ;;		_Mrf49xaTick
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           
  2835                           ;psect for function _Mrf49xaModeTx
  2836  0052                     _Mrf49xaModeTx:	
  2837  0052  3032               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2838                           
  2839                           ;mrf49xa.c: 113: UI08_t k;
  2840                           ;mrf49xa.c: 114: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg,
      +                           mrfRegset_Tx[k].val); };
  2841                           
  2842                           ;incstack = 0
  2843                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  2844  0053  01A3               	clrf	Mrf49xaModeTx@k
  2845  0054  3187               	movlp	high __stringtab
  2846  0055  000A               	callw
  2847  0056  3180               	pagesel	$	;select current page
  2848  0057  3800               	iorlw	0
  2849  0058  1903               	btfsc	3,2
  2850  0059  286E               	goto	l2924
  2851  005A                     l2918:	
  2852  005A  3523               	lslf	Mrf49xaModeTx@k,w
  2853  005B  3E60               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  2854  005C  3187               	movlp	high __stringtab
  2855  005D  000A               	callw
  2856  005E  3180               	pagesel	$	;select current page
  2857  005F  00A1               	movwf	Mrf49TxCmd@val
  2858  0060  3523               	lslf	Mrf49xaModeTx@k,w
  2859  0061  3E5F               	addlw	low (_mrfRegset_Tx| (0+32768))
  2860  0062  3187               	movlp	high __stringtab
  2861  0063  000A               	callw
  2862  0064  3180               	pagesel	$	;select current page
  2863  0065  25C4               	fcall	_Mrf49TxCmd
  2864  0066  3032               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  2865  0067  0AA3               	incf	Mrf49xaModeTx@k,f
  2866  0068  3187               	movlp	high __stringtab
  2867  0069  000A               	callw
  2868  006A  3180               	pagesel	$	;select current page
  2869  006B  0223               	subwf	Mrf49xaModeTx@k,w
  2870  006C  1C03               	skipc
  2871  006D  285A               	goto	l2918
  2872  006E                     l2924:	
  2873                           
  2874                           ;mrf49xa.c: 117: rfTrcvStatus.state = TX_PACKET;
  2875  006E  3003               	movlw	3
  2876  006F  0021               	movlb	1	; select bank1
  2877  0070  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  2878                           
  2879                           ;mrf49xa.c: 118: rfTrcvStatus.hwByte = 99;
  2880  0071  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  2881  0072  3980               	andlw	-128
  2882  0073  3863               	iorlw	99
  2883  0074  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  2884  0075  0008               	return
  2885  0076                     __end_of_Mrf49xaModeTx:	
  2886  0076                     __ptext38:	
  2887 ;; *************** function _Mrf49RxCmd *****************
  2888 ;; Defined at:
  2889 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  cmd             1    wreg     unsigned char 
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  cmd             1    1[BANK0 ] unsigned char 
  2894 ;;  val             1    2[BANK0 ] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      unsigned char 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0, pclath, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 1E/1
  2901 ;;		On exit  : 1F/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2904 ;;      Params:         0       0       0       0
  2905 ;;      Locals:         0       2       0       0
  2906 ;;      Temps:          0       0       0       0
  2907 ;;      Totals:         0       2       0       0
  2908 ;;Total ram usage:        2 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    6
  2911 ;; This function calls:
  2912 ;;		_Mrf49SpiRx
  2913 ;;		_Mrf49SpiTx
  2914 ;; This function is called by:
  2915 ;;		_Mrf49RxByte
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function _Mrf49RxCmd
  2921  0076                     _Mrf49RxCmd:	
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  2925                           ;Mrf49RxCmd@cmd stored from wreg
  2926  0076  0020               	movlb	0	; select bank0
  2927  0077  00A1               	movwf	Mrf49RxCmd@cmd
  2928                           
  2929                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  2930  0078  130E               	bcf	14,6	;volatile
  2931                           
  2932                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  2933  0079  0821               	movf	Mrf49RxCmd@cmd,w
  2934  007A  2663  3180         	fcall	_Mrf49SpiTx
  2935                           
  2936                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  2937  007C  261F               	fcall	_Mrf49SpiRx
  2938  007D  00A2               	movwf	Mrf49RxCmd@val
  2939                           
  2940                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  2941  007E  170E               	bsf	14,6	;volatile
  2942                           
  2943                           ;mrf49xa_cmd.c: 27: return val;
  2944  007F  0008               	return
  2945  0080                     __end_of_Mrf49RxCmd:	
  2946  0080                     __ptext20:	
  2947 ;; *************** function _PwrRfInit *****************
  2948 ;; Defined at:
  2949 ;;		line 87 in file "../../../src/node/power.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 1F/0
  2960 ;;		On exit  : 1F/1
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2963 ;;      Params:         0       0       0       0
  2964 ;;      Locals:         0       0       0       0
  2965 ;;      Temps:          0       0       0       0
  2966 ;;      Totals:         0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:   10
  2970 ;; This function calls:
  2971 ;;		_ExtIntInit
  2972 ;;		_Mrf49xaInit
  2973 ;;		_Sleepy
  2974 ;; This function is called by:
  2975 ;;		_main
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           
  2980                           ;psect for function _PwrRfInit
  2981  0080                     _PwrRfInit:	
  2982                           
  2983                           ;power.c: 89: TRISAbits.TRISA2 = 1;
  2984                           
  2985                           ;incstack = 0
  2986                           ; Regs used in _PwrRfInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2987  0080  0021               	movlb	1	; select bank1
  2988  0081  150C               	bsf	12,2	;volatile
  2989                           
  2990                           ;power.c: 90: TRISAbits.TRISA4 = 0;
  2991  0082  120C               	bcf	12,4	;volatile
  2992                           
  2993                           ;power.c: 91: TRISAbits.TRISA5 = 0;
  2994  0083  128C               	bcf	12,5	;volatile
  2995                           
  2996                           ;power.c: 93: TRISBbits.TRISB7 = 0;
  2997  0084  138D               	bcf	13,7	;volatile
  2998                           
  2999                           ;power.c: 95: TRISCbits.TRISC1 = 0;
  3000  0085  108E               	bcf	14,1	;volatile
  3001                           
  3002                           ;power.c: 96: TRISCbits.TRISC4 = 0;
  3003  0086  120E               	bcf	14,4	;volatile
  3004                           
  3005                           ;power.c: 97: TRISCbits.TRISC6 = 0;
  3006  0087  130E               	bcf	14,6	;volatile
  3007                           
  3008                           ;power.c: 98: TRISCbits.TRISC7 = 0;
  3009  0088  138E               	bcf	14,7	;volatile
  3010                           
  3011                           ;power.c: 99: TRISCbits.TRISC3 = 1;
  3012  0089  158E               	bsf	14,3	;volatile
  3013                           
  3014                           ;power.c: 100: TRISCbits.TRISC5 = 1;
  3015  008A  168E               	bsf	14,5	;volatile
  3016                           
  3017                           ;power.c: 102: LATCbits.LATC1 = 0;
  3018  008B  0022               	movlb	2	; select bank2
  3019  008C  108E               	bcf	14,1	;volatile
  3020                           
  3021                           ;power.c: 104: LATAbits.LATA4 = 0;
  3022  008D  120C               	bcf	12,4	;volatile
  3023                           
  3024                           ;power.c: 105: LATAbits.LATA5 = 0;
  3025  008E  128C               	bcf	12,5	;volatile
  3026                           
  3027                           ;power.c: 106: LATCbits.LATC4 = 0;
  3028  008F  120E               	bcf	14,4	;volatile
  3029                           
  3030                           ;power.c: 107: PORTCbits.RC6 = 1;
  3031  0090  0020               	movlb	0	; select bank0
  3032  0091  170E               	bsf	14,6	;volatile
  3033                           
  3034                           ;power.c: 108: LATCbits.LATC7 = 0;
  3035  0092  0022               	movlb	2	; select bank2
  3036  0093  138E               	bcf	14,7	;volatile
  3037                           
  3038                           ;power.c: 109: PORTBbits.RB7 = 0;
  3039  0094  0020               	movlb	0	; select bank0
  3040  0095  138D               	bcf	13,7	;volatile
  3041                           
  3042                           ;power.c: 111: WPUAbits.WPUA2 = 1;
  3043  0096  0024               	movlb	4	; select bank4
  3044  0097  150C               	bsf	12,2	;volatile
  3045                           
  3046                           ;power.c: 112: Sleepy(10);
  3047  0098  300A               	movlw	10
  3048  0099  0020               	movlb	0	; select bank0
  3049  009A  00A0               	movwf	Sleepy@ms
  3050  009B  01A1               	clrf	Sleepy@ms+1
  3051  009C  23A2  3180         	fcall	_Sleepy
  3052                           
  3053                           ;power.c: 114: Mrf49xaInit();
  3054  009E  2342  3180         	fcall	_Mrf49xaInit
  3055                           
  3056                           ;power.c: 115: ExtIntInit();
  3057  00A0  2E19               	ljmp	l2910
  3058  00A1                     __end_of_PwrRfInit:	
  3059  00A1                     __ptext1:	
  3060 ;; *************** function _RfSendPowerState *****************
  3061 ;; Defined at:
  3062 ;;		line 10 in file "../../../src/rfstack/client.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  s               2    6[BANK0 ] unsigned int 
  3067 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  3068 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;		None               void
  3071 ;; Registers used:
  3072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : 1F/1
  3075 ;;		On exit  : 1F/1
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3078 ;;      Params:         0       0       0       0
  3079 ;;      Locals:         0       3       0       0
  3080 ;;      Temps:          0       0       0       0
  3081 ;;      Totals:         0       3       0       0
  3082 ;;Total ram usage:        3 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    7
  3085 ;; This function calls:
  3086 ;;		_AdcSample
  3087 ;;		_Mrf49xaAllocPacket
  3088 ;;		_Mrf49xaTxPacket
  3089 ;;		_PwrAdcSleep
  3090 ;;		_PwrAdcWake
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function _RfSendPowerState
  3098  00A1                     _RfSendPowerState:	
  3099                           
  3100                           ;client.c: 12: rfTrcvPacket_t* packet = Mrf49xaAllocPacket();
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in _RfSendPowerState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3104  00A1  210F  3180         	fcall	_Mrf49xaAllocPacket
  3105  00A3  0020               	movlb	0	; select bank0
  3106  00A4  00A8               	movwf	RfSendPowerState@packet
  3107                           
  3108                           ;client.c: 14: packet->packet.size = 4;
  3109  00A5  0A28               	incf	RfSendPowerState@packet,w
  3110  00A6  0086               	movwf	6
  3111  00A7  3004               	movlw	4
  3112  00A8  0187               	clrf	7
  3113  00A9  0081               	movwf	1
  3114                           
  3115                           ;client.c: 15: packet->packet.id = RF_POWER_STATUS;
  3116  00AA  0828               	movf	RfSendPowerState@packet,w
  3117  00AB  3E04               	addlw	4
  3118  00AC  0086               	movwf	6
  3119  00AD  30A3               	movlw	163
  3120  00AE  0081               	movwf	1
  3121                           
  3122                           ;client.c: 16: packet->packet.dst = 0xFF;
  3123  00AF  0828               	movf	RfSendPowerState@packet,w
  3124  00B0  3E03               	addlw	3
  3125  00B1  0086               	movwf	6
  3126  00B2  30FF               	movlw	255
  3127  00B3  0081               	movwf	1
  3128                           
  3129                           ;client.c: 18: packet->packet.data[0] = coldBoot; coldBoot = 0;
  3130  00B4  0828               	movf	RfSendPowerState@packet,w
  3131  00B5  3E06               	addlw	6
  3132  00B6  0086               	movwf	6
  3133  00B7  083B               	movf	_coldBoot,w
  3134  00B8  0081               	movwf	1
  3135  00B9  01BB               	clrf	_coldBoot
  3136                           
  3137                           ;client.c: 19: packet->packet.data[1] = 0;
  3138  00BA  0828               	movf	RfSendPowerState@packet,w
  3139  00BB  3E07               	addlw	7
  3140  00BC  0086               	movwf	6
  3141  00BD  0181               	clrf	1
  3142                           
  3143                           ;client.c: 21: PwrAdcWake();
  3144  00BE  211B  3180         	fcall	_PwrAdcWake
  3145                           
  3146                           ;client.c: 22: uint16_t s = AdcSample(ADC_FVR);
  3147  00C0  301F               	movlw	31
  3148  00C1  20DA  3180         	fcall	_AdcSample
  3149  00C3  0823               	movf	?_AdcSample+1,w
  3150  00C4  00A7               	movwf	RfSendPowerState@s+1
  3151  00C5  0822               	movf	?_AdcSample,w
  3152  00C6  00A6               	movwf	RfSendPowerState@s
  3153                           
  3154                           ;client.c: 23: PwrAdcSleep();
  3155  00C7  2615  3180         	fcall	_PwrAdcSleep
  3156                           
  3157                           ;client.c: 24: packet->packet.data[2] = s & 0xFF;
  3158  00C9  0020               	movlb	0	; select bank0
  3159  00CA  0828               	movf	RfSendPowerState@packet,w
  3160  00CB  3E08               	addlw	8
  3161  00CC  0086               	movwf	6
  3162  00CD  0187               	clrf	7
  3163  00CE  0826               	movf	RfSendPowerState@s,w
  3164  00CF  0081               	movwf	1
  3165                           
  3166                           ;client.c: 25: packet->packet.data[3] = s >> 8;
  3167  00D0  0828               	movf	RfSendPowerState@packet,w
  3168  00D1  3E09               	addlw	9
  3169  00D2  0086               	movwf	6
  3170  00D3  0827               	movf	RfSendPowerState@s+1,w
  3171  00D4  0081               	movwf	1
  3172                           
  3173                           ;client.c: 27: Mrf49xaTxPacket(packet, 0, 1);
  3174  00D5  01A0               	clrf	Mrf49xaTxPacket@response
  3175  00D6  01A1               	clrf	Mrf49xaTxPacket@needAck
  3176  00D7  0AA1               	incf	Mrf49xaTxPacket@needAck,f
  3177  00D8  0828               	movf	RfSendPowerState@packet,w
  3178  00D9  2A09               	ljmp	_Mrf49xaTxPacket
  3179  00DA                     __end_of_RfSendPowerState:	
  3180  00DA                     __ptext7:	
  3181 ;; *************** function _AdcSample *****************
  3182 ;; Defined at:
  3183 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  ch              1    wreg     unsigned char 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  ch              1    5[BANK0 ] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  2    2[BANK0 ] unsigned int 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0, pclath, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 1F/1
  3194 ;;		On exit  : 1F/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3197 ;;      Params:         0       2       0       0
  3198 ;;      Locals:         0       1       0       0
  3199 ;;      Temps:          0       1       0       0
  3200 ;;      Totals:         0       4       0       0
  3201 ;;Total ram usage:        4 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    6
  3204 ;; This function calls:
  3205 ;;		_AdcChSelect
  3206 ;;		_AdcGetResult
  3207 ;;		_AdcGo
  3208 ;;		_AdcIsBusy
  3209 ;; This function is called by:
  3210 ;;		_RfSendPowerState
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           
  3215                           ;psect for function _AdcSample
  3216  00DA                     _AdcSample:	
  3217                           
  3218                           ;incstack = 0
  3219                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  3220                           ;AdcSample@ch stored from wreg
  3221  00DA  0020               	movlb	0	; select bank0
  3222  00DB  00A5               	movwf	AdcSample@ch
  3223                           
  3224                           ;adc16.c: 83: AdcChSelect(ch);
  3225  00DC  0825               	movf	AdcSample@ch,w
  3226  00DD  2108  3180         	fcall	_AdcChSelect
  3227                           
  3228                           ;adc16.c: 86: AdcGo();
  3229  00DF  2102  3180         	fcall	_AdcGo
  3230                           
  3231                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  3232  00E1  30C7               	movlw	199
  3233  00E2  0020               	movlb	0	; select bank0
  3234  00E3  00A4               	movwf	??_AdcSample
  3235  00E4                     u2397:	
  3236  00E4  0000               	nop
  3237  00E5  0BA4               	decfsz	??_AdcSample,f
  3238  00E6  28E4               	goto	u2397
  3239  00E7  3200               	nop2	;nop
  3240  00E8  0000               	nop
  3241  00E9                     l2900:	
  3242                           ;adc16.c: 88: while (AdcIsBusy());
  3243                           
  3244  00E9  2104  3180         	fcall	_AdcIsBusy
  3245  00EB  3800               	iorlw	0
  3246  00EC  1D03               	skipz
  3247  00ED  28E9               	goto	l2900
  3248                           
  3249                           ;adc16.c: 89: AdcGo();
  3250  00EE  2102  3180         	fcall	_AdcGo
  3251  00F0                     l2904:	
  3252                           ;adc16.c: 90: while (AdcIsBusy());
  3253                           
  3254  00F0  2104  3180         	fcall	_AdcIsBusy
  3255  00F2  3800               	iorlw	0
  3256  00F3  1D03               	skipz
  3257  00F4  28F0               	goto	l2904
  3258                           
  3259                           ;psect for function _AdcGetResult
  3260                           
  3261                           ;adc16.c: 92: return AdcGetResult();
  3262  00F5                     i1L_AdcGetResult:	
  3263  00F5                     i1Ll2652:	
  3264                           
  3265                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  3266  00F5  081C               	movf	28,w	;volatile
  3267  00F6  0020               	movlb	0	; select bank0
  3268  00F7  00A1               	movwf	?_AdcGetResult+1
  3269  00F8  01A0               	clrf	?_AdcGetResult
  3270  00F9  0021               	movlb	1	; select bank1
  3271  00FA  081B               	movf	27,w	;volatile
  3272  00FB  0020               	movlb	0	; select bank0
  3273  00FC  04A0               	iorwf	?_AdcGetResult,f
  3274  00FD                     i1Ll79:	
  3275  00FD  0821               	movf	?_AdcGetResult+1,w
  3276  00FE  00A3               	movwf	?_AdcSample+1
  3277  00FF  0820               	movf	?_AdcGetResult,w
  3278  0100  00A2               	movwf	?_AdcSample
  3279  0101  0008               	return
  3280  0102                     __end_of_AdcSample:	
  3281  0102                     __ptext9:	
  3282 ;; *************** function _AdcGo *****************
  3283 ;; Defined at:
  3284 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;		None               void
  3291 ;; Registers used:
  3292 ;;		None
  3293 ;; Tracked objects:
  3294 ;;		On entry : 1F/1
  3295 ;;		On exit  : 1F/1
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3298 ;;      Params:         0       0       0       0
  3299 ;;      Locals:         0       0       0       0
  3300 ;;      Temps:          0       0       0       0
  3301 ;;      Totals:         0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    5
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_AdcSample
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           
  3313                           ;psect for function _AdcGo
  3314  0102                     _AdcGo:	
  3315                           
  3316                           ;adc16.c: 31: ADCON0 |= 1<<1;
  3317                           
  3318                           ;incstack = 0
  3319                           ; Regs used in _AdcGo: []
  3320  0102  149D               	bsf	29,1	;volatile
  3321  0103  0008               	return
  3322  0104                     __end_of_AdcGo:	
  3323  0104                     __ptext8:	
  3324 ;; *************** function _AdcIsBusy *****************
  3325 ;; Defined at:
  3326 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;		None
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;		None
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      unsigned char 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/1
  3337 ;;		On exit  : 1F/1
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3340 ;;      Params:         0       0       0       0
  3341 ;;      Locals:         0       0       0       0
  3342 ;;      Temps:          0       0       0       0
  3343 ;;      Totals:         0       0       0       0
  3344 ;;Total ram usage:        0 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    5
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_AdcSample
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _AdcIsBusy
  3356  0104                     _AdcIsBusy:	
  3357                           
  3358                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  3362  0104  0021               	movlb	1	; select bank1
  3363  0105  361D               	lsrf	29,w	;volatile
  3364  0106  3901               	andlw	1
  3365  0107  0008               	return
  3366  0108                     __end_of_AdcIsBusy:	
  3367  0108                     __ptext11:	
  3368 ;; *************** function _AdcChSelect *****************
  3369 ;; Defined at:
  3370 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  channel         1    wreg     enum E4222
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  channel         1    0[BANK0 ] enum E4222
  3375 ;; Return value:  Size  Location     Type
  3376 ;;		None               void
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 1F/0
  3381 ;;		On exit  : 1F/1
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3384 ;;      Params:         0       0       0       0
  3385 ;;      Locals:         0       1       0       0
  3386 ;;      Temps:          0       0       0       0
  3387 ;;      Totals:         0       1       0       0
  3388 ;;Total ram usage:        1 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    5
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_AdcSample
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function _AdcChSelect
  3400  0108                     _AdcChSelect:	
  3401                           
  3402                           ;incstack = 0
  3403                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  3404                           ;AdcChSelect@channel stored from wreg
  3405  0108  00A0               	movwf	AdcChSelect@channel
  3406                           
  3407                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  3408  0109  0709               	addwf	9,w
  3409  010A  0709               	addwf	9,w
  3410  010B  3801               	iorlw	1
  3411  010C  0021               	movlb	1	; select bank1
  3412  010D  009D               	movwf	29	;volatile
  3413  010E  0008               	return
  3414  010F                     __end_of_AdcChSelect:	
  3415  010F                     __ptext6:	
  3416 ;; *************** function _Mrf49xaAllocPacket *****************
  3417 ;; Defined at:
  3418 ;;		line 107 in file "../../../src/devices/mrf49xa_packet.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      PTR struct rfTrcvPacket_
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0
  3427 ;; Tracked objects:
  3428 ;;		On entry : 1F/1
  3429 ;;		On exit  : 1F/1
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3432 ;;      Params:         0       0       0       0
  3433 ;;      Locals:         0       0       0       0
  3434 ;;      Temps:          0       0       0       0
  3435 ;;      Totals:         0       0       0       0
  3436 ;;Total ram usage:        0 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    5
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_RfSendPowerState
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function _Mrf49xaAllocPacket
  3448  010F                     _Mrf49xaAllocPacket:	
  3449                           
  3450                           ;mrf49xa_packet.c: 109: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE)
  3451                           
  3452                           ;incstack = 0
  3453                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  3454  010F  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  3455  0110  1D03               	skipz
  3456  0111  2915               	goto	l3018
  3457                           
  3458                           ;mrf49xa_packet.c: 110: {
  3459                           ;mrf49xa_packet.c: 111: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  3460  0112  3006               	movlw	6
  3461  0113  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  3462                           
  3463                           ;mrf49xa_packet.c: 112: return &(rfTrcvStatus.rxPacket[0]);
  3464  0114  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  3465  0115                     l3018:	
  3466                           
  3467                           ;mrf49xa_packet.c: 113: }
  3468                           ;mrf49xa_packet.c: 115: if (rfTrcvStatus.rxPacket[1].state == PKT_FREE)
  3469  0115  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  3470  0116  1D03               	skipz
  3471  0117  3400               	retlw	0
  3472                           
  3473                           ;mrf49xa_packet.c: 116: {
  3474                           ;mrf49xa_packet.c: 117: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  3475  0118  3006               	movlw	6
  3476  0119  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  3477                           
  3478                           ;mrf49xa_packet.c: 118: return &(rfTrcvStatus.rxPacket[1]);
  3479  011A  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  3480  011B                     __end_of_Mrf49xaAllocPacket:	
  3481                           ;mrf49xa_packet.c: 119: }
  3482                           ;mrf49xa_packet.c: 121: return (0);
  3483                           
  3484  011B                     __ptext2:	
  3485 ;; *************** function _PwrAdcWake *****************
  3486 ;; Defined at:
  3487 ;;		line 168 in file "../../../src/node/power.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 1F/0
  3498 ;;		On exit  : 1F/1
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3501 ;;      Params:         0       0       0       0
  3502 ;;      Locals:         0       0       0       0
  3503 ;;      Temps:          0       0       0       0
  3504 ;;      Totals:         0       0       0       0
  3505 ;;Total ram usage:        0 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    6
  3508 ;; This function calls:
  3509 ;;		_AdcInit
  3510 ;; This function is called by:
  3511 ;;		_RfSendPowerState
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           
  3516                           ;psect for function _PwrAdcWake
  3517  011B                     _PwrAdcWake:	
  3518                           
  3519                           ;power.c: 170: ANSELC = (1<<0);
  3520                           
  3521                           ;incstack = 0
  3522                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  3523  011B  3001               	movlw	1
  3524  011C  0023               	movlb	3	; select bank3
  3525  011D  008E               	movwf	14	;volatile
  3526                           
  3527                           ;power.c: 171: TRISCbits.TRISC0 = 1;
  3528  011E  0021               	movlb	1	; select bank1
  3529  011F  140E               	bsf	14,0	;volatile
  3530                           
  3531                           ;power.c: 173: AdcInit();
  3532  0120  2EC7               	ljmp	l2642
  3533  0121                     __end_of_PwrAdcWake:	
  3534  0121                     __ptext41:	
  3535 ;; *************** function _HandlePacket *****************
  3536 ;; Defined at:
  3537 ;;		line 119 in file "../../../src/rfstack/client.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3540 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  packet          1   21[BANK0 ] PTR struct rfTrcvPacket_
  3543 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3544 ;;  sendMsg         1   20[BANK0 ] unsigned char 
  3545 ;;  sendAck         1   19[BANK0 ] unsigned char 
  3546 ;;  needAck         1    0        unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;		None               void
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 1F/0
  3553 ;;		On exit  : 1E/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3556 ;;      Params:         0       0       0       0
  3557 ;;      Locals:         0       4       0       0
  3558 ;;      Temps:          0       0       0       0
  3559 ;;      Totals:         0       4       0       0
  3560 ;;Total ram usage:        4 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    9
  3563 ;; This function calls:
  3564 ;;		_Mrf49xaFreePacket
  3565 ;;		_Mrf49xaTxAck
  3566 ;;		_Mrf49xaTxPacket
  3567 ;;		_handleFwCmd
  3568 ;;		_handleFwRead
  3569 ;;		_handleFwWrite
  3570 ;; This function is called by:
  3571 ;;		_Mrf49xaTick
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           
  3576                           ;psect for function _HandlePacket
  3577  0121                     _HandlePacket:	
  3578                           
  3579                           ;incstack = 0
  3580                           ; Regs used in _HandlePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3581                           ;HandlePacket@packet stored from wreg
  3582  0121  00B5               	movwf	HandlePacket@packet
  3583                           
  3584                           ;client.c: 121: bool_t sendMsg = 0;
  3585  0122  01B4               	clrf	HandlePacket@sendMsg
  3586                           
  3587                           ;client.c: 122: bool_t sendAck = 0;
  3588  0123  01B3               	clrf	HandlePacket@sendAck
  3589                           
  3590                           ;client.c: 126: switch (packet->packet.id)
  3591  0124  2953               	goto	l3054
  3592  0125                     l3030:	
  3593                           
  3594                           ;client.c: 129: packet->packet.data[0] = 2;
  3595  0125  0835               	movf	HandlePacket@packet,w
  3596  0126  3E06               	addlw	6
  3597  0127  0086               	movwf	6
  3598  0128  3002               	movlw	2
  3599  0129  0187               	clrf	7
  3600  012A  0081               	movwf	1
  3601  012B                     l3032:	
  3602                           
  3603                           ;client.c: 130: sendMsg = 1;
  3604  012B  0020               	movlb	0	; select bank0
  3605  012C  01B4               	clrf	HandlePacket@sendMsg
  3606  012D  0AB4               	incf	HandlePacket@sendMsg,f
  3607                           
  3608                           ;client.c: 131: break;
  3609  012E  296E               	goto	l3056
  3610  012F                     l3034:	
  3611                           
  3612                           ;client.c: 134: if (rfTrcvStatus.txPacket.crc == packet->packet.data[1] &&
  3613                           ;client.c: 135: rfTrcvStatus.txPacket.packet.id == packet->packet.data[0])
  3614  012F  0835               	movf	HandlePacket@packet,w
  3615  0130  3E07               	addlw	7
  3616  0131  0086               	movwf	6
  3617  0132  0187               	clrf	7
  3618  0133  0021               	movlb	1	; select bank1
  3619  0134  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  3620  0135  0601               	xorwf	1,w
  3621  0136  1D03               	skipz
  3622  0137  296E               	goto	l3056
  3623  0138  0020               	movlb	0	; select bank0
  3624  0139  0835               	movf	HandlePacket@packet,w
  3625  013A  3E06               	addlw	6
  3626  013B  0086               	movwf	6
  3627  013C  0021               	movlb	1	; select bank1
  3628  013D  0857               	movf	(_rfTrcvStatus^(0+128)+55),w
  3629  013E  0601               	xorwf	1,w
  3630  013F  1D03               	skipz
  3631  0140  296E               	goto	l3056
  3632                           
  3633                           ;client.c: 136: {
  3634                           ;client.c: 137: rfTrcvStatus.txPacket.needAck = ACK_RECEIVED;
  3635  0141  3002               	movlw	2
  3636  0142  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  3637  0143  296E               	goto	l3056
  3638  0144                     l554:	
  3639                           ;client.c: 142: syncedTime = *((uint32_t*) packet->packet.data);
  3640                           
  3641                           
  3642                           ;client.c: 143: sendAck = 1;
  3643  0144  01B3               	clrf	HandlePacket@sendAck
  3644  0145  0AB3               	incf	HandlePacket@sendAck,f
  3645                           
  3646                           ;client.c: 144: break;
  3647  0146  296E               	goto	l3056
  3648  0147                     l3040:	
  3649                           
  3650                           ;client.c: 151: handleFwCmd(packet);
  3651  0147  0835               	movf	HandlePacket@packet,w
  3652  0148  217E  3180         	fcall	_handleFwCmd
  3653  014A  292B               	goto	l3032
  3654  014B                     l3044:	
  3655                           
  3656                           ;client.c: 156: handleFwWrite(packet);
  3657  014B  0835               	movf	HandlePacket@packet,w
  3658  014C  21BC  3180         	fcall	_handleFwWrite
  3659  014E  292B               	goto	l3032
  3660  014F                     l3048:	
  3661                           
  3662                           ;client.c: 161: handleFwRead(packet);
  3663  014F  0835               	movf	HandlePacket@packet,w
  3664  0150  21B0  3180         	fcall	_handleFwRead
  3665  0152  292B               	goto	l3032
  3666  0153                     l3054:	
  3667  0153  0835               	movf	HandlePacket@packet,w
  3668  0154  3E04               	addlw	4
  3669  0155  0086               	movwf	6
  3670  0156  0187               	clrf	7
  3671  0157  0801               	movf	1,w
  3672                           
  3673                           ; Switch size 1, requested type "space"
  3674                           ; Number of cases is 7, Range of values is 160 to 194
  3675                           ; switch strategies available:
  3676                           ; Name         Instructions Cycles
  3677                           ; simple_byte           22    12 (average)
  3678                           ; direct_byte           79     9 (fixed)
  3679                           ; jumptable            263     9 (fixed)
  3680                           ;	Chosen strategy is simple_byte
  3681  0158  3AA0               	xorlw	160	; case 160
  3682  0159  1903               	skipnz
  3683  015A  2925               	goto	l3030
  3684  015B  3A01               	xorlw	1	; case 161
  3685  015C  1903               	skipnz
  3686  015D  292F               	goto	l3034
  3687  015E  3A03               	xorlw	3	; case 162
  3688  015F  1903               	skipnz
  3689  0160  2944               	goto	l554
  3690  0161  3A01               	xorlw	1	; case 163
  3691  0162  1903               	skipnz
  3692  0163  296E               	goto	l3056
  3693  0164  3A63               	xorlw	99	; case 192
  3694  0165  1903               	skipnz
  3695  0166  2947               	goto	l3040
  3696  0167  3A01               	xorlw	1	; case 193
  3697  0168  1903               	skipnz
  3698  0169  294B               	goto	l3044
  3699  016A  3A03               	xorlw	3	; case 194
  3700  016B  1903               	skipnz
  3701  016C  294F               	goto	l3048
  3702  016D  296E               	goto	l3056
  3703  016E                     l3056:	
  3704                           
  3705                           ;client.c: 167: if (sendMsg)
  3706  016E  0020               	movlb	0	; select bank0
  3707  016F  0834               	movf	HandlePacket@sendMsg,w
  3708  0170  1903               	btfsc	3,2
  3709  0171  2977               	goto	l3060
  3710                           
  3711                           ;client.c: 168: Mrf49xaTxPacket(packet, 1, needAck);
  3712  0172  01A0               	clrf	Mrf49xaTxPacket@response
  3713  0173  0AA0               	incf	Mrf49xaTxPacket@response,f
  3714  0174  01A1               	clrf	Mrf49xaTxPacket@needAck
  3715  0175  0835               	movf	HandlePacket@packet,w
  3716  0176  2A09               	ljmp	_Mrf49xaTxPacket
  3717  0177                     l3060:	
  3718                           
  3719                           ;client.c: 169: else if (sendAck)
  3720  0177  0833               	movf	HandlePacket@sendAck,w
  3721  0178  1903               	btfsc	3,2
  3722  0179  297C               	goto	l3064
  3723                           
  3724                           ;client.c: 170: Mrf49xaTxAck(packet);
  3725  017A  0835               	movf	HandlePacket@packet,w
  3726  017B  2A4F               	ljmp	_Mrf49xaTxAck
  3727  017C                     l3064:	
  3728                           
  3729                           ;client.c: 171: else
  3730                           ;client.c: 172: Mrf49xaFreePacket(packet);
  3731  017C  0835               	movf	HandlePacket@packet,w
  3732  017D  2DDF               	ljmp	_Mrf49xaFreePacket
  3733  017E                     __end_of_HandlePacket:	
  3734  017E                     __ptext45:	
  3735 ;; *************** function _handleFwCmd *****************
  3736 ;; Defined at:
  3737 ;;		line 30 in file "../../../src/rfstack/client.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3740 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  3743 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;		None               void
  3746 ;; Registers used:
  3747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 1F/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3753 ;;      Params:         0       0       0       0
  3754 ;;      Locals:         0       1       0       0
  3755 ;;      Temps:          0       0       0       0
  3756 ;;      Totals:         0       1       0       0
  3757 ;;Total ram usage:        1 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    8
  3760 ;; This function calls:
  3761 ;;		_eepromRxBytes
  3762 ;; This function is called by:
  3763 ;;		_HandlePacket
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _handleFwCmd
  3769  017E                     _handleFwCmd:	
  3770                           
  3771                           ;incstack = 0
  3772                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3773                           ;handleFwCmd@packet stored from wreg
  3774  017E  00A8               	movwf	handleFwCmd@packet
  3775                           
  3776                           ;client.c: 52: break;
  3777                           
  3778                           ;client.c: 32: switch(packet->packet.data[0])
  3779  017F  3E06               	addlw	6
  3780  0180  0086               	movwf	6
  3781  0181  0187               	clrf	7
  3782  0182  0801               	movf	1,w
  3783                           
  3784                           ; Switch size 1, requested type "space"
  3785                           ; Number of cases is 8, Range of values is 0 to 7
  3786                           ; switch strategies available:
  3787                           ; Name         Instructions Cycles
  3788                           ; direct_byte           22     6 (fixed)
  3789                           ; simple_byte           25    13 (average)
  3790                           ; jumptable            260     6 (fixed)
  3791                           ;	Chosen strategy is direct_byte
  3792  0183  0084               	movwf	4
  3793  0184  3008               	movlw	8
  3794  0185  0204               	subwf	4,w
  3795  0186  1803               	skipnc
  3796  0187  0008               	return
  3797  0188  3187               	movlp	high S3460
  3798  0189  3504               	lslf	4,w
  3799  018A  3E6D               	addlw	low S3460
  3800  018B  0082               	movwf	2
  3801  018C                     l538:	
  3802  018C  0008               	return
  3803  018D                     l2818:	
  3804                           
  3805                           ;client.c: 39: packet->packet.size = 5;
  3806  018D  0A28               	incf	handleFwCmd@packet,w
  3807  018E  0086               	movwf	6
  3808  018F  3005               	movlw	5
  3809  0190  0187               	clrf	7
  3810  0191  0081               	movwf	1
  3811                           
  3812                           ;client.c: 40: packet->packet.data[1] = 0;
  3813  0192  0828               	movf	handleFwCmd@packet,w
  3814  0193  3E07               	addlw	7
  3815  0194  0086               	movwf	6
  3816  0195  0181               	clrf	1
  3817                           
  3818                           ;client.c: 41: packet->packet.data[2] = 1;
  3819  0196  0828               	movf	handleFwCmd@packet,w
  3820  0197  3E08               	addlw	8
  3821  0198  0086               	movwf	6
  3822  0199  0181               	clrf	1
  3823  019A  0A81               	incf	1,f
  3824                           
  3825                           ;client.c: 43: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  3826  019B  01A4               	clrf	eepromRxBytes@address
  3827  019C  01A5               	clrf	eepromRxBytes@address+1
  3828  019D  0828               	movf	handleFwCmd@packet,w
  3829  019E  3E09               	addlw	9
  3830  019F  00A6               	movwf	eepromRxBytes@data
  3831  01A0  3002               	movlw	2
  3832  01A1  00A7               	movwf	eepromRxBytes@size
  3833  01A2  2C13               	ljmp	l2560
  3834  01A3                     l2826:	
  3835                           ;client.c: 45: break;
  3836                           
  3837                           
  3838                           ;client.c: 48: packet->packet.size = 2;
  3839  01A3  0A28               	incf	handleFwCmd@packet,w
  3840  01A4  0086               	movwf	6
  3841  01A5  3002               	movlw	2
  3842  01A6  0187               	clrf	7
  3843  01A7  0081               	movwf	1
  3844                           
  3845                           ;client.c: 49: eepromRxBytes(0x2, &(packet->packet.data[1]), 1);
  3846  01A8  00A4               	movwf	eepromRxBytes@address
  3847  01A9  01A5               	clrf	eepromRxBytes@address+1
  3848  01AA  0828               	movf	handleFwCmd@packet,w
  3849  01AB  3E07               	addlw	7
  3850  01AC  00A6               	movwf	eepromRxBytes@data
  3851  01AD  01A7               	clrf	eepromRxBytes@size
  3852  01AE  0AA7               	incf	eepromRxBytes@size,f
  3853  01AF  2C13               	ljmp	l2560
  3854  01B0                     __end_of_handleFwCmd:	
  3855  01B0                     __ptext44:	
  3856 ;; *************** function _handleFwRead *****************
  3857 ;; Defined at:
  3858 ;;		line 105 in file "../../../src/rfstack/client.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3861 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  3864 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3865 ;;  address         2    0        unsigned int 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;		None               void
  3868 ;; Registers used:
  3869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 1F/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3875 ;;      Params:         0       0       0       0
  3876 ;;      Locals:         0       3       0       0
  3877 ;;      Temps:          0       0       0       0
  3878 ;;      Totals:         0       3       0       0
  3879 ;;Total ram usage:        3 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    8
  3882 ;; This function calls:
  3883 ;;		_eepromRxBytes
  3884 ;; This function is called by:
  3885 ;;		_HandlePacket
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           
  3890                           ;psect for function _handleFwRead
  3891  01B0                     _handleFwRead:	
  3892                           
  3893                           ;incstack = 0
  3894                           ; Regs used in _handleFwRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3895                           ;handleFwRead@packet stored from wreg
  3896  01B0  00AA               	movwf	handleFwRead@packet
  3897                           
  3898                           ;client.c: 107: packet->packet.size = 16;
  3899  01B1  0A2A               	incf	handleFwRead@packet,w
  3900  01B2  0086               	movwf	6
  3901  01B3  3010               	movlw	16
  3902  01B4  0187               	clrf	7
  3903  01B5  0081               	movwf	1
  3904                           
  3905                           ;client.c: 115: eepromRxBytes(address, packet->packet.data+8, 8);
  3906  01B6  01A4               	clrf	eepromRxBytes@address
  3907  01B7  01A5               	clrf	eepromRxBytes@address+1
  3908  01B8  082A               	movf	handleFwRead@packet,w
  3909  01B9  2729  3180         	fcall	PL26	;call to abstracted procedure
  3910  01BB  2C13               	ljmp	l2560
  3911  01BC                     __end_of_handleFwRead:	
  3912  01BC                     __ptext42:	
  3913 ;; *************** function _handleFwWrite *****************
  3914 ;; Defined at:
  3915 ;;		line 77 in file "../../../src/rfstack/client.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  3918 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  packet          1   17[BANK0 ] PTR struct rfTrcvPacket_
  3921 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  3922 ;;  i               1   14[BANK0 ] unsigned char 
  3923 ;;  address         2   15[BANK0 ] unsigned int 
  3924 ;;  packetData      1   13[BANK0 ] PTR unsigned int 
  3925 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), NULL(0), 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;		None               void
  3928 ;; Registers used:
  3929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 1F/0
  3932 ;;		On exit  : 1F/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3935 ;;      Params:         0       0       0       0
  3936 ;;      Locals:         0       5       0       0
  3937 ;;      Temps:          0       5       0       0
  3938 ;;      Totals:         0      10       0       0
  3939 ;;Total ram usage:       10 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    8
  3942 ;; This function calls:
  3943 ;;		_eepromRxBytes
  3944 ;;		_eepromTxBytes
  3945 ;; This function is called by:
  3946 ;;		_HandlePacket
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _handleFwWrite
  3952  01BC                     _handleFwWrite:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _handleFwWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3956                           ;handleFwWrite@packet stored from wreg
  3957  01BC  00B1               	movwf	handleFwWrite@packet
  3958                           
  3959                           ;client.c: 80: UI16_t* packetData = (UI16_t*) &(packet->packet.data[8]);
  3960  01BD  3E0E               	addlw	14
  3961  01BE  00AD               	movwf	handleFwWrite@packetData
  3962                           
  3963                           ;client.c: 83: eepromTxBytes(address, packet->packet.data+8, 8);
  3964  01BF  01A4               	clrf	eepromTxBytes@address
  3965  01C0  01A5               	clrf	eepromTxBytes@address+1
  3966  01C1  0831               	movf	handleFwWrite@packet,w
  3967  01C2  3E0E               	addlw	14
  3968  01C3  00A6               	movwf	eepromTxBytes@data
  3969  01C4  3008               	movlw	8
  3970  01C5  00A7               	movwf	eepromTxBytes@size
  3971  01C6  23DE  3180         	fcall	_eepromTxBytes
  3972                           
  3973                           ;client.c: 86: _delay((unsigned long)((5)*(16000000/4000.0)));
  3974  01C8  301A               	movlw	26
  3975  01C9  0020               	movlb	0	; select bank0
  3976  01CA  00A9               	movwf	??_handleFwWrite+1
  3977  01CB  30F8               	movlw	248
  3978  01CC  00A8               	movwf	??_handleFwWrite
  3979  01CD                     u2407:	
  3980  01CD  0BA8               	decfsz	??_handleFwWrite,f
  3981  01CE  29CD               	goto	u2407
  3982  01CF  0BA9               	decfsz	??_handleFwWrite+1,f
  3983  01D0  29CD               	goto	u2407
  3984  01D1  0000               	nop
  3985                           
  3986                           ;client.c: 88: eepromRxBytes(address, packet->packet.data+8, 8);
  3987  01D2  0020               	movlb	0	; select bank0
  3988  01D3  01A4               	clrf	eepromRxBytes@address
  3989  01D4  01A5               	clrf	eepromRxBytes@address+1
  3990  01D5  0831               	movf	handleFwWrite@packet,w
  3991  01D6  2729  3180         	fcall	PL26	;call to abstracted procedure
  3992  01D8  2413  3180         	fcall	_eepromRxBytes
  3993                           
  3994                           ;client.c: 91: address = 0xCAFE;
  3995  01DA  30FE               	movlw	254
  3996  01DB  0020               	movlb	0	; select bank0
  3997  01DC  00AF               	movwf	handleFwWrite@address
  3998  01DD  30CA               	movlw	202
  3999  01DE  00B0               	movwf	handleFwWrite@address+1
  4000                           
  4001                           ;client.c: 93: for (uint8_t i = 0; i < 4; i++)
  4002  01DF  01AE               	clrf	handleFwWrite@i
  4003  01E0                     l2858:	
  4004                           
  4005                           ;client.c: 94: {
  4006                           ;client.c: 95: address = address ^ (packetData[i] ^ 0x5AA5);
  4007  01E0  352E               	lslf	handleFwWrite@i,w
  4008  01E1  072D               	addwf	handleFwWrite@packetData,w
  4009  01E2  00A8               	movwf	??_handleFwWrite
  4010  01E3  0086               	movwf	6
  4011  01E4  0187               	clrf	7
  4012  01E5  3F40               	moviw [0]fsr1
  4013  01E6  00A9               	movwf	??_handleFwWrite+1
  4014  01E7  3F41               	moviw [1]fsr1
  4015  01E8  00AA               	movwf	??_handleFwWrite+2
  4016  01E9  082F               	movf	handleFwWrite@address,w
  4017  01EA  0629               	xorwf	??_handleFwWrite+1,w
  4018  01EB  00AB               	movwf	??_handleFwWrite+3
  4019  01EC  0830               	movf	handleFwWrite@address+1,w
  4020  01ED  062A               	xorwf	??_handleFwWrite+2,w
  4021  01EE  00AC               	movwf	??_handleFwWrite+4
  4022  01EF  30A5               	movlw	165
  4023  01F0  062B               	xorwf	??_handleFwWrite+3,w
  4024  01F1  00AF               	movwf	handleFwWrite@address
  4025  01F2  305A               	movlw	90
  4026  01F3  062C               	xorwf	??_handleFwWrite+4,w
  4027  01F4  00B0               	movwf	handleFwWrite@address+1
  4028  01F5  3004               	movlw	4
  4029  01F6  0AAE               	incf	handleFwWrite@i,f
  4030  01F7  022E               	subwf	handleFwWrite@i,w
  4031  01F8  1C03               	skipc
  4032  01F9  29E0               	goto	l2858
  4033                           
  4034                           ;client.c: 96: }
  4035                           ;client.c: 98: packet->packet.data[8] = address >> 8;
  4036  01FA  0831               	movf	handleFwWrite@packet,w
  4037  01FB  3E0E               	addlw	14
  4038  01FC  0086               	movwf	6
  4039  01FD  0830               	movf	handleFwWrite@address+1,w
  4040  01FE  0081               	movwf	1
  4041                           
  4042                           ;client.c: 99: packet->packet.data[9] = address & 0xFF;
  4043  01FF  0831               	movf	handleFwWrite@packet,w
  4044  0200  3E0F               	addlw	15
  4045  0201  0086               	movwf	6
  4046  0202  082F               	movf	handleFwWrite@address,w
  4047  0203  0081               	movwf	1
  4048                           
  4049                           ;client.c: 101: packet->packet.size = 10;
  4050  0204  0A31               	incf	handleFwWrite@packet,w
  4051  0205  0086               	movwf	6
  4052  0206  300A               	movlw	10
  4053  0207  0081               	movwf	1
  4054  0208  0008               	return
  4055  0209                     __end_of_handleFwWrite:	
  4056  0209                     __ptext49:	
  4057 ;; *************** function _Mrf49xaTxPacket *****************
  4058 ;; Defined at:
  4059 ;;		line 27 in file "../../../src/devices/mrf49xa_packet.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4062 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4063 ;;  response        1    0[BANK0 ] unsigned char 
  4064 ;;  needAck         1    1[BANK0 ] unsigned char 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  packet          1    5[BANK0 ] PTR struct rfTrcvPacket_
  4067 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4068 ;;  i               1    4[BANK0 ] unsigned char 
  4069 ;;  crc             1    3[BANK0 ] unsigned char 
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      unsigned char 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  4074 ;; Tracked objects:
  4075 ;;		On entry : 1F/0
  4076 ;;		On exit  : 1F/1
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4079 ;;      Params:         0       2       0       0
  4080 ;;      Locals:         0       3       0       0
  4081 ;;      Temps:          0       1       0       0
  4082 ;;      Totals:         0       6       0       0
  4083 ;;Total ram usage:        6 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_Mrf49xaTxAck
  4090 ;;		_RfSendPowerState
  4091 ;;		_HandlePacket
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           
  4096                           ;psect for function _Mrf49xaTxPacket
  4097  0209                     _Mrf49xaTxPacket:	
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  4101                           ;Mrf49xaTxPacket@packet stored from wreg
  4102  0209  00A5               	movwf	Mrf49xaTxPacket@packet
  4103  020A  3033               	movlw	51
  4104                           
  4105                           ;mrf49xa_packet.c: 29: uint8_t i, crc = 0;
  4106  020B  01A3               	clrf	Mrf49xaTxPacket@crc
  4107                           
  4108                           ;mrf49xa_packet.c: 31: if (&(rfTrcvStatus.txPacket) == packet)
  4109  020C  3EA0               	addlw	_rfTrcvStatus& (0+255)
  4110  020D  0625               	xorwf	Mrf49xaTxPacket@packet,w
  4111  020E  1D03               	skipz
  4112  020F  2A19               	goto	l2514
  4113                           
  4114                           ;mrf49xa_packet.c: 32: {
  4115                           ;mrf49xa_packet.c: 33: if (response)
  4116  0210  0820               	movf	Mrf49xaTxPacket@response,w
  4117  0211  1903               	btfsc	3,2
  4118  0212  2A16               	goto	l2498
  4119                           
  4120                           ;mrf49xa_packet.c: 34: {
  4121                           ;mrf49xa_packet.c: 35: packet->packet.dst = packet->packet.src;
  4122  0213  0825               	movf	Mrf49xaTxPacket@packet,w
  4123  0214  2708  3180         	fcall	PL14	;call to abstracted procedure
  4124  0216                     l2498:	
  4125                           
  4126                           ;mrf49xa_packet.c: 36: }
  4127                           ;mrf49xa_packet.c: 37: packet->packet.src = rfTrcvStatus.src;
  4128                           
  4129                           ;mrf49xa_packet.c: 38: packet->packet.size += 5;
  4130                           
  4131                           ;mrf49xa_packet.c: 40: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4132                           
  4133                           ;mrf49xa_packet.c: 41: rfTrcvStatus.txPacket.retry = 0;
  4134                           
  4135                           ;mrf49xa_packet.c: 42: rfTrcvStatus.txPacket.retransmit = 0;
  4136                           
  4137                           ;mrf49xa_packet.c: 43: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4138  0216  26D2               	fcall	PL8	;call to abstracted procedure
  4139                           
  4140                           ;mrf49xa_packet.c: 44: rfTrcvStatus.txPacket.crc = 0;
  4141  0217  01E9               	clrf	(_rfTrcvStatus^(0+128)+73)
  4142  0218  0008               	return
  4143  0219                     l2514:	
  4144                           
  4145                           ;mrf49xa_packet.c: 46: }
  4146                           ;mrf49xa_packet.c: 49: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4147  0219  0021               	movlb	1	; select bank1
  4148  021A  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4149  021B  1D03               	skipz
  4150  021C  0008               	return
  4151                           
  4152                           ;mrf49xa_packet.c: 54: else
  4153                           ;mrf49xa_packet.c: 55: {
  4154                           ;mrf49xa_packet.c: 56: if (response)
  4155  021D  0020               	movlb	0	; select bank0
  4156  021E  0820               	movf	Mrf49xaTxPacket@response,w
  4157  021F  1903               	btfsc	3,2
  4158  0220  2A24               	goto	l2524
  4159                           
  4160                           ;mrf49xa_packet.c: 57: {
  4161                           ;mrf49xa_packet.c: 58: packet->packet.dst = packet->packet.src;
  4162  0221  0825               	movf	Mrf49xaTxPacket@packet,w
  4163  0222  2708  3180         	fcall	PL14	;call to abstracted procedure
  4164  0224                     l2524:	
  4165                           
  4166                           ;mrf49xa_packet.c: 59: }
  4167                           ;mrf49xa_packet.c: 60: packet->packet.src = rfTrcvStatus.src;
  4168                           
  4169                           ;mrf49xa_packet.c: 61: packet->packet.size += 5;
  4170                           
  4171                           ;mrf49xa_packet.c: 63: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4172                           
  4173                           ;mrf49xa_packet.c: 64: rfTrcvStatus.txPacket.retry = 0;
  4174                           
  4175                           ;mrf49xa_packet.c: 65: rfTrcvStatus.txPacket.retransmit = 0;
  4176                           
  4177                           ;mrf49xa_packet.c: 66: rfTrcvStatus.txPacket.needAck = (needAck == 1) ? NEED_ACK : NO_AC
      +                          K;
  4178  0224  26D2  3180         	fcall	PL8	;call to abstracted procedure
  4179                           
  4180                           ;mrf49xa_packet.c: 68: packet->state = PKT_FREE;
  4181  0226  0020               	movlb	0	; select bank0
  4182  0227  0825               	movf	Mrf49xaTxPacket@packet,w
  4183  0228  0086               	movwf	6
  4184  0229  0181               	clrf	1
  4185                           
  4186                           ;mrf49xa_packet.c: 71: for (i = 0; i < (16 + 5); i++)
  4187  022A  01A4               	clrf	Mrf49xaTxPacket@i
  4188  022B                     l2544:	
  4189                           
  4190                           ;mrf49xa_packet.c: 72: {
  4191                           ;mrf49xa_packet.c: 73: rfTrcvStatus.txPacket.raw[i] = packet->raw[i];
  4192  022B  0824               	movf	Mrf49xaTxPacket@i,w
  4193  022C  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  4194  022D  0086               	movwf	6
  4195  022E  0187               	clrf	7
  4196  022F  0824               	movf	Mrf49xaTxPacket@i,w
  4197  0230  0725               	addwf	Mrf49xaTxPacket@packet,w
  4198  0231  00A2               	movwf	??_Mrf49xaTxPacket
  4199  0232  0A22               	incf	??_Mrf49xaTxPacket,w
  4200  0233  0084               	movwf	4
  4201  0234  0185               	clrf	5
  4202  0235  0800               	movf	0,w
  4203  0236  0081               	movwf	1
  4204  0237  3015               	movlw	21
  4205  0238  0AA4               	incf	Mrf49xaTxPacket@i,f
  4206  0239  0224               	subwf	Mrf49xaTxPacket@i,w
  4207  023A  1C03               	skipc
  4208  023B  2A2B               	goto	l2544
  4209                           
  4210                           ;mrf49xa_packet.c: 74: }
  4211                           ;mrf49xa_packet.c: 75: for (i = 0; i < packet->packet.size; i++)
  4212  023C  01A4               	clrf	Mrf49xaTxPacket@i
  4213  023D                     l379:	
  4214  023D  0A25               	incf	Mrf49xaTxPacket@packet,w
  4215  023E  0086               	movwf	6
  4216  023F  0187               	clrf	7
  4217  0240  0801               	movf	1,w
  4218  0241  0224               	subwf	Mrf49xaTxPacket@i,w
  4219  0242  1803               	btfsc	3,0
  4220  0243  2A4B               	goto	l2556
  4221                           
  4222                           ;mrf49xa_packet.c: 76: {
  4223                           ;mrf49xa_packet.c: 77: crc = crc ^ rfTrcvStatus.txPacket.raw[i];
  4224  0244  0824               	movf	Mrf49xaTxPacket@i,w
  4225  0245  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  4226  0246  0086               	movwf	6
  4227  0247  0801               	movf	1,w
  4228  0248  06A3               	xorwf	Mrf49xaTxPacket@crc,f
  4229  0249  0AA4               	incf	Mrf49xaTxPacket@i,f
  4230  024A  2A3D               	goto	l379
  4231  024B                     l2556:	
  4232                           
  4233                           ;mrf49xa_packet.c: 78: }
  4234                           ;mrf49xa_packet.c: 80: rfTrcvStatus.txPacket.crc = crc;
  4235  024B  0823               	movf	Mrf49xaTxPacket@crc,w
  4236  024C  0021               	movlb	1	; select bank1
  4237  024D  00E9               	movwf	(_rfTrcvStatus^(0+128)+73)
  4238  024E  0008               	return
  4239  024F                     __end_of_Mrf49xaTxPacket:	
  4240  024F                     __ptext48:	
  4241 ;; *************** function _Mrf49xaTxAck *****************
  4242 ;; Defined at:
  4243 ;;		line 15 in file "../../../src/devices/mrf49xa_packet.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  4246 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  packet          1    6[BANK0 ] PTR struct rfTrcvPacket_
  4249 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 1F/0
  4256 ;;		On exit  : 1F/1
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4259 ;;      Params:         0       0       0       0
  4260 ;;      Locals:         0       1       0       0
  4261 ;;      Temps:          0       0       0       0
  4262 ;;      Totals:         0       1       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    6
  4266 ;; This function calls:
  4267 ;;		_Mrf49xaTxPacket
  4268 ;; This function is called by:
  4269 ;;		_HandlePacket
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _Mrf49xaTxAck
  4275  024F                     _Mrf49xaTxAck:	
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4279                           ;Mrf49xaTxAck@packet stored from wreg
  4280  024F  00A6               	movwf	Mrf49xaTxAck@packet
  4281                           
  4282                           ;mrf49xa_packet.c: 17: packet->packet.data[0] = packet->packet.id;
  4283  0250  3E06               	addlw	6
  4284  0251  0086               	movwf	6
  4285  0252  0187               	clrf	7
  4286  0253  0826               	movf	Mrf49xaTxAck@packet,w
  4287  0254  3E04               	addlw	4
  4288  0255  0084               	movwf	4
  4289  0256  0185               	clrf	5
  4290  0257  0800               	movf	0,w
  4291  0258  0081               	movwf	1
  4292                           
  4293                           ;mrf49xa_packet.c: 18: packet->packet.data[1] = packet->crc;
  4294  0259  0826               	movf	Mrf49xaTxAck@packet,w
  4295  025A  3E07               	addlw	7
  4296  025B  0086               	movwf	6
  4297  025C  0826               	movf	Mrf49xaTxAck@packet,w
  4298  025D  3E16               	addlw	22
  4299  025E  0084               	movwf	4
  4300  025F  0800               	movf	0,w
  4301  0260  0081               	movwf	1
  4302                           
  4303                           ;mrf49xa_packet.c: 21: packet->packet.id = RF_ACK;
  4304  0261  0826               	movf	Mrf49xaTxAck@packet,w
  4305  0262  3E04               	addlw	4
  4306  0263  0086               	movwf	6
  4307  0264  30A1               	movlw	161
  4308  0265  0081               	movwf	1
  4309                           
  4310                           ;mrf49xa_packet.c: 22: packet->packet.size = 2;
  4311  0266  0A26               	incf	Mrf49xaTxAck@packet,w
  4312  0267  0086               	movwf	6
  4313  0268  3002               	movlw	2
  4314  0269  0081               	movwf	1
  4315                           
  4316                           ;mrf49xa_packet.c: 24: Mrf49xaTxPacket(packet, 1, 0);
  4317  026A  01A0               	clrf	Mrf49xaTxPacket@response
  4318  026B  0AA0               	incf	Mrf49xaTxPacket@response,f
  4319  026C  01A1               	clrf	Mrf49xaTxPacket@needAck
  4320  026D  0826               	movf	Mrf49xaTxAck@packet,w
  4321  026E  2A09               	ljmp	_Mrf49xaTxPacket
  4322  026F                     __end_of_Mrf49xaTxAck:	
  4323  026F                     __ptext24:	
  4324 ;; *************** function _SoftI2cInit *****************
  4325 ;; Defined at:
  4326 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 17F/2
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4340 ;;      Params:         0       0       0       0
  4341 ;;      Locals:         0       0       0       0
  4342 ;;      Temps:          0       0       0       0
  4343 ;;      Totals:         0       0       0       0
  4344 ;;Total ram usage:        0 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    7
  4347 ;; This function calls:
  4348 ;;		_SoftI2cStart
  4349 ;;		_SoftI2cStop
  4350 ;;		_SoftI2cTxByte
  4351 ;; This function is called by:
  4352 ;;		_PwrI2cInit
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _SoftI2cInit
  4358  026F                     _SoftI2cInit:	
  4359                           
  4360                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  4364                           
  4365                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  4366                           
  4367                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  4368                           
  4369                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  4370  026F  2718  3180         	fcall	PL20	;call to abstracted procedure
  4371                           
  4372                           ;softI2c.c: 32: SoftI2cStart();
  4373  0271  24A5  3180         	fcall	_SoftI2cStart
  4374                           
  4375                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  4376  0273  3000               	movlw	0
  4377  0274  2437  3180         	fcall	_SoftI2cTxByte
  4378                           
  4379                           ;softI2c.c: 34: SoftI2cStop();
  4380  0276  2CB2               	ljmp	l2376
  4381  0277                     __end_of_SoftI2cInit:	
  4382  0277                     __pmaintext:	
  4383                           ; 0 bytes @ 0x19
  4384 ;;
  4385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4386 ;;
  4387 ;; *************** function _main *****************
  4388 ;; Defined at:
  4389 ;;		line 27 in file "../../../src/node/main.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;		None               void
  4396 ;; Registers used:
  4397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 17F/0
  4400 ;;		On exit  : 1F/1
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4403 ;;      Params:         0       0       0       0
  4404 ;;      Locals:         0       0       0       0
  4405 ;;      Temps:          0       0       0       0
  4406 ;;      Totals:         0       0       0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels required when called:   11
  4409 ;; This function calls:
  4410 ;;		_Mcp9800Read
  4411 ;;		_Mcp9800Start
  4412 ;;		_Mrf49xaNeedsReset
  4413 ;;		_Mrf49xaTick
  4414 ;;		_PwrAdcInit
  4415 ;;		_PwrAdcSleep
  4416 ;;		_PwrI2cInit
  4417 ;;		_PwrI2cSleep
  4418 ;;		_PwrI2cWake
  4419 ;;		_PwrRfInit
  4420 ;;		_PwrRfSleep
  4421 ;;		_PwrRfWake
  4422 ;;		_PwrSensorInit
  4423 ;;		_PwrSensorSleep
  4424 ;;		_PwrSensorWake
  4425 ;;		_RfSendPowerState
  4426 ;;		_Sleepy
  4427 ;; This function is called by:
  4428 ;;		Startup code after reset
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _main
  4434  0277                     _main:	
  4435                           
  4436                           ;main.c: 30: OSCCON = 0b01111000;
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4440  0277  3078               	movlw	120
  4441  0278  0021               	movlb	1	; select bank1
  4442  0279  0099               	movwf	25	;volatile
  4443                           
  4444                           ;main.c: 32: PwrAdcInit();
  4445  027A  25FB  3180         	fcall	_PwrAdcInit
  4446                           
  4447                           ;main.c: 33: PwrSensorInit();
  4448  027C  260E  3180         	fcall	_PwrSensorInit
  4449                           
  4450                           ;main.c: 34: PwrI2cInit();
  4451  027E  2600  3180         	fcall	_PwrI2cInit
  4452                           
  4453                           ;main.c: 35: PwrRfInit();
  4454  0280  2080  3180         	fcall	_PwrRfInit
  4455                           
  4456                           ;main.c: 37: PwrAdcSleep();
  4457  0282  2615  3180         	fcall	_PwrAdcSleep
  4458                           
  4459                           ;main.c: 38: PwrSensorSleep();
  4460  0284  25DA  3180         	fcall	_PwrSensorSleep
  4461                           
  4462                           ;main.c: 39: PwrI2cSleep();
  4463  0286  25D8  3180         	fcall	_PwrI2cSleep
  4464  0288                     l3406:	
  4465                           
  4466                           ;main.c: 40: PwrRfSleep();
  4467  0288  2609  3180         	fcall	_PwrRfSleep
  4468                           
  4469                           ;main.c: 43: {
  4470                           ;main.c: 46: Sleepy(500);
  4471  028A  30F4               	movlw	244
  4472  028B  0020               	movlb	0	; select bank0
  4473  028C  00A0               	movwf	Sleepy@ms
  4474  028D  3001               	movlw	1
  4475  028E  00A1               	movwf	Sleepy@ms+1
  4476  028F  23A2  3180         	fcall	_Sleepy
  4477                           
  4478                           ;main.c: 48: PwrSensorWake();
  4479  0291  2612  3180         	fcall	_PwrSensorWake
  4480                           
  4481                           ;main.c: 49: PwrI2cWake();
  4482  0293  2608  3180         	fcall	_PwrI2cWake
  4483                           
  4484                           ;main.c: 51: Mcp9800Start(Mcp9800_10bit);
  4485  0295  3020               	movlw	32
  4486  0296  23FA  3180         	fcall	_Mcp9800Start
  4487                           
  4488                           ;main.c: 52: Sleepy(100);
  4489  0298  3064               	movlw	100
  4490  0299  0020               	movlb	0	; select bank0
  4491  029A  00A0               	movwf	Sleepy@ms
  4492  029B  01A1               	clrf	Sleepy@ms+1
  4493  029C  23A2  3180         	fcall	_Sleepy
  4494                           
  4495                           ;main.c: 53: Mcp9800Read();
  4496  029E  23BD  3180         	fcall	_Mcp9800Read
  4497                           
  4498                           ;main.c: 55: PwrSensorSleep();
  4499  02A0  25DA  3180         	fcall	_PwrSensorSleep
  4500                           
  4501                           ;main.c: 56: PwrI2cSleep();
  4502  02A2  25D8  3180         	fcall	_PwrI2cSleep
  4503                           
  4504                           ;main.c: 58: PwrRfWake();
  4505  02A4  260C  3180         	fcall	_PwrRfWake
  4506                           
  4507                           ;main.c: 60: if (rfTrcvStatus.txPacket.state != PKT_FREE)
  4508  02A6  0021               	movlb	1	; select bank1
  4509  02A7  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4510  02A8  1903               	btfsc	3,2
  4511  02A9  2AAE               	goto	l3432
  4512                           
  4513                           ;main.c: 61: {
  4514                           ;main.c: 62: Mrf49xaNeedsReset();
  4515  02AA  25DD  3180         	fcall	_Mrf49xaNeedsReset
  4516                           
  4517                           ;main.c: 63: Mrf49xaTick();
  4518  02AC  22B6  3180         	fcall	_Mrf49xaTick
  4519  02AE                     l3432:	
  4520                           
  4521                           ;main.c: 64: }
  4522                           ;main.c: 66: RfSendPowerState();
  4523  02AE  20A1  3180         	fcall	_RfSendPowerState
  4524  02B0                     l3434:	
  4525                           
  4526                           ;main.c: 68: {
  4527                           ;main.c: 69: Mrf49xaTick();
  4528  02B0  22B6  3180         	fcall	_Mrf49xaTick
  4529                           
  4530                           ;main.c: 70: }
  4531                           ;main.c: 71: while (rfTrcvStatus.txPacket.state != PKT_FREE);
  4532  02B2  08D3               	movf	(_rfTrcvStatus^(0+128)+51),f
  4533  02B3  1903               	btfsc	3,2
  4534  02B4  2A88               	goto	l3406
  4535  02B5  2AB0               	goto	l3434
  4536  02B6                     __end_of_main:	
  4537  02B6                     __ptext26:	
  4538 ;; *************** function _Mrf49xaTick *****************
  4539 ;; Defined at:
  4540 ;;		line 124 in file "../../../src/devices/mrf49xa_packet.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;		None
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  timeout         1   23[BANK0 ] unsigned char 
  4545 ;;  packet          1   24[BANK0 ] PTR struct rfTrcvPacket_
  4546 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 1E/1
  4553 ;;		On exit  : 1F/1
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4556 ;;      Params:         0       0       0       0
  4557 ;;      Locals:         0       2       0       0
  4558 ;;      Temps:          0       1       0       0
  4559 ;;      Totals:         0       3       0       0
  4560 ;;Total ram usage:        3 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:   10
  4563 ;; This function calls:
  4564 ;;		_ExtIntInit
  4565 ;;		_HandlePacket
  4566 ;;		_Mrf49RxSts
  4567 ;;		_Mrf49xaFreePacket
  4568 ;;		_Mrf49xaInit
  4569 ;;		_Mrf49xaModeTx
  4570 ;;		_Mrf49xaPacketPending
  4571 ;;		_Mrf49xaRxPacket
  4572 ;;		_Sleepy
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           
  4579                           ;psect for function _Mrf49xaTick
  4580  02B6                     _Mrf49xaTick:	
  4581                           
  4582                           ;mrf49xa_packet.c: 126: if (rfTrcvStatus.needsReset)
  4583                           
  4584                           ;incstack = 0
  4585                           ; Regs used in _Mrf49xaTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4586  02B6  0021               	movlb	1	; select bank1
  4587  02B7  1FED               	btfss	(_rfTrcvStatus^(0+128)+77),7
  4588  02B8  2ABC               	goto	l3126
  4589                           
  4590                           ;mrf49xa_packet.c: 127: {
  4591                           ;mrf49xa_packet.c: 128: Mrf49xaInit();
  4592  02B9  2342  3180         	fcall	_Mrf49xaInit
  4593                           
  4594                           ;mrf49xa_packet.c: 129: ExtIntInit();
  4595  02BB  2E19               	ljmp	l2910
  4596  02BC                     l3126:	
  4597                           
  4598                           ;mrf49xa_packet.c: 131: }
  4599                           ;mrf49xa_packet.c: 133: if (Mrf49xaPacketPending())
  4600  02BC  25E4  3180         	fcall	_Mrf49xaPacketPending
  4601  02BE  3A00               	xorlw	0
  4602  02BF  1903               	skipnz
  4603  02C0  2AE2               	goto	l3140
  4604                           
  4605                           ;mrf49xa_packet.c: 134: {
  4606                           ;mrf49xa_packet.c: 135: rfTrcvPacket_t* packet = Mrf49xaRxPacket();
  4607  02C1  25ED  3180         	fcall	_Mrf49xaRxPacket
  4608  02C3  0020               	movlb	0	; select bank0
  4609  02C4  00B8               	movwf	Mrf49xaTick@packet
  4610                           
  4611                           ;mrf49xa_packet.c: 143: if (packet->packet.dst == 0xFF || packet->packet.dst == rfTrcvSt
      +                          atus.src)
  4612  02C5  3E03               	addlw	3
  4613  02C6  0086               	movwf	6
  4614  02C7  0187               	clrf	7
  4615  02C8  0801               	movf	1,w
  4616  02C9  3AFF               	xorlw	255
  4617  02CA  1903               	skipnz
  4618  02CB  2AD4               	goto	l3134
  4619  02CC  0838               	movf	Mrf49xaTick@packet,w
  4620  02CD  3E03               	addlw	3
  4621  02CE  0086               	movwf	6
  4622  02CF  0801               	movf	1,w
  4623  02D0  0021               	movlb	1	; select bank1
  4624  02D1  066E               	xorwf	(_rfTrcvStatus^(0+128)+78),w
  4625  02D2  1D03               	skipz
  4626  02D3  2ADE               	goto	l3138
  4627  02D4                     l3134:	
  4628                           
  4629                           ;mrf49xa_packet.c: 144: {
  4630                           ;mrf49xa_packet.c: 145: packet->packet.size -= 5;
  4631  02D4  0020               	movlb	0	; select bank0
  4632  02D5  0A38               	incf	Mrf49xaTick@packet,w
  4633  02D6  0086               	movwf	6
  4634  02D7  3005               	movlw	5
  4635  02D8  0187               	clrf	7
  4636  02D9  0281               	subwf	1,f
  4637                           
  4638                           ;mrf49xa_packet.c: 148: HandlePacket(packet);
  4639  02DA  0838               	movf	Mrf49xaTick@packet,w
  4640  02DB  2121  3180         	fcall	_HandlePacket
  4641                           
  4642                           ;mrf49xa_packet.c: 150: }
  4643  02DD  2AE2               	goto	l3140
  4644  02DE                     l3138:	
  4645                           
  4646                           ;mrf49xa_packet.c: 151: else
  4647                           ;mrf49xa_packet.c: 152: {
  4648                           ;mrf49xa_packet.c: 153: Mrf49xaFreePacket(packet);
  4649  02DE  0020               	movlb	0	; select bank0
  4650  02DF  0838               	movf	Mrf49xaTick@packet,w
  4651  02E0  25DF  3180         	fcall	_Mrf49xaFreePacket
  4652  02E2                     l3140:	
  4653                           
  4654                           ;mrf49xa_packet.c: 154: }
  4655                           ;mrf49xa_packet.c: 158: }
  4656                           ;mrf49xa_packet.c: 160: if (rfTrcvStatus.txPacket.state == PKT_WAITING_FOR_ACK)
  4657  02E2  0021               	movlb	1	; select bank1
  4658  02E3  0853               	movf	(_rfTrcvStatus^(0+128)+51),w
  4659  02E4  3A03               	xorlw	3
  4660  02E5  1D03               	skipz
  4661  02E6  2B12               	goto	l3160
  4662                           
  4663                           ;mrf49xa_packet.c: 161: {
  4664                           ;mrf49xa_packet.c: 162: if (rfTrcvStatus.txPacket.needAck == ACK_RECEIVED)
  4665  02E7  086A               	movf	(_rfTrcvStatus^(0+128)+74),w
  4666  02E8  3A02               	xorlw	2
  4667  02E9  1D03               	skipz
  4668  02EA  2AED               	goto	l3146
  4669  02EB                     l3144:	
  4670                           
  4671                           ;mrf49xa_packet.c: 163: {
  4672                           ;mrf49xa_packet.c: 164: rfTrcvStatus.txPacket.state = PKT_FREE;
  4673  02EB  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  4674                           
  4675                           ;mrf49xa_packet.c: 165: }
  4676  02EC  2B12               	goto	l3160
  4677  02ED                     l3146:	
  4678                           
  4679                           ;mrf49xa_packet.c: 166: else if (rfTrcvStatus.txPacket.retry == 10)
  4680  02ED  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4681  02EE  390F               	andlw	15
  4682  02EF  3A0A               	xorlw	10
  4683  02F0  1D03               	skipz
  4684  02F1  2B0A               	goto	l3156
  4685                           
  4686                           ;mrf49xa_packet.c: 167: {
  4687                           ;mrf49xa_packet.c: 168: if (rfTrcvStatus.txPacket.retransmit == 3)
  4688  02F2  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  4689  02F3  3903               	andlw	3
  4690  02F4  3A03               	xorlw	3
  4691  02F5  1903               	btfsc	3,2
  4692  02F6  2AEB               	goto	l3144
  4693                           
  4694                           ;mrf49xa_packet.c: 174: else
  4695                           ;mrf49xa_packet.c: 175: {
  4696                           ;mrf49xa_packet.c: 177: rfTrcvStatus.txPacket.retry = 0;
  4697  02F7  30F0               	movlw	-16
  4698  02F8  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  4699                           
  4700                           ;mrf49xa_packet.c: 178: rfTrcvStatus.txPacket.retransmit++;
  4701  02F9  0E6B               	swapf	(_rfTrcvStatus^(0+128)+75),w
  4702  02FA  3903               	andlw	3
  4703  02FB  0020               	movlb	0	; select bank0
  4704  02FC  00B6               	movwf	??_Mrf49xaTick
  4705  02FD  0AB6               	incf	??_Mrf49xaTick,f
  4706  02FE  0EB6               	swapf	??_Mrf49xaTick,f
  4707  02FF  0021               	movlb	1	; select bank1
  4708  0300  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4709  0301  0020               	movlb	0	; select bank0
  4710  0302  0636               	xorwf	??_Mrf49xaTick,w
  4711  0303  39CF               	andlw	-49
  4712  0304  0636               	xorwf	??_Mrf49xaTick,w
  4713  0305  0021               	movlb	1	; select bank1
  4714  0306  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  4715                           
  4716                           ;mrf49xa_packet.c: 179: rfTrcvStatus.txPacket.state = PKT_READY_FOR_TX;
  4717  0307  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  4718  0308  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  4719  0309  2B12               	goto	l3160
  4720  030A                     l3156:	
  4721                           
  4722                           ;mrf49xa_packet.c: 182: else
  4723                           ;mrf49xa_packet.c: 183: {
  4724                           ;mrf49xa_packet.c: 184: rfTrcvStatus.txPacket.retry++;
  4725  030A  26ED  3180         	fcall	PL10	;call to abstracted procedure
  4726                           
  4727                           ;mrf49xa_packet.c: 185: Sleepy(8);
  4728  030C  3008               	movlw	8
  4729  030D  0020               	movlb	0	; select bank0
  4730  030E  00A0               	movwf	Sleepy@ms
  4731  030F  01A1               	clrf	Sleepy@ms+1
  4732  0310  23A2  3180         	fcall	_Sleepy
  4733  0312                     l3160:	
  4734                           
  4735                           ;mrf49xa_packet.c: 186: }
  4736                           ;mrf49xa_packet.c: 187: }
  4737                           ;mrf49xa_packet.c: 189: if (rfTrcvStatus.txPacket.state == PKT_READY_FOR_TX &&
  4738                           ;mrf49xa_packet.c: 190: rfTrcvStatus.state == RECV_IDLE)
  4739  0312  0021               	movlb	1	; select bank1
  4740  0313  0B53               	decfsz	(_rfTrcvStatus^(0+128)+51),w
  4741  0314  0008               	return
  4742  0315  0B6C               	decfsz	(_rfTrcvStatus^(0+128)+76),w
  4743  0316  0008               	return
  4744                           
  4745                           ;mrf49xa_packet.c: 191: {
  4746                           ;mrf49xa_packet.c: 192: if (rfTrcvStatus.txPacket.retry >= 10)
  4747  0317  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  4748  0318  390F               	andlw	15
  4749  0319  0020               	movlb	0	; select bank0
  4750  031A  00B6               	movwf	??_Mrf49xaTick
  4751  031B  300A               	movlw	10
  4752  031C  0236               	subwf	??_Mrf49xaTick,w
  4753  031D  1C03               	skipc
  4754  031E  2B25               	goto	l3172
  4755                           
  4756                           ;mrf49xa_packet.c: 193: {
  4757                           ;mrf49xa_packet.c: 195: rfTrcvStatus.txPacket.retry = 0;
  4758  031F  30F0               	movlw	-16
  4759  0320  0021               	movlb	1	; select bank1
  4760  0321  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  4761                           
  4762                           ;mrf49xa_packet.c: 196: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  4763  0322  3003               	movlw	3
  4764  0323  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4765  0324  0008               	return
  4766  0325                     l3172:	
  4767                           
  4768                           ;mrf49xa_packet.c: 198: }
  4769                           ;mrf49xa_packet.c: 202: uint8_t timeout = 0;
  4770  0325  01B7               	clrf	Mrf49xaTick@timeout
  4771  0326                     l3174:	
  4772                           
  4773                           ;mrf49xa_packet.c: 206: {
  4774                           ;mrf49xa_packet.c: 207: Mrf49RxSts();
  4775  0326  25CD  3180         	fcall	_Mrf49RxSts
  4776                           
  4777                           ;mrf49xa_packet.c: 209: if (rfTrcvStatus.state == RECV_IDLE && mrf49Status.flags.msb.sig
      +                          nalPresent == 0)
  4778  0328  0021               	movlb	1	; select bank1
  4779  0329  0B6C               	decfsz	(_rfTrcvStatus^(0+128)+76),w
  4780  032A  2B2E               	goto	l3182
  4781  032B  0020               	movlb	0	; select bank0
  4782  032C  1C39               	btfss	_mrf49Status,0
  4783  032D  2B3C               	goto	l415
  4784  032E                     l3182:	
  4785                           
  4786                           ;mrf49xa_packet.c: 213: }
  4787                           ;mrf49xa_packet.c: 215: Sleepy(8);
  4788  032E  3008               	movlw	8
  4789  032F  0020               	movlb	0	; select bank0
  4790  0330  00A0               	movwf	Sleepy@ms
  4791  0331  01A1               	clrf	Sleepy@ms+1
  4792  0332  23A2  3180         	fcall	_Sleepy
  4793  0334  300B               	movlw	11
  4794                           
  4795                           ;mrf49xa_packet.c: 216: timeout++;
  4796  0335  0AB7               	incf	Mrf49xaTick@timeout,f
  4797                           
  4798                           ;mrf49xa_packet.c: 218: if (timeout > 10)
  4799  0336  0237               	subwf	Mrf49xaTick@timeout,w
  4800  0337  1C03               	skipc
  4801  0338  2B26               	goto	l3174
  4802                           
  4803                           ;mrf49xa_packet.c: 219: {
  4804                           ;mrf49xa_packet.c: 220: rfTrcvStatus.txPacket.retry++;
  4805  0339  0021               	movlb	1	; select bank1
  4806  033A  26ED               	fcall	PL10	;call to abstracted procedure
  4807  033B  0008               	return
  4808  033C                     l415:	
  4809                           
  4810                           ;mrf49xa_packet.c: 234: INTCONbits.INTE = 0;;
  4811  033C  120B               	bcf	11,4	;volatile
  4812                           
  4813                           ;mrf49xa_packet.c: 235: Mrf49xaModeTx();
  4814  033D  2052               	fcall	_Mrf49xaModeTx
  4815                           
  4816                           ;mrf49xa_packet.c: 236: rfTrcvStatus.txPacket.state = PKT_HW_BUSY_TX;
  4817  033E  3002               	movlw	2
  4818  033F  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  4819                           
  4820                           ;mrf49xa_packet.c: 237: INTCONbits.INTE = 1;;
  4821  0340  160B               	bsf	11,4	;volatile
  4822  0341  0008               	return
  4823  0342                     __end_of_Mrf49xaTick:	
  4824  0342                     __ptext30:	
  4825 ;; *************** function _Mrf49xaInit *****************
  4826 ;; Defined at:
  4827 ;;		line 150 in file "../../../src/devices/mrf49xa.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  k               1    6[BANK0 ] unsigned char 
  4832 ;;  j               1    0        unsigned char 
  4833 ;;  i               1    0        unsigned char 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;		None               void
  4836 ;; Registers used:
  4837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 1E/0
  4840 ;;		On exit  : 1F/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4843 ;;      Params:         0       0       0       0
  4844 ;;      Locals:         0       1       0       0
  4845 ;;      Temps:          0       0       0       0
  4846 ;;      Totals:         0       1       0       0
  4847 ;;Total ram usage:        1 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    9
  4850 ;; This function calls:
  4851 ;;		_Mrf49TxCmd
  4852 ;;		_Mrf49xaModeRx
  4853 ;;		_Mrf49xaServe
  4854 ;;		_Sleepy
  4855 ;; This function is called by:
  4856 ;;		_Mrf49xaTick
  4857 ;;		_PwrRfInit
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           
  4862                           ;psect for function _Mrf49xaInit
  4863  0342                     _Mrf49xaInit:	
  4864  0342                     l234:	
  4865                           ;incstack = 0
  4866                           ; Regs used in _Mrf49xaInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4867                           ;mrf49xa.c: 152: UI08_t k;
  4868                           ;mrf49xa.c: 154: UI08_t i, j;
  4869                           ;mrf49xa.c: 156: reset:
  4870                           
  4871                           
  4872                           ;mrf49xa.c: 158: for (k = 0; k < sizeof(rfTrcvStatus_t); k++)
  4873  0342  0020               	movlb	0	; select bank0
  4874  0343  01A6               	clrf	Mrf49xaInit@k
  4875  0344                     l2938:	
  4876                           
  4877                           ;mrf49xa.c: 159: {
  4878                           ;mrf49xa.c: 160: ((uint8_t*)&rfTrcvStatus)[k] = 0;
  4879  0344  0826               	movf	Mrf49xaInit@k,w
  4880  0345  3EA0               	addlw	_rfTrcvStatus& (0+255)
  4881  0346  0086               	movwf	6
  4882  0347  304F               	movlw	79
  4883  0348  0187               	clrf	7
  4884  0349  0181               	clrf	1
  4885  034A  0AA6               	incf	Mrf49xaInit@k,f
  4886  034B  0226               	subwf	Mrf49xaInit@k,w
  4887  034C  1C03               	skipc
  4888  034D  2B44               	goto	l2938
  4889                           
  4890                           ;mrf49xa.c: 161: }
  4891                           ;mrf49xa.c: 164: PORTCbits.RC6 = 1;
  4892  034E  170E               	bsf	14,6	;volatile
  4893                           
  4894                           ;mrf49xa.c: 165: LATCbits.LATC7 = 0;
  4895  034F  0022               	movlb	2	; select bank2
  4896  0350  138E               	bcf	14,7	;volatile
  4897                           
  4898                           ;mrf49xa.c: 166: PORTBbits.RB7 = 0;
  4899  0351  0020               	movlb	0	; select bank0
  4900  0352  138D               	bcf	13,7	;volatile
  4901                           
  4902                           ;mrf49xa.c: 168: LATCbits.LATC1 = 0;
  4903  0353  0022               	movlb	2	; select bank2
  4904  0354  108E               	bcf	14,1	;volatile
  4905                           
  4906                           ;mrf49xa.c: 169: LATCbits.LATC4 = 1;
  4907  0355  160E               	bsf	14,4	;volatile
  4908                           
  4909                           ;mrf49xa.c: 171: LATAbits.LATA5 = 1;
  4910  0356  168C               	bsf	12,5	;volatile
  4911                           
  4912                           ;mrf49xa.c: 173: Sleepy(64);
  4913  0357  2724  3180         	fcall	PL24	;call to abstracted procedure
  4914  0359  23A2  3180         	fcall	_Sleepy
  4915                           
  4916                           ;mrf49xa.c: 174: LATAbits.LATA4 = 0;
  4917  035B  0022               	movlb	2	; select bank2
  4918  035C  120C               	bcf	12,4	;volatile
  4919                           
  4920                           ;mrf49xa.c: 175: Sleepy(64);
  4921  035D  2724  3180         	fcall	PL24	;call to abstracted procedure
  4922  035F  23A2  3180         	fcall	_Sleepy
  4923                           
  4924                           ;mrf49xa.c: 176: LATAbits.LATA4 = 1;
  4925  0361  0022               	movlb	2	; select bank2
  4926  0362  160C               	bsf	12,4	;volatile
  4927                           
  4928                           ;mrf49xa.c: 177: Sleepy(64);
  4929  0363  2724  3180         	fcall	PL24	;call to abstracted procedure
  4930  0365  23A2               	fcall	_Sleepy
  4931                           
  4932                           ;mrf49xa.c: 179: rfTrcvStatus.state = RECV_IDLE;
  4933  0366  0021               	movlb	1	; select bank1
  4934  0367  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  4935  0368  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  4936                           
  4937                           ;mrf49xa.c: 181: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(8); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  4938  0369  0020               	movlb	0	; select bank0
  4939  036A  302F               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  4940  036B  01A6               	clrf	Mrf49xaInit@k
  4941  036C  3187               	movlp	high __stringtab
  4942  036D  000A               	callw
  4943  036E  3180               	pagesel	$	;select current page
  4944  036F  3800               	iorlw	0
  4945  0370  1903               	btfsc	3,2
  4946  0371  2B94               	goto	l2968
  4947  0372                     l2958:	
  4948  0372  3526               	lslf	Mrf49xaInit@k,w
  4949  0373  3E33               	addlw	low (_mrfRegset_Init| (0+32768))
  4950  0374  3187               	movlp	high __stringtab
  4951  0375  000A               	callw
  4952  0376  3180               	pagesel	$	;select current page
  4953  0377  3A55               	xorlw	85
  4954  0378  1D03               	skipz
  4955  0379  2B80               	goto	l2962
  4956  037A  3008               	movlw	8
  4957  037B  00A0               	movwf	Sleepy@ms
  4958  037C  01A1               	clrf	Sleepy@ms+1
  4959  037D  23A2  3180         	fcall	_Sleepy
  4960  037F  2B8C               	goto	l2964
  4961  0380                     l2962:	
  4962  0380  3526               	lslf	Mrf49xaInit@k,w
  4963  0381  3E34               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  4964  0382  3187               	movlp	high __stringtab
  4965  0383  000A               	callw
  4966  0384  3180               	pagesel	$	;select current page
  4967  0385  00A1               	movwf	Mrf49TxCmd@val
  4968  0386  3526               	lslf	Mrf49xaInit@k,w
  4969  0387  3E33               	addlw	low (_mrfRegset_Init| (0+32768))
  4970  0388  3187               	movlp	high __stringtab
  4971  0389  000A               	callw
  4972  038A  3180               	pagesel	$	;select current page
  4973  038B  25C4               	fcall	_Mrf49TxCmd
  4974  038C                     l2964:	
  4975  038C  302F               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  4976  038D  0AA6               	incf	Mrf49xaInit@k,f
  4977  038E  3187               	movlp	high __stringtab
  4978  038F  000A               	callw
  4979  0390  3180               	pagesel	$	;select current page
  4980  0391  0226               	subwf	Mrf49xaInit@k,w
  4981  0392  1C03               	skipc
  4982  0393  2B72               	goto	l2958
  4983  0394                     l2968:	
  4984                           
  4985                           ;mrf49xa.c: 184: Mrf49xaModeRx();
  4986  0394  259F  3180         	fcall	_Mrf49xaModeRx
  4987                           
  4988                           ;mrf49xa.c: 186: k = 0;
  4989  0396  01A6               	clrf	Mrf49xaInit@k
  4990  0397                     l2980:	
  4991                           ;mrf49xa.c: 187: while(PORTAbits.RA2 == 0)
  4992                           
  4993  0397  0020               	movlb	0	; select bank0
  4994  0398  190C               	btfsc	12,2	;volatile
  4995  0399  0008               	return
  4996                           
  4997                           ;mrf49xa.c: 188: {
  4998                           ;mrf49xa.c: 189: k++;
  4999  039A  0AA6               	incf	Mrf49xaInit@k,f
  5000                           
  5001                           ;mrf49xa.c: 190: if (k == 255)
  5002  039B  0826               	movf	Mrf49xaInit@k,w
  5003  039C  3AFF               	xorlw	255
  5004  039D  1903               	btfsc	3,2
  5005  039E  2B42               	goto	l234
  5006                           
  5007                           ;mrf49xa.c: 195: }
  5008                           ;mrf49xa.c: 200: Mrf49xaServe();
  5009                           
  5010                           ;mrf49xa.c: 194: goto reset;
  5011  039F  24C1  3180         	fcall	_Mrf49xaServe
  5012  03A1  2B97               	goto	l2980
  5013  03A2                     __end_of_Mrf49xaInit:	
  5014  03A2                     __ptext31:	
  5015 ;; *************** function _Sleepy *****************
  5016 ;; Defined at:
  5017 ;;		line 41 in file "../../../src/node/power.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  ms              2    0[BANK0 ] unsigned int 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  b               1    3[BANK0 ] unsigned char 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;		None               void
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, status,0
  5026 ;; Tracked objects:
  5027 ;;		On entry : 1F/0
  5028 ;;		On exit  : 1F/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5031 ;;      Params:         0       2       0       0
  5032 ;;      Locals:         0       1       0       0
  5033 ;;      Temps:          0       1       0       0
  5034 ;;      Totals:         0       4       0       0
  5035 ;;Total ram usage:        4 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    5
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_Mrf49xaInit
  5042 ;;		_Mrf49xaTick
  5043 ;;		_main
  5044 ;;		_PwrRfInit
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _Sleepy
  5050  03A2                     _Sleepy:	
  5051                           
  5052                           ;power.c: 43: uint8_t b = 0;
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  5056  03A2  01A3               	clrf	Sleepy@b
  5057  03A3                     l2788:	
  5058                           ;power.c: 45: while (ms != 0)
  5059                           
  5060  03A3  0821               	movf	Sleepy@ms+1,w
  5061  03A4  0420               	iorwf	Sleepy@ms,w
  5062  03A5  1903               	btfsc	3,2
  5063  03A6  0008               	return
  5064                           
  5065                           ;power.c: 46: {
  5066                           ;power.c: 47: if ((ms & 1) != 0)
  5067  03A7  1C20               	btfss	Sleepy@ms,0
  5068  03A8  2BB8               	goto	l2784
  5069                           
  5070                           ;power.c: 48: {
  5071                           ;power.c: 49: WDTCONbits.WDTPS = b;
  5072  03A9  0823               	movf	Sleepy@b,w
  5073  03AA  00A2               	movwf	??_Sleepy
  5074  03AB  0DA2               	rlf	??_Sleepy,f
  5075  03AC  0021               	movlb	1	; select bank1
  5076  03AD  0817               	movf	23,w	;volatile
  5077  03AE  0020               	movlb	0	; select bank0
  5078  03AF  0622               	xorwf	??_Sleepy,w
  5079  03B0  39C1               	andlw	-63
  5080  03B1  0622               	xorwf	??_Sleepy,w
  5081  03B2  0021               	movlb	1	; select bank1
  5082  03B3  0097               	movwf	23	;volatile
  5083                           
  5084                           ;power.c: 50: WDTCONbits.SWDTEN = 1;
  5085  03B4  1417               	bsf	23,0	;volatile
  5086  03B5  0063               	sleep	;# 
  5087                           
  5088                           ;power.c: 54: WDTCONbits.SWDTEN = 0;
  5089  03B6  0021               	movlb	1	; select bank1
  5090  03B7  1017               	bcf	23,0	;volatile
  5091  03B8                     l2784:	
  5092                           
  5093                           ;power.c: 55: }
  5094                           ;power.c: 56: ms = ms >> 1;
  5095  03B8  0020               	movlb	0	; select bank0
  5096  03B9  36A1               	lsrf	Sleepy@ms+1,f
  5097  03BA  0CA0               	rrf	Sleepy@ms,f
  5098                           
  5099                           ;power.c: 57: b++;
  5100  03BB  0AA3               	incf	Sleepy@b,f
  5101  03BC  2BA3               	goto	l2788
  5102  03BD                     __end_of_Sleepy:	
  5103  03BD                     __ptext54:	
  5104 ;; *************** function _Mcp9800Read *****************
  5105 ;; Defined at:
  5106 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  tempL           1    0        unsigned char 
  5111 ;;  tempH           1    0        unsigned char 
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  2  155[COMMON] unsigned int 
  5114 ;; Registers used:
  5115 ;;		wreg, status,2, status,0, pclath, cstack
  5116 ;; Tracked objects:
  5117 ;;		On entry : 1F/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5121 ;;      Params:         0       0       0       0
  5122 ;;      Locals:         0       2       0       0
  5123 ;;      Temps:          0       0       0       0
  5124 ;;      Totals:         0       2       0       0
  5125 ;;Total ram usage:        2 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:    7
  5128 ;; This function calls:
  5129 ;;		_SoftI2cRxByte
  5130 ;;		_SoftI2cStart
  5131 ;;		_SoftI2cStop
  5132 ;;		_SoftI2cTxByte
  5133 ;; This function is called by:
  5134 ;;		_main
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _Mcp9800Read
  5140  03BD                     _Mcp9800Read:	
  5141                           
  5142                           ;mcp9800.c: 21: SoftI2cStart();
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  5146  03BD  24A5  3180         	fcall	_SoftI2cStart
  5147                           
  5148                           ;mcp9800.c: 25: SoftI2cTxByte(0b10010001);
  5149  03BF  3091               	movlw	145
  5150  03C0  2437  3180         	fcall	_SoftI2cTxByte
  5151  03C2  3001               	movlw	1
  5152  03C3  2465  3180         	fcall	_SoftI2cRxByte
  5153  03C5  3000               	movlw	0
  5154  03C6  2465  3180         	fcall	_SoftI2cRxByte
  5155                           
  5156                           ;mcp9800.c: 28: SoftI2cStop();
  5157  03C8  2CB2               	ljmp	l2376
  5158  03C9                     __end_of_Mcp9800Read:	
  5159  03C9                     __ptext47:	
  5160 ;; *************** function _SoftI2cRepeatedStart *****************
  5161 ;; Defined at:
  5162 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  5163 ;; Parameters:    Size  Location     Type
  5164 ;;		None
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;		None               void
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0, pclath, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5176 ;;      Params:         0       0       0       0
  5177 ;;      Locals:         0       0       0       0
  5178 ;;      Temps:          0       0       0       0
  5179 ;;      Totals:         0       0       0       0
  5180 ;;Total ram usage:        0 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    6
  5183 ;; This function calls:
  5184 ;;		_SoftI2cNop
  5185 ;; This function is called by:
  5186 ;;		_eepromRxBytes
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function _SoftI2cRepeatedStart
  5192  03C9                     _SoftI2cRepeatedStart:	
  5193                           
  5194                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  5195                           
  5196                           ;incstack = 0
  5197                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5198  03C9  0021               	movlb	1	; select bank1
  5199  03CA  120D               	bcf	13,4	;volatile
  5200                           
  5201                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  5202  03CB  0022               	movlb	2	; select bank2
  5203  03CC  130D               	bcf	13,6	;volatile
  5204                           
  5205                           ;softI2c.c: 57: SoftI2cNop();
  5206  03CD  249E  3180         	fcall	_SoftI2cNop
  5207                           
  5208                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  5209  03CF  0022               	movlb	2	; select bank2
  5210  03D0  160D               	bsf	13,4	;volatile
  5211                           
  5212                           ;softI2c.c: 60: SoftI2cNop();
  5213  03D1  249E  3180         	fcall	_SoftI2cNop
  5214                           
  5215                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  5216  03D3  0022               	movlb	2	; select bank2
  5217  03D4  170D               	bsf	13,6	;volatile
  5218                           
  5219                           ;softI2c.c: 63: SoftI2cNop();
  5220  03D5  249E  3180         	fcall	_SoftI2cNop
  5221                           
  5222                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  5223  03D7  0022               	movlb	2	; select bank2
  5224  03D8  120D               	bcf	13,4	;volatile
  5225                           
  5226                           ;softI2c.c: 66: SoftI2cNop();
  5227  03D9  249E  3180         	fcall	_SoftI2cNop
  5228                           
  5229                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  5230  03DB  0022               	movlb	2	; select bank2
  5231  03DC  130D               	bcf	13,6	;volatile
  5232                           
  5233                           ;softI2c.c: 69: SoftI2cNop();
  5234  03DD  2C9E               	ljmp	l2274
  5235  03DE                     __end_of_SoftI2cRepeatedStart:	
  5236  03DE                     __ptext43:	
  5237 ;; *************** function _eepromTxBytes *****************
  5238 ;; Defined at:
  5239 ;;		line 25 in file "../../../src/devices/24aa64.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  address         2    4[BANK0 ] unsigned int 
  5242 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5243 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwWrite@packet..(21), eepromTxByte@byte(1), 
  5244 ;;		 -> NULL(0), 
  5245 ;;  size            1    7[BANK0 ] unsigned char 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;		None               void
  5250 ;; Registers used:
  5251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 1F/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5257 ;;      Params:         0       4       0       0
  5258 ;;      Locals:         0       0       0       0
  5259 ;;      Temps:          0       0       0       0
  5260 ;;      Totals:         0       4       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    7
  5264 ;; This function calls:
  5265 ;;		_SoftI2cStart
  5266 ;;		_SoftI2cStop
  5267 ;;		_SoftI2cTxByte
  5268 ;; This function is called by:
  5269 ;;		_handleFwWrite
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           
  5274                           ;psect for function _eepromTxBytes
  5275  03DE                     _eepromTxBytes:	
  5276                           
  5277                           ;24aa64.c: 28: SoftI2cStart();
  5278                           
  5279                           ;incstack = 0
  5280                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5281  03DE  24A5  3180         	fcall	_SoftI2cStart
  5282                           
  5283                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  5284  03E0  30A0               	movlw	160
  5285  03E1  2437  3180         	fcall	_SoftI2cTxByte
  5286                           
  5287                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  5288  03E3  0020               	movlb	0	; select bank0
  5289  03E4  0825               	movf	eepromTxBytes@address+1,w
  5290  03E5  2437  3180         	fcall	_SoftI2cTxByte
  5291                           
  5292                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  5293  03E7  0020               	movlb	0	; select bank0
  5294  03E8  0824               	movf	eepromTxBytes@address,w
  5295  03E9  2437  3180         	fcall	_SoftI2cTxByte
  5296  03EB                     l2580:	
  5297                           ;24aa64.c: 33: while (size != 0)
  5298                           
  5299  03EB  0020               	movlb	0	; select bank0
  5300  03EC  08A7               	movf	eepromTxBytes@size,f
  5301  03ED  1903               	btfsc	3,2
  5302  03EE  2BF9               	goto	l2582
  5303                           
  5304                           ;24aa64.c: 34: {
  5305                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  5306  03EF  0826               	movf	eepromTxBytes@data,w
  5307  03F0  0086               	movwf	6
  5308  03F1  0187               	clrf	7
  5309  03F2  0801               	movf	1,w
  5310  03F3  2437  3180         	fcall	_SoftI2cTxByte
  5311                           
  5312                           ;24aa64.c: 37: data++;
  5313  03F5  0020               	movlb	0	; select bank0
  5314  03F6  0AA6               	incf	eepromTxBytes@data,f
  5315                           
  5316                           ;24aa64.c: 38: size--;
  5317  03F7  03A7               	decf	eepromTxBytes@size,f
  5318  03F8  2BEB               	goto	l2580
  5319  03F9                     l2582:	
  5320                           
  5321                           ;24aa64.c: 39: }
  5322                           ;24aa64.c: 40: SoftI2cStop();
  5323  03F9  2CB2               	ljmp	l2376
  5324  03FA                     __end_of_eepromTxBytes:	
  5325  03FA                     __ptext53:	
  5326 ;; *************** function _Mcp9800Start *****************
  5327 ;; Defined at:
  5328 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  resolution      1    wreg     enum E4252
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  resolution      1    4[BANK0 ] enum E4252
  5333 ;; Return value:  Size  Location     Type
  5334 ;;		None               void
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0, pclath, cstack
  5337 ;; Tracked objects:
  5338 ;;		On entry : 1F/2
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5342 ;;      Params:         0       0       0       0
  5343 ;;      Locals:         0       1       0       0
  5344 ;;      Temps:          0       0       0       0
  5345 ;;      Totals:         0       1       0       0
  5346 ;;Total ram usage:        1 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    7
  5349 ;; This function calls:
  5350 ;;		_SoftI2cStart
  5351 ;;		_SoftI2cStop
  5352 ;;		_SoftI2cTxByte
  5353 ;; This function is called by:
  5354 ;;		_main
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _Mcp9800Start
  5360  03FA                     _Mcp9800Start:	
  5361                           
  5362                           ;incstack = 0
  5363                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  5364                           ;Mcp9800Start@resolution stored from wreg
  5365  03FA  0020               	movlb	0	; select bank0
  5366  03FB  00A4               	movwf	Mcp9800Start@resolution
  5367                           
  5368                           ;mcp9800.c: 6: SoftI2cStart();
  5369  03FC  24A5  3180         	fcall	_SoftI2cStart
  5370                           
  5371                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  5372  03FE  3090               	movlw	144
  5373  03FF  2437  3180         	fcall	_SoftI2cTxByte
  5374                           
  5375                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  5376  0401  3001               	movlw	1
  5377  0402  2437  3180         	fcall	_SoftI2cTxByte
  5378                           
  5379                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  5380  0404  0020               	movlb	0	; select bank0
  5381  0405  0824               	movf	Mcp9800Start@resolution,w
  5382  0406  2437  3180         	fcall	_SoftI2cTxByte
  5383                           
  5384                           ;mcp9800.c: 10: SoftI2cStop();
  5385  0408  24B2  3180         	fcall	_SoftI2cStop
  5386                           
  5387                           ;mcp9800.c: 12: SoftI2cStart();
  5388  040A  24A5  3180         	fcall	_SoftI2cStart
  5389                           
  5390                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  5391  040C  3090               	movlw	144
  5392  040D  2437  3180         	fcall	_SoftI2cTxByte
  5393                           
  5394                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  5395  040F  3000               	movlw	0
  5396  0410  2437  3180         	fcall	_SoftI2cTxByte
  5397                           
  5398                           ;mcp9800.c: 15: SoftI2cStop();
  5399  0412  2CB2               	ljmp	l2376
  5400  0413                     __end_of_Mcp9800Start:	
  5401  0413                     __ptext46:	
  5402 ;; *************** function _eepromRxBytes *****************
  5403 ;; Defined at:
  5404 ;;		line 4 in file "../../../src/devices/24aa64.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  address         2    4[BANK0 ] unsigned int 
  5407 ;;  data            1    6[BANK0 ] PTR unsigned char 
  5408 ;;		 -> rfTrcvStatus.rxPacket...data(16), rfTrcvStatus...data(16), handleFwRead@packet..(21), handleFwWrite@packet..(21)
      +, 
  5409 ;;		 -> handleFwCmd@packet..(21), eepromRxByte@dat(1), NULL(0), 
  5410 ;;  size            1    7[BANK0 ] unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 1F/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5422 ;;      Params:         0       4       0       0
  5423 ;;      Locals:         0       0       0       0
  5424 ;;      Temps:          0       0       0       0
  5425 ;;      Totals:         0       4       0       0
  5426 ;;Total ram usage:        4 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    7
  5429 ;; This function calls:
  5430 ;;		_SoftI2cRepeatedStart
  5431 ;;		_SoftI2cRxByte
  5432 ;;		_SoftI2cStart
  5433 ;;		_SoftI2cStop
  5434 ;;		_SoftI2cTxByte
  5435 ;; This function is called by:
  5436 ;;		_handleFwCmd
  5437 ;;		_handleFwWrite
  5438 ;;		_handleFwRead
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           
  5443                           ;psect for function _eepromRxBytes
  5444  0413                     _eepromRxBytes:	
  5445  0413                     l2560:	
  5446                           ;incstack = 0
  5447                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5448                           
  5449                           
  5450                           ;24aa64.c: 7: SoftI2cStart();
  5451  0413  24A5  3180         	fcall	_SoftI2cStart
  5452                           
  5453                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  5454  0415  30A0               	movlw	160
  5455  0416  2437  3180         	fcall	_SoftI2cTxByte
  5456                           
  5457                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  5458  0418  0020               	movlb	0	; select bank0
  5459  0419  0825               	movf	eepromRxBytes@address+1,w
  5460  041A  2437  3180         	fcall	_SoftI2cTxByte
  5461                           
  5462                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  5463  041C  0020               	movlb	0	; select bank0
  5464  041D  0824               	movf	eepromRxBytes@address,w
  5465  041E  2437  3180         	fcall	_SoftI2cTxByte
  5466                           
  5467                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  5468  0420  23C9  3180         	fcall	_SoftI2cRepeatedStart
  5469                           
  5470                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  5471  0422  30A1               	movlw	161
  5472  0423  2437  3180         	fcall	_SoftI2cTxByte
  5473  0425                     l2568:	
  5474                           ;24aa64.c: 15: while (size != 0)
  5475                           
  5476  0425  0020               	movlb	0	; select bank0
  5477  0426  08A7               	movf	eepromRxBytes@size,f
  5478  0427  1903               	btfsc	3,2
  5479  0428  2C36               	goto	l2570
  5480                           
  5481                           ;24aa64.c: 16: {
  5482                           ;24aa64.c: 17: size--;
  5483  0429  03A7               	decf	eepromRxBytes@size,f
  5484                           
  5485                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  5486  042A  0826               	movf	eepromRxBytes@data,w
  5487  042B  0086               	movwf	6
  5488  042C  3000               	movlw	0
  5489  042D  0187               	clrf	7
  5490  042E  08A7               	movf	eepromRxBytes@size,f
  5491  042F  1D03               	skipz
  5492  0430  3001               	movlw	1
  5493  0431  2465  3180         	fcall	_SoftI2cRxByte
  5494  0433  0081               	movwf	1
  5495                           
  5496                           ;24aa64.c: 21: data++;
  5497  0434  0AA6               	incf	eepromRxBytes@data,f
  5498  0435  2C25               	goto	l2568
  5499  0436                     l2570:	
  5500                           
  5501                           ;24aa64.c: 22: }
  5502                           ;24aa64.c: 23: SoftI2cStop();
  5503  0436  2CB2               	ljmp	l2376
  5504  0437                     __end_of_eepromRxBytes:	
  5505  0437                     __ptext55:	
  5506 ;; *************** function _SoftI2cTxByte *****************
  5507 ;; Defined at:
  5508 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  data            1    wreg     unsigned char 
  5511 ;; Auto vars:     Size  Location     Type
  5512 ;;  data            1    2[BANK0 ] unsigned char 
  5513 ;;  i               1    3[BANK0 ] unsigned char 
  5514 ;;  ack             1    0        unsigned char 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  1    wreg      unsigned char 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0, pclath, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/1
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5524 ;;      Params:         0       0       0       0
  5525 ;;      Locals:         0       3       0       0
  5526 ;;      Temps:          0       0       0       0
  5527 ;;      Totals:         0       3       0       0
  5528 ;;Total ram usage:        3 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    6
  5531 ;; This function calls:
  5532 ;;		_SoftI2cNop
  5533 ;; This function is called by:
  5534 ;;		_SoftI2cInit
  5535 ;;		_Mcp9800Start
  5536 ;;		_Mcp9800Read
  5537 ;;		_eepromRxBytes
  5538 ;;		_eepromTxBytes
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           
  5543                           ;psect for function _SoftI2cTxByte
  5544  0437                     _SoftI2cTxByte:	
  5545                           
  5546                           ;incstack = 0
  5547                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  5548                           ;SoftI2cTxByte@data stored from wreg
  5549  0437  0020               	movlb	0	; select bank0
  5550  0438  00A2               	movwf	SoftI2cTxByte@data
  5551                           
  5552                           ;softI2c.c: 89: UI08_t i;
  5553                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  5554  0439  3080               	movlw	128
  5555  043A  00A3               	movwf	SoftI2cTxByte@i
  5556  043B                     l32:	
  5557                           
  5558                           ;softI2c.c: 92: {
  5559                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  5560  043B  0022               	movlb	2	; select bank2
  5561  043C  130D               	bcf	13,6	;volatile
  5562                           
  5563                           ;softI2c.c: 94: SoftI2cNop();
  5564  043D  249E  3180         	fcall	_SoftI2cNop
  5565                           
  5566                           ;softI2c.c: 96: if(data & i)
  5567  043F  0020               	movlb	0	; select bank0
  5568  0440  0822               	movf	SoftI2cTxByte@data,w
  5569  0441  0523               	andwf	SoftI2cTxByte@i,w
  5570  0442  1903               	btfsc	3,2
  5571  0443  2C47               	goto	l34
  5572                           
  5573                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  5574  0444  0022               	movlb	2	; select bank2
  5575  0445  160D               	bsf	13,4	;volatile
  5576  0446  2C49               	goto	l35
  5577  0447                     l34:	
  5578                           
  5579                           ;softI2c.c: 98: else
  5580                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  5581  0447  0022               	movlb	2	; select bank2
  5582  0448  120D               	bcf	13,4	;volatile
  5583  0449                     l35:	
  5584                           
  5585                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  5586  0449  0021               	movlb	1	; select bank1
  5587  044A  120D               	bcf	13,4	;volatile
  5588                           
  5589                           ;softI2c.c: 102: SoftI2cNop();
  5590  044B  249E  3180         	fcall	_SoftI2cNop
  5591                           
  5592                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  5593  044D  0022               	movlb	2	; select bank2
  5594  044E  170D               	bsf	13,6	;volatile
  5595                           
  5596                           ;softI2c.c: 105: SoftI2cNop();
  5597  044F  249E  3180         	fcall	_SoftI2cNop
  5598  0451  0020               	movlb	0	; select bank0
  5599  0452  36A3               	lsrf	SoftI2cTxByte@i,f
  5600  0453  08A3               	movf	SoftI2cTxByte@i,f
  5601  0454  1D03               	skipz
  5602  0455  2C3B               	goto	l32
  5603                           
  5604                           ;softI2c.c: 109: }
  5605                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  5606  0456  0022               	movlb	2	; select bank2
  5607  0457  130D               	bcf	13,6	;volatile
  5608                           
  5609                           ;softI2c.c: 113: SoftI2cNop();
  5610  0458  249E  3180         	fcall	_SoftI2cNop
  5611                           
  5612                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  5613  045A  0021               	movlb	1	; select bank1
  5614  045B  160D               	bsf	13,4	;volatile
  5615                           
  5616                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  5617  045C  0022               	movlb	2	; select bank2
  5618  045D  170D               	bsf	13,6	;volatile
  5619                           
  5620                           ;softI2c.c: 118: SoftI2cNop();
  5621  045E  249E  3180         	fcall	_SoftI2cNop
  5622  0460  0020               	movlb	0	; select bank0
  5623  0461  080D               	movf	13,w	;volatile
  5624                           
  5625                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  5626  0462  0022               	movlb	2	; select bank2
  5627  0463  130D               	bcf	13,6	;volatile
  5628                           
  5629                           ;softI2c.c: 123: SoftI2cNop();
  5630  0464  2C9E               	ljmp	l2274
  5631  0465                     __end_of_SoftI2cTxByte:	
  5632  0465                     __ptext58:	
  5633 ;; *************** function _SoftI2cRxByte *****************
  5634 ;; Defined at:
  5635 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  ack             1    wreg     unsigned char 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  ack             1    1[BANK0 ] unsigned char 
  5640 ;;  i               1    3[BANK0 ] unsigned char 
  5641 ;;  data            1    2[BANK0 ] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      unsigned char 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 1F/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5651 ;;      Params:         0       0       0       0
  5652 ;;      Locals:         0       3       0       0
  5653 ;;      Temps:          0       0       0       0
  5654 ;;      Totals:         0       3       0       0
  5655 ;;Total ram usage:        3 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    6
  5658 ;; This function calls:
  5659 ;;		_SoftI2cNop
  5660 ;; This function is called by:
  5661 ;;		_Mcp9800Read
  5662 ;;		_eepromRxBytes
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function _SoftI2cRxByte
  5668  0465                     _SoftI2cRxByte:	
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  5672                           ;SoftI2cRxByte@ack stored from wreg
  5673  0465  0020               	movlb	0	; select bank0
  5674  0466  00A1               	movwf	SoftI2cRxByte@ack
  5675                           
  5676                           ;softI2c.c: 131: UI08_t data=0x00;
  5677  0467  01A2               	clrf	SoftI2cRxByte@data
  5678                           
  5679                           ;softI2c.c: 132: UI08_t i;
  5680                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  5681  0468  0022               	movlb	2	; select bank2
  5682  0469  130D               	bcf	13,6	;volatile
  5683                           
  5684                           ;softI2c.c: 135: SoftI2cNop();
  5685  046A  249E  3180         	fcall	_SoftI2cNop
  5686                           
  5687                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  5688  046C  0021               	movlb	1	; select bank1
  5689  046D  160D               	bsf	13,4	;volatile
  5690                           
  5691                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  5692  046E  0022               	movlb	2	; select bank2
  5693  046F  160D               	bsf	13,4	;volatile
  5694                           
  5695                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  5696  0470  3080               	movlw	128
  5697  0471  0020               	movlb	0	; select bank0
  5698  0472  00A3               	movwf	SoftI2cRxByte@i
  5699  0473                     l39:	
  5700                           
  5701                           ;softI2c.c: 140: {
  5702                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  5703  0473  0022               	movlb	2	; select bank2
  5704  0474  130D               	bcf	13,6	;volatile
  5705                           
  5706                           ;softI2c.c: 142: SoftI2cNop();
  5707  0475  249E  3180         	fcall	_SoftI2cNop
  5708                           
  5709                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  5710  0477  0022               	movlb	2	; select bank2
  5711  0478  170D               	bsf	13,6	;volatile
  5712                           
  5713                           ;softI2c.c: 144: SoftI2cNop();
  5714  0479  249E  3180         	fcall	_SoftI2cNop
  5715                           
  5716                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  5717  047B  0020               	movlb	0	; select bank0
  5718                           
  5719                           ;softI2c.c: 150: data |= i;
  5720  047C  0823               	movf	SoftI2cRxByte@i,w
  5721  047D  1A0D               	btfsc	13,4	;volatile
  5722  047E  04A2               	iorwf	SoftI2cRxByte@data,f
  5723  047F  36A3               	lsrf	SoftI2cRxByte@i,f
  5724  0480  08A3               	movf	SoftI2cRxByte@i,f
  5725  0481  1D03               	skipz
  5726  0482  2C73               	goto	l39
  5727                           
  5728                           ;softI2c.c: 152: }
  5729                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  5730  0483  0022               	movlb	2	; select bank2
  5731  0484  130D               	bcf	13,6	;volatile
  5732                           
  5733                           ;softI2c.c: 155: SoftI2cNop();
  5734  0485  249E  3180         	fcall	_SoftI2cNop
  5735                           
  5736                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  5737  0487  0021               	movlb	1	; select bank1
  5738  0488  120D               	bcf	13,4	;volatile
  5739                           
  5740                           ;softI2c.c: 158: if(ack)
  5741  0489  0020               	movlb	0	; select bank0
  5742  048A  0821               	movf	SoftI2cRxByte@ack,w
  5743  048B  1903               	btfsc	3,2
  5744  048C  2C90               	goto	l42
  5745                           
  5746                           ;softI2c.c: 159: {
  5747                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  5748  048D  0022               	movlb	2	; select bank2
  5749  048E  120D               	bcf	13,4	;volatile
  5750                           
  5751                           ;softI2c.c: 161: }
  5752  048F  2C92               	goto	l2432
  5753  0490                     l42:	
  5754                           
  5755                           ;softI2c.c: 162: else
  5756                           ;softI2c.c: 163: {
  5757                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  5758  0490  0022               	movlb	2	; select bank2
  5759  0491  160D               	bsf	13,4	;volatile
  5760  0492                     l2432:	
  5761                           
  5762                           ;softI2c.c: 165: }
  5763                           ;softI2c.c: 166: SoftI2cNop();
  5764  0492  249E  3180         	fcall	_SoftI2cNop
  5765                           
  5766                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  5767  0494  0022               	movlb	2	; select bank2
  5768  0495  170D               	bsf	13,6	;volatile
  5769                           
  5770                           ;softI2c.c: 169: SoftI2cNop();
  5771  0496  249E  3180         	fcall	_SoftI2cNop
  5772                           
  5773                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  5774  0498  0022               	movlb	2	; select bank2
  5775  0499  130D               	bcf	13,6	;volatile
  5776                           
  5777                           ;softI2c.c: 172: SoftI2cNop();
  5778  049A  249E               	fcall	_SoftI2cNop
  5779                           
  5780                           ;softI2c.c: 174: return data;
  5781  049B  0020               	movlb	0	; select bank0
  5782  049C  0822               	movf	SoftI2cRxByte@data,w
  5783  049D  0008               	return
  5784  049E                     __end_of_SoftI2cRxByte:	
  5785  049E                     __ptext59:	
  5786 ;; *************** function _SoftI2cNop *****************
  5787 ;; Defined at:
  5788 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;		None               void
  5795 ;; Registers used:
  5796 ;;		wreg
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/2
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5802 ;;      Params:         0       0       0       0
  5803 ;;      Locals:         0       0       0       0
  5804 ;;      Temps:          0       1       0       0
  5805 ;;      Totals:         0       1       0       0
  5806 ;;Total ram usage:        1 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    5
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_SoftI2cStart
  5813 ;;		_SoftI2cRepeatedStart
  5814 ;;		_SoftI2cStop
  5815 ;;		_SoftI2cTxByte
  5816 ;;		_SoftI2cRxByte
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           
  5821                           ;psect for function _SoftI2cNop
  5822  049E                     _SoftI2cNop:	
  5823  049E                     l2274:	
  5824                           ;incstack = 0
  5825                           ; Regs used in _SoftI2cNop: [wreg]
  5826                           
  5827                           
  5828                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  5829  049E  300A               	movlw	10
  5830  049F  0020               	movlb	0	; select bank0
  5831  04A0  00A0               	movwf	??_SoftI2cNop
  5832  04A1                     u2417:	
  5833  04A1  0BA0               	decfsz	??_SoftI2cNop,f
  5834  04A2  2CA1               	goto	u2417
  5835  04A3  0000               	nop
  5836  04A4  0008               	return
  5837  04A5                     __end_of_SoftI2cNop:	
  5838  04A5                     __ptext57:	
  5839 ;; *************** function _SoftI2cStart *****************
  5840 ;; Defined at:
  5841 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;		None               void
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0, pclath, cstack
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/1
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5855 ;;      Params:         0       0       0       0
  5856 ;;      Locals:         0       0       0       0
  5857 ;;      Temps:          0       0       0       0
  5858 ;;      Totals:         0       0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    6
  5862 ;; This function calls:
  5863 ;;		_SoftI2cNop
  5864 ;; This function is called by:
  5865 ;;		_SoftI2cInit
  5866 ;;		_Mcp9800Start
  5867 ;;		_Mcp9800Read
  5868 ;;		_eepromRxBytes
  5869 ;;		_eepromTxBytes
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           
  5874                           ;psect for function _SoftI2cStart
  5875  04A5                     _SoftI2cStart:	
  5876                           
  5877                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  5878                           
  5879                           ;incstack = 0
  5880                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  5881  04A5  0021               	movlb	1	; select bank1
  5882  04A6  120D               	bcf	13,4	;volatile
  5883                           
  5884                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  5885  04A7  0022               	movlb	2	; select bank2
  5886  04A8  170D               	bsf	13,6	;volatile
  5887                           
  5888                           ;softI2c.c: 43: SoftI2cNop();
  5889  04A9  249E  3180         	fcall	_SoftI2cNop
  5890                           
  5891                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  5892  04AB  0022               	movlb	2	; select bank2
  5893  04AC  120D               	bcf	13,4	;volatile
  5894                           
  5895                           ;softI2c.c: 46: SoftI2cNop();
  5896  04AD  249E  3180         	fcall	_SoftI2cNop
  5897                           
  5898                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  5899  04AF  0022               	movlb	2	; select bank2
  5900  04B0  130D               	bcf	13,6	;volatile
  5901                           
  5902                           ;softI2c.c: 48: SoftI2cNop();
  5903  04B1  2C9E               	ljmp	l2274
  5904  04B2                     __end_of_SoftI2cStart:	
  5905  04B2                     __ptext56:	
  5906 ;; *************** function _SoftI2cStop *****************
  5907 ;; Defined at:
  5908 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;		None               void
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, pclath, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/1
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5922 ;;      Params:         0       0       0       0
  5923 ;;      Locals:         0       0       0       0
  5924 ;;      Temps:          0       0       0       0
  5925 ;;      Totals:         0       0       0       0
  5926 ;;Total ram usage:        0 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    6
  5929 ;; This function calls:
  5930 ;;		_SoftI2cNop
  5931 ;; This function is called by:
  5932 ;;		_SoftI2cInit
  5933 ;;		_Mcp9800Start
  5934 ;;		_Mcp9800Read
  5935 ;;		_eepromRxBytes
  5936 ;;		_eepromTxBytes
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           
  5941                           ;psect for function _SoftI2cStop
  5942  04B2                     _SoftI2cStop:	
  5943  04B2                     l2376:	
  5944                           ;incstack = 0
  5945                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5946                           
  5947                           
  5948                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  5949  04B2  0021               	movlb	1	; select bank1
  5950  04B3  120D               	bcf	13,4	;volatile
  5951                           
  5952                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  5953  04B4  0022               	movlb	2	; select bank2
  5954  04B5  120D               	bcf	13,4	;volatile
  5955                           
  5956                           ;softI2c.c: 78: SoftI2cNop();
  5957  04B6  249E  3180         	fcall	_SoftI2cNop
  5958                           
  5959                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  5960  04B8  0022               	movlb	2	; select bank2
  5961  04B9  170D               	bsf	13,6	;volatile
  5962                           
  5963                           ;softI2c.c: 81: SoftI2cNop();
  5964  04BA  249E  3180         	fcall	_SoftI2cNop
  5965                           
  5966                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  5967  04BC  0022               	movlb	2	; select bank2
  5968  04BD  160D               	bsf	13,4	;volatile
  5969                           
  5970                           ;softI2c.c: 83: SoftI2cNop();
  5971  04BE  249E  3180         	fcall	_SoftI2cNop
  5972                           
  5973                           ;softI2c.c: 84: SoftI2cNop();
  5974  04C0  2C9E               	ljmp	l2274
  5975  04C1                     __end_of_SoftI2cStop:	
  5976  04C1                     __ptext32:	
  5977 ;; *************** function _Mrf49xaServe *****************
  5978 ;; Defined at:
  5979 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;		None
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  data            1    5[BANK0 ] unsigned char 
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      unsigned char 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5988 ;; Tracked objects:
  5989 ;;		On entry : 1F/0
  5990 ;;		On exit  : 1E/0
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5993 ;;      Params:         0       0       0       0
  5994 ;;      Locals:         0       1       0       0
  5995 ;;      Temps:          0       1       0       0
  5996 ;;      Totals:         0       2       0       0
  5997 ;;Total ram usage:        2 bytes
  5998 ;; Hardware stack levels used:    1
  5999 ;; Hardware stack levels required when called:    8
  6000 ;; This function calls:
  6001 ;;		_Mrf49RxByte
  6002 ;;		_Mrf49RxSts
  6003 ;;		_Mrf49TxByte
  6004 ;;		_Mrf49xaModeRx
  6005 ;; This function is called by:
  6006 ;;		_Mrf49xaInit
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           
  6011                           ;psect for function _Mrf49xaServe
  6012  04C1                     _Mrf49xaServe:	
  6013                           
  6014                           ;mrf49xa_data.c: 10: uint8_t data;
  6015                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  6016                           
  6017                           ;incstack = 0
  6018                           ; Regs used in _Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6019  04C1  0021               	movlb	1	; select bank1
  6020  04C2  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  6021  04C3  1903               	btfsc	3,2
  6022                           
  6023                           ;mrf49xa_data.c: 13: return 0;
  6024  04C4  3400               	retlw	0
  6025                           
  6026                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  6027  04C5  1BED               	btfsc	(_rfTrcvStatus^(0+128)+77),7
  6028  04C6  3400               	retlw	0
  6029                           
  6030                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  6031  04C7  25CD  3180         	fcall	_Mrf49RxSts
  6032                           
  6033                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  6034  04C9  0839               	movf	_mrf49Status,w
  6035  04CA  3AFF               	xorlw	255
  6036  04CB  1D03               	skipz
  6037  04CC  2CD1               	goto	l437
  6038  04CD  083A               	movf	_mrf49Status+1,w
  6039  04CE  3AFF               	xorlw	255
  6040  04CF  1903               	btfsc	3,2
  6041  04D0  3400               	retlw	0
  6042  04D1                     l437:	
  6043                           ;mrf49xa_data.c: 26: {
  6044                           
  6045                           
  6046                           ;mrf49xa_data.c: 28: }
  6047                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  6048  04D1  1AB9               	btfsc	_mrf49Status,5
  6049  04D2  2CDD               	goto	l2690
  6050  04D3  2CE9               	goto	l438
  6051  04D4                     l2686:	
  6052                           
  6053                           ;mrf49xa_data.c: 36: case RECV_DATA:
  6054                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  6055  04D4  259D  3180         	fcall	_Mrf49RxByte
  6056  04D6  00A5               	movwf	Mrf49xaServe@data
  6057                           
  6058                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  6059  04D7  259D  3180         	fcall	_Mrf49RxByte
  6060  04D9  00A5               	movwf	Mrf49xaServe@data
  6061                           
  6062                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  6063  04DA  259F  3180         	fcall	_Mrf49xaModeRx
  6064                           
  6065                           ;mrf49xa_data.c: 47: break;
  6066  04DC  2CE9               	goto	l438
  6067  04DD                     l2690:	
  6068  04DD  0021               	movlb	1	; select bank1
  6069  04DE  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  6070                           
  6071                           ; Switch size 1, requested type "space"
  6072                           ; Number of cases is 3, Range of values is 1 to 3
  6073                           ; switch strategies available:
  6074                           ; Name         Instructions Cycles
  6075                           ; simple_byte           10     6 (average)
  6076                           ; direct_byte           15     9 (fixed)
  6077                           ; jumptable            263     9 (fixed)
  6078                           ;	Chosen strategy is simple_byte
  6079  04DF  3A01               	xorlw	1	; case 1
  6080  04E0  1903               	skipnz
  6081  04E1  2CD4               	goto	l2686
  6082  04E2  3A03               	xorlw	3	; case 2
  6083  04E3  1903               	skipnz
  6084  04E4  2CD4               	goto	l2686
  6085  04E5  3A01               	xorlw	1	; case 3
  6086  04E6  1903               	skipnz
  6087  04E7  2CE9               	goto	l438
  6088  04E8  2CE9               	goto	l438
  6089  04E9                     l438:	
  6090                           
  6091                           ;mrf49xa_data.c: 55: }
  6092                           ;mrf49xa_data.c: 64: if (mrf49Status.flags.msb.fifoTxRx == 1)
  6093  04E9  0020               	movlb	0	; select bank0
  6094  04EA  1BB9               	btfsc	_mrf49Status,7
  6095  04EB  2D87               	goto	l2770
  6096  04EC  2D93               	goto	l2772
  6097  04ED                     l2694:	
  6098                           
  6099                           ;mrf49xa_data.c: 70: data = Mrf49RxByte();
  6100  04ED  259D  3180         	fcall	_Mrf49RxByte
  6101  04EF  00A5               	movwf	Mrf49xaServe@data
  6102                           
  6103                           ;mrf49xa_data.c: 74: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6104  04F0  1BBA               	btfsc	_mrf49Status+1,7
  6105  04F1  2CF5               	goto	l2700
  6106  04F2                     l2698:	
  6107                           
  6108                           ;mrf49xa_data.c: 75: {
  6109                           ;mrf49xa_data.c: 76: Mrf49xaModeRx();
  6110  04F2  259F  3180         	fcall	_Mrf49xaModeRx
  6111                           
  6112                           ;mrf49xa_data.c: 77: break;
  6113  04F4  2D93               	goto	l2772
  6114  04F5                     l2700:	
  6115                           
  6116                           ;mrf49xa_data.c: 78: }
  6117                           ;mrf49xa_data.c: 80: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  6118  04F5  0021               	movlb	1	; select bank1
  6119  04F6  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  6120  04F7  1D03               	skipz
  6121  04F8  2CFB               	goto	l2704
  6122  04F9  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  6123  04FA  2CFF               	goto	L1
  6124  04FB                     l2704:	
  6125                           
  6126                           ;mrf49xa_data.c: 81: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  6127  04FB  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  6128  04FC  1D03               	skipz
  6129  04FD  2CF2               	goto	l2698
  6130  04FE  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  6131  04FF                     L1:	
  6132  04FF  00A0               	movwf	_rfTrcvStatus^(0+128)
  6133                           
  6134                           ;mrf49xa_data.c: 88: }
  6135                           ;mrf49xa_data.c: 89: rfTrcvStatus.hwRx->packet.size = data;
  6136  0500  0A20               	incf	_rfTrcvStatus^(0+128),w
  6137  0501  0086               	movwf	6
  6138  0502  0187               	clrf	7
  6139                           
  6140                           ;mrf49xa_data.c: 90: rfTrcvStatus.hwRx->crc = 0;
  6141  0503  2712  3180         	fcall	PL18	;call to abstracted procedure
  6142  0505  3E16               	addlw	22
  6143  0506  0086               	movwf	6
  6144  0507  0181               	clrf	1
  6145                           
  6146                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  6147  0508  0820               	movf	_rfTrcvStatus^(0+128),w
  6148  0509  0086               	movwf	6
  6149  050A  3004               	movlw	4
  6150  050B  0081               	movwf	1
  6151                           
  6152                           ;mrf49xa_data.c: 93: rfTrcvStatus.state = RECV_DATA;
  6153  050C  3002               	movlw	2
  6154  050D  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  6155                           
  6156                           ;mrf49xa_data.c: 94: rfTrcvStatus.hwByte = 1;
  6157  050E  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6158  050F  3980               	andlw	-128
  6159  0510  3801               	iorlw	1
  6160  0511  2D3C               	goto	L2
  6161  0512                     l2720:	
  6162                           ;mrf49xa_data.c: 96: break;
  6163                           
  6164                           
  6165                           ;mrf49xa_data.c: 100: data = Mrf49RxByte();
  6166  0512  259D  3180         	fcall	_Mrf49RxByte
  6167  0514  00A5               	movwf	Mrf49xaServe@data
  6168                           
  6169                           ;mrf49xa_data.c: 104: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  6170  0515  1BBA               	btfsc	_mrf49Status+1,7
  6171  0516  2D1D               	goto	l2728
  6172                           
  6173                           ;mrf49xa_data.c: 105: {
  6174                           ;mrf49xa_data.c: 106: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6175  0517  0021               	movlb	1	; select bank1
  6176  0518  0820               	movf	_rfTrcvStatus^(0+128),w
  6177  0519  0086               	movwf	6
  6178  051A  3005               	movlw	5
  6179  051B  0187               	clrf	7
  6180  051C  2D2D               	goto	L3
  6181  051D                     l2728:	
  6182                           
  6183                           ;mrf49xa_data.c: 109: }
  6184                           ;mrf49xa_data.c: 111: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  6185  051D  0021               	movlb	1	; select bank1
  6186  051E  0A20               	incf	_rfTrcvStatus^(0+128),w
  6187  051F  0086               	movwf	6
  6188  0520  0187               	clrf	7
  6189  0521  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6190  0522  397F               	andlw	127
  6191  0523  0601               	xorwf	1,w
  6192  0524  1D03               	skipz
  6193  0525  2D2F               	goto	l2734
  6194                           
  6195                           ;mrf49xa_data.c: 112: {
  6196                           ;mrf49xa_data.c: 113: rfTrcvStatus.hwRx->crc = data;
  6197  0526  0820               	movf	_rfTrcvStatus^(0+128),w
  6198  0527  3E16               	addlw	22
  6199  0528  0086               	movwf	6
  6200                           
  6201                           ;mrf49xa_data.c: 117: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  6202  0529  2712  3180         	fcall	PL18	;call to abstracted procedure
  6203  052B  0086               	movwf	6
  6204  052C  3005               	movlw	5
  6205  052D                     L3:	
  6206  052D  0081               	movwf	1
  6207  052E  2CF2               	goto	l2698
  6208  052F                     l2734:	
  6209                           
  6210                           ;mrf49xa_data.c: 126: else
  6211                           ;mrf49xa_data.c: 127: {
  6212                           ;mrf49xa_data.c: 128: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  6213  052F  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6214  0530  397F               	andlw	127
  6215  0531  0720               	addwf	_rfTrcvStatus^(0+128),w
  6216  0532  0020               	movlb	0	; select bank0
  6217  0533  00A4               	movwf	??_Mrf49xaServe
  6218  0534  0A24               	incf	??_Mrf49xaServe,w
  6219  0535  0086               	movwf	6
  6220  0536  0187               	clrf	7
  6221  0537  0825               	movf	Mrf49xaServe@data,w
  6222  0538  0081               	movwf	1
  6223  0539  0021               	movlb	1	; select bank1
  6224  053A  26FB  3180         	fcall	PL12	;call to abstracted procedure
  6225  053C                     L2:	
  6226  053C  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6227  053D  2D93               	goto	l2772
  6228  053E                     l2738:	
  6229                           
  6230                           ;mrf49xa_data.c: 134: rfTrcvStatus.hwByte++;
  6231  053E  26FB  3180         	fcall	PL12	;call to abstracted procedure
  6232  0540  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6233                           
  6234                           ;mrf49xa_data.c: 136: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  6235  0541  397F               	andlw	127
  6236  0542  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  6237  0543  1D03               	skipz
  6238  0544  2D75               	goto	l2766
  6239                           
  6240                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwByte = 49;
  6241  0545  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6242  0546  3980               	andlw	-128
  6243  0547  3831               	iorlw	49
  6244  0548  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  6245  0549  2D75               	goto	l2766
  6246  054A                     l2742:	
  6247                           
  6248                           ;mrf49xa_data.c: 142: Mrf49TxByte(0x2D);
  6249  054A  302D               	movlw	45
  6250  054B  2598  3180         	fcall	_Mrf49TxByte
  6251                           
  6252                           ;mrf49xa_data.c: 143: break;
  6253  054D  2D93               	goto	l2772
  6254  054E                     l2744:	
  6255                           
  6256                           ;mrf49xa_data.c: 146: Mrf49TxByte(0xD4);
  6257  054E  30D4               	movlw	212
  6258  054F  2598  3180         	fcall	_Mrf49TxByte
  6259                           
  6260                           ;mrf49xa_data.c: 147: rfTrcvStatus.hwByte = 0x7F;
  6261  0551  307F               	movlw	127
  6262  0552  0021               	movlb	1	; select bank1
  6263  0553  04ED               	iorwf	(_rfTrcvStatus^(0+128)+77),f
  6264                           
  6265                           ;mrf49xa_data.c: 148: break;
  6266  0554  2D93               	goto	l2772
  6267  0555                     l2748:	
  6268                           
  6269                           ;mrf49xa_data.c: 152: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  6270  0555  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6271  0556  397F               	andlw	127
  6272  0557  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  6273  0558  0086               	movwf	6
  6274  0559  0187               	clrf	7
  6275  055A  0801               	movf	1,w
  6276  055B  2598  3180         	fcall	_Mrf49TxByte
  6277                           
  6278                           ;mrf49xa_data.c: 153: break;
  6279  055D  2D93               	goto	l2772
  6280  055E                     l2750:	
  6281                           
  6282                           ;mrf49xa_data.c: 156: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  6283  055E  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  6284  055F  2598  3180         	fcall	_Mrf49TxByte
  6285                           
  6286                           ;mrf49xa_data.c: 157: break;
  6287  0561  2D93               	goto	l2772
  6288  0562                     l2752:	
  6289                           
  6290                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  6291  0562  3000               	movlw	0
  6292  0563  2598  3180         	fcall	_Mrf49TxByte
  6293                           
  6294                           ;mrf49xa_data.c: 161: break;
  6295  0565  2D93               	goto	l2772
  6296  0566                     l2754:	
  6297                           
  6298                           ;mrf49xa_data.c: 164: Mrf49TxByte(0x00);
  6299  0566  3000               	movlw	0
  6300  0567  2598  3180         	fcall	_Mrf49TxByte
  6301                           
  6302                           ;mrf49xa_data.c: 165: Mrf49xaModeRx();
  6303  0569  259F  3180         	fcall	_Mrf49xaModeRx
  6304                           
  6305                           ;mrf49xa_data.c: 167: rfTrcvStatus.txPacket.retry = 0;
  6306  056B  30F0               	movlw	-16
  6307  056C  0021               	movlb	1	; select bank1
  6308  056D  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  6309                           
  6310                           ;mrf49xa_data.c: 169: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  6311  056E  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  6312  056F  2D73               	goto	l2762
  6313                           
  6314                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  6315  0570  3003               	movlw	3
  6316  0571  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  6317  0572  2D93               	goto	l2772
  6318  0573                     l2762:	
  6319                           
  6320                           ;mrf49xa_data.c: 171: else
  6321                           ;mrf49xa_data.c: 172: rfTrcvStatus.txPacket.state = PKT_FREE;
  6322  0573  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  6323  0574  2D93               	goto	l2772
  6324  0575                     l2766:	
  6325  0575  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  6326  0576  397F               	andlw	127
  6327                           
  6328                           ; Switch size 1, requested type "space"
  6329                           ; Number of cases is 5, Range of values is 49 to 101
  6330                           ; switch strategies available:
  6331                           ; Name         Instructions Cycles
  6332                           ; simple_byte           16     9 (average)
  6333                           ; direct_byte          115     9 (fixed)
  6334                           ; jumptable            263     9 (fixed)
  6335                           ;	Chosen strategy is simple_byte
  6336  0577  3A31               	xorlw	49	; case 49
  6337  0578  1903               	skipnz
  6338  0579  2D5E               	goto	l2750
  6339  057A  3A03               	xorlw	3	; case 50
  6340  057B  1903               	skipnz
  6341  057C  2D62               	goto	l2752
  6342  057D  3A01               	xorlw	1	; case 51
  6343  057E  1903               	skipnz
  6344  057F  2D66               	goto	l2754
  6345  0580  3A57               	xorlw	87	; case 100
  6346  0581  1903               	skipnz
  6347  0582  2D4A               	goto	l2742
  6348  0583  3A01               	xorlw	1	; case 101
  6349  0584  1903               	skipnz
  6350  0585  2D4E               	goto	l2744
  6351  0586  2D55               	goto	l2748
  6352  0587                     l2770:	
  6353  0587  0021               	movlb	1	; select bank1
  6354  0588  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  6355                           
  6356                           ; Switch size 1, requested type "space"
  6357                           ; Number of cases is 3, Range of values is 1 to 3
  6358                           ; switch strategies available:
  6359                           ; Name         Instructions Cycles
  6360                           ; simple_byte           10     6 (average)
  6361                           ; direct_byte           15     9 (fixed)
  6362                           ; jumptable            263     9 (fixed)
  6363                           ;	Chosen strategy is simple_byte
  6364  0589  3A01               	xorlw	1	; case 1
  6365  058A  1903               	skipnz
  6366  058B  2CED               	goto	l2694
  6367  058C  3A03               	xorlw	3	; case 2
  6368  058D  1903               	skipnz
  6369  058E  2D12               	goto	l2720
  6370  058F  3A01               	xorlw	1	; case 3
  6371  0590  1903               	skipnz
  6372  0591  2D3E               	goto	l2738
  6373  0592  2D93               	goto	l2772
  6374  0593                     l2772:	
  6375                           
  6376                           ;mrf49xa_data.c: 179: }
  6377                           ;mrf49xa_data.c: 193: return PORTAbits.RA2 == 1 ? 1 : 0;
  6378  0593  0020               	movlb	0	; select bank0
  6379  0594  0C0C               	rrf	12,w	;volatile
  6380  0595  0C89               	rrf	9,f
  6381  0596  3901               	andlw	1
  6382  0597  0008               	return
  6383  0598                     __end_of_Mrf49xaServe:	
  6384  0598                     __ptext34:	
  6385 ;; *************** function _Mrf49TxByte *****************
  6386 ;; Defined at:
  6387 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;  byte            1    wreg     unsigned char 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  byte            1    3[BANK0 ] unsigned char 
  6392 ;; Return value:  Size  Location     Type
  6393 ;;		None               void
  6394 ;; Registers used:
  6395 ;;		wreg, status,2, status,0, pclath, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 1E/1
  6398 ;;		On exit  : 1F/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6401 ;;      Params:         0       0       0       0
  6402 ;;      Locals:         0       1       0       0
  6403 ;;      Temps:          0       0       0       0
  6404 ;;      Totals:         0       1       0       0
  6405 ;;Total ram usage:        1 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    7
  6408 ;; This function calls:
  6409 ;;		_Mrf49TxCmd
  6410 ;; This function is called by:
  6411 ;;		_Mrf49xaServe
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           
  6416                           ;psect for function _Mrf49TxByte
  6417  0598                     _Mrf49TxByte:	
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6421                           ;Mrf49TxByte@byte stored from wreg
  6422  0598  0020               	movlb	0	; select bank0
  6423  0599  00A3               	movwf	Mrf49TxByte@byte
  6424                           
  6425                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6426  059A  00A1               	movwf	Mrf49TxCmd@val
  6427  059B  30B8               	movlw	184
  6428  059C  2DC4               	ljmp	_Mrf49TxCmd
  6429  059D                     __end_of_Mrf49TxByte:	
  6430  059D                     __ptext37:	
  6431 ;; *************** function _Mrf49RxByte *****************
  6432 ;; Defined at:
  6433 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      unsigned char 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 1E/1
  6444 ;;		On exit  : 1F/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6447 ;;      Params:         0       0       0       0
  6448 ;;      Locals:         0       0       0       0
  6449 ;;      Temps:          0       0       0       0
  6450 ;;      Totals:         0       0       0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    7
  6454 ;; This function calls:
  6455 ;;		_Mrf49RxCmd
  6456 ;; This function is called by:
  6457 ;;		_Mrf49xaServe
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function _Mrf49RxByte
  6463  059D                     _Mrf49RxByte:	
  6464                           
  6465                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6469  059D  30B0               	movlw	176
  6470  059E  2876               	ljmp	_Mrf49RxCmd
  6471  059F                     __end_of_Mrf49RxByte:	
  6472  059F                     __ptext33:	
  6473 ;; *************** function _Mrf49xaModeRx *****************
  6474 ;; Defined at:
  6475 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  k               1    3[BANK0 ] unsigned char 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;		None               void
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, pclath, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 1E/1
  6486 ;;		On exit  : 1F/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6489 ;;      Params:         0       0       0       0
  6490 ;;      Locals:         0       1       0       0
  6491 ;;      Temps:          0       0       0       0
  6492 ;;      Totals:         0       1       0       0
  6493 ;;Total ram usage:        1 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    7
  6496 ;; This function calls:
  6497 ;;		_Mrf49TxCmd
  6498 ;; This function is called by:
  6499 ;;		_Mrf49xaReboot
  6500 ;;		_Mrf49xaInit
  6501 ;;		_Mrf49xaServe
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           
  6506                           ;psect for function _Mrf49xaModeRx
  6507  059F                     _Mrf49xaModeRx:	
  6508  059F                     l2468:	
  6509                           ;incstack = 0
  6510                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6511                           
  6512                           
  6513                           ;mrf49xa.c: 101: UI08_t k;
  6514                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  6515  059F  0020               	movlb	0	; select bank0
  6516  05A0  3030               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6517  05A1  01A3               	clrf	Mrf49xaModeRx@k
  6518  05A2  3187               	movlp	high __stringtab
  6519  05A3  000A               	callw
  6520  05A4  3180               	pagesel	$	;select current page
  6521  05A5  3800               	iorlw	0
  6522  05A6  1903               	btfsc	3,2
  6523  05A7  2DBC               	goto	l211
  6524  05A8                     l2474:	
  6525  05A8  3523               	lslf	Mrf49xaModeRx@k,w
  6526  05A9  3E54               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6527  05AA  3187               	movlp	high __stringtab
  6528  05AB  000A               	callw
  6529  05AC  3180               	pagesel	$	;select current page
  6530  05AD  00A1               	movwf	Mrf49TxCmd@val
  6531  05AE  3523               	lslf	Mrf49xaModeRx@k,w
  6532  05AF  3E53               	addlw	low (_mrfRegset_Rx| (0+32768))
  6533  05B0  3187               	movlp	high __stringtab
  6534  05B1  000A               	callw
  6535  05B2  3180               	pagesel	$	;select current page
  6536  05B3  25C4               	fcall	_Mrf49TxCmd
  6537  05B4  3030               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6538  05B5  0AA3               	incf	Mrf49xaModeRx@k,f
  6539  05B6  3187               	movlp	high __stringtab
  6540  05B7  000A               	callw
  6541  05B8  3180               	pagesel	$	;select current page
  6542  05B9  0223               	subwf	Mrf49xaModeRx@k,w
  6543  05BA  1C03               	skipc
  6544  05BB  2DA8               	goto	l2474
  6545  05BC                     l211:	
  6546                           
  6547                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  6548  05BC  0021               	movlb	1	; select bank1
  6549  05BD  3080               	movlw	-128
  6550  05BE  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  6551  05BF  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  6552                           
  6553                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  6554  05C0  05ED               	andwf	(_rfTrcvStatus^(0+128)+77),f
  6555                           
  6556                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  6557  05C1  0020               	movlb	0	; select bank0
  6558  05C2  13B9               	bcf	_mrf49Status,7
  6559  05C3  0008               	return
  6560  05C4                     __end_of_Mrf49xaModeRx:	
  6561  05C4                     __ptext35:	
  6562 ;; *************** function _Mrf49TxCmd *****************
  6563 ;; Defined at:
  6564 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  cmd             1    wreg     unsigned char 
  6567 ;;  val             1    1[BANK0 ] unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  cmd             1    2[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 1F/0
  6576 ;;		On exit  : 1F/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6579 ;;      Params:         0       1       0       0
  6580 ;;      Locals:         0       1       0       0
  6581 ;;      Temps:          0       0       0       0
  6582 ;;      Totals:         0       2       0       0
  6583 ;;Total ram usage:        2 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    6
  6586 ;; This function calls:
  6587 ;;		_Mrf49SpiTx
  6588 ;; This function is called by:
  6589 ;;		_Mrf49xaModeRx
  6590 ;;		_Mrf49xaModeTx
  6591 ;;		_Mrf49xaModeSleep
  6592 ;;		_Mrf49xaInit
  6593 ;;		_Mrf49TxByte
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _Mrf49TxCmd
  6599  05C4                     _Mrf49TxCmd:	
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6603                           ;Mrf49TxCmd@cmd stored from wreg
  6604  05C4  00A2               	movwf	Mrf49TxCmd@cmd
  6605                           
  6606                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6607  05C5  130E               	bcf	14,6	;volatile
  6608                           
  6609                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6610  05C6  0822               	movf	Mrf49TxCmd@cmd,w
  6611  05C7  2663  3180         	fcall	_Mrf49SpiTx
  6612                           
  6613                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6614  05C9  0821               	movf	Mrf49TxCmd@val,w
  6615  05CA  2663               	fcall	_Mrf49SpiTx
  6616                           
  6617                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6618  05CB  170E               	bsf	14,6	;volatile
  6619  05CC  0008               	return
  6620  05CD                     __end_of_Mrf49TxCmd:	
  6621  05CD                     __ptext36:	
  6622 ;; *************** function _Mrf49RxSts *****************
  6623 ;; Defined at:
  6624 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;		None               void
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, pclath, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 1E/0
  6635 ;;		On exit  : 1F/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6638 ;;      Params:         0       0       0       0
  6639 ;;      Locals:         0       0       0       0
  6640 ;;      Temps:          0       0       0       0
  6641 ;;      Totals:         0       0       0       0
  6642 ;;Total ram usage:        0 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    6
  6645 ;; This function calls:
  6646 ;;		_Mrf49SpiRx
  6647 ;; This function is called by:
  6648 ;;		_Mrf49xaTick
  6649 ;;		_Mrf49xaServe
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           
  6654                           ;psect for function _Mrf49RxSts
  6655  05CD                     _Mrf49RxSts:	
  6656                           
  6657                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  6658                           
  6659                           ;incstack = 0
  6660                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6661  05CD  120B               	bcf	11,4	;volatile
  6662                           
  6663                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  6664  05CE  0020               	movlb	0	; select bank0
  6665  05CF  130E               	bcf	14,6	;volatile
  6666                           
  6667                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  6668  05D0  261F  3180         	fcall	_Mrf49SpiRx
  6669  05D2  00B9               	movwf	_mrf49Status
  6670                           
  6671                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  6672  05D3  261F               	fcall	_Mrf49SpiRx
  6673  05D4  00BA               	movwf	_mrf49Status+1
  6674                           
  6675                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  6676  05D5  170E               	bsf	14,6	;volatile
  6677                           
  6678                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  6679  05D6  160B               	bsf	11,4	;volatile
  6680  05D7  0008               	return
  6681  05D8                     __end_of_Mrf49RxSts:	
  6682  05D8                     __ptext22:	
  6683 ;; *************** function _PwrI2cSleep *****************
  6684 ;; Defined at:
  6685 ;;		line 72 in file "../../../src/node/power.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;		None
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;		None
  6690 ;; Return value:  Size  Location     Type
  6691 ;;		None               void
  6692 ;; Registers used:
  6693 ;;		None
  6694 ;; Tracked objects:
  6695 ;;		On entry : 1F/2
  6696 ;;		On exit  : 1F/1
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6699 ;;      Params:         0       0       0       0
  6700 ;;      Locals:         0       0       0       0
  6701 ;;      Temps:          0       0       0       0
  6702 ;;      Totals:         0       0       0       0
  6703 ;;Total ram usage:        0 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    5
  6706 ;; This function calls:
  6707 ;;		Nothing
  6708 ;; This function is called by:
  6709 ;;		_main
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _PwrI2cSleep
  6715  05D8                     _PwrI2cSleep:	
  6716                           
  6717                           ;power.c: 74: LATBbits.LATB6 = 1;
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _PwrI2cSleep: []
  6721                           
  6722                           ;power.c: 75: LATBbits.LATB4 = 1;
  6723                           
  6724                           ;power.c: 77: TRISBbits.TRISB6 = 0;
  6725                           
  6726                           ;power.c: 78: TRISBbits.TRISB4 = 0;
  6727  05D8  2718               	fcall	PL20	;call to abstracted procedure
  6728  05D9  0008               	return
  6729  05DA                     __end_of_PwrI2cSleep:	
  6730  05DA                     __ptext13:	
  6731 ;; *************** function _PwrSensorSleep *****************
  6732 ;; Defined at:
  6733 ;;		line 138 in file "../../../src/node/power.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;		None               void
  6740 ;; Registers used:
  6741 ;;		None
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/1
  6744 ;;		On exit  : 1F/2
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6747 ;;      Params:         0       0       0       0
  6748 ;;      Locals:         0       0       0       0
  6749 ;;      Temps:          0       0       0       0
  6750 ;;      Totals:         0       0       0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    5
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_main
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _PwrSensorSleep
  6763  05DA                     _PwrSensorSleep:	
  6764                           
  6765                           ;power.c: 140: LATCbits.LATC2 = 0;
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _PwrSensorSleep: []
  6769  05DA  0022               	movlb	2	; select bank2
  6770  05DB  110E               	bcf	14,2	;volatile
  6771  05DC  0008               	return
  6772  05DD                     __end_of_PwrSensorSleep:	
  6773  05DD                     __ptext52:	
  6774 ;; *************** function _Mrf49xaNeedsReset *****************
  6775 ;; Defined at:
  6776 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;		None
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  2  119[COMMON] int 
  6783 ;; Registers used:
  6784 ;;		None
  6785 ;; Tracked objects:
  6786 ;;		On entry : 1F/1
  6787 ;;		On exit  : 1F/1
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6790 ;;      Params:         0       0       0       0
  6791 ;;      Locals:         0       0       0       0
  6792 ;;      Temps:          0       0       0       0
  6793 ;;      Totals:         0       0       0       0
  6794 ;;Total ram usage:        0 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    5
  6797 ;; This function calls:
  6798 ;;		Nothing
  6799 ;; This function is called by:
  6800 ;;		_main
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _Mrf49xaNeedsReset
  6806  05DD                     _Mrf49xaNeedsReset:	
  6807                           
  6808                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _Mrf49xaNeedsReset: []
  6812  05DD  17ED               	bsf	(_rfTrcvStatus^(0+128)+77),7
  6813  05DE  0008               	return
  6814  05DF                     __end_of_Mrf49xaNeedsReset:	
  6815  05DF                     __ptext50:	
  6816 ;; *************** function _Mrf49xaFreePacket *****************
  6817 ;; Defined at:
  6818 ;;		line 85 in file "../../../src/devices/mrf49xa_packet.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  6821 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  6824 ;;		 -> NULL(0), rfTrcvStatus.rxPacket(50), rfTrcvStatus(79), 
  6825 ;; Return value:  Size  Location     Type
  6826 ;;		None               void
  6827 ;; Registers used:
  6828 ;;		wreg, fsr1l, fsr1h, status,2
  6829 ;; Tracked objects:
  6830 ;;		On entry : 1F/0
  6831 ;;		On exit  : 1F/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6834 ;;      Params:         0       0       0       0
  6835 ;;      Locals:         0       1       0       0
  6836 ;;      Temps:          0       0       0       0
  6837 ;;      Totals:         0       1       0       0
  6838 ;;Total ram usage:        1 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    5
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_Mrf49xaTick
  6845 ;;		_HandlePacket
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function _Mrf49xaFreePacket
  6851  05DF                     _Mrf49xaFreePacket:	
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  6855                           ;Mrf49xaFreePacket@packet stored from wreg
  6856  05DF  00A0               	movwf	Mrf49xaFreePacket@packet
  6857                           
  6858                           ;mrf49xa_packet.c: 87: packet->state = PKT_FREE;
  6859  05E0  0086               	movwf	6
  6860  05E1  0187               	clrf	7
  6861  05E2  0181               	clrf	1
  6862  05E3  0008               	return
  6863  05E4                     __end_of_Mrf49xaFreePacket:	
  6864  05E4                     __ptext28:	
  6865 ;; *************** function _Mrf49xaPacketPending *****************
  6866 ;; Defined at:
  6867 ;;		line 6 in file "../../../src/devices/mrf49xa_packet.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;		None
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;		None
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      unsigned char 
  6874 ;; Registers used:
  6875 ;;		wreg
  6876 ;; Tracked objects:
  6877 ;;		On entry : 1F/1
  6878 ;;		On exit  : 1F/1
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6881 ;;      Params:         0       0       0       0
  6882 ;;      Locals:         0       0       0       0
  6883 ;;      Temps:          0       0       0       0
  6884 ;;      Totals:         0       0       0       0
  6885 ;;Total ram usage:        0 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    5
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_Mrf49xaTick
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           
  6896                           ;psect for function _Mrf49xaPacketPending
  6897  05E4                     _Mrf49xaPacketPending:	
  6898                           
  6899                           ;mrf49xa_packet.c: 8: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX ||
  6900                           ;mrf49xa_packet.c: 9: rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  6901                           
  6902                           ;incstack = 0
  6903                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  6904  05E4  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  6905  05E5  3A05               	xorlw	5
  6906  05E6  1903               	skipnz
  6907  05E7  3401               	retlw	1
  6908  05E8  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  6909  05E9  3A05               	xorlw	5
  6910  05EA  1903               	btfsc	3,2
  6911                           
  6912                           ;mrf49xa_packet.c: 10: return 1;
  6913  05EB  3401               	retlw	1
  6914                           
  6915                           ;mrf49xa_packet.c: 11: else
  6916                           ;mrf49xa_packet.c: 12: return 0;
  6917  05EC  3400               	retlw	0
  6918  05ED                     __end_of_Mrf49xaPacketPending:	
  6919  05ED                     __ptext27:	
  6920 ;; *************** function _Mrf49xaRxPacket *****************
  6921 ;; Defined at:
  6922 ;;		line 90 in file "../../../src/devices/mrf49xa_packet.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      PTR struct rfTrcvPacket_
  6929 ;; Registers used:
  6930 ;;		wreg
  6931 ;; Tracked objects:
  6932 ;;		On entry : 1F/1
  6933 ;;		On exit  : 1F/1
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6936 ;;      Params:         0       0       0       0
  6937 ;;      Locals:         0       0       0       0
  6938 ;;      Temps:          0       0       0       0
  6939 ;;      Totals:         0       0       0       0
  6940 ;;Total ram usage:        0 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    5
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		_Mrf49xaTick
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _Mrf49xaRxPacket
  6952  05ED                     _Mrf49xaRxPacket:	
  6953                           
  6954                           ;mrf49xa_packet.c: 92: if (rfTrcvStatus.rxPacket[0].state == PKT_HW_READY_RX)
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _Mrf49xaRxPacket: [wreg]
  6958  05ED  0821               	movf	(_rfTrcvStatus^(0+128)+1),w
  6959  05EE  3A05               	xorlw	5
  6960  05EF  1D03               	skipz
  6961  05F0  2DF4               	goto	l3002
  6962                           
  6963                           ;mrf49xa_packet.c: 93: {
  6964                           ;mrf49xa_packet.c: 94: rfTrcvStatus.rxPacket[0].state = PKT_SW_BUSY;
  6965  05F1  3006               	movlw	6
  6966  05F2  00A1               	movwf	(_rfTrcvStatus^(0+128)+1)
  6967                           
  6968                           ;mrf49xa_packet.c: 95: return &(rfTrcvStatus.rxPacket[0]);
  6969  05F3  34A1               	retlw	(_rfTrcvStatus+1)& (0+255)
  6970  05F4                     l3002:	
  6971                           
  6972                           ;mrf49xa_packet.c: 96: }
  6973                           ;mrf49xa_packet.c: 98: if (rfTrcvStatus.rxPacket[1].state == PKT_HW_READY_RX)
  6974  05F4  083A               	movf	(_rfTrcvStatus^(0+128)+26),w
  6975  05F5  3A05               	xorlw	5
  6976  05F6  1D03               	skipz
  6977  05F7  3400               	retlw	0
  6978                           
  6979                           ;mrf49xa_packet.c: 99: {
  6980                           ;mrf49xa_packet.c: 100: rfTrcvStatus.rxPacket[1].state = PKT_SW_BUSY;
  6981  05F8  3006               	movlw	6
  6982  05F9  00BA               	movwf	(_rfTrcvStatus^(0+128)+26)
  6983                           
  6984                           ;mrf49xa_packet.c: 101: return &(rfTrcvStatus.rxPacket[1]);
  6985  05FA  34BA               	retlw	(_rfTrcvStatus+26)& (0+255)
  6986  05FB                     __end_of_Mrf49xaRxPacket:	
  6987                           ;mrf49xa_packet.c: 102: }
  6988                           ;mrf49xa_packet.c: 104: return (0);
  6989                           
  6990  05FB                     __ptext25:	
  6991 ;; *************** function _PwrAdcInit *****************
  6992 ;; Defined at:
  6993 ;;		line 149 in file "../../../src/node/power.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;		None               void
  7000 ;; Registers used:
  7001 ;;		status,2
  7002 ;; Tracked objects:
  7003 ;;		On entry : 17F/1
  7004 ;;		On exit  : 17F/1
  7005 ;;		Unchanged: 160/0
  7006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7007 ;;      Params:         0       0       0       0
  7008 ;;      Locals:         0       0       0       0
  7009 ;;      Temps:          0       0       0       0
  7010 ;;      Totals:         0       0       0       0
  7011 ;;Total ram usage:        0 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    5
  7014 ;; This function calls:
  7015 ;;		Nothing
  7016 ;; This function is called by:
  7017 ;;		_main
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           
  7022                           ;psect for function _PwrAdcInit
  7023  05FB                     _PwrAdcInit:	
  7024                           
  7025                           ;power.c: 151: ANSELA = 0;
  7026                           
  7027                           ;incstack = 0
  7028                           ; Regs used in _PwrAdcInit: [status,2]
  7029  05FB  0023               	movlb	3	; select bank3
  7030  05FC  018C               	clrf	12	;volatile
  7031                           
  7032                           ;power.c: 152: ANSELB = 0;
  7033  05FD  018D               	clrf	13	;volatile
  7034                           
  7035                           ;power.c: 153: ANSELC = 0;
  7036                           
  7037                           ;power.c: 155: PORTCbits.RC0 = 1;
  7038                           
  7039                           ;power.c: 156: TRISCbits.TRISC0 = 0;
  7040  05FE  271E               	fcall	PL22	;call to abstracted procedure
  7041  05FF  0008               	return
  7042  0600                     __end_of_PwrAdcInit:	
  7043  0600                     __ptext23:	
  7044 ;; *************** function _PwrI2cInit *****************
  7045 ;; Defined at:
  7046 ;;		line 61 in file "../../../src/node/power.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;		None
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;		None
  7051 ;; Return value:  Size  Location     Type
  7052 ;;		None               void
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0, pclath, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 17F/2
  7057 ;;		On exit  : 1F/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7060 ;;      Params:         0       0       0       0
  7061 ;;      Locals:         0       0       0       0
  7062 ;;      Temps:          0       0       0       0
  7063 ;;      Totals:         0       0       0       0
  7064 ;;Total ram usage:        0 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:    8
  7067 ;; This function calls:
  7068 ;;		_SoftI2cInit
  7069 ;; This function is called by:
  7070 ;;		_main
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           
  7075                           ;psect for function _PwrI2cInit
  7076  0600                     _PwrI2cInit:	
  7077                           
  7078                           ;power.c: 63: SoftI2cInit();
  7079                           
  7080                           ;incstack = 0
  7081                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
  7082  0600  226F               	fcall	_SoftI2cInit
  7083                           
  7084                           ;power.c: 65: TRISBbits.TRISB4 = 0;
  7085  0601  0021               	movlb	1	; select bank1
  7086  0602  120D               	bcf	13,4	;volatile
  7087                           
  7088                           ;power.c: 66: TRISBbits.TRISB6 = 0;
  7089  0603  130D               	bcf	13,6	;volatile
  7090                           
  7091                           ;power.c: 68: TRISBbits.TRISB5 = 1;
  7092  0604  168D               	bsf	13,5	;volatile
  7093                           
  7094                           ;power.c: 69: PORTBbits.RB5 = 1;
  7095  0605  0020               	movlb	0	; select bank0
  7096  0606  168D               	bsf	13,5	;volatile
  7097  0607  0008               	return
  7098  0608                     __end_of_PwrI2cInit:	
  7099  0608                     __ptext21:	
  7100 ;; *************** function _PwrI2cWake *****************
  7101 ;; Defined at:
  7102 ;;		line 81 in file "../../../src/node/power.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;		None
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;		None
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		None
  7111 ;; Tracked objects:
  7112 ;;		On entry : 1F/2
  7113 ;;		On exit  : 1F/2
  7114 ;;		Unchanged: 1F/0
  7115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7116 ;;      Params:         0       0       0       0
  7117 ;;      Locals:         0       0       0       0
  7118 ;;      Temps:          0       0       0       0
  7119 ;;      Totals:         0       0       0       0
  7120 ;;Total ram usage:        0 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:    5
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_main
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           
  7131                           ;psect for function _PwrI2cWake
  7132  0608                     _PwrI2cWake:	
  7133                           
  7134                           ;incstack = 0
  7135                           ; Regs used in _PwrI2cWake: []
  7136  0608  0008               	return
  7137  0609                     __end_of_PwrI2cWake:	
  7138  0609                     __ptext17:	
  7139 ;; *************** function _PwrRfSleep *****************
  7140 ;; Defined at:
  7141 ;;		line 118 in file "../../../src/node/power.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;		None               void
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, pclath, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 1E/1
  7152 ;;		On exit  : 1F/1
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7155 ;;      Params:         0       0       0       0
  7156 ;;      Locals:         0       0       0       0
  7157 ;;      Temps:          0       0       0       0
  7158 ;;      Totals:         0       0       0       0
  7159 ;;Total ram usage:        0 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    9
  7162 ;; This function calls:
  7163 ;;		_Mrf49xaShutdown
  7164 ;; This function is called by:
  7165 ;;		_main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           
  7170                           ;psect for function _PwrRfSleep
  7171  0609                     _PwrRfSleep:	
  7172                           
  7173                           ;power.c: 120: Mrf49xaShutdown();
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  7177  0609  26BE               	fcall	_Mrf49xaShutdown
  7178                           
  7179                           ;power.c: 121: INTCONbits.INTE = 1;
  7180  060A  160B               	bsf	11,4	;volatile
  7181  060B  0008               	return
  7182  060C                     __end_of_PwrRfSleep:	
  7183  060C                     __ptext15:	
  7184 ;; *************** function _PwrRfWake *****************
  7185 ;; Defined at:
  7186 ;;		line 124 in file "../../../src/node/power.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;		None
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;		None               void
  7193 ;; Registers used:
  7194 ;;		wreg, status,2, status,0, pclath, cstack
  7195 ;; Tracked objects:
  7196 ;;		On entry : 1F/1
  7197 ;;		On exit  : 1F/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7200 ;;      Params:         0       0       0       0
  7201 ;;      Locals:         0       0       0       0
  7202 ;;      Temps:          0       0       0       0
  7203 ;;      Totals:         0       0       0       0
  7204 ;;Total ram usage:        0 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    9
  7207 ;; This function calls:
  7208 ;;		_Mrf49xaReboot
  7209 ;; This function is called by:
  7210 ;;		_main
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           
  7215                           ;psect for function _PwrRfWake
  7216  060C                     _PwrRfWake:	
  7217                           
  7218                           ;power.c: 126: INTCONbits.INTE = 0;
  7219                           
  7220                           ;incstack = 0
  7221                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  7222  060C  120B               	bcf	11,4	;volatile
  7223                           
  7224                           ;power.c: 127: Mrf49xaReboot();
  7225  060D  2D9F               	ljmp	l2468
  7226  060E                     __end_of_PwrRfWake:	
  7227  060E                     __ptext14:	
  7228 ;; *************** function _PwrSensorInit *****************
  7229 ;; Defined at:
  7230 ;;		line 131 in file "../../../src/node/power.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;		None
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;		None               void
  7237 ;; Registers used:
  7238 ;;		None
  7239 ;; Tracked objects:
  7240 ;;		On entry : 17F/1
  7241 ;;		On exit  : 17F/2
  7242 ;;		Unchanged: 160/0
  7243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7244 ;;      Params:         0       0       0       0
  7245 ;;      Locals:         0       0       0       0
  7246 ;;      Temps:          0       0       0       0
  7247 ;;      Totals:         0       0       0       0
  7248 ;;Total ram usage:        0 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    5
  7251 ;; This function calls:
  7252 ;;		Nothing
  7253 ;; This function is called by:
  7254 ;;		_main
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           
  7259                           ;psect for function _PwrSensorInit
  7260  060E                     _PwrSensorInit:	
  7261                           
  7262                           ;power.c: 133: TRISCbits.TRISC2 = 0;
  7263                           
  7264                           ;incstack = 0
  7265                           ; Regs used in _PwrSensorInit: []
  7266  060E  110E               	bcf	14,2	;volatile
  7267                           
  7268                           ;power.c: 135: LATCbits.LATC2 = 0;
  7269  060F  0022               	movlb	2	; select bank2
  7270  0610  110E               	bcf	14,2	;volatile
  7271  0611  0008               	return
  7272  0612                     __end_of_PwrSensorInit:	
  7273  0612                     __ptext12:	
  7274 ;; *************** function _PwrSensorWake *****************
  7275 ;; Defined at:
  7276 ;;		line 143 in file "../../../src/node/power.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;		None
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		None
  7285 ;; Tracked objects:
  7286 ;;		On entry : 1F/0
  7287 ;;		On exit  : 1F/2
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7290 ;;      Params:         0       0       0       0
  7291 ;;      Locals:         0       0       0       0
  7292 ;;      Temps:          0       0       0       0
  7293 ;;      Totals:         0       0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    5
  7297 ;; This function calls:
  7298 ;;		Nothing
  7299 ;; This function is called by:
  7300 ;;		_main
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _PwrSensorWake
  7306  0612                     _PwrSensorWake:	
  7307                           
  7308                           ;power.c: 145: LATCbits.LATC2 = 1;
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _PwrSensorWake: []
  7312  0612  0022               	movlb	2	; select bank2
  7313  0613  150E               	bsf	14,2	;volatile
  7314  0614  0008               	return
  7315  0615                     __end_of_PwrSensorWake:	
  7316  0615                     __ptext4:	
  7317 ;; *************** function _PwrAdcSleep *****************
  7318 ;; Defined at:
  7319 ;;		line 159 in file "../../../src/node/power.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;		None
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;		None
  7324 ;; Return value:  Size  Location     Type
  7325 ;;		None               void
  7326 ;; Registers used:
  7327 ;;		status,2, status,0, pclath, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 1E/1
  7330 ;;		On exit  : 1F/1
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7333 ;;      Params:         0       0       0       0
  7334 ;;      Locals:         0       0       0       0
  7335 ;;      Temps:          0       0       0       0
  7336 ;;      Totals:         0       0       0       0
  7337 ;;Total ram usage:        0 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    6
  7340 ;; This function calls:
  7341 ;;		_AdcDeinit
  7342 ;; This function is called by:
  7343 ;;		_RfSendPowerState
  7344 ;;		_main
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function _PwrAdcSleep
  7350  0615                     _PwrAdcSleep:	
  7351                           
  7352                           ;power.c: 161: ANSELC = 0;
  7353                           
  7354                           ;incstack = 0
  7355                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7356  0615  0023               	movlb	3	; select bank3
  7357                           
  7358                           ;power.c: 162: PORTCbits.RC0 = 1;
  7359                           
  7360                           ;power.c: 163: TRISCbits.TRISC0 = 0;
  7361  0616  271E  3180         	fcall	PL22	;call to abstracted procedure
  7362                           
  7363                           ;power.c: 165: AdcDeinit();
  7364  0618  2EC0               	ljmp	l2650
  7365  0619                     __end_of_PwrAdcSleep:	
  7366  0619                     __ptext51:	
  7367 ;; *************** function _ExtIntInit *****************
  7368 ;; Defined at:
  7369 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;		None
  7374 ;; Return value:  Size  Location     Type
  7375 ;;		None               void
  7376 ;; Registers used:
  7377 ;;		None
  7378 ;; Tracked objects:
  7379 ;;		On entry : 1F/0
  7380 ;;		On exit  : 1F/1
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7383 ;;      Params:         0       0       0       0
  7384 ;;      Locals:         0       0       0       0
  7385 ;;      Temps:          0       0       0       0
  7386 ;;      Totals:         0       0       0       0
  7387 ;;Total ram usage:        0 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    5
  7390 ;; This function calls:
  7391 ;;		Nothing
  7392 ;; This function is called by:
  7393 ;;		_Mrf49xaTick
  7394 ;;		_PwrRfInit
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           
  7399                           ;psect for function _ExtIntInit
  7400  0619                     _ExtIntInit:	
  7401  0619                     l2910:	
  7402                           ;incstack = 0
  7403                           ; Regs used in _ExtIntInit: []
  7404                           
  7405                           
  7406                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  7407  0619  0021               	movlb	1	; select bank1
  7408  061A  1315               	bcf	21,6	;volatile
  7409                           
  7410                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  7411  061B  108B               	bcf	11,1	;volatile
  7412                           
  7413                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  7414  061C  160B               	bsf	11,4	;volatile
  7415                           
  7416                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  7417  061D  178B               	bsf	11,7	;volatile
  7418  061E  0008               	return
  7419  061F                     __end_of_ExtIntInit:	
  7420  061F                     __ptext40:	
  7421 ;; *************** function _Mrf49SpiRx *****************
  7422 ;; Defined at:
  7423 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;  data            1    0[BANK0 ] unsigned char 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      unsigned char 
  7430 ;; Registers used:
  7431 ;;		wreg, status,2
  7432 ;; Tracked objects:
  7433 ;;		On entry : 1F/0
  7434 ;;		On exit  : 1F/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7437 ;;      Params:         0       0       0       0
  7438 ;;      Locals:         0       1       0       0
  7439 ;;      Temps:          0       0       0       0
  7440 ;;      Totals:         0       1       0       0
  7441 ;;Total ram usage:        1 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    5
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_Mrf49RxCmd
  7448 ;;		_Mrf49RxSts
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           
  7453                           ;psect for function _Mrf49SpiRx
  7454  061F                     _Mrf49SpiRx:	
  7455                           
  7456                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  7457                           
  7458                           ;incstack = 0
  7459                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  7460  061F  01A0               	clrf	Mrf49SpiRx@data
  7461                           
  7462                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  7463  0620  138D               	bcf	13,7	;volatile
  7464  0621  1A8E               	btfsc	14,5	;volatile
  7465  0622  17A0               	bsf	Mrf49SpiRx@data,7
  7466  0623  0022               	movlb	2	; select bank2
  7467  0624  178E               	bsf	14,7	;volatile
  7468  0625  0000               	nop	;# 
  7469  0626  0022               	movlb	2	; select bank2
  7470  0627  138E               	bcf	14,7	;volatile
  7471                           
  7472                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7473  0628  0020               	movlb	0	; select bank0
  7474  0629  1A8E               	btfsc	14,5	;volatile
  7475  062A  1720               	bsf	Mrf49SpiRx@data,6
  7476  062B  0022               	movlb	2	; select bank2
  7477  062C  178E               	bsf	14,7	;volatile
  7478  062D  0000               	nop	;# 
  7479  062E  0022               	movlb	2	; select bank2
  7480  062F  138E               	bcf	14,7	;volatile
  7481                           
  7482                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7483  0630  0020               	movlb	0	; select bank0
  7484  0631  1A8E               	btfsc	14,5	;volatile
  7485  0632  16A0               	bsf	Mrf49SpiRx@data,5
  7486  0633  0022               	movlb	2	; select bank2
  7487  0634  178E               	bsf	14,7	;volatile
  7488  0635  0000               	nop	;# 
  7489  0636  0022               	movlb	2	; select bank2
  7490  0637  138E               	bcf	14,7	;volatile
  7491                           
  7492                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7493  0638  0020               	movlb	0	; select bank0
  7494  0639  1A8E               	btfsc	14,5	;volatile
  7495  063A  1620               	bsf	Mrf49SpiRx@data,4
  7496  063B  0022               	movlb	2	; select bank2
  7497  063C  178E               	bsf	14,7	;volatile
  7498  063D  0000               	nop	;# 
  7499  063E  0022               	movlb	2	; select bank2
  7500  063F  138E               	bcf	14,7	;volatile
  7501                           
  7502                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7503  0640  0020               	movlb	0	; select bank0
  7504  0641  1A8E               	btfsc	14,5	;volatile
  7505  0642  15A0               	bsf	Mrf49SpiRx@data,3
  7506  0643  0022               	movlb	2	; select bank2
  7507  0644  178E               	bsf	14,7	;volatile
  7508  0645  0000               	nop	;# 
  7509  0646  0022               	movlb	2	; select bank2
  7510  0647  138E               	bcf	14,7	;volatile
  7511                           
  7512                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7513  0648  0020               	movlb	0	; select bank0
  7514  0649  1A8E               	btfsc	14,5	;volatile
  7515  064A  1520               	bsf	Mrf49SpiRx@data,2
  7516  064B  0022               	movlb	2	; select bank2
  7517  064C  178E               	bsf	14,7	;volatile
  7518  064D  0000               	nop	;# 
  7519  064E  0022               	movlb	2	; select bank2
  7520  064F  138E               	bcf	14,7	;volatile
  7521                           
  7522                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7523  0650  0020               	movlb	0	; select bank0
  7524  0651  1A8E               	btfsc	14,5	;volatile
  7525  0652  14A0               	bsf	Mrf49SpiRx@data,1
  7526  0653  0022               	movlb	2	; select bank2
  7527  0654  178E               	bsf	14,7	;volatile
  7528  0655  0000               	nop	;# 
  7529  0656  0022               	movlb	2	; select bank2
  7530  0657  138E               	bcf	14,7	;volatile
  7531                           
  7532                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7533  0658  0020               	movlb	0	; select bank0
  7534  0659  1A8E               	btfsc	14,5	;volatile
  7535  065A  1420               	bsf	Mrf49SpiRx@data,0
  7536  065B  0022               	movlb	2	; select bank2
  7537  065C  178E               	bsf	14,7	;volatile
  7538  065D  0000               	nop	;# 
  7539  065E  0022               	movlb	2	; select bank2
  7540  065F  138E               	bcf	14,7	;volatile
  7541                           
  7542                           ;mrf49xa_spi_pic16.c: 40: return data;
  7543  0660  0020               	movlb	0	; select bank0
  7544  0661  0820               	movf	Mrf49SpiRx@data,w
  7545  0662  0008               	return
  7546  0663                     __end_of_Mrf49SpiRx:	
  7547  0663                     __ptext39:	
  7548 ;; *************** function _Mrf49SpiTx *****************
  7549 ;; Defined at:
  7550 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  byte            1    wreg     unsigned char 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  byte            1    0[BANK0 ] unsigned char 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;		None               void
  7557 ;; Registers used:
  7558 ;;		wreg
  7559 ;; Tracked objects:
  7560 ;;		On entry : 1F/0
  7561 ;;		On exit  : 1F/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7564 ;;      Params:         0       0       0       0
  7565 ;;      Locals:         0       1       0       0
  7566 ;;      Temps:          0       0       0       0
  7567 ;;      Totals:         0       1       0       0
  7568 ;;Total ram usage:        1 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    5
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_Mrf49TxCmd
  7575 ;;		_Mrf49RxCmd
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           
  7580                           ;psect for function _Mrf49SpiTx
  7581  0663                     _Mrf49SpiTx:	
  7582                           
  7583                           ;incstack = 0
  7584                           ; Regs used in _Mrf49SpiTx: [wreg]
  7585                           ;Mrf49SpiTx@byte stored from wreg
  7586  0663  00A0               	movwf	Mrf49SpiTx@byte
  7587                           
  7588                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  7589  0664  1FA0               	btfss	Mrf49SpiTx@byte,7
  7590  0665  2E68               	goto	l255
  7591  0666  178D               	bsf	13,7	;volatile
  7592  0667  2E69               	goto	l256
  7593  0668                     l255:	
  7594  0668  138D               	bcf	13,7	;volatile
  7595  0669                     l256:	
  7596  0669  0022               	movlb	2	; select bank2
  7597  066A  178E               	bsf	14,7	;volatile
  7598  066B  0000               	nop	;# 
  7599  066C  0022               	movlb	2	; select bank2
  7600  066D  138E               	bcf	14,7	;volatile
  7601  066E  0020               	movlb	0	; select bank0
  7602  066F  1F20               	btfss	Mrf49SpiTx@byte,6
  7603  0670  2E73               	goto	l259
  7604  0671  178D               	bsf	13,7	;volatile
  7605  0672  2E74               	goto	l260
  7606  0673                     l259:	
  7607  0673  138D               	bcf	13,7	;volatile
  7608  0674                     l260:	
  7609  0674  0022               	movlb	2	; select bank2
  7610  0675  178E               	bsf	14,7	;volatile
  7611  0676  0000               	nop	;# 
  7612  0677  0022               	movlb	2	; select bank2
  7613  0678  138E               	bcf	14,7	;volatile
  7614  0679  0020               	movlb	0	; select bank0
  7615  067A  1EA0               	btfss	Mrf49SpiTx@byte,5
  7616  067B  2E7E               	goto	l263
  7617  067C  178D               	bsf	13,7	;volatile
  7618  067D  2E7F               	goto	l264
  7619  067E                     l263:	
  7620  067E  138D               	bcf	13,7	;volatile
  7621  067F                     l264:	
  7622  067F  0022               	movlb	2	; select bank2
  7623  0680  178E               	bsf	14,7	;volatile
  7624  0681  0000               	nop	;# 
  7625  0682  0022               	movlb	2	; select bank2
  7626  0683  138E               	bcf	14,7	;volatile
  7627  0684  0020               	movlb	0	; select bank0
  7628  0685  1E20               	btfss	Mrf49SpiTx@byte,4
  7629  0686  2E89               	goto	l267
  7630  0687  178D               	bsf	13,7	;volatile
  7631  0688  2E8A               	goto	l268
  7632  0689                     l267:	
  7633  0689  138D               	bcf	13,7	;volatile
  7634  068A                     l268:	
  7635  068A  0022               	movlb	2	; select bank2
  7636  068B  178E               	bsf	14,7	;volatile
  7637  068C  0000               	nop	;# 
  7638  068D  0022               	movlb	2	; select bank2
  7639  068E  138E               	bcf	14,7	;volatile
  7640  068F  0020               	movlb	0	; select bank0
  7641  0690  1DA0               	btfss	Mrf49SpiTx@byte,3
  7642  0691  2E94               	goto	l271
  7643  0692  178D               	bsf	13,7	;volatile
  7644  0693  2E95               	goto	l272
  7645  0694                     l271:	
  7646  0694  138D               	bcf	13,7	;volatile
  7647  0695                     l272:	
  7648  0695  0022               	movlb	2	; select bank2
  7649  0696  178E               	bsf	14,7	;volatile
  7650  0697  0000               	nop	;# 
  7651  0698  0022               	movlb	2	; select bank2
  7652  0699  138E               	bcf	14,7	;volatile
  7653  069A  0020               	movlb	0	; select bank0
  7654  069B  1D20               	btfss	Mrf49SpiTx@byte,2
  7655  069C  2E9F               	goto	l275
  7656  069D  178D               	bsf	13,7	;volatile
  7657  069E  2EA0               	goto	l276
  7658  069F                     l275:	
  7659  069F  138D               	bcf	13,7	;volatile
  7660  06A0                     l276:	
  7661  06A0  0022               	movlb	2	; select bank2
  7662  06A1  178E               	bsf	14,7	;volatile
  7663  06A2  0000               	nop	;# 
  7664  06A3  0022               	movlb	2	; select bank2
  7665  06A4  138E               	bcf	14,7	;volatile
  7666  06A5  0020               	movlb	0	; select bank0
  7667  06A6  1CA0               	btfss	Mrf49SpiTx@byte,1
  7668  06A7  2EAA               	goto	l279
  7669  06A8  178D               	bsf	13,7	;volatile
  7670  06A9  2EAB               	goto	l280
  7671  06AA                     l279:	
  7672  06AA  138D               	bcf	13,7	;volatile
  7673  06AB                     l280:	
  7674  06AB  0022               	movlb	2	; select bank2
  7675  06AC  178E               	bsf	14,7	;volatile
  7676  06AD  0000               	nop	;# 
  7677  06AE  0022               	movlb	2	; select bank2
  7678  06AF  138E               	bcf	14,7	;volatile
  7679  06B0  0020               	movlb	0	; select bank0
  7680  06B1  1C20               	btfss	Mrf49SpiTx@byte,0
  7681  06B2  2EB5               	goto	l283
  7682  06B3  178D               	bsf	13,7	;volatile
  7683  06B4  2EB6               	goto	l284
  7684  06B5                     l283:	
  7685  06B5  138D               	bcf	13,7	;volatile
  7686  06B6                     l284:	
  7687  06B6  0022               	movlb	2	; select bank2
  7688  06B7  178E               	bsf	14,7	;volatile
  7689  06B8  0000               	nop	;# 
  7690  06B9  0022               	movlb	2	; select bank2
  7691  06BA  138E               	bcf	14,7	;volatile
  7692                           
  7693                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  7694  06BB  0020               	movlb	0	; select bank0
  7695  06BC  138D               	bcf	13,7	;volatile
  7696  06BD  0008               	return
  7697  06BE                     __end_of_Mrf49SpiTx:	
  7698  06BE                     __ptext18:	
  7699 ;; *************** function _Mrf49xaShutdown *****************
  7700 ;; Defined at:
  7701 ;;		line 131 in file "../../../src/devices/mrf49xa.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, pclath, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 1E/1
  7712 ;;		On exit  : 1F/1
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7715 ;;      Params:         0       0       0       0
  7716 ;;      Locals:         0       0       0       0
  7717 ;;      Temps:          0       0       0       0
  7718 ;;      Totals:         0       0       0       0
  7719 ;;Total ram usage:        0 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    8
  7722 ;; This function calls:
  7723 ;;		_Mrf49xaModeSleep
  7724 ;; This function is called by:
  7725 ;;		_PwrRfSleep
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _Mrf49xaShutdown
  7731  06BE                     _Mrf49xaShutdown:	
  7732                           
  7733                           ;mrf49xa.c: 133: Mrf49xaModeSleep();
  7734                           
  7735                           ;incstack = 0
  7736                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  7737  06BE  2830               	ljmp	l2790
  7738  06BF                     __end_of_Mrf49xaShutdown:	
  7739  06BF                     __ptext16:	
  7740 ;; *************** function _Mrf49xaReboot *****************
  7741 ;; Defined at:
  7742 ;;		line 139 in file "../../../src/devices/mrf49xa.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;		None
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;		None
  7747 ;; Return value:  Size  Location     Type
  7748 ;;		None               void
  7749 ;; Registers used:
  7750 ;;		wreg, status,2, status,0, pclath, cstack
  7751 ;; Tracked objects:
  7752 ;;		On entry : 1F/1
  7753 ;;		On exit  : 1F/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7756 ;;      Params:         0       0       0       0
  7757 ;;      Locals:         0       0       0       0
  7758 ;;      Temps:          0       0       0       0
  7759 ;;      Totals:         0       0       0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    8
  7763 ;; This function calls:
  7764 ;;		_Mrf49xaModeRx
  7765 ;; This function is called by:
  7766 ;;		_PwrRfWake
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _Mrf49xaReboot
  7772  06BF                     _Mrf49xaReboot:	
  7773                           
  7774                           ;mrf49xa.c: 141: Mrf49xaModeRx();
  7775                           
  7776                           ;incstack = 0
  7777                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  7778  06BF  2D9F               	ljmp	l2468
  7779  06C0                     __end_of_Mrf49xaReboot:	
  7780  06C0                     __ptext5:	
  7781 ;; *************** function _AdcDeinit *****************
  7782 ;; Defined at:
  7783 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  7784 ;; Parameters:    Size  Location     Type
  7785 ;;		None
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;		None
  7788 ;; Return value:  Size  Location     Type
  7789 ;;		None               void
  7790 ;; Registers used:
  7791 ;;		status,2
  7792 ;; Tracked objects:
  7793 ;;		On entry : 1F/1
  7794 ;;		On exit  : 1F/1
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7797 ;;      Params:         0       0       0       0
  7798 ;;      Locals:         0       0       0       0
  7799 ;;      Temps:          0       0       0       0
  7800 ;;      Totals:         0       0       0       0
  7801 ;;Total ram usage:        0 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    5
  7804 ;; This function calls:
  7805 ;;		Nothing
  7806 ;; This function is called by:
  7807 ;;		_PwrAdcSleep
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           
  7812                           ;psect for function _AdcDeinit
  7813  06C0                     _AdcDeinit:	
  7814  06C0                     l2650:	
  7815                           ;incstack = 0
  7816                           ; Regs used in _AdcDeinit: [status,2]
  7817                           
  7818                           
  7819                           ;adc16.c: 17: FVRCON = 0;
  7820  06C0  0022               	movlb	2	; select bank2
  7821  06C1  0197               	clrf	23	;volatile
  7822                           
  7823                           ;adc16.c: 19: ADCON2 = 0;
  7824  06C2  0021               	movlb	1	; select bank1
  7825  06C3  019F               	clrf	31	;volatile
  7826                           
  7827                           ;adc16.c: 20: ADCON1 = 0;
  7828  06C4  019E               	clrf	30	;volatile
  7829                           
  7830                           ;adc16.c: 21: ADCON0 = 0;
  7831  06C5  019D               	clrf	29	;volatile
  7832  06C6  0008               	return
  7833  06C7                     __end_of_AdcDeinit:	
  7834  06C7                     __ptext3:	
  7835 ;; *************** function _AdcInit *****************
  7836 ;; Defined at:
  7837 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;		None
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;		None
  7842 ;; Return value:  Size  Location     Type
  7843 ;;		None               void
  7844 ;; Registers used:
  7845 ;;		wreg, status,2
  7846 ;; Tracked objects:
  7847 ;;		On entry : 1F/1
  7848 ;;		On exit  : 1F/1
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7851 ;;      Params:         0       0       0       0
  7852 ;;      Locals:         0       0       0       0
  7853 ;;      Temps:          0       0       0       0
  7854 ;;      Totals:         0       0       0       0
  7855 ;;Total ram usage:        0 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; Hardware stack levels required when called:    5
  7858 ;; This function calls:
  7859 ;;		Nothing
  7860 ;; This function is called by:
  7861 ;;		_PwrAdcWake
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function _AdcInit
  7867  06C7                     _AdcInit:	
  7868  06C7                     l2642:	
  7869                           ;incstack = 0
  7870                           ; Regs used in _AdcInit: [wreg+status,2]
  7871                           
  7872                           
  7873                           ;adc16.c: 6: FVRCON = 0b11100001;
  7874  06C7  30E1               	movlw	225
  7875  06C8  0022               	movlb	2	; select bank2
  7876  06C9  0097               	movwf	23	;volatile
  7877                           
  7878                           ;adc16.c: 8: ADCON2 = 0b00000000;
  7879  06CA  0021               	movlb	1	; select bank1
  7880  06CB  019F               	clrf	31	;volatile
  7881                           
  7882                           ;adc16.c: 9: ADCON1 = 0b11110000;
  7883  06CC  30F0               	movlw	240
  7884  06CD  009E               	movwf	30	;volatile
  7885                           
  7886                           ;adc16.c: 10: ADCON0 = 0b00000000;
  7887  06CE  019D               	clrf	29	;volatile
  7888                           
  7889                           ;adc16.c: 12: ADCON0 = 0b00010011;
  7890  06CF  3013               	movlw	19
  7891  06D0  009D               	movwf	29	;volatile
  7892  06D1  0008               	return
  7893  06D2                     __end_of_AdcInit:	
  7894  06D2                     PL8:	
  7895  06D2  0825               	movf	Mrf49xaTxPacket@packet,w
  7896  06D3  3E02               	addlw	2
  7897  06D4  0086               	movwf	6
  7898  06D5  0187               	clrf	7
  7899  06D6  0021               	movlb	1	; select bank1
  7900  06D7  086E               	movf	(_rfTrcvStatus^(0+128)+78),w
  7901  06D8  0081               	movwf	1
  7902  06D9  0020               	movlb	0	; select bank0
  7903  06DA  0A25               	incf	Mrf49xaTxPacket@packet,w
  7904  06DB  0086               	movwf	6
  7905  06DC  3005               	movlw	5
  7906  06DD  0781               	addwf	1,f
  7907  06DE  0021               	movlb	1	; select bank1
  7908  06DF  30F0               	movlw	-16
  7909  06E0  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  7910  06E1  0AD3               	incf	(_rfTrcvStatus^(0+128)+51),f
  7911  06E2  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  7912  06E3  30CF               	movlw	-49
  7913  06E4  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  7914  06E5  0020               	movlb	0	; select bank0
  7915  06E6  0321               	decf	Mrf49xaTxPacket@needAck,w
  7916  06E7  3000               	movlw	0
  7917  06E8  1903               	skipnz
  7918  06E9  3001               	movlw	1
  7919  06EA  0021               	movlb	1	; select bank1
  7920  06EB  00EA               	movwf	(_rfTrcvStatus^(0+128)+74)
  7921  06EC  0008               	return
  7922  06ED                     __end_ofPL8:	
  7923  06ED                     PL10:	
  7924  06ED  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  7925  06EE  390F               	andlw	15
  7926  06EF  0020               	movlb	0	; select bank0
  7927  06F0  00B6               	movwf	??_Mrf49xaTick
  7928  06F1  0AB6               	incf	??_Mrf49xaTick,f
  7929  06F2  0021               	movlb	1	; select bank1
  7930  06F3  086B               	movf	(_rfTrcvStatus^(0+128)+75),w
  7931  06F4  0020               	movlb	0	; select bank0
  7932  06F5  0636               	xorwf	??_Mrf49xaTick,w
  7933  06F6  39F0               	andlw	-16
  7934  06F7  0636               	xorwf	??_Mrf49xaTick,w
  7935  06F8  0021               	movlb	1	; select bank1
  7936  06F9  00EB               	movwf	(_rfTrcvStatus^(0+128)+75)
  7937  06FA  0008               	return
  7938  06FB                     __end_ofPL10:	
  7939  06FB                     PL12:	
  7940  06FB  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7941  06FC  397F               	andlw	127
  7942  06FD  0020               	movlb	0	; select bank0
  7943  06FE  00A4               	movwf	??_Mrf49xaServe
  7944  06FF  0AA4               	incf	??_Mrf49xaServe,f
  7945  0700  0021               	movlb	1	; select bank1
  7946  0701  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  7947  0702  0020               	movlb	0	; select bank0
  7948  0703  0624               	xorwf	??_Mrf49xaServe,w
  7949  0704  3980               	andlw	-128
  7950  0705  0624               	xorwf	??_Mrf49xaServe,w
  7951  0706  0021               	movlb	1	; select bank1
  7952  0707  0008               	return
  7953  0708                     __end_ofPL12:	
  7954  0708                     PL14:	
  7955  0708  3E03               	addlw	3
  7956  0709  0086               	movwf	6
  7957  070A  0187               	clrf	7
  7958  070B  0825               	movf	Mrf49xaTxPacket@packet,w
  7959  070C  3E02               	addlw	2
  7960  070D  0084               	movwf	4
  7961  070E  0185               	clrf	5
  7962  070F  0800               	movf	0,w
  7963  0710  0081               	movwf	1
  7964  0711  0008               	return
  7965  0712                     __end_ofPL14:	
  7966  0712                     PL18:	
  7967  0712  0020               	movlb	0	; select bank0
  7968  0713  0825               	movf	Mrf49xaServe@data,w
  7969  0714  0081               	movwf	1
  7970  0715  0021               	movlb	1	; select bank1
  7971  0716  0820               	movf	_rfTrcvStatus^(0+128),w
  7972  0717  0008               	return
  7973  0718                     __end_ofPL18:	
  7974  0718                     PL20:	
  7975  0718  170D               	bsf	13,6	;volatile
  7976  0719  160D               	bsf	13,4	;volatile
  7977  071A  0021               	movlb	1	; select bank1
  7978  071B  130D               	bcf	13,6	;volatile
  7979  071C  120D               	bcf	13,4	;volatile
  7980  071D  0008               	return
  7981  071E                     __end_ofPL20:	
  7982  071E                     PL22:	
  7983  071E  018E               	clrf	14	;volatile
  7984  071F  0020               	movlb	0	; select bank0
  7985  0720  140E               	bsf	14,0	;volatile
  7986  0721  0021               	movlb	1	; select bank1
  7987  0722  100E               	bcf	14,0	;volatile
  7988  0723  0008               	return
  7989  0724                     __end_ofPL22:	
  7990  0724                     PL24:	
  7991  0724  3040               	movlw	64
  7992  0725  0020               	movlb	0	; select bank0
  7993  0726  00A0               	movwf	Sleepy@ms
  7994  0727  01A1               	clrf	Sleepy@ms+1
  7995  0728  0008               	return
  7996  0729                     __end_ofPL24:	
  7997  0729                     PL26:	
  7998  0729  3E0E               	addlw	14
  7999  072A  00A6               	movwf	eepromRxBytes@data
  8000  072B  3008               	movlw	8
  8001  072C  00A7               	movwf	eepromRxBytes@size
  8002  072D  0008               	return
  8003  072E                     __end_ofPL26:	
  8004                           
  8005                           	psect	bssBANK0
  8006  0039                     __pbssBANK0:	
  8007  0039                     _mrf49Status:	
  8008  0039                     	ds	2
  8009                           
  8010                           	psect	dataBANK0
  8011  003B                     __pdataBANK0:	
  8012  003B                     _coldBoot:	
  8013  003B                     	ds	1
  8014                           
  8015                           	psect	bssBANK1
  8016  00A0                     __pbssBANK1:	
  8017  00A0                     _rfTrcvStatus:	
  8018  00A0                     	ds	79
  8019                           
  8020                           	psect	clrtext
  8021  077D                     clear_ram0:	
  8022                           ;	Called with FSR0 containing the base address, and
  8023                           ;	WREG with the size to clear
  8024                           
  8025  077D  0064               	clrwdt	;clear the watchdog before getting into this loop
  8026  077E                     clrloop0:	
  8027  077E  0180               	clrf	0	;clear RAM location pointed to by FSR
  8028  077F  3101               	addfsr 0,1
  8029  0780  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8030  0781  2F7E               	goto	clrloop0	;have we reached the end yet?
  8031  0782  3400               	retlw	0	;all done for this memory range, return
  8032                           
  8033                           	psect	cstackCOMMON
  8034  0070                     __pcstackCOMMON:	
  8035  0070                     ?_SoftI2cStart:	
  8036  0070                     ?_SoftI2cStop:	
  8037                           ; 0 bytes @ 0x0
  8038                           
  8039  0070                     ?_Mrf49RxSts:	
  8040                           ; 0 bytes @ 0x0
  8041                           
  8042  0070                     ?_HandlePacket:	
  8043                           ; 0 bytes @ 0x0
  8044                           
  8045  0070                     ?_PwrAdcWake:	
  8046                           ; 0 bytes @ 0x0
  8047                           
  8048  0070                     ?_PwrAdcSleep:	
  8049                           ; 0 bytes @ 0x0
  8050                           
  8051  0070                     ?_PwrAdcInit:	
  8052                           ; 0 bytes @ 0x0
  8053                           
  8054  0070                     ?_PwrSensorInit:	
  8055                           ; 0 bytes @ 0x0
  8056                           
  8057  0070                     ?_PwrI2cInit:	
  8058                           ; 0 bytes @ 0x0
  8059                           
  8060  0070                     ?_PwrRfInit:	
  8061                           ; 0 bytes @ 0x0
  8062                           
  8063  0070                     ?_PwrSensorSleep:	
  8064                           ; 0 bytes @ 0x0
  8065                           
  8066  0070                     ?_PwrI2cSleep:	
  8067                           ; 0 bytes @ 0x0
  8068                           
  8069  0070                     ?_PwrRfSleep:	
  8070                           ; 0 bytes @ 0x0
  8071                           
  8072  0070                     ?_PwrSensorWake:	
  8073                           ; 0 bytes @ 0x0
  8074                           
  8075  0070                     ?_PwrI2cWake:	
  8076                           ; 0 bytes @ 0x0
  8077                           
  8078  0070                     ?_PwrRfWake:	
  8079                           ; 0 bytes @ 0x0
  8080                           
  8081  0070                     ?_SoftI2cNop:	
  8082                           ; 0 bytes @ 0x0
  8083                           
  8084  0070                     ?_SoftI2cInit:	
  8085                           ; 0 bytes @ 0x0
  8086                           
  8087  0070                     ?_SoftI2cRepeatedStart:	
  8088                           ; 0 bytes @ 0x0
  8089                           
  8090  0070                     ?_AdcInit:	
  8091                           ; 0 bytes @ 0x0
  8092                           
  8093  0070                     ?_AdcDeinit:	
  8094                           ; 0 bytes @ 0x0
  8095                           
  8096  0070                     ?_AdcGo:	
  8097                           ; 0 bytes @ 0x0
  8098                           
  8099  0070                     ?_AdcChSelect:	
  8100                           ; 0 bytes @ 0x0
  8101                           
  8102  0070                     ?_ExtIntInit:	
  8103                           ; 0 bytes @ 0x0
  8104                           
  8105  0070                     ?_ExtIntDeinit:	
  8106                           ; 0 bytes @ 0x0
  8107                           
  8108  0070                     ??_ExtIntDeinit:	
  8109                           ; 0 bytes @ 0x0
  8110                           
  8111  0070                     ?_extInt:	
  8112                           ; 0 bytes @ 0x0
  8113                           
  8114  0070                     ?_Mcp9800Start:	
  8115                           ; 0 bytes @ 0x0
  8116                           
  8117  0070                     ?_Mrf49xaModeRx:	
  8118                           ; 0 bytes @ 0x0
  8119                           
  8120  0070                     ?_Mrf49xaModeTx:	
  8121                           ; 0 bytes @ 0x0
  8122                           
  8123  0070                     ?_Mrf49xaModeSleep:	
  8124                           ; 0 bytes @ 0x0
  8125                           
  8126  0070                     ?_Mrf49xaShutdown:	
  8127                           ; 0 bytes @ 0x0
  8128                           
  8129  0070                     ?_Mrf49xaReboot:	
  8130                           ; 0 bytes @ 0x0
  8131                           
  8132  0070                     ?_Mrf49xaInit:	
  8133                           ; 0 bytes @ 0x0
  8134                           
  8135  0070                     ?_Mrf49SpiTx:	
  8136                           ; 0 bytes @ 0x0
  8137                           
  8138  0070                     ?_Mrf49TxByte:	
  8139                           ; 0 bytes @ 0x0
  8140                           
  8141  0070                     ?_Mrf49xaTxAck:	
  8142                           ; 0 bytes @ 0x0
  8143                           
  8144  0070                     ?_Mrf49xaFreePacket:	
  8145                           ; 0 bytes @ 0x0
  8146                           
  8147  0070                     ?_Mrf49xaTick:	
  8148                           ; 0 bytes @ 0x0
  8149                           
  8150  0070                     ?_RfSendPowerState:	
  8151                           ; 0 bytes @ 0x0
  8152                           
  8153  0070                     ?_handleFwCmd:	
  8154                           ; 0 bytes @ 0x0
  8155                           
  8156  0070                     ?_handleFwWrite:	
  8157                           ; 0 bytes @ 0x0
  8158                           
  8159  0070                     ?_handleFwRead:	
  8160                           ; 0 bytes @ 0x0
  8161                           
  8162  0070                     ?_main:	
  8163                           ; 0 bytes @ 0x0
  8164                           
  8165  0070                     ?i1_Mrf49xaModeRx:	
  8166                           ; 0 bytes @ 0x0
  8167                           
  8168  0070                     ??i1_Mrf49xaNeedsReset:	
  8169                           ; 0 bytes @ 0x0
  8170                           
  8171  0070                     ?i1_Mrf49SpiTx:	
  8172                           ; 0 bytes @ 0x0
  8173                           
  8174  0070                     ??i1_Mrf49SpiTx:	
  8175                           ; 0 bytes @ 0x0
  8176                           
  8177  0070                     ??i1_Mrf49SpiRx:	
  8178                           ; 0 bytes @ 0x0
  8179                           
  8180  0070                     ?i1_Mrf49RxSts:	
  8181                           ; 0 bytes @ 0x0
  8182                           
  8183  0070                     ?i1_Mrf49TxByte:	
  8184                           ; 0 bytes @ 0x0
  8185                           
  8186  0070                     ?_SoftI2cTxByte:	
  8187                           ; 0 bytes @ 0x0
  8188                           
  8189  0070                     ?_Mrf49xaServe:	
  8190                           ; 1 bytes @ 0x0
  8191                           
  8192  0070                     ?_SoftI2cRxByte:	
  8193                           ; 1 bytes @ 0x0
  8194                           
  8195  0070                     ?_AdcIsBusy:	
  8196                           ; 1 bytes @ 0x0
  8197                           
  8198  0070                     ?_Mrf49SpiRx:	
  8199                           ; 1 bytes @ 0x0
  8200                           
  8201  0070                     ?_Mrf49RxCmd:	
  8202                           ; 1 bytes @ 0x0
  8203                           
  8204  0070                     ?_Mrf49RxByte:	
  8205                           ; 1 bytes @ 0x0
  8206                           
  8207  0070                     ?_Mrf49xaPacketPending:	
  8208                           ; 1 bytes @ 0x0
  8209                           
  8210  0070                     ?_Mrf49xaRxPacket:	
  8211                           ; 1 bytes @ 0x0
  8212                           
  8213  0070                     ?_Mrf49xaAllocPacket:	
  8214                           ; 1 bytes @ 0x0
  8215                           
  8216  0070                     ?i1_Mrf49SpiRx:	
  8217                           ; 1 bytes @ 0x0
  8218                           
  8219  0070                     ?i1_Mrf49RxCmd:	
  8220                           ; 1 bytes @ 0x0
  8221                           
  8222  0070                     ?i1_Mrf49RxByte:	
  8223                           ; 1 bytes @ 0x0
  8224                           
  8225  0070                     ?i1_Mrf49xaServe:	
  8226                           ; 1 bytes @ 0x0
  8227                           
  8228  0070                     ?_Mrf49xaNeedsReset:	
  8229                           ; 1 bytes @ 0x0
  8230                           
  8231  0070                     ?_Mcp9800Read:	
  8232                           ; 2 bytes @ 0x0
  8233                           
  8234  0070                     ?i1_Mrf49xaNeedsReset:	
  8235                           ; 2 bytes @ 0x0
  8236                           
  8237  0070                     i1Mrf49SpiTx@byte:	
  8238                           ; 2 bytes @ 0x0
  8239                           
  8240  0070                     i1Mrf49SpiRx@data:	
  8241                           ; 1 bytes @ 0x0
  8242                           
  8243                           
  8244                           ; 1 bytes @ 0x0
  8245  0070                     	ds	1
  8246  0071                     ?i1_Mrf49TxCmd:	
  8247  0071                     ??i1_Mrf49RxCmd:	
  8248                           ; 0 bytes @ 0x1
  8249                           
  8250  0071                     ??i1_Mrf49RxSts:	
  8251                           ; 0 bytes @ 0x1
  8252                           
  8253  0071                     i1Mrf49TxCmd@val:	
  8254                           ; 0 bytes @ 0x1
  8255                           
  8256  0071                     i1Mrf49RxCmd@cmd:	
  8257                           ; 1 bytes @ 0x1
  8258                           
  8259                           
  8260                           ; 1 bytes @ 0x1
  8261  0071                     	ds	1
  8262  0072                     ??i1_Mrf49TxCmd:	
  8263  0072                     i1Mrf49TxCmd@cmd:	
  8264                           ; 0 bytes @ 0x2
  8265                           
  8266  0072                     i1Mrf49RxCmd@val:	
  8267                           ; 1 bytes @ 0x2
  8268                           
  8269                           
  8270                           ; 1 bytes @ 0x2
  8271  0072                     	ds	1
  8272  0073                     ??i1_Mrf49xaModeRx:	
  8273  0073                     ??i1_Mrf49RxByte:	
  8274                           ; 0 bytes @ 0x3
  8275                           
  8276  0073                     ??i1_Mrf49TxByte:	
  8277                           ; 0 bytes @ 0x3
  8278                           
  8279  0073                     i1Mrf49xaModeRx@k:	
  8280                           ; 0 bytes @ 0x3
  8281                           
  8282  0073                     i1Mrf49TxByte@byte:	
  8283                           ; 1 bytes @ 0x3
  8284                           
  8285                           
  8286                           ; 1 bytes @ 0x3
  8287  0073                     	ds	1
  8288  0074                     ??i1_Mrf49xaServe:	
  8289                           
  8290                           ; 0 bytes @ 0x4
  8291  0074                     	ds	1
  8292  0075                     i1Mrf49xaServe@data:	
  8293                           
  8294                           ; 1 bytes @ 0x5
  8295  0075                     	ds	1
  8296  0076                     ??_extInt:	
  8297                           
  8298                           ; 0 bytes @ 0x6
  8299  0076                     	ds	1
  8300  0077                     extInt@ofw:	
  8301                           
  8302                           ; 1 bytes @ 0x7
  8303  0077                     	ds	1
  8304                           
  8305                           	psect	cstackBANK0
  8306  0020                     __pcstackBANK0:	
  8307  0020                     ??_Mrf49xaNeedsReset:	
  8308  0020                     ?_Sleepy:	
  8309                           ; 0 bytes @ 0x0
  8310                           
  8311  0020                     ??_PwrAdcWake:	
  8312                           ; 0 bytes @ 0x0
  8313                           
  8314  0020                     ??_PwrAdcSleep:	
  8315                           ; 0 bytes @ 0x0
  8316                           
  8317  0020                     ??_PwrAdcInit:	
  8318                           ; 0 bytes @ 0x0
  8319                           
  8320  0020                     ??_PwrSensorInit:	
  8321                           ; 0 bytes @ 0x0
  8322                           
  8323  0020                     ??_PwrSensorSleep:	
  8324                           ; 0 bytes @ 0x0
  8325                           
  8326  0020                     ??_PwrI2cSleep:	
  8327                           ; 0 bytes @ 0x0
  8328                           
  8329  0020                     ??_PwrSensorWake:	
  8330                           ; 0 bytes @ 0x0
  8331                           
  8332  0020                     ??_PwrI2cWake:	
  8333                           ; 0 bytes @ 0x0
  8334                           
  8335  0020                     ??_SoftI2cNop:	
  8336                           ; 0 bytes @ 0x0
  8337                           
  8338  0020                     ??_AdcInit:	
  8339                           ; 0 bytes @ 0x0
  8340                           
  8341  0020                     ??_AdcDeinit:	
  8342                           ; 0 bytes @ 0x0
  8343                           
  8344  0020                     ??_AdcGo:	
  8345                           ; 0 bytes @ 0x0
  8346                           
  8347  0020                     ??_AdcIsBusy:	
  8348                           ; 0 bytes @ 0x0
  8349                           
  8350  0020                     ??_AdcChSelect:	
  8351                           ; 0 bytes @ 0x0
  8352                           
  8353  0020                     ??_ExtIntInit:	
  8354                           ; 0 bytes @ 0x0
  8355                           
  8356  0020                     ??_Mrf49SpiTx:	
  8357                           ; 0 bytes @ 0x0
  8358                           
  8359  0020                     ??_Mrf49SpiRx:	
  8360                           ; 0 bytes @ 0x0
  8361                           
  8362  0020                     ??_Mrf49xaPacketPending:	
  8363                           ; 0 bytes @ 0x0
  8364                           
  8365  0020                     ??_Mrf49xaFreePacket:	
  8366                           ; 0 bytes @ 0x0
  8367                           
  8368  0020                     ??_Mrf49xaRxPacket:	
  8369                           ; 0 bytes @ 0x0
  8370                           
  8371  0020                     ??_Mrf49xaAllocPacket:	
  8372                           ; 0 bytes @ 0x0
  8373                           
  8374  0020                     ?_Mrf49xaTxPacket:	
  8375                           ; 0 bytes @ 0x0
  8376                           
  8377  0020                     ?_AdcGetResult:	
  8378                           ; 1 bytes @ 0x0
  8379                           
  8380  0020                     AdcChSelect@channel:	
  8381                           ; 2 bytes @ 0x0
  8382                           
  8383  0020                     Mrf49SpiTx@byte:	
  8384                           ; 1 bytes @ 0x0
  8385                           
  8386  0020                     Mrf49SpiRx@data:	
  8387                           ; 1 bytes @ 0x0
  8388                           
  8389  0020                     Mrf49xaTxPacket@response:	
  8390                           ; 1 bytes @ 0x0
  8391                           
  8392  0020                     Mrf49xaFreePacket@packet:	
  8393                           ; 1 bytes @ 0x0
  8394                           
  8395  0020                     Sleepy@ms:	
  8396                           ; 1 bytes @ 0x0
  8397                           
  8398                           
  8399                           ; 2 bytes @ 0x0
  8400  0020                     	ds	1
  8401  0021                     ??_SoftI2cStart:	
  8402  0021                     ??_SoftI2cTxByte:	
  8403                           ; 0 bytes @ 0x1
  8404                           
  8405  0021                     ??_SoftI2cStop:	
  8406                           ; 0 bytes @ 0x1
  8407                           
  8408  0021                     ?_Mrf49TxCmd:	
  8409                           ; 0 bytes @ 0x1
  8410                           
  8411  0021                     ??_Mrf49RxSts:	
  8412                           ; 0 bytes @ 0x1
  8413                           
  8414  0021                     ??_SoftI2cRepeatedStart:	
  8415                           ; 0 bytes @ 0x1
  8416                           
  8417  0021                     ??_SoftI2cRxByte:	
  8418                           ; 0 bytes @ 0x1
  8419                           
  8420  0021                     ??_Mrf49RxCmd:	
  8421                           ; 0 bytes @ 0x1
  8422                           
  8423  0021                     SoftI2cRxByte@ack:	
  8424                           ; 0 bytes @ 0x1
  8425                           
  8426  0021                     Mrf49TxCmd@val:	
  8427                           ; 1 bytes @ 0x1
  8428                           
  8429  0021                     Mrf49RxCmd@cmd:	
  8430                           ; 1 bytes @ 0x1
  8431                           
  8432  0021                     Mrf49xaTxPacket@needAck:	
  8433                           ; 1 bytes @ 0x1
  8434                           
  8435                           
  8436                           ; 1 bytes @ 0x1
  8437  0021                     	ds	1
  8438  0022                     ??_Sleepy:	
  8439  0022                     ??_Mrf49TxCmd:	
  8440                           ; 0 bytes @ 0x2
  8441                           
  8442  0022                     ??_Mrf49xaTxPacket:	
  8443                           ; 0 bytes @ 0x2
  8444                           
  8445  0022                     ??_AdcGetResult:	
  8446                           ; 0 bytes @ 0x2
  8447                           
  8448  0022                     ?_AdcSample:	
  8449                           ; 0 bytes @ 0x2
  8450                           
  8451  0022                     SoftI2cTxByte@data:	
  8452                           ; 2 bytes @ 0x2
  8453                           
  8454  0022                     SoftI2cRxByte@data:	
  8455                           ; 1 bytes @ 0x2
  8456                           
  8457  0022                     Mrf49TxCmd@cmd:	
  8458                           ; 1 bytes @ 0x2
  8459                           
  8460  0022                     Mrf49RxCmd@val:	
  8461                           ; 1 bytes @ 0x2
  8462                           
  8463                           
  8464                           ; 1 bytes @ 0x2
  8465  0022                     	ds	1
  8466  0023                     ??_Mrf49xaModeRx:	
  8467  0023                     ??_Mrf49xaModeTx:	
  8468                           ; 0 bytes @ 0x3
  8469                           
  8470  0023                     ??_Mrf49xaModeSleep:	
  8471                           ; 0 bytes @ 0x3
  8472                           
  8473  0023                     ??_Mrf49RxByte:	
  8474                           ; 0 bytes @ 0x3
  8475                           
  8476  0023                     ??_Mrf49TxByte:	
  8477                           ; 0 bytes @ 0x3
  8478                           
  8479  0023                     SoftI2cTxByte@i:	
  8480                           ; 0 bytes @ 0x3
  8481                           
  8482  0023                     SoftI2cRxByte@i:	
  8483                           ; 1 bytes @ 0x3
  8484                           
  8485  0023                     Mrf49xaModeRx@k:	
  8486                           ; 1 bytes @ 0x3
  8487                           
  8488  0023                     Mrf49xaModeTx@k:	
  8489                           ; 1 bytes @ 0x3
  8490                           
  8491  0023                     Mrf49xaModeSleep@k:	
  8492                           ; 1 bytes @ 0x3
  8493                           
  8494  0023                     Mrf49TxByte@byte:	
  8495                           ; 1 bytes @ 0x3
  8496                           
  8497  0023                     Mrf49xaTxPacket@crc:	
  8498                           ; 1 bytes @ 0x3
  8499                           
  8500  0023                     Sleepy@b:	
  8501                           ; 1 bytes @ 0x3
  8502                           
  8503                           
  8504                           ; 1 bytes @ 0x3
  8505  0023                     	ds	1
  8506  0024                     ??_Mrf49xaServe:	
  8507  0024                     ??_PwrI2cInit:	
  8508                           ; 0 bytes @ 0x4
  8509                           
  8510  0024                     ??_PwrRfSleep:	
  8511                           ; 0 bytes @ 0x4
  8512                           
  8513  0024                     ??_PwrRfWake:	
  8514                           ; 0 bytes @ 0x4
  8515                           
  8516  0024                     ??_SoftI2cInit:	
  8517                           ; 0 bytes @ 0x4
  8518                           
  8519  0024                     ??_AdcSample:	
  8520                           ; 0 bytes @ 0x4
  8521                           
  8522  0024                     ??_Mcp9800Start:	
  8523                           ; 0 bytes @ 0x4
  8524                           
  8525  0024                     ??_Mcp9800Read:	
  8526                           ; 0 bytes @ 0x4
  8527                           
  8528  0024                     ??_Mrf49xaShutdown:	
  8529                           ; 0 bytes @ 0x4
  8530                           
  8531  0024                     ??_Mrf49xaReboot:	
  8532                           ; 0 bytes @ 0x4
  8533                           
  8534  0024                     ?_eepromRxBytes:	
  8535                           ; 0 bytes @ 0x4
  8536                           
  8537  0024                     ?_eepromTxBytes:	
  8538                           ; 0 bytes @ 0x4
  8539                           
  8540  0024                     Mcp9800Start@resolution:	
  8541                           ; 0 bytes @ 0x4
  8542                           
  8543  0024                     Mrf49xaTxPacket@i:	
  8544                           ; 1 bytes @ 0x4
  8545                           
  8546  0024                     eepromRxBytes@address:	
  8547                           ; 1 bytes @ 0x4
  8548                           
  8549  0024                     eepromTxBytes@address:	
  8550                           ; 2 bytes @ 0x4
  8551                           
  8552                           
  8553                           ; 2 bytes @ 0x4
  8554  0024                     	ds	1
  8555  0025                     AdcSample@ch:	
  8556  0025                     Mrf49xaTxPacket@packet:	
  8557                           ; 1 bytes @ 0x5
  8558                           
  8559  0025                     Mrf49xaServe@data:	
  8560                           ; 1 bytes @ 0x5
  8561                           
  8562                           
  8563                           ; 1 bytes @ 0x5
  8564  0025                     	ds	1
  8565  0026                     ??_Mrf49xaInit:	
  8566  0026                     ??_Mrf49xaTxAck:	
  8567                           ; 0 bytes @ 0x6
  8568                           
  8569  0026                     ??_RfSendPowerState:	
  8570                           ; 0 bytes @ 0x6
  8571                           
  8572  0026                     Mrf49xaInit@k:	
  8573                           ; 0 bytes @ 0x6
  8574                           
  8575  0026                     Mrf49xaTxAck@packet:	
  8576                           ; 1 bytes @ 0x6
  8577                           
  8578  0026                     eepromRxBytes@data:	
  8579                           ; 1 bytes @ 0x6
  8580                           
  8581  0026                     eepromTxBytes@data:	
  8582                           ; 1 bytes @ 0x6
  8583                           
  8584  0026                     RfSendPowerState@s:	
  8585                           ; 1 bytes @ 0x6
  8586                           
  8587                           
  8588                           ; 2 bytes @ 0x6
  8589  0026                     	ds	1
  8590  0027                     ??_PwrRfInit:	
  8591  0027                     eepromRxBytes@size:	
  8592                           ; 0 bytes @ 0x7
  8593                           
  8594  0027                     eepromTxBytes@size:	
  8595                           ; 1 bytes @ 0x7
  8596                           
  8597                           
  8598                           ; 1 bytes @ 0x7
  8599  0027                     	ds	1
  8600  0028                     ??_eepromRxBytes:	
  8601  0028                     ??_eepromTxBytes:	
  8602                           ; 0 bytes @ 0x8
  8603                           
  8604  0028                     ??_handleFwCmd:	
  8605                           ; 0 bytes @ 0x8
  8606                           
  8607  0028                     ??_handleFwWrite:	
  8608                           ; 0 bytes @ 0x8
  8609                           
  8610  0028                     ??_handleFwRead:	
  8611                           ; 0 bytes @ 0x8
  8612                           
  8613  0028                     RfSendPowerState@packet:	
  8614                           ; 0 bytes @ 0x8
  8615                           
  8616  0028                     handleFwCmd@packet:	
  8617                           ; 1 bytes @ 0x8
  8618                           
  8619                           
  8620                           ; 1 bytes @ 0x8
  8621  0028                     	ds	2
  8622  002A                     handleFwRead@packet:	
  8623                           
  8624                           ; 1 bytes @ 0xA
  8625  002A                     	ds	3
  8626  002D                     handleFwWrite@packetData:	
  8627                           
  8628                           ; 1 bytes @ 0xD
  8629  002D                     	ds	1
  8630  002E                     handleFwWrite@i:	
  8631                           
  8632                           ; 1 bytes @ 0xE
  8633  002E                     	ds	1
  8634  002F                     handleFwWrite@address:	
  8635                           
  8636                           ; 2 bytes @ 0xF
  8637  002F                     	ds	2
  8638  0031                     handleFwWrite@packet:	
  8639                           
  8640                           ; 1 bytes @ 0x11
  8641  0031                     	ds	1
  8642  0032                     ??_HandlePacket:	
  8643                           
  8644                           ; 0 bytes @ 0x12
  8645  0032                     	ds	1
  8646  0033                     HandlePacket@sendAck:	
  8647                           
  8648                           ; 1 bytes @ 0x13
  8649  0033                     	ds	1
  8650  0034                     HandlePacket@sendMsg:	
  8651                           
  8652                           ; 1 bytes @ 0x14
  8653  0034                     	ds	1
  8654  0035                     HandlePacket@packet:	
  8655                           
  8656                           ; 1 bytes @ 0x15
  8657  0035                     	ds	1
  8658  0036                     ??_Mrf49xaTick:	
  8659                           
  8660                           ; 0 bytes @ 0x16
  8661  0036                     	ds	1
  8662  0037                     Mrf49xaTick@timeout:	
  8663                           
  8664                           ; 1 bytes @ 0x17
  8665  0037                     	ds	1
  8666  0038                     Mrf49xaTick@packet:	
  8667                           
  8668                           ; 1 bytes @ 0x18
  8669  0038                     	ds	1
  8670  0039                     ??_main:	
  8671                           
  8672                           	psect	text10
  8673  0000                     __ptext10:	
  8674 ;; *************** function _AdcGetResult *****************
  8675 ;; Defined at:
  8676 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  2    0[BANK0 ] unsigned int 
  8683 ;; Registers used:
  8684 ;;		wreg
  8685 ;; Tracked objects:
  8686 ;;		On entry : 1F/1
  8687 ;;		On exit  : 1F/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8690 ;;      Params:         0       2       0       0
  8691 ;;      Locals:         0       0       0       0
  8692 ;;      Temps:          0       0       0       0
  8693 ;;      Totals:         0       2       0       0
  8694 ;;Total ram usage:        2 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    5
  8697 ;; This function calls:
  8698 ;;		Nothing
  8699 ;; This function is called by:
  8700 ;;		_AdcSample
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704  0000                     _AdcGetResult:	
  8705                           ;psect for function _AdcGetResult
  8706                           
  8707  0000                     __end_of_AdcGetResult:	
  8708                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  8709                           
  8710                           ;incstack = 0
  8711                           ; Regs used in _AdcGetResult: [wreg]
  8712                           
  8713                           
  8714                           	psect	swtext1
  8715  076D                     __pswtext1:	
  8716  076D                     S3460:	
  8717  076D  3181  298C         	ljmp	l538
  8718  076F  3181  298D         	ljmp	l2818
  8719  0771  3181  29A3         	ljmp	l2826
  8720  0773  3181  298C         	ljmp	l538
  8721  0775  3181  298C         	ljmp	l538
  8722  0777  3181  298C         	ljmp	l538
  8723  0779  3181  298C         	ljmp	l538
  8724  077B  3181  298C         	ljmp	l538
  8725                           
  8726                           	psect	intentry
  8727  0004                     __pintentry:	
  8728 ;; *************** function _extInt *****************
  8729 ;; Defined at:
  8730 ;;		line 36 in file "../../../src/bsp/pic16/interrupt.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;		None
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;  ofw             1    7[COMMON] unsigned char 
  8735 ;; Return value:  Size  Location     Type
  8736 ;;		None               void
  8737 ;; Registers used:
  8738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 1F/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8744 ;;      Params:         0       0       0       0
  8745 ;;      Locals:         1       0       0       0
  8746 ;;      Temps:          1       0       0       0
  8747 ;;      Totals:         2       0       0       0
  8748 ;;Total ram usage:        2 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:    4
  8751 ;; This function calls:
  8752 ;;		_ExtIntDeinit
  8753 ;;		i1_Mrf49xaNeedsReset
  8754 ;;		i1_Mrf49xaServe
  8755 ;; This function is called by:
  8756 ;;		Interrupt level 1
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760  0004                     _extInt:	
  8761                           
  8762                           ;incstack = 0
  8763                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8764  0004  3180               	pagesel	$
  8765  0005  0020               	movlb	0	; select bank0
  8766  0006  087F               	movf	127,w
  8767  0007  00F6               	movwf	??_extInt
  8768                           
  8769                           ;interrupt.c: 38: if (INTCONbits.INTF != 0)
  8770  0008  1C8B               	btfss	11,1	;volatile
  8771  0009  281C               	goto	i1l142
  8772                           
  8773                           ;interrupt.c: 39: {
  8774                           ;interrupt.c: 40: uint8_t ofw = 0;
  8775  000A  01F7               	clrf	extInt@ofw
  8776  000B                     i1l3388:	
  8777                           ;interrupt.c: 41: while (!Mrf49xaServe())
  8778                           
  8779  000B  318E  2638  3180   	fcall	i1_Mrf49xaServe
  8780  000E  3A00               	xorlw	0
  8781  000F  1D03               	btfss	3,2
  8782  0010  281B               	goto	i1l141
  8783                           
  8784                           ;interrupt.c: 42: {
  8785                           ;interrupt.c: 43: ofw++;
  8786  0011  0AF7               	incf	extInt@ofw,f
  8787                           
  8788                           ;interrupt.c: 44: if (ofw == 255)
  8789  0012  0877               	movf	extInt@ofw,w
  8790  0013  3AFF               	xorlw	255
  8791  0014  1D03               	skipz
  8792  0015  280B               	goto	i1l3388
  8793                           
  8794                           ;interrupt.c: 45: {
  8795                           ;interrupt.c: 46: ExtIntDeinit();
  8796  0016  3187  2786  3180   	fcall	_ExtIntDeinit
  8797                           
  8798                           ;interrupt.c: 47: Mrf49xaNeedsReset();
  8799  0019  3187  2783         	fcall	i1_Mrf49xaNeedsReset
  8800  001B                     i1l141:	
  8801                           ;interrupt.c: 48: break;
  8802                           
  8803                           
  8804                           ;interrupt.c: 49: }
  8805                           ;interrupt.c: 50: }
  8806                           ;interrupt.c: 51: INTCONbits.INTF = 0;
  8807  001B  108B               	bcf	11,1	;volatile
  8808  001C                     i1l142:	
  8809  001C  0876               	movf	??_extInt,w
  8810  001D  0020               	movlb	0	; select bank0
  8811  001E  00FF               	movwf	127
  8812  001F  0009               	retfie
  8813  0020                     __end_of_extInt:	
  8814                           
  8815                           	psect	text67
  8816  0E2C                     __ptext67:	
  8817 ;; *************** function i1_Mrf49RxCmd *****************
  8818 ;; Defined at:
  8819 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;  cmd             1    wreg     unsigned char 
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  cmd             1    1[COMMON] unsigned char 
  8824 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      unsigned char 
  8827 ;; Registers used:
  8828 ;;		wreg, status,2, status,0, pclath, cstack
  8829 ;; Tracked objects:
  8830 ;;		On entry : 1E/1
  8831 ;;		On exit  : 1F/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8834 ;;      Params:         0       0       0       0
  8835 ;;      Locals:         2       0       0       0
  8836 ;;      Temps:          0       0       0       0
  8837 ;;      Totals:         2       0       0       0
  8838 ;;Total ram usage:        2 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    1
  8841 ;; This function calls:
  8842 ;;		i1_Mrf49SpiRx
  8843 ;;		i1_Mrf49SpiTx
  8844 ;; This function is called by:
  8845 ;;		i1_Mrf49RxByte
  8846 ;; This function uses a non-reentrant model
  8847 ;;
  8848                           
  8849                           
  8850                           ;psect for function i1_Mrf49RxCmd
  8851  0E2C                     i1_Mrf49RxCmd:	
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  8855                           ;i1Mrf49RxCmd@cmd stored from wreg
  8856  0E2C  00F1               	movwf	i1Mrf49RxCmd@cmd
  8857                           
  8858                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  8859  0E2D  0020               	movlb	0	; select bank0
  8860  0E2E  130E               	bcf	14,6	;volatile
  8861                           
  8862                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  8863  0E2F  0871               	movf	i1Mrf49RxCmd@cmd,w
  8864  0E30  2745  318E         	fcall	i1_Mrf49SpiTx
  8865                           
  8866                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  8867  0E32  27B4               	fcall	i1_Mrf49SpiRx
  8868  0E33  00F2               	movwf	i1Mrf49RxCmd@val
  8869                           
  8870                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  8871  0E34  0020               	movlb	0	; select bank0
  8872  0E35  170E               	bsf	14,6	;volatile
  8873                           
  8874                           ;mrf49xa_cmd.c: 27: return val;
  8875  0E36  0872               	movf	i1Mrf49RxCmd@val,w
  8876  0E37  0008               	return
  8877  0E38                     __end_ofi1_Mrf49RxCmd:	
  8878  0E38                     __ptext61:	
  8879 ;; *************** function i1_Mrf49xaServe *****************
  8880 ;; Defined at:
  8881 ;;		line 7 in file "../../../src/devices/mrf49xa_data.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;		None
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      unsigned char 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 1E/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8895 ;;      Params:         0       0       0       0
  8896 ;;      Locals:         1       0       0       0
  8897 ;;      Temps:          1       0       0       0
  8898 ;;      Totals:         2       0       0       0
  8899 ;;Total ram usage:        2 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    3
  8902 ;; This function calls:
  8903 ;;		i1_Mrf49RxByte
  8904 ;;		i1_Mrf49RxSts
  8905 ;;		i1_Mrf49TxByte
  8906 ;;		i1_Mrf49xaModeRx
  8907 ;; This function is called by:
  8908 ;;		_extInt
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           
  8913                           ;psect for function i1_Mrf49xaServe
  8914  0E38                     i1_Mrf49xaServe:	
  8915                           
  8916                           ;mrf49xa_data.c: 10: uint8_t data;
  8917                           ;mrf49xa_data.c: 12: if (rfTrcvStatus.state == POWERED_OFF)
  8918                           
  8919                           ;incstack = 0
  8920                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8921  0E38  0021               	movlb	1	; select bank1
  8922  0E39  08EC               	movf	(_rfTrcvStatus^(0+128)+76),f
  8923  0E3A  1903               	btfsc	3,2
  8924                           
  8925                           ;mrf49xa_data.c: 13: return 0;
  8926  0E3B  3400               	retlw	0
  8927                           
  8928                           ;mrf49xa_data.c: 16: if (rfTrcvStatus.needsReset)
  8929  0E3C  1BED               	btfsc	(_rfTrcvStatus^(0+128)+77),7
  8930  0E3D  3400               	retlw	0
  8931                           
  8932                           ;mrf49xa_data.c: 19: Mrf49RxSts();
  8933  0E3E  27A7  318E         	fcall	i1_Mrf49RxSts
  8934                           
  8935                           ;mrf49xa_data.c: 21: if (mrf49Status.byte[0] == 0xFF && mrf49Status.byte[1] == 0xFF)
  8936  0E40  0839               	movf	_mrf49Status,w
  8937  0E41  3AFF               	xorlw	255
  8938  0E42  1D03               	skipz
  8939  0E43  2E48               	goto	i1l437
  8940  0E44  083A               	movf	_mrf49Status+1,w
  8941  0E45  3AFF               	xorlw	255
  8942  0E46  1903               	btfsc	3,2
  8943  0E47  3400               	retlw	0
  8944  0E48                     i1l437:	
  8945                           ;mrf49xa_data.c: 26: {
  8946                           
  8947                           
  8948                           ;mrf49xa_data.c: 28: }
  8949                           ;mrf49xa_data.c: 31: if (mrf49Status.flags.msb.overflow == 1)
  8950  0E48  1AB9               	btfsc	_mrf49Status,5
  8951  0E49  2E54               	goto	i1l3292
  8952  0E4A  2E60               	goto	i1l438
  8953  0E4B                     i1l3288:	
  8954                           
  8955                           ;mrf49xa_data.c: 36: case RECV_DATA:
  8956                           ;mrf49xa_data.c: 39: data = Mrf49RxByte();
  8957  0E4B  2714  318E         	fcall	i1_Mrf49RxByte
  8958  0E4D  00F5               	movwf	i1Mrf49xaServe@data
  8959                           
  8960                           ;mrf49xa_data.c: 40: data = Mrf49RxByte();
  8961  0E4E  2714  318E         	fcall	i1_Mrf49RxByte
  8962  0E50  00F5               	movwf	i1Mrf49xaServe@data
  8963                           
  8964                           ;mrf49xa_data.c: 43: Mrf49xaModeRx();
  8965  0E51  2717  318E         	fcall	i1_Mrf49xaModeRx
  8966                           
  8967                           ;mrf49xa_data.c: 47: break;
  8968  0E53  2E60               	goto	i1l438
  8969  0E54                     i1l3292:	
  8970  0E54  0021               	movlb	1	; select bank1
  8971  0E55  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  8972                           
  8973                           ; Switch size 1, requested type "space"
  8974                           ; Number of cases is 3, Range of values is 1 to 3
  8975                           ; switch strategies available:
  8976                           ; Name         Instructions Cycles
  8977                           ; simple_byte           10     6 (average)
  8978                           ; direct_byte           15     9 (fixed)
  8979                           ; jumptable            263     9 (fixed)
  8980                           ;	Chosen strategy is simple_byte
  8981  0E56  3A01               	xorlw	1	; case 1
  8982  0E57  1903               	skipnz
  8983  0E58  2E4B               	goto	i1l3288
  8984  0E59  3A03               	xorlw	3	; case 2
  8985  0E5A  1903               	skipnz
  8986  0E5B  2E4B               	goto	i1l3288
  8987  0E5C  3A01               	xorlw	1	; case 3
  8988  0E5D  1903               	skipnz
  8989  0E5E  2E60               	goto	i1l438
  8990  0E5F  2E60               	goto	i1l438
  8991  0E60                     i1l438:	
  8992                           
  8993                           ;mrf49xa_data.c: 55: }
  8994                           ;mrf49xa_data.c: 64: if (mrf49Status.flags.msb.fifoTxRx == 1)
  8995  0E60  0020               	movlb	0	; select bank0
  8996  0E61  1BB9               	btfsc	_mrf49Status,7
  8997  0E62  2EFE               	goto	i1l3372
  8998  0E63  2F0A               	goto	i1l3374
  8999  0E64                     i1l3296:	
  9000                           
  9001                           ;mrf49xa_data.c: 70: data = Mrf49RxByte();
  9002  0E64  2714  318E         	fcall	i1_Mrf49RxByte
  9003  0E66  00F5               	movwf	i1Mrf49xaServe@data
  9004                           
  9005                           ;mrf49xa_data.c: 74: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9006  0E67  1BBA               	btfsc	_mrf49Status+1,7
  9007  0E68  2E6C               	goto	i1l3302
  9008  0E69                     i1l3300:	
  9009                           
  9010                           ;mrf49xa_data.c: 75: {
  9011                           ;mrf49xa_data.c: 76: Mrf49xaModeRx();
  9012  0E69  2717  318E         	fcall	i1_Mrf49xaModeRx
  9013                           
  9014                           ;mrf49xa_data.c: 77: break;
  9015  0E6B  2F0A               	goto	i1l3374
  9016  0E6C                     i1l3302:	
  9017                           
  9018                           ;mrf49xa_data.c: 78: }
  9019                           ;mrf49xa_data.c: 80: if (rfTrcvStatus.rxPacket[0].state == PKT_FREE) rfTrcvStatus.hwRx =
      +                           &(rfTrcvStatus.rxPacket[0]);
  9020  0E6C  0021               	movlb	1	; select bank1
  9021  0E6D  08A1               	movf	(_rfTrcvStatus^(0+128)+1),f
  9022  0E6E  1D03               	skipz
  9023  0E6F  2E72               	goto	i1l3306
  9024  0E70  30A1               	movlw	(_rfTrcvStatus+1)& (0+255)
  9025  0E71  2E76               	goto	L4
  9026  0E72                     i1l3306:	
  9027                           
  9028                           ;mrf49xa_data.c: 81: else if (rfTrcvStatus.rxPacket[1].state == PKT_FREE) rfTrcvStatus.h
      +                          wRx = &(rfTrcvStatus.rxPacket[1]);
  9029  0E72  08BA               	movf	(_rfTrcvStatus^(0+128)+26),f
  9030  0E73  1D03               	skipz
  9031  0E74  2E69               	goto	i1l3300
  9032  0E75  30BA               	movlw	(_rfTrcvStatus+26)& (0+255)
  9033  0E76                     L4:	
  9034  0E76  00A0               	movwf	_rfTrcvStatus^(0+128)
  9035                           
  9036                           ;mrf49xa_data.c: 88: }
  9037                           ;mrf49xa_data.c: 89: rfTrcvStatus.hwRx->packet.size = data;
  9038  0E77  0A20               	incf	_rfTrcvStatus^(0+128),w
  9039  0E78  0086               	movwf	6
  9040  0E79  0187               	clrf	7
  9041  0E7A  0875               	movf	i1Mrf49xaServe@data,w
  9042  0E7B  0081               	movwf	1
  9043                           
  9044                           ;mrf49xa_data.c: 90: rfTrcvStatus.hwRx->crc = 0;
  9045  0E7C  0820               	movf	_rfTrcvStatus^(0+128),w
  9046  0E7D  3E16               	addlw	22
  9047  0E7E  0086               	movwf	6
  9048  0E7F  0181               	clrf	1
  9049                           
  9050                           ;mrf49xa_data.c: 91: rfTrcvStatus.hwRx->state = PKT_HW_BUSY_RX;
  9051  0E80  0820               	movf	_rfTrcvStatus^(0+128),w
  9052  0E81  0086               	movwf	6
  9053  0E82  3004               	movlw	4
  9054  0E83  0081               	movwf	1
  9055                           
  9056                           ;mrf49xa_data.c: 93: rfTrcvStatus.state = RECV_DATA;
  9057  0E84  3002               	movlw	2
  9058  0E85  00EC               	movwf	(_rfTrcvStatus^(0+128)+76)
  9059                           
  9060                           ;mrf49xa_data.c: 94: rfTrcvStatus.hwByte = 1;
  9061  0E86  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9062  0E87  3980               	andlw	-128
  9063  0E88  3801               	iorlw	1
  9064  0E89  2EB3               	goto	L5
  9065  0E8A                     i1l3322:	
  9066                           ;mrf49xa_data.c: 96: break;
  9067                           
  9068                           
  9069                           ;mrf49xa_data.c: 100: data = Mrf49RxByte();
  9070  0E8A  2714  318E         	fcall	i1_Mrf49RxByte
  9071  0E8C  00F5               	movwf	i1Mrf49xaServe@data
  9072                           
  9073                           ;mrf49xa_data.c: 104: if (mrf49Status.flags.lsb.dataQualityOK == 0)
  9074  0E8D  1BBA               	btfsc	_mrf49Status+1,7
  9075  0E8E  2E95               	goto	i1l3330
  9076                           
  9077                           ;mrf49xa_data.c: 105: {
  9078                           ;mrf49xa_data.c: 106: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9079  0E8F  0021               	movlb	1	; select bank1
  9080  0E90  0820               	movf	_rfTrcvStatus^(0+128),w
  9081  0E91  0086               	movwf	6
  9082  0E92  3005               	movlw	5
  9083  0E93  0187               	clrf	7
  9084  0E94  2EA6               	goto	L6
  9085  0E95                     i1l3330:	
  9086                           
  9087                           ;mrf49xa_data.c: 109: }
  9088                           ;mrf49xa_data.c: 111: if (rfTrcvStatus.hwByte == rfTrcvStatus.hwRx->packet.size)
  9089  0E95  0021               	movlb	1	; select bank1
  9090  0E96  0A20               	incf	_rfTrcvStatus^(0+128),w
  9091  0E97  0086               	movwf	6
  9092  0E98  0187               	clrf	7
  9093  0E99  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9094  0E9A  397F               	andlw	127
  9095  0E9B  0601               	xorwf	1,w
  9096  0E9C  1D03               	skipz
  9097  0E9D  2EA8               	goto	i1l3336
  9098                           
  9099                           ;mrf49xa_data.c: 112: {
  9100                           ;mrf49xa_data.c: 113: rfTrcvStatus.hwRx->crc = data;
  9101  0E9E  0820               	movf	_rfTrcvStatus^(0+128),w
  9102  0E9F  3E16               	addlw	22
  9103  0EA0  0086               	movwf	6
  9104  0EA1  0875               	movf	i1Mrf49xaServe@data,w
  9105  0EA2  0081               	movwf	1
  9106                           
  9107                           ;mrf49xa_data.c: 117: rfTrcvStatus.hwRx->state = PKT_HW_READY_RX;
  9108  0EA3  0820               	movf	_rfTrcvStatus^(0+128),w
  9109  0EA4  0086               	movwf	6
  9110  0EA5  3005               	movlw	5
  9111  0EA6                     L6:	
  9112  0EA6  0081               	movwf	1
  9113  0EA7  2E69               	goto	i1l3300
  9114  0EA8                     i1l3336:	
  9115                           
  9116                           ;mrf49xa_data.c: 126: else
  9117                           ;mrf49xa_data.c: 127: {
  9118                           ;mrf49xa_data.c: 128: rfTrcvStatus.hwRx->raw[rfTrcvStatus.hwByte++] = data;
  9119  0EA8  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9120  0EA9  397F               	andlw	127
  9121  0EAA  0720               	addwf	_rfTrcvStatus^(0+128),w
  9122  0EAB  00F4               	movwf	??i1_Mrf49xaServe
  9123  0EAC  0A74               	incf	??i1_Mrf49xaServe,w
  9124  0EAD  0086               	movwf	6
  9125  0EAE  0187               	clrf	7
  9126  0EAF  0875               	movf	i1Mrf49xaServe@data,w
  9127  0EB0  0081               	movwf	1
  9128  0EB1  27F7  318E         	fcall	PL16	;call to abstracted procedure
  9129  0EB3                     L5:	
  9130  0EB3  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  9131  0EB4  2F0A               	goto	i1l3374
  9132  0EB5                     i1l3340:	
  9133                           
  9134                           ;mrf49xa_data.c: 134: rfTrcvStatus.hwByte++;
  9135  0EB5  27F7  318E         	fcall	PL16	;call to abstracted procedure
  9136  0EB7  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  9137                           
  9138                           ;mrf49xa_data.c: 136: if (rfTrcvStatus.hwByte == rfTrcvStatus.txPacket.packet.size)
  9139  0EB8  397F               	andlw	127
  9140  0EB9  0654               	xorwf	(_rfTrcvStatus^(0+128)+52),w
  9141  0EBA  1D03               	skipz
  9142  0EBB  2EEC               	goto	i1l3368
  9143                           
  9144                           ;mrf49xa_data.c: 137: rfTrcvStatus.hwByte = 49;
  9145  0EBC  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9146  0EBD  3980               	andlw	-128
  9147  0EBE  3831               	iorlw	49
  9148  0EBF  00ED               	movwf	(_rfTrcvStatus^(0+128)+77)
  9149  0EC0  2EEC               	goto	i1l3368
  9150  0EC1                     i1l3344:	
  9151                           
  9152                           ;mrf49xa_data.c: 142: Mrf49TxByte(0x2D);
  9153  0EC1  302D               	movlw	45
  9154  0EC2  270F  318E         	fcall	i1_Mrf49TxByte
  9155                           
  9156                           ;mrf49xa_data.c: 143: break;
  9157  0EC4  2F0A               	goto	i1l3374
  9158  0EC5                     i1l3346:	
  9159                           
  9160                           ;mrf49xa_data.c: 146: Mrf49TxByte(0xD4);
  9161  0EC5  30D4               	movlw	212
  9162  0EC6  270F  318E         	fcall	i1_Mrf49TxByte
  9163                           
  9164                           ;mrf49xa_data.c: 147: rfTrcvStatus.hwByte = 0x7F;
  9165  0EC8  307F               	movlw	127
  9166  0EC9  0021               	movlb	1	; select bank1
  9167  0ECA  04ED               	iorwf	(_rfTrcvStatus^(0+128)+77),f
  9168                           
  9169                           ;mrf49xa_data.c: 148: break;
  9170  0ECB  2F0A               	goto	i1l3374
  9171  0ECC                     i1l3350:	
  9172                           
  9173                           ;mrf49xa_data.c: 152: Mrf49TxByte(rfTrcvStatus.txPacket.raw[rfTrcvStatus.hwByte]);
  9174  0ECC  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9175  0ECD  397F               	andlw	127
  9176  0ECE  3ED4               	addlw	(_rfTrcvStatus+52)& (0+255)
  9177  0ECF  0086               	movwf	6
  9178  0ED0  0187               	clrf	7
  9179  0ED1  0801               	movf	1,w
  9180  0ED2  270F  318E         	fcall	i1_Mrf49TxByte
  9181                           
  9182                           ;mrf49xa_data.c: 153: break;
  9183  0ED4  2F0A               	goto	i1l3374
  9184  0ED5                     i1l3352:	
  9185                           
  9186                           ;mrf49xa_data.c: 156: Mrf49TxByte(rfTrcvStatus.txPacket.crc);
  9187  0ED5  0869               	movf	(_rfTrcvStatus^(0+128)+73),w
  9188  0ED6  270F  318E         	fcall	i1_Mrf49TxByte
  9189                           
  9190                           ;mrf49xa_data.c: 157: break;
  9191  0ED8  2F0A               	goto	i1l3374
  9192  0ED9                     i1l3354:	
  9193                           
  9194                           ;mrf49xa_data.c: 160: Mrf49TxByte(0x00);
  9195  0ED9  3000               	movlw	0
  9196  0EDA  270F  318E         	fcall	i1_Mrf49TxByte
  9197                           
  9198                           ;mrf49xa_data.c: 161: break;
  9199  0EDC  2F0A               	goto	i1l3374
  9200  0EDD                     i1l3356:	
  9201                           
  9202                           ;mrf49xa_data.c: 164: Mrf49TxByte(0x00);
  9203  0EDD  3000               	movlw	0
  9204  0EDE  270F  318E         	fcall	i1_Mrf49TxByte
  9205                           
  9206                           ;mrf49xa_data.c: 165: Mrf49xaModeRx();
  9207  0EE0  2717  318E         	fcall	i1_Mrf49xaModeRx
  9208                           
  9209                           ;mrf49xa_data.c: 167: rfTrcvStatus.txPacket.retry = 0;
  9210  0EE2  30F0               	movlw	-16
  9211  0EE3  0021               	movlb	1	; select bank1
  9212  0EE4  05EB               	andwf	(_rfTrcvStatus^(0+128)+75),f
  9213                           
  9214                           ;mrf49xa_data.c: 169: if (rfTrcvStatus.txPacket.needAck == NEED_ACK)
  9215  0EE5  0B6A               	decfsz	(_rfTrcvStatus^(0+128)+74),w
  9216  0EE6  2EEA               	goto	i1l3364
  9217                           
  9218                           ;mrf49xa_data.c: 170: rfTrcvStatus.txPacket.state = PKT_WAITING_FOR_ACK;
  9219  0EE7  3003               	movlw	3
  9220  0EE8  00D3               	movwf	(_rfTrcvStatus^(0+128)+51)
  9221  0EE9  2F0A               	goto	i1l3374
  9222  0EEA                     i1l3364:	
  9223                           
  9224                           ;mrf49xa_data.c: 171: else
  9225                           ;mrf49xa_data.c: 172: rfTrcvStatus.txPacket.state = PKT_FREE;
  9226  0EEA  01D3               	clrf	(_rfTrcvStatus^(0+128)+51)
  9227  0EEB  2F0A               	goto	i1l3374
  9228  0EEC                     i1l3368:	
  9229  0EEC  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9230  0EED  397F               	andlw	127
  9231                           
  9232                           ; Switch size 1, requested type "space"
  9233                           ; Number of cases is 5, Range of values is 49 to 101
  9234                           ; switch strategies available:
  9235                           ; Name         Instructions Cycles
  9236                           ; simple_byte           16     9 (average)
  9237                           ; direct_byte          115     9 (fixed)
  9238                           ; jumptable            263     9 (fixed)
  9239                           ;	Chosen strategy is simple_byte
  9240  0EEE  3A31               	xorlw	49	; case 49
  9241  0EEF  1903               	skipnz
  9242  0EF0  2ED5               	goto	i1l3352
  9243  0EF1  3A03               	xorlw	3	; case 50
  9244  0EF2  1903               	skipnz
  9245  0EF3  2ED9               	goto	i1l3354
  9246  0EF4  3A01               	xorlw	1	; case 51
  9247  0EF5  1903               	skipnz
  9248  0EF6  2EDD               	goto	i1l3356
  9249  0EF7  3A57               	xorlw	87	; case 100
  9250  0EF8  1903               	skipnz
  9251  0EF9  2EC1               	goto	i1l3344
  9252  0EFA  3A01               	xorlw	1	; case 101
  9253  0EFB  1903               	skipnz
  9254  0EFC  2EC5               	goto	i1l3346
  9255  0EFD  2ECC               	goto	i1l3350
  9256  0EFE                     i1l3372:	
  9257  0EFE  0021               	movlb	1	; select bank1
  9258  0EFF  086C               	movf	(_rfTrcvStatus^(0+128)+76),w
  9259                           
  9260                           ; Switch size 1, requested type "space"
  9261                           ; Number of cases is 3, Range of values is 1 to 3
  9262                           ; switch strategies available:
  9263                           ; Name         Instructions Cycles
  9264                           ; simple_byte           10     6 (average)
  9265                           ; direct_byte           15     9 (fixed)
  9266                           ; jumptable            263     9 (fixed)
  9267                           ;	Chosen strategy is simple_byte
  9268  0F00  3A01               	xorlw	1	; case 1
  9269  0F01  1903               	skipnz
  9270  0F02  2E64               	goto	i1l3296
  9271  0F03  3A03               	xorlw	3	; case 2
  9272  0F04  1903               	skipnz
  9273  0F05  2E8A               	goto	i1l3322
  9274  0F06  3A01               	xorlw	1	; case 3
  9275  0F07  1903               	skipnz
  9276  0F08  2EB5               	goto	i1l3340
  9277  0F09  2F0A               	goto	i1l3374
  9278  0F0A                     i1l3374:	
  9279                           
  9280                           ;mrf49xa_data.c: 179: }
  9281                           ;mrf49xa_data.c: 193: return PORTAbits.RA2 == 1 ? 1 : 0;
  9282  0F0A  0020               	movlb	0	; select bank0
  9283  0F0B  0C0C               	rrf	12,w	;volatile
  9284  0F0C  0C89               	rrf	9,f
  9285  0F0D  3901               	andlw	1
  9286  0F0E  0008               	return
  9287  0F0F                     __end_ofi1_Mrf49xaServe:	
  9288  0F0F                     __ptext63:	
  9289 ;; *************** function i1_Mrf49TxByte *****************
  9290 ;; Defined at:
  9291 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  byte            1    wreg     unsigned char 
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;  byte            1    3[COMMON] unsigned char 
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, status,2, status,0, pclath, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 1E/1
  9302 ;;		On exit  : 1F/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9305 ;;      Params:         0       0       0       0
  9306 ;;      Locals:         1       0       0       0
  9307 ;;      Temps:          0       0       0       0
  9308 ;;      Totals:         1       0       0       0
  9309 ;;Total ram usage:        1 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    2
  9312 ;; This function calls:
  9313 ;;		i1_Mrf49TxCmd
  9314 ;; This function is called by:
  9315 ;;		i1_Mrf49xaServe
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           
  9320                           ;psect for function i1_Mrf49TxByte
  9321  0F0F                     i1_Mrf49TxByte:	
  9322                           
  9323                           ;incstack = 0
  9324                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  9325                           ;i1Mrf49TxByte@byte stored from wreg
  9326  0F0F  00F3               	movwf	i1Mrf49TxByte@byte
  9327                           
  9328                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  9329  0F10  00F1               	movwf	i1Mrf49TxCmd@val
  9330  0F11  30B8               	movlw	184
  9331  0F12  273B               	fcall	i1_Mrf49TxCmd
  9332  0F13  0008               	return
  9333  0F14                     __end_ofi1_Mrf49TxByte:	
  9334  0F14                     __ptext66:	
  9335 ;; *************** function i1_Mrf49RxByte *****************
  9336 ;; Defined at:
  9337 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  9338 ;; Parameters:    Size  Location     Type
  9339 ;;		None
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;		None
  9342 ;; Return value:  Size  Location     Type
  9343 ;;                  1    wreg      unsigned char 
  9344 ;; Registers used:
  9345 ;;		wreg, status,2, status,0, pclath, cstack
  9346 ;; Tracked objects:
  9347 ;;		On entry : 1E/1
  9348 ;;		On exit  : 1F/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9351 ;;      Params:         0       0       0       0
  9352 ;;      Locals:         0       0       0       0
  9353 ;;      Temps:          0       0       0       0
  9354 ;;      Totals:         0       0       0       0
  9355 ;;Total ram usage:        0 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    2
  9358 ;; This function calls:
  9359 ;;		i1_Mrf49RxCmd
  9360 ;; This function is called by:
  9361 ;;		i1_Mrf49xaServe
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           
  9366                           ;psect for function i1_Mrf49RxByte
  9367  0F14                     i1_Mrf49RxByte:	
  9368                           
  9369                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  9370                           
  9371                           ;incstack = 0
  9372                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  9373  0F14  30B0               	movlw	176
  9374  0F15  262C               	fcall	i1_Mrf49RxCmd
  9375  0F16  0008               	return
  9376  0F17                     __end_ofi1_Mrf49RxByte:	
  9377  0F17                     __ptext62:	
  9378 ;; *************** function i1_Mrf49xaModeRx *****************
  9379 ;; Defined at:
  9380 ;;		line 99 in file "../../../src/devices/mrf49xa.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;		None               void
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0, pclath, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 1E/0
  9391 ;;		On exit  : 1F/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9394 ;;      Params:         0       0       0       0
  9395 ;;      Locals:         1       0       0       0
  9396 ;;      Temps:          0       0       0       0
  9397 ;;      Totals:         1       0       0       0
  9398 ;;Total ram usage:        1 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    2
  9401 ;; This function calls:
  9402 ;;		i1_Mrf49TxCmd
  9403 ;; This function is called by:
  9404 ;;		i1_Mrf49xaServe
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           
  9409                           ;psect for function i1_Mrf49xaModeRx
  9410  0F17                     i1_Mrf49xaModeRx:	
  9411  0F17  3030               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  9412                           
  9413                           ;mrf49xa.c: 101: UI08_t k;
  9414                           ;mrf49xa.c: 102: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg,
      +                           mrfRegset_Rx[k].val); };
  9415                           
  9416                           ;incstack = 0
  9417                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  9418  0F18  01F3               	clrf	i1Mrf49xaModeRx@k
  9419  0F19  3187               	movlp	high __stringtab
  9420  0F1A  000A               	callw
  9421  0F1B  318E               	pagesel	$	;select current page
  9422  0F1C  3800               	iorlw	0
  9423  0F1D  1903               	btfsc	3,2
  9424  0F1E  2F33               	goto	i1l211
  9425  0F1F                     i1l3086:	
  9426  0F1F  3573               	lslf	i1Mrf49xaModeRx@k,w
  9427  0F20  3E54               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  9428  0F21  3187               	movlp	high __stringtab
  9429  0F22  000A               	callw
  9430  0F23  00F1               	movwf	i1Mrf49TxCmd@val
  9431  0F24  3573               	lslf	i1Mrf49xaModeRx@k,w
  9432  0F25  3E53               	addlw	low (_mrfRegset_Rx| (0+32768))
  9433  0F26  3187               	movlp	high __stringtab
  9434  0F27  000A               	callw
  9435  0F28  318E               	pagesel	$	;select current page
  9436  0F29  318F  273B         	fcall	i1_Mrf49TxCmd
  9437  0F2B  3030               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  9438  0F2C  0AF3               	incf	i1Mrf49xaModeRx@k,f
  9439  0F2D  3187               	movlp	high __stringtab
  9440  0F2E  000A               	callw
  9441  0F2F  318E               	pagesel	$	;select current page
  9442  0F30  0273               	subwf	i1Mrf49xaModeRx@k,w
  9443  0F31  1C03               	skipc
  9444  0F32  2F1F               	goto	i1l3086
  9445  0F33                     i1l211:	
  9446                           
  9447                           ;mrf49xa.c: 105: rfTrcvStatus.state = RECV_IDLE;
  9448  0F33  0021               	movlb	1	; select bank1
  9449  0F34  3080               	movlw	-128
  9450  0F35  01EC               	clrf	(_rfTrcvStatus^(0+128)+76)
  9451  0F36  0AEC               	incf	(_rfTrcvStatus^(0+128)+76),f
  9452                           
  9453                           ;mrf49xa.c: 106: rfTrcvStatus.hwByte = 0;
  9454  0F37  05ED               	andwf	(_rfTrcvStatus^(0+128)+77),f
  9455                           
  9456                           ;mrf49xa.c: 108: mrf49Status.flags.msb.fifoTxRx = 0;
  9457  0F38  0020               	movlb	0	; select bank0
  9458  0F39  13B9               	bcf	_mrf49Status,7
  9459  0F3A  0008               	return
  9460  0F3B                     __end_ofi1_Mrf49xaModeRx:	
  9461  0F3B                     __ptext64:	
  9462 ;; *************** function i1_Mrf49TxCmd *****************
  9463 ;; Defined at:
  9464 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  cmd             1    wreg     unsigned char 
  9467 ;;  val             1    1[COMMON] unsigned char 
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  cmd             1    2[COMMON] unsigned char 
  9470 ;; Return value:  Size  Location     Type
  9471 ;;		None               void
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0, pclath, cstack
  9474 ;; Tracked objects:
  9475 ;;		On entry : 1E/0
  9476 ;;		On exit  : 1F/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9479 ;;      Params:         1       0       0       0
  9480 ;;      Locals:         1       0       0       0
  9481 ;;      Temps:          0       0       0       0
  9482 ;;      Totals:         2       0       0       0
  9483 ;;Total ram usage:        2 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    1
  9486 ;; This function calls:
  9487 ;;		i1_Mrf49SpiTx
  9488 ;; This function is called by:
  9489 ;;		i1_Mrf49xaModeRx
  9490 ;;		i1_Mrf49TxByte
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           
  9495                           ;psect for function i1_Mrf49TxCmd
  9496  0F3B                     i1_Mrf49TxCmd:	
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  9500                           ;i1Mrf49TxCmd@cmd stored from wreg
  9501  0F3B  00F2               	movwf	i1Mrf49TxCmd@cmd
  9502                           
  9503                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  9504  0F3C  0020               	movlb	0	; select bank0
  9505  0F3D  130E               	bcf	14,6	;volatile
  9506                           
  9507                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  9508  0F3E  0872               	movf	i1Mrf49TxCmd@cmd,w
  9509  0F3F  2745  318E         	fcall	i1_Mrf49SpiTx
  9510                           
  9511                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  9512  0F41  0871               	movf	i1Mrf49TxCmd@val,w
  9513  0F42  2745               	fcall	i1_Mrf49SpiTx
  9514                           
  9515                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  9516  0F43  170E               	bsf	14,6	;volatile
  9517  0F44  0008               	return
  9518  0F45                     __end_ofi1_Mrf49TxCmd:	
  9519  0F45                     __ptext68:	
  9520 ;; *************** function i1_Mrf49SpiTx *****************
  9521 ;; Defined at:
  9522 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  byte            1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  byte            1    0[COMMON] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg
  9531 ;; Tracked objects:
  9532 ;;		On entry : 1F/0
  9533 ;;		On exit  : 1F/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9536 ;;      Params:         0       0       0       0
  9537 ;;      Locals:         1       0       0       0
  9538 ;;      Temps:          0       0       0       0
  9539 ;;      Totals:         1       0       0       0
  9540 ;;Total ram usage:        1 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; This function calls:
  9543 ;;		Nothing
  9544 ;; This function is called by:
  9545 ;;		i1_Mrf49TxCmd
  9546 ;;		i1_Mrf49RxCmd
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           
  9551                           ;psect for function i1_Mrf49SpiTx
  9552  0F45                     i1_Mrf49SpiTx:	
  9553                           
  9554                           ;incstack = 0
  9555                           ; Regs used in i1_Mrf49SpiTx: [wreg]
  9556                           ;i1Mrf49SpiTx@byte stored from wreg
  9557  0F45  00F0               	movwf	i1Mrf49SpiTx@byte
  9558                           
  9559                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  9560  0F46  1FF0               	btfss	i1Mrf49SpiTx@byte,7
  9561  0F47  2F4A               	goto	i1l255
  9562  0F48  178D               	bsf	13,7	;volatile
  9563  0F49  2F4B               	goto	i1l256
  9564  0F4A                     i1l255:	
  9565  0F4A  138D               	bcf	13,7	;volatile
  9566  0F4B                     i1l256:	
  9567  0F4B  0022               	movlb	2	; select bank2
  9568  0F4C  178E               	bsf	14,7	;volatile
  9569  0F4D  0000               	nop	;# 
  9570  0F4E  0022               	movlb	2	; select bank2
  9571  0F4F  138E               	bcf	14,7	;volatile
  9572  0F50  1F70               	btfss	i1Mrf49SpiTx@byte,6
  9573  0F51  2F55               	goto	i1l259
  9574  0F52  0020               	movlb	0	; select bank0
  9575  0F53  178D               	bsf	13,7	;volatile
  9576  0F54  2F57               	goto	i1l260
  9577  0F55                     i1l259:	
  9578  0F55  0020               	movlb	0	; select bank0
  9579  0F56  138D               	bcf	13,7	;volatile
  9580  0F57                     i1l260:	
  9581  0F57  0022               	movlb	2	; select bank2
  9582  0F58  178E               	bsf	14,7	;volatile
  9583  0F59  0000               	nop	;# 
  9584  0F5A  0022               	movlb	2	; select bank2
  9585  0F5B  138E               	bcf	14,7	;volatile
  9586  0F5C  1EF0               	btfss	i1Mrf49SpiTx@byte,5
  9587  0F5D  2F61               	goto	i1l263
  9588  0F5E  0020               	movlb	0	; select bank0
  9589  0F5F  178D               	bsf	13,7	;volatile
  9590  0F60  2F63               	goto	i1l264
  9591  0F61                     i1l263:	
  9592  0F61  0020               	movlb	0	; select bank0
  9593  0F62  138D               	bcf	13,7	;volatile
  9594  0F63                     i1l264:	
  9595  0F63  0022               	movlb	2	; select bank2
  9596  0F64  178E               	bsf	14,7	;volatile
  9597  0F65  0000               	nop	;# 
  9598  0F66  0022               	movlb	2	; select bank2
  9599  0F67  138E               	bcf	14,7	;volatile
  9600  0F68  1E70               	btfss	i1Mrf49SpiTx@byte,4
  9601  0F69  2F6D               	goto	i1l267
  9602  0F6A  0020               	movlb	0	; select bank0
  9603  0F6B  178D               	bsf	13,7	;volatile
  9604  0F6C  2F6F               	goto	i1l268
  9605  0F6D                     i1l267:	
  9606  0F6D  0020               	movlb	0	; select bank0
  9607  0F6E  138D               	bcf	13,7	;volatile
  9608  0F6F                     i1l268:	
  9609  0F6F  0022               	movlb	2	; select bank2
  9610  0F70  178E               	bsf	14,7	;volatile
  9611  0F71  0000               	nop	;# 
  9612  0F72  0022               	movlb	2	; select bank2
  9613  0F73  138E               	bcf	14,7	;volatile
  9614  0F74  1DF0               	btfss	i1Mrf49SpiTx@byte,3
  9615  0F75  2F79               	goto	i1l271
  9616  0F76  0020               	movlb	0	; select bank0
  9617  0F77  178D               	bsf	13,7	;volatile
  9618  0F78  2F7B               	goto	i1l272
  9619  0F79                     i1l271:	
  9620  0F79  0020               	movlb	0	; select bank0
  9621  0F7A  138D               	bcf	13,7	;volatile
  9622  0F7B                     i1l272:	
  9623  0F7B  0022               	movlb	2	; select bank2
  9624  0F7C  178E               	bsf	14,7	;volatile
  9625  0F7D  0000               	nop	;# 
  9626  0F7E  0022               	movlb	2	; select bank2
  9627  0F7F  138E               	bcf	14,7	;volatile
  9628  0F80  1D70               	btfss	i1Mrf49SpiTx@byte,2
  9629  0F81  2F85               	goto	i1l275
  9630  0F82  0020               	movlb	0	; select bank0
  9631  0F83  178D               	bsf	13,7	;volatile
  9632  0F84  2F87               	goto	i1l276
  9633  0F85                     i1l275:	
  9634  0F85  0020               	movlb	0	; select bank0
  9635  0F86  138D               	bcf	13,7	;volatile
  9636  0F87                     i1l276:	
  9637  0F87  0022               	movlb	2	; select bank2
  9638  0F88  178E               	bsf	14,7	;volatile
  9639  0F89  0000               	nop	;# 
  9640  0F8A  0022               	movlb	2	; select bank2
  9641  0F8B  138E               	bcf	14,7	;volatile
  9642  0F8C  1CF0               	btfss	i1Mrf49SpiTx@byte,1
  9643  0F8D  2F91               	goto	i1l279
  9644  0F8E  0020               	movlb	0	; select bank0
  9645  0F8F  178D               	bsf	13,7	;volatile
  9646  0F90  2F93               	goto	i1l280
  9647  0F91                     i1l279:	
  9648  0F91  0020               	movlb	0	; select bank0
  9649  0F92  138D               	bcf	13,7	;volatile
  9650  0F93                     i1l280:	
  9651  0F93  0022               	movlb	2	; select bank2
  9652  0F94  178E               	bsf	14,7	;volatile
  9653  0F95  0000               	nop	;# 
  9654  0F96  0022               	movlb	2	; select bank2
  9655  0F97  138E               	bcf	14,7	;volatile
  9656  0F98  1C70               	btfss	i1Mrf49SpiTx@byte,0
  9657  0F99  2F9D               	goto	i1l283
  9658  0F9A  0020               	movlb	0	; select bank0
  9659  0F9B  178D               	bsf	13,7	;volatile
  9660  0F9C  2F9F               	goto	i1l284
  9661  0F9D                     i1l283:	
  9662  0F9D  0020               	movlb	0	; select bank0
  9663  0F9E  138D               	bcf	13,7	;volatile
  9664  0F9F                     i1l284:	
  9665  0F9F  0022               	movlb	2	; select bank2
  9666  0FA0  178E               	bsf	14,7	;volatile
  9667  0FA1  0000               	nop	;# 
  9668  0FA2  0022               	movlb	2	; select bank2
  9669  0FA3  138E               	bcf	14,7	;volatile
  9670                           
  9671                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  9672  0FA4  0020               	movlb	0	; select bank0
  9673  0FA5  138D               	bcf	13,7	;volatile
  9674  0FA6  0008               	return
  9675  0FA7                     __end_ofi1_Mrf49SpiTx:	
  9676  0FA7                     __ptext65:	
  9677 ;; *************** function i1_Mrf49RxSts *****************
  9678 ;; Defined at:
  9679 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;		None
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;		None
  9684 ;; Return value:  Size  Location     Type
  9685 ;;		None               void
  9686 ;; Registers used:
  9687 ;;		wreg, status,2, pclath, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 1F/1
  9690 ;;		On exit  : 1F/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9693 ;;      Params:         0       0       0       0
  9694 ;;      Locals:         0       0       0       0
  9695 ;;      Temps:          0       0       0       0
  9696 ;;      Totals:         0       0       0       0
  9697 ;;Total ram usage:        0 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    1
  9700 ;; This function calls:
  9701 ;;		i1_Mrf49SpiRx
  9702 ;; This function is called by:
  9703 ;;		i1_Mrf49xaServe
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           
  9708                           ;psect for function i1_Mrf49RxSts
  9709  0FA7                     i1_Mrf49RxSts:	
  9710                           
  9711                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
  9715  0FA7  120B               	bcf	11,4	;volatile
  9716                           
  9717                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  9718  0FA8  0020               	movlb	0	; select bank0
  9719  0FA9  130E               	bcf	14,6	;volatile
  9720                           
  9721                           ;mrf49xa_cmd.c: 36: mrf49Status.byte[0] = Mrf49SpiRx();
  9722  0FAA  27B4  318E         	fcall	i1_Mrf49SpiRx
  9723  0FAC  0020               	movlb	0	; select bank0
  9724  0FAD  00B9               	movwf	_mrf49Status
  9725                           
  9726                           ;mrf49xa_cmd.c: 37: mrf49Status.byte[1] = Mrf49SpiRx();
  9727  0FAE  27B4               	fcall	i1_Mrf49SpiRx
  9728  0FAF  0020               	movlb	0	; select bank0
  9729  0FB0  00BA               	movwf	_mrf49Status+1
  9730                           
  9731                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  9732  0FB1  170E               	bsf	14,6	;volatile
  9733                           
  9734                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  9735  0FB2  160B               	bsf	11,4	;volatile
  9736  0FB3  0008               	return
  9737  0FB4                     __end_ofi1_Mrf49RxSts:	
  9738  0FB4                     __ptext69:	
  9739 ;; *************** function i1_Mrf49SpiRx *****************
  9740 ;; Defined at:
  9741 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;		None
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
  9746 ;; Return value:  Size  Location     Type
  9747 ;;                  1    wreg      unsigned char 
  9748 ;; Registers used:
  9749 ;;		wreg, status,2
  9750 ;; Tracked objects:
  9751 ;;		On entry : 1F/0
  9752 ;;		On exit  : 1F/2
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9755 ;;      Params:         0       0       0       0
  9756 ;;      Locals:         1       0       0       0
  9757 ;;      Temps:          0       0       0       0
  9758 ;;      Totals:         1       0       0       0
  9759 ;;Total ram usage:        1 bytes
  9760 ;; Hardware stack levels used:    1
  9761 ;; This function calls:
  9762 ;;		Nothing
  9763 ;; This function is called by:
  9764 ;;		i1_Mrf49RxCmd
  9765 ;;		i1_Mrf49RxSts
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769                           
  9770                           ;psect for function i1_Mrf49SpiRx
  9771  0FB4                     i1_Mrf49SpiRx:	
  9772                           
  9773                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
  9777  0FB4  01F0               	clrf	i1Mrf49SpiRx@data
  9778                           
  9779                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  9780  0FB5  138D               	bcf	13,7	;volatile
  9781  0FB6  1A8E               	btfsc	14,5	;volatile
  9782  0FB7  17F0               	bsf	i1Mrf49SpiRx@data,7
  9783  0FB8  0022               	movlb	2	; select bank2
  9784  0FB9  178E               	bsf	14,7	;volatile
  9785  0FBA  0000               	nop	;# 
  9786  0FBB  0022               	movlb	2	; select bank2
  9787  0FBC  138E               	bcf	14,7	;volatile
  9788                           
  9789                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9790  0FBD  0020               	movlb	0	; select bank0
  9791  0FBE  1A8E               	btfsc	14,5	;volatile
  9792  0FBF  1770               	bsf	i1Mrf49SpiRx@data,6
  9793  0FC0  0022               	movlb	2	; select bank2
  9794  0FC1  178E               	bsf	14,7	;volatile
  9795  0FC2  0000               	nop	;# 
  9796  0FC3  0022               	movlb	2	; select bank2
  9797  0FC4  138E               	bcf	14,7	;volatile
  9798                           
  9799                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9800  0FC5  0020               	movlb	0	; select bank0
  9801  0FC6  1A8E               	btfsc	14,5	;volatile
  9802  0FC7  16F0               	bsf	i1Mrf49SpiRx@data,5
  9803  0FC8  0022               	movlb	2	; select bank2
  9804  0FC9  178E               	bsf	14,7	;volatile
  9805  0FCA  0000               	nop	;# 
  9806  0FCB  0022               	movlb	2	; select bank2
  9807  0FCC  138E               	bcf	14,7	;volatile
  9808                           
  9809                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9810  0FCD  0020               	movlb	0	; select bank0
  9811  0FCE  1A8E               	btfsc	14,5	;volatile
  9812  0FCF  1670               	bsf	i1Mrf49SpiRx@data,4
  9813  0FD0  0022               	movlb	2	; select bank2
  9814  0FD1  178E               	bsf	14,7	;volatile
  9815  0FD2  0000               	nop	;# 
  9816  0FD3  0022               	movlb	2	; select bank2
  9817  0FD4  138E               	bcf	14,7	;volatile
  9818                           
  9819                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9820  0FD5  0020               	movlb	0	; select bank0
  9821  0FD6  1A8E               	btfsc	14,5	;volatile
  9822  0FD7  15F0               	bsf	i1Mrf49SpiRx@data,3
  9823  0FD8  0022               	movlb	2	; select bank2
  9824  0FD9  178E               	bsf	14,7	;volatile
  9825  0FDA  0000               	nop	;# 
  9826  0FDB  0022               	movlb	2	; select bank2
  9827  0FDC  138E               	bcf	14,7	;volatile
  9828                           
  9829                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9830  0FDD  0020               	movlb	0	; select bank0
  9831  0FDE  1A8E               	btfsc	14,5	;volatile
  9832  0FDF  1570               	bsf	i1Mrf49SpiRx@data,2
  9833  0FE0  0022               	movlb	2	; select bank2
  9834  0FE1  178E               	bsf	14,7	;volatile
  9835  0FE2  0000               	nop	;# 
  9836  0FE3  0022               	movlb	2	; select bank2
  9837  0FE4  138E               	bcf	14,7	;volatile
  9838                           
  9839                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9840  0FE5  0020               	movlb	0	; select bank0
  9841  0FE6  1A8E               	btfsc	14,5	;volatile
  9842  0FE7  14F0               	bsf	i1Mrf49SpiRx@data,1
  9843  0FE8  0022               	movlb	2	; select bank2
  9844  0FE9  178E               	bsf	14,7	;volatile
  9845  0FEA  0000               	nop	;# 
  9846  0FEB  0022               	movlb	2	; select bank2
  9847  0FEC  138E               	bcf	14,7	;volatile
  9848                           
  9849                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  9850  0FED  0020               	movlb	0	; select bank0
  9851  0FEE  1A8E               	btfsc	14,5	;volatile
  9852  0FEF  1470               	bsf	i1Mrf49SpiRx@data,0
  9853  0FF0  0022               	movlb	2	; select bank2
  9854  0FF1  178E               	bsf	14,7	;volatile
  9855  0FF2  0000               	nop	;# 
  9856  0FF3  0022               	movlb	2	; select bank2
  9857  0FF4  138E               	bcf	14,7	;volatile
  9858                           
  9859                           ;mrf49xa_spi_pic16.c: 40: return data;
  9860  0FF5  0870               	movf	i1Mrf49SpiRx@data,w
  9861  0FF6  0008               	return
  9862  0FF7                     __end_ofi1_Mrf49SpiRx:	
  9863  0FF7                     PL16:	
  9864  0FF7  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9865  0FF8  397F               	andlw	127
  9866  0FF9  00F4               	movwf	??i1_Mrf49xaServe
  9867  0FFA  0AF4               	incf	??i1_Mrf49xaServe,f
  9868  0FFB  086D               	movf	(_rfTrcvStatus^(0+128)+77),w
  9869  0FFC  0674               	xorwf	??i1_Mrf49xaServe,w
  9870  0FFD  3980               	andlw	-128
  9871  0FFE  0674               	xorwf	??i1_Mrf49xaServe,w
  9872  0FFF  0008               	return
  9873  1000                     __end_ofPL16:	
  9874                           
  9875                           	psect	text70
  9876  0783                     __ptext70:	
  9877 ;; *************** function i1_Mrf49xaNeedsReset *****************
  9878 ;; Defined at:
  9879 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;		None
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;		None
  9884 ;; Return value:  Size  Location     Type
  9885 ;;                  2    0[COMMON] int 
  9886 ;; Registers used:
  9887 ;;		None
  9888 ;; Tracked objects:
  9889 ;;		On entry : 1E/0
  9890 ;;		On exit  : 1F/1
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9893 ;;      Params:         0       0       0       0
  9894 ;;      Locals:         0       0       0       0
  9895 ;;      Temps:          0       0       0       0
  9896 ;;      Totals:         0       0       0       0
  9897 ;;Total ram usage:        0 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; This function calls:
  9900 ;;		Nothing
  9901 ;; This function is called by:
  9902 ;;		_extInt
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           
  9907                           ;psect for function i1_Mrf49xaNeedsReset
  9908  0783                     i1_Mrf49xaNeedsReset:	
  9909                           
  9910                           ;mrf49xa.c: 147: rfTrcvStatus.needsReset = 1;
  9911                           
  9912                           ;incstack = 0
  9913                           ; Regs used in i1_Mrf49xaNeedsReset: []
  9914  0783  0021               	movlb	1	; select bank1
  9915  0784  17ED               	bsf	(_rfTrcvStatus^(0+128)+77),7
  9916  0785  0008               	return
  9917  0786                     __end_ofi1_Mrf49xaNeedsReset:	
  9918                           
  9919                           	psect	text71
  9920  0786                     __ptext71:	
  9921 ;; *************** function _ExtIntDeinit *****************
  9922 ;; Defined at:
  9923 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;		None               void
  9930 ;; Registers used:
  9931 ;;		None
  9932 ;; Tracked objects:
  9933 ;;		On entry : 1E/0
  9934 ;;		On exit  : 1E/0
  9935 ;;		Unchanged: 1E/0
  9936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9937 ;;      Params:         0       0       0       0
  9938 ;;      Locals:         0       0       0       0
  9939 ;;      Temps:          0       0       0       0
  9940 ;;      Totals:         0       0       0       0
  9941 ;;Total ram usage:        0 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; This function calls:
  9944 ;;		Nothing
  9945 ;; This function is called by:
  9946 ;;		_extInt
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           
  9951                           ;psect for function _ExtIntDeinit
  9952  0786                     _ExtIntDeinit:	
  9953                           
  9954                           ;interrupt.c: 19: INTCONbits.INTE = 0;
  9955                           
  9956                           ;incstack = 0
  9957                           ; Regs used in _ExtIntDeinit: []
  9958  0786  120B               	bcf	11,4	;volatile
  9959  0787  0008               	return
  9960  0788                     __end_of_ExtIntDeinit:	
  9961  007E                     btemp	set	126	;btemp
  9962  007E                     wtemp	set	126
  9963  007E                     wtemp0	set	126
  9964  0080                     wtemp1	set	128
  9965  0082                     wtemp2	set	130
  9966  0084                     wtemp3	set	132
  9967  0086                     wtemp4	set	134
  9968  0088                     wtemp5	set	136
  9969  007F                     wtemp6	set	127
  9970  007E                     ttemp	set	126
  9971  007E                     ttemp0	set	126
  9972  0081                     ttemp1	set	129
  9973  0084                     ttemp2	set	132
  9974  0087                     ttemp3	set	135
  9975  007F                     ttemp4	set	127
  9976  007E                     ltemp	set	126
  9977  007E                     ltemp0	set	126
  9978  0082                     ltemp1	set	130
  9979  0086                     ltemp2	set	134
  9980  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    62
    Data        1
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     25      28
    BANK1            80      0      79
    BANK2            80      0       0

Pointer List with Targets:

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwWrite@packetData	PTR unsigned int  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), NULL(NULL[0]), 

    handleFwWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwWrite@packet..(COMMON[21]), eepromTxByte@byte(COMMON[1]), 
		 -> NULL(NULL[0]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> rfTrcvStatus.rxPacket...data(BANK1[16]), rfTrcvStatus...data(BANK1[16]), handleFwRead@packet..(COMMON[21]), handleFwWrite@packet..(COMMON[21]), 
		 -> handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), NULL(NULL[0]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> NULL(NULL[0]), rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    S337rfTrcvStatus_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus(BANK1[79]), 

    rfTrcvStatus.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 80
		 -> rfTrcvStatus.rxPacket(BANK1[50]), rfTrcvStatus(BANK1[79]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendPowerState->_AdcSample
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _Mrf49xaReboot->_Mrf49xaModeRx
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49TxByte
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_handleFwWrite
    _handleFwWrite->_eepromRxBytes
    _handleFwWrite->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _handleFwRead->_eepromRxBytes
    _handleFwCmd->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26019
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     3     3      0    1420
                                              6 BANK0      3     3      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0     831
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        0     0      0     831
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     831
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      0     0      0     831
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    5616
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          3     3      0   15934
                                             22 BANK0      3     3      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          3     3      0    4670
                                              6 BANK0      1     1      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         2     2      0    1947
                                              4 BANK0      2     2      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        1     1      0     831
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           0     0      0      31
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     4      0    9227
                                             18 BANK0      4     4      0
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                        _handleFwCmd
                       _handleFwRead
                      _handleFwWrite
 ---------------------------------------------------------------------------------
 (3) _handleFwWrite                                       10    10      0    2718
                                              8 BANK0     10    10      0
                      _eepromRxBytes
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _handleFwRead                                         3     3      0    1767
                                              8 BANK0      3     3      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1809
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1619
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         1     1      0    1344
                                              6 BANK0      1     1      0
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      6     4      2    1154
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    1     1      0      94
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaNeedsReset                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          2     2      0     225
                                              4 BANK0      2     2      0
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _extInt                                               2     2      0    1033
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaServe                                       2     2      0    1009
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaModeRx                                      1     1      0     362
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49TxByte                                        1     1      0     294
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxCmd                                        2     1      1     272
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxSts                                         0     0      0      31
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49RxByte                                        0     0      0     252
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxCmd                                        2     2      0     252
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiTx                                        1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49SpiRx                                        1     1      0      31
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_Mrf49xaNeedsReset                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwRead
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
       _handleFwWrite
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
         _eepromTxBytes
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       8       2       57.1%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      73       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     19      1C       6       35.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      73      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Wed Jul 02 20:27:26 2014

           Mrf49xaTxPacket@crc 0023                              pc 0002                    __CFG_CP$OFF 0000  
                           PL8 06D2                             l32 043B                             l42 0490  
                           l34 0447                             l35 0449                             l39 0473  
                           l79 0008                            PL10 06ED                            PL20 0718  
                          PL12 06FB                            PL22 071E                            PL14 0708  
                          PL24 0724                            PL16 0FF7                            PL26 0729  
                          PL18 0712          Mrf49xaTxPacket@packet 0025                            l211 05BC  
                          l234 0342                            l260 0674                            l271 0694  
                          l263 067E                            l255 0668                            l415 033C  
                          l280 06AB                            l272 0695                            l264 067F  
                          l256 0669                            l283 06B5                            l275 069F  
                          l267 0689                            l259 0673                            l284 06B6  
                          l276 06A0                            l268 068A                            l437 04D1  
                          l438 04E9                            l279 06AA                            l538 018C  
                          l554 0144                            l379 023D                ??_PwrSensorInit 0020  
              ??_PwrSensorWake 0020                   __CFG_BORV$LO 0000                            wreg 0009  
             i1Mrf49xaModeRx@k 0073                   __CFG_IESO$ON 0000         ??_SoftI2cRepeatedStart 0021  
                         S3460 076D                   __CFG_LVP$OFF 0000         Mrf49xaTxPacket@needAck 0021  
                         l3002 05F4                           l3030 0125                           l3040 0147  
                         l3032 012B                           l3034 012F                           l3018 0115  
                         l3060 0177                           l3044 014B                           l3140 02E2  
                         l3054 0153                           l3134 02D4                           l3126 02BC  
                         l2432 0492                           l3064 017C                           l3048 014F  
                         l3056 016E                           l3144 02EB                           l3160 0312  
                         l2274 049E                           l2514 0219                           l3146 02ED  
                         l3138 02DE                           l2524 0224                           l2700 04F5  
                         l3172 0325                           l3156 030A                           l3182 032E  
                         l3174 0326                           l3406 0288                           l2376 04B2  
                         l2544 022B                           l2560 0413                           l2720 0512  
                         l2704 04FB                           l3432 02AE                           l2570 0436  
                         l2474 05A8                           l2802 004D                           l2650 06C0  
                         l2642 06C7                           l3434 02B0                           l2556 024B  
                         l2580 03EB                           l2468 059F                           l2652 0000  
                         l2900 00E9                           l2910 0619                           l2582 03F9  
                         l2750 055E                           l2742 054A                           l2734 052F  
                         l2568 0425                           l2752 0562                           l2744 054E  
                         l2728 051D                           l2904 00F0                           l2498 0216  
                         l2826 01A3                           l2818 018D                           l2762 0573  
                         l2754 0566                           l2738 053E                           l2770 0587  
                         l2690 04DD                           l2748 0555                           l2772 0593  
                         l2924 006E                           l2766 0575                           l2694 04ED  
                         l2686 04D4                           l2918 005A                           l2790 0030  
              Mrf49TxByte@byte 0023                           l2784 03B8                           l2858 01E0  
                         l2698 04F2                           l2962 0380                           l2938 0344  
                         l2788 03A3                           l2980 0397                           l2964 038C  
                         l2796 0039                           l2958 0372                           l2968 0394  
                         u2407 01CD                           u2417 04A1                           u2397 00E4  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                           _main 0277  
              __end_of_AdcInit 06D2                           fsr0h 0005                           fsr1h 0007  
             ??_PwrSensorSleep 0020                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 0020                           ttemp 007E  
                         wtemp 007E           __end_of_HandlePacket 017E        __end_ofi1_Mrf49xaModeRx 0F3B  
                __CFG_MCLRE$ON 0000            __end_of_Mrf49RxByte 059F                  ?_ExtIntDeinit 0070  
          __end_of_Mrf49TxByte 059D                ??_eepromRxBytes 0028                    _Mcp9800Read 03BD  
              ??_eepromTxBytes 0028               _RfSendPowerState 00A1            __end_of_Mrf49xaInit 03A2  
          __end_of_Mrf49xaTick 0342           _Mrf49xaPacketPending 05E4                          ?_main 0070  
                        i1l211 0F33                          i1l141 001B                          i1l142 001C  
                        i1l260 0F57                          i1l271 0F79                          i1l263 0F61  
                        i1l255 0F4A                          i1l280 0F93                          i1l272 0F7B  
                        i1l264 0F63                          i1l256 0F4B                          i1l283 0F9D  
                        i1l275 0F85                          i1l267 0F6D                          i1l259 0F55  
                        i1l284 0F9F                          i1l276 0F87                          i1l268 0F6F  
                        i1l437 0E48                          i1l438 0E60                          i1l279 0F91  
                   _Mrf49RxCmd 0076                     _Mrf49TxCmd 05C4                          _AdcGo 0102  
                   _Mrf49SpiRx 061F                     _Mrf49SpiTx 0663                     _Mrf49RxSts 05CD  
   __end_of_Mrf49xaAllocPacket 011B          __end_of_SoftI2cRxByte 049E          __end_of_SoftI2cTxByte 0465  
        __size_of_Mcp9800Start 0019             __size_of_AdcDeinit 0007        Mrf49xaTxPacket@response 0020  
           __size_of_AdcIsBusy 0004             __size_of_AdcSample 0028                 __CFG_BOREN$OFF 0000  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
       Mcp9800Start@resolution 0024                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
          i1_Mrf49xaNeedsReset 0783                 ??_ExtIntDeinit 0070                __initialization 0022  
                   _ExtIntInit 0619                   __end_of_main 02B6           __end_of_handleFwRead 01BC  
               __CFG_LPBOR$OFF 0000          ?_Mrf49xaPacketPending 0070                   _Mcp9800Start 03FA  
                       ??_main 0039           ?i1_Mrf49xaNeedsReset 0070                         ?_AdcGo 0070  
         __size_of_handleFwCmd 0032           __end_of_Mrf49xaTxAck 026F           __end_of_Mrf49xaServe 0598  
                ??_PwrI2cSleep 0020            HandlePacket@sendAck 0033                         _ADCON0 009D  
                       _ADCON1 009E                         _ADCON2 009F            HandlePacket@sendMsg 0034  
                    ??_AdcInit 0020                         _ADRESH 009C                         _ADRESL 009B  
                       _ANSELA 018C                         _ANSELB 018D                         _ANSELC 018E  
           i1Mrf49xaServe@data 0075                         i1l3300 0E69                         i1l3302 0E6C  
                       i1l3330 0E95                         i1l3322 0E8A                         i1l3306 0E72  
                       i1l3340 0EB5                         i1l3086 0F1F                         i1l3350 0ECC  
                       i1l3352 0ED5                         i1l3344 0EC1                         i1l3336 0EA8  
                       i1l3354 0ED9                         i1l3346 0EC5                         i1l3364 0EEA  
                       i1l3356 0EDD                         i1l3372 0EFE                         i1l3292 0E54  
                       i1l3374 0F0A                         i1l3368 0EEC                         i1l3296 0E64  
                       i1l3288 0E4B                         i1l3388 000B                         _FVRCON 0117  
                       _OSCCON 0099                     _PwrI2cInit 0600             AdcChSelect@channel 0020  
                   _PwrI2cWake 0608                    _Mrf49RxByte 059D                    _Mrf49TxByte 0598  
                ??_SoftI2cInit 0024                  ??_SoftI2cStop 0021      __size_of_Mrf49xaModeSleep 0022  
               __CFG_PWRTE$OFF 0000                     _SoftI2cNop 049E                   ?_AdcChSelect 0070  
             ?i1_Mrf49xaModeRx 0070                    _Mrf49xaInit 0342                         _Sleepy 03A2  
                  _Mrf49xaTick 02B6                     _PwrAdcInit 05FB                     _PwrAdcWake 011B  
                ??_PwrAdcSleep 0020                _Mrf49xaRxPacket 05ED              __end_of_AdcDeinit 06C7  
               __CFG_STVREN$ON 0000              __end_of_AdcIsBusy 0108                _Mrf49xaTxPacket 0209  
                       _extInt 0004              __end_of_AdcSample 0102                _Mrf49xaShutdown 06BE  
                   _PwrRfSleep 0609          ??i1_Mrf49xaNeedsReset 0070                    ?_Mrf49RxCmd 0070  
                  ?_Mrf49TxCmd 0021                    ?_Mrf49SpiRx 0070                    ?_Mrf49SpiTx 0070  
                  ?_Mrf49RxSts 0070             __size_of_PwrRfInit 0021             __size_of_PwrRfWake 0002  
        __size_of_HandlePacket 005D        __end_of__initialization 002E          __end_ofi1_Mrf49RxByte 0F17  
          __end_of_PwrI2cSleep 05DA          __end_ofi1_Mrf49TxByte 0F14                  __end_of_AdcGo 0104  
                  ?_ExtIntInit 0070                 __pcstackCOMMON 0070               SoftI2cRxByte@ack 0021  
                 __pidataBANK0 0000            __end_of_SoftI2cInit 0277            __end_of_SoftI2cStop 04C1  
       ??_Mrf49xaPacketPending 0020        __size_ofi1_Mrf49xaServe 00D7                     __end_ofPL8 06ED  
          __end_of_PwrAdcSleep 0619          __end_of_handleFwWrite 0209                        ??_AdcGo 0020  
               _OPTION_REGbits 0095                   _HandlePacket 0121        Mrf49xaFreePacket@packet 0020  
         __end_of_ExtIntDeinit 0788       __end_of_RfSendPowerState 00DA                     __pbssBANK0 0039  
                   __pbssBANK1 00A0                    ?_PwrI2cInit 0070                    ?_PwrI2cWake 0070  
                ?_SoftI2cStart 0070        __end_of_Mrf49xaRxPacket 05FB        __end_of_Mrf49xaTxPacket 024F  
        __size_of_handleFwRead 000C          __end_of_Mrf49xaModeRx 05C4          __end_of_Mrf49xaModeTx 0076  
                  ?_SoftI2cNop 0070          __end_of_Mrf49xaReboot 06C0            __size_of_Mrf49RxCmd 000A  
            __end_of_PwrRfInit 00A1            __size_of_Mrf49TxCmd 0009              __end_of_PwrRfWake 060E  
          __size_of_Mrf49SpiRx 0044            __size_of_Mrf49SpiTx 005B            __size_of_Mrf49RxSts 000B  
                   __pmaintext 0277                        ?_Sleepy 0020        __end_of_Mrf49xaShutdown 06BF  
                  ?_PwrAdcInit 0070                    ?_PwrAdcWake 0070                   ?_Mcp9800Read 0070  
                   __pintentry 0004                        ?_extInt 0070          __size_of_Mrf49xaTxAck 0020  
        __size_of_Mrf49xaServe 00D7                    ?_PwrRfSleep 0070              handleFwCmd@packet 0028  
        __end_of_PwrSensorInit 0612          __end_of_PwrSensorWake 0615                    _PwrI2cSleep 05D8  
                      _AdcInit 06C7            __size_of_ExtIntInit 0006  __size_of_SoftI2cRepeatedStart 0015  
                   __stringtab 072E                   _handleFwRead 01B0                 ??_SoftI2cStart 0021  
           _Mrf49xaAllocPacket 010F               _Mrf49xaModeSleep 0030                    _SoftI2cInit 026F  
                ?i1_Mrf49RxCmd 0070                  ?i1_Mrf49TxCmd 0071                  ?i1_Mrf49SpiRx 0070  
                ?i1_Mrf49SpiTx 0070                    _SoftI2cStop 04B2                  ?i1_Mrf49RxSts 0070  
                      Sleepy@b 0023                   _Mrf49xaTxAck 024F                   _Mrf49xaServe 04C1  
              __size_of_Sleepy 001B           eepromRxBytes@address 0024                    _PwrAdcSleep 0615  
          ?_Mrf49xaAllocPacket 0070           __size_of_AdcChSelect 0007          __end_of_eepromRxBytes 0437  
        __end_of_eepromTxBytes 03FA                __size_of_extInt 001C              _mrfRegset_InitCnt 072F  
                      __ptext1 00A1                        __ptext2 011B                        __ptext3 06C7  
                      __ptext4 0615                        __ptext5 06C0                        __ptext6 010F  
                      __ptext7 00DA                        __ptext8 0104                        __ptext9 0102  
          __size_of_PwrI2cInit 0008            __size_of_PwrI2cWake 0001            handleFwWrite@packet 0031  
                ?_AdcGetResult 0020            __size_of_SoftI2cNop 0007           ??_Mrf49xaAllocPacket 0020  
          __size_of_PwrAdcInit 0005            __size_of_PwrAdcWake 0006                        clrloop0 077E  
         end_of_initialization 002E                   ?_Mrf49RxByte 0070                   ?_Mrf49TxByte 0070  
               ??i1_Mrf49RxCmd 0071                 ??i1_Mrf49TxCmd 0072                 ??i1_Mrf49SpiRx 0070  
               ??i1_Mrf49SpiTx 0070                 ??i1_Mrf49RxSts 0071               ?_Mrf49xaRxPacket 0070  
          __size_of_PwrRfSleep 0003               ?_Mrf49xaTxPacket 0020                   ?_Mrf49xaInit 0070  
         __end_of_mrfRegset_Rx 075F           __end_of_mrfRegset_Tx 0767                   ?_Mrf49xaTick 0070  
             ?_Mrf49xaShutdown 0070         __size_of_SoftI2cRxByte 0039         __size_of_SoftI2cTxByte 002E  
               i1_Mrf49xaServe 0E38      __end_of_mrfRegset_InitCnt 0730        __size_of_PwrSensorSleep 0003  
                ??_handleFwCmd 0028                      _PORTAbits 000C                      _PORTBbits 000D  
                    _PORTCbits 000E                      _AdcDeinit 06C0          __size_of_ExtIntDeinit 0002  
                    _AdcIsBusy 0104                   ??_Mrf49RxCmd 0021                   ??_Mrf49TxCmd 0022  
                 ??_Mrf49SpiRx 0020                   ??_Mrf49SpiTx 0020                   ??_Mrf49RxSts 0021  
                    _AdcSample 00DA               __CFG_FOSC$INTOSC 0000                 ??_AdcGetResult 0022  
                    _TRISAbits 008C                      _TRISBbits 008D                      _TRISCbits 008E  
                  AdcSample@ch 0025                 Mrf49SpiRx@data 0020                 Mrf49SpiTx@byte 0020  
           __end_of_Mrf49RxCmd 0080             __end_of_Mrf49TxCmd 05CD         __end_ofi1_Mrf49xaServe 0F0F  
                 ??_ExtIntInit 0020             __end_of_Mrf49SpiRx 0663             __end_of_Mrf49SpiTx 06BE  
           __end_of_Mrf49RxSts 05D8                   _ExtIntDeinit 0786    __end_ofi1_Mrf49xaNeedsReset 0786  
               __end_of_Sleepy 03BD              SoftI2cRxByte@data 0022           __size_of_Mcp9800Read 000C  
            eepromRxBytes@data 0026           __end_of_SoftI2cStart 04B2       __size_ofi1_Mrf49xaModeRx 0024  
                   ?_AdcDeinit 0070                 __end_of_extInt 0020              eepromRxBytes@size 0027  
                   ?_AdcIsBusy 0070     __end_of_mrfRegset_SleepCnt 0732                     ?_AdcSample 0022  
                  __end_ofPL10 06FB                    __end_ofPL20 071E                    __end_ofPL12 0708  
                  __end_ofPL22 0724                    __end_ofPL14 0712                    __end_ofPL24 0729  
                  __end_ofPL16 1000                    __end_ofPL26 072E                    __end_ofPL18 0718  
          start_initialization 0022                  _SoftI2cRxByte 0465            __end_of_handleFwCmd 01B0  
                _SoftI2cTxByte 0437                 handleFwWrite@i 002E             __end_of_ExtIntInit 061F  
            SoftI2cTxByte@data 0022              ?_RfSendPowerState 0070                   ??_PwrI2cInit 0024  
                 ??_PwrI2cWake 0020             HandlePacket@packet 0035             ??_RfSendPowerState 0026  
                 ??_SoftI2cNop 0020                       ??_Sleepy 0022                   ??_PwrAdcInit 0020  
                 ??_PwrAdcWake 0020                ?i1_Mrf49xaServe 0070                _mrfRegset_RxCnt 0730  
              _mrfRegset_TxCnt 0732                _mrfRegset_Sleep 0767                      _PwrRfInit 0080  
                    _PwrRfWake 060C                    __pdataBANK0 003B                       ??_extInt 0076  
__size_of_Mrf49xaPacketPending 0009              eepromTxBytes@data 0026                   ??_PwrRfSleep 0024  
            eepromTxBytes@size 0027              RfSendPowerState@s 0026         __size_ofi1_Mrf49RxByte 0003  
       __size_ofi1_Mrf49TxByte 0005       __end_of_Mrf49xaModeSleep 0052             __end_of_PwrI2cInit 0608  
         __end_ofi1_Mrf49RxCmd 0E38           __end_ofi1_Mrf49TxCmd 0F45             __end_of_PwrI2cWake 0609  
         __end_ofi1_Mrf49SpiRx 0FF7           __end_ofi1_Mrf49SpiTx 0FA7           __end_ofi1_Mrf49RxSts 0FB4  
                    ___latbits 0001                  __pcstackBANK0 0020                 ?_SoftI2cRxByte 0070  
               ?_SoftI2cTxByte 0070              i1Mrf49TxByte@byte 0073                   ?_PwrI2cSleep 0070  
           __end_of_SoftI2cNop 04A5                       ?_AdcInit 0070             __end_of_PwrAdcInit 0600  
           __end_of_PwrAdcWake 0121                   _rfTrcvStatus 00A0                   ?_SoftI2cInit 0070  
                 ?_SoftI2cStop 0070         __size_of_handleFwWrite 004D           __size_of_Mrf49RxByte 0002  
           __end_of_PwrRfSleep 060C           __size_of_Mrf49TxByte 0005           __end_of_AdcGetResult 0000  
 __end_of_SoftI2cRepeatedStart 03DE                   ?_PwrAdcSleep 0070           __size_of_Mrf49xaInit 0060  
         __size_of_Mrf49xaTick 008C                     ?_PwrRfInit 0070                     ?_PwrRfWake 0070  
               _PwrSensorSleep 05DA                  ?_Mcp9800Start 0070                      __pstrings 072E  
                  ??_AdcDeinit 0020                      __pswtext1 076D                    ??_AdcIsBusy 0020  
                  _handleFwCmd 017E                    ??_AdcSample 0024                 __size_of_AdcGo 0002  
       __size_of_Mrf49xaModeRx 0025         __size_of_Mrf49xaModeTx 0024                   _mrfRegset_Rx 0753  
                 _mrfRegset_Tx 075F         __size_of_Mrf49xaReboot 0001              ??i1_Mrf49xaModeRx 0073  
             __CFG_WDTE$SWDTEN 0000                       _LATAbits 010C                       _LATBbits 010D  
                     _LATCbits 010E                  i1_Mrf49RxByte 0F14        __end_of_mrfRegset_RxCnt 0731  
                i1_Mrf49TxByte 0F0F        __end_of_mrfRegset_TxCnt 0733        __end_of_mrfRegset_Sleep 076D  
                    clear_ram0 077D                  ??_AdcChSelect 0020                    _mrf49Status 0039  
            _Mrf49xaFreePacket 05DF                 Mrf49xaModeRx@k 0023                 Mrf49xaModeTx@k 0023  
       __end_of_PwrSensorSleep 05DD          __size_of_SoftI2cStart 000D         __size_of_PwrSensorInit 0004  
       __size_of_PwrSensorWake 0003                  Mrf49RxCmd@cmd 0021             ?_Mrf49xaFreePacket 0070  
                Mrf49RxCmd@val 0022                 ??_Mcp9800Start 0024                  Mrf49TxCmd@cmd 0022  
                Mrf49TxCmd@val 0021            ??_Mrf49xaFreePacket 0020                ??_SoftI2cRxByte 0021  
                _handleFwWrite 01BC              _Mrf49xaNeedsReset 05DD                ??_SoftI2cTxByte 0021  
                     _WPUAbits 020C             ?_Mrf49xaNeedsReset 0070    __size_of_Mrf49xaAllocPacket 000C  
             __size_of_AdcInit 000B        handleFwWrite@packetData 002D            ??_Mrf49xaNeedsReset 0020  
       __size_of_eepromRxBytes 0024                 ?i1_Mrf49RxByte 0070         __size_of_eepromTxBytes 001C  
                 _SoftI2cStart 04A5                 ?i1_Mrf49TxByte 0070      __end_of_Mrf49xaFreePacket 05E4  
                    extInt@ofw 0077                       Sleepy@ms 0020                  _Mrf49xaModeRx 059F  
                _Mrf49xaModeTx 0052                  _Mrf49xaReboot 06BF                 _mrfRegset_Init 0733  
              ?_PwrSensorSleep 0070                    ??_PwrRfInit 0027                    ??_PwrRfWake 0024  
     __size_of_Mrf49xaRxPacket 000E          __size_ofi1_Mrf49RxCmd 000C          __size_ofi1_Mrf49TxCmd 000A  
        __size_ofi1_Mrf49SpiRx 0043          __size_ofi1_Mrf49SpiTx 0062               i1Mrf49SpiRx@data 0070  
        __size_ofi1_Mrf49RxSts 000D            __end_of_AdcChSelect 010F       __size_of_Mrf49xaTxPacket 0046  
             i1Mrf49SpiTx@byte 0070                 SoftI2cRxByte@i 0023      __end_of_Mrf49xaNeedsReset 05DF  
           __end_of__stringtab 072F       __size_of_Mrf49xaShutdown 0001                 ?_handleFwWrite 0070  
               SoftI2cTxByte@i 0023                  ?_HandlePacket 0070           handleFwWrite@address 002F  
                     _coldBoot 003B                       __ptext10 0000                       __ptext11 0108  
                     __ptext20 0080                       __ptext12 0612                       __ptext21 0608  
                     __ptext13 05DA                       __ptext30 0342                       __ptext22 05D8  
                     __ptext14 060E                       __ptext31 03A2                       __ptext23 0600  
                     __ptext15 060C                       __ptext40 061F                       __ptext32 04C1  
                     __ptext24 026F                       __ptext16 06BF                       __ptext41 0121  
                     __ptext33 059F                       __ptext25 05FB                       __ptext17 0609  
                     __ptext50 05DF                       __ptext42 01BC                       __ptext34 0598  
                     __ptext26 02B6                       __ptext18 06BE                       __ptext51 0619  
                     __ptext43 03DE                       __ptext35 05C4                       __ptext27 05ED  
                     __ptext19 0030                       __ptext52 05DD                       __ptext44 01B0  
                     __ptext36 05CD                       __ptext28 05E4                       __ptext61 0E38  
                     __ptext53 03FA                       __ptext45 017E                       __ptext37 059D  
                     __ptext29 0052                       __ptext70 0783                       __ptext62 0F17  
                     __ptext54 03BD                       __ptext46 0413                       __ptext38 0076  
                     __ptext71 0786                       __ptext63 0F0F                       __ptext55 0437  
                     __ptext47 03C9                       __ptext39 0663                       __ptext64 0F3B  
                     __ptext56 04B2                       __ptext48 024F                       __ptext65 0FA7  
                     __ptext57 04A5                       __ptext49 0209                  _PwrSensorInit 060E  
                     __ptext66 0F14                       __ptext58 0465                       __ptext67 0E2C  
                     __ptext59 049E                       __ptext68 0F45                       __ptext69 0FB4  
                _PwrSensorWake 0612           _SoftI2cRepeatedStart 03C9           __size_of_PwrI2cSleep 0002  
        __size_of_AdcGetResult 0000             _mrfRegset_SleepCnt 0731               ??i1_Mrf49xaServe 0074  
                __size_of_main 003F                   i1_Mrf49RxCmd 0E2C         __end_of_mrfRegset_Init 0753  
           Mrf49xaTxAck@packet 0026                   i1_Mrf49TxCmd 0F3B                   i1_Mrf49SpiRx 0FB4  
                 i1_Mrf49SpiTx 0F45                 ?_Mrf49xaModeRx 0070                 ?_Mrf49xaModeTx 0070  
                 i1_Mrf49RxSts 0FA7                 ?_Mrf49xaReboot 0070           __size_of_SoftI2cInit 0008  
         __size_of_SoftI2cStop 000F                  ??_Mcp9800Read 0024      __size_of_RfSendPowerState 0039  
         __size_of_PwrAdcSleep 0004                  _eepromRxBytes 0413              Mrf49xaModeSleep@k 0023  
                _eepromTxBytes 03DE                i1Mrf49RxCmd@cmd 0071                i1Mrf49RxCmd@val 0072  
               ??_HandlePacket 0032   __size_ofi1_Mrf49xaNeedsReset 0003             Mrf49xaTick@timeout 0037  
                   _INTCONbits 000B              ?_Mrf49xaModeSleep 0070                i1Mrf49TxCmd@cmd 0072  
              i1Mrf49TxCmd@val 0071                 ?_PwrSensorInit 0070                   _AdcGetResult 0000  
               ?_PwrSensorWake 0070             ??_Mrf49xaModeSleep 0023          ?_SoftI2cRepeatedStart 0070  
                ?_handleFwRead 0070                ??i1_Mrf49RxByte 0073                       intlevel1 0000  
              ??i1_Mrf49TxByte 0073   __end_of_Mrf49xaPacketPending 05ED           __end_of_Mcp9800Start 0413  
            __CFG_CLKOUTEN$OFF 0000     __size_of_Mrf49xaFreePacket 0005         RfSendPowerState@packet 0028  
                ?_Mrf49xaTxAck 0070                    _AdcChSelect 0108                   Mrf49xaInit@k 0026  
           handleFwRead@packet 002A                  ?_Mrf49xaServe 0070              Mrf49xaTick@packet 0038  
               ?_eepromRxBytes 0024           eepromTxBytes@address 0024                i1_Mrf49xaModeRx 0F17  
               ?_eepromTxBytes 0024                ??_handleFwWrite 0028     __size_of_Mrf49xaNeedsReset 0002  
                 ?_handleFwCmd 0070            __end_of_Mcp9800Read 03C9              ??_Mrf49xaRxPacket 0020  
            ??_Mrf49xaTxPacket 0022                     _WDTCONbits 0097                 ??_handleFwRead 0028  
            ??_Mrf49xaShutdown 0024                  ??_Mrf49RxByte 0023                  ??_Mrf49TxByte 0023  
              ??_Mrf49xaModeRx 0023                ??_Mrf49xaModeTx 0023                ??_Mrf49xaReboot 0024  
               ??_Mrf49xaTxAck 0026               Mrf49xaServe@data 0025                 ??_Mrf49xaServe 0024  
                ??_Mrf49xaInit 0026                  ??_Mrf49xaTick 0036               Mrf49xaTxPacket@i 0024  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Sun Sep  7 08:46:05 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text18,local,class=CODE,merge=1,delta=2
    17                           	psect	text20,local,class=CODE,merge=1,delta=2
    18                           	psect	text26,local,class=CODE,merge=1,delta=2
    19                           	psect	text28,local,class=CODE,merge=1,delta=2
    20                           	psect	text30,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text76,local,class=CODE,merge=1,delta=2
    23                           	psect	text79,local,class=CODE,merge=1,delta=2
    24                           	psect	pa_nodes,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     	;# 
    27  0001                     	;# 
    28  0002                     	;# 
    29  0003                     	;# 
    30  0004                     	;# 
    31  0005                     	;# 
    32  0006                     	;# 
    33  0007                     	;# 
    34  0008                     	;# 
    35  0009                     	;# 
    36  000A                     	;# 
    37  000B                     	;# 
    38  000C                     	;# 
    39  000D                     	;# 
    40  000E                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0016                     	;# 
    47  0017                     	;# 
    48  0018                     	;# 
    49  0019                     	;# 
    50  001A                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  008C                     	;# 
    54  008D                     	;# 
    55  008E                     	;# 
    56  0091                     	;# 
    57  0092                     	;# 
    58  0093                     	;# 
    59  0095                     	;# 
    60  0096                     	;# 
    61  0097                     	;# 
    62  0099                     	;# 
    63  009A                     	;# 
    64  009B                     	;# 
    65  009B                     	;# 
    66  009C                     	;# 
    67  009D                     	;# 
    68  009E                     	;# 
    69  009F                     	;# 
    70  010C                     	;# 
    71  010D                     	;# 
    72  010E                     	;# 
    73  0111                     	;# 
    74  0112                     	;# 
    75  0113                     	;# 
    76  0114                     	;# 
    77  0115                     	;# 
    78  0116                     	;# 
    79  0117                     	;# 
    80  0118                     	;# 
    81  0119                     	;# 
    82  011D                     	;# 
    83  018C                     	;# 
    84  018D                     	;# 
    85  018E                     	;# 
    86  0191                     	;# 
    87  0191                     	;# 
    88  0192                     	;# 
    89  0193                     	;# 
    90  0193                     	;# 
    91  0194                     	;# 
    92  0195                     	;# 
    93  0196                     	;# 
    94  0199                     	;# 
    95  019A                     	;# 
    96  019B                     	;# 
    97  019B                     	;# 
    98  019C                     	;# 
    99  019D                     	;# 
   100  019E                     	;# 
   101  019F                     	;# 
   102  020C                     	;# 
   103  020D                     	;# 
   104  0211                     	;# 
   105  0211                     	;# 
   106  0212                     	;# 
   107  0212                     	;# 
   108  0213                     	;# 
   109  0213                     	;# 
   110  0214                     	;# 
   111  0214                     	;# 
   112  0215                     	;# 
   113  0215                     	;# 
   114  0215                     	;# 
   115  0216                     	;# 
   116  0216                     	;# 
   117  0217                     	;# 
   118  0217                     	;# 
   119  0391                     	;# 
   120  0392                     	;# 
   121  0393                     	;# 
   122  0394                     	;# 
   123  0395                     	;# 
   124  0396                     	;# 
   125  0498                     	;# 
   126  0498                     	;# 
   127  0499                     	;# 
   128  049A                     	;# 
   129  049B                     	;# 
   130  049B                     	;# 
   131  049C                     	;# 
   132  049E                     	;# 
   133  049F                     	;# 
   134  0611                     	;# 
   135  0612                     	;# 
   136  0613                     	;# 
   137  0613                     	;# 
   138  0614                     	;# 
   139  0615                     	;# 
   140  0616                     	;# 
   141  0616                     	;# 
   142  0617                     	;# 
   143  0618                     	;# 
   144  0619                     	;# 
   145  0619                     	;# 
   146  061A                     	;# 
   147  061B                     	;# 
   148  061C                     	;# 
   149  061C                     	;# 
   150  0691                     	;# 
   151  0692                     	;# 
   152  0693                     	;# 
   153  0694                     	;# 
   154  0695                     	;# 
   155  0F0F                     	;# 
   156  0F10                     	;# 
   157  0F11                     	;# 
   158  0F12                     	;# 
   159  0F13                     	;# 
   160  0F14                     	;# 
   161  0F15                     	;# 
   162  0F16                     	;# 
   163  0F17                     	;# 
   164  0F18                     	;# 
   165  0F19                     	;# 
   166  0F1A                     	;# 
   167  0F1B                     	;# 
   168  0F1C                     	;# 
   169  0F1D                     	;# 
   170  0F1E                     	;# 
   171  0F1F                     	;# 
   172  0F20                     	;# 
   173  0F21                     	;# 
   174  0F22                     	;# 
   175  0F23                     	;# 
   176  0F24                     	;# 
   177  0F25                     	;# 
   178  0F26                     	;# 
   179  0F27                     	;# 
   180  0F28                     	;# 
   181  0F29                     	;# 
   182  0F2A                     	;# 
   183  0F2B                     	;# 
   184  0F2C                     	;# 
   185  0F2D                     	;# 
   186  0F2E                     	;# 
   187  0F2F                     	;# 
   188  0F8C                     	;# 
   189  0F8D                     	;# 
   190  0F91                     	;# 
   191  0F95                     	;# 
   192  0F96                     	;# 
   193  0F97                     	;# 
   194  0F9C                     	;# 
   195  0F9D                     	;# 
   196  0F9E                     	;# 
   197  0FE3                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0016                     	;# 
   230  0017                     	;# 
   231  0018                     	;# 
   232  0019                     	;# 
   233  001A                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0093                     	;# 
   242  0095                     	;# 
   243  0096                     	;# 
   244  0097                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009B                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  0111                     	;# 
   257  0112                     	;# 
   258  0113                     	;# 
   259  0114                     	;# 
   260  0115                     	;# 
   261  0116                     	;# 
   262  0117                     	;# 
   263  0118                     	;# 
   264  0119                     	;# 
   265  011D                     	;# 
   266  018C                     	;# 
   267  018D                     	;# 
   268  018E                     	;# 
   269  0191                     	;# 
   270  0191                     	;# 
   271  0192                     	;# 
   272  0193                     	;# 
   273  0193                     	;# 
   274  0194                     	;# 
   275  0195                     	;# 
   276  0196                     	;# 
   277  0199                     	;# 
   278  019A                     	;# 
   279  019B                     	;# 
   280  019B                     	;# 
   281  019C                     	;# 
   282  019D                     	;# 
   283  019E                     	;# 
   284  019F                     	;# 
   285  020C                     	;# 
   286  020D                     	;# 
   287  0211                     	;# 
   288  0211                     	;# 
   289  0212                     	;# 
   290  0212                     	;# 
   291  0213                     	;# 
   292  0213                     	;# 
   293  0214                     	;# 
   294  0214                     	;# 
   295  0215                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0216                     	;# 
   299  0216                     	;# 
   300  0217                     	;# 
   301  0217                     	;# 
   302  0391                     	;# 
   303  0392                     	;# 
   304  0393                     	;# 
   305  0394                     	;# 
   306  0395                     	;# 
   307  0396                     	;# 
   308  0498                     	;# 
   309  0498                     	;# 
   310  0499                     	;# 
   311  049A                     	;# 
   312  049B                     	;# 
   313  049B                     	;# 
   314  049C                     	;# 
   315  049E                     	;# 
   316  049F                     	;# 
   317  0611                     	;# 
   318  0612                     	;# 
   319  0613                     	;# 
   320  0613                     	;# 
   321  0614                     	;# 
   322  0615                     	;# 
   323  0616                     	;# 
   324  0616                     	;# 
   325  0617                     	;# 
   326  0618                     	;# 
   327  0619                     	;# 
   328  0619                     	;# 
   329  061A                     	;# 
   330  061B                     	;# 
   331  061C                     	;# 
   332  061C                     	;# 
   333  0691                     	;# 
   334  0692                     	;# 
   335  0693                     	;# 
   336  0694                     	;# 
   337  0695                     	;# 
   338  0F0F                     	;# 
   339  0F10                     	;# 
   340  0F11                     	;# 
   341  0F12                     	;# 
   342  0F13                     	;# 
   343  0F14                     	;# 
   344  0F15                     	;# 
   345  0F16                     	;# 
   346  0F17                     	;# 
   347  0F18                     	;# 
   348  0F19                     	;# 
   349  0F1A                     	;# 
   350  0F1B                     	;# 
   351  0F1C                     	;# 
   352  0F1D                     	;# 
   353  0F1E                     	;# 
   354  0F1F                     	;# 
   355  0F20                     	;# 
   356  0F21                     	;# 
   357  0F22                     	;# 
   358  0F23                     	;# 
   359  0F24                     	;# 
   360  0F25                     	;# 
   361  0F26                     	;# 
   362  0F27                     	;# 
   363  0F28                     	;# 
   364  0F29                     	;# 
   365  0F2A                     	;# 
   366  0F2B                     	;# 
   367  0F2C                     	;# 
   368  0F2D                     	;# 
   369  0F2E                     	;# 
   370  0F2F                     	;# 
   371  0F8C                     	;# 
   372  0F8D                     	;# 
   373  0F91                     	;# 
   374  0F95                     	;# 
   375  0F96                     	;# 
   376  0F97                     	;# 
   377  0F9C                     	;# 
   378  0F9D                     	;# 
   379  0F9E                     	;# 
   380  0FE3                     	;# 
   381  0FE4                     	;# 
   382  0FE5                     	;# 
   383  0FE6                     	;# 
   384  0FE7                     	;# 
   385  0FE8                     	;# 
   386  0FE9                     	;# 
   387  0FEA                     	;# 
   388  0FEB                     	;# 
   389  0FED                     	;# 
   390  0FEE                     	;# 
   391  0FEF                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  008C                     	;# 
   420  008D                     	;# 
   421  008E                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0093                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0099                     	;# 
   429  009A                     	;# 
   430  009B                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  010C                     	;# 
   437  010D                     	;# 
   438  010E                     	;# 
   439  0111                     	;# 
   440  0112                     	;# 
   441  0113                     	;# 
   442  0114                     	;# 
   443  0115                     	;# 
   444  0116                     	;# 
   445  0117                     	;# 
   446  0118                     	;# 
   447  0119                     	;# 
   448  011D                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451  018E                     	;# 
   452  0191                     	;# 
   453  0191                     	;# 
   454  0192                     	;# 
   455  0193                     	;# 
   456  0193                     	;# 
   457  0194                     	;# 
   458  0195                     	;# 
   459  0196                     	;# 
   460  0199                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019C                     	;# 
   465  019D                     	;# 
   466  019E                     	;# 
   467  019F                     	;# 
   468  020C                     	;# 
   469  020D                     	;# 
   470  0211                     	;# 
   471  0211                     	;# 
   472  0212                     	;# 
   473  0212                     	;# 
   474  0213                     	;# 
   475  0213                     	;# 
   476  0214                     	;# 
   477  0214                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0216                     	;# 
   482  0216                     	;# 
   483  0217                     	;# 
   484  0217                     	;# 
   485  0391                     	;# 
   486  0392                     	;# 
   487  0393                     	;# 
   488  0394                     	;# 
   489  0395                     	;# 
   490  0396                     	;# 
   491  0498                     	;# 
   492  0498                     	;# 
   493  0499                     	;# 
   494  049A                     	;# 
   495  049B                     	;# 
   496  049B                     	;# 
   497  049C                     	;# 
   498  049E                     	;# 
   499  049F                     	;# 
   500  0611                     	;# 
   501  0612                     	;# 
   502  0613                     	;# 
   503  0613                     	;# 
   504  0614                     	;# 
   505  0615                     	;# 
   506  0616                     	;# 
   507  0616                     	;# 
   508  0617                     	;# 
   509  0618                     	;# 
   510  0619                     	;# 
   511  0619                     	;# 
   512  061A                     	;# 
   513  061B                     	;# 
   514  061C                     	;# 
   515  061C                     	;# 
   516  0691                     	;# 
   517  0692                     	;# 
   518  0693                     	;# 
   519  0694                     	;# 
   520  0695                     	;# 
   521  0F0F                     	;# 
   522  0F10                     	;# 
   523  0F11                     	;# 
   524  0F12                     	;# 
   525  0F13                     	;# 
   526  0F14                     	;# 
   527  0F15                     	;# 
   528  0F16                     	;# 
   529  0F17                     	;# 
   530  0F18                     	;# 
   531  0F19                     	;# 
   532  0F1A                     	;# 
   533  0F1B                     	;# 
   534  0F1C                     	;# 
   535  0F1D                     	;# 
   536  0F1E                     	;# 
   537  0F1F                     	;# 
   538  0F20                     	;# 
   539  0F21                     	;# 
   540  0F22                     	;# 
   541  0F23                     	;# 
   542  0F24                     	;# 
   543  0F25                     	;# 
   544  0F26                     	;# 
   545  0F27                     	;# 
   546  0F28                     	;# 
   547  0F29                     	;# 
   548  0F2A                     	;# 
   549  0F2B                     	;# 
   550  0F2C                     	;# 
   551  0F2D                     	;# 
   552  0F2E                     	;# 
   553  0F2F                     	;# 
   554  0F8C                     	;# 
   555  0F8D                     	;# 
   556  0F91                     	;# 
   557  0F95                     	;# 
   558  0F96                     	;# 
   559  0F97                     	;# 
   560  0F9C                     	;# 
   561  0F9D                     	;# 
   562  0F9E                     	;# 
   563  0FE3                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  000E                     	;# 
   590  0011                     	;# 
   591  0012                     	;# 
   592  0013                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0016                     	;# 
   596  0017                     	;# 
   597  0018                     	;# 
   598  0019                     	;# 
   599  001A                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  008C                     	;# 
   603  008D                     	;# 
   604  008E                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0099                     	;# 
   612  009A                     	;# 
   613  009B                     	;# 
   614  009B                     	;# 
   615  009C                     	;# 
   616  009D                     	;# 
   617  009E                     	;# 
   618  009F                     	;# 
   619  010C                     	;# 
   620  010D                     	;# 
   621  010E                     	;# 
   622  0111                     	;# 
   623  0112                     	;# 
   624  0113                     	;# 
   625  0114                     	;# 
   626  0115                     	;# 
   627  0116                     	;# 
   628  0117                     	;# 
   629  0118                     	;# 
   630  0119                     	;# 
   631  011D                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  018E                     	;# 
   635  0191                     	;# 
   636  0191                     	;# 
   637  0192                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0194                     	;# 
   641  0195                     	;# 
   642  0196                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0391                     	;# 
   669  0392                     	;# 
   670  0393                     	;# 
   671  0394                     	;# 
   672  0395                     	;# 
   673  0396                     	;# 
   674  0498                     	;# 
   675  0498                     	;# 
   676  0499                     	;# 
   677  049A                     	;# 
   678  049B                     	;# 
   679  049B                     	;# 
   680  049C                     	;# 
   681  049E                     	;# 
   682  049F                     	;# 
   683  0611                     	;# 
   684  0612                     	;# 
   685  0613                     	;# 
   686  0613                     	;# 
   687  0614                     	;# 
   688  0615                     	;# 
   689  0616                     	;# 
   690  0616                     	;# 
   691  0617                     	;# 
   692  0618                     	;# 
   693  0619                     	;# 
   694  0619                     	;# 
   695  061A                     	;# 
   696  061B                     	;# 
   697  061C                     	;# 
   698  061C                     	;# 
   699  0691                     	;# 
   700  0692                     	;# 
   701  0693                     	;# 
   702  0694                     	;# 
   703  0695                     	;# 
   704  0F0F                     	;# 
   705  0F10                     	;# 
   706  0F11                     	;# 
   707  0F12                     	;# 
   708  0F13                     	;# 
   709  0F14                     	;# 
   710  0F15                     	;# 
   711  0F16                     	;# 
   712  0F17                     	;# 
   713  0F18                     	;# 
   714  0F19                     	;# 
   715  0F1A                     	;# 
   716  0F1B                     	;# 
   717  0F1C                     	;# 
   718  0F1D                     	;# 
   719  0F1E                     	;# 
   720  0F1F                     	;# 
   721  0F20                     	;# 
   722  0F21                     	;# 
   723  0F22                     	;# 
   724  0F23                     	;# 
   725  0F24                     	;# 
   726  0F25                     	;# 
   727  0F26                     	;# 
   728  0F27                     	;# 
   729  0F28                     	;# 
   730  0F29                     	;# 
   731  0F2A                     	;# 
   732  0F2B                     	;# 
   733  0F2C                     	;# 
   734  0F2D                     	;# 
   735  0F2E                     	;# 
   736  0F2F                     	;# 
   737  0F8C                     	;# 
   738  0F8D                     	;# 
   739  0F91                     	;# 
   740  0F95                     	;# 
   741  0F96                     	;# 
   742  0F97                     	;# 
   743  0F9C                     	;# 
   744  0F9D                     	;# 
   745  0F9E                     	;# 
   746  0FE3                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0013                     	;# 
   776  0015                     	;# 
   777  0016                     	;# 
   778  0016                     	;# 
   779  0017                     	;# 
   780  0018                     	;# 
   781  0019                     	;# 
   782  001A                     	;# 
   783  001B                     	;# 
   784  001C                     	;# 
   785  008C                     	;# 
   786  008D                     	;# 
   787  008E                     	;# 
   788  0091                     	;# 
   789  0092                     	;# 
   790  0093                     	;# 
   791  0095                     	;# 
   792  0096                     	;# 
   793  0097                     	;# 
   794  0099                     	;# 
   795  009A                     	;# 
   796  009B                     	;# 
   797  009B                     	;# 
   798  009C                     	;# 
   799  009D                     	;# 
   800  009E                     	;# 
   801  009F                     	;# 
   802  010C                     	;# 
   803  010D                     	;# 
   804  010E                     	;# 
   805  0111                     	;# 
   806  0112                     	;# 
   807  0113                     	;# 
   808  0114                     	;# 
   809  0115                     	;# 
   810  0116                     	;# 
   811  0117                     	;# 
   812  0118                     	;# 
   813  0119                     	;# 
   814  011D                     	;# 
   815  018C                     	;# 
   816  018D                     	;# 
   817  018E                     	;# 
   818  0191                     	;# 
   819  0191                     	;# 
   820  0192                     	;# 
   821  0193                     	;# 
   822  0193                     	;# 
   823  0194                     	;# 
   824  0195                     	;# 
   825  0196                     	;# 
   826  0199                     	;# 
   827  019A                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019C                     	;# 
   831  019D                     	;# 
   832  019E                     	;# 
   833  019F                     	;# 
   834  020C                     	;# 
   835  020D                     	;# 
   836  0211                     	;# 
   837  0211                     	;# 
   838  0212                     	;# 
   839  0212                     	;# 
   840  0213                     	;# 
   841  0213                     	;# 
   842  0214                     	;# 
   843  0214                     	;# 
   844  0215                     	;# 
   845  0215                     	;# 
   846  0215                     	;# 
   847  0216                     	;# 
   848  0216                     	;# 
   849  0217                     	;# 
   850  0217                     	;# 
   851  0391                     	;# 
   852  0392                     	;# 
   853  0393                     	;# 
   854  0394                     	;# 
   855  0395                     	;# 
   856  0396                     	;# 
   857  0498                     	;# 
   858  0498                     	;# 
   859  0499                     	;# 
   860  049A                     	;# 
   861  049B                     	;# 
   862  049B                     	;# 
   863  049C                     	;# 
   864  049E                     	;# 
   865  049F                     	;# 
   866  0611                     	;# 
   867  0612                     	;# 
   868  0613                     	;# 
   869  0613                     	;# 
   870  0614                     	;# 
   871  0615                     	;# 
   872  0616                     	;# 
   873  0616                     	;# 
   874  0617                     	;# 
   875  0618                     	;# 
   876  0619                     	;# 
   877  0619                     	;# 
   878  061A                     	;# 
   879  061B                     	;# 
   880  061C                     	;# 
   881  061C                     	;# 
   882  0691                     	;# 
   883  0692                     	;# 
   884  0693                     	;# 
   885  0694                     	;# 
   886  0695                     	;# 
   887  0F0F                     	;# 
   888  0F10                     	;# 
   889  0F11                     	;# 
   890  0F12                     	;# 
   891  0F13                     	;# 
   892  0F14                     	;# 
   893  0F15                     	;# 
   894  0F16                     	;# 
   895  0F17                     	;# 
   896  0F18                     	;# 
   897  0F19                     	;# 
   898  0F1A                     	;# 
   899  0F1B                     	;# 
   900  0F1C                     	;# 
   901  0F1D                     	;# 
   902  0F1E                     	;# 
   903  0F1F                     	;# 
   904  0F20                     	;# 
   905  0F21                     	;# 
   906  0F22                     	;# 
   907  0F23                     	;# 
   908  0F24                     	;# 
   909  0F25                     	;# 
   910  0F26                     	;# 
   911  0F27                     	;# 
   912  0F28                     	;# 
   913  0F29                     	;# 
   914  0F2A                     	;# 
   915  0F2B                     	;# 
   916  0F2C                     	;# 
   917  0F2D                     	;# 
   918  0F2E                     	;# 
   919  0F2F                     	;# 
   920  0F8C                     	;# 
   921  0F8D                     	;# 
   922  0F91                     	;# 
   923  0F95                     	;# 
   924  0F96                     	;# 
   925  0F97                     	;# 
   926  0F9C                     	;# 
   927  0F9D                     	;# 
   928  0F9E                     	;# 
   929  0FE3                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0013                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0093                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  009F                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0111                     	;# 
   989  0112                     	;# 
   990  0113                     	;# 
   991  0114                     	;# 
   992  0115                     	;# 
   993  0116                     	;# 
   994  0117                     	;# 
   995  0118                     	;# 
   996  0119                     	;# 
   997  011D                     	;# 
   998  018C                     	;# 
   999  018D                     	;# 
  1000  018E                     	;# 
  1001  0191                     	;# 
  1002  0191                     	;# 
  1003  0192                     	;# 
  1004  0193                     	;# 
  1005  0193                     	;# 
  1006  0194                     	;# 
  1007  0195                     	;# 
  1008  0196                     	;# 
  1009  0199                     	;# 
  1010  019A                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020C                     	;# 
  1018  020D                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0391                     	;# 
  1035  0392                     	;# 
  1036  0393                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0498                     	;# 
  1041  0498                     	;# 
  1042  0499                     	;# 
  1043  049A                     	;# 
  1044  049B                     	;# 
  1045  049B                     	;# 
  1046  049C                     	;# 
  1047  049E                     	;# 
  1048  049F                     	;# 
  1049  0611                     	;# 
  1050  0612                     	;# 
  1051  0613                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  0615                     	;# 
  1055  0616                     	;# 
  1056  0616                     	;# 
  1057  0617                     	;# 
  1058  0618                     	;# 
  1059  0619                     	;# 
  1060  0619                     	;# 
  1061  061A                     	;# 
  1062  061B                     	;# 
  1063  061C                     	;# 
  1064  061C                     	;# 
  1065  0691                     	;# 
  1066  0692                     	;# 
  1067  0693                     	;# 
  1068  0694                     	;# 
  1069  0695                     	;# 
  1070  0F0F                     	;# 
  1071  0F10                     	;# 
  1072  0F11                     	;# 
  1073  0F12                     	;# 
  1074  0F13                     	;# 
  1075  0F14                     	;# 
  1076  0F15                     	;# 
  1077  0F16                     	;# 
  1078  0F17                     	;# 
  1079  0F18                     	;# 
  1080  0F19                     	;# 
  1081  0F1A                     	;# 
  1082  0F1B                     	;# 
  1083  0F1C                     	;# 
  1084  0F1D                     	;# 
  1085  0F1E                     	;# 
  1086  0F1F                     	;# 
  1087  0F20                     	;# 
  1088  0F21                     	;# 
  1089  0F22                     	;# 
  1090  0F23                     	;# 
  1091  0F24                     	;# 
  1092  0F25                     	;# 
  1093  0F26                     	;# 
  1094  0F27                     	;# 
  1095  0F28                     	;# 
  1096  0F29                     	;# 
  1097  0F2A                     	;# 
  1098  0F2B                     	;# 
  1099  0F2C                     	;# 
  1100  0F2D                     	;# 
  1101  0F2E                     	;# 
  1102  0F2F                     	;# 
  1103  0F8C                     	;# 
  1104  0F8D                     	;# 
  1105  0F91                     	;# 
  1106  0F95                     	;# 
  1107  0F96                     	;# 
  1108  0F97                     	;# 
  1109  0F9C                     	;# 
  1110  0F9D                     	;# 
  1111  0F9E                     	;# 
  1112  0FE3                     	;# 
  1113  0FE4                     	;# 
  1114  0FE5                     	;# 
  1115  0FE6                     	;# 
  1116  0FE7                     	;# 
  1117  0FE8                     	;# 
  1118  0FE9                     	;# 
  1119  0FEA                     	;# 
  1120  0FEB                     	;# 
  1121  0FED                     	;# 
  1122  0FEE                     	;# 
  1123  0FEF                     	;# 
  1124  0000                     	;# 
  1125  0001                     	;# 
  1126  0002                     	;# 
  1127  0003                     	;# 
  1128  0004                     	;# 
  1129  0005                     	;# 
  1130  0006                     	;# 
  1131  0007                     	;# 
  1132  0008                     	;# 
  1133  0009                     	;# 
  1134  000A                     	;# 
  1135  000B                     	;# 
  1136  000C                     	;# 
  1137  000D                     	;# 
  1138  000E                     	;# 
  1139  0011                     	;# 
  1140  0012                     	;# 
  1141  0013                     	;# 
  1142  0015                     	;# 
  1143  0016                     	;# 
  1144  0016                     	;# 
  1145  0017                     	;# 
  1146  0018                     	;# 
  1147  0019                     	;# 
  1148  001A                     	;# 
  1149  001B                     	;# 
  1150  001C                     	;# 
  1151  008C                     	;# 
  1152  008D                     	;# 
  1153  008E                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0095                     	;# 
  1158  0096                     	;# 
  1159  0097                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010D                     	;# 
  1170  010E                     	;# 
  1171  0111                     	;# 
  1172  0112                     	;# 
  1173  0113                     	;# 
  1174  0114                     	;# 
  1175  0115                     	;# 
  1176  0116                     	;# 
  1177  0117                     	;# 
  1178  0118                     	;# 
  1179  0119                     	;# 
  1180  011D                     	;# 
  1181  018C                     	;# 
  1182  018D                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  0212                     	;# 
  1205  0212                     	;# 
  1206  0213                     	;# 
  1207  0213                     	;# 
  1208  0214                     	;# 
  1209  0214                     	;# 
  1210  0215                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0216                     	;# 
  1214  0216                     	;# 
  1215  0217                     	;# 
  1216  0217                     	;# 
  1217  0391                     	;# 
  1218  0392                     	;# 
  1219  0393                     	;# 
  1220  0394                     	;# 
  1221  0395                     	;# 
  1222  0396                     	;# 
  1223  0498                     	;# 
  1224  0498                     	;# 
  1225  0499                     	;# 
  1226  049A                     	;# 
  1227  049B                     	;# 
  1228  049B                     	;# 
  1229  049C                     	;# 
  1230  049E                     	;# 
  1231  049F                     	;# 
  1232  0611                     	;# 
  1233  0612                     	;# 
  1234  0613                     	;# 
  1235  0613                     	;# 
  1236  0614                     	;# 
  1237  0615                     	;# 
  1238  0616                     	;# 
  1239  0616                     	;# 
  1240  0617                     	;# 
  1241  0618                     	;# 
  1242  0619                     	;# 
  1243  0619                     	;# 
  1244  061A                     	;# 
  1245  061B                     	;# 
  1246  061C                     	;# 
  1247  061C                     	;# 
  1248  0691                     	;# 
  1249  0692                     	;# 
  1250  0693                     	;# 
  1251  0694                     	;# 
  1252  0695                     	;# 
  1253  0F0F                     	;# 
  1254  0F10                     	;# 
  1255  0F11                     	;# 
  1256  0F12                     	;# 
  1257  0F13                     	;# 
  1258  0F14                     	;# 
  1259  0F15                     	;# 
  1260  0F16                     	;# 
  1261  0F17                     	;# 
  1262  0F18                     	;# 
  1263  0F19                     	;# 
  1264  0F1A                     	;# 
  1265  0F1B                     	;# 
  1266  0F1C                     	;# 
  1267  0F1D                     	;# 
  1268  0F1E                     	;# 
  1269  0F1F                     	;# 
  1270  0F20                     	;# 
  1271  0F21                     	;# 
  1272  0F22                     	;# 
  1273  0F23                     	;# 
  1274  0F24                     	;# 
  1275  0F25                     	;# 
  1276  0F26                     	;# 
  1277  0F27                     	;# 
  1278  0F28                     	;# 
  1279  0F29                     	;# 
  1280  0F2A                     	;# 
  1281  0F2B                     	;# 
  1282  0F2C                     	;# 
  1283  0F2D                     	;# 
  1284  0F2E                     	;# 
  1285  0F2F                     	;# 
  1286  0F8C                     	;# 
  1287  0F8D                     	;# 
  1288  0F91                     	;# 
  1289  0F95                     	;# 
  1290  0F96                     	;# 
  1291  0F97                     	;# 
  1292  0F9C                     	;# 
  1293  0F9D                     	;# 
  1294  0F9E                     	;# 
  1295  0FE3                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000D                     	;# 
  1321  000E                     	;# 
  1322  0011                     	;# 
  1323  0012                     	;# 
  1324  0013                     	;# 
  1325  0015                     	;# 
  1326  0016                     	;# 
  1327  0016                     	;# 
  1328  0017                     	;# 
  1329  0018                     	;# 
  1330  0019                     	;# 
  1331  001A                     	;# 
  1332  001B                     	;# 
  1333  001C                     	;# 
  1334  008C                     	;# 
  1335  008D                     	;# 
  1336  008E                     	;# 
  1337  0091                     	;# 
  1338  0092                     	;# 
  1339  0093                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0099                     	;# 
  1344  009A                     	;# 
  1345  009B                     	;# 
  1346  009B                     	;# 
  1347  009C                     	;# 
  1348  009D                     	;# 
  1349  009E                     	;# 
  1350  009F                     	;# 
  1351  010C                     	;# 
  1352  010D                     	;# 
  1353  010E                     	;# 
  1354  0111                     	;# 
  1355  0112                     	;# 
  1356  0113                     	;# 
  1357  0114                     	;# 
  1358  0115                     	;# 
  1359  0116                     	;# 
  1360  0117                     	;# 
  1361  0118                     	;# 
  1362  0119                     	;# 
  1363  011D                     	;# 
  1364  018C                     	;# 
  1365  018D                     	;# 
  1366  018E                     	;# 
  1367  0191                     	;# 
  1368  0191                     	;# 
  1369  0192                     	;# 
  1370  0193                     	;# 
  1371  0193                     	;# 
  1372  0194                     	;# 
  1373  0195                     	;# 
  1374  0196                     	;# 
  1375  0199                     	;# 
  1376  019A                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019C                     	;# 
  1380  019D                     	;# 
  1381  019E                     	;# 
  1382  019F                     	;# 
  1383  020C                     	;# 
  1384  020D                     	;# 
  1385  0211                     	;# 
  1386  0211                     	;# 
  1387  0212                     	;# 
  1388  0212                     	;# 
  1389  0213                     	;# 
  1390  0213                     	;# 
  1391  0214                     	;# 
  1392  0214                     	;# 
  1393  0215                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0216                     	;# 
  1397  0216                     	;# 
  1398  0217                     	;# 
  1399  0217                     	;# 
  1400  0391                     	;# 
  1401  0392                     	;# 
  1402  0393                     	;# 
  1403  0394                     	;# 
  1404  0395                     	;# 
  1405  0396                     	;# 
  1406  0498                     	;# 
  1407  0498                     	;# 
  1408  0499                     	;# 
  1409  049A                     	;# 
  1410  049B                     	;# 
  1411  049B                     	;# 
  1412  049C                     	;# 
  1413  049E                     	;# 
  1414  049F                     	;# 
  1415  0611                     	;# 
  1416  0612                     	;# 
  1417  0613                     	;# 
  1418  0613                     	;# 
  1419  0614                     	;# 
  1420  0615                     	;# 
  1421  0616                     	;# 
  1422  0616                     	;# 
  1423  0617                     	;# 
  1424  0618                     	;# 
  1425  0619                     	;# 
  1426  0619                     	;# 
  1427  061A                     	;# 
  1428  061B                     	;# 
  1429  061C                     	;# 
  1430  061C                     	;# 
  1431  0691                     	;# 
  1432  0692                     	;# 
  1433  0693                     	;# 
  1434  0694                     	;# 
  1435  0695                     	;# 
  1436  0F0F                     	;# 
  1437  0F10                     	;# 
  1438  0F11                     	;# 
  1439  0F12                     	;# 
  1440  0F13                     	;# 
  1441  0F14                     	;# 
  1442  0F15                     	;# 
  1443  0F16                     	;# 
  1444  0F17                     	;# 
  1445  0F18                     	;# 
  1446  0F19                     	;# 
  1447  0F1A                     	;# 
  1448  0F1B                     	;# 
  1449  0F1C                     	;# 
  1450  0F1D                     	;# 
  1451  0F1E                     	;# 
  1452  0F1F                     	;# 
  1453  0F20                     	;# 
  1454  0F21                     	;# 
  1455  0F22                     	;# 
  1456  0F23                     	;# 
  1457  0F24                     	;# 
  1458  0F25                     	;# 
  1459  0F26                     	;# 
  1460  0F27                     	;# 
  1461  0F28                     	;# 
  1462  0F29                     	;# 
  1463  0F2A                     	;# 
  1464  0F2B                     	;# 
  1465  0F2C                     	;# 
  1466  0F2D                     	;# 
  1467  0F2E                     	;# 
  1468  0F2F                     	;# 
  1469  0F8C                     	;# 
  1470  0F8D                     	;# 
  1471  0F91                     	;# 
  1472  0F95                     	;# 
  1473  0F96                     	;# 
  1474  0F97                     	;# 
  1475  0F9C                     	;# 
  1476  0F9D                     	;# 
  1477  0F9E                     	;# 
  1478  0FE3                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  001A                     	;# 
  1515  001B                     	;# 
  1516  001C                     	;# 
  1517  008C                     	;# 
  1518  008D                     	;# 
  1519  008E                     	;# 
  1520  0091                     	;# 
  1521  0092                     	;# 
  1522  0093                     	;# 
  1523  0095                     	;# 
  1524  0096                     	;# 
  1525  0097                     	;# 
  1526  0099                     	;# 
  1527  009A                     	;# 
  1528  009B                     	;# 
  1529  009B                     	;# 
  1530  009C                     	;# 
  1531  009D                     	;# 
  1532  009E                     	;# 
  1533  009F                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0111                     	;# 
  1538  0112                     	;# 
  1539  0113                     	;# 
  1540  0114                     	;# 
  1541  0115                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  0118                     	;# 
  1545  0119                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020C                     	;# 
  1567  020D                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0391                     	;# 
  1584  0392                     	;# 
  1585  0393                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0498                     	;# 
  1590  0498                     	;# 
  1591  0499                     	;# 
  1592  049A                     	;# 
  1593  049B                     	;# 
  1594  049B                     	;# 
  1595  049C                     	;# 
  1596  049E                     	;# 
  1597  049F                     	;# 
  1598  0611                     	;# 
  1599  0612                     	;# 
  1600  0613                     	;# 
  1601  0613                     	;# 
  1602  0614                     	;# 
  1603  0615                     	;# 
  1604  0616                     	;# 
  1605  0616                     	;# 
  1606  0617                     	;# 
  1607  0618                     	;# 
  1608  0619                     	;# 
  1609  0619                     	;# 
  1610  061A                     	;# 
  1611  061B                     	;# 
  1612  061C                     	;# 
  1613  061C                     	;# 
  1614  0691                     	;# 
  1615  0692                     	;# 
  1616  0693                     	;# 
  1617  0694                     	;# 
  1618  0695                     	;# 
  1619  0F0F                     	;# 
  1620  0F10                     	;# 
  1621  0F11                     	;# 
  1622  0F12                     	;# 
  1623  0F13                     	;# 
  1624  0F14                     	;# 
  1625  0F15                     	;# 
  1626  0F16                     	;# 
  1627  0F17                     	;# 
  1628  0F18                     	;# 
  1629  0F19                     	;# 
  1630  0F1A                     	;# 
  1631  0F1B                     	;# 
  1632  0F1C                     	;# 
  1633  0F1D                     	;# 
  1634  0F1E                     	;# 
  1635  0F1F                     	;# 
  1636  0F20                     	;# 
  1637  0F21                     	;# 
  1638  0F22                     	;# 
  1639  0F23                     	;# 
  1640  0F24                     	;# 
  1641  0F25                     	;# 
  1642  0F26                     	;# 
  1643  0F27                     	;# 
  1644  0F28                     	;# 
  1645  0F29                     	;# 
  1646  0F2A                     	;# 
  1647  0F2B                     	;# 
  1648  0F2C                     	;# 
  1649  0F2D                     	;# 
  1650  0F2E                     	;# 
  1651  0F2F                     	;# 
  1652  0F8C                     	;# 
  1653  0F8D                     	;# 
  1654  0F91                     	;# 
  1655  0F95                     	;# 
  1656  0F96                     	;# 
  1657  0F97                     	;# 
  1658  0F9C                     	;# 
  1659  0F9D                     	;# 
  1660  0F9E                     	;# 
  1661  0FE3                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673  0000                     	;# 
  1674  0001                     	;# 
  1675  0002                     	;# 
  1676  0003                     	;# 
  1677  0004                     	;# 
  1678  0005                     	;# 
  1679  0006                     	;# 
  1680  0007                     	;# 
  1681  0008                     	;# 
  1682  0009                     	;# 
  1683  000A                     	;# 
  1684  000B                     	;# 
  1685  000C                     	;# 
  1686  000D                     	;# 
  1687  000E                     	;# 
  1688  0011                     	;# 
  1689  0012                     	;# 
  1690  0013                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  0091                     	;# 
  1704  0092                     	;# 
  1705  0093                     	;# 
  1706  0095                     	;# 
  1707  0096                     	;# 
  1708  0097                     	;# 
  1709  0099                     	;# 
  1710  009A                     	;# 
  1711  009B                     	;# 
  1712  009B                     	;# 
  1713  009C                     	;# 
  1714  009D                     	;# 
  1715  009E                     	;# 
  1716  009F                     	;# 
  1717  010C                     	;# 
  1718  010D                     	;# 
  1719  010E                     	;# 
  1720  0111                     	;# 
  1721  0112                     	;# 
  1722  0113                     	;# 
  1723  0114                     	;# 
  1724  0115                     	;# 
  1725  0116                     	;# 
  1726  0117                     	;# 
  1727  0118                     	;# 
  1728  0119                     	;# 
  1729  011D                     	;# 
  1730  018C                     	;# 
  1731  018D                     	;# 
  1732  018E                     	;# 
  1733  0191                     	;# 
  1734  0191                     	;# 
  1735  0192                     	;# 
  1736  0193                     	;# 
  1737  0193                     	;# 
  1738  0194                     	;# 
  1739  0195                     	;# 
  1740  0196                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019D                     	;# 
  1747  019E                     	;# 
  1748  019F                     	;# 
  1749  020C                     	;# 
  1750  020D                     	;# 
  1751  0211                     	;# 
  1752  0211                     	;# 
  1753  0212                     	;# 
  1754  0212                     	;# 
  1755  0213                     	;# 
  1756  0213                     	;# 
  1757  0214                     	;# 
  1758  0214                     	;# 
  1759  0215                     	;# 
  1760  0215                     	;# 
  1761  0215                     	;# 
  1762  0216                     	;# 
  1763  0216                     	;# 
  1764  0217                     	;# 
  1765  0217                     	;# 
  1766  0391                     	;# 
  1767  0392                     	;# 
  1768  0393                     	;# 
  1769  0394                     	;# 
  1770  0395                     	;# 
  1771  0396                     	;# 
  1772  0498                     	;# 
  1773  0498                     	;# 
  1774  0499                     	;# 
  1775  049A                     	;# 
  1776  049B                     	;# 
  1777  049B                     	;# 
  1778  049C                     	;# 
  1779  049E                     	;# 
  1780  049F                     	;# 
  1781  0611                     	;# 
  1782  0612                     	;# 
  1783  0613                     	;# 
  1784  0613                     	;# 
  1785  0614                     	;# 
  1786  0615                     	;# 
  1787  0616                     	;# 
  1788  0616                     	;# 
  1789  0617                     	;# 
  1790  0618                     	;# 
  1791  0619                     	;# 
  1792  0619                     	;# 
  1793  061A                     	;# 
  1794  061B                     	;# 
  1795  061C                     	;# 
  1796  061C                     	;# 
  1797  0691                     	;# 
  1798  0692                     	;# 
  1799  0693                     	;# 
  1800  0694                     	;# 
  1801  0695                     	;# 
  1802  0F0F                     	;# 
  1803  0F10                     	;# 
  1804  0F11                     	;# 
  1805  0F12                     	;# 
  1806  0F13                     	;# 
  1807  0F14                     	;# 
  1808  0F15                     	;# 
  1809  0F16                     	;# 
  1810  0F17                     	;# 
  1811  0F18                     	;# 
  1812  0F19                     	;# 
  1813  0F1A                     	;# 
  1814  0F1B                     	;# 
  1815  0F1C                     	;# 
  1816  0F1D                     	;# 
  1817  0F1E                     	;# 
  1818  0F1F                     	;# 
  1819  0F20                     	;# 
  1820  0F21                     	;# 
  1821  0F22                     	;# 
  1822  0F23                     	;# 
  1823  0F24                     	;# 
  1824  0F25                     	;# 
  1825  0F26                     	;# 
  1826  0F27                     	;# 
  1827  0F28                     	;# 
  1828  0F29                     	;# 
  1829  0F2A                     	;# 
  1830  0F2B                     	;# 
  1831  0F2C                     	;# 
  1832  0F2D                     	;# 
  1833  0F2E                     	;# 
  1834  0F2F                     	;# 
  1835  0F8C                     	;# 
  1836  0F8D                     	;# 
  1837  0F91                     	;# 
  1838  0F95                     	;# 
  1839  0F96                     	;# 
  1840  0F97                     	;# 
  1841  0F9C                     	;# 
  1842  0F9D                     	;# 
  1843  0F9E                     	;# 
  1844  0FE3                     	;# 
  1845  0FE4                     	;# 
  1846  0FE5                     	;# 
  1847  0FE6                     	;# 
  1848  0FE7                     	;# 
  1849  0FE8                     	;# 
  1850  0FE9                     	;# 
  1851  0FEA                     	;# 
  1852  0FEB                     	;# 
  1853  0FED                     	;# 
  1854  0FEE                     	;# 
  1855  0FEF                     	;# 
  1856  0000                     	;# 
  1857  0001                     	;# 
  1858  0002                     	;# 
  1859  0003                     	;# 
  1860  0004                     	;# 
  1861  0005                     	;# 
  1862  0006                     	;# 
  1863  0007                     	;# 
  1864  0008                     	;# 
  1865  0009                     	;# 
  1866  000A                     	;# 
  1867  000B                     	;# 
  1868  000C                     	;# 
  1869  000D                     	;# 
  1870  000E                     	;# 
  1871  0011                     	;# 
  1872  0012                     	;# 
  1873  0013                     	;# 
  1874  0015                     	;# 
  1875  0016                     	;# 
  1876  0016                     	;# 
  1877  0017                     	;# 
  1878  0018                     	;# 
  1879  0019                     	;# 
  1880  001A                     	;# 
  1881  001B                     	;# 
  1882  001C                     	;# 
  1883  008C                     	;# 
  1884  008D                     	;# 
  1885  008E                     	;# 
  1886  0091                     	;# 
  1887  0092                     	;# 
  1888  0093                     	;# 
  1889  0095                     	;# 
  1890  0096                     	;# 
  1891  0097                     	;# 
  1892  0099                     	;# 
  1893  009A                     	;# 
  1894  009B                     	;# 
  1895  009B                     	;# 
  1896  009C                     	;# 
  1897  009D                     	;# 
  1898  009E                     	;# 
  1899  009F                     	;# 
  1900  010C                     	;# 
  1901  010D                     	;# 
  1902  010E                     	;# 
  1903  0111                     	;# 
  1904  0112                     	;# 
  1905  0113                     	;# 
  1906  0114                     	;# 
  1907  0115                     	;# 
  1908  0116                     	;# 
  1909  0117                     	;# 
  1910  0118                     	;# 
  1911  0119                     	;# 
  1912  011D                     	;# 
  1913  018C                     	;# 
  1914  018D                     	;# 
  1915  018E                     	;# 
  1916  0191                     	;# 
  1917  0191                     	;# 
  1918  0192                     	;# 
  1919  0193                     	;# 
  1920  0193                     	;# 
  1921  0194                     	;# 
  1922  0195                     	;# 
  1923  0196                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020D                     	;# 
  1934  0211                     	;# 
  1935  0211                     	;# 
  1936  0212                     	;# 
  1937  0212                     	;# 
  1938  0213                     	;# 
  1939  0213                     	;# 
  1940  0214                     	;# 
  1941  0214                     	;# 
  1942  0215                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0216                     	;# 
  1946  0216                     	;# 
  1947  0217                     	;# 
  1948  0217                     	;# 
  1949  0391                     	;# 
  1950  0392                     	;# 
  1951  0393                     	;# 
  1952  0394                     	;# 
  1953  0395                     	;# 
  1954  0396                     	;# 
  1955  0498                     	;# 
  1956  0498                     	;# 
  1957  0499                     	;# 
  1958  049A                     	;# 
  1959  049B                     	;# 
  1960  049B                     	;# 
  1961  049C                     	;# 
  1962  049E                     	;# 
  1963  049F                     	;# 
  1964  0611                     	;# 
  1965  0612                     	;# 
  1966  0613                     	;# 
  1967  0613                     	;# 
  1968  0614                     	;# 
  1969  0615                     	;# 
  1970  0616                     	;# 
  1971  0616                     	;# 
  1972  0617                     	;# 
  1973  0618                     	;# 
  1974  0619                     	;# 
  1975  0619                     	;# 
  1976  061A                     	;# 
  1977  061B                     	;# 
  1978  061C                     	;# 
  1979  061C                     	;# 
  1980  0691                     	;# 
  1981  0692                     	;# 
  1982  0693                     	;# 
  1983  0694                     	;# 
  1984  0695                     	;# 
  1985  0F0F                     	;# 
  1986  0F10                     	;# 
  1987  0F11                     	;# 
  1988  0F12                     	;# 
  1989  0F13                     	;# 
  1990  0F14                     	;# 
  1991  0F15                     	;# 
  1992  0F16                     	;# 
  1993  0F17                     	;# 
  1994  0F18                     	;# 
  1995  0F19                     	;# 
  1996  0F1A                     	;# 
  1997  0F1B                     	;# 
  1998  0F1C                     	;# 
  1999  0F1D                     	;# 
  2000  0F1E                     	;# 
  2001  0F1F                     	;# 
  2002  0F20                     	;# 
  2003  0F21                     	;# 
  2004  0F22                     	;# 
  2005  0F23                     	;# 
  2006  0F24                     	;# 
  2007  0F25                     	;# 
  2008  0F26                     	;# 
  2009  0F27                     	;# 
  2010  0F28                     	;# 
  2011  0F29                     	;# 
  2012  0F2A                     	;# 
  2013  0F2B                     	;# 
  2014  0F2C                     	;# 
  2015  0F2D                     	;# 
  2016  0F2E                     	;# 
  2017  0F2F                     	;# 
  2018  0F8C                     	;# 
  2019  0F8D                     	;# 
  2020  0F91                     	;# 
  2021  0F95                     	;# 
  2022  0F96                     	;# 
  2023  0F97                     	;# 
  2024  0F9C                     	;# 
  2025  0F9D                     	;# 
  2026  0F9E                     	;# 
  2027  0FE3                     	;# 
  2028  0FE4                     	;# 
  2029  0FE5                     	;# 
  2030  0FE6                     	;# 
  2031  0FE7                     	;# 
  2032  0FE8                     	;# 
  2033  0FE9                     	;# 
  2034  0FEA                     	;# 
  2035  0FEB                     	;# 
  2036  0FED                     	;# 
  2037  0FEE                     	;# 
  2038  0FEF                     	;# 
  2039  0000                     	;# 
  2040  0001                     	;# 
  2041  0002                     	;# 
  2042  0003                     	;# 
  2043  0004                     	;# 
  2044  0005                     	;# 
  2045  0006                     	;# 
  2046  0007                     	;# 
  2047  0008                     	;# 
  2048  0009                     	;# 
  2049  000A                     	;# 
  2050  000B                     	;# 
  2051  000C                     	;# 
  2052  000D                     	;# 
  2053  000E                     	;# 
  2054  0011                     	;# 
  2055  0012                     	;# 
  2056  0013                     	;# 
  2057  0015                     	;# 
  2058  0016                     	;# 
  2059  0016                     	;# 
  2060  0017                     	;# 
  2061  0018                     	;# 
  2062  0019                     	;# 
  2063  001A                     	;# 
  2064  001B                     	;# 
  2065  001C                     	;# 
  2066  008C                     	;# 
  2067  008D                     	;# 
  2068  008E                     	;# 
  2069  0091                     	;# 
  2070  0092                     	;# 
  2071  0093                     	;# 
  2072  0095                     	;# 
  2073  0096                     	;# 
  2074  0097                     	;# 
  2075  0099                     	;# 
  2076  009A                     	;# 
  2077  009B                     	;# 
  2078  009B                     	;# 
  2079  009C                     	;# 
  2080  009D                     	;# 
  2081  009E                     	;# 
  2082  009F                     	;# 
  2083  010C                     	;# 
  2084  010D                     	;# 
  2085  010E                     	;# 
  2086  0111                     	;# 
  2087  0112                     	;# 
  2088  0113                     	;# 
  2089  0114                     	;# 
  2090  0115                     	;# 
  2091  0116                     	;# 
  2092  0117                     	;# 
  2093  0118                     	;# 
  2094  0119                     	;# 
  2095  011D                     	;# 
  2096  018C                     	;# 
  2097  018D                     	;# 
  2098  018E                     	;# 
  2099  0191                     	;# 
  2100  0191                     	;# 
  2101  0192                     	;# 
  2102  0193                     	;# 
  2103  0193                     	;# 
  2104  0194                     	;# 
  2105  0195                     	;# 
  2106  0196                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019C                     	;# 
  2112  019D                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  020C                     	;# 
  2116  020D                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  0212                     	;# 
  2120  0212                     	;# 
  2121  0213                     	;# 
  2122  0213                     	;# 
  2123  0214                     	;# 
  2124  0214                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0216                     	;# 
  2129  0216                     	;# 
  2130  0217                     	;# 
  2131  0217                     	;# 
  2132  0391                     	;# 
  2133  0392                     	;# 
  2134  0393                     	;# 
  2135  0394                     	;# 
  2136  0395                     	;# 
  2137  0396                     	;# 
  2138  0498                     	;# 
  2139  0498                     	;# 
  2140  0499                     	;# 
  2141  049A                     	;# 
  2142  049B                     	;# 
  2143  049B                     	;# 
  2144  049C                     	;# 
  2145  049E                     	;# 
  2146  049F                     	;# 
  2147  0611                     	;# 
  2148  0612                     	;# 
  2149  0613                     	;# 
  2150  0613                     	;# 
  2151  0614                     	;# 
  2152  0615                     	;# 
  2153  0616                     	;# 
  2154  0616                     	;# 
  2155  0617                     	;# 
  2156  0618                     	;# 
  2157  0619                     	;# 
  2158  0619                     	;# 
  2159  061A                     	;# 
  2160  061B                     	;# 
  2161  061C                     	;# 
  2162  061C                     	;# 
  2163  0691                     	;# 
  2164  0692                     	;# 
  2165  0693                     	;# 
  2166  0694                     	;# 
  2167  0695                     	;# 
  2168  0F0F                     	;# 
  2169  0F10                     	;# 
  2170  0F11                     	;# 
  2171  0F12                     	;# 
  2172  0F13                     	;# 
  2173  0F14                     	;# 
  2174  0F15                     	;# 
  2175  0F16                     	;# 
  2176  0F17                     	;# 
  2177  0F18                     	;# 
  2178  0F19                     	;# 
  2179  0F1A                     	;# 
  2180  0F1B                     	;# 
  2181  0F1C                     	;# 
  2182  0F1D                     	;# 
  2183  0F1E                     	;# 
  2184  0F1F                     	;# 
  2185  0F20                     	;# 
  2186  0F21                     	;# 
  2187  0F22                     	;# 
  2188  0F23                     	;# 
  2189  0F24                     	;# 
  2190  0F25                     	;# 
  2191  0F26                     	;# 
  2192  0F27                     	;# 
  2193  0F28                     	;# 
  2194  0F29                     	;# 
  2195  0F2A                     	;# 
  2196  0F2B                     	;# 
  2197  0F2C                     	;# 
  2198  0F2D                     	;# 
  2199  0F2E                     	;# 
  2200  0F2F                     	;# 
  2201  0F8C                     	;# 
  2202  0F8D                     	;# 
  2203  0F91                     	;# 
  2204  0F95                     	;# 
  2205  0F96                     	;# 
  2206  0F97                     	;# 
  2207  0F9C                     	;# 
  2208  0F9D                     	;# 
  2209  0F9E                     	;# 
  2210  0FE3                     	;# 
  2211  0FE4                     	;# 
  2212  0FE5                     	;# 
  2213  0FE6                     	;# 
  2214  0FE7                     	;# 
  2215  0FE8                     	;# 
  2216  0FE9                     	;# 
  2217  0FEA                     	;# 
  2218  0FEB                     	;# 
  2219  0FED                     	;# 
  2220  0FEE                     	;# 
  2221  0FEF                     	;# 
  2222  0000                     	;# 
  2223  0001                     	;# 
  2224  0002                     	;# 
  2225  0003                     	;# 
  2226  0004                     	;# 
  2227  0005                     	;# 
  2228  0006                     	;# 
  2229  0007                     	;# 
  2230  0008                     	;# 
  2231  0009                     	;# 
  2232  000A                     	;# 
  2233  000B                     	;# 
  2234  000C                     	;# 
  2235  000D                     	;# 
  2236  000E                     	;# 
  2237  0011                     	;# 
  2238  0012                     	;# 
  2239  0013                     	;# 
  2240  0015                     	;# 
  2241  0016                     	;# 
  2242  0016                     	;# 
  2243  0017                     	;# 
  2244  0018                     	;# 
  2245  0019                     	;# 
  2246  001A                     	;# 
  2247  001B                     	;# 
  2248  001C                     	;# 
  2249  008C                     	;# 
  2250  008D                     	;# 
  2251  008E                     	;# 
  2252  0091                     	;# 
  2253  0092                     	;# 
  2254  0093                     	;# 
  2255  0095                     	;# 
  2256  0096                     	;# 
  2257  0097                     	;# 
  2258  0099                     	;# 
  2259  009A                     	;# 
  2260  009B                     	;# 
  2261  009B                     	;# 
  2262  009C                     	;# 
  2263  009D                     	;# 
  2264  009E                     	;# 
  2265  009F                     	;# 
  2266  010C                     	;# 
  2267  010D                     	;# 
  2268  010E                     	;# 
  2269  0111                     	;# 
  2270  0112                     	;# 
  2271  0113                     	;# 
  2272  0114                     	;# 
  2273  0115                     	;# 
  2274  0116                     	;# 
  2275  0117                     	;# 
  2276  0118                     	;# 
  2277  0119                     	;# 
  2278  011D                     	;# 
  2279  018C                     	;# 
  2280  018D                     	;# 
  2281  018E                     	;# 
  2282  0191                     	;# 
  2283  0191                     	;# 
  2284  0192                     	;# 
  2285  0193                     	;# 
  2286  0193                     	;# 
  2287  0194                     	;# 
  2288  0195                     	;# 
  2289  0196                     	;# 
  2290  0199                     	;# 
  2291  019A                     	;# 
  2292  019B                     	;# 
  2293  019B                     	;# 
  2294  019C                     	;# 
  2295  019D                     	;# 
  2296  019E                     	;# 
  2297  019F                     	;# 
  2298  020C                     	;# 
  2299  020D                     	;# 
  2300  0211                     	;# 
  2301  0211                     	;# 
  2302  0212                     	;# 
  2303  0212                     	;# 
  2304  0213                     	;# 
  2305  0213                     	;# 
  2306  0214                     	;# 
  2307  0214                     	;# 
  2308  0215                     	;# 
  2309  0215                     	;# 
  2310  0215                     	;# 
  2311  0216                     	;# 
  2312  0216                     	;# 
  2313  0217                     	;# 
  2314  0217                     	;# 
  2315  0391                     	;# 
  2316  0392                     	;# 
  2317  0393                     	;# 
  2318  0394                     	;# 
  2319  0395                     	;# 
  2320  0396                     	;# 
  2321  0498                     	;# 
  2322  0498                     	;# 
  2323  0499                     	;# 
  2324  049A                     	;# 
  2325  049B                     	;# 
  2326  049B                     	;# 
  2327  049C                     	;# 
  2328  049E                     	;# 
  2329  049F                     	;# 
  2330  0611                     	;# 
  2331  0612                     	;# 
  2332  0613                     	;# 
  2333  0613                     	;# 
  2334  0614                     	;# 
  2335  0615                     	;# 
  2336  0616                     	;# 
  2337  0616                     	;# 
  2338  0617                     	;# 
  2339  0618                     	;# 
  2340  0619                     	;# 
  2341  0619                     	;# 
  2342  061A                     	;# 
  2343  061B                     	;# 
  2344  061C                     	;# 
  2345  061C                     	;# 
  2346  0691                     	;# 
  2347  0692                     	;# 
  2348  0693                     	;# 
  2349  0694                     	;# 
  2350  0695                     	;# 
  2351  0F0F                     	;# 
  2352  0F10                     	;# 
  2353  0F11                     	;# 
  2354  0F12                     	;# 
  2355  0F13                     	;# 
  2356  0F14                     	;# 
  2357  0F15                     	;# 
  2358  0F16                     	;# 
  2359  0F17                     	;# 
  2360  0F18                     	;# 
  2361  0F19                     	;# 
  2362  0F1A                     	;# 
  2363  0F1B                     	;# 
  2364  0F1C                     	;# 
  2365  0F1D                     	;# 
  2366  0F1E                     	;# 
  2367  0F1F                     	;# 
  2368  0F20                     	;# 
  2369  0F21                     	;# 
  2370  0F22                     	;# 
  2371  0F23                     	;# 
  2372  0F24                     	;# 
  2373  0F25                     	;# 
  2374  0F26                     	;# 
  2375  0F27                     	;# 
  2376  0F28                     	;# 
  2377  0F29                     	;# 
  2378  0F2A                     	;# 
  2379  0F2B                     	;# 
  2380  0F2C                     	;# 
  2381  0F2D                     	;# 
  2382  0F2E                     	;# 
  2383  0F2F                     	;# 
  2384  0F8C                     	;# 
  2385  0F8D                     	;# 
  2386  0F91                     	;# 
  2387  0F95                     	;# 
  2388  0F96                     	;# 
  2389  0F97                     	;# 
  2390  0F9C                     	;# 
  2391  0F9D                     	;# 
  2392  0F9E                     	;# 
  2393  0FE3                     	;# 
  2394  0FE4                     	;# 
  2395  0FE5                     	;# 
  2396  0FE6                     	;# 
  2397  0FE7                     	;# 
  2398  0FE8                     	;# 
  2399  0FE9                     	;# 
  2400  0FEA                     	;# 
  2401  0FEB                     	;# 
  2402  0FED                     	;# 
  2403  0FEE                     	;# 
  2404  0FEF                     	;# 
  2405  0000                     	;# 
  2406  0001                     	;# 
  2407  0002                     	;# 
  2408  0003                     	;# 
  2409  0004                     	;# 
  2410  0005                     	;# 
  2411  0006                     	;# 
  2412  0007                     	;# 
  2413  0008                     	;# 
  2414  0009                     	;# 
  2415  000A                     	;# 
  2416  000B                     	;# 
  2417  000C                     	;# 
  2418  000D                     	;# 
  2419  000E                     	;# 
  2420  0011                     	;# 
  2421  0012                     	;# 
  2422  0013                     	;# 
  2423  0015                     	;# 
  2424  0016                     	;# 
  2425  0016                     	;# 
  2426  0017                     	;# 
  2427  0018                     	;# 
  2428  0019                     	;# 
  2429  001A                     	;# 
  2430  001B                     	;# 
  2431  001C                     	;# 
  2432  008C                     	;# 
  2433  008D                     	;# 
  2434  008E                     	;# 
  2435  0091                     	;# 
  2436  0092                     	;# 
  2437  0093                     	;# 
  2438  0095                     	;# 
  2439  0096                     	;# 
  2440  0097                     	;# 
  2441  0099                     	;# 
  2442  009A                     	;# 
  2443  009B                     	;# 
  2444  009B                     	;# 
  2445  009C                     	;# 
  2446  009D                     	;# 
  2447  009E                     	;# 
  2448  009F                     	;# 
  2449  010C                     	;# 
  2450  010D                     	;# 
  2451  010E                     	;# 
  2452  0111                     	;# 
  2453  0112                     	;# 
  2454  0113                     	;# 
  2455  0114                     	;# 
  2456  0115                     	;# 
  2457  0116                     	;# 
  2458  0117                     	;# 
  2459  0118                     	;# 
  2460  0119                     	;# 
  2461  011D                     	;# 
  2462  018C                     	;# 
  2463  018D                     	;# 
  2464  018E                     	;# 
  2465  0191                     	;# 
  2466  0191                     	;# 
  2467  0192                     	;# 
  2468  0193                     	;# 
  2469  0193                     	;# 
  2470  0194                     	;# 
  2471  0195                     	;# 
  2472  0196                     	;# 
  2473  0199                     	;# 
  2474  019A                     	;# 
  2475  019B                     	;# 
  2476  019B                     	;# 
  2477  019C                     	;# 
  2478  019D                     	;# 
  2479  019E                     	;# 
  2480  019F                     	;# 
  2481  020C                     	;# 
  2482  020D                     	;# 
  2483  0211                     	;# 
  2484  0211                     	;# 
  2485  0212                     	;# 
  2486  0212                     	;# 
  2487  0213                     	;# 
  2488  0213                     	;# 
  2489  0214                     	;# 
  2490  0214                     	;# 
  2491  0215                     	;# 
  2492  0215                     	;# 
  2493  0215                     	;# 
  2494  0216                     	;# 
  2495  0216                     	;# 
  2496  0217                     	;# 
  2497  0217                     	;# 
  2498  0391                     	;# 
  2499  0392                     	;# 
  2500  0393                     	;# 
  2501  0394                     	;# 
  2502  0395                     	;# 
  2503  0396                     	;# 
  2504  0498                     	;# 
  2505  0498                     	;# 
  2506  0499                     	;# 
  2507  049A                     	;# 
  2508  049B                     	;# 
  2509  049B                     	;# 
  2510  049C                     	;# 
  2511  049E                     	;# 
  2512  049F                     	;# 
  2513  0611                     	;# 
  2514  0612                     	;# 
  2515  0613                     	;# 
  2516  0613                     	;# 
  2517  0614                     	;# 
  2518  0615                     	;# 
  2519  0616                     	;# 
  2520  0616                     	;# 
  2521  0617                     	;# 
  2522  0618                     	;# 
  2523  0619                     	;# 
  2524  0619                     	;# 
  2525  061A                     	;# 
  2526  061B                     	;# 
  2527  061C                     	;# 
  2528  061C                     	;# 
  2529  0691                     	;# 
  2530  0692                     	;# 
  2531  0693                     	;# 
  2532  0694                     	;# 
  2533  0695                     	;# 
  2534  0F0F                     	;# 
  2535  0F10                     	;# 
  2536  0F11                     	;# 
  2537  0F12                     	;# 
  2538  0F13                     	;# 
  2539  0F14                     	;# 
  2540  0F15                     	;# 
  2541  0F16                     	;# 
  2542  0F17                     	;# 
  2543  0F18                     	;# 
  2544  0F19                     	;# 
  2545  0F1A                     	;# 
  2546  0F1B                     	;# 
  2547  0F1C                     	;# 
  2548  0F1D                     	;# 
  2549  0F1E                     	;# 
  2550  0F1F                     	;# 
  2551  0F20                     	;# 
  2552  0F21                     	;# 
  2553  0F22                     	;# 
  2554  0F23                     	;# 
  2555  0F24                     	;# 
  2556  0F25                     	;# 
  2557  0F26                     	;# 
  2558  0F27                     	;# 
  2559  0F28                     	;# 
  2560  0F29                     	;# 
  2561  0F2A                     	;# 
  2562  0F2B                     	;# 
  2563  0F2C                     	;# 
  2564  0F2D                     	;# 
  2565  0F2E                     	;# 
  2566  0F2F                     	;# 
  2567  0F8C                     	;# 
  2568  0F8D                     	;# 
  2569  0F91                     	;# 
  2570  0F95                     	;# 
  2571  0F96                     	;# 
  2572  0F97                     	;# 
  2573  0F9C                     	;# 
  2574  0F9D                     	;# 
  2575  0F9E                     	;# 
  2576  0FE3                     	;# 
  2577  0FE4                     	;# 
  2578  0FE5                     	;# 
  2579  0FE6                     	;# 
  2580  0FE7                     	;# 
  2581  0FE8                     	;# 
  2582  0FE9                     	;# 
  2583  0FEA                     	;# 
  2584  0FEB                     	;# 
  2585  0FED                     	;# 
  2586  0FEE                     	;# 
  2587  0FEF                     	;# 
  2588  0000                     	;# 
  2589  0001                     	;# 
  2590  0002                     	;# 
  2591  0003                     	;# 
  2592  0004                     	;# 
  2593  0005                     	;# 
  2594  0006                     	;# 
  2595  0007                     	;# 
  2596  0008                     	;# 
  2597  0009                     	;# 
  2598  000A                     	;# 
  2599  000B                     	;# 
  2600  000C                     	;# 
  2601  000D                     	;# 
  2602  000E                     	;# 
  2603  0011                     	;# 
  2604  0012                     	;# 
  2605  0013                     	;# 
  2606  0015                     	;# 
  2607  0016                     	;# 
  2608  0016                     	;# 
  2609  0017                     	;# 
  2610  0018                     	;# 
  2611  0019                     	;# 
  2612  001A                     	;# 
  2613  001B                     	;# 
  2614  001C                     	;# 
  2615  008C                     	;# 
  2616  008D                     	;# 
  2617  008E                     	;# 
  2618  0091                     	;# 
  2619  0092                     	;# 
  2620  0093                     	;# 
  2621  0095                     	;# 
  2622  0096                     	;# 
  2623  0097                     	;# 
  2624  0099                     	;# 
  2625  009A                     	;# 
  2626  009B                     	;# 
  2627  009B                     	;# 
  2628  009C                     	;# 
  2629  009D                     	;# 
  2630  009E                     	;# 
  2631  009F                     	;# 
  2632  010C                     	;# 
  2633  010D                     	;# 
  2634  010E                     	;# 
  2635  0111                     	;# 
  2636  0112                     	;# 
  2637  0113                     	;# 
  2638  0114                     	;# 
  2639  0115                     	;# 
  2640  0116                     	;# 
  2641  0117                     	;# 
  2642  0118                     	;# 
  2643  0119                     	;# 
  2644  011D                     	;# 
  2645  018C                     	;# 
  2646  018D                     	;# 
  2647  018E                     	;# 
  2648  0191                     	;# 
  2649  0191                     	;# 
  2650  0192                     	;# 
  2651  0193                     	;# 
  2652  0193                     	;# 
  2653  0194                     	;# 
  2654  0195                     	;# 
  2655  0196                     	;# 
  2656  0199                     	;# 
  2657  019A                     	;# 
  2658  019B                     	;# 
  2659  019B                     	;# 
  2660  019C                     	;# 
  2661  019D                     	;# 
  2662  019E                     	;# 
  2663  019F                     	;# 
  2664  020C                     	;# 
  2665  020D                     	;# 
  2666  0211                     	;# 
  2667  0211                     	;# 
  2668  0212                     	;# 
  2669  0212                     	;# 
  2670  0213                     	;# 
  2671  0213                     	;# 
  2672  0214                     	;# 
  2673  0214                     	;# 
  2674  0215                     	;# 
  2675  0215                     	;# 
  2676  0215                     	;# 
  2677  0216                     	;# 
  2678  0216                     	;# 
  2679  0217                     	;# 
  2680  0217                     	;# 
  2681  0391                     	;# 
  2682  0392                     	;# 
  2683  0393                     	;# 
  2684  0394                     	;# 
  2685  0395                     	;# 
  2686  0396                     	;# 
  2687  0498                     	;# 
  2688  0498                     	;# 
  2689  0499                     	;# 
  2690  049A                     	;# 
  2691  049B                     	;# 
  2692  049B                     	;# 
  2693  049C                     	;# 
  2694  049E                     	;# 
  2695  049F                     	;# 
  2696  0611                     	;# 
  2697  0612                     	;# 
  2698  0613                     	;# 
  2699  0613                     	;# 
  2700  0614                     	;# 
  2701  0615                     	;# 
  2702  0616                     	;# 
  2703  0616                     	;# 
  2704  0617                     	;# 
  2705  0618                     	;# 
  2706  0619                     	;# 
  2707  0619                     	;# 
  2708  061A                     	;# 
  2709  061B                     	;# 
  2710  061C                     	;# 
  2711  061C                     	;# 
  2712  0691                     	;# 
  2713  0692                     	;# 
  2714  0693                     	;# 
  2715  0694                     	;# 
  2716  0695                     	;# 
  2717  0F0F                     	;# 
  2718  0F10                     	;# 
  2719  0F11                     	;# 
  2720  0F12                     	;# 
  2721  0F13                     	;# 
  2722  0F14                     	;# 
  2723  0F15                     	;# 
  2724  0F16                     	;# 
  2725  0F17                     	;# 
  2726  0F18                     	;# 
  2727  0F19                     	;# 
  2728  0F1A                     	;# 
  2729  0F1B                     	;# 
  2730  0F1C                     	;# 
  2731  0F1D                     	;# 
  2732  0F1E                     	;# 
  2733  0F1F                     	;# 
  2734  0F20                     	;# 
  2735  0F21                     	;# 
  2736  0F22                     	;# 
  2737  0F23                     	;# 
  2738  0F24                     	;# 
  2739  0F25                     	;# 
  2740  0F26                     	;# 
  2741  0F27                     	;# 
  2742  0F28                     	;# 
  2743  0F29                     	;# 
  2744  0F2A                     	;# 
  2745  0F2B                     	;# 
  2746  0F2C                     	;# 
  2747  0F2D                     	;# 
  2748  0F2E                     	;# 
  2749  0F2F                     	;# 
  2750  0F8C                     	;# 
  2751  0F8D                     	;# 
  2752  0F91                     	;# 
  2753  0F95                     	;# 
  2754  0F96                     	;# 
  2755  0F97                     	;# 
  2756  0F9C                     	;# 
  2757  0F9D                     	;# 
  2758  0F9E                     	;# 
  2759  0FE3                     	;# 
  2760  0FE4                     	;# 
  2761  0FE5                     	;# 
  2762  0FE6                     	;# 
  2763  0FE7                     	;# 
  2764  0FE8                     	;# 
  2765  0FE9                     	;# 
  2766  0FEA                     	;# 
  2767  0FEB                     	;# 
  2768  0FED                     	;# 
  2769  0FEE                     	;# 
  2770  0FEF                     	;# 
  2771  0000                     	;# 
  2772  0001                     	;# 
  2773  0002                     	;# 
  2774  0003                     	;# 
  2775  0004                     	;# 
  2776  0005                     	;# 
  2777  0006                     	;# 
  2778  0007                     	;# 
  2779  0008                     	;# 
  2780  0009                     	;# 
  2781  000A                     	;# 
  2782  000B                     	;# 
  2783  000C                     	;# 
  2784  000D                     	;# 
  2785  000E                     	;# 
  2786  0011                     	;# 
  2787  0012                     	;# 
  2788  0013                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  008C                     	;# 
  2799  008D                     	;# 
  2800  008E                     	;# 
  2801  0091                     	;# 
  2802  0092                     	;# 
  2803  0093                     	;# 
  2804  0095                     	;# 
  2805  0096                     	;# 
  2806  0097                     	;# 
  2807  0099                     	;# 
  2808  009A                     	;# 
  2809  009B                     	;# 
  2810  009B                     	;# 
  2811  009C                     	;# 
  2812  009D                     	;# 
  2813  009E                     	;# 
  2814  009F                     	;# 
  2815  010C                     	;# 
  2816  010D                     	;# 
  2817  010E                     	;# 
  2818  0111                     	;# 
  2819  0112                     	;# 
  2820  0113                     	;# 
  2821  0114                     	;# 
  2822  0115                     	;# 
  2823  0116                     	;# 
  2824  0117                     	;# 
  2825  0118                     	;# 
  2826  0119                     	;# 
  2827  011D                     	;# 
  2828  018C                     	;# 
  2829  018D                     	;# 
  2830  018E                     	;# 
  2831  0191                     	;# 
  2832  0191                     	;# 
  2833  0192                     	;# 
  2834  0193                     	;# 
  2835  0193                     	;# 
  2836  0194                     	;# 
  2837  0195                     	;# 
  2838  0196                     	;# 
  2839  0199                     	;# 
  2840  019A                     	;# 
  2841  019B                     	;# 
  2842  019B                     	;# 
  2843  019C                     	;# 
  2844  019D                     	;# 
  2845  019E                     	;# 
  2846  019F                     	;# 
  2847  020C                     	;# 
  2848  020D                     	;# 
  2849  0211                     	;# 
  2850  0211                     	;# 
  2851  0212                     	;# 
  2852  0212                     	;# 
  2853  0213                     	;# 
  2854  0213                     	;# 
  2855  0214                     	;# 
  2856  0214                     	;# 
  2857  0215                     	;# 
  2858  0215                     	;# 
  2859  0215                     	;# 
  2860  0216                     	;# 
  2861  0216                     	;# 
  2862  0217                     	;# 
  2863  0217                     	;# 
  2864  0391                     	;# 
  2865  0392                     	;# 
  2866  0393                     	;# 
  2867  0394                     	;# 
  2868  0395                     	;# 
  2869  0396                     	;# 
  2870  0498                     	;# 
  2871  0498                     	;# 
  2872  0499                     	;# 
  2873  049A                     	;# 
  2874  049B                     	;# 
  2875  049B                     	;# 
  2876  049C                     	;# 
  2877  049E                     	;# 
  2878  049F                     	;# 
  2879  0611                     	;# 
  2880  0612                     	;# 
  2881  0613                     	;# 
  2882  0613                     	;# 
  2883  0614                     	;# 
  2884  0615                     	;# 
  2885  0616                     	;# 
  2886  0616                     	;# 
  2887  0617                     	;# 
  2888  0618                     	;# 
  2889  0619                     	;# 
  2890  0619                     	;# 
  2891  061A                     	;# 
  2892  061B                     	;# 
  2893  061C                     	;# 
  2894  061C                     	;# 
  2895  0691                     	;# 
  2896  0692                     	;# 
  2897  0693                     	;# 
  2898  0694                     	;# 
  2899  0695                     	;# 
  2900  0F0F                     	;# 
  2901  0F10                     	;# 
  2902  0F11                     	;# 
  2903  0F12                     	;# 
  2904  0F13                     	;# 
  2905  0F14                     	;# 
  2906  0F15                     	;# 
  2907  0F16                     	;# 
  2908  0F17                     	;# 
  2909  0F18                     	;# 
  2910  0F19                     	;# 
  2911  0F1A                     	;# 
  2912  0F1B                     	;# 
  2913  0F1C                     	;# 
  2914  0F1D                     	;# 
  2915  0F1E                     	;# 
  2916  0F1F                     	;# 
  2917  0F20                     	;# 
  2918  0F21                     	;# 
  2919  0F22                     	;# 
  2920  0F23                     	;# 
  2921  0F24                     	;# 
  2922  0F25                     	;# 
  2923  0F26                     	;# 
  2924  0F27                     	;# 
  2925  0F28                     	;# 
  2926  0F29                     	;# 
  2927  0F2A                     	;# 
  2928  0F2B                     	;# 
  2929  0F2C                     	;# 
  2930  0F2D                     	;# 
  2931  0F2E                     	;# 
  2932  0F2F                     	;# 
  2933  0F8C                     	;# 
  2934  0F8D                     	;# 
  2935  0F91                     	;# 
  2936  0F95                     	;# 
  2937  0F96                     	;# 
  2938  0F97                     	;# 
  2939  0F9C                     	;# 
  2940  0F9D                     	;# 
  2941  0F9E                     	;# 
  2942  0FE3                     	;# 
  2943  0FE4                     	;# 
  2944  0FE5                     	;# 
  2945  0FE6                     	;# 
  2946  0FE7                     	;# 
  2947  0FE8                     	;# 
  2948  0FE9                     	;# 
  2949  0FEA                     	;# 
  2950  0FEB                     	;# 
  2951  0FED                     	;# 
  2952  0FEE                     	;# 
  2953  0FEF                     	;# 
  2954                           
  2955                           	psect	idataCOMMON
  2956  0000                     __pidataCOMMON:	
  2957                           
  2958                           	psect	idataBANK0
  2959  0000                     __pidataBANK0:	
  2960                           
  2961                           	psect	strings
  2962  0229                     __pstrings:	
  2963  0229                     __stringtab:	
  2964  0229  3400               	retlw	0
  2965  022A                     __end_of__stringtab:	
  2966  022A                     _mrfRegset_InitCnt:	
  2967  022A  3410               	retlw	16
  2968  022B                     __end_of_mrfRegset_InitCnt:	
  2969  022B                     _mrfRegset_RxCnt:	
  2970  022B  3406               	retlw	6
  2971  022C                     __end_of_mrfRegset_RxCnt:	
  2972  022C                     _mrfRegset_SleepCnt:	
  2973  022C  3403               	retlw	3
  2974  022D                     __end_of_mrfRegset_SleepCnt:	
  2975  022D                     _mrfRegset_TxCnt:	
  2976  022D  3404               	retlw	4
  2977  022E                     __end_of_mrfRegset_TxCnt:	
  2978  022E                     _mrfRegset_Init:	
  2979  022E  34CA               	retlw	202
  2980  022F  3471               	retlw	113
  2981  0230  34CA               	retlw	202
  2982  0231  3473               	retlw	115
  2983  0232  3480               	retlw	128
  2984  0233  3428               	retlw	40
  2985  0234  34C4               	retlw	196
  2986  0235  34E7               	retlw	231
  2987  0236  34A8               	retlw	168
  2988  0237  3460               	retlw	96
  2989  0238  34C6               	retlw	198
  2990  0239  3405               	retlw	5
  2991  023A  3482               	retlw	130
  2992  023B  3400               	retlw	0
  2993  023C  3490               	retlw	144
  2994  023D  3462               	retlw	98
  2995  023E  3498               	retlw	152
  2996  023F  3490               	retlw	144
  2997  0240  34C2               	retlw	194
  2998  0241  34AC               	retlw	172
  2999  0242  3482               	retlw	130
  3000  0243  3420               	retlw	32
  3001  0244  3455               	retlw	85
  3002  0245  3400               	retlw	0
  3003  0246  3482               	retlw	130
  3004  0247  3480               	retlw	128
  3005  0248  3480               	retlw	128
  3006  0249  3468               	retlw	104
  3007  024A  34CA               	retlw	202
  3008  024B  3471               	retlw	113
  3009  024C  34CA               	retlw	202
  3010  024D  3473               	retlw	115
  3011  024E                     __end_of_mrfRegset_Init:	
  3012  024E                     _mrfRegset_Rx:	
  3013  024E  3482               	retlw	130
  3014  024F  3400               	retlw	0
  3015  0250  34CA               	retlw	202
  3016  0251  3471               	retlw	113
  3017  0252  3480               	retlw	128
  3018  0253  3428               	retlw	40
  3019  0254  3482               	retlw	130
  3020  0255  3480               	retlw	128
  3021  0256  3480               	retlw	128
  3022  0257  3468               	retlw	104
  3023  0258  34CA               	retlw	202
  3024  0259  3473               	retlw	115
  3025  025A                     __end_of_mrfRegset_Rx:	
  3026  025A                     _mrfRegset_Tx:	
  3027  025A  3482               	retlw	130
  3028  025B  3400               	retlw	0
  3029  025C  34CA               	retlw	202
  3030  025D  3471               	retlw	113
  3031  025E  3480               	retlw	128
  3032  025F  34A8               	retlw	168
  3033  0260  3482               	retlw	130
  3034  0261  3420               	retlw	32
  3035  0262                     __end_of_mrfRegset_Tx:	
  3036  0262                     _mrfRegset_Sleep:	
  3037  0262  3482               	retlw	130
  3038  0263  3400               	retlw	0
  3039  0264  34CA               	retlw	202
  3040  0265  3471               	retlw	113
  3041  0266  3480               	retlw	128
  3042  0267  3468               	retlw	104
  3043  0268                     __end_of_mrfRegset_Sleep:	
  3044  0268                     _parameters:	
  3045  0268  3400               	retlw	0
  3046  0269  3401               	retlw	1
  3047  026A  3436               	retlw	_cfgRam& (0+255)
  3048  026B  3401               	retlw	1
  3049  026C  3402               	retlw	2
  3050  026D  343D               	retlw	(_cfgRam+7)& (0+255)
  3051  026E                     __end_of_parameters:	
  3052  000B                     _INTCONbits	set	11
  3053  000C                     _PORTAbits	set	12
  3054  000D                     _PORTBbits	set	13
  3055  000E                     _PORTCbits	set	14
  3056  009D                     _ADCON0	set	157
  3057  009E                     _ADCON1	set	158
  3058  009F                     _ADCON2	set	159
  3059  009C                     _ADRESH	set	156
  3060  009B                     _ADRESL	set	155
  3061  0095                     _OPTION_REGbits	set	149
  3062  0099                     _OSCCON	set	153
  3063  008C                     _TRISAbits	set	140
  3064  008D                     _TRISBbits	set	141
  3065  008E                     _TRISCbits	set	142
  3066  0097                     _WDTCONbits	set	151
  3067  0117                     _FVRCON	set	279
  3068  010C                     _LATAbits	set	268
  3069  010D                     _LATBbits	set	269
  3070  010E                     _LATCbits	set	270
  3071  018C                     _ANSELA	set	396
  3072  018D                     _ANSELB	set	397
  3073  018E                     _ANSELC	set	398
  3074  018E                     _ANSELCbits	set	398
  3075  020C                     _WPUAbits	set	524
  3076  026E                     __stringdata:	
  3077  026E                     STR_1:	
  3078  026E  3442               	retlw	66	;'B'
  3079  026F  346F               	retlw	111	;'o'
  3080  0270  346F               	retlw	111	;'o'
  3081  0271  3400               	retlw	0
  3082  0272                     __end_of__stringdata:	
  3083                           
  3084                           ; #config settings
  3085  0000                     
  3086                           	psect	cinit
  3087  0802                     start_initialization:	
  3088  0802                     __initialization:	
  3089                           
  3090                           ; Clear objects allocated to BANK0
  3091  0802  3035               	movlw	low __pbssBANK0
  3092  0803  0084               	movwf	4
  3093  0804  3000               	movlw	high __pbssBANK0
  3094  0805  0085               	movwf	5
  3095  0806  300A               	movlw	10
  3096  0807  3182  22D0  3188   	fcall	clear_ram0
  3097                           
  3098                           ; Clear objects allocated to BANK1
  3099  080A  30A0               	movlw	low __pbssBANK1
  3100  080B  0084               	movwf	4
  3101  080C  3000               	movlw	high __pbssBANK1
  3102  080D  0085               	movwf	5
  3103  080E  304E               	movlw	78
  3104  080F  3182  22D0  3188   	fcall	clear_ram0
  3105                           
  3106                           ;initializer for _macPtr
  3107  0812  30A0               	movlw	_mrf49xaInst& (0+255)
  3108  0813  00F8               	movwf	__pdataCOMMON& (0+127)
  3109                           
  3110                           ;initializer for _coldBoot
  3111  0814  3001               	movlw	1
  3112  0815  00BF               	movwf	__pdataBANK0& (0+127)
  3113  0816                     end_of_initialization:	
  3114                           ;End of C runtime variable initialization code
  3115                           
  3116  0816                     __end_of__initialization:	
  3117  0816  0020               	movlb	0
  3118  0817  2848               	ljmp	_main	;jump to C main() function
  3119  0818                     __ptext27:	
  3120 ;; *************** function _SoftI2cInit *****************
  3121 ;; Defined at:
  3122 ;;		line 15 in file "../../../src/bsp/softI2c.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;		None               void
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, pclath, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 17F/2
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3136 ;;      Params:         0       0       0       0
  3137 ;;      Locals:         0       0       0       0
  3138 ;;      Temps:          0       0       0       0
  3139 ;;      Totals:         0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    7
  3143 ;; This function calls:
  3144 ;;		_SoftI2cStart
  3145 ;;		_SoftI2cStop
  3146 ;;		_SoftI2cTxByte
  3147 ;; This function is called by:
  3148 ;;		_PwrI2cInit
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _SoftI2cInit
  3154  0818                     _SoftI2cInit:	
  3155                           
  3156                           ;softI2c.c: 18: LATBbits.LATB6 = 1;
  3157                           
  3158                           ;incstack = 0
  3159                           ; Regs used in _SoftI2cInit: [wreg+status,2+status,0+pclath+cstack]
  3160                           
  3161                           ;softI2c.c: 19: LATBbits.LATB4 = 1;
  3162                           
  3163                           ;softI2c.c: 22: TRISBbits.TRISB6 = 0;
  3164                           
  3165                           ;softI2c.c: 23: TRISBbits.TRISB4 = 0;
  3166  0818  27C6  3188         	fcall	PL20	;call to abstracted procedure
  3167                           
  3168                           ;softI2c.c: 32: SoftI2cStart();
  3169  081A  22BC  3188         	fcall	_SoftI2cStart
  3170                           
  3171                           ;softI2c.c: 33: SoftI2cTxByte(0x00);
  3172  081C  3000               	movlw	0
  3173  081D  224E  3188         	fcall	_SoftI2cTxByte
  3174                           
  3175                           ;softI2c.c: 34: SoftI2cStop();
  3176  081F  2AC9               	ljmp	l2708
  3177  0820                     __end_of_SoftI2cInit:	
  3178  0820                     __ptext23:	
  3179 ;; *************** function _PwrRfInit *****************
  3180 ;; Defined at:
  3181 ;;		line 90 in file "../../../src/node/power.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;		None               void
  3188 ;; Registers used:
  3189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 1F/2
  3192 ;;		On exit  : 1F/1
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3195 ;;      Params:         0       0       0       0
  3196 ;;      Locals:         0       0       0       0
  3197 ;;      Temps:          0       0       0       0
  3198 ;;      Totals:         0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:   10
  3202 ;; This function calls:
  3203 ;;		_ExtIntInit
  3204 ;;		_Mrf49xaInit
  3205 ;;		_Sleepy
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           
  3212                           ;psect for function _PwrRfInit
  3213  0820                     _PwrRfInit:	
  3214                           
  3215                           ;power.c: 92: TRISAbits.TRISA2 = 1;
  3216                           
  3217                           ;incstack = 0
  3218                           ; Regs used in _PwrRfInit: [allreg]
  3219  0820  0021               	movlb	1	; select bank1
  3220  0821  150C               	bsf	12,2	;volatile
  3221                           
  3222                           ;power.c: 93: TRISAbits.TRISA4 = 0;
  3223  0822  120C               	bcf	12,4	;volatile
  3224                           
  3225                           ;power.c: 94: TRISAbits.TRISA5 = 0;
  3226  0823  128C               	bcf	12,5	;volatile
  3227                           
  3228                           ;power.c: 96: TRISBbits.TRISB7 = 0;
  3229  0824  138D               	bcf	13,7	;volatile
  3230                           
  3231                           ;power.c: 98: TRISCbits.TRISC1 = 0;
  3232  0825  108E               	bcf	14,1	;volatile
  3233                           
  3234                           ;power.c: 99: TRISCbits.TRISC4 = 0;
  3235  0826  120E               	bcf	14,4	;volatile
  3236                           
  3237                           ;power.c: 100: TRISCbits.TRISC6 = 0;
  3238  0827  130E               	bcf	14,6	;volatile
  3239                           
  3240                           ;power.c: 101: TRISCbits.TRISC7 = 0;
  3241  0828  138E               	bcf	14,7	;volatile
  3242                           
  3243                           ;power.c: 102: TRISCbits.TRISC3 = 1;
  3244  0829  158E               	bsf	14,3	;volatile
  3245                           
  3246                           ;power.c: 103: TRISCbits.TRISC5 = 1;
  3247  082A  168E               	bsf	14,5	;volatile
  3248                           
  3249                           ;power.c: 105: LATCbits.LATC1 = 0;
  3250  082B  0022               	movlb	2	; select bank2
  3251  082C  108E               	bcf	14,1	;volatile
  3252                           
  3253                           ;power.c: 107: LATAbits.LATA4 = 0;
  3254  082D  120C               	bcf	12,4	;volatile
  3255                           
  3256                           ;power.c: 108: LATAbits.LATA5 = 0;
  3257  082E  128C               	bcf	12,5	;volatile
  3258                           
  3259                           ;power.c: 109: LATCbits.LATC4 = 0;
  3260  082F  120E               	bcf	14,4	;volatile
  3261                           
  3262                           ;power.c: 110: PORTCbits.RC6 = 1;
  3263  0830  0020               	movlb	0	; select bank0
  3264  0831  170E               	bsf	14,6	;volatile
  3265                           
  3266                           ;power.c: 111: LATCbits.LATC7 = 0;
  3267  0832  0022               	movlb	2	; select bank2
  3268  0833  138E               	bcf	14,7	;volatile
  3269                           
  3270                           ;power.c: 112: PORTBbits.RB7 = 0;
  3271  0834  0020               	movlb	0	; select bank0
  3272  0835  138D               	bcf	13,7	;volatile
  3273                           
  3274                           ;power.c: 114: WPUAbits.WPUA2 = 1;
  3275  0836  0024               	movlb	4	; select bank4
  3276  0837  150C               	bsf	12,2	;volatile
  3277                           
  3278                           ;power.c: 115: Sleepy(10);
  3279  0838  300A               	movlw	10
  3280  0839  0020               	movlb	0	; select bank0
  3281  083A  00A0               	movwf	Sleepy@ms
  3282  083B  01A1               	clrf	Sleepy@ms+1
  3283  083C  21B0  3188         	fcall	_Sleepy
  3284                           
  3285                           ;power.c: 117: Mrf49xaInit(&mrf49xaInst);
  3286  083E  30A0               	movlw	_mrf49xaInst& (0+255)
  3287  083F  214D  3188         	fcall	_Mrf49xaInit
  3288                           
  3289                           ;power.c: 118: ExtIntInit();
  3290  0841  2842               	ljmp	l2810
  3291  0842                     __end_of_PwrRfInit:	
  3292  0842                     __ptext60:	
  3293 ;; *************** function _ExtIntInit *****************
  3294 ;; Defined at:
  3295 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;		None
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;		None
  3300 ;; Return value:  Size  Location     Type
  3301 ;;		None               void
  3302 ;; Registers used:
  3303 ;;		None
  3304 ;; Tracked objects:
  3305 ;;		On entry : 1F/0
  3306 ;;		On exit  : 1F/1
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3309 ;;      Params:         0       0       0       0
  3310 ;;      Locals:         0       0       0       0
  3311 ;;      Temps:          0       0       0       0
  3312 ;;      Totals:         0       0       0       0
  3313 ;;Total ram usage:        0 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    5
  3316 ;; This function calls:
  3317 ;;		Nothing
  3318 ;; This function is called by:
  3319 ;;		_Mrf49xaTick
  3320 ;;		_PwrRfInit
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _ExtIntInit
  3326  0842                     _ExtIntInit:	
  3327  0842                     l2810:	
  3328                           ;incstack = 0
  3329                           ; Regs used in _ExtIntInit: []
  3330                           
  3331                           
  3332                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  3333  0842  0021               	movlb	1	; select bank1
  3334  0843  1315               	bcf	21,6	;volatile
  3335                           
  3336                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  3337  0844  108B               	bcf	11,1	;volatile
  3338                           
  3339                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  3340  0845  160B               	bsf	11,4	;volatile
  3341                           
  3342                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  3343  0846  178B               	bsf	11,7	;volatile
  3344  0847  0008               	return
  3345  0848                     __end_of_ExtIntInit:	
  3346  0848                     __pmaintext:	
  3347 ;;
  3348 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3349 ;;
  3350 ;; *************** function _main *****************
  3351 ;; Defined at:
  3352 ;;		line 32 in file "../../../src/node/main.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;  temperature     2   19[BANK0 ] unsigned int 
  3357 ;;  humidity        2   17[BANK0 ] unsigned int 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;		None               void
  3360 ;; Registers used:
  3361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 17F/0
  3364 ;;		On exit  : 1F/1
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3367 ;;      Params:         0       0       0       0
  3368 ;;      Locals:         0       4       0       0
  3369 ;;      Temps:          0       0       0       0
  3370 ;;      Totals:         0       4       0       0
  3371 ;;Total ram usage:        4 bytes
  3372 ;; Hardware stack levels required when called:   12
  3373 ;; This function calls:
  3374 ;;		_AdcSample
  3375 ;;		_CfgLoad
  3376 ;;		_Mcp9800Read
  3377 ;;		_Mcp9800Start
  3378 ;;		_Mrf49xaNeedsReset
  3379 ;;		_Mrf49xaTick
  3380 ;;		_PwrAdcInit
  3381 ;;		_PwrAdcSleep
  3382 ;;		_PwrAdcWake
  3383 ;;		_PwrI2cInit
  3384 ;;		_PwrI2cSleep
  3385 ;;		_PwrI2cWake
  3386 ;;		_PwrRfInit
  3387 ;;		_PwrRfSleep
  3388 ;;		_PwrRfWake
  3389 ;;		_PwrSensorInit
  3390 ;;		_PwrSensorSleep
  3391 ;;		_PwrSensorWake
  3392 ;;		_RfSendPowerState
  3393 ;;		_RfSendSampleWeatherNode
  3394 ;;		_Sleepy
  3395 ;; This function is called by:
  3396 ;;		Startup code after reset
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _main
  3402  0848                     _main:	
  3403                           
  3404                           ;main.c: 36: OSCCON = 0b01111000;
  3405                           
  3406                           ;incstack = 0
  3407                           ; Regs used in _main: [allreg]
  3408  0848  3078               	movlw	120
  3409  0849  0021               	movlb	1	; select bank1
  3410  084A  0099               	movwf	25	;volatile
  3411                           
  3412                           ;main.c: 38: PwrAdcInit();
  3413  084B  3182  22C7  3188   	fcall	_PwrAdcInit
  3414                           
  3415                           ;main.c: 39: PwrSensorInit();
  3416  084E  2780               	fcall	_PwrSensorInit
  3417                           
  3418                           ;main.c: 40: PwrI2cInit();
  3419  084F  3182  22BE  3188   	fcall	_PwrI2cInit
  3420                           
  3421                           ;main.c: 41: PwrRfInit();
  3422  0852  2020  3188         	fcall	_PwrRfInit
  3423                           
  3424                           ;main.c: 43: CfgLoad();
  3425  0854  22E5  3188         	fcall	_CfgLoad
  3426                           
  3427                           ;main.c: 45: PwrAdcSleep();
  3428  0856  2661  3188         	fcall	_PwrAdcSleep
  3429                           
  3430                           ;main.c: 46: PwrSensorSleep();
  3431  0858  22DD  3188         	fcall	_PwrSensorSleep
  3432                           
  3433                           ;main.c: 47: PwrI2cSleep();
  3434  085A  22DB               	fcall	_PwrI2cSleep
  3435  085B                     l3586:	
  3436                           
  3437                           ;main.c: 48: PwrRfSleep();
  3438  085B  3182  2272  3188   	fcall	_PwrRfSleep
  3439                           
  3440                           ;main.c: 51: {
  3441                           ;main.c: 54: Sleepy(5000);
  3442  085E  3088               	movlw	136
  3443  085F  0020               	movlb	0	; select bank0
  3444  0860  00A0               	movwf	Sleepy@ms
  3445  0861  3013               	movlw	19
  3446  0862  00A1               	movwf	Sleepy@ms+1
  3447  0863  21B0  3188         	fcall	_Sleepy
  3448                           
  3449                           ;main.c: 56: PwrSensorWake();
  3450  0865  2784  3188         	fcall	_PwrSensorWake
  3451                           
  3452                           ;main.c: 57: PwrI2cWake();
  3453  0867  23E8  3188         	fcall	_PwrI2cWake
  3454                           
  3455                           ;main.c: 59: Mcp9800Start(Mcp9800_9bit);
  3456  0869  3000               	movlw	0
  3457  086A  2211  3188         	fcall	_Mcp9800Start
  3458                           
  3459                           ;main.c: 61: PwrAdcWake();
  3460  086C  2666  3188         	fcall	_PwrAdcWake
  3461                           
  3462                           ;main.c: 62: uint16_t humidity = AdcSample(ADC_AN4);
  3463  086E  3004               	movlw	4
  3464  086F  262C  3188         	fcall	_AdcSample
  3465  0871  0823               	movf	?_AdcSample+1,w
  3466  0872  00B2               	movwf	main@humidity+1
  3467  0873  0822               	movf	?_AdcSample,w
  3468  0874  00B1               	movwf	main@humidity
  3469                           
  3470                           ;main.c: 63: Sleepy(100);
  3471  0875  3064               	movlw	100
  3472  0876  00A0               	movwf	Sleepy@ms
  3473  0877  01A1               	clrf	Sleepy@ms+1
  3474  0878  21B0  3188         	fcall	_Sleepy
  3475                           
  3476                           ;main.c: 64: uint16_t temperature = Mcp9800Read();
  3477  087A  21E0  3188         	fcall	_Mcp9800Read
  3478  087C  0825               	movf	?_Mcp9800Read+1,w
  3479  087D  00B4               	movwf	main@temperature+1
  3480  087E  0824               	movf	?_Mcp9800Read,w
  3481  087F  00B3               	movwf	main@temperature
  3482                           
  3483                           ;main.c: 66: PwrSensorSleep();
  3484  0880  22DD  3188         	fcall	_PwrSensorSleep
  3485                           
  3486                           ;main.c: 67: PwrI2cSleep();
  3487  0882  22DB               	fcall	_PwrI2cSleep
  3488                           
  3489                           ;main.c: 69: PwrRfWake();
  3490  0883  3182  22B1  3188   	fcall	_PwrRfWake
  3491                           
  3492                           ;main.c: 71: if (macPtr->txPacket.state != PKT_FREE)
  3493  0886  0853               	movf	(_mrf49xaInst^(0+128)+51),w
  3494  0887  1903               	btfsc	3,2
  3495  0888  288E               	goto	l3616
  3496                           
  3497                           ;main.c: 72: {
  3498                           ;main.c: 73: Mrf49xaNeedsReset(macPtr);
  3499  0889  30A0               	movlw	_mrf49xaInst& (0+255)
  3500  088A  22D8  3188         	fcall	_Mrf49xaNeedsReset
  3501                           
  3502                           ;main.c: 74: Mrf49xaTick(macPtr);
  3503  088C  20AD  3188         	fcall	_Mrf49xaTick
  3504  088E                     l3616:	
  3505                           
  3506                           ;main.c: 75: }
  3507                           ;main.c: 77: powerStatusTicker++;
  3508  088E  0020               	movlb	0	; select bank0
  3509  088F  300F               	movlw	15
  3510  0890  0AB5               	incf	_powerStatusTicker,f
  3511                           
  3512                           ;main.c: 79: if (powerStatusTicker >= 15)
  3513  0891  0235               	subwf	_powerStatusTicker,w
  3514  0892  1C03               	skipc
  3515  0893  289C               	goto	l3628
  3516                           
  3517                           ;main.c: 80: {
  3518                           ;main.c: 81: powerStatusTicker = 0;
  3519  0894  01B5               	clrf	_powerStatusTicker
  3520                           
  3521                           ;main.c: 83: RfSendPowerState(macPtr);
  3522  0895  25EE  3188         	fcall	_RfSendPowerState
  3523  0897                     l3624:	
  3524                           
  3525                           ;main.c: 85: {
  3526                           ;main.c: 86: Mrf49xaTick(macPtr);
  3527  0897  20AD  3188         	fcall	_Mrf49xaTick
  3528                           
  3529                           ;main.c: 87: }
  3530                           ;main.c: 88: while (macPtr->txPacket.state != PKT_FREE);
  3531  0899  08D3               	movf	(_mrf49xaInst^(0+128)+51),f
  3532  089A  1D03               	skipz
  3533  089B  2897               	goto	l3624
  3534  089C                     l3628:	
  3535                           
  3536                           ;main.c: 89: }
  3537                           ;main.c: 91: RfSendSampleWeatherNode(macPtr, temperature, humidity);
  3538  089C  0020               	movlb	0	; select bank0
  3539  089D  0834               	movf	main@temperature+1,w
  3540  089E  00A8               	movwf	RfSendSampleWeatherNode@temperature+1
  3541  089F  0833               	movf	main@temperature,w
  3542  08A0  00A7               	movwf	RfSendSampleWeatherNode@temperature
  3543  08A1  0832               	movf	main@humidity+1,w
  3544  08A2  00AA               	movwf	RfSendSampleWeatherNode@humidity+1
  3545  08A3  0831               	movf	main@humidity,w
  3546  08A4  00A9               	movwf	RfSendSampleWeatherNode@humidity
  3547  08A5  266B  3188         	fcall	_RfSendSampleWeatherNode
  3548  08A7                     l3630:	
  3549                           
  3550                           ;main.c: 93: {
  3551                           ;main.c: 94: Mrf49xaTick(macPtr);
  3552  08A7  20AD  3188         	fcall	_Mrf49xaTick
  3553                           
  3554                           ;main.c: 95: }
  3555                           ;main.c: 96: while (macPtr->txPacket.state != PKT_FREE);
  3556  08A9  08D3               	movf	(_mrf49xaInst^(0+128)+51),f
  3557  08AA  1903               	btfsc	3,2
  3558  08AB  285B               	goto	l3586
  3559  08AC  28A7               	goto	l3630
  3560  08AD                     __end_of_main:	
  3561  08AD                     __ptext29:	
  3562 ;; *************** function _Mrf49xaTick *****************
  3563 ;; Defined at:
  3564 ;;		line 130 in file "../../../src/devices/mrf49xa_mac.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  3567 ;;		 -> mrf49xaInst(78), 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  inst            1   15[BANK0 ] PTR struct Mrf49xaMac_s
  3570 ;;		 -> mrf49xaInst(78), 
  3571 ;;  timeout         1   14[BANK0 ] unsigned char 
  3572 ;;  packet          1   16[BANK0 ] PTR struct rfTrcvPacket_
  3573 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;		None               void
  3576 ;; Registers used:
  3577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 1E/1
  3580 ;;		On exit  : 1F/1
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3583 ;;      Params:         0       0       0       0
  3584 ;;      Locals:         0       3       0       0
  3585 ;;      Temps:          0       1       0       0
  3586 ;;      Totals:         0       4       0       0
  3587 ;;Total ram usage:        4 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:   11
  3590 ;; This function calls:
  3591 ;;		_ExtIntInit
  3592 ;;		_HandlePacket
  3593 ;;		_Mrf49RxSts
  3594 ;;		_Mrf49xaFreePacket
  3595 ;;		_Mrf49xaInit
  3596 ;;		_Mrf49xaModeTx
  3597 ;;		_Mrf49xaNeedsReset
  3598 ;;		_Mrf49xaPacketPending
  3599 ;;		_Mrf49xaRxPacket
  3600 ;;		_Sleepy
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function _Mrf49xaTick
  3608  08AD                     _Mrf49xaTick:	
  3609                           
  3610                           ;mrf49xa_mac.c: 139: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_HW_BU
      +                          SY_RX &&
  3611                           ;mrf49xa_mac.c: 140: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_HW_BUSY_R
      +                          X)
  3612                           
  3613                           ;incstack = 0
  3614                           ; Regs used in _Mrf49xaTick: [allreg]
  3615  08AD  0021               	movlb	1	; select bank1
  3616  08AE  0823               	movf	(_mrf49xaInst^(0+128)+3),w
  3617  08AF  3A04               	xorlw	4
  3618  08B0  1D03               	skipz
  3619  08B1  28B9               	goto	l3306
  3620  08B2  083B               	movf	(_mrf49xaInst^(0+128)+27),w
  3621  08B3  3A04               	xorlw	4
  3622  08B4  1D03               	skipz
  3623  08B5  28B9               	goto	l3306
  3624                           
  3625                           ;mrf49xa_mac.c: 141: {
  3626                           ;mrf49xa_mac.c: 142: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3627  08B6  30A0               	movlw	_mrf49xaInst& (0+255)
  3628  08B7  22D8  3188         	fcall	_Mrf49xaNeedsReset
  3629  08B9                     l3306:	
  3630                           
  3631                           ;mrf49xa_mac.c: 143: }
  3632                           ;mrf49xa_mac.c: 144: if (((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset)
  3633  08B9  1FED               	btfss	(_mrf49xaInst^(0+128)+77),7
  3634  08BA  28BF               	goto	l3314
  3635                           
  3636                           ;mrf49xa_mac.c: 145: {
  3637                           ;mrf49xa_mac.c: 146: Mrf49xaInit(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3638  08BB  30A0               	movlw	_mrf49xaInst& (0+255)
  3639  08BC  214D  3188         	fcall	_Mrf49xaInit
  3640                           
  3641                           ;mrf49xa_mac.c: 147: ExtIntInit();
  3642  08BE  2842               	ljmp	l2810
  3643  08BF                     l3314:	
  3644                           
  3645                           ;mrf49xa_mac.c: 149: }
  3646                           ;mrf49xa_mac.c: 152: if (Mrf49xaPacketPending(((Mrf49xaMac_t*)(&mrf49xaInst))))
  3647  08BF  30A0               	movlw	_mrf49xaInst& (0+255)
  3648  08C0  23DF  3188         	fcall	_Mrf49xaPacketPending
  3649  08C2  3A00               	xorlw	0
  3650  08C3  1903               	skipnz
  3651  08C4  28EA               	goto	l3328
  3652                           
  3653                           ;mrf49xa_mac.c: 153: {
  3654                           ;mrf49xa_mac.c: 154: rfTrcvPacket_t* packet = Mrf49xaRxPacket(((Mrf49xaMac_t*)(&mrf49xaI
      +                          nst)));
  3655  08C5  30A0               	movlw	_mrf49xaInst& (0+255)
  3656  08C6  3182  22A3  3188   	fcall	_Mrf49xaRxPacket
  3657  08C9  0020               	movlb	0	; select bank0
  3658  08CA  00B0               	movwf	Mrf49xaTick@packet
  3659                           
  3660                           ;mrf49xa_mac.c: 162: if (packet->packet.dst == 0xFF || packet->packet.dst == ((Mrf49xaMa
      +                          c_t*)(&mrf49xaInst))->nodeId)
  3661  08CB  3E03               	addlw	3
  3662  08CC  0086               	movwf	6
  3663  08CD  0187               	clrf	7
  3664  08CE  0801               	movf	1,w
  3665  08CF  3AFF               	xorlw	255
  3666  08D0  1903               	skipnz
  3667  08D1  28DA               	goto	l3322
  3668  08D2  0830               	movf	Mrf49xaTick@packet,w
  3669  08D3  3E03               	addlw	3
  3670  08D4  0086               	movwf	6
  3671  08D5  0801               	movf	1,w
  3672  08D6  0021               	movlb	1	; select bank1
  3673  08D7  066C               	xorwf	(_mrf49xaInst^(0+128)+76),w
  3674  08D8  1D03               	skipz
  3675  08D9  28E5               	goto	l3326
  3676  08DA                     l3322:	
  3677                           
  3678                           ;mrf49xa_mac.c: 163: {
  3679                           ;mrf49xa_mac.c: 164: packet->packet.size -= 5;
  3680  08DA  0020               	movlb	0	; select bank0
  3681  08DB  0A30               	incf	Mrf49xaTick@packet,w
  3682  08DC  0086               	movwf	6
  3683  08DD  3005               	movlw	5
  3684  08DE  0187               	clrf	7
  3685  08DF  0281               	subwf	1,f
  3686                           
  3687                           ;mrf49xa_mac.c: 167: HandlePacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  3688  08E0  0830               	movf	Mrf49xaTick@packet,w
  3689  08E1  00A9               	movwf	HandlePacket@packet
  3690  08E2  22ED  3188         	fcall	_HandlePacket
  3691                           
  3692                           ;mrf49xa_mac.c: 169: }
  3693  08E4  28EA               	goto	l3328
  3694  08E5                     l3326:	
  3695                           
  3696                           ;mrf49xa_mac.c: 170: else
  3697                           ;mrf49xa_mac.c: 171: {
  3698                           ;mrf49xa_mac.c: 172: Mrf49xaFreePacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  3699  08E5  0020               	movlb	0	; select bank0
  3700  08E6  0830               	movf	Mrf49xaTick@packet,w
  3701  08E7  00A0               	movwf	Mrf49xaFreePacket@packet
  3702  08E8  22E0  3188         	fcall	_Mrf49xaFreePacket
  3703  08EA                     l3328:	
  3704                           
  3705                           ;mrf49xa_mac.c: 173: }
  3706                           ;mrf49xa_mac.c: 177: }
  3707                           ;mrf49xa_mac.c: 179: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state == PKT_WAITING_
      +                          FOR_ACK)
  3708  08EA  0021               	movlb	1	; select bank1
  3709  08EB  0853               	movf	(_mrf49xaInst^(0+128)+51),w
  3710  08EC  3A03               	xorlw	3
  3711  08ED  1D03               	skipz
  3712  08EE  291D               	goto	l3348
  3713                           
  3714                           ;mrf49xa_mac.c: 180: {
  3715                           ;mrf49xa_mac.c: 181: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck == ACK_RECEIV
      +                          ED)
  3716  08EF  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  3717  08F0  0C89               	rrf	9,f
  3718  08F1  0C89               	rrf	9,f
  3719  08F2  3903               	andlw	3
  3720  08F3  3A02               	xorlw	2
  3721  08F4  1D03               	skipz
  3722  08F5  28F8               	goto	l3334
  3723  08F6                     l3332:	
  3724                           
  3725                           ;mrf49xa_mac.c: 182: {
  3726                           ;mrf49xa_mac.c: 183: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_FREE;
  3727  08F6  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  3728                           
  3729                           ;mrf49xa_mac.c: 184: }
  3730  08F7  291D               	goto	l3348
  3731  08F8                     l3334:	
  3732                           
  3733                           ;mrf49xa_mac.c: 185: else if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry == 10)
  3734  08F8  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  3735  08F9  390F               	andlw	15
  3736  08FA  3A0A               	xorlw	10
  3737  08FB  1D03               	skipz
  3738  08FC  2915               	goto	l3344
  3739                           
  3740                           ;mrf49xa_mac.c: 186: {
  3741                           ;mrf49xa_mac.c: 187: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit == 1)
  3742  08FD  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  3743  08FE  3903               	andlw	3
  3744  08FF  3A01               	xorlw	1
  3745  0900  1903               	btfsc	3,2
  3746  0901  28F6               	goto	l3332
  3747                           
  3748                           ;mrf49xa_mac.c: 193: else
  3749                           ;mrf49xa_mac.c: 194: {
  3750                           ;mrf49xa_mac.c: 196: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  3751  0902  30F0               	movlw	-16
  3752  0903  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  3753                           
  3754                           ;mrf49xa_mac.c: 197: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit++;
  3755  0904  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  3756  0905  3903               	andlw	3
  3757  0906  0020               	movlb	0	; select bank0
  3758  0907  00AD               	movwf	??_Mrf49xaTick
  3759  0908  0AAD               	incf	??_Mrf49xaTick,f
  3760  0909  0EAD               	swapf	??_Mrf49xaTick,f
  3761  090A  0021               	movlb	1	; select bank1
  3762  090B  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  3763  090C  0020               	movlb	0	; select bank0
  3764  090D  062D               	xorwf	??_Mrf49xaTick,w
  3765  090E  39CF               	andlw	-49
  3766  090F  062D               	xorwf	??_Mrf49xaTick,w
  3767  0910  0021               	movlb	1	; select bank1
  3768  0911  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  3769                           
  3770                           ;mrf49xa_mac.c: 198: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_READY_FOR_TX;
  3771  0912  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  3772  0913  0AD3               	incf	(_mrf49xaInst^(0+128)+51),f
  3773  0914  291D               	goto	l3348
  3774  0915                     l3344:	
  3775                           
  3776                           ;mrf49xa_mac.c: 201: else
  3777                           ;mrf49xa_mac.c: 202: {
  3778                           ;mrf49xa_mac.c: 203: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry++;
  3779  0915  279F  3188         	fcall	PL10	;call to abstracted procedure
  3780                           
  3781                           ;mrf49xa_mac.c: 204: Sleepy(5);
  3782  0917  3005               	movlw	5
  3783  0918  0020               	movlb	0	; select bank0
  3784  0919  00A0               	movwf	Sleepy@ms
  3785  091A  01A1               	clrf	Sleepy@ms+1
  3786  091B  21B0  3188         	fcall	_Sleepy
  3787  091D                     l3348:	
  3788                           
  3789                           ;mrf49xa_mac.c: 205: }
  3790                           ;mrf49xa_mac.c: 206: }
  3791                           ;mrf49xa_mac.c: 208: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state == PKT_READY_FO
      +                          R_TX &&
  3792                           ;mrf49xa_mac.c: 209: ((Mrf49xaMac_t*)(&mrf49xaInst))->state == RECV_IDLE)
  3793  091D  0021               	movlb	1	; select bank1
  3794  091E  0B53               	decfsz	(_mrf49xaInst^(0+128)+51),w
  3795  091F  0008               	return
  3796  0920  0B6B               	decfsz	(_mrf49xaInst^(0+128)+75),w
  3797  0921  0008               	return
  3798                           
  3799                           ;mrf49xa_mac.c: 210: {
  3800                           ;mrf49xa_mac.c: 211: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry >= 10)
  3801  0922  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  3802  0923  390F               	andlw	15
  3803  0924  0020               	movlb	0	; select bank0
  3804  0925  00AD               	movwf	??_Mrf49xaTick
  3805  0926  300A               	movlw	10
  3806  0927  022D               	subwf	??_Mrf49xaTick,w
  3807  0928  1C03               	skipc
  3808  0929  2930               	goto	l3360
  3809                           
  3810                           ;mrf49xa_mac.c: 212: {
  3811                           ;mrf49xa_mac.c: 214: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  3812  092A  30F0               	movlw	-16
  3813  092B  0021               	movlb	1	; select bank1
  3814  092C  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  3815                           
  3816                           ;mrf49xa_mac.c: 215: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_WAITING_FOR_A
      +                          CK;
  3817  092D  3003               	movlw	3
  3818  092E  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
  3819  092F  0008               	return
  3820  0930                     l3360:	
  3821                           
  3822                           ;mrf49xa_mac.c: 217: }
  3823                           ;mrf49xa_mac.c: 221: uint8_t timeout = 0;
  3824  0930  01AE               	clrf	Mrf49xaTick@timeout
  3825  0931                     l3362:	
  3826                           
  3827                           ;mrf49xa_mac.c: 225: {
  3828                           ;mrf49xa_mac.c: 226: Mrf49RxSts(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3829  0931  30A0               	movlw	_mrf49xaInst& (0+255)
  3830  0932  2591  3188         	fcall	_Mrf49RxSts
  3831                           
  3832                           ;mrf49xa_mac.c: 228: if (((Mrf49xaMac_t*)(&mrf49xaInst))->state == RECV_IDLE && ((Mrf49x
      +                          aMac_t*)(&mrf49xaInst))->status.flags.msb.signalPresent == 0)
  3833  0934  0021               	movlb	1	; select bank1
  3834  0935  0B6B               	decfsz	(_mrf49xaInst^(0+128)+75),w
  3835  0936  2939               	goto	l3370
  3836  0937  1C20               	btfss	_mrf49xaInst^(0+128),0
  3837  0938  2947               	goto	l442
  3838  0939                     l3370:	
  3839                           
  3840                           ;mrf49xa_mac.c: 232: }
  3841                           ;mrf49xa_mac.c: 234: Sleepy(5);
  3842  0939  3005               	movlw	5
  3843  093A  0020               	movlb	0	; select bank0
  3844  093B  00A0               	movwf	Sleepy@ms
  3845  093C  01A1               	clrf	Sleepy@ms+1
  3846  093D  21B0  3188         	fcall	_Sleepy
  3847  093F  300B               	movlw	11
  3848                           
  3849                           ;mrf49xa_mac.c: 235: timeout++;
  3850  0940  0AAE               	incf	Mrf49xaTick@timeout,f
  3851                           
  3852                           ;mrf49xa_mac.c: 237: if (timeout > 10)
  3853  0941  022E               	subwf	Mrf49xaTick@timeout,w
  3854  0942  1C03               	skipc
  3855  0943  2931               	goto	l3362
  3856                           
  3857                           ;mrf49xa_mac.c: 238: {
  3858                           ;mrf49xa_mac.c: 239: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry++;
  3859  0944  0021               	movlb	1	; select bank1
  3860  0945  279F               	fcall	PL10	;call to abstracted procedure
  3861  0946  0008               	return
  3862  0947                     l442:	
  3863                           
  3864                           ;mrf49xa_mac.c: 253: INTCONbits.INTE = 0;;
  3865  0947  120B               	bcf	11,4	;volatile
  3866                           
  3867                           ;mrf49xa_mac.c: 254: Mrf49xaModeTx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  3868  0948  23E9               	fcall	_Mrf49xaModeTx
  3869                           
  3870                           ;mrf49xa_mac.c: 255: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_HW_BUSY_TX;
  3871  0949  3002               	movlw	2
  3872  094A  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
  3873                           
  3874                           ;mrf49xa_mac.c: 259: INTCONbits.INTE = 1;;
  3875  094B  160B               	bsf	11,4	;volatile
  3876  094C  0008               	return
  3877  094D                     __end_of_Mrf49xaTick:	
  3878  094D                     __ptext33:	
  3879 ;; *************** function _Mrf49xaInit *****************
  3880 ;; Defined at:
  3881 ;;		line 126 in file "../../../src/devices/mrf49xa.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  3884 ;;		 -> mrf49xaInst(78), 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  inst            1    8[BANK0 ] PTR struct Mrf49xaMac_s
  3887 ;;		 -> mrf49xaInst(78), 
  3888 ;;  k               1    9[BANK0 ] unsigned char 
  3889 ;;  j               1    0        unsigned char 
  3890 ;;  i               1    0        unsigned char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 1E/0
  3897 ;;		On exit  : 1F/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3900 ;;      Params:         0       0       0       0
  3901 ;;      Locals:         0       2       0       0
  3902 ;;      Temps:          0       0       0       0
  3903 ;;      Totals:         0       2       0       0
  3904 ;;Total ram usage:        2 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    9
  3907 ;; This function calls:
  3908 ;;		_Mrf49TxCmd
  3909 ;;		_Mrf49xaModeRx
  3910 ;;		_Mrf49xaServe
  3911 ;;		_Sleepy
  3912 ;; This function is called by:
  3913 ;;		_Mrf49xaTick
  3914 ;;		_PwrRfInit
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _Mrf49xaInit
  3920  094D                     _Mrf49xaInit:	
  3921  094D                     l234:	
  3922                           ;incstack = 0
  3923                           ; Regs used in _Mrf49xaInit: [allreg]
  3924                           ;mrf49xa.c: 128: UI08_t k;
  3925                           ;mrf49xa.c: 130: UI08_t i, j;
  3926                           ;mrf49xa.c: 132: reset:
  3927                           
  3928                           
  3929                           ;mrf49xa.c: 134: for (k = 0; k < sizeof(Mrf49xaMac_t); k++)
  3930  094D  0020               	movlb	0	; select bank0
  3931  094E  01A9               	clrf	Mrf49xaInit@k
  3932  094F                     l3030:	
  3933                           
  3934                           ;mrf49xa.c: 135: {
  3935                           ;mrf49xa.c: 136: ((uint8_t*)((Mrf49xaMac_t*)(&mrf49xaInst)))[k] = 0;
  3936  094F  0829               	movf	Mrf49xaInit@k,w
  3937  0950  3EA0               	addlw	_mrf49xaInst& (0+255)
  3938  0951  0086               	movwf	6
  3939  0952  304E               	movlw	78
  3940  0953  0187               	clrf	7
  3941  0954  0181               	clrf	1
  3942  0955  0AA9               	incf	Mrf49xaInit@k,f
  3943  0956  0229               	subwf	Mrf49xaInit@k,w
  3944  0957  1C03               	skipc
  3945  0958  294F               	goto	l3030
  3946                           
  3947                           ;mrf49xa.c: 137: }
  3948                           ;mrf49xa.c: 140: PORTCbits.RC6 = 1;
  3949  0959  170E               	bsf	14,6	;volatile
  3950                           
  3951                           ;mrf49xa.c: 141: LATCbits.LATC7 = 0;
  3952  095A  0022               	movlb	2	; select bank2
  3953  095B  138E               	bcf	14,7	;volatile
  3954                           
  3955                           ;mrf49xa.c: 142: PORTBbits.RB7 = 0;
  3956  095C  0020               	movlb	0	; select bank0
  3957  095D  138D               	bcf	13,7	;volatile
  3958                           
  3959                           ;mrf49xa.c: 144: LATCbits.LATC1 = 0;
  3960  095E  0022               	movlb	2	; select bank2
  3961  095F  108E               	bcf	14,1	;volatile
  3962                           
  3963                           ;mrf49xa.c: 145: LATCbits.LATC4 = 1;
  3964  0960  160E               	bsf	14,4	;volatile
  3965                           
  3966                           ;mrf49xa.c: 147: LATAbits.LATA5 = 1;
  3967  0961  168C               	bsf	12,5	;volatile
  3968                           
  3969                           ;mrf49xa.c: 149: Sleepy(64);
  3970  0962  27CC  3188         	fcall	PL22	;call to abstracted procedure
  3971  0964  21B0  3188         	fcall	_Sleepy
  3972                           
  3973                           ;mrf49xa.c: 150: LATAbits.LATA4 = 0;
  3974  0966  0022               	movlb	2	; select bank2
  3975  0967  120C               	bcf	12,4	;volatile
  3976                           
  3977                           ;mrf49xa.c: 151: Sleepy(64);
  3978  0968  27CC  3188         	fcall	PL22	;call to abstracted procedure
  3979  096A  21B0  3188         	fcall	_Sleepy
  3980                           
  3981                           ;mrf49xa.c: 152: LATAbits.LATA4 = 1;
  3982  096C  0022               	movlb	2	; select bank2
  3983  096D  160C               	bsf	12,4	;volatile
  3984                           
  3985                           ;mrf49xa.c: 153: Sleepy(64);
  3986  096E  27CC  3188         	fcall	PL22	;call to abstracted procedure
  3987  0970  21B0               	fcall	_Sleepy
  3988                           
  3989                           ;mrf49xa.c: 155: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_IDLE;
  3990  0971  0021               	movlb	1	; select bank1
  3991  0972  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
  3992  0973  0AEB               	incf	(_mrf49xaInst^(0+128)+75),f
  3993                           
  3994                           ;mrf49xa.c: 157: for (k = 0; k < mrfRegset_InitCnt; k++) { if (mrfRegset_Init[k].reg == 
      +                          0x55) { Sleepy(5); } else { Mrf49TxCmd(mrfRegset_Init[k].reg, mrfRegset_Init[k].val); } 
      +                          };
  3995  0974  0020               	movlb	0	; select bank0
  3996  0975  302A               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  3997  0976  01A9               	clrf	Mrf49xaInit@k
  3998  0977  3182               	movlp	high __stringtab
  3999  0978  000A               	callw
  4000  0979  3188               	pagesel	$	;select current page
  4001  097A  3800               	iorlw	0
  4002  097B  1903               	btfsc	3,2
  4003  097C  299F               	goto	l3060
  4004  097D                     l3050:	
  4005  097D  3529               	lslf	Mrf49xaInit@k,w
  4006  097E  3E2E               	addlw	low (_mrfRegset_Init| (0+32768))
  4007  097F  3182               	movlp	high __stringtab
  4008  0980  000A               	callw
  4009  0981  3188               	pagesel	$	;select current page
  4010  0982  3A55               	xorlw	85
  4011  0983  1D03               	skipz
  4012  0984  298B               	goto	l3054
  4013  0985  3005               	movlw	5
  4014  0986  00A0               	movwf	Sleepy@ms
  4015  0987  01A1               	clrf	Sleepy@ms+1
  4016  0988  21B0  3188         	fcall	_Sleepy
  4017  098A  2997               	goto	l3056
  4018  098B                     l3054:	
  4019  098B  3529               	lslf	Mrf49xaInit@k,w
  4020  098C  3E2F               	addlw	low ((_mrfRegset_Init| (0+32768)+1))
  4021  098D  3182               	movlp	high __stringtab
  4022  098E  000A               	callw
  4023  098F  3188               	pagesel	$	;select current page
  4024  0990  00A1               	movwf	Mrf49TxCmd@val
  4025  0991  3529               	lslf	Mrf49xaInit@k,w
  4026  0992  3E2E               	addlw	low (_mrfRegset_Init| (0+32768))
  4027  0993  3182               	movlp	high __stringtab
  4028  0994  000A               	callw
  4029  0995  3188               	pagesel	$	;select current page
  4030  0996  252D               	fcall	_Mrf49TxCmd
  4031  0997                     l3056:	
  4032  0997  302A               	movlw	low (_mrfRegset_InitCnt| (0+32768))
  4033  0998  0AA9               	incf	Mrf49xaInit@k,f
  4034  0999  3182               	movlp	high __stringtab
  4035  099A  000A               	callw
  4036  099B  3188               	pagesel	$	;select current page
  4037  099C  0229               	subwf	Mrf49xaInit@k,w
  4038  099D  1C03               	skipc
  4039  099E  297D               	goto	l3050
  4040  099F                     l3060:	
  4041                           
  4042                           ;mrf49xa.c: 160: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  4043  099F  30A0               	movlw	_mrf49xaInst& (0+255)
  4044  09A0  2507  3188         	fcall	_Mrf49xaModeRx
  4045                           
  4046                           ;mrf49xa.c: 162: k = 0;
  4047  09A2  0020               	movlb	0	; select bank0
  4048  09A3  01A9               	clrf	Mrf49xaInit@k
  4049  09A4                     l3072:	
  4050                           ;mrf49xa.c: 163: while(PORTAbits.RA2 == 0)
  4051                           
  4052  09A4  0020               	movlb	0	; select bank0
  4053  09A5  190C               	btfsc	12,2	;volatile
  4054  09A6  0008               	return
  4055                           
  4056                           ;mrf49xa.c: 164: {
  4057                           ;mrf49xa.c: 165: k++;
  4058  09A7  0AA9               	incf	Mrf49xaInit@k,f
  4059                           
  4060                           ;mrf49xa.c: 166: if (k == 255)
  4061  09A8  0829               	movf	Mrf49xaInit@k,w
  4062  09A9  3AFF               	xorlw	255
  4063  09AA  1903               	btfsc	3,2
  4064  09AB  294D               	goto	l234
  4065                           
  4066                           ;mrf49xa.c: 171: }
  4067                           ;mrf49xa.c: 176: Mrf49xaServe(((Mrf49xaMac_t*)(&mrf49xaInst)));
  4068                           
  4069                           ;mrf49xa.c: 170: goto reset;
  4070  09AC  30A0               	movlw	_mrf49xaInst& (0+255)
  4071  09AD  240E  3188         	fcall	_Mrf49xaServe
  4072  09AF  29A4               	goto	l3072
  4073  09B0                     __end_of_Mrf49xaInit:	
  4074  09B0                     __ptext34:	
  4075 ;; *************** function _Sleepy *****************
  4076 ;; Defined at:
  4077 ;;		line 45 in file "../../../src/node/power.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  ms              2    0[BANK0 ] unsigned int 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  b               1    3[BANK0 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;		None               void
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 1F/0
  4088 ;;		On exit  : 1F/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4091 ;;      Params:         0       2       0       0
  4092 ;;      Locals:         0       1       0       0
  4093 ;;      Temps:          0       1       0       0
  4094 ;;      Totals:         0       4       0       0
  4095 ;;Total ram usage:        4 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    5
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_Mrf49xaInit
  4102 ;;		_Mrf49xaTick
  4103 ;;		_main
  4104 ;;		_PwrRfInit
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _Sleepy
  4110  09B0                     _Sleepy:	
  4111                           
  4112                           ;power.c: 47: uint8_t b = 0;
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _Sleepy: [wreg+status,2+status,0]
  4116  09B0  01A3               	clrf	Sleepy@b
  4117  09B1                     l2956:	
  4118                           ;power.c: 49: while (ms != 0)
  4119                           
  4120  09B1  0821               	movf	Sleepy@ms+1,w
  4121  09B2  0420               	iorwf	Sleepy@ms,w
  4122  09B3  1903               	btfsc	3,2
  4123  09B4  0008               	return
  4124                           
  4125                           ;power.c: 50: {
  4126                           ;power.c: 51: if ((ms & 1) != 0)
  4127  09B5  1C20               	btfss	Sleepy@ms,0
  4128  09B6  29C6               	goto	l2952
  4129                           
  4130                           ;power.c: 52: {
  4131                           ;power.c: 53: WDTCONbits.WDTPS = b;
  4132  09B7  0823               	movf	Sleepy@b,w
  4133  09B8  00A2               	movwf	??_Sleepy
  4134  09B9  0DA2               	rlf	??_Sleepy,f
  4135  09BA  0021               	movlb	1	; select bank1
  4136  09BB  0817               	movf	23,w	;volatile
  4137  09BC  0020               	movlb	0	; select bank0
  4138  09BD  0622               	xorwf	??_Sleepy,w
  4139  09BE  39C1               	andlw	-63
  4140  09BF  0622               	xorwf	??_Sleepy,w
  4141  09C0  0021               	movlb	1	; select bank1
  4142  09C1  0097               	movwf	23	;volatile
  4143                           
  4144                           ;power.c: 54: WDTCONbits.SWDTEN = 1;
  4145  09C2  1417               	bsf	23,0	;volatile
  4146  09C3  0063               	sleep	;# 
  4147                           
  4148                           ;power.c: 58: WDTCONbits.SWDTEN = 0;
  4149  09C4  0021               	movlb	1	; select bank1
  4150  09C5  1017               	bcf	23,0	;volatile
  4151  09C6                     l2952:	
  4152                           
  4153                           ;power.c: 59: }
  4154                           ;power.c: 60: ms = ms >> 1;
  4155  09C6  0020               	movlb	0	; select bank0
  4156  09C7  36A1               	lsrf	Sleepy@ms+1,f
  4157  09C8  0CA0               	rrf	Sleepy@ms,f
  4158                           
  4159                           ;power.c: 61: b++;
  4160  09C9  0AA3               	incf	Sleepy@b,f
  4161  09CA  29B1               	goto	l2956
  4162  09CB                     __end_of_Sleepy:	
  4163  09CB                     __ptext56:	
  4164 ;; *************** function _SoftI2cRepeatedStart *****************
  4165 ;; Defined at:
  4166 ;;		line 52 in file "../../../src/bsp/softI2c.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;		None               void
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4180 ;;      Params:         0       0       0       0
  4181 ;;      Locals:         0       0       0       0
  4182 ;;      Temps:          0       0       0       0
  4183 ;;      Totals:         0       0       0       0
  4184 ;;Total ram usage:        0 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    6
  4187 ;; This function calls:
  4188 ;;		_SoftI2cNop
  4189 ;; This function is called by:
  4190 ;;		_eepromRxBytes
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _SoftI2cRepeatedStart
  4196  09CB                     _SoftI2cRepeatedStart:	
  4197                           
  4198                           ;softI2c.c: 54: TRISBbits.TRISB4 = 0;
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _SoftI2cRepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  4202  09CB  0021               	movlb	1	; select bank1
  4203  09CC  120D               	bcf	13,4	;volatile
  4204                           
  4205                           ;softI2c.c: 56: LATBbits.LATB6 = 0;
  4206  09CD  0022               	movlb	2	; select bank2
  4207  09CE  130D               	bcf	13,6	;volatile
  4208                           
  4209                           ;softI2c.c: 57: SoftI2cNop();
  4210  09CF  22B5  3188         	fcall	_SoftI2cNop
  4211                           
  4212                           ;softI2c.c: 59: LATBbits.LATB4 = 1;
  4213  09D1  0022               	movlb	2	; select bank2
  4214  09D2  160D               	bsf	13,4	;volatile
  4215                           
  4216                           ;softI2c.c: 60: SoftI2cNop();
  4217  09D3  22B5  3188         	fcall	_SoftI2cNop
  4218                           
  4219                           ;softI2c.c: 62: LATBbits.LATB6 = 1;
  4220  09D5  0022               	movlb	2	; select bank2
  4221  09D6  170D               	bsf	13,6	;volatile
  4222                           
  4223                           ;softI2c.c: 63: SoftI2cNop();
  4224  09D7  22B5  3188         	fcall	_SoftI2cNop
  4225                           
  4226                           ;softI2c.c: 65: LATBbits.LATB4 = 0;
  4227  09D9  0022               	movlb	2	; select bank2
  4228  09DA  120D               	bcf	13,4	;volatile
  4229                           
  4230                           ;softI2c.c: 66: SoftI2cNop();
  4231  09DB  22B5  3188         	fcall	_SoftI2cNop
  4232                           
  4233                           ;softI2c.c: 68: LATBbits.LATB6 = 0;
  4234  09DD  0022               	movlb	2	; select bank2
  4235  09DE  130D               	bcf	13,6	;volatile
  4236                           
  4237                           ;softI2c.c: 69: SoftI2cNop();
  4238  09DF  2AB5               	ljmp	l2660
  4239  09E0                     __end_of_SoftI2cRepeatedStart:	
  4240  09E0                     __ptext62:	
  4241 ;; *************** function _Mcp9800Read *****************
  4242 ;; Defined at:
  4243 ;;		line 19 in file "../../../src/devices/mcp9800.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  tempL           1    7[BANK0 ] unsigned char 
  4248 ;;  tempH           1    6[BANK0 ] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  2    4[BANK0 ] unsigned int 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 1F/0
  4255 ;;		On exit  : 1F/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4258 ;;      Params:         0       2       0       0
  4259 ;;      Locals:         0       2       0       0
  4260 ;;      Temps:          0       0       0       0
  4261 ;;      Totals:         0       4       0       0
  4262 ;;Total ram usage:        4 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    7
  4265 ;; This function calls:
  4266 ;;		_SoftI2cRxByte
  4267 ;;		_SoftI2cStart
  4268 ;;		_SoftI2cStop
  4269 ;;		_SoftI2cTxByte
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           
  4276                           ;psect for function _Mcp9800Read
  4277  09E0                     _Mcp9800Read:	
  4278                           
  4279                           ;mcp9800.c: 21: SoftI2cStart();
  4280                           
  4281                           ;incstack = 0
  4282                           ; Regs used in _Mcp9800Read: [wreg+status,2+status,0+pclath+cstack]
  4283  09E0  22BC  3188         	fcall	_SoftI2cStart
  4284                           
  4285                           ;mcp9800.c: 22: SoftI2cTxByte(0b10010001);
  4286  09E2  3091               	movlw	145
  4287  09E3  224E  3188         	fcall	_SoftI2cTxByte
  4288                           
  4289                           ;mcp9800.c: 23: UI08_t tempH = SoftI2cRxByte(1);
  4290  09E5  3001               	movlw	1
  4291  09E6  227C  3188         	fcall	_SoftI2cRxByte
  4292  09E8  00A6               	movwf	Mcp9800Read@tempH
  4293                           
  4294                           ;mcp9800.c: 24: UI08_t tempL = SoftI2cRxByte(0);
  4295  09E9  3000               	movlw	0
  4296  09EA  227C  3188         	fcall	_SoftI2cRxByte
  4297  09EC  00A7               	movwf	Mcp9800Read@tempL
  4298                           
  4299                           ;mcp9800.c: 25: SoftI2cStop();
  4300  09ED  22C9               	fcall	_SoftI2cStop
  4301                           
  4302                           ;mcp9800.c: 27: return (tempH << 8) | tempL;
  4303  09EE  0020               	movlb	0	; select bank0
  4304  09EF  0826               	movf	Mcp9800Read@tempH,w
  4305  09F0  00A5               	movwf	?_Mcp9800Read+1
  4306  09F1  01A4               	clrf	?_Mcp9800Read
  4307  09F2  0827               	movf	Mcp9800Read@tempL,w
  4308  09F3  04A4               	iorwf	?_Mcp9800Read,f
  4309  09F4  0008               	return
  4310  09F5                     __end_of_Mcp9800Read:	
  4311  09F5                     __ptext53:	
  4312 ;; *************** function _eepromTxBytes *****************
  4313 ;; Defined at:
  4314 ;;		line 25 in file "../../../src/devices/24aa64.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  address         2    4[BANK0 ] unsigned int 
  4317 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4318 ;;		 -> cfgRam(9), eepromTxByte@byte(1), 
  4319 ;;  size            1    7[BANK0 ] unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;		None               void
  4324 ;; Registers used:
  4325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 1F/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4331 ;;      Params:         0       4       0       0
  4332 ;;      Locals:         0       0       0       0
  4333 ;;      Temps:          0       0       0       0
  4334 ;;      Totals:         0       4       0       0
  4335 ;;Total ram usage:        4 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    7
  4338 ;; This function calls:
  4339 ;;		_SoftI2cStart
  4340 ;;		_SoftI2cStop
  4341 ;;		_SoftI2cTxByte
  4342 ;; This function is called by:
  4343 ;;		_CfgSave
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function _eepromTxBytes
  4349  09F5                     _eepromTxBytes:	
  4350  09F5                     l3162:	
  4351                           ;incstack = 0
  4352                           ; Regs used in _eepromTxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4353                           
  4354                           
  4355                           ;24aa64.c: 28: SoftI2cStart();
  4356  09F5  22BC  3188         	fcall	_SoftI2cStart
  4357                           
  4358                           ;24aa64.c: 29: SoftI2cTxByte(0xA0);
  4359  09F7  30A0               	movlw	160
  4360  09F8  224E  3188         	fcall	_SoftI2cTxByte
  4361                           
  4362                           ;24aa64.c: 30: SoftI2cTxByte(address >> 8);
  4363  09FA  0020               	movlb	0	; select bank0
  4364  09FB  0825               	movf	eepromTxBytes@address+1,w
  4365  09FC  224E  3188         	fcall	_SoftI2cTxByte
  4366                           
  4367                           ;24aa64.c: 31: SoftI2cTxByte(address & 0xFF);
  4368  09FE  0020               	movlb	0	; select bank0
  4369  09FF  0824               	movf	eepromTxBytes@address,w
  4370  0A00  224E  3188         	fcall	_SoftI2cTxByte
  4371  0A02                     l3170:	
  4372                           ;24aa64.c: 33: while (size != 0)
  4373                           
  4374  0A02  0020               	movlb	0	; select bank0
  4375  0A03  08A7               	movf	eepromTxBytes@size,f
  4376  0A04  1903               	btfsc	3,2
  4377  0A05  2A10               	goto	l3172
  4378                           
  4379                           ;24aa64.c: 34: {
  4380                           ;24aa64.c: 35: SoftI2cTxByte(*data);
  4381  0A06  0826               	movf	eepromTxBytes@data,w
  4382  0A07  0086               	movwf	6
  4383  0A08  0187               	clrf	7
  4384  0A09  0801               	movf	1,w
  4385  0A0A  224E  3188         	fcall	_SoftI2cTxByte
  4386                           
  4387                           ;24aa64.c: 37: data++;
  4388  0A0C  0020               	movlb	0	; select bank0
  4389  0A0D  0AA6               	incf	eepromTxBytes@data,f
  4390                           
  4391                           ;24aa64.c: 38: size--;
  4392  0A0E  03A7               	decf	eepromTxBytes@size,f
  4393  0A0F  2A02               	goto	l3170
  4394  0A10                     l3172:	
  4395                           
  4396                           ;24aa64.c: 39: }
  4397                           ;24aa64.c: 40: SoftI2cStop();
  4398  0A10  2AC9               	ljmp	l2708
  4399  0A11                     __end_of_eepromTxBytes:	
  4400  0A11                     __ptext61:	
  4401 ;; *************** function _Mcp9800Start *****************
  4402 ;; Defined at:
  4403 ;;		line 4 in file "../../../src/devices/mcp9800.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  resolution      1    wreg     enum E4251
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  resolution      1    4[BANK0 ] enum E4251
  4408 ;; Return value:  Size  Location     Type
  4409 ;;		None               void
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0, pclath, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 1F/2
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4417 ;;      Params:         0       0       0       0
  4418 ;;      Locals:         0       1       0       0
  4419 ;;      Temps:          0       0       0       0
  4420 ;;      Totals:         0       1       0       0
  4421 ;;Total ram usage:        1 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    7
  4424 ;; This function calls:
  4425 ;;		_SoftI2cStart
  4426 ;;		_SoftI2cStop
  4427 ;;		_SoftI2cTxByte
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           
  4434                           ;psect for function _Mcp9800Start
  4435  0A11                     _Mcp9800Start:	
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _Mcp9800Start: [wreg+status,2+status,0+pclath+cstack]
  4439                           ;Mcp9800Start@resolution stored from wreg
  4440  0A11  0020               	movlb	0	; select bank0
  4441  0A12  00A4               	movwf	Mcp9800Start@resolution
  4442                           
  4443                           ;mcp9800.c: 6: SoftI2cStart();
  4444  0A13  22BC  3188         	fcall	_SoftI2cStart
  4445                           
  4446                           ;mcp9800.c: 7: SoftI2cTxByte(0b10010000);
  4447  0A15  3090               	movlw	144
  4448  0A16  224E  3188         	fcall	_SoftI2cTxByte
  4449                           
  4450                           ;mcp9800.c: 8: SoftI2cTxByte(0x01);
  4451  0A18  3001               	movlw	1
  4452  0A19  224E  3188         	fcall	_SoftI2cTxByte
  4453                           
  4454                           ;mcp9800.c: 9: SoftI2cTxByte(resolution);
  4455  0A1B  0020               	movlb	0	; select bank0
  4456  0A1C  0824               	movf	Mcp9800Start@resolution,w
  4457  0A1D  224E  3188         	fcall	_SoftI2cTxByte
  4458                           
  4459                           ;mcp9800.c: 10: SoftI2cStop();
  4460  0A1F  22C9  3188         	fcall	_SoftI2cStop
  4461                           
  4462                           ;mcp9800.c: 12: SoftI2cStart();
  4463  0A21  22BC  3188         	fcall	_SoftI2cStart
  4464                           
  4465                           ;mcp9800.c: 13: SoftI2cTxByte(0b10010000);
  4466  0A23  3090               	movlw	144
  4467  0A24  224E  3188         	fcall	_SoftI2cTxByte
  4468                           
  4469                           ;mcp9800.c: 14: SoftI2cTxByte(0x00);
  4470  0A26  3000               	movlw	0
  4471  0A27  224E  3188         	fcall	_SoftI2cTxByte
  4472                           
  4473                           ;mcp9800.c: 15: SoftI2cStop();
  4474  0A29  2AC9               	ljmp	l2708
  4475  0A2A                     __end_of_Mcp9800Start:	
  4476  0A2A                     __ptext55:	
  4477 ;; *************** function _eepromRxBytes *****************
  4478 ;; Defined at:
  4479 ;;		line 4 in file "../../../src/devices/24aa64.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  address         2    4[BANK0 ] unsigned int 
  4482 ;;  data            1    6[BANK0 ] PTR unsigned char 
  4483 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  4484 ;;		 -> handleFwCmd@packet..(21), eepromRxByte@dat(1), 
  4485 ;;  size            1    7[BANK0 ] unsigned char 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;		None               void
  4490 ;; Registers used:
  4491 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 1F/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4497 ;;      Params:         0       4       0       0
  4498 ;;      Locals:         0       0       0       0
  4499 ;;      Temps:          0       0       0       0
  4500 ;;      Totals:         0       4       0       0
  4501 ;;Total ram usage:        4 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    7
  4504 ;; This function calls:
  4505 ;;		_SoftI2cRepeatedStart
  4506 ;;		_SoftI2cRxByte
  4507 ;;		_SoftI2cStart
  4508 ;;		_SoftI2cStop
  4509 ;;		_SoftI2cTxByte
  4510 ;; This function is called by:
  4511 ;;		_handleFwCmd
  4512 ;;		_CfgLoad
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _eepromRxBytes
  4518  0A2A                     _eepromRxBytes:	
  4519  0A2A                     l3150:	
  4520                           ;incstack = 0
  4521                           ; Regs used in _eepromRxBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4522                           
  4523                           
  4524                           ;24aa64.c: 7: SoftI2cStart();
  4525  0A2A  22BC  3188         	fcall	_SoftI2cStart
  4526                           
  4527                           ;24aa64.c: 8: SoftI2cTxByte(0xA0);
  4528  0A2C  30A0               	movlw	160
  4529  0A2D  224E  3188         	fcall	_SoftI2cTxByte
  4530                           
  4531                           ;24aa64.c: 9: SoftI2cTxByte(address >> 8);
  4532  0A2F  0020               	movlb	0	; select bank0
  4533  0A30  0825               	movf	eepromRxBytes@address+1,w
  4534  0A31  224E  3188         	fcall	_SoftI2cTxByte
  4535                           
  4536                           ;24aa64.c: 10: SoftI2cTxByte(address & 0xFF);
  4537  0A33  0020               	movlb	0	; select bank0
  4538  0A34  0824               	movf	eepromRxBytes@address,w
  4539  0A35  224E  3188         	fcall	_SoftI2cTxByte
  4540                           
  4541                           ;24aa64.c: 12: SoftI2cRepeatedStart();
  4542  0A37  21CB  3188         	fcall	_SoftI2cRepeatedStart
  4543                           
  4544                           ;24aa64.c: 13: SoftI2cTxByte(0xA1);
  4545  0A39  30A1               	movlw	161
  4546  0A3A  224E  3188         	fcall	_SoftI2cTxByte
  4547  0A3C                     l3158:	
  4548                           ;24aa64.c: 15: while (size != 0)
  4549                           
  4550  0A3C  0020               	movlb	0	; select bank0
  4551  0A3D  08A7               	movf	eepromRxBytes@size,f
  4552  0A3E  1903               	btfsc	3,2
  4553  0A3F  2A4D               	goto	l3160
  4554                           
  4555                           ;24aa64.c: 16: {
  4556                           ;24aa64.c: 17: size--;
  4557  0A40  03A7               	decf	eepromRxBytes@size,f
  4558                           
  4559                           ;24aa64.c: 19: *data = SoftI2cRxByte(size != 0);
  4560  0A41  0826               	movf	eepromRxBytes@data,w
  4561  0A42  0086               	movwf	6
  4562  0A43  3000               	movlw	0
  4563  0A44  0187               	clrf	7
  4564  0A45  08A7               	movf	eepromRxBytes@size,f
  4565  0A46  1D03               	skipz
  4566  0A47  3001               	movlw	1
  4567  0A48  227C  3188         	fcall	_SoftI2cRxByte
  4568  0A4A  0081               	movwf	1
  4569                           
  4570                           ;24aa64.c: 21: data++;
  4571  0A4B  0AA6               	incf	eepromRxBytes@data,f
  4572  0A4C  2A3C               	goto	l3158
  4573  0A4D                     l3160:	
  4574                           
  4575                           ;24aa64.c: 22: }
  4576                           ;24aa64.c: 23: SoftI2cStop();
  4577  0A4D  2AC9               	ljmp	l2708
  4578  0A4E                     __end_of_eepromRxBytes:	
  4579  0A4E                     __ptext63:	
  4580 ;; *************** function _SoftI2cTxByte *****************
  4581 ;; Defined at:
  4582 ;;		line 87 in file "../../../src/bsp/softI2c.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  data            1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  data            1    2[BANK0 ] unsigned char 
  4587 ;;  i               1    3[BANK0 ] unsigned char 
  4588 ;;  ack             1    0        unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      unsigned char 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0, pclath, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/1
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4598 ;;      Params:         0       0       0       0
  4599 ;;      Locals:         0       3       0       0
  4600 ;;      Temps:          0       0       0       0
  4601 ;;      Totals:         0       3       0       0
  4602 ;;Total ram usage:        3 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    6
  4605 ;; This function calls:
  4606 ;;		_SoftI2cNop
  4607 ;; This function is called by:
  4608 ;;		_SoftI2cInit
  4609 ;;		_Mcp9800Start
  4610 ;;		_Mcp9800Read
  4611 ;;		_eepromRxBytes
  4612 ;;		_eepromTxBytes
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _SoftI2cTxByte
  4618  0A4E                     _SoftI2cTxByte:	
  4619                           
  4620                           ;incstack = 0
  4621                           ; Regs used in _SoftI2cTxByte: [wreg+status,2+status,0+pclath+cstack]
  4622                           ;SoftI2cTxByte@data stored from wreg
  4623  0A4E  0020               	movlb	0	; select bank0
  4624  0A4F  00A2               	movwf	SoftI2cTxByte@data
  4625                           
  4626                           ;softI2c.c: 89: UI08_t i;
  4627                           ;softI2c.c: 91: for(i = 0x80; i != 0; i >>= 1)
  4628  0A50  3080               	movlw	128
  4629  0A51  00A3               	movwf	SoftI2cTxByte@i
  4630  0A52                     l32:	
  4631                           
  4632                           ;softI2c.c: 92: {
  4633                           ;softI2c.c: 93: LATBbits.LATB6 = 0;
  4634  0A52  0022               	movlb	2	; select bank2
  4635  0A53  130D               	bcf	13,6	;volatile
  4636                           
  4637                           ;softI2c.c: 94: SoftI2cNop();
  4638  0A54  22B5  3188         	fcall	_SoftI2cNop
  4639                           
  4640                           ;softI2c.c: 96: if(data & i)
  4641  0A56  0020               	movlb	0	; select bank0
  4642  0A57  0822               	movf	SoftI2cTxByte@data,w
  4643  0A58  0523               	andwf	SoftI2cTxByte@i,w
  4644  0A59  1903               	btfsc	3,2
  4645  0A5A  2A5E               	goto	l34
  4646                           
  4647                           ;softI2c.c: 97: LATBbits.LATB4 = 1;
  4648  0A5B  0022               	movlb	2	; select bank2
  4649  0A5C  160D               	bsf	13,4	;volatile
  4650  0A5D  2A60               	goto	l35
  4651  0A5E                     l34:	
  4652                           
  4653                           ;softI2c.c: 98: else
  4654                           ;softI2c.c: 99: LATBbits.LATB4 = 0;
  4655  0A5E  0022               	movlb	2	; select bank2
  4656  0A5F  120D               	bcf	13,4	;volatile
  4657  0A60                     l35:	
  4658                           
  4659                           ;softI2c.c: 100: TRISBbits.TRISB4 = 0;
  4660  0A60  0021               	movlb	1	; select bank1
  4661  0A61  120D               	bcf	13,4	;volatile
  4662                           
  4663                           ;softI2c.c: 102: SoftI2cNop();
  4664  0A62  22B5  3188         	fcall	_SoftI2cNop
  4665                           
  4666                           ;softI2c.c: 104: LATBbits.LATB6 = 1;
  4667  0A64  0022               	movlb	2	; select bank2
  4668  0A65  170D               	bsf	13,6	;volatile
  4669                           
  4670                           ;softI2c.c: 105: SoftI2cNop();
  4671  0A66  22B5  3188         	fcall	_SoftI2cNop
  4672  0A68  0020               	movlb	0	; select bank0
  4673  0A69  36A3               	lsrf	SoftI2cTxByte@i,f
  4674  0A6A  08A3               	movf	SoftI2cTxByte@i,f
  4675  0A6B  1D03               	skipz
  4676  0A6C  2A52               	goto	l32
  4677                           
  4678                           ;softI2c.c: 109: }
  4679                           ;softI2c.c: 112: LATBbits.LATB6 = 0;
  4680  0A6D  0022               	movlb	2	; select bank2
  4681  0A6E  130D               	bcf	13,6	;volatile
  4682                           
  4683                           ;softI2c.c: 113: SoftI2cNop();
  4684  0A6F  22B5  3188         	fcall	_SoftI2cNop
  4685                           
  4686                           ;softI2c.c: 115: TRISBbits.TRISB4 = 1;
  4687  0A71  0021               	movlb	1	; select bank1
  4688  0A72  160D               	bsf	13,4	;volatile
  4689                           
  4690                           ;softI2c.c: 117: LATBbits.LATB6 = 1;
  4691  0A73  0022               	movlb	2	; select bank2
  4692  0A74  170D               	bsf	13,6	;volatile
  4693                           
  4694                           ;softI2c.c: 118: SoftI2cNop();
  4695  0A75  22B5  3188         	fcall	_SoftI2cNop
  4696  0A77  0020               	movlb	0	; select bank0
  4697  0A78  080D               	movf	13,w	;volatile
  4698                           
  4699                           ;softI2c.c: 122: LATBbits.LATB6 = 0;
  4700  0A79  0022               	movlb	2	; select bank2
  4701  0A7A  130D               	bcf	13,6	;volatile
  4702                           
  4703                           ;softI2c.c: 123: SoftI2cNop();
  4704  0A7B  2AB5               	ljmp	l2660
  4705  0A7C                     __end_of_SoftI2cTxByte:	
  4706  0A7C                     __ptext66:	
  4707 ;; *************** function _SoftI2cRxByte *****************
  4708 ;; Defined at:
  4709 ;;		line 129 in file "../../../src/bsp/softI2c.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  ack             1    wreg     unsigned char 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  ack             1    1[BANK0 ] unsigned char 
  4714 ;;  i               1    3[BANK0 ] unsigned char 
  4715 ;;  data            1    2[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      unsigned char 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 1F/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4725 ;;      Params:         0       0       0       0
  4726 ;;      Locals:         0       3       0       0
  4727 ;;      Temps:          0       0       0       0
  4728 ;;      Totals:         0       3       0       0
  4729 ;;Total ram usage:        3 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    6
  4732 ;; This function calls:
  4733 ;;		_SoftI2cNop
  4734 ;; This function is called by:
  4735 ;;		_Mcp9800Read
  4736 ;;		_eepromRxBytes
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           
  4741                           ;psect for function _SoftI2cRxByte
  4742  0A7C                     _SoftI2cRxByte:	
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _SoftI2cRxByte: [wreg+status,2+status,0+pclath+cstack]
  4746                           ;SoftI2cRxByte@ack stored from wreg
  4747  0A7C  0020               	movlb	0	; select bank0
  4748  0A7D  00A1               	movwf	SoftI2cRxByte@ack
  4749                           
  4750                           ;softI2c.c: 131: UI08_t data=0x00;
  4751  0A7E  01A2               	clrf	SoftI2cRxByte@data
  4752                           
  4753                           ;softI2c.c: 132: UI08_t i;
  4754                           ;softI2c.c: 134: LATBbits.LATB6 = 0;
  4755  0A7F  0022               	movlb	2	; select bank2
  4756  0A80  130D               	bcf	13,6	;volatile
  4757                           
  4758                           ;softI2c.c: 135: SoftI2cNop();
  4759  0A81  22B5  3188         	fcall	_SoftI2cNop
  4760                           
  4761                           ;softI2c.c: 136: TRISBbits.TRISB4 = 1;
  4762  0A83  0021               	movlb	1	; select bank1
  4763  0A84  160D               	bsf	13,4	;volatile
  4764                           
  4765                           ;softI2c.c: 137: LATBbits.LATB4 = 1;
  4766  0A85  0022               	movlb	2	; select bank2
  4767  0A86  160D               	bsf	13,4	;volatile
  4768                           
  4769                           ;softI2c.c: 139: for (i = 0x80; i != 0; i >>= 1)
  4770  0A87  3080               	movlw	128
  4771  0A88  0020               	movlb	0	; select bank0
  4772  0A89  00A3               	movwf	SoftI2cRxByte@i
  4773  0A8A                     l39:	
  4774                           
  4775                           ;softI2c.c: 140: {
  4776                           ;softI2c.c: 141: LATBbits.LATB6 = 0;
  4777  0A8A  0022               	movlb	2	; select bank2
  4778  0A8B  130D               	bcf	13,6	;volatile
  4779                           
  4780                           ;softI2c.c: 142: SoftI2cNop();
  4781  0A8C  22B5  3188         	fcall	_SoftI2cNop
  4782                           
  4783                           ;softI2c.c: 143: LATBbits.LATB6 = 1;
  4784  0A8E  0022               	movlb	2	; select bank2
  4785  0A8F  170D               	bsf	13,6	;volatile
  4786                           
  4787                           ;softI2c.c: 144: SoftI2cNop();
  4788  0A90  22B5  3188         	fcall	_SoftI2cNop
  4789                           
  4790                           ;softI2c.c: 149: if(PORTBbits.RB4 != 0)
  4791  0A92  0020               	movlb	0	; select bank0
  4792                           
  4793                           ;softI2c.c: 150: data |= i;
  4794  0A93  0823               	movf	SoftI2cRxByte@i,w
  4795  0A94  1A0D               	btfsc	13,4	;volatile
  4796  0A95  04A2               	iorwf	SoftI2cRxByte@data,f
  4797  0A96  36A3               	lsrf	SoftI2cRxByte@i,f
  4798  0A97  08A3               	movf	SoftI2cRxByte@i,f
  4799  0A98  1D03               	skipz
  4800  0A99  2A8A               	goto	l39
  4801                           
  4802                           ;softI2c.c: 152: }
  4803                           ;softI2c.c: 154: LATBbits.LATB6 = 0;
  4804  0A9A  0022               	movlb	2	; select bank2
  4805  0A9B  130D               	bcf	13,6	;volatile
  4806                           
  4807                           ;softI2c.c: 155: SoftI2cNop();
  4808  0A9C  22B5  3188         	fcall	_SoftI2cNop
  4809                           
  4810                           ;softI2c.c: 157: TRISBbits.TRISB4 = 0;
  4811  0A9E  0021               	movlb	1	; select bank1
  4812  0A9F  120D               	bcf	13,4	;volatile
  4813                           
  4814                           ;softI2c.c: 158: if(ack)
  4815  0AA0  0020               	movlb	0	; select bank0
  4816  0AA1  0821               	movf	SoftI2cRxByte@ack,w
  4817  0AA2  1903               	btfsc	3,2
  4818  0AA3  2AA7               	goto	l42
  4819                           
  4820                           ;softI2c.c: 159: {
  4821                           ;softI2c.c: 160: LATBbits.LATB4 = 0;
  4822  0AA4  0022               	movlb	2	; select bank2
  4823  0AA5  120D               	bcf	13,4	;volatile
  4824                           
  4825                           ;softI2c.c: 161: }
  4826  0AA6  2AA9               	goto	l2764
  4827  0AA7                     l42:	
  4828                           
  4829                           ;softI2c.c: 162: else
  4830                           ;softI2c.c: 163: {
  4831                           ;softI2c.c: 164: LATBbits.LATB4 = 1;
  4832  0AA7  0022               	movlb	2	; select bank2
  4833  0AA8  160D               	bsf	13,4	;volatile
  4834  0AA9                     l2764:	
  4835                           
  4836                           ;softI2c.c: 165: }
  4837                           ;softI2c.c: 166: SoftI2cNop();
  4838  0AA9  22B5  3188         	fcall	_SoftI2cNop
  4839                           
  4840                           ;softI2c.c: 168: LATBbits.LATB6 = 1;
  4841  0AAB  0022               	movlb	2	; select bank2
  4842  0AAC  170D               	bsf	13,6	;volatile
  4843                           
  4844                           ;softI2c.c: 169: SoftI2cNop();
  4845  0AAD  22B5  3188         	fcall	_SoftI2cNop
  4846                           
  4847                           ;softI2c.c: 171: LATBbits.LATB6 = 0;
  4848  0AAF  0022               	movlb	2	; select bank2
  4849  0AB0  130D               	bcf	13,6	;volatile
  4850                           
  4851                           ;softI2c.c: 172: SoftI2cNop();
  4852  0AB1  22B5               	fcall	_SoftI2cNop
  4853                           
  4854                           ;softI2c.c: 174: return data;
  4855  0AB2  0020               	movlb	0	; select bank0
  4856  0AB3  0822               	movf	SoftI2cRxByte@data,w
  4857  0AB4  0008               	return
  4858  0AB5                     __end_of_SoftI2cRxByte:	
  4859  0AB5                     __ptext67:	
  4860 ;; *************** function _SoftI2cNop *****************
  4861 ;; Defined at:
  4862 ;;		line 3 in file "../../../src/bsp/softI2c.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;		None               void
  4869 ;; Registers used:
  4870 ;;		wreg
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/2
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4876 ;;      Params:         0       0       0       0
  4877 ;;      Locals:         0       0       0       0
  4878 ;;      Temps:          0       1       0       0
  4879 ;;      Totals:         0       1       0       0
  4880 ;;Total ram usage:        1 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    5
  4883 ;; This function calls:
  4884 ;;		Nothing
  4885 ;; This function is called by:
  4886 ;;		_SoftI2cStart
  4887 ;;		_SoftI2cRepeatedStart
  4888 ;;		_SoftI2cStop
  4889 ;;		_SoftI2cTxByte
  4890 ;;		_SoftI2cRxByte
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _SoftI2cNop
  4896  0AB5                     _SoftI2cNop:	
  4897  0AB5                     l2660:	
  4898                           ;incstack = 0
  4899                           ; Regs used in _SoftI2cNop: [wreg]
  4900                           
  4901                           
  4902                           ;softI2c.c: 12: _delay((unsigned long)((8)*(16000000/4000000.0)));
  4903  0AB5  300A               	movlw	10
  4904  0AB6  0020               	movlb	0	; select bank0
  4905  0AB7  00A0               	movwf	??_SoftI2cNop
  4906  0AB8                     u2877:	
  4907  0AB8  0BA0               	decfsz	??_SoftI2cNop,f
  4908  0AB9  2AB8               	goto	u2877
  4909  0ABA  0000               	nop
  4910  0ABB  0008               	return
  4911  0ABC                     __end_of_SoftI2cNop:	
  4912  0ABC                     __ptext65:	
  4913 ;; *************** function _SoftI2cStart *****************
  4914 ;; Defined at:
  4915 ;;		line 38 in file "../../../src/bsp/softI2c.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/1
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4929 ;;      Params:         0       0       0       0
  4930 ;;      Locals:         0       0       0       0
  4931 ;;      Temps:          0       0       0       0
  4932 ;;      Totals:         0       0       0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    6
  4936 ;; This function calls:
  4937 ;;		_SoftI2cNop
  4938 ;; This function is called by:
  4939 ;;		_SoftI2cInit
  4940 ;;		_Mcp9800Start
  4941 ;;		_Mcp9800Read
  4942 ;;		_eepromRxBytes
  4943 ;;		_eepromTxBytes
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _SoftI2cStart
  4949  0ABC                     _SoftI2cStart:	
  4950                           
  4951                           ;softI2c.c: 40: TRISBbits.TRISB4 = 0;
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _SoftI2cStart: [wreg+status,2+status,0+pclath+cstack]
  4955  0ABC  0021               	movlb	1	; select bank1
  4956  0ABD  120D               	bcf	13,4	;volatile
  4957                           
  4958                           ;softI2c.c: 42: LATBbits.LATB6 = 1;
  4959  0ABE  0022               	movlb	2	; select bank2
  4960  0ABF  170D               	bsf	13,6	;volatile
  4961                           
  4962                           ;softI2c.c: 43: SoftI2cNop();
  4963  0AC0  22B5  3188         	fcall	_SoftI2cNop
  4964                           
  4965                           ;softI2c.c: 45: LATBbits.LATB4 = 0;
  4966  0AC2  0022               	movlb	2	; select bank2
  4967  0AC3  120D               	bcf	13,4	;volatile
  4968                           
  4969                           ;softI2c.c: 46: SoftI2cNop();
  4970  0AC4  22B5  3188         	fcall	_SoftI2cNop
  4971                           
  4972                           ;softI2c.c: 47: LATBbits.LATB6 = 0;
  4973  0AC6  0022               	movlb	2	; select bank2
  4974  0AC7  130D               	bcf	13,6	;volatile
  4975                           
  4976                           ;softI2c.c: 48: SoftI2cNop();
  4977  0AC8  2AB5               	ljmp	l2660
  4978  0AC9                     __end_of_SoftI2cStart:	
  4979  0AC9                     __ptext64:	
  4980 ;; *************** function _SoftI2cStop *****************
  4981 ;; Defined at:
  4982 ;;		line 73 in file "../../../src/bsp/softI2c.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;		None
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;		None               void
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0, pclath, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/1
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4996 ;;      Params:         0       0       0       0
  4997 ;;      Locals:         0       0       0       0
  4998 ;;      Temps:          0       0       0       0
  4999 ;;      Totals:         0       0       0       0
  5000 ;;Total ram usage:        0 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    6
  5003 ;; This function calls:
  5004 ;;		_SoftI2cNop
  5005 ;; This function is called by:
  5006 ;;		_SoftI2cInit
  5007 ;;		_Mcp9800Start
  5008 ;;		_Mcp9800Read
  5009 ;;		_eepromRxBytes
  5010 ;;		_eepromTxBytes
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           
  5015                           ;psect for function _SoftI2cStop
  5016  0AC9                     _SoftI2cStop:	
  5017  0AC9                     l2708:	
  5018                           ;incstack = 0
  5019                           ; Regs used in _SoftI2cStop: [wreg+status,2+status,0+pclath+cstack]
  5020                           
  5021                           
  5022                           ;softI2c.c: 75: TRISBbits.TRISB4 = 0;
  5023  0AC9  0021               	movlb	1	; select bank1
  5024  0ACA  120D               	bcf	13,4	;volatile
  5025                           
  5026                           ;softI2c.c: 77: LATBbits.LATB4 = 0;
  5027  0ACB  0022               	movlb	2	; select bank2
  5028  0ACC  120D               	bcf	13,4	;volatile
  5029                           
  5030                           ;softI2c.c: 78: SoftI2cNop();
  5031  0ACD  22B5  3188         	fcall	_SoftI2cNop
  5032                           
  5033                           ;softI2c.c: 80: LATBbits.LATB6 = 1;
  5034  0ACF  0022               	movlb	2	; select bank2
  5035  0AD0  170D               	bsf	13,6	;volatile
  5036                           
  5037                           ;softI2c.c: 81: SoftI2cNop();
  5038  0AD1  22B5  3188         	fcall	_SoftI2cNop
  5039                           
  5040                           ;softI2c.c: 82: LATBbits.LATB4 = 1;
  5041  0AD3  0022               	movlb	2	; select bank2
  5042  0AD4  160D               	bsf	13,4	;volatile
  5043                           
  5044                           ;softI2c.c: 83: SoftI2cNop();
  5045  0AD5  22B5  3188         	fcall	_SoftI2cNop
  5046                           
  5047                           ;softI2c.c: 84: SoftI2cNop();
  5048  0AD7  2AB5               	ljmp	l2660
  5049  0AD8                     __end_of_SoftI2cStop:	
  5050  0AD8                     __ptext36:	
  5051 ;; *************** function _Mrf49xaNeedsReset *****************
  5052 ;; Defined at:
  5053 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5056 ;;		 -> mrf49xaInst(78), 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  5059 ;;		 -> mrf49xaInst(78), 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg
  5064 ;; Tracked objects:
  5065 ;;		On entry : 1E/1
  5066 ;;		On exit  : 1F/1
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5069 ;;      Params:         0       0       0       0
  5070 ;;      Locals:         0       1       0       0
  5071 ;;      Temps:          0       0       0       0
  5072 ;;      Totals:         0       1       0       0
  5073 ;;Total ram usage:        1 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    5
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_Mrf49xaTick
  5080 ;;		_Mrf49xaServe
  5081 ;;		_main
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _Mrf49xaNeedsReset
  5087  0AD8                     _Mrf49xaNeedsReset:	
  5088                           
  5089                           ;mrf49xa.c: 123: ((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset = 1;
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _Mrf49xaNeedsReset: [wreg]
  5093  0AD8  0021               	movlb	1	; select bank1
  5094  0AD9  17ED               	bsf	(_mrf49xaInst^(0+128)+77),7
  5095  0ADA  0008               	return
  5096  0ADB                     __end_of_Mrf49xaNeedsReset:	
  5097  0ADB                     __ptext25:	
  5098 ;; *************** function _PwrI2cSleep *****************
  5099 ;; Defined at:
  5100 ;;		line 76 in file "../../../src/node/power.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;		None
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;		None
  5105 ;; Return value:  Size  Location     Type
  5106 ;;		None               void
  5107 ;; Registers used:
  5108 ;;		None
  5109 ;; Tracked objects:
  5110 ;;		On entry : 1F/2
  5111 ;;		On exit  : 1F/1
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5114 ;;      Params:         0       0       0       0
  5115 ;;      Locals:         0       0       0       0
  5116 ;;      Temps:          0       0       0       0
  5117 ;;      Totals:         0       0       0       0
  5118 ;;Total ram usage:        0 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    5
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_main
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function _PwrI2cSleep
  5130  0ADB                     _PwrI2cSleep:	
  5131                           
  5132                           ;power.c: 78: LATBbits.LATB6 = 1;
  5133                           
  5134                           ;incstack = 0
  5135                           ; Regs used in _PwrI2cSleep: []
  5136                           
  5137                           ;power.c: 79: LATBbits.LATB4 = 1;
  5138                           
  5139                           ;power.c: 81: TRISBbits.TRISB6 = 0;
  5140                           
  5141                           ;power.c: 82: TRISBbits.TRISB4 = 0;
  5142  0ADB  27C6               	fcall	PL20	;call to abstracted procedure
  5143  0ADC  0008               	return
  5144  0ADD                     __end_of_PwrI2cSleep:	
  5145  0ADD                     __ptext16:	
  5146 ;; *************** function _PwrSensorSleep *****************
  5147 ;; Defined at:
  5148 ;;		line 160 in file "../../../src/node/power.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		None
  5157 ;; Tracked objects:
  5158 ;;		On entry : 1E/1
  5159 ;;		On exit  : 1F/2
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5162 ;;      Params:         0       0       0       0
  5163 ;;      Locals:         0       0       0       0
  5164 ;;      Temps:          0       0       0       0
  5165 ;;      Totals:         0       0       0       0
  5166 ;;Total ram usage:        0 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    5
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_main
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           
  5177                           ;psect for function _PwrSensorSleep
  5178  0ADD                     _PwrSensorSleep:	
  5179                           
  5180                           ;power.c: 162: LATCbits.LATC2 = 0;
  5181                           
  5182                           ;incstack = 0
  5183                           ; Regs used in _PwrSensorSleep: []
  5184  0ADD  0022               	movlb	2	; select bank2
  5185  0ADE  110E               	bcf	14,2	;volatile
  5186  0ADF  0008               	return
  5187  0AE0                     __end_of_PwrSensorSleep:	
  5188  0AE0                     __ptext59:	
  5189 ;; *************** function _Mrf49xaFreePacket *****************
  5190 ;; Defined at:
  5191 ;;		line 87 in file "../../../src/devices/mrf49xa_mac.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5194 ;;		 -> mrf49xaInst(78), 
  5195 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5196 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  inst            1    1[BANK0 ] PTR struct Mrf49xaMac_s
  5199 ;;		 -> mrf49xaInst(78), 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;		None               void
  5202 ;; Registers used:
  5203 ;;		wreg, fsr1l, fsr1h, status,2
  5204 ;; Tracked objects:
  5205 ;;		On entry : 1F/0
  5206 ;;		On exit  : 1F/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5209 ;;      Params:         0       1       0       0
  5210 ;;      Locals:         0       1       0       0
  5211 ;;      Temps:          0       0       0       0
  5212 ;;      Totals:         0       2       0       0
  5213 ;;Total ram usage:        2 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    5
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_Mrf49xaTick
  5220 ;;		_HandlePacket
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           
  5225                           ;psect for function _Mrf49xaFreePacket
  5226  0AE0                     _Mrf49xaFreePacket:	
  5227  0AE0                     l3266:	
  5228                           ;incstack = 0
  5229                           ; Regs used in _Mrf49xaFreePacket: [wreg+fsr1l+fsr1h+status,2]
  5230                           
  5231                           
  5232                           ;mrf49xa_mac.c: 89: packet->state = PKT_FREE;
  5233  0AE0  0820               	movf	Mrf49xaFreePacket@packet,w
  5234  0AE1  0086               	movwf	6
  5235  0AE2  0187               	clrf	7
  5236  0AE3  0181               	clrf	1
  5237  0AE4  0008               	return
  5238  0AE5                     __end_of_Mrf49xaFreePacket:	
  5239  0AE5                     __ptext54:	
  5240 ;; *************** function _CfgLoad *****************
  5241 ;; Defined at:
  5242 ;;		line 19 in file "../../../src/node/config.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;		None
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 1E/1
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5256 ;;      Params:         0       0       0       0
  5257 ;;      Locals:         0       0       0       0
  5258 ;;      Temps:          0       0       0       0
  5259 ;;      Totals:         0       0       0       0
  5260 ;;Total ram usage:        0 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    8
  5263 ;; This function calls:
  5264 ;;		_eepromRxBytes
  5265 ;; This function is called by:
  5266 ;;		_handleCfgCmd
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _CfgLoad
  5273  0AE5                     _CfgLoad:	
  5274  0AE5                     l3502:	
  5275                           ;incstack = 0
  5276                           ; Regs used in _CfgLoad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5277                           
  5278                           
  5279                           ;config.c: 21: eepromRxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  5280  0AE5  0020               	movlb	0	; select bank0
  5281  0AE6  3036               	movlw	_cfgRam& (0+255)
  5282  0AE7  01A4               	clrf	eepromRxBytes@address
  5283  0AE8  01A5               	clrf	eepromRxBytes@address+1
  5284  0AE9  00A6               	movwf	eepromRxBytes@data
  5285  0AEA  3009               	movlw	9
  5286  0AEB  00A7               	movwf	eepromRxBytes@size
  5287  0AEC  2A2A               	ljmp	l3150
  5288  0AED                     __end_of_CfgLoad:	
  5289  0AED                     __ptext45:	
  5290 ;; *************** function _HandlePacket *****************
  5291 ;; Defined at:
  5292 ;;		line 150 in file "../../../src/rfstack/client.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5295 ;;		 -> mrf49xaInst(78), 
  5296 ;;  packet          1    9[BANK0 ] PTR struct rfTrcvPacket_
  5297 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  inst            1   11[BANK0 ] PTR struct Mrf49xaMac_s
  5300 ;;		 -> mrf49xaInst(78), 
  5301 ;;  response        1   12[BANK0 ] struct .
  5302 ;; Return value:  Size  Location     Type
  5303 ;;		None               void
  5304 ;; Registers used:
  5305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 1F/0
  5308 ;;		On exit  : 1F/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5311 ;;      Params:         0       1       0       0
  5312 ;;      Locals:         0       2       0       0
  5313 ;;      Temps:          0       1       0       0
  5314 ;;      Totals:         0       4       0       0
  5315 ;;Total ram usage:        4 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:   10
  5318 ;; This function calls:
  5319 ;;		_Mrf49xaFreePacket
  5320 ;;		_Mrf49xaTxAck
  5321 ;;		_Mrf49xaTxPacket
  5322 ;;		_handleCfgCmd
  5323 ;;		_handleCfgRead
  5324 ;;		_handleCfgWrite
  5325 ;;		_handleFwCmd
  5326 ;; This function is called by:
  5327 ;;		_Mrf49xaTick
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function _HandlePacket
  5333  0AED                     _HandlePacket:	
  5334                           
  5335                           ;client.c: 153: struct
  5336                           ;client.c: 154: {
  5337                           ;client.c: 155: uint8_t reset:1;
  5338                           ;client.c: 156: uint8_t needAck:1;
  5339                           ;client.c: 157: uint8_t sendAck:1;
  5340                           ;client.c: 158: uint8_t sendMsg:1;
  5341                           ;client.c: 159: } response;
  5342                           ;client.c: 162: switch (packet->packet.id)
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _HandlePacket: [allreg]
  5346  0AED  2B1F               	goto	l3414
  5347  0AEE                     l3388:	
  5348                           
  5349                           ;client.c: 165: packet->packet.data[0] = 2;
  5350  0AEE  0829               	movf	HandlePacket@packet,w
  5351  0AEF  3E06               	addlw	6
  5352  0AF0  0086               	movwf	6
  5353  0AF1  3002               	movlw	2
  5354  0AF2  0187               	clrf	7
  5355  0AF3  0081               	movwf	1
  5356  0AF4                     l3390:	
  5357                           
  5358                           ;client.c: 166: response.sendMsg = ((uint8_t)1);
  5359  0AF4  0020               	movlb	0	; select bank0
  5360  0AF5  15AC               	bsf	HandlePacket@response,3
  5361                           
  5362                           ;client.c: 167: break;
  5363  0AF6  2B3D               	goto	l550
  5364  0AF7                     l3392:	
  5365                           
  5366                           ;client.c: 170: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc == packet->packet.data
      +                          [1] &&
  5367                           ;client.c: 171: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.id == packet->packet.da
      +                          ta[0])
  5368  0AF7  0829               	movf	HandlePacket@packet,w
  5369  0AF8  3E07               	addlw	7
  5370  0AF9  0086               	movwf	6
  5371  0AFA  0187               	clrf	7
  5372  0AFB  0021               	movlb	1	; select bank1
  5373  0AFC  0869               	movf	(_mrf49xaInst^(0+128)+73),w
  5374  0AFD  0601               	xorwf	1,w
  5375  0AFE  1D03               	skipz
  5376  0AFF  2B3D               	goto	l550
  5377  0B00  0020               	movlb	0	; select bank0
  5378  0B01  0829               	movf	HandlePacket@packet,w
  5379  0B02  3E06               	addlw	6
  5380  0B03  0086               	movwf	6
  5381  0B04  0021               	movlb	1	; select bank1
  5382  0B05  0857               	movf	(_mrf49xaInst^(0+128)+55),w
  5383  0B06  0601               	xorwf	1,w
  5384  0B07  1D03               	skipz
  5385  0B08  2B3D               	goto	l550
  5386                           
  5387                           ;client.c: 172: {
  5388                           ;client.c: 173: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck = ACK_RECEIVED;
  5389  0B09  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  5390  0B0A  393F               	andlw	-193
  5391  0B0B  3880               	iorlw	128
  5392  0B0C  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  5393  0B0D  2B3D               	goto	l550
  5394  0B0E                     l553:	
  5395                           ;client.c: 178: syncedTime = *((uint32_t*) packet->packet.data);
  5396                           
  5397                           
  5398                           ;client.c: 179: response.sendAck = ((uint8_t)0);
  5399  0B0E  112C               	bcf	HandlePacket@response,2
  5400                           
  5401                           ;client.c: 180: break;
  5402  0B0F  2B3D               	goto	l550
  5403  0B10                     l3398:	
  5404                           
  5405                           ;client.c: 190: handleCfgCmd(packet);
  5406  0B10  0829               	movf	HandlePacket@packet,w
  5407  0B11  26DF  3188         	fcall	_handleCfgCmd
  5408  0B13  2AF4               	goto	l3390
  5409  0B14                     l3402:	
  5410                           
  5411                           ;client.c: 196: handleCfgWrite(packet);
  5412  0B14  0829               	movf	HandlePacket@packet,w
  5413  0B15  274C  3188         	fcall	_handleCfgWrite
  5414  0B17                     l3404:	
  5415                           
  5416                           ;client.c: 198: handleCfgRead(packet);
  5417  0B17  0829               	movf	HandlePacket@packet,w
  5418  0B18  2709  3188         	fcall	_handleCfgRead
  5419  0B1A  2AF4               	goto	l3390
  5420  0B1B                     l3408:	
  5421                           
  5422                           ;client.c: 205: handleFwCmd(packet);
  5423  0B1B  0829               	movf	HandlePacket@packet,w
  5424  0B1C  27D6  3188         	fcall	_handleFwCmd
  5425  0B1E  2AF4               	goto	l3390
  5426  0B1F                     l3414:	
  5427  0B1F  0829               	movf	HandlePacket@packet,w
  5428  0B20  3E04               	addlw	4
  5429  0B21  0086               	movwf	6
  5430  0B22  0187               	clrf	7
  5431  0B23  0801               	movf	1,w
  5432                           
  5433                           ; Switch size 1, requested type "space"
  5434                           ; Number of cases is 8, Range of values is 160 to 192
  5435                           ; switch strategies available:
  5436                           ; Name         Instructions Cycles
  5437                           ; simple_byte           25    13 (average)
  5438                           ; direct_byte           75     9 (fixed)
  5439                           ; jumptable            263     9 (fixed)
  5440                           ;	Chosen strategy is simple_byte
  5441  0B24  3AA0               	xorlw	160	; case 160
  5442  0B25  1903               	skipnz
  5443  0B26  2AEE               	goto	l3388
  5444  0B27  3A01               	xorlw	1	; case 161
  5445  0B28  1903               	skipnz
  5446  0B29  2AF7               	goto	l3392
  5447  0B2A  3A03               	xorlw	3	; case 162
  5448  0B2B  1903               	skipnz
  5449  0B2C  2B0E               	goto	l553
  5450  0B2D  3A01               	xorlw	1	; case 163
  5451  0B2E  1903               	skipnz
  5452  0B2F  2B3D               	goto	l550
  5453  0B30  3A13               	xorlw	19	; case 176
  5454  0B31  1903               	skipnz
  5455  0B32  2B10               	goto	l3398
  5456  0B33  3A01               	xorlw	1	; case 177
  5457  0B34  1903               	skipnz
  5458  0B35  2B14               	goto	l3402
  5459  0B36  3A03               	xorlw	3	; case 178
  5460  0B37  1903               	skipnz
  5461  0B38  2B17               	goto	l3404
  5462  0B39  3A72               	xorlw	114	; case 192
  5463  0B3A  1903               	skipnz
  5464  0B3B  2B1B               	goto	l3408
  5465  0B3C  2B3D               	goto	l550
  5466  0B3D                     l550:	
  5467                           
  5468                           ;client.c: 228: response.reset = ((uint8_t)1);
  5469  0B3D  0020               	movlb	0	; select bank0
  5470  0B3E  142C               	bsf	HandlePacket@response,0
  5471                           
  5472                           ;client.c: 231: if (response.sendMsg)
  5473  0B3F  1DAC               	btfss	HandlePacket@response,3
  5474  0B40  2B4D               	goto	l559
  5475                           
  5476                           ;client.c: 232: response.reset = Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet
      +                          , ((uint8_t)1), response.needAck);
  5477  0B41  0829               	movf	HandlePacket@packet,w
  5478  0B42  00A0               	movwf	Mrf49xaTxPacket@packet
  5479  0B43  3000               	movlw	0
  5480  0B44  01A1               	clrf	Mrf49xaTxPacket@response
  5481  0B45  0AA1               	incf	Mrf49xaTxPacket@response,f
  5482  0B46  18AC               	btfsc	HandlePacket@response,1
  5483  0B47  3001               	movlw	1
  5484  0B48  00A2               	movwf	Mrf49xaTxPacket@needAck
  5485  0B49  30A0               	movlw	_mrf49xaInst& (0+255)
  5486  0B4A  2361  3188         	fcall	_Mrf49xaTxPacket
  5487  0B4C  2B54               	goto	L3
  5488  0B4D                     l559:	
  5489                           
  5490                           ;client.c: 233: else if (response.sendAck)
  5491  0B4D  1D2C               	btfss	HandlePacket@response,2
  5492  0B4E  2B5B               	goto	l561
  5493                           
  5494                           ;client.c: 234: response.reset = Mrf49xaTxAck(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  5495  0B4F  0829               	movf	HandlePacket@packet,w
  5496  0B50  00A7               	movwf	Mrf49xaTxAck@packet
  5497  0B51  30A0               	movlw	_mrf49xaInst& (0+255)
  5498  0B52  23BE  3188         	fcall	_Mrf49xaTxAck
  5499  0B54                     L3:	
  5500  0B54  0020               	movlb	0	; select bank0
  5501  0B55  00AA               	movwf	??_HandlePacket
  5502  0B56  062C               	xorwf	HandlePacket@response,w
  5503  0B57  39FE               	andlw	-2
  5504  0B58  062A               	xorwf	??_HandlePacket,w
  5505  0B59  00AC               	movwf	HandlePacket@response
  5506  0B5A  2B5C               	goto	l560
  5507  0B5B                     l561:	
  5508                           
  5509                           ;client.c: 235: else
  5510                           ;client.c: 236: response.reset = ((uint8_t)0);
  5511  0B5B  102C               	bcf	HandlePacket@response,0
  5512  0B5C                     l560:	
  5513                           
  5514                           ;client.c: 238: if (!response.reset)
  5515  0B5C  182C               	btfsc	HandlePacket@response,0
  5516  0B5D  0008               	return
  5517                           
  5518                           ;client.c: 239: Mrf49xaFreePacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet);
  5519  0B5E  0829               	movf	HandlePacket@packet,w
  5520  0B5F  00A0               	movwf	Mrf49xaFreePacket@packet
  5521  0B60  2AE0               	ljmp	l3266
  5522  0B61                     __end_of_HandlePacket:	
  5523  0B61                     __ptext58:	
  5524 ;; *************** function _Mrf49xaTxPacket *****************
  5525 ;; Defined at:
  5526 ;;		line 17 in file "../../../src/devices/mrf49xa_mac.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5529 ;;		 -> mrf49xaInst(78), 
  5530 ;;  packet          1    0[BANK0 ] PTR struct rfTrcvPacket_
  5531 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5532 ;;  response        1    1[BANK0 ] unsigned char 
  5533 ;;  needAck         1    2[BANK0 ] unsigned char 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  inst            1    5[BANK0 ] PTR struct Mrf49xaMac_s
  5536 ;;		 -> mrf49xaInst(78), 
  5537 ;;  i               1    6[BANK0 ] unsigned char 
  5538 ;;  crc             1    4[BANK0 ] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      unsigned char 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5543 ;; Tracked objects:
  5544 ;;		On entry : 1F/0
  5545 ;;		On exit  : 1F/1
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5548 ;;      Params:         0       3       0       0
  5549 ;;      Locals:         0       3       0       0
  5550 ;;      Temps:          0       1       0       0
  5551 ;;      Totals:         0       7       0       0
  5552 ;;Total ram usage:        7 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    5
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_Mrf49xaTxAck
  5559 ;;		_HandlePacket
  5560 ;;		_RfSendPowerState
  5561 ;;		_RfSendSampleWeatherNode
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _Mrf49xaTxPacket
  5567  0B61                     _Mrf49xaTxPacket:	
  5568  0B61                     l3188:	
  5569                           ;incstack = 0
  5570                           ; Regs used in _Mrf49xaTxPacket: [wreg-fsr1h+status,2+status,0]
  5571                           
  5572  0B61  3033               	movlw	51
  5573                           
  5574                           ;mrf49xa_mac.c: 19: uint8_t i, crc = 0;
  5575  0B62  01A4               	clrf	Mrf49xaTxPacket@crc
  5576                           
  5577                           ;mrf49xa_mac.c: 21: if (&(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket) == packet)
  5578  0B63  3EA0               	addlw	_mrf49xaInst& (0+255)
  5579  0B64  0620               	xorwf	Mrf49xaTxPacket@packet,w
  5580  0B65  1D03               	skipz
  5581  0B66  2B75               	goto	l3212
  5582                           
  5583                           ;mrf49xa_mac.c: 22: {
  5584                           ;mrf49xa_mac.c: 23: if (response)
  5585  0B67  0821               	movf	Mrf49xaTxPacket@response,w
  5586  0B68  1903               	btfsc	3,2
  5587  0B69  2B6D               	goto	l395
  5588                           
  5589                           ;mrf49xa_mac.c: 24: {
  5590                           ;mrf49xa_mac.c: 25: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.dst = ((Mrf49xaMac_
      +                          t*)(&mrf49xaInst))->txPacket.packet.src;
  5591  0B6A  0021               	movlb	1	; select bank1
  5592  0B6B  0855               	movf	(_mrf49xaInst^(0+128)+53),w
  5593  0B6C  00D6               	movwf	(_mrf49xaInst^(0+128)+54)
  5594  0B6D                     l395:	
  5595                           
  5596                           ;mrf49xa_mac.c: 26: }
  5597                           ;mrf49xa_mac.c: 27: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.src = ((Mrf49xaMac_
      +                          t*)(&mrf49xaInst))->nodeId;
  5598  0B6D  0021               	movlb	1	; select bank1
  5599  0B6E  086C               	movf	(_mrf49xaInst^(0+128)+76),w
  5600  0B6F  00D5               	movwf	(_mrf49xaInst^(0+128)+53)
  5601                           
  5602                           ;mrf49xa_mac.c: 28: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.packet.size += 5;
  5603  0B70  3005               	movlw	5
  5604  0B71  07D4               	addwf	(_mrf49xaInst^(0+128)+52),f
  5605                           
  5606                           ;mrf49xa_mac.c: 30: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_READY_FOR_TX;
  5607                           
  5608                           ;mrf49xa_mac.c: 31: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  5609                           
  5610                           ;mrf49xa_mac.c: 32: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit = 0;
  5611                           
  5612                           ;mrf49xa_mac.c: 33: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck = (needAck == ((ui
      +                          nt8_t)1)) ? NEED_ACK : NO_ACK;
  5613  0B72  2787               	fcall	PL8	;call to abstracted procedure
  5614                           
  5615                           ;mrf49xa_mac.c: 34: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc = 0;
  5616  0B73  01E9               	clrf	(_mrf49xaInst^(0+128)+73)
  5617                           
  5618                           ;mrf49xa_mac.c: 35: return ((uint8_t)1);
  5619  0B74  3401               	retlw	1
  5620  0B75                     l3212:	
  5621                           
  5622                           ;mrf49xa_mac.c: 36: }
  5623                           ;mrf49xa_mac.c: 39: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state != PKT_FREE)
  5624  0B75  0021               	movlb	1	; select bank1
  5625  0B76  0853               	movf	(_mrf49xaInst^(0+128)+51),w
  5626  0B77  1D03               	skipz
  5627                           
  5628                           ;mrf49xa_mac.c: 40: {
  5629                           ;mrf49xa_mac.c: 42: return ((uint8_t)0);
  5630  0B78  3400               	retlw	0
  5631                           
  5632                           ;mrf49xa_mac.c: 44: else
  5633                           ;mrf49xa_mac.c: 45: {
  5634                           ;mrf49xa_mac.c: 46: if (response)
  5635  0B79  0020               	movlb	0	; select bank0
  5636  0B7A  0821               	movf	Mrf49xaTxPacket@response,w
  5637  0B7B  1903               	btfsc	3,2
  5638  0B7C  2B87               	goto	l3224
  5639                           
  5640                           ;mrf49xa_mac.c: 47: {
  5641                           ;mrf49xa_mac.c: 48: packet->packet.dst = packet->packet.src;
  5642  0B7D  0820               	movf	Mrf49xaTxPacket@packet,w
  5643  0B7E  3E03               	addlw	3
  5644  0B7F  0086               	movwf	6
  5645  0B80  0187               	clrf	7
  5646  0B81  0820               	movf	Mrf49xaTxPacket@packet,w
  5647  0B82  3E02               	addlw	2
  5648  0B83  0084               	movwf	4
  5649  0B84  0185               	clrf	5
  5650  0B85  0800               	movf	0,w
  5651  0B86  0081               	movwf	1
  5652  0B87                     l3224:	
  5653                           
  5654                           ;mrf49xa_mac.c: 49: }
  5655                           ;mrf49xa_mac.c: 50: packet->packet.src = ((Mrf49xaMac_t*)(&mrf49xaInst))->nodeId;
  5656  0B87  0820               	movf	Mrf49xaTxPacket@packet,w
  5657  0B88  3E02               	addlw	2
  5658  0B89  0086               	movwf	6
  5659  0B8A  0187               	clrf	7
  5660  0B8B  0021               	movlb	1	; select bank1
  5661  0B8C  086C               	movf	(_mrf49xaInst^(0+128)+76),w
  5662  0B8D  0081               	movwf	1
  5663                           
  5664                           ;mrf49xa_mac.c: 51: packet->packet.size += 5;
  5665  0B8E  0020               	movlb	0	; select bank0
  5666  0B8F  0A20               	incf	Mrf49xaTxPacket@packet,w
  5667  0B90  0086               	movwf	6
  5668  0B91  3005               	movlw	5
  5669  0B92  0781               	addwf	1,f
  5670                           
  5671                           ;mrf49xa_mac.c: 53: packet->state = PKT_FREE;
  5672  0B93  0820               	movf	Mrf49xaTxPacket@packet,w
  5673  0B94  0086               	movwf	6
  5674  0B95  0181               	clrf	1
  5675                           
  5676                           ;mrf49xa_mac.c: 56: for (i = 0; i < (16 + 5); i++)
  5677  0B96  01A6               	clrf	Mrf49xaTxPacket@i
  5678  0B97                     l3236:	
  5679                           
  5680                           ;mrf49xa_mac.c: 57: {
  5681                           ;mrf49xa_mac.c: 58: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[i] = packet->raw[i];
  5682  0B97  0826               	movf	Mrf49xaTxPacket@i,w
  5683  0B98  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
  5684  0B99  0086               	movwf	6
  5685  0B9A  0187               	clrf	7
  5686  0B9B  0826               	movf	Mrf49xaTxPacket@i,w
  5687  0B9C  0720               	addwf	Mrf49xaTxPacket@packet,w
  5688  0B9D  00A3               	movwf	??_Mrf49xaTxPacket
  5689  0B9E  0A23               	incf	??_Mrf49xaTxPacket,w
  5690  0B9F  0084               	movwf	4
  5691  0BA0  0185               	clrf	5
  5692  0BA1  0800               	movf	0,w
  5693  0BA2  0081               	movwf	1
  5694  0BA3  3015               	movlw	21
  5695  0BA4  0AA6               	incf	Mrf49xaTxPacket@i,f
  5696  0BA5  0226               	subwf	Mrf49xaTxPacket@i,w
  5697  0BA6  1C03               	skipc
  5698  0BA7  2B97               	goto	l3236
  5699                           
  5700                           ;mrf49xa_mac.c: 59: }
  5701                           ;mrf49xa_mac.c: 60: for (i = 0; i < packet->packet.size; i++)
  5702  0BA8  01A6               	clrf	Mrf49xaTxPacket@i
  5703  0BA9                     l402:	
  5704  0BA9  0A20               	incf	Mrf49xaTxPacket@packet,w
  5705  0BAA  0086               	movwf	6
  5706  0BAB  0187               	clrf	7
  5707  0BAC  0801               	movf	1,w
  5708  0BAD  0226               	subwf	Mrf49xaTxPacket@i,w
  5709  0BAE  1803               	btfsc	3,0
  5710  0BAF  2BB7               	goto	l404
  5711                           
  5712                           ;mrf49xa_mac.c: 61: {
  5713                           ;mrf49xa_mac.c: 62: crc = crc ^ ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[i];
  5714  0BB0  0826               	movf	Mrf49xaTxPacket@i,w
  5715  0BB1  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
  5716  0BB2  0086               	movwf	6
  5717  0BB3  0801               	movf	1,w
  5718  0BB4  06A4               	xorwf	Mrf49xaTxPacket@crc,f
  5719  0BB5  0AA6               	incf	Mrf49xaTxPacket@i,f
  5720  0BB6  2BA9               	goto	l402
  5721  0BB7                     l404:	
  5722                           
  5723                           ;mrf49xa_mac.c: 63: }
  5724                           ;mrf49xa_mac.c: 65: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_READY_FOR_TX;
  5725  0BB7  0021               	movlb	1	; select bank1
  5726                           
  5727                           ;mrf49xa_mac.c: 66: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  5728                           
  5729                           ;mrf49xa_mac.c: 67: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retransmit = 0;
  5730                           
  5731                           ;mrf49xa_mac.c: 68: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck = (needAck == ((ui
      +                          nt8_t)1)) ? NEED_ACK : NO_ACK;
  5732  0BB8  2787               	fcall	PL8	;call to abstracted procedure
  5733                           
  5734                           ;mrf49xa_mac.c: 70: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc = crc;
  5735  0BB9  0020               	movlb	0	; select bank0
  5736  0BBA  0824               	movf	Mrf49xaTxPacket@crc,w
  5737  0BBB  0021               	movlb	1	; select bank1
  5738  0BBC  00E9               	movwf	(_mrf49xaInst^(0+128)+73)
  5739  0BBD  3401               	retlw	1
  5740  0BBE                     __end_of_Mrf49xaTxPacket:	
  5741  0BBE                     __ptext57:	
  5742 ;; *************** function _Mrf49xaTxAck *****************
  5743 ;; Defined at:
  5744 ;;		line 75 in file "../../../src/devices/mrf49xa_mac.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5747 ;;		 -> mrf49xaInst(78), 
  5748 ;;  packet          1    7[BANK0 ] PTR struct rfTrcvPacket_
  5749 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;  inst            1    8[BANK0 ] PTR struct Mrf49xaMac_s
  5752 ;;		 -> mrf49xaInst(78), 
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      unsigned char 
  5755 ;; Registers used:
  5756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 1F/0
  5759 ;;		On exit  : 1F/1
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5762 ;;      Params:         0       1       0       0
  5763 ;;      Locals:         0       1       0       0
  5764 ;;      Temps:          0       0       0       0
  5765 ;;      Totals:         0       2       0       0
  5766 ;;Total ram usage:        2 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:    6
  5769 ;; This function calls:
  5770 ;;		_Mrf49xaTxPacket
  5771 ;; This function is called by:
  5772 ;;		_HandlePacket
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function _Mrf49xaTxAck
  5778  0BBE                     _Mrf49xaTxAck:	
  5779                           
  5780                           ;mrf49xa_mac.c: 77: packet->packet.data[0] = packet->packet.id;
  5781                           
  5782                           ;incstack = 0
  5783                           ; Regs used in _Mrf49xaTxAck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5784  0BBE  0827               	movf	Mrf49xaTxAck@packet,w
  5785  0BBF  3E06               	addlw	6
  5786  0BC0  0086               	movwf	6
  5787  0BC1  0187               	clrf	7
  5788  0BC2  0827               	movf	Mrf49xaTxAck@packet,w
  5789  0BC3  3E04               	addlw	4
  5790  0BC4  0084               	movwf	4
  5791  0BC5  0185               	clrf	5
  5792  0BC6  0800               	movf	0,w
  5793  0BC7  0081               	movwf	1
  5794                           
  5795                           ;mrf49xa_mac.c: 78: packet->packet.data[1] = packet->crc;
  5796  0BC8  0827               	movf	Mrf49xaTxAck@packet,w
  5797  0BC9  3E07               	addlw	7
  5798  0BCA  0086               	movwf	6
  5799  0BCB  0827               	movf	Mrf49xaTxAck@packet,w
  5800  0BCC  3E16               	addlw	22
  5801  0BCD  0084               	movwf	4
  5802  0BCE  0800               	movf	0,w
  5803  0BCF  0081               	movwf	1
  5804                           
  5805                           ;mrf49xa_mac.c: 81: packet->packet.id = RF_ACK;
  5806  0BD0  0827               	movf	Mrf49xaTxAck@packet,w
  5807  0BD1  3E04               	addlw	4
  5808  0BD2  0086               	movwf	6
  5809  0BD3  30A1               	movlw	161
  5810  0BD4  0081               	movwf	1
  5811                           
  5812                           ;mrf49xa_mac.c: 82: packet->packet.size = 2;
  5813  0BD5  0A27               	incf	Mrf49xaTxAck@packet,w
  5814  0BD6  0086               	movwf	6
  5815  0BD7  3002               	movlw	2
  5816  0BD8  0081               	movwf	1
  5817                           
  5818                           ;mrf49xa_mac.c: 84: return Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet, ((ui
      +                          nt8_t)1), ((uint8_t)0));
  5819  0BD9  0827               	movf	Mrf49xaTxAck@packet,w
  5820  0BDA  00A0               	movwf	Mrf49xaTxPacket@packet
  5821  0BDB  01A1               	clrf	Mrf49xaTxPacket@response
  5822  0BDC  0AA1               	incf	Mrf49xaTxPacket@response,f
  5823  0BDD  01A2               	clrf	Mrf49xaTxPacket@needAck
  5824  0BDE  2B61               	ljmp	l3188
  5825  0BDF                     __end_of_Mrf49xaTxAck:	
  5826  0BDF                     __ptext31:	
  5827 ;; *************** function _Mrf49xaPacketPending *****************
  5828 ;; Defined at:
  5829 ;;		line 8 in file "../../../src/devices/mrf49xa_mac.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5832 ;;		 -> mrf49xaInst(78), 
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  5835 ;;		 -> mrf49xaInst(78), 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      unsigned char 
  5838 ;; Registers used:
  5839 ;;		wreg
  5840 ;; Tracked objects:
  5841 ;;		On entry : 1F/1
  5842 ;;		On exit  : 1F/1
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5845 ;;      Params:         0       0       0       0
  5846 ;;      Locals:         0       1       0       0
  5847 ;;      Temps:          0       0       0       0
  5848 ;;      Totals:         0       1       0       0
  5849 ;;Total ram usage:        1 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    5
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_Mrf49xaTick
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           
  5860                           ;psect for function _Mrf49xaPacketPending
  5861  0BDF                     _Mrf49xaPacketPending:	
  5862                           
  5863                           ;mrf49xa_mac.c: 10: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_HW_REA
      +                          DY_RX ||
  5864                           ;mrf49xa_mac.c: 11: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_HW_READY_R
      +                          X)
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _Mrf49xaPacketPending: [wreg]
  5868  0BDF  0823               	movf	(_mrf49xaInst^(0+128)+3),w
  5869  0BE0  3A05               	xorlw	5
  5870  0BE1  1903               	skipnz
  5871  0BE2  3401               	retlw	1
  5872  0BE3  083B               	movf	(_mrf49xaInst^(0+128)+27),w
  5873  0BE4  3A05               	xorlw	5
  5874  0BE5  1903               	btfsc	3,2
  5875                           
  5876                           ;mrf49xa_mac.c: 12: return ((uint8_t)1);
  5877  0BE6  3401               	retlw	1
  5878                           
  5879                           ;mrf49xa_mac.c: 13: else
  5880                           ;mrf49xa_mac.c: 14: return ((uint8_t)0);
  5881  0BE7  3400               	retlw	0
  5882  0BE8                     __end_of_Mrf49xaPacketPending:	
  5883  0BE8                     __ptext24:	
  5884 ;; *************** function _PwrI2cWake *****************
  5885 ;; Defined at:
  5886 ;;		line 85 in file "../../../src/node/power.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;		None               void
  5893 ;; Registers used:
  5894 ;;		None
  5895 ;; Tracked objects:
  5896 ;;		On entry : 1F/2
  5897 ;;		On exit  : 1F/2
  5898 ;;		Unchanged: 1F/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5900 ;;      Params:         0       0       0       0
  5901 ;;      Locals:         0       0       0       0
  5902 ;;      Temps:          0       0       0       0
  5903 ;;      Totals:         0       0       0       0
  5904 ;;Total ram usage:        0 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    5
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _PwrI2cWake
  5916  0BE8                     _PwrI2cWake:	
  5917                           
  5918                           ;incstack = 0
  5919                           ; Regs used in _PwrI2cWake: []
  5920  0BE8  0008               	return
  5921  0BE9                     __end_of_PwrI2cWake:	
  5922  0BE9                     __ptext32:	
  5923 ;; *************** function _Mrf49xaModeTx *****************
  5924 ;; Defined at:
  5925 ;;		line 87 in file "../../../src/devices/mrf49xa.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  5928 ;;		 -> mrf49xaInst(78), 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;  inst            1    3[BANK0 ] PTR struct Mrf49xaMac_s
  5931 ;;		 -> mrf49xaInst(78), 
  5932 ;;  k               1    4[BANK0 ] unsigned char 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;		None               void
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0, pclath, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 1F/1
  5939 ;;		On exit  : 1F/1
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5942 ;;      Params:         0       0       0       0
  5943 ;;      Locals:         0       2       0       0
  5944 ;;      Temps:          0       0       0       0
  5945 ;;      Totals:         0       2       0       0
  5946 ;;Total ram usage:        2 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    7
  5949 ;; This function calls:
  5950 ;;		_Mrf49TxCmd
  5951 ;; This function is called by:
  5952 ;;		_Mrf49xaTick
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           
  5957                           ;psect for function _Mrf49xaModeTx
  5958  0BE9                     _Mrf49xaModeTx:	
  5959                           
  5960                           ;mrf49xa.c: 89: UI08_t k;
  5961                           ;mrf49xa.c: 90: for (k = 0; k < mrfRegset_TxCnt; k++) { Mrf49TxCmd(mrfRegset_Tx[k].reg, 
      +                          mrfRegset_Tx[k].val); };
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in _Mrf49xaModeTx: [wreg+status,2+status,0+pclath+cstack]
  5965  0BE9  0020               	movlb	0	; select bank0
  5966  0BEA  302D               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5967  0BEB  01A4               	clrf	Mrf49xaModeTx@k
  5968  0BEC  3182               	movlp	high __stringtab
  5969  0BED  000A               	callw
  5970  0BEE  3188               	pagesel	$	;select current page
  5971  0BEF  3800               	iorlw	0
  5972  0BF0  1903               	btfsc	3,2
  5973  0BF1  2C06               	goto	l3000
  5974  0BF2                     l2994:	
  5975  0BF2  3524               	lslf	Mrf49xaModeTx@k,w
  5976  0BF3  3E5B               	addlw	low ((_mrfRegset_Tx| (0+32768)+1))
  5977  0BF4  3182               	movlp	high __stringtab
  5978  0BF5  000A               	callw
  5979  0BF6  3188               	pagesel	$	;select current page
  5980  0BF7  00A1               	movwf	Mrf49TxCmd@val
  5981  0BF8  3524               	lslf	Mrf49xaModeTx@k,w
  5982  0BF9  3E5A               	addlw	low (_mrfRegset_Tx| (0+32768))
  5983  0BFA  3182               	movlp	high __stringtab
  5984  0BFB  000A               	callw
  5985  0BFC  3188               	pagesel	$	;select current page
  5986  0BFD  252D               	fcall	_Mrf49TxCmd
  5987  0BFE  302D               	movlw	low (_mrfRegset_TxCnt| (0+32768))
  5988  0BFF  0AA4               	incf	Mrf49xaModeTx@k,f
  5989  0C00  3182               	movlp	high __stringtab
  5990  0C01  000A               	callw
  5991  0C02  3188               	pagesel	$	;select current page
  5992  0C03  0224               	subwf	Mrf49xaModeTx@k,w
  5993  0C04  1C03               	skipc
  5994  0C05  2BF2               	goto	l2994
  5995  0C06                     l3000:	
  5996                           
  5997                           ;mrf49xa.c: 93: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = TX_PACKET;
  5998  0C06  3003               	movlw	3
  5999  0C07  0021               	movlb	1	; select bank1
  6000  0C08  00EB               	movwf	(_mrf49xaInst^(0+128)+75)
  6001                           
  6002                           ;mrf49xa.c: 94: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 99;
  6003  0C09  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6004  0C0A  3980               	andlw	-128
  6005  0C0B  3863               	iorlw	99
  6006  0C0C  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6007  0C0D  0008               	return
  6008  0C0E                     __end_of_Mrf49xaModeTx:	
  6009  0C0E                     __ptext35:	
  6010 ;; *************** function _Mrf49xaServe *****************
  6011 ;; Defined at:
  6012 ;;		line 7 in file "../../../src/devices/mrf49xa_phy.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  6015 ;;		 -> mrf49xaInst(78), 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  inst            1    6[BANK0 ] PTR struct Mrf49xaMac_s
  6018 ;;		 -> mrf49xaInst(78), 
  6019 ;;  data            1    7[BANK0 ] unsigned char 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  1    wreg      unsigned char 
  6022 ;; Registers used:
  6023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : 1F/0
  6026 ;;		On exit  : 1E/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6029 ;;      Params:         0       0       0       0
  6030 ;;      Locals:         0       2       0       0
  6031 ;;      Temps:          0       1       0       0
  6032 ;;      Totals:         0       3       0       0
  6033 ;;Total ram usage:        3 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    8
  6036 ;; This function calls:
  6037 ;;		_Mrf49RxByte
  6038 ;;		_Mrf49RxSts
  6039 ;;		_Mrf49TxByte
  6040 ;;		_Mrf49xaModeRx
  6041 ;;		_Mrf49xaNeedsReset
  6042 ;; This function is called by:
  6043 ;;		_Mrf49xaInit
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           
  6048                           ;psect for function _Mrf49xaServe
  6049  0C0E                     _Mrf49xaServe:	
  6050                           
  6051                           ;mrf49xa_phy.c: 10: uint8_t data;
  6052                           ;mrf49xa_phy.c: 12: if (((Mrf49xaMac_t*)(&mrf49xaInst))->state == POWERED_OFF)
  6053                           
  6054                           ;incstack = 0
  6055                           ; Regs used in _Mrf49xaServe: [allreg]
  6056  0C0E  0021               	movlb	1	; select bank1
  6057  0C0F  08EB               	movf	(_mrf49xaInst^(0+128)+75),f
  6058  0C10  1903               	btfsc	3,2
  6059                           
  6060                           ;mrf49xa_phy.c: 13: return 0;
  6061  0C11  3400               	retlw	0
  6062                           
  6063                           ;mrf49xa_phy.c: 16: if (((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset)
  6064  0C12  1BED               	btfsc	(_mrf49xaInst^(0+128)+77),7
  6065  0C13  3400               	retlw	0
  6066                           
  6067                           ;mrf49xa_phy.c: 19: Mrf49RxSts(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6068  0C14  30A0               	movlw	_mrf49xaInst& (0+255)
  6069  0C15  2591  3188         	fcall	_Mrf49RxSts
  6070                           
  6071                           ;mrf49xa_phy.c: 21: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] == 0xFF && ((Mrf
      +                          49xaMac_t*)(&mrf49xaInst))->status.byte[1] == 0xFF)
  6072  0C17  0021               	movlb	1	; select bank1
  6073  0C18  0820               	movf	_mrf49xaInst^(0+128),w
  6074  0C19  3AFF               	xorlw	255
  6075  0C1A  1D03               	skipz
  6076  0C1B  2C20               	goto	l464
  6077  0C1C  0821               	movf	(_mrf49xaInst^(0+128)+1),w
  6078  0C1D  3AFF               	xorlw	255
  6079  0C1E  1903               	btfsc	3,2
  6080  0C1F  3400               	retlw	0
  6081  0C20                     l464:	
  6082                           ;mrf49xa_phy.c: 26: {
  6083                           
  6084                           
  6085                           ;mrf49xa_phy.c: 28: }
  6086                           ;mrf49xa_phy.c: 31: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.overflow == 1)
  6087  0C20  1AA0               	btfsc	_mrf49xaInst^(0+128),5
  6088  0C21  2C31               	goto	l2846
  6089  0C22  2C3F               	goto	l465
  6090  0C23                     l2838:	
  6091                           
  6092                           ;mrf49xa_phy.c: 36: case RECV_DATA:
  6093                           ;mrf49xa_phy.c: 39: data = Mrf49RxByte();
  6094  0C23  252B  3188         	fcall	_Mrf49RxByte
  6095  0C25  00A7               	movwf	Mrf49xaServe@data
  6096                           
  6097                           ;mrf49xa_phy.c: 40: data = Mrf49RxByte();
  6098  0C26  252B  3188         	fcall	_Mrf49RxByte
  6099  0C28  00A7               	movwf	Mrf49xaServe@data
  6100                           
  6101                           ;mrf49xa_phy.c: 43: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6102  0C29  30A0               	movlw	_mrf49xaInst& (0+255)
  6103  0C2A  2507  3188         	fcall	_Mrf49xaModeRx
  6104                           
  6105                           ;mrf49xa_phy.c: 47: break;
  6106  0C2C  2C3F               	goto	l465
  6107  0C2D                     l2842:	
  6108                           
  6109                           ;mrf49xa_phy.c: 50: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6110  0C2D  30A0               	movlw	_mrf49xaInst& (0+255)
  6111  0C2E  22D8  3188         	fcall	_Mrf49xaNeedsReset
  6112                           
  6113                           ;mrf49xa_phy.c: 51: break;
  6114  0C30  2C3F               	goto	l465
  6115  0C31                     l2846:	
  6116  0C31  086B               	movf	(_mrf49xaInst^(0+128)+75),w
  6117                           
  6118                           ; Switch size 1, requested type "space"
  6119                           ; Number of cases is 4, Range of values is 0 to 3
  6120                           ; switch strategies available:
  6121                           ; Name         Instructions Cycles
  6122                           ; simple_byte           13     7 (average)
  6123                           ; direct_byte           14     6 (fixed)
  6124                           ; jumptable            260     6 (fixed)
  6125                           ;	Chosen strategy is simple_byte
  6126  0C32  3A00               	xorlw	0	; case 0
  6127  0C33  1903               	skipnz
  6128  0C34  2C2D               	goto	l2842
  6129  0C35  3A01               	xorlw	1	; case 1
  6130  0C36  1903               	skipnz
  6131  0C37  2C23               	goto	l2838
  6132  0C38  3A03               	xorlw	3	; case 2
  6133  0C39  1903               	skipnz
  6134  0C3A  2C23               	goto	l2838
  6135  0C3B  3A01               	xorlw	1	; case 3
  6136  0C3C  1903               	skipnz
  6137  0C3D  2C3F               	goto	l465
  6138  0C3E  2C3F               	goto	l465
  6139  0C3F                     l465:	
  6140                           
  6141                           ;mrf49xa_phy.c: 60: }
  6142                           ;mrf49xa_phy.c: 69: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx == 1)
  6143  0C3F  1BA0               	btfsc	_mrf49xaInst^(0+128),7
  6144  0C40  2CEF               	goto	l2928
  6145  0C41  2CFD               	goto	l2930
  6146  0C42                     l2850:	
  6147                           
  6148                           ;mrf49xa_phy.c: 76: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6149  0C42  30A0               	movlw	_mrf49xaInst& (0+255)
  6150  0C43  22D8  3188         	fcall	_Mrf49xaNeedsReset
  6151                           
  6152                           ;mrf49xa_phy.c: 77: break;
  6153  0C45  2CFD               	goto	l2930
  6154  0C46                     l2852:	
  6155                           
  6156                           ;mrf49xa_phy.c: 81: data = Mrf49RxByte();
  6157  0C46  252B  3188         	fcall	_Mrf49RxByte
  6158  0C48  00A7               	movwf	Mrf49xaServe@data
  6159                           
  6160                           ;mrf49xa_phy.c: 85: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK 
      +                          == 0)
  6161  0C49  0021               	movlb	1	; select bank1
  6162  0C4A  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
  6163  0C4B  2C50               	goto	l2858
  6164                           
  6165                           ;mrf49xa_phy.c: 86: {
  6166                           ;mrf49xa_phy.c: 87: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6167  0C4C  30A0               	movlw	_mrf49xaInst& (0+255)
  6168  0C4D  2507  3188         	fcall	_Mrf49xaModeRx
  6169                           
  6170                           ;mrf49xa_phy.c: 88: break;
  6171  0C4F  2CFD               	goto	l2930
  6172  0C50                     l2858:	
  6173                           
  6174                           ;mrf49xa_phy.c: 89: }
  6175                           ;mrf49xa_phy.c: 91: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_FREE) 
      +                          ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
  6176  0C50  08A3               	movf	(_mrf49xaInst^(0+128)+3),f
  6177  0C51  1D03               	skipz
  6178  0C52  2C55               	goto	l2862
  6179  0C53  30A3               	movlw	(_mrf49xaInst+3)& (0+255)
  6180  0C54  2C59               	goto	L1
  6181  0C55                     l2862:	
  6182                           
  6183                           ;mrf49xa_phy.c: 92: else if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_F
      +                          REE) ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket
      +                          [1]);
  6184  0C55  08BB               	movf	(_mrf49xaInst^(0+128)+27),f
  6185  0C56  1D03               	skipz
  6186  0C57  2C5B               	goto	l2866
  6187  0C58  30BB               	movlw	(_mrf49xaInst+27)& (0+255)
  6188  0C59                     L1:	
  6189  0C59  00A2               	movwf	(_mrf49xaInst+2)^(0+128)
  6190  0C5A  2C5F               	goto	l2868
  6191  0C5B                     l2866:	
  6192                           
  6193                           ;mrf49xa_phy.c: 93: else
  6194                           ;mrf49xa_phy.c: 94: {
  6195                           ;mrf49xa_phy.c: 97: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6196  0C5B  30A0               	movlw	_mrf49xaInst& (0+255)
  6197  0C5C  2507  3188         	fcall	_Mrf49xaModeRx
  6198                           
  6199                           ;mrf49xa_phy.c: 98: break;
  6200  0C5E  2CFD               	goto	l2930
  6201  0C5F                     l2868:	
  6202                           
  6203                           ;mrf49xa_phy.c: 99: }
  6204                           ;mrf49xa_phy.c: 101: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->packet.size = data;
  6205  0C5F  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
  6206  0C60  0086               	movwf	6
  6207  0C61  0187               	clrf	7
  6208                           
  6209                           ;mrf49xa_phy.c: 102: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = 0;
  6210  0C62  27C0  3188         	fcall	PL18	;call to abstracted procedure
  6211  0C64  3E16               	addlw	22
  6212  0C65  0086               	movwf	6
  6213  0C66  0181               	clrf	1
  6214                           
  6215                           ;mrf49xa_phy.c: 103: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_BUSY_RX;
  6216  0C67  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  6217  0C68  0086               	movwf	6
  6218  0C69  3004               	movlw	4
  6219  0C6A  0081               	movwf	1
  6220                           
  6221                           ;mrf49xa_phy.c: 105: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_DATA;
  6222  0C6B  3002               	movlw	2
  6223  0C6C  00EB               	movwf	(_mrf49xaInst^(0+128)+75)
  6224                           
  6225                           ;mrf49xa_phy.c: 106: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 1;
  6226  0C6D  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6227  0C6E  3980               	andlw	-128
  6228  0C6F  3801               	iorlw	1
  6229  0C70  2CA0               	goto	L2
  6230  0C71                     l2878:	
  6231                           ;mrf49xa_phy.c: 108: break;
  6232                           
  6233                           
  6234                           ;mrf49xa_phy.c: 112: data = Mrf49RxByte();
  6235  0C71  252B  3188         	fcall	_Mrf49RxByte
  6236  0C73  00A7               	movwf	Mrf49xaServe@data
  6237                           
  6238                           ;mrf49xa_phy.c: 116: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK
      +                           == 0)
  6239  0C74  0021               	movlb	1	; select bank1
  6240  0C75  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
  6241  0C76  2C7F               	goto	l2886
  6242                           
  6243                           ;mrf49xa_phy.c: 117: {
  6244                           ;mrf49xa_phy.c: 118: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_FREE;
  6245  0C77  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  6246  0C78  0086               	movwf	6
  6247  0C79  30A0               	movlw	_mrf49xaInst& (0+255)
  6248  0C7A  0187               	clrf	7
  6249  0C7B  0181               	clrf	1
  6250                           
  6251                           ;mrf49xa_phy.c: 119: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6252  0C7C  2507  3188         	fcall	_Mrf49xaModeRx
  6253                           
  6254                           ;mrf49xa_phy.c: 120: break;
  6255  0C7E  2CFD               	goto	l2930
  6256  0C7F                     l2886:	
  6257                           
  6258                           ;mrf49xa_phy.c: 121: }
  6259                           ;mrf49xa_phy.c: 123: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->hwRx->packet.size)
  6260  0C7F  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
  6261  0C80  0086               	movwf	6
  6262  0C81  0187               	clrf	7
  6263  0C82  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6264  0C83  397F               	andlw	127
  6265  0C84  0601               	xorwf	1,w
  6266  0C85  1D03               	skipz
  6267  0C86  2C93               	goto	l2892
  6268                           
  6269                           ;mrf49xa_phy.c: 124: {
  6270                           ;mrf49xa_phy.c: 125: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = data;
  6271  0C87  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  6272  0C88  3E16               	addlw	22
  6273  0C89  0086               	movwf	6
  6274                           
  6275                           ;mrf49xa_phy.c: 129: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_READY_RX;
  6276  0C8A  27C0  3188         	fcall	PL18	;call to abstracted procedure
  6277  0C8C  0086               	movwf	6
  6278  0C8D  3005               	movlw	5
  6279  0C8E  0081               	movwf	1
  6280                           
  6281                           ;mrf49xa_phy.c: 135: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6282  0C8F  30A0               	movlw	_mrf49xaInst& (0+255)
  6283  0C90  2507  3188         	fcall	_Mrf49xaModeRx
  6284                           
  6285                           ;mrf49xa_phy.c: 137: }
  6286  0C92  2CFD               	goto	l2930
  6287  0C93                     l2892:	
  6288                           
  6289                           ;mrf49xa_phy.c: 138: else
  6290                           ;mrf49xa_phy.c: 139: {
  6291                           ;mrf49xa_phy.c: 140: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->raw[((Mrf49xaMac_t*)(&mrf49x
      +                          aInst))->hwByte++] = data;
  6292  0C93  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6293  0C94  397F               	andlw	127
  6294  0C95  0722               	addwf	(_mrf49xaInst+2)^(0+128),w
  6295  0C96  0020               	movlb	0	; select bank0
  6296  0C97  00A5               	movwf	??_Mrf49xaServe
  6297  0C98  0A25               	incf	??_Mrf49xaServe,w
  6298  0C99  0086               	movwf	6
  6299  0C9A  0187               	clrf	7
  6300  0C9B  0827               	movf	Mrf49xaServe@data,w
  6301  0C9C  0081               	movwf	1
  6302  0C9D  0021               	movlb	1	; select bank1
  6303  0C9E  27AD  3188         	fcall	PL12	;call to abstracted procedure
  6304  0CA0                     L2:	
  6305  0CA0  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6306  0CA1  2CFD               	goto	l2930
  6307  0CA2                     l2896:	
  6308                           
  6309                           ;mrf49xa_phy.c: 146: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte++;
  6310  0CA2  27AD  3188         	fcall	PL12	;call to abstracted procedure
  6311  0CA4  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6312                           
  6313                           ;mrf49xa_phy.c: 148: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->txPacket.packet.size)
  6314  0CA5  397F               	andlw	127
  6315  0CA6  0654               	xorwf	(_mrf49xaInst^(0+128)+52),w
  6316  0CA7  1D03               	skipz
  6317  0CA8  2CDD               	goto	l2924
  6318                           
  6319                           ;mrf49xa_phy.c: 149: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 49;
  6320  0CA9  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6321  0CAA  3980               	andlw	-128
  6322  0CAB  3831               	iorlw	49
  6323  0CAC  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
  6324  0CAD  2CDD               	goto	l2924
  6325  0CAE                     l2900:	
  6326                           
  6327                           ;mrf49xa_phy.c: 154: Mrf49TxByte(0x2D);
  6328  0CAE  302D               	movlw	45
  6329  0CAF  2502  3188         	fcall	_Mrf49TxByte
  6330                           
  6331                           ;mrf49xa_phy.c: 155: break;
  6332  0CB1  2CFD               	goto	l2930
  6333  0CB2                     l2902:	
  6334                           
  6335                           ;mrf49xa_phy.c: 158: Mrf49TxByte(0xD4);
  6336  0CB2  30D4               	movlw	212
  6337  0CB3  2502  3188         	fcall	_Mrf49TxByte
  6338                           
  6339                           ;mrf49xa_phy.c: 159: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0x7F;
  6340  0CB5  307F               	movlw	127
  6341  0CB6  0021               	movlb	1	; select bank1
  6342  0CB7  04ED               	iorwf	(_mrf49xaInst^(0+128)+77),f
  6343                           
  6344                           ;mrf49xa_phy.c: 160: break;
  6345  0CB8  2CFD               	goto	l2930
  6346  0CB9                     l2906:	
  6347                           
  6348                           ;mrf49xa_phy.c: 164: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[((Mrf49xa
      +                          Mac_t*)(&mrf49xaInst))->hwByte]);
  6349  0CB9  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6350  0CBA  397F               	andlw	127
  6351  0CBB  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
  6352  0CBC  0086               	movwf	6
  6353  0CBD  0187               	clrf	7
  6354  0CBE  0801               	movf	1,w
  6355  0CBF  2502  3188         	fcall	_Mrf49TxByte
  6356                           
  6357                           ;mrf49xa_phy.c: 165: break;
  6358  0CC1  2CFD               	goto	l2930
  6359  0CC2                     l2908:	
  6360                           
  6361                           ;mrf49xa_phy.c: 168: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc);
  6362  0CC2  0869               	movf	(_mrf49xaInst^(0+128)+73),w
  6363  0CC3  2502  3188         	fcall	_Mrf49TxByte
  6364                           
  6365                           ;mrf49xa_phy.c: 169: break;
  6366  0CC5  2CFD               	goto	l2930
  6367  0CC6                     l2910:	
  6368                           
  6369                           ;mrf49xa_phy.c: 172: Mrf49TxByte(0x00);
  6370  0CC6  3000               	movlw	0
  6371  0CC7  2502  3188         	fcall	_Mrf49TxByte
  6372                           
  6373                           ;mrf49xa_phy.c: 173: break;
  6374  0CC9  2CFD               	goto	l2930
  6375  0CCA                     l2912:	
  6376                           
  6377                           ;mrf49xa_phy.c: 176: Mrf49TxByte(0x00);
  6378  0CCA  3000               	movlw	0
  6379  0CCB  2502  3188         	fcall	_Mrf49TxByte
  6380                           
  6381                           ;mrf49xa_phy.c: 177: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  6382  0CCD  2507  3188         	fcall	_Mrf49xaModeRx
  6383                           
  6384                           ;mrf49xa_phy.c: 179: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
  6385  0CCF  30F0               	movlw	-16
  6386  0CD0  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  6387                           
  6388                           ;mrf49xa_phy.c: 181: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck == NEED_ACK)
  6389  0CD1  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
  6390  0CD2  0C89               	rrf	9,f
  6391  0CD3  0C89               	rrf	9,f
  6392  0CD4  3903               	andlw	3
  6393  0CD5  3A01               	xorlw	1
  6394  0CD6  1D03               	skipz
  6395  0CD7  2CDB               	goto	l2920
  6396                           
  6397                           ;mrf49xa_phy.c: 182: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_WAITING_FOR_A
      +                          CK;
  6398  0CD8  3003               	movlw	3
  6399  0CD9  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
  6400  0CDA  2CFD               	goto	l2930
  6401  0CDB                     l2920:	
  6402                           
  6403                           ;mrf49xa_phy.c: 183: else
  6404                           ;mrf49xa_phy.c: 184: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_FREE;
  6405  0CDB  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  6406  0CDC  2CFD               	goto	l2930
  6407  0CDD                     l2924:	
  6408  0CDD  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  6409  0CDE  397F               	andlw	127
  6410                           
  6411                           ; Switch size 1, requested type "space"
  6412                           ; Number of cases is 5, Range of values is 49 to 101
  6413                           ; switch strategies available:
  6414                           ; Name         Instructions Cycles
  6415                           ; simple_byte           16     9 (average)
  6416                           ; direct_byte          115     9 (fixed)
  6417                           ; jumptable            263     9 (fixed)
  6418                           ;	Chosen strategy is simple_byte
  6419  0CDF  3A31               	xorlw	49	; case 49
  6420  0CE0  1903               	skipnz
  6421  0CE1  2CC2               	goto	l2908
  6422  0CE2  3A03               	xorlw	3	; case 50
  6423  0CE3  1903               	skipnz
  6424  0CE4  2CC6               	goto	l2910
  6425  0CE5  3A01               	xorlw	1	; case 51
  6426  0CE6  1903               	skipnz
  6427  0CE7  2CCA               	goto	l2912
  6428  0CE8  3A57               	xorlw	87	; case 100
  6429  0CE9  1903               	skipnz
  6430  0CEA  2CAE               	goto	l2900
  6431  0CEB  3A01               	xorlw	1	; case 101
  6432  0CEC  1903               	skipnz
  6433  0CED  2CB2               	goto	l2902
  6434  0CEE  2CB9               	goto	l2906
  6435  0CEF                     l2928:	
  6436  0CEF  086B               	movf	(_mrf49xaInst^(0+128)+75),w
  6437                           
  6438                           ; Switch size 1, requested type "space"
  6439                           ; Number of cases is 4, Range of values is 0 to 3
  6440                           ; switch strategies available:
  6441                           ; Name         Instructions Cycles
  6442                           ; simple_byte           13     7 (average)
  6443                           ; direct_byte           14     6 (fixed)
  6444                           ; jumptable            260     6 (fixed)
  6445                           ;	Chosen strategy is simple_byte
  6446  0CF0  3A00               	xorlw	0	; case 0
  6447  0CF1  1903               	skipnz
  6448  0CF2  2C42               	goto	l2850
  6449  0CF3  3A01               	xorlw	1	; case 1
  6450  0CF4  1903               	skipnz
  6451  0CF5  2C46               	goto	l2852
  6452  0CF6  3A03               	xorlw	3	; case 2
  6453  0CF7  1903               	skipnz
  6454  0CF8  2C71               	goto	l2878
  6455  0CF9  3A01               	xorlw	1	; case 3
  6456  0CFA  1903               	skipnz
  6457  0CFB  2CA2               	goto	l2896
  6458  0CFC  2CFD               	goto	l2930
  6459  0CFD                     l2930:	
  6460                           
  6461                           ;mrf49xa_phy.c: 191: }
  6462                           ;mrf49xa_phy.c: 205: return PORTAbits.RA2 == 1 ? 1 : 0;
  6463  0CFD  0020               	movlb	0	; select bank0
  6464  0CFE  0C0C               	rrf	12,w	;volatile
  6465  0CFF  0C89               	rrf	9,f
  6466  0D00  3901               	andlw	1
  6467  0D01  0008               	return
  6468  0D02                     __end_of_Mrf49xaServe:	
  6469  0D02                     __ptext38:	
  6470 ;; *************** function _Mrf49TxByte *****************
  6471 ;; Defined at:
  6472 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  byte            1    wreg     unsigned char 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  byte            1    3[BANK0 ] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;		None               void
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0, pclath, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 1E/1
  6483 ;;		On exit  : 1F/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6486 ;;      Params:         0       0       0       0
  6487 ;;      Locals:         0       1       0       0
  6488 ;;      Temps:          0       0       0       0
  6489 ;;      Totals:         0       1       0       0
  6490 ;;Total ram usage:        1 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    7
  6493 ;; This function calls:
  6494 ;;		_Mrf49TxCmd
  6495 ;; This function is called by:
  6496 ;;		_Mrf49xaServe
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _Mrf49TxByte
  6502  0D02                     _Mrf49TxByte:	
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
  6506                           ;Mrf49TxByte@byte stored from wreg
  6507  0D02  0020               	movlb	0	; select bank0
  6508  0D03  00A3               	movwf	Mrf49TxByte@byte
  6509                           
  6510                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
  6511  0D04  00A1               	movwf	Mrf49TxCmd@val
  6512  0D05  30B8               	movlw	184
  6513  0D06  2D2D               	ljmp	_Mrf49TxCmd
  6514  0D07                     __end_of_Mrf49TxByte:	
  6515  0D07                     __ptext37:	
  6516 ;; *************** function _Mrf49xaModeRx *****************
  6517 ;; Defined at:
  6518 ;;		line 75 in file "../../../src/devices/mrf49xa.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  6521 ;;		 -> mrf49xaInst(78), 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  inst            1    4[BANK0 ] PTR struct Mrf49xaMac_s
  6524 ;;		 -> mrf49xaInst(78), 
  6525 ;;  k               1    3[BANK0 ] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0, pclath, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 1E/1
  6532 ;;		On exit  : 1F/1
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6535 ;;      Params:         0       0       0       0
  6536 ;;      Locals:         0       2       0       0
  6537 ;;      Temps:          0       0       0       0
  6538 ;;      Totals:         0       2       0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    7
  6542 ;; This function calls:
  6543 ;;		_Mrf49TxCmd
  6544 ;; This function is called by:
  6545 ;;		_Mrf49xaReboot
  6546 ;;		_Mrf49xaInit
  6547 ;;		_Mrf49xaServe
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function _Mrf49xaModeRx
  6553  0D07                     _Mrf49xaModeRx:	
  6554  0D07                     l2972:	
  6555                           ;incstack = 0
  6556                           ; Regs used in _Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
  6557                           
  6558                           
  6559                           ;mrf49xa.c: 77: UI08_t k;
  6560                           ;mrf49xa.c: 78: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg, 
      +                          mrfRegset_Rx[k].val); };
  6561  0D07  0020               	movlb	0	; select bank0
  6562  0D08  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6563  0D09  01A3               	clrf	Mrf49xaModeRx@k
  6564  0D0A  3182               	movlp	high __stringtab
  6565  0D0B  000A               	callw
  6566  0D0C  3188               	pagesel	$	;select current page
  6567  0D0D  3800               	iorlw	0
  6568  0D0E  1903               	btfsc	3,2
  6569  0D0F  2D24               	goto	l211
  6570  0D10                     l2978:	
  6571  0D10  3523               	lslf	Mrf49xaModeRx@k,w
  6572  0D11  3E4F               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
  6573  0D12  3182               	movlp	high __stringtab
  6574  0D13  000A               	callw
  6575  0D14  3188               	pagesel	$	;select current page
  6576  0D15  00A1               	movwf	Mrf49TxCmd@val
  6577  0D16  3523               	lslf	Mrf49xaModeRx@k,w
  6578  0D17  3E4E               	addlw	low (_mrfRegset_Rx| (0+32768))
  6579  0D18  3182               	movlp	high __stringtab
  6580  0D19  000A               	callw
  6581  0D1A  3188               	pagesel	$	;select current page
  6582  0D1B  252D               	fcall	_Mrf49TxCmd
  6583  0D1C  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
  6584  0D1D  0AA3               	incf	Mrf49xaModeRx@k,f
  6585  0D1E  3182               	movlp	high __stringtab
  6586  0D1F  000A               	callw
  6587  0D20  3188               	pagesel	$	;select current page
  6588  0D21  0223               	subwf	Mrf49xaModeRx@k,w
  6589  0D22  1C03               	skipc
  6590  0D23  2D10               	goto	l2978
  6591  0D24                     l211:	
  6592                           
  6593                           ;mrf49xa.c: 81: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_IDLE;
  6594  0D24  0021               	movlb	1	; select bank1
  6595  0D25  3080               	movlw	-128
  6596  0D26  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
  6597  0D27  0AEB               	incf	(_mrf49xaInst^(0+128)+75),f
  6598                           
  6599                           ;mrf49xa.c: 82: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0;
  6600  0D28  05ED               	andwf	(_mrf49xaInst^(0+128)+77),f
  6601                           
  6602                           ;mrf49xa.c: 84: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx = 0;
  6603  0D29  13A0               	bcf	_mrf49xaInst^(0+128),7
  6604  0D2A  0008               	return
  6605  0D2B                     __end_of_Mrf49xaModeRx:	
  6606  0D2B                     __ptext41:	
  6607 ;; *************** function _Mrf49RxByte *****************
  6608 ;; Defined at:
  6609 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;		None
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;		None
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      unsigned char 
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0, pclath, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 1E/1
  6620 ;;		On exit  : 1F/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6623 ;;      Params:         0       0       0       0
  6624 ;;      Locals:         0       0       0       0
  6625 ;;      Temps:          0       0       0       0
  6626 ;;      Totals:         0       0       0       0
  6627 ;;Total ram usage:        0 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    7
  6630 ;; This function calls:
  6631 ;;		_Mrf49RxCmd
  6632 ;; This function is called by:
  6633 ;;		_Mrf49xaServe
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function _Mrf49RxByte
  6639  0D2B                     _Mrf49RxByte:	
  6640                           
  6641                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
  6642                           
  6643                           ;incstack = 0
  6644                           ; Regs used in _Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
  6645  0D2B  30B0               	movlw	176
  6646  0D2C  2DE4               	ljmp	_Mrf49RxCmd
  6647  0D2D                     __end_of_Mrf49RxByte:	
  6648  0D2D                     __ptext39:	
  6649 ;; *************** function _Mrf49TxCmd *****************
  6650 ;; Defined at:
  6651 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  cmd             1    wreg     unsigned char 
  6654 ;;  val             1    1[BANK0 ] unsigned char 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  cmd             1    2[BANK0 ] unsigned char 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;		None               void
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0, pclath, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 1F/0
  6663 ;;		On exit  : 1F/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6666 ;;      Params:         0       1       0       0
  6667 ;;      Locals:         0       1       0       0
  6668 ;;      Temps:          0       0       0       0
  6669 ;;      Totals:         0       2       0       0
  6670 ;;Total ram usage:        2 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    6
  6673 ;; This function calls:
  6674 ;;		_Mrf49SpiTx
  6675 ;; This function is called by:
  6676 ;;		_Mrf49xaModeRx
  6677 ;;		_Mrf49xaModeTx
  6678 ;;		_Mrf49xaModeSleep
  6679 ;;		_Mrf49xaInit
  6680 ;;		_Mrf49TxByte
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           
  6685                           ;psect for function _Mrf49TxCmd
  6686  0D2D                     _Mrf49TxCmd:	
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
  6690                           ;Mrf49TxCmd@cmd stored from wreg
  6691  0D2D  00A2               	movwf	Mrf49TxCmd@cmd
  6692                           
  6693                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
  6694  0D2E  130E               	bcf	14,6	;volatile
  6695                           
  6696                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
  6697  0D2F  0822               	movf	Mrf49TxCmd@cmd,w
  6698  0D30  2536  3188         	fcall	_Mrf49SpiTx
  6699                           
  6700                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
  6701  0D32  0821               	movf	Mrf49TxCmd@val,w
  6702  0D33  2536               	fcall	_Mrf49SpiTx
  6703                           
  6704                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
  6705  0D34  170E               	bsf	14,6	;volatile
  6706  0D35  0008               	return
  6707  0D36                     __end_of_Mrf49TxCmd:	
  6708  0D36                     __ptext43:	
  6709 ;; *************** function _Mrf49SpiTx *****************
  6710 ;; Defined at:
  6711 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  byte            1    wreg     unsigned char 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  byte            1    0[BANK0 ] unsigned char 
  6716 ;; Return value:  Size  Location     Type
  6717 ;;		None               void
  6718 ;; Registers used:
  6719 ;;		wreg
  6720 ;; Tracked objects:
  6721 ;;		On entry : 1F/0
  6722 ;;		On exit  : 1F/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6725 ;;      Params:         0       0       0       0
  6726 ;;      Locals:         0       1       0       0
  6727 ;;      Temps:          0       0       0       0
  6728 ;;      Totals:         0       1       0       0
  6729 ;;Total ram usage:        1 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    5
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_Mrf49TxCmd
  6736 ;;		_Mrf49RxCmd
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           
  6741                           ;psect for function _Mrf49SpiTx
  6742  0D36                     _Mrf49SpiTx:	
  6743                           
  6744                           ;incstack = 0
  6745                           ; Regs used in _Mrf49SpiTx: [wreg]
  6746                           ;Mrf49SpiTx@byte stored from wreg
  6747  0D36  00A0               	movwf	Mrf49SpiTx@byte
  6748                           
  6749                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
  6750  0D37  1FA0               	btfss	Mrf49SpiTx@byte,7
  6751  0D38  2D3B               	goto	l255
  6752  0D39  178D               	bsf	13,7	;volatile
  6753  0D3A  2D3C               	goto	l256
  6754  0D3B                     l255:	
  6755  0D3B  138D               	bcf	13,7	;volatile
  6756  0D3C                     l256:	
  6757  0D3C  0022               	movlb	2	; select bank2
  6758  0D3D  178E               	bsf	14,7	;volatile
  6759  0D3E  0000               	nop	;# 
  6760  0D3F  0022               	movlb	2	; select bank2
  6761  0D40  138E               	bcf	14,7	;volatile
  6762  0D41  0020               	movlb	0	; select bank0
  6763  0D42  1F20               	btfss	Mrf49SpiTx@byte,6
  6764  0D43  2D46               	goto	l259
  6765  0D44  178D               	bsf	13,7	;volatile
  6766  0D45  2D47               	goto	l260
  6767  0D46                     l259:	
  6768  0D46  138D               	bcf	13,7	;volatile
  6769  0D47                     l260:	
  6770  0D47  0022               	movlb	2	; select bank2
  6771  0D48  178E               	bsf	14,7	;volatile
  6772  0D49  0000               	nop	;# 
  6773  0D4A  0022               	movlb	2	; select bank2
  6774  0D4B  138E               	bcf	14,7	;volatile
  6775  0D4C  0020               	movlb	0	; select bank0
  6776  0D4D  1EA0               	btfss	Mrf49SpiTx@byte,5
  6777  0D4E  2D51               	goto	l263
  6778  0D4F  178D               	bsf	13,7	;volatile
  6779  0D50  2D52               	goto	l264
  6780  0D51                     l263:	
  6781  0D51  138D               	bcf	13,7	;volatile
  6782  0D52                     l264:	
  6783  0D52  0022               	movlb	2	; select bank2
  6784  0D53  178E               	bsf	14,7	;volatile
  6785  0D54  0000               	nop	;# 
  6786  0D55  0022               	movlb	2	; select bank2
  6787  0D56  138E               	bcf	14,7	;volatile
  6788  0D57  0020               	movlb	0	; select bank0
  6789  0D58  1E20               	btfss	Mrf49SpiTx@byte,4
  6790  0D59  2D5C               	goto	l267
  6791  0D5A  178D               	bsf	13,7	;volatile
  6792  0D5B  2D5D               	goto	l268
  6793  0D5C                     l267:	
  6794  0D5C  138D               	bcf	13,7	;volatile
  6795  0D5D                     l268:	
  6796  0D5D  0022               	movlb	2	; select bank2
  6797  0D5E  178E               	bsf	14,7	;volatile
  6798  0D5F  0000               	nop	;# 
  6799  0D60  0022               	movlb	2	; select bank2
  6800  0D61  138E               	bcf	14,7	;volatile
  6801  0D62  0020               	movlb	0	; select bank0
  6802  0D63  1DA0               	btfss	Mrf49SpiTx@byte,3
  6803  0D64  2D67               	goto	l271
  6804  0D65  178D               	bsf	13,7	;volatile
  6805  0D66  2D68               	goto	l272
  6806  0D67                     l271:	
  6807  0D67  138D               	bcf	13,7	;volatile
  6808  0D68                     l272:	
  6809  0D68  0022               	movlb	2	; select bank2
  6810  0D69  178E               	bsf	14,7	;volatile
  6811  0D6A  0000               	nop	;# 
  6812  0D6B  0022               	movlb	2	; select bank2
  6813  0D6C  138E               	bcf	14,7	;volatile
  6814  0D6D  0020               	movlb	0	; select bank0
  6815  0D6E  1D20               	btfss	Mrf49SpiTx@byte,2
  6816  0D6F  2D72               	goto	l275
  6817  0D70  178D               	bsf	13,7	;volatile
  6818  0D71  2D73               	goto	l276
  6819  0D72                     l275:	
  6820  0D72  138D               	bcf	13,7	;volatile
  6821  0D73                     l276:	
  6822  0D73  0022               	movlb	2	; select bank2
  6823  0D74  178E               	bsf	14,7	;volatile
  6824  0D75  0000               	nop	;# 
  6825  0D76  0022               	movlb	2	; select bank2
  6826  0D77  138E               	bcf	14,7	;volatile
  6827  0D78  0020               	movlb	0	; select bank0
  6828  0D79  1CA0               	btfss	Mrf49SpiTx@byte,1
  6829  0D7A  2D7D               	goto	l279
  6830  0D7B  178D               	bsf	13,7	;volatile
  6831  0D7C  2D7E               	goto	l280
  6832  0D7D                     l279:	
  6833  0D7D  138D               	bcf	13,7	;volatile
  6834  0D7E                     l280:	
  6835  0D7E  0022               	movlb	2	; select bank2
  6836  0D7F  178E               	bsf	14,7	;volatile
  6837  0D80  0000               	nop	;# 
  6838  0D81  0022               	movlb	2	; select bank2
  6839  0D82  138E               	bcf	14,7	;volatile
  6840  0D83  0020               	movlb	0	; select bank0
  6841  0D84  1C20               	btfss	Mrf49SpiTx@byte,0
  6842  0D85  2D88               	goto	l283
  6843  0D86  178D               	bsf	13,7	;volatile
  6844  0D87  2D89               	goto	l284
  6845  0D88                     l283:	
  6846  0D88  138D               	bcf	13,7	;volatile
  6847  0D89                     l284:	
  6848  0D89  0022               	movlb	2	; select bank2
  6849  0D8A  178E               	bsf	14,7	;volatile
  6850  0D8B  0000               	nop	;# 
  6851  0D8C  0022               	movlb	2	; select bank2
  6852  0D8D  138E               	bcf	14,7	;volatile
  6853                           
  6854                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
  6855  0D8E  0020               	movlb	0	; select bank0
  6856  0D8F  138D               	bcf	13,7	;volatile
  6857  0D90  0008               	return
  6858  0D91                     __end_of_Mrf49SpiTx:	
  6859  0D91                     __ptext40:	
  6860 ;; *************** function _Mrf49RxSts *****************
  6861 ;; Defined at:
  6862 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  6865 ;;		 -> mrf49xaInst(78), 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  inst            1    1[BANK0 ] PTR struct Mrf49xaMac_s
  6868 ;;		 -> mrf49xaInst(78), 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;		None               void
  6871 ;; Registers used:
  6872 ;;		wreg, status,2, pclath, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 1E/0
  6875 ;;		On exit  : 1F/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6878 ;;      Params:         0       0       0       0
  6879 ;;      Locals:         0       1       0       0
  6880 ;;      Temps:          0       0       0       0
  6881 ;;      Totals:         0       1       0       0
  6882 ;;Total ram usage:        1 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    6
  6885 ;; This function calls:
  6886 ;;		_Mrf49SpiRx
  6887 ;; This function is called by:
  6888 ;;		_Mrf49xaTick
  6889 ;;		_Mrf49xaServe
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           
  6894                           ;psect for function _Mrf49RxSts
  6895  0D91                     _Mrf49RxSts:	
  6896                           
  6897                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in _Mrf49RxSts: [wreg+status,2+pclath+cstack]
  6901  0D91  120B               	bcf	11,4	;volatile
  6902                           
  6903                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
  6904  0D92  0020               	movlb	0	; select bank0
  6905  0D93  130E               	bcf	14,6	;volatile
  6906                           
  6907                           ;mrf49xa_cmd.c: 36: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] = Mrf49SpiRx();
  6908  0D94  259F  3188         	fcall	_Mrf49SpiRx
  6909  0D96  0021               	movlb	1	; select bank1
  6910  0D97  00A0               	movwf	_mrf49xaInst^(0+128)
  6911                           
  6912                           ;mrf49xa_cmd.c: 37: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[1] = Mrf49SpiRx();
  6913  0D98  259F               	fcall	_Mrf49SpiRx
  6914  0D99  0021               	movlb	1	; select bank1
  6915  0D9A  00A1               	movwf	(_mrf49xaInst^(0+128)+1)
  6916                           
  6917                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
  6918  0D9B  0020               	movlb	0	; select bank0
  6919  0D9C  170E               	bsf	14,6	;volatile
  6920                           
  6921                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
  6922  0D9D  160B               	bsf	11,4	;volatile
  6923  0D9E  0008               	return
  6924  0D9F                     __end_of_Mrf49RxSts:	
  6925  0D9F                     __ptext44:	
  6926 ;; *************** function _Mrf49SpiRx *****************
  6927 ;; Defined at:
  6928 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;  data            1    0[BANK0 ] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      unsigned char 
  6935 ;; Registers used:
  6936 ;;		wreg, status,2
  6937 ;; Tracked objects:
  6938 ;;		On entry : 1E/0
  6939 ;;		On exit  : 1F/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6942 ;;      Params:         0       0       0       0
  6943 ;;      Locals:         0       1       0       0
  6944 ;;      Temps:          0       0       0       0
  6945 ;;      Totals:         0       1       0       0
  6946 ;;Total ram usage:        1 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    5
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_Mrf49RxCmd
  6953 ;;		_Mrf49RxSts
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _Mrf49SpiRx
  6959  0D9F                     _Mrf49SpiRx:	
  6960                           
  6961                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
  6962                           
  6963                           ;incstack = 0
  6964                           ; Regs used in _Mrf49SpiRx: [wreg+status,2]
  6965  0D9F  0020               	movlb	0	; select bank0
  6966  0DA0  01A0               	clrf	Mrf49SpiRx@data
  6967                           
  6968                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
  6969  0DA1  138D               	bcf	13,7	;volatile
  6970  0DA2  1A8E               	btfsc	14,5	;volatile
  6971  0DA3  17A0               	bsf	Mrf49SpiRx@data,7
  6972  0DA4  0022               	movlb	2	; select bank2
  6973  0DA5  178E               	bsf	14,7	;volatile
  6974  0DA6  0000               	nop	;# 
  6975  0DA7  0022               	movlb	2	; select bank2
  6976  0DA8  138E               	bcf	14,7	;volatile
  6977                           
  6978                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6979  0DA9  0020               	movlb	0	; select bank0
  6980  0DAA  1A8E               	btfsc	14,5	;volatile
  6981  0DAB  1720               	bsf	Mrf49SpiRx@data,6
  6982  0DAC  0022               	movlb	2	; select bank2
  6983  0DAD  178E               	bsf	14,7	;volatile
  6984  0DAE  0000               	nop	;# 
  6985  0DAF  0022               	movlb	2	; select bank2
  6986  0DB0  138E               	bcf	14,7	;volatile
  6987                           
  6988                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6989  0DB1  0020               	movlb	0	; select bank0
  6990  0DB2  1A8E               	btfsc	14,5	;volatile
  6991  0DB3  16A0               	bsf	Mrf49SpiRx@data,5
  6992  0DB4  0022               	movlb	2	; select bank2
  6993  0DB5  178E               	bsf	14,7	;volatile
  6994  0DB6  0000               	nop	;# 
  6995  0DB7  0022               	movlb	2	; select bank2
  6996  0DB8  138E               	bcf	14,7	;volatile
  6997                           
  6998                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  6999  0DB9  0020               	movlb	0	; select bank0
  7000  0DBA  1A8E               	btfsc	14,5	;volatile
  7001  0DBB  1620               	bsf	Mrf49SpiRx@data,4
  7002  0DBC  0022               	movlb	2	; select bank2
  7003  0DBD  178E               	bsf	14,7	;volatile
  7004  0DBE  0000               	nop	;# 
  7005  0DBF  0022               	movlb	2	; select bank2
  7006  0DC0  138E               	bcf	14,7	;volatile
  7007                           
  7008                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7009  0DC1  0020               	movlb	0	; select bank0
  7010  0DC2  1A8E               	btfsc	14,5	;volatile
  7011  0DC3  15A0               	bsf	Mrf49SpiRx@data,3
  7012  0DC4  0022               	movlb	2	; select bank2
  7013  0DC5  178E               	bsf	14,7	;volatile
  7014  0DC6  0000               	nop	;# 
  7015  0DC7  0022               	movlb	2	; select bank2
  7016  0DC8  138E               	bcf	14,7	;volatile
  7017                           
  7018                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7019  0DC9  0020               	movlb	0	; select bank0
  7020  0DCA  1A8E               	btfsc	14,5	;volatile
  7021  0DCB  1520               	bsf	Mrf49SpiRx@data,2
  7022  0DCC  0022               	movlb	2	; select bank2
  7023  0DCD  178E               	bsf	14,7	;volatile
  7024  0DCE  0000               	nop	;# 
  7025  0DCF  0022               	movlb	2	; select bank2
  7026  0DD0  138E               	bcf	14,7	;volatile
  7027                           
  7028                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7029  0DD1  0020               	movlb	0	; select bank0
  7030  0DD2  1A8E               	btfsc	14,5	;volatile
  7031  0DD3  14A0               	bsf	Mrf49SpiRx@data,1
  7032  0DD4  0022               	movlb	2	; select bank2
  7033  0DD5  178E               	bsf	14,7	;volatile
  7034  0DD6  0000               	nop	;# 
  7035  0DD7  0022               	movlb	2	; select bank2
  7036  0DD8  138E               	bcf	14,7	;volatile
  7037                           
  7038                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
  7039  0DD9  0020               	movlb	0	; select bank0
  7040  0DDA  1A8E               	btfsc	14,5	;volatile
  7041  0DDB  1420               	bsf	Mrf49SpiRx@data,0
  7042  0DDC  0022               	movlb	2	; select bank2
  7043  0DDD  178E               	bsf	14,7	;volatile
  7044  0DDE  0000               	nop	;# 
  7045  0DDF  0022               	movlb	2	; select bank2
  7046  0DE0  138E               	bcf	14,7	;volatile
  7047                           
  7048                           ;mrf49xa_spi_pic16.c: 40: return data;
  7049  0DE1  0020               	movlb	0	; select bank0
  7050  0DE2  0820               	movf	Mrf49SpiRx@data,w
  7051  0DE3  0008               	return
  7052  0DE4                     __end_of_Mrf49SpiRx:	
  7053  0DE4                     __ptext42:	
  7054 ;; *************** function _Mrf49RxCmd *****************
  7055 ;; Defined at:
  7056 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  cmd             1    wreg     unsigned char 
  7059 ;; Auto vars:     Size  Location     Type
  7060 ;;  cmd             1    1[BANK0 ] unsigned char 
  7061 ;;  val             1    2[BANK0 ] unsigned char 
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      unsigned char 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0, pclath, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 1E/1
  7068 ;;		On exit  : 1F/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7071 ;;      Params:         0       0       0       0
  7072 ;;      Locals:         0       2       0       0
  7073 ;;      Temps:          0       0       0       0
  7074 ;;      Totals:         0       2       0       0
  7075 ;;Total ram usage:        2 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    6
  7078 ;; This function calls:
  7079 ;;		_Mrf49SpiRx
  7080 ;;		_Mrf49SpiTx
  7081 ;; This function is called by:
  7082 ;;		_Mrf49RxByte
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           
  7087                           ;psect for function _Mrf49RxCmd
  7088  0DE4                     _Mrf49RxCmd:	
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in _Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
  7092                           ;Mrf49RxCmd@cmd stored from wreg
  7093  0DE4  0020               	movlb	0	; select bank0
  7094  0DE5  00A1               	movwf	Mrf49RxCmd@cmd
  7095                           
  7096                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
  7097  0DE6  130E               	bcf	14,6	;volatile
  7098                           
  7099                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
  7100  0DE7  0821               	movf	Mrf49RxCmd@cmd,w
  7101  0DE8  2536  3188         	fcall	_Mrf49SpiTx
  7102                           
  7103                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
  7104  0DEA  259F               	fcall	_Mrf49SpiRx
  7105  0DEB  00A2               	movwf	Mrf49RxCmd@val
  7106                           
  7107                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
  7108  0DEC  170E               	bsf	14,6	;volatile
  7109                           
  7110                           ;mrf49xa_cmd.c: 27: return val;
  7111  0DED  0008               	return
  7112  0DEE                     __end_of_Mrf49RxCmd:	
  7113  0DEE                     __ptext2:	
  7114 ;; *************** function _RfSendPowerState *****************
  7115 ;; Defined at:
  7116 ;;		line 18 in file "../../../src/rfstack/packets.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  7119 ;;		 -> mrf49xaInst(78), 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  inst            1    7[BANK0 ] PTR struct Mrf49xaMac_s
  7122 ;;		 -> mrf49xaInst(78), 
  7123 ;;  s               2    8[BANK0 ] unsigned int 
  7124 ;;  packet          1   10[BANK0 ] PTR struct rfTrcvPacket_
  7125 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;		None               void
  7128 ;; Registers used:
  7129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 1F/0
  7132 ;;		On exit  : 1E/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7135 ;;      Params:         0       0       0       0
  7136 ;;      Locals:         0       4       0       0
  7137 ;;      Temps:          0       0       0       0
  7138 ;;      Totals:         0       4       0       0
  7139 ;;Total ram usage:        4 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    7
  7142 ;; This function calls:
  7143 ;;		_AdcSample
  7144 ;;		_Mrf49xaAllocPacket
  7145 ;;		_Mrf49xaTxPacket
  7146 ;;		_PwrAdcSleep
  7147 ;;		_PwrAdcWake
  7148 ;;		_printf
  7149 ;; This function is called by:
  7150 ;;		_main
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           
  7155                           ;psect for function _RfSendPowerState
  7156  0DEE                     _RfSendPowerState:	
  7157                           
  7158                           ;packets.c: 20: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(((Mrf49xaMac_t*)(&mrf49xaIns
      +                          t)));
  7159                           
  7160                           ;incstack = 0
  7161                           ; Regs used in _RfSendPowerState: [allreg]
  7162  0DEE  30A0               	movlw	_mrf49xaInst& (0+255)
  7163  0DEF  26B2  3188         	fcall	_Mrf49xaAllocPacket
  7164  0DF1  0020               	movlb	0	; select bank0
  7165  0DF2  00AA               	movwf	RfSendPowerState@packet
  7166                           
  7167                           ;packets.c: 22: if (packet == (0))
  7168  0DF3  08AA               	movf	RfSendPowerState@packet,f
  7169  0DF4  1D03               	skipz
  7170  0DF5  2DF8               	goto	l3512
  7171                           
  7172                           ;packets.c: 23: {
  7173                           ;packets.c: 24: printf("Boo");
  7174  0DF6  306E               	movlw	(STR_1| (0+32768))& (0+255)
  7175  0DF7  2ED1               	ljmp	_printf
  7176  0DF8                     l3512:	
  7177                           
  7178                           ;packets.c: 26: }
  7179                           ;packets.c: 28: packet->packet.size = 4;
  7180  0DF8  0A2A               	incf	RfSendPowerState@packet,w
  7181  0DF9  0086               	movwf	6
  7182  0DFA  3004               	movlw	4
  7183  0DFB  0187               	clrf	7
  7184  0DFC  0081               	movwf	1
  7185                           
  7186                           ;packets.c: 29: packet->packet.id = RF_POWER_STATUS;
  7187  0DFD  082A               	movf	RfSendPowerState@packet,w
  7188  0DFE  3E04               	addlw	4
  7189  0DFF  0086               	movwf	6
  7190  0E00  30A3               	movlw	163
  7191  0E01  0081               	movwf	1
  7192                           
  7193                           ;packets.c: 30: packet->packet.dst = 0xFF;
  7194  0E02  082A               	movf	RfSendPowerState@packet,w
  7195  0E03  3E03               	addlw	3
  7196  0E04  0086               	movwf	6
  7197  0E05  30FF               	movlw	255
  7198  0E06  0081               	movwf	1
  7199                           
  7200                           ;packets.c: 32: packet->packet.data[0] = coldBoot; coldBoot = 0;
  7201  0E07  082A               	movf	RfSendPowerState@packet,w
  7202  0E08  3E06               	addlw	6
  7203  0E09  0086               	movwf	6
  7204  0E0A  083F               	movf	_coldBoot,w
  7205  0E0B  0081               	movwf	1
  7206  0E0C  01BF               	clrf	_coldBoot
  7207                           
  7208                           ;packets.c: 33: packet->packet.data[1] = 0;
  7209  0E0D  082A               	movf	RfSendPowerState@packet,w
  7210  0E0E  3E07               	addlw	7
  7211  0E0F  0086               	movwf	6
  7212  0E10  0181               	clrf	1
  7213                           
  7214                           ;packets.c: 35: PwrAdcWake();
  7215  0E11  2666  3188         	fcall	_PwrAdcWake
  7216                           
  7217                           ;packets.c: 36: uint16_t s = AdcSample(ADC_FVR);
  7218  0E13  301F               	movlw	31
  7219  0E14  262C  3188         	fcall	_AdcSample
  7220  0E16  0823               	movf	?_AdcSample+1,w
  7221  0E17  00A9               	movwf	RfSendPowerState@s+1
  7222  0E18  0822               	movf	?_AdcSample,w
  7223  0E19  00A8               	movwf	RfSendPowerState@s
  7224                           
  7225                           ;packets.c: 37: PwrAdcSleep();
  7226  0E1A  2661  3188         	fcall	_PwrAdcSleep
  7227                           
  7228                           ;packets.c: 38: packet->packet.data[2] = s & 0xFF;
  7229  0E1C  0020               	movlb	0	; select bank0
  7230  0E1D  082A               	movf	RfSendPowerState@packet,w
  7231  0E1E  3E08               	addlw	8
  7232  0E1F  0086               	movwf	6
  7233  0E20  0187               	clrf	7
  7234  0E21  0828               	movf	RfSendPowerState@s,w
  7235  0E22  0081               	movwf	1
  7236                           
  7237                           ;packets.c: 39: packet->packet.data[3] = s >> 8;
  7238  0E23  082A               	movf	RfSendPowerState@packet,w
  7239  0E24  3E09               	addlw	9
  7240  0E25  0086               	movwf	6
  7241  0E26  0829               	movf	RfSendPowerState@s+1,w
  7242  0E27  0081               	movwf	1
  7243                           
  7244                           ;packets.c: 41: Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet, ((uint8_t)0), (
      +                          (uint8_t)1));
  7245  0E28  082A               	movf	RfSendPowerState@packet,w
  7246  0E29  27D1  3188         	fcall	PL24	;call to abstracted procedure
  7247  0E2B  2B61               	ljmp	l3188
  7248  0E2C                     __end_of_RfSendPowerState:	
  7249  0E2C                     __ptext10:	
  7250 ;; *************** function _AdcSample *****************
  7251 ;; Defined at:
  7252 ;;		line 81 in file "../../../src/bsp/pic16/adc16.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  ch              1    wreg     unsigned char 
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  ch              1    5[BANK0 ] unsigned char 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  2    2[BANK0 ] unsigned int 
  7259 ;; Registers used:
  7260 ;;		wreg, status,2, status,0, pclath, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 1F/1
  7263 ;;		On exit  : 1F/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7266 ;;      Params:         0       2       0       0
  7267 ;;      Locals:         0       1       0       0
  7268 ;;      Temps:          0       1       0       0
  7269 ;;      Totals:         0       4       0       0
  7270 ;;Total ram usage:        4 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    6
  7273 ;; This function calls:
  7274 ;;		_AdcChSelect
  7275 ;;		_AdcGetResult
  7276 ;;		_AdcGo
  7277 ;;		_AdcIsBusy
  7278 ;; This function is called by:
  7279 ;;		_RfSendPowerState
  7280 ;;		_main
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _AdcSample
  7286  0E2C                     _AdcSample:	
  7287                           
  7288                           ;incstack = 0
  7289                           ; Regs used in _AdcSample: [wreg+status,2+status,0+pclath+cstack]
  7290                           ;AdcSample@ch stored from wreg
  7291  0E2C  0020               	movlb	0	; select bank0
  7292  0E2D  00A5               	movwf	AdcSample@ch
  7293                           
  7294                           ;adc16.c: 83: AdcChSelect(ch);
  7295  0E2E  0825               	movf	AdcSample@ch,w
  7296  0E2F  265A  3188         	fcall	_AdcChSelect
  7297                           
  7298                           ;adc16.c: 86: AdcGo();
  7299  0E31  2654  3188         	fcall	_AdcGo
  7300                           
  7301                           ;adc16.c: 87: _delay((unsigned long)((200)*(16000000/4000000.0)));
  7302  0E33  30C7               	movlw	199
  7303  0E34  0020               	movlb	0	; select bank0
  7304  0E35  00A4               	movwf	??_AdcSample
  7305  0E36                     u2867:	
  7306  0E36  0000               	nop
  7307  0E37  0BA4               	decfsz	??_AdcSample,f
  7308  0E38  2E36               	goto	u2867
  7309  0E39  2E3A               	nop2	;nop
  7310  0E3A  0000               	nop
  7311  0E3B                     l2800:	
  7312                           ;adc16.c: 88: while (AdcIsBusy());
  7313                           
  7314  0E3B  2656  3188         	fcall	_AdcIsBusy
  7315  0E3D  3800               	iorlw	0
  7316  0E3E  1D03               	skipz
  7317  0E3F  2E3B               	goto	l2800
  7318                           
  7319                           ;adc16.c: 89: AdcGo();
  7320  0E40  2654  3188         	fcall	_AdcGo
  7321  0E42                     l2804:	
  7322                           ;adc16.c: 90: while (AdcIsBusy());
  7323                           
  7324  0E42  2656  3188         	fcall	_AdcIsBusy
  7325  0E44  3800               	iorlw	0
  7326  0E45  1D03               	skipz
  7327  0E46  2E42               	goto	l2804
  7328                           
  7329                           ;psect for function _AdcGetResult
  7330                           
  7331                           ;adc16.c: 92: return AdcGetResult();
  7332  0E47                     i1L_AdcGetResult:	
  7333  0E47                     i1Ll2784:	
  7334                           
  7335                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  7336  0E47  081C               	movf	28,w	;volatile
  7337  0E48  0020               	movlb	0	; select bank0
  7338  0E49  00A1               	movwf	?_AdcGetResult+1
  7339  0E4A  01A0               	clrf	?_AdcGetResult
  7340  0E4B  0021               	movlb	1	; select bank1
  7341  0E4C  081B               	movf	27,w	;volatile
  7342  0E4D  0020               	movlb	0	; select bank0
  7343  0E4E  04A0               	iorwf	?_AdcGetResult,f
  7344  0E4F                     i1Ll79:	
  7345  0E4F  0821               	movf	?_AdcGetResult+1,w
  7346  0E50  00A3               	movwf	?_AdcSample+1
  7347  0E51  0820               	movf	?_AdcGetResult,w
  7348  0E52  00A2               	movwf	?_AdcSample
  7349  0E53  0008               	return
  7350  0E54                     __end_of_AdcSample:	
  7351  0E54                     __ptext12:	
  7352 ;; *************** function _AdcGo *****************
  7353 ;; Defined at:
  7354 ;;		line 29 in file "../../../src/bsp/pic16/adc16.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;		None               void
  7361 ;; Registers used:
  7362 ;;		None
  7363 ;; Tracked objects:
  7364 ;;		On entry : 1F/1
  7365 ;;		On exit  : 1F/1
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7368 ;;      Params:         0       0       0       0
  7369 ;;      Locals:         0       0       0       0
  7370 ;;      Temps:          0       0       0       0
  7371 ;;      Totals:         0       0       0       0
  7372 ;;Total ram usage:        0 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    5
  7375 ;; This function calls:
  7376 ;;		Nothing
  7377 ;; This function is called by:
  7378 ;;		_AdcSample
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function _AdcGo
  7384  0E54                     _AdcGo:	
  7385                           
  7386                           ;adc16.c: 31: ADCON0 |= 1<<1;
  7387                           
  7388                           ;incstack = 0
  7389                           ; Regs used in _AdcGo: []
  7390  0E54  149D               	bsf	29,1	;volatile
  7391  0E55  0008               	return
  7392  0E56                     __end_of_AdcGo:	
  7393  0E56                     __ptext11:	
  7394 ;; *************** function _AdcIsBusy *****************
  7395 ;; Defined at:
  7396 ;;		line 34 in file "../../../src/bsp/pic16/adc16.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;		None
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;		None
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1    wreg      unsigned char 
  7403 ;; Registers used:
  7404 ;;		wreg, status,2, status,0
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/1
  7407 ;;		On exit  : 1F/1
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7410 ;;      Params:         0       0       0       0
  7411 ;;      Locals:         0       0       0       0
  7412 ;;      Temps:          0       0       0       0
  7413 ;;      Totals:         0       0       0       0
  7414 ;;Total ram usage:        0 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    5
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_AdcSample
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           
  7425                           ;psect for function _AdcIsBusy
  7426  0E56                     _AdcIsBusy:	
  7427                           
  7428                           ;adc16.c: 36: return ((ADCON0 >> 1) & 1);
  7429                           
  7430                           ;incstack = 0
  7431                           ; Regs used in _AdcIsBusy: [wreg+status,2+status,0]
  7432  0E56  0021               	movlb	1	; select bank1
  7433  0E57  361D               	lsrf	29,w	;volatile
  7434  0E58  3901               	andlw	1
  7435  0E59  0008               	return
  7436  0E5A                     __end_of_AdcIsBusy:	
  7437  0E5A                     __ptext14:	
  7438 ;; *************** function _AdcChSelect *****************
  7439 ;; Defined at:
  7440 ;;		line 76 in file "../../../src/bsp/pic16/adc16.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  channel         1    wreg     unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  channel         1    0[BANK0 ] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;		None               void
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0
  7449 ;; Tracked objects:
  7450 ;;		On entry : 1F/0
  7451 ;;		On exit  : 1F/1
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7454 ;;      Params:         0       0       0       0
  7455 ;;      Locals:         0       1       0       0
  7456 ;;      Temps:          0       0       0       0
  7457 ;;      Totals:         0       1       0       0
  7458 ;;Total ram usage:        1 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    5
  7461 ;; This function calls:
  7462 ;;		Nothing
  7463 ;; This function is called by:
  7464 ;;		_AdcSample
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           
  7469                           ;psect for function _AdcChSelect
  7470  0E5A                     _AdcChSelect:	
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in _AdcChSelect: [wreg+status,2+status,0]
  7474                           ;AdcChSelect@channel stored from wreg
  7475  0E5A  00A0               	movwf	AdcChSelect@channel
  7476                           
  7477                           ;adc16.c: 78: ADCON0 = channel << 2 | 1;
  7478  0E5B  0709               	addwf	9,w
  7479  0E5C  0709               	addwf	9,w
  7480  0E5D  3801               	iorlw	1
  7481  0E5E  0021               	movlb	1	; select bank1
  7482  0E5F  009D               	movwf	29	;volatile
  7483  0E60  0008               	return
  7484  0E61                     __end_of_AdcChSelect:	
  7485  0E61                     __ptext7:	
  7486 ;; *************** function _PwrAdcSleep *****************
  7487 ;; Defined at:
  7488 ;;		line 181 in file "../../../src/node/power.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		status,2, status,0, pclath, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/1
  7499 ;;		On exit  : 1F/1
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7502 ;;      Params:         0       0       0       0
  7503 ;;      Locals:         0       0       0       0
  7504 ;;      Temps:          0       0       0       0
  7505 ;;      Totals:         0       0       0       0
  7506 ;;Total ram usage:        0 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    6
  7509 ;; This function calls:
  7510 ;;		_AdcDeinit
  7511 ;; This function is called by:
  7512 ;;		_RfSendPowerState
  7513 ;;		_main
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function _PwrAdcSleep
  7519  0E61                     _PwrAdcSleep:	
  7520                           
  7521                           ;power.c: 183: ANSELC = 0;
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in _PwrAdcSleep: [status,2+status,0+pclath+cstack]
  7525  0E61  0023               	movlb	3	; select bank3
  7526  0E62  018E               	clrf	14	;volatile
  7527                           
  7528                           ;power.c: 184: TRISCbits.TRISC0 = 0;
  7529  0E63  0021               	movlb	1	; select bank1
  7530  0E64  100E               	bcf	14,0	;volatile
  7531                           
  7532                           ;power.c: 186: AdcDeinit();
  7533  0E65  2EBF               	ljmp	l2782
  7534  0E66                     __end_of_PwrAdcSleep:	
  7535  0E66                     __ptext5:	
  7536 ;; *************** function _PwrAdcWake *****************
  7537 ;; Defined at:
  7538 ;;		line 189 in file "../../../src/node/power.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;		None               void
  7545 ;; Registers used:
  7546 ;;		wreg, status,2, status,0, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/2
  7549 ;;		On exit  : 1F/1
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7552 ;;      Params:         0       0       0       0
  7553 ;;      Locals:         0       0       0       0
  7554 ;;      Temps:          0       0       0       0
  7555 ;;      Totals:         0       0       0       0
  7556 ;;Total ram usage:        0 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    6
  7559 ;; This function calls:
  7560 ;;		_AdcInit
  7561 ;; This function is called by:
  7562 ;;		_RfSendPowerState
  7563 ;;		_main
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           
  7568                           ;psect for function _PwrAdcWake
  7569  0E66                     _PwrAdcWake:	
  7570                           
  7571                           ;power.c: 191: ANSELCbits.ANSC0 = 1;
  7572                           
  7573                           ;incstack = 0
  7574                           ; Regs used in _PwrAdcWake: [wreg+status,2+status,0+pclath+cstack]
  7575  0E66  0023               	movlb	3	; select bank3
  7576  0E67  140E               	bsf	14,0	;volatile
  7577                           
  7578                           ;power.c: 192: TRISCbits.TRISC0 = 1;
  7579  0E68  0021               	movlb	1	; select bank1
  7580  0E69  140E               	bsf	14,0	;volatile
  7581                           
  7582                           ;power.c: 194: AdcInit();
  7583  0E6A  2EC6               	ljmp	l2774
  7584  0E6B                     __end_of_PwrAdcWake:	
  7585  0E6B                     __ptext1:	
  7586 ;; *************** function _RfSendSampleWeatherNode *****************
  7587 ;; Defined at:
  7588 ;;		line 44 in file "../../../src/rfstack/packets.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  7591 ;;		 -> mrf49xaInst(78), 
  7592 ;;  temperature     2    7[BANK0 ] unsigned int 
  7593 ;;  humidity        2    9[BANK0 ] unsigned int 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  inst            1   11[BANK0 ] PTR struct Mrf49xaMac_s
  7596 ;;		 -> mrf49xaInst(78), 
  7597 ;;  packet          1   12[BANK0 ] PTR struct rfTrcvPacket_
  7598 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;		None               void
  7601 ;; Registers used:
  7602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 1F/0
  7605 ;;		On exit  : 1E/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7608 ;;      Params:         0       4       0       0
  7609 ;;      Locals:         0       2       0       0
  7610 ;;      Temps:          0       0       0       0
  7611 ;;      Totals:         0       6       0       0
  7612 ;;Total ram usage:        6 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    6
  7615 ;; This function calls:
  7616 ;;		_Mrf49xaAllocPacket
  7617 ;;		_Mrf49xaTxPacket
  7618 ;; This function is called by:
  7619 ;;		_main
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           
  7624                           ;psect for function _RfSendSampleWeatherNode
  7625  0E6B                     _RfSendSampleWeatherNode:	
  7626                           
  7627                           ;packets.c: 46: rfTrcvPacket_t* packet = Mrf49xaAllocPacket(((Mrf49xaMac_t*)(&mrf49xaIns
      +                          t)));
  7628                           
  7629                           ;incstack = 0
  7630                           ; Regs used in _RfSendSampleWeatherNode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7631  0E6B  30A0               	movlw	_mrf49xaInst& (0+255)
  7632  0E6C  26B2  3188         	fcall	_Mrf49xaAllocPacket
  7633  0E6E  0020               	movlb	0	; select bank0
  7634  0E6F  00AC               	movwf	RfSendSampleWeatherNode@packet
  7635                           
  7636                           ;packets.c: 48: if (packet == (0))
  7637  0E70  08AC               	movf	RfSendSampleWeatherNode@packet,f
  7638  0E71  1903               	btfsc	3,2
  7639  0E72  0008               	return
  7640                           
  7641                           ;packets.c: 51: }
  7642                           ;packets.c: 53: packet->packet.size = 10;
  7643  0E73  0A2C               	incf	RfSendSampleWeatherNode@packet,w
  7644  0E74  0086               	movwf	6
  7645  0E75  300A               	movlw	10
  7646  0E76  0187               	clrf	7
  7647  0E77  0081               	movwf	1
  7648                           
  7649                           ;packets.c: 54: packet->packet.id = RF_APP_SAMPLE;
  7650  0E78  082C               	movf	RfSendSampleWeatherNode@packet,w
  7651  0E79  3E04               	addlw	4
  7652  0E7A  0086               	movwf	6
  7653  0E7B  0181               	clrf	1
  7654                           
  7655                           ;packets.c: 55: packet->packet.dst = 0xFF;
  7656  0E7C  082C               	movf	RfSendSampleWeatherNode@packet,w
  7657  0E7D  3E03               	addlw	3
  7658  0E7E  0086               	movwf	6
  7659  0E7F  30FF               	movlw	255
  7660  0E80  0081               	movwf	1
  7661                           
  7662                           ;packets.c: 57: packet->packet.data[0] = 0;
  7663  0E81  082C               	movf	RfSendSampleWeatherNode@packet,w
  7664  0E82  3E06               	addlw	6
  7665  0E83  0086               	movwf	6
  7666  0E84  0181               	clrf	1
  7667                           
  7668                           ;packets.c: 58: packet->packet.data[1] = 0;
  7669  0E85  082C               	movf	RfSendSampleWeatherNode@packet,w
  7670  0E86  3E07               	addlw	7
  7671  0E87  0086               	movwf	6
  7672  0E88  0181               	clrf	1
  7673                           
  7674                           ;packets.c: 59: packet->packet.data[2] = 0;
  7675  0E89  082C               	movf	RfSendSampleWeatherNode@packet,w
  7676  0E8A  3E08               	addlw	8
  7677  0E8B  0086               	movwf	6
  7678  0E8C  0181               	clrf	1
  7679                           
  7680                           ;packets.c: 60: packet->packet.data[3] = 0;
  7681  0E8D  082C               	movf	RfSendSampleWeatherNode@packet,w
  7682  0E8E  3E09               	addlw	9
  7683  0E8F  0086               	movwf	6
  7684  0E90  0181               	clrf	1
  7685                           
  7686                           ;packets.c: 62: packet->packet.data[4] = 0;
  7687  0E91  082C               	movf	RfSendSampleWeatherNode@packet,w
  7688  0E92  3E0A               	addlw	10
  7689  0E93  0086               	movwf	6
  7690  0E94  0181               	clrf	1
  7691                           
  7692                           ;packets.c: 64: packet->packet.data[6] = temperature >> 8;
  7693  0E95  082C               	movf	RfSendSampleWeatherNode@packet,w
  7694  0E96  3E0C               	addlw	12
  7695  0E97  0086               	movwf	6
  7696  0E98  0828               	movf	RfSendSampleWeatherNode@temperature+1,w
  7697  0E99  0081               	movwf	1
  7698                           
  7699                           ;packets.c: 65: packet->packet.data[5] = temperature & 0xFF;
  7700  0E9A  082C               	movf	RfSendSampleWeatherNode@packet,w
  7701  0E9B  3E0B               	addlw	11
  7702  0E9C  0086               	movwf	6
  7703  0E9D  0827               	movf	RfSendSampleWeatherNode@temperature,w
  7704  0E9E  0081               	movwf	1
  7705                           
  7706                           ;packets.c: 67: packet->packet.data[7] = 1;
  7707  0E9F  082C               	movf	RfSendSampleWeatherNode@packet,w
  7708  0EA0  3E0D               	addlw	13
  7709  0EA1  0086               	movwf	6
  7710  0EA2  0181               	clrf	1
  7711  0EA3  0A81               	incf	1,f
  7712                           
  7713                           ;packets.c: 69: packet->packet.data[9] = humidity >> 8;
  7714  0EA4  082C               	movf	RfSendSampleWeatherNode@packet,w
  7715  0EA5  3E0F               	addlw	15
  7716  0EA6  0086               	movwf	6
  7717  0EA7  082A               	movf	RfSendSampleWeatherNode@humidity+1,w
  7718  0EA8  0081               	movwf	1
  7719                           
  7720                           ;packets.c: 70: packet->packet.data[8] = humidity & 0xFF;
  7721  0EA9  082C               	movf	RfSendSampleWeatherNode@packet,w
  7722  0EAA  3E0E               	addlw	14
  7723  0EAB  0086               	movwf	6
  7724  0EAC  0829               	movf	RfSendSampleWeatherNode@humidity,w
  7725  0EAD  0081               	movwf	1
  7726                           
  7727                           ;packets.c: 72: Mrf49xaTxPacket(((Mrf49xaMac_t*)(&mrf49xaInst)), packet, ((uint8_t)0), (
      +                          (uint8_t)1));
  7728  0EAE  082C               	movf	RfSendSampleWeatherNode@packet,w
  7729  0EAF  27D1  3188         	fcall	PL24	;call to abstracted procedure
  7730  0EB1  2B61               	ljmp	l3188
  7731  0EB2                     __end_of_RfSendSampleWeatherNode:	
  7732  0EB2                     __ptext9:	
  7733 ;; *************** function _Mrf49xaAllocPacket *****************
  7734 ;; Defined at:
  7735 ;;		line 109 in file "../../../src/devices/mrf49xa_mac.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  7738 ;;		 -> mrf49xaInst(78), 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
  7741 ;;		 -> mrf49xaInst(78), 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      PTR struct rfTrcvPacket_
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0
  7746 ;; Tracked objects:
  7747 ;;		On entry : 1F/0
  7748 ;;		On exit  : 1F/1
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7751 ;;      Params:         0       0       0       0
  7752 ;;      Locals:         0       1       0       0
  7753 ;;      Temps:          0       0       0       0
  7754 ;;      Totals:         0       1       0       0
  7755 ;;Total ram usage:        1 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    5
  7758 ;; This function calls:
  7759 ;;		Nothing
  7760 ;; This function is called by:
  7761 ;;		_RfSendPowerState
  7762 ;;		_RfSendSampleWeatherNode
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           
  7767                           ;psect for function _Mrf49xaAllocPacket
  7768  0EB2                     _Mrf49xaAllocPacket:	
  7769                           
  7770                           ;mrf49xa_mac.c: 111: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_FREE)
  7771                           
  7772                           ;incstack = 0
  7773                           ; Regs used in _Mrf49xaAllocPacket: [wreg+status,2+status,0]
  7774  0EB2  0021               	movlb	1	; select bank1
  7775  0EB3  08A3               	movf	(_mrf49xaInst^(0+128)+3),f
  7776  0EB4  1D03               	skipz
  7777  0EB5  2EB9               	goto	l3290
  7778                           
  7779                           ;mrf49xa_mac.c: 112: {
  7780                           ;mrf49xa_mac.c: 113: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state = PKT_SW_BUSY;
  7781  0EB6  3006               	movlw	6
  7782  0EB7  00A3               	movwf	(_mrf49xaInst^(0+128)+3)
  7783                           
  7784                           ;mrf49xa_mac.c: 114: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
  7785  0EB8  34A3               	retlw	(_mrf49xaInst+3)& (0+255)
  7786  0EB9                     l3290:	
  7787                           
  7788                           ;mrf49xa_mac.c: 115: }
  7789                           ;mrf49xa_mac.c: 117: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_FREE)
  7790  0EB9  08BB               	movf	(_mrf49xaInst^(0+128)+27),f
  7791  0EBA  1D03               	skipz
  7792  0EBB  3400               	retlw	0
  7793                           
  7794                           ;mrf49xa_mac.c: 118: {
  7795                           ;mrf49xa_mac.c: 119: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state = PKT_SW_BUSY;
  7796  0EBC  3006               	movlw	6
  7797  0EBD  00BB               	movwf	(_mrf49xaInst^(0+128)+27)
  7798                           
  7799                           ;mrf49xa_mac.c: 120: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1]);
  7800  0EBE  34BB               	retlw	(_mrf49xaInst+27)& (0+255)
  7801  0EBF                     __end_of_Mrf49xaAllocPacket:	
  7802                           ;mrf49xa_mac.c: 121: }
  7803                           ;mrf49xa_mac.c: 123: return (0);
  7804                           
  7805  0EBF                     __ptext8:	
  7806 ;; *************** function _AdcDeinit *****************
  7807 ;; Defined at:
  7808 ;;		line 15 in file "../../../src/bsp/pic16/adc16.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;		None
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;		None
  7813 ;; Return value:  Size  Location     Type
  7814 ;;		None               void
  7815 ;; Registers used:
  7816 ;;		status,2
  7817 ;; Tracked objects:
  7818 ;;		On entry : 1F/1
  7819 ;;		On exit  : 1F/1
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7822 ;;      Params:         0       0       0       0
  7823 ;;      Locals:         0       0       0       0
  7824 ;;      Temps:          0       0       0       0
  7825 ;;      Totals:         0       0       0       0
  7826 ;;Total ram usage:        0 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; Hardware stack levels required when called:    5
  7829 ;; This function calls:
  7830 ;;		Nothing
  7831 ;; This function is called by:
  7832 ;;		_PwrAdcSleep
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function _AdcDeinit
  7838  0EBF                     _AdcDeinit:	
  7839  0EBF                     l2782:	
  7840                           ;incstack = 0
  7841                           ; Regs used in _AdcDeinit: [status,2]
  7842                           
  7843                           
  7844                           ;adc16.c: 17: FVRCON = 0;
  7845  0EBF  0022               	movlb	2	; select bank2
  7846  0EC0  0197               	clrf	23	;volatile
  7847                           
  7848                           ;adc16.c: 19: ADCON2 = 0;
  7849  0EC1  0021               	movlb	1	; select bank1
  7850  0EC2  019F               	clrf	31	;volatile
  7851                           
  7852                           ;adc16.c: 20: ADCON1 = 0;
  7853  0EC3  019E               	clrf	30	;volatile
  7854                           
  7855                           ;adc16.c: 21: ADCON0 = 0;
  7856  0EC4  019D               	clrf	29	;volatile
  7857  0EC5  0008               	return
  7858  0EC6                     __end_of_AdcDeinit:	
  7859  0EC6                     __ptext6:	
  7860 ;; *************** function _AdcInit *****************
  7861 ;; Defined at:
  7862 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;		None
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;		None
  7867 ;; Return value:  Size  Location     Type
  7868 ;;		None               void
  7869 ;; Registers used:
  7870 ;;		wreg, status,2
  7871 ;; Tracked objects:
  7872 ;;		On entry : 1F/1
  7873 ;;		On exit  : 1F/1
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7876 ;;      Params:         0       0       0       0
  7877 ;;      Locals:         0       0       0       0
  7878 ;;      Temps:          0       0       0       0
  7879 ;;      Totals:         0       0       0       0
  7880 ;;Total ram usage:        0 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    5
  7883 ;; This function calls:
  7884 ;;		Nothing
  7885 ;; This function is called by:
  7886 ;;		_PwrAdcWake
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _AdcInit
  7892  0EC6                     _AdcInit:	
  7893  0EC6                     l2774:	
  7894                           ;incstack = 0
  7895                           ; Regs used in _AdcInit: [wreg+status,2]
  7896                           
  7897                           
  7898                           ;adc16.c: 6: FVRCON = 0b11100001;
  7899  0EC6  30E1               	movlw	225
  7900  0EC7  0022               	movlb	2	; select bank2
  7901  0EC8  0097               	movwf	23	;volatile
  7902                           
  7903                           ;adc16.c: 8: ADCON2 = 0b00000000;
  7904  0EC9  0021               	movlb	1	; select bank1
  7905  0ECA  019F               	clrf	31	;volatile
  7906                           
  7907                           ;adc16.c: 9: ADCON1 = 0b11110000;
  7908  0ECB  30F0               	movlw	240
  7909  0ECC  009E               	movwf	30	;volatile
  7910                           
  7911                           ;adc16.c: 10: ADCON0 = 0b00000000;
  7912  0ECD  019D               	clrf	29	;volatile
  7913                           
  7914                           ;adc16.c: 12: ADCON0 = 0b00010011;
  7915  0ECE  3013               	movlw	19
  7916  0ECF  009D               	movwf	29	;volatile
  7917  0ED0  0008               	return
  7918  0ED1                     __end_of_AdcInit:	
  7919  0ED1                     __ptext3:	
  7920 ;; *************** function _printf *****************
  7921 ;; Defined at:
  7922 ;;		line 464 in file "/opt/microchip/xc8/v1.30/sources/common/doprnt.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  f               1    wreg     PTR const unsigned char 
  7925 ;;		 -> STR_1(4), 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  f               1    1[BANK0 ] PTR const unsigned char 
  7928 ;;		 -> STR_1(4), 
  7929 ;;  _val            4    0        struct .
  7930 ;;  c               1    0[BANK0 ] char 
  7931 ;;  flag            1    0        unsigned char 
  7932 ;;  prec            1    0        char 
  7933 ;;  ap              1    0        PTR void [1]
  7934 ;;		 -> ?_printf(2), 
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  2  570[COMMON] int 
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0, pclath, cstack
  7939 ;; Tracked objects:
  7940 ;;		On entry : 1F/0
  7941 ;;		On exit  : 1F/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7944 ;;      Params:         0       0       0       0
  7945 ;;      Locals:         0       2       0       0
  7946 ;;      Temps:          0       0       0       0
  7947 ;;      Totals:         0       2       0       0
  7948 ;;Total ram usage:        2 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    6
  7951 ;; This function calls:
  7952 ;;		_putch
  7953 ;; This function is called by:
  7954 ;;		_RfSendPowerState
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           
  7959                           ;psect for function _printf
  7960  0ED1                     _printf:	
  7961                           
  7962                           ;incstack = 0
  7963                           ; Regs used in _printf: [wreg+status,2+status,0+pclath+cstack]
  7964                           ;printf@f stored from wreg
  7965  0ED1  00A1               	movwf	printf@f
  7966  0ED2                     l3532:	
  7967                           ;doprnt.c: 551: continue;
  7968                           
  7969                           ;doprnt.c: 545: while(c = *f++) {
  7970                           
  7971  0ED2  0821               	movf	printf@f,w
  7972  0ED3  0AA1               	incf	printf@f,f
  7973  0ED4  3182               	movlp	high __stringtab
  7974  0ED5  000A               	callw
  7975  0ED6  3188               	pagesel	$	;select current page
  7976  0ED7  00A0               	movwf	printf@c
  7977  0ED8  08A0               	movf	printf@c,f
  7978  0ED9  1903               	btfsc	3,2
  7979  0EDA  0008               	return
  7980                           
  7981                           ;doprnt.c: 549: {
  7982                           ;doprnt.c: 550: (putch(c) );
  7983  0EDB  26DE  3188         	fcall	_putch
  7984  0EDD  2ED2               	goto	l3532
  7985  0EDE                     __end_of_printf:	
  7986  0EDE                     __ptext4:	
  7987 ;; *************** function _putch *****************
  7988 ;; Defined at:
  7989 ;;		line 7 in file "/opt/microchip/xc8/v1.30/sources/common/putch.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  c               1    wreg     unsigned char 
  7992 ;; Auto vars:     Size  Location     Type
  7993 ;;  c               1    0[COMMON] unsigned char 
  7994 ;; Return value:  Size  Location     Type
  7995 ;;		None               void
  7996 ;; Registers used:
  7997 ;;		wreg
  7998 ;; Tracked objects:
  7999 ;;		On entry : 1F/0
  8000 ;;		On exit  : 1F/0
  8001 ;;		Unchanged: 1F/0
  8002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8003 ;;      Params:         0       0       0       0
  8004 ;;      Locals:         0       0       0       0
  8005 ;;      Temps:          0       0       0       0
  8006 ;;      Totals:         0       0       0       0
  8007 ;;Total ram usage:        0 bytes
  8008 ;; Hardware stack levels used:    1
  8009 ;; Hardware stack levels required when called:    5
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_printf
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           
  8018                           ;psect for function _putch
  8019  0EDE                     _putch:	
  8020                           
  8021                           ;incstack = 0
  8022                           ; Regs used in _putch: [wreg]
  8023  0EDE  0008               	return
  8024  0EDF                     __end_of_putch:	
  8025  0EDF                     __ptext51:	
  8026 ;; *************** function _handleCfgCmd *****************
  8027 ;; Defined at:
  8028 ;;		line 124 in file "../../../src/rfstack/client.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  8031 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  8034 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;		None               void
  8037 ;; Registers used:
  8038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 1F/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8044 ;;      Params:         0       0       0       0
  8045 ;;      Locals:         0       1       0       0
  8046 ;;      Temps:          0       0       0       0
  8047 ;;      Totals:         0       1       0       0
  8048 ;;Total ram usage:        1 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    9
  8051 ;; This function calls:
  8052 ;;		_CfgLoad
  8053 ;;		_CfgSave
  8054 ;; This function is called by:
  8055 ;;		_HandlePacket
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _handleCfgCmd
  8061  0EDF                     _handleCfgCmd:	
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in _handleCfgCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8065                           ;handleCfgCmd@packet stored from wreg
  8066  0EDF  00A8               	movwf	handleCfgCmd@packet
  8067                           
  8068                           ;client.c: 126: switch (packet->packet.data[0])
  8069  0EE0  2EF6               	goto	l3498
  8070  0EE1                     l3488:	
  8071                           
  8072                           ;client.c: 129: CfgSave();
  8073  0EE1  2FF9               	ljmp	l3500
  8074  0EE2                     l3490:	
  8075                           ;client.c: 130: break;
  8076                           
  8077                           
  8078                           ;client.c: 133: CfgLoad();
  8079  0EE2  2AE5               	ljmp	l3502
  8080  0EE3                     l3492:	
  8081                           ;client.c: 134: break;
  8082                           
  8083                           
  8084                           ;client.c: 137: packet->packet.size = 2;
  8085  0EE3  0A28               	incf	handleCfgCmd@packet,w
  8086  0EE4  0086               	movwf	6
  8087  0EE5  3002               	movlw	2
  8088  0EE6  27BA               	fcall	PL16	;call to abstracted procedure
  8089  0EE7  3002               	movlw	2
  8090  0EE8  0081               	movwf	1
  8091                           
  8092                           ;client.c: 139: break;
  8093  0EE9  0008               	return
  8094  0EEA                     l3494:	
  8095                           
  8096                           ;client.c: 142: packet->packet.size = 3;
  8097  0EEA  0A28               	incf	handleCfgCmd@packet,w
  8098  0EEB  0086               	movwf	6
  8099  0EEC  3003               	movlw	3
  8100                           
  8101                           ;client.c: 143: packet->packet.data[1] = cfgRam.checksum >> 8;
  8102  0EED  27BA               	fcall	PL16	;call to abstracted procedure
  8103  0EEE  083E               	movf	_cfgRam+8,w
  8104  0EEF  0081               	movwf	1
  8105                           
  8106                           ;client.c: 144: packet->packet.data[2] = cfgRam.checksum & 0xFF;
  8107  0EF0  0828               	movf	handleCfgCmd@packet,w
  8108  0EF1  3E08               	addlw	8
  8109  0EF2  0086               	movwf	6
  8110  0EF3  083D               	movf	_cfgRam+7,w
  8111  0EF4  0081               	movwf	1
  8112                           
  8113                           ;client.c: 145: break;
  8114  0EF5  0008               	return
  8115  0EF6                     l3498:	
  8116  0EF6  0828               	movf	handleCfgCmd@packet,w
  8117  0EF7  3E06               	addlw	6
  8118  0EF8  0086               	movwf	6
  8119  0EF9  0187               	clrf	7
  8120  0EFA  0801               	movf	1,w
  8121                           
  8122                           ; Switch size 1, requested type "space"
  8123                           ; Number of cases is 4, Range of values is 1 to 4
  8124                           ; switch strategies available:
  8125                           ; Name         Instructions Cycles
  8126                           ; simple_byte           13     7 (average)
  8127                           ; direct_byte           17     9 (fixed)
  8128                           ; jumptable            263     9 (fixed)
  8129                           ;	Chosen strategy is simple_byte
  8130  0EFB  3A01               	xorlw	1	; case 1
  8131  0EFC  1903               	skipnz
  8132  0EFD  2EE1               	goto	l3488
  8133  0EFE  3A03               	xorlw	3	; case 2
  8134  0EFF  1903               	skipnz
  8135  0F00  2EE2               	goto	l3490
  8136  0F01  3A01               	xorlw	1	; case 3
  8137  0F02  1903               	skipnz
  8138  0F03  2EE3               	goto	l3492
  8139  0F04  3A07               	xorlw	7	; case 4
  8140  0F05  1903               	skipnz
  8141  0F06  2EEA               	goto	l3494
  8142  0F07  2F08               	goto	l545
  8143  0F08                     l545:	
  8144  0F08  0008               	return
  8145  0F09                     __end_of_handleCfgCmd:	
  8146  0F09                     __ptext48:	
  8147 ;; *************** function _handleCfgRead *****************
  8148 ;; Defined at:
  8149 ;;		line 102 in file "../../../src/rfstack/client.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  8152 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  8155 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8156 ;;  index           1    7[BANK0 ] unsigned char 
  8157 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;		None               void
  8160 ;; Registers used:
  8161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 1F/0
  8164 ;;		On exit  : 1F/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8167 ;;      Params:         0       0       0       0
  8168 ;;      Locals:         0       3       0       0
  8169 ;;      Temps:          0       0       0       0
  8170 ;;      Totals:         0       3       0       0
  8171 ;;Total ram usage:        3 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    6
  8174 ;; This function calls:
  8175 ;;		_CfgGetSizeByType
  8176 ;;		_memcpy
  8177 ;; This function is called by:
  8178 ;;		_HandlePacket
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           
  8183                           ;psect for function _handleCfgRead
  8184  0F09                     _handleCfgRead:	
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _handleCfgRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8188                           ;handleCfgRead@packet stored from wreg
  8189  0F09  00A8               	movwf	handleCfgRead@packet
  8190                           
  8191                           ;client.c: 104: uint8_t index = packet->packet.data[0];
  8192  0F0A  0086               	movwf	6
  8193  0F0B  0187               	clrf	7
  8194  0F0C  3F46               	moviw [6]fsr1
  8195  0F0D  00A7               	movwf	handleCfgRead@index
  8196                           
  8197                           ;client.c: 105: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  8198  0F0E  0727               	addwf	handleCfgRead@index,w
  8199  0F0F  0727               	addwf	handleCfgRead@index,w
  8200  0F10  3E68               	addlw	low (_parameters| (0+32768))
  8201  0F11  3182               	movlp	high __stringtab
  8202  0F12  000A               	callw
  8203  0F13  3188               	pagesel	$	;select current page
  8204  0F14  273A               	fcall	_CfgGetSizeByType
  8205  0F15  00A6               	movwf	handleCfgRead@nrOfBytes
  8206                           
  8207                           ;client.c: 107: packet->packet.size = nrOfBytes + 2;
  8208  0F16  0A28               	incf	handleCfgRead@packet,w
  8209  0F17  0086               	movwf	6
  8210  0F18  0187               	clrf	7
  8211  0F19  0826               	movf	handleCfgRead@nrOfBytes,w
  8212  0F1A  3E02               	addlw	2
  8213  0F1B  0081               	movwf	1
  8214                           
  8215                           ;client.c: 108: packet->packet.id = RF_CFG_READ;
  8216  0F1C  0828               	movf	handleCfgRead@packet,w
  8217  0F1D  3E04               	addlw	4
  8218  0F1E  0086               	movwf	6
  8219  0F1F  30B2               	movlw	178
  8220  0F20  0081               	movwf	1
  8221                           
  8222                           ;client.c: 110: packet->packet.data[1] = parameters[index].id;
  8223  0F21  0828               	movf	handleCfgRead@packet,w
  8224  0F22  3E07               	addlw	7
  8225  0F23  0086               	movwf	6
  8226  0F24  0827               	movf	handleCfgRead@index,w
  8227  0F25  0727               	addwf	handleCfgRead@index,w
  8228  0F26  0727               	addwf	handleCfgRead@index,w
  8229  0F27  3E69               	addlw	low ((_parameters| (0+32768)+1))
  8230  0F28  3182               	movlp	high __stringtab
  8231  0F29  000A               	callw
  8232  0F2A  3188               	pagesel	$	;select current page
  8233  0F2B  0081               	movwf	1
  8234                           
  8235                           ;client.c: 112: memcpy(packet->packet.data + 2, parameters[index].ptr, nrOfBytes);
  8236  0F2C  0827               	movf	handleCfgRead@index,w
  8237  0F2D  0727               	addwf	handleCfgRead@index,w
  8238  0F2E  0727               	addwf	handleCfgRead@index,w
  8239  0F2F  3E6A               	addlw	low ((_parameters| (0+32768)+2))
  8240  0F30  3182               	movlp	high __stringtab
  8241  0F31  000A               	callw
  8242  0F32  3188               	pagesel	$	;select current page
  8243  0F33  00A0               	movwf	memcpy@s1
  8244  0F34  0826               	movf	handleCfgRead@nrOfBytes,w
  8245  0F35  00A1               	movwf	memcpy@n
  8246  0F36  01A2               	clrf	memcpy@n+1
  8247  0F37  0828               	movf	handleCfgRead@packet,w
  8248  0F38  3E08               	addlw	8
  8249  0F39  2F67               	ljmp	_memcpy
  8250  0F3A                     __end_of_handleCfgRead:	
  8251  0F3A                     __ptext50:	
  8252 ;; *************** function _CfgGetSizeByType *****************
  8253 ;; Defined at:
  8254 ;;		line 29 in file "../../../src/node/config.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  type            1    wreg     enum E4251
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  type            1    0[BANK0 ] enum E4251
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  1    wreg      unsigned char 
  8261 ;; Registers used:
  8262 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8263 ;; Tracked objects:
  8264 ;;		On entry : 1F/0
  8265 ;;		On exit  : 1F/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8268 ;;      Params:         0       0       0       0
  8269 ;;      Locals:         0       1       0       0
  8270 ;;      Temps:          0       0       0       0
  8271 ;;      Totals:         0       1       0       0
  8272 ;;Total ram usage:        1 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; Hardware stack levels required when called:    5
  8275 ;; This function calls:
  8276 ;;		Nothing
  8277 ;; This function is called by:
  8278 ;;		_handleCfgRead
  8279 ;;		_handleCfgWrite
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           
  8284                           ;psect for function _CfgGetSizeByType
  8285  0F3A                     _CfgGetSizeByType:	
  8286                           
  8287                           ;incstack = 0
  8288                           ; Regs used in _CfgGetSizeByType: [wreg-fsr0h+status,2+status,0]
  8289                           ;CfgGetSizeByType@type stored from wreg
  8290  0F3A  00A0               	movwf	CfgGetSizeByType@type
  8291                           
  8292                           ;config.c: 31: switch(type)
  8293  0F3B  2F40               	goto	l3468
  8294  0F3C                     l3450:	
  8295  0F3C  3401               	retlw	1
  8296  0F3D                     l3454:	
  8297  0F3D  3402               	retlw	2
  8298  0F3E                     l3458:	
  8299  0F3E  3404               	retlw	4
  8300  0F3F                     l3462:	
  8301  0F3F  3400               	retlw	0
  8302  0F40                     l3468:	
  8303  0F40  0820               	movf	CfgGetSizeByType@type,w
  8304                           
  8305                           ; Switch size 1, requested type "space"
  8306                           ; Number of cases is 3, Range of values is 0 to 2
  8307                           ; switch strategies available:
  8308                           ; Name         Instructions Cycles
  8309                           ; simple_byte           10     6 (average)
  8310                           ; direct_byte           12     6 (fixed)
  8311                           ; jumptable            260     6 (fixed)
  8312                           ;	Chosen strategy is simple_byte
  8313  0F41  3A00               	xorlw	0	; case 0
  8314  0F42  1903               	skipnz
  8315  0F43  2F3C               	goto	l3450
  8316  0F44  3A01               	xorlw	1	; case 1
  8317  0F45  1903               	skipnz
  8318  0F46  2F3D               	goto	l3454
  8319  0F47  3A03               	xorlw	3	; case 2
  8320  0F48  1903               	skipnz
  8321  0F49  2F3E               	goto	l3458
  8322  0F4A  2F3F               	goto	l3462
  8323  0F4B  0008               	return
  8324  0F4C                     __end_of_CfgGetSizeByType:	
  8325  0F4C                     __ptext47:	
  8326 ;; *************** function _handleCfgWrite *****************
  8327 ;; Defined at:
  8328 ;;		line 115 in file "../../../src/rfstack/client.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  8331 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  8334 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8335 ;;  index           1    7[BANK0 ] unsigned char 
  8336 ;;  nrOfBytes       1    6[BANK0 ] unsigned char 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;		None               void
  8339 ;; Registers used:
  8340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8341 ;; Tracked objects:
  8342 ;;		On entry : 1F/0
  8343 ;;		On exit  : 1F/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8346 ;;      Params:         0       0       0       0
  8347 ;;      Locals:         0       3       0       0
  8348 ;;      Temps:          0       0       0       0
  8349 ;;      Totals:         0       3       0       0
  8350 ;;Total ram usage:        3 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    6
  8353 ;; This function calls:
  8354 ;;		_CfgGetSizeByType
  8355 ;;		_memcpy
  8356 ;; This function is called by:
  8357 ;;		_HandlePacket
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function _handleCfgWrite
  8363  0F4C                     _handleCfgWrite:	
  8364                           
  8365                           ;incstack = 0
  8366                           ; Regs used in _handleCfgWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8367                           ;handleCfgWrite@packet stored from wreg
  8368  0F4C  00A8               	movwf	handleCfgWrite@packet
  8369                           
  8370                           ;client.c: 117: uint8_t index = packet->packet.data[0];
  8371  0F4D  0086               	movwf	6
  8372  0F4E  0187               	clrf	7
  8373  0F4F  3F46               	moviw [6]fsr1
  8374  0F50  00A7               	movwf	handleCfgWrite@index
  8375                           
  8376                           ;client.c: 118: uint8_t nrOfBytes = CfgGetSizeByType(parameters[index].type);
  8377  0F51  0727               	addwf	handleCfgWrite@index,w
  8378  0F52  0727               	addwf	handleCfgWrite@index,w
  8379  0F53  3E68               	addlw	low (_parameters| (0+32768))
  8380  0F54  3182               	movlp	high __stringtab
  8381  0F55  000A               	callw
  8382  0F56  3188               	pagesel	$	;select current page
  8383  0F57  273A               	fcall	_CfgGetSizeByType
  8384  0F58  00A6               	movwf	handleCfgWrite@nrOfBytes
  8385                           
  8386                           ;client.c: 120: memcpy(parameters[index].ptr, packet->packet.data + 1, nrOfBytes);
  8387  0F59  0828               	movf	handleCfgWrite@packet,w
  8388  0F5A  3E07               	addlw	7
  8389  0F5B  00A0               	movwf	memcpy@s1
  8390  0F5C  0826               	movf	handleCfgWrite@nrOfBytes,w
  8391  0F5D  00A1               	movwf	memcpy@n
  8392  0F5E  01A2               	clrf	memcpy@n+1
  8393  0F5F  0827               	movf	handleCfgWrite@index,w
  8394  0F60  0727               	addwf	handleCfgWrite@index,w
  8395  0F61  0727               	addwf	handleCfgWrite@index,w
  8396  0F62  3E6A               	addlw	low ((_parameters| (0+32768)+2))
  8397  0F63  3182               	movlp	high __stringtab
  8398  0F64  000A               	callw
  8399  0F65  3188               	pagesel	$	;select current page
  8400  0F66  2F67               	ljmp	_memcpy
  8401  0F67                     __end_of_handleCfgWrite:	
  8402  0F67                     __ptext49:	
  8403 ;; *************** function _memcpy *****************
  8404 ;; Defined at:
  8405 ;;		line 11 in file "/opt/microchip/xc8/v1.30/sources/common/memcpy.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;  d1              1    wreg     PTR void 
  8408 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8409 ;;		 -> handleCfgRead@packet..(21), 
  8410 ;;  s1              1    0[BANK0 ] PTR const void 
  8411 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8412 ;;		 -> handleCfgWrite@packet..(21), 
  8413 ;;  n               2    1[BANK0 ] unsigned int 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  d1              1    5[BANK0 ] PTR void 
  8416 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8417 ;;		 -> handleCfgRead@packet..(21), 
  8418 ;;  s               1    4[BANK0 ] PTR const unsigned char 
  8419 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8420 ;;		 -> handleCfgWrite@packet..(21), 
  8421 ;;  d               1    3[BANK0 ] PTR unsigned char 
  8422 ;;		 -> mrf49xaInst.rxPacket...data(16), NULL...data(16), mrf49xaInst...data(16), cfgRam(9), 
  8423 ;;		 -> handleCfgRead@packet..(21), 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      PTR void 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 1F/0
  8430 ;;		On exit  : 1F/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8433 ;;      Params:         0       3       0       0
  8434 ;;      Locals:         0       3       0       0
  8435 ;;      Temps:          0       0       0       0
  8436 ;;      Totals:         0       6       0       0
  8437 ;;Total ram usage:        6 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    5
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_handleCfgRead
  8444 ;;		_handleCfgWrite
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           
  8449                           ;psect for function _memcpy
  8450  0F67                     _memcpy:	
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  8454                           ;memcpy@d1 stored from wreg
  8455  0F67  00A5               	movwf	memcpy@d1
  8456  0F68  0820               	movf	memcpy@s1,w
  8457  0F69  00A4               	movwf	memcpy@s
  8458  0F6A  0825               	movf	memcpy@d1,w
  8459  0F6B  00A3               	movwf	memcpy@d
  8460  0F6C                     l3478:	
  8461  0F6C  3001               	movlw	1
  8462  0F6D  02A1               	subwf	memcpy@n,f
  8463  0F6E  3000               	movlw	0
  8464  0F6F  3BA2               	subwfb	memcpy@n+1,f
  8465  0F70  0A21               	incf	memcpy@n,w
  8466  0F71  1903               	skipnz
  8467  0F72  0A22               	incf	memcpy@n+1,w
  8468  0F73  1903               	btfsc	3,2
  8469  0F74  0008               	return
  8470  0F75  0823               	movf	memcpy@d,w
  8471  0F76  0086               	movwf	6
  8472  0F77  0187               	clrf	7
  8473  0F78  0824               	movf	memcpy@s,w
  8474  0F79  0084               	movwf	4
  8475  0F7A  0185               	clrf	5
  8476  0F7B  0800               	movf	0,w
  8477  0F7C  0081               	movwf	1
  8478  0F7D  0AA4               	incf	memcpy@s,f
  8479  0F7E  0AA3               	incf	memcpy@d,f
  8480  0F7F  2F6C               	goto	l3478
  8481  0F80                     __end_of_memcpy:	
  8482  0F80                     __ptext17:	
  8483 ;; *************** function _PwrSensorInit *****************
  8484 ;; Defined at:
  8485 ;;		line 153 in file "../../../src/node/power.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;		None
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;		None               void
  8492 ;; Registers used:
  8493 ;;		None
  8494 ;; Tracked objects:
  8495 ;;		On entry : 17F/1
  8496 ;;		On exit  : 17F/2
  8497 ;;		Unchanged: 160/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8499 ;;      Params:         0       0       0       0
  8500 ;;      Locals:         0       0       0       0
  8501 ;;      Temps:          0       0       0       0
  8502 ;;      Totals:         0       0       0       0
  8503 ;;Total ram usage:        0 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    5
  8506 ;; This function calls:
  8507 ;;		Nothing
  8508 ;; This function is called by:
  8509 ;;		_main
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           
  8514                           ;psect for function _PwrSensorInit
  8515  0F80                     _PwrSensorInit:	
  8516                           
  8517                           ;power.c: 155: TRISCbits.TRISC2 = 0;
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in _PwrSensorInit: []
  8521  0F80  110E               	bcf	14,2	;volatile
  8522                           
  8523                           ;power.c: 157: LATCbits.LATC2 = 0;
  8524  0F81  0022               	movlb	2	; select bank2
  8525  0F82  110E               	bcf	14,2	;volatile
  8526  0F83  0008               	return
  8527  0F84                     __end_of_PwrSensorInit:	
  8528  0F84                     __ptext15:	
  8529 ;; *************** function _PwrSensorWake *****************
  8530 ;; Defined at:
  8531 ;;		line 165 in file "../../../src/node/power.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;		None
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;		None               void
  8538 ;; Registers used:
  8539 ;;		None
  8540 ;; Tracked objects:
  8541 ;;		On entry : 1F/0
  8542 ;;		On exit  : 1F/2
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8545 ;;      Params:         0       0       0       0
  8546 ;;      Locals:         0       0       0       0
  8547 ;;      Temps:          0       0       0       0
  8548 ;;      Totals:         0       0       0       0
  8549 ;;Total ram usage:        0 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    5
  8552 ;; This function calls:
  8553 ;;		Nothing
  8554 ;; This function is called by:
  8555 ;;		_main
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           
  8560                           ;psect for function _PwrSensorWake
  8561  0F84                     _PwrSensorWake:	
  8562                           
  8563                           ;power.c: 167: LATCbits.LATC2 = 1;
  8564                           
  8565                           ;incstack = 0
  8566                           ; Regs used in _PwrSensorWake: []
  8567  0F84  0022               	movlb	2	; select bank2
  8568  0F85  150E               	bsf	14,2	;volatile
  8569  0F86  0008               	return
  8570  0F87                     __end_of_PwrSensorWake:	
  8571  0F87                     PL8:	
  8572  0F87  30F0               	movlw	-16
  8573  0F88  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
  8574  0F89  0AD3               	incf	(_mrf49xaInst^(0+128)+51),f
  8575  0F8A  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  8576  0F8B  30CF               	movlw	-49
  8577  0F8C  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
  8578  0F8D  0020               	movlb	0	; select bank0
  8579  0F8E  0322               	decf	Mrf49xaTxPacket@needAck,w
  8580  0F8F  3000               	movlw	0
  8581  0F90  1903               	skipnz
  8582  0F91  3001               	movlw	1
  8583  0F92  00A3               	movwf	??_Mrf49xaTxPacket
  8584  0F93  0EA3               	swapf	??_Mrf49xaTxPacket,f
  8585  0F94  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8586  0F95  0DA3               	rlf	??_Mrf49xaTxPacket,f
  8587  0F96  0021               	movlb	1	; select bank1
  8588  0F97  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  8589  0F98  0020               	movlb	0	; select bank0
  8590  0F99  0623               	xorwf	??_Mrf49xaTxPacket,w
  8591  0F9A  393F               	andlw	-193
  8592  0F9B  0623               	xorwf	??_Mrf49xaTxPacket,w
  8593  0F9C  0021               	movlb	1	; select bank1
  8594  0F9D  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  8595  0F9E  0008               	return
  8596  0F9F                     __end_ofPL8:	
  8597  0F9F                     PL10:	
  8598  0F9F  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  8599  0FA0  390F               	andlw	15
  8600  0FA1  0020               	movlb	0	; select bank0
  8601  0FA2  00AD               	movwf	??_Mrf49xaTick
  8602  0FA3  0AAD               	incf	??_Mrf49xaTick,f
  8603  0FA4  0021               	movlb	1	; select bank1
  8604  0FA5  086A               	movf	(_mrf49xaInst^(0+128)+74),w
  8605  0FA6  0020               	movlb	0	; select bank0
  8606  0FA7  062D               	xorwf	??_Mrf49xaTick,w
  8607  0FA8  39F0               	andlw	-16
  8608  0FA9  062D               	xorwf	??_Mrf49xaTick,w
  8609  0FAA  0021               	movlb	1	; select bank1
  8610  0FAB  00EA               	movwf	(_mrf49xaInst^(0+128)+74)
  8611  0FAC  0008               	return
  8612  0FAD                     __end_ofPL10:	
  8613  0FAD                     PL12:	
  8614  0FAD  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  8615  0FAE  397F               	andlw	127
  8616  0FAF  0020               	movlb	0	; select bank0
  8617  0FB0  00A5               	movwf	??_Mrf49xaServe
  8618  0FB1  0AA5               	incf	??_Mrf49xaServe,f
  8619  0FB2  0021               	movlb	1	; select bank1
  8620  0FB3  086D               	movf	(_mrf49xaInst^(0+128)+77),w
  8621  0FB4  0020               	movlb	0	; select bank0
  8622  0FB5  0625               	xorwf	??_Mrf49xaServe,w
  8623  0FB6  3980               	andlw	-128
  8624  0FB7  0625               	xorwf	??_Mrf49xaServe,w
  8625  0FB8  0021               	movlb	1	; select bank1
  8626  0FB9  0008               	return
  8627  0FBA                     __end_ofPL12:	
  8628  0FBA                     PL16:	
  8629  0FBA  0187               	clrf	7
  8630  0FBB  0081               	movwf	1
  8631  0FBC  0828               	movf	handleCfgCmd@packet,w
  8632  0FBD  3E07               	addlw	7
  8633  0FBE  0086               	movwf	6
  8634  0FBF  0008               	return
  8635  0FC0                     __end_ofPL16:	
  8636  0FC0                     PL18:	
  8637  0FC0  0020               	movlb	0	; select bank0
  8638  0FC1  0827               	movf	Mrf49xaServe@data,w
  8639  0FC2  0081               	movwf	1
  8640  0FC3  0021               	movlb	1	; select bank1
  8641  0FC4  0822               	movf	(_mrf49xaInst+2)^(0+128),w
  8642  0FC5  0008               	return
  8643  0FC6                     __end_ofPL18:	
  8644  0FC6                     PL20:	
  8645  0FC6  170D               	bsf	13,6	;volatile
  8646  0FC7  160D               	bsf	13,4	;volatile
  8647  0FC8  0021               	movlb	1	; select bank1
  8648  0FC9  130D               	bcf	13,6	;volatile
  8649  0FCA  120D               	bcf	13,4	;volatile
  8650  0FCB  0008               	return
  8651  0FCC                     __end_ofPL20:	
  8652  0FCC                     PL22:	
  8653  0FCC  3040               	movlw	64
  8654  0FCD  0020               	movlb	0	; select bank0
  8655  0FCE  00A0               	movwf	Sleepy@ms
  8656  0FCF  01A1               	clrf	Sleepy@ms+1
  8657  0FD0  0008               	return
  8658  0FD1                     __end_ofPL22:	
  8659  0FD1                     PL24:	
  8660  0FD1  00A0               	movwf	Mrf49xaTxPacket@packet
  8661  0FD2  01A1               	clrf	Mrf49xaTxPacket@response
  8662  0FD3  01A2               	clrf	Mrf49xaTxPacket@needAck
  8663  0FD4  0AA2               	incf	Mrf49xaTxPacket@needAck,f
  8664  0FD5  0008               	return
  8665  0FD6                     __end_ofPL24:	
  8666  0FD6                     __ptext46:	
  8667 ;; *************** function _handleFwCmd *****************
  8668 ;; Defined at:
  8669 ;;		line 8 in file "../../../src/rfstack/client.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  packet          1    wreg     PTR struct rfTrcvPacket_
  8672 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  packet          1    8[BANK0 ] PTR struct rfTrcvPacket_
  8675 ;;		 -> NULL(0), mrf49xaInst.rxPacket(48), mrf49xaInst(78), 
  8676 ;; Return value:  Size  Location     Type
  8677 ;;		None               void
  8678 ;; Registers used:
  8679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8680 ;; Tracked objects:
  8681 ;;		On entry : 1F/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8685 ;;      Params:         0       0       0       0
  8686 ;;      Locals:         0       1       0       0
  8687 ;;      Temps:          0       0       0       0
  8688 ;;      Totals:         0       1       0       0
  8689 ;;Total ram usage:        1 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    8
  8692 ;; This function calls:
  8693 ;;		_eepromRxBytes
  8694 ;; This function is called by:
  8695 ;;		_HandlePacket
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           
  8700                           ;psect for function _handleFwCmd
  8701  0FD6                     _handleFwCmd:	
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _handleFwCmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8705                           ;handleFwCmd@packet stored from wreg
  8706  0FD6  00A8               	movwf	handleFwCmd@packet
  8707                           
  8708                           ;client.c: 23: break;
  8709                           
  8710                           ;client.c: 10: switch(packet->packet.data[0])
  8711  0FD7  3E06               	addlw	6
  8712  0FD8  0086               	movwf	6
  8713  0FD9  0187               	clrf	7
  8714  0FDA  0801               	movf	1,w
  8715                           
  8716                           ; Switch size 1, requested type "space"
  8717                           ; Number of cases is 2, Range of values is 0 to 1
  8718                           ; switch strategies available:
  8719                           ; Name         Instructions Cycles
  8720                           ; simple_byte            7     4 (average)
  8721                           ; direct_byte           10     6 (fixed)
  8722                           ; jumptable            260     6 (fixed)
  8723                           ;	Chosen strategy is simple_byte
  8724  0FDB  3A00               	xorlw	0	; case 0
  8725  0FDC  1903               	skipnz
  8726  0FDD  2FF8               	goto	l530
  8727  0FDE  3A01               	xorlw	1	; case 1
  8728  0FDF  1903               	skipnz
  8729  0FE0  2FE2               	goto	l3424
  8730  0FE1  2FF8               	goto	l530
  8731  0FE2                     l3424:	
  8732                           
  8733                           ;client.c: 17: packet->packet.size = 5;
  8734  0FE2  0A28               	incf	handleFwCmd@packet,w
  8735  0FE3  0086               	movwf	6
  8736  0FE4  3005               	movlw	5
  8737  0FE5  0187               	clrf	7
  8738  0FE6  0081               	movwf	1
  8739                           
  8740                           ;client.c: 18: packet->packet.data[1] = 0;
  8741  0FE7  0828               	movf	handleFwCmd@packet,w
  8742  0FE8  3E07               	addlw	7
  8743  0FE9  0086               	movwf	6
  8744  0FEA  0181               	clrf	1
  8745                           
  8746                           ;client.c: 19: packet->packet.data[2] = 1;
  8747  0FEB  0828               	movf	handleFwCmd@packet,w
  8748  0FEC  3E08               	addlw	8
  8749  0FED  0086               	movwf	6
  8750  0FEE  0181               	clrf	1
  8751  0FEF  0A81               	incf	1,f
  8752                           
  8753                           ;client.c: 21: eepromRxBytes(0x0, &(packet->packet.data[3]), 2);
  8754  0FF0  01A4               	clrf	eepromRxBytes@address
  8755  0FF1  01A5               	clrf	eepromRxBytes@address+1
  8756  0FF2  0828               	movf	handleFwCmd@packet,w
  8757  0FF3  3E09               	addlw	9
  8758  0FF4  00A6               	movwf	eepromRxBytes@data
  8759  0FF5  3002               	movlw	2
  8760  0FF6  00A7               	movwf	eepromRxBytes@size
  8761  0FF7  2A2A               	ljmp	l3150
  8762  0FF8                     l530:	
  8763  0FF8  0008               	return
  8764  0FF9                     __end_of_handleFwCmd:	
  8765  0FF9                     __ptext52:	
  8766 ;; *************** function _CfgSave *****************
  8767 ;; Defined at:
  8768 ;;		line 24 in file "../../../src/node/config.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;		None               void
  8775 ;; Registers used:
  8776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 1F/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8782 ;;      Params:         0       0       0       0
  8783 ;;      Locals:         0       0       0       0
  8784 ;;      Temps:          0       0       0       0
  8785 ;;      Totals:         0       0       0       0
  8786 ;;Total ram usage:        0 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    8
  8789 ;; This function calls:
  8790 ;;		_eepromTxBytes
  8791 ;; This function is called by:
  8792 ;;		_handleCfgCmd
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _CfgSave
  8798  0FF9                     _CfgSave:	
  8799  0FF9                     l3500:	
  8800                           ;incstack = 0
  8801                           ; Regs used in _CfgSave: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8802                           
  8803  0FF9  3036               	movlw	_cfgRam& (0+255)
  8804                           
  8805                           ;config.c: 26: eepromTxBytes(0x0, (uint8_t*) &cfgRam, sizeof(CfgRam_t));
  8806  0FFA  01A4               	clrf	eepromTxBytes@address
  8807  0FFB  01A5               	clrf	eepromTxBytes@address+1
  8808  0FFC  00A6               	movwf	eepromTxBytes@data
  8809  0FFD  3009               	movlw	9
  8810  0FFE  00A7               	movwf	eepromTxBytes@size
  8811  0FFF  29F5               	ljmp	l3162
  8812  1000                     __end_of_CfgSave:	
  8813                           
  8814                           	psect	dataCOMMON
  8815  0078                     __pdataCOMMON:	
  8816  0078                     _macPtr:	
  8817  0078                     	ds	1
  8818                           
  8819                           	psect	bssBANK0
  8820  0035                     __pbssBANK0:	
  8821  0035                     _powerStatusTicker:	
  8822  0035                     	ds	1
  8823  0036                     _cfgRam:	
  8824  0036                     	ds	9
  8825                           
  8826                           	psect	dataBANK0
  8827  003F                     __pdataBANK0:	
  8828  003F                     _coldBoot:	
  8829  003F                     	ds	1
  8830                           
  8831                           	psect	bssBANK1
  8832  00A0                     __pbssBANK1:	
  8833  00A0                     _mrf49xaInst:	
  8834  00A0                     	ds	78
  8835                           
  8836                           	psect	clrtext
  8837  02D0                     clear_ram0:	
  8838                           ;	Called with FSR0 containing the base address, and
  8839                           ;	WREG with the size to clear
  8840                           
  8841  02D0  0064               	clrwdt	;clear the watchdog before getting into this loop
  8842  02D1                     clrloop0:	
  8843  02D1  0180               	clrf	0	;clear RAM location pointed to by FSR
  8844  02D2  3101               	addfsr 0,1
  8845  02D3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  8846  02D4  2AD1               	goto	clrloop0	;have we reached the end yet?
  8847  02D5  3400               	retlw	0	;all done for this memory range, return
  8848                           
  8849                           	psect	cstackCOMMON
  8850  0070                     __pcstackCOMMON:	
  8851  0070                     ?_SoftI2cStart:	
  8852  0070                     ?_SoftI2cStop:	
  8853                           ; 0 bytes @ 0x0
  8854                           
  8855  0070                     ?_Mrf49xaNeedsReset:	
  8856                           ; 0 bytes @ 0x0
  8857                           
  8858  0070                     ?_Mrf49RxSts:	
  8859                           ; 0 bytes @ 0x0
  8860                           
  8861  0070                     ?_CfgSave:	
  8862                           ; 0 bytes @ 0x0
  8863                           
  8864  0070                     ?_CfgLoad:	
  8865                           ; 0 bytes @ 0x0
  8866                           
  8867  0070                     ?_PwrAdcWake:	
  8868                           ; 0 bytes @ 0x0
  8869                           
  8870  0070                     ?_PwrAdcSleep:	
  8871                           ; 0 bytes @ 0x0
  8872                           
  8873  0070                     ?_PwrAdcInit:	
  8874                           ; 0 bytes @ 0x0
  8875                           
  8876  0070                     ?_PwrSensorInit:	
  8877                           ; 0 bytes @ 0x0
  8878                           
  8879  0070                     ?_PwrI2cInit:	
  8880                           ; 0 bytes @ 0x0
  8881                           
  8882  0070                     ?_PwrRfInit:	
  8883                           ; 0 bytes @ 0x0
  8884                           
  8885  0070                     ?_PwrSensorSleep:	
  8886                           ; 0 bytes @ 0x0
  8887                           
  8888  0070                     ?_PwrI2cSleep:	
  8889                           ; 0 bytes @ 0x0
  8890                           
  8891  0070                     ?_PwrRfSleep:	
  8892                           ; 0 bytes @ 0x0
  8893                           
  8894  0070                     ?_PwrSensorWake:	
  8895                           ; 0 bytes @ 0x0
  8896                           
  8897  0070                     ?_PwrI2cWake:	
  8898                           ; 0 bytes @ 0x0
  8899                           
  8900  0070                     ?_PwrRfWake:	
  8901                           ; 0 bytes @ 0x0
  8902                           
  8903  0070                     ?_putch:	
  8904                           ; 0 bytes @ 0x0
  8905                           
  8906  0070                     ?_SoftI2cNop:	
  8907                           ; 0 bytes @ 0x0
  8908                           
  8909  0070                     ?_SoftI2cInit:	
  8910                           ; 0 bytes @ 0x0
  8911                           
  8912  0070                     ?_SoftI2cRepeatedStart:	
  8913                           ; 0 bytes @ 0x0
  8914                           
  8915  0070                     ?_AdcInit:	
  8916                           ; 0 bytes @ 0x0
  8917                           
  8918  0070                     ?_AdcDeinit:	
  8919                           ; 0 bytes @ 0x0
  8920                           
  8921  0070                     ?_AdcGo:	
  8922                           ; 0 bytes @ 0x0
  8923                           
  8924  0070                     ?_AdcChSelect:	
  8925                           ; 0 bytes @ 0x0
  8926                           
  8927  0070                     ?_ExtIntInit:	
  8928                           ; 0 bytes @ 0x0
  8929                           
  8930  0070                     ?_ExtIntDeinit:	
  8931                           ; 0 bytes @ 0x0
  8932                           
  8933  0070                     ??_ExtIntDeinit:	
  8934                           ; 0 bytes @ 0x0
  8935                           
  8936  0070                     ?_extInt:	
  8937                           ; 0 bytes @ 0x0
  8938                           
  8939  0070                     ?_Mcp9800Start:	
  8940                           ; 0 bytes @ 0x0
  8941                           
  8942  0070                     ?_Mrf49xaModeRx:	
  8943                           ; 0 bytes @ 0x0
  8944                           
  8945  0070                     ?_Mrf49xaModeTx:	
  8946                           ; 0 bytes @ 0x0
  8947                           
  8948  0070                     ?_Mrf49xaModeSleep:	
  8949                           ; 0 bytes @ 0x0
  8950                           
  8951  0070                     ?_Mrf49xaShutdown:	
  8952                           ; 0 bytes @ 0x0
  8953                           
  8954  0070                     ?_Mrf49xaReboot:	
  8955                           ; 0 bytes @ 0x0
  8956                           
  8957  0070                     ?_Mrf49xaInit:	
  8958                           ; 0 bytes @ 0x0
  8959                           
  8960  0070                     ?_Mrf49SpiTx:	
  8961                           ; 0 bytes @ 0x0
  8962                           
  8963  0070                     ?_Mrf49TxByte:	
  8964                           ; 0 bytes @ 0x0
  8965                           
  8966  0070                     ?_Mrf49xaTick:	
  8967                           ; 0 bytes @ 0x0
  8968                           
  8969  0070                     ?_handleFwCmd:	
  8970                           ; 0 bytes @ 0x0
  8971                           
  8972  0070                     ?_handleCfgRead:	
  8973                           ; 0 bytes @ 0x0
  8974                           
  8975  0070                     ?_handleCfgWrite:	
  8976                           ; 0 bytes @ 0x0
  8977                           
  8978  0070                     ?_handleCfgCmd:	
  8979                           ; 0 bytes @ 0x0
  8980                           
  8981  0070                     ?_RfSendPowerState:	
  8982                           ; 0 bytes @ 0x0
  8983                           
  8984  0070                     ?_main:	
  8985                           ; 0 bytes @ 0x0
  8986                           
  8987  0070                     ?i1_Mrf49xaModeRx:	
  8988                           ; 0 bytes @ 0x0
  8989                           
  8990  0070                     ?i1_Mrf49xaNeedsReset:	
  8991                           ; 0 bytes @ 0x0
  8992                           
  8993  0070                     ??i1_Mrf49xaNeedsReset:	
  8994                           ; 0 bytes @ 0x0
  8995                           
  8996  0070                     ?i1_Mrf49SpiTx:	
  8997                           ; 0 bytes @ 0x0
  8998                           
  8999  0070                     ??i1_Mrf49SpiTx:	
  9000                           ; 0 bytes @ 0x0
  9001                           
  9002  0070                     ??i1_Mrf49SpiRx:	
  9003                           ; 0 bytes @ 0x0
  9004                           
  9005  0070                     ?i1_Mrf49RxSts:	
  9006                           ; 0 bytes @ 0x0
  9007                           
  9008  0070                     ?i1_Mrf49TxByte:	
  9009                           ; 0 bytes @ 0x0
  9010                           
  9011  0070                     ?_SoftI2cTxByte:	
  9012                           ; 0 bytes @ 0x0
  9013                           
  9014  0070                     ?_Mrf49xaServe:	
  9015                           ; 1 bytes @ 0x0
  9016                           
  9017  0070                     ?_CfgGetSizeByType:	
  9018                           ; 1 bytes @ 0x0
  9019                           
  9020  0070                     ?_SoftI2cRxByte:	
  9021                           ; 1 bytes @ 0x0
  9022                           
  9023  0070                     ?_AdcIsBusy:	
  9024                           ; 1 bytes @ 0x0
  9025                           
  9026  0070                     ?_Mrf49SpiRx:	
  9027                           ; 1 bytes @ 0x0
  9028                           
  9029  0070                     ?_Mrf49RxCmd:	
  9030                           ; 1 bytes @ 0x0
  9031                           
  9032  0070                     ?_Mrf49RxByte:	
  9033                           ; 1 bytes @ 0x0
  9034                           
  9035  0070                     ?_Mrf49xaPacketPending:	
  9036                           ; 1 bytes @ 0x0
  9037                           
  9038  0070                     ?_Mrf49xaRxPacket:	
  9039                           ; 1 bytes @ 0x0
  9040                           
  9041  0070                     ?_Mrf49xaAllocPacket:	
  9042                           ; 1 bytes @ 0x0
  9043                           
  9044  0070                     ?i1_Mrf49SpiRx:	
  9045                           ; 1 bytes @ 0x0
  9046                           
  9047  0070                     ?i1_Mrf49RxCmd:	
  9048                           ; 1 bytes @ 0x0
  9049                           
  9050  0070                     ?i1_Mrf49RxByte:	
  9051                           ; 1 bytes @ 0x0
  9052                           
  9053  0070                     ?i1_Mrf49xaServe:	
  9054                           ; 1 bytes @ 0x0
  9055                           
  9056  0070                     ?_printf:	
  9057                           ; 1 bytes @ 0x0
  9058                           
  9059  0070                     putch@c:	
  9060                           ; 2 bytes @ 0x0
  9061                           
  9062  0070                     i1Mrf49SpiTx@byte:	
  9063                           ; 1 bytes @ 0x0
  9064                           
  9065  0070                     i1Mrf49SpiRx@data:	
  9066                           ; 1 bytes @ 0x0
  9067                           
  9068                           
  9069                           ; 1 bytes @ 0x0
  9070  0070                     	ds	1
  9071  0071                     ?i1_Mrf49TxCmd:	
  9072  0071                     ??i1_Mrf49RxCmd:	
  9073                           ; 0 bytes @ 0x1
  9074                           
  9075  0071                     ??i1_Mrf49RxSts:	
  9076                           ; 0 bytes @ 0x1
  9077                           
  9078  0071                     i1Mrf49TxCmd@val:	
  9079                           ; 0 bytes @ 0x1
  9080                           
  9081  0071                     i1Mrf49RxCmd@cmd:	
  9082                           ; 1 bytes @ 0x1
  9083                           
  9084                           
  9085                           ; 1 bytes @ 0x1
  9086  0071                     	ds	1
  9087  0072                     ??i1_Mrf49TxCmd:	
  9088  0072                     i1Mrf49TxCmd@cmd:	
  9089                           ; 0 bytes @ 0x2
  9090                           
  9091  0072                     i1Mrf49RxCmd@val:	
  9092                           ; 1 bytes @ 0x2
  9093                           
  9094                           
  9095                           ; 1 bytes @ 0x2
  9096  0072                     	ds	1
  9097  0073                     ??i1_Mrf49xaModeRx:	
  9098  0073                     ??i1_Mrf49RxByte:	
  9099                           ; 0 bytes @ 0x3
  9100                           
  9101  0073                     ??i1_Mrf49TxByte:	
  9102                           ; 0 bytes @ 0x3
  9103                           
  9104  0073                     i1Mrf49xaModeRx@k:	
  9105                           ; 0 bytes @ 0x3
  9106                           
  9107  0073                     i1Mrf49TxByte@byte:	
  9108                           ; 1 bytes @ 0x3
  9109                           
  9110                           
  9111                           ; 1 bytes @ 0x3
  9112  0073                     	ds	1
  9113  0074                     ??i1_Mrf49xaServe:	
  9114                           
  9115                           ; 0 bytes @ 0x4
  9116  0074                     	ds	1
  9117  0075                     i1Mrf49xaServe@data:	
  9118                           
  9119                           ; 1 bytes @ 0x5
  9120  0075                     	ds	1
  9121  0076                     ??_extInt:	
  9122                           
  9123                           ; 0 bytes @ 0x6
  9124  0076                     	ds	1
  9125  0077                     extInt@ofw:	
  9126                           
  9127                           ; 1 bytes @ 0x7
  9128  0077                     	ds	1
  9129                           
  9130                           	psect	cstackBANK0
  9131  0020                     __pcstackBANK0:	
  9132  0020                     ??_Mrf49xaNeedsReset:	
  9133  0020                     ?_Sleepy:	
  9134                           ; 0 bytes @ 0x0
  9135                           
  9136  0020                     ??_CfgGetSizeByType:	
  9137                           ; 0 bytes @ 0x0
  9138                           
  9139  0020                     ??_printf:	
  9140                           ; 0 bytes @ 0x0
  9141                           
  9142  0020                     ??_PwrAdcWake:	
  9143                           ; 0 bytes @ 0x0
  9144                           
  9145  0020                     ??_PwrAdcSleep:	
  9146                           ; 0 bytes @ 0x0
  9147                           
  9148  0020                     ??_PwrAdcInit:	
  9149                           ; 0 bytes @ 0x0
  9150                           
  9151  0020                     ??_PwrSensorInit:	
  9152                           ; 0 bytes @ 0x0
  9153                           
  9154  0020                     ??_PwrSensorSleep:	
  9155                           ; 0 bytes @ 0x0
  9156                           
  9157  0020                     ??_PwrI2cSleep:	
  9158                           ; 0 bytes @ 0x0
  9159                           
  9160  0020                     ??_PwrSensorWake:	
  9161                           ; 0 bytes @ 0x0
  9162                           
  9163  0020                     ??_PwrI2cWake:	
  9164                           ; 0 bytes @ 0x0
  9165                           
  9166  0020                     ??_putch:	
  9167                           ; 0 bytes @ 0x0
  9168                           
  9169  0020                     ??_SoftI2cNop:	
  9170                           ; 0 bytes @ 0x0
  9171                           
  9172  0020                     ??_AdcInit:	
  9173                           ; 0 bytes @ 0x0
  9174                           
  9175  0020                     ??_AdcDeinit:	
  9176                           ; 0 bytes @ 0x0
  9177                           
  9178  0020                     ??_AdcGo:	
  9179                           ; 0 bytes @ 0x0
  9180                           
  9181  0020                     ??_AdcIsBusy:	
  9182                           ; 0 bytes @ 0x0
  9183                           
  9184  0020                     ??_AdcChSelect:	
  9185                           ; 0 bytes @ 0x0
  9186                           
  9187  0020                     ??_ExtIntInit:	
  9188                           ; 0 bytes @ 0x0
  9189                           
  9190  0020                     ??_Mrf49SpiTx:	
  9191                           ; 0 bytes @ 0x0
  9192                           
  9193  0020                     ??_Mrf49SpiRx:	
  9194                           ; 0 bytes @ 0x0
  9195                           
  9196  0020                     ??_Mrf49xaPacketPending:	
  9197                           ; 0 bytes @ 0x0
  9198                           
  9199  0020                     ?_Mrf49xaFreePacket:	
  9200                           ; 0 bytes @ 0x0
  9201                           
  9202  0020                     ??_Mrf49xaRxPacket:	
  9203                           ; 0 bytes @ 0x0
  9204                           
  9205  0020                     ??_Mrf49xaAllocPacket:	
  9206                           ; 0 bytes @ 0x0
  9207                           
  9208  0020                     ?_memcpy:	
  9209                           ; 0 bytes @ 0x0
  9210                           
  9211  0020                     ?_Mrf49xaTxPacket:	
  9212                           ; 1 bytes @ 0x0
  9213                           
  9214  0020                     ?_AdcGetResult:	
  9215                           ; 1 bytes @ 0x0
  9216                           
  9217  0020                     AdcChSelect@channel:	
  9218                           ; 2 bytes @ 0x0
  9219                           
  9220  0020                     Mrf49xaNeedsReset@inst:	
  9221                           ; 1 bytes @ 0x0
  9222                           
  9223  0020                     Mrf49SpiTx@byte:	
  9224                           ; 1 bytes @ 0x0
  9225                           
  9226  0020                     Mrf49SpiRx@data:	
  9227                           ; 1 bytes @ 0x0
  9228                           
  9229  0020                     Mrf49xaPacketPending@inst:	
  9230                           ; 1 bytes @ 0x0
  9231                           
  9232  0020                     Mrf49xaTxPacket@packet:	
  9233                           ; 1 bytes @ 0x0
  9234                           
  9235  0020                     Mrf49xaFreePacket@packet:	
  9236                           ; 1 bytes @ 0x0
  9237                           
  9238  0020                     Mrf49xaRxPacket@inst:	
  9239                           ; 1 bytes @ 0x0
  9240                           
  9241  0020                     Mrf49xaAllocPacket@inst:	
  9242                           ; 1 bytes @ 0x0
  9243                           
  9244  0020                     CfgGetSizeByType@type:	
  9245                           ; 1 bytes @ 0x0
  9246                           
  9247  0020                     printf@c:	
  9248                           ; 1 bytes @ 0x0
  9249                           
  9250  0020                     memcpy@s1:	
  9251                           ; 1 bytes @ 0x0
  9252                           
  9253  0020                     Sleepy@ms:	
  9254                           ; 1 bytes @ 0x0
  9255                           
  9256                           
  9257                           ; 2 bytes @ 0x0
  9258  0020                     	ds	1
  9259  0021                     ??_SoftI2cStart:	
  9260  0021                     ??_SoftI2cTxByte:	
  9261                           ; 0 bytes @ 0x1
  9262                           
  9263  0021                     ??_SoftI2cStop:	
  9264                           ; 0 bytes @ 0x1
  9265                           
  9266  0021                     ?_Mrf49TxCmd:	
  9267                           ; 0 bytes @ 0x1
  9268                           
  9269  0021                     ??_Mrf49RxSts:	
  9270                           ; 0 bytes @ 0x1
  9271                           
  9272  0021                     ??_SoftI2cRepeatedStart:	
  9273                           ; 0 bytes @ 0x1
  9274                           
  9275  0021                     ??_SoftI2cRxByte:	
  9276                           ; 0 bytes @ 0x1
  9277                           
  9278  0021                     ??_Mrf49RxCmd:	
  9279                           ; 0 bytes @ 0x1
  9280                           
  9281  0021                     ??_Mrf49xaFreePacket:	
  9282                           ; 0 bytes @ 0x1
  9283                           
  9284  0021                     SoftI2cRxByte@ack:	
  9285                           ; 0 bytes @ 0x1
  9286                           
  9287  0021                     Mrf49TxCmd@val:	
  9288                           ; 1 bytes @ 0x1
  9289                           
  9290  0021                     Mrf49RxCmd@cmd:	
  9291                           ; 1 bytes @ 0x1
  9292                           
  9293  0021                     Mrf49RxSts@inst:	
  9294                           ; 1 bytes @ 0x1
  9295                           
  9296  0021                     Mrf49xaTxPacket@response:	
  9297                           ; 1 bytes @ 0x1
  9298                           
  9299  0021                     Mrf49xaFreePacket@inst:	
  9300                           ; 1 bytes @ 0x1
  9301                           
  9302  0021                     printf@f:	
  9303                           ; 1 bytes @ 0x1
  9304                           
  9305  0021                     memcpy@n:	
  9306                           ; 1 bytes @ 0x1
  9307                           
  9308                           
  9309                           ; 2 bytes @ 0x1
  9310  0021                     	ds	1
  9311  0022                     ??_Sleepy:	
  9312  0022                     ??_Mrf49TxCmd:	
  9313                           ; 0 bytes @ 0x2
  9314                           
  9315  0022                     ??_AdcGetResult:	
  9316                           ; 0 bytes @ 0x2
  9317                           
  9318  0022                     ?_AdcSample:	
  9319                           ; 0 bytes @ 0x2
  9320                           
  9321  0022                     SoftI2cTxByte@data:	
  9322                           ; 2 bytes @ 0x2
  9323                           
  9324  0022                     SoftI2cRxByte@data:	
  9325                           ; 1 bytes @ 0x2
  9326                           
  9327  0022                     Mrf49TxCmd@cmd:	
  9328                           ; 1 bytes @ 0x2
  9329                           
  9330  0022                     Mrf49RxCmd@val:	
  9331                           ; 1 bytes @ 0x2
  9332                           
  9333  0022                     Mrf49xaTxPacket@needAck:	
  9334                           ; 1 bytes @ 0x2
  9335                           
  9336                           
  9337                           ; 1 bytes @ 0x2
  9338  0022                     	ds	1
  9339  0023                     ??_memcpy:	
  9340  0023                     ??_Mrf49xaModeRx:	
  9341                           ; 0 bytes @ 0x3
  9342                           
  9343  0023                     ??_Mrf49xaModeTx:	
  9344                           ; 0 bytes @ 0x3
  9345                           
  9346  0023                     ??_Mrf49xaModeSleep:	
  9347                           ; 0 bytes @ 0x3
  9348                           
  9349  0023                     ??_Mrf49RxByte:	
  9350                           ; 0 bytes @ 0x3
  9351                           
  9352  0023                     ??_Mrf49TxByte:	
  9353                           ; 0 bytes @ 0x3
  9354                           
  9355  0023                     ??_Mrf49xaTxPacket:	
  9356                           ; 0 bytes @ 0x3
  9357                           
  9358  0023                     SoftI2cTxByte@i:	
  9359                           ; 0 bytes @ 0x3
  9360                           
  9361  0023                     SoftI2cRxByte@i:	
  9362                           ; 1 bytes @ 0x3
  9363                           
  9364  0023                     Mrf49xaModeRx@k:	
  9365                           ; 1 bytes @ 0x3
  9366                           
  9367  0023                     Mrf49xaModeTx@inst:	
  9368                           ; 1 bytes @ 0x3
  9369                           
  9370  0023                     Mrf49xaModeSleep@inst:	
  9371                           ; 1 bytes @ 0x3
  9372                           
  9373  0023                     Mrf49TxByte@byte:	
  9374                           ; 1 bytes @ 0x3
  9375                           
  9376  0023                     Sleepy@b:	
  9377                           ; 1 bytes @ 0x3
  9378                           
  9379  0023                     memcpy@d:	
  9380                           ; 1 bytes @ 0x3
  9381                           
  9382                           
  9383                           ; 1 bytes @ 0x3
  9384  0023                     	ds	1
  9385  0024                     ??_PwrI2cInit:	
  9386  0024                     ??_SoftI2cInit:	
  9387                           ; 0 bytes @ 0x4
  9388                           
  9389  0024                     ??_AdcSample:	
  9390                           ; 0 bytes @ 0x4
  9391                           
  9392  0024                     ??_Mcp9800Start:	
  9393                           ; 0 bytes @ 0x4
  9394                           
  9395  0024                     ?_eepromRxBytes:	
  9396                           ; 0 bytes @ 0x4
  9397                           
  9398  0024                     ?_eepromTxBytes:	
  9399                           ; 0 bytes @ 0x4
  9400                           
  9401  0024                     ?_Mcp9800Read:	
  9402                           ; 0 bytes @ 0x4
  9403                           
  9404  0024                     Mcp9800Start@resolution:	
  9405                           ; 2 bytes @ 0x4
  9406                           
  9407  0024                     Mrf49xaModeRx@inst:	
  9408                           ; 1 bytes @ 0x4
  9409                           
  9410  0024                     Mrf49xaModeTx@k:	
  9411                           ; 1 bytes @ 0x4
  9412                           
  9413  0024                     Mrf49xaModeSleep@k:	
  9414                           ; 1 bytes @ 0x4
  9415                           
  9416  0024                     Mrf49xaTxPacket@crc:	
  9417                           ; 1 bytes @ 0x4
  9418                           
  9419  0024                     memcpy@s:	
  9420                           ; 1 bytes @ 0x4
  9421                           
  9422  0024                     eepromRxBytes@address:	
  9423                           ; 1 bytes @ 0x4
  9424                           
  9425  0024                     eepromTxBytes@address:	
  9426                           ; 2 bytes @ 0x4
  9427                           
  9428                           
  9429                           ; 2 bytes @ 0x4
  9430  0024                     	ds	1
  9431  0025                     ??_Mrf49xaServe:	
  9432  0025                     ??_Mrf49xaShutdown:	
  9433                           ; 0 bytes @ 0x5
  9434                           
  9435  0025                     ??_Mrf49xaReboot:	
  9436                           ; 0 bytes @ 0x5
  9437                           
  9438  0025                     AdcSample@ch:	
  9439                           ; 0 bytes @ 0x5
  9440                           
  9441  0025                     Mrf49xaShutdown@inst:	
  9442                           ; 1 bytes @ 0x5
  9443                           
  9444  0025                     Mrf49xaReboot@inst:	
  9445                           ; 1 bytes @ 0x5
  9446                           
  9447  0025                     Mrf49xaTxPacket@inst:	
  9448                           ; 1 bytes @ 0x5
  9449                           
  9450  0025                     memcpy@d1:	
  9451                           ; 1 bytes @ 0x5
  9452                           
  9453                           
  9454                           ; 1 bytes @ 0x5
  9455  0025                     	ds	1
  9456  0026                     ??_PwrRfSleep:	
  9457  0026                     ??_PwrRfWake:	
  9458                           ; 0 bytes @ 0x6
  9459                           
  9460  0026                     ??_Mcp9800Read:	
  9461                           ; 0 bytes @ 0x6
  9462                           
  9463  0026                     ??_handleCfgRead:	
  9464                           ; 0 bytes @ 0x6
  9465                           
  9466  0026                     ??_handleCfgWrite:	
  9467                           ; 0 bytes @ 0x6
  9468                           
  9469  0026                     Mcp9800Read@tempH:	
  9470                           ; 0 bytes @ 0x6
  9471                           
  9472  0026                     eepromRxBytes@data:	
  9473                           ; 1 bytes @ 0x6
  9474                           
  9475  0026                     eepromTxBytes@data:	
  9476                           ; 1 bytes @ 0x6
  9477                           
  9478  0026                     Mrf49xaTxPacket@i:	
  9479                           ; 1 bytes @ 0x6
  9480                           
  9481  0026                     Mrf49xaServe@inst:	
  9482                           ; 1 bytes @ 0x6
  9483                           
  9484  0026                     handleCfgRead@nrOfBytes:	
  9485                           ; 1 bytes @ 0x6
  9486                           
  9487  0026                     handleCfgWrite@nrOfBytes:	
  9488                           ; 1 bytes @ 0x6
  9489                           
  9490                           
  9491                           ; 1 bytes @ 0x6
  9492  0026                     	ds	1
  9493  0027                     ??_RfSendPowerState:	
  9494  0027                     ?_RfSendSampleWeatherNode:	
  9495                           ; 0 bytes @ 0x7
  9496                           
  9497  0027                     ?_Mrf49xaTxAck:	
  9498                           ; 0 bytes @ 0x7
  9499                           
  9500  0027                     Mcp9800Read@tempL:	
  9501                           ; 1 bytes @ 0x7
  9502                           
  9503  0027                     eepromRxBytes@size:	
  9504                           ; 1 bytes @ 0x7
  9505                           
  9506  0027                     eepromTxBytes@size:	
  9507                           ; 1 bytes @ 0x7
  9508                           
  9509  0027                     Mrf49xaTxAck@packet:	
  9510                           ; 1 bytes @ 0x7
  9511                           
  9512  0027                     Mrf49xaServe@data:	
  9513                           ; 1 bytes @ 0x7
  9514                           
  9515  0027                     handleCfgRead@index:	
  9516                           ; 1 bytes @ 0x7
  9517                           
  9518  0027                     handleCfgWrite@index:	
  9519                           ; 1 bytes @ 0x7
  9520                           
  9521  0027                     RfSendPowerState@inst:	
  9522                           ; 1 bytes @ 0x7
  9523                           
  9524  0027                     RfSendSampleWeatherNode@temperature:	
  9525                           ; 1 bytes @ 0x7
  9526                           
  9527                           
  9528                           ; 2 bytes @ 0x7
  9529  0027                     	ds	1
  9530  0028                     ??_CfgSave:	
  9531  0028                     ??_CfgLoad:	
  9532                           ; 0 bytes @ 0x8
  9533                           
  9534  0028                     ??_Mrf49xaInit:	
  9535                           ; 0 bytes @ 0x8
  9536                           
  9537  0028                     ??_eepromRxBytes:	
  9538                           ; 0 bytes @ 0x8
  9539                           
  9540  0028                     ??_eepromTxBytes:	
  9541                           ; 0 bytes @ 0x8
  9542                           
  9543  0028                     ??_Mrf49xaTxAck:	
  9544                           ; 0 bytes @ 0x8
  9545                           
  9546  0028                     ??_handleFwCmd:	
  9547                           ; 0 bytes @ 0x8
  9548                           
  9549  0028                     ??_handleCfgCmd:	
  9550                           ; 0 bytes @ 0x8
  9551                           
  9552  0028                     Mrf49xaInit@inst:	
  9553                           ; 0 bytes @ 0x8
  9554                           
  9555  0028                     Mrf49xaTxAck@inst:	
  9556                           ; 1 bytes @ 0x8
  9557                           
  9558  0028                     handleFwCmd@packet:	
  9559                           ; 1 bytes @ 0x8
  9560                           
  9561  0028                     handleCfgRead@packet:	
  9562                           ; 1 bytes @ 0x8
  9563                           
  9564  0028                     handleCfgWrite@packet:	
  9565                           ; 1 bytes @ 0x8
  9566                           
  9567  0028                     handleCfgCmd@packet:	
  9568                           ; 1 bytes @ 0x8
  9569                           
  9570  0028                     RfSendPowerState@s:	
  9571                           ; 1 bytes @ 0x8
  9572                           
  9573                           
  9574                           ; 2 bytes @ 0x8
  9575  0028                     	ds	1
  9576  0029                     ?_HandlePacket:	
  9577  0029                     Mrf49xaInit@k:	
  9578                           ; 0 bytes @ 0x9
  9579                           
  9580  0029                     HandlePacket@packet:	
  9581                           ; 1 bytes @ 0x9
  9582                           
  9583  0029                     RfSendSampleWeatherNode@humidity:	
  9584                           ; 1 bytes @ 0x9
  9585                           
  9586                           
  9587                           ; 2 bytes @ 0x9
  9588  0029                     	ds	1
  9589  002A                     ??_HandlePacket:	
  9590  002A                     ??_PwrRfInit:	
  9591                           ; 0 bytes @ 0xA
  9592                           
  9593  002A                     RfSendPowerState@packet:	
  9594                           ; 0 bytes @ 0xA
  9595                           
  9596                           
  9597                           ; 1 bytes @ 0xA
  9598  002A                     	ds	1
  9599  002B                     ??_RfSendSampleWeatherNode:	
  9600  002B                     HandlePacket@inst:	
  9601                           ; 0 bytes @ 0xB
  9602                           
  9603  002B                     RfSendSampleWeatherNode@inst:	
  9604                           ; 1 bytes @ 0xB
  9605                           
  9606                           
  9607                           ; 1 bytes @ 0xB
  9608  002B                     	ds	1
  9609  002C                     HandlePacket@response:	
  9610  002C                     RfSendSampleWeatherNode@packet:	
  9611                           ; 1 bytes @ 0xC
  9612                           
  9613                           
  9614                           ; 1 bytes @ 0xC
  9615  002C                     	ds	1
  9616  002D                     ??_Mrf49xaTick:	
  9617                           
  9618                           ; 0 bytes @ 0xD
  9619  002D                     	ds	1
  9620  002E                     Mrf49xaTick@timeout:	
  9621                           
  9622                           ; 1 bytes @ 0xE
  9623  002E                     	ds	1
  9624  002F                     Mrf49xaTick@inst:	
  9625                           
  9626                           ; 1 bytes @ 0xF
  9627  002F                     	ds	1
  9628  0030                     Mrf49xaTick@packet:	
  9629                           
  9630                           ; 1 bytes @ 0x10
  9631  0030                     	ds	1
  9632  0031                     ??_main:	
  9633  0031                     main@humidity:	
  9634                           ; 0 bytes @ 0x11
  9635                           
  9636                           
  9637                           ; 2 bytes @ 0x11
  9638  0031                     	ds	2
  9639  0033                     main@temperature:	
  9640                           
  9641                           ; 2 bytes @ 0x13
  9642  0033                     	ds	2
  9643                           
  9644                           	psect	text13
  9645  0000                     __ptext13:	
  9646 ;; *************** function _AdcGetResult *****************
  9647 ;; Defined at:
  9648 ;;		line 24 in file "../../../src/bsp/pic16/adc16.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;		None
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;		None
  9653 ;; Return value:  Size  Location     Type
  9654 ;;                  2    0[BANK0 ] unsigned int 
  9655 ;; Registers used:
  9656 ;;		wreg
  9657 ;; Tracked objects:
  9658 ;;		On entry : 1F/1
  9659 ;;		On exit  : 1F/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9662 ;;      Params:         0       2       0       0
  9663 ;;      Locals:         0       0       0       0
  9664 ;;      Temps:          0       0       0       0
  9665 ;;      Totals:         0       2       0       0
  9666 ;;Total ram usage:        2 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    5
  9669 ;; This function calls:
  9670 ;;		Nothing
  9671 ;; This function is called by:
  9672 ;;		_AdcSample
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676  0000                     _AdcGetResult:	
  9677                           ;psect for function _AdcGetResult
  9678                           
  9679  0000                     __end_of_AdcGetResult:	
  9680                           ;adc16.c: 26: return ((ADRESH << 8) | ADRESL);
  9681                           
  9682                           ;incstack = 0
  9683                           ; Regs used in _AdcGetResult: [wreg]
  9684                           
  9685                           
  9686                           	psect	text18
  9687  02B1                     __ptext18:	
  9688 ;; *************** function _PwrRfWake *****************
  9689 ;; Defined at:
  9690 ;;		line 138 in file "../../../src/node/power.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;		None
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0, pclath, cstack
  9699 ;; Tracked objects:
  9700 ;;		On entry : 1F/1
  9701 ;;		On exit  : 1F/1
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9704 ;;      Params:         0       0       0       0
  9705 ;;      Locals:         0       0       0       0
  9706 ;;      Temps:          0       0       0       0
  9707 ;;      Totals:         0       0       0       0
  9708 ;;Total ram usage:        0 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    9
  9711 ;; This function calls:
  9712 ;;		_Mrf49xaReboot
  9713 ;; This function is called by:
  9714 ;;		_main
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           
  9719                           ;psect for function _PwrRfWake
  9720  02B1                     _PwrRfWake:	
  9721                           
  9722                           ;power.c: 140: WPUAbits.WPUA5 = 1;
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _PwrRfWake: [wreg+status,2+status,0+pclath+cstack]
  9726  02B1  0024               	movlb	4	; select bank4
  9727  02B2  168C               	bsf	12,5	;volatile
  9728                           
  9729                           ;power.c: 142: LATBbits.LATB7 = 0;
  9730  02B3  0022               	movlb	2	; select bank2
  9731  02B4  138D               	bcf	13,7	;volatile
  9732                           
  9733                           ;power.c: 143: LATCbits.LATC7 = 0;
  9734  02B5  138E               	bcf	14,7	;volatile
  9735                           
  9736                           ;power.c: 145: TRISAbits.TRISA5 = 1;
  9737  02B6  0021               	movlb	1	; select bank1
  9738  02B7  168C               	bsf	12,5	;volatile
  9739                           
  9740                           ;power.c: 146: TRISCbits.TRISC5 = 1;
  9741  02B8  168E               	bsf	14,5	;volatile
  9742                           
  9743                           ;power.c: 148: INTCONbits.INTE = 1;
  9744  02B9  160B               	bsf	11,4	;volatile
  9745                           
  9746                           ;power.c: 149: Mrf49xaReboot(&mrf49xaInst);
  9747  02BA  318D  2D07         	ljmp	l2972
  9748  02BC                     __end_of_PwrRfWake:	
  9749  02BC                     __ptext19:	
  9750 ;; *************** function _Mrf49xaReboot *****************
  9751 ;; Defined at:
  9752 ;;		line 115 in file "../../../src/devices/mrf49xa.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  9755 ;;		 -> mrf49xaInst(78), 
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;  inst            1    5[BANK0 ] PTR struct Mrf49xaMac_s
  9758 ;;		 -> mrf49xaInst(78), 
  9759 ;; Return value:  Size  Location     Type
  9760 ;;		None               void
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0, pclath, cstack
  9763 ;; Tracked objects:
  9764 ;;		On entry : 1F/1
  9765 ;;		On exit  : 1F/1
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9768 ;;      Params:         0       0       0       0
  9769 ;;      Locals:         0       1       0       0
  9770 ;;      Temps:          0       0       0       0
  9771 ;;      Totals:         0       1       0       0
  9772 ;;Total ram usage:        1 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    8
  9775 ;; This function calls:
  9776 ;;		_Mrf49xaModeRx
  9777 ;; This function is called by:
  9778 ;;		_PwrRfWake
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           
  9783                           ;psect for function _Mrf49xaReboot
  9784  02BC                     _Mrf49xaReboot:	
  9785                           
  9786                           ;mrf49xa.c: 117: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
  9787                           
  9788                           ;incstack = 0
  9789                           ; Regs used in _Mrf49xaReboot: [wreg+status,2+status,0+pclath+cstack]
  9790  02BC  318D  2D07         	ljmp	l2972
  9791  02BE                     __end_of_Mrf49xaReboot:	
  9792                           
  9793                           	psect	text20
  9794  0272                     __ptext20:	
  9795 ;; *************** function _PwrRfSleep *****************
  9796 ;; Defined at:
  9797 ;;		line 121 in file "../../../src/node/power.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;		None
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, status,2, status,0, pclath, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : 1E/1
  9808 ;;		On exit  : 1F/1
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9811 ;;      Params:         0       0       0       0
  9812 ;;      Locals:         0       0       0       0
  9813 ;;      Temps:          0       0       0       0
  9814 ;;      Totals:         0       0       0       0
  9815 ;;Total ram usage:        0 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    9
  9818 ;; This function calls:
  9819 ;;		_Mrf49xaShutdown
  9820 ;; This function is called by:
  9821 ;;		_main
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _PwrRfSleep
  9827  0272                     _PwrRfSleep:	
  9828                           
  9829                           ;power.c: 123: Mrf49xaShutdown(&mrf49xaInst);
  9830                           
  9831                           ;incstack = 0
  9832                           ; Regs used in _PwrRfSleep: [wreg+status,2+status,0+pclath+cstack]
  9833  0272  30A0               	movlw	_mrf49xaInst& (0+255)
  9834  0273  2280               	fcall	_Mrf49xaShutdown
  9835                           
  9836                           ;power.c: 124: INTCONbits.INTE = 0;
  9837  0274  120B               	bcf	11,4	;volatile
  9838                           
  9839                           ;power.c: 126: LATAbits.LATA5 = 1;
  9840  0275  0022               	movlb	2	; select bank2
  9841  0276  168C               	bsf	12,5	;volatile
  9842                           
  9843                           ;power.c: 127: LATCbits.LATC5 = 1;
  9844  0277  168E               	bsf	14,5	;volatile
  9845                           
  9846                           ;power.c: 129: LATBbits.LATB7 = 1;
  9847  0278  178D               	bsf	13,7	;volatile
  9848                           
  9849                           ;power.c: 130: LATCbits.LATC7 = 1;
  9850  0279  178E               	bsf	14,7	;volatile
  9851                           
  9852                           ;power.c: 132: WPUAbits.WPUA5 = 0;
  9853  027A  0024               	movlb	4	; select bank4
  9854  027B  128C               	bcf	12,5	;volatile
  9855                           
  9856                           ;power.c: 134: TRISAbits.TRISA5 = 0;
  9857  027C  0021               	movlb	1	; select bank1
  9858  027D  128C               	bcf	12,5	;volatile
  9859                           
  9860                           ;power.c: 135: TRISCbits.TRISC5 = 0;
  9861  027E  128E               	bcf	14,5	;volatile
  9862  027F  0008               	return
  9863  0280                     __end_of_PwrRfSleep:	
  9864  0280                     __ptext21:	
  9865 ;; *************** function _Mrf49xaShutdown *****************
  9866 ;; Defined at:
  9867 ;;		line 107 in file "../../../src/devices/mrf49xa.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  9870 ;;		 -> mrf49xaInst(78), 
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;  inst            1    5[BANK0 ] PTR struct Mrf49xaMac_s
  9873 ;;		 -> mrf49xaInst(78), 
  9874 ;; Return value:  Size  Location     Type
  9875 ;;		None               void
  9876 ;; Registers used:
  9877 ;;		wreg, status,2, status,0, pclath, cstack
  9878 ;; Tracked objects:
  9879 ;;		On entry : 1E/1
  9880 ;;		On exit  : 1F/1
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9883 ;;      Params:         0       0       0       0
  9884 ;;      Locals:         0       1       0       0
  9885 ;;      Temps:          0       0       0       0
  9886 ;;      Totals:         0       1       0       0
  9887 ;;Total ram usage:        1 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; Hardware stack levels required when called:    8
  9890 ;; This function calls:
  9891 ;;		_Mrf49xaModeSleep
  9892 ;; This function is called by:
  9893 ;;		_PwrRfSleep
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           
  9898                           ;psect for function _Mrf49xaShutdown
  9899  0280                     _Mrf49xaShutdown:	
  9900                           
  9901                           ;mrf49xa.c: 109: Mrf49xaModeSleep(((Mrf49xaMac_t*)(&mrf49xaInst)));
  9902                           
  9903                           ;incstack = 0
  9904                           ; Regs used in _Mrf49xaShutdown: [wreg+status,2+status,0+pclath+cstack]
  9905  0280  2A81               	ljmp	l3004
  9906  0281                     __end_of_Mrf49xaShutdown:	
  9907  0281                     __ptext22:	
  9908 ;; *************** function _Mrf49xaModeSleep *****************
  9909 ;; Defined at:
  9910 ;;		line 98 in file "../../../src/devices/mrf49xa.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
  9913 ;;		 -> mrf49xaInst(78), 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  inst            1    3[BANK0 ] PTR struct Mrf49xaMac_s
  9916 ;;		 -> mrf49xaInst(78), 
  9917 ;;  k               1    4[BANK0 ] unsigned char 
  9918 ;; Return value:  Size  Location     Type
  9919 ;;		None               void
  9920 ;; Registers used:
  9921 ;;		wreg, status,2, status,0, pclath, cstack
  9922 ;; Tracked objects:
  9923 ;;		On entry : 1E/1
  9924 ;;		On exit  : 1F/1
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9927 ;;      Params:         0       0       0       0
  9928 ;;      Locals:         0       2       0       0
  9929 ;;      Temps:          0       0       0       0
  9930 ;;      Totals:         0       2       0       0
  9931 ;;Total ram usage:        2 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    7
  9934 ;; This function calls:
  9935 ;;		_Mrf49TxCmd
  9936 ;; This function is called by:
  9937 ;;		_Mrf49xaShutdown
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           
  9942                           ;psect for function _Mrf49xaModeSleep
  9943  0281                     _Mrf49xaModeSleep:	
  9944  0281                     l3004:	
  9945                           ;incstack = 0
  9946                           ; Regs used in _Mrf49xaModeSleep: [wreg+status,2+status,0+pclath+cstack]
  9947                           
  9948                           
  9949                           ;mrf49xa.c: 100: UI08_t k;
  9950                           ;mrf49xa.c: 101: for (k = 0; k < mrfRegset_SleepCnt; k++) { Mrf49TxCmd(mrfRegset_Sleep[k
      +                          ].reg, mrfRegset_Sleep[k].val); };
  9951  0281  0020               	movlb	0	; select bank0
  9952  0282  302C               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9953  0283  01A4               	clrf	Mrf49xaModeSleep@k
  9954  0284  3182               	movlp	high __stringtab
  9955  0285  000A               	callw
  9956  0286  3182               	pagesel	$	;select current page
  9957  0287  3800               	iorlw	0
  9958  0288  1903               	btfsc	3,2
  9959  0289  2A9E               	goto	l3016
  9960  028A                     l3010:	
  9961  028A  3524               	lslf	Mrf49xaModeSleep@k,w
  9962  028B  3E63               	addlw	low ((_mrfRegset_Sleep| (0+32768)+1))
  9963  028C  3182               	movlp	high __stringtab
  9964  028D  000A               	callw
  9965  028E  00A1               	movwf	Mrf49TxCmd@val
  9966  028F  3524               	lslf	Mrf49xaModeSleep@k,w
  9967  0290  3E62               	addlw	low (_mrfRegset_Sleep| (0+32768))
  9968  0291  3182               	movlp	high __stringtab
  9969  0292  000A               	callw
  9970  0293  318D  252D  3182   	fcall	_Mrf49TxCmd
  9971  0296  302C               	movlw	low (_mrfRegset_SleepCnt| (0+32768))
  9972  0297  0AA4               	incf	Mrf49xaModeSleep@k,f
  9973  0298  3182               	movlp	high __stringtab
  9974  0299  000A               	callw
  9975  029A  3182               	pagesel	$	;select current page
  9976  029B  0224               	subwf	Mrf49xaModeSleep@k,w
  9977  029C  1C03               	skipc
  9978  029D  2A8A               	goto	l3010
  9979  029E                     l3016:	
  9980                           
  9981                           ;mrf49xa.c: 103: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = POWERED_OFF;
  9982  029E  0021               	movlb	1	; select bank1
  9983  029F  3080               	movlw	-128
  9984  02A0  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
  9985                           
  9986                           ;mrf49xa.c: 104: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0;
  9987  02A1  05ED               	andwf	(_mrf49xaInst^(0+128)+77),f
  9988  02A2  0008               	return
  9989  02A3                     __end_of_Mrf49xaModeSleep:	
  9990                           
  9991                           	psect	text26
  9992  02BE                     __ptext26:	
  9993 ;; *************** function _PwrI2cInit *****************
  9994 ;; Defined at:
  9995 ;;		line 65 in file "../../../src/node/power.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;		None               void
 10002 ;; Registers used:
 10003 ;;		wreg, status,2, status,0, pclath, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 17F/2
 10006 ;;		On exit  : 1F/2
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10009 ;;      Params:         0       0       0       0
 10010 ;;      Locals:         0       0       0       0
 10011 ;;      Temps:          0       0       0       0
 10012 ;;      Totals:         0       0       0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    8
 10016 ;; This function calls:
 10017 ;;		_SoftI2cInit
 10018 ;; This function is called by:
 10019 ;;		_main
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _PwrI2cInit
 10025  02BE                     _PwrI2cInit:	
 10026                           
 10027                           ;power.c: 67: SoftI2cInit();
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in _PwrI2cInit: [wreg+status,2+status,0+pclath+cstack]
 10031  02BE  3188  2018         	fcall	_SoftI2cInit
 10032                           
 10033                           ;power.c: 69: TRISBbits.TRISB4 = 0;
 10034  02C0  0021               	movlb	1	; select bank1
 10035  02C1  120D               	bcf	13,4	;volatile
 10036                           
 10037                           ;power.c: 70: TRISBbits.TRISB6 = 0;
 10038  02C2  130D               	bcf	13,6	;volatile
 10039                           
 10040                           ;power.c: 72: TRISBbits.TRISB5 = 0;
 10041  02C3  128D               	bcf	13,5	;volatile
 10042                           
 10043                           ;power.c: 73: LATBbits.LATB5 = 1;
 10044  02C4  0022               	movlb	2	; select bank2
 10045  02C5  168D               	bsf	13,5	;volatile
 10046  02C6  0008               	return
 10047  02C7                     __end_of_PwrI2cInit:	
 10048                           
 10049                           	psect	text28
 10050  02C7                     __ptext28:	
 10051 ;; *************** function _PwrAdcInit *****************
 10052 ;; Defined at:
 10053 ;;		line 171 in file "../../../src/node/power.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;		None
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;		None
 10058 ;; Return value:  Size  Location     Type
 10059 ;;		None               void
 10060 ;; Registers used:
 10061 ;;		status,2
 10062 ;; Tracked objects:
 10063 ;;		On entry : 17F/1
 10064 ;;		On exit  : 17F/1
 10065 ;;		Unchanged: 160/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10067 ;;      Params:         0       0       0       0
 10068 ;;      Locals:         0       0       0       0
 10069 ;;      Temps:          0       0       0       0
 10070 ;;      Totals:         0       0       0       0
 10071 ;;Total ram usage:        0 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    5
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_main
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _PwrAdcInit
 10083  02C7                     _PwrAdcInit:	
 10084                           
 10085                           ;power.c: 173: ANSELA = 0;
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _PwrAdcInit: [status,2]
 10089  02C7  0023               	movlb	3	; select bank3
 10090  02C8  018C               	clrf	12	;volatile
 10091                           
 10092                           ;power.c: 174: ANSELB = 0;
 10093  02C9  018D               	clrf	13	;volatile
 10094                           
 10095                           ;power.c: 175: ANSELC = 0;
 10096  02CA  018E               	clrf	14	;volatile
 10097                           
 10098                           ;power.c: 177: PORTCbits.RC0 = 1;
 10099  02CB  0020               	movlb	0	; select bank0
 10100  02CC  140E               	bsf	14,0	;volatile
 10101                           
 10102                           ;power.c: 178: TRISCbits.TRISC0 = 0;
 10103  02CD  0021               	movlb	1	; select bank1
 10104  02CE  100E               	bcf	14,0	;volatile
 10105  02CF  0008               	return
 10106  02D0                     __end_of_PwrAdcInit:	
 10107                           
 10108                           	psect	text30
 10109  02A3                     __ptext30:	
 10110 ;; *************** function _Mrf49xaRxPacket *****************
 10111 ;; Defined at:
 10112 ;;		line 92 in file "../../../src/devices/mrf49xa_mac.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10115 ;;		 -> mrf49xaInst(78), 
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  inst            1    0[BANK0 ] PTR struct Mrf49xaMac_s
 10118 ;;		 -> mrf49xaInst(78), 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;                  1    wreg      PTR struct rfTrcvPacket_
 10121 ;; Registers used:
 10122 ;;		wreg
 10123 ;; Tracked objects:
 10124 ;;		On entry : 1F/1
 10125 ;;		On exit  : 1F/1
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10128 ;;      Params:         0       0       0       0
 10129 ;;      Locals:         0       1       0       0
 10130 ;;      Temps:          0       0       0       0
 10131 ;;      Totals:         0       1       0       0
 10132 ;;Total ram usage:        1 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    5
 10135 ;; This function calls:
 10136 ;;		Nothing
 10137 ;; This function is called by:
 10138 ;;		_Mrf49xaTick
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           
 10143                           ;psect for function _Mrf49xaRxPacket
 10144  02A3                     _Mrf49xaRxPacket:	
 10145                           
 10146                           ;mrf49xa_mac.c: 94: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_HW_REA
      +                          DY_RX)
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _Mrf49xaRxPacket: [wreg]
 10150  02A3  0823               	movf	(_mrf49xaInst^(0+128)+3),w
 10151  02A4  3A05               	xorlw	5
 10152  02A5  1D03               	skipz
 10153  02A6  2AAA               	goto	l3274
 10154                           
 10155                           ;mrf49xa_mac.c: 95: {
 10156                           ;mrf49xa_mac.c: 96: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state = PKT_SW_BUSY;
 10157  02A7  3006               	movlw	6
 10158  02A8  00A3               	movwf	(_mrf49xaInst^(0+128)+3)
 10159                           
 10160                           ;mrf49xa_mac.c: 97: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
 10161  02A9  34A3               	retlw	(_mrf49xaInst+3)& (0+255)
 10162  02AA                     l3274:	
 10163                           
 10164                           ;mrf49xa_mac.c: 98: }
 10165                           ;mrf49xa_mac.c: 100: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_HW_RE
      +                          ADY_RX)
 10166  02AA  083B               	movf	(_mrf49xaInst^(0+128)+27),w
 10167  02AB  3A05               	xorlw	5
 10168  02AC  1D03               	skipz
 10169  02AD  3400               	retlw	0
 10170                           
 10171                           ;mrf49xa_mac.c: 101: {
 10172                           ;mrf49xa_mac.c: 102: ((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state = PKT_SW_BUSY;
 10173  02AE  3006               	movlw	6
 10174  02AF  00BB               	movwf	(_mrf49xaInst^(0+128)+27)
 10175                           
 10176                           ;mrf49xa_mac.c: 103: return &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1]);
 10177  02B0  34BB               	retlw	(_mrf49xaInst+27)& (0+255)
 10178  02B1                     __end_of_Mrf49xaRxPacket:	
 10179                           ;mrf49xa_mac.c: 104: }
 10180                           ;mrf49xa_mac.c: 106: return (0);
 10181                           
 10182                           
 10183                           	psect	intentry
 10184  0004                     __pintentry:	
 10185 ;; *************** function _extInt *****************
 10186 ;; Defined at:
 10187 ;;		line 38 in file "../../../src/bsp/pic16/interrupt.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;		None
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;  ofw             1    7[COMMON] unsigned char 
 10192 ;; Return value:  Size  Location     Type
 10193 ;;		None               void
 10194 ;; Registers used:
 10195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 1F/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10201 ;;      Params:         0       0       0       0
 10202 ;;      Locals:         1       0       0       0
 10203 ;;      Temps:          1       0       0       0
 10204 ;;      Totals:         2       0       0       0
 10205 ;;Total ram usage:        2 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    4
 10208 ;; This function calls:
 10209 ;;		_ExtIntDeinit
 10210 ;;		i1_Mrf49xaNeedsReset
 10211 ;;		i1_Mrf49xaServe
 10212 ;; This function is called by:
 10213 ;;		Interrupt level 1
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217  0004                     _extInt:	
 10218                           
 10219                           ;incstack = 0
 10220                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10221  0004  3180               	pagesel	$
 10222  0005  0020               	movlb	0	; select bank0
 10223  0006  087F               	movf	127,w
 10224  0007  00F6               	movwf	??_extInt
 10225                           
 10226                           ;interrupt.c: 40: if (INTCONbits.INTF != 0)
 10227  0008  1C8B               	btfss	11,1	;volatile
 10228  0009  281E               	goto	i1l144
 10229                           
 10230                           ;interrupt.c: 41: {
 10231                           ;interrupt.c: 42: uint8_t ofw = 0;
 10232  000A  01F7               	clrf	extInt@ofw
 10233  000B                     i1l3926:	
 10234                           ;interrupt.c: 43: while (!Mrf49xaServe(&mrf49xaInst))
 10235                           
 10236  000B  30A0               	movlw	_mrf49xaInst& (0+255)
 10237  000C  3180  2030  3180   	fcall	i1_Mrf49xaServe
 10238  000F  3A00               	xorlw	0
 10239  0010  1D03               	btfss	3,2
 10240  0011  281D               	goto	i1l143
 10241                           
 10242                           ;interrupt.c: 44: {
 10243                           ;interrupt.c: 45: ofw++;
 10244  0012  0AF7               	incf	extInt@ofw,f
 10245                           
 10246                           ;interrupt.c: 46: if (ofw == 255)
 10247  0013  0877               	movf	extInt@ofw,w
 10248  0014  3AFF               	xorlw	255
 10249  0015  1D03               	skipz
 10250  0016  280B               	goto	i1l3926
 10251                           
 10252                           ;interrupt.c: 47: {
 10253                           ;interrupt.c: 48: ExtIntDeinit();
 10254  0017  3182  22D6  3180   	fcall	_ExtIntDeinit
 10255                           
 10256                           ;interrupt.c: 49: Mrf49xaNeedsReset(&mrf49xaInst);
 10257  001A  30A0               	movlw	_mrf49xaInst& (0+255)
 10258  001B  3181  2151         	fcall	i1_Mrf49xaNeedsReset
 10259  001D                     i1l143:	
 10260                           ;interrupt.c: 50: break;
 10261                           
 10262                           
 10263                           ;interrupt.c: 51: }
 10264                           ;interrupt.c: 52: }
 10265                           ;interrupt.c: 53: INTCONbits.INTF = 0;
 10266  001D  108B               	bcf	11,1	;volatile
 10267  001E                     i1l144:	
 10268  001E  0876               	movf	??_extInt,w
 10269  001F  0020               	movlb	0	; select bank0
 10270  0020  00FF               	movwf	127
 10271  0021  0009               	retfie
 10272  0022                     __end_of_extInt:	
 10273                           
 10274                           	psect	text76
 10275  0024                     __ptext76:	
 10276 ;; *************** function i1_Mrf49RxCmd *****************
 10277 ;; Defined at:
 10278 ;;		line 18 in file "../../../src/devices/mrf49xa_cmd.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  cmd             1    wreg     unsigned char 
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;  cmd             1    1[COMMON] unsigned char 
 10283 ;;  Mrf49RxCmd      1    2[COMMON] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      unsigned char 
 10286 ;; Registers used:
 10287 ;;		wreg, status,2, status,0, pclath, cstack
 10288 ;; Tracked objects:
 10289 ;;		On entry : 1E/1
 10290 ;;		On exit  : 1F/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10293 ;;      Params:         0       0       0       0
 10294 ;;      Locals:         2       0       0       0
 10295 ;;      Temps:          0       0       0       0
 10296 ;;      Totals:         2       0       0       0
 10297 ;;Total ram usage:        2 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    1
 10300 ;; This function calls:
 10301 ;;		i1_Mrf49SpiRx
 10302 ;;		i1_Mrf49SpiTx
 10303 ;; This function is called by:
 10304 ;;		i1_Mrf49RxByte
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function i1_Mrf49RxCmd
 10310  0024                     i1_Mrf49RxCmd:	
 10311                           
 10312                           ;incstack = 0
 10313                           ; Regs used in i1_Mrf49RxCmd: [wreg+status,2+status,0+pclath+cstack]
 10314                           ;i1Mrf49RxCmd@cmd stored from wreg
 10315  0024  00F1               	movwf	i1Mrf49RxCmd@cmd
 10316                           
 10317                           ;mrf49xa_cmd.c: 20: PORTCbits.RC6 = 0;;
 10318  0025  0020               	movlb	0	; select bank0
 10319  0026  130E               	bcf	14,6	;volatile
 10320                           
 10321                           ;mrf49xa_cmd.c: 22: Mrf49SpiTx(cmd);
 10322  0027  0871               	movf	i1Mrf49RxCmd@cmd,w
 10323  0028  215E  3180         	fcall	i1_Mrf49SpiTx
 10324                           
 10325                           ;mrf49xa_cmd.c: 23: uint8_t val = Mrf49SpiRx();
 10326  002A  21DC               	fcall	i1_Mrf49SpiRx
 10327  002B  00F2               	movwf	i1Mrf49RxCmd@val
 10328                           
 10329                           ;mrf49xa_cmd.c: 25: PORTCbits.RC6 = 1;;
 10330  002C  0020               	movlb	0	; select bank0
 10331  002D  170E               	bsf	14,6	;volatile
 10332                           
 10333                           ;mrf49xa_cmd.c: 27: return val;
 10334  002E  0872               	movf	i1Mrf49RxCmd@val,w
 10335  002F  0008               	return
 10336  0030                     __end_ofi1_Mrf49RxCmd:	
 10337  0030                     __ptext69:	
 10338 ;; *************** function i1_Mrf49xaServe *****************
 10339 ;; Defined at:
 10340 ;;		line 7 in file "../../../src/devices/mrf49xa_phy.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10343 ;;		 -> mrf49xaInst(78), 
 10344 ;; Auto vars:     Size  Location     Type
 10345 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10346 ;;		 -> mrf49xaInst(78), 
 10347 ;;  Mrf49xaServe    1    5[COMMON] unsigned char 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      unsigned char 
 10350 ;; Registers used:
 10351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 1E/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10357 ;;      Params:         0       0       0       0
 10358 ;;      Locals:         1       0       0       0
 10359 ;;      Temps:          1       0       0       0
 10360 ;;      Totals:         2       0       0       0
 10361 ;;Total ram usage:        2 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    3
 10364 ;; This function calls:
 10365 ;;		i1_Mrf49RxByte
 10366 ;;		i1_Mrf49RxSts
 10367 ;;		i1_Mrf49TxByte
 10368 ;;		i1_Mrf49xaModeRx
 10369 ;;		i1_Mrf49xaNeedsReset
 10370 ;; This function is called by:
 10371 ;;		_extInt
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           
 10376                           ;psect for function i1_Mrf49xaServe
 10377  0030                     i1_Mrf49xaServe:	
 10378                           
 10379                           ;mrf49xa_phy.c: 10: uint8_t data;
 10380                           ;mrf49xa_phy.c: 12: if (((Mrf49xaMac_t*)(&mrf49xaInst))->state == POWERED_OFF)
 10381                           
 10382                           ;incstack = 0
 10383                           ; Regs used in i1_Mrf49xaServe: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10384  0030  0021               	movlb	1	; select bank1
 10385  0031  08EB               	movf	(_mrf49xaInst^(0+128)+75),f
 10386  0032  1903               	btfsc	3,2
 10387                           
 10388                           ;mrf49xa_phy.c: 13: return 0;
 10389  0033  3400               	retlw	0
 10390                           
 10391                           ;mrf49xa_phy.c: 16: if (((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset)
 10392  0034  1BED               	btfsc	(_mrf49xaInst^(0+128)+77),7
 10393  0035  3400               	retlw	0
 10394                           
 10395                           ;mrf49xa_phy.c: 19: Mrf49RxSts(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10396  0036  30A0               	movlw	_mrf49xaInst& (0+255)
 10397  0037  21CE  3180         	fcall	i1_Mrf49RxSts
 10398                           
 10399                           ;mrf49xa_phy.c: 21: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] == 0xFF && ((Mrf
      +                          49xaMac_t*)(&mrf49xaInst))->status.byte[1] == 0xFF)
 10400  0039  0021               	movlb	1	; select bank1
 10401  003A  0820               	movf	_mrf49xaInst^(0+128),w
 10402  003B  3AFF               	xorlw	255
 10403  003C  1D03               	skipz
 10404  003D  2842               	goto	i1l464
 10405  003E  0821               	movf	(_mrf49xaInst^(0+128)+1),w
 10406  003F  3AFF               	xorlw	255
 10407  0040  1903               	btfsc	3,2
 10408  0041  3400               	retlw	0
 10409  0042                     i1l464:	
 10410                           ;mrf49xa_phy.c: 26: {
 10411                           
 10412                           
 10413                           ;mrf49xa_phy.c: 28: }
 10414                           ;mrf49xa_phy.c: 31: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.overflow == 1)
 10415  0042  1AA0               	btfsc	_mrf49xaInst^(0+128),5
 10416  0043  2853               	goto	i1l3826
 10417  0044  2861               	goto	i1l465
 10418  0045                     i1l3820:	
 10419                           
 10420                           ;mrf49xa_phy.c: 36: case RECV_DATA:
 10421                           ;mrf49xa_phy.c: 39: data = Mrf49RxByte();
 10422  0045  214E  3180         	fcall	i1_Mrf49RxByte
 10423  0047  00F5               	movwf	i1Mrf49xaServe@data
 10424                           
 10425                           ;mrf49xa_phy.c: 40: data = Mrf49RxByte();
 10426  0048  214E  3180         	fcall	i1_Mrf49RxByte
 10427  004A  00F5               	movwf	i1Mrf49xaServe@data
 10428                           
 10429                           ;mrf49xa_phy.c: 43: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10430  004B  30A0               	movlw	_mrf49xaInst& (0+255)
 10431  004C  2129  3180         	fcall	i1_Mrf49xaModeRx
 10432                           
 10433                           ;mrf49xa_phy.c: 47: break;
 10434  004E  2861               	goto	i1l465
 10435  004F                     i1l3822:	
 10436                           
 10437                           ;mrf49xa_phy.c: 50: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10438  004F  30A0               	movlw	_mrf49xaInst& (0+255)
 10439  0050  2151  3180         	fcall	i1_Mrf49xaNeedsReset
 10440                           
 10441                           ;mrf49xa_phy.c: 51: break;
 10442  0052  2861               	goto	i1l465
 10443  0053                     i1l3826:	
 10444  0053  086B               	movf	(_mrf49xaInst^(0+128)+75),w
 10445                           
 10446                           ; Switch size 1, requested type "space"
 10447                           ; Number of cases is 4, Range of values is 0 to 3
 10448                           ; switch strategies available:
 10449                           ; Name         Instructions Cycles
 10450                           ; simple_byte           13     7 (average)
 10451                           ; direct_byte           14     6 (fixed)
 10452                           ; jumptable            260     6 (fixed)
 10453                           ;	Chosen strategy is simple_byte
 10454  0054  3A00               	xorlw	0	; case 0
 10455  0055  1903               	skipnz
 10456  0056  284F               	goto	i1l3822
 10457  0057  3A01               	xorlw	1	; case 1
 10458  0058  1903               	skipnz
 10459  0059  2845               	goto	i1l3820
 10460  005A  3A03               	xorlw	3	; case 2
 10461  005B  1903               	skipnz
 10462  005C  2845               	goto	i1l3820
 10463  005D  3A01               	xorlw	1	; case 3
 10464  005E  1903               	skipnz
 10465  005F  2861               	goto	i1l465
 10466  0060  2861               	goto	i1l465
 10467  0061                     i1l465:	
 10468                           
 10469                           ;mrf49xa_phy.c: 60: }
 10470                           ;mrf49xa_phy.c: 69: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx == 1)
 10471  0061  1BA0               	btfsc	_mrf49xaInst^(0+128),7
 10472  0062  2911               	goto	i1l3908
 10473  0063  291F               	goto	i1l3910
 10474  0064                     i1l3830:	
 10475                           
 10476                           ;mrf49xa_phy.c: 76: Mrf49xaNeedsReset(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10477  0064  30A0               	movlw	_mrf49xaInst& (0+255)
 10478  0065  2151  3180         	fcall	i1_Mrf49xaNeedsReset
 10479                           
 10480                           ;mrf49xa_phy.c: 77: break;
 10481  0067  291F               	goto	i1l3910
 10482  0068                     i1l3832:	
 10483                           
 10484                           ;mrf49xa_phy.c: 81: data = Mrf49RxByte();
 10485  0068  214E  3180         	fcall	i1_Mrf49RxByte
 10486  006A  00F5               	movwf	i1Mrf49xaServe@data
 10487                           
 10488                           ;mrf49xa_phy.c: 85: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK 
      +                          == 0)
 10489  006B  0021               	movlb	1	; select bank1
 10490  006C  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
 10491  006D  2872               	goto	i1l3838
 10492                           
 10493                           ;mrf49xa_phy.c: 86: {
 10494                           ;mrf49xa_phy.c: 87: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10495  006E  30A0               	movlw	_mrf49xaInst& (0+255)
 10496  006F  2129  3180         	fcall	i1_Mrf49xaModeRx
 10497                           
 10498                           ;mrf49xa_phy.c: 88: break;
 10499  0071  291F               	goto	i1l3910
 10500  0072                     i1l3838:	
 10501                           
 10502                           ;mrf49xa_phy.c: 89: }
 10503                           ;mrf49xa_phy.c: 91: if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0].state == PKT_FREE) 
      +                          ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[0]);
 10504  0072  08A3               	movf	(_mrf49xaInst^(0+128)+3),f
 10505  0073  1D03               	skipz
 10506  0074  2877               	goto	i1l3842
 10507  0075  30A3               	movlw	(_mrf49xaInst+3)& (0+255)
 10508  0076  287B               	goto	L4
 10509  0077                     i1l3842:	
 10510                           
 10511                           ;mrf49xa_phy.c: 92: else if (((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket[1].state == PKT_F
      +                          REE) ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx = &(((Mrf49xaMac_t*)(&mrf49xaInst))->rxPacket
      +                          [1]);
 10512  0077  08BB               	movf	(_mrf49xaInst^(0+128)+27),f
 10513  0078  1D03               	skipz
 10514  0079  287D               	goto	i1l3846
 10515  007A  30BB               	movlw	(_mrf49xaInst+27)& (0+255)
 10516  007B                     L4:	
 10517  007B  00A2               	movwf	(_mrf49xaInst+2)^(0+128)
 10518  007C  2881               	goto	i1l3848
 10519  007D                     i1l3846:	
 10520                           
 10521                           ;mrf49xa_phy.c: 93: else
 10522                           ;mrf49xa_phy.c: 94: {
 10523                           ;mrf49xa_phy.c: 97: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10524  007D  30A0               	movlw	_mrf49xaInst& (0+255)
 10525  007E  2129  3180         	fcall	i1_Mrf49xaModeRx
 10526                           
 10527                           ;mrf49xa_phy.c: 98: break;
 10528  0080  291F               	goto	i1l3910
 10529  0081                     i1l3848:	
 10530                           
 10531                           ;mrf49xa_phy.c: 99: }
 10532                           ;mrf49xa_phy.c: 101: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->packet.size = data;
 10533  0081  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
 10534  0082  0086               	movwf	6
 10535  0083  0187               	clrf	7
 10536  0084  0875               	movf	i1Mrf49xaServe@data,w
 10537  0085  0081               	movwf	1
 10538                           
 10539                           ;mrf49xa_phy.c: 102: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = 0;
 10540  0086  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10541  0087  3E16               	addlw	22
 10542  0088  0086               	movwf	6
 10543  0089  0181               	clrf	1
 10544                           
 10545                           ;mrf49xa_phy.c: 103: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_BUSY_RX;
 10546  008A  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10547  008B  0086               	movwf	6
 10548  008C  3004               	movlw	4
 10549  008D  0081               	movwf	1
 10550                           
 10551                           ;mrf49xa_phy.c: 105: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_DATA;
 10552  008E  3002               	movlw	2
 10553  008F  00EB               	movwf	(_mrf49xaInst^(0+128)+75)
 10554                           
 10555                           ;mrf49xa_phy.c: 106: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 1;
 10556  0090  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10557  0091  3980               	andlw	-128
 10558  0092  3801               	iorlw	1
 10559  0093  28C2               	goto	L5
 10560  0094                     i1l3858:	
 10561                           ;mrf49xa_phy.c: 108: break;
 10562                           
 10563                           
 10564                           ;mrf49xa_phy.c: 112: data = Mrf49RxByte();
 10565  0094  214E  3180         	fcall	i1_Mrf49RxByte
 10566  0096  00F5               	movwf	i1Mrf49xaServe@data
 10567                           
 10568                           ;mrf49xa_phy.c: 116: if (((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.lsb.dataQualityOK
      +                           == 0)
 10569  0097  0021               	movlb	1	; select bank1
 10570  0098  1BA1               	btfsc	(_mrf49xaInst^(0+128)+1),7
 10571  0099  28A2               	goto	i1l3866
 10572                           
 10573                           ;mrf49xa_phy.c: 117: {
 10574                           ;mrf49xa_phy.c: 118: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_FREE;
 10575  009A  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10576  009B  0086               	movwf	6
 10577  009C  30A0               	movlw	_mrf49xaInst& (0+255)
 10578  009D  0187               	clrf	7
 10579  009E  0181               	clrf	1
 10580                           
 10581                           ;mrf49xa_phy.c: 119: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10582  009F  2129  3180         	fcall	i1_Mrf49xaModeRx
 10583                           
 10584                           ;mrf49xa_phy.c: 120: break;
 10585  00A1  291F               	goto	i1l3910
 10586  00A2                     i1l3866:	
 10587                           
 10588                           ;mrf49xa_phy.c: 121: }
 10589                           ;mrf49xa_phy.c: 123: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->hwRx->packet.size)
 10590  00A2  0A22               	incf	(_mrf49xaInst+2)^(0+128),w
 10591  00A3  0086               	movwf	6
 10592  00A4  0187               	clrf	7
 10593  00A5  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10594  00A6  397F               	andlw	127
 10595  00A7  0601               	xorwf	1,w
 10596  00A8  1D03               	skipz
 10597  00A9  28B7               	goto	i1l3872
 10598                           
 10599                           ;mrf49xa_phy.c: 124: {
 10600                           ;mrf49xa_phy.c: 125: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->crc = data;
 10601  00AA  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10602  00AB  3E16               	addlw	22
 10603  00AC  0086               	movwf	6
 10604  00AD  0875               	movf	i1Mrf49xaServe@data,w
 10605  00AE  0081               	movwf	1
 10606                           
 10607                           ;mrf49xa_phy.c: 129: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->state = PKT_HW_READY_RX;
 10608  00AF  0822               	movf	(_mrf49xaInst+2)^(0+128),w
 10609  00B0  0086               	movwf	6
 10610  00B1  3005               	movlw	5
 10611  00B2  0081               	movwf	1
 10612                           
 10613                           ;mrf49xa_phy.c: 135: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10614  00B3  30A0               	movlw	_mrf49xaInst& (0+255)
 10615  00B4  2129  3180         	fcall	i1_Mrf49xaModeRx
 10616                           
 10617                           ;mrf49xa_phy.c: 137: }
 10618  00B6  291F               	goto	i1l3910
 10619  00B7                     i1l3872:	
 10620                           
 10621                           ;mrf49xa_phy.c: 138: else
 10622                           ;mrf49xa_phy.c: 139: {
 10623                           ;mrf49xa_phy.c: 140: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwRx->raw[((Mrf49xaMac_t*)(&mrf49x
      +                          aInst))->hwByte++] = data;
 10624  00B7  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10625  00B8  397F               	andlw	127
 10626  00B9  0722               	addwf	(_mrf49xaInst+2)^(0+128),w
 10627  00BA  00F4               	movwf	??i1_Mrf49xaServe
 10628  00BB  0A74               	incf	??i1_Mrf49xaServe,w
 10629  00BC  0086               	movwf	6
 10630  00BD  0187               	clrf	7
 10631  00BE  0875               	movf	i1Mrf49xaServe@data,w
 10632  00BF  0081               	movwf	1
 10633  00C0  2220  3180         	fcall	PL14	;call to abstracted procedure
 10634  00C2                     L5:	
 10635  00C2  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
 10636  00C3  291F               	goto	i1l3910
 10637  00C4                     i1l3876:	
 10638                           
 10639                           ;mrf49xa_phy.c: 146: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte++;
 10640  00C4  2220  3180         	fcall	PL14	;call to abstracted procedure
 10641  00C6  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
 10642                           
 10643                           ;mrf49xa_phy.c: 148: if (((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte == ((Mrf49xaMac_t*)(&mr
      +                          f49xaInst))->txPacket.packet.size)
 10644  00C7  397F               	andlw	127
 10645  00C8  0654               	xorwf	(_mrf49xaInst^(0+128)+52),w
 10646  00C9  1D03               	skipz
 10647  00CA  28FF               	goto	i1l3904
 10648                           
 10649                           ;mrf49xa_phy.c: 149: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 49;
 10650  00CB  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10651  00CC  3980               	andlw	-128
 10652  00CD  3831               	iorlw	49
 10653  00CE  00ED               	movwf	(_mrf49xaInst^(0+128)+77)
 10654  00CF  28FF               	goto	i1l3904
 10655  00D0                     i1l3880:	
 10656                           
 10657                           ;mrf49xa_phy.c: 154: Mrf49TxByte(0x2D);
 10658  00D0  302D               	movlw	45
 10659  00D1  2124  3180         	fcall	i1_Mrf49TxByte
 10660                           
 10661                           ;mrf49xa_phy.c: 155: break;
 10662  00D3  291F               	goto	i1l3910
 10663  00D4                     i1l3882:	
 10664                           
 10665                           ;mrf49xa_phy.c: 158: Mrf49TxByte(0xD4);
 10666  00D4  30D4               	movlw	212
 10667  00D5  2124  3180         	fcall	i1_Mrf49TxByte
 10668                           
 10669                           ;mrf49xa_phy.c: 159: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0x7F;
 10670  00D7  307F               	movlw	127
 10671  00D8  0021               	movlb	1	; select bank1
 10672  00D9  04ED               	iorwf	(_mrf49xaInst^(0+128)+77),f
 10673                           
 10674                           ;mrf49xa_phy.c: 160: break;
 10675  00DA  291F               	goto	i1l3910
 10676  00DB                     i1l3886:	
 10677                           
 10678                           ;mrf49xa_phy.c: 164: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.raw[((Mrf49xa
      +                          Mac_t*)(&mrf49xaInst))->hwByte]);
 10679  00DB  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10680  00DC  397F               	andlw	127
 10681  00DD  3ED4               	addlw	(_mrf49xaInst+52)& (0+255)
 10682  00DE  0086               	movwf	6
 10683  00DF  0187               	clrf	7
 10684  00E0  0801               	movf	1,w
 10685  00E1  2124  3180         	fcall	i1_Mrf49TxByte
 10686                           
 10687                           ;mrf49xa_phy.c: 165: break;
 10688  00E3  291F               	goto	i1l3910
 10689  00E4                     i1l3888:	
 10690                           
 10691                           ;mrf49xa_phy.c: 168: Mrf49TxByte(((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.crc);
 10692  00E4  0869               	movf	(_mrf49xaInst^(0+128)+73),w
 10693  00E5  2124  3180         	fcall	i1_Mrf49TxByte
 10694                           
 10695                           ;mrf49xa_phy.c: 169: break;
 10696  00E7  291F               	goto	i1l3910
 10697  00E8                     i1l3890:	
 10698                           
 10699                           ;mrf49xa_phy.c: 172: Mrf49TxByte(0x00);
 10700  00E8  3000               	movlw	0
 10701  00E9  2124  3180         	fcall	i1_Mrf49TxByte
 10702                           
 10703                           ;mrf49xa_phy.c: 173: break;
 10704  00EB  291F               	goto	i1l3910
 10705  00EC                     i1l3892:	
 10706                           
 10707                           ;mrf49xa_phy.c: 176: Mrf49TxByte(0x00);
 10708  00EC  3000               	movlw	0
 10709  00ED  2124  3180         	fcall	i1_Mrf49TxByte
 10710                           
 10711                           ;mrf49xa_phy.c: 177: Mrf49xaModeRx(((Mrf49xaMac_t*)(&mrf49xaInst)));
 10712  00EF  2129  3180         	fcall	i1_Mrf49xaModeRx
 10713                           
 10714                           ;mrf49xa_phy.c: 179: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.retry = 0;
 10715  00F1  30F0               	movlw	-16
 10716  00F2  05EA               	andwf	(_mrf49xaInst^(0+128)+74),f
 10717                           
 10718                           ;mrf49xa_phy.c: 181: if (((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.needAck == NEED_ACK)
 10719  00F3  0E6A               	swapf	(_mrf49xaInst^(0+128)+74),w
 10720  00F4  0C89               	rrf	9,f
 10721  00F5  0C89               	rrf	9,f
 10722  00F6  3903               	andlw	3
 10723  00F7  3A01               	xorlw	1
 10724  00F8  1D03               	skipz
 10725  00F9  28FD               	goto	i1l3900
 10726                           
 10727                           ;mrf49xa_phy.c: 182: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_WAITING_FOR_A
      +                          CK;
 10728  00FA  3003               	movlw	3
 10729  00FB  00D3               	movwf	(_mrf49xaInst^(0+128)+51)
 10730  00FC  291F               	goto	i1l3910
 10731  00FD                     i1l3900:	
 10732                           
 10733                           ;mrf49xa_phy.c: 183: else
 10734                           ;mrf49xa_phy.c: 184: ((Mrf49xaMac_t*)(&mrf49xaInst))->txPacket.state = PKT_FREE;
 10735  00FD  01D3               	clrf	(_mrf49xaInst^(0+128)+51)
 10736  00FE  291F               	goto	i1l3910
 10737  00FF                     i1l3904:	
 10738  00FF  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 10739  0100  397F               	andlw	127
 10740                           
 10741                           ; Switch size 1, requested type "space"
 10742                           ; Number of cases is 5, Range of values is 49 to 101
 10743                           ; switch strategies available:
 10744                           ; Name         Instructions Cycles
 10745                           ; simple_byte           16     9 (average)
 10746                           ; direct_byte          115     9 (fixed)
 10747                           ; jumptable            263     9 (fixed)
 10748                           ;	Chosen strategy is simple_byte
 10749  0101  3A31               	xorlw	49	; case 49
 10750  0102  1903               	skipnz
 10751  0103  28E4               	goto	i1l3888
 10752  0104  3A03               	xorlw	3	; case 50
 10753  0105  1903               	skipnz
 10754  0106  28E8               	goto	i1l3890
 10755  0107  3A01               	xorlw	1	; case 51
 10756  0108  1903               	skipnz
 10757  0109  28EC               	goto	i1l3892
 10758  010A  3A57               	xorlw	87	; case 100
 10759  010B  1903               	skipnz
 10760  010C  28D0               	goto	i1l3880
 10761  010D  3A01               	xorlw	1	; case 101
 10762  010E  1903               	skipnz
 10763  010F  28D4               	goto	i1l3882
 10764  0110  28DB               	goto	i1l3886
 10765  0111                     i1l3908:	
 10766  0111  086B               	movf	(_mrf49xaInst^(0+128)+75),w
 10767                           
 10768                           ; Switch size 1, requested type "space"
 10769                           ; Number of cases is 4, Range of values is 0 to 3
 10770                           ; switch strategies available:
 10771                           ; Name         Instructions Cycles
 10772                           ; simple_byte           13     7 (average)
 10773                           ; direct_byte           14     6 (fixed)
 10774                           ; jumptable            260     6 (fixed)
 10775                           ;	Chosen strategy is simple_byte
 10776  0112  3A00               	xorlw	0	; case 0
 10777  0113  1903               	skipnz
 10778  0114  2864               	goto	i1l3830
 10779  0115  3A01               	xorlw	1	; case 1
 10780  0116  1903               	skipnz
 10781  0117  2868               	goto	i1l3832
 10782  0118  3A03               	xorlw	3	; case 2
 10783  0119  1903               	skipnz
 10784  011A  2894               	goto	i1l3858
 10785  011B  3A01               	xorlw	1	; case 3
 10786  011C  1903               	skipnz
 10787  011D  28C4               	goto	i1l3876
 10788  011E  291F               	goto	i1l3910
 10789  011F                     i1l3910:	
 10790                           
 10791                           ;mrf49xa_phy.c: 191: }
 10792                           ;mrf49xa_phy.c: 205: return PORTAbits.RA2 == 1 ? 1 : 0;
 10793  011F  0020               	movlb	0	; select bank0
 10794  0120  0C0C               	rrf	12,w	;volatile
 10795  0121  0C89               	rrf	9,f
 10796  0122  3901               	andlw	1
 10797  0123  0008               	return
 10798  0124                     __end_ofi1_Mrf49xaServe:	
 10799  0124                     __ptext72:	
 10800 ;; *************** function i1_Mrf49TxByte *****************
 10801 ;; Defined at:
 10802 ;;		line 48 in file "../../../src/devices/mrf49xa_cmd.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  byte            1    wreg     unsigned char 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;  byte            1    3[COMMON] unsigned char 
 10807 ;; Return value:  Size  Location     Type
 10808 ;;		None               void
 10809 ;; Registers used:
 10810 ;;		wreg, status,2, status,0, pclath, cstack
 10811 ;; Tracked objects:
 10812 ;;		On entry : 1E/1
 10813 ;;		On exit  : 1F/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10816 ;;      Params:         0       0       0       0
 10817 ;;      Locals:         1       0       0       0
 10818 ;;      Temps:          0       0       0       0
 10819 ;;      Totals:         1       0       0       0
 10820 ;;Total ram usage:        1 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    2
 10823 ;; This function calls:
 10824 ;;		i1_Mrf49TxCmd
 10825 ;; This function is called by:
 10826 ;;		i1_Mrf49xaServe
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           
 10831                           ;psect for function i1_Mrf49TxByte
 10832  0124                     i1_Mrf49TxByte:	
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in i1_Mrf49TxByte: [wreg+status,2+status,0+pclath+cstack]
 10836                           ;i1Mrf49TxByte@byte stored from wreg
 10837  0124  00F3               	movwf	i1Mrf49TxByte@byte
 10838                           
 10839                           ;mrf49xa_cmd.c: 50: Mrf49TxCmd(0xB8, byte);
 10840  0125  00F1               	movwf	i1Mrf49TxCmd@val
 10841  0126  30B8               	movlw	184
 10842  0127  2154               	fcall	i1_Mrf49TxCmd
 10843  0128  0008               	return
 10844  0129                     __end_ofi1_Mrf49TxByte:	
 10845  0129                     __ptext71:	
 10846 ;; *************** function i1_Mrf49xaModeRx *****************
 10847 ;; Defined at:
 10848 ;;		line 75 in file "../../../src/devices/mrf49xa.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10851 ;;		 -> mrf49xaInst(78), 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10854 ;;		 -> mrf49xaInst(78), 
 10855 ;;  Mrf49xaModeR    1    3[COMMON] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;		None               void
 10858 ;; Registers used:
 10859 ;;		wreg, status,2, status,0, pclath, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 1E/0
 10862 ;;		On exit  : 1F/1
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10865 ;;      Params:         0       0       0       0
 10866 ;;      Locals:         1       0       0       0
 10867 ;;      Temps:          0       0       0       0
 10868 ;;      Totals:         1       0       0       0
 10869 ;;Total ram usage:        1 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    2
 10872 ;; This function calls:
 10873 ;;		i1_Mrf49TxCmd
 10874 ;; This function is called by:
 10875 ;;		i1_Mrf49xaServe
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           
 10880                           ;psect for function i1_Mrf49xaModeRx
 10881  0129                     i1_Mrf49xaModeRx:	
 10882  0129  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10883                           
 10884                           ;mrf49xa.c: 77: UI08_t k;
 10885                           ;mrf49xa.c: 78: for (k = 0; k < mrfRegset_RxCnt; k++) { Mrf49TxCmd(mrfRegset_Rx[k].reg, 
      +                          mrfRegset_Rx[k].val); };
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in i1_Mrf49xaModeRx: [wreg+status,2+status,0+pclath+cstack]
 10889  012A  01F3               	clrf	i1Mrf49xaModeRx@k
 10890  012B  3182               	movlp	high __stringtab
 10891  012C  000A               	callw
 10892  012D  3180               	pagesel	$	;select current page
 10893  012E  3800               	iorlw	0
 10894  012F  1D03               	skipz
 10895  0130  2933               	goto	i1l3782
 10896  0131  0020               	movlb	0	; select bank0
 10897  0132  2947               	goto	i1l211
 10898  0133                     i1l3782:	
 10899  0133  3573               	lslf	i1Mrf49xaModeRx@k,w
 10900  0134  3E4F               	addlw	low ((_mrfRegset_Rx| (0+32768)+1))
 10901  0135  3182               	movlp	high __stringtab
 10902  0136  000A               	callw
 10903  0137  00F1               	movwf	i1Mrf49TxCmd@val
 10904  0138  3573               	lslf	i1Mrf49xaModeRx@k,w
 10905  0139  3E4E               	addlw	low (_mrfRegset_Rx| (0+32768))
 10906  013A  3182               	movlp	high __stringtab
 10907  013B  000A               	callw
 10908  013C  3180               	pagesel	$	;select current page
 10909  013D  3181  2154         	fcall	i1_Mrf49TxCmd
 10910  013F  302B               	movlw	low (_mrfRegset_RxCnt| (0+32768))
 10911  0140  0AF3               	incf	i1Mrf49xaModeRx@k,f
 10912  0141  3182               	movlp	high __stringtab
 10913  0142  000A               	callw
 10914  0143  3180               	pagesel	$	;select current page
 10915  0144  0273               	subwf	i1Mrf49xaModeRx@k,w
 10916  0145  1C03               	skipc
 10917  0146  2933               	goto	i1l3782
 10918  0147                     i1l211:	
 10919                           
 10920                           ;mrf49xa.c: 81: ((Mrf49xaMac_t*)(&mrf49xaInst))->state = RECV_IDLE;
 10921  0147  0021               	movlb	1	; select bank1
 10922  0148  3080               	movlw	-128
 10923  0149  01EB               	clrf	(_mrf49xaInst^(0+128)+75)
 10924  014A  0AEB               	incf	(_mrf49xaInst^(0+128)+75),f
 10925                           
 10926                           ;mrf49xa.c: 82: ((Mrf49xaMac_t*)(&mrf49xaInst))->hwByte = 0;
 10927  014B  05ED               	andwf	(_mrf49xaInst^(0+128)+77),f
 10928                           
 10929                           ;mrf49xa.c: 84: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.flags.msb.fifoTxRx = 0;
 10930  014C  13A0               	bcf	_mrf49xaInst^(0+128),7
 10931  014D  0008               	return
 10932  014E                     __end_ofi1_Mrf49xaModeRx:	
 10933  014E                     __ptext75:	
 10934 ;; *************** function i1_Mrf49RxByte *****************
 10935 ;; Defined at:
 10936 ;;		line 43 in file "../../../src/devices/mrf49xa_cmd.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;		None
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;		None
 10941 ;; Return value:  Size  Location     Type
 10942 ;;                  1    wreg      unsigned char 
 10943 ;; Registers used:
 10944 ;;		wreg, status,2, status,0, pclath, cstack
 10945 ;; Tracked objects:
 10946 ;;		On entry : 1E/1
 10947 ;;		On exit  : 1F/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10950 ;;      Params:         0       0       0       0
 10951 ;;      Locals:         0       0       0       0
 10952 ;;      Temps:          0       0       0       0
 10953 ;;      Totals:         0       0       0       0
 10954 ;;Total ram usage:        0 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; Hardware stack levels required when called:    2
 10957 ;; This function calls:
 10958 ;;		i1_Mrf49RxCmd
 10959 ;; This function is called by:
 10960 ;;		i1_Mrf49xaServe
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           
 10965                           ;psect for function i1_Mrf49RxByte
 10966  014E                     i1_Mrf49RxByte:	
 10967                           
 10968                           ;mrf49xa_cmd.c: 45: return Mrf49RxCmd(0xB0);
 10969                           
 10970                           ;incstack = 0
 10971                           ; Regs used in i1_Mrf49RxByte: [wreg+status,2+status,0+pclath+cstack]
 10972  014E  30B0               	movlw	176
 10973  014F  2024               	fcall	i1_Mrf49RxCmd
 10974  0150  0008               	return
 10975  0151                     __end_ofi1_Mrf49RxByte:	
 10976  0151                     __ptext70:	
 10977 ;; *************** function i1_Mrf49xaNeedsReset *****************
 10978 ;; Defined at:
 10979 ;;		line 121 in file "../../../src/devices/mrf49xa.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 10982 ;;		 -> mrf49xaInst(78), 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 10985 ;;		 -> mrf49xaInst(78), 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;		None               void
 10988 ;; Registers used:
 10989 ;;		wreg
 10990 ;; Tracked objects:
 10991 ;;		On entry : 1E/0
 10992 ;;		On exit  : 1F/1
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10995 ;;      Params:         0       0       0       0
 10996 ;;      Locals:         0       0       0       0
 10997 ;;      Temps:          0       0       0       0
 10998 ;;      Totals:         0       0       0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; This function calls:
 11002 ;;		Nothing
 11003 ;; This function is called by:
 11004 ;;		_extInt
 11005 ;;		i1_Mrf49xaServe
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           
 11010                           ;psect for function i1_Mrf49xaNeedsReset
 11011  0151                     i1_Mrf49xaNeedsReset:	
 11012                           
 11013                           ;mrf49xa.c: 123: ((Mrf49xaMac_t*)(&mrf49xaInst))->needsReset = 1;
 11014                           
 11015                           ;incstack = 0
 11016                           ; Regs used in i1_Mrf49xaNeedsReset: [wreg]
 11017  0151  0021               	movlb	1	; select bank1
 11018  0152  17ED               	bsf	(_mrf49xaInst^(0+128)+77),7
 11019  0153  0008               	return
 11020  0154                     __end_ofi1_Mrf49xaNeedsReset:	
 11021  0154                     __ptext73:	
 11022 ;; *************** function i1_Mrf49TxCmd *****************
 11023 ;; Defined at:
 11024 ;;		line 6 in file "../../../src/devices/mrf49xa_cmd.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  cmd             1    wreg     unsigned char 
 11027 ;;  val             1    1[COMMON] unsigned char 
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  cmd             1    2[COMMON] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;		None               void
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0, pclath, cstack
 11034 ;; Tracked objects:
 11035 ;;		On entry : 1E/0
 11036 ;;		On exit  : 1F/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11039 ;;      Params:         1       0       0       0
 11040 ;;      Locals:         1       0       0       0
 11041 ;;      Temps:          0       0       0       0
 11042 ;;      Totals:         2       0       0       0
 11043 ;;Total ram usage:        2 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    1
 11046 ;; This function calls:
 11047 ;;		i1_Mrf49SpiTx
 11048 ;; This function is called by:
 11049 ;;		i1_Mrf49xaModeRx
 11050 ;;		i1_Mrf49TxByte
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           
 11055                           ;psect for function i1_Mrf49TxCmd
 11056  0154                     i1_Mrf49TxCmd:	
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in i1_Mrf49TxCmd: [wreg+status,2+status,0+pclath+cstack]
 11060                           ;i1Mrf49TxCmd@cmd stored from wreg
 11061  0154  00F2               	movwf	i1Mrf49TxCmd@cmd
 11062                           
 11063                           ;mrf49xa_cmd.c: 8: PORTCbits.RC6 = 0;;
 11064  0155  0020               	movlb	0	; select bank0
 11065  0156  130E               	bcf	14,6	;volatile
 11066                           
 11067                           ;mrf49xa_cmd.c: 10: Mrf49SpiTx(cmd);
 11068  0157  0872               	movf	i1Mrf49TxCmd@cmd,w
 11069  0158  215E  3180         	fcall	i1_Mrf49SpiTx
 11070                           
 11071                           ;mrf49xa_cmd.c: 11: Mrf49SpiTx(val);
 11072  015A  0871               	movf	i1Mrf49TxCmd@val,w
 11073  015B  215E               	fcall	i1_Mrf49SpiTx
 11074                           
 11075                           ;mrf49xa_cmd.c: 15: PORTCbits.RC6 = 1;;
 11076  015C  170E               	bsf	14,6	;volatile
 11077  015D  0008               	return
 11078  015E                     __end_ofi1_Mrf49TxCmd:	
 11079  015E                     __ptext77:	
 11080 ;; *************** function i1_Mrf49SpiTx *****************
 11081 ;; Defined at:
 11082 ;;		line 3 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 11083 ;; Parameters:    Size  Location     Type
 11084 ;;  byte            1    wreg     unsigned char 
 11085 ;; Auto vars:     Size  Location     Type
 11086 ;;  byte            1    0[COMMON] unsigned char 
 11087 ;; Return value:  Size  Location     Type
 11088 ;;		None               void
 11089 ;; Registers used:
 11090 ;;		wreg
 11091 ;; Tracked objects:
 11092 ;;		On entry : 1F/0
 11093 ;;		On exit  : 1F/0
 11094 ;;		Unchanged: 0/0
 11095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11096 ;;      Params:         0       0       0       0
 11097 ;;      Locals:         1       0       0       0
 11098 ;;      Temps:          0       0       0       0
 11099 ;;      Totals:         1       0       0       0
 11100 ;;Total ram usage:        1 bytes
 11101 ;; Hardware stack levels used:    1
 11102 ;; This function calls:
 11103 ;;		Nothing
 11104 ;; This function is called by:
 11105 ;;		i1_Mrf49TxCmd
 11106 ;;		i1_Mrf49RxCmd
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           
 11111                           ;psect for function i1_Mrf49SpiTx
 11112  015E                     i1_Mrf49SpiTx:	
 11113                           
 11114                           ;incstack = 0
 11115                           ; Regs used in i1_Mrf49SpiTx: [wreg]
 11116                           ;i1Mrf49SpiTx@byte stored from wreg
 11117  015E  00F0               	movwf	i1Mrf49SpiTx@byte
 11118                           
 11119                           ;mrf49xa_spi_pic16.c: 10: do { if ((byte & (1<<7)) != 0) PORTBbits.RB7 = 1; else PORTBbi
      +                          ts.RB7 = 0; LATCbits.LATC7 = 1; asm("nop");; LATCbits.LATC7 = 0; } while (0);;
 11120  015F  1FF0               	btfss	i1Mrf49SpiTx@byte,7
 11121  0160  2963               	goto	i1l255
 11122  0161  178D               	bsf	13,7	;volatile
 11123  0162  2964               	goto	i1l256
 11124  0163                     i1l255:	
 11125  0163  138D               	bcf	13,7	;volatile
 11126  0164                     i1l256:	
 11127  0164  0022               	movlb	2	; select bank2
 11128  0165  178E               	bsf	14,7	;volatile
 11129  0166  0000               	nop	;# 
 11130  0167  0022               	movlb	2	; select bank2
 11131  0168  138E               	bcf	14,7	;volatile
 11132  0169  1B70               	btfsc	i1Mrf49SpiTx@byte,6
 11133  016A  296D               	goto	i1l3698
 11134  016B  0020               	movlb	0	; select bank0
 11135  016C  2970               	goto	i1l259
 11136  016D                     i1l3698:	
 11137  016D  0020               	movlb	0	; select bank0
 11138  016E  178D               	bsf	13,7	;volatile
 11139  016F  2972               	goto	i1l260
 11140  0170                     i1l259:	
 11141  0170  0020               	movlb	0	; select bank0
 11142  0171  138D               	bcf	13,7	;volatile
 11143  0172                     i1l260:	
 11144  0172  0022               	movlb	2	; select bank2
 11145  0173  178E               	bsf	14,7	;volatile
 11146  0174  0000               	nop	;# 
 11147  0175  0022               	movlb	2	; select bank2
 11148  0176  138E               	bcf	14,7	;volatile
 11149  0177  1AF0               	btfsc	i1Mrf49SpiTx@byte,5
 11150  0178  297B               	goto	i1l3702
 11151  0179  0020               	movlb	0	; select bank0
 11152  017A  297E               	goto	i1l263
 11153  017B                     i1l3702:	
 11154  017B  0020               	movlb	0	; select bank0
 11155  017C  178D               	bsf	13,7	;volatile
 11156  017D  2980               	goto	i1l264
 11157  017E                     i1l263:	
 11158  017E  0020               	movlb	0	; select bank0
 11159  017F  138D               	bcf	13,7	;volatile
 11160  0180                     i1l264:	
 11161  0180  0022               	movlb	2	; select bank2
 11162  0181  178E               	bsf	14,7	;volatile
 11163  0182  0000               	nop	;# 
 11164  0183  0022               	movlb	2	; select bank2
 11165  0184  138E               	bcf	14,7	;volatile
 11166  0185  1A70               	btfsc	i1Mrf49SpiTx@byte,4
 11167  0186  2989               	goto	i1l3706
 11168  0187  0020               	movlb	0	; select bank0
 11169  0188  298C               	goto	i1l267
 11170  0189                     i1l3706:	
 11171  0189  0020               	movlb	0	; select bank0
 11172  018A  178D               	bsf	13,7	;volatile
 11173  018B  298E               	goto	i1l268
 11174  018C                     i1l267:	
 11175  018C  0020               	movlb	0	; select bank0
 11176  018D  138D               	bcf	13,7	;volatile
 11177  018E                     i1l268:	
 11178  018E  0022               	movlb	2	; select bank2
 11179  018F  178E               	bsf	14,7	;volatile
 11180  0190  0000               	nop	;# 
 11181  0191  0022               	movlb	2	; select bank2
 11182  0192  138E               	bcf	14,7	;volatile
 11183  0193  19F0               	btfsc	i1Mrf49SpiTx@byte,3
 11184  0194  2997               	goto	i1l3710
 11185  0195  0020               	movlb	0	; select bank0
 11186  0196  299A               	goto	i1l271
 11187  0197                     i1l3710:	
 11188  0197  0020               	movlb	0	; select bank0
 11189  0198  178D               	bsf	13,7	;volatile
 11190  0199  299C               	goto	i1l272
 11191  019A                     i1l271:	
 11192  019A  0020               	movlb	0	; select bank0
 11193  019B  138D               	bcf	13,7	;volatile
 11194  019C                     i1l272:	
 11195  019C  0022               	movlb	2	; select bank2
 11196  019D  178E               	bsf	14,7	;volatile
 11197  019E  0000               	nop	;# 
 11198  019F  0022               	movlb	2	; select bank2
 11199  01A0  138E               	bcf	14,7	;volatile
 11200  01A1  1970               	btfsc	i1Mrf49SpiTx@byte,2
 11201  01A2  29A5               	goto	i1l3714
 11202  01A3  0020               	movlb	0	; select bank0
 11203  01A4  29A8               	goto	i1l275
 11204  01A5                     i1l3714:	
 11205  01A5  0020               	movlb	0	; select bank0
 11206  01A6  178D               	bsf	13,7	;volatile
 11207  01A7  29AA               	goto	i1l276
 11208  01A8                     i1l275:	
 11209  01A8  0020               	movlb	0	; select bank0
 11210  01A9  138D               	bcf	13,7	;volatile
 11211  01AA                     i1l276:	
 11212  01AA  0022               	movlb	2	; select bank2
 11213  01AB  178E               	bsf	14,7	;volatile
 11214  01AC  0000               	nop	;# 
 11215  01AD  0022               	movlb	2	; select bank2
 11216  01AE  138E               	bcf	14,7	;volatile
 11217  01AF  18F0               	btfsc	i1Mrf49SpiTx@byte,1
 11218  01B0  29B3               	goto	i1l3718
 11219  01B1  0020               	movlb	0	; select bank0
 11220  01B2  29B6               	goto	i1l279
 11221  01B3                     i1l3718:	
 11222  01B3  0020               	movlb	0	; select bank0
 11223  01B4  178D               	bsf	13,7	;volatile
 11224  01B5  29B8               	goto	i1l280
 11225  01B6                     i1l279:	
 11226  01B6  0020               	movlb	0	; select bank0
 11227  01B7  138D               	bcf	13,7	;volatile
 11228  01B8                     i1l280:	
 11229  01B8  0022               	movlb	2	; select bank2
 11230  01B9  178E               	bsf	14,7	;volatile
 11231  01BA  0000               	nop	;# 
 11232  01BB  0022               	movlb	2	; select bank2
 11233  01BC  138E               	bcf	14,7	;volatile
 11234  01BD  1870               	btfsc	i1Mrf49SpiTx@byte,0
 11235  01BE  29C1               	goto	i1l3722
 11236  01BF  0020               	movlb	0	; select bank0
 11237  01C0  29C4               	goto	i1l283
 11238  01C1                     i1l3722:	
 11239  01C1  0020               	movlb	0	; select bank0
 11240  01C2  178D               	bsf	13,7	;volatile
 11241  01C3  29C6               	goto	i1l284
 11242  01C4                     i1l283:	
 11243  01C4  0020               	movlb	0	; select bank0
 11244  01C5  138D               	bcf	13,7	;volatile
 11245  01C6                     i1l284:	
 11246  01C6  0022               	movlb	2	; select bank2
 11247  01C7  178E               	bsf	14,7	;volatile
 11248  01C8  0000               	nop	;# 
 11249  01C9  0022               	movlb	2	; select bank2
 11250  01CA  138E               	bcf	14,7	;volatile
 11251                           
 11252                           ;mrf49xa_spi_pic16.c: 18: PORTBbits.RB7 = 0;
 11253  01CB  0020               	movlb	0	; select bank0
 11254  01CC  138D               	bcf	13,7	;volatile
 11255  01CD  0008               	return
 11256  01CE                     __end_ofi1_Mrf49SpiTx:	
 11257  01CE                     __ptext74:	
 11258 ;; *************** function i1_Mrf49RxSts *****************
 11259 ;; Defined at:
 11260 ;;		line 31 in file "../../../src/devices/mrf49xa_cmd.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;  inst            1    wreg     PTR struct Mrf49xaMac_s
 11263 ;;		 -> mrf49xaInst(78), 
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;  inst            1  (no storage) PTR struct Mrf49xaMac_s
 11266 ;;		 -> mrf49xaInst(78), 
 11267 ;; Return value:  Size  Location     Type
 11268 ;;		None               void
 11269 ;; Registers used:
 11270 ;;		wreg, status,2, pclath, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 1F/1
 11273 ;;		On exit  : 1F/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11276 ;;      Params:         0       0       0       0
 11277 ;;      Locals:         0       0       0       0
 11278 ;;      Temps:          0       0       0       0
 11279 ;;      Totals:         0       0       0       0
 11280 ;;Total ram usage:        0 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    1
 11283 ;; This function calls:
 11284 ;;		i1_Mrf49SpiRx
 11285 ;; This function is called by:
 11286 ;;		i1_Mrf49xaServe
 11287 ;; This function uses a non-reentrant model
 11288 ;;
 11289                           
 11290                           
 11291                           ;psect for function i1_Mrf49RxSts
 11292  01CE                     i1_Mrf49RxSts:	
 11293                           
 11294                           ;mrf49xa_cmd.c: 33: INTCONbits.INTE = 0;;
 11295                           
 11296                           ;incstack = 0
 11297                           ; Regs used in i1_Mrf49RxSts: [wreg+status,2+pclath+cstack]
 11298  01CE  120B               	bcf	11,4	;volatile
 11299                           
 11300                           ;mrf49xa_cmd.c: 34: PORTCbits.RC6 = 0;;
 11301  01CF  0020               	movlb	0	; select bank0
 11302  01D0  130E               	bcf	14,6	;volatile
 11303                           
 11304                           ;mrf49xa_cmd.c: 36: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[0] = Mrf49SpiRx();
 11305  01D1  21DC  3180         	fcall	i1_Mrf49SpiRx
 11306  01D3  0021               	movlb	1	; select bank1
 11307  01D4  00A0               	movwf	_mrf49xaInst^(0+128)
 11308                           
 11309                           ;mrf49xa_cmd.c: 37: ((Mrf49xaMac_t*)(&mrf49xaInst))->status.byte[1] = Mrf49SpiRx();
 11310  01D5  21DC               	fcall	i1_Mrf49SpiRx
 11311  01D6  0021               	movlb	1	; select bank1
 11312  01D7  00A1               	movwf	(_mrf49xaInst^(0+128)+1)
 11313                           
 11314                           ;mrf49xa_cmd.c: 39: PORTCbits.RC6 = 1;;
 11315  01D8  0020               	movlb	0	; select bank0
 11316  01D9  170E               	bsf	14,6	;volatile
 11317                           
 11318                           ;mrf49xa_cmd.c: 40: INTCONbits.INTE = 1;;
 11319  01DA  160B               	bsf	11,4	;volatile
 11320  01DB  0008               	return
 11321  01DC                     __end_ofi1_Mrf49RxSts:	
 11322  01DC                     __ptext78:	
 11323 ;; *************** function i1_Mrf49SpiRx *****************
 11324 ;; Defined at:
 11325 ;;		line 21 in file "../../../src/devices/mrf49xa_spi_pic16.c"
 11326 ;; Parameters:    Size  Location     Type
 11327 ;;		None
 11328 ;; Auto vars:     Size  Location     Type
 11329 ;;  Mrf49SpiRx      1    0[COMMON] unsigned char 
 11330 ;; Return value:  Size  Location     Type
 11331 ;;                  1    wreg      unsigned char 
 11332 ;; Registers used:
 11333 ;;		wreg, status,2
 11334 ;; Tracked objects:
 11335 ;;		On entry : 1E/0
 11336 ;;		On exit  : 1F/2
 11337 ;;		Unchanged: 0/0
 11338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11339 ;;      Params:         0       0       0       0
 11340 ;;      Locals:         1       0       0       0
 11341 ;;      Temps:          0       0       0       0
 11342 ;;      Totals:         1       0       0       0
 11343 ;;Total ram usage:        1 bytes
 11344 ;; Hardware stack levels used:    1
 11345 ;; This function calls:
 11346 ;;		Nothing
 11347 ;; This function is called by:
 11348 ;;		i1_Mrf49RxCmd
 11349 ;;		i1_Mrf49RxSts
 11350 ;; This function uses a non-reentrant model
 11351 ;;
 11352                           
 11353                           
 11354                           ;psect for function i1_Mrf49SpiRx
 11355  01DC                     i1_Mrf49SpiRx:	
 11356                           
 11357                           ;mrf49xa_spi_pic16.c: 23: uint8_t data = 0;
 11358                           
 11359                           ;incstack = 0
 11360                           ; Regs used in i1_Mrf49SpiRx: [wreg+status,2]
 11361  01DC  01F0               	clrf	i1Mrf49SpiRx@data
 11362                           
 11363                           ;mrf49xa_spi_pic16.c: 24: PORTBbits.RB7 = 0;
 11364  01DD  0020               	movlb	0	; select bank0
 11365  01DE  138D               	bcf	13,7	;volatile
 11366  01DF  1A8E               	btfsc	14,5	;volatile
 11367  01E0  17F0               	bsf	i1Mrf49SpiRx@data,7
 11368  01E1  0022               	movlb	2	; select bank2
 11369  01E2  178E               	bsf	14,7	;volatile
 11370  01E3  0000               	nop	;# 
 11371  01E4  0022               	movlb	2	; select bank2
 11372  01E5  138E               	bcf	14,7	;volatile
 11373                           
 11374                           ;mrf49xa_spi_pic16.c: 32: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11375  01E6  0020               	movlb	0	; select bank0
 11376  01E7  1A8E               	btfsc	14,5	;volatile
 11377  01E8  1770               	bsf	i1Mrf49SpiRx@data,6
 11378  01E9  0022               	movlb	2	; select bank2
 11379  01EA  178E               	bsf	14,7	;volatile
 11380  01EB  0000               	nop	;# 
 11381  01EC  0022               	movlb	2	; select bank2
 11382  01ED  138E               	bcf	14,7	;volatile
 11383                           
 11384                           ;mrf49xa_spi_pic16.c: 33: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11385  01EE  0020               	movlb	0	; select bank0
 11386  01EF  1A8E               	btfsc	14,5	;volatile
 11387  01F0  16F0               	bsf	i1Mrf49SpiRx@data,5
 11388  01F1  0022               	movlb	2	; select bank2
 11389  01F2  178E               	bsf	14,7	;volatile
 11390  01F3  0000               	nop	;# 
 11391  01F4  0022               	movlb	2	; select bank2
 11392  01F5  138E               	bcf	14,7	;volatile
 11393                           
 11394                           ;mrf49xa_spi_pic16.c: 34: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11395  01F6  0020               	movlb	0	; select bank0
 11396  01F7  1A8E               	btfsc	14,5	;volatile
 11397  01F8  1670               	bsf	i1Mrf49SpiRx@data,4
 11398  01F9  0022               	movlb	2	; select bank2
 11399  01FA  178E               	bsf	14,7	;volatile
 11400  01FB  0000               	nop	;# 
 11401  01FC  0022               	movlb	2	; select bank2
 11402  01FD  138E               	bcf	14,7	;volatile
 11403                           
 11404                           ;mrf49xa_spi_pic16.c: 35: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11405  01FE  0020               	movlb	0	; select bank0
 11406  01FF  1A8E               	btfsc	14,5	;volatile
 11407  0200  15F0               	bsf	i1Mrf49SpiRx@data,3
 11408  0201  0022               	movlb	2	; select bank2
 11409  0202  178E               	bsf	14,7	;volatile
 11410  0203  0000               	nop	;# 
 11411  0204  0022               	movlb	2	; select bank2
 11412  0205  138E               	bcf	14,7	;volatile
 11413                           
 11414                           ;mrf49xa_spi_pic16.c: 36: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11415  0206  0020               	movlb	0	; select bank0
 11416  0207  1A8E               	btfsc	14,5	;volatile
 11417  0208  1570               	bsf	i1Mrf49SpiRx@data,2
 11418  0209  0022               	movlb	2	; select bank2
 11419  020A  178E               	bsf	14,7	;volatile
 11420  020B  0000               	nop	;# 
 11421  020C  0022               	movlb	2	; select bank2
 11422  020D  138E               	bcf	14,7	;volatile
 11423                           
 11424                           ;mrf49xa_spi_pic16.c: 37: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11425  020E  0020               	movlb	0	; select bank0
 11426  020F  1A8E               	btfsc	14,5	;volatile
 11427  0210  14F0               	bsf	i1Mrf49SpiRx@data,1
 11428  0211  0022               	movlb	2	; select bank2
 11429  0212  178E               	bsf	14,7	;volatile
 11430  0213  0000               	nop	;# 
 11431  0214  0022               	movlb	2	; select bank2
 11432  0215  138E               	bcf	14,7	;volatile
 11433                           
 11434                           ;mrf49xa_spi_pic16.c: 38: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; as
      +                          m("nop");; LATCbits.LATC7 = 0; } while (0);;
 11435  0216  0020               	movlb	0	; select bank0
 11436  0217  1A8E               	btfsc	14,5	;volatile
 11437  0218  1470               	bsf	i1Mrf49SpiRx@data,0
 11438  0219  0022               	movlb	2	; select bank2
 11439  021A  178E               	bsf	14,7	;volatile
 11440  021B  0000               	nop	;# 
 11441  021C  0022               	movlb	2	; select bank2
 11442  021D  138E               	bcf	14,7	;volatile
 11443                           
 11444                           ;mrf49xa_spi_pic16.c: 40: return data;
 11445  021E  0870               	movf	i1Mrf49SpiRx@data,w
 11446  021F  0008               	return
 11447  0220                     __end_ofi1_Mrf49SpiRx:	
 11448  0220                     PL14:	
 11449  0220  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 11450  0221  397F               	andlw	127
 11451  0222  00F4               	movwf	??i1_Mrf49xaServe
 11452  0223  0AF4               	incf	??i1_Mrf49xaServe,f
 11453  0224  086D               	movf	(_mrf49xaInst^(0+128)+77),w
 11454  0225  0674               	xorwf	??i1_Mrf49xaServe,w
 11455  0226  3980               	andlw	-128
 11456  0227  0674               	xorwf	??i1_Mrf49xaServe,w
 11457  0228  0008               	return
 11458  0229                     __end_ofPL14:	
 11459                           
 11460                           	psect	text79
 11461  02D6                     __ptext79:	
 11462 ;; *************** function _ExtIntDeinit *****************
 11463 ;; Defined at:
 11464 ;;		line 17 in file "../../../src/bsp/pic16/interrupt.c"
 11465 ;; Parameters:    Size  Location     Type
 11466 ;;		None
 11467 ;; Auto vars:     Size  Location     Type
 11468 ;;		None
 11469 ;; Return value:  Size  Location     Type
 11470 ;;		None               void
 11471 ;; Registers used:
 11472 ;;		None
 11473 ;; Tracked objects:
 11474 ;;		On entry : 1E/0
 11475 ;;		On exit  : 1E/0
 11476 ;;		Unchanged: 1E/0
 11477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11478 ;;      Params:         0       0       0       0
 11479 ;;      Locals:         0       0       0       0
 11480 ;;      Temps:          0       0       0       0
 11481 ;;      Totals:         0       0       0       0
 11482 ;;Total ram usage:        0 bytes
 11483 ;; Hardware stack levels used:    1
 11484 ;; This function calls:
 11485 ;;		Nothing
 11486 ;; This function is called by:
 11487 ;;		_extInt
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           
 11492                           ;psect for function _ExtIntDeinit
 11493  02D6                     _ExtIntDeinit:	
 11494                           
 11495                           ;interrupt.c: 19: INTCONbits.INTE = 0;
 11496                           
 11497                           ;incstack = 0
 11498                           ; Regs used in _ExtIntDeinit: []
 11499  02D6  120B               	bcf	11,4	;volatile
 11500  02D7  0008               	return
 11501  02D8                     __end_of_ExtIntDeinit:	
 11502  007E                     btemp	set	126	;btemp
 11503  007E                     wtemp	set	126
 11504  007E                     wtemp0	set	126
 11505  0080                     wtemp1	set	128
 11506  0082                     wtemp2	set	130
 11507  0084                     wtemp3	set	132
 11508  0086                     wtemp4	set	134
 11509  0088                     wtemp5	set	136
 11510  007F                     wtemp6	set	127
 11511  007E                     ttemp	set	126
 11512  007E                     ttemp0	set	126
 11513  0081                     ttemp1	set	129
 11514  0084                     ttemp2	set	132
 11515  0087                     ttemp3	set	135
 11516  007F                     ttemp4	set	127
 11517  007E                     ltemp	set	126
 11518  007E                     ltemp0	set	126
 11519  0082                     ltemp1	set	130
 11520  0086                     ltemp2	set	134
 11521  0080                     ltemp3	set	128


Data Sizes:
    Strings     4
    Constant    68
    Data        2
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80     21      32
    BANK1            80      0      78
    BANK2            80      0       0

Pointer List with Targets:

    Mrf49xaReboot@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaShutdown@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    RfSendSampleWeatherNode@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    RfSendPowerState@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaTick@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaAllocPacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaTxAck@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaModeTx@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaFreePacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    HandlePacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaRxPacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaPacketPending@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaInit@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaTxPacket@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaModeRx@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaModeSleep@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49RxSts@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaServe@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    Mrf49xaNeedsReset@inst	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    memcpy@d1	PTR void  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgRead@packet..(COMMON[21]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgRead@packet..(COMMON[21]), 

    memcpy@s1	PTR const void  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgWrite@packet..(COMMON[21]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgWrite@packet..(COMMON[21]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    S2038$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    macPtr.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    macPtr	PTR struct Mrf49xaMac_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    RfSendSampleWeatherNode@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    RfSendPowerState@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    HandlePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    handleCfgCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    handleCfgWrite@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    sp__memcpy	PTR void  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleCfgRead@packet..(COMMON[21]), 

    S1146CfgParameter_s$ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    parameters.ptr	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), 

    handleCfgRead@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    handleFwCmd@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaTick@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    sp__Mrf49xaAllocPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    sp__Mrf49xaRxPacket	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaFreePacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaTxAck@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    Mrf49xaTxPacket@packet	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> NULL(NULL[0]), mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 

    eepromTxBytes@data	PTR unsigned char  size(1) Largest target is 9
		 -> cfgRam(BANK0[9]), eepromTxByte@byte(COMMON[1]), 

    eepromRxBytes@data	PTR unsigned char  size(1) Largest target is 21
		 -> mrf49xaInst.rxPacket...data(BANK1[16]), NULL...data(NULL[16]), mrf49xaInst...data(BANK1[16]), cfgRam(BANK0[9]), 
		 -> handleFwCmd@packet..(COMMON[21]), eepromRxByte@dat(COMMON[1]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> Absolute function(), 

    S262Mrf49xaMac_s$hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> mrf49xaInst(BANK1[78]), 

    mrf49xaInst.hwRx	PTR struct rfTrcvPacket_s size(1) Largest target is 79
		 -> mrf49xaInst.rxPacket(BANK1[48]), mrf49xaInst(BANK1[78]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->i1_Mrf49xaServe
    i1_Mrf49xaServe->i1_Mrf49TxByte
    i1_Mrf49xaServe->i1_Mrf49xaModeRx
    i1_Mrf49xaModeRx->i1_Mrf49TxCmd
    i1_Mrf49TxByte->i1_Mrf49TxCmd
    i1_Mrf49TxCmd->i1_Mrf49SpiTx
    i1_Mrf49RxSts->i1_Mrf49SpiRx
    i1_Mrf49RxByte->i1_Mrf49RxCmd
    i1_Mrf49RxCmd->i1_Mrf49SpiRx
    i1_Mrf49RxCmd->i1_Mrf49SpiTx

Critical Paths under _main in BANK0

    _main->_Mrf49xaTick
    _RfSendSampleWeatherNode->_Mrf49xaTxPacket
    _RfSendPowerState->_Mrf49xaTxPacket
    _AdcSample->_AdcGetResult
    _PwrRfWake->_Mrf49xaReboot
    _Mrf49xaReboot->_Mrf49xaModeRx
    _PwrRfSleep->_Mrf49xaShutdown
    _Mrf49xaShutdown->_Mrf49xaModeSleep
    _Mrf49xaModeSleep->_Mrf49TxCmd
    _PwrRfInit->_Mrf49xaInit
    _SoftI2cInit->_SoftI2cTxByte
    _Mrf49xaTick->_HandlePacket
    _Mrf49xaModeTx->_Mrf49TxCmd
    _Mrf49xaInit->_Mrf49xaServe
    _Mrf49xaServe->_Mrf49xaModeRx
    _Mrf49xaModeRx->_Mrf49TxCmd
    _Mrf49TxByte->_Mrf49TxCmd
    _Mrf49TxCmd->_Mrf49SpiTx
    _Mrf49RxSts->_Mrf49SpiRx
    _Mrf49RxByte->_Mrf49RxCmd
    _Mrf49RxCmd->_Mrf49SpiRx
    _Mrf49RxCmd->_Mrf49SpiTx
    _HandlePacket->_Mrf49xaTxAck
    _HandlePacket->_handleCfgCmd
    _HandlePacket->_handleCfgRead
    _HandlePacket->_handleCfgWrite
    _HandlePacket->_handleFwCmd
    _handleFwCmd->_eepromRxBytes
    _handleCfgWrite->_memcpy
    _handleCfgRead->_memcpy
    _CfgSave->_eepromTxBytes
    _eepromTxBytes->_SoftI2cTxByte
    _CfgLoad->_eepromRxBytes
    _eepromRxBytes->_SoftI2cRxByte
    _eepromRxBytes->_SoftI2cTxByte
    _SoftI2cRepeatedStart->_SoftI2cNop
    _Mrf49xaTxAck->_Mrf49xaTxPacket
    _Mcp9800Start->_SoftI2cTxByte
    _Mcp9800Read->_SoftI2cRxByte
    _Mcp9800Read->_SoftI2cTxByte
    _SoftI2cTxByte->_SoftI2cNop
    _SoftI2cStop->_SoftI2cNop
    _SoftI2cStart->_SoftI2cNop
    _SoftI2cRxByte->_SoftI2cNop

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   36395
                                             17 BANK0      4     4      0
                          _AdcSample
                            _CfgLoad
                        _Mcp9800Read
                       _Mcp9800Start
                  _Mrf49xaNeedsReset
                        _Mrf49xaTick
                         _PwrAdcInit
                        _PwrAdcSleep
                         _PwrAdcWake
                         _PwrI2cInit
                        _PwrI2cSleep
                         _PwrI2cWake
                          _PwrRfInit
                         _PwrRfSleep
                          _PwrRfWake
                      _PwrSensorInit
                     _PwrSensorSleep
                      _PwrSensorWake
                   _RfSendPowerState
            _RfSendSampleWeatherNode
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _RfSendSampleWeatherNode                              6     2      4    2530
                                              7 BANK0      6     2      4
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (1) _RfSendPowerState                                     4     4      0    2302
                                              7 BANK0      4     4      0
                          _AdcSample
                 _Mrf49xaAllocPacket
                    _Mrf49xaTxPacket
                        _PwrAdcSleep
                         _PwrAdcWake
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               9     9      0      81
                                              0 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcWake                                           0     0      0       0
                            _AdcInit
 ---------------------------------------------------------------------------------
 (3) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PwrAdcSleep                                          0     0      0       0
                          _AdcDeinit
 ---------------------------------------------------------------------------------
 (3) _AdcDeinit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaAllocPacket                                   1     1      0     126
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _AdcSample                                            4     2      2      44
                                              2 BANK0      4     2      2
                        _AdcChSelect
                       _AdcGetResult
                              _AdcGo
                          _AdcIsBusy
 ---------------------------------------------------------------------------------
 (3) _AdcIsBusy                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGo                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdcGetResult                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _AdcChSelect                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorWake                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorSleep                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrSensorInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrRfWake                                            0     0      0    1398
                      _Mrf49xaReboot
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaReboot                                        1     1      0    1398
                                              5 BANK0      1     1      0
                      _Mrf49xaModeRx
 ---------------------------------------------------------------------------------
 (1) _PwrRfSleep                                           0     0      0     957
                    _Mrf49xaShutdown
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaShutdown                                      1     1      0     957
                                              5 BANK0      1     1      0
                   _Mrf49xaModeSleep
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeSleep                                     2     2      0     894
                                              3 BANK0      2     2      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (1) _PwrRfInit                                            0     0      0    7380
                         _ExtIntInit
                        _Mrf49xaInit
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _PwrI2cWake                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cSleep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PwrI2cInit                                           0     0      0      97
                        _SoftI2cInit
 ---------------------------------------------------------------------------------
 (2) _SoftI2cInit                                          0     0      0      97
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _PwrAdcInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mrf49xaTick                                          4     4      0   18919
                                             13 BANK0      4     4      0
                         _ExtIntInit
                       _HandlePacket
                         _Mrf49RxSts
                  _Mrf49xaFreePacket
                        _Mrf49xaInit
                      _Mrf49xaModeTx
                  _Mrf49xaNeedsReset
               _Mrf49xaPacketPending
                    _Mrf49xaRxPacket
                             _Sleepy
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaRxPacket                                      1     1      0      63
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaPacketPending                                 1     1      0      63
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaModeTx                                        2     2      0     894
                                              3 BANK0      2     2      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaInit                                          4     4      0    6434
                                              8 BANK0      2     2      0
                         _Mrf49TxCmd
                      _Mrf49xaModeRx
                       _Mrf49xaServe
                             _Sleepy
 ---------------------------------------------------------------------------------
 (1) _Sleepy                                               4     2      2     946
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaServe                                         3     3      0    3081
                                              5 BANK0      3     3      0
                        _Mrf49RxByte
                         _Mrf49RxSts
                        _Mrf49TxByte
                      _Mrf49xaModeRx
                  _Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (4) _Mrf49xaNeedsReset                                    1     1      0     315
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaModeRx                                        2     2      0    1335
                                              3 BANK0      2     2      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxByte                                          1     1      0     763
                                              3 BANK0      1     1      0
                         _Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (4) _Mrf49TxCmd                                           2     1      1     741
                                              1 BANK0      2     1      1
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxSts                                           1     1      0     220
                                              1 BANK0      1     1      0
                         _Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (4) _Mrf49RxByte                                          0     0      0     252
                         _Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (5) _Mrf49RxCmd                                           2     2      0     252
                                              1 BANK0      2     2      0
                         _Mrf49SpiRx
                         _Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiTx                                           1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Mrf49SpiRx                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _HandlePacket                                         4     3      1    9334
                                              9 BANK0      4     3      1
                  _Mrf49xaFreePacket
                       _Mrf49xaTxAck
                    _Mrf49xaTxPacket
                       _handleCfgCmd
                      _handleCfgRead
                     _handleCfgWrite
                        _handleFwCmd
 ---------------------------------------------------------------------------------
 (3) _handleFwCmd                                          1     1      0    1231
                                              8 BANK0      1     1      0
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (3) _handleCfgWrite                                       3     3      0     718
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _handleCfgRead                                        3     3      0     828
                                              6 BANK0      3     3      0
                   _CfgGetSizeByType
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     548
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _CfgGetSizeByType                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _handleCfgCmd                                         1     1      0    1935
                                              8 BANK0      1     1      0
                            _CfgLoad
                            _CfgSave
 ---------------------------------------------------------------------------------
 (4) _CfgSave                                              0     0      0     682
                      _eepromTxBytes
 ---------------------------------------------------------------------------------
 (5) _eepromTxBytes                                        4     0      4     682
                                              4 BANK0      4     0      4
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (4) _CfgLoad                                              0     0      0    1085
                      _eepromRxBytes
 ---------------------------------------------------------------------------------
 (4) _eepromRxBytes                                        4     0      4    1085
                                              4 BANK0      4     0      4
               _SoftI2cRepeatedStart
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRepeatedStart                                 0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _Mrf49xaTxAck                                         2     1      1    2050
                                              7 BANK0      2     1      1
                    _Mrf49xaTxPacket
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaTxPacket                                      7     4      3    1744
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (2) _Mrf49xaFreePacket                                    2     1      1     326
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Start                                         1     1      0     119
                                              4 BANK0      1     1      0
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (1) _Mcp9800Read                                          4     2      2     257
                                              4 BANK0      4     2      2
                      _SoftI2cRxByte
                       _SoftI2cStart
                        _SoftI2cStop
                      _SoftI2cTxByte
 ---------------------------------------------------------------------------------
 (3) _SoftI2cTxByte                                        3     3      0      97
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStop                                          0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (3) _SoftI2cStart                                         0     0      0       0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (5) _SoftI2cRxByte                                        3     3      0     114
                                              1 BANK0      3     3      0
                         _SoftI2cNop
 ---------------------------------------------------------------------------------
 (4) _SoftI2cNop                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               2     2      0    3350
                                              6 COMMON     2     2      0
                       _ExtIntDeinit
                i1_Mrf49xaNeedsReset
                     i1_Mrf49xaServe
 ---------------------------------------------------------------------------------
 (9) i1_Mrf49xaServe                                       3     3      0    3326
                                              4 COMMON     2     2      0
                      i1_Mrf49RxByte
                       i1_Mrf49RxSts
                      i1_Mrf49TxByte
                    i1_Mrf49xaModeRx
                i1_Mrf49xaNeedsReset
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaNeedsReset                                 1     1      0       0
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49xaModeRx                                     2     2      0    1204
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49TxByte                                       1     1      0     981
                                              3 COMMON     1     1      0
                       i1_Mrf49TxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49TxCmd                                        2     1      1     908
                                              1 COMMON     2     1      1
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxSts                                        1     1      0      91
                       i1_Mrf49SpiRx
 ---------------------------------------------------------------------------------
 (10) i1_Mrf49RxByte                                       0     0      0     823
                       i1_Mrf49RxCmd
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49RxCmd                                        2     2      0     823
                                              1 COMMON     2     2      0
                       i1_Mrf49SpiRx
                       i1_Mrf49SpiTx
 ---------------------------------------------------------------------------------
 (12) i1_Mrf49SpiTx                                        1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Mrf49SpiRx                                        1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ExtIntDeinit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcSample
     _AdcChSelect
     _AdcGetResult
     _AdcGo
     _AdcIsBusy
   _CfgLoad
     _eepromRxBytes
       _SoftI2cRepeatedStart
         _SoftI2cNop
       _SoftI2cRxByte
         _SoftI2cNop
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _Mcp9800Read
     _SoftI2cRxByte
       _SoftI2cNop
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mcp9800Start
     _SoftI2cStart
       _SoftI2cNop
     _SoftI2cStop
       _SoftI2cNop
     _SoftI2cTxByte
       _SoftI2cNop
   _Mrf49xaNeedsReset
   _Mrf49xaTick
     _ExtIntInit
     _HandlePacket
       _Mrf49xaFreePacket
       _Mrf49xaTxAck
         _Mrf49xaTxPacket
       _Mrf49xaTxPacket
       _handleCfgCmd
         _CfgLoad
           _eepromRxBytes
             _SoftI2cRepeatedStart
               _SoftI2cNop
             _SoftI2cRxByte
               _SoftI2cNop
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
         _CfgSave
           _eepromTxBytes
             _SoftI2cStart
               _SoftI2cNop
             _SoftI2cStop
               _SoftI2cNop
             _SoftI2cTxByte
               _SoftI2cNop
       _handleCfgRead
         _CfgGetSizeByType
         _memcpy
       _handleCfgWrite
         _CfgGetSizeByType
         _memcpy
       _handleFwCmd
         _eepromRxBytes
           _SoftI2cRepeatedStart
             _SoftI2cNop
           _SoftI2cRxByte
             _SoftI2cNop
           _SoftI2cStart
             _SoftI2cNop
           _SoftI2cStop
             _SoftI2cNop
           _SoftI2cTxByte
             _SoftI2cNop
     _Mrf49RxSts
       _Mrf49SpiRx
     _Mrf49xaFreePacket
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Mrf49xaModeTx
       _Mrf49TxCmd
         _Mrf49SpiTx
     _Mrf49xaNeedsReset
     _Mrf49xaPacketPending
     _Mrf49xaRxPacket
     _Sleepy
   _PwrAdcInit
   _PwrAdcSleep
     _AdcDeinit
   _PwrAdcWake
     _AdcInit
   _PwrI2cInit
     _SoftI2cInit
       _SoftI2cStart
         _SoftI2cNop
       _SoftI2cStop
         _SoftI2cNop
       _SoftI2cTxByte
         _SoftI2cNop
   _PwrI2cSleep
   _PwrI2cWake
   _PwrRfInit
     _ExtIntInit
     _Mrf49xaInit
       _Mrf49TxCmd
         _Mrf49SpiTx
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
       _Mrf49xaServe
         _Mrf49RxByte
           _Mrf49RxCmd
             _Mrf49SpiRx
             _Mrf49SpiTx
         _Mrf49RxSts
           _Mrf49SpiRx
         _Mrf49TxByte
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaModeRx
           _Mrf49TxCmd
             _Mrf49SpiTx
         _Mrf49xaNeedsReset
       _Sleepy
     _Sleepy
   _PwrRfSleep
     _Mrf49xaShutdown
       _Mrf49xaModeSleep
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrRfWake
     _Mrf49xaReboot
       _Mrf49xaModeRx
         _Mrf49TxCmd
           _Mrf49SpiTx
   _PwrSensorInit
   _PwrSensorSleep
   _PwrSensorWake
   _RfSendPowerState
     _AdcSample
       _AdcChSelect
       _AdcGetResult
       _AdcGo
       _AdcIsBusy
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
     _PwrAdcSleep
       _AdcDeinit
     _PwrAdcWake
       _AdcInit
     _printf
       _putch
   _RfSendSampleWeatherNode
     _Mrf49xaAllocPacket
     _Mrf49xaTxPacket
   _Sleepy

 _extInt (ROOT)
   _ExtIntDeinit
   i1_Mrf49xaNeedsReset
   i1_Mrf49xaServe
     i1_Mrf49RxByte
       i1_Mrf49RxCmd
         i1_Mrf49SpiRx
         i1_Mrf49SpiTx
     i1_Mrf49RxSts
       i1_Mrf49SpiRx
     i1_Mrf49TxByte
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaModeRx
       i1_Mrf49TxCmd
         i1_Mrf49SpiTx
     i1_Mrf49xaNeedsReset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       9       2       64.3%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      77       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     15      20       6       40.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      77      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Sun Sep  7 08:46:05 2014

                Mrf49xaTxPacket@crc 0024                 Mrf49xaTxPacket@inst 0025  
                       __CFG_CP$OFF 0000                                  PL8 0F87  
                                l32 0A52                                  l42 0AA7  
                                l34 0A5E                                  l35 0A60  
                                l39 0A8A                                  l79 0008  
                               PL10 0F9F                                 PL20 0FC6  
                               PL12 0FAD                                 PL22 0FCC  
                               PL14 0220                                 PL24 0FD1  
                               PL16 0FBA                                 PL18 0FC0  
             Mrf49xaTxPacket@packet 0020                                 l211 0D24  
                               l402 0BA9                                 l234 094D  
                               l404 0BB7                                 l260 0D47  
                               l271 0D67                                 l263 0D51  
                               l255 0D3B                                 l280 0D7E  
                               l272 0D68                                 l264 0D52  
                               l256 0D3C                                 l530 0FF8  
                               l442 0947                                 l283 0D88  
                               l275 0D72                                 l267 0D5C  
                               l259 0D46                                 l284 0D89  
                               l276 0D73                                 l268 0D5D  
                               l550 0B3D                                 l279 0D7D  
                               l560 0B5C                                 l464 0C20  
                               l545 0F08                                 l561 0B5B  
                               l553 0B0E                                 l465 0C3F  
                               l395 0B6D                                 l559 0B4D  
                   ??_PwrSensorInit 0020                     ??_PwrSensorWake 0020  
                      __CFG_BORV$LO 0000                 handleCfgWrite@index 0027  
                               wreg 0009                    i1Mrf49xaModeRx@k 0073  
                      __CFG_IESO$ON 0000              ??_SoftI2cRepeatedStart 0021  
                      __CFG_LVP$OFF 0000              Mrf49xaTxPacket@needAck 0022  
                              l3000 0C06                                l3010 028A  
                              l3004 0281                                l3030 094F  
                              l3016 029E                                l3050 097D  
                              l3212 0B75                                l3060 099F  
                              l3150 0A2A                                l3054 098B  
                              l3224 0B87                                l3160 0A4D  
                              l3072 09A4                                l3056 0997  
                              l3170 0A02                                l3162 09F5  
                              l3402 0B14                                l3322 08DA  
                              l3314 08BF                                l3306 08B9  
                              l3236 0B97                                l3172 0A10  
                              l3500 0FF9                                l3404 0B17  
                              l3332 08F6                                l3158 0A3C  
                              l3502 0AE5                                l3414 0B1F  
                              l3334 08F8                                l3326 08E5  
                              l3424 0FE2                                l3408 0B1B  
                              l3360 0930                                l3344 0915  
                              l3328 08EA                                l2800 0E3B  
                              l3512 0DF8                                l2810 0842  
                              l3266 0AE0                                l3450 0F3C  
                              l3274 02AA                                l3370 0939  
                              l3362 0931                                l3290 0EB9  
                              l2660 0AB5                                l2708 0AC9  
                              l3188 0B61                                l2900 0CAE  
                              l3348 091D                                l2804 0E42  
                              l3532 0ED2                                l3462 0F3F  
                              l3454 0F3D                                l3390 0AF4  
                              l2910 0CC6                                l2902 0CB2  
                              l3630 08A7                                l3392 0AF7  
                              l2920 0CDB                                l2912 0CCA  
                              l3624 0897                                l3616 088E  
                              l3490 0EE2                                l3458 0F3E  
                              l2906 0CB9                                l2850 0C42  
                              l2930 0CFD                                l2842 0C2D  
                              l2764 0AA9                                l3492 0EE3  
                              l3468 0F40                                l3388 0AEE  
                              l2908 0CC2                                l2924 0CDD  
                              l2852 0C46                                l3628 089C  
                              l3494 0EEA                                l3478 0F6C  
                              l3398 0B10                                l2862 0C55  
                              l2838 0C23                                l2846 0C31  
                              l2782 0EBF                                l2774 0EC6  
                   Mrf49TxByte@byte 0023                                l3488 0EE1  
                              l2928 0CEF                                l2952 09C6  
                              l2784 0000                                l3498 0EF6  
                              l2866 0C5B                                l2858 0C50  
                              l3586 085B                                l2972 0D07  
                              l2892 0C93                                l2868 0C5F  
                              l2956 09B1                                l2886 0C7F  
                              l2878 0C71                                l2896 0CA2  
                              l2978 0D10                                l2994 0BF2  
                              STR_1 026E                                u2867 0E36  
                              u2877 0AB8                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _main 0848  
                   __end_of_AdcInit 0ED1                                fsr0h 0005  
                              fsr1h 0007                    ??_PwrSensorSleep 0020  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                     __end_of_CfgLoad 0AED  
                              ltemp 007E                     __end_of_CfgSave 1000  
              handleCfgWrite@packet 0028                                start 0022  
                              ttemp 007E                                wtemp 007E  
              __end_of_HandlePacket 0B61             __end_ofi1_Mrf49xaModeRx 014E  
              Mrf49xaModeSleep@inst 0023                       __CFG_MCLRE$ON 0000  
               __end_of_Mrf49RxByte 0D2D                       ?_ExtIntDeinit 0070  
               __end_of_Mrf49TxByte 0D07                     ??_eepromRxBytes 0028  
                       _Mcp9800Read 09E0                     ??_eepromTxBytes 0028  
                  _RfSendPowerState 0DEE                 __end_of_Mrf49xaInit 09B0  
               __end_of_Mrf49xaTick 094D                _Mrf49xaPacketPending 0BDF  
                 ?_CfgGetSizeByType 0070                               ?_main 0070  
                             i1l211 0147                               i1l143 001D  
                             i1l144 001E                               i1l260 0172  
                             i1l271 019A                               i1l263 017E  
                             i1l255 0163                               i1l280 01B8  
                             i1l272 019C                               i1l264 0180  
                             i1l256 0164                               i1l283 01C4  
                             i1l275 01A8                               i1l267 018C  
                             i1l259 0170                               i1l284 01C6  
                             i1l276 01AA                               i1l268 018E  
                             i1l279 01B6                               i1l464 0042  
                             i1l465 0061                          _Mrf49RxCmd 0DE4  
                        _Mrf49TxCmd 0D2D                               _AdcGo 0E54  
                        _Mrf49SpiRx 0D9F                          _Mrf49SpiTx 0D36  
                        _Mrf49RxSts 0D91                  ??_CfgGetSizeByType 0020  
        __end_of_Mrf49xaAllocPacket 0EBF               __end_of_SoftI2cRxByte 0AB5  
             __end_of_SoftI2cTxByte 0A7C                        main@humidity 0031  
             __size_of_Mcp9800Start 0019                  __size_of_AdcDeinit 0007  
           Mrf49xaTxPacket@response 0021                  __size_of_AdcIsBusy 0004  
                             _putch 0EDE                  __size_of_AdcSample 0028  
                    __CFG_BOREN$OFF 0000                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
            Mcp9800Start@resolution 0024                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                 i1_Mrf49xaNeedsReset 0151  
                    ??_ExtIntDeinit 0070                     __initialization 0802  
                        _ExtIntInit 0842                __end_of_handleCfgCmd 0F09  
                      __end_of_main 08AD  RfSendSampleWeatherNode@temperature 0027  
                    __CFG_LPBOR$OFF 0000               ?_Mrf49xaPacketPending 0070  
                      _Mcp9800Start 0A11                              ??_main 0031  
              ?i1_Mrf49xaNeedsReset 0070                              ?_AdcGo 0070  
              __size_of_handleFwCmd 0023                __end_of_Mrf49xaTxAck 0BDF  
              __end_of_Mrf49xaServe 0D02                       ??_PwrI2cSleep 0020  
                            _ADCON0 009D                              _ADCON1 009E  
                            _ADCON2 009F                           ??_AdcInit 0020  
                            _ADRESH 009C                              _ADRESL 009B  
                            _ANSELA 018C                              ?_putch 0070  
                            _ANSELB 018D                              _ANSELC 018E  
                         ??_CfgLoad 0028                           ??_CfgSave 0028  
                i1Mrf49xaServe@data 0075                              i1l3710 0197  
                            i1l3702 017B                              i1l3722 01C1  
                            i1l3714 01A5                              i1l3706 0189  
                            i1l3900 00FD                              i1l3820 0045  
                            i1l3718 01B3                              i1l3830 0064  
                            i1l3910 011F                              i1l3822 004F  
                            i1l3904 00FF                              i1l3832 0068  
                            i1l3842 0077                              i1l3826 0053  
                            i1l3908 0111                              i1l3782 0133  
                            i1l3846 007D                              i1l3838 0072  
                            i1l3926 000B                              i1l3880 00D0  
                            i1l3872 00B7                              i1l3848 0081  
                            i1l3698 016D                              i1l3890 00E8  
                            i1l3882 00D4                              i1l3866 00A2  
                            i1l3858 0094                              i1l3892 00EC  
                            i1l3876 00C4                              i1l3886 00DB  
                            i1l3888 00E4                              _FVRCON 0117  
                            _OSCCON 0099                CfgGetSizeByType@type 0020  
                        _PwrI2cInit 02BE                  AdcChSelect@channel 0020  
                        _PwrI2cWake 0BE8                         _Mrf49RxByte 0D2B  
                       _Mrf49TxByte 0D02                       ??_SoftI2cInit 0024  
                     ??_SoftI2cStop 0021           __size_of_Mrf49xaModeSleep 0022  
                    __CFG_PWRTE$OFF 0000                          _SoftI2cNop 0AB5  
                      ?_AdcChSelect 0070                    ?i1_Mrf49xaModeRx 0070  
                       _Mrf49xaInit 094D                              _Sleepy 09B0  
                       _Mrf49xaTick 08AD                          _PwrAdcInit 02C7  
                        _PwrAdcWake 0E66                       ??_PwrAdcSleep 0020  
                            _cfgRam 0036                     _Mrf49xaRxPacket 02A3  
                 __end_of_AdcDeinit 0EC6                      __CFG_STVREN$ON 0000  
                 __end_of_AdcIsBusy 0E5A                              _macPtr 0078  
                   _Mrf49xaTxPacket 0B61                 Mrf49xaShutdown@inst 0025  
                            _extInt 0004                              _memcpy 0F67  
                 __end_of_AdcSample 0E54                     _Mrf49xaShutdown 0280  
                            _printf 0ED1                          _PwrRfSleep 0272  
             ??i1_Mrf49xaNeedsReset 0070                         ?_Mrf49RxCmd 0070  
                       ?_Mrf49TxCmd 0021                         ?_Mrf49SpiRx 0070  
                       ?_Mrf49SpiTx 0070                         ?_Mrf49RxSts 0070  
                      __pdataCOMMON 0078                  __size_of_PwrRfInit 0022  
                __size_of_PwrRfWake 000B                              putch@c 0070  
             __size_of_HandlePacket 0074             __end_of__initialization 0816  
             __end_ofi1_Mrf49RxByte 0151                 __end_of_PwrI2cSleep 0ADD  
             __end_ofi1_Mrf49TxByte 0129                       __end_of_AdcGo 0E56  
   RfSendSampleWeatherNode@humidity 0029                         ?_ExtIntInit 0070  
                    __pcstackCOMMON 0070                    SoftI2cRxByte@ack 0021  
                      __pidataBANK0 0000                  handleCfgCmd@packet 0028  
               __end_of_SoftI2cInit 0820               __end_of_handleCfgRead 0F3A  
               __end_of_SoftI2cStop 0AD8              ??_Mrf49xaPacketPending 0020  
           __size_ofi1_Mrf49xaServe 00F4                       __end_of_putch 0EDF  
                        __end_ofPL8 0F9F                 __end_of_PwrAdcSleep 0E66  
                           ??_AdcGo 0020                      _OPTION_REGbits 0095  
                      _HandlePacket 0AED             Mrf49xaFreePacket@packet 0020  
           __size_of_handleCfgWrite 001B                __end_of_ExtIntDeinit 02D8  
                           ??_putch 0020            __end_of_RfSendPowerState 0E2C  
                        __pbssBANK0 0035                          __pbssBANK1 00A0  
                       ?_PwrI2cInit 0070                         ?_PwrI2cWake 0070  
                     ?_SoftI2cStart 0070               __size_of_handleCfgCmd 002A  
           __end_of_Mrf49xaRxPacket 02B1             __end_of_Mrf49xaTxPacket 0BBE  
             __end_of_Mrf49xaModeRx 0D2B               __end_of_Mrf49xaModeTx 0C0E  
                       ?_SoftI2cNop 0070               __end_of_Mrf49xaReboot 02BE  
               __size_of_Mrf49RxCmd 000A                   __end_of_PwrRfInit 0842  
               __size_of_Mrf49TxCmd 0009                   __end_of_PwrRfWake 02BC  
               __size_of_Mrf49SpiRx 0045                 __size_of_Mrf49SpiTx 005B  
               __size_of_Mrf49RxSts 000E                          __pmaintext 0848  
                           ?_Sleepy 0020             __end_of_Mrf49xaShutdown 0281  
                       ?_PwrAdcInit 0070                         ?_PwrAdcWake 0070  
          ?_RfSendSampleWeatherNode 0027                        ?_Mcp9800Read 0024  
                        __pintentry 0004                             ?_extInt 0070  
                           ?_memcpy 0020               __size_of_Mrf49xaTxAck 0021  
                           ?_printf 0070               __size_of_Mrf49xaServe 00F4  
                       ?_PwrRfSleep 0070                HandlePacket@response 002C  
                 handleFwCmd@packet 0028               __end_of_PwrSensorInit 0F84  
             __end_of_PwrSensorWake 0F87                         _PwrI2cSleep 0ADB  
                      _handleCfgCmd 0EDF                             _AdcInit 0EC6  
               __size_of_ExtIntInit 0006       __size_of_SoftI2cRepeatedStart 0015  
                handleCfgRead@index 0027                             _CfgLoad 0AE5  
                        __stringtab 0229                             _CfgSave 0FF9  
                    ??_SoftI2cStart 0021           __size_of_CfgGetSizeByType 0012  
                _Mrf49xaAllocPacket 0EB2                    _Mrf49xaModeSleep 0281  
                       _SoftI2cInit 0818                       ?i1_Mrf49RxCmd 0070  
                     ?i1_Mrf49TxCmd 0071                       ?i1_Mrf49SpiRx 0070  
                     ?i1_Mrf49SpiTx 0070                         _SoftI2cStop 0AC9  
                     ?i1_Mrf49RxSts 0070                             Sleepy@b 0023  
                      _Mrf49xaTxAck 0BBE                        _Mrf49xaServe 0C0E  
                   __size_of_Sleepy 001B                eepromRxBytes@address 0024  
                       _PwrAdcSleep 0E61                 ?_Mrf49xaAllocPacket 0070  
              __size_of_AdcChSelect 0007               __end_of_eepromRxBytes 0A4E  
             __end_of_eepromTxBytes 0A11                     __size_of_extInt 001E  
                   __size_of_memcpy 0019                   _mrfRegset_InitCnt 022A  
                           __ptext1 0E6B                             __ptext2 0DEE  
                           __ptext3 0ED1                             __ptext4 0EDE  
                           __ptext5 0E66                             __ptext6 0EC6  
                           __ptext7 0E61                             __ptext8 0EBF  
                           __ptext9 0EB2                     __size_of_printf 000D  
               __size_of_PwrI2cInit 0009                 __size_of_PwrI2cWake 0001  
                        _parameters 0268                       ?_AdcGetResult 0020  
               __size_of_SoftI2cNop 0007         RfSendSampleWeatherNode@inst 002B  
              ??_Mrf49xaAllocPacket 0020               Mrf49xaNeedsReset@inst 0020  
               __size_of_PwrAdcInit 0009                 __size_of_PwrAdcWake 0005  
                           clrloop0 02D1                end_of_initialization 0816  
                           memcpy@d 0023                             memcpy@n 0021  
                           memcpy@s 0024                        ?_Mrf49RxByte 0070  
                      ?_Mrf49TxByte 0070                      ??i1_Mrf49RxCmd 0071  
                    ??i1_Mrf49TxCmd 0072                      ??i1_Mrf49SpiRx 0070  
                    ??i1_Mrf49SpiTx 0070                      ??i1_Mrf49RxSts 0071  
                  ?_Mrf49xaRxPacket 0070                 __size_of_PwrRfSleep 000E  
   __end_of_RfSendSampleWeatherNode 0EB2                     Mrf49xaInit@inst 0028  
                  ?_Mrf49xaTxPacket 0020                        ?_Mrf49xaInit 0070  
              __end_of_mrfRegset_Rx 025A                __end_of_mrfRegset_Tx 0262  
                      ?_Mrf49xaTick 0070                    ?_Mrf49xaShutdown 0070  
                           printf@c 0020                             printf@f 0021  
           handleCfgWrite@nrOfBytes 0026              __size_of_SoftI2cRxByte 0039  
            __size_of_SoftI2cTxByte 002E                      i1_Mrf49xaServe 0030  
         __end_of_mrfRegset_InitCnt 022B             __size_of_PwrSensorSleep 0003  
                 _powerStatusTicker 0035                       ??_handleFwCmd 0028  
                         _PORTAbits 000C                           _PORTBbits 000D  
                   Mrf49xaTick@inst 002F                           _PORTCbits 000E  
                         _AdcDeinit 0EBF               __size_of_ExtIntDeinit 0002  
                         _AdcIsBusy 0E56                        ??_Mrf49RxCmd 0021  
                      ??_Mrf49TxCmd 0022                        ??_Mrf49SpiRx 0020  
                      ??_Mrf49SpiTx 0020                        ??_Mrf49RxSts 0021  
                         _AdcSample 0E2C                    __CFG_FOSC$INTOSC 0000  
                    ??_AdcGetResult 0022                      _handleCfgWrite 0F4C  
                         _TRISAbits 008C                           _TRISBbits 008D  
                         _TRISCbits 008E                         AdcSample@ch 0025  
                    Mrf49SpiRx@data 0020                      Mrf49SpiTx@byte 0020  
                    Mrf49RxSts@inst 0021                  __end_of_Mrf49RxCmd 0DEE  
                __end_of_Mrf49TxCmd 0D36              __end_ofi1_Mrf49xaServe 0124  
                      ??_ExtIntInit 0020                  __end_of_Mrf49SpiRx 0DE4  
                __end_of_Mrf49SpiTx 0D91                  __end_of_Mrf49RxSts 0D9F  
                      _ExtIntDeinit 02D6         __end_ofi1_Mrf49xaNeedsReset 0154  
                    __end_of_Sleepy 09CB                   SoftI2cRxByte@data 0022  
                     __pidataCOMMON 0000                __size_of_Mcp9800Read 0015  
                 eepromRxBytes@data 0026                __end_of_SoftI2cStart 0AC9  
          __size_ofi1_Mrf49xaModeRx 0025                          ?_AdcDeinit 0070  
                    __end_of_extInt 0022                      __end_of_memcpy 0F80  
                 eepromRxBytes@size 0027              __end_of_handleCfgWrite 0F67  
                        ?_AdcIsBusy 0070                      __end_of_printf 0EDE  
        __end_of_mrfRegset_SleepCnt 022D                          ?_AdcSample 0022  
                       __end_ofPL10 0FAD                         __end_ofPL20 0FCC  
                       __end_ofPL12 0FBA                         __end_ofPL22 0FD1  
                       __end_ofPL14 0229                         __end_ofPL24 0FD6  
                       __end_ofPL16 0FC0                         __end_ofPL18 0FC6  
               start_initialization 0802                       _SoftI2cRxByte 0A7C  
               __end_of_handleFwCmd 0FF9                       _SoftI2cTxByte 0A4E  
             Mrf49xaFreePacket@inst 0021                  __end_of_ExtIntInit 0848  
                 SoftI2cTxByte@data 0022                   ?_RfSendPowerState 0070  
                  _CfgGetSizeByType 0F3A                        ??_PwrI2cInit 0024  
                      ??_PwrI2cWake 0020                  HandlePacket@packet 0029  
                ??_RfSendPowerState 0027                        ??_SoftI2cNop 0020  
                          ??_Sleepy 0022                        ??_PwrAdcInit 0020  
                      ??_PwrAdcWake 0020                     ?i1_Mrf49xaServe 0070  
                   _mrfRegset_RxCnt 022B                     _mrfRegset_TxCnt 022D  
                   _mrfRegset_Sleep 0262                           _PwrRfInit 0820  
                         _PwrRfWake 02B1                         __pdataBANK0 003F  
                          ??_extInt 0076                            ??_memcpy 0023  
                          ??_printf 0020       __size_of_Mrf49xaPacketPending 0009  
                 eepromTxBytes@data 0026                        ??_PwrRfSleep 0026  
                 eepromTxBytes@size 0027                     ?_handleCfgWrite 0070  
                 RfSendPowerState@s 0028              __size_ofi1_Mrf49RxByte 0003  
            __size_ofi1_Mrf49TxByte 0005            __end_of_Mrf49xaModeSleep 02A3  
                __end_of_PwrI2cInit 02C7                __end_ofi1_Mrf49RxCmd 0030  
              __end_ofi1_Mrf49TxCmd 015E                  __end_of_PwrI2cWake 0BE9  
              __end_ofi1_Mrf49SpiRx 0220                __end_ofi1_Mrf49SpiTx 01CE  
              __end_ofi1_Mrf49RxSts 01DC                           ___latbits 0001  
                     __pcstackBANK0 0020                      ?_SoftI2cRxByte 0070  
  __size_of_RfSendSampleWeatherNode 0047                      ?_SoftI2cTxByte 0070  
                 i1Mrf49TxByte@byte 0073                        ?_PwrI2cSleep 0070  
               __end_of__stringdata 0272                  __end_of_SoftI2cNop 0ABC  
                          ?_AdcInit 0070                  __end_of_PwrAdcInit 02D0  
                          ?_CfgLoad 0070                  __end_of_PwrAdcWake 0E6B  
                          ?_CfgSave 0070                    HandlePacket@inst 002B  
            __size_of_handleCfgRead 0031                        ?_SoftI2cInit 0070  
                      ?_SoftI2cStop 0070                __size_of_Mrf49RxByte 0002  
                __end_of_PwrRfSleep 0280                __size_of_Mrf49TxByte 0005  
              __end_of_AdcGetResult 0000        __end_of_SoftI2cRepeatedStart 09E0  
                      ?_PwrAdcSleep 0070                __size_of_Mrf49xaInit 0063  
              __size_of_Mrf49xaTick 00A0                          ?_PwrRfInit 0070  
                        ?_PwrRfWake 0070                      _PwrSensorSleep 0ADD  
                     ?_Mcp9800Start 0070                           __pstrings 0229  
                       ??_AdcDeinit 0020                         ??_AdcIsBusy 0020  
                       _handleFwCmd 0FD6                         ??_AdcSample 0024  
                    __size_of_AdcGo 0002              __size_of_Mrf49xaModeRx 0024  
            __size_of_Mrf49xaModeTx 0025                        _mrfRegset_Rx 024E  
                      _mrfRegset_Tx 025A              __size_of_Mrf49xaReboot 0002  
                 ??i1_Mrf49xaModeRx 0073                    __CFG_WDTE$SWDTEN 0000  
                    __size_of_putch 0001                            _LATAbits 010C  
                          _LATBbits 010D                            _LATCbits 010E  
                     i1_Mrf49RxByte 014E             __end_of_mrfRegset_RxCnt 022C  
                     i1_Mrf49TxByte 0124             __end_of_mrfRegset_TxCnt 022E  
           __end_of_mrfRegset_Sleep 0268                           clear_ram0 02D0  
                     ??_AdcChSelect 0020                   _Mrf49xaFreePacket 0AE0  
                    Mrf49xaModeRx@k 0023                      Mrf49xaModeTx@k 0024  
            __end_of_PwrSensorSleep 0AE0               __size_of_SoftI2cStart 000D  
            __size_of_PwrSensorInit 0004              __size_of_PwrSensorWake 0003  
                     Mrf49RxCmd@cmd 0021                  ?_Mrf49xaFreePacket 0020  
                     Mrf49RxCmd@val 0022                         _mrf49xaInst 00A0  
                    ??_Mcp9800Start 0024                       _handleCfgRead 0F09  
                     Mrf49TxCmd@cmd 0022                       Mrf49TxCmd@val 0021  
               handleCfgRead@packet 0028                         __stringdata 026E  
               ??_Mrf49xaFreePacket 0021              Mrf49xaAllocPacket@inst 0020  
                   ??_SoftI2cRxByte 0021                   _Mrf49xaNeedsReset 0AD8  
                   ??_SoftI2cTxByte 0021                            _WPUAbits 020C  
                ?_Mrf49xaNeedsReset 0070         __size_of_Mrf49xaAllocPacket 000D  
                  __size_of_AdcInit 000B                    __size_of_CfgLoad 0008  
                  __size_of_CfgSave 0007                 ??_Mrf49xaNeedsReset 0020  
            __size_of_eepromRxBytes 0024                      ?i1_Mrf49RxByte 0070  
            __size_of_eepromTxBytes 001C                        _SoftI2cStart 0ABC  
                    ?i1_Mrf49TxByte 0070           __end_of_Mrf49xaFreePacket 0AE5  
                         extInt@ofw 0077                            Sleepy@ms 0020  
                     _Mrf49xaModeRx 0D07                       _Mrf49xaModeTx 0BE9  
                     _Mrf49xaReboot 02BC                      _mrfRegset_Init 022E  
                   ?_PwrSensorSleep 0070                         ??_PwrRfInit 002A  
                    ?_handleCfgRead 0070                         ??_PwrRfWake 0026  
          __size_of_Mrf49xaRxPacket 000E               __size_ofi1_Mrf49RxCmd 000C  
             __size_ofi1_Mrf49TxCmd 000A               __size_ofi1_Mrf49SpiRx 0044  
             __size_ofi1_Mrf49SpiTx 0070                    i1Mrf49SpiRx@data 0070  
             __size_ofi1_Mrf49RxSts 000E                 __end_of_AdcChSelect 0E61  
          __size_of_Mrf49xaTxPacket 005D            __end_of_CfgGetSizeByType 0F4C  
                  i1Mrf49SpiTx@byte 0070                      SoftI2cRxByte@i 0023  
         __end_of_Mrf49xaNeedsReset 0ADB                  __end_of__stringtab 022A  
          __size_of_Mrf49xaShutdown 0001                      SoftI2cTxByte@i 0023  
                        _ANSELCbits 018E             _RfSendSampleWeatherNode 0E6B  
                     ?_HandlePacket 0029                            _coldBoot 003F  
                          __ptext10 0E2C                            __ptext11 0E56  
                          __ptext20 0272                            __ptext12 0E54  
                          __ptext21 0280                            __ptext13 0000  
                          __ptext30 02A3                            __ptext22 0281  
                          __ptext14 0E5A                            __ptext31 0BDF  
                          __ptext23 0820                            __ptext15 0F84  
                          __ptext40 0D91                            __ptext32 0BE9  
                          __ptext24 0BE8                            __ptext16 0ADD  
                          __ptext41 0D2B                            __ptext33 094D  
                          __ptext25 0ADB                            __ptext17 0F80  
                          __ptext50 0F3A                            __ptext42 0DE4  
                          __ptext34 09B0                            __ptext26 02BE  
                          __ptext18 02B1                            __ptext51 0EDF  
                          __ptext43 0D36                            __ptext35 0C0E  
                          __ptext27 0818                            __ptext19 02BC  
                          __ptext60 0842                            __ptext52 0FF9  
                          __ptext44 0D9F                            __ptext36 0AD8  
                          __ptext28 02C7                            __ptext61 0A11  
                          __ptext53 09F5                            __ptext45 0AED  
                          __ptext37 0D07                            __ptext29 08AD  
                          __ptext70 0151                            __ptext62 09E0  
                          __ptext54 0AE5                            __ptext46 0FD6  
                          __ptext38 0D02                            __ptext71 0129  
                          __ptext63 0A4E                            __ptext55 0A2A  
                          __ptext47 0F4C                            __ptext39 0D2D  
                          __ptext72 0124                            __ptext64 0AC9  
                          __ptext56 09CB                            __ptext48 0F09  
                          __ptext73 0154                            __ptext65 0ABC  
                          __ptext57 0BBE                            __ptext49 0F67  
                     _PwrSensorInit 0F80                            __ptext74 01CE  
                          __ptext66 0A7C                            __ptext58 0B61  
                          __ptext75 014E                            __ptext67 0AB5  
                          __ptext59 0AE0                            __ptext76 0024  
                          __ptext77 015E                            __ptext69 0030  
                          __ptext78 01DC                            __ptext79 02D6  
                     _PwrSensorWake 0F84                _SoftI2cRepeatedStart 09CB  
              __size_of_PwrI2cSleep 0002               __size_of_AdcGetResult 0000  
                _mrfRegset_SleepCnt 022C                    Mcp9800Read@tempH 0026  
                  Mcp9800Read@tempL 0027                    ??i1_Mrf49xaServe 0074  
                     __size_of_main 0065            Mrf49xaPacketPending@inst 0020  
                      i1_Mrf49RxCmd 0024              __end_of_mrfRegset_Init 024E  
                Mrf49xaTxAck@packet 0027                        i1_Mrf49TxCmd 0154  
                      i1_Mrf49SpiRx 01DC                        i1_Mrf49SpiTx 015E  
                    ?_Mrf49xaModeRx 0070                      ?_Mrf49xaModeTx 0070  
                      i1_Mrf49RxSts 01CE                      ?_Mrf49xaReboot 0070  
                __end_of_parameters 026E                __size_of_SoftI2cInit 0008  
              __size_of_SoftI2cStop 000F                 Mrf49xaRxPacket@inst 0020  
                     ??_Mcp9800Read 0026                    ??_handleCfgWrite 0026  
         __size_of_RfSendPowerState 003E                   Mrf49xaModeRx@inst 0024  
              __size_of_PwrAdcSleep 0005                       _eepromRxBytes 0A2A  
                 Mrf49xaModeTx@inst 0023                   Mrf49xaModeSleep@k 0024  
                     _eepromTxBytes 09F5                     i1Mrf49RxCmd@cmd 0071  
                   main@temperature 0033                     i1Mrf49RxCmd@val 0072  
                    ??_HandlePacket 002A        __size_ofi1_Mrf49xaNeedsReset 0003  
                Mrf49xaTick@timeout 002E                          _INTCONbits 000B  
                 ?_Mrf49xaModeSleep 0070                     i1Mrf49TxCmd@cmd 0072  
                   i1Mrf49TxCmd@val 0071                            memcpy@d1 0025  
                          memcpy@s1 0020                      ?_PwrSensorInit 0070  
                      _AdcGetResult 0000                      ?_PwrSensorWake 0070  
                ??_Mrf49xaModeSleep 0023                       ?_handleCfgCmd 0070  
             ?_SoftI2cRepeatedStart 0070                     ??i1_Mrf49RxByte 0073  
                          intlevel1 0000                     ??i1_Mrf49TxByte 0073  
      __end_of_Mrf49xaPacketPending 0BE8                __end_of_Mcp9800Start 0A2A  
     RfSendSampleWeatherNode@packet 002C                   Mrf49xaReboot@inst 0025  
                 __CFG_CLKOUTEN$OFF 0000          __size_of_Mrf49xaFreePacket 0005  
            RfSendPowerState@packet 002A                       ?_Mrf49xaTxAck 0027  
                       _AdcChSelect 0E5A                        Mrf49xaInit@k 0029  
                     ?_Mrf49xaServe 0070                     ??_handleCfgRead 0026  
                 Mrf49xaTick@packet 0030                      ?_eepromRxBytes 0024  
              eepromTxBytes@address 0024                     i1_Mrf49xaModeRx 0129  
                    ?_eepromTxBytes 0024           ??_RfSendSampleWeatherNode 002B  
        __size_of_Mrf49xaNeedsReset 0003                        ?_handleFwCmd 0070  
               __end_of_Mcp9800Read 09F5                   ??_Mrf49xaRxPacket 0020  
                  Mrf49xaTxAck@inst 0028                   ??_Mrf49xaTxPacket 0023  
                    ??_handleCfgCmd 0028                          _WDTCONbits 0097  
                 ??_Mrf49xaShutdown 0025                RfSendPowerState@inst 0027  
                     ??_Mrf49RxByte 0023                       ??_Mrf49TxByte 0023  
                   ??_Mrf49xaModeRx 0023                     ??_Mrf49xaModeTx 0023  
                   ??_Mrf49xaReboot 0025                      ??_Mrf49xaTxAck 0028  
                  Mrf49xaServe@data 0027                      ??_Mrf49xaServe 0025  
                     ??_Mrf49xaInit 0028                    Mrf49xaServe@inst 0026  
                     ??_Mrf49xaTick 002D              handleCfgRead@nrOfBytes 0026  
                  Mrf49xaTxPacket@i 0026  



Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Thu Apr  3 17:01:39 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16F1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text24,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text33,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	functab,global,reloc=256,class=CODE,delta=2
    20                           	psect	pa_nodes,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     	;# 
    23  0001                     	;# 
    24  0002                     	;# 
    25  0003                     	;# 
    26  0004                     	;# 
    27  0005                     	;# 
    28  0006                     	;# 
    29  0007                     	;# 
    30  0008                     	;# 
    31  0009                     	;# 
    32  000A                     	;# 
    33  000B                     	;# 
    34  000C                     	;# 
    35  000D                     	;# 
    36  000E                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0013                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0016                     	;# 
    43  0017                     	;# 
    44  0018                     	;# 
    45  0019                     	;# 
    46  001A                     	;# 
    47  001B                     	;# 
    48  001C                     	;# 
    49  008C                     	;# 
    50  008D                     	;# 
    51  008E                     	;# 
    52  0091                     	;# 
    53  0092                     	;# 
    54  0093                     	;# 
    55  0095                     	;# 
    56  0096                     	;# 
    57  0097                     	;# 
    58  0099                     	;# 
    59  009A                     	;# 
    60  009B                     	;# 
    61  009B                     	;# 
    62  009C                     	;# 
    63  009D                     	;# 
    64  009E                     	;# 
    65  009F                     	;# 
    66  010C                     	;# 
    67  010D                     	;# 
    68  010E                     	;# 
    69  0111                     	;# 
    70  0112                     	;# 
    71  0113                     	;# 
    72  0114                     	;# 
    73  0115                     	;# 
    74  0116                     	;# 
    75  0117                     	;# 
    76  0118                     	;# 
    77  0119                     	;# 
    78  011D                     	;# 
    79  018C                     	;# 
    80  018D                     	;# 
    81  018E                     	;# 
    82  0191                     	;# 
    83  0191                     	;# 
    84  0192                     	;# 
    85  0193                     	;# 
    86  0193                     	;# 
    87  0194                     	;# 
    88  0195                     	;# 
    89  0196                     	;# 
    90  0197                     	;# 
    91  0199                     	;# 
    92  019A                     	;# 
    93  019B                     	;# 
    94  019B                     	;# 
    95  019C                     	;# 
    96  019D                     	;# 
    97  019E                     	;# 
    98  019F                     	;# 
    99  020C                     	;# 
   100  020D                     	;# 
   101  0211                     	;# 
   102  0211                     	;# 
   103  0212                     	;# 
   104  0212                     	;# 
   105  0213                     	;# 
   106  0213                     	;# 
   107  0214                     	;# 
   108  0214                     	;# 
   109  0215                     	;# 
   110  0215                     	;# 
   111  0215                     	;# 
   112  0216                     	;# 
   113  0216                     	;# 
   114  0217                     	;# 
   115  0217                     	;# 
   116  0391                     	;# 
   117  0392                     	;# 
   118  0393                     	;# 
   119  0394                     	;# 
   120  0395                     	;# 
   121  0396                     	;# 
   122  0498                     	;# 
   123  0498                     	;# 
   124  0499                     	;# 
   125  049A                     	;# 
   126  049B                     	;# 
   127  049B                     	;# 
   128  049C                     	;# 
   129  049E                     	;# 
   130  049F                     	;# 
   131  0611                     	;# 
   132  0612                     	;# 
   133  0613                     	;# 
   134  0613                     	;# 
   135  0614                     	;# 
   136  0615                     	;# 
   137  0616                     	;# 
   138  0616                     	;# 
   139  0617                     	;# 
   140  0618                     	;# 
   141  0619                     	;# 
   142  0619                     	;# 
   143  061A                     	;# 
   144  061B                     	;# 
   145  061C                     	;# 
   146  061C                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0F0F                     	;# 
   153  0F10                     	;# 
   154  0F11                     	;# 
   155  0F12                     	;# 
   156  0F13                     	;# 
   157  0F14                     	;# 
   158  0F15                     	;# 
   159  0F16                     	;# 
   160  0F17                     	;# 
   161  0F18                     	;# 
   162  0F19                     	;# 
   163  0F1A                     	;# 
   164  0F1B                     	;# 
   165  0F1C                     	;# 
   166  0F1D                     	;# 
   167  0F1E                     	;# 
   168  0F1F                     	;# 
   169  0F20                     	;# 
   170  0F21                     	;# 
   171  0F22                     	;# 
   172  0F23                     	;# 
   173  0F24                     	;# 
   174  0F25                     	;# 
   175  0F26                     	;# 
   176  0F27                     	;# 
   177  0F28                     	;# 
   178  0F29                     	;# 
   179  0F2A                     	;# 
   180  0F2B                     	;# 
   181  0F2C                     	;# 
   182  0F2D                     	;# 
   183  0F2E                     	;# 
   184  0F2F                     	;# 
   185  0F8C                     	;# 
   186  0F8D                     	;# 
   187  0F91                     	;# 
   188  0F95                     	;# 
   189  0F96                     	;# 
   190  0F97                     	;# 
   191  0F9C                     	;# 
   192  0F9D                     	;# 
   193  0F9E                     	;# 
   194  0FE3                     	;# 
   195  0FE4                     	;# 
   196  0FE5                     	;# 
   197  0FE6                     	;# 
   198  0FE7                     	;# 
   199  0FE8                     	;# 
   200  0FE9                     	;# 
   201  0FEA                     	;# 
   202  0FEB                     	;# 
   203  0FED                     	;# 
   204  0FEE                     	;# 
   205  0FEF                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000D                     	;# 
   220  000E                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0013                     	;# 
   224  0015                     	;# 
   225  0016                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001B                     	;# 
   232  001C                     	;# 
   233  008C                     	;# 
   234  008D                     	;# 
   235  008E                     	;# 
   236  0091                     	;# 
   237  0092                     	;# 
   238  0093                     	;# 
   239  0095                     	;# 
   240  0096                     	;# 
   241  0097                     	;# 
   242  0099                     	;# 
   243  009A                     	;# 
   244  009B                     	;# 
   245  009B                     	;# 
   246  009C                     	;# 
   247  009D                     	;# 
   248  009E                     	;# 
   249  009F                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  010E                     	;# 
   253  0111                     	;# 
   254  0112                     	;# 
   255  0113                     	;# 
   256  0114                     	;# 
   257  0115                     	;# 
   258  0116                     	;# 
   259  0117                     	;# 
   260  0118                     	;# 
   261  0119                     	;# 
   262  011D                     	;# 
   263  018C                     	;# 
   264  018D                     	;# 
   265  018E                     	;# 
   266  0191                     	;# 
   267  0191                     	;# 
   268  0192                     	;# 
   269  0193                     	;# 
   270  0193                     	;# 
   271  0194                     	;# 
   272  0195                     	;# 
   273  0196                     	;# 
   274  0197                     	;# 
   275  0199                     	;# 
   276  019A                     	;# 
   277  019B                     	;# 
   278  019B                     	;# 
   279  019C                     	;# 
   280  019D                     	;# 
   281  019E                     	;# 
   282  019F                     	;# 
   283  020C                     	;# 
   284  020D                     	;# 
   285  0211                     	;# 
   286  0211                     	;# 
   287  0212                     	;# 
   288  0212                     	;# 
   289  0213                     	;# 
   290  0213                     	;# 
   291  0214                     	;# 
   292  0214                     	;# 
   293  0215                     	;# 
   294  0215                     	;# 
   295  0215                     	;# 
   296  0216                     	;# 
   297  0216                     	;# 
   298  0217                     	;# 
   299  0217                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  0393                     	;# 
   303  0394                     	;# 
   304  0395                     	;# 
   305  0396                     	;# 
   306  0498                     	;# 
   307  0498                     	;# 
   308  0499                     	;# 
   309  049A                     	;# 
   310  049B                     	;# 
   311  049B                     	;# 
   312  049C                     	;# 
   313  049E                     	;# 
   314  049F                     	;# 
   315  0611                     	;# 
   316  0612                     	;# 
   317  0613                     	;# 
   318  0613                     	;# 
   319  0614                     	;# 
   320  0615                     	;# 
   321  0616                     	;# 
   322  0616                     	;# 
   323  0617                     	;# 
   324  0618                     	;# 
   325  0619                     	;# 
   326  0619                     	;# 
   327  061A                     	;# 
   328  061B                     	;# 
   329  061C                     	;# 
   330  061C                     	;# 
   331  0691                     	;# 
   332  0692                     	;# 
   333  0693                     	;# 
   334  0694                     	;# 
   335  0695                     	;# 
   336  0F0F                     	;# 
   337  0F10                     	;# 
   338  0F11                     	;# 
   339  0F12                     	;# 
   340  0F13                     	;# 
   341  0F14                     	;# 
   342  0F15                     	;# 
   343  0F16                     	;# 
   344  0F17                     	;# 
   345  0F18                     	;# 
   346  0F19                     	;# 
   347  0F1A                     	;# 
   348  0F1B                     	;# 
   349  0F1C                     	;# 
   350  0F1D                     	;# 
   351  0F1E                     	;# 
   352  0F1F                     	;# 
   353  0F20                     	;# 
   354  0F21                     	;# 
   355  0F22                     	;# 
   356  0F23                     	;# 
   357  0F24                     	;# 
   358  0F25                     	;# 
   359  0F26                     	;# 
   360  0F27                     	;# 
   361  0F28                     	;# 
   362  0F29                     	;# 
   363  0F2A                     	;# 
   364  0F2B                     	;# 
   365  0F2C                     	;# 
   366  0F2D                     	;# 
   367  0F2E                     	;# 
   368  0F2F                     	;# 
   369  0F8C                     	;# 
   370  0F8D                     	;# 
   371  0F91                     	;# 
   372  0F95                     	;# 
   373  0F96                     	;# 
   374  0F97                     	;# 
   375  0F9C                     	;# 
   376  0F9D                     	;# 
   377  0F9E                     	;# 
   378  0FE3                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0013                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0093                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  009F                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  0111                     	;# 
   438  0112                     	;# 
   439  0113                     	;# 
   440  0114                     	;# 
   441  0115                     	;# 
   442  0116                     	;# 
   443  0117                     	;# 
   444  0118                     	;# 
   445  0119                     	;# 
   446  011D                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  018E                     	;# 
   450  0191                     	;# 
   451  0191                     	;# 
   452  0192                     	;# 
   453  0193                     	;# 
   454  0193                     	;# 
   455  0194                     	;# 
   456  0195                     	;# 
   457  0196                     	;# 
   458  0197                     	;# 
   459  0199                     	;# 
   460  019A                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020C                     	;# 
   468  020D                     	;# 
   469  0211                     	;# 
   470  0211                     	;# 
   471  0212                     	;# 
   472  0212                     	;# 
   473  0213                     	;# 
   474  0213                     	;# 
   475  0214                     	;# 
   476  0214                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0216                     	;# 
   481  0216                     	;# 
   482  0217                     	;# 
   483  0217                     	;# 
   484  0391                     	;# 
   485  0392                     	;# 
   486  0393                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0498                     	;# 
   491  0498                     	;# 
   492  0499                     	;# 
   493  049A                     	;# 
   494  049B                     	;# 
   495  049B                     	;# 
   496  049C                     	;# 
   497  049E                     	;# 
   498  049F                     	;# 
   499  0611                     	;# 
   500  0612                     	;# 
   501  0613                     	;# 
   502  0613                     	;# 
   503  0614                     	;# 
   504  0615                     	;# 
   505  0616                     	;# 
   506  0616                     	;# 
   507  0617                     	;# 
   508  0618                     	;# 
   509  0619                     	;# 
   510  0619                     	;# 
   511  061A                     	;# 
   512  061B                     	;# 
   513  061C                     	;# 
   514  061C                     	;# 
   515  0691                     	;# 
   516  0692                     	;# 
   517  0693                     	;# 
   518  0694                     	;# 
   519  0695                     	;# 
   520  0F0F                     	;# 
   521  0F10                     	;# 
   522  0F11                     	;# 
   523  0F12                     	;# 
   524  0F13                     	;# 
   525  0F14                     	;# 
   526  0F15                     	;# 
   527  0F16                     	;# 
   528  0F17                     	;# 
   529  0F18                     	;# 
   530  0F19                     	;# 
   531  0F1A                     	;# 
   532  0F1B                     	;# 
   533  0F1C                     	;# 
   534  0F1D                     	;# 
   535  0F1E                     	;# 
   536  0F1F                     	;# 
   537  0F20                     	;# 
   538  0F21                     	;# 
   539  0F22                     	;# 
   540  0F23                     	;# 
   541  0F24                     	;# 
   542  0F25                     	;# 
   543  0F26                     	;# 
   544  0F27                     	;# 
   545  0F28                     	;# 
   546  0F29                     	;# 
   547  0F2A                     	;# 
   548  0F2B                     	;# 
   549  0F2C                     	;# 
   550  0F2D                     	;# 
   551  0F2E                     	;# 
   552  0F2F                     	;# 
   553  0F8C                     	;# 
   554  0F8D                     	;# 
   555  0F91                     	;# 
   556  0F95                     	;# 
   557  0F96                     	;# 
   558  0F97                     	;# 
   559  0F9C                     	;# 
   560  0F9D                     	;# 
   561  0F9E                     	;# 
   562  0FE3                     	;# 
   563  0FE4                     	;# 
   564  0FE5                     	;# 
   565  0FE6                     	;# 
   566  0FE7                     	;# 
   567  0FE8                     	;# 
   568  0FE9                     	;# 
   569  0FEA                     	;# 
   570  0FEB                     	;# 
   571  0FED                     	;# 
   572  0FEE                     	;# 
   573  0FEF                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0008                     	;# 
   583  0009                     	;# 
   584  000A                     	;# 
   585  000B                     	;# 
   586  000C                     	;# 
   587  000D                     	;# 
   588  000E                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  008C                     	;# 
   602  008D                     	;# 
   603  008E                     	;# 
   604  0091                     	;# 
   605  0092                     	;# 
   606  0093                     	;# 
   607  0095                     	;# 
   608  0096                     	;# 
   609  0097                     	;# 
   610  0099                     	;# 
   611  009A                     	;# 
   612  009B                     	;# 
   613  009B                     	;# 
   614  009C                     	;# 
   615  009D                     	;# 
   616  009E                     	;# 
   617  009F                     	;# 
   618  010C                     	;# 
   619  010D                     	;# 
   620  010E                     	;# 
   621  0111                     	;# 
   622  0112                     	;# 
   623  0113                     	;# 
   624  0114                     	;# 
   625  0115                     	;# 
   626  0116                     	;# 
   627  0117                     	;# 
   628  0118                     	;# 
   629  0119                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0197                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019C                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019F                     	;# 
   651  020C                     	;# 
   652  020D                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0216                     	;# 
   665  0216                     	;# 
   666  0217                     	;# 
   667  0217                     	;# 
   668  0391                     	;# 
   669  0392                     	;# 
   670  0393                     	;# 
   671  0394                     	;# 
   672  0395                     	;# 
   673  0396                     	;# 
   674  0498                     	;# 
   675  0498                     	;# 
   676  0499                     	;# 
   677  049A                     	;# 
   678  049B                     	;# 
   679  049B                     	;# 
   680  049C                     	;# 
   681  049E                     	;# 
   682  049F                     	;# 
   683  0611                     	;# 
   684  0612                     	;# 
   685  0613                     	;# 
   686  0613                     	;# 
   687  0614                     	;# 
   688  0615                     	;# 
   689  0616                     	;# 
   690  0616                     	;# 
   691  0617                     	;# 
   692  0618                     	;# 
   693  0619                     	;# 
   694  0619                     	;# 
   695  061A                     	;# 
   696  061B                     	;# 
   697  061C                     	;# 
   698  061C                     	;# 
   699  0691                     	;# 
   700  0692                     	;# 
   701  0693                     	;# 
   702  0694                     	;# 
   703  0695                     	;# 
   704  0F0F                     	;# 
   705  0F10                     	;# 
   706  0F11                     	;# 
   707  0F12                     	;# 
   708  0F13                     	;# 
   709  0F14                     	;# 
   710  0F15                     	;# 
   711  0F16                     	;# 
   712  0F17                     	;# 
   713  0F18                     	;# 
   714  0F19                     	;# 
   715  0F1A                     	;# 
   716  0F1B                     	;# 
   717  0F1C                     	;# 
   718  0F1D                     	;# 
   719  0F1E                     	;# 
   720  0F1F                     	;# 
   721  0F20                     	;# 
   722  0F21                     	;# 
   723  0F22                     	;# 
   724  0F23                     	;# 
   725  0F24                     	;# 
   726  0F25                     	;# 
   727  0F26                     	;# 
   728  0F27                     	;# 
   729  0F28                     	;# 
   730  0F29                     	;# 
   731  0F2A                     	;# 
   732  0F2B                     	;# 
   733  0F2C                     	;# 
   734  0F2D                     	;# 
   735  0F2E                     	;# 
   736  0F2F                     	;# 
   737  0F8C                     	;# 
   738  0F8D                     	;# 
   739  0F91                     	;# 
   740  0F95                     	;# 
   741  0F96                     	;# 
   742  0F97                     	;# 
   743  0F9C                     	;# 
   744  0F9D                     	;# 
   745  0F9E                     	;# 
   746  0FE3                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0013                     	;# 
   776  0015                     	;# 
   777  0016                     	;# 
   778  0016                     	;# 
   779  0017                     	;# 
   780  0018                     	;# 
   781  0019                     	;# 
   782  001A                     	;# 
   783  001B                     	;# 
   784  001C                     	;# 
   785  008C                     	;# 
   786  008D                     	;# 
   787  008E                     	;# 
   788  0091                     	;# 
   789  0092                     	;# 
   790  0093                     	;# 
   791  0095                     	;# 
   792  0096                     	;# 
   793  0097                     	;# 
   794  0099                     	;# 
   795  009A                     	;# 
   796  009B                     	;# 
   797  009B                     	;# 
   798  009C                     	;# 
   799  009D                     	;# 
   800  009E                     	;# 
   801  009F                     	;# 
   802  010C                     	;# 
   803  010D                     	;# 
   804  010E                     	;# 
   805  0111                     	;# 
   806  0112                     	;# 
   807  0113                     	;# 
   808  0114                     	;# 
   809  0115                     	;# 
   810  0116                     	;# 
   811  0117                     	;# 
   812  0118                     	;# 
   813  0119                     	;# 
   814  011D                     	;# 
   815  018C                     	;# 
   816  018D                     	;# 
   817  018E                     	;# 
   818  0191                     	;# 
   819  0191                     	;# 
   820  0192                     	;# 
   821  0193                     	;# 
   822  0193                     	;# 
   823  0194                     	;# 
   824  0195                     	;# 
   825  0196                     	;# 
   826  0197                     	;# 
   827  0199                     	;# 
   828  019A                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019D                     	;# 
   833  019E                     	;# 
   834  019F                     	;# 
   835  020C                     	;# 
   836  020D                     	;# 
   837  0211                     	;# 
   838  0211                     	;# 
   839  0212                     	;# 
   840  0212                     	;# 
   841  0213                     	;# 
   842  0213                     	;# 
   843  0214                     	;# 
   844  0214                     	;# 
   845  0215                     	;# 
   846  0215                     	;# 
   847  0215                     	;# 
   848  0216                     	;# 
   849  0216                     	;# 
   850  0217                     	;# 
   851  0217                     	;# 
   852  0391                     	;# 
   853  0392                     	;# 
   854  0393                     	;# 
   855  0394                     	;# 
   856  0395                     	;# 
   857  0396                     	;# 
   858  0498                     	;# 
   859  0498                     	;# 
   860  0499                     	;# 
   861  049A                     	;# 
   862  049B                     	;# 
   863  049B                     	;# 
   864  049C                     	;# 
   865  049E                     	;# 
   866  049F                     	;# 
   867  0611                     	;# 
   868  0612                     	;# 
   869  0613                     	;# 
   870  0613                     	;# 
   871  0614                     	;# 
   872  0615                     	;# 
   873  0616                     	;# 
   874  0616                     	;# 
   875  0617                     	;# 
   876  0618                     	;# 
   877  0619                     	;# 
   878  0619                     	;# 
   879  061A                     	;# 
   880  061B                     	;# 
   881  061C                     	;# 
   882  061C                     	;# 
   883  0691                     	;# 
   884  0692                     	;# 
   885  0693                     	;# 
   886  0694                     	;# 
   887  0695                     	;# 
   888  0F0F                     	;# 
   889  0F10                     	;# 
   890  0F11                     	;# 
   891  0F12                     	;# 
   892  0F13                     	;# 
   893  0F14                     	;# 
   894  0F15                     	;# 
   895  0F16                     	;# 
   896  0F17                     	;# 
   897  0F18                     	;# 
   898  0F19                     	;# 
   899  0F1A                     	;# 
   900  0F1B                     	;# 
   901  0F1C                     	;# 
   902  0F1D                     	;# 
   903  0F1E                     	;# 
   904  0F1F                     	;# 
   905  0F20                     	;# 
   906  0F21                     	;# 
   907  0F22                     	;# 
   908  0F23                     	;# 
   909  0F24                     	;# 
   910  0F25                     	;# 
   911  0F26                     	;# 
   912  0F27                     	;# 
   913  0F28                     	;# 
   914  0F29                     	;# 
   915  0F2A                     	;# 
   916  0F2B                     	;# 
   917  0F2C                     	;# 
   918  0F2D                     	;# 
   919  0F2E                     	;# 
   920  0F2F                     	;# 
   921  0F8C                     	;# 
   922  0F8D                     	;# 
   923  0F91                     	;# 
   924  0F95                     	;# 
   925  0F96                     	;# 
   926  0F97                     	;# 
   927  0F9C                     	;# 
   928  0F9D                     	;# 
   929  0F9E                     	;# 
   930  0FE3                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0013                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0093                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  009F                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0111                     	;# 
   990  0112                     	;# 
   991  0113                     	;# 
   992  0114                     	;# 
   993  0115                     	;# 
   994  0116                     	;# 
   995  0117                     	;# 
   996  0118                     	;# 
   997  0119                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0197                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019C                     	;# 
  1016  019D                     	;# 
  1017  019E                     	;# 
  1018  019F                     	;# 
  1019  020C                     	;# 
  1020  020D                     	;# 
  1021  0211                     	;# 
  1022  0211                     	;# 
  1023  0212                     	;# 
  1024  0212                     	;# 
  1025  0213                     	;# 
  1026  0213                     	;# 
  1027  0214                     	;# 
  1028  0214                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0215                     	;# 
  1032  0216                     	;# 
  1033  0216                     	;# 
  1034  0217                     	;# 
  1035  0217                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0498                     	;# 
  1043  0498                     	;# 
  1044  0499                     	;# 
  1045  049A                     	;# 
  1046  049B                     	;# 
  1047  049B                     	;# 
  1048  049C                     	;# 
  1049  049E                     	;# 
  1050  049F                     	;# 
  1051  0611                     	;# 
  1052  0612                     	;# 
  1053  0613                     	;# 
  1054  0613                     	;# 
  1055  0614                     	;# 
  1056  0615                     	;# 
  1057  0616                     	;# 
  1058  0616                     	;# 
  1059  0617                     	;# 
  1060  0618                     	;# 
  1061  0619                     	;# 
  1062  0619                     	;# 
  1063  061A                     	;# 
  1064  061B                     	;# 
  1065  061C                     	;# 
  1066  061C                     	;# 
  1067  0691                     	;# 
  1068  0692                     	;# 
  1069  0693                     	;# 
  1070  0694                     	;# 
  1071  0695                     	;# 
  1072  0F0F                     	;# 
  1073  0F10                     	;# 
  1074  0F11                     	;# 
  1075  0F12                     	;# 
  1076  0F13                     	;# 
  1077  0F14                     	;# 
  1078  0F15                     	;# 
  1079  0F16                     	;# 
  1080  0F17                     	;# 
  1081  0F18                     	;# 
  1082  0F19                     	;# 
  1083  0F1A                     	;# 
  1084  0F1B                     	;# 
  1085  0F1C                     	;# 
  1086  0F1D                     	;# 
  1087  0F1E                     	;# 
  1088  0F1F                     	;# 
  1089  0F20                     	;# 
  1090  0F21                     	;# 
  1091  0F22                     	;# 
  1092  0F23                     	;# 
  1093  0F24                     	;# 
  1094  0F25                     	;# 
  1095  0F26                     	;# 
  1096  0F27                     	;# 
  1097  0F28                     	;# 
  1098  0F29                     	;# 
  1099  0F2A                     	;# 
  1100  0F2B                     	;# 
  1101  0F2C                     	;# 
  1102  0F2D                     	;# 
  1103  0F2E                     	;# 
  1104  0F2F                     	;# 
  1105  0F8C                     	;# 
  1106  0F8D                     	;# 
  1107  0F91                     	;# 
  1108  0F95                     	;# 
  1109  0F96                     	;# 
  1110  0F97                     	;# 
  1111  0F9C                     	;# 
  1112  0F9D                     	;# 
  1113  0F9E                     	;# 
  1114  0FE3                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0013                     	;# 
  1144  0015                     	;# 
  1145  0016                     	;# 
  1146  0016                     	;# 
  1147  0017                     	;# 
  1148  0018                     	;# 
  1149  0019                     	;# 
  1150  001A                     	;# 
  1151  001B                     	;# 
  1152  001C                     	;# 
  1153  008C                     	;# 
  1154  008D                     	;# 
  1155  008E                     	;# 
  1156  0091                     	;# 
  1157  0092                     	;# 
  1158  0093                     	;# 
  1159  0095                     	;# 
  1160  0096                     	;# 
  1161  0097                     	;# 
  1162  0099                     	;# 
  1163  009A                     	;# 
  1164  009B                     	;# 
  1165  009B                     	;# 
  1166  009C                     	;# 
  1167  009D                     	;# 
  1168  009E                     	;# 
  1169  009F                     	;# 
  1170  010C                     	;# 
  1171  010D                     	;# 
  1172  010E                     	;# 
  1173  0111                     	;# 
  1174  0112                     	;# 
  1175  0113                     	;# 
  1176  0114                     	;# 
  1177  0115                     	;# 
  1178  0116                     	;# 
  1179  0117                     	;# 
  1180  0118                     	;# 
  1181  0119                     	;# 
  1182  011D                     	;# 
  1183  018C                     	;# 
  1184  018D                     	;# 
  1185  018E                     	;# 
  1186  0191                     	;# 
  1187  0191                     	;# 
  1188  0192                     	;# 
  1189  0193                     	;# 
  1190  0193                     	;# 
  1191  0194                     	;# 
  1192  0195                     	;# 
  1193  0196                     	;# 
  1194  0197                     	;# 
  1195  0199                     	;# 
  1196  019A                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019D                     	;# 
  1201  019E                     	;# 
  1202  019F                     	;# 
  1203  020C                     	;# 
  1204  020D                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0391                     	;# 
  1221  0392                     	;# 
  1222  0393                     	;# 
  1223  0394                     	;# 
  1224  0395                     	;# 
  1225  0396                     	;# 
  1226  0498                     	;# 
  1227  0498                     	;# 
  1228  0499                     	;# 
  1229  049A                     	;# 
  1230  049B                     	;# 
  1231  049B                     	;# 
  1232  049C                     	;# 
  1233  049E                     	;# 
  1234  049F                     	;# 
  1235  0611                     	;# 
  1236  0612                     	;# 
  1237  0613                     	;# 
  1238  0613                     	;# 
  1239  0614                     	;# 
  1240  0615                     	;# 
  1241  0616                     	;# 
  1242  0616                     	;# 
  1243  0617                     	;# 
  1244  0618                     	;# 
  1245  0619                     	;# 
  1246  0619                     	;# 
  1247  061A                     	;# 
  1248  061B                     	;# 
  1249  061C                     	;# 
  1250  061C                     	;# 
  1251  0691                     	;# 
  1252  0692                     	;# 
  1253  0693                     	;# 
  1254  0694                     	;# 
  1255  0695                     	;# 
  1256  0F0F                     	;# 
  1257  0F10                     	;# 
  1258  0F11                     	;# 
  1259  0F12                     	;# 
  1260  0F13                     	;# 
  1261  0F14                     	;# 
  1262  0F15                     	;# 
  1263  0F16                     	;# 
  1264  0F17                     	;# 
  1265  0F18                     	;# 
  1266  0F19                     	;# 
  1267  0F1A                     	;# 
  1268  0F1B                     	;# 
  1269  0F1C                     	;# 
  1270  0F1D                     	;# 
  1271  0F1E                     	;# 
  1272  0F1F                     	;# 
  1273  0F20                     	;# 
  1274  0F21                     	;# 
  1275  0F22                     	;# 
  1276  0F23                     	;# 
  1277  0F24                     	;# 
  1278  0F25                     	;# 
  1279  0F26                     	;# 
  1280  0F27                     	;# 
  1281  0F28                     	;# 
  1282  0F29                     	;# 
  1283  0F2A                     	;# 
  1284  0F2B                     	;# 
  1285  0F2C                     	;# 
  1286  0F2D                     	;# 
  1287  0F2E                     	;# 
  1288  0F2F                     	;# 
  1289  0F8C                     	;# 
  1290  0F8D                     	;# 
  1291  0F91                     	;# 
  1292  0F95                     	;# 
  1293  0F96                     	;# 
  1294  0F97                     	;# 
  1295  0F9C                     	;# 
  1296  0F9D                     	;# 
  1297  0F9E                     	;# 
  1298  0FE3                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  0011                     	;# 
  1326  0012                     	;# 
  1327  0013                     	;# 
  1328  0015                     	;# 
  1329  0016                     	;# 
  1330  0016                     	;# 
  1331  0017                     	;# 
  1332  0018                     	;# 
  1333  0019                     	;# 
  1334  001A                     	;# 
  1335  001B                     	;# 
  1336  001C                     	;# 
  1337  008C                     	;# 
  1338  008D                     	;# 
  1339  008E                     	;# 
  1340  0091                     	;# 
  1341  0092                     	;# 
  1342  0093                     	;# 
  1343  0095                     	;# 
  1344  0096                     	;# 
  1345  0097                     	;# 
  1346  0099                     	;# 
  1347  009A                     	;# 
  1348  009B                     	;# 
  1349  009B                     	;# 
  1350  009C                     	;# 
  1351  009D                     	;# 
  1352  009E                     	;# 
  1353  009F                     	;# 
  1354  010C                     	;# 
  1355  010D                     	;# 
  1356  010E                     	;# 
  1357  0111                     	;# 
  1358  0112                     	;# 
  1359  0113                     	;# 
  1360  0114                     	;# 
  1361  0115                     	;# 
  1362  0116                     	;# 
  1363  0117                     	;# 
  1364  0118                     	;# 
  1365  0119                     	;# 
  1366  011D                     	;# 
  1367  018C                     	;# 
  1368  018D                     	;# 
  1369  018E                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0194                     	;# 
  1376  0195                     	;# 
  1377  0196                     	;# 
  1378  0197                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019C                     	;# 
  1384  019D                     	;# 
  1385  019E                     	;# 
  1386  019F                     	;# 
  1387  020C                     	;# 
  1388  020D                     	;# 
  1389  0211                     	;# 
  1390  0211                     	;# 
  1391  0212                     	;# 
  1392  0212                     	;# 
  1393  0213                     	;# 
  1394  0213                     	;# 
  1395  0214                     	;# 
  1396  0214                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0216                     	;# 
  1401  0216                     	;# 
  1402  0217                     	;# 
  1403  0217                     	;# 
  1404  0391                     	;# 
  1405  0392                     	;# 
  1406  0393                     	;# 
  1407  0394                     	;# 
  1408  0395                     	;# 
  1409  0396                     	;# 
  1410  0498                     	;# 
  1411  0498                     	;# 
  1412  0499                     	;# 
  1413  049A                     	;# 
  1414  049B                     	;# 
  1415  049B                     	;# 
  1416  049C                     	;# 
  1417  049E                     	;# 
  1418  049F                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0613                     	;# 
  1423  0614                     	;# 
  1424  0615                     	;# 
  1425  0616                     	;# 
  1426  0616                     	;# 
  1427  0617                     	;# 
  1428  0618                     	;# 
  1429  0619                     	;# 
  1430  0619                     	;# 
  1431  061A                     	;# 
  1432  061B                     	;# 
  1433  061C                     	;# 
  1434  061C                     	;# 
  1435  0691                     	;# 
  1436  0692                     	;# 
  1437  0693                     	;# 
  1438  0694                     	;# 
  1439  0695                     	;# 
  1440  0F0F                     	;# 
  1441  0F10                     	;# 
  1442  0F11                     	;# 
  1443  0F12                     	;# 
  1444  0F13                     	;# 
  1445  0F14                     	;# 
  1446  0F15                     	;# 
  1447  0F16                     	;# 
  1448  0F17                     	;# 
  1449  0F18                     	;# 
  1450  0F19                     	;# 
  1451  0F1A                     	;# 
  1452  0F1B                     	;# 
  1453  0F1C                     	;# 
  1454  0F1D                     	;# 
  1455  0F1E                     	;# 
  1456  0F1F                     	;# 
  1457  0F20                     	;# 
  1458  0F21                     	;# 
  1459  0F22                     	;# 
  1460  0F23                     	;# 
  1461  0F24                     	;# 
  1462  0F25                     	;# 
  1463  0F26                     	;# 
  1464  0F27                     	;# 
  1465  0F28                     	;# 
  1466  0F29                     	;# 
  1467  0F2A                     	;# 
  1468  0F2B                     	;# 
  1469  0F2C                     	;# 
  1470  0F2D                     	;# 
  1471  0F2E                     	;# 
  1472  0F2F                     	;# 
  1473  0F8C                     	;# 
  1474  0F8D                     	;# 
  1475  0F91                     	;# 
  1476  0F95                     	;# 
  1477  0F96                     	;# 
  1478  0F97                     	;# 
  1479  0F9C                     	;# 
  1480  0F9D                     	;# 
  1481  0F9E                     	;# 
  1482  0FE3                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0011                     	;# 
  1510  0012                     	;# 
  1511  0013                     	;# 
  1512  0015                     	;# 
  1513  0016                     	;# 
  1514  0016                     	;# 
  1515  0017                     	;# 
  1516  0018                     	;# 
  1517  0019                     	;# 
  1518  001A                     	;# 
  1519  001B                     	;# 
  1520  001C                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0091                     	;# 
  1525  0092                     	;# 
  1526  0093                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  009F                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0111                     	;# 
  1542  0112                     	;# 
  1543  0113                     	;# 
  1544  0114                     	;# 
  1545  0115                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  0118                     	;# 
  1549  0119                     	;# 
  1550  011D                     	;# 
  1551  018C                     	;# 
  1552  018D                     	;# 
  1553  018E                     	;# 
  1554  0191                     	;# 
  1555  0191                     	;# 
  1556  0192                     	;# 
  1557  0193                     	;# 
  1558  0193                     	;# 
  1559  0194                     	;# 
  1560  0195                     	;# 
  1561  0196                     	;# 
  1562  0197                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020C                     	;# 
  1572  020D                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0498                     	;# 
  1595  0498                     	;# 
  1596  0499                     	;# 
  1597  049A                     	;# 
  1598  049B                     	;# 
  1599  049B                     	;# 
  1600  049C                     	;# 
  1601  049E                     	;# 
  1602  049F                     	;# 
  1603  0611                     	;# 
  1604  0612                     	;# 
  1605  0613                     	;# 
  1606  0613                     	;# 
  1607  0614                     	;# 
  1608  0615                     	;# 
  1609  0616                     	;# 
  1610  0616                     	;# 
  1611  0617                     	;# 
  1612  0618                     	;# 
  1613  0619                     	;# 
  1614  0619                     	;# 
  1615  061A                     	;# 
  1616  061B                     	;# 
  1617  061C                     	;# 
  1618  061C                     	;# 
  1619  0691                     	;# 
  1620  0692                     	;# 
  1621  0693                     	;# 
  1622  0694                     	;# 
  1623  0695                     	;# 
  1624  0F0F                     	;# 
  1625  0F10                     	;# 
  1626  0F11                     	;# 
  1627  0F12                     	;# 
  1628  0F13                     	;# 
  1629  0F14                     	;# 
  1630  0F15                     	;# 
  1631  0F16                     	;# 
  1632  0F17                     	;# 
  1633  0F18                     	;# 
  1634  0F19                     	;# 
  1635  0F1A                     	;# 
  1636  0F1B                     	;# 
  1637  0F1C                     	;# 
  1638  0F1D                     	;# 
  1639  0F1E                     	;# 
  1640  0F1F                     	;# 
  1641  0F20                     	;# 
  1642  0F21                     	;# 
  1643  0F22                     	;# 
  1644  0F23                     	;# 
  1645  0F24                     	;# 
  1646  0F25                     	;# 
  1647  0F26                     	;# 
  1648  0F27                     	;# 
  1649  0F28                     	;# 
  1650  0F29                     	;# 
  1651  0F2A                     	;# 
  1652  0F2B                     	;# 
  1653  0F2C                     	;# 
  1654  0F2D                     	;# 
  1655  0F2E                     	;# 
  1656  0F2F                     	;# 
  1657  0F8C                     	;# 
  1658  0F8D                     	;# 
  1659  0F91                     	;# 
  1660  0F95                     	;# 
  1661  0F96                     	;# 
  1662  0F97                     	;# 
  1663  0F9C                     	;# 
  1664  0F9D                     	;# 
  1665  0F9E                     	;# 
  1666  0FE3                     	;# 
  1667  0FE4                     	;# 
  1668  0FE5                     	;# 
  1669  0FE6                     	;# 
  1670  0FE7                     	;# 
  1671  0FE8                     	;# 
  1672  0FE9                     	;# 
  1673  0FEA                     	;# 
  1674  0FEB                     	;# 
  1675  0FED                     	;# 
  1676  0FEE                     	;# 
  1677  0FEF                     	;# 
  1678                           
  1679                           	psect	idataBANK0
  1680  0000                     __pidataBANK0:	
  1681  000B                     _INTCONbits	set	11
  1682  000C                     _PORTAbits	set	12
  1683  000E                     _PORTCbits	set	14
  1684  009D                     _ADCON0	set	157
  1685  009E                     _ADCON1	set	158
  1686  009F                     _ADCON2	set	159
  1687  0095                     _OPTION_REGbits	set	149
  1688  0099                     _OSCCON	set	153
  1689  008C                     _TRISAbits	set	140
  1690  008D                     _TRISBbits	set	141
  1691  008E                     _TRISCbits	set	142
  1692  0117                     _FVRCON	set	279
  1693  010D                     _LATBbits	set	269
  1694  010E                     _LATCbits	set	270
  1695  018C                     _ANSELA	set	396
  1696  018D                     _ANSELB	set	397
  1697  018E                     _ANSELC	set	398
  1698                           
  1699                           	psect	cinit
  1700  000D                     start_initialization:	
  1701                           ; #config settings
  1702                           
  1703  000D                     __initialization:	
  1704  000D  3020               	movlw	low __pbssBANK0
  1705                           
  1706                           ; Clear objects allocated to COMMON
  1707  000E  01F8               	clrf	__pbssCOMMON& (0+127)
  1708  000F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1709                           
  1710                           ; Clear objects allocated to BANK0
  1711  0010  0084               	movwf	4
  1712  0011  3000               	movlw	high __pbssBANK0
  1713  0012  0085               	movwf	5
  1714  0013  302C               	movlw	44
  1715  0014  3186  2657  3180   	fcall	clear_ram0
  1716                           
  1717                           ; Clear objects allocated to BANK1
  1718  0017  30A0               	movlw	low __pbssBANK1
  1719  0018  0084               	movwf	4
  1720  0019  3000               	movlw	high __pbssBANK1
  1721  001A  0085               	movwf	5
  1722  001B  3038               	movlw	56
  1723  001C  3186  2657  3180   	fcall	clear_ram0
  1724                           
  1725                           ; Clear objects allocated to BANK2
  1726  001F  3020               	movlw	low __pbssBANK2
  1727  0020  0084               	movwf	4
  1728  0021  3001               	movlw	high __pbssBANK2
  1729  0022  0085               	movwf	5
  1730  0023  3020               	movlw	32
  1731  0024  3186  2657  3180   	fcall	clear_ram0
  1732                           
  1733                           ;initializer for _rfRxCC
  1734  0027  3020               	movlw	_rfRxBf& (0+255)
  1735  0028  00E5               	movwf	__pdataBANK0& (0+127)
  1736  0029  3020               	movlw	32
  1737  002A  00E6               	movwf	(__pdataBANK0+1)& (0+127)
  1738  002B  3000               	movlw	0
  1739  002C  00E7               	movwf	(__pdataBANK0+2)& (0+127)
  1740  002D  00E8               	movwf	(__pdataBANK0+3)& (0+127)
  1741  002E                     end_of_initialization:	
  1742                           ;End of C runtime variable initialization code
  1743                           
  1744  002E                     __end_of__initialization:	
  1745  002E  0020               	movlb	0
  1746  002F  2830               	ljmp	_main	;jump to C main() function
  1747  0030                     __pmaintext:	
  1748                           ; 0 bytes @ 0x19
  1749 ;;
  1750 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1751 ;;
  1752 ;; *************** function _main *****************
  1753 ;; Defined at:
  1754 ;;		line 55 in file "../../../src/node/main.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;		None               void
  1761 ;; Registers used:
  1762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 17F/0
  1765 ;;		On exit  : 1F/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1768 ;;      Params:         0       0       0       0
  1769 ;;      Locals:         0       0       0       0
  1770 ;;      Temps:          0       0       0       0
  1771 ;;      Totals:         0       0       0       0
  1772 ;;Total ram usage:        0 bytes
  1773 ;; Hardware stack levels required when called:   12
  1774 ;; This function calls:
  1775 ;;		_AdcInit
  1776 ;;		_ExtIntInit
  1777 ;;		_RfHalInit
  1778 ;;		_RfHalTickRxTh
  1779 ;;		_RfHalTickTxTh
  1780 ;;		_RfPacketsTickTh
  1781 ;;		_SysInitGpio
  1782 ;; This function is called by:
  1783 ;;		Startup code after reset
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function _main
  1789  0030                     _main:	
  1790                           
  1791                           ;main.c: 58: OSCCON = 0b01111000;
  1792                           
  1793                           ;incstack = 0
  1794                           ; Regs used in _main: [allreg]
  1795  0030  3078               	movlw	120
  1796  0031  0021               	movlb	1	; select bank1
  1797  0032  0099               	movwf	25	;volatile
  1798                           
  1799                           ;main.c: 60: SysInitGpio();
  1800  0033  23EF  3180         	fcall	_SysInitGpio
  1801                           
  1802                           ;main.c: 61: AdcInit();
  1803  0035  2045  3180         	fcall	_AdcInit
  1804                           
  1805                           ;main.c: 63: ExtIntInit();
  1806  0037  2054  3180         	fcall	_ExtIntInit
  1807                           
  1808                           ;main.c: 64: RfHalInit();
  1809  0039  2059  3180         	fcall	_RfHalInit
  1810  003B                     l2842:	
  1811                           
  1812                           ;main.c: 67: {
  1813                           ;main.c: 68: RfHalTickRxTh(&halRxBfTh);
  1814  003B  3048               	movlw	_halRxBfTh& (0+255)
  1815  003C  2071  3180         	fcall	_RfHalTickRxTh
  1816                           
  1817                           ;main.c: 69: RfHalTickTxTh(&halTxBfTh);
  1818  003E  304A               	movlw	_halTxBfTh& (0+255)
  1819  003F  216C  3180         	fcall	_RfHalTickTxTh
  1820                           
  1821                           ;main.c: 71: RfPacketsTickTh(&halPkTh);
  1822  0041  3046               	movlw	_halPkTh& (0+255)
  1823  0042  233F  3180         	fcall	_RfPacketsTickTh
  1824  0044  283B               	goto	l2842
  1825  0045                     __end_of_main:	
  1826  0045                     __ptext31:	
  1827 ;; *************** function _AdcInit *****************
  1828 ;; Defined at:
  1829 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;		None               void
  1836 ;; Registers used:
  1837 ;;		wreg, status,2
  1838 ;; Tracked objects:
  1839 ;;		On entry : 17F/2
  1840 ;;		On exit  : 17F/1
  1841 ;;		Unchanged: 160/0
  1842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1843 ;;      Params:         0       0       0       0
  1844 ;;      Locals:         0       0       0       0
  1845 ;;      Temps:          0       0       0       0
  1846 ;;      Totals:         0       0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    7
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_main
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           
  1858                           ;psect for function _AdcInit
  1859  0045                     _AdcInit:	
  1860                           
  1861                           ;adc16.c: 6: ANSELA = 0;
  1862                           
  1863                           ;incstack = 0
  1864                           ; Regs used in _AdcInit: [wreg+status,2]
  1865  0045  0023               	movlb	3	; select bank3
  1866  0046  018C               	clrf	12	;volatile
  1867                           
  1868                           ;adc16.c: 7: ANSELB = 0;
  1869  0047  018D               	clrf	13	;volatile
  1870                           
  1871                           ;adc16.c: 8: ANSELC = 0;
  1872  0048  018E               	clrf	14	;volatile
  1873                           
  1874                           ;adc16.c: 10: FVRCON = 0b11100001;
  1875  0049  30E1               	movlw	225
  1876  004A  0022               	movlb	2	; select bank2
  1877  004B  0097               	movwf	23	;volatile
  1878                           
  1879                           ;adc16.c: 12: ADCON2 = 0b00000000;
  1880  004C  0021               	movlb	1	; select bank1
  1881  004D  019F               	clrf	31	;volatile
  1882                           
  1883                           ;adc16.c: 13: ADCON1 = 0b11110000;
  1884  004E  30F0               	movlw	240
  1885  004F  009E               	movwf	30	;volatile
  1886                           
  1887                           ;adc16.c: 14: ADCON0 = 0b00000000;
  1888  0050  019D               	clrf	29	;volatile
  1889                           
  1890                           ;adc16.c: 16: ADCON0 = 0b00010011;
  1891  0051  3013               	movlw	19
  1892  0052  009D               	movwf	29	;volatile
  1893  0053  0008               	return
  1894  0054                     __end_of_AdcInit:	
  1895  0054                     __ptext30:	
  1896 ;; *************** function _ExtIntInit *****************
  1897 ;; Defined at:
  1898 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;		None               void
  1905 ;; Registers used:
  1906 ;;		None
  1907 ;; Tracked objects:
  1908 ;;		On entry : 17F/1
  1909 ;;		On exit  : 17F/1
  1910 ;;		Unchanged: 160/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          0       0       0       0
  1915 ;;      Totals:         0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    7
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           
  1927                           ;psect for function _ExtIntInit
  1928  0054                     _ExtIntInit:	
  1929                           
  1930                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _ExtIntInit: []
  1934  0054  1315               	bcf	21,6	;volatile
  1935                           
  1936                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  1937  0055  108B               	bcf	11,1	;volatile
  1938                           
  1939                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  1940  0056  160B               	bsf	11,4	;volatile
  1941                           
  1942                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  1943  0057  178B               	bsf	11,7	;volatile
  1944  0058  0008               	return
  1945  0059                     __end_of_ExtIntInit:	
  1946  0059                     __ptext22:	
  1947 ;; *************** function _RfHalInit *****************
  1948 ;; Defined at:
  1949 ;;		line 33 in file "../../../src/rfstack/hal.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  i               1    6[BANK0 ] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;		None               void
  1956 ;; Registers used:
  1957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 17F/1
  1960 ;;		On exit  : 1D/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1963 ;;      Params:         0       0       0       0
  1964 ;;      Locals:         0       1       0       0
  1965 ;;      Temps:          0       0       0       0
  1966 ;;      Totals:         0       1       0       0
  1967 ;;Total ram usage:        1 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:   11
  1970 ;; This function calls:
  1971 ;;		_RfTrcvMode
  1972 ;;		__CCBufInit
  1973 ;; This function is called by:
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           
  1979                           ;psect for function _RfHalInit
  1980  0059                     _RfHalInit:	
  1981                           
  1982                           ;hal.c: 36: rfStatus.isr.byteCounter = 0;
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in _RfHalInit: [allreg]
  1986  0059  0020               	movlb	0	; select bank0
  1987  005A  30A0               	movlw	_rfPackets& (0+255)
  1988  005B  01A0               	clrf	_rfStatus
  1989                           
  1990                           ;hal.c: 37: rfStatus.isr.txPacket = &(rfPackets[0]);
  1991  005C  00A1               	movwf	_rfStatus+1
  1992                           
  1993                           ;hal.c: 38: rfStatus.isr.state = RX_RECV;
  1994  005D  01A2               	clrf	_rfStatus+2
  1995                           
  1996                           ;hal.c: 41: for (i = 0; i < 2 * sizeof(RfTransceiverPacket_t); i++)
  1997  005E  01D2               	clrf	RfHalInit@i
  1998  005F                     l2418:	
  1999                           
  2000                           ;hal.c: 42: ((UI08_t*) rfPackets)[i] = 0;
  2001  005F  0852               	movf	RfHalInit@i,w
  2002  0060  3EA0               	addlw	_rfPackets& (0+255)
  2003  0061  0086               	movwf	6
  2004  0062  3038               	movlw	56
  2005  0063  0187               	clrf	7
  2006  0064  0181               	clrf	1
  2007  0065  0AD2               	incf	RfHalInit@i,f
  2008  0066  0252               	subwf	RfHalInit@i,w
  2009  0067  1C03               	skipc
  2010  0068  285F               	goto	l2418
  2011                           
  2012                           ;hal.c: 45: _CCBufInit();
  2013  0069  2159  3180         	fcall	__CCBufInit
  2014  006B  3000               	movlw	0
  2015                           
  2016                           ;hal.c: 47: (&halRxBfTh)->lc = 0;;
  2017  006C  01C8               	clrf	_halRxBfTh
  2018  006D  01C9               	clrf	_halRxBfTh+1
  2019  006E  01C6               	clrf	_halPkTh
  2020  006F  01C7               	clrf	_halPkTh+1
  2021                           
  2022                           ;hal.c: 50: RfTrcvMode(0);
  2023  0070  2AAE               	ljmp	_RfTrcvMode
  2024  0071                     __end_of_RfHalInit:	
  2025  0071                     __ptext12:	
  2026 ;; *************** function _RfHalTickRxTh *****************
  2027 ;; Defined at:
  2028 ;;		line 115 in file "../../../src/rfstack/hal.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  pt              1    wreg     PTR struct pt
  2031 ;;		 -> halRxBfTh(2), 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  pt              1   15[BANK0 ] PTR struct pt
  2034 ;;		 -> halRxBfTh(2), 
  2035 ;;  b               1   13[BANK0 ] unsigned char 
  2036 ;;  PT_YIELD_FLA    1    0        unsigned char 
  2037 ;;  pktLength       1   14[BANK0 ] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      unsigned char 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 1D/0
  2044 ;;		On exit  : 1F/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2047 ;;      Params:         0       0       0       0
  2048 ;;      Locals:         0       3       0       0
  2049 ;;      Temps:          0       2       0       0
  2050 ;;      Totals:         0       5       0       0
  2051 ;;Total ram usage:        5 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:   10
  2054 ;; This function calls:
  2055 ;;		_RfHalRxPut
  2056 ;;		_RfTrcvCrcTick
  2057 ;;		__CCBufCanRd
  2058 ;;		__CCBufPeekByte
  2059 ;;		__CCBufRdByte
  2060 ;;		__CCBufRdReverse
  2061 ;; This function is called by:
  2062 ;;		_main
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _RfHalTickRxTh
  2068  0071                     _RfHalTickRxTh:	
  2069                           
  2070                           ;incstack = 0
  2071                           ; Regs used in _RfHalTickRxTh: [allreg]
  2072                           ;RfHalTickRxTh@pt stored from wreg
  2073  0071  0020               	movlb	0	; select bank0
  2074  0072  00DB               	movwf	RfHalTickRxTh@pt
  2075                           
  2076                           ;hal.c: 124: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  2077  0073  0AA7               	incf	RfHalTickRxTh@rxByteTimeout,f
  2078  0074  2906               	goto	l2616
  2079  0075                     l2530:	
  2080  0075  085B               	movf	RfHalTickRxTh@pt,w
  2081  0076  0086               	movwf	6
  2082  0077  3082               	movlw	130
  2083  0078  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2084  007A                     l2532:	
  2085  007A  2125  3180         	fcall	__CCBufCanRd
  2086  007C  3800               	iorlw	0
  2087  007D  1903               	btfsc	3,2
  2088  007E  0008               	return
  2089                           
  2090                           ;hal.c: 132: UI08_t b = _CCBufRdByte();
  2091  007F  212E  3180         	fcall	__CCBufRdByte
  2092  0081  00D9               	movwf	RfHalTickRxTh@b
  2093                           
  2094                           ;hal.c: 135: if (b == 0x6B)
  2095  0082  3A6B               	xorlw	107
  2096  0083  1D03               	skipz
  2097  0084  2875               	goto	l2530
  2098                           
  2099                           ;hal.c: 136: {
  2100                           ;hal.c: 137: rxByteTimeout = 0;
  2101  0085  01A7               	clrf	RfHalTickRxTh@rxByteTimeout
  2102  0086  085B               	movf	RfHalTickRxTh@pt,w
  2103  0087  0086               	movwf	6
  2104  0088  308A               	movlw	138
  2105  0089  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2106  008B                     l2544:	
  2107  008B  2125  3180         	fcall	__CCBufCanRd
  2108  008D  3800               	iorlw	0
  2109  008E  3006               	movlw	6
  2110  008F  1D03               	skipz
  2111  0090  2895               	goto	L1
  2112  0091  0227               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2113  0092  1C03               	btfss	3,0
  2114  0093  0008               	return
  2115                           
  2116                           ;hal.c: 139: if (rxByteTimeout > 5)
  2117  0094  3006               	movlw	6
  2118  0095                     L1:	
  2119  0095  0227               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2120  0096  1C03               	skipc
  2121  0097  289A               	goto	l2556
  2122  0098                     l2552:	
  2123  0098  085B               	movf	RfHalTickRxTh@pt,w
  2124  0099  2BC9               	ljmp	PL14	;call to abstracted procedure
  2125  009A                     l2556:	
  2126                           
  2127                           ;hal.c: 143: }
  2128                           ;hal.c: 145: pktLength = _CCBufPeekByte();
  2129  009A  215B  3180         	fcall	__CCBufPeekByte
  2130  009C  00DA               	movwf	RfHalTickRxTh@pktLength
  2131                           
  2132                           ;hal.c: 147: if(pktLength > 0 && pktLength <= 20 + 1)
  2133  009D  085A               	movf	RfHalTickRxTh@pktLength,w
  2134  009E  1903               	btfsc	3,2
  2135  009F  2875               	goto	l2530
  2136  00A0  3016               	movlw	22
  2137  00A1  025A               	subwf	RfHalTickRxTh@pktLength,w
  2138  00A2  1803               	skipnc
  2139  00A3  2875               	goto	l2530
  2140                           
  2141                           ;hal.c: 148: {
  2142                           ;hal.c: 150: rxPacket.size = _CCBufRdByte() - 1;
  2143  00A4  212E  3180         	fcall	__CCBufRdByte
  2144  00A6  3EFF               	addlw	255
  2145  00A7  00C4               	movwf	RfHalTickRxTh@rxPacket+26
  2146                           
  2147                           ;hal.c: 151: rxPacket.crcTx = 0;
  2148  00A8  01C2               	clrf	RfHalTickRxTh@rxPacket+24
  2149                           
  2150                           ;hal.c: 153: rxByteTimeout = 0;
  2151  00A9  01A7               	clrf	RfHalTickRxTh@rxByteTimeout
  2152                           
  2153                           ;hal.c: 156: for (pktRxByteIndex = 0; pktRxByteIndex < rxPacket.size; pktRxByteIndex++)
  2154  00AA  01A6               	clrf	RfHalTickRxTh@pktRxByteIndex
  2155  00AB                     l2590:	
  2156  00AB  0844               	movf	RfHalTickRxTh@rxPacket+26,w
  2157  00AC  0226               	subwf	RfHalTickRxTh@pktRxByteIndex,w
  2158  00AD  085B               	movf	RfHalTickRxTh@pt,w
  2159  00AE  0086               	movwf	6
  2160  00AF  1803               	btfsc	3,0
  2161  00B0  28D9               	goto	L2
  2162  00B1  309E               	movlw	158
  2163  00B2  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2164  00B4                     l2572:	
  2165  00B4  2125  3180         	fcall	__CCBufCanRd
  2166  00B6  3800               	iorlw	0
  2167  00B7  301A               	movlw	26
  2168  00B8  1D03               	skipz
  2169  00B9  28BE               	goto	L3
  2170  00BA  0227               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2171  00BB  1C03               	btfss	3,0
  2172  00BC  0008               	return
  2173                           
  2174                           ;hal.c: 159: if(rxByteTimeout > 25) break;
  2175  00BD  301A               	movlw	26
  2176  00BE                     L3:	
  2177  00BE  0227               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2178  00BF  1803               	btfsc	3,0
  2179  00C0  28D7               	goto	l2592
  2180                           
  2181                           ;hal.c: 160: rxByteTimeout = 0;
  2182  00C1  01A7               	clrf	RfHalTickRxTh@rxByteTimeout
  2183                           
  2184                           ;hal.c: 161: rxPacket.data[pktRxByteIndex] = _CCBufRdByte();
  2185  00C2  212E  3180         	fcall	__CCBufRdByte
  2186  00C4  00D7               	movwf	??_RfHalTickRxTh
  2187  00C5  0826               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2188  00C6  3E2A               	addlw	RfHalTickRxTh@rxPacket& (0+255)
  2189  00C7  0086               	movwf	6
  2190  00C8  0187               	clrf	7
  2191  00C9  0857               	movf	??_RfHalTickRxTh,w
  2192  00CA  0081               	movwf	1
  2193                           
  2194                           ;hal.c: 162: rxPacket.crcTx = RfTrcvCrcTick(rxPacket.crcTx, rxPacket.data[pktRxByteIndex
      +                          ]);
  2195  00CB  0826               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2196  00CC  3E2A               	addlw	RfHalTickRxTh@rxPacket& (0+255)
  2197  00CD  0086               	movwf	6
  2198  00CE  0801               	movf	1,w
  2199  00CF  00CC               	movwf	RfTrcvCrcTick@data
  2200  00D0  0842               	movf	RfHalTickRxTh@rxPacket+24,w
  2201  00D1                     i2L__ptext18:	
  2202                           
  2203                           ;psect for function _RfTrcvCrcTick
  2204  00D1                     i2L_RfTrcvCrcTick:	
  2205                           
  2206                           ;incstack = 0
  2207                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  2208                           ;RfTrcvCrcTick@initial stored from wreg
  2209  00D1  00CD               	movwf	RfTrcvCrcTick@initial
  2210  00D2                     i2Ll2386:	
  2211                           
  2212                           ;mrf49xa.c: 54: return (initial ^ data);
  2213  00D2  084D               	movf	RfTrcvCrcTick@initial,w
  2214  00D3  064C               	xorwf	RfTrcvCrcTick@data,w
  2215  00D4                     i2Ll175:	
  2216  00D4  00C2               	movwf	RfHalTickRxTh@rxPacket+24
  2217  00D5  0AA6               	incf	RfHalTickRxTh@pktRxByteIndex,f
  2218  00D6  28AB               	goto	l2590
  2219  00D7                     l2592:	
  2220  00D7  085B               	movf	RfHalTickRxTh@pt,w
  2221  00D8  0086               	movwf	6
  2222  00D9                     L2:	
  2223  00D9  30A6               	movlw	166
  2224  00DA  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2225  00DC                     l2594:	
  2226  00DC  2125  3180         	fcall	__CCBufCanRd
  2227  00DE  3800               	iorlw	0
  2228  00DF  1D03               	skipz
  2229  00E0  28E5               	goto	l2600
  2230  00E1  301A               	movlw	26
  2231  00E2  0227               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2232  00E3  1C03               	btfss	3,0
  2233  00E4  0008               	return
  2234  00E5                     l2600:	
  2235                           
  2236                           ;hal.c: 167: rxPacket.crcRx = _CCBufRdByte();
  2237  00E5  212E  3180         	fcall	__CCBufRdByte
  2238  00E7  00C3               	movwf	RfHalTickRxTh@rxPacket+25
  2239                           
  2240                           ;hal.c: 170: if(rxByteTimeout > 5)
  2241  00E8  3006               	movlw	6
  2242  00E9  0227               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2243  00EA  1C03               	skipc
  2244  00EB  28F1               	goto	l2606
  2245                           
  2246                           ;hal.c: 171: {
  2247                           ;hal.c: 175: _CCBufRdReverse(pktRxByteIndex+1);
  2248  00EC  0826               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2249  00ED  3E01               	addlw	1
  2250  00EE  2146  3180         	fcall	__CCBufRdReverse
  2251                           
  2252                           ;hal.c: 176: }
  2253  00F0  2875               	goto	l2530
  2254  00F1                     l2606:	
  2255                           
  2256                           ;hal.c: 177: else if (rxPacket.crcRx != rxPacket.crcTx)
  2257  00F1  0843               	movf	RfHalTickRxTh@rxPacket+25,w
  2258  00F2  0642               	xorwf	RfHalTickRxTh@rxPacket+24,w
  2259  00F3  1903               	skipnz
  2260  00F4  28FA               	goto	l2610
  2261                           
  2262                           ;hal.c: 178: {
  2263                           ;hal.c: 180: _CCBufRdReverse(pktRxByteIndex+1);
  2264  00F5  0826               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2265  00F6  3E01               	addlw	1
  2266  00F7  2146  3180         	fcall	__CCBufRdReverse
  2267                           
  2268                           ;hal.c: 181: }
  2269  00F9  2875               	goto	l2530
  2270  00FA                     l2610:	
  2271  00FA  085B               	movf	RfHalTickRxTh@pt,w
  2272  00FB  0086               	movwf	6
  2273  00FC  30BE               	movlw	190
  2274  00FD  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2275  00FF                     l2612:	
  2276  00FF  302A               	movlw	RfHalTickRxTh@rxPacket& (0+255)
  2277  0100  2209  3180         	fcall	_RfHalRxPut
  2278  0102  3800               	iorlw	0
  2279  0103  1903               	btfsc	3,2
  2280  0104  0008               	return
  2281  0105  2875               	goto	l2530
  2282  0106                     l2616:	
  2283  0106  085B               	movf	RfHalTickRxTh@pt,w
  2284  0107  0086               	movwf	6
  2285  0108  0187               	clrf	7
  2286  0109  3F40               	moviw [0]fsr1
  2287  010A  00D7               	movwf	??_RfHalTickRxTh
  2288  010B  3F41               	moviw [1]fsr1
  2289  010C  00D8               	movwf	??_RfHalTickRxTh+1
  2290                           
  2291                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2292                           ; Switch size 1, requested type "space"
  2293                           ; Number of cases is 1, Range of values is 0 to 0
  2294                           ; switch strategies available:
  2295                           ; Name         Instructions Cycles
  2296                           ; simple_byte            4     3 (average)
  2297                           ; direct_byte            8     6 (fixed)
  2298                           ; jumptable            260     6 (fixed)
  2299                           ;	Chosen strategy is simple_byte
  2300  010D  1903               	skipnz
  2301  010E  2910               	goto	l3178
  2302  010F  2898               	goto	l2552
  2303  0110                     l3178:	
  2304                           
  2305                           ; Switch size 1, requested type "space"
  2306                           ; Number of cases is 6, Range of values is 0 to 190
  2307                           ; switch strategies available:
  2308                           ; Name         Instructions Cycles
  2309                           ; simple_byte           19    10 (average)
  2310                           ; jumptable            260     6 (fixed)
  2311                           ;	Chosen strategy is simple_byte
  2312  0110  0857               	movf	??_RfHalTickRxTh,w
  2313  0111  3A00               	xorlw	0	; case 0
  2314  0112  1903               	skipnz
  2315  0113  2875               	goto	l2530
  2316  0114  3A82               	xorlw	130	; case 130
  2317  0115  1903               	skipnz
  2318  0116  287A               	goto	l2532
  2319  0117  3A08               	xorlw	8	; case 138
  2320  0118  1903               	skipnz
  2321  0119  288B               	goto	l2544
  2322  011A  3A14               	xorlw	20	; case 158
  2323  011B  1903               	skipnz
  2324  011C  28B4               	goto	l2572
  2325  011D  3A38               	xorlw	56	; case 166
  2326  011E  1903               	skipnz
  2327  011F  28DC               	goto	l2594
  2328  0120  3A18               	xorlw	24	; case 190
  2329  0121  1903               	skipnz
  2330  0122  28FF               	goto	l2612
  2331  0123  2898               	goto	l2552
  2332  0124  0008               	return
  2333  0125                     __end_of_RfHalTickRxTh:	
  2334  0125                     __ptext16:	
  2335 ;; *************** function __CCBufCanRd *****************
  2336 ;; Defined at:
  2337 ;;		line 39 in file "../../../src/utilities/ccbuf_static.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;		None
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      unsigned char 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, pclath, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 1F/0
  2348 ;;		On exit  : 1F/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2351 ;;      Params:         0       0       0       0
  2352 ;;      Locals:         0       0       0       0
  2353 ;;      Temps:          0       0       0       0
  2354 ;;      Totals:         0       0       0       0
  2355 ;;Total ram usage:        0 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    8
  2358 ;; This function calls:
  2359 ;;		__CCBufCalcPt
  2360 ;; This function is called by:
  2361 ;;		_RfHalTickRxTh
  2362 ;;		__CCBufRdByte
  2363 ;;		__CCBufPeekByte
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function __CCBufCanRd
  2369  0125                     __CCBufCanRd:	
  2370                           
  2371                           ;incstack = 0
  2372                           ; Regs used in __CCBufCanRd: [wreg+status,2+status,0+pclath+cstack]
  2373  0125  01CC               	clrf	__CCBufCalcPt@move
  2374  0126  0ACC               	incf	__CCBufCalcPt@move,f
  2375  0127  0868               	movf	_rfRxCC+3,w
  2376  0128  214D  3180         	fcall	__CCBufCalcPt
  2377  012A  0667               	xorwf	_rfRxCC+2,w
  2378  012B  1903               	btfsc	3,2
  2379  012C  3400               	retlw	0
  2380                           
  2381                           ;ccbuf_static.c: 44: else return 1;
  2382  012D  3401               	retlw	1
  2383  012E                     __end_of__CCBufCanRd:	
  2384  012E                     __ptext14:	
  2385 ;; *************** function __CCBufRdByte *****************
  2386 ;; Defined at:
  2387 ;;		line 47 in file "../../../src/utilities/ccbuf_static.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  res             1    4[BANK0 ] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 1F/0
  2398 ;;		On exit  : 1F/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2401 ;;      Params:         0       0       0       0
  2402 ;;      Locals:         0       1       0       0
  2403 ;;      Temps:          0       1       0       0
  2404 ;;      Totals:         0       2       0       0
  2405 ;;Total ram usage:        2 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    9
  2408 ;; This function calls:
  2409 ;;		__CCBufCalcPt
  2410 ;;		__CCBufCanRd
  2411 ;; This function is called by:
  2412 ;;		_RfHalTickRxTh
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function __CCBufRdByte
  2418  012E                     __CCBufRdByte:	
  2419                           
  2420                           ;ccbuf_static.c: 49: if (_CCBufCanRd() != 0)
  2421                           
  2422                           ;incstack = 0
  2423                           ; Regs used in __CCBufRdByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2424  012E  2125  3180         	fcall	__CCBufCanRd
  2425  0130  3A00               	xorlw	0
  2426  0131  1903               	skipnz
  2427  0132  3400               	retlw	0
  2428  0133  01CC               	clrf	__CCBufCalcPt@move
  2429  0134  0ACC               	incf	__CCBufCalcPt@move,f
  2430  0135  0868               	movf	_rfRxCC+3,w
  2431  0136  214D               	fcall	__CCBufCalcPt
  2432  0137  00E8               	movwf	_rfRxCC+3
  2433  0138  0765               	addwf	_rfRxCC,w
  2434  0139  00CF               	movwf	??__CCBufRdByte
  2435  013A  0086               	movwf	6
  2436  013B  3001               	movlw	1	; select bank2/3
  2437  013C  0087               	movwf	7
  2438  013D  0801               	movf	1,w
  2439  013E  00D0               	movwf	__CCBufRdByte@res
  2440  013F  0868               	movf	_rfRxCC+3,w
  2441  0140  0765               	addwf	_rfRxCC,w
  2442  0141  00CF               	movwf	??__CCBufRdByte
  2443  0142  0086               	movwf	6
  2444  0143  0181               	clrf	1
  2445                           
  2446                           ;ccbuf_static.c: 54: return res;
  2447  0144  0850               	movf	__CCBufRdByte@res,w
  2448  0145  0008               	return
  2449  0146                     __end_of__CCBufRdByte:	
  2450                           ;ccbuf_static.c: 55: }
  2451                           ;ccbuf_static.c: 56: return 0;
  2452                           
  2453  0146                     __ptext13:	
  2454 ;; *************** function __CCBufRdReverse *****************
  2455 ;; Defined at:
  2456 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  qty             1    wreg     unsigned char 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  qty             1    3[BANK0 ] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;		None               void
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 1F/0
  2467 ;;		On exit  : 1F/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2470 ;;      Params:         0       0       0       0
  2471 ;;      Locals:         0       1       0       0
  2472 ;;      Temps:          0       0       0       0
  2473 ;;      Totals:         0       1       0       0
  2474 ;;Total ram usage:        1 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    8
  2477 ;; This function calls:
  2478 ;;		__CCBufCalcPt
  2479 ;; This function is called by:
  2480 ;;		_RfHalTickRxTh
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           
  2485                           ;psect for function __CCBufRdReverse
  2486  0146                     __CCBufRdReverse:	
  2487                           
  2488                           ;incstack = 0
  2489                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  2490                           ;__CCBufRdReverse@qty stored from wreg
  2491  0146  00CF               	movwf	__CCBufRdReverse@qty
  2492  0147  3C00               	sublw	0
  2493  0148  00CC               	movwf	__CCBufCalcPt@move
  2494  0149  0868               	movf	_rfRxCC+3,w
  2495  014A  214D               	fcall	__CCBufCalcPt
  2496  014B  00E8               	movwf	_rfRxCC+3
  2497  014C  0008               	return
  2498  014D                     __end_of__CCBufRdReverse:	
  2499  014D                     __ptext17:	
  2500 ;; *************** function __CCBufCalcPt *****************
  2501 ;; Defined at:
  2502 ;;		line 18 in file "../../../src/utilities/ccbuf_static.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  entry           1    wreg     unsigned char 
  2505 ;;  move            1    0[BANK0 ] unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  entry           1    1[BANK0 ] unsigned char 
  2508 ;;  result          1    2[BANK0 ] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      unsigned char 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0
  2513 ;; Tracked objects:
  2514 ;;		On entry : 1F/0
  2515 ;;		On exit  : 1F/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2518 ;;      Params:         0       1       0       0
  2519 ;;      Locals:         0       2       0       0
  2520 ;;      Temps:          0       0       0       0
  2521 ;;      Totals:         0       3       0       0
  2522 ;;Total ram usage:        3 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    7
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		__CCBufRdReverse
  2529 ;;		__CCBufCanRd
  2530 ;;		__CCBufRdByte
  2531 ;;		__CCBufPeekByte
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534                           
  2535                           
  2536                           ;psect for function __CCBufCalcPt
  2537  014D                     __CCBufCalcPt:	
  2538                           
  2539                           ;incstack = 0
  2540                           ; Regs used in __CCBufCalcPt: [wreg+status,2+status,0]
  2541                           ;__CCBufCalcPt@entry stored from wreg
  2542  014D  00CD               	movwf	__CCBufCalcPt@entry
  2543                           
  2544                           ;ccbuf_static.c: 20: I08_t result = ((I08_t)entry) + move;
  2545  014E  074C               	addwf	__CCBufCalcPt@move,w
  2546  014F  00CE               	movwf	__CCBufCalcPt@result
  2547  0150                     l2868:	
  2548                           ;ccbuf_static.c: 22: while (result < 0) result += CCDef->size;
  2549                           
  2550  0150  0866               	movf	_rfRxCC+1,w
  2551  0151  024E               	subwf	__CCBufCalcPt@result,w
  2552  0152  1C03               	btfss	3,0
  2553  0153  2957               	goto	l2870
  2554  0154  0866               	movf	_rfRxCC+1,w
  2555  0155  02CE               	subwf	__CCBufCalcPt@result,f
  2556  0156  2950               	goto	l2868
  2557  0157                     l2870:	
  2558                           
  2559                           ;ccbuf_static.c: 25: return (UI08_t) result;
  2560  0157  084E               	movf	__CCBufCalcPt@result,w
  2561  0158  0008               	return
  2562  0159                     __end_of__CCBufCalcPt:	
  2563  0159                     __ptext23:	
  2564 ;; *************** function __CCBufInit *****************
  2565 ;; Defined at:
  2566 ;;		line 5 in file "../../../src/utilities/ccbuf_static.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;		None
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;		None               void
  2573 ;; Registers used:
  2574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 17F/0
  2577 ;;		On exit  : 17F/0
  2578 ;;		Unchanged: 160/0
  2579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2580 ;;      Params:         0       0       0       0
  2581 ;;      Locals:         0       0       0       0
  2582 ;;      Temps:          0       0       0       0
  2583 ;;      Totals:         0       0       0       0
  2584 ;;Total ram usage:        0 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    9
  2587 ;; This function calls:
  2588 ;;		__CCBufReset
  2589 ;; This function is called by:
  2590 ;;		_RfHalInit
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           
  2595                           ;psect for function __CCBufInit
  2596  0159                     __CCBufInit:	
  2597                           
  2598                           ;ccbuf_static.c: 7: _CCBufReset();
  2599                           
  2600                           ;incstack = 0
  2601                           ; Regs used in __CCBufInit: [allreg]
  2602  0159  3186  2E38         	ljmp	l2848
  2603  015B                     __end_of__CCBufInit:	
  2604  015B                     __ptext15:	
  2605 ;; *************** function __CCBufPeekByte *****************
  2606 ;; Defined at:
  2607 ;;		line 59 in file "../../../src/utilities/ccbuf_static.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  res             1    4[BANK0 ] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      unsigned char 
  2614 ;; Registers used:
  2615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 1F/0
  2618 ;;		On exit  : 1F/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2621 ;;      Params:         0       0       0       0
  2622 ;;      Locals:         0       1       0       0
  2623 ;;      Temps:          0       1       0       0
  2624 ;;      Totals:         0       2       0       0
  2625 ;;Total ram usage:        2 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    9
  2628 ;; This function calls:
  2629 ;;		__CCBufCalcPt
  2630 ;;		__CCBufCanRd
  2631 ;; This function is called by:
  2632 ;;		_RfHalTickRxTh
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           
  2637                           ;psect for function __CCBufPeekByte
  2638  015B                     __CCBufPeekByte:	
  2639                           
  2640                           ;ccbuf_static.c: 61: if (_CCBufCanRd())
  2641                           
  2642                           ;incstack = 0
  2643                           ; Regs used in __CCBufPeekByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2644  015B  2125  3180         	fcall	__CCBufCanRd
  2645  015D  3A00               	xorlw	0
  2646  015E  1903               	skipnz
  2647  015F  3400               	retlw	0
  2648  0160  01CC               	clrf	__CCBufCalcPt@move
  2649  0161  0ACC               	incf	__CCBufCalcPt@move,f
  2650  0162  0868               	movf	_rfRxCC+3,w
  2651  0163  214D               	fcall	__CCBufCalcPt
  2652  0164  0765               	addwf	_rfRxCC,w
  2653  0165  00CF               	movwf	??__CCBufPeekByte
  2654  0166  0086               	movwf	6
  2655  0167  3001               	movlw	1	; select bank2/3
  2656  0168  0087               	movwf	7
  2657  0169  0801               	movf	1,w
  2658  016A  00D0               	movwf	__CCBufPeekByte@res
  2659                           
  2660                           ;ccbuf_static.c: 64: return res;
  2661  016B  0008               	return
  2662  016C                     __end_of__CCBufPeekByte:	
  2663                           ;ccbuf_static.c: 65: }
  2664                           ;ccbuf_static.c: 66: return 0;
  2665                           
  2666  016C                     __ptext7:	
  2667 ;; *************** function _RfHalTickTxTh *****************
  2668 ;; Defined at:
  2669 ;;		line 75 in file "../../../src/rfstack/hal.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  pt              1    wreg     PTR struct pt
  2672 ;;		 -> halTxBfTh(2), 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  pt              1   10[BANK0 ] PTR struct pt
  2675 ;;		 -> halTxBfTh(2), 
  2676 ;;  PT_YIELD_FLA    1    0        unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      unsigned char 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 1F/0
  2683 ;;		On exit  : 1F/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2686 ;;      Params:         0       0       0       0
  2687 ;;      Locals:         0       1       0       0
  2688 ;;      Temps:          0       2       0       0
  2689 ;;      Totals:         0       3       0       0
  2690 ;;Total ram usage:        3 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:   11
  2693 ;; This function calls:
  2694 ;;		_RfHalTxGet
  2695 ;;		_RfTrcvCarrierPresent
  2696 ;;		_RfTrcvMode
  2697 ;; This function is called by:
  2698 ;;		_main
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _RfHalTickTxTh
  2704  016C                     _RfHalTickTxTh:	
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _RfHalTickTxTh: [allreg]
  2708                           ;RfHalTickTxTh@pt stored from wreg
  2709  016C  00D6               	movwf	RfHalTickTxTh@pt
  2710  016D  2998               	goto	l2482
  2711  016E                     l2452:	
  2712  016E  0856               	movf	RfHalTickTxTh@pt,w
  2713  016F  0086               	movwf	6
  2714  0170  3055               	movlw	85
  2715  0171  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2716  0173                     l2454:	
  2717  0173  08A4               	movf	_rfStatus+4,f
  2718  0174  1903               	btfsc	3,2
  2719  0175  0008               	return
  2720                           
  2721                           ;hal.c: 88: txPacket = RfHalTxGet();
  2722  0176  21DD  3180         	fcall	_RfHalTxGet
  2723  0178  00A8               	movwf	RfHalTickTxTh@txPacket
  2724                           
  2725                           ;hal.c: 90: if (txPacket == (0))
  2726  0179  08A8               	movf	RfHalTickTxTh@txPacket,f
  2727  017A  1D03               	skipz
  2728  017B  297E               	goto	l2466
  2729  017C                     l2462:	
  2730  017C  0856               	movf	RfHalTickTxTh@pt,w
  2731  017D  2BC9               	ljmp	PL14	;call to abstracted procedure
  2732  017E                     l2466:	
  2733  017E  0856               	movf	RfHalTickTxTh@pt,w
  2734  017F  0086               	movwf	6
  2735  0180  3064               	movlw	100
  2736  0181  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2737  0183                     l2468:	
  2738  0183  230A  3180         	fcall	_RfTrcvCarrierPresent
  2739  0185  3A00               	xorlw	0
  2740  0186  1D03               	btfss	3,2
  2741  0187  0008               	return
  2742                           
  2743                           ;hal.c: 101: } while (rfStatus.isr.state != RX_RECV);
  2744  0188  08A2               	movf	_rfStatus+2,f
  2745  0189  1D03               	skipz
  2746  018A  297E               	goto	l2466
  2747                           
  2748                           ;hal.c: 104: RfTrcvMode(1);
  2749  018B  3001               	movlw	1
  2750  018C  22AE  3180         	fcall	_RfTrcvMode
  2751  018E  0020               	movlb	0	; select bank0
  2752  018F  0856               	movf	RfHalTickTxTh@pt,w
  2753  0190  0086               	movwf	6
  2754  0191  306B               	movlw	107
  2755  0192  23CF  3180         	fcall	PL16	;call to abstracted procedure
  2756  0194                     l2478:	
  2757  0194  0822               	movf	_rfStatus+2,w
  2758  0195  1D03               	skipz
  2759  0196  0008               	return
  2760  0197  296E               	goto	l2452
  2761  0198                     l2482:	
  2762  0198  0856               	movf	RfHalTickTxTh@pt,w
  2763  0199  0086               	movwf	6
  2764  019A  0187               	clrf	7
  2765  019B  3F40               	moviw [0]fsr1
  2766  019C  00D4               	movwf	??_RfHalTickTxTh
  2767  019D  3F41               	moviw [1]fsr1
  2768  019E  00D5               	movwf	??_RfHalTickTxTh+1
  2769                           
  2770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2771                           ; Switch size 1, requested type "space"
  2772                           ; Number of cases is 1, Range of values is 0 to 0
  2773                           ; switch strategies available:
  2774                           ; Name         Instructions Cycles
  2775                           ; simple_byte            4     3 (average)
  2776                           ; direct_byte            8     6 (fixed)
  2777                           ; jumptable            260     6 (fixed)
  2778                           ;	Chosen strategy is simple_byte
  2779  019F  1903               	skipnz
  2780  01A0  29A2               	goto	l3176
  2781  01A1  297C               	goto	l2462
  2782  01A2                     l3176:	
  2783                           
  2784                           ; Switch size 1, requested type "space"
  2785                           ; Number of cases is 4, Range of values is 0 to 107
  2786                           ; switch strategies available:
  2787                           ; Name         Instructions Cycles
  2788                           ; simple_byte           13     7 (average)
  2789                           ; direct_byte          222     6 (fixed)
  2790                           ; jumptable            260     6 (fixed)
  2791                           ;	Chosen strategy is simple_byte
  2792  01A2  0854               	movf	??_RfHalTickTxTh,w
  2793  01A3  3A00               	xorlw	0	; case 0
  2794  01A4  1903               	skipnz
  2795  01A5  296E               	goto	l2452
  2796  01A6  3A55               	xorlw	85	; case 85
  2797  01A7  1903               	skipnz
  2798  01A8  2973               	goto	l2454
  2799  01A9  3A31               	xorlw	49	; case 100
  2800  01AA  1903               	skipnz
  2801  01AB  2983               	goto	l2468
  2802  01AC  3A0F               	xorlw	15	; case 107
  2803  01AD  1903               	skipnz
  2804  01AE  2994               	goto	l2478
  2805  01AF  297C               	goto	l2462
  2806  01B0  0008               	return
  2807  01B1                     __end_of_RfHalTickTxTh:	
  2808  01B1                     __ptext6:	
  2809 ;; *************** function _RfHalRxGet *****************
  2810 ;; Defined at:
  2811 ;;		line 233 in file "../../../src/rfstack/hal.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  i               1    3[BANK0 ] unsigned char 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      PTR struct RfTransceiver
  2818 ;; Registers used:
  2819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 1F/0
  2822 ;;		On exit  : 1F/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2825 ;;      Params:         0       0       0       0
  2826 ;;      Locals:         0       1       0       0
  2827 ;;      Temps:          0       0       0       0
  2828 ;;      Totals:         0       1       0       0
  2829 ;;Total ram usage:        1 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    8
  2832 ;; This function calls:
  2833 ;;		___bmul
  2834 ;; This function is called by:
  2835 ;;		_RfPacketsTickTh
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           
  2840                           ;psect for function _RfHalRxGet
  2841  01B1                     _RfHalRxGet:	
  2842                           
  2843                           ;hal.c: 236: if (rfStatus.rxInQueue == 0)
  2844                           
  2845                           ;incstack = 0
  2846                           ; Regs used in _RfHalRxGet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2847  01B1  08A5               	movf	_rfStatus+5,f
  2848  01B2  1903               	btfsc	3,2
  2849                           
  2850                           ;hal.c: 237: return 0;
  2851  01B3  3400               	retlw	0
  2852                           
  2853                           ;hal.c: 239: for (i = 0; i < 2; i++)
  2854  01B4  01CF               	clrf	RfHalRxGet@i
  2855  01B5                     l2720:	
  2856                           
  2857                           ;hal.c: 240: {
  2858                           ;hal.c: 241: if (rfPackets[i].proc != 0 && rfPackets[i].tx == 0)
  2859  01B5  301C               	movlw	28
  2860  01B6  00CC               	movwf	___bmul@multiplicand
  2861  01B7  084F               	movf	RfHalRxGet@i,w
  2862  01B8  2289  3180         	fcall	___bmul
  2863  01BA  3EBB               	addlw	(_rfPackets+27)& (0+255)
  2864  01BB  0086               	movwf	6
  2865  01BC  0187               	clrf	7
  2866  01BD  1C01               	btfss	1,0
  2867  01BE  29D6               	goto	l2732
  2868  01BF  301C               	movlw	28
  2869  01C0  00CC               	movwf	___bmul@multiplicand
  2870  01C1  084F               	movf	RfHalRxGet@i,w
  2871  01C2  2289  3180         	fcall	___bmul
  2872  01C4  3EBB               	addlw	(_rfPackets+27)& (0+255)
  2873  01C5  0086               	movwf	6
  2874  01C6  0187               	clrf	7
  2875  01C7  1881               	btfsc	1,1
  2876  01C8  29D6               	goto	l2732
  2877                           
  2878                           ;hal.c: 242: {
  2879                           ;hal.c: 243: rfPackets[i].proc = 0;
  2880  01C9  301C               	movlw	28
  2881  01CA  00CC               	movwf	___bmul@multiplicand
  2882  01CB  084F               	movf	RfHalRxGet@i,w
  2883  01CC  2289  3180         	fcall	___bmul
  2884  01CE  23D4  3180         	fcall	PL20	;call to abstracted procedure
  2885                           
  2886                           ;hal.c: 244: rfStatus.rxInQueue--;
  2887  01D0  03A5               	decf	_rfStatus+5,f
  2888                           
  2889                           ;hal.c: 246: return &(rfPackets[i]);
  2890  01D1  00CC               	movwf	___bmul@multiplicand
  2891  01D2  084F               	movf	RfHalRxGet@i,w
  2892  01D3  2289               	fcall	___bmul
  2893  01D4  3EA0               	addlw	_rfPackets& (0+255)
  2894  01D5  0008               	return
  2895  01D6                     l2732:	
  2896  01D6  3002               	movlw	2
  2897  01D7  0ACF               	incf	RfHalRxGet@i,f
  2898  01D8  024F               	subwf	RfHalRxGet@i,w
  2899  01D9  1C03               	skipc
  2900  01DA  29B5               	goto	l2720
  2901                           
  2902                           ;hal.c: 247: }
  2903                           ;hal.c: 248: }
  2904                           ;hal.c: 250: rfStatus.rxInQueue = 0;
  2905  01DB  01A5               	clrf	_rfStatus+5
  2906  01DC  3400               	retlw	0
  2907  01DD                     __end_of_RfHalRxGet:	
  2908  01DD                     __ptext11:	
  2909 ;; *************** function _RfHalTxGet *****************
  2910 ;; Defined at:
  2911 ;;		line 254 in file "../../../src/rfstack/hal.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  i               1    3[BANK0 ] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      PTR struct RfTransceiver
  2918 ;; Registers used:
  2919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 1F/0
  2922 ;;		On exit  : 1F/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2925 ;;      Params:         0       0       0       0
  2926 ;;      Locals:         0       1       0       0
  2927 ;;      Temps:          0       0       0       0
  2928 ;;      Totals:         0       1       0       0
  2929 ;;Total ram usage:        1 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    8
  2932 ;; This function calls:
  2933 ;;		___bmul
  2934 ;; This function is called by:
  2935 ;;		_RfHalTickTxTh
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _RfHalTxGet
  2941  01DD                     _RfHalTxGet:	
  2942                           
  2943                           ;hal.c: 257: if (rfStatus.txInQueue == 0)
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _RfHalTxGet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2947  01DD  08A4               	movf	_rfStatus+4,f
  2948  01DE  1903               	btfsc	3,2
  2949                           
  2950                           ;hal.c: 258: return 0;
  2951  01DF  3400               	retlw	0
  2952                           
  2953                           ;hal.c: 260: for (i = 0; i < 2; i++)
  2954  01E0  01CF               	clrf	RfHalTxGet@i
  2955  01E1                     l2506:	
  2956                           
  2957                           ;hal.c: 261: {
  2958                           ;hal.c: 262: if (rfPackets[i].proc == 1 && rfPackets[i].tx == 1)
  2959  01E1  301C               	movlw	28
  2960  01E2  00CC               	movwf	___bmul@multiplicand
  2961  01E3  084F               	movf	RfHalTxGet@i,w
  2962  01E4  2289  3180         	fcall	___bmul
  2963  01E6  3EBB               	addlw	(_rfPackets+27)& (0+255)
  2964  01E7  0086               	movwf	6
  2965  01E8  0187               	clrf	7
  2966  01E9  1C01               	btfss	1,0
  2967  01EA  2A02               	goto	l2518
  2968  01EB  301C               	movlw	28
  2969  01EC  00CC               	movwf	___bmul@multiplicand
  2970  01ED  084F               	movf	RfHalTxGet@i,w
  2971  01EE  2289  3180         	fcall	___bmul
  2972  01F0  3EBB               	addlw	(_rfPackets+27)& (0+255)
  2973  01F1  0086               	movwf	6
  2974  01F2  0187               	clrf	7
  2975  01F3  1C81               	btfss	1,1
  2976  01F4  2A02               	goto	l2518
  2977                           
  2978                           ;hal.c: 263: {
  2979                           ;hal.c: 264: rfPackets[i].proc = 0;
  2980  01F5  301C               	movlw	28
  2981  01F6  00CC               	movwf	___bmul@multiplicand
  2982  01F7  084F               	movf	RfHalTxGet@i,w
  2983  01F8  2289  3180         	fcall	___bmul
  2984  01FA  23D4  3180         	fcall	PL20	;call to abstracted procedure
  2985                           
  2986                           ;hal.c: 265: rfStatus.txInQueue--;
  2987  01FC  03A4               	decf	_rfStatus+4,f
  2988                           
  2989                           ;hal.c: 267: return &(rfPackets[i]);
  2990  01FD  00CC               	movwf	___bmul@multiplicand
  2991  01FE  084F               	movf	RfHalTxGet@i,w
  2992  01FF  2289               	fcall	___bmul
  2993  0200  3EA0               	addlw	_rfPackets& (0+255)
  2994  0201  0008               	return
  2995  0202                     l2518:	
  2996  0202  3002               	movlw	2
  2997  0203  0ACF               	incf	RfHalTxGet@i,f
  2998  0204  024F               	subwf	RfHalTxGet@i,w
  2999  0205  1C03               	skipc
  3000  0206  29E1               	goto	l2506
  3001                           
  3002                           ;hal.c: 268: }
  3003                           ;hal.c: 269: }
  3004                           ;hal.c: 271: rfStatus.txInQueue = 0;
  3005  0207  01A4               	clrf	_rfStatus+4
  3006  0208  3400               	retlw	0
  3007  0209                     __end_of_RfHalTxGet:	
  3008  0209                     __ptext19:	
  3009 ;; *************** function _RfHalRxPut *****************
  3010 ;; Defined at:
  3011 ;;		line 214 in file "../../../src/rfstack/hal.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  rfPacket        1    wreg     PTR struct RfTransceiver
  3014 ;;		 -> RfHalTickRxTh@rxPacket(28), 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  rfPacket        1    9[BANK0 ] PTR struct RfTransceiver
  3017 ;;		 -> RfHalTickRxTh@rxPacket(28), 
  3018 ;;  i               1   10[BANK0 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      unsigned char 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 1F/0
  3025 ;;		On exit  : 1F/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3028 ;;      Params:         0       0       0       0
  3029 ;;      Locals:         0       2       0       0
  3030 ;;      Temps:          0       0       0       0
  3031 ;;      Totals:         0       2       0       0
  3032 ;;Total ram usage:        2 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    8
  3035 ;; This function calls:
  3036 ;;		___bmul
  3037 ;;		_memcpy
  3038 ;; This function is called by:
  3039 ;;		_RfHalTickRxTh
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function _RfHalRxPut
  3045  0209                     _RfHalRxPut:	
  3046                           
  3047                           ;incstack = 0
  3048                           ; Regs used in _RfHalRxPut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3049                           ;RfHalRxPut@rfPacket stored from wreg
  3050  0209  00D5               	movwf	RfHalRxPut@rfPacket
  3051                           
  3052                           ;hal.c: 216: UI08_t i = 0;
  3053  020A  01D6               	clrf	RfHalRxPut@i
  3054                           
  3055                           ;hal.c: 218: for (i = 0; i < 2; i++)
  3056  020B  01D6               	clrf	RfHalRxPut@i
  3057  020C                     l2674:	
  3058                           
  3059                           ;hal.c: 219: {
  3060                           ;hal.c: 220: if (rfPackets[i].proc == 0 && rfPackets[i].tx == 0)
  3061  020C  301C               	movlw	28
  3062  020D  00CC               	movwf	___bmul@multiplicand
  3063  020E  0856               	movf	RfHalRxPut@i,w
  3064  020F  2289  3180         	fcall	___bmul
  3065  0211  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3066  0212  0086               	movwf	6
  3067  0213  0187               	clrf	7
  3068  0214  1801               	btfsc	1,0
  3069  0215  2A34               	goto	l2688
  3070  0216  301C               	movlw	28
  3071  0217  00CC               	movwf	___bmul@multiplicand
  3072  0218  0856               	movf	RfHalRxPut@i,w
  3073  0219  2289  3180         	fcall	___bmul
  3074  021B  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3075  021C  0086               	movwf	6
  3076  021D  0187               	clrf	7
  3077  021E  1881               	btfsc	1,1
  3078  021F  2A34               	goto	l2688
  3079                           
  3080                           ;hal.c: 221: {
  3081                           ;hal.c: 222: memcpy(&(rfPackets[i]), rfPacket, sizeof(RfTransceiverPacket_t));
  3082  0220  0855               	movf	RfHalRxPut@rfPacket,w
  3083  0221  23DA  3180         	fcall	PL22	;call to abstracted procedure
  3084  0223  0856               	movf	RfHalRxPut@i,w
  3085  0224  2289  3180         	fcall	___bmul
  3086  0226  3EA0               	addlw	_rfPackets& (0+255)
  3087  0227  2295  3180         	fcall	_memcpy
  3088                           
  3089                           ;hal.c: 223: rfPackets[i].proc = 1;
  3090  0229  301C               	movlw	28
  3091  022A  00CC               	movwf	___bmul@multiplicand
  3092  022B  0856               	movf	RfHalRxPut@i,w
  3093  022C  2289               	fcall	___bmul
  3094  022D  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3095  022E  0086               	movwf	6
  3096  022F  3001               	movlw	1
  3097  0230  0187               	clrf	7
  3098  0231  1401               	bsf	1,0
  3099                           
  3100                           ;hal.c: 224: rfStatus.rxInQueue++;
  3101  0232  0AA5               	incf	_rfStatus+5,f
  3102                           
  3103                           ;hal.c: 225: return 1;
  3104  0233  0008               	return
  3105  0234                     l2688:	
  3106  0234  3002               	movlw	2
  3107  0235  0AD6               	incf	RfHalRxPut@i,f
  3108  0236  0256               	subwf	RfHalRxPut@i,w
  3109  0237  1803               	btfsc	3,0
  3110                           
  3111                           ;hal.c: 226: }
  3112                           ;hal.c: 227: }
  3113                           ;hal.c: 229: return 0;
  3114  0238  3400               	retlw	0
  3115  0239  2A0C               	goto	l2674
  3116  023A                     __end_of_RfHalRxPut:	
  3117  023A                     __ptext5:	
  3118 ;; *************** function _RfHalTxPut *****************
  3119 ;; Defined at:
  3120 ;;		line 275 in file "../../../src/rfstack/hal.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  packet          1    wreg     PTR struct RfTransceiver
  3123 ;;		 -> RfPacketTransmit@packet(28), NULL(0), rfPackets(56), 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  packet          1   10[BANK0 ] PTR struct RfTransceiver
  3126 ;;		 -> RfPacketTransmit@packet(28), NULL(0), rfPackets(56), 
  3127 ;;  i               1   11[BANK0 ] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      unsigned char 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 1F/0
  3134 ;;		On exit  : 1F/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3137 ;;      Params:         0       0       0       0
  3138 ;;      Locals:         0       2       0       0
  3139 ;;      Temps:          0       1       0       0
  3140 ;;      Totals:         0       3       0       0
  3141 ;;Total ram usage:        3 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    8
  3144 ;; This function calls:
  3145 ;;		_RfTrcvCrcTick
  3146 ;;		___bmul
  3147 ;;		_memcpy
  3148 ;; This function is called by:
  3149 ;;		_RfPacketSimpleReply
  3150 ;;		_RfPacketReply
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function _RfHalTxPut
  3156  023A                     _RfHalTxPut:	
  3157                           
  3158                           ;incstack = 0
  3159                           ; Regs used in _RfHalTxPut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3160                           ;RfHalTxPut@packet stored from wreg
  3161  023A  00D6               	movwf	RfHalTxPut@packet
  3162                           
  3163                           ;hal.c: 277: UI08_t i;
  3164                           ;hal.c: 280: packet->crcTx = 0;
  3165  023B  3E18               	addlw	24
  3166  023C  0086               	movwf	6
  3167  023D  0187               	clrf	7
  3168  023E  0181               	clrf	1
  3169                           
  3170                           ;hal.c: 282: for (i = 0; i < packet->size; i++)
  3171  023F  01D7               	clrf	RfHalTxPut@i
  3172  0240                     l2750:	
  3173  0240  0856               	movf	RfHalTxPut@packet,w
  3174  0241  3E1A               	addlw	26
  3175  0242  0086               	movwf	6
  3176  0243  0187               	clrf	7
  3177  0244  0801               	movf	1,w
  3178  0245  0257               	subwf	RfHalTxPut@i,w
  3179  0246  1803               	btfsc	3,0
  3180  0247  2A5C               	goto	l2752
  3181                           
  3182                           ;hal.c: 283: packet->crcTx = RfTrcvCrcTick(packet->crcTx, packet->data[i]);
  3183  0248  0856               	movf	RfHalTxPut@packet,w
  3184  0249  3E18               	addlw	24
  3185  024A  0086               	movwf	6
  3186  024B  0857               	movf	RfHalTxPut@i,w
  3187  024C  0756               	addwf	RfHalTxPut@packet,w
  3188  024D  00D5               	movwf	??_RfHalTxPut
  3189  024E  0084               	movwf	4
  3190  024F  0185               	clrf	5
  3191  0250  0800               	movf	0,w
  3192  0251  00CC               	movwf	RfTrcvCrcTick@data
  3193  0252  0856               	movf	RfHalTxPut@packet,w
  3194  0253  3E18               	addlw	24
  3195  0254  0084               	movwf	4
  3196  0255  0800               	movf	0,w
  3197  0256                     i1L__ptext18:	
  3198                           
  3199                           ;psect for function _RfTrcvCrcTick
  3200  0256                     i1L_RfTrcvCrcTick:	
  3201                           
  3202                           ;incstack = 0
  3203                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  3204                           ;RfTrcvCrcTick@initial stored from wreg
  3205  0256  00CD               	movwf	RfTrcvCrcTick@initial
  3206  0257                     i1Ll2386:	
  3207                           
  3208                           ;mrf49xa.c: 54: return (initial ^ data);
  3209  0257  084D               	movf	RfTrcvCrcTick@initial,w
  3210  0258  064C               	xorwf	RfTrcvCrcTick@data,w
  3211  0259                     i1Ll175:	
  3212  0259  0081               	movwf	1
  3213  025A  0AD7               	incf	RfHalTxPut@i,f
  3214  025B  2A40               	goto	l2750
  3215  025C                     l2752:	
  3216                           
  3217                           ;hal.c: 286: for (i = 0; i < 2; i++)
  3218  025C  01D7               	clrf	RfHalTxPut@i
  3219  025D                     l2758:	
  3220                           
  3221                           ;hal.c: 287: {
  3222                           ;hal.c: 288: if (rfPackets[i].proc == 0)
  3223  025D  301C               	movlw	28
  3224  025E  00CC               	movwf	___bmul@multiplicand
  3225  025F  0857               	movf	RfHalTxPut@i,w
  3226  0260  2289  3180         	fcall	___bmul
  3227  0262  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3228  0263  0086               	movwf	6
  3229  0264  0187               	clrf	7
  3230  0265  1801               	btfsc	1,0
  3231  0266  2A83               	goto	l2770
  3232                           
  3233                           ;hal.c: 289: {
  3234                           ;hal.c: 290: memcpy(&(rfPackets[i]), packet, sizeof(RfTransceiverPacket_t));
  3235  0267  0856               	movf	RfHalTxPut@packet,w
  3236  0268  23DA  3180         	fcall	PL22	;call to abstracted procedure
  3237  026A  0857               	movf	RfHalTxPut@i,w
  3238  026B  2289  3180         	fcall	___bmul
  3239  026D  3EA0               	addlw	_rfPackets& (0+255)
  3240  026E  2295  3180         	fcall	_memcpy
  3241                           
  3242                           ;hal.c: 291: rfPackets[i].proc = 1;
  3243  0270  301C               	movlw	28
  3244  0271  00CC               	movwf	___bmul@multiplicand
  3245  0272  0857               	movf	RfHalTxPut@i,w
  3246  0273  2289  3180         	fcall	___bmul
  3247  0275  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3248  0276  0086               	movwf	6
  3249  0277  301C               	movlw	28
  3250  0278  0187               	clrf	7
  3251  0279  1401               	bsf	1,0
  3252                           
  3253                           ;hal.c: 292: rfPackets[i].tx = 1;
  3254  027A  00CC               	movwf	___bmul@multiplicand
  3255  027B  0857               	movf	RfHalTxPut@i,w
  3256  027C  2289               	fcall	___bmul
  3257  027D  3EBB               	addlw	(_rfPackets+27)& (0+255)
  3258  027E  0086               	movwf	6
  3259  027F  0187               	clrf	7
  3260  0280  1481               	bsf	1,1
  3261                           
  3262                           ;hal.c: 294: rfStatus.txInQueue++;
  3263  0281  0AA4               	incf	_rfStatus+4,f
  3264  0282  0008               	return
  3265  0283                     l2770:	
  3266  0283  3002               	movlw	2
  3267  0284  0AD7               	incf	RfHalTxPut@i,f
  3268  0285  0257               	subwf	RfHalTxPut@i,w
  3269  0286  1803               	btfsc	3,0
  3270  0287  0008               	return
  3271  0288  2A5D               	goto	l2758
  3272  0289                     __end_of_RfHalTxPut:	
  3273  0289                     __ptext21:	
  3274 ;; *************** function ___bmul *****************
  3275 ;; Defined at:
  3276 ;;		line 2 in file "/opt/microchip/xc8/v1.30/sources/common/bmul.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  multiplier      1    wreg     unsigned char 
  3279 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  multiplier      1    2[BANK0 ] unsigned char 
  3282 ;;  product         1    1[BANK0 ] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      unsigned char 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0
  3287 ;; Tracked objects:
  3288 ;;		On entry : 1F/0
  3289 ;;		On exit  : 1F/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3292 ;;      Params:         0       1       0       0
  3293 ;;      Locals:         0       2       0       0
  3294 ;;      Temps:          0       0       0       0
  3295 ;;      Totals:         0       3       0       0
  3296 ;;Total ram usage:        3 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    7
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_RfHalRxPut
  3303 ;;		_RfHalRxGet
  3304 ;;		_RfHalTxGet
  3305 ;;		_RfHalTxPut
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           
  3310                           ;psect for function ___bmul
  3311  0289                     ___bmul:	
  3312                           
  3313                           ;incstack = 0
  3314                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3315                           ;___bmul@multiplier stored from wreg
  3316  0289  00CE               	movwf	___bmul@multiplier
  3317  028A  01CD               	clrf	___bmul@product
  3318  028B                     l2888:	
  3319  028B  084C               	movf	___bmul@multiplicand,w
  3320  028C  184E               	btfsc	___bmul@multiplier,0
  3321  028D  07CD               	addwf	___bmul@product,f
  3322  028E  35CC               	lslf	___bmul@multiplicand,f
  3323  028F  36CE               	lsrf	___bmul@multiplier,f
  3324  0290  08CE               	movf	___bmul@multiplier,f
  3325  0291  1D03               	skipz
  3326  0292  2A8B               	goto	l2888
  3327  0293  084D               	movf	___bmul@product,w
  3328  0294  0008               	return
  3329  0295                     __end_of___bmul:	
  3330  0295                     __ptext20:	
  3331 ;; *************** function _memcpy *****************
  3332 ;; Defined at:
  3333 ;;		line 11 in file "/opt/microchip/xc8/v1.30/sources/common/memcpy.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  d1              1    wreg     PTR void 
  3336 ;;		 -> NULL..(24), rfPackets..(24), packet..(24), RfPacketTransmit@packet(28), 
  3337 ;;		 -> NULL(0), rfPackets(56), 
  3338 ;;  s1              1    3[BANK0 ] PTR const void 
  3339 ;;		 -> RfPacketsTickTh@scratchpad(4), RfPacketTransmit@packet(28), RfHalTickRxTh@rxPacket(28), NULL(0), 
  3340 ;;		 -> rfPackets(56), 
  3341 ;;  n               2    4[BANK0 ] unsigned int 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  d1              1    8[BANK0 ] PTR void 
  3344 ;;		 -> NULL..(24), rfPackets..(24), packet..(24), RfPacketTransmit@packet(28), 
  3345 ;;		 -> NULL(0), rfPackets(56), 
  3346 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  3347 ;;		 -> RfPacketsTickTh@scratchpad(4), RfPacketTransmit@packet(28), RfHalTickRxTh@rxPacket(28), NULL(0), 
  3348 ;;		 -> rfPackets(56), 
  3349 ;;  d               1    6[BANK0 ] PTR unsigned char 
  3350 ;;		 -> NULL..(24), rfPackets..(24), packet..(24), RfPacketTransmit@packet(28), 
  3351 ;;		 -> NULL(0), rfPackets(56), 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      PTR void 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3356 ;; Tracked objects:
  3357 ;;		On entry : 1F/0
  3358 ;;		On exit  : 1F/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3361 ;;      Params:         0       3       0       0
  3362 ;;      Locals:         0       3       0       0
  3363 ;;      Temps:          0       0       0       0
  3364 ;;      Totals:         0       6       0       0
  3365 ;;Total ram usage:        6 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    7
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_RfHalRxPut
  3372 ;;		_RfHalTxPut
  3373 ;;		_RfPacketReply
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _memcpy
  3379  0295                     _memcpy:	
  3380                           
  3381                           ;incstack = 0
  3382                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0]
  3383                           ;memcpy@d1 stored from wreg
  3384  0295  00D4               	movwf	memcpy@d1
  3385  0296  084F               	movf	memcpy@s1,w
  3386  0297  00D3               	movwf	memcpy@s
  3387  0298  0854               	movf	memcpy@d1,w
  3388  0299  00D2               	movwf	memcpy@d
  3389  029A                     l2704:	
  3390  029A  3001               	movlw	1
  3391  029B  02D0               	subwf	memcpy@n,f
  3392  029C  3000               	movlw	0
  3393  029D  3BD1               	subwfb	memcpy@n+1,f
  3394  029E  0A50               	incf	memcpy@n,w
  3395  029F  1903               	skipnz
  3396  02A0  0A51               	incf	memcpy@n+1,w
  3397  02A1  1903               	btfsc	3,2
  3398  02A2  0008               	return
  3399  02A3  0852               	movf	memcpy@d,w
  3400  02A4  0086               	movwf	6
  3401  02A5  0187               	clrf	7
  3402  02A6  0853               	movf	memcpy@s,w
  3403  02A7  0084               	movwf	4
  3404  02A8  0185               	clrf	5
  3405  02A9  0800               	movf	0,w
  3406  02AA  0081               	movwf	1
  3407  02AB  0AD3               	incf	memcpy@s,f
  3408  02AC  0AD2               	incf	memcpy@d,f
  3409  02AD  2A9A               	goto	l2704
  3410  02AE                     __end_of_memcpy:	
  3411  02AE                     __ptext26:	
  3412 ;; *************** function _RfTrcvMode *****************
  3413 ;; Defined at:
  3414 ;;		line 53 in file "../../../src/rfstack/hal.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  tx              1    wreg     unsigned char 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  tx              1    4[BANK0 ] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;		None               void
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, pclath, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 1F/0
  3425 ;;		On exit  : 1D/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3428 ;;      Params:         0       0       0       0
  3429 ;;      Locals:         0       1       0       0
  3430 ;;      Temps:          0       0       0       0
  3431 ;;      Totals:         0       1       0       0
  3432 ;;Total ram usage:        1 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:   10
  3435 ;; This function calls:
  3436 ;;		_MRF49XACommand
  3437 ;;		_MRF49XAReset
  3438 ;; This function is called by:
  3439 ;;		_RfHalInit
  3440 ;;		_RfHalTickTxTh
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           
  3445                           ;psect for function _RfTrcvMode
  3446  02AE                     _RfTrcvMode:	
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in _RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  3450                           ;RfTrcvMode@tx stored from wreg
  3451  02AE  00D0               	movwf	RfTrcvMode@tx
  3452                           
  3453                           ;hal.c: 55: if (tx == 0)
  3454  02AF  08D0               	movf	RfTrcvMode@tx,f
  3455  02B0  1D03               	skipz
  3456  02B1  2AB5               	goto	l2438
  3457                           
  3458                           ;hal.c: 56: {
  3459                           ;hal.c: 57: rfStatus.inRx = 1;
  3460  02B2  01A3               	clrf	_rfStatus+3
  3461  02B3  0AA3               	incf	_rfStatus+3,f
  3462                           
  3463                           ;hal.c: 59: MRF49XAReset();
  3464  02B4  2AC9               	ljmp	l2390
  3465  02B5                     l2438:	
  3466                           ;hal.c: 60: }
  3467                           
  3468  02B5  3082               	movlw	130
  3469                           
  3470                           ;hal.c: 61: else
  3471                           ;hal.c: 62: {
  3472                           ;hal.c: 63: rfStatus.inRx = 0;
  3473  02B6  01A3               	clrf	_rfStatus+3
  3474                           
  3475                           ;hal.c: 65: MRF49XACommand(0x8200);
  3476  02B7  01CE               	clrf	MRF49XACommand@cmd
  3477  02B8  00CF               	movwf	MRF49XACommand@cmd+1
  3478  02B9  22E7  3180         	fcall	_MRF49XACommand
  3479                           
  3480                           ;hal.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  3481  02BB  30A8               	movlw	168
  3482  02BC  23E0  3180         	fcall	PL24	;call to abstracted procedure
  3483  02BE  22E7  3180         	fcall	_MRF49XACommand
  3484                           
  3485                           ;hal.c: 67: MRF49XACommand(0x8200 |0x0020);
  3486  02C0  3020               	movlw	32
  3487  02C1  23E5  3180         	fcall	PL26	;call to abstracted procedure
  3488  02C3  22E7               	fcall	_MRF49XACommand
  3489                           
  3490                           ;hal.c: 70: rfStatus.isr.state = TX_PREAMBLE1;
  3491  02C4  0020               	movlb	0	; select bank0
  3492  02C5  01A2               	clrf	_rfStatus+2
  3493  02C6  0AA2               	incf	_rfStatus+2,f
  3494                           
  3495                           ;hal.c: 71: rfStatus.isr.byteCounter = 0;
  3496  02C7  01A0               	clrf	_rfStatus
  3497  02C8  0008               	return
  3498  02C9                     __end_of_RfTrcvMode:	
  3499  02C9                     __ptext27:	
  3500 ;; *************** function _MRF49XAReset *****************
  3501 ;; Defined at:
  3502 ;;		line 119 in file "../../../src/devices/mrf49xa.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;		None               void
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0, pclath, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 1F/0
  3513 ;;		On exit  : 1F/2
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3516 ;;      Params:         0       0       0       0
  3517 ;;      Locals:         0       0       0       0
  3518 ;;      Temps:          0       0       0       0
  3519 ;;      Totals:         0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    9
  3523 ;; This function calls:
  3524 ;;		_MRF49XACommand
  3525 ;; This function is called by:
  3526 ;;		_RfTrcvMode
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           
  3531                           ;psect for function _MRF49XAReset
  3532  02C9                     _MRF49XAReset:	
  3533  02C9                     l2390:	
  3534                           ;incstack = 0
  3535                           ; Regs used in _MRF49XAReset: [wreg+status,2+status,0+pclath+cstack]
  3536                           
  3537                           
  3538                           ;mrf49xa.c: 121: MRF49XACommand(0x8200);
  3539  02C9  3000               	movlw	0
  3540  02CA  00CE               	movwf	MRF49XACommand@cmd
  3541  02CB  3082               	movlw	130
  3542  02CC  00CF               	movwf	MRF49XACommand@cmd+1
  3543  02CD  22E7  3180         	fcall	_MRF49XACommand
  3544                           
  3545                           ;mrf49xa.c: 122: MRF49XACommand(0xCA81);
  3546  02CF  3081               	movlw	129
  3547  02D0  23EA  3180         	fcall	PL28	;call to abstracted procedure
  3548  02D2  22E7  3180         	fcall	_MRF49XACommand
  3549                           
  3550                           ;mrf49xa.c: 123: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  3551  02D4  3028               	movlw	40
  3552  02D5  23E0  3180         	fcall	PL24	;call to abstracted procedure
  3553  02D7  22E7  3180         	fcall	_MRF49XACommand
  3554                           
  3555                           ;mrf49xa.c: 124: MRF49XACommand(0x8200 | 0x0080);
  3556  02D9  3080               	movlw	128
  3557  02DA  23E5  3180         	fcall	PL26	;call to abstracted procedure
  3558  02DC  22E7  3180         	fcall	_MRF49XACommand
  3559                           
  3560                           ;mrf49xa.c: 125: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  3561  02DE  3068               	movlw	104
  3562  02DF  23E0  3180         	fcall	PL24	;call to abstracted procedure
  3563  02E1  22E7  3180         	fcall	_MRF49XACommand
  3564                           
  3565                           ;mrf49xa.c: 126: MRF49XACommand(0xCA81 | 0x0002);
  3566  02E3  3083               	movlw	131
  3567  02E4  23EA  3180         	fcall	PL28	;call to abstracted procedure
  3568  02E6  2AE7               	ljmp	l2332
  3569  02E7                     __end_of_MRF49XAReset:	
  3570  02E7                     __ptext28:	
  3571 ;; *************** function _MRF49XACommand *****************
  3572 ;; Defined at:
  3573 ;;		line 28 in file "../../../src/devices/mrf49xa.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  cmd             2    2[BANK0 ] unsigned int 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;		None               void
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, pclath, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 1F/0
  3584 ;;		On exit  : 1F/2
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3587 ;;      Params:         0       2       0       0
  3588 ;;      Locals:         0       0       0       0
  3589 ;;      Temps:          0       0       0       0
  3590 ;;      Totals:         0       2       0       0
  3591 ;;Total ram usage:        2 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    8
  3594 ;; This function calls:
  3595 ;;		_SPI_Write
  3596 ;; This function is called by:
  3597 ;;		_MRF49XAReset
  3598 ;;		_RfTrcvMode
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _MRF49XACommand
  3604  02E7                     _MRF49XACommand:	
  3605  02E7                     l2332:	
  3606                           ;incstack = 0
  3607                           ; Regs used in _MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  3608                           
  3609                           
  3610                           ;mrf49xa.c: 30: LATCbits.LATC6 = 0;;
  3611  02E7  0022               	movlb	2	; select bank2
  3612  02E8  130E               	bcf	14,6	;volatile
  3613                           
  3614                           ;mrf49xa.c: 32: SPI_Write((cmd & 0xFF00) >> 8);
  3615  02E9  0020               	movlb	0	; select bank0
  3616  02EA  084F               	movf	MRF49XACommand@cmd+1,w
  3617  02EB  22F2  3180         	fcall	_SPI_Write
  3618                           
  3619                           ;mrf49xa.c: 33: SPI_Write((cmd & 0x00FF));
  3620  02ED  084E               	movf	MRF49XACommand@cmd,w
  3621  02EE  22F2               	fcall	_SPI_Write
  3622                           
  3623                           ;mrf49xa.c: 35: LATCbits.LATC6 = 1;;
  3624  02EF  0022               	movlb	2	; select bank2
  3625  02F0  170E               	bsf	14,6	;volatile
  3626  02F1  0008               	return
  3627  02F2                     __end_of_MRF49XACommand:	
  3628  02F2                     __ptext29:	
  3629 ;; *************** function _SPI_Write *****************
  3630 ;; Defined at:
  3631 ;;		line 185 in file "../../../src/devices/mrf49xa.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  data            1    wreg     unsigned char 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  data            1    0[BANK0 ] unsigned char 
  3636 ;;  i               1    1[BANK0 ] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 1F/0
  3643 ;;		On exit  : 1F/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3646 ;;      Params:         0       0       0       0
  3647 ;;      Locals:         0       2       0       0
  3648 ;;      Temps:          0       0       0       0
  3649 ;;      Totals:         0       2       0       0
  3650 ;;Total ram usage:        2 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    7
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_MRF49XACommand
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _SPI_Write
  3662  02F2                     _SPI_Write:	
  3663                           
  3664                           ;incstack = 0
  3665                           ; Regs used in _SPI_Write: [wreg+status,2+status,0]
  3666                           ;SPI_Write@data stored from wreg
  3667  02F2  00CC               	movwf	SPI_Write@data
  3668                           
  3669                           ;mrf49xa.c: 192: LATCbits.LATC7 = 0;
  3670  02F3  0022               	movlb	2	; select bank2
  3671  02F4  138E               	bcf	14,7	;volatile
  3672                           
  3673                           ;mrf49xa.c: 208: UI08_t i;
  3674                           ;mrf49xa.c: 209: for (i = 0; i < 8; i++)
  3675  02F5  0020               	movlb	0	; select bank0
  3676  02F6  01CD               	clrf	SPI_Write@i
  3677  02F7                     l207:	
  3678                           
  3679                           ;mrf49xa.c: 210: {
  3680                           ;mrf49xa.c: 211: if (data & 0x80)
  3681  02F7  1FCC               	btfss	SPI_Write@data,7
  3682  02F8  2AFC               	goto	l209
  3683                           
  3684                           ;mrf49xa.c: 212: {
  3685                           ;mrf49xa.c: 213: LATBbits.LATB7 = 1;
  3686  02F9  0022               	movlb	2	; select bank2
  3687  02FA  178D               	bsf	13,7	;volatile
  3688                           
  3689                           ;mrf49xa.c: 214: }
  3690  02FB  2AFE               	goto	l210
  3691  02FC                     l209:	
  3692                           
  3693                           ;mrf49xa.c: 215: else
  3694                           ;mrf49xa.c: 216: {
  3695                           ;mrf49xa.c: 217: LATBbits.LATB7 = 0;
  3696  02FC  0022               	movlb	2	; select bank2
  3697  02FD  138D               	bcf	13,7	;volatile
  3698  02FE                     l210:	
  3699                           
  3700                           ;mrf49xa.c: 218: }
  3701                           ;mrf49xa.c: 220: LATCbits.LATC7 = 1;
  3702  02FE  178E               	bsf	14,7	;volatile
  3703                           
  3704                           ;mrf49xa.c: 221: data = data << 1;
  3705  02FF  0020               	movlb	0	; select bank0
  3706  0300  35CC               	lslf	SPI_Write@data,f
  3707                           
  3708                           ;mrf49xa.c: 222: LATCbits.LATC7 = 0;
  3709  0301  0022               	movlb	2	; select bank2
  3710  0302  138E               	bcf	14,7	;volatile
  3711  0303  0020               	movlb	0	; select bank0
  3712  0304  3008               	movlw	8
  3713  0305  0ACD               	incf	SPI_Write@i,f
  3714  0306  024D               	subwf	SPI_Write@i,w
  3715  0307  1803               	btfsc	3,0
  3716  0308  0008               	return
  3717  0309  2AF7               	goto	l207
  3718  030A                     __end_of_SPI_Write:	
  3719  030A                     __ptext8:	
  3720 ;; *************** function _RfTrcvCarrierPresent *****************
  3721 ;; Defined at:
  3722 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  stat            2    6[BANK0 ] unsigned int 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      unsigned char 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 1F/0
  3733 ;;		On exit  : 1F/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3736 ;;      Params:         0       0       0       0
  3737 ;;      Locals:         0       2       0       0
  3738 ;;      Temps:          0       0       0       0
  3739 ;;      Totals:         0       2       0       0
  3740 ;;Total ram usage:        2 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    9
  3743 ;; This function calls:
  3744 ;;		_MRF49XAReadStatus
  3745 ;; This function is called by:
  3746 ;;		_RfHalTickTxTh
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _RfTrcvCarrierPresent
  3752  030A                     _RfTrcvCarrierPresent:	
  3753                           
  3754                           ;mrf49xa.c: 63: UI16_t stat = MRF49XAReadStatus();
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _RfTrcvCarrierPresent: [wreg+status,2+status,0+pclath+cstack]
  3758  030A  2313  3180         	fcall	_MRF49XAReadStatus
  3759  030C  084F               	movf	?_MRF49XAReadStatus+1,w
  3760  030D  00D3               	movwf	RfTrcvCarrierPresent@stat+1
  3761  030E  084E               	movf	?_MRF49XAReadStatus,w
  3762  030F  00D2               	movwf	RfTrcvCarrierPresent@stat
  3763                           
  3764                           ;mrf49xa.c: 64: if ((stat & (1<<8)) != 0)
  3765  0310  1853               	btfsc	RfTrcvCarrierPresent@stat+1,0
  3766                           
  3767                           ;mrf49xa.c: 65: return 1;
  3768  0311  3401               	retlw	1
  3769                           
  3770                           ;mrf49xa.c: 66: else
  3771                           ;mrf49xa.c: 67: return 0;
  3772  0312  3400               	retlw	0
  3773  0313                     __end_of_RfTrcvCarrierPresent:	
  3774  0313                     __ptext9:	
  3775 ;; *************** function _MRF49XAReadStatus *****************
  3776 ;; Defined at:
  3777 ;;		line 39 in file "../../../src/devices/mrf49xa.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  w               2    4[BANK0 ] unsigned int 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  2    2[BANK0 ] unsigned int 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, pclath, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 1F/0
  3788 ;;		On exit  : 1F/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3791 ;;      Params:         0       2       0       0
  3792 ;;      Locals:         0       2       0       0
  3793 ;;      Temps:          0       0       0       0
  3794 ;;      Totals:         0       4       0       0
  3795 ;;Total ram usage:        4 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    8
  3798 ;; This function calls:
  3799 ;;		_SPI_Read
  3800 ;; This function is called by:
  3801 ;;		_RfTrcvCarrierPresent
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _MRF49XAReadStatus
  3807  0313                     _MRF49XAReadStatus:	
  3808                           
  3809                           ;mrf49xa.c: 41: LATCbits.LATC6 = 0;;
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _MRF49XAReadStatus: [wreg+status,2+status,0+pclath+cstack]
  3813  0313  0022               	movlb	2	; select bank2
  3814  0314  130E               	bcf	14,6	;volatile
  3815                           
  3816                           ;mrf49xa.c: 43: UI16_t w = SPI_Read() << 8;
  3817  0315  2323  3180         	fcall	_SPI_Read
  3818  0317  00D1               	movwf	MRF49XAReadStatus@w+1
  3819  0318  01D0               	clrf	MRF49XAReadStatus@w
  3820                           
  3821                           ;mrf49xa.c: 44: w |= SPI_Read();
  3822  0319  2323               	fcall	_SPI_Read
  3823  031A  04D0               	iorwf	MRF49XAReadStatus@w,f
  3824                           
  3825                           ;mrf49xa.c: 46: LATCbits.LATC6 = 1;;
  3826  031B  0022               	movlb	2	; select bank2
  3827  031C  170E               	bsf	14,6	;volatile
  3828                           
  3829                           ;mrf49xa.c: 48: return w;
  3830  031D  0020               	movlb	0	; select bank0
  3831  031E  0851               	movf	MRF49XAReadStatus@w+1,w
  3832  031F  00CF               	movwf	?_MRF49XAReadStatus+1
  3833  0320  0850               	movf	MRF49XAReadStatus@w,w
  3834  0321  00CE               	movwf	?_MRF49XAReadStatus
  3835  0322  0008               	return
  3836  0323                     __end_of_MRF49XAReadStatus:	
  3837  0323                     __ptext10:	
  3838 ;; *************** function _SPI_Read *****************
  3839 ;; Defined at:
  3840 ;;		line 135 in file "../../../src/devices/mrf49xa.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  i               1    1[BANK0 ] unsigned char 
  3845 ;;  data            1    0[BANK0 ] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      unsigned char 
  3848 ;; Registers used:
  3849 ;;		wreg, status,2, status,0
  3850 ;; Tracked objects:
  3851 ;;		On entry : 1D/2
  3852 ;;		On exit  : 1F/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3855 ;;      Params:         0       0       0       0
  3856 ;;      Locals:         0       2       0       0
  3857 ;;      Temps:          0       0       0       0
  3858 ;;      Totals:         0       2       0       0
  3859 ;;Total ram usage:        2 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    7
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_MRF49XAReadStatus
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _SPI_Read
  3871  0323                     _SPI_Read:	
  3872                           
  3873                           ;mrf49xa.c: 140: UI08_t data = 0;
  3874                           
  3875                           ;incstack = 0
  3876                           ; Regs used in _SPI_Read: [wreg+status,2+status,0]
  3877  0323  0020               	movlb	0	; select bank0
  3878  0324  01CC               	clrf	SPI_Read@data
  3879                           
  3880                           ;mrf49xa.c: 141: LATCbits.LATC7 = 0;
  3881  0325  0022               	movlb	2	; select bank2
  3882  0326  138E               	bcf	14,7	;volatile
  3883                           
  3884                           ;mrf49xa.c: 142: LATBbits.LATB7 = 0;
  3885  0327  138D               	bcf	13,7	;volatile
  3886                           
  3887                           ;mrf49xa.c: 157: UI08_t i;
  3888                           ;mrf49xa.c: 159: LATBbits.LATB7 = 0;
  3889  0328  138D               	bcf	13,7	;volatile
  3890                           
  3891                           ;mrf49xa.c: 160: LATCbits.LATC7 = 0;
  3892  0329  138E               	bcf	14,7	;volatile
  3893                           
  3894                           ;mrf49xa.c: 162: for (i = 0; i < 8; i++)
  3895  032A  0020               	movlb	0	; select bank0
  3896  032B  01CD               	clrf	SPI_Read@i
  3897  032C                     l200:	
  3898                           
  3899                           ;mrf49xa.c: 163: {
  3900                           ;mrf49xa.c: 164: data = data << 1;
  3901  032C  35CC               	lslf	SPI_Read@data,f
  3902                           
  3903                           ;mrf49xa.c: 166: if (PORTCbits.RC5)
  3904  032D  1E8E               	btfss	14,5	;volatile
  3905  032E  2B31               	goto	l202
  3906                           
  3907                           ;mrf49xa.c: 167: {
  3908                           ;mrf49xa.c: 168: data |= 0x01;
  3909  032F  144C               	bsf	SPI_Read@data,0
  3910                           
  3911                           ;mrf49xa.c: 169: }
  3912  0330  2B32               	goto	l203
  3913  0331                     l202:	
  3914                           
  3915                           ;mrf49xa.c: 170: else
  3916                           ;mrf49xa.c: 171: {
  3917                           ;mrf49xa.c: 172: data &= 0xFE;
  3918  0331  104C               	bcf	SPI_Read@data,0
  3919  0332                     l203:	
  3920                           
  3921                           ;mrf49xa.c: 173: }
  3922                           ;mrf49xa.c: 175: LATCbits.LATC7 = 1;
  3923  0332  0022               	movlb	2	; select bank2
  3924  0333  178E               	bsf	14,7	;volatile
  3925  0334  0000               	nop	;# 
  3926                           
  3927                           ;mrf49xa.c: 179: LATCbits.LATC7 = 0;
  3928  0335  0022               	movlb	2	; select bank2
  3929  0336  138E               	bcf	14,7	;volatile
  3930  0337  0020               	movlb	0	; select bank0
  3931  0338  3008               	movlw	8
  3932  0339  0ACD               	incf	SPI_Read@i,f
  3933  033A  024D               	subwf	SPI_Read@i,w
  3934  033B  1C03               	skipc
  3935  033C  2B2C               	goto	l200
  3936                           
  3937                           ;mrf49xa.c: 180: }
  3938                           ;mrf49xa.c: 182: return data;
  3939  033D  084C               	movf	SPI_Read@data,w
  3940  033E  0008               	return
  3941  033F                     __end_of_SPI_Read:	
  3942  033F                     __ptext2:	
  3943 ;; *************** function _RfPacketsTickTh *****************
  3944 ;; Defined at:
  3945 ;;		line 84 in file "../../../src/rfstack/packets.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;  pt              1    wreg     PTR struct pt
  3948 ;;		 -> halPkTh(2), 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;  pt              1   24[BANK0 ] PTR struct pt
  3951 ;;		 -> halPkTh(2), 
  3952 ;;  scratchpad      4   20[BANK0 ] unsigned char [4]
  3953 ;;  PT_YIELD_FLA    1    0        unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      unsigned char 
  3956 ;; Registers used:
  3957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 1F/0
  3960 ;;		On exit  : 1F/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3963 ;;      Params:         0       0       0       0
  3964 ;;      Locals:         0       5       0       0
  3965 ;;      Temps:          0       2       0       0
  3966 ;;      Totals:         0       7       0       0
  3967 ;;Total ram usage:        7 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:   10
  3970 ;; This function calls:
  3971 ;;		_RfHalRxGet
  3972 ;;		_RfPacketReply
  3973 ;;		_RfPacketSimpleReply
  3974 ;; This function is called by:
  3975 ;;		_main
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           
  3980                           ;psect for function _RfPacketsTickTh
  3981  033F                     _RfPacketsTickTh:	
  3982                           
  3983                           ;incstack = 0
  3984                           ; Regs used in _RfPacketsTickTh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3985                           ;RfPacketsTickTh@pt stored from wreg
  3986  033F  00E4               	movwf	RfPacketsTickTh@pt
  3987  0340  2B72               	goto	l2824
  3988  0341                     l2810:	
  3989                           ;packets.c: 102: }
  3990                           ;packets.c: 113: switch(packet->frame.id)
  3991                           
  3992                           ;packets.c: 98: {
  3993                           
  3994                           
  3995                           ;packets.c: 119: scratchpad[0] = 0x55;
  3996  0341  3055               	movlw	85
  3997  0342  00E0               	movwf	RfPacketsTickTh@scratchpad
  3998                           
  3999                           ;packets.c: 120: scratchpad[1] = 0xAA;
  4000  0343  30AA               	movlw	170
  4001  0344  00E1               	movwf	RfPacketsTickTh@scratchpad+1
  4002  0345  2B52               	goto	l2818
  4003  0346                     l2814:	
  4004                           ;packets.c: 122: break;
  4005                           
  4006                           ;packets.c: 121: RfPacketReply(packet, RF_ACK, scratchpad, 2, 0);
  4007                           
  4008                           
  4009                           ;packets.c: 137: packet->data[4] = 2;
  4010  0346  0829               	movf	RfPacketsTickTh@packet,w
  4011  0347  3E04               	addlw	4
  4012  0348  0086               	movwf	6
  4013  0349  3002               	movlw	2
  4014  034A  0187               	clrf	7
  4015  034B  0081               	movwf	1
  4016                           
  4017                           ;packets.c: 138: RfPacketSimpleReply(packet, RF_PING);
  4018  034C  30A0               	movlw	160
  4019  034D  00D8               	movwf	RfPacketSimpleReply@msg
  4020  034E  0829               	movf	RfPacketsTickTh@packet,w
  4021  034F  23B2  3180         	fcall	_RfPacketSimpleReply
  4022                           
  4023                           ;packets.c: 139: break;
  4024  0351  2B5C               	goto	l2802
  4025  0352                     l2818:	
  4026                           
  4027                           ;packets.c: 142: RfPacketReply(packet, RF_ACK, scratchpad, 2, 0);
  4028  0352  30A1               	movlw	161
  4029  0353  00D8               	movwf	RfPacketReply@msg
  4030  0354  3060               	movlw	RfPacketsTickTh@scratchpad& (0+255)
  4031  0355  00D9               	movwf	RfPacketReply@data
  4032  0356  3002               	movlw	2
  4033  0357  00DA               	movwf	RfPacketReply@length
  4034  0358  01DB               	clrf	RfPacketReply@opt
  4035  0359  0829               	movf	RfPacketsTickTh@packet,w
  4036  035A  2386  3180         	fcall	_RfPacketReply
  4037  035C                     l2802:	
  4038                           ;packets.c: 143: break;
  4039                           
  4040  035C  0864               	movf	RfPacketsTickTh@pt,w
  4041  035D  0086               	movwf	6
  4042  035E  305E               	movlw	94
  4043  035F  23CF  3180         	fcall	PL16	;call to abstracted procedure
  4044  0361                     l2804:	
  4045  0361  21B1  3180         	fcall	_RfHalRxGet
  4046  0363  00A9               	movwf	RfPacketsTickTh@packet
  4047  0364  08A9               	movf	RfPacketsTickTh@packet,f
  4048  0365  1903               	btfsc	3,2
  4049  0366  0008               	return
  4050  0367  3E02               	addlw	2
  4051  0368  0086               	movwf	6
  4052  0369  0187               	clrf	7
  4053  036A  0801               	movf	1,w
  4054                           
  4055                           ; Switch size 1, requested type "space"
  4056                           ; Number of cases is 2, Range of values is 160 to 176
  4057                           ; switch strategies available:
  4058                           ; Name         Instructions Cycles
  4059                           ; simple_byte            7     4 (average)
  4060                           ; direct_byte           43     9 (fixed)
  4061                           ; jumptable            263     9 (fixed)
  4062                           ;	Chosen strategy is simple_byte
  4063  036B  3AA0               	xorlw	160	; case 160
  4064  036C  1903               	skipnz
  4065  036D  2B46               	goto	l2814
  4066  036E  3A10               	xorlw	16	; case 176
  4067  036F  1903               	skipnz
  4068  0370  2B41               	goto	l2810
  4069  0371  2B52               	goto	l2818
  4070  0372                     l2824:	
  4071  0372  0864               	movf	RfPacketsTickTh@pt,w
  4072  0373  0086               	movwf	6
  4073  0374  0187               	clrf	7
  4074  0375  3F40               	moviw [0]fsr1
  4075  0376  00DE               	movwf	??_RfPacketsTickTh
  4076  0377  3F41               	moviw [1]fsr1
  4077  0378  00DF               	movwf	??_RfPacketsTickTh+1
  4078                           
  4079                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4080                           ; Switch size 1, requested type "space"
  4081                           ; Number of cases is 1, Range of values is 0 to 0
  4082                           ; switch strategies available:
  4083                           ; Name         Instructions Cycles
  4084                           ; simple_byte            4     3 (average)
  4085                           ; direct_byte            8     6 (fixed)
  4086                           ; jumptable            260     6 (fixed)
  4087                           ;	Chosen strategy is simple_byte
  4088  0379  1903               	skipnz
  4089  037A  2B7C               	goto	l3174
  4090  037B  2B84               	goto	l2826
  4091  037C                     l3174:	
  4092                           
  4093                           ; Switch size 1, requested type "space"
  4094                           ; Number of cases is 2, Range of values is 0 to 94
  4095                           ; switch strategies available:
  4096                           ; Name         Instructions Cycles
  4097                           ; simple_byte            7     4 (average)
  4098                           ; direct_byte          196     6 (fixed)
  4099                           ; jumptable            260     6 (fixed)
  4100                           ;	Chosen strategy is simple_byte
  4101  037C  085E               	movf	??_RfPacketsTickTh,w
  4102  037D  3A00               	xorlw	0	; case 0
  4103  037E  1903               	skipnz
  4104  037F  2B5C               	goto	l2802
  4105  0380  3A5E               	xorlw	94	; case 94
  4106  0381  1903               	skipnz
  4107  0382  2B61               	goto	l2804
  4108  0383  2B84               	goto	l2826
  4109  0384                     l2826:	
  4110  0384  0864               	movf	RfPacketsTickTh@pt,w
  4111  0385  2BC9               	ljmp	PL14	;call to abstracted procedure
  4112  0386                     __end_of_RfPacketsTickTh:	
  4113  0386                     __ptext4:	
  4114 ;; *************** function _RfPacketReply *****************
  4115 ;; Defined at:
  4116 ;;		line 58 in file "../../../src/rfstack/packets.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  packet          1    wreg     PTR struct RfTransceiver
  4119 ;;		 -> NULL(0), rfPackets(56), 
  4120 ;;  msg             1   12[BANK0 ] enum E4249
  4121 ;;  data            1   13[BANK0 ] PTR unsigned char 
  4122 ;;		 -> RfPacketsTickTh@scratchpad(4), 
  4123 ;;  length          1   14[BANK0 ] unsigned char 
  4124 ;;  opt             1   15[BANK0 ] unsigned char 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  packet          1   17[BANK0 ] PTR struct RfTransceiver
  4127 ;;		 -> NULL(0), rfPackets(56), 
  4128 ;;  nodeTmp         1   16[BANK0 ] unsigned char 
  4129 ;;  i               1    0        unsigned char 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;		None               void
  4132 ;; Registers used:
  4133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 1F/0
  4136 ;;		On exit  : 1F/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4139 ;;      Params:         0       4       0       0
  4140 ;;      Locals:         0       2       0       0
  4141 ;;      Temps:          0       0       0       0
  4142 ;;      Totals:         0       6       0       0
  4143 ;;Total ram usage:        6 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    9
  4146 ;; This function calls:
  4147 ;;		_RfHalTxPut
  4148 ;;		_memcpy
  4149 ;; This function is called by:
  4150 ;;		_RfPacketsTickTh
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function _RfPacketReply
  4156  0386                     _RfPacketReply:	
  4157                           
  4158                           ;incstack = 0
  4159                           ; Regs used in _RfPacketReply: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4160                           ;RfPacketReply@packet stored from wreg
  4161  0386  00DD               	movwf	RfPacketReply@packet
  4162                           
  4163                           ;packets.c: 60: UI08_t i;
  4164                           ;packets.c: 63: UI08_t nodeTmp = packet->frame.src;
  4165  0387  0086               	movwf	6
  4166  0388  0187               	clrf	7
  4167  0389  0801               	movf	1,w
  4168  038A  00DC               	movwf	RfPacketReply@nodeTmp
  4169                           
  4170                           ;packets.c: 64: packet->frame.src = packet->frame.dst;
  4171  038B  085D               	movf	RfPacketReply@packet,w
  4172  038C  0086               	movwf	6
  4173  038D  0A5D               	incf	RfPacketReply@packet,w
  4174  038E  0084               	movwf	4
  4175  038F  0185               	clrf	5
  4176  0390  0800               	movf	0,w
  4177  0391  0081               	movwf	1
  4178                           
  4179                           ;packets.c: 65: packet->frame.dst = nodeTmp;
  4180  0392  0A5D               	incf	RfPacketReply@packet,w
  4181  0393  0086               	movwf	6
  4182  0394  085C               	movf	RfPacketReply@nodeTmp,w
  4183  0395  0081               	movwf	1
  4184                           
  4185                           ;packets.c: 67: packet->frame.id = msg;
  4186  0396  085D               	movf	RfPacketReply@packet,w
  4187  0397  3E02               	addlw	2
  4188  0398  0086               	movwf	6
  4189  0399  0858               	movf	RfPacketReply@msg,w
  4190  039A  0081               	movwf	1
  4191                           
  4192                           ;packets.c: 68: packet->frame.opt = opt;
  4193  039B  085D               	movf	RfPacketReply@packet,w
  4194  039C  3E03               	addlw	3
  4195  039D  0086               	movwf	6
  4196  039E  085B               	movf	RfPacketReply@opt,w
  4197  039F  0081               	movwf	1
  4198                           
  4199                           ;packets.c: 69: memcpy(packet->data+4, data, length);
  4200  03A0  0859               	movf	RfPacketReply@data,w
  4201  03A1  00CF               	movwf	memcpy@s1
  4202  03A2  085A               	movf	RfPacketReply@length,w
  4203  03A3  00D0               	movwf	memcpy@n
  4204  03A4  01D1               	clrf	memcpy@n+1
  4205  03A5  085D               	movf	RfPacketReply@packet,w
  4206  03A6  3E04               	addlw	4
  4207  03A7  2295  3180         	fcall	_memcpy
  4208                           
  4209                           ;packets.c: 71: packet->size = length + 4;
  4210  03A9  085D               	movf	RfPacketReply@packet,w
  4211  03AA  3E1A               	addlw	26
  4212  03AB  0086               	movwf	6
  4213  03AC  0187               	clrf	7
  4214  03AD  085A               	movf	RfPacketReply@length,w
  4215  03AE  3E04               	addlw	4
  4216  03AF  0081               	movwf	1
  4217                           
  4218                           ;packets.c: 81: RfHalTxPut(packet);
  4219  03B0  085D               	movf	RfPacketReply@packet,w
  4220  03B1  2A3A               	ljmp	_RfHalTxPut
  4221  03B2                     __end_of_RfPacketReply:	
  4222  03B2                     __ptext3:	
  4223 ;; *************** function _RfPacketSimpleReply *****************
  4224 ;; Defined at:
  4225 ;;		line 17 in file "../../../src/rfstack/packets.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  packet          1    wreg     PTR struct RfTransceiver
  4228 ;;		 -> NULL(0), rfPackets(56), 
  4229 ;;  msg             1   12[BANK0 ] enum E4249
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  packet          1   14[BANK0 ] PTR struct RfTransceiver
  4232 ;;		 -> NULL(0), rfPackets(56), 
  4233 ;;  nodeTmp         1   13[BANK0 ] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;		None               void
  4236 ;; Registers used:
  4237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 1F/0
  4240 ;;		On exit  : 1F/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4243 ;;      Params:         0       1       0       0
  4244 ;;      Locals:         0       2       0       0
  4245 ;;      Temps:          0       0       0       0
  4246 ;;      Totals:         0       3       0       0
  4247 ;;Total ram usage:        3 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    9
  4250 ;; This function calls:
  4251 ;;		_RfHalTxPut
  4252 ;; This function is called by:
  4253 ;;		_RfPacketsTickTh
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           
  4258                           ;psect for function _RfPacketSimpleReply
  4259  03B2                     _RfPacketSimpleReply:	
  4260                           
  4261                           ;incstack = 0
  4262                           ; Regs used in _RfPacketSimpleReply: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4263                           ;RfPacketSimpleReply@packet stored from wreg
  4264  03B2  00DA               	movwf	RfPacketSimpleReply@packet
  4265                           
  4266                           ;packets.c: 20: UI08_t nodeTmp = packet->frame.src;
  4267  03B3  0086               	movwf	6
  4268  03B4  0187               	clrf	7
  4269  03B5  0801               	movf	1,w
  4270  03B6  00D9               	movwf	RfPacketSimpleReply@nodeTmp
  4271                           
  4272                           ;packets.c: 21: packet->frame.src = packet->frame.dst;
  4273  03B7  085A               	movf	RfPacketSimpleReply@packet,w
  4274  03B8  0086               	movwf	6
  4275  03B9  0A5A               	incf	RfPacketSimpleReply@packet,w
  4276  03BA  0084               	movwf	4
  4277  03BB  0185               	clrf	5
  4278  03BC  0800               	movf	0,w
  4279  03BD  0081               	movwf	1
  4280                           
  4281                           ;packets.c: 22: packet->frame.dst = nodeTmp;
  4282  03BE  0A5A               	incf	RfPacketSimpleReply@packet,w
  4283  03BF  0086               	movwf	6
  4284  03C0  0859               	movf	RfPacketSimpleReply@nodeTmp,w
  4285  03C1  0081               	movwf	1
  4286                           
  4287                           ;packets.c: 24: packet->frame.id = msg;
  4288  03C2  085A               	movf	RfPacketSimpleReply@packet,w
  4289  03C3  3E02               	addlw	2
  4290  03C4  0086               	movwf	6
  4291  03C5  0858               	movf	RfPacketSimpleReply@msg,w
  4292  03C6  0081               	movwf	1
  4293                           
  4294                           ;packets.c: 31: RfHalTxPut(packet);
  4295  03C7  085A               	movf	RfPacketSimpleReply@packet,w
  4296  03C8  2A3A               	ljmp	_RfHalTxPut
  4297  03C9                     __end_of_RfPacketSimpleReply:	
  4298  03C9                     PL14:	
  4299  03C9  0086               	movwf	6
  4300  03CA  3000               	movlw	0
  4301  03CB  0187               	clrf	7
  4302  03CC  3FC0               	movwi [0]fsr1
  4303  03CD  3FC1               	movwi [1]fsr1
  4304  03CE  0008               	return
  4305  03CF                     __end_ofPL14:	
  4306  03CF                     PL16:	
  4307  03CF  0187               	clrf	7
  4308  03D0  3FC0               	movwi [0]fsr1
  4309  03D1  3000               	movlw	0
  4310  03D2  3FC1               	movwi [1]fsr1
  4311  03D3  0008               	return
  4312  03D4                     __end_ofPL16:	
  4313  03D4                     PL20:	
  4314  03D4  3EBB               	addlw	(_rfPackets+27)& (0+255)
  4315  03D5  0086               	movwf	6
  4316  03D6  301C               	movlw	28
  4317  03D7  0187               	clrf	7
  4318  03D8  1001               	bcf	1,0
  4319  03D9  0008               	return
  4320  03DA                     __end_ofPL20:	
  4321  03DA                     PL22:	
  4322  03DA  00CF               	movwf	memcpy@s1
  4323  03DB  301C               	movlw	28
  4324  03DC  00D0               	movwf	memcpy@n
  4325  03DD  01D1               	clrf	memcpy@n+1
  4326  03DE  00CC               	movwf	___bmul@multiplicand
  4327  03DF  0008               	return
  4328  03E0                     __end_ofPL22:	
  4329  03E0                     PL24:	
  4330  03E0  0020               	movlb	0	; select bank0
  4331  03E1  00CE               	movwf	MRF49XACommand@cmd
  4332  03E2  3080               	movlw	128
  4333  03E3  00CF               	movwf	MRF49XACommand@cmd+1
  4334  03E4  0008               	return
  4335  03E5                     __end_ofPL24:	
  4336  03E5                     PL26:	
  4337  03E5  0020               	movlb	0	; select bank0
  4338  03E6  00CE               	movwf	MRF49XACommand@cmd
  4339  03E7  3082               	movlw	130
  4340  03E8  00CF               	movwf	MRF49XACommand@cmd+1
  4341  03E9  0008               	return
  4342  03EA                     __end_ofPL26:	
  4343  03EA                     PL28:	
  4344  03EA  0020               	movlb	0	; select bank0
  4345  03EB  00CE               	movwf	MRF49XACommand@cmd
  4346  03EC  30CA               	movlw	202
  4347  03ED  00CF               	movwf	MRF49XACommand@cmd+1
  4348  03EE  0008               	return
  4349  03EF                     __end_ofPL28:	
  4350  03EF                     __ptext1:	
  4351 ;; *************** function _SysInitGpio *****************
  4352 ;; Defined at:
  4353 ;;		line 9 in file "../../../src/node/main.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		None
  4362 ;; Tracked objects:
  4363 ;;		On entry : 17F/1
  4364 ;;		On exit  : 17F/2
  4365 ;;		Unchanged: 160/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4367 ;;      Params:         0       0       0       0
  4368 ;;      Locals:         0       0       0       0
  4369 ;;      Temps:          0       0       0       0
  4370 ;;      Totals:         0       0       0       0
  4371 ;;Total ram usage:        0 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    7
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _SysInitGpio
  4383  03EF                     _SysInitGpio:	
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in _SysInitGpio: []
  4387                           ;main.c: 11: do { TRISAbits.TRISA4 = 0; TRISAbits.TRISA2 = 1; TRISAbits.TRISA5 = 1; } wh
      +                          ile(0);;
  4388  03EF  120C               	bcf	12,4	;volatile
  4389  03F0  150C               	bsf	12,2	;volatile
  4390  03F1  168C               	bsf	12,5	;volatile
  4391                           
  4392                           ;main.c: 12: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  4393  03F2  120D               	bcf	13,4	;volatile
  4394  03F3  130D               	bcf	13,6	;volatile
  4395  03F4  138D               	bcf	13,7	;volatile
  4396  03F5  168D               	bsf	13,5	;volatile
  4397                           
  4398                           ;main.c: 13: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; } while(0);;
  4399  03F6  108E               	bcf	14,1	;volatile
  4400  03F7  110E               	bcf	14,2	;volatile
  4401  03F8  120E               	bcf	14,4	;volatile
  4402  03F9  130E               	bcf	14,6	;volatile
  4403  03FA  138E               	bcf	14,7	;volatile
  4404  03FB  140E               	bsf	14,0	;volatile
  4405  03FC  158E               	bsf	14,3	;volatile
  4406  03FD  168E               	bsf	14,5	;volatile
  4407                           
  4408                           ;main.c: 15: LATCbits.LATC1 = 0;
  4409  03FE  0022               	movlb	2	; select bank2
  4410  03FF  108E               	bcf	14,1	;volatile
  4411                           
  4412                           ;main.c: 16: LATCbits.LATC2 = 0;
  4413  0400  110E               	bcf	14,2	;volatile
  4414  0401  0008               	return
  4415  0402                     __end_of_SysInitGpio:	
  4416                           
  4417                           	psect	bssCOMMON
  4418  0078                     __pbssCOMMON:	
  4419  0078                     _mrf49State:	
  4420  0078                     	ds	2
  4421                           
  4422                           	psect	bssBANK0
  4423  0020                     __pbssBANK0:	
  4424  0020                     _rfStatus:	
  4425  0020                     	ds	6
  4426  0026                     RfHalTickRxTh@pktRxByteIndex:	
  4427  0026                     	ds	1
  4428  0027                     RfHalTickRxTh@rxByteTimeout:	
  4429  0027                     	ds	1
  4430  0028                     RfHalTickTxTh@txPacket:	
  4431  0028                     	ds	1
  4432  0029                     RfPacketsTickTh@packet:	
  4433  0029                     	ds	1
  4434  002A                     RfHalTickRxTh@rxPacket:	
  4435  002A                     	ds	28
  4436  0046                     _halPkTh:	
  4437  0046                     	ds	2
  4438  0048                     _halRxBfTh:	
  4439  0048                     	ds	2
  4440  004A                     _halTxBfTh:	
  4441  004A                     	ds	2
  4442                           
  4443                           	psect	dataBANK0
  4444  0065                     __pdataBANK0:	
  4445  0065                     _rfRxCC:	
  4446  0065                     	ds	4
  4447                           
  4448                           	psect	bssBANK1
  4449  00A0                     __pbssBANK1:	
  4450  00A0                     _rfPackets:	
  4451  00A0                     	ds	56
  4452                           
  4453                           	psect	bssBANK2
  4454  0120                     __pbssBANK2:	
  4455  0120                     _rfRxBf:	
  4456  0120                     	ds	32
  4457                           
  4458                           	psect	clrtext
  4459  0657                     clear_ram0:	
  4460                           ;	Called with FSR0 containing the base address, and
  4461                           ;	WREG with the size to clear
  4462                           
  4463  0657  0064               	clrwdt	;clear the watchdog before getting into this loop
  4464  0658                     clrloop0:	
  4465  0658  0180               	clrf	0	;clear RAM location pointed to by FSR
  4466  0659  3101               	addfsr 0,1
  4467  065A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4468  065B  2E58               	goto	clrloop0	;have we reached the end yet?
  4469  065C  3400               	retlw	0	;all done for this memory range, return
  4470                           
  4471                           	psect	cstackCOMMON
  4472  0070                     __pcstackCOMMON:	
  4473  0070                     ?_SPI_Write:	
  4474  0070                     ?_MRF49XAReset:	
  4475                           ; 0 bytes @ 0x0
  4476                           
  4477  0070                     ?__CCBufInit:	
  4478                           ; 0 bytes @ 0x0
  4479                           
  4480  0070                     ?_RfTrcvMode:	
  4481                           ; 0 bytes @ 0x0
  4482                           
  4483  0070                     ?__CCBufRdReverse:	
  4484                           ; 0 bytes @ 0x0
  4485                           
  4486  0070                     ?__CCBufReset:	
  4487                           ; 0 bytes @ 0x0
  4488                           
  4489  0070                     ?_AdcInit:	
  4490                           ; 0 bytes @ 0x0
  4491                           
  4492  0070                     ?_ExtIntInit:	
  4493                           ; 0 bytes @ 0x0
  4494                           
  4495  0070                     ?_extInt:	
  4496                           ; 0 bytes @ 0x0
  4497                           
  4498  0070                     ?_RfTrcvPut:	
  4499                           ; 0 bytes @ 0x0
  4500                           
  4501  0070                     ?_RfHalInit:	
  4502                           ; 0 bytes @ 0x0
  4503                           
  4504  0070                     ?_RfHalStatemachine:	
  4505                           ; 0 bytes @ 0x0
  4506                           
  4507  0070                     ?_SysInitGpio:	
  4508                           ; 0 bytes @ 0x0
  4509                           
  4510  0070                     ?_main:	
  4511                           ; 0 bytes @ 0x0
  4512                           
  4513  0070                     ??__CCBufCanWr:	
  4514                           ; 0 bytes @ 0x0
  4515                           
  4516  0070                     ?i1_MRF49XAReset:	
  4517                           ; 0 bytes @ 0x0
  4518                           
  4519  0070                     ??i1_SPI_Read:	
  4520                           ; 0 bytes @ 0x0
  4521                           
  4522  0070                     ?i1_SPI_Write:	
  4523                           ; 0 bytes @ 0x0
  4524                           
  4525  0070                     ??i1_SPI_Write:	
  4526                           ; 0 bytes @ 0x0
  4527                           
  4528  0070                     ?i1_RfTrcvMode:	
  4529                           ; 0 bytes @ 0x0
  4530                           
  4531  0070                     ?_mrf49XaIsr:	
  4532                           ; 0 bytes @ 0x0
  4533                           
  4534  0070                     ?_SPI_Read:	
  4535                           ; 1 bytes @ 0x0
  4536                           
  4537  0070                     ?_RfHalTxGet:	
  4538                           ; 1 bytes @ 0x0
  4539                           
  4540  0070                     ?__CCBufCanRd:	
  4541                           ; 1 bytes @ 0x0
  4542                           
  4543  0070                     ?__CCBufRdByte:	
  4544                           ; 1 bytes @ 0x0
  4545                           
  4546  0070                     ?__CCBufPeekByte:	
  4547                           ; 1 bytes @ 0x0
  4548                           
  4549  0070                     ?_RfHalRxPut:	
  4550                           ; 1 bytes @ 0x0
  4551                           
  4552  0070                     ?__CCBufWrByte:	
  4553                           ; 1 bytes @ 0x0
  4554                           
  4555  0070                     ?_RfTrcvGet:	
  4556                           ; 1 bytes @ 0x0
  4557                           
  4558  0070                     ?_RfTrcvCarrierPresent:	
  4559                           ; 1 bytes @ 0x0
  4560                           
  4561  0070                     ?_RfHalTickTxTh:	
  4562                           ; 1 bytes @ 0x0
  4563                           
  4564  0070                     ?_RfHalTickRxTh:	
  4565                           ; 1 bytes @ 0x0
  4566                           
  4567  0070                     ?_RfHalRxGet:	
  4568                           ; 1 bytes @ 0x0
  4569                           
  4570  0070                     ?_RfHalTxPut:	
  4571                           ; 1 bytes @ 0x0
  4572                           
  4573  0070                     ?_RfPacketsTickTh:	
  4574                           ; 1 bytes @ 0x0
  4575                           
  4576  0070                     ?__CCBufCanWr:	
  4577                           ; 1 bytes @ 0x0
  4578                           
  4579  0070                     ?i1_SPI_Read:	
  4580                           ; 1 bytes @ 0x0
  4581                           
  4582  0070                     ?i1__CCBufCalcPt:	
  4583                           ; 1 bytes @ 0x0
  4584                           
  4585  0070                     i1SPI_Read@data:	
  4586                           ; 1 bytes @ 0x0
  4587                           
  4588  0070                     i1SPI_Write@data:	
  4589                           ; 1 bytes @ 0x0
  4590                           
  4591  0070                     i1__CCBufCalcPt@move:	
  4592                           ; 1 bytes @ 0x0
  4593                           
  4594                           
  4595                           ; 1 bytes @ 0x0
  4596  0070                     	ds	1
  4597  0071                     ??i1__CCBufCalcPt:	
  4598  0071                     i1SPI_Read@i:	
  4599                           ; 0 bytes @ 0x1
  4600                           
  4601  0071                     i1SPI_Write@i:	
  4602                           ; 1 bytes @ 0x1
  4603                           
  4604  0071                     i1__CCBufCalcPt@entry:	
  4605                           ; 1 bytes @ 0x1
  4606                           
  4607                           
  4608                           ; 1 bytes @ 0x1
  4609  0071                     	ds	1
  4610  0072                     ??_RfTrcvGet:	
  4611  0072                     ?i1_MRF49XACommand:	
  4612                           ; 0 bytes @ 0x2
  4613                           
  4614  0072                     ?i1_MRF49XAReadStatus:	
  4615                           ; 0 bytes @ 0x2
  4616                           
  4617  0072                     RfTrcvGet@b:	
  4618                           ; 2 bytes @ 0x2
  4619                           
  4620  0072                     i1__CCBufCalcPt@result:	
  4621                           ; 1 bytes @ 0x2
  4622                           
  4623  0072                     i1MRF49XACommand@cmd:	
  4624                           ; 1 bytes @ 0x2
  4625                           
  4626                           
  4627                           ; 2 bytes @ 0x2
  4628  0072                     	ds	1
  4629  0073                     ??__CCBufWrByte:	
  4630                           
  4631                           ; 0 bytes @ 0x3
  4632  0073                     	ds	1
  4633  0074                     ??_RfTrcvPut:	
  4634  0074                     ??i1_MRF49XACommand:	
  4635                           ; 0 bytes @ 0x4
  4636                           
  4637  0074                     ??i1_MRF49XAReadStatus:	
  4638                           ; 0 bytes @ 0x4
  4639                           
  4640  0074                     ??i1_MRF49XAReset:	
  4641                           ; 0 bytes @ 0x4
  4642                           
  4643  0074                     ??i1_RfTrcvMode:	
  4644                           ; 0 bytes @ 0x4
  4645                           
  4646  0074                     RfTrcvPut@byte:	
  4647                           ; 0 bytes @ 0x4
  4648                           
  4649  0074                     __CCBufWrByte@data:	
  4650                           ; 1 bytes @ 0x4
  4651                           
  4652  0074                     i1RfTrcvMode@tx:	
  4653                           ; 1 bytes @ 0x4
  4654                           
  4655  0074                     i1MRF49XAReadStatus@w:	
  4656                           ; 1 bytes @ 0x4
  4657                           
  4658                           
  4659                           ; 2 bytes @ 0x4
  4660  0074                     	ds	1
  4661  0075                     ??_RfHalStatemachine:	
  4662                           
  4663                           ; 0 bytes @ 0x5
  4664  0075                     	ds	1
  4665  0076                     ??_mrf49XaIsr:	
  4666                           
  4667                           ; 0 bytes @ 0x6
  4668  0076                     	ds	2
  4669  0078                     ??_extInt:	
  4670                           
  4671                           	psect	cstackBANK0
  4672  004C                     __pcstackBANK0:	
  4673                           ; 0 bytes @ 0x8
  4674                           
  4675  004C                     ??_SPI_Write:	
  4676  004C                     ??_SPI_Read:	
  4677                           ; 0 bytes @ 0x0
  4678                           
  4679  004C                     ??_AdcInit:	
  4680                           ; 0 bytes @ 0x0
  4681                           
  4682  004C                     ??_ExtIntInit:	
  4683                           ; 0 bytes @ 0x0
  4684                           
  4685  004C                     ??_SysInitGpio:	
  4686                           ; 0 bytes @ 0x0
  4687                           
  4688  004C                     ?_memset:	
  4689                           ; 0 bytes @ 0x0
  4690                           
  4691  004C                     ?_RfTrcvCrcTick:	
  4692                           ; 1 bytes @ 0x0
  4693                           
  4694  004C                     ?__CCBufCalcPt:	
  4695                           ; 1 bytes @ 0x0
  4696                           
  4697  004C                     ?___bmul:	
  4698                           ; 1 bytes @ 0x0
  4699                           
  4700  004C                     RfTrcvCrcTick@data:	
  4701                           ; 1 bytes @ 0x0
  4702                           
  4703  004C                     SPI_Read@data:	
  4704                           ; 1 bytes @ 0x0
  4705                           
  4706  004C                     SPI_Write@data:	
  4707                           ; 1 bytes @ 0x0
  4708                           
  4709  004C                     __CCBufCalcPt@move:	
  4710                           ; 1 bytes @ 0x0
  4711                           
  4712  004C                     ___bmul@multiplicand:	
  4713                           ; 1 bytes @ 0x0
  4714                           
  4715  004C                     memset@c:	
  4716                           ; 1 bytes @ 0x0
  4717                           
  4718                           
  4719                           ; 2 bytes @ 0x0
  4720  004C                     	ds	1
  4721  004D                     ??_RfTrcvCrcTick:	
  4722  004D                     ??__CCBufCalcPt:	
  4723                           ; 0 bytes @ 0x1
  4724                           
  4725  004D                     ??___bmul:	
  4726                           ; 0 bytes @ 0x1
  4727                           
  4728  004D                     RfTrcvCrcTick@initial:	
  4729                           ; 0 bytes @ 0x1
  4730                           
  4731  004D                     SPI_Read@i:	
  4732                           ; 1 bytes @ 0x1
  4733                           
  4734  004D                     SPI_Write@i:	
  4735                           ; 1 bytes @ 0x1
  4736                           
  4737  004D                     __CCBufCalcPt@entry:	
  4738                           ; 1 bytes @ 0x1
  4739                           
  4740  004D                     ___bmul@product:	
  4741                           ; 1 bytes @ 0x1
  4742                           
  4743                           
  4744                           ; 1 bytes @ 0x1
  4745  004D                     	ds	1
  4746  004E                     ?_MRF49XACommand:	
  4747  004E                     ?_MRF49XAReadStatus:	
  4748                           ; 0 bytes @ 0x2
  4749                           
  4750  004E                     __CCBufCalcPt@result:	
  4751                           ; 2 bytes @ 0x2
  4752                           
  4753  004E                     ___bmul@multiplier:	
  4754                           ; 1 bytes @ 0x2
  4755                           
  4756  004E                     MRF49XACommand@cmd:	
  4757                           ; 1 bytes @ 0x2
  4758                           
  4759  004E                     memset@n:	
  4760                           ; 2 bytes @ 0x2
  4761                           
  4762                           
  4763                           ; 2 bytes @ 0x2
  4764  004E                     	ds	1
  4765  004F                     ??_RfHalTxGet:	
  4766  004F                     ??__CCBufCanRd:	
  4767                           ; 0 bytes @ 0x3
  4768                           
  4769  004F                     ??__CCBufRdByte:	
  4770                           ; 0 bytes @ 0x3
  4771                           
  4772  004F                     ??__CCBufPeekByte:	
  4773                           ; 0 bytes @ 0x3
  4774                           
  4775  004F                     ??__CCBufRdReverse:	
  4776                           ; 0 bytes @ 0x3
  4777                           
  4778  004F                     ??_RfHalRxGet:	
  4779                           ; 0 bytes @ 0x3
  4780                           
  4781  004F                     ?_memcpy:	
  4782                           ; 0 bytes @ 0x3
  4783                           
  4784  004F                     RfHalRxGet@i:	
  4785                           ; 1 bytes @ 0x3
  4786                           
  4787  004F                     RfHalTxGet@i:	
  4788                           ; 1 bytes @ 0x3
  4789                           
  4790  004F                     __CCBufRdReverse@qty:	
  4791                           ; 1 bytes @ 0x3
  4792                           
  4793  004F                     memcpy@s1:	
  4794                           ; 1 bytes @ 0x3
  4795                           
  4796                           
  4797                           ; 1 bytes @ 0x3
  4798  004F                     	ds	1
  4799  0050                     ??_MRF49XACommand:	
  4800  0050                     ??_MRF49XAReset:	
  4801                           ; 0 bytes @ 0x4
  4802                           
  4803  0050                     ??_RfTrcvMode:	
  4804                           ; 0 bytes @ 0x4
  4805                           
  4806  0050                     ??_memset:	
  4807                           ; 0 bytes @ 0x4
  4808                           
  4809  0050                     ??_MRF49XAReadStatus:	
  4810                           ; 0 bytes @ 0x4
  4811                           
  4812  0050                     RfTrcvMode@tx:	
  4813                           ; 0 bytes @ 0x4
  4814                           
  4815  0050                     __CCBufRdByte@res:	
  4816                           ; 1 bytes @ 0x4
  4817                           
  4818  0050                     __CCBufPeekByte@res:	
  4819                           ; 1 bytes @ 0x4
  4820                           
  4821  0050                     memset@p1:	
  4822                           ; 1 bytes @ 0x4
  4823                           
  4824  0050                     MRF49XAReadStatus@w:	
  4825                           ; 1 bytes @ 0x4
  4826                           
  4827  0050                     memcpy@n:	
  4828                           ; 2 bytes @ 0x4
  4829                           
  4830                           
  4831                           ; 2 bytes @ 0x4
  4832  0050                     	ds	1
  4833  0051                     memset@p:	
  4834                           
  4835                           ; 1 bytes @ 0x5
  4836  0051                     	ds	1
  4837  0052                     ??__CCBufInit:	
  4838  0052                     ??_memcpy:	
  4839                           ; 0 bytes @ 0x6
  4840                           
  4841  0052                     ??__CCBufReset:	
  4842                           ; 0 bytes @ 0x6
  4843                           
  4844  0052                     ??_RfTrcvCarrierPresent:	
  4845                           ; 0 bytes @ 0x6
  4846                           
  4847  0052                     ??_RfHalInit:	
  4848                           ; 0 bytes @ 0x6
  4849                           
  4850  0052                     RfHalInit@i:	
  4851                           ; 0 bytes @ 0x6
  4852                           
  4853  0052                     memcpy@d:	
  4854                           ; 1 bytes @ 0x6
  4855                           
  4856  0052                     RfTrcvCarrierPresent@stat:	
  4857                           ; 1 bytes @ 0x6
  4858                           
  4859                           
  4860                           ; 2 bytes @ 0x6
  4861  0052                     	ds	1
  4862  0053                     memcpy@s:	
  4863                           
  4864                           ; 1 bytes @ 0x7
  4865  0053                     	ds	1
  4866  0054                     ??_RfHalTickTxTh:	
  4867  0054                     memcpy@d1:	
  4868                           ; 0 bytes @ 0x8
  4869                           
  4870                           
  4871                           ; 1 bytes @ 0x8
  4872  0054                     	ds	1
  4873  0055                     ??_RfHalRxPut:	
  4874  0055                     ??_RfHalTxPut:	
  4875                           ; 0 bytes @ 0x9
  4876                           
  4877  0055                     RfHalRxPut@rfPacket:	
  4878                           ; 0 bytes @ 0x9
  4879                           
  4880                           
  4881                           ; 1 bytes @ 0x9
  4882  0055                     	ds	1
  4883  0056                     RfHalTickTxTh@pt:	
  4884  0056                     RfHalRxPut@i:	
  4885                           ; 1 bytes @ 0xA
  4886                           
  4887  0056                     RfHalTxPut@packet:	
  4888                           ; 1 bytes @ 0xA
  4889                           
  4890                           
  4891                           ; 1 bytes @ 0xA
  4892  0056                     	ds	1
  4893  0057                     ??_RfHalTickRxTh:	
  4894  0057                     RfHalTxPut@i:	
  4895                           ; 0 bytes @ 0xB
  4896                           
  4897                           
  4898                           ; 1 bytes @ 0xB
  4899  0057                     	ds	1
  4900  0058                     ?_RfPacketSimpleReply:	
  4901  0058                     ?_RfPacketReply:	
  4902                           ; 0 bytes @ 0xC
  4903                           
  4904  0058                     RfPacketSimpleReply@msg:	
  4905                           ; 0 bytes @ 0xC
  4906                           
  4907  0058                     RfPacketReply@msg:	
  4908                           ; 1 bytes @ 0xC
  4909                           
  4910                           
  4911                           ; 1 bytes @ 0xC
  4912  0058                     	ds	1
  4913  0059                     ??_RfPacketSimpleReply:	
  4914  0059                     RfHalTickRxTh@b:	
  4915                           ; 0 bytes @ 0xD
  4916                           
  4917  0059                     RfPacketSimpleReply@nodeTmp:	
  4918                           ; 1 bytes @ 0xD
  4919                           
  4920  0059                     RfPacketReply@data:	
  4921                           ; 1 bytes @ 0xD
  4922                           
  4923                           
  4924                           ; 1 bytes @ 0xD
  4925  0059                     	ds	1
  4926  005A                     RfHalTickRxTh@pktLength:	
  4927  005A                     RfPacketSimpleReply@packet:	
  4928                           ; 1 bytes @ 0xE
  4929                           
  4930  005A                     RfPacketReply@length:	
  4931                           ; 1 bytes @ 0xE
  4932                           
  4933                           
  4934                           ; 1 bytes @ 0xE
  4935  005A                     	ds	1
  4936  005B                     RfHalTickRxTh@pt:	
  4937  005B                     RfPacketReply@opt:	
  4938                           ; 1 bytes @ 0xF
  4939                           
  4940                           
  4941                           ; 1 bytes @ 0xF
  4942  005B                     	ds	1
  4943  005C                     ??_RfPacketReply:	
  4944  005C                     RfPacketReply@nodeTmp:	
  4945                           ; 0 bytes @ 0x10
  4946                           
  4947                           
  4948                           ; 1 bytes @ 0x10
  4949  005C                     	ds	1
  4950  005D                     RfPacketReply@packet:	
  4951                           
  4952                           ; 1 bytes @ 0x11
  4953  005D                     	ds	1
  4954  005E                     ??_RfPacketsTickTh:	
  4955                           
  4956                           ; 0 bytes @ 0x12
  4957  005E                     	ds	2
  4958  0060                     RfPacketsTickTh@scratchpad:	
  4959                           
  4960                           ; 4 bytes @ 0x14
  4961  0060                     	ds	4
  4962  0064                     RfPacketsTickTh@pt:	
  4963                           
  4964                           ; 1 bytes @ 0x18
  4965  0064                     	ds	1
  4966  0065                     ??_main:	
  4967                           
  4968                           	psect	text18
  4969  0000                     __ptext18:	
  4970 ;; *************** function _RfTrcvCrcTick *****************
  4971 ;; Defined at:
  4972 ;;		line 52 in file "../../../src/devices/mrf49xa.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  initial         1    wreg     unsigned char 
  4975 ;;  data            1    0[BANK0 ] unsigned char 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  initial         1    1[BANK0 ] unsigned char 
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  1    wreg      unsigned char 
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : 1F/0
  4984 ;;		On exit  : 1F/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4987 ;;      Params:         0       1       0       0
  4988 ;;      Locals:         0       1       0       0
  4989 ;;      Temps:          0       0       0       0
  4990 ;;      Totals:         0       2       0       0
  4991 ;;Total ram usage:        2 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    7
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_RfHalTickRxTh
  4998 ;;		_RfHalTxPut
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002  0000                     _RfTrcvCrcTick:	
  5003                           ;psect for function _RfTrcvCrcTick
  5004                           
  5005  0000                     __end_of_RfTrcvCrcTick:	
  5006                           ;mrf49xa.c: 54: return (initial ^ data);
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  5010                           ;RfTrcvCrcTick@initial stored from wreg
  5011                           
  5012                           
  5013                           	psect	text24
  5014  0638                     __ptext24:	
  5015 ;; *************** function __CCBufReset *****************
  5016 ;; Defined at:
  5017 ;;		line 10 in file "../../../src/utilities/ccbuf_static.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;		None               void
  5024 ;; Registers used:
  5025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 17F/0
  5028 ;;		On exit  : 17F/0
  5029 ;;		Unchanged: 160/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5031 ;;      Params:         0       0       0       0
  5032 ;;      Locals:         0       0       0       0
  5033 ;;      Temps:          0       0       0       0
  5034 ;;      Totals:         0       0       0       0
  5035 ;;Total ram usage:        0 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    8
  5038 ;; This function calls:
  5039 ;;		_memset
  5040 ;; This function is called by:
  5041 ;;		__CCBufInit
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function __CCBufReset
  5047  0638                     __CCBufReset:	
  5048  0638                     l2848:	
  5049                           ;incstack = 0
  5050                           ; Regs used in __CCBufReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5051                           
  5052  0638  01CC               	clrf	memset@c
  5053  0639  01CD               	clrf	memset@c+1
  5054  063A  0866               	movf	_rfRxCC+1,w
  5055  063B  00CE               	movwf	memset@n
  5056  063C  01CF               	clrf	memset@n+1
  5057  063D  0865               	movf	_rfRxCC,w
  5058  063E  2644               	fcall	_memset
  5059  063F  0866               	movf	_rfRxCC+1,w
  5060  0640  3EFF               	addlw	255
  5061  0641  00E8               	movwf	_rfRxCC+3
  5062  0642  01E7               	clrf	_rfRxCC+2
  5063  0643  0008               	return
  5064  0644                     __end_of__CCBufReset:	
  5065  0644                     __ptext25:	
  5066 ;; *************** function _memset *****************
  5067 ;; Defined at:
  5068 ;;		line 8 in file "/opt/microchip/xc8/v1.30/sources/common/memset.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  p1              1    wreg     PTR void 
  5071 ;;		 -> rfRxBf(32), 
  5072 ;;  c               2    0[BANK0 ] int 
  5073 ;;  n               2    2[BANK0 ] unsigned int 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  p1              1    4[BANK0 ] PTR void 
  5076 ;;		 -> rfRxBf(32), 
  5077 ;;  p               1    5[BANK0 ] PTR unsigned char 
  5078 ;;		 -> rfRxBf(32), 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      PTR void 
  5081 ;; Registers used:
  5082 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : 17F/0
  5085 ;;		On exit  : 17F/0
  5086 ;;		Unchanged: 160/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5088 ;;      Params:         0       4       0       0
  5089 ;;      Locals:         0       2       0       0
  5090 ;;      Temps:          0       0       0       0
  5091 ;;      Totals:         0       6       0       0
  5092 ;;Total ram usage:        6 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    7
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		__CCBufReset
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function _memset
  5104  0644                     _memset:	
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5108                           ;memset@p1 stored from wreg
  5109  0644  00D0               	movwf	memset@p1
  5110  0645  00D1               	movwf	memset@p
  5111  0646                     l2860:	
  5112  0646  3001               	movlw	1
  5113  0647  02CE               	subwf	memset@n,f
  5114  0648  3000               	movlw	0
  5115  0649  3BCF               	subwfb	memset@n+1,f
  5116  064A  0A4E               	incf	memset@n,w
  5117  064B  1903               	skipnz
  5118  064C  0A4F               	incf	memset@n+1,w
  5119  064D  1903               	btfsc	3,2
  5120  064E  0008               	return
  5121  064F  0851               	movf	memset@p,w
  5122  0650  0086               	movwf	6
  5123  0651  3001               	movlw	1	; select bank2/3
  5124  0652  0087               	movwf	7
  5125  0653  084C               	movf	memset@c,w
  5126  0654  0081               	movwf	1
  5127  0655  0AD1               	incf	memset@p,f
  5128  0656  2E46               	goto	l2860
  5129  0657                     __end_of_memset:	
  5130                           
  5131                           	psect	intentry
  5132  0004                     __pintentry:	
  5133 ;; *************** function _extInt *****************
  5134 ;; Defined at:
  5135 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;		None
  5140 ;; Return value:  Size  Location     Type
  5141 ;;		None               void
  5142 ;; Registers used:
  5143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5149 ;;      Params:         0       0       0       0
  5150 ;;      Locals:         0       0       0       0
  5151 ;;      Temps:          0       0       0       0
  5152 ;;      Totals:         0       0       0       0
  5153 ;;Total ram usage:        0 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    6
  5156 ;; This function calls:
  5157 ;;		_mrf49XaIsr
  5158 ;; This function is called by:
  5159 ;;		Interrupt level 1
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163  0004                     _extInt:	
  5164                           
  5165                           ;incstack = 0
  5166                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5167  0004  3180               	pagesel	$
  5168                           
  5169                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  5170  0005  1C8B               	btfss	11,1	;volatile
  5171  0006  0009               	retfie
  5172                           
  5173                           ;interrupt.c: 34: {
  5174                           ;interrupt.c: 35: mrf49XaIsr();
  5175  0007  3185  2501         	fcall	_mrf49XaIsr
  5176                           
  5177                           ;interrupt.c: 37: INTCONbits.INTF = 0;
  5178  0009  108B               	bcf	11,1	;volatile
  5179  000A  0009               	retfie
  5180  000B                     __end_of_extInt:	
  5181                           
  5182                           	psect	text33
  5183  0501                     __ptext33:	
  5184 ;; *************** function _mrf49XaIsr *****************
  5185 ;; Defined at:
  5186 ;;		line 25 in file "../../../src/node/main.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      unsigned char 
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 1F/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5200 ;;      Params:         0       0       0       0
  5201 ;;      Locals:         0       0       0       0
  5202 ;;      Temps:          2       0       0       0
  5203 ;;      Totals:         2       0       0       0
  5204 ;;Total ram usage:        2 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    5
  5207 ;; This function calls:
  5208 ;;		_RfHalStatemachine
  5209 ;;		i1_MRF49XAReadStatus
  5210 ;;		i1_MRF49XAReset
  5211 ;; This function is called by:
  5212 ;;		_extInt
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _mrf49XaIsr
  5218  0501                     _mrf49XaIsr:	
  5219  0501                     i1l493:	
  5220                           ;incstack = 0
  5221                           ; Regs used in _mrf49XaIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5222                           ;main.c: 28: {
  5223                           ;main.c: 29: mrfStat = mrf49State;
  5224                           
  5225                           
  5226                           ;main.c: 30: mrf49State = MRF49XAReadStatus();
  5227  0501  25E3  3185         	fcall	i1_MRF49XAReadStatus
  5228  0503  0873               	movf	?i1_MRF49XAReadStatus+1,w
  5229  0504  00F9               	movwf	_mrf49State+1
  5230  0505  0872               	movf	?i1_MRF49XAReadStatus,w
  5231  0506  00F8               	movwf	_mrf49State
  5232                           
  5233                           ;main.c: 32: if ((mrf49State & (1<<15)) != 0)
  5234  0507  1FF9               	btfss	_mrf49State+1,7
  5235  0508  2D11               	goto	i1l494
  5236                           
  5237                           ;main.c: 33: {
  5238                           ;main.c: 34: if (rfStatus.inRx ==1 && (mrf49State & (1<<7)) == 0)
  5239  0509  0020               	movlb	0	; select bank0
  5240  050A  0B23               	decfsz	_rfStatus+3,w
  5241  050B  2D0E               	goto	i1l3078
  5242  050C  1FF8               	btfss	_mrf49State,7
  5243  050D  2D15               	goto	i1l3082
  5244  050E                     i1l3078:	
  5245                           
  5246                           ;main.c: 37: else
  5247                           ;main.c: 38: {
  5248                           ;main.c: 39: RfHalStatemachine();
  5249  050E  251F  3185         	fcall	_RfHalStatemachine
  5250  0510  2D15               	goto	i1l3082
  5251  0511                     i1l494:	
  5252                           
  5253                           ;main.c: 42: else if((mrf49State & (1<<14)) != 0)
  5254  0511  1F79               	btfss	_mrf49State+1,6
  5255  0512  2D15               	goto	i1l3082
  5256                           
  5257                           ;main.c: 43: {
  5258                           ;main.c: 44: MRF49XAReset();
  5259  0513  25A2  3185         	fcall	i1_MRF49XAReset
  5260  0515                     i1l3082:	
  5261                           
  5262                           ;main.c: 45: }
  5263                           ;main.c: 47: } while ((mrf49State & 0xC000) != 0);
  5264  0515  30C0               	movlw	192
  5265  0516  01F6               	clrf	??_mrf49XaIsr
  5266  0517  0579               	andwf	_mrf49State+1,w
  5267  0518  00F7               	movwf	??_mrf49XaIsr+1
  5268  0519  0476               	iorwf	??_mrf49XaIsr,w
  5269  051A  1D03               	skipz
  5270  051B  2D01               	goto	i1l493
  5271                           
  5272                           ;main.c: 49: return (PORTAbits.RA2 == 1)?1:0;
  5273                           ;	Return value of _mrf49XaIsr is never used
  5274  051C  0020               	movlb	0	; select bank0
  5275  051D  080C               	movf	12,w	;volatile
  5276  051E  0008               	return
  5277  051F                     __end_of_mrf49XaIsr:	
  5278  051F                     __ptext35:	
  5279 ;; *************** function _RfHalStatemachine *****************
  5280 ;; Defined at:
  5281 ;;		line 304 in file "../../../src/rfstack/hal.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;		None
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;		None
  5286 ;; Return value:  Size  Location     Type
  5287 ;;		None               void
  5288 ;; Registers used:
  5289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 1F/0
  5292 ;;		On exit  : 1D/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5295 ;;      Params:         0       0       0       0
  5296 ;;      Locals:         0       0       0       0
  5297 ;;      Temps:          1       0       0       0
  5298 ;;      Totals:         1       0       0       0
  5299 ;;Total ram usage:        1 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    4
  5302 ;; This function calls:
  5303 ;;		_RfTrcvGet
  5304 ;;		_RfTrcvPut
  5305 ;;		__CCBufWrByte
  5306 ;;		i1_RfTrcvMode
  5307 ;; This function is called by:
  5308 ;;		_mrf49XaIsr
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           
  5313                           ;psect for function _RfHalStatemachine
  5314  051F                     _RfHalStatemachine:	
  5315                           
  5316                           ;hal.c: 306: switch (rfStatus.isr.state)
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _RfHalStatemachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5320  051F  2D67               	goto	i1l3062
  5321  0520                     i1l3016:	
  5322                           
  5323                           ;hal.c: 310: _CCBufWrByte(RfTrcvGet());
  5324  0520  257B  3185         	fcall	_RfTrcvGet
  5325  0522  2E0C               	ljmp	__CCBufWrByte
  5326  0523                     i1l3018:	
  5327                           ;hal.c: 311: break;
  5328                           
  5329                           
  5330                           ;hal.c: 315: case TX_PREAMBLE2:
  5331                           ;hal.c: 316: RfTrcvPut(0xAA);
  5332  0523  30AA               	movlw	170
  5333  0524                     L4:	
  5334  0524  2572               	fcall	_RfTrcvPut
  5335                           
  5336                           ;hal.c: 317: rfStatus.isr.state++;
  5337  0525  0020               	movlb	0	; select bank0
  5338  0526  0AA2               	incf	_rfStatus+2,f
  5339                           
  5340                           ;hal.c: 318: break;
  5341  0527  0008               	return
  5342  0528                     i1l3022:	
  5343                           
  5344                           ;hal.c: 321: RfTrcvPut(0x2D);
  5345  0528  302D               	movlw	45
  5346  0529  2572               	fcall	_RfTrcvPut
  5347                           
  5348                           ;hal.c: 322: rfStatus.isr.state = TX_SCL2;
  5349  052A  3004               	movlw	4
  5350  052B  0020               	movlb	0	; select bank0
  5351  052C  00A2               	movwf	_rfStatus+2
  5352                           
  5353                           ;hal.c: 323: break;
  5354  052D  0008               	return
  5355  052E                     i1l3026:	
  5356                           
  5357                           ;hal.c: 325: RfTrcvPut(0xD4);
  5358  052E  30D4               	movlw	212
  5359  052F  2572               	fcall	_RfTrcvPut
  5360                           
  5361                           ;hal.c: 326: rfStatus.isr.state = TX_SCL3;
  5362  0530  3005               	movlw	5
  5363  0531  0020               	movlb	0	; select bank0
  5364  0532  00A2               	movwf	_rfStatus+2
  5365                           
  5366                           ;hal.c: 327: break;
  5367  0533  0008               	return
  5368  0534                     i1l3030:	
  5369                           
  5370                           ;hal.c: 329: RfTrcvPut(0x6B);
  5371  0534  306B               	movlw	107
  5372  0535  2572               	fcall	_RfTrcvPut
  5373                           
  5374                           ;hal.c: 330: rfStatus.isr.state = TX_SIZE;
  5375  0536  3006               	movlw	6
  5376  0537  0020               	movlb	0	; select bank0
  5377  0538  00A2               	movwf	_rfStatus+2
  5378                           
  5379                           ;hal.c: 331: break;
  5380  0539  0008               	return
  5381  053A                     i1l3034:	
  5382                           
  5383                           ;hal.c: 333: RfTrcvPut(rfStatus.isr.txPacket->size);
  5384  053A  2632  3185         	fcall	PL18	;call to abstracted procedure
  5385  053C  2572               	fcall	_RfTrcvPut
  5386                           
  5387                           ;hal.c: 334: rfStatus.isr.state = TX_DATA;
  5388  053D  3007               	movlw	7
  5389  053E  0020               	movlb	0	; select bank0
  5390  053F  00A2               	movwf	_rfStatus+2
  5391                           
  5392                           ;hal.c: 335: break;
  5393  0540  0008               	return
  5394  0541                     i1l3038:	
  5395                           
  5396                           ;hal.c: 337: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  5397  0541  0820               	movf	_rfStatus,w
  5398  0542  0721               	addwf	_rfStatus+1,w
  5399  0543  00F5               	movwf	??_RfHalStatemachine
  5400  0544  0086               	movwf	6
  5401  0545  0187               	clrf	7
  5402  0546  0801               	movf	1,w
  5403  0547  2572  3185         	fcall	_RfTrcvPut
  5404                           
  5405                           ;hal.c: 338: rfStatus.isr.byteCounter++;
  5406  0549  0020               	movlb	0	; select bank0
  5407  054A  0AA0               	incf	_rfStatus,f
  5408                           
  5409                           ;hal.c: 339: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  5410  054B  2632  3185         	fcall	PL18	;call to abstracted procedure
  5411  054D  0220               	subwf	_rfStatus,w
  5412  054E  1C03               	skipc
  5413  054F  0008               	return
  5414                           
  5415                           ;hal.c: 340: rfStatus.isr.state = TX_CRC;
  5416  0550  3008               	movlw	8
  5417  0551  00A2               	movwf	_rfStatus+2
  5418  0552  0008               	return
  5419  0553                     i1l3046:	
  5420                           
  5421                           ;hal.c: 343: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  5422  0553  0821               	movf	_rfStatus+1,w
  5423  0554  3E18               	addlw	24
  5424  0555  0086               	movwf	6
  5425  0556  0187               	clrf	7
  5426  0557  0801               	movf	1,w
  5427  0558  2572               	fcall	_RfTrcvPut
  5428                           
  5429                           ;hal.c: 344: rfStatus.isr.state = TX_NULL1;
  5430  0559  3009               	movlw	9
  5431  055A  0020               	movlb	0	; select bank0
  5432  055B  00A2               	movwf	_rfStatus+2
  5433                           
  5434                           ;hal.c: 345: break;
  5435  055C  0008               	return
  5436  055D                     i1l3050:	
  5437                           
  5438                           ;hal.c: 348: case TX_NULL2:
  5439                           ;hal.c: 349: RfTrcvPut(0);
  5440  055D  3000               	movlw	0
  5441  055E  2D24               	goto	L4
  5442  055F                     i1l3054:	
  5443                           
  5444                           ;hal.c: 353: RfTrcvPut(0);
  5445  055F  3000               	movlw	0
  5446  0560  2572  3185         	fcall	_RfTrcvPut
  5447                           
  5448                           ;hal.c: 354: rfStatus.isr.state = RX_RECV;
  5449  0562  0020               	movlb	0	; select bank0
  5450  0563  3000               	movlw	0
  5451  0564  01A2               	clrf	_rfStatus+2
  5452                           
  5453                           ;hal.c: 360: RfTrcvMode(0);
  5454  0565  2584               	fcall	i1_RfTrcvMode
  5455                           
  5456                           ;hal.c: 361: break;
  5457  0566  0008               	return
  5458  0567                     i1l3062:	
  5459  0567  0822               	movf	_rfStatus+2,w
  5460                           
  5461                           ; Switch size 1, requested type "space"
  5462                           ; Number of cases is 12, Range of values is 0 to 11
  5463                           ; switch strategies available:
  5464                           ; Name         Instructions Cycles
  5465                           ; direct_byte           30     6 (fixed)
  5466                           ; simple_byte           37    19 (average)
  5467                           ; jumptable            260     6 (fixed)
  5468                           ;	Chosen strategy is direct_byte
  5469  0568  0084               	movwf	4
  5470  0569  300C               	movlw	12
  5471  056A  0204               	subwf	4,w
  5472  056B  1803               	skipnc
  5473  056C  0008               	return
  5474  056D  3184               	movlp	high i1S3180
  5475  056E  3504               	lslf	4,w
  5476  056F  3E02               	addlw	low i1S3180
  5477  0570  0082               	movwf	2
  5478  0571  0008               	return
  5479  0572                     __end_of_RfHalStatemachine:	
  5480  0572                     __ptext41:	
  5481 ;; *************** function _RfTrcvPut *****************
  5482 ;; Defined at:
  5483 ;;		line 9 in file "../../../src/devices/mrf49xa.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  byte            1    wreg     unsigned char 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  byte            1    4[COMMON] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;		None               void
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0, pclath, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 1F/0
  5494 ;;		On exit  : 1F/2
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5497 ;;      Params:         0       0       0       0
  5498 ;;      Locals:         1       0       0       0
  5499 ;;      Temps:          0       0       0       0
  5500 ;;      Totals:         1       0       0       0
  5501 ;;Total ram usage:        1 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    2
  5504 ;; This function calls:
  5505 ;;		i1_MRF49XACommand
  5506 ;; This function is called by:
  5507 ;;		_RfHalStatemachine
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _RfTrcvPut
  5513  0572                     _RfTrcvPut:	
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _RfTrcvPut: [wreg+status,2+status,0+pclath+cstack]
  5517                           ;RfTrcvPut@byte stored from wreg
  5518  0572  00F4               	movwf	RfTrcvPut@byte
  5519                           
  5520                           ;mrf49xa.c: 11: MRF49XACommand(0xB800 | byte);
  5521  0573  00F2               	movwf	i1MRF49XACommand@cmd
  5522  0574  3000               	movlw	0
  5523  0575  01F3               	clrf	i1MRF49XACommand@cmd+1
  5524  0576  04F2               	iorwf	i1MRF49XACommand@cmd,f
  5525  0577  30B8               	movlw	184
  5526  0578  04F3               	iorwf	i1MRF49XACommand@cmd+1,f
  5527  0579  25C6               	fcall	i1_MRF49XACommand
  5528  057A  0008               	return
  5529  057B                     __end_of_RfTrcvPut:	
  5530  057B                     __ptext43:	
  5531 ;; *************** function _RfTrcvGet *****************
  5532 ;; Defined at:
  5533 ;;		line 15 in file "../../../src/devices/mrf49xa.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  b               1    2[COMMON] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      unsigned char 
  5540 ;; Registers used:
  5541 ;;		wreg, status,2, status,0, pclath, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 1F/0
  5544 ;;		On exit  : 1F/2
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5547 ;;      Params:         0       0       0       0
  5548 ;;      Locals:         1       0       0       0
  5549 ;;      Temps:          0       0       0       0
  5550 ;;      Totals:         1       0       0       0
  5551 ;;Total ram usage:        1 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    1
  5554 ;; This function calls:
  5555 ;;		i1_SPI_Read
  5556 ;;		i1_SPI_Write
  5557 ;; This function is called by:
  5558 ;;		_RfHalStatemachine
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           
  5563                           ;psect for function _RfTrcvGet
  5564  057B                     _RfTrcvGet:	
  5565                           
  5566                           ;mrf49xa.c: 17: LATCbits.LATC6 = 0;;
  5567                           
  5568                           ;incstack = 0
  5569                           ; Regs used in _RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  5570  057B  0022               	movlb	2	; select bank2
  5571  057C  130E               	bcf	14,6	;volatile
  5572                           
  5573                           ;mrf49xa.c: 19: SPI_Write(0xB0);
  5574  057D  30B0               	movlw	176
  5575  057E  25CF  3185         	fcall	i1_SPI_Write
  5576                           
  5577                           ;mrf49xa.c: 20: UI08_t b = SPI_Read();
  5578  0580  25F1               	fcall	i1_SPI_Read
  5579  0581  00F2               	movwf	RfTrcvGet@b
  5580                           
  5581                           ;mrf49xa.c: 22: LATCbits.LATC6 = 1;;
  5582  0582  170E               	bsf	14,6	;volatile
  5583                           
  5584                           ;mrf49xa.c: 24: return b;
  5585  0583  0008               	return
  5586  0584                     __end_of_RfTrcvGet:	
  5587  0584                     __ptext36:	
  5588 ;; *************** function i1_RfTrcvMode *****************
  5589 ;; Defined at:
  5590 ;;		line 53 in file "../../../src/rfstack/hal.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;  tx              1    wreg     unsigned char 
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  tx              1    4[COMMON] unsigned char 
  5595 ;; Return value:  Size  Location     Type
  5596 ;;		None               void
  5597 ;; Registers used:
  5598 ;;		wreg, status,2, status,0, pclath, cstack
  5599 ;; Tracked objects:
  5600 ;;		On entry : 1F/0
  5601 ;;		On exit  : 1D/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5604 ;;      Params:         0       0       0       0
  5605 ;;      Locals:         1       0       0       0
  5606 ;;      Temps:          0       0       0       0
  5607 ;;      Totals:         1       0       0       0
  5608 ;;Total ram usage:        1 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    3
  5611 ;; This function calls:
  5612 ;;		i1_MRF49XACommand
  5613 ;;		i1_MRF49XAReset
  5614 ;; This function is called by:
  5615 ;;		_RfHalStatemachine
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function i1_RfTrcvMode
  5621  0584                     i1_RfTrcvMode:	
  5622                           
  5623                           ;incstack = 0
  5624                           ; Regs used in i1_RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  5625                           ;i1RfTrcvMode@tx stored from wreg
  5626  0584  00F4               	movwf	i1RfTrcvMode@tx
  5627                           
  5628                           ;hal.c: 55: if (tx == 0)
  5629  0585  08F4               	movf	i1RfTrcvMode@tx,f
  5630  0586  1D03               	skipz
  5631  0587  2D8C               	goto	i1l3002
  5632                           
  5633                           ;hal.c: 56: {
  5634                           ;hal.c: 57: rfStatus.inRx = 1;
  5635  0588  01A3               	clrf	_rfStatus+3
  5636  0589  0AA3               	incf	_rfStatus+3,f
  5637                           
  5638                           ;hal.c: 59: MRF49XAReset();
  5639  058A  25A2               	fcall	i1_MRF49XAReset
  5640                           
  5641                           ;hal.c: 60: }
  5642  058B  0008               	return
  5643  058C                     i1l3002:	
  5644  058C  3082               	movlw	130
  5645                           
  5646                           ;hal.c: 61: else
  5647                           ;hal.c: 62: {
  5648                           ;hal.c: 63: rfStatus.inRx = 0;
  5649  058D  01A3               	clrf	_rfStatus+3
  5650                           
  5651                           ;hal.c: 65: MRF49XACommand(0x8200);
  5652  058E  01F2               	clrf	i1MRF49XACommand@cmd
  5653  058F  00F3               	movwf	i1MRF49XACommand@cmd+1
  5654  0590  25C6  3185         	fcall	i1_MRF49XACommand
  5655                           
  5656                           ;hal.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  5657  0592  30A8               	movlw	168
  5658  0593  00F2               	movwf	i1MRF49XACommand@cmd
  5659  0594  3080               	movlw	128
  5660  0595  00F3               	movwf	i1MRF49XACommand@cmd+1
  5661  0596  25C6  3185         	fcall	i1_MRF49XACommand
  5662                           
  5663                           ;hal.c: 67: MRF49XACommand(0x8200 |0x0020);
  5664  0598  3020               	movlw	32
  5665  0599  00F2               	movwf	i1MRF49XACommand@cmd
  5666  059A  3082               	movlw	130
  5667  059B  00F3               	movwf	i1MRF49XACommand@cmd+1
  5668  059C  25C6               	fcall	i1_MRF49XACommand
  5669                           
  5670                           ;hal.c: 70: rfStatus.isr.state = TX_PREAMBLE1;
  5671  059D  0020               	movlb	0	; select bank0
  5672  059E  01A2               	clrf	_rfStatus+2
  5673  059F  0AA2               	incf	_rfStatus+2,f
  5674                           
  5675                           ;hal.c: 71: rfStatus.isr.byteCounter = 0;
  5676  05A0  01A0               	clrf	_rfStatus
  5677  05A1  0008               	return
  5678  05A2                     __end_ofi1_RfTrcvMode:	
  5679  05A2                     __ptext37:	
  5680 ;; *************** function i1_MRF49XAReset *****************
  5681 ;; Defined at:
  5682 ;;		line 119 in file "../../../src/devices/mrf49xa.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;		None               void
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, pclath, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 1D/2
  5693 ;;		On exit  : 1F/2
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5696 ;;      Params:         0       0       0       0
  5697 ;;      Locals:         0       0       0       0
  5698 ;;      Temps:          0       0       0       0
  5699 ;;      Totals:         0       0       0       0
  5700 ;;Total ram usage:        0 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    2
  5703 ;; This function calls:
  5704 ;;		i1_MRF49XACommand
  5705 ;; This function is called by:
  5706 ;;		_mrf49XaIsr
  5707 ;;		i1_RfTrcvMode
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           
  5712                           ;psect for function i1_MRF49XAReset
  5713  05A2                     i1_MRF49XAReset:	
  5714                           
  5715                           ;mrf49xa.c: 121: MRF49XACommand(0x8200);
  5716                           
  5717                           ;incstack = 0
  5718                           ; Regs used in i1_MRF49XAReset: [wreg+status,2+status,0+pclath+cstack]
  5719  05A2  3000               	movlw	0
  5720  05A3  00F2               	movwf	i1MRF49XACommand@cmd
  5721  05A4  3082               	movlw	130
  5722  05A5  00F3               	movwf	i1MRF49XACommand@cmd+1
  5723  05A6  25C6  3185         	fcall	i1_MRF49XACommand
  5724                           
  5725                           ;mrf49xa.c: 122: MRF49XACommand(0xCA81);
  5726  05A8  3081               	movlw	129
  5727  05A9  00F2               	movwf	i1MRF49XACommand@cmd
  5728  05AA  30CA               	movlw	202
  5729  05AB  00F3               	movwf	i1MRF49XACommand@cmd+1
  5730  05AC  25C6  3185         	fcall	i1_MRF49XACommand
  5731                           
  5732                           ;mrf49xa.c: 123: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  5733  05AE  3028               	movlw	40
  5734  05AF  00F2               	movwf	i1MRF49XACommand@cmd
  5735  05B0  3080               	movlw	128
  5736  05B1  00F3               	movwf	i1MRF49XACommand@cmd+1
  5737  05B2  25C6  3185         	fcall	i1_MRF49XACommand
  5738                           
  5739                           ;mrf49xa.c: 124: MRF49XACommand(0x8200 | 0x0080);
  5740  05B4  3080               	movlw	128
  5741  05B5  00F2               	movwf	i1MRF49XACommand@cmd
  5742  05B6  3082               	movlw	130
  5743  05B7  00F3               	movwf	i1MRF49XACommand@cmd+1
  5744  05B8  25C6  3185         	fcall	i1_MRF49XACommand
  5745                           
  5746                           ;mrf49xa.c: 125: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  5747  05BA  3068               	movlw	104
  5748  05BB  00F2               	movwf	i1MRF49XACommand@cmd
  5749  05BC  3080               	movlw	128
  5750  05BD  00F3               	movwf	i1MRF49XACommand@cmd+1
  5751  05BE  25C6  3185         	fcall	i1_MRF49XACommand
  5752                           
  5753                           ;mrf49xa.c: 126: MRF49XACommand(0xCA81 | 0x0002);
  5754  05C0  3083               	movlw	131
  5755  05C1  00F2               	movwf	i1MRF49XACommand@cmd
  5756  05C2  30CA               	movlw	202
  5757  05C3  00F3               	movwf	i1MRF49XACommand@cmd+1
  5758  05C4  25C6               	fcall	i1_MRF49XACommand
  5759  05C5  0008               	return
  5760  05C6                     __end_ofi1_MRF49XAReset:	
  5761  05C6                     __ptext42:	
  5762 ;; *************** function i1_MRF49XACommand *****************
  5763 ;; Defined at:
  5764 ;;		line 28 in file "../../../src/devices/mrf49xa.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  cmd             2    2[COMMON] unsigned int 
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;		None
  5769 ;; Return value:  Size  Location     Type
  5770 ;;		None               void
  5771 ;; Registers used:
  5772 ;;		wreg, status,2, status,0, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 1D/0
  5775 ;;		On exit  : 1F/2
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5778 ;;      Params:         2       0       0       0
  5779 ;;      Locals:         0       0       0       0
  5780 ;;      Temps:          0       0       0       0
  5781 ;;      Totals:         2       0       0       0
  5782 ;;Total ram usage:        2 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    1
  5785 ;; This function calls:
  5786 ;;		i1_SPI_Write
  5787 ;; This function is called by:
  5788 ;;		_RfTrcvPut
  5789 ;;		i1_MRF49XAReset
  5790 ;;		i1_RfTrcvMode
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           
  5795                           ;psect for function i1_MRF49XACommand
  5796  05C6                     i1_MRF49XACommand:	
  5797                           
  5798                           ;mrf49xa.c: 30: LATCbits.LATC6 = 0;;
  5799                           
  5800                           ;incstack = 0
  5801                           ; Regs used in i1_MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  5802  05C6  0022               	movlb	2	; select bank2
  5803  05C7  130E               	bcf	14,6	;volatile
  5804                           
  5805                           ;mrf49xa.c: 32: SPI_Write((cmd & 0xFF00) >> 8);
  5806  05C8  0873               	movf	i1MRF49XACommand@cmd+1,w
  5807  05C9  25CF  3185         	fcall	i1_SPI_Write
  5808                           
  5809                           ;mrf49xa.c: 33: SPI_Write((cmd & 0x00FF));
  5810  05CB  0872               	movf	i1MRF49XACommand@cmd,w
  5811  05CC  25CF               	fcall	i1_SPI_Write
  5812                           
  5813                           ;mrf49xa.c: 35: LATCbits.LATC6 = 1;;
  5814  05CD  170E               	bsf	14,6	;volatile
  5815  05CE  0008               	return
  5816  05CF                     __end_ofi1_MRF49XACommand:	
  5817  05CF                     __ptext44:	
  5818 ;; *************** function i1_SPI_Write *****************
  5819 ;; Defined at:
  5820 ;;		line 185 in file "../../../src/devices/mrf49xa.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  data            1    wreg     unsigned char 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  data            1    0[COMMON] unsigned char 
  5825 ;;  SPI_Write       1    1[COMMON] unsigned char 
  5826 ;; Return value:  Size  Location     Type
  5827 ;;		None               void
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0
  5830 ;; Tracked objects:
  5831 ;;		On entry : 1F/2
  5832 ;;		On exit  : 1F/2
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5835 ;;      Params:         0       0       0       0
  5836 ;;      Locals:         2       0       0       0
  5837 ;;      Temps:          0       0       0       0
  5838 ;;      Totals:         2       0       0       0
  5839 ;;Total ram usage:        2 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_RfTrcvGet
  5845 ;;		i1_MRF49XACommand
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           
  5850                           ;psect for function i1_SPI_Write
  5851  05CF                     i1_SPI_Write:	
  5852                           
  5853                           ;incstack = 0
  5854                           ; Regs used in i1_SPI_Write: [wreg+status,2+status,0]
  5855                           ;i1SPI_Write@data stored from wreg
  5856  05CF  00F0               	movwf	i1SPI_Write@data
  5857                           
  5858                           ;mrf49xa.c: 192: LATCbits.LATC7 = 0;
  5859  05D0  138E               	bcf	14,7	;volatile
  5860                           
  5861                           ;mrf49xa.c: 208: UI08_t i;
  5862                           ;mrf49xa.c: 209: for (i = 0; i < 8; i++)
  5863  05D1  01F1               	clrf	i1SPI_Write@i
  5864  05D2                     i1l207:	
  5865                           
  5866                           ;mrf49xa.c: 210: {
  5867                           ;mrf49xa.c: 211: if (data & 0x80)
  5868  05D2  1BF0               	btfsc	i1SPI_Write@data,7
  5869  05D3  2DD6               	goto	i1l2934
  5870  05D4  0020               	movlb	0	; select bank0
  5871  05D5  2DD8               	goto	i1l209
  5872  05D6                     i1l2934:	
  5873                           
  5874                           ;mrf49xa.c: 212: {
  5875                           ;mrf49xa.c: 213: LATBbits.LATB7 = 1;
  5876  05D6  178D               	bsf	13,7	;volatile
  5877                           
  5878                           ;mrf49xa.c: 214: }
  5879  05D7  2DD9               	goto	i1l210
  5880  05D8                     i1l209:	
  5881                           
  5882                           ;mrf49xa.c: 215: else
  5883                           ;mrf49xa.c: 216: {
  5884                           ;mrf49xa.c: 217: LATBbits.LATB7 = 0;
  5885  05D8  138D               	bcf	13,7	;volatile
  5886  05D9                     i1l210:	
  5887                           
  5888                           ;mrf49xa.c: 218: }
  5889                           ;mrf49xa.c: 220: LATCbits.LATC7 = 1;
  5890  05D9  178E               	bsf	14,7	;volatile
  5891                           
  5892                           ;mrf49xa.c: 221: data = data << 1;
  5893  05DA  35F0               	lslf	i1SPI_Write@data,f
  5894                           
  5895                           ;mrf49xa.c: 222: LATCbits.LATC7 = 0;
  5896  05DB  138E               	bcf	14,7	;volatile
  5897  05DC  3008               	movlw	8
  5898  05DD  0AF1               	incf	i1SPI_Write@i,f
  5899  05DE  0271               	subwf	i1SPI_Write@i,w
  5900  05DF  1803               	btfsc	3,0
  5901  05E0  0008               	return
  5902  05E1  0020               	movlb	0	; select bank0
  5903  05E2  2DD2               	goto	i1l207
  5904  05E3                     __end_ofi1_SPI_Write:	
  5905  05E3                     __ptext34:	
  5906 ;; *************** function i1_MRF49XAReadStatus *****************
  5907 ;; Defined at:
  5908 ;;		line 39 in file "../../../src/devices/mrf49xa.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  MRF49XAReadS    2    4[COMMON] unsigned int 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  2    2[COMMON] unsigned int 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, pclath, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 1F/2
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5922 ;;      Params:         2       0       0       0
  5923 ;;      Locals:         2       0       0       0
  5924 ;;      Temps:          0       0       0       0
  5925 ;;      Totals:         4       0       0       0
  5926 ;;Total ram usage:        4 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    1
  5929 ;; This function calls:
  5930 ;;		i1_SPI_Read
  5931 ;; This function is called by:
  5932 ;;		_mrf49XaIsr
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           
  5937                           ;psect for function i1_MRF49XAReadStatus
  5938  05E3                     i1_MRF49XAReadStatus:	
  5939                           
  5940                           ;mrf49xa.c: 41: LATCbits.LATC6 = 0;;
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in i1_MRF49XAReadStatus: [wreg+status,2+status,0+pclath+cstack]
  5944  05E3  0022               	movlb	2	; select bank2
  5945  05E4  130E               	bcf	14,6	;volatile
  5946                           
  5947                           ;mrf49xa.c: 43: UI16_t w = SPI_Read() << 8;
  5948  05E5  25F1  3185         	fcall	i1_SPI_Read
  5949  05E7  00F5               	movwf	i1MRF49XAReadStatus@w+1
  5950  05E8  01F4               	clrf	i1MRF49XAReadStatus@w
  5951                           
  5952                           ;mrf49xa.c: 44: w |= SPI_Read();
  5953  05E9  25F1               	fcall	i1_SPI_Read
  5954  05EA  04F4               	iorwf	i1MRF49XAReadStatus@w,f
  5955                           
  5956                           ;mrf49xa.c: 46: LATCbits.LATC6 = 1;;
  5957  05EB  170E               	bsf	14,6	;volatile
  5958                           
  5959                           ;mrf49xa.c: 48: return w;
  5960  05EC  0875               	movf	i1MRF49XAReadStatus@w+1,w
  5961  05ED  00F3               	movwf	?i1_MRF49XAReadStatus+1
  5962  05EE  0874               	movf	i1MRF49XAReadStatus@w,w
  5963  05EF  00F2               	movwf	?i1_MRF49XAReadStatus
  5964  05F0  0008               	return
  5965  05F1                     __end_ofi1_MRF49XAReadStatus:	
  5966  05F1                     __ptext45:	
  5967 ;; *************** function i1_SPI_Read *****************
  5968 ;; Defined at:
  5969 ;;		line 135 in file "../../../src/devices/mrf49xa.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  SPI_Read        1    1[COMMON] unsigned char 
  5974 ;;  SPI_Read        1    0[COMMON] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      unsigned char 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0
  5979 ;; Tracked objects:
  5980 ;;		On entry : 1F/2
  5981 ;;		On exit  : 1F/2
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5984 ;;      Params:         0       0       0       0
  5985 ;;      Locals:         2       0       0       0
  5986 ;;      Temps:          0       0       0       0
  5987 ;;      Totals:         2       0       0       0
  5988 ;;Total ram usage:        2 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_RfTrcvGet
  5994 ;;		i1_MRF49XAReadStatus
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           
  5999                           ;psect for function i1_SPI_Read
  6000  05F1                     i1_SPI_Read:	
  6001                           
  6002                           ;mrf49xa.c: 140: UI08_t data = 0;
  6003                           
  6004                           ;incstack = 0
  6005                           ; Regs used in i1_SPI_Read: [wreg+status,2+status,0]
  6006  05F1  01F0               	clrf	i1SPI_Read@data
  6007                           
  6008                           ;mrf49xa.c: 141: LATCbits.LATC7 = 0;
  6009  05F2  138E               	bcf	14,7	;volatile
  6010                           
  6011                           ;mrf49xa.c: 142: LATBbits.LATB7 = 0;
  6012  05F3  138D               	bcf	13,7	;volatile
  6013                           
  6014                           ;mrf49xa.c: 157: UI08_t i;
  6015                           ;mrf49xa.c: 159: LATBbits.LATB7 = 0;
  6016  05F4  138D               	bcf	13,7	;volatile
  6017                           
  6018                           ;mrf49xa.c: 160: LATCbits.LATC7 = 0;
  6019  05F5  138E               	bcf	14,7	;volatile
  6020                           
  6021                           ;mrf49xa.c: 162: for (i = 0; i < 8; i++)
  6022  05F6  01F1               	clrf	i1SPI_Read@i
  6023  05F7                     i1l200:	
  6024                           
  6025                           ;mrf49xa.c: 163: {
  6026                           ;mrf49xa.c: 164: data = data << 1;
  6027  05F7  35F0               	lslf	i1SPI_Read@data,f
  6028                           
  6029                           ;mrf49xa.c: 166: if (PORTCbits.RC5)
  6030  05F8  0020               	movlb	0	; select bank0
  6031  05F9  1E8E               	btfss	14,5	;volatile
  6032  05FA  2DFD               	goto	i1l202
  6033                           
  6034                           ;mrf49xa.c: 167: {
  6035                           ;mrf49xa.c: 168: data |= 0x01;
  6036  05FB  1470               	bsf	i1SPI_Read@data,0
  6037                           
  6038                           ;mrf49xa.c: 169: }
  6039  05FC  2DFE               	goto	i1l203
  6040  05FD                     i1l202:	
  6041                           
  6042                           ;mrf49xa.c: 170: else
  6043                           ;mrf49xa.c: 171: {
  6044                           ;mrf49xa.c: 172: data &= 0xFE;
  6045  05FD  1070               	bcf	i1SPI_Read@data,0
  6046  05FE                     i1l203:	
  6047                           
  6048                           ;mrf49xa.c: 173: }
  6049                           ;mrf49xa.c: 175: LATCbits.LATC7 = 1;
  6050  05FE  0022               	movlb	2	; select bank2
  6051  05FF  178E               	bsf	14,7	;volatile
  6052  0600  0000               	nop	;# 
  6053                           
  6054                           ;mrf49xa.c: 179: LATCbits.LATC7 = 0;
  6055  0601  0022               	movlb	2	; select bank2
  6056  0602  138E               	bcf	14,7	;volatile
  6057  0603  3008               	movlw	8
  6058  0604  0AF1               	incf	i1SPI_Read@i,f
  6059  0605  0271               	subwf	i1SPI_Read@i,w
  6060  0606  1803               	btfsc	3,0
  6061  0607  2E0A               	goto	i1l2922
  6062  0608  0020               	movlb	0	; select bank0
  6063  0609  2DF7               	goto	i1l200
  6064  060A                     i1l2922:	
  6065                           
  6066                           ;mrf49xa.c: 180: }
  6067                           ;mrf49xa.c: 182: return data;
  6068  060A  0870               	movf	i1SPI_Read@data,w
  6069  060B  0008               	return
  6070  060C                     __end_ofi1_SPI_Read:	
  6071  060C                     __ptext38:	
  6072 ;; *************** function __CCBufWrByte *****************
  6073 ;; Defined at:
  6074 ;;		line 82 in file "../../../src/utilities/ccbuf_static.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  data            1    wreg     unsigned char 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  data            1    4[COMMON] unsigned char 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      unsigned char 
  6081 ;; Registers used:
  6082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : 1F/2
  6085 ;;		On exit  : 1F/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6088 ;;      Params:         0       0       0       0
  6089 ;;      Locals:         1       0       0       0
  6090 ;;      Temps:          1       0       0       0
  6091 ;;      Totals:         2       0       0       0
  6092 ;;Total ram usage:        2 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:    1
  6095 ;; This function calls:
  6096 ;;		__CCBufCanWr
  6097 ;;		i1__CCBufCalcPt
  6098 ;; This function is called by:
  6099 ;;		_RfHalStatemachine
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           
  6104                           ;psect for function __CCBufWrByte
  6105  060C                     __CCBufWrByte:	
  6106                           
  6107                           ;incstack = 0
  6108                           ; Regs used in __CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6109                           ;__CCBufWrByte@data stored from wreg
  6110  060C  00F4               	movwf	__CCBufWrByte@data
  6111                           
  6112                           ;ccbuf_static.c: 84: if (_CCBufCanWr())
  6113  060D  2620  3185         	fcall	__CCBufCanWr
  6114  060F  3A00               	xorlw	0
  6115  0610  1903               	skipnz
  6116  0611  3400               	retlw	0
  6117  0612  0867               	movf	_rfRxCC+2,w
  6118  0613  0765               	addwf	_rfRxCC,w
  6119  0614  00F3               	movwf	??__CCBufWrByte
  6120  0615  0086               	movwf	6
  6121  0616  3001               	movlw	1	; select bank2/3
  6122  0617  0087               	movwf	7
  6123  0618  0874               	movf	__CCBufWrByte@data,w
  6124  0619  0081               	movwf	1
  6125  061A  01F0               	clrf	i1__CCBufCalcPt@move
  6126  061B  0AF0               	incf	i1__CCBufCalcPt@move,f
  6127  061C  0867               	movf	_rfRxCC+2,w
  6128  061D  2626               	fcall	i1__CCBufCalcPt
  6129  061E  00E7               	movwf	_rfRxCC+2
  6130                           
  6131                           ;ccbuf_static.c: 89: return 1;
  6132  061F  3401               	retlw	1
  6133  0620                     __end_of__CCBufWrByte:	
  6134                           ;ccbuf_static.c: 90: }
  6135                           ;ccbuf_static.c: 91: return 0;
  6136                           
  6137  0620                     __ptext40:	
  6138 ;; *************** function __CCBufCanWr *****************
  6139 ;; Defined at:
  6140 ;;		line 28 in file "../../../src/utilities/ccbuf_static.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      unsigned char 
  6147 ;; Registers used:
  6148 ;;		wreg
  6149 ;; Tracked objects:
  6150 ;;		On entry : 1F/2
  6151 ;;		On exit  : 1F/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6154 ;;      Params:         0       0       0       0
  6155 ;;      Locals:         0       0       0       0
  6156 ;;      Temps:          0       0       0       0
  6157 ;;      Totals:         0       0       0       0
  6158 ;;Total ram usage:        0 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; This function calls:
  6161 ;;		Nothing
  6162 ;; This function is called by:
  6163 ;;		__CCBufWrByte
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           
  6168                           ;psect for function __CCBufCanWr
  6169  0620                     __CCBufCanWr:	
  6170                           
  6171                           ;incstack = 0
  6172                           ; Regs used in __CCBufCanWr: [wreg]
  6173  0620  0020               	movlb	0	; select bank0
  6174  0621  0867               	movf	_rfRxCC+2,w
  6175  0622  0668               	xorwf	_rfRxCC+3,w
  6176  0623  1903               	btfsc	3,2
  6177  0624  3400               	retlw	0
  6178                           
  6179                           ;ccbuf_static.c: 31: else return 1;
  6180  0625  3401               	retlw	1
  6181  0626                     __end_of__CCBufCanWr:	
  6182  0626                     __ptext39:	
  6183 ;; *************** function i1__CCBufCalcPt *****************
  6184 ;; Defined at:
  6185 ;;		line 18 in file "../../../src/utilities/ccbuf_static.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  entry           1    wreg     unsigned char 
  6188 ;;  move            1    0[COMMON] unsigned char 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  entry           1    1[COMMON] unsigned char 
  6191 ;;  _CCBufCalcPt    1    2[COMMON] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      unsigned char 
  6194 ;; Registers used:
  6195 ;;		wreg, status,2, status,0
  6196 ;; Tracked objects:
  6197 ;;		On entry : 1F/0
  6198 ;;		On exit  : 1F/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6201 ;;      Params:         1       0       0       0
  6202 ;;      Locals:         2       0       0       0
  6203 ;;      Temps:          0       0       0       0
  6204 ;;      Totals:         3       0       0       0
  6205 ;;Total ram usage:        3 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; This function calls:
  6208 ;;		Nothing
  6209 ;; This function is called by:
  6210 ;;		__CCBufWrByte
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           
  6215                           ;psect for function i1__CCBufCalcPt
  6216  0626                     i1__CCBufCalcPt:	
  6217                           
  6218                           ;incstack = 0
  6219                           ; Regs used in i1__CCBufCalcPt: [wreg+status,2+status,0]
  6220                           ;i1__CCBufCalcPt@entry stored from wreg
  6221  0626  00F1               	movwf	i1__CCBufCalcPt@entry
  6222                           
  6223                           ;ccbuf_static.c: 20: I08_t result = ((I08_t)entry) + move;
  6224  0627  0770               	addwf	i1__CCBufCalcPt@move,w
  6225  0628  00F2               	movwf	i1__CCBufCalcPt@result
  6226  0629                     i1l2946:	
  6227                           ;ccbuf_static.c: 22: while (result < 0) result += CCDef->size;
  6228                           
  6229  0629  0866               	movf	_rfRxCC+1,w
  6230  062A  0272               	subwf	i1__CCBufCalcPt@result,w
  6231  062B  1C03               	btfss	3,0
  6232  062C  2E30               	goto	i1l2948
  6233  062D  0866               	movf	_rfRxCC+1,w
  6234  062E  02F2               	subwf	i1__CCBufCalcPt@result,f
  6235  062F  2E29               	goto	i1l2946
  6236  0630                     i1l2948:	
  6237                           
  6238                           ;ccbuf_static.c: 25: return (UI08_t) result;
  6239  0630  0872               	movf	i1__CCBufCalcPt@result,w
  6240  0631  0008               	return
  6241  0632                     __end_ofi1__CCBufCalcPt:	
  6242  0632                     PL18:	
  6243  0632  0821               	movf	_rfStatus+1,w
  6244  0633  3E1A               	addlw	26
  6245  0634  0086               	movwf	6
  6246  0635  0187               	clrf	7
  6247  0636  0801               	movf	1,w
  6248  0637  0008               	return
  6249  0638                     __end_ofPL18:	
  6250                           
  6251                           	psect	swtext1
  6252  0402                     __pswtext1:	
  6253  0402                     i1S3180:	
  6254  0402  3185  2D20         	ljmp	i1l3016
  6255  0404  3185  2D23         	ljmp	i1l3018
  6256  0406  3185  2D23         	ljmp	i1l3018
  6257  0408  3185  2D28         	ljmp	i1l3022
  6258  040A  3185  2D2E         	ljmp	i1l3026
  6259  040C  3185  2D34         	ljmp	i1l3030
  6260  040E  3185  2D3A         	ljmp	i1l3034
  6261  0410  3185  2D41         	ljmp	i1l3038
  6262  0412  3185  2D53         	ljmp	i1l3046
  6263  0414  3185  2D5D         	ljmp	i1l3050
  6264  0416  3185  2D5D         	ljmp	i1l3050
  6265  0418  3185  2D5F         	ljmp	i1l3054
  6266                           
  6267                           	psect	functab
  6268  0500                     __pfunctab:	
  6269  0500                     fptable:	
  6270  0500  2D00               	goto	fptable	;no entries
  6271  007E                     btemp	set	126	;btemp
  6272  007E                     wtemp	set	126
  6273  007E                     wtemp0	set	126
  6274  0080                     wtemp1	set	128
  6275  0082                     wtemp2	set	130
  6276  0084                     wtemp3	set	132
  6277  0086                     wtemp4	set	134
  6278  0088                     wtemp5	set	136
  6279  007F                     wtemp6	set	127
  6280  007E                     ttemp	set	126
  6281  007E                     ttemp0	set	126
  6282  0081                     ttemp1	set	129
  6283  0084                     ttemp2	set	132
  6284  0087                     ttemp3	set	135
  6285  007F                     ttemp4	set	127
  6286  007E                     ltemp	set	126
  6287  007E                     ltemp0	set	126
  6288  0082                     ltemp1	set	130
  6289  0086                     ltemp2	set	134
  6290  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         134
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     25      73
    BANK1            80      0      56
    BANK2            80      0      32

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 32
		 -> rfRxBf(BANK2[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> rfRxBf(BANK2[32]), 

    memcpy@d1	PTR void  size(1) Largest target is 56
		 -> NULL..(NULL[24]), rfPackets..(BANK1[24]), packet..(BANK0[24]), RfPacketTransmit@packet(BANK0[28]), 
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 56
		 -> NULL..(NULL[24]), rfPackets..(BANK1[24]), packet..(BANK0[24]), RfPacketTransmit@packet(BANK0[28]), 
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    memcpy@s1	PTR const void  size(1) Largest target is 56
		 -> RfPacketsTickTh@scratchpad(BANK0[4]), RfPacketTransmit@packet(BANK0[28]), RfHalTickRxTh@rxPacket(BANK0[28]), NULL(NULL[0]), 
		 -> rfPackets(BANK1[56]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 56
		 -> RfPacketsTickTh@scratchpad(BANK0[4]), RfPacketTransmit@packet(BANK0[28]), RfHalTickRxTh@rxPacket(BANK0[28]), NULL(NULL[0]), 
		 -> rfPackets(BANK1[56]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> rfRxBf(BANK2[32]), 

    RfPacketsTickTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsTickTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halPkTh(BANK0[2]), 

    RfPacketReply@data	PTR unsigned char  size(1) Largest target is 4
		 -> RfPacketsTickTh@scratchpad(BANK0[4]), 

    RfPacketReply@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketSimpleReply@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> RfPacketTransmit@packet(BANK0[28]), NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalRxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__memcpy	PTR void  size(1) Largest target is 56
		 -> NULL..(NULL[24]), rfPackets..(BANK1[24]), packet..(BANK0[24]), RfPacketTransmit@packet(BANK0[28]), 
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalRxPut@rfPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 28
		 -> RfHalTickRxTh@rxPacket(BANK0[28]), 

    RfHalTickRxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halRxBfTh(BANK0[2]), 

    sp__RfHalTxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickTxTh@txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickTxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halTxBfTh(BANK0[2]), 

    CCDef	const PTR struct CircBufDef_s size(1) Largest target is 5
		 -> rfRxCC(BANK0[4]), 

    S450CircBufDef_s$bf	const PTR unsigned char  size(1) Largest target is 32
		 -> rfRxBf(BANK2[32]), 

    rfRxCC.bf	const PTR unsigned char  size(1) Largest target is 32
		 -> rfRxBf(BANK2[32]), 

    S440$txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> mrf49XaIsr(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    _extInt->_mrf49XaIsr
    _mrf49XaIsr->_RfHalStatemachine
    _mrf49XaIsr->i1_MRF49XAReadStatus
    i1_MRF49XAReadStatus->i1_SPI_Read
    _RfHalStatemachine->_RfTrcvPut
    _RfHalStatemachine->__CCBufWrByte
    _RfHalStatemachine->i1_RfTrcvMode
    i1_RfTrcvMode->i1_MRF49XACommand
    i1_MRF49XAReset->i1_MRF49XACommand
    __CCBufWrByte->i1__CCBufCalcPt
    _RfTrcvPut->i1_MRF49XACommand
    i1_MRF49XACommand->i1_SPI_Write
    _RfTrcvGet->i1_SPI_Read
    _RfTrcvGet->i1_SPI_Write

Critical Paths under _main in BANK0

    _main->_RfPacketsTickTh
    _RfPacketsTickTh->_RfPacketReply
    _RfPacketSimpleReply->_RfHalTxPut
    _RfPacketReply->_RfHalTxPut
    _RfHalTxPut->_memcpy
    _RfHalRxGet->___bmul
    _RfHalTickTxTh->_RfTrcvCarrierPresent
    _RfTrcvCarrierPresent->_MRF49XAReadStatus
    _MRF49XAReadStatus->_SPI_Read
    _RfHalTxGet->___bmul
    _RfHalTickRxTh->_RfHalRxPut
    __CCBufRdReverse->__CCBufCalcPt
    __CCBufRdByte->__CCBufCalcPt
    __CCBufPeekByte->__CCBufCalcPt
    __CCBufCanRd->__CCBufCalcPt
    _RfHalRxPut->_memcpy
    _memcpy->___bmul
    __CCBufReset->_memset
    _RfTrcvMode->_MRF49XACommand
    _MRF49XAReset->_MRF49XACommand
    _MRF49XACommand->_SPI_Write

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22565
                            _AdcInit
                         _ExtIntInit
                          _RfHalInit
                      _RfHalTickRxTh
                      _RfHalTickTxTh
                    _RfPacketsTickTh
                        _SysInitGpio
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfPacketsTickTh                                      8     8      0    7409
                                             18 BANK0      7     7      0
                         _RfHalRxGet
                      _RfPacketReply
                _RfPacketSimpleReply
 ---------------------------------------------------------------------------------
 (2) _RfPacketSimpleReply                                  3     2      1    2402
                                             12 BANK0      3     2      1
                         _RfHalTxPut
 ---------------------------------------------------------------------------------
 (2) _RfPacketReply                                        7     3      4    4165
                                             12 BANK0      6     2      4
                         _RfHalTxPut
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _RfHalTxPut                                           3     3      0    2100
                                              9 BANK0      3     3      0
                      _RfTrcvCrcTick
                             ___bmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _RfHalRxGet                                           1     1      0     643
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _RfHalTickTxTh                                        4     4      0    5213
                                              8 BANK0      3     3      0
                         _RfHalTxGet
               _RfTrcvCarrierPresent
                         _RfTrcvMode
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCarrierPresent                                 2     2      0     119
                                              6 BANK0      2     2      0
                  _MRF49XAReadStatus
 ---------------------------------------------------------------------------------
 (3) _MRF49XAReadStatus                                    4     2      2      96
                                              2 BANK0      4     2      2
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (4) _SPI_Read                                             2     2      0      72
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _RfHalTxGet                                           1     1      0     643
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _RfHalTickRxTh                                        6     6      0    5308
                                             11 BANK0      5     5      0
                         _RfHalRxPut
                      _RfTrcvCrcTick
                        __CCBufCanRd
                     __CCBufPeekByte
                       __CCBufRdByte
                    __CCBufRdReverse
 ---------------------------------------------------------------------------------
 (2) __CCBufRdReverse                                      1     1      0     532
                                              3 BANK0      1     1      0
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (2) __CCBufRdByte                                         2     2      0    1043
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (2) __CCBufPeekByte                                       2     2      0    1043
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (3) __CCBufCanRd                                          0     0      0     510
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (3) __CCBufCalcPt                                         3     2      1     510
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _RfTrcvCrcTick                                        2     1      1     222
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxPut                                           2     2      0    1651
                                              9 BANK0      2     2      0
                             ___bmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               6     3      3     950
                                              3 BANK0      6     3      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     508
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _RfHalInit                                            1     1      0    4635
                                              6 BANK0      1     1      0
                         _RfTrcvMode
                         __CCBufInit
 ---------------------------------------------------------------------------------
 (2) __CCBufInit                                           0     0      0     310
                        __CCBufReset
 ---------------------------------------------------------------------------------
 (3) __CCBufReset                                          0     0      0     310
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               6     2      4     310
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _RfTrcvMode                                           1     1      0    4256
                                              4 BANK0      1     1      0
                     _MRF49XACommand
                       _MRF49XAReset
 ---------------------------------------------------------------------------------
 (3) _MRF49XAReset                                         0     0      0    2117
                     _MRF49XACommand
 ---------------------------------------------------------------------------------
 (4) _MRF49XACommand                                       2     0      2    2117
                                              2 BANK0      2     0      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _extInt                                               0     0      0    6263
                         _mrf49XaIsr
 ---------------------------------------------------------------------------------
 (7) _mrf49XaIsr                                           2     2      0    6263
                                              6 COMMON     2     2      0
                  _RfHalStatemachine
                i1_MRF49XAReadStatus
                     i1_MRF49XAReset
 ---------------------------------------------------------------------------------
 (8) i1_MRF49XAReadStatus                                  4     2      2     308
                                              2 COMMON     4     2      2
                         i1_SPI_Read
 ---------------------------------------------------------------------------------
 (8) _RfHalStatemachine                                    1     1      0    4701
                                              5 COMMON     1     1      0
                          _RfTrcvGet
                          _RfTrcvPut
                       __CCBufWrByte
                       i1_RfTrcvMode
 ---------------------------------------------------------------------------------
 (9) i1_RfTrcvMode                                         1     1      0    2581
                                              4 COMMON     1     1      0
                   i1_MRF49XACommand
                     i1_MRF49XAReset
 ---------------------------------------------------------------------------------
 (8) i1_MRF49XAReset                                       0     0      0    1254
                   i1_MRF49XACommand
 ---------------------------------------------------------------------------------
 (9) __CCBufWrByte                                         2     2      0     365
                                              3 COMMON     2     2      0
                        __CCBufCanWr
                     i1__CCBufCalcPt
 ---------------------------------------------------------------------------------
 (10) i1__CCBufCalcPt                                      3     2      1     343
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) __CCBufCanWr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _RfTrcvPut                                            1     1      0    1276
                                              4 COMMON     1     1      0
                   i1_MRF49XACommand
 ---------------------------------------------------------------------------------
 (9) i1_MRF49XACommand                                     2     0      2    1254
                                              2 COMMON     2     0      2
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (9) _RfTrcvGet                                            1     1      0     479
                                              2 COMMON     1     1      0
                         i1_SPI_Read
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (10) i1_SPI_Write                                         2     2      0     225
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) i1_SPI_Read                                           2     2      0     231
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _RfHalInit
     _RfTrcvMode
       _MRF49XACommand
         _SPI_Write
       _MRF49XAReset
         _MRF49XACommand
           _SPI_Write
     __CCBufInit
       __CCBufReset
         _memset
   _RfHalTickRxTh
     _RfHalRxPut
       ___bmul
       _memcpy
         ___bmul (ARG)
     _RfTrcvCrcTick
     __CCBufCanRd
       __CCBufCalcPt
     __CCBufPeekByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdReverse
       __CCBufCalcPt
   _RfHalTickTxTh
     _RfHalTxGet
       ___bmul
     _RfTrcvCarrierPresent
       _MRF49XAReadStatus
         _SPI_Read
     _RfTrcvMode
       _MRF49XACommand
         _SPI_Write
       _MRF49XAReset
         _MRF49XACommand
           _SPI_Write
   _RfPacketsTickTh
     _RfHalRxGet
       ___bmul
     _RfPacketReply
       _RfHalTxPut
         _RfTrcvCrcTick
         ___bmul
         _memcpy
           ___bmul (ARG)
       _memcpy
         ___bmul (ARG)
     _RfPacketSimpleReply
       _RfHalTxPut
         _RfTrcvCrcTick
         ___bmul
         _memcpy
           ___bmul (ARG)
   _SysInitGpio

 _extInt (ROOT)
   _mrf49XaIsr
     _RfHalStatemachine
       _RfTrcvGet
         i1_SPI_Read
         i1_SPI_Write
       _RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
       __CCBufWrByte
         __CCBufCanWr
         i1__CCBufCalcPt
       i1_RfTrcvMode
         i1_MRF49XACommand
           i1_SPI_Write
         i1_MRF49XAReset
           i1_MRF49XACommand
             i1_SPI_Write
     i1_MRF49XAReadStatus
       i1_SPI_Read
     i1_MRF49XAReset
       i1_MRF49XACommand
         i1_SPI_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      AB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     19      49       6       91.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      38       8       70.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      20      10       40.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      AB      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Thu Apr  3 17:01:39 2014

       RfHalTickRxTh@pktLength 005A          RfHalTickRxTh@rxPacket 002A                              pc 0002  
               ___bmul@product 004D         __size_of_RfTrcvCrcTick 0000                            PL20 03D4  
                          PL22 03DA                            PL14 03C9                            PL24 03E0  
                          PL16 03CF                            PL26 03E5                            PL18 0632  
                          PL28 03EA                     __CCBufInit 0159                            l200 032C  
                          l210 02FE                            l202 0331                            l203 0332  
                          l207 02F7                            l209 02FC                            l175 0003  
        __size_of__CCBufCalcPt 000C          __size_of__CCBufRdByte 0018                            wreg 0009  
        __size_of__CCBufWrByte 0014                    __CCBufCanRd 0125                    __CCBufCanWr 0620  
                  __CCBufReset 0638                           l2332 02E7                           l2600 00E5  
                         l2418 005F                           l2610 00FA                           l2530 0075  
                         l2506 01E1                           l2612 00FF                           l2532 007A  
                         l2452 016E                           l2390 02C9                           l2438 02B5  
                         l2606 00F1                           l2518 0202                           l2462 017C  
                         l2454 0173                           l3174 037C                           l2704 029A  
                         l2552 0098                           l2544 008B                           l2616 0106  
                         l3176 01A2                           l2720 01B5                           l2386 0001  
                         l3178 0110                           l2466 017E                           l2482 0198  
                         l2810 0341                           l2802 035C                           l2572 00B4  
                         l2556 009A                           l2468 0183                           l2732 01D6  
                         l2804 0361                           l2590 00AB                           l2478 0194  
                         l2750 0240                           l2814 0346                           l2592 00D7  
                         l2752 025C                           l2824 0372                           l2674 020C  
                         l2594 00DC                           l2770 0283                           l2826 0384  
                         l2818 0352                           l2842 003B                           l2860 0646  
                         l2870 0157                           l2758 025D                           l2848 0638  
                         l2688 0234                           l2868 0150                           l2888 028B  
                         _main 0030                __end_of_AdcInit 0054                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 000B                           ttemp 007E  
                   RfTrcvGet@b 0072                           wtemp 007E              ___bmul@multiplier 004E  
                ?_MRF49XAReset 0070                   __CCBufCalcPt 014D                    ?i1_SPI_Read 0070  
                 __CCBufRdByte 012E                   __CCBufWrByte 060C                          ?_main 0070  
                        i1l200 05F7                          i1l202 05FD                          i1l210 05D9  
                        i1l203 05FE                          i1l207 05D2                          i1l209 05D8  
                        i1l493 0501                          i1l494 0511                     _RfHalRxGet 01B1  
                   _RfHalTxGet 01DD                     _RfHalRxPut 0209                     _RfHalTxPut 023A  
              ??_RfPacketReply 005C                  _RfTrcvCrcTick 0000                          fpbase 0000  
             __end_of_SPI_Read 033F                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F             __size_of_SPI_Write 0018  
      __size_of__CCBufPeekByte 0011             __CCBufPeekByte@res 0050                   SPI_Read@data 004C  
               ??_MRF49XAReset 0050                __initialization 000D                     _ExtIntInit 0054  
                 __end_of_main 0045                 _MRF49XACommand 02E7                     _RfTrcvMode 02AE  
        RfHalTickTxTh@txPacket 0028                 i1__CCBufCalcPt 0626              _MRF49XAReadStatus 0313  
         RfTrcvCrcTick@initial 004D                         ??_main 0065                    ?__CCBufInit 0070  
                 ?i1_SPI_Write 0070             ?_MRF49XAReadStatus 004E             __size_of_RfHalInit 0018  
          __CCBufRdReverse@qty 004F                 ?_RfTrcvCrcTick 004C                         _ADCON0 009D  
              RfHalTickRxTh@pt 005B                         _ADCON1 009E                         _ADCON2 009F  
                    ??_AdcInit 004C                         i1S3180 0402                RfHalTickTxTh@pt 0056  
          ??_MRF49XAReadStatus 0050                         _ANSELA 018C                         _ANSELB 018D  
                       _ANSELC 018E                         i1l3002 058C                         i1l3030 0534  
                       i1l3022 0528                         i1l3016 0520                         i1l3050 055D  
                       i1l3034 053A                         i1l3026 052E                         i1l3018 0523  
                       i1l3054 055F                         i1l3046 0553                         i1l3038 0541  
                       i1l3062 0567                         i1l3082 0515            __size_ofi1_SPI_Read 001B  
                       i1l3078 050E                         i1l2922 060A                         i1l2934 05D6  
                       i1l2946 0629                         i1l2948 0630                         _FVRCON 0117  
                       _OSCCON 0099           RfPacketReply@nodeTmp 005C    RfHalTickRxTh@pktRxByteIndex 0026  
           __size_of_RfTrcvGet 0009             __size_of_RfTrcvPut 0009         __end_of_MRF49XACommand 02F2  
          _RfPacketSimpleReply 03B2                 i1SPI_Read@data 0070                         ___bmul 0289  
       __end_ofi1__CCBufCalcPt 0632          RfPacketsTickTh@packet 0029      __end_of_MRF49XAReadStatus 0323  
                       _rfRxCC 0065                         _rfRxBf 0120                         _extInt 0004  
                       _memcpy 0295                         _memset 0644                         fptable 0500  
    RfPacketSimpleReply@packet 005A              __end_of_SPI_Write 030A                         fptotal 0000  
                  ?_RfHalRxGet 0070                    ?_RfHalTxGet 0070                    ?_RfHalRxPut 0070  
                  ?_RfHalTxPut 0070           ?_RfPacketSimpleReply 0058  __size_of_RfTrcvCarrierPresent 0009  
    __size_ofi1_MRF49XACommand 0009       __size_of__CCBufRdReverse 0007             MRF49XAReadStatus@w 0050  
      __end_of__initialization 002E               __CCBufRdByte@res 0050                   RfTrcvMode@tx 0050  
          __size_of__CCBufInit 0002       __size_of_RfPacketsTickTh 0047            ___bmul@multiplicand 004C  
              ?_MRF49XACommand 004E              __end_of_RfHalInit 0071                    ?_ExtIntInit 0070  
               __pcstackCOMMON 0070                   __pidataBANK0 0000                    ?_RfTrcvMode 0070  
              ?i1__CCBufCalcPt 0070                      ?_SPI_Read 0070   __size_ofi1_MRF49XAReadStatus 000E  
            __end_of_RfTrcvGet 0584          __end_of_RfHalTickRxTh 0125              __end_of_RfTrcvPut 057B  
        __end_of_RfHalTickTxTh 01B1                 _OPTION_REGbits 0095          ??_RfPacketSimpleReply 0059  
              ??_RfTrcvCrcTick 004D            __CCBufCalcPt@result 004E                   ?__CCBufCanRd 0070  
         __end_of_MRF49XAReset 02E7                   ?__CCBufCanWr 0070                   ?__CCBufReset 0070  
                ??_SysInitGpio 004C                     __pbssBANK0 0020                     __pbssBANK1 00A0  
                   __pbssBANK2 0120                 __CCBufPeekByte 015B              __CCBufCalcPt@move 004C  
               i1RfTrcvMode@tx 0074            __size_of_RfHalRxGet 002C            __size_of_RfHalTxGet 002C  
                   __pmaintext 0030            __size_of_RfHalRxPut 0031            __size_of_RfHalTxPut 004F  
                      ?___bmul 004C                   ??i1_SPI_Read 0070                     __pintentry 0004  
   __size_of_MRF49XAReadStatus 0010                        ?_extInt 0070                        ?_memcpy 004F  
                      ?_memset 004C                     ??_SPI_Read 004C                     _mrf49XaIsr 0501  
         __size_ofi1_SPI_Write 0014                     _mrf49State 0078                        _AdcInit 0045  
          __size_of_ExtIntInit 0005     RfHalTickRxTh@rxByteTimeout 0027            __size_of_RfTrcvMode 001B  
       __end_of__CCBufPeekByte 016C           i1__CCBufCalcPt@entry 0071             __end_ofi1_SPI_Read 060C  
                    SPI_Read@i 004D              ??__CCBufRdReverse 004F            __end_of_SysInitGpio 0402  
            _RfHalStatemachine 051F              RfPacketReply@data 0059                  SPI_Write@data 004C  
           ?_RfHalStatemachine 0070                __size_of___bmul 000C              ??_RfPacketsTickTh 005E  
      __size_ofi1_MRF49XAReset 0024                        _halPkTh 0046                __size_of_extInt 0007  
              __size_of_memcpy 0019                __size_of_memset 0013                   ??__CCBufInit 0052  
                      __ptext1 03EF                        __ptext2 033F                        __ptext3 03B2  
                      __ptext4 0386                        __ptext5 023A                        __ptext6 01B1  
                      __ptext7 016C                        __ptext8 030A                        __ptext9 0313  
          ??_RfHalStatemachine 0075               i1_MRF49XACommand 05C6          __end_of_RfPacketReply 03B2  
                ?i1_RfTrcvMode 0070                        clrloop0 0658           end_of_initialization 002E  
              ?__CCBufPeekByte 0070                        memcpy@d 0052                        memcpy@n 0050  
                      memcpy@s 0053     RfPacketSimpleReply@nodeTmp 0059                        memset@c 004C  
                      memset@n 004E                        memset@p 0051      __end_of_RfHalStatemachine 0572  
       RfPacketSimpleReply@msg 0058             __end_of__CCBufInit 015B       RfTrcvCarrierPresent@stat 0052  
                    _PORTAbits 000C                      _PORTCbits 000E          __size_of_MRF49XAReset 001E  
                 ??_RfHalRxGet 004F                   ??_RfHalTxGet 004F                   ??_RfHalRxPut 0055  
                  ?_mrf49XaIsr 0070                   ??_RfHalTxPut 0055                      _TRISAbits 008C  
                    _TRISBbits 008D                      _TRISCbits 008E                 ??i1_RfTrcvMode 0074  
                    _SPI_Write 02F2               RfHalTxPut@packet 0056           __size_of__CCBufCanRd 0009  
         __size_of__CCBufCanWr 0006                    _SysInitGpio 03EF               ??_MRF49XACommand 0050  
         __size_of__CCBufReset 000C            i1_MRF49XAReadStatus 05E3                  RfTrcvPut@byte 0074  
             ??i1__CCBufCalcPt 0071   __end_of_RfTrcvCarrierPresent 0313              MRF49XACommand@cmd 004E  
                 ??_ExtIntInit 004C             __end_of_RfHalRxGet 01DD             __end_of_RfHalTxGet 0209  
           __end_of_RfHalRxPut 023A                   _MRF49XAReset 02C9             __end_of_RfHalTxPut 0289  
                 ??_RfTrcvMode 0050                 __end_of___bmul 0295                i1SPI_Write@data 0070  
                    _RfHalInit 0059           ?i1_MRF49XAReadStatus 0072                 __end_of_extInt 000B  
               __end_of_memcpy 02AE                 __end_of_memset 0657              __size_of_SPI_Read 001C  
                  __end_ofPL20 03DA                    __end_ofPL22 03E0                    __end_ofPL14 03CF  
                  __end_ofPL24 03E5                    __end_ofPL16 03D4                    __end_ofPL26 03EA  
                  __end_ofPL18 0638                    __end_ofPL28 03EF            start_initialization 000D  
                 i1SPI_Write@i 0071                      _RfTrcvGet 057B                      _RfTrcvPut 0572  
                   ?_SPI_Write 0070              RfPacketsTickTh@pt 0064             __end_of_ExtIntInit 0059  
           __end_of_RfTrcvMode 02C9                 RfHalTickRxTh@b 0059     __size_of_RfHalStatemachine 0053  
          RfPacketReply@packet 005D            RfPacketReply@length 005A            __size_of_mrf49XaIsr 001E  
                     ??___bmul 004D                  ?__CCBufCalcPt 004C                  ?__CCBufRdByte 0070  
                  __pdataBANK0 0065                 i1_MRF49XAReset 05A2                       ??_extInt 0078  
  __end_of_RfPacketSimpleReply 03C9                       ??_memcpy 0052          ??i1_MRF49XAReadStatus 0074  
                   ?_RfHalInit 0070                       ??_memset 0050                  ?__CCBufWrByte 0070  
                  __pbssCOMMON 0078                      ___latbits 0001                  __pcstackBANK0 004C  
              __CCBufRdReverse 0146                     ?_RfTrcvGet 0070                     ?_RfTrcvPut 0070  
        __end_of_RfTrcvCrcTick 0000                       ?_AdcInit 0070             __CCBufCalcPt@entry 004D  
              _RfPacketsTickTh 033F                      _halRxBfTh 0048                      _halTxBfTh 004A  
       __size_of_RfHalTickRxTh 00B4         __size_of_RfHalTickTxTh 0045                 ??__CCBufCalcPt 004D  
     __end_ofi1_MRF49XACommand 05CF                      __pfunctab 0500         __end_ofi1_MRF49XAReset 05C6  
               ??__CCBufRdByte 004F           __end_ofi1_RfTrcvMode 05A2                 ??__CCBufWrByte 0073  
                ??i1_SPI_Write 0070                      __pswtext1 0402            i1__CCBufCalcPt@move 0070  
                    _rfPackets 00A0           _RfTrcvCarrierPresent 030A               ??__CCBufPeekByte 004F  
             RfPacketReply@msg 0058               RfPacketReply@opt 005B                    ??_SPI_Write 004C  
            __CCBufWrByte@data 0074                       _LATBbits 010D                       _LATCbits 010E  
                    clear_ram0 0657                ?i1_MRF49XAReset 0070                    ??_RfHalInit 0052  
                     _SPI_Read 0323        __end_of__CCBufRdReverse 014D                   ??_mrf49XaIsr 0076  
                _RfHalTickRxTh 0071                  _RfHalTickTxTh 016C             RfHalRxPut@rfPacket 0055  
        ?_RfTrcvCarrierPresent 0070          i1__CCBufCalcPt@result 0072              RfTrcvCrcTick@data 004C  
                  ??_RfTrcvGet 0072                    ??_RfTrcvPut 0074            __end_ofi1_SPI_Write 05E3  
      __end_of_RfPacketsTickTh 0386                    i1SPI_Read@i 0071               __size_of_AdcInit 000F  
                 ?_SysInitGpio 0070                     SPI_Write@i 004D             __end_of_mrf49XaIsr 051F  
       __size_of_RfPacketReply 002C                 ?_RfHalTickRxTh 0070                 ?_RfHalTickTxTh 0070  
                ??__CCBufCanRd 004F                  ??__CCBufCanWr 0070                       __ptext10 0323  
                     __ptext11 01DD                       __ptext20 0295                       __ptext12 0071  
                     __ptext21 0289                       __ptext13 0146                       __ptext30 0054  
                     __ptext22 0059                       __ptext14 012E                       __ptext31 0045  
                     __ptext23 0159                       __ptext15 015B                       __ptext40 0620  
                     __ptext24 0638                       __ptext16 0125                       __ptext41 0572  
                     __ptext33 0501                       __ptext25 0644                       __ptext17 014D  
                     __ptext42 05C6                       __ptext34 05E3                       __ptext26 02AE  
                     __ptext18 0000                       __ptext43 057B                       __ptext35 051F  
                     __ptext27 02C9                       __ptext19 0209                       __ptext44 05CF  
                     __ptext36 0584                       __ptext28 02E7                       __ptext45 05F1  
                     __ptext37 05A2                       __ptext29 02F2                       __ptext38 060C  
                     __ptext39 0626           __end_of__CCBufCalcPt 0159                  ??__CCBufReset 0052  
         __end_of__CCBufRdByte 0146           __end_of__CCBufWrByte 0620                  __size_of_main 0015  
                     _rfStatus 0020          __size_ofi1_RfTrcvMode 001E               ?__CCBufRdReverse 0070  
                  i1_SPI_Write 05CF         ??_RfTrcvCarrierPresent 0052                     _INTCONbits 000B  
          i1MRF49XACommand@cmd 0072                       memcpy@d1 0054                       memcpy@s1 004F  
                     memset@p1 0050                   i1_RfTrcvMode 0584                  _RfPacketReply 0386  
             ?_RfPacketsTickTh 0070                       intlevel1 0500            __end_of__CCBufCanRd 012E  
          __end_of__CCBufCanWr 0626            __end_of__CCBufReset 0644    __end_ofi1_MRF49XAReadStatus 05F1  
            ?i1_MRF49XACommand 0072        __size_of_MRF49XACommand 000B                     i1_SPI_Read 05F1  
           ??i1_MRF49XACommand 0074                    RfHalRxGet@i 004F                    RfHalTxGet@i 004F  
      __size_ofi1__CCBufCalcPt 000C                ??_RfHalTickRxTh 0057                ??_RfHalTickTxTh 0054  
                  RfHalRxPut@i 0056                    RfHalTxPut@i 0057      RfPacketsTickTh@scratchpad 0060  
 __size_of_RfPacketSimpleReply 0017                     RfHalInit@i 0052                 ?_RfPacketReply 0058  
         i1MRF49XAReadStatus@w 0074           __size_of_SysInitGpio 0013               ??i1_MRF49XAReset 0074  

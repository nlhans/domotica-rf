

Microchip Technology PIC PRO Macro Assembler V1.30 build 55553 
                                                                                               Sun Apr  6 10:04:09 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 55553
     1                           	processor	16LF1508
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text17,local,class=CODE,merge=1,delta=2
    18                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	swtext2,local,class=CONST,delta=2
    25                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text48,local,class=CODE,merge=1,delta=2
    27                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	functab,global,reloc=256,class=CODE,delta=2
    29                           	psect	pa_nodes,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0015                     	;# 
    50  0016                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001C                     	;# 
    58  008C                     	;# 
    59  008D                     	;# 
    60  008E                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0095                     	;# 
    65  0096                     	;# 
    66  0097                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010D                     	;# 
    77  010E                     	;# 
    78  0111                     	;# 
    79  0112                     	;# 
    80  0113                     	;# 
    81  0114                     	;# 
    82  0115                     	;# 
    83  0116                     	;# 
    84  0117                     	;# 
    85  0118                     	;# 
    86  0119                     	;# 
    87  011D                     	;# 
    88  018C                     	;# 
    89  018D                     	;# 
    90  018E                     	;# 
    91  0191                     	;# 
    92  0191                     	;# 
    93  0192                     	;# 
    94  0193                     	;# 
    95  0193                     	;# 
    96  0194                     	;# 
    97  0195                     	;# 
    98  0196                     	;# 
    99  0199                     	;# 
   100  019A                     	;# 
   101  019B                     	;# 
   102  019B                     	;# 
   103  019C                     	;# 
   104  019D                     	;# 
   105  019E                     	;# 
   106  019F                     	;# 
   107  020C                     	;# 
   108  020D                     	;# 
   109  0211                     	;# 
   110  0211                     	;# 
   111  0212                     	;# 
   112  0212                     	;# 
   113  0213                     	;# 
   114  0213                     	;# 
   115  0214                     	;# 
   116  0214                     	;# 
   117  0215                     	;# 
   118  0215                     	;# 
   119  0215                     	;# 
   120  0216                     	;# 
   121  0216                     	;# 
   122  0217                     	;# 
   123  0217                     	;# 
   124  0391                     	;# 
   125  0392                     	;# 
   126  0393                     	;# 
   127  0394                     	;# 
   128  0395                     	;# 
   129  0396                     	;# 
   130  0498                     	;# 
   131  0498                     	;# 
   132  0499                     	;# 
   133  049A                     	;# 
   134  049B                     	;# 
   135  049B                     	;# 
   136  049C                     	;# 
   137  049E                     	;# 
   138  049F                     	;# 
   139  0611                     	;# 
   140  0612                     	;# 
   141  0613                     	;# 
   142  0613                     	;# 
   143  0614                     	;# 
   144  0615                     	;# 
   145  0616                     	;# 
   146  0616                     	;# 
   147  0617                     	;# 
   148  0618                     	;# 
   149  0619                     	;# 
   150  0619                     	;# 
   151  061A                     	;# 
   152  061B                     	;# 
   153  061C                     	;# 
   154  061C                     	;# 
   155  0691                     	;# 
   156  0692                     	;# 
   157  0693                     	;# 
   158  0694                     	;# 
   159  0695                     	;# 
   160  0F0F                     	;# 
   161  0F10                     	;# 
   162  0F11                     	;# 
   163  0F12                     	;# 
   164  0F13                     	;# 
   165  0F14                     	;# 
   166  0F15                     	;# 
   167  0F16                     	;# 
   168  0F17                     	;# 
   169  0F18                     	;# 
   170  0F19                     	;# 
   171  0F1A                     	;# 
   172  0F1B                     	;# 
   173  0F1C                     	;# 
   174  0F1D                     	;# 
   175  0F1E                     	;# 
   176  0F1F                     	;# 
   177  0F20                     	;# 
   178  0F21                     	;# 
   179  0F22                     	;# 
   180  0F23                     	;# 
   181  0F24                     	;# 
   182  0F25                     	;# 
   183  0F26                     	;# 
   184  0F27                     	;# 
   185  0F28                     	;# 
   186  0F29                     	;# 
   187  0F2A                     	;# 
   188  0F2B                     	;# 
   189  0F2C                     	;# 
   190  0F2D                     	;# 
   191  0F2E                     	;# 
   192  0F2F                     	;# 
   193  0F8C                     	;# 
   194  0F8D                     	;# 
   195  0F91                     	;# 
   196  0F95                     	;# 
   197  0F96                     	;# 
   198  0F97                     	;# 
   199  0F9C                     	;# 
   200  0F9D                     	;# 
   201  0F9E                     	;# 
   202  0FE3                     	;# 
   203  0FE4                     	;# 
   204  0FE5                     	;# 
   205  0FE6                     	;# 
   206  0FE7                     	;# 
   207  0FE8                     	;# 
   208  0FE9                     	;# 
   209  0FEA                     	;# 
   210  0FEB                     	;# 
   211  0FED                     	;# 
   212  0FEE                     	;# 
   213  0FEF                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  008C                     	;# 
   242  008D                     	;# 
   243  008E                     	;# 
   244  0091                     	;# 
   245  0092                     	;# 
   246  0093                     	;# 
   247  0095                     	;# 
   248  0096                     	;# 
   249  0097                     	;# 
   250  0099                     	;# 
   251  009A                     	;# 
   252  009B                     	;# 
   253  009B                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  0111                     	;# 
   262  0112                     	;# 
   263  0113                     	;# 
   264  0114                     	;# 
   265  0115                     	;# 
   266  0116                     	;# 
   267  0117                     	;# 
   268  0118                     	;# 
   269  0119                     	;# 
   270  011D                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273  018E                     	;# 
   274  0191                     	;# 
   275  0191                     	;# 
   276  0192                     	;# 
   277  0193                     	;# 
   278  0193                     	;# 
   279  0194                     	;# 
   280  0195                     	;# 
   281  0196                     	;# 
   282  0199                     	;# 
   283  019A                     	;# 
   284  019B                     	;# 
   285  019B                     	;# 
   286  019C                     	;# 
   287  019D                     	;# 
   288  019E                     	;# 
   289  019F                     	;# 
   290  020C                     	;# 
   291  020D                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  0212                     	;# 
   295  0212                     	;# 
   296  0213                     	;# 
   297  0213                     	;# 
   298  0214                     	;# 
   299  0214                     	;# 
   300  0215                     	;# 
   301  0215                     	;# 
   302  0215                     	;# 
   303  0216                     	;# 
   304  0216                     	;# 
   305  0217                     	;# 
   306  0217                     	;# 
   307  0391                     	;# 
   308  0392                     	;# 
   309  0393                     	;# 
   310  0394                     	;# 
   311  0395                     	;# 
   312  0396                     	;# 
   313  0498                     	;# 
   314  0498                     	;# 
   315  0499                     	;# 
   316  049A                     	;# 
   317  049B                     	;# 
   318  049B                     	;# 
   319  049C                     	;# 
   320  049E                     	;# 
   321  049F                     	;# 
   322  0611                     	;# 
   323  0612                     	;# 
   324  0613                     	;# 
   325  0613                     	;# 
   326  0614                     	;# 
   327  0615                     	;# 
   328  0616                     	;# 
   329  0616                     	;# 
   330  0617                     	;# 
   331  0618                     	;# 
   332  0619                     	;# 
   333  0619                     	;# 
   334  061A                     	;# 
   335  061B                     	;# 
   336  061C                     	;# 
   337  061C                     	;# 
   338  0691                     	;# 
   339  0692                     	;# 
   340  0693                     	;# 
   341  0694                     	;# 
   342  0695                     	;# 
   343  0F0F                     	;# 
   344  0F10                     	;# 
   345  0F11                     	;# 
   346  0F12                     	;# 
   347  0F13                     	;# 
   348  0F14                     	;# 
   349  0F15                     	;# 
   350  0F16                     	;# 
   351  0F17                     	;# 
   352  0F18                     	;# 
   353  0F19                     	;# 
   354  0F1A                     	;# 
   355  0F1B                     	;# 
   356  0F1C                     	;# 
   357  0F1D                     	;# 
   358  0F1E                     	;# 
   359  0F1F                     	;# 
   360  0F20                     	;# 
   361  0F21                     	;# 
   362  0F22                     	;# 
   363  0F23                     	;# 
   364  0F24                     	;# 
   365  0F25                     	;# 
   366  0F26                     	;# 
   367  0F27                     	;# 
   368  0F28                     	;# 
   369  0F29                     	;# 
   370  0F2A                     	;# 
   371  0F2B                     	;# 
   372  0F2C                     	;# 
   373  0F2D                     	;# 
   374  0F2E                     	;# 
   375  0F2F                     	;# 
   376  0F8C                     	;# 
   377  0F8D                     	;# 
   378  0F91                     	;# 
   379  0F95                     	;# 
   380  0F96                     	;# 
   381  0F97                     	;# 
   382  0F9C                     	;# 
   383  0F9D                     	;# 
   384  0F9E                     	;# 
   385  0FE3                     	;# 
   386  0FE4                     	;# 
   387  0FE5                     	;# 
   388  0FE6                     	;# 
   389  0FE7                     	;# 
   390  0FE8                     	;# 
   391  0FE9                     	;# 
   392  0FEA                     	;# 
   393  0FEB                     	;# 
   394  0FED                     	;# 
   395  0FEE                     	;# 
   396  0FEF                     	;# 
   397  0000                     	;# 
   398  0001                     	;# 
   399  0002                     	;# 
   400  0003                     	;# 
   401  0004                     	;# 
   402  0005                     	;# 
   403  0006                     	;# 
   404  0007                     	;# 
   405  0008                     	;# 
   406  0009                     	;# 
   407  000A                     	;# 
   408  000B                     	;# 
   409  000C                     	;# 
   410  000D                     	;# 
   411  000E                     	;# 
   412  0011                     	;# 
   413  0012                     	;# 
   414  0013                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  0111                     	;# 
   445  0112                     	;# 
   446  0113                     	;# 
   447  0114                     	;# 
   448  0115                     	;# 
   449  0116                     	;# 
   450  0117                     	;# 
   451  0118                     	;# 
   452  0119                     	;# 
   453  011D                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456  018E                     	;# 
   457  0191                     	;# 
   458  0191                     	;# 
   459  0192                     	;# 
   460  0193                     	;# 
   461  0193                     	;# 
   462  0194                     	;# 
   463  0195                     	;# 
   464  0196                     	;# 
   465  0199                     	;# 
   466  019A                     	;# 
   467  019B                     	;# 
   468  019B                     	;# 
   469  019C                     	;# 
   470  019D                     	;# 
   471  019E                     	;# 
   472  019F                     	;# 
   473  020C                     	;# 
   474  020D                     	;# 
   475  0211                     	;# 
   476  0211                     	;# 
   477  0212                     	;# 
   478  0212                     	;# 
   479  0213                     	;# 
   480  0213                     	;# 
   481  0214                     	;# 
   482  0214                     	;# 
   483  0215                     	;# 
   484  0215                     	;# 
   485  0215                     	;# 
   486  0216                     	;# 
   487  0216                     	;# 
   488  0217                     	;# 
   489  0217                     	;# 
   490  0391                     	;# 
   491  0392                     	;# 
   492  0393                     	;# 
   493  0394                     	;# 
   494  0395                     	;# 
   495  0396                     	;# 
   496  0498                     	;# 
   497  0498                     	;# 
   498  0499                     	;# 
   499  049A                     	;# 
   500  049B                     	;# 
   501  049B                     	;# 
   502  049C                     	;# 
   503  049E                     	;# 
   504  049F                     	;# 
   505  0611                     	;# 
   506  0612                     	;# 
   507  0613                     	;# 
   508  0613                     	;# 
   509  0614                     	;# 
   510  0615                     	;# 
   511  0616                     	;# 
   512  0616                     	;# 
   513  0617                     	;# 
   514  0618                     	;# 
   515  0619                     	;# 
   516  0619                     	;# 
   517  061A                     	;# 
   518  061B                     	;# 
   519  061C                     	;# 
   520  061C                     	;# 
   521  0691                     	;# 
   522  0692                     	;# 
   523  0693                     	;# 
   524  0694                     	;# 
   525  0695                     	;# 
   526  0F0F                     	;# 
   527  0F10                     	;# 
   528  0F11                     	;# 
   529  0F12                     	;# 
   530  0F13                     	;# 
   531  0F14                     	;# 
   532  0F15                     	;# 
   533  0F16                     	;# 
   534  0F17                     	;# 
   535  0F18                     	;# 
   536  0F19                     	;# 
   537  0F1A                     	;# 
   538  0F1B                     	;# 
   539  0F1C                     	;# 
   540  0F1D                     	;# 
   541  0F1E                     	;# 
   542  0F1F                     	;# 
   543  0F20                     	;# 
   544  0F21                     	;# 
   545  0F22                     	;# 
   546  0F23                     	;# 
   547  0F24                     	;# 
   548  0F25                     	;# 
   549  0F26                     	;# 
   550  0F27                     	;# 
   551  0F28                     	;# 
   552  0F29                     	;# 
   553  0F2A                     	;# 
   554  0F2B                     	;# 
   555  0F2C                     	;# 
   556  0F2D                     	;# 
   557  0F2E                     	;# 
   558  0F2F                     	;# 
   559  0F8C                     	;# 
   560  0F8D                     	;# 
   561  0F91                     	;# 
   562  0F95                     	;# 
   563  0F96                     	;# 
   564  0F97                     	;# 
   565  0F9C                     	;# 
   566  0F9D                     	;# 
   567  0F9E                     	;# 
   568  0FE3                     	;# 
   569  0FE4                     	;# 
   570  0FE5                     	;# 
   571  0FE6                     	;# 
   572  0FE7                     	;# 
   573  0FE8                     	;# 
   574  0FE9                     	;# 
   575  0FEA                     	;# 
   576  0FEB                     	;# 
   577  0FED                     	;# 
   578  0FEE                     	;# 
   579  0FEF                     	;# 
   580  0000                     	;# 
   581  0001                     	;# 
   582  0002                     	;# 
   583  0003                     	;# 
   584  0004                     	;# 
   585  0005                     	;# 
   586  0006                     	;# 
   587  0007                     	;# 
   588  0008                     	;# 
   589  0009                     	;# 
   590  000A                     	;# 
   591  000B                     	;# 
   592  000C                     	;# 
   593  000D                     	;# 
   594  000E                     	;# 
   595  0011                     	;# 
   596  0012                     	;# 
   597  0013                     	;# 
   598  0015                     	;# 
   599  0016                     	;# 
   600  0016                     	;# 
   601  0017                     	;# 
   602  0018                     	;# 
   603  0019                     	;# 
   604  001A                     	;# 
   605  001B                     	;# 
   606  001C                     	;# 
   607  008C                     	;# 
   608  008D                     	;# 
   609  008E                     	;# 
   610  0091                     	;# 
   611  0092                     	;# 
   612  0093                     	;# 
   613  0095                     	;# 
   614  0096                     	;# 
   615  0097                     	;# 
   616  0099                     	;# 
   617  009A                     	;# 
   618  009B                     	;# 
   619  009B                     	;# 
   620  009C                     	;# 
   621  009D                     	;# 
   622  009E                     	;# 
   623  009F                     	;# 
   624  010C                     	;# 
   625  010D                     	;# 
   626  010E                     	;# 
   627  0111                     	;# 
   628  0112                     	;# 
   629  0113                     	;# 
   630  0114                     	;# 
   631  0115                     	;# 
   632  0116                     	;# 
   633  0117                     	;# 
   634  0118                     	;# 
   635  0119                     	;# 
   636  011D                     	;# 
   637  018C                     	;# 
   638  018D                     	;# 
   639  018E                     	;# 
   640  0191                     	;# 
   641  0191                     	;# 
   642  0192                     	;# 
   643  0193                     	;# 
   644  0193                     	;# 
   645  0194                     	;# 
   646  0195                     	;# 
   647  0196                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019D                     	;# 
   654  019E                     	;# 
   655  019F                     	;# 
   656  020C                     	;# 
   657  020D                     	;# 
   658  0211                     	;# 
   659  0211                     	;# 
   660  0212                     	;# 
   661  0212                     	;# 
   662  0213                     	;# 
   663  0213                     	;# 
   664  0214                     	;# 
   665  0214                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  0391                     	;# 
   674  0392                     	;# 
   675  0393                     	;# 
   676  0394                     	;# 
   677  0395                     	;# 
   678  0396                     	;# 
   679  0498                     	;# 
   680  0498                     	;# 
   681  0499                     	;# 
   682  049A                     	;# 
   683  049B                     	;# 
   684  049B                     	;# 
   685  049C                     	;# 
   686  049E                     	;# 
   687  049F                     	;# 
   688  0611                     	;# 
   689  0612                     	;# 
   690  0613                     	;# 
   691  0613                     	;# 
   692  0614                     	;# 
   693  0615                     	;# 
   694  0616                     	;# 
   695  0616                     	;# 
   696  0617                     	;# 
   697  0618                     	;# 
   698  0619                     	;# 
   699  0619                     	;# 
   700  061A                     	;# 
   701  061B                     	;# 
   702  061C                     	;# 
   703  061C                     	;# 
   704  0691                     	;# 
   705  0692                     	;# 
   706  0693                     	;# 
   707  0694                     	;# 
   708  0695                     	;# 
   709  0F0F                     	;# 
   710  0F10                     	;# 
   711  0F11                     	;# 
   712  0F12                     	;# 
   713  0F13                     	;# 
   714  0F14                     	;# 
   715  0F15                     	;# 
   716  0F16                     	;# 
   717  0F17                     	;# 
   718  0F18                     	;# 
   719  0F19                     	;# 
   720  0F1A                     	;# 
   721  0F1B                     	;# 
   722  0F1C                     	;# 
   723  0F1D                     	;# 
   724  0F1E                     	;# 
   725  0F1F                     	;# 
   726  0F20                     	;# 
   727  0F21                     	;# 
   728  0F22                     	;# 
   729  0F23                     	;# 
   730  0F24                     	;# 
   731  0F25                     	;# 
   732  0F26                     	;# 
   733  0F27                     	;# 
   734  0F28                     	;# 
   735  0F29                     	;# 
   736  0F2A                     	;# 
   737  0F2B                     	;# 
   738  0F2C                     	;# 
   739  0F2D                     	;# 
   740  0F2E                     	;# 
   741  0F2F                     	;# 
   742  0F8C                     	;# 
   743  0F8D                     	;# 
   744  0F91                     	;# 
   745  0F95                     	;# 
   746  0F96                     	;# 
   747  0F97                     	;# 
   748  0F9C                     	;# 
   749  0F9D                     	;# 
   750  0F9E                     	;# 
   751  0FE3                     	;# 
   752  0FE4                     	;# 
   753  0FE5                     	;# 
   754  0FE6                     	;# 
   755  0FE7                     	;# 
   756  0FE8                     	;# 
   757  0FE9                     	;# 
   758  0FEA                     	;# 
   759  0FEB                     	;# 
   760  0FED                     	;# 
   761  0FEE                     	;# 
   762  0FEF                     	;# 
   763  0000                     	;# 
   764  0001                     	;# 
   765  0002                     	;# 
   766  0003                     	;# 
   767  0004                     	;# 
   768  0005                     	;# 
   769  0006                     	;# 
   770  0007                     	;# 
   771  0008                     	;# 
   772  0009                     	;# 
   773  000A                     	;# 
   774  000B                     	;# 
   775  000C                     	;# 
   776  000D                     	;# 
   777  000E                     	;# 
   778  0011                     	;# 
   779  0012                     	;# 
   780  0013                     	;# 
   781  0015                     	;# 
   782  0016                     	;# 
   783  0016                     	;# 
   784  0017                     	;# 
   785  0018                     	;# 
   786  0019                     	;# 
   787  001A                     	;# 
   788  001B                     	;# 
   789  001C                     	;# 
   790  008C                     	;# 
   791  008D                     	;# 
   792  008E                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0095                     	;# 
   797  0096                     	;# 
   798  0097                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009B                     	;# 
   803  009C                     	;# 
   804  009D                     	;# 
   805  009E                     	;# 
   806  009F                     	;# 
   807  010C                     	;# 
   808  010D                     	;# 
   809  010E                     	;# 
   810  0111                     	;# 
   811  0112                     	;# 
   812  0113                     	;# 
   813  0114                     	;# 
   814  0115                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  0118                     	;# 
   818  0119                     	;# 
   819  011D                     	;# 
   820  018C                     	;# 
   821  018D                     	;# 
   822  018E                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0199                     	;# 
   832  019A                     	;# 
   833  019B                     	;# 
   834  019B                     	;# 
   835  019C                     	;# 
   836  019D                     	;# 
   837  019E                     	;# 
   838  019F                     	;# 
   839  020C                     	;# 
   840  020D                     	;# 
   841  0211                     	;# 
   842  0211                     	;# 
   843  0212                     	;# 
   844  0212                     	;# 
   845  0213                     	;# 
   846  0213                     	;# 
   847  0214                     	;# 
   848  0214                     	;# 
   849  0215                     	;# 
   850  0215                     	;# 
   851  0215                     	;# 
   852  0216                     	;# 
   853  0216                     	;# 
   854  0217                     	;# 
   855  0217                     	;# 
   856  0391                     	;# 
   857  0392                     	;# 
   858  0393                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  0498                     	;# 
   863  0498                     	;# 
   864  0499                     	;# 
   865  049A                     	;# 
   866  049B                     	;# 
   867  049B                     	;# 
   868  049C                     	;# 
   869  049E                     	;# 
   870  049F                     	;# 
   871  0611                     	;# 
   872  0612                     	;# 
   873  0613                     	;# 
   874  0613                     	;# 
   875  0614                     	;# 
   876  0615                     	;# 
   877  0616                     	;# 
   878  0616                     	;# 
   879  0617                     	;# 
   880  0618                     	;# 
   881  0619                     	;# 
   882  0619                     	;# 
   883  061A                     	;# 
   884  061B                     	;# 
   885  061C                     	;# 
   886  061C                     	;# 
   887  0691                     	;# 
   888  0692                     	;# 
   889  0693                     	;# 
   890  0694                     	;# 
   891  0695                     	;# 
   892  0F0F                     	;# 
   893  0F10                     	;# 
   894  0F11                     	;# 
   895  0F12                     	;# 
   896  0F13                     	;# 
   897  0F14                     	;# 
   898  0F15                     	;# 
   899  0F16                     	;# 
   900  0F17                     	;# 
   901  0F18                     	;# 
   902  0F19                     	;# 
   903  0F1A                     	;# 
   904  0F1B                     	;# 
   905  0F1C                     	;# 
   906  0F1D                     	;# 
   907  0F1E                     	;# 
   908  0F1F                     	;# 
   909  0F20                     	;# 
   910  0F21                     	;# 
   911  0F22                     	;# 
   912  0F23                     	;# 
   913  0F24                     	;# 
   914  0F25                     	;# 
   915  0F26                     	;# 
   916  0F27                     	;# 
   917  0F28                     	;# 
   918  0F29                     	;# 
   919  0F2A                     	;# 
   920  0F2B                     	;# 
   921  0F2C                     	;# 
   922  0F2D                     	;# 
   923  0F2E                     	;# 
   924  0F2F                     	;# 
   925  0F8C                     	;# 
   926  0F8D                     	;# 
   927  0F91                     	;# 
   928  0F95                     	;# 
   929  0F96                     	;# 
   930  0F97                     	;# 
   931  0F9C                     	;# 
   932  0F9D                     	;# 
   933  0F9E                     	;# 
   934  0FE3                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE9                     	;# 
   941  0FEA                     	;# 
   942  0FEB                     	;# 
   943  0FED                     	;# 
   944  0FEE                     	;# 
   945  0FEF                     	;# 
   946  0000                     	;# 
   947  0001                     	;# 
   948  0002                     	;# 
   949  0003                     	;# 
   950  0004                     	;# 
   951  0005                     	;# 
   952  0006                     	;# 
   953  0007                     	;# 
   954  0008                     	;# 
   955  0009                     	;# 
   956  000A                     	;# 
   957  000B                     	;# 
   958  000C                     	;# 
   959  000D                     	;# 
   960  000E                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0013                     	;# 
   964  0015                     	;# 
   965  0016                     	;# 
   966  0016                     	;# 
   967  0017                     	;# 
   968  0018                     	;# 
   969  0019                     	;# 
   970  001A                     	;# 
   971  001B                     	;# 
   972  001C                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0099                     	;# 
   983  009A                     	;# 
   984  009B                     	;# 
   985  009B                     	;# 
   986  009C                     	;# 
   987  009D                     	;# 
   988  009E                     	;# 
   989  009F                     	;# 
   990  010C                     	;# 
   991  010D                     	;# 
   992  010E                     	;# 
   993  0111                     	;# 
   994  0112                     	;# 
   995  0113                     	;# 
   996  0114                     	;# 
   997  0115                     	;# 
   998  0116                     	;# 
   999  0117                     	;# 
  1000  0118                     	;# 
  1001  0119                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0199                     	;# 
  1015  019A                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020C                     	;# 
  1023  020D                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0391                     	;# 
  1040  0392                     	;# 
  1041  0393                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0498                     	;# 
  1046  0498                     	;# 
  1047  0499                     	;# 
  1048  049A                     	;# 
  1049  049B                     	;# 
  1050  049B                     	;# 
  1051  049C                     	;# 
  1052  049E                     	;# 
  1053  049F                     	;# 
  1054  0611                     	;# 
  1055  0612                     	;# 
  1056  0613                     	;# 
  1057  0613                     	;# 
  1058  0614                     	;# 
  1059  0615                     	;# 
  1060  0616                     	;# 
  1061  0616                     	;# 
  1062  0617                     	;# 
  1063  0618                     	;# 
  1064  0619                     	;# 
  1065  0619                     	;# 
  1066  061A                     	;# 
  1067  061B                     	;# 
  1068  061C                     	;# 
  1069  061C                     	;# 
  1070  0691                     	;# 
  1071  0692                     	;# 
  1072  0693                     	;# 
  1073  0694                     	;# 
  1074  0695                     	;# 
  1075  0F0F                     	;# 
  1076  0F10                     	;# 
  1077  0F11                     	;# 
  1078  0F12                     	;# 
  1079  0F13                     	;# 
  1080  0F14                     	;# 
  1081  0F15                     	;# 
  1082  0F16                     	;# 
  1083  0F17                     	;# 
  1084  0F18                     	;# 
  1085  0F19                     	;# 
  1086  0F1A                     	;# 
  1087  0F1B                     	;# 
  1088  0F1C                     	;# 
  1089  0F1D                     	;# 
  1090  0F1E                     	;# 
  1091  0F1F                     	;# 
  1092  0F20                     	;# 
  1093  0F21                     	;# 
  1094  0F22                     	;# 
  1095  0F23                     	;# 
  1096  0F24                     	;# 
  1097  0F25                     	;# 
  1098  0F26                     	;# 
  1099  0F27                     	;# 
  1100  0F28                     	;# 
  1101  0F29                     	;# 
  1102  0F2A                     	;# 
  1103  0F2B                     	;# 
  1104  0F2C                     	;# 
  1105  0F2D                     	;# 
  1106  0F2E                     	;# 
  1107  0F2F                     	;# 
  1108  0F8C                     	;# 
  1109  0F8D                     	;# 
  1110  0F91                     	;# 
  1111  0F95                     	;# 
  1112  0F96                     	;# 
  1113  0F97                     	;# 
  1114  0F9C                     	;# 
  1115  0F9D                     	;# 
  1116  0F9E                     	;# 
  1117  0FE3                     	;# 
  1118  0FE4                     	;# 
  1119  0FE5                     	;# 
  1120  0FE6                     	;# 
  1121  0FE7                     	;# 
  1122  0FE8                     	;# 
  1123  0FE9                     	;# 
  1124  0FEA                     	;# 
  1125  0FEB                     	;# 
  1126  0FED                     	;# 
  1127  0FEE                     	;# 
  1128  0FEF                     	;# 
  1129  0000                     	;# 
  1130  0001                     	;# 
  1131  0002                     	;# 
  1132  0003                     	;# 
  1133  0004                     	;# 
  1134  0005                     	;# 
  1135  0006                     	;# 
  1136  0007                     	;# 
  1137  0008                     	;# 
  1138  0009                     	;# 
  1139  000A                     	;# 
  1140  000B                     	;# 
  1141  000C                     	;# 
  1142  000D                     	;# 
  1143  000E                     	;# 
  1144  0011                     	;# 
  1145  0012                     	;# 
  1146  0013                     	;# 
  1147  0015                     	;# 
  1148  0016                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001C                     	;# 
  1156  008C                     	;# 
  1157  008D                     	;# 
  1158  008E                     	;# 
  1159  0091                     	;# 
  1160  0092                     	;# 
  1161  0093                     	;# 
  1162  0095                     	;# 
  1163  0096                     	;# 
  1164  0097                     	;# 
  1165  0099                     	;# 
  1166  009A                     	;# 
  1167  009B                     	;# 
  1168  009B                     	;# 
  1169  009C                     	;# 
  1170  009D                     	;# 
  1171  009E                     	;# 
  1172  009F                     	;# 
  1173  010C                     	;# 
  1174  010D                     	;# 
  1175  010E                     	;# 
  1176  0111                     	;# 
  1177  0112                     	;# 
  1178  0113                     	;# 
  1179  0114                     	;# 
  1180  0115                     	;# 
  1181  0116                     	;# 
  1182  0117                     	;# 
  1183  0118                     	;# 
  1184  0119                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0199                     	;# 
  1198  019A                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  019D                     	;# 
  1203  019E                     	;# 
  1204  019F                     	;# 
  1205  020C                     	;# 
  1206  020D                     	;# 
  1207  0211                     	;# 
  1208  0211                     	;# 
  1209  0212                     	;# 
  1210  0212                     	;# 
  1211  0213                     	;# 
  1212  0213                     	;# 
  1213  0214                     	;# 
  1214  0214                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0215                     	;# 
  1218  0216                     	;# 
  1219  0216                     	;# 
  1220  0217                     	;# 
  1221  0217                     	;# 
  1222  0391                     	;# 
  1223  0392                     	;# 
  1224  0393                     	;# 
  1225  0394                     	;# 
  1226  0395                     	;# 
  1227  0396                     	;# 
  1228  0498                     	;# 
  1229  0498                     	;# 
  1230  0499                     	;# 
  1231  049A                     	;# 
  1232  049B                     	;# 
  1233  049B                     	;# 
  1234  049C                     	;# 
  1235  049E                     	;# 
  1236  049F                     	;# 
  1237  0611                     	;# 
  1238  0612                     	;# 
  1239  0613                     	;# 
  1240  0613                     	;# 
  1241  0614                     	;# 
  1242  0615                     	;# 
  1243  0616                     	;# 
  1244  0616                     	;# 
  1245  0617                     	;# 
  1246  0618                     	;# 
  1247  0619                     	;# 
  1248  0619                     	;# 
  1249  061A                     	;# 
  1250  061B                     	;# 
  1251  061C                     	;# 
  1252  061C                     	;# 
  1253  0691                     	;# 
  1254  0692                     	;# 
  1255  0693                     	;# 
  1256  0694                     	;# 
  1257  0695                     	;# 
  1258  0F0F                     	;# 
  1259  0F10                     	;# 
  1260  0F11                     	;# 
  1261  0F12                     	;# 
  1262  0F13                     	;# 
  1263  0F14                     	;# 
  1264  0F15                     	;# 
  1265  0F16                     	;# 
  1266  0F17                     	;# 
  1267  0F18                     	;# 
  1268  0F19                     	;# 
  1269  0F1A                     	;# 
  1270  0F1B                     	;# 
  1271  0F1C                     	;# 
  1272  0F1D                     	;# 
  1273  0F1E                     	;# 
  1274  0F1F                     	;# 
  1275  0F20                     	;# 
  1276  0F21                     	;# 
  1277  0F22                     	;# 
  1278  0F23                     	;# 
  1279  0F24                     	;# 
  1280  0F25                     	;# 
  1281  0F26                     	;# 
  1282  0F27                     	;# 
  1283  0F28                     	;# 
  1284  0F29                     	;# 
  1285  0F2A                     	;# 
  1286  0F2B                     	;# 
  1287  0F2C                     	;# 
  1288  0F2D                     	;# 
  1289  0F2E                     	;# 
  1290  0F2F                     	;# 
  1291  0F8C                     	;# 
  1292  0F8D                     	;# 
  1293  0F91                     	;# 
  1294  0F95                     	;# 
  1295  0F96                     	;# 
  1296  0F97                     	;# 
  1297  0F9C                     	;# 
  1298  0F9D                     	;# 
  1299  0F9E                     	;# 
  1300  0FE3                     	;# 
  1301  0FE4                     	;# 
  1302  0FE5                     	;# 
  1303  0FE6                     	;# 
  1304  0FE7                     	;# 
  1305  0FE8                     	;# 
  1306  0FE9                     	;# 
  1307  0FEA                     	;# 
  1308  0FEB                     	;# 
  1309  0FED                     	;# 
  1310  0FEE                     	;# 
  1311  0FEF                     	;# 
  1312  0000                     	;# 
  1313  0001                     	;# 
  1314  0002                     	;# 
  1315  0003                     	;# 
  1316  0004                     	;# 
  1317  0005                     	;# 
  1318  0006                     	;# 
  1319  0007                     	;# 
  1320  0008                     	;# 
  1321  0009                     	;# 
  1322  000A                     	;# 
  1323  000B                     	;# 
  1324  000C                     	;# 
  1325  000D                     	;# 
  1326  000E                     	;# 
  1327  0011                     	;# 
  1328  0012                     	;# 
  1329  0013                     	;# 
  1330  0015                     	;# 
  1331  0016                     	;# 
  1332  0016                     	;# 
  1333  0017                     	;# 
  1334  0018                     	;# 
  1335  0019                     	;# 
  1336  001A                     	;# 
  1337  001B                     	;# 
  1338  001C                     	;# 
  1339  008C                     	;# 
  1340  008D                     	;# 
  1341  008E                     	;# 
  1342  0091                     	;# 
  1343  0092                     	;# 
  1344  0093                     	;# 
  1345  0095                     	;# 
  1346  0096                     	;# 
  1347  0097                     	;# 
  1348  0099                     	;# 
  1349  009A                     	;# 
  1350  009B                     	;# 
  1351  009B                     	;# 
  1352  009C                     	;# 
  1353  009D                     	;# 
  1354  009E                     	;# 
  1355  009F                     	;# 
  1356  010C                     	;# 
  1357  010D                     	;# 
  1358  010E                     	;# 
  1359  0111                     	;# 
  1360  0112                     	;# 
  1361  0113                     	;# 
  1362  0114                     	;# 
  1363  0115                     	;# 
  1364  0116                     	;# 
  1365  0117                     	;# 
  1366  0118                     	;# 
  1367  0119                     	;# 
  1368  011D                     	;# 
  1369  018C                     	;# 
  1370  018D                     	;# 
  1371  018E                     	;# 
  1372  0191                     	;# 
  1373  0191                     	;# 
  1374  0192                     	;# 
  1375  0193                     	;# 
  1376  0193                     	;# 
  1377  0194                     	;# 
  1378  0195                     	;# 
  1379  0196                     	;# 
  1380  0199                     	;# 
  1381  019A                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019C                     	;# 
  1385  019D                     	;# 
  1386  019E                     	;# 
  1387  019F                     	;# 
  1388  020C                     	;# 
  1389  020D                     	;# 
  1390  0211                     	;# 
  1391  0211                     	;# 
  1392  0212                     	;# 
  1393  0212                     	;# 
  1394  0213                     	;# 
  1395  0213                     	;# 
  1396  0214                     	;# 
  1397  0214                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0215                     	;# 
  1401  0216                     	;# 
  1402  0216                     	;# 
  1403  0217                     	;# 
  1404  0217                     	;# 
  1405  0391                     	;# 
  1406  0392                     	;# 
  1407  0393                     	;# 
  1408  0394                     	;# 
  1409  0395                     	;# 
  1410  0396                     	;# 
  1411  0498                     	;# 
  1412  0498                     	;# 
  1413  0499                     	;# 
  1414  049A                     	;# 
  1415  049B                     	;# 
  1416  049B                     	;# 
  1417  049C                     	;# 
  1418  049E                     	;# 
  1419  049F                     	;# 
  1420  0611                     	;# 
  1421  0612                     	;# 
  1422  0613                     	;# 
  1423  0613                     	;# 
  1424  0614                     	;# 
  1425  0615                     	;# 
  1426  0616                     	;# 
  1427  0616                     	;# 
  1428  0617                     	;# 
  1429  0618                     	;# 
  1430  0619                     	;# 
  1431  0619                     	;# 
  1432  061A                     	;# 
  1433  061B                     	;# 
  1434  061C                     	;# 
  1435  061C                     	;# 
  1436  0691                     	;# 
  1437  0692                     	;# 
  1438  0693                     	;# 
  1439  0694                     	;# 
  1440  0695                     	;# 
  1441  0F0F                     	;# 
  1442  0F10                     	;# 
  1443  0F11                     	;# 
  1444  0F12                     	;# 
  1445  0F13                     	;# 
  1446  0F14                     	;# 
  1447  0F15                     	;# 
  1448  0F16                     	;# 
  1449  0F17                     	;# 
  1450  0F18                     	;# 
  1451  0F19                     	;# 
  1452  0F1A                     	;# 
  1453  0F1B                     	;# 
  1454  0F1C                     	;# 
  1455  0F1D                     	;# 
  1456  0F1E                     	;# 
  1457  0F1F                     	;# 
  1458  0F20                     	;# 
  1459  0F21                     	;# 
  1460  0F22                     	;# 
  1461  0F23                     	;# 
  1462  0F24                     	;# 
  1463  0F25                     	;# 
  1464  0F26                     	;# 
  1465  0F27                     	;# 
  1466  0F28                     	;# 
  1467  0F29                     	;# 
  1468  0F2A                     	;# 
  1469  0F2B                     	;# 
  1470  0F2C                     	;# 
  1471  0F2D                     	;# 
  1472  0F2E                     	;# 
  1473  0F2F                     	;# 
  1474  0F8C                     	;# 
  1475  0F8D                     	;# 
  1476  0F91                     	;# 
  1477  0F95                     	;# 
  1478  0F96                     	;# 
  1479  0F97                     	;# 
  1480  0F9C                     	;# 
  1481  0F9D                     	;# 
  1482  0F9E                     	;# 
  1483  0FE3                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0011                     	;# 
  1511  0012                     	;# 
  1512  0013                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0093                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  009F                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0111                     	;# 
  1543  0112                     	;# 
  1544  0113                     	;# 
  1545  0114                     	;# 
  1546  0115                     	;# 
  1547  0116                     	;# 
  1548  0117                     	;# 
  1549  0118                     	;# 
  1550  0119                     	;# 
  1551  011D                     	;# 
  1552  018C                     	;# 
  1553  018D                     	;# 
  1554  018E                     	;# 
  1555  0191                     	;# 
  1556  0191                     	;# 
  1557  0192                     	;# 
  1558  0193                     	;# 
  1559  0193                     	;# 
  1560  0194                     	;# 
  1561  0195                     	;# 
  1562  0196                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020C                     	;# 
  1572  020D                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0391                     	;# 
  1589  0392                     	;# 
  1590  0393                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0498                     	;# 
  1595  0498                     	;# 
  1596  0499                     	;# 
  1597  049A                     	;# 
  1598  049B                     	;# 
  1599  049B                     	;# 
  1600  049C                     	;# 
  1601  049E                     	;# 
  1602  049F                     	;# 
  1603  0611                     	;# 
  1604  0612                     	;# 
  1605  0613                     	;# 
  1606  0613                     	;# 
  1607  0614                     	;# 
  1608  0615                     	;# 
  1609  0616                     	;# 
  1610  0616                     	;# 
  1611  0617                     	;# 
  1612  0618                     	;# 
  1613  0619                     	;# 
  1614  0619                     	;# 
  1615  061A                     	;# 
  1616  061B                     	;# 
  1617  061C                     	;# 
  1618  061C                     	;# 
  1619  0691                     	;# 
  1620  0692                     	;# 
  1621  0693                     	;# 
  1622  0694                     	;# 
  1623  0695                     	;# 
  1624  0F0F                     	;# 
  1625  0F10                     	;# 
  1626  0F11                     	;# 
  1627  0F12                     	;# 
  1628  0F13                     	;# 
  1629  0F14                     	;# 
  1630  0F15                     	;# 
  1631  0F16                     	;# 
  1632  0F17                     	;# 
  1633  0F18                     	;# 
  1634  0F19                     	;# 
  1635  0F1A                     	;# 
  1636  0F1B                     	;# 
  1637  0F1C                     	;# 
  1638  0F1D                     	;# 
  1639  0F1E                     	;# 
  1640  0F1F                     	;# 
  1641  0F20                     	;# 
  1642  0F21                     	;# 
  1643  0F22                     	;# 
  1644  0F23                     	;# 
  1645  0F24                     	;# 
  1646  0F25                     	;# 
  1647  0F26                     	;# 
  1648  0F27                     	;# 
  1649  0F28                     	;# 
  1650  0F29                     	;# 
  1651  0F2A                     	;# 
  1652  0F2B                     	;# 
  1653  0F2C                     	;# 
  1654  0F2D                     	;# 
  1655  0F2E                     	;# 
  1656  0F2F                     	;# 
  1657  0F8C                     	;# 
  1658  0F8D                     	;# 
  1659  0F91                     	;# 
  1660  0F95                     	;# 
  1661  0F96                     	;# 
  1662  0F97                     	;# 
  1663  0F9C                     	;# 
  1664  0F9D                     	;# 
  1665  0F9E                     	;# 
  1666  0FE3                     	;# 
  1667  0FE4                     	;# 
  1668  0FE5                     	;# 
  1669  0FE6                     	;# 
  1670  0FE7                     	;# 
  1671  0FE8                     	;# 
  1672  0FE9                     	;# 
  1673  0FEA                     	;# 
  1674  0FEB                     	;# 
  1675  0FED                     	;# 
  1676  0FEE                     	;# 
  1677  0FEF                     	;# 
  1678                           
  1679                           	psect	idataBANK0
  1680  0000                     __pidataBANK0:	
  1681  000B                     _INTCONbits	set	11
  1682  000C                     _PORTAbits	set	12
  1683  000E                     _PORTCbits	set	14
  1684  009D                     _ADCON0	set	157
  1685  009E                     _ADCON1	set	158
  1686  009F                     _ADCON2	set	159
  1687  0095                     _OPTION_REGbits	set	149
  1688  0099                     _OSCCON	set	153
  1689  008C                     _TRISAbits	set	140
  1690  008D                     _TRISBbits	set	141
  1691  008E                     _TRISCbits	set	142
  1692  0117                     _FVRCON	set	279
  1693  010C                     _LATAbits	set	268
  1694  010D                     _LATBbits	set	269
  1695  010E                     _LATCbits	set	270
  1696  018C                     _ANSELA	set	396
  1697  018D                     _ANSELB	set	397
  1698  018E                     _ANSELC	set	398
  1699  020C                     _WPUAbits	set	524
  1700                           
  1701                           	psect	cinit
  1702  000F                     start_initialization:	
  1703                           ; #config settings
  1704                           
  1705  000F                     __initialization:	
  1706                           
  1707                           ; Clear objects allocated to BANK0
  1708  000F  3020               	movlw	low __pbssBANK0
  1709  0010  0084               	movwf	4
  1710  0011  3000               	movlw	high __pbssBANK0
  1711  0012  0085               	movwf	5
  1712  0013  3017               	movlw	23
  1713  0014  3187  2774  3180   	fcall	clear_ram0
  1714                           
  1715                           ; Clear objects allocated to BANK1
  1716  0017  30A0               	movlw	low __pbssBANK1
  1717  0018  0084               	movwf	4
  1718  0019  3000               	movlw	high __pbssBANK1
  1719  001A  0085               	movwf	5
  1720  001B  3038               	movlw	56
  1721  001C  3187  2774  3180   	fcall	clear_ram0
  1722                           
  1723                           ; Clear objects allocated to BANK2
  1724  001F  3020               	movlw	low __pbssBANK2
  1725  0020  0084               	movwf	4
  1726  0021  3001               	movlw	high __pbssBANK2
  1727  0022  0085               	movwf	5
  1728  0023  3030               	movlw	48
  1729  0024  3187  2774  3180   	fcall	clear_ram0
  1730                           
  1731                           ;initializer for _rfRxCC
  1732  0027  3020               	movlw	_rfRxBf& (0+255)
  1733  0028  00C2               	movwf	__pdataBANK0& (0+127)
  1734  0029  3030               	movlw	48
  1735  002A  00C3               	movwf	(__pdataBANK0+1)& (0+127)
  1736  002B  3000               	movlw	0
  1737  002C  00C4               	movwf	(__pdataBANK0+2)& (0+127)
  1738  002D  00C5               	movwf	(__pdataBANK0+3)& (0+127)
  1739  002E                     end_of_initialization:	
  1740                           ;End of C runtime variable initialization code
  1741                           
  1742  002E                     __end_of__initialization:	
  1743  002E  0020               	movlb	0
  1744  002F  2830               	ljmp	_main	;jump to C main() function
  1745  0030                     __pmaintext:	
  1746 ;;
  1747 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1748 ;;
  1749 ;; *************** function _main *****************
  1750 ;; Defined at:
  1751 ;;		line 60 in file "../../../src/node/main.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;		None               void
  1758 ;; Registers used:
  1759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1760 ;; Tracked objects:
  1761 ;;		On entry : 17F/0
  1762 ;;		On exit  : 1F/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1765 ;;      Params:         0       0       0       0
  1766 ;;      Locals:         0       0       0       0
  1767 ;;      Temps:          0       0       0       0
  1768 ;;      Totals:         0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels required when called:   15
  1771 ;; This function calls:
  1772 ;;		_AdcInit
  1773 ;;		_ExtIntInit
  1774 ;;		_MRF49XAInit
  1775 ;;		_RfHalInit
  1776 ;;		_RfHalTickRxTh
  1777 ;;		_RfHalTickTxTh
  1778 ;;		_RfPacketsTickTh
  1779 ;;		_RfTrcvStatus
  1780 ;;		_SysInitGpio
  1781 ;;		_mrf49XaIsr
  1782 ;; This function is called by:
  1783 ;;		Startup code after reset
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function _main
  1789  0030                     _main:	
  1790                           
  1791                           ;main.c: 63: OSCCON = 0b01111000;
  1792                           
  1793                           ;incstack = 0
  1794                           ; Regs used in _main: [allreg]
  1795  0030  3078               	movlw	120
  1796  0031  0021               	movlb	1	; select bank1
  1797  0032  0099               	movwf	25	;volatile
  1798                           
  1799                           ;main.c: 65: SysInitGpio();
  1800  0033  23A2  3180         	fcall	_SysInitGpio
  1801                           
  1802                           ;main.c: 66: AdcInit();
  1803  0035  2064  3180         	fcall	_AdcInit
  1804                           
  1805                           ;main.c: 68: ExtIntInit();
  1806  0037  2073  3180         	fcall	_ExtIntInit
  1807                           
  1808                           ;main.c: 70: MRF49XAInit();
  1809  0039  20AB  3180         	fcall	_MRF49XAInit
  1810                           
  1811                           ;main.c: 71: RfHalInit();
  1812  003B  218A  3180         	fcall	_RfHalInit
  1813  003D                     l3129:	
  1814                           
  1815                           ;main.c: 74: {
  1816                           ;main.c: 75: if (PORTAbits.RA2 == 0) mrf49XaIsr();
  1817  003D  190C               	btfsc	12,2	;volatile
  1818  003E  2842               	goto	l657
  1819  003F  3186  265B  3180   	fcall	_mrf49XaIsr
  1820  0042                     l657:	
  1821                           
  1822                           ;main.c: 77: RfHalTickRxTh(&halRxBfTh);
  1823  0042  3031               	movlw	_halRxBfTh& (0+255)
  1824  0043  21B5               	fcall	_RfHalTickRxTh
  1825                           
  1826                           ;main.c: 79: RfPacketsTickTh(&halPkTh);
  1827  0044  302F               	movlw	_halPkTh& (0+255)
  1828  0045  3185  2592  3180   	fcall	_RfPacketsTickTh
  1829                           
  1830                           ;main.c: 81: RfHalTickTxTh(&halTxBfTh);
  1831  0048  3033               	movlw	_halTxBfTh& (0+255)
  1832  0049  234D  3180         	fcall	_RfHalTickTxTh
  1833                           
  1834                           ;main.c: 83: RfTrcvStatus();
  1835  004B  230B  3180         	fcall	_RfTrcvStatus
  1836                           
  1837                           ;main.c: 85: dl1 = 100;
  1838  004D  3064               	movlw	100
  1839  004E  0020               	movlb	0	; select bank0
  1840  004F  00A9               	movwf	_dl1
  1841                           
  1842                           ;main.c: 86: isr = 0;
  1843  0050  01AB               	clrf	_isr	;volatile
  1844                           
  1845                           ;main.c: 87: while (dl1 > 0 && isr == 0)
  1846  0051  285D               	goto	l3153
  1847  0052                     l3143:	
  1848                           
  1849                           ;main.c: 88: {
  1850                           ;main.c: 89: dl2 = 0xFF;
  1851  0052  30FF               	movlw	255
  1852  0053  00AA               	movwf	_dl2
  1853                           
  1854                           ;main.c: 90: while (dl2 != 1 && isr == 0) dl2--;
  1855  0054  2856               	goto	l3147
  1856  0055                     l3145:	
  1857  0055  03AA               	decf	_dl2,f
  1858  0056                     l3147:	
  1859  0056  032A               	decf	_dl2,w
  1860  0057  1903               	skipnz
  1861  0058  285C               	goto	l3151
  1862  0059  082B               	movf	_isr,w	;volatile
  1863  005A  1903               	btfsc	3,2
  1864  005B  2855               	goto	l3145
  1865  005C                     l3151:	
  1866                           
  1867                           ;main.c: 91: dl1--;
  1868  005C  03A9               	decf	_dl1,f
  1869  005D                     l3153:	
  1870  005D  0829               	movf	_dl1,w
  1871  005E  1903               	btfsc	3,2
  1872  005F  283D               	goto	l3129
  1873  0060  082B               	movf	_isr,w	;volatile
  1874  0061  1903               	btfsc	3,2
  1875  0062  2852               	goto	l3143
  1876  0063  283D               	goto	l3129
  1877  0064                     __end_of_main:	
  1878  0064                     __ptext40:	
  1879 ;; *************** function _AdcInit *****************
  1880 ;; Defined at:
  1881 ;;		line 4 in file "../../../src/bsp/pic16/adc16.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;		None               void
  1888 ;; Registers used:
  1889 ;;		wreg, status,2
  1890 ;; Tracked objects:
  1891 ;;		On entry : 17F/2
  1892 ;;		On exit  : 17F/1
  1893 ;;		Unchanged: 160/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1895 ;;      Params:         0       0       0       0
  1896 ;;      Locals:         0       0       0       0
  1897 ;;      Temps:          0       0       0       0
  1898 ;;      Totals:         0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    8
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _AdcInit
  1911  0064                     _AdcInit:	
  1912                           
  1913                           ;adc16.c: 6: ANSELA = 0;
  1914                           
  1915                           ;incstack = 0
  1916                           ; Regs used in _AdcInit: [wreg+status,2]
  1917  0064  0023               	movlb	3	; select bank3
  1918  0065  018C               	clrf	12	;volatile
  1919                           
  1920                           ;adc16.c: 7: ANSELB = 0;
  1921  0066  018D               	clrf	13	;volatile
  1922                           
  1923                           ;adc16.c: 8: ANSELC = 0;
  1924  0067  018E               	clrf	14	;volatile
  1925                           
  1926                           ;adc16.c: 10: FVRCON = 0b11100001;
  1927  0068  30E1               	movlw	225
  1928  0069  0022               	movlb	2	; select bank2
  1929  006A  0097               	movwf	23	;volatile
  1930                           
  1931                           ;adc16.c: 12: ADCON2 = 0b00000000;
  1932  006B  0021               	movlb	1	; select bank1
  1933  006C  019F               	clrf	31	;volatile
  1934                           
  1935                           ;adc16.c: 13: ADCON1 = 0b11110000;
  1936  006D  30F0               	movlw	240
  1937  006E  009E               	movwf	30	;volatile
  1938                           
  1939                           ;adc16.c: 14: ADCON0 = 0b00000000;
  1940  006F  019D               	clrf	29	;volatile
  1941                           
  1942                           ;adc16.c: 16: ADCON0 = 0b00010011;
  1943  0070  3013               	movlw	19
  1944  0071  009D               	movwf	29	;volatile
  1945  0072  0008               	return
  1946  0073                     __end_of_AdcInit:	
  1947  0073                     __ptext39:	
  1948 ;; *************** function _ExtIntInit *****************
  1949 ;; Defined at:
  1950 ;;		line 8 in file "../../../src/bsp/pic16/interrupt.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;		None               void
  1957 ;; Registers used:
  1958 ;;		None
  1959 ;; Tracked objects:
  1960 ;;		On entry : 17F/1
  1961 ;;		On exit  : 17F/1
  1962 ;;		Unchanged: 160/0
  1963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1964 ;;      Params:         0       0       0       0
  1965 ;;      Locals:         0       0       0       0
  1966 ;;      Temps:          0       0       0       0
  1967 ;;      Totals:         0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    8
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		_main
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           
  1979                           ;psect for function _ExtIntInit
  1980  0073                     _ExtIntInit:	
  1981                           
  1982                           ;interrupt.c: 10: OPTION_REGbits.INTEDG = 0;
  1983                           
  1984                           ;incstack = 0
  1985                           ; Regs used in _ExtIntInit: []
  1986  0073  1315               	bcf	21,6	;volatile
  1987                           
  1988                           ;interrupt.c: 12: INTCONbits.INTF = 0;
  1989  0074  108B               	bcf	11,1	;volatile
  1990                           
  1991                           ;interrupt.c: 13: INTCONbits.INTE = 1;
  1992  0075  160B               	bsf	11,4	;volatile
  1993                           
  1994                           ;interrupt.c: 14: INTCONbits.GIE = 1;
  1995  0076  178B               	bsf	11,7	;volatile
  1996  0077  0008               	return
  1997  0078                     __end_of_ExtIntInit:	
  1998  0078                     __ptext35:	
  1999 ;; *************** function _RfTrcvSetup *****************
  2000 ;; Defined at:
  2001 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  tx              1    wreg     unsigned char 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  tx              1    4[BANK0 ] unsigned char 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;		None               void
  2008 ;; Registers used:
  2009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 1D/0
  2012 ;;		On exit  : 1F/2
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2015 ;;      Params:         0       0       0       0
  2016 ;;      Locals:         0       1       0       0
  2017 ;;      Temps:          0       0       0       0
  2018 ;;      Totals:         0       1       0       0
  2019 ;;Total ram usage:        1 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:   11
  2022 ;; This function calls:
  2023 ;;		_MRF49XACommand
  2024 ;;		_RfTrcvPut
  2025 ;; This function is called by:
  2026 ;;		_MRF49XAInit
  2027 ;;		_RfTrcvMode
  2028 ;;		_mrf49XaIsr
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           
  2033                           ;psect for function _RfTrcvSetup
  2034  0078                     _RfTrcvSetup:	
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _RfTrcvSetup: [allreg]
  2038                           ;RfTrcvSetup@tx stored from wreg
  2039  0078  0020               	movlb	0	; select bank0
  2040  0079  00BB               	movwf	RfTrcvSetup@tx
  2041                           
  2042                           ;mrf49xa.c: 63: if (tx)
  2043  007A  083B               	movf	RfTrcvSetup@tx,w
  2044  007B  1903               	btfsc	3,2
  2045  007C  288E               	goto	l2593
  2046                           
  2047                           ;mrf49xa.c: 64: {
  2048                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  2049  007D  3082               	movlw	130
  2050  007E  01B8               	clrf	MRF49XACommand@cmd
  2051  007F  00B9               	movwf	MRF49XACommand@cmd+1
  2052  0080  212A  3180         	fcall	_MRF49XACommand
  2053                           
  2054                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  2055  0082  30A8               	movlw	168
  2056  0083  23D6  3180         	fcall	PL138	;call to abstracted procedure
  2057  0085  212A  3180         	fcall	_MRF49XACommand
  2058                           
  2059                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  2060  0087  3020               	movlw	32
  2061  0088  23E1  3180         	fcall	PL142	;call to abstracted procedure
  2062  008A  212A               	fcall	_MRF49XACommand
  2063                           
  2064                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  2065  008B  3055               	movlw	85
  2066  008C  3186  2EC9         	ljmp	_RfTrcvPut
  2067  008E                     l2593:	
  2068                           ;mrf49xa.c: 71: }
  2069                           
  2070                           
  2071                           ;mrf49xa.c: 72: else
  2072                           ;mrf49xa.c: 73: {
  2073                           ;mrf49xa.c: 74: MRF49XACommand(0x8200);
  2074  008E  3000               	movlw	0
  2075  008F  00B8               	movwf	MRF49XACommand@cmd
  2076  0090  3082               	movlw	130
  2077  0091  00B9               	movwf	MRF49XACommand@cmd+1
  2078  0092  212A  3180         	fcall	_MRF49XACommand
  2079                           
  2080                           ;mrf49xa.c: 75: MRF49XACommand(0xCA81);
  2081  0094  3081               	movlw	129
  2082  0095  23D1  3180         	fcall	PL136	;call to abstracted procedure
  2083  0097  212A  3180         	fcall	_MRF49XACommand
  2084                           
  2085                           ;mrf49xa.c: 76: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  2086  0099  3028               	movlw	40
  2087  009A  23D6  3180         	fcall	PL138	;call to abstracted procedure
  2088  009C  212A  3180         	fcall	_MRF49XACommand
  2089                           
  2090                           ;mrf49xa.c: 77: MRF49XACommand(0x8200 | 0x0080);
  2091  009E  3080               	movlw	128
  2092  009F  23E1  3180         	fcall	PL142	;call to abstracted procedure
  2093  00A1  212A  3180         	fcall	_MRF49XACommand
  2094                           
  2095                           ;mrf49xa.c: 78: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  2096  00A3  3068               	movlw	104
  2097  00A4  23D6  3180         	fcall	PL138	;call to abstracted procedure
  2098  00A6  212A  3180         	fcall	_MRF49XACommand
  2099                           
  2100                           ;mrf49xa.c: 79: MRF49XACommand(0xCA81 | 0x0002);
  2101  00A8  23CB  3180         	fcall	PL134	;call to abstracted procedure
  2102  00AA  292A               	ljmp	l2491
  2103  00AB                     __end_of_RfTrcvSetup:	
  2104  00AB                     __ptext34:	
  2105 ;; *************** function _MRF49XAInit *****************
  2106 ;; Defined at:
  2107 ;;		line 83 in file "../../../src/devices/mrf49xa.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;		None
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  j               1    6[BANK0 ] unsigned char 
  2112 ;;  i               1    5[BANK0 ] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;		None               void
  2115 ;; Registers used:
  2116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 17F/1
  2119 ;;		On exit  : 1F/4
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2122 ;;      Params:         0       0       0       0
  2123 ;;      Locals:         0       2       0       0
  2124 ;;      Temps:          0       0       0       0
  2125 ;;      Totals:         0       2       0       0
  2126 ;;Total ram usage:        2 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:   12
  2129 ;; This function calls:
  2130 ;;		_MRF49XACommand
  2131 ;;		_RfTrcvSetup
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           
  2138                           ;psect for function _MRF49XAInit
  2139  00AB                     _MRF49XAInit:	
  2140                           
  2141                           ;mrf49xa.c: 86: UI08_t i, j;
  2142                           ;mrf49xa.c: 89: LATCbits.LATC1 = 1;
  2143                           
  2144                           ;incstack = 0
  2145                           ; Regs used in _MRF49XAInit: [allreg]
  2146  00AB  0022               	movlb	2	; select bank2
  2147  00AC  148E               	bsf	14,1	;volatile
  2148                           
  2149                           ;mrf49xa.c: 90: LATAbits.LATA4 = 0;
  2150  00AD  120C               	bcf	12,4	;volatile
  2151                           
  2152                           ;mrf49xa.c: 91: LATAbits.LATA5 = 0;
  2153  00AE  128C               	bcf	12,5	;volatile
  2154  00AF  0000               	nop	;# 
  2155                           
  2156                           ;mrf49xa.c: 93: LATAbits.LATA4 = 1;
  2157  00B0  0022               	movlb	2	; select bank2
  2158  00B1  160C               	bsf	12,4	;volatile
  2159                           
  2160                           ;mrf49xa.c: 94: LATAbits.LATA5 = 1;
  2161  00B2  168C               	bsf	12,5	;volatile
  2162                           
  2163                           ;mrf49xa.c: 96: LATCbits.LATC4 = 1;
  2164  00B3  160E               	bsf	14,4	;volatile
  2165                           
  2166                           ;mrf49xa.c: 101: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  2167  00B4  0020               	movlb	0	; select bank0
  2168  00B5  01BC               	clrf	MRF49XAInit@i
  2169  00B6                     l2603:	
  2170  00B6  01BD               	clrf	MRF49XAInit@j
  2171  00B7                     l191:	
  2172  00B7  0000               	nop	;# 
  2173  00B8  23E6  3180         	fcall	PL144	;call to abstracted procedure
  2174  00BA  1C03               	skipc
  2175  00BB  28B7               	goto	l191
  2176  00BC  30FA               	movlw	250
  2177  00BD  0ABC               	incf	MRF49XAInit@i,f
  2178  00BE  023C               	subwf	MRF49XAInit@i,w
  2179  00BF  1C03               	skipc
  2180  00C0  28B6               	goto	l2603
  2181                           
  2182                           ;mrf49xa.c: 104: MRF49XACommand(0xCA81);
  2183  00C1  3081               	movlw	129
  2184  00C2  00B8               	movwf	MRF49XACommand@cmd
  2185  00C3  30CA               	movlw	202
  2186  00C4  00B9               	movwf	MRF49XACommand@cmd+1
  2187  00C5  212A  3180         	fcall	_MRF49XACommand
  2188                           
  2189                           ;mrf49xa.c: 105: MRF49XACommand(0xCA81 | 0x0002);
  2190  00C7  23CB  3180         	fcall	PL134	;call to abstracted procedure
  2191  00C9  212A  3180         	fcall	_MRF49XACommand
  2192                           
  2193                           ;mrf49xa.c: 106: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  2194  00CB  3028               	movlw	40
  2195  00CC  23D6  3180         	fcall	PL138	;call to abstracted procedure
  2196  00CE  212A  3180         	fcall	_MRF49XACommand
  2197                           
  2198                           ;mrf49xa.c: 107: MRF49XACommand(0xC4D7);
  2199  00D0  30D7               	movlw	215
  2200  00D1  0020               	movlb	0	; select bank0
  2201  00D2  00B8               	movwf	MRF49XACommand@cmd
  2202  00D3  30C4               	movlw	196
  2203  00D4  00B9               	movwf	MRF49XACommand@cmd+1
  2204  00D5  212A  3180         	fcall	_MRF49XACommand
  2205                           
  2206                           ;mrf49xa.c: 108: MRF49XACommand(0xA860);
  2207  00D7  3060               	movlw	96
  2208  00D8  0020               	movlb	0	; select bank0
  2209  00D9  00B8               	movwf	MRF49XACommand@cmd
  2210  00DA  30A8               	movlw	168
  2211  00DB  00B9               	movwf	MRF49XACommand@cmd+1
  2212  00DC  212A  3180         	fcall	_MRF49XACommand
  2213                           
  2214                           ;mrf49xa.c: 109: MRF49XACommand(0xC611);
  2215  00DE  3011               	movlw	17
  2216  00DF  0020               	movlb	0	; select bank0
  2217  00E0  00B8               	movwf	MRF49XACommand@cmd
  2218  00E1  30C6               	movlw	198
  2219  00E2  00B9               	movwf	MRF49XACommand@cmd+1
  2220  00E3  212A  3180         	fcall	_MRF49XACommand
  2221                           
  2222                           ;mrf49xa.c: 110: MRF49XACommand(0x8200);
  2223  00E5  3000               	movlw	0
  2224  00E6  23E1  3180         	fcall	PL142	;call to abstracted procedure
  2225  00E8  212A  3180         	fcall	_MRF49XACommand
  2226                           
  2227                           ;mrf49xa.c: 111: MRF49XACommand((0x9460 | 0x0000 | 0x0003));
  2228  00EA  3063               	movlw	99
  2229  00EB  0020               	movlb	0	; select bank0
  2230  00EC  00B8               	movwf	MRF49XACommand@cmd
  2231  00ED  3094               	movlw	148
  2232  00EE  00B9               	movwf	MRF49XACommand@cmd+1
  2233  00EF  212A  3180         	fcall	_MRF49XACommand
  2234                           
  2235                           ;mrf49xa.c: 112: MRF49XACommand(0x9890);
  2236  00F1  3090               	movlw	144
  2237  00F2  0020               	movlb	0	; select bank0
  2238  00F3  00B8               	movwf	MRF49XACommand@cmd
  2239  00F4  3098               	movlw	152
  2240  00F5  00B9               	movwf	MRF49XACommand@cmd+1
  2241  00F6  212A  3180         	fcall	_MRF49XACommand
  2242                           
  2243                           ;mrf49xa.c: 113: MRF49XACommand(0xC2AC);
  2244  00F8  30AC               	movlw	172
  2245  00F9  0020               	movlb	0	; select bank0
  2246  00FA  00B8               	movwf	MRF49XACommand@cmd
  2247  00FB  30C2               	movlw	194
  2248  00FC  00B9               	movwf	MRF49XACommand@cmd+1
  2249  00FD  212A  3180         	fcall	_MRF49XACommand
  2250                           
  2251                           ;mrf49xa.c: 114: MRF49XACommand(0x8200 | 0x0020);
  2252  00FF  3020               	movlw	32
  2253  0100  23E1  3180         	fcall	PL142	;call to abstracted procedure
  2254  0102  212A  3180         	fcall	_MRF49XACommand
  2255                           
  2256                           ;mrf49xa.c: 119: for (i = 0; i < 250; i++) for (j = 0; j < 250; j++) asm ("nop");
  2257  0104  0020               	movlb	0	; select bank0
  2258  0105  01BC               	clrf	MRF49XAInit@i
  2259  0106                     l2625:	
  2260  0106  01BD               	clrf	MRF49XAInit@j
  2261  0107                     l195:	
  2262  0107  0000               	nop	;# 
  2263  0108  23E6  3180         	fcall	PL144	;call to abstracted procedure
  2264  010A  1C03               	skipc
  2265  010B  2907               	goto	l195
  2266  010C  30FA               	movlw	250
  2267  010D  0ABC               	incf	MRF49XAInit@i,f
  2268  010E  023C               	subwf	MRF49XAInit@i,w
  2269  010F  1C03               	skipc
  2270  0110  2906               	goto	l2625
  2271                           
  2272                           ;mrf49xa.c: 122: MRF49XACommand(0x8200 | 0x0080);
  2273  0111  3080               	movlw	128
  2274  0112  00B8               	movwf	MRF49XACommand@cmd
  2275  0113  3082               	movlw	130
  2276  0114  00B9               	movwf	MRF49XACommand@cmd+1
  2277  0115  212A  3180         	fcall	_MRF49XACommand
  2278                           
  2279                           ;mrf49xa.c: 123: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  2280  0117  3068               	movlw	104
  2281  0118  23D6  3180         	fcall	PL138	;call to abstracted procedure
  2282  011A  212A  3180         	fcall	_MRF49XACommand
  2283                           
  2284                           ;mrf49xa.c: 124: MRF49XACommand(0xCA81);
  2285  011C  3081               	movlw	129
  2286  011D  23D1  3180         	fcall	PL136	;call to abstracted procedure
  2287  011F  212A  3180         	fcall	_MRF49XACommand
  2288                           
  2289                           ;mrf49xa.c: 125: MRF49XACommand(0xCA81 | 0x0002);
  2290  0121  23CB  3180         	fcall	PL134	;call to abstracted procedure
  2291  0123  212A  3180         	fcall	_MRF49XACommand
  2292                           
  2293                           ;mrf49xa.c: 127: RfTrcvSetup(0);
  2294  0125  3000               	movlw	0
  2295  0126  2078               	fcall	_RfTrcvSetup
  2296                           
  2297                           ;mrf49xa.c: 135: WPUAbits.WPUA2 = 1;
  2298  0127  0024               	movlb	4	; select bank4
  2299  0128  150C               	bsf	12,2	;volatile
  2300  0129  0008               	return
  2301  012A                     __end_of_MRF49XAInit:	
  2302  012A                     __ptext37:	
  2303 ;; *************** function _MRF49XACommand *****************
  2304 ;; Defined at:
  2305 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;  cmd             2    1[BANK0 ] unsigned int 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;		None
  2310 ;; Return value:  Size  Location     Type
  2311 ;;		None               void
  2312 ;; Registers used:
  2313 ;;		wreg, status,2, status,0, pclath, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 1F/0
  2316 ;;		On exit  : 1F/2
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2319 ;;      Params:         0       2       0       0
  2320 ;;      Locals:         0       0       0       0
  2321 ;;      Temps:          0       0       0       0
  2322 ;;      Totals:         0       2       0       0
  2323 ;;Total ram usage:        2 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    9
  2326 ;; This function calls:
  2327 ;;		_SPI_Write
  2328 ;; This function is called by:
  2329 ;;		_RfTrcvPut
  2330 ;;		_RfTrcvSetup
  2331 ;;		_MRF49XAInit
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           
  2336                           ;psect for function _MRF49XACommand
  2337  012A                     _MRF49XACommand:	
  2338  012A                     l2491:	
  2339                           ;incstack = 0
  2340                           ; Regs used in _MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  2341                           
  2342                           
  2343                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  2344  012A  0022               	movlb	2	; select bank2
  2345  012B  130E               	bcf	14,6	;volatile
  2346                           
  2347                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  2348  012C  0020               	movlb	0	; select bank0
  2349  012D  0839               	movf	MRF49XACommand@cmd+1,w
  2350  012E  2135  3180         	fcall	_SPI_Write
  2351                           
  2352                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  2353  0130  0020               	movlb	0	; select bank0
  2354  0131  0838               	movf	MRF49XACommand@cmd,w
  2355  0132  2135               	fcall	_SPI_Write
  2356                           
  2357                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  2358  0133  170E               	bsf	14,6	;volatile
  2359  0134  0008               	return
  2360  0135                     __end_of_MRF49XACommand:	
  2361  0135                     __ptext38:	
  2362 ;; *************** function _SPI_Write *****************
  2363 ;; Defined at:
  2364 ;;		line 191 in file "../../../src/devices/mrf49xa.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  data            1    wreg     unsigned char 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  data            1    0[BANK0 ] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;		None               void
  2371 ;; Registers used:
  2372 ;;		wreg
  2373 ;; Tracked objects:
  2374 ;;		On entry : 1D/2
  2375 ;;		On exit  : 1F/2
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2378 ;;      Params:         0       0       0       0
  2379 ;;      Locals:         0       1       0       0
  2380 ;;      Temps:          0       0       0       0
  2381 ;;      Totals:         0       1       0       0
  2382 ;;Total ram usage:        1 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    8
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_RfTrcvGet
  2389 ;;		_MRF49XACommand
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _SPI_Write
  2395  0135                     _SPI_Write:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _SPI_Write: [wreg]
  2399                           ;SPI_Write@data stored from wreg
  2400  0135  0020               	movlb	0	; select bank0
  2401  0136  00B7               	movwf	SPI_Write@data
  2402                           
  2403                           ;mrf49xa.c: 198: LATCbits.LATC7 = 0;
  2404  0137  0022               	movlb	2	; select bank2
  2405  0138  138E               	bcf	14,7	;volatile
  2406  0139  0020               	movlb	0	; select bank0
  2407  013A  1FB7               	btfss	SPI_Write@data,7
  2408  013B  293F               	goto	l228
  2409  013C  0022               	movlb	2	; select bank2
  2410  013D  178D               	bsf	13,7	;volatile
  2411  013E  2941               	goto	l229
  2412  013F                     l228:	
  2413  013F  0022               	movlb	2	; select bank2
  2414  0140  138D               	bcf	13,7	;volatile
  2415  0141                     l229:	
  2416  0141  178E               	bsf	14,7	;volatile
  2417  0142  138E               	bcf	14,7	;volatile
  2418  0143  0020               	movlb	0	; select bank0
  2419  0144  1F37               	btfss	SPI_Write@data,6
  2420  0145  2949               	goto	l232
  2421  0146  0022               	movlb	2	; select bank2
  2422  0147  178D               	bsf	13,7	;volatile
  2423  0148  294B               	goto	l233
  2424  0149                     l232:	
  2425  0149  0022               	movlb	2	; select bank2
  2426  014A  138D               	bcf	13,7	;volatile
  2427  014B                     l233:	
  2428  014B  178E               	bsf	14,7	;volatile
  2429  014C  138E               	bcf	14,7	;volatile
  2430  014D  0020               	movlb	0	; select bank0
  2431  014E  1EB7               	btfss	SPI_Write@data,5
  2432  014F  2953               	goto	l236
  2433  0150  0022               	movlb	2	; select bank2
  2434  0151  178D               	bsf	13,7	;volatile
  2435  0152  2955               	goto	l237
  2436  0153                     l236:	
  2437  0153  0022               	movlb	2	; select bank2
  2438  0154  138D               	bcf	13,7	;volatile
  2439  0155                     l237:	
  2440  0155  178E               	bsf	14,7	;volatile
  2441  0156  138E               	bcf	14,7	;volatile
  2442  0157  0020               	movlb	0	; select bank0
  2443  0158  1E37               	btfss	SPI_Write@data,4
  2444  0159  295D               	goto	l240
  2445  015A  0022               	movlb	2	; select bank2
  2446  015B  178D               	bsf	13,7	;volatile
  2447  015C  295F               	goto	l241
  2448  015D                     l240:	
  2449  015D  0022               	movlb	2	; select bank2
  2450  015E  138D               	bcf	13,7	;volatile
  2451  015F                     l241:	
  2452  015F  178E               	bsf	14,7	;volatile
  2453  0160  138E               	bcf	14,7	;volatile
  2454  0161  0020               	movlb	0	; select bank0
  2455  0162  1DB7               	btfss	SPI_Write@data,3
  2456  0163  2967               	goto	l244
  2457  0164  0022               	movlb	2	; select bank2
  2458  0165  178D               	bsf	13,7	;volatile
  2459  0166  2969               	goto	l245
  2460  0167                     l244:	
  2461  0167  0022               	movlb	2	; select bank2
  2462  0168  138D               	bcf	13,7	;volatile
  2463  0169                     l245:	
  2464  0169  178E               	bsf	14,7	;volatile
  2465  016A  138E               	bcf	14,7	;volatile
  2466  016B  0020               	movlb	0	; select bank0
  2467  016C  1D37               	btfss	SPI_Write@data,2
  2468  016D  2971               	goto	l248
  2469  016E  0022               	movlb	2	; select bank2
  2470  016F  178D               	bsf	13,7	;volatile
  2471  0170  2973               	goto	l249
  2472  0171                     l248:	
  2473  0171  0022               	movlb	2	; select bank2
  2474  0172  138D               	bcf	13,7	;volatile
  2475  0173                     l249:	
  2476  0173  178E               	bsf	14,7	;volatile
  2477  0174  138E               	bcf	14,7	;volatile
  2478  0175  0020               	movlb	0	; select bank0
  2479  0176  1CB7               	btfss	SPI_Write@data,1
  2480  0177  297B               	goto	l252
  2481  0178  0022               	movlb	2	; select bank2
  2482  0179  178D               	bsf	13,7	;volatile
  2483  017A  297D               	goto	l253
  2484  017B                     l252:	
  2485  017B  0022               	movlb	2	; select bank2
  2486  017C  138D               	bcf	13,7	;volatile
  2487  017D                     l253:	
  2488  017D  178E               	bsf	14,7	;volatile
  2489  017E  138E               	bcf	14,7	;volatile
  2490  017F  0020               	movlb	0	; select bank0
  2491  0180  1C37               	btfss	SPI_Write@data,0
  2492  0181  2985               	goto	l256
  2493  0182  0022               	movlb	2	; select bank2
  2494  0183  178D               	bsf	13,7	;volatile
  2495  0184  2987               	goto	l257
  2496  0185                     l256:	
  2497  0185  0022               	movlb	2	; select bank2
  2498  0186  138D               	bcf	13,7	;volatile
  2499  0187                     l257:	
  2500  0187  178E               	bsf	14,7	;volatile
  2501  0188  138E               	bcf	14,7	;volatile
  2502  0189  0008               	return
  2503  018A                     __end_of_SPI_Write:	
  2504  018A                     __ptext30:	
  2505 ;; *************** function _RfHalInit *****************
  2506 ;; Defined at:
  2507 ;;		line 40 in file "../../../src/rfstack/hal.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;		None
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  i               1    6[BANK0 ] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;		None               void
  2514 ;; Registers used:
  2515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 1F/4
  2518 ;;		On exit  : 1F/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2521 ;;      Params:         0       0       0       0
  2522 ;;      Locals:         0       1       0       0
  2523 ;;      Temps:          0       0       0       0
  2524 ;;      Totals:         0       1       0       0
  2525 ;;Total ram usage:        1 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:   13
  2528 ;; This function calls:
  2529 ;;		_RfTrcvMode
  2530 ;;		__CCBufInit
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _RfHalInit
  2538  018A                     _RfHalInit:	
  2539                           
  2540                           ;hal.c: 43: rfStatus.isr.byteCounter = 0;
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _RfHalInit: [allreg]
  2544  018A  0020               	movlb	0	; select bank0
  2545  018B  30A0               	movlw	_rfPackets& (0+255)
  2546  018C  01A0               	clrf	_rfStatus
  2547                           
  2548                           ;hal.c: 44: rfStatus.isr.txPacket = rfPackets;
  2549  018D  00A1               	movwf	_rfStatus+1
  2550                           
  2551                           ;hal.c: 45: rfStatus.isr.state = RX_RECV;
  2552  018E  01A2               	clrf	_rfStatus+2
  2553                           
  2554                           ;hal.c: 48: for (i = 0; i < 2 * sizeof(RfTransceiverPacket_t); i++)
  2555  018F  01BD               	clrf	RfHalInit@i
  2556  0190                     l2657:	
  2557                           
  2558                           ;hal.c: 49: ((UI08_t*) rfPackets)[i] = 0;
  2559  0190  083D               	movf	RfHalInit@i,w
  2560  0191  3EA0               	addlw	_rfPackets& (0+255)
  2561  0192  0086               	movwf	6
  2562  0193  3038               	movlw	56
  2563  0194  0187               	clrf	7
  2564  0195  0181               	clrf	1
  2565  0196  0ABD               	incf	RfHalInit@i,f
  2566  0197  023D               	subwf	RfHalInit@i,w
  2567  0198  1C03               	skipc
  2568  0199  2990               	goto	l2657
  2569                           
  2570                           ;psect for function __CCBufInit
  2571                           
  2572                           ;hal.c: 51: _CCBufInit();
  2573  019A                     i10L__CCBufInit:	
  2574  019A                     i10Ll2669:	
  2575  019A                     i11L__ptext32:	
  2576                           ;ccbuf_static.c: 7: _CCBufReset();
  2577                           
  2578                           
  2579                           ;psect for function __CCBufReset
  2580  019A                     i11L__CCBufReset:	
  2581  019A                     i11Ll3083:	
  2582  019A  0843               	movf	_rfRxCC+1,w
  2583  019B  00B8               	movwf	__CCBufReset@i
  2584  019C  29A5               	ljmp	i11Ll3089
  2585  019D                     i11Ll3085:	
  2586                           
  2587                           ;ccbuf_static.c: 15: {
  2588                           ;ccbuf_static.c: 16: i--;
  2589  019D  03B8               	decf	__CCBufReset@i,f
  2590  019E                     i11Ll3087:	
  2591  019E  0838               	movf	__CCBufReset@i,w
  2592  019F  0742               	addwf	_rfRxCC,w
  2593  01A0  00B7               	movwf	??__CCBufReset
  2594  01A1  0086               	movwf	6
  2595  01A2  3001               	movlw	1	; select bank2/3
  2596  01A3  0087               	movwf	7
  2597  01A4  0181               	clrf	1
  2598  01A5                     i11Ll3089:	
  2599  01A5  08B8               	movf	__CCBufReset@i,f
  2600  01A6  1D03               	btfss	3,2
  2601  01A7  299D               	ljmp	i11Ll3085
  2602  01A8  29AA               	ljmp	i11Ll3091
  2603  01A9                     i11Lu2151:	
  2604  01A9  299D               	ljmp	i11Ll3085
  2605  01AA                     i11Lu2150:	
  2606  01AA                     i11Ll3091:	
  2607  01AA  0843               	movf	_rfRxCC+1,w
  2608  01AB  3EFF               	addlw	255
  2609  01AC  00C5               	movwf	_rfRxCC+3
  2610  01AD                     i11Ll3093:	
  2611  01AD  01C4               	clrf	_rfRxCC+2
  2612  01AE                     i11Ll530:	
  2613  01AE  29AF               	ljmp	iL80
  2614  01AF                     i10Ll524:	
  2615  01AF                     iL80:	
  2616  01AF  3000               	movlw	0
  2617                           
  2618                           ;hal.c: 53: (&halRxBfTh)->lc = 0;;
  2619  01B0  01B1               	clrf	_halRxBfTh
  2620  01B1  01B2               	clrf	_halRxBfTh+1
  2621  01B2  01AF               	clrf	_halPkTh
  2622  01B3  01B0               	clrf	_halPkTh+1
  2623                           
  2624                           ;hal.c: 56: RfTrcvMode(0);
  2625  01B4  2B90               	ljmp	_RfTrcvMode
  2626  01B5                     __end_of_RfHalInit:	
  2627  01B5                     __ptext19:	
  2628 ;; *************** function _RfHalTickRxTh *****************
  2629 ;; Defined at:
  2630 ;;		line 99 in file "../../../src/rfstack/hal.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  pt              1    wreg     PTR struct pt
  2633 ;;		 -> halRxBfTh(2), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  pt              1    8[BANK0 ] PTR struct pt
  2636 ;;		 -> halRxBfTh(2), 
  2637 ;;  pktLength       1    7[BANK0 ] unsigned char 
  2638 ;;  PT_YIELD_FLA    1    0        unsigned char 
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      unsigned char 
  2641 ;; Registers used:
  2642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2643 ;; Tracked objects:
  2644 ;;		On entry : 1F/0
  2645 ;;		On exit  : 1E/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2648 ;;      Params:         0       0       0       0
  2649 ;;      Locals:         0       2       0       0
  2650 ;;      Temps:          0       2       0       0
  2651 ;;      Totals:         0       4       0       0
  2652 ;;Total ram usage:        4 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:   11
  2655 ;; This function calls:
  2656 ;;		_RfHalAnyFree
  2657 ;;		_RfHalGetFree
  2658 ;;		_RfHalGetReturn
  2659 ;;		_RfHalRxPut
  2660 ;;		_RfTrcvCrcTick
  2661 ;;		__CCBufCanRd
  2662 ;;		__CCBufPeekByte
  2663 ;;		__CCBufRdByte
  2664 ;;		__CCBufRdReverse
  2665 ;; This function is called by:
  2666 ;;		_main
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           
  2671                           ;psect for function _RfHalTickRxTh
  2672  01B5                     _RfHalTickRxTh:	
  2673                           
  2674                           ;incstack = 0
  2675                           ; Regs used in _RfHalTickRxTh: [allreg]
  2676                           ;RfHalTickRxTh@pt stored from wreg
  2677  01B5  00BF               	movwf	RfHalTickRxTh@pt
  2678                           
  2679                           ;hal.c: 107: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  2680  01B6  0AA6               	incf	RfHalTickRxTh@rxByteTimeout,f
  2681  01B7  2A79               	goto	l2837
  2682  01B8                     l2749:	
  2683  01B8  083F               	movf	RfHalTickRxTh@pt,w
  2684  01B9  0086               	movwf	6
  2685  01BA  3070               	movlw	112
  2686  01BB  23C6  3180         	fcall	PL132	;call to abstracted procedure
  2687  01BD                     l2751:	
  2688  01BD                     i3L__ptext23:	
  2689                           
  2690                           ;psect for function __CCBufCanRd
  2691  01BD                     i3L__CCBufCanRd:	
  2692  01BD                     i3Ll2847:	
  2693  01BD  01B7               	clrf	__CCBufCalcPt@move
  2694  01BE  0AB7               	incf	__CCBufCalcPt@move,f
  2695  01BF  0845               	movf	_rfRxCC+3,w
  2696  01C0  229A  3180         	fcall	__CCBufCalcPt
  2697  01C2  0644               	xorwf	_rfRxCC+2,w
  2698  01C3  1D03               	btfss	3,2
  2699  01C4  29C9               	ljmp	i3Ll2855
  2700  01C5  29C7               	ljmp	i3Ll2849
  2701  01C6                     i3Lu1921:	
  2702  01C6  29C9               	ljmp	i3Ll2855
  2703  01C7                     i3Lu1920:	
  2704  01C7                     i3Ll2849:	
  2705  01C7  3000               	movlw	0
  2706  01C8  29CA               	ljmp	iL18
  2707  01C9                     i3Ll2855:	
  2708                           
  2709                           ;ccbuf_static.c: 51: else return 1;
  2710  01C9  3001               	movlw	1
  2711  01CA                     i3Ll551:	
  2712  01CA                     iL18:	
  2713  01CA  3800               	iorlw	0
  2714  01CB  1903               	btfsc	3,2
  2715  01CC  0008               	return
  2716                           
  2717                           ;hal.c: 114: UI08_t pktLength = _CCBufPeekByte();
  2718  01CD  22EF  3180         	fcall	__CCBufPeekByte
  2719  01CF  00BE               	movwf	RfHalTickRxTh@pktLength
  2720                           
  2721                           ;hal.c: 116: if (pktLength > 5 && pktLength <= sizeof(packet->data) + 1)
  2722  01D0  3006               	movlw	6
  2723  01D1  023E               	subwf	RfHalTickRxTh@pktLength,w
  2724  01D2  1C03               	skipc
  2725  01D3  2A76               	goto	l2835
  2726  01D4  301A               	movlw	26
  2727  01D5  023E               	subwf	RfHalTickRxTh@pktLength,w
  2728  01D6  1803               	skipnc
  2729  01D7  2A76               	goto	l2835
  2730  01D8  083F               	movf	RfHalTickRxTh@pt,w
  2731  01D9  0086               	movwf	6
  2732  01DA  3076               	movlw	118
  2733  01DB  23C6  3180         	fcall	PL132	;call to abstracted procedure
  2734  01DD                     l2763:	
  2735  01DD  22C3  3180         	fcall	_RfHalAnyFree
  2736  01DF  3800               	iorlw	0
  2737  01E0  1903               	btfsc	3,2
  2738  01E1  0008               	return
  2739                           
  2740                           ;hal.c: 119: packet = RfHalGetFree();
  2741  01E2  22CC  3180         	fcall	_RfHalGetFree
  2742  01E4  0020               	movlb	0	; select bank0
  2743  01E5  00A4               	movwf	RfHalTickRxTh@packet
  2744                           
  2745                           ;hal.c: 122: packet->size = _CCBufRdByte() - 1;
  2746  01E6  22A6  3180         	fcall	__CCBufRdByte
  2747  01E8  3EFF               	addlw	255
  2748  01E9  00BC               	movwf	??_RfHalTickRxTh
  2749  01EA  0824               	movf	RfHalTickRxTh@packet,w
  2750  01EB  3E1B               	addlw	27
  2751                           
  2752                           ;hal.c: 123: packet->crcTx = 0;
  2753  01EC  23BE  3180         	fcall	PL130	;call to abstracted procedure
  2754  01EE  0181               	clrf	1
  2755                           
  2756                           ;hal.c: 124: rxByteTimeout = 0;
  2757  01EF  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2758                           
  2759                           ;hal.c: 127: for (pktRxByteIndex = 0; pktRxByteIndex < packet->size; pktRxByteIndex++)
  2760  01F0  01A5               	clrf	RfHalTickRxTh@pktRxByteIndex
  2761  01F1                     l2797:	
  2762  01F1  23DB  3180         	fcall	PL140	;call to abstracted procedure
  2763  01F3  0225               	subwf	RfHalTickRxTh@pktRxByteIndex,w
  2764  01F4  1803               	btfsc	3,0
  2765  01F5  2A2F               	goto	l2799
  2766  01F6  083F               	movf	RfHalTickRxTh@pt,w
  2767  01F7  0086               	movwf	6
  2768  01F8  3081               	movlw	129
  2769  01F9  3FC0               	movwi [0]fsr1
  2770  01FA  3000               	movlw	0
  2771  01FB  3FC1               	movwi [1]fsr1
  2772  01FC                     l2779:	
  2773  01FC                     i4L__ptext23:	
  2774                           
  2775                           ;psect for function __CCBufCanRd
  2776  01FC                     i4L__CCBufCanRd:	
  2777  01FC                     i4Ll2847:	
  2778  01FC  01B7               	clrf	__CCBufCalcPt@move
  2779  01FD  0AB7               	incf	__CCBufCalcPt@move,f
  2780  01FE  0845               	movf	_rfRxCC+3,w
  2781  01FF  229A  3180         	fcall	__CCBufCalcPt
  2782  0201  0644               	xorwf	_rfRxCC+2,w
  2783  0202  1D03               	btfss	3,2
  2784  0203  2A08               	ljmp	i4Ll2855
  2785  0204  2A06               	ljmp	i4Ll2849
  2786  0205                     i4Lu1921:	
  2787  0205  2A08               	ljmp	i4Ll2855
  2788  0206                     i4Lu1920:	
  2789  0206                     i4Ll2849:	
  2790  0206  3000               	movlw	0
  2791  0207  2A09               	ljmp	iL28
  2792  0208                     i4Ll2855:	
  2793                           
  2794                           ;ccbuf_static.c: 51: else return 1;
  2795  0208  3001               	movlw	1
  2796  0209                     i4Ll551:	
  2797  0209                     iL28:	
  2798  0209  3800               	iorlw	0
  2799  020A  301A               	movlw	26
  2800  020B  1D03               	skipz
  2801  020C  2A11               	goto	L4
  2802  020D  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2803  020E  1C03               	btfss	3,0
  2804  020F  0008               	return
  2805                           
  2806                           ;hal.c: 130: if(rxByteTimeout > 25) break;
  2807  0210  301A               	movlw	26
  2808  0211                     L4:	
  2809  0211  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2810  0212  1803               	btfsc	3,0
  2811  0213  2A2F               	goto	l2799
  2812                           
  2813                           ;hal.c: 131: rxByteTimeout = 0;
  2814  0214  01A6               	clrf	RfHalTickRxTh@rxByteTimeout
  2815                           
  2816                           ;hal.c: 132: packet->data[pktRxByteIndex] = _CCBufRdByte();
  2817  0215  22A6  3180         	fcall	__CCBufRdByte
  2818  0217  00BC               	movwf	??_RfHalTickRxTh
  2819  0218  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2820  0219  0724               	addwf	RfHalTickRxTh@packet,w
  2821  021A  00BD               	movwf	??_RfHalTickRxTh+1
  2822  021B  0A3D               	incf	??_RfHalTickRxTh+1,w
  2823                           
  2824                           ;hal.c: 133: packet->crcTx = RfTrcvCrcTick(packet->crcTx, packet->data[pktRxByteIndex]);
  2825  021C  23BE  3180         	fcall	PL130	;call to abstracted procedure
  2826  021E  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2827  021F  0724               	addwf	RfHalTickRxTh@packet,w
  2828  0220  00BC               	movwf	??_RfHalTickRxTh
  2829  0221  0084               	movwf	4
  2830  0222  0185               	clrf	5
  2831  0223  3F01               	moviw [1]fsr0
  2832  0224  00B7               	movwf	RfTrcvCrcTick@data
  2833  0225  0824               	movf	RfHalTickRxTh@packet,w
  2834  0226  3E19               	addlw	25
  2835  0227  0084               	movwf	4
  2836  0228  0800               	movf	0,w
  2837  0229                     i5L__ptext25:	
  2838                           
  2839                           ;psect for function _RfTrcvCrcTick
  2840  0229                     i5L_RfTrcvCrcTick:	
  2841                           
  2842                           ;incstack = 0
  2843                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  2844                           ;RfTrcvCrcTick@initial stored from wreg
  2845  0229  00B8               	movwf	RfTrcvCrcTick@initial
  2846  022A                     i5Ll2583:	
  2847                           
  2848                           ;mrf49xa.c: 59: return (initial ^ data);
  2849  022A  0838               	movf	RfTrcvCrcTick@initial,w
  2850  022B  0637               	xorwf	RfTrcvCrcTick@data,w
  2851  022C                     i5Ll181:	
  2852  022C  0081               	movwf	1
  2853  022D  0AA5               	incf	RfHalTickRxTh@pktRxByteIndex,f
  2854  022E  29F1               	goto	l2797
  2855  022F                     l2799:	
  2856                           
  2857                           ;hal.c: 134: }
  2858                           ;hal.c: 136: if (pktRxByteIndex == packet->size)
  2859  022F  23DB  3180         	fcall	PL140	;call to abstracted procedure
  2860  0231  0625               	xorwf	RfHalTickRxTh@pktRxByteIndex,w
  2861  0232  1D03               	skipz
  2862  0233  2A57               	goto	l2811
  2863  0234  083F               	movf	RfHalTickRxTh@pt,w
  2864  0235  0086               	movwf	6
  2865  0236  308B               	movlw	139
  2866  0237  3FC0               	movwi [0]fsr1
  2867  0238  3000               	movlw	0
  2868  0239  3FC1               	movwi [1]fsr1
  2869  023A                     l2803:	
  2870  023A                     i6L__ptext23:	
  2871                           
  2872                           ;psect for function __CCBufCanRd
  2873  023A                     i6L__CCBufCanRd:	
  2874  023A                     i6Ll2847:	
  2875  023A  01B7               	clrf	__CCBufCalcPt@move
  2876  023B  0AB7               	incf	__CCBufCalcPt@move,f
  2877  023C  0845               	movf	_rfRxCC+3,w
  2878  023D  229A  3180         	fcall	__CCBufCalcPt
  2879  023F  0644               	xorwf	_rfRxCC+2,w
  2880  0240  1D03               	btfss	3,2
  2881  0241  2A46               	ljmp	i6Ll2855
  2882  0242  2A44               	ljmp	i6Ll2849
  2883  0243                     i6Lu1921:	
  2884  0243  2A46               	ljmp	i6Ll2855
  2885  0244                     i6Lu1920:	
  2886  0244                     i6Ll2849:	
  2887  0244  3000               	movlw	0
  2888  0245  2A47               	ljmp	iL44
  2889  0246                     i6Ll2855:	
  2890                           
  2891                           ;ccbuf_static.c: 51: else return 1;
  2892  0246  3001               	movlw	1
  2893  0247                     i6Ll551:	
  2894  0247                     iL44:	
  2895  0247  3800               	iorlw	0
  2896  0248  1D03               	skipz
  2897  0249  2A4E               	goto	l2809
  2898  024A  301A               	movlw	26
  2899  024B  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2900  024C  1C03               	btfss	3,0
  2901  024D  0008               	return
  2902  024E                     l2809:	
  2903                           
  2904                           ;hal.c: 140: packet->crcRx = _CCBufRdByte();
  2905  024E  22A6  3180         	fcall	__CCBufRdByte
  2906  0250  00BC               	movwf	??_RfHalTickRxTh
  2907  0251  0824               	movf	RfHalTickRxTh@packet,w
  2908  0252  3E1A               	addlw	26
  2909  0253  0086               	movwf	6
  2910  0254  0187               	clrf	7
  2911  0255  083C               	movf	??_RfHalTickRxTh,w
  2912  0256  0081               	movwf	1
  2913  0257                     l2811:	
  2914                           
  2915                           ;hal.c: 141: }
  2916                           ;hal.c: 143: rfPk++;
  2917  0257  0AAC               	incf	_rfPk,f	;volatile
  2918                           
  2919                           ;hal.c: 146: if(rxByteTimeout > 25)
  2920  0258  301A               	movlw	26
  2921  0259  0226               	subwf	RfHalTickRxTh@rxByteTimeout,w
  2922  025A  1C03               	skipc
  2923  025B  2A6A               	goto	l2829
  2924                           
  2925                           ;hal.c: 147: {
  2926                           ;hal.c: 151: _CCBufRdReverse(pktRxByteIndex);
  2927  025C  0825               	movf	RfHalTickRxTh@pktRxByteIndex,w
  2928  025D                     i7L__ptext20:	
  2929                           
  2930                           ;psect for function __CCBufRdReverse
  2931  025D                     i7L__CCBufRdReverse:	
  2932                           
  2933                           ;incstack = 0
  2934                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  2935                           ;__CCBufRdReverse@qty stored from wreg
  2936  025D  00BA               	movwf	__CCBufRdReverse@qty
  2937  025E                     i7Ll2923:	
  2938  025E  083A               	movf	__CCBufRdReverse@qty,w
  2939  025F  3C00               	sublw	0
  2940  0260  00B7               	movwf	__CCBufCalcPt@move
  2941  0261  0845               	movf	_rfRxCC+3,w
  2942  0262  229A  3180         	fcall	__CCBufCalcPt
  2943  0264  00C5               	movwf	_rfRxCC+3
  2944  0265                     i7Ll547:	
  2945                           
  2946                           ;hal.c: 152: RfHalGetReturn(packet);
  2947  0265  0824               	movf	RfHalTickRxTh@packet,w
  2948  0266  22D8  3180         	fcall	_RfHalGetReturn
  2949                           
  2950                           ;hal.c: 153: rfPkTime++;
  2951  0268  0AAE               	incf	_rfPkTime,f	;volatile
  2952                           
  2953                           ;hal.c: 154: }
  2954  0269  29B8               	goto	l2749
  2955  026A                     l2829:	
  2956  026A  083F               	movf	RfHalTickRxTh@pt,w
  2957  026B  0086               	movwf	6
  2958  026C  30AA               	movlw	170
  2959  026D  23C6  3180         	fcall	PL132	;call to abstracted procedure
  2960  026F                     l2831:	
  2961  026F  0824               	movf	RfHalTickRxTh@packet,w
  2962  0270  22E3  3180         	fcall	_RfHalRxPut
  2963  0272  3800               	iorlw	0
  2964  0273  1903               	btfsc	3,2
  2965  0274  0008               	return
  2966  0275  29B8               	goto	l2749
  2967  0276                     l2835:	
  2968                           ;hal.c: 176: }
  2969                           ;hal.c: 177: }
  2970                           
  2971                           
  2972                           ;hal.c: 178: else
  2973                           ;hal.c: 179: {
  2974                           ;hal.c: 180: _CCBufRdByte();
  2975  0276  22A6  3180         	fcall	__CCBufRdByte
  2976  0278  29B8               	goto	l2749
  2977  0279                     l2837:	
  2978  0279  083F               	movf	RfHalTickRxTh@pt,w
  2979  027A  0086               	movwf	6
  2980  027B  0187               	clrf	7
  2981  027C  3F40               	moviw [0]fsr1
  2982  027D  00BC               	movwf	??_RfHalTickRxTh
  2983  027E  3F41               	moviw [1]fsr1
  2984  027F  00BD               	movwf	??_RfHalTickRxTh+1
  2985                           
  2986                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2987                           ; Switch size 1, requested type "space"
  2988                           ; Number of cases is 1, Range of values is 0 to 0
  2989                           ; switch strategies available:
  2990                           ; Name         Instructions Cycles
  2991                           ; simple_byte            4     3 (average)
  2992                           ; direct_byte            8     6 (fixed)
  2993                           ; jumptable            260     6 (fixed)
  2994                           ;	Chosen strategy is simple_byte
  2995  0280  1903               	skipnz
  2996  0281  2A83               	goto	l3501
  2997  0282  2A97               	goto	l2839
  2998  0283                     l3501:	
  2999                           
  3000                           ; Switch size 1, requested type "space"
  3001                           ; Number of cases is 6, Range of values is 0 to 170
  3002                           ; switch strategies available:
  3003                           ; Name         Instructions Cycles
  3004                           ; simple_byte           19    10 (average)
  3005                           ; jumptable            260     6 (fixed)
  3006                           ;	Chosen strategy is simple_byte
  3007  0283  083C               	movf	??_RfHalTickRxTh,w
  3008  0284  3A00               	xorlw	0	; case 0
  3009  0285  1903               	skipnz
  3010  0286  29B8               	goto	l2749
  3011  0287  3A70               	xorlw	112	; case 112
  3012  0288  1903               	skipnz
  3013  0289  29BD               	goto	l2751
  3014  028A  3A06               	xorlw	6	; case 118
  3015  028B  1903               	skipnz
  3016  028C  29DD               	goto	l2763
  3017  028D  3AF7               	xorlw	247	; case 129
  3018  028E  1903               	skipnz
  3019  028F  29FC               	goto	l2779
  3020  0290  3A0A               	xorlw	10	; case 139
  3021  0291  1903               	skipnz
  3022  0292  2A3A               	goto	l2803
  3023  0293  3A21               	xorlw	33	; case 170
  3024  0294  1903               	skipnz
  3025  0295  2A6F               	goto	l2831
  3026  0296  2A97               	goto	l2839
  3027  0297                     l2839:	
  3028  0297  083F               	movf	RfHalTickRxTh@pt,w
  3029  0298  3186  2E55         	ljmp	PL128	;call to abstracted procedure
  3030  029A                     __end_of_RfHalTickRxTh:	
  3031  029A                     __ptext24:	
  3032 ;; *************** function __CCBufCalcPt *****************
  3033 ;; Defined at:
  3034 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  entry           1    wreg     unsigned char 
  3037 ;;  move            1    0[BANK0 ] unsigned char 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  entry           1    1[BANK0 ] unsigned char 
  3040 ;;  result          1    2[BANK0 ] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      unsigned char 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0
  3045 ;; Tracked objects:
  3046 ;;		On entry : 1F/0
  3047 ;;		On exit  : 1F/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3050 ;;      Params:         0       1       0       0
  3051 ;;      Locals:         0       2       0       0
  3052 ;;      Temps:          0       0       0       0
  3053 ;;      Totals:         0       3       0       0
  3054 ;;Total ram usage:        3 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    8
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		__CCBufRdReverse
  3061 ;;		__CCBufCanRd
  3062 ;;		__CCBufRdByte
  3063 ;;		__CCBufPeekByte
  3064 ;;		__CCBufWrByte
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function __CCBufCalcPt
  3070  029A                     __CCBufCalcPt:	
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in __CCBufCalcPt: [wreg+status,2+status,0]
  3074                           ;__CCBufCalcPt@entry stored from wreg
  3075  029A  00B8               	movwf	__CCBufCalcPt@entry
  3076                           
  3077                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  3078  029B  0737               	addwf	__CCBufCalcPt@move,w
  3079  029C  00B9               	movwf	__CCBufCalcPt@result
  3080  029D                     l3101:	
  3081                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  3082                           
  3083  029D  0843               	movf	_rfRxCC+1,w
  3084  029E  0239               	subwf	__CCBufCalcPt@result,w
  3085  029F  1C03               	btfss	3,0
  3086  02A0  2AA4               	goto	l3103
  3087  02A1  0843               	movf	_rfRxCC+1,w
  3088  02A2  02B9               	subwf	__CCBufCalcPt@result,f
  3089  02A3  2A9D               	goto	l3101
  3090  02A4                     l3103:	
  3091                           
  3092                           ;ccbuf_static.c: 31: return (UI08_t) result;
  3093  02A4  0839               	movf	__CCBufCalcPt@result,w
  3094  02A5  0008               	return
  3095  02A6                     __end_of__CCBufCalcPt:	
  3096  02A6                     __ptext21:	
  3097 ;; *************** function __CCBufRdByte *****************
  3098 ;; Defined at:
  3099 ;;		line 54 in file "../../../src/utilities/ccbuf_static.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  res             1    4[BANK0 ] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      unsigned char 
  3106 ;; Registers used:
  3107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 1F/0
  3110 ;;		On exit  : 1F/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3113 ;;      Params:         0       0       0       0
  3114 ;;      Locals:         0       1       0       0
  3115 ;;      Temps:          0       1       0       0
  3116 ;;      Totals:         0       2       0       0
  3117 ;;Total ram usage:        2 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:   10
  3120 ;; This function calls:
  3121 ;;		__CCBufCalcPt
  3122 ;;		__CCBufCanRd
  3123 ;; This function is called by:
  3124 ;;		_RfHalTickRxTh
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function __CCBufRdByte
  3130  02A6                     __CCBufRdByte:	
  3131  02A6                     i8L__ptext23:	
  3132                           ;ccbuf_static.c: 56: if (_CCBufCanRd())
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in __CCBufRdByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3136                           
  3137                           
  3138                           ;psect for function __CCBufCanRd
  3139  02A6                     i8L__CCBufCanRd:	
  3140  02A6                     i8Ll2847:	
  3141  02A6  01B7               	clrf	__CCBufCalcPt@move
  3142  02A7  0AB7               	incf	__CCBufCalcPt@move,f
  3143  02A8  0845               	movf	_rfRxCC+3,w
  3144  02A9  229A  3180         	fcall	__CCBufCalcPt
  3145  02AB  0644               	xorwf	_rfRxCC+2,w
  3146  02AC  1D03               	btfss	3,2
  3147  02AD  2AB2               	ljmp	i8Ll2855
  3148  02AE  2AB0               	ljmp	i8Ll2849
  3149  02AF                     i8Lu1921:	
  3150  02AF  2AB2               	ljmp	i8Ll2855
  3151  02B0                     i8Lu1920:	
  3152  02B0                     i8Ll2849:	
  3153  02B0  3000               	movlw	0
  3154  02B1  2AB3               	ljmp	iL60
  3155  02B2                     i8Ll2855:	
  3156                           
  3157                           ;ccbuf_static.c: 51: else return 1;
  3158  02B2  3001               	movlw	1
  3159  02B3                     i8Ll551:	
  3160  02B3                     iL60:	
  3161  02B3  3A00               	xorlw	0
  3162  02B4  1903               	skipnz
  3163  02B5  3400               	retlw	0
  3164  02B6  01B7               	clrf	__CCBufCalcPt@move
  3165  02B7  0AB7               	incf	__CCBufCalcPt@move,f
  3166  02B8  0845               	movf	_rfRxCC+3,w
  3167  02B9  229A               	fcall	__CCBufCalcPt
  3168  02BA  00C5               	movwf	_rfRxCC+3
  3169  02BB  0742               	addwf	_rfRxCC,w
  3170  02BC  00BA               	movwf	??__CCBufRdByte
  3171  02BD  0086               	movwf	6
  3172  02BE  3001               	movlw	1	; select bank2/3
  3173  02BF  0087               	movwf	7
  3174  02C0  0801               	movf	1,w
  3175  02C1  00BB               	movwf	__CCBufRdByte@res
  3176                           
  3177                           ;ccbuf_static.c: 61: return res;
  3178  02C2  0008               	return
  3179  02C3                     __end_of__CCBufRdByte:	
  3180                           ;ccbuf_static.c: 62: }
  3181                           ;ccbuf_static.c: 63: return 0;
  3182                           
  3183  02C3                     __ptext29:	
  3184 ;; *************** function _RfHalAnyFree *****************
  3185 ;; Defined at:
  3186 ;;		line 197 in file "../../../src/rfstack/hal.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      unsigned char 
  3193 ;; Registers used:
  3194 ;;		wreg
  3195 ;; Tracked objects:
  3196 ;;		On entry : 1F/0
  3197 ;;		On exit  : 1F/1
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3200 ;;      Params:         0       0       0       0
  3201 ;;      Locals:         0       0       0       0
  3202 ;;      Temps:          0       0       0       0
  3203 ;;      Totals:         0       0       0       0
  3204 ;;Total ram usage:        0 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    8
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_RfHalTickRxTh
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           
  3215                           ;psect for function _RfHalAnyFree
  3216  02C3                     _RfHalAnyFree:	
  3217                           
  3218                           ;hal.c: 202: if ((rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  3219                           ;hal.c: 203: || (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0))
  3220                           
  3221                           ;incstack = 0
  3222                           ; Regs used in _RfHalAnyFree: [wreg]
  3223  02C3  0021               	movlb	1	; select bank1
  3224  02C4  1AA0               	btfsc	_rfPackets^(0+128),5
  3225  02C5  2AC8               	goto	l403
  3226  02C6  1DA0               	btfss	_rfPackets^(0+128),3
  3227  02C7  3401               	retlw	1
  3228  02C8                     l403:	
  3229  02C8  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  3230  02C9  19A0               	btfsc	_rfPackets^(0+128),3
  3231  02CA  3400               	retlw	0
  3232                           
  3233                           ;hal.c: 204: return 1;
  3234  02CB  3401               	retlw	1
  3235  02CC                     __end_of_RfHalAnyFree:	
  3236                           ;hal.c: 205: else
  3237                           ;hal.c: 206: return 0;
  3238                           
  3239  02CC                     __ptext28:	
  3240 ;; *************** function _RfHalGetFree *****************
  3241 ;; Defined at:
  3242 ;;		line 210 in file "../../../src/rfstack/hal.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      PTR struct RfTransceiver
  3249 ;; Registers used:
  3250 ;;		wreg
  3251 ;; Tracked objects:
  3252 ;;		On entry : 1F/1
  3253 ;;		On exit  : 1F/1
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3256 ;;      Params:         0       0       0       0
  3257 ;;      Locals:         0       0       0       0
  3258 ;;      Temps:          0       0       0       0
  3259 ;;      Totals:         0       0       0       0
  3260 ;;Total ram usage:        0 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    8
  3263 ;; This function calls:
  3264 ;;		Nothing
  3265 ;; This function is called by:
  3266 ;;		_RfHalTickRxTh
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _RfHalGetFree
  3272  02CC                     _RfHalGetFree:	
  3273                           
  3274                           ;hal.c: 225: if (rfPackets[0].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _RfHalGetFree: [wreg]
  3278  02CC  1EA0               	btfss	_rfPackets^(0+128),5
  3279  02CD  19A0               	btfsc	_rfPackets^(0+128),3
  3280  02CE  2AD2               	goto	l408
  3281  02CF  30A0               	movlw	_rfPackets& (0+255)
  3282                           
  3283                           ;hal.c: 226: {
  3284                           ;hal.c: 227: rfPackets[0].flags.acq = 1;
  3285  02D0  15A0               	bsf	_rfPackets^(0+128),3
  3286                           
  3287                           ;hal.c: 228: return &(rfPackets[0]);
  3288  02D1  0008               	return
  3289  02D2                     l408:	
  3290                           
  3291                           ;hal.c: 229: }
  3292                           ;hal.c: 230: if (rfPackets[1].flags.proc == PCKT_NO_PROC && rfPackets[0].flags.acq == 0)
  3293  02D2  1EBC               	btfss	(_rfPackets^(0+128)+28),5
  3294  02D3  19A0               	btfsc	_rfPackets^(0+128),3
  3295  02D4  3400               	retlw	0
  3296  02D5  30BC               	movlw	(_rfPackets+28)& (0+255)
  3297                           
  3298                           ;hal.c: 231: {
  3299                           ;hal.c: 232: rfPackets[0].flags.acq = 1;
  3300  02D6  15A0               	bsf	_rfPackets^(0+128),3
  3301                           
  3302                           ;hal.c: 233: return &(rfPackets[1]);
  3303  02D7  0008               	return
  3304  02D8                     __end_of_RfHalGetFree:	
  3305                           ;hal.c: 234: }
  3306                           ;hal.c: 235: return 0;
  3307                           
  3308  02D8                     __ptext27:	
  3309 ;; *************** function _RfHalGetReturn *****************
  3310 ;; Defined at:
  3311 ;;		line 190 in file "../../../src/rfstack/hal.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  packet          1    wreg     PTR struct RfTransceiver
  3314 ;;		 -> NULL(0), rfPackets(56), 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  3317 ;;		 -> NULL(0), rfPackets(56), 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;		None               void
  3320 ;; Registers used:
  3321 ;;		wreg, fsr1l, fsr1h
  3322 ;; Tracked objects:
  3323 ;;		On entry : 1F/0
  3324 ;;		On exit  : 1F/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3327 ;;      Params:         0       0       0       0
  3328 ;;      Locals:         0       1       0       0
  3329 ;;      Temps:          0       0       0       0
  3330 ;;      Totals:         0       1       0       0
  3331 ;;Total ram usage:        1 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    8
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_RfHalTickTxTh
  3338 ;;		_RfHalTickRxTh
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           
  3343                           ;psect for function _RfHalGetReturn
  3344  02D8                     _RfHalGetReturn:	
  3345                           
  3346                           ;incstack = 0
  3347                           ; Regs used in _RfHalGetReturn: [wregfsr1]
  3348                           ;RfHalGetReturn@packet stored from wreg
  3349  02D8  00B7               	movwf	RfHalGetReturn@packet
  3350                           
  3351                           ;hal.c: 192: packet->flags.acq = 0;
  3352  02D9  0086               	movwf	6
  3353  02DA  0187               	clrf	7
  3354  02DB  1181               	bcf	1,3
  3355                           
  3356                           ;hal.c: 193: packet->flags.tx = 0;
  3357  02DC  0837               	movf	RfHalGetReturn@packet,w
  3358  02DD  0086               	movwf	6
  3359  02DE  1201               	bcf	1,4
  3360                           
  3361                           ;hal.c: 194: packet->flags.proc = PCKT_NO_PROC;
  3362  02DF  0837               	movf	RfHalGetReturn@packet,w
  3363  02E0  0086               	movwf	6
  3364  02E1  1281               	bcf	1,5
  3365  02E2  0008               	return
  3366  02E3                     __end_of_RfHalGetReturn:	
  3367  02E3                     __ptext26:	
  3368 ;; *************** function _RfHalRxPut *****************
  3369 ;; Defined at:
  3370 ;;		line 239 in file "../../../src/rfstack/hal.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  packet          1    wreg     PTR struct RfTransceiver
  3373 ;;		 -> NULL(0), rfPackets(56), 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  packet          1    0[BANK0 ] PTR struct RfTransceiver
  3376 ;;		 -> NULL(0), rfPackets(56), 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      unsigned char 
  3379 ;; Registers used:
  3380 ;;		wreg, fsr1l, fsr1h
  3381 ;; Tracked objects:
  3382 ;;		On entry : 1F/0
  3383 ;;		On exit  : 1F/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3386 ;;      Params:         0       0       0       0
  3387 ;;      Locals:         0       1       0       0
  3388 ;;      Temps:          0       0       0       0
  3389 ;;      Totals:         0       1       0       0
  3390 ;;Total ram usage:        1 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    8
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_RfHalTickRxTh
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _RfHalRxPut
  3402  02E3                     _RfHalRxPut:	
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in _RfHalRxPut: [wregfsr1]
  3406                           ;RfHalRxPut@packet stored from wreg
  3407  02E3  00B7               	movwf	RfHalRxPut@packet
  3408                           
  3409                           ;hal.c: 258: packet->flags.proc = PCKT_NEED_PROC;
  3410  02E4  0086               	movwf	6
  3411  02E5  0187               	clrf	7
  3412  02E6  1681               	bsf	1,5
  3413                           
  3414                           ;hal.c: 259: packet->flags.acq = 0;
  3415  02E7  0837               	movf	RfHalRxPut@packet,w
  3416  02E8  0086               	movwf	6
  3417  02E9  1181               	bcf	1,3
  3418                           
  3419                           ;hal.c: 260: packet->flags.tx = 0;
  3420  02EA  0837               	movf	RfHalRxPut@packet,w
  3421  02EB  0086               	movwf	6
  3422  02EC  3001               	movlw	1
  3423  02ED  1201               	bcf	1,4
  3424                           
  3425                           ;hal.c: 261: return 1;
  3426  02EE  0008               	return
  3427  02EF                     __end_of_RfHalRxPut:	
  3428  02EF                     __ptext22:	
  3429 ;; *************** function __CCBufPeekByte *****************
  3430 ;; Defined at:
  3431 ;;		line 66 in file "../../../src/utilities/ccbuf_static.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  res             1    4[BANK0 ] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      unsigned char 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 1F/0
  3442 ;;		On exit  : 1F/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3445 ;;      Params:         0       0       0       0
  3446 ;;      Locals:         0       1       0       0
  3447 ;;      Temps:          0       1       0       0
  3448 ;;      Totals:         0       2       0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:   10
  3452 ;; This function calls:
  3453 ;;		__CCBufCalcPt
  3454 ;;		__CCBufCanRd
  3455 ;; This function is called by:
  3456 ;;		_RfHalTickRxTh
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           
  3461                           ;psect for function __CCBufPeekByte
  3462  02EF                     __CCBufPeekByte:	
  3463  02EF                     i9L__ptext23:	
  3464                           ;ccbuf_static.c: 68: if (_CCBufCanRd())
  3465                           
  3466                           ;incstack = 0
  3467                           ; Regs used in __CCBufPeekByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3468                           
  3469                           
  3470                           ;psect for function __CCBufCanRd
  3471  02EF                     i9L__CCBufCanRd:	
  3472  02EF                     i9Ll2847:	
  3473  02EF  01B7               	clrf	__CCBufCalcPt@move
  3474  02F0  0AB7               	incf	__CCBufCalcPt@move,f
  3475  02F1  0845               	movf	_rfRxCC+3,w
  3476  02F2  229A  3180         	fcall	__CCBufCalcPt
  3477  02F4  0644               	xorwf	_rfRxCC+2,w
  3478  02F5  1D03               	btfss	3,2
  3479  02F6  2AFB               	ljmp	i9Ll2855
  3480  02F7  2AF9               	ljmp	i9Ll2849
  3481  02F8                     i9Lu1921:	
  3482  02F8  2AFB               	ljmp	i9Ll2855
  3483  02F9                     i9Lu1920:	
  3484  02F9                     i9Ll2849:	
  3485  02F9  3000               	movlw	0
  3486  02FA  2AFC               	ljmp	iL70
  3487  02FB                     i9Ll2855:	
  3488                           
  3489                           ;ccbuf_static.c: 51: else return 1;
  3490  02FB  3001               	movlw	1
  3491  02FC                     i9Ll551:	
  3492  02FC                     iL70:	
  3493  02FC  3A00               	xorlw	0
  3494  02FD  1903               	skipnz
  3495  02FE  3400               	retlw	0
  3496  02FF  01B7               	clrf	__CCBufCalcPt@move
  3497  0300  0AB7               	incf	__CCBufCalcPt@move,f
  3498  0301  0845               	movf	_rfRxCC+3,w
  3499  0302  229A               	fcall	__CCBufCalcPt
  3500  0303  0742               	addwf	_rfRxCC,w
  3501  0304  00BA               	movwf	??__CCBufPeekByte
  3502  0305  0086               	movwf	6
  3503  0306  3001               	movlw	1	; select bank2/3
  3504  0307  0087               	movwf	7
  3505  0308  0801               	movf	1,w
  3506  0309  00BB               	movwf	__CCBufPeekByte@res
  3507                           
  3508                           ;ccbuf_static.c: 71: return res;
  3509  030A  0008               	return
  3510  030B                     __end_of__CCBufPeekByte:	
  3511                           ;ccbuf_static.c: 72: }
  3512                           ;ccbuf_static.c: 73: return 0;
  3513                           
  3514  030B                     __ptext15:	
  3515 ;; *************** function _RfTrcvStatus *****************
  3516 ;; Defined at:
  3517 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;		None
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;		None
  3522 ;; Return value:  Size  Location     Type
  3523 ;;		None               void
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, pclath, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 1F/0
  3528 ;;		On exit  : 1F/2
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3531 ;;      Params:         0       0       0       0
  3532 ;;      Locals:         0       0       0       0
  3533 ;;      Temps:          0       0       0       0
  3534 ;;      Totals:         0       0       0       0
  3535 ;;Total ram usage:        0 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    9
  3538 ;; This function calls:
  3539 ;;		_SPI_Read
  3540 ;; This function is called by:
  3541 ;;		_RfTrcvCarrierPresent
  3542 ;;		_mrf49XaIsr
  3543 ;;		_main
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           
  3548                           ;psect for function _RfTrcvStatus
  3549  030B                     _RfTrcvStatus:	
  3550                           
  3551                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  3552                           
  3553                           ;incstack = 0
  3554                           ; Regs used in _RfTrcvStatus: [wreg+status,2+pclath+cstack]
  3555  030B  0022               	movlb	2	; select bank2
  3556  030C  130E               	bcf	14,6	;volatile
  3557                           
  3558                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  3559  030D  2315  3180         	fcall	_SPI_Read
  3560  030F  00B5               	movwf	_rfTrcvStatus
  3561                           
  3562                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  3563  0310  2315               	fcall	_SPI_Read
  3564  0311  00B6               	movwf	_rfTrcvStatus+1
  3565                           
  3566                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  3567  0312  0022               	movlb	2	; select bank2
  3568  0313  170E               	bsf	14,6	;volatile
  3569  0314  0008               	return
  3570  0315                     __end_of_RfTrcvStatus:	
  3571  0315                     __ptext16:	
  3572 ;; *************** function _SPI_Read *****************
  3573 ;; Defined at:
  3574 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  data            1    0[BANK0 ] unsigned char 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      unsigned char 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2
  3583 ;; Tracked objects:
  3584 ;;		On entry : 1D/2
  3585 ;;		On exit  : 1F/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3588 ;;      Params:         0       0       0       0
  3589 ;;      Locals:         0       1       0       0
  3590 ;;      Temps:          0       0       0       0
  3591 ;;      Totals:         0       1       0       0
  3592 ;;Total ram usage:        1 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    8
  3595 ;; This function calls:
  3596 ;;		Nothing
  3597 ;; This function is called by:
  3598 ;;		_RfTrcvGet
  3599 ;;		_RfTrcvStatus
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _SPI_Read
  3605  0315                     _SPI_Read:	
  3606                           
  3607                           ;mrf49xa.c: 150: UI08_t data = 0;
  3608                           
  3609                           ;incstack = 0
  3610                           ; Regs used in _SPI_Read: [wreg+status,2]
  3611  0315  0020               	movlb	0	; select bank0
  3612  0316  01B7               	clrf	SPI_Read@data
  3613                           
  3614                           ;mrf49xa.c: 151: LATCbits.LATC7 = 0;
  3615  0317  0022               	movlb	2	; select bank2
  3616  0318  138E               	bcf	14,7	;volatile
  3617                           
  3618                           ;mrf49xa.c: 152: LATBbits.LATB7 = 0;
  3619  0319  138D               	bcf	13,7	;volatile
  3620  031A  0020               	movlb	0	; select bank0
  3621  031B  1A8E               	btfsc	14,5	;volatile
  3622  031C  17B7               	bsf	SPI_Read@data,7
  3623  031D  0022               	movlb	2	; select bank2
  3624  031E  178E               	bsf	14,7	;volatile
  3625  031F  138E               	bcf	14,7	;volatile
  3626                           
  3627                           ;mrf49xa.c: 159: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3628  0320  0020               	movlb	0	; select bank0
  3629  0321  1A8E               	btfsc	14,5	;volatile
  3630  0322  1737               	bsf	SPI_Read@data,6
  3631  0323  0022               	movlb	2	; select bank2
  3632  0324  178E               	bsf	14,7	;volatile
  3633  0325  138E               	bcf	14,7	;volatile
  3634                           
  3635                           ;mrf49xa.c: 160: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3636  0326  0020               	movlb	0	; select bank0
  3637  0327  1A8E               	btfsc	14,5	;volatile
  3638  0328  16B7               	bsf	SPI_Read@data,5
  3639  0329  0022               	movlb	2	; select bank2
  3640  032A  178E               	bsf	14,7	;volatile
  3641  032B  138E               	bcf	14,7	;volatile
  3642                           
  3643                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3644  032C  0020               	movlb	0	; select bank0
  3645  032D  1A8E               	btfsc	14,5	;volatile
  3646  032E  1637               	bsf	SPI_Read@data,4
  3647  032F  0022               	movlb	2	; select bank2
  3648  0330  178E               	bsf	14,7	;volatile
  3649  0331  138E               	bcf	14,7	;volatile
  3650                           
  3651                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3652  0332  0020               	movlb	0	; select bank0
  3653  0333  1A8E               	btfsc	14,5	;volatile
  3654  0334  15B7               	bsf	SPI_Read@data,3
  3655  0335  0022               	movlb	2	; select bank2
  3656  0336  178E               	bsf	14,7	;volatile
  3657  0337  138E               	bcf	14,7	;volatile
  3658                           
  3659                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3660  0338  0020               	movlb	0	; select bank0
  3661  0339  1A8E               	btfsc	14,5	;volatile
  3662  033A  1537               	bsf	SPI_Read@data,2
  3663  033B  0022               	movlb	2	; select bank2
  3664  033C  178E               	bsf	14,7	;volatile
  3665  033D  138E               	bcf	14,7	;volatile
  3666                           
  3667                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3668  033E  0020               	movlb	0	; select bank0
  3669  033F  1A8E               	btfsc	14,5	;volatile
  3670  0340  14B7               	bsf	SPI_Read@data,1
  3671  0341  0022               	movlb	2	; select bank2
  3672  0342  178E               	bsf	14,7	;volatile
  3673  0343  138E               	bcf	14,7	;volatile
  3674                           
  3675                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  3676  0344  0020               	movlb	0	; select bank0
  3677  0345  1A8E               	btfsc	14,5	;volatile
  3678  0346  1437               	bsf	SPI_Read@data,0
  3679  0347  0022               	movlb	2	; select bank2
  3680  0348  178E               	bsf	14,7	;volatile
  3681  0349  138E               	bcf	14,7	;volatile
  3682                           
  3683                           ;mrf49xa.c: 188: return data;
  3684  034A  0020               	movlb	0	; select bank0
  3685  034B  0837               	movf	SPI_Read@data,w
  3686  034C  0008               	return
  3687  034D                     __end_of_SPI_Read:	
  3688  034D                     __ptext13:	
  3689 ;; *************** function _RfHalTickTxTh *****************
  3690 ;; Defined at:
  3691 ;;		line 71 in file "../../../src/rfstack/hal.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  pt              1    wreg     PTR struct pt
  3694 ;;		 -> halTxBfTh(2), 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  pt              1    8[BANK0 ] PTR struct pt
  3697 ;;		 -> halTxBfTh(2), 
  3698 ;;  PT_YIELD_FLA    1    0        unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      unsigned char 
  3701 ;; Registers used:
  3702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 1F/0
  3705 ;;		On exit  : 1F/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3708 ;;      Params:         0       0       0       0
  3709 ;;      Locals:         0       1       0       0
  3710 ;;      Temps:          0       2       0       0
  3711 ;;      Totals:         0       3       0       0
  3712 ;;Total ram usage:        3 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:   13
  3715 ;; This function calls:
  3716 ;;		_RfHalGetReturn
  3717 ;;		_RfHalTxGet
  3718 ;;		_RfTrcvCarrierPresent
  3719 ;;		_RfTrcvMode
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function _RfHalTickTxTh
  3727  034D                     _RfHalTickTxTh:	
  3728                           
  3729                           ;incstack = 0
  3730                           ; Regs used in _RfHalTickTxTh: [allreg]
  3731                           ;RfHalTickTxTh@pt stored from wreg
  3732  034D  00BF               	movwf	RfHalTickTxTh@pt
  3733  034E  2B75               	goto	l2707
  3734  034F                     l2683:	
  3735  034F  083F               	movf	RfHalTickTxTh@pt,w
  3736  0350  0086               	movwf	6
  3737  0351  304F               	movlw	79
  3738  0352  23C6               	fcall	PL132	;call to abstracted procedure
  3739  0353                     l2685:	
  3740  0353  3186  26FD  3180   	fcall	_RfHalTxGet
  3741  0356  3A01               	xorlw	1
  3742  0357  1D03               	btfss	3,2
  3743  0358  0008               	return
  3744  0359                     l2689:	
  3745                           ;hal.c: 81: do
  3746                           
  3747  0359  083F               	movf	RfHalTickTxTh@pt,w
  3748  035A  0086               	movwf	6
  3749  035B  3053               	movlw	83
  3750  035C  23C6  3180         	fcall	PL132	;call to abstracted procedure
  3751  035E                     l2691:	
  3752  035E  239D  3180         	fcall	_RfTrcvCarrierPresent
  3753  0360  3A00               	xorlw	0
  3754  0361  1D03               	btfss	3,2
  3755  0362  0008               	return
  3756                           
  3757                           ;hal.c: 84: } while (rfStatus.isr.state != RX_RECV);
  3758  0363  08A2               	movf	_rfStatus+2,f
  3759  0364  1D03               	skipz
  3760  0365  2B59               	goto	l2689
  3761                           
  3762                           ;hal.c: 87: RfTrcvMode(1);
  3763  0366  3001               	movlw	1
  3764  0367  2390  3180         	fcall	_RfTrcvMode
  3765  0369  083F               	movf	RfHalTickTxTh@pt,w
  3766  036A  0086               	movwf	6
  3767  036B  305A               	movlw	90
  3768  036C  23C6  3180         	fcall	PL132	;call to abstracted procedure
  3769  036E                     l2701:	
  3770  036E  0822               	movf	_rfStatus+2,w
  3771  036F  1D03               	skipz
  3772  0370  0008               	return
  3773                           
  3774                           ;hal.c: 92: RfHalGetReturn(rfStatus.isr.txPacket);
  3775  0371  0821               	movf	_rfStatus+1,w
  3776  0372  22D8  3180         	fcall	_RfHalGetReturn
  3777  0374  2B4F               	goto	l2683
  3778  0375                     l2707:	
  3779  0375  083F               	movf	RfHalTickTxTh@pt,w
  3780  0376  0086               	movwf	6
  3781  0377  0187               	clrf	7
  3782  0378  3F40               	moviw [0]fsr1
  3783  0379  00BD               	movwf	??_RfHalTickTxTh
  3784  037A  3F41               	moviw [1]fsr1
  3785  037B  00BE               	movwf	??_RfHalTickTxTh+1
  3786                           
  3787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3788                           ; Switch size 1, requested type "space"
  3789                           ; Number of cases is 1, Range of values is 0 to 0
  3790                           ; switch strategies available:
  3791                           ; Name         Instructions Cycles
  3792                           ; simple_byte            4     3 (average)
  3793                           ; direct_byte            8     6 (fixed)
  3794                           ; jumptable            260     6 (fixed)
  3795                           ;	Chosen strategy is simple_byte
  3796  037C  1903               	skipnz
  3797  037D  2B7F               	goto	l3499
  3798  037E  2B8D               	goto	l2709
  3799  037F                     l3499:	
  3800                           
  3801                           ; Switch size 1, requested type "space"
  3802                           ; Number of cases is 4, Range of values is 0 to 90
  3803                           ; switch strategies available:
  3804                           ; Name         Instructions Cycles
  3805                           ; simple_byte           13     7 (average)
  3806                           ; direct_byte          188     6 (fixed)
  3807                           ; jumptable            260     6 (fixed)
  3808                           ;	Chosen strategy is simple_byte
  3809  037F  083D               	movf	??_RfHalTickTxTh,w
  3810  0380  3A00               	xorlw	0	; case 0
  3811  0381  1903               	skipnz
  3812  0382  2B4F               	goto	l2683
  3813  0383  3A4F               	xorlw	79	; case 79
  3814  0384  1903               	skipnz
  3815  0385  2B53               	goto	l2685
  3816  0386  3A1C               	xorlw	28	; case 83
  3817  0387  1903               	skipnz
  3818  0388  2B5E               	goto	l2691
  3819  0389  3A09               	xorlw	9	; case 90
  3820  038A  1903               	skipnz
  3821  038B  2B6E               	goto	l2701
  3822  038C  2B8D               	goto	l2709
  3823  038D                     l2709:	
  3824  038D  083F               	movf	RfHalTickTxTh@pt,w
  3825  038E  3186  2E55         	ljmp	PL128	;call to abstracted procedure
  3826  0390                     __end_of_RfHalTickTxTh:	
  3827  0390                     __ptext33:	
  3828 ;; *************** function _RfTrcvMode *****************
  3829 ;; Defined at:
  3830 ;;		line 59 in file "../../../src/rfstack/hal.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  tx              1    wreg     unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  tx              1    5[BANK0 ] unsigned char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;		None               void
  3837 ;; Registers used:
  3838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 1F/0
  3841 ;;		On exit  : 1F/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3844 ;;      Params:         0       0       0       0
  3845 ;;      Locals:         0       1       0       0
  3846 ;;      Temps:          0       0       0       0
  3847 ;;      Totals:         0       1       0       0
  3848 ;;Total ram usage:        1 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:   12
  3851 ;; This function calls:
  3852 ;;		_RfTrcvSetup
  3853 ;; This function is called by:
  3854 ;;		_RfHalInit
  3855 ;;		_RfHalTickTxTh
  3856 ;;		_RfHalStatemachine
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           
  3861                           ;psect for function _RfTrcvMode
  3862  0390                     _RfTrcvMode:	
  3863                           
  3864                           ;incstack = 0
  3865                           ; Regs used in _RfTrcvMode: [allreg]
  3866                           ;RfTrcvMode@tx stored from wreg
  3867  0390  00BC               	movwf	RfTrcvMode@tx
  3868                           
  3869                           ;hal.c: 61: rfStatus.inRx = 1 - tx;
  3870  0391  3C01               	sublw	1
  3871  0392  00A3               	movwf	_rfStatus+3
  3872                           
  3873                           ;hal.c: 62: RfTrcvSetup(tx);
  3874  0393  083C               	movf	RfTrcvMode@tx,w
  3875  0394  2078  3180         	fcall	_RfTrcvSetup
  3876                           
  3877                           ;hal.c: 64: if (tx == 1)
  3878  0396  0020               	movlb	0	; select bank0
  3879  0397  0B3C               	decfsz	RfTrcvMode@tx,w
  3880  0398  0008               	return
  3881                           
  3882                           ;hal.c: 65: {
  3883                           ;hal.c: 66: rfStatus.isr.state = TX_PREAMBLE1;
  3884  0399  01A2               	clrf	_rfStatus+2
  3885  039A  0AA2               	incf	_rfStatus+2,f
  3886                           
  3887                           ;hal.c: 67: rfStatus.isr.byteCounter = 0;
  3888  039B  01A0               	clrf	_rfStatus
  3889  039C  0008               	return
  3890  039D                     __end_of_RfTrcvMode:	
  3891  039D                     __ptext14:	
  3892 ;; *************** function _RfTrcvCarrierPresent *****************
  3893 ;; Defined at:
  3894 ;;		line 51 in file "../../../src/devices/mrf49xa.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;		None
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      unsigned char 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0, pclath, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 1F/0
  3905 ;;		On exit  : 1F/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3908 ;;      Params:         0       0       0       0
  3909 ;;      Locals:         0       0       0       0
  3910 ;;      Temps:          0       0       0       0
  3911 ;;      Totals:         0       0       0       0
  3912 ;;Total ram usage:        0 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:   10
  3915 ;; This function calls:
  3916 ;;		_RfTrcvStatus
  3917 ;; This function is called by:
  3918 ;;		_RfHalTickTxTh
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           
  3923                           ;psect for function _RfTrcvCarrierPresent
  3924  039D                     _RfTrcvCarrierPresent:	
  3925                           
  3926                           ;mrf49xa.c: 53: RfTrcvStatus();
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in _RfTrcvCarrierPresent: [wreg+status,2+status,0+pclath+cstack]
  3930  039D  230B               	fcall	_RfTrcvStatus
  3931                           
  3932                           ;mrf49xa.c: 54: return rfTrcvStatus.flags.msb.signalPresent;
  3933  039E  0020               	movlb	0	; select bank0
  3934  039F  0835               	movf	_rfTrcvStatus,w
  3935  03A0  3901               	andlw	1
  3936  03A1  0008               	return
  3937  03A2                     __end_of_RfTrcvCarrierPresent:	
  3938  03A2                     __ptext6:	
  3939 ;; *************** function _SysInitGpio *****************
  3940 ;; Defined at:
  3941 ;;		line 15 in file "../../../src/node/main.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;		None
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;		None               void
  3948 ;; Registers used:
  3949 ;;		None
  3950 ;; Tracked objects:
  3951 ;;		On entry : 17F/1
  3952 ;;		On exit  : 17F/2
  3953 ;;		Unchanged: 160/0
  3954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3955 ;;      Params:         0       0       0       0
  3956 ;;      Locals:         0       0       0       0
  3957 ;;      Temps:          0       0       0       0
  3958 ;;      Totals:         0       0       0       0
  3959 ;;Total ram usage:        0 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    8
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           
  3970                           ;psect for function _SysInitGpio
  3971  03A2                     _SysInitGpio:	
  3972                           
  3973                           ;incstack = 0
  3974                           ; Regs used in _SysInitGpio: []
  3975                           ;main.c: 17: do { TRISAbits.TRISA2 = 1; TRISAbits.TRISA4 = 0; TRISAbits.TRISA5 = 0; LATA
      +                          bits.LATA4 = 0; LATAbits.LATA5 = 0; } while(0);;
  3976  03A2  150C               	bsf	12,2	;volatile
  3977  03A3  120C               	bcf	12,4	;volatile
  3978  03A4  128C               	bcf	12,5	;volatile
  3979  03A5  0022               	movlb	2	; select bank2
  3980  03A6  120C               	bcf	12,4	;volatile
  3981  03A7  128C               	bcf	12,5	;volatile
  3982                           
  3983                           ;main.c: 18: do { TRISBbits.TRISB4 = 0; TRISBbits.TRISB6 = 0; TRISBbits.TRISB7 = 0; TRIS
      +                          Bbits.TRISB5 = 1; } while(0);;
  3984  03A8  0021               	movlb	1	; select bank1
  3985  03A9  120D               	bcf	13,4	;volatile
  3986  03AA  130D               	bcf	13,6	;volatile
  3987  03AB  138D               	bcf	13,7	;volatile
  3988  03AC  168D               	bsf	13,5	;volatile
  3989                           
  3990                           ;main.c: 19: do { TRISCbits.TRISC1 = 0; TRISCbits.TRISC2 = 0; TRISCbits.TRISC4 = 0; TRIS
      +                          Cbits.TRISC6 = 0; TRISCbits.TRISC7 = 0; TRISCbits.TRISC0 = 1; TRISCbits.TRISC3 = 1; TRIS
      +                          Cbits.TRISC5 = 1; LATCbits.LATC1 = 0; LATCbits.LATC2 = 0; LATCbits.LATC4 = 0; LATCbits.
  3991  03AD  108E               	bcf	14,1	;volatile
  3992  03AE  110E               	bcf	14,2	;volatile
  3993  03AF  120E               	bcf	14,4	;volatile
  3994  03B0  130E               	bcf	14,6	;volatile
  3995  03B1  138E               	bcf	14,7	;volatile
  3996  03B2  140E               	bsf	14,0	;volatile
  3997  03B3  158E               	bsf	14,3	;volatile
  3998  03B4  168E               	bsf	14,5	;volatile
  3999  03B5  0022               	movlb	2	; select bank2
  4000  03B6  108E               	bcf	14,1	;volatile
  4001  03B7  110E               	bcf	14,2	;volatile
  4002  03B8  120E               	bcf	14,4	;volatile
  4003  03B9  170E               	bsf	14,6	;volatile
  4004  03BA  138E               	bcf	14,7	;volatile
  4005                           
  4006                           ;main.c: 21: LATCbits.LATC1 = 0;
  4007  03BB  108E               	bcf	14,1	;volatile
  4008                           
  4009                           ;main.c: 22: LATCbits.LATC2 = 0;
  4010  03BC  110E               	bcf	14,2	;volatile
  4011  03BD  0008               	return
  4012  03BE                     __end_of_SysInitGpio:	
  4013  03BE                     PL130:	
  4014  03BE  0086               	movwf	6
  4015  03BF  0187               	clrf	7
  4016  03C0  083C               	movf	??_RfHalTickRxTh,w
  4017  03C1  0081               	movwf	1
  4018  03C2  0824               	movf	RfHalTickRxTh@packet,w
  4019  03C3  3E19               	addlw	25
  4020  03C4  0086               	movwf	6
  4021  03C5  0008               	return
  4022  03C6                     __end_ofPL130:	
  4023  03C6                     PL132:	
  4024  03C6  0187               	clrf	7
  4025  03C7  3FC0               	movwi [0]fsr1
  4026  03C8  3000               	movlw	0
  4027  03C9  3FC1               	movwi [1]fsr1
  4028  03CA  0008               	return
  4029  03CB                     __end_ofPL132:	
  4030  03CB                     PL134:	
  4031  03CB  3083               	movlw	131
  4032  03CC  0020               	movlb	0	; select bank0
  4033  03CD  00B8               	movwf	MRF49XACommand@cmd
  4034  03CE  30CA               	movlw	202
  4035  03CF  00B9               	movwf	MRF49XACommand@cmd+1
  4036  03D0  0008               	return
  4037  03D1                     __end_ofPL134:	
  4038  03D1                     PL136:	
  4039  03D1  0020               	movlb	0	; select bank0
  4040  03D2  00B8               	movwf	MRF49XACommand@cmd
  4041  03D3  30CA               	movlw	202
  4042  03D4  00B9               	movwf	MRF49XACommand@cmd+1
  4043  03D5  0008               	return
  4044  03D6                     __end_ofPL136:	
  4045  03D6                     PL138:	
  4046  03D6  0020               	movlb	0	; select bank0
  4047  03D7  00B8               	movwf	MRF49XACommand@cmd
  4048  03D8  3080               	movlw	128
  4049  03D9  00B9               	movwf	MRF49XACommand@cmd+1
  4050  03DA  0008               	return
  4051  03DB                     __end_ofPL138:	
  4052  03DB                     PL140:	
  4053  03DB  0824               	movf	RfHalTickRxTh@packet,w
  4054  03DC  3E1B               	addlw	27
  4055  03DD  0086               	movwf	6
  4056  03DE  0187               	clrf	7
  4057  03DF  0801               	movf	1,w
  4058  03E0  0008               	return
  4059  03E1                     __end_ofPL140:	
  4060  03E1                     PL142:	
  4061  03E1  0020               	movlb	0	; select bank0
  4062  03E2  00B8               	movwf	MRF49XACommand@cmd
  4063  03E3  3082               	movlw	130
  4064  03E4  00B9               	movwf	MRF49XACommand@cmd+1
  4065  03E5  0008               	return
  4066  03E6                     __end_ofPL142:	
  4067  03E6                     PL144:	
  4068  03E6  0020               	movlb	0	; select bank0
  4069  03E7  30FA               	movlw	250
  4070  03E8  0ABD               	incf	MRF49XAInit@j,f
  4071  03E9  023D               	subwf	MRF49XAInit@j,w
  4072  03EA  0008               	return
  4073  03EB                     __end_ofPL144:	
  4074                           
  4075                           	psect	bssBANK0
  4076  0020                     __pbssBANK0:	
  4077  0020                     _rfStatus:	
  4078  0020                     	ds	4
  4079  0024                     RfHalTickRxTh@packet:	
  4080  0024                     	ds	1
  4081  0025                     RfHalTickRxTh@pktRxByteIndex:	
  4082  0025                     	ds	1
  4083  0026                     RfHalTickRxTh@rxByteTimeout:	
  4084  0026                     	ds	1
  4085  0027                     RfPacketsTickTh@packet:	
  4086  0027                     	ds	1
  4087  0028                     RfPacketsTickTh@timeout:	
  4088  0028                     	ds	1
  4089  0029                     _dl1:	
  4090  0029                     	ds	1
  4091  002A                     _dl2:	
  4092  002A                     	ds	1
  4093  002B                     _isr:	
  4094  002B                     	ds	1
  4095  002C                     _rfPk:	
  4096  002C                     	ds	1
  4097  002D                     _rfPkCrc:	
  4098  002D                     	ds	1
  4099  002E                     _rfPkTime:	
  4100  002E                     	ds	1
  4101  002F                     _halPkTh:	
  4102  002F                     	ds	2
  4103  0031                     _halRxBfTh:	
  4104  0031                     	ds	2
  4105  0033                     _halTxBfTh:	
  4106  0033                     	ds	2
  4107  0035                     _rfTrcvStatus:	
  4108  0035                     	ds	2
  4109                           
  4110                           	psect	dataBANK0
  4111  0042                     __pdataBANK0:	
  4112  0042                     _rfRxCC:	
  4113  0042                     	ds	4
  4114                           
  4115                           	psect	bssBANK1
  4116  00A0                     __pbssBANK1:	
  4117  00A0                     _rfPackets:	
  4118  00A0                     	ds	56
  4119                           
  4120                           	psect	bssBANK2
  4121  0120                     __pbssBANK2:	
  4122  0120                     _rfRxBf:	
  4123  0120                     	ds	48
  4124                           
  4125                           	psect	clrtext
  4126  0774                     clear_ram0:	
  4127                           ;	Called with FSR0 containing the base address, and
  4128                           ;	WREG with the size to clear
  4129                           
  4130  0774  0064               	clrwdt	;clear the watchdog before getting into this loop
  4131  0775                     clrloop0:	
  4132  0775  0180               	clrf	0	;clear RAM location pointed to by FSR
  4133  0776  3101               	addfsr 0,1
  4134  0777  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4135  0778  2F75               	goto	clrloop0	;have we reached the end yet?
  4136  0779  3400               	retlw	0	;all done for this memory range, return
  4137                           
  4138                           	psect	cstackCOMMON
  4139  0070                     __pcstackCOMMON:	
  4140  0070                     ?_SPI_Write:	
  4141  0070                     ?__CCBufInit:	
  4142                           ; 0 bytes @ 0x0
  4143                           
  4144  0070                     ?_RfTrcvMode:	
  4145                           ; 0 bytes @ 0x0
  4146                           
  4147  0070                     ?_RfHalGetReturn:	
  4148                           ; 0 bytes @ 0x0
  4149                           
  4150  0070                     ?__CCBufRdReverse:	
  4151                           ; 0 bytes @ 0x0
  4152                           
  4153  0070                     ?__CCBufWrByte:	
  4154                           ; 0 bytes @ 0x0
  4155                           
  4156  0070                     ?__CCBufReset:	
  4157                           ; 0 bytes @ 0x0
  4158                           
  4159  0070                     ?_AdcInit:	
  4160                           ; 0 bytes @ 0x0
  4161                           
  4162  0070                     ?_ExtIntInit:	
  4163                           ; 0 bytes @ 0x0
  4164                           
  4165  0070                     ?_extInt:	
  4166                           ; 0 bytes @ 0x0
  4167                           
  4168  0070                     ?_RfTrcvPut:	
  4169                           ; 0 bytes @ 0x0
  4170                           
  4171  0070                     ?_RfTrcvStatus:	
  4172                           ; 0 bytes @ 0x0
  4173                           
  4174  0070                     ?_RfTrcvSetup:	
  4175                           ; 0 bytes @ 0x0
  4176                           
  4177  0070                     ?_MRF49XAInit:	
  4178                           ; 0 bytes @ 0x0
  4179                           
  4180  0070                     ?_RfHalInit:	
  4181                           ; 0 bytes @ 0x0
  4182                           
  4183  0070                     ?_RfHalTxPutAgain:	
  4184                           ; 0 bytes @ 0x0
  4185                           
  4186  0070                     ?_RfHalStatemachine:	
  4187                           ; 0 bytes @ 0x0
  4188                           
  4189  0070                     ?_RfPacketsHandleClient:	
  4190                           ; 0 bytes @ 0x0
  4191                           
  4192  0070                     ?_SysInitGpio:	
  4193                           ; 0 bytes @ 0x0
  4194                           
  4195  0070                     ?_main:	
  4196                           ; 0 bytes @ 0x0
  4197                           
  4198  0070                     ?i1_RfTrcvPut:	
  4199                           ; 0 bytes @ 0x0
  4200                           
  4201  0070                     ?i1_RfTrcvStatus:	
  4202                           ; 0 bytes @ 0x0
  4203                           
  4204  0070                     ?i1_RfTrcvSetup:	
  4205                           ; 0 bytes @ 0x0
  4206                           
  4207  0070                     ??i1_SPI_Read:	
  4208                           ; 0 bytes @ 0x0
  4209                           
  4210  0070                     ?i1_SPI_Write:	
  4211                           ; 0 bytes @ 0x0
  4212                           
  4213  0070                     ??i1_SPI_Write:	
  4214                           ; 0 bytes @ 0x0
  4215                           
  4216  0070                     ?i1_RfTrcvMode:	
  4217                           ; 0 bytes @ 0x0
  4218                           
  4219  0070                     ?i1_RfHalStatemachine:	
  4220                           ; 0 bytes @ 0x0
  4221                           
  4222  0070                     ??i1__CCBufCanWr:	
  4223                           ; 0 bytes @ 0x0
  4224                           
  4225  0070                     ?i1__CCBufWrByte:	
  4226                           ; 0 bytes @ 0x0
  4227                           
  4228  0070                     ?_mrf49XaIsr:	
  4229                           ; 0 bytes @ 0x0
  4230                           
  4231  0070                     ?_SPI_Read:	
  4232                           ; 1 bytes @ 0x0
  4233                           
  4234  0070                     ?_RfHalTxGet:	
  4235                           ; 1 bytes @ 0x0
  4236                           
  4237  0070                     ?__CCBufCanRd:	
  4238                           ; 1 bytes @ 0x0
  4239                           
  4240  0070                     ?__CCBufPeekByte:	
  4241                           ; 1 bytes @ 0x0
  4242                           
  4243  0070                     ?_RfHalAnyFree:	
  4244                           ; 1 bytes @ 0x0
  4245                           
  4246  0070                     ?_RfHalGetFree:	
  4247                           ; 1 bytes @ 0x0
  4248                           
  4249  0070                     ?__CCBufRdByte:	
  4250                           ; 1 bytes @ 0x0
  4251                           
  4252  0070                     ?_RfHalRxPut:	
  4253                           ; 1 bytes @ 0x0
  4254                           
  4255  0070                     ?_RfTrcvGet:	
  4256                           ; 1 bytes @ 0x0
  4257                           
  4258  0070                     ?_RfTrcvCarrierPresent:	
  4259                           ; 1 bytes @ 0x0
  4260                           
  4261  0070                     ?_RfHalTickTxTh:	
  4262                           ; 1 bytes @ 0x0
  4263                           
  4264  0070                     ?_RfHalTickRxTh:	
  4265                           ; 1 bytes @ 0x0
  4266                           
  4267  0070                     ?_RfHalRxGet:	
  4268                           ; 1 bytes @ 0x0
  4269                           
  4270  0070                     ?_RfPacketsTickTh:	
  4271                           ; 1 bytes @ 0x0
  4272                           
  4273  0070                     ?__CCBufCanWr:	
  4274                           ; 1 bytes @ 0x0
  4275                           
  4276  0070                     ?i1_RfTrcvGet:	
  4277                           ; 1 bytes @ 0x0
  4278                           
  4279  0070                     ?i1_RfTrcvCrcTick:	
  4280                           ; 1 bytes @ 0x0
  4281                           
  4282  0070                     ?i1_SPI_Read:	
  4283                           ; 1 bytes @ 0x0
  4284                           
  4285  0070                     ?i1__CCBufCalcPt:	
  4286                           ; 1 bytes @ 0x0
  4287                           
  4288  0070                     ?i1__CCBufCanWr:	
  4289                           ; 1 bytes @ 0x0
  4290                           
  4291  0070                     ?i1_mrf49XaIsr:	
  4292                           ; 1 bytes @ 0x0
  4293                           
  4294  0070                     i1RfTrcvCrcTick@data:	
  4295                           ; 1 bytes @ 0x0
  4296                           
  4297  0070                     i1SPI_Read@data:	
  4298                           ; 1 bytes @ 0x0
  4299                           
  4300  0070                     i1SPI_Write@data:	
  4301                           ; 1 bytes @ 0x0
  4302                           
  4303  0070                     i1__CCBufCalcPt@move:	
  4304                           ; 1 bytes @ 0x0
  4305                           
  4306                           
  4307                           ; 1 bytes @ 0x0
  4308  0070                     	ds	1
  4309  0071                     ??i1_RfTrcvGet:	
  4310  0071                     ?i1_MRF49XACommand:	
  4311                           ; 0 bytes @ 0x1
  4312                           
  4313  0071                     ??i1_RfTrcvStatus:	
  4314                           ; 0 bytes @ 0x1
  4315                           
  4316  0071                     ??i1_RfTrcvCrcTick:	
  4317                           ; 0 bytes @ 0x1
  4318                           
  4319  0071                     ??i1__CCBufCalcPt:	
  4320                           ; 0 bytes @ 0x1
  4321                           
  4322  0071                     i1RfTrcvGet@b:	
  4323                           ; 0 bytes @ 0x1
  4324                           
  4325  0071                     i1RfTrcvCrcTick@initial:	
  4326                           ; 1 bytes @ 0x1
  4327                           
  4328  0071                     i1__CCBufCalcPt@entry:	
  4329                           ; 1 bytes @ 0x1
  4330                           
  4331  0071                     i1MRF49XACommand@cmd:	
  4332                           ; 1 bytes @ 0x1
  4333                           
  4334                           
  4335                           ; 2 bytes @ 0x1
  4336  0071                     	ds	1
  4337  0072                     i1__CCBufCalcPt@result:	
  4338                           
  4339                           ; 1 bytes @ 0x2
  4340  0072                     	ds	1
  4341  0073                     ??i1_RfTrcvPut:	
  4342  0073                     ??i1_MRF49XACommand:	
  4343                           ; 0 bytes @ 0x3
  4344                           
  4345  0073                     ??i1__CCBufWrByte:	
  4346                           ; 0 bytes @ 0x3
  4347                           
  4348  0073                     i1RfTrcvPut@byte:	
  4349                           ; 0 bytes @ 0x3
  4350                           
  4351                           
  4352                           ; 1 bytes @ 0x3
  4353  0073                     	ds	1
  4354  0074                     ??i1_RfTrcvSetup:	
  4355  0074                     i1RfTrcvSetup@tx:	
  4356                           ; 0 bytes @ 0x4
  4357                           
  4358  0074                     i1__CCBufWrByte@data:	
  4359                           ; 1 bytes @ 0x4
  4360                           
  4361                           
  4362                           ; 1 bytes @ 0x4
  4363  0074                     	ds	1
  4364  0075                     ??i1_RfTrcvMode:	
  4365  0075                     i1RfTrcvMode@tx:	
  4366                           ; 0 bytes @ 0x5
  4367                           
  4368                           
  4369                           ; 1 bytes @ 0x5
  4370  0075                     	ds	1
  4371  0076                     ??i1_RfHalStatemachine:	
  4372                           
  4373                           ; 0 bytes @ 0x6
  4374  0076                     	ds	1
  4375  0077                     ??_mrf49XaIsr:	
  4376  0077                     ??_MRF49XACommand:	
  4377                           ; 0 bytes @ 0x7
  4378                           
  4379  0077                     ??_SPI_Write:	
  4380                           ; 0 bytes @ 0x7
  4381                           
  4382  0077                     ??_SPI_Read:	
  4383                           ; 0 bytes @ 0x7
  4384                           
  4385  0077                     ??__CCBufInit:	
  4386                           ; 0 bytes @ 0x7
  4387                           
  4388  0077                     ??_RfTrcvMode:	
  4389                           ; 0 bytes @ 0x7
  4390                           
  4391  0077                     ??_RfHalTxGet:	
  4392                           ; 0 bytes @ 0x7
  4393                           
  4394  0077                     ??_RfHalGetReturn:	
  4395                           ; 0 bytes @ 0x7
  4396                           
  4397  0077                     ??__CCBufCanRd:	
  4398                           ; 0 bytes @ 0x7
  4399                           
  4400  0077                     ??_RfHalAnyFree:	
  4401                           ; 0 bytes @ 0x7
  4402                           
  4403  0077                     ??_RfHalGetFree:	
  4404                           ; 0 bytes @ 0x7
  4405                           
  4406  0077                     ??__CCBufRdReverse:	
  4407                           ; 0 bytes @ 0x7
  4408                           
  4409  0077                     ??_RfHalRxPut:	
  4410                           ; 0 bytes @ 0x7
  4411                           
  4412  0077                     ??_AdcInit:	
  4413                           ; 0 bytes @ 0x7
  4414                           
  4415  0077                     ??_ExtIntInit:	
  4416                           ; 0 bytes @ 0x7
  4417                           
  4418  0077                     ??_extInt:	
  4419                           ; 0 bytes @ 0x7
  4420                           
  4421  0077                     ??_RfTrcvPut:	
  4422                           ; 0 bytes @ 0x7
  4423                           
  4424  0077                     ??_RfTrcvGet:	
  4425                           ; 0 bytes @ 0x7
  4426                           
  4427  0077                     ??_RfTrcvStatus:	
  4428                           ; 0 bytes @ 0x7
  4429                           
  4430  0077                     ??_RfTrcvCarrierPresent:	
  4431                           ; 0 bytes @ 0x7
  4432                           
  4433  0077                     ??_RfTrcvCrcTick:	
  4434                           ; 0 bytes @ 0x7
  4435                           
  4436  0077                     ??_RfTrcvSetup:	
  4437                           ; 0 bytes @ 0x7
  4438                           
  4439  0077                     ??_MRF49XAInit:	
  4440                           ; 0 bytes @ 0x7
  4441                           
  4442  0077                     ??_RfHalInit:	
  4443                           ; 0 bytes @ 0x7
  4444                           
  4445  0077                     ??_RfHalRxGet:	
  4446                           ; 0 bytes @ 0x7
  4447                           
  4448  0077                     ??_RfPacketSimpleReply:	
  4449                           ; 0 bytes @ 0x7
  4450                           
  4451  0077                     ??_RfPacketsHandleClient:	
  4452                           ; 0 bytes @ 0x7
  4453                           
  4454  0077                     ??__CCBufCalcPt:	
  4455                           ; 0 bytes @ 0x7
  4456                           
  4457  0077                     ??__CCBufCanWr:	
  4458                           ; 0 bytes @ 0x7
  4459                           
  4460  0077                     ??_SysInitGpio:	
  4461                           ; 0 bytes @ 0x7
  4462                           
  4463  0077                     ??_main:	
  4464                           ; 0 bytes @ 0x7
  4465                           
  4466  0077                     ??___bmul:	
  4467                           ; 0 bytes @ 0x7
  4468                           
  4469  0077                     ??i1_mrf49XaIsr:	
  4470                           ; 0 bytes @ 0x7
  4471                           
  4472                           
  4473                           	psect	cstackBANK0
  4474  0037                     __pcstackBANK0:	
  4475                           ; 0 bytes @ 0x7
  4476                           
  4477  0037                     ??__CCBufReset:	
  4478  0037                     ??_RfHalTxPutAgain:	
  4479                           ; 0 bytes @ 0x0
  4480                           
  4481  0037                     ?_RfTrcvCrcTick:	
  4482                           ; 0 bytes @ 0x0
  4483                           
  4484  0037                     ?_RfHalTxPut:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0037                     ?__CCBufCalcPt:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0037                     ?___bmul:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0037                     RfTrcvCrcTick@data:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0037                     SPI_Read@data:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0037                     SPI_Write@data:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0037                     RfHalGetReturn@packet:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0037                     RfHalRxPut@packet:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0037                     RfHalTxPut@needAck:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0037                     __CCBufCalcPt@move:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0037                     ___bmul@multiplicand:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517                           
  4518                           ; 1 bytes @ 0x0
  4519  0037                     	ds	1
  4520  0038                     ?_MRF49XACommand:	
  4521  0038                     ??_RfHalTxPut:	
  4522                           ; 0 bytes @ 0x1
  4523                           
  4524  0038                     RfTrcvGet@b:	
  4525                           ; 0 bytes @ 0x1
  4526                           
  4527  0038                     RfTrcvCrcTick@initial:	
  4528                           ; 1 bytes @ 0x1
  4529                           
  4530  0038                     __CCBufReset@i:	
  4531                           ; 1 bytes @ 0x1
  4532                           
  4533  0038                     __CCBufCalcPt@entry:	
  4534                           ; 1 bytes @ 0x1
  4535                           
  4536  0038                     ___bmul@product:	
  4537                           ; 1 bytes @ 0x1
  4538                           
  4539  0038                     MRF49XACommand@cmd:	
  4540                           ; 1 bytes @ 0x1
  4541                           
  4542                           
  4543                           ; 2 bytes @ 0x1
  4544  0038                     	ds	1
  4545  0039                     RfHalTxPut@packet:	
  4546  0039                     __CCBufCalcPt@result:	
  4547                           ; 1 bytes @ 0x2
  4548                           
  4549  0039                     ___bmul@multiplier:	
  4550                           ; 1 bytes @ 0x2
  4551                           
  4552                           
  4553                           ; 1 bytes @ 0x2
  4554  0039                     	ds	1
  4555  003A                     ??__CCBufPeekByte:	
  4556  003A                     ??__CCBufRdByte:	
  4557                           ; 0 bytes @ 0x3
  4558                           
  4559  003A                     ??__CCBufWrByte:	
  4560                           ; 0 bytes @ 0x3
  4561                           
  4562  003A                     ?_RfPacketSimpleReply:	
  4563                           ; 0 bytes @ 0x3
  4564                           
  4565  003A                     RfTrcvPut@byte:	
  4566                           ; 0 bytes @ 0x3
  4567                           
  4568  003A                     RfHalTxGet@i:	
  4569                           ; 1 bytes @ 0x3
  4570                           
  4571  003A                     RfPacketSimpleReply@msg:	
  4572                           ; 1 bytes @ 0x3
  4573                           
  4574  003A                     __CCBufRdReverse@qty:	
  4575                           ; 1 bytes @ 0x3
  4576                           
  4577                           
  4578                           ; 1 bytes @ 0x3
  4579  003A                     	ds	1
  4580  003B                     RfTrcvSetup@tx:	
  4581  003B                     RfPacketSimpleReply@needAck:	
  4582                           ; 1 bytes @ 0x4
  4583                           
  4584  003B                     __CCBufRdByte@res:	
  4585                           ; 1 bytes @ 0x4
  4586                           
  4587  003B                     __CCBufPeekByte@res:	
  4588                           ; 1 bytes @ 0x4
  4589                           
  4590  003B                     __CCBufWrByte@data:	
  4591                           ; 1 bytes @ 0x4
  4592                           
  4593                           
  4594                           ; 1 bytes @ 0x4
  4595  003B                     	ds	1
  4596  003C                     ??_RfHalTickRxTh:	
  4597  003C                     MRF49XAInit@i:	
  4598                           ; 0 bytes @ 0x5
  4599                           
  4600  003C                     RfTrcvMode@tx:	
  4601                           ; 1 bytes @ 0x5
  4602                           
  4603  003C                     RfPacketSimpleReply@nodeTmp:	
  4604                           ; 1 bytes @ 0x5
  4605                           
  4606                           
  4607                           ; 1 bytes @ 0x5
  4608  003C                     	ds	1
  4609  003D                     ??_RfHalTickTxTh:	
  4610  003D                     ??_RfHalStatemachine:	
  4611                           ; 0 bytes @ 0x6
  4612                           
  4613  003D                     MRF49XAInit@j:	
  4614                           ; 0 bytes @ 0x6
  4615                           
  4616  003D                     RfHalInit@i:	
  4617                           ; 1 bytes @ 0x6
  4618                           
  4619  003D                     RfPacketSimpleReply@packet:	
  4620                           ; 1 bytes @ 0x6
  4621                           
  4622                           
  4623                           ; 1 bytes @ 0x6
  4624  003D                     	ds	1
  4625  003E                     RfHalTickRxTh@pktLength:	
  4626  003E                     RfPacketsHandleClient@packet:	
  4627                           ; 1 bytes @ 0x7
  4628                           
  4629                           
  4630                           ; 1 bytes @ 0x7
  4631  003E                     	ds	1
  4632  003F                     ??_RfPacketsTickTh:	
  4633  003F                     RfHalTickTxTh@pt:	
  4634                           ; 0 bytes @ 0x8
  4635                           
  4636  003F                     RfHalTickRxTh@pt:	
  4637                           ; 1 bytes @ 0x8
  4638                           
  4639                           
  4640                           ; 1 bytes @ 0x8
  4641  003F                     	ds	2
  4642  0041                     RfPacketsTickTh@pt:	
  4643                           
  4644                           ; 1 bytes @ 0xA
  4645  0041                     	ds	1
  4646                           
  4647                           	psect	text1
  4648  065B                     __ptext1:	
  4649 ;; *************** function _mrf49XaIsr *****************
  4650 ;; Defined at:
  4651 ;;		line 28 in file "../../../src/node/main.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      unsigned char 
  4658 ;; Registers used:
  4659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 1F/0
  4662 ;;		On exit  : 1F/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4665 ;;      Params:         0       0       0       0
  4666 ;;      Locals:         0       0       0       0
  4667 ;;      Temps:          0       0       0       0
  4668 ;;      Totals:         0       0       0       0
  4669 ;;Total ram usage:        0 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:   14
  4672 ;; This function calls:
  4673 ;;		_RfHalStatemachine
  4674 ;;		_RfTrcvSetup
  4675 ;;		_RfTrcvStatus
  4676 ;; This function is called by:
  4677 ;;		_main
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           
  4682                           ;psect for function _mrf49XaIsr
  4683  065B                     _mrf49XaIsr:	
  4684  065B                     l644:	
  4685                           ;incstack = 0
  4686                           ; Regs used in _mrf49XaIsr: [allreg]
  4687                           ;main.c: 30: do
  4688                           
  4689                           
  4690                           ;main.c: 31: {
  4691                           ;main.c: 32: RfTrcvStatus();
  4692  065B  3183  230B  3186   	fcall	_RfTrcvStatus
  4693                           
  4694                           ;main.c: 33: isr++;
  4695  065E  0020               	movlb	0	; select bank0
  4696  065F  0AAB               	incf	_isr,f	;volatile
  4697                           
  4698                           ;main.c: 35: if (rfTrcvStatus.flags.msb.fifoTxRx)
  4699  0660  1FB5               	btfss	_rfTrcvStatus,7
  4700  0661  2E69               	goto	l2477
  4701                           
  4702                           ;main.c: 36: {
  4703                           ;main.c: 37: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  4704  0662  0323               	decf	_rfStatus+3,w
  4705  0663  1D03               	skipz
  4706  0664  2E67               	goto	l2475
  4707  0665  1FB6               	btfss	_rfTrcvStatus+1,7
  4708  0666  2E69               	goto	l2477
  4709  0667                     l2475:	
  4710                           
  4711                           ;main.c: 41: else
  4712                           ;main.c: 42: {
  4713                           ;main.c: 43: RfHalStatemachine();
  4714  0667  2677  3186         	fcall	_RfHalStatemachine
  4715  0669                     l2477:	
  4716                           
  4717                           ;main.c: 44: }
  4718                           ;main.c: 45: }
  4719                           ;main.c: 46: if (rfTrcvStatus.flags.msb.por)
  4720  0669  1F35               	btfss	_rfTrcvStatus,6
  4721  066A  2E6F               	goto	l2481
  4722                           
  4723                           ;main.c: 47: {
  4724                           ;main.c: 48: RfTrcvSetup(0);
  4725  066B  3000               	movlw	0
  4726  066C  3180  2078  3186   	fcall	_RfTrcvSetup
  4727  066F                     l2481:	
  4728                           
  4729                           ;main.c: 49: }
  4730                           ;main.c: 51: } while (rfTrcvStatus.flags.msb.por || rfTrcvStatus.flags.msb.fifoTxRx);
  4731  066F  0020               	movlb	0	; select bank0
  4732  0670  1F35               	btfss	_rfTrcvStatus,6
  4733  0671  1BB5               	btfsc	_rfTrcvStatus,7
  4734  0672  2E5B               	goto	l644
  4735                           
  4736                           ;main.c: 53: return (PORTAbits.RA2 == 1) ? 1 : 0;
  4737  0673  0C0C               	rrf	12,w	;volatile
  4738  0674  0C89               	rrf	9,f
  4739  0675  3901               	andlw	1
  4740  0676  0008               	return
  4741  0677                     __end_of_mrf49XaIsr:	
  4742  0677                     __ptext2:	
  4743 ;; *************** function _RfHalStatemachine *****************
  4744 ;; Defined at:
  4745 ;;		line 374 in file "../../../src/rfstack/hal.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;		None
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;		None               void
  4752 ;; Registers used:
  4753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 1F/0
  4756 ;;		On exit  : 1F/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4759 ;;      Params:         0       0       0       0
  4760 ;;      Locals:         0       0       0       0
  4761 ;;      Temps:          0       1       0       0
  4762 ;;      Totals:         0       1       0       0
  4763 ;;Total ram usage:        1 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:   13
  4766 ;; This function calls:
  4767 ;;		_RfTrcvCrcTick
  4768 ;;		_RfTrcvGet
  4769 ;;		_RfTrcvMode
  4770 ;;		_RfTrcvPut
  4771 ;;		__CCBufWrByte
  4772 ;; This function is called by:
  4773 ;;		_mrf49XaIsr
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           
  4778                           ;psect for function _RfHalStatemachine
  4779  0677                     _RfHalStatemachine:	
  4780                           
  4781                           ;hal.c: 428: break;
  4782                           
  4783                           ;hal.c: 376: switch (rfStatus.isr.state)
  4784                           
  4785                           ;incstack = 0
  4786                           ; Regs used in _RfHalStatemachine: [allreg]
  4787  0677  0822               	movf	_rfStatus+2,w
  4788                           
  4789                           ; Switch size 1, requested type "space"
  4790                           ; Number of cases is 11, Range of values is 0 to 10
  4791                           ; switch strategies available:
  4792                           ; Name         Instructions Cycles
  4793                           ; direct_byte           28     6 (fixed)
  4794                           ; simple_byte           34    18 (average)
  4795                           ; jumptable            260     6 (fixed)
  4796                           ;	Chosen strategy is direct_byte
  4797  0678  0084               	movwf	4
  4798  0679  300B               	movlw	11
  4799  067A  0204               	subwf	4,w
  4800  067B  1803               	skipnc
  4801  067C  0008               	return
  4802  067D  3187               	movlp	high S3495
  4803  067E  3504               	lslf	4,w
  4804  067F  3E48               	addlw	low S3495
  4805  0680  0082               	movwf	2
  4806  0681  0008               	return
  4807  0682                     l2969:	
  4808                           
  4809                           ;hal.c: 380: _CCBufWrByte(RfTrcvGet());
  4810  0682  26D3  3186         	fcall	_RfTrcvGet
  4811  0684  2EE1               	ljmp	__CCBufWrByte
  4812  0685                     l2971:	
  4813                           ;hal.c: 381: break;
  4814                           
  4815                           
  4816                           ;hal.c: 385: case TX_PREAMBLE2:
  4817                           ;hal.c: 386: RfTrcvPut(0xAA);
  4818  0685  30AA               	movlw	170
  4819  0686                     L1:	
  4820  0686  26C9               	fcall	_RfTrcvPut
  4821                           
  4822                           ;hal.c: 387: rfStatus.isr.state++;
  4823  0687  0020               	movlb	0	; select bank0
  4824  0688  0AA2               	incf	_rfStatus+2,f
  4825                           
  4826                           ;hal.c: 388: break;
  4827  0689  0008               	return
  4828  068A                     l2975:	
  4829                           
  4830                           ;hal.c: 391: RfTrcvPut(0x2D);
  4831  068A  302D               	movlw	45
  4832  068B  2E86               	goto	L1
  4833  068C                     l2979:	
  4834                           
  4835                           ;hal.c: 395: RfTrcvPut(0xD4);
  4836  068C  30D4               	movlw	212
  4837  068D  2E86               	goto	L1
  4838  068E                     l2983:	
  4839                           
  4840                           ;hal.c: 399: RfTrcvPut(rfStatus.isr.txPacket->size);
  4841  068E  0821               	movf	_rfStatus+1,w
  4842  068F  3E1B               	addlw	27
  4843  0690  2EBC               	goto	L2
  4844  0691                     l2987:	
  4845                           
  4846                           ;hal.c: 403: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  4847  0691  0820               	movf	_rfStatus,w
  4848  0692  0721               	addwf	_rfStatus+1,w
  4849  0693  00BD               	movwf	??_RfHalStatemachine
  4850  0694  0A3D               	incf	??_RfHalStatemachine,w
  4851  0695  0086               	movwf	6
  4852  0696  0187               	clrf	7
  4853  0697  0801               	movf	1,w
  4854  0698  26C9  3186         	fcall	_RfTrcvPut
  4855                           
  4856                           ;hal.c: 404: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  4857  069A  0020               	movlb	0	; select bank0
  4858  069B  0821               	movf	_rfStatus+1,w
  4859  069C  3E19               	addlw	25
  4860  069D  0086               	movwf	6
  4861  069E  0187               	clrf	7
  4862  069F  0820               	movf	_rfStatus,w
  4863  06A0  0721               	addwf	_rfStatus+1,w
  4864  06A1  00BD               	movwf	??_RfHalStatemachine
  4865  06A2  0084               	movwf	4
  4866  06A3  0185               	clrf	5
  4867  06A4  3F01               	moviw [1]fsr0
  4868  06A5  00B7               	movwf	RfTrcvCrcTick@data
  4869  06A6  0821               	movf	_rfStatus+1,w
  4870  06A7  3E19               	addlw	25
  4871  06A8  0084               	movwf	4
  4872  06A9  0800               	movf	0,w
  4873  06AA                     i1L__ptext25:	
  4874                           
  4875                           ;psect for function _RfTrcvCrcTick
  4876  06AA                     i1L_RfTrcvCrcTick:	
  4877                           
  4878                           ;incstack = 0
  4879                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  4880                           ;RfTrcvCrcTick@initial stored from wreg
  4881  06AA  00B8               	movwf	RfTrcvCrcTick@initial
  4882  06AB                     i1Ll2583:	
  4883                           
  4884                           ;mrf49xa.c: 59: return (initial ^ data);
  4885  06AB  0838               	movf	RfTrcvCrcTick@initial,w
  4886  06AC  0637               	xorwf	RfTrcvCrcTick@data,w
  4887  06AD                     i1Ll181:	
  4888  06AD  0081               	movwf	1
  4889                           
  4890                           ;hal.c: 405: rfStatus.isr.byteCounter++;
  4891  06AE  0AA0               	incf	_rfStatus,f
  4892                           
  4893                           ;hal.c: 406: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  4894  06AF  0821               	movf	_rfStatus+1,w
  4895  06B0  3E1B               	addlw	27
  4896  06B1  0086               	movwf	6
  4897  06B2  0187               	clrf	7
  4898  06B3  0801               	movf	1,w
  4899  06B4  0220               	subwf	_rfStatus,w
  4900  06B5  1C03               	skipc
  4901  06B6  0008               	return
  4902                           
  4903                           ;hal.c: 407: rfStatus.isr.state = TX_CRC;
  4904  06B7  3007               	movlw	7
  4905  06B8  00A2               	movwf	_rfStatus+2
  4906  06B9  0008               	return
  4907  06BA                     l2997:	
  4908                           
  4909                           ;hal.c: 410: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  4910  06BA  0821               	movf	_rfStatus+1,w
  4911  06BB  3E19               	addlw	25
  4912  06BC                     L2:	
  4913  06BC  0086               	movwf	6
  4914  06BD  0187               	clrf	7
  4915  06BE  0801               	movf	1,w
  4916  06BF  2E86               	goto	L1
  4917  06C0                     l3001:	
  4918                           
  4919                           ;hal.c: 415: case TX_NULL2:
  4920                           ;hal.c: 416: RfTrcvPut(0);
  4921  06C0  3000               	movlw	0
  4922  06C1  2E86               	goto	L1
  4923  06C2                     l3005:	
  4924                           
  4925                           ;hal.c: 420: RfTrcvPut(0);
  4926  06C2  3000               	movlw	0
  4927  06C3  26C9               	fcall	_RfTrcvPut
  4928                           
  4929                           ;hal.c: 421: rfStatus.isr.state = RX_RECV;
  4930  06C4  0020               	movlb	0	; select bank0
  4931  06C5  3000               	movlw	0
  4932  06C6  01A2               	clrf	_rfStatus+2
  4933                           
  4934                           ;hal.c: 427: RfTrcvMode(0);
  4935  06C7  3183  2B90         	ljmp	_RfTrcvMode
  4936  06C9                     __end_of_RfHalStatemachine:	
  4937  06C9                     __ptext36:	
  4938 ;; *************** function _RfTrcvPut *****************
  4939 ;; Defined at:
  4940 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  byte            1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  byte            1    3[BANK0 ] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;		None               void
  4947 ;; Registers used:
  4948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4949 ;; Tracked objects:
  4950 ;;		On entry : 1D/0
  4951 ;;		On exit  : 1F/2
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4954 ;;      Params:         0       0       0       0
  4955 ;;      Locals:         0       1       0       0
  4956 ;;      Temps:          0       0       0       0
  4957 ;;      Totals:         0       1       0       0
  4958 ;;Total ram usage:        1 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:   10
  4961 ;; This function calls:
  4962 ;;		_MRF49XACommand
  4963 ;; This function is called by:
  4964 ;;		_RfTrcvSetup
  4965 ;;		_RfHalStatemachine
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _RfTrcvPut
  4971  06C9                     _RfTrcvPut:	
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _RfTrcvPut: [allreg]
  4975                           ;RfTrcvPut@byte stored from wreg
  4976  06C9  0020               	movlb	0	; select bank0
  4977  06CA  00BA               	movwf	RfTrcvPut@byte
  4978                           
  4979                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  4980  06CB  00B8               	movwf	MRF49XACommand@cmd
  4981  06CC  3000               	movlw	0
  4982  06CD  01B9               	clrf	MRF49XACommand@cmd+1
  4983  06CE  04B8               	iorwf	MRF49XACommand@cmd,f
  4984  06CF  30B8               	movlw	184
  4985  06D0  04B9               	iorwf	MRF49XACommand@cmd+1,f
  4986  06D1  3181  292A         	ljmp	l2491
  4987  06D3                     __end_of_RfTrcvPut:	
  4988  06D3                     __ptext5:	
  4989 ;; *************** function _RfTrcvGet *****************
  4990 ;; Defined at:
  4991 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  b               1    1[BANK0 ] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      unsigned char 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0, pclath, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 1F/0
  5002 ;;		On exit  : 1F/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5005 ;;      Params:         0       0       0       0
  5006 ;;      Locals:         0       1       0       0
  5007 ;;      Temps:          0       0       0       0
  5008 ;;      Totals:         0       1       0       0
  5009 ;;Total ram usage:        1 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    9
  5012 ;; This function calls:
  5013 ;;		_SPI_Read
  5014 ;;		_SPI_Write
  5015 ;; This function is called by:
  5016 ;;		_RfHalStatemachine
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           
  5021                           ;psect for function _RfTrcvGet
  5022  06D3                     _RfTrcvGet:	
  5023                           
  5024                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  5028  06D3  0022               	movlb	2	; select bank2
  5029  06D4  130E               	bcf	14,6	;volatile
  5030                           
  5031                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  5032  06D5  30B0               	movlw	176
  5033  06D6  3181  2135  3186   	fcall	_SPI_Write
  5034                           
  5035                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  5036  06D9  3183  2315         	fcall	_SPI_Read
  5037  06DB  00B8               	movwf	RfTrcvGet@b
  5038                           
  5039                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  5040  06DC  0022               	movlb	2	; select bank2
  5041  06DD  170E               	bsf	14,6	;volatile
  5042                           
  5043                           ;mrf49xa.c: 26: return b;
  5044  06DE  0020               	movlb	0	; select bank0
  5045  06DF  0838               	movf	RfTrcvGet@b,w
  5046  06E0  0008               	return
  5047  06E1                     __end_of_RfTrcvGet:	
  5048  06E1                     __ptext3:	
  5049 ;; *************** function __CCBufWrByte *****************
  5050 ;; Defined at:
  5051 ;;		line 89 in file "../../../src/utilities/ccbuf_static.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  data            1    wreg     unsigned char 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  data            1    4[BANK0 ] unsigned char 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;		None               void
  5058 ;; Registers used:
  5059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : 1F/0
  5062 ;;		On exit  : 1F/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5065 ;;      Params:         0       0       0       0
  5066 ;;      Locals:         0       1       0       0
  5067 ;;      Temps:          0       1       0       0
  5068 ;;      Totals:         0       2       0       0
  5069 ;;Total ram usage:        2 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    9
  5072 ;; This function calls:
  5073 ;;		__CCBufCalcPt
  5074 ;;		__CCBufCanWr
  5075 ;; This function is called by:
  5076 ;;		_RfHalStatemachine
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           
  5081                           ;psect for function __CCBufWrByte
  5082  06E1                     __CCBufWrByte:	
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in __CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5086                           ;__CCBufWrByte@data stored from wreg
  5087  06E1  00BB               	movwf	__CCBufWrByte@data
  5088  06E2                     i2L__ptext4:	
  5089                           ;ccbuf_static.c: 91: if (_CCBufCanWr())
  5090                           
  5091                           
  5092                           ;psect for function __CCBufCanWr
  5093  06E2                     i2L__CCBufCanWr:	
  5094  06E2                     i2Ll3107:	
  5095  06E2  0844               	movf	_rfRxCC+2,w
  5096  06E3  0645               	xorwf	_rfRxCC+3,w
  5097  06E4  1D03               	btfss	3,2
  5098  06E5  2EEA               	ljmp	i2Ll3115
  5099  06E6  2EE8               	ljmp	i2Ll3109
  5100  06E7                     i2Lu2171:	
  5101  06E7  2EEA               	ljmp	i2Ll3115
  5102  06E8                     i2Lu2170:	
  5103  06E8                     i2Ll3109:	
  5104  06E8  3000               	movlw	0
  5105  06E9  2EEB               	ljmp	iL8
  5106  06EA                     i2Ll3115:	
  5107                           
  5108                           ;ccbuf_static.c: 37: else return 1;
  5109  06EA  3001               	movlw	1
  5110  06EB                     i2Ll543:	
  5111  06EB                     iL8:	
  5112  06EB  3A00               	xorlw	0
  5113  06EC  1903               	skipnz
  5114  06ED  0008               	return
  5115  06EE  0844               	movf	_rfRxCC+2,w
  5116  06EF  0742               	addwf	_rfRxCC,w
  5117  06F0  00BA               	movwf	??__CCBufWrByte
  5118  06F1  0086               	movwf	6
  5119  06F2  3001               	movlw	1	; select bank2/3
  5120  06F3  0087               	movwf	7
  5121  06F4  083B               	movf	__CCBufWrByte@data,w
  5122  06F5  0081               	movwf	1
  5123  06F6  01B7               	clrf	__CCBufCalcPt@move
  5124  06F7  0AB7               	incf	__CCBufCalcPt@move,f
  5125  06F8  0844               	movf	_rfRxCC+2,w
  5126  06F9  3182  229A         	fcall	__CCBufCalcPt
  5127  06FB  00C4               	movwf	_rfRxCC+2
  5128  06FC  0008               	return
  5129  06FD                     __end_of__CCBufWrByte:	
  5130                           
  5131                           	psect	swtext1
  5132  0748                     __pswtext1:	
  5133  0748                     S3495:	
  5134  0748  3186  2E82         	ljmp	l2969
  5135  074A  3186  2E85         	ljmp	l2971
  5136  074C  3186  2E85         	ljmp	l2971
  5137  074E  3186  2E8A         	ljmp	l2975
  5138  0750  3186  2E8C         	ljmp	l2979
  5139  0752  3186  2E8E         	ljmp	l2983
  5140  0754  3186  2E91         	ljmp	l2987
  5141  0756  3186  2EBA         	ljmp	l2997
  5142  0758  3186  2EC0         	ljmp	l3001
  5143  075A  3186  2EC0         	ljmp	l3001
  5144  075C  3186  2EC2         	ljmp	l3005
  5145                           
  5146                           	psect	text4
  5147  0000                     __ptext4:	
  5148 ;; *************** function __CCBufCanWr *****************
  5149 ;; Defined at:
  5150 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      unsigned char 
  5157 ;; Registers used:
  5158 ;;		wreg
  5159 ;; Tracked objects:
  5160 ;;		On entry : 1F/0
  5161 ;;		On exit  : 1F/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5164 ;;      Params:         0       0       0       0
  5165 ;;      Locals:         0       0       0       0
  5166 ;;      Temps:          0       0       0       0
  5167 ;;      Totals:         0       0       0       0
  5168 ;;Total ram usage:        0 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    8
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		__CCBufWrByte
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178  0000                     __CCBufCanWr:	
  5179                           ;psect for function __CCBufCanWr
  5180                           
  5181  0000                     __end_of__CCBufCanWr:	
  5182                           ;ccbuf_static.c: 37: else return 1;
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in __CCBufCanWr: [wreg]
  5186                           
  5187                           
  5188                           	psect	text7
  5189  0592                     __ptext7:	
  5190 ;; *************** function _RfPacketsTickTh *****************
  5191 ;; Defined at:
  5192 ;;		line 158 in file "../../../src/rfstack/packets.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  pt              1    wreg     PTR struct pt
  5195 ;;		 -> halPkTh(2), 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  pt              1   10[BANK0 ] PTR struct pt
  5198 ;;		 -> halPkTh(2), 
  5199 ;;  PT_YIELD_FLA    1    0        unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      unsigned char 
  5202 ;; Registers used:
  5203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 1E/0
  5206 ;;		On exit  : 1F/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5209 ;;      Params:         0       0       0       0
  5210 ;;      Locals:         0       1       0       0
  5211 ;;      Temps:          0       2       0       0
  5212 ;;      Totals:         0       3       0       0
  5213 ;;Total ram usage:        3 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:   11
  5216 ;; This function calls:
  5217 ;;		_RfHalRxGet
  5218 ;;		_RfHalTxPutAgain
  5219 ;;		_RfPacketsHandleClient
  5220 ;; This function is called by:
  5221 ;;		_main
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _RfPacketsTickTh
  5227  0592                     _RfPacketsTickTh:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _RfPacketsTickTh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5231                           ;RfPacketsTickTh@pt stored from wreg
  5232  0592  0020               	movlb	0	; select bank0
  5233  0593  00C1               	movwf	RfPacketsTickTh@pt
  5234                           
  5235                           ;packets.c: 165: { char PT_YIELD_FLAG = 1; switch((pt)->lc) { case 0:;
  5236  0594  0AA8               	incf	RfPacketsTickTh@timeout,f
  5237  0595  2DBA               	goto	l3073
  5238  0596                     l3053:	
  5239  0596  0841               	movf	RfPacketsTickTh@pt,w
  5240  0597  0086               	movwf	6
  5241  0598  30AA               	movlw	170
  5242  0599  3183  23C6  3185   	fcall	PL132	;call to abstracted procedure
  5243  059C                     l3055:	
  5244  059C  25CE  3185         	fcall	_RfHalRxGet
  5245  059E  0020               	movlb	0	; select bank0
  5246  059F  00A7               	movwf	RfPacketsTickTh@packet
  5247  05A0  08A7               	movf	RfPacketsTickTh@packet,f
  5248  05A1  1D03               	skipz
  5249  05A2  2DA7               	goto	l3061
  5250  05A3  301A               	movlw	26
  5251  05A4  0228               	subwf	RfPacketsTickTh@timeout,w
  5252  05A5  1C03               	btfss	3,0
  5253  05A6  0008               	return
  5254  05A7                     l3061:	
  5255                           
  5256                           ;packets.c: 172: if (packet)
  5257  05A7  0827               	movf	RfPacketsTickTh@packet,w
  5258  05A8  1903               	btfsc	3,2
  5259  05A9  2DAD               	goto	l3065
  5260                           
  5261                           ;packets.c: 173: {
  5262                           ;packets.c: 184: RfPacketsHandleClient(packet);
  5263  05AA  0827               	movf	RfPacketsTickTh@packet,w
  5264  05AB  25EE  3185         	fcall	_RfPacketsHandleClient
  5265  05AD                     l3065:	
  5266                           
  5267                           ;packets.c: 186: }
  5268                           ;packets.c: 188: if (timeout > 25)
  5269  05AD  301A               	movlw	26
  5270  05AE  0228               	subwf	RfPacketsTickTh@timeout,w
  5271  05AF  1C03               	skipc
  5272  05B0  2DB8               	goto	l3071
  5273                           
  5274                           ;packets.c: 189: {
  5275                           ;packets.c: 191: if (packet->flags.proc == PCKT_NEED_PROC)
  5276  05B1  0827               	movf	RfPacketsTickTh@packet,w
  5277  05B2  0086               	movwf	6
  5278  05B3  0187               	clrf	7
  5279  05B4  1E81               	btfss	1,5
  5280  05B5  2DB8               	goto	l3071
  5281                           
  5282                           ;packets.c: 192: {
  5283                           ;packets.c: 193: RfHalTxPutAgain();
  5284  05B6  25DB  3185         	fcall	_RfHalTxPutAgain
  5285  05B8                     l3071:	
  5286                           
  5287                           ;packets.c: 194: }
  5288                           ;packets.c: 195: }
  5289                           ;packets.c: 197: timeout = 0;
  5290  05B8  01A8               	clrf	RfPacketsTickTh@timeout
  5291  05B9  2D96               	goto	l3053
  5292  05BA                     l3073:	
  5293  05BA  0841               	movf	RfPacketsTickTh@pt,w
  5294  05BB  0086               	movwf	6
  5295  05BC  0187               	clrf	7
  5296  05BD  3F40               	moviw [0]fsr1
  5297  05BE  00BF               	movwf	??_RfPacketsTickTh
  5298  05BF  3F41               	moviw [1]fsr1
  5299  05C0  00C0               	movwf	??_RfPacketsTickTh+1
  5300                           
  5301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5302                           ; Switch size 1, requested type "space"
  5303                           ; Number of cases is 1, Range of values is 0 to 0
  5304                           ; switch strategies available:
  5305                           ; Name         Instructions Cycles
  5306                           ; simple_byte            4     3 (average)
  5307                           ; direct_byte            8     6 (fixed)
  5308                           ; jumptable            260     6 (fixed)
  5309                           ;	Chosen strategy is simple_byte
  5310  05C1  1903               	skipnz
  5311  05C2  2DC4               	goto	l3497
  5312  05C3  2DCC               	goto	l3075
  5313  05C4                     l3497:	
  5314                           
  5315                           ; Switch size 1, requested type "space"
  5316                           ; Number of cases is 2, Range of values is 0 to 170
  5317                           ; switch strategies available:
  5318                           ; Name         Instructions Cycles
  5319                           ; simple_byte            7     4 (average)
  5320                           ; jumptable            260     6 (fixed)
  5321                           ;	Chosen strategy is simple_byte
  5322  05C4  083F               	movf	??_RfPacketsTickTh,w
  5323  05C5  3A00               	xorlw	0	; case 0
  5324  05C6  1903               	skipnz
  5325  05C7  2D96               	goto	l3053
  5326  05C8  3AAA               	xorlw	170	; case 170
  5327  05C9  1903               	skipnz
  5328  05CA  2D9C               	goto	l3055
  5329  05CB  2DCC               	goto	l3075
  5330  05CC                     l3075:	
  5331  05CC  0841               	movf	RfPacketsTickTh@pt,w
  5332  05CD  2E55               	ljmp	PL128	;call to abstracted procedure
  5333  05CE                     __end_of_RfPacketsTickTh:	
  5334  05CE                     __ptext12:	
  5335 ;; *************** function _RfHalRxGet *****************
  5336 ;; Defined at:
  5337 ;;		line 265 in file "../../../src/rfstack/hal.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      PTR struct RfTransceiver
  5344 ;; Registers used:
  5345 ;;		wreg
  5346 ;; Tracked objects:
  5347 ;;		On entry : 1F/0
  5348 ;;		On exit  : 1F/1
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5351 ;;      Params:         0       0       0       0
  5352 ;;      Locals:         0       0       0       0
  5353 ;;      Temps:          0       0       0       0
  5354 ;;      Totals:         0       0       0       0
  5355 ;;Total ram usage:        0 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    8
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_RfPacketsTickTh
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _RfHalRxGet
  5367  05CE                     _RfHalRxGet:	
  5368                           
  5369                           ;hal.c: 281: if (rfPackets[0].flags.proc == PCKT_NEED_PROC && rfPackets[0].flags.tx == 0)
  5370                           
  5371                           ;incstack = 0
  5372                           ; Regs used in _RfHalRxGet: [wreg]
  5373  05CE  0021               	movlb	1	; select bank1
  5374  05CF  1AA0               	btfsc	_rfPackets^(0+128),5
  5375  05D0  1A20               	btfsc	_rfPackets^(0+128),4
  5376  05D1  2DD5               	goto	l416
  5377  05D2  30A0               	movlw	_rfPackets& (0+255)
  5378                           
  5379                           ;hal.c: 282: {
  5380                           ;hal.c: 283: rfPackets[0].flags.proc = PCKT_NO_PROC;
  5381  05D3  12A0               	bcf	_rfPackets^(0+128),5
  5382                           
  5383                           ;hal.c: 284: return &(rfPackets[0]);
  5384  05D4  0008               	return
  5385  05D5                     l416:	
  5386                           
  5387                           ;hal.c: 285: }
  5388                           ;hal.c: 286: if (rfPackets[1].flags.proc == PCKT_NEED_PROC && rfPackets[1].flags.tx == 0)
  5389  05D5  1ABC               	btfsc	(_rfPackets^(0+128)+28),5
  5390  05D6  1A3C               	btfsc	(_rfPackets^(0+128)+28),4
  5391  05D7  3400               	retlw	0
  5392  05D8  30BC               	movlw	(_rfPackets+28)& (0+255)
  5393                           
  5394                           ;hal.c: 287: {
  5395                           ;hal.c: 288: rfPackets[1].flags.proc = PCKT_NO_PROC;
  5396  05D9  12BC               	bcf	(_rfPackets^(0+128)+28),5
  5397                           
  5398                           ;hal.c: 289: return &(rfPackets[1]);
  5399  05DA  0008               	return
  5400  05DB                     __end_of_RfHalRxGet:	
  5401                           ;hal.c: 290: }
  5402                           ;hal.c: 291: return 0;
  5403                           
  5404  05DB                     __ptext11:	
  5405 ;; *************** function _RfHalTxPutAgain *****************
  5406 ;; Defined at:
  5407 ;;		line 366 in file "../../../src/rfstack/hal.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;		None
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 1F/0
  5418 ;;		On exit  : 1F/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5421 ;;      Params:         0       0       0       0
  5422 ;;      Locals:         0       0       0       0
  5423 ;;      Temps:          0       1       0       0
  5424 ;;      Totals:         0       1       0       0
  5425 ;;Total ram usage:        1 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    8
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_RfPacketsTickTh
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function _RfHalTxPutAgain
  5437  05DB                     _RfHalTxPutAgain:	
  5438                           
  5439                           ;hal.c: 368: rfStatus.isr.txPacket->flags.resends++;
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in _RfHalTxPutAgain: [wreg+fsr1l+fsr1h+status,2+status,0]
  5443  05DB  0821               	movf	_rfStatus+1,w
  5444  05DC  0086               	movwf	6
  5445  05DD  0187               	clrf	7
  5446  05DE  0801               	movf	1,w
  5447  05DF  3903               	andlw	3
  5448  05E0  00B7               	movwf	??_RfHalTxPutAgain
  5449  05E1  0AB7               	incf	??_RfHalTxPutAgain,f
  5450  05E2  0801               	movf	1,w
  5451  05E3  0637               	xorwf	??_RfHalTxPutAgain,w
  5452  05E4  39FC               	andlw	-4
  5453  05E5  0637               	xorwf	??_RfHalTxPutAgain,w
  5454  05E6  0081               	movwf	1
  5455                           
  5456                           ;hal.c: 369: rfStatus.isr.txPacket->flags.tx = 1;
  5457  05E7  0821               	movf	_rfStatus+1,w
  5458  05E8  0086               	movwf	6
  5459  05E9  1601               	bsf	1,4
  5460                           
  5461                           ;hal.c: 370: rfStatus.isr.txPacket->flags.acq = 1;
  5462  05EA  0821               	movf	_rfStatus+1,w
  5463  05EB  0086               	movwf	6
  5464  05EC  1581               	bsf	1,3
  5465  05ED  0008               	return
  5466  05EE                     __end_of_RfHalTxPutAgain:	
  5467  05EE                     __ptext8:	
  5468 ;; *************** function _RfPacketsHandleClient *****************
  5469 ;; Defined at:
  5470 ;;		line 133 in file "../../../src/rfstack/packets.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  packet          1    wreg     PTR struct RfTransceiver
  5473 ;;		 -> NULL(0), rfPackets(56), 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  packet          1    7[BANK0 ] PTR struct RfTransceiver
  5476 ;;		 -> NULL(0), rfPackets(56), 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 1F/0
  5483 ;;		On exit  : 1F/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5486 ;;      Params:         0       0       0       0
  5487 ;;      Locals:         0       1       0       0
  5488 ;;      Temps:          0       0       0       0
  5489 ;;      Totals:         0       1       0       0
  5490 ;;Total ram usage:        1 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:   10
  5493 ;; This function calls:
  5494 ;;		_RfPacketSimpleReply
  5495 ;; This function is called by:
  5496 ;;		_RfPacketsTickTh
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _RfPacketsHandleClient
  5502  05EE                     _RfPacketsHandleClient:	
  5503                           
  5504                           ;incstack = 0
  5505                           ; Regs used in _RfPacketsHandleClient: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5506                           ;RfPacketsHandleClient@packet stored from wreg
  5507  05EE  00BE               	movwf	RfPacketsHandleClient@packet
  5508                           
  5509                           ;packets.c: 135: switch(packet->frame.id)
  5510  05EF  2E10               	goto	l3049
  5511  05F0                     l3039:	
  5512                           
  5513                           ;packets.c: 138: packet->data[4] = 2;
  5514  05F0  083E               	movf	RfPacketsHandleClient@packet,w
  5515  05F1  3E05               	addlw	5
  5516  05F2  0086               	movwf	6
  5517  05F3  3002               	movlw	2
  5518  05F4  0187               	clrf	7
  5519  05F5  0081               	movwf	1
  5520                           
  5521                           ;packets.c: 139: RfPacketSimpleReply(packet, RF_PING, 0);
  5522  05F6  30A0               	movlw	160
  5523  05F7  00BA               	movwf	RfPacketSimpleReply@msg
  5524  05F8  01BB               	clrf	RfPacketSimpleReply@needAck
  5525  05F9  083E               	movf	RfPacketsHandleClient@packet,w
  5526  05FA  2E1D               	ljmp	_RfPacketSimpleReply
  5527  05FB                     l3043:	
  5528                           ;packets.c: 140: break;
  5529                           
  5530                           
  5531                           ;packets.c: 144: if (packet->frame.data[0] == rfStatus.isr.txPacket->crcTx)
  5532  05FB  0821               	movf	_rfStatus+1,w
  5533  05FC  3E19               	addlw	25
  5534  05FD  0086               	movwf	6
  5535  05FE  0187               	clrf	7
  5536  05FF  083E               	movf	RfPacketsHandleClient@packet,w
  5537  0600  3E05               	addlw	5
  5538  0601  0084               	movwf	4
  5539  0602  0185               	clrf	5
  5540  0603  0800               	movf	0,w
  5541  0604  0084               	movwf	4
  5542  0605  0800               	movf	0,w
  5543  0606  0601               	xorwf	1,w
  5544  0607  1D03               	skipz
  5545  0608  0008               	return
  5546                           
  5547                           ;packets.c: 145: {
  5548                           ;packets.c: 147: packet->flags.wait_for_ack = 0;
  5549  0609  083E               	movf	RfPacketsHandleClient@packet,w
  5550  060A  0086               	movwf	6
  5551  060B  1101               	bcf	1,2
  5552                           
  5553                           ;packets.c: 148: packet->flags.proc = PCKT_NO_PROC;
  5554  060C  083E               	movf	RfPacketsHandleClient@packet,w
  5555  060D  0086               	movwf	6
  5556  060E  1281               	bcf	1,5
  5557                           
  5558                           ;packets.c: 149: }
  5559  060F  0008               	return
  5560  0610                     l3049:	
  5561  0610  083E               	movf	RfPacketsHandleClient@packet,w
  5562  0611  3E03               	addlw	3
  5563  0612  0086               	movwf	6
  5564  0613  0187               	clrf	7
  5565  0614  0801               	movf	1,w
  5566                           
  5567                           ; Switch size 1, requested type "space"
  5568                           ; Number of cases is 2, Range of values is 160 to 161
  5569                           ; switch strategies available:
  5570                           ; Name         Instructions Cycles
  5571                           ; simple_byte            7     4 (average)
  5572                           ; direct_byte           13     9 (fixed)
  5573                           ; jumptable            263     9 (fixed)
  5574                           ;	Chosen strategy is simple_byte
  5575  0615  3AA0               	xorlw	160	; case 160
  5576  0616  1903               	skipnz
  5577  0617  2DF0               	goto	l3039
  5578  0618  3A01               	xorlw	1	; case 161
  5579  0619  1903               	skipnz
  5580  061A  2DFB               	goto	l3043
  5581  061B  2E1C               	goto	l494
  5582  061C                     l494:	
  5583  061C  0008               	return
  5584  061D                     __end_of_RfPacketsHandleClient:	
  5585  061D                     __ptext9:	
  5586 ;; *************** function _RfPacketSimpleReply *****************
  5587 ;; Defined at:
  5588 ;;		line 27 in file "../../../src/rfstack/packets.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  packet          1    wreg     PTR struct RfTransceiver
  5591 ;;		 -> NULL(0), rfPackets(56), 
  5592 ;;  msg             1    3[BANK0 ] enum E4234
  5593 ;;  needAck         1    4[BANK0 ] unsigned char 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  packet          1    6[BANK0 ] PTR struct RfTransceiver
  5596 ;;		 -> NULL(0), rfPackets(56), 
  5597 ;;  nodeTmp         1    5[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;		None               void
  5600 ;; Registers used:
  5601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 1F/0
  5604 ;;		On exit  : 1F/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5607 ;;      Params:         0       2       0       0
  5608 ;;      Locals:         0       2       0       0
  5609 ;;      Temps:          0       0       0       0
  5610 ;;      Totals:         0       4       0       0
  5611 ;;Total ram usage:        4 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    9
  5614 ;; This function calls:
  5615 ;;		_RfHalTxPut
  5616 ;; This function is called by:
  5617 ;;		_RfPacketsHandleClient
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _RfPacketSimpleReply
  5623  061D                     _RfPacketSimpleReply:	
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _RfPacketSimpleReply: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5627                           ;RfPacketSimpleReply@packet stored from wreg
  5628  061D  00BD               	movwf	RfPacketSimpleReply@packet
  5629                           
  5630                           ;packets.c: 30: UI08_t nodeTmp = packet->frame.src;
  5631  061E  0086               	movwf	6
  5632  061F  0187               	clrf	7
  5633  0620  3F41               	moviw [1]fsr1
  5634  0621  00BC               	movwf	RfPacketSimpleReply@nodeTmp
  5635                           
  5636                           ;packets.c: 31: packet->frame.src = packet->frame.dst;
  5637  0622  0A3D               	incf	RfPacketSimpleReply@packet,w
  5638  0623  0086               	movwf	6
  5639  0624  083D               	movf	RfPacketSimpleReply@packet,w
  5640  0625  3E02               	addlw	2
  5641  0626  0084               	movwf	4
  5642  0627  0185               	clrf	5
  5643  0628  0800               	movf	0,w
  5644  0629  0081               	movwf	1
  5645                           
  5646                           ;packets.c: 32: packet->frame.dst = nodeTmp;
  5647  062A  083D               	movf	RfPacketSimpleReply@packet,w
  5648  062B  3E02               	addlw	2
  5649  062C  0086               	movwf	6
  5650  062D  083C               	movf	RfPacketSimpleReply@nodeTmp,w
  5651  062E  0081               	movwf	1
  5652                           
  5653                           ;packets.c: 34: packet->frame.id = msg;
  5654  062F  083D               	movf	RfPacketSimpleReply@packet,w
  5655  0630  3E03               	addlw	3
  5656  0631  0086               	movwf	6
  5657  0632  083A               	movf	RfPacketSimpleReply@msg,w
  5658  0633  0081               	movwf	1
  5659                           
  5660                           ;packets.c: 41: RfHalTxPut(packet, needAck);
  5661  0634  083B               	movf	RfPacketSimpleReply@needAck,w
  5662  0635  00B7               	movwf	RfHalTxPut@needAck
  5663  0636  083D               	movf	RfPacketSimpleReply@packet,w
  5664  0637  2E38               	ljmp	_RfHalTxPut
  5665  0638                     __end_of_RfPacketSimpleReply:	
  5666  0638                     __ptext10:	
  5667 ;; *************** function _RfHalTxPut *****************
  5668 ;; Defined at:
  5669 ;;		line 334 in file "../../../src/rfstack/hal.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  packet          1    wreg     PTR struct RfTransceiver
  5672 ;;		 -> NULL(0), rfPackets(56), 
  5673 ;;  needAck         1    0[BANK0 ] unsigned char 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  packet          1    2[BANK0 ] PTR struct RfTransceiver
  5676 ;;		 -> NULL(0), rfPackets(56), 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      unsigned char 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5681 ;; Tracked objects:
  5682 ;;		On entry : 1F/0
  5683 ;;		On exit  : 1F/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5686 ;;      Params:         0       1       0       0
  5687 ;;      Locals:         0       1       0       0
  5688 ;;      Temps:          0       1       0       0
  5689 ;;      Totals:         0       3       0       0
  5690 ;;Total ram usage:        3 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    8
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_RfPacketSimpleReply
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _RfHalTxPut
  5702  0638                     _RfHalTxPut:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _RfHalTxPut: [wreg+fsr1l+fsr1h+status,2+status,0]
  5706                           ;RfHalTxPut@packet stored from wreg
  5707  0638  00B9               	movwf	RfHalTxPut@packet
  5708                           
  5709                           ;hal.c: 357: packet->flags.acq = 0;
  5710  0639  0086               	movwf	6
  5711  063A  0187               	clrf	7
  5712  063B  1181               	bcf	1,3
  5713                           
  5714                           ;hal.c: 358: packet->flags.proc = PCKT_NEED_PROC;
  5715  063C  0839               	movf	RfHalTxPut@packet,w
  5716  063D  0086               	movwf	6
  5717  063E  1681               	bsf	1,5
  5718                           
  5719                           ;hal.c: 359: packet->flags.tx = 1;
  5720  063F  0839               	movf	RfHalTxPut@packet,w
  5721  0640  0086               	movwf	6
  5722  0641  1601               	bsf	1,4
  5723                           
  5724                           ;hal.c: 360: packet->flags.resends = 0;
  5725  0642  0839               	movf	RfHalTxPut@packet,w
  5726  0643  0086               	movwf	6
  5727  0644  30FC               	movlw	-4
  5728  0645  0581               	andwf	1,f
  5729                           
  5730                           ;hal.c: 361: packet->flags.wait_for_ack = (needAck != 0 ? 1 : 0);
  5731  0646  3000               	movlw	0
  5732  0647  08B7               	movf	RfHalTxPut@needAck,f
  5733  0648  1D03               	skipz
  5734  0649  3001               	movlw	1
  5735  064A  00B8               	movwf	??_RfHalTxPut
  5736  064B  0839               	movf	RfHalTxPut@packet,w
  5737  064C  0086               	movwf	6
  5738  064D  0DB8               	rlf	??_RfHalTxPut,f
  5739  064E  0DB8               	rlf	??_RfHalTxPut,f
  5740  064F  0801               	movf	1,w
  5741  0650  0638               	xorwf	??_RfHalTxPut,w
  5742  0651  39FB               	andlw	-5
  5743  0652  0638               	xorwf	??_RfHalTxPut,w
  5744  0653  0081               	movwf	1
  5745  0654  0008               	return
  5746  0655                     __end_of_RfHalTxPut:	
  5747  0655                     PL128:	
  5748  0655  0086               	movwf	6
  5749  0656  3000               	movlw	0
  5750  0657  0187               	clrf	7
  5751  0658  3FC0               	movwi [0]fsr1
  5752  0659  3FC1               	movwi [1]fsr1
  5753  065A  0008               	return
  5754  065B                     __end_ofPL128:	
  5755                           
  5756                           	psect	text17
  5757  06FD                     __ptext17:	
  5758 ;; *************** function _RfHalTxGet *****************
  5759 ;; Defined at:
  5760 ;;		line 295 in file "../../../src/rfstack/hal.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;		None
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  i               1    3[BANK0 ] unsigned char 
  5765 ;; Return value:  Size  Location     Type
  5766 ;;                  1    wreg      unsigned char 
  5767 ;; Registers used:
  5768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 1F/0
  5771 ;;		On exit  : 1F/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5774 ;;      Params:         0       0       0       0
  5775 ;;      Locals:         0       1       0       0
  5776 ;;      Temps:          0       0       0       0
  5777 ;;      Totals:         0       1       0       0
  5778 ;;Total ram usage:        1 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    9
  5781 ;; This function calls:
  5782 ;;		___bmul
  5783 ;; This function is called by:
  5784 ;;		_RfHalTickTxTh
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           
  5789                           ;psect for function _RfHalTxGet
  5790  06FD                     _RfHalTxGet:	
  5791                           
  5792                           ;hal.c: 298: UI08_t i = 0;
  5793                           
  5794                           ;incstack = 0
  5795                           ; Regs used in _RfHalTxGet: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5796  06FD  01BA               	clrf	RfHalTxGet@i
  5797                           
  5798                           ;hal.c: 300: for (i = 0; i < 2; i++)
  5799  06FE  01BA               	clrf	RfHalTxGet@i
  5800  06FF                     l2723:	
  5801                           
  5802                           ;hal.c: 301: {
  5803                           ;hal.c: 302: if (rfPackets[i].flags.proc == PCKT_NEED_PROC && rfPackets[i].flags.tx == 1)
  5804  06FF  301C               	movlw	28
  5805  0700  00B7               	movwf	___bmul@multiplicand
  5806  0701  083A               	movf	RfHalTxGet@i,w
  5807  0702  273C  3186         	fcall	___bmul
  5808  0704  3EA0               	addlw	_rfPackets& (0+255)
  5809  0705  0086               	movwf	6
  5810  0706  0187               	clrf	7
  5811  0707  1E81               	btfss	1,5
  5812  0708  2F36               	goto	l2737
  5813  0709  301C               	movlw	28
  5814  070A  00B7               	movwf	___bmul@multiplicand
  5815  070B  083A               	movf	RfHalTxGet@i,w
  5816  070C  273C  3186         	fcall	___bmul
  5817  070E  3EA0               	addlw	_rfPackets& (0+255)
  5818  070F  0086               	movwf	6
  5819  0710  0187               	clrf	7
  5820  0711  1E01               	btfss	1,4
  5821  0712  2F36               	goto	l2737
  5822                           
  5823                           ;hal.c: 303: {
  5824                           ;hal.c: 304: if (rfPackets[i].flags.wait_for_ack == 0)
  5825  0713  301C               	movlw	28
  5826  0714  00B7               	movwf	___bmul@multiplicand
  5827  0715  083A               	movf	RfHalTxGet@i,w
  5828  0716  273C  3186         	fcall	___bmul
  5829  0718  3EA0               	addlw	_rfPackets& (0+255)
  5830  0719  0086               	movwf	6
  5831  071A  301C               	movlw	28
  5832  071B  0187               	clrf	7
  5833                           
  5834                           ;hal.c: 305: rfPackets[i].flags.proc = PCKT_NO_PROC;
  5835  071C  00B7               	movwf	___bmul@multiplicand
  5836  071D  083A               	movf	RfHalTxGet@i,w
  5837  071E  1901               	btfsc	1,2
  5838  071F  2F29               	goto	L3
  5839  0720  273C  3186         	fcall	___bmul
  5840  0722  3EA0               	addlw	_rfPackets& (0+255)
  5841  0723  0086               	movwf	6
  5842  0724  301C               	movlw	28
  5843  0725  0187               	clrf	7
  5844  0726  1281               	bcf	1,5
  5845                           
  5846                           ;hal.c: 306: rfPackets[i].flags.acq = 1;
  5847  0727  00B7               	movwf	___bmul@multiplicand
  5848  0728  083A               	movf	RfHalTxGet@i,w
  5849  0729                     L3:	
  5850  0729  273C  3186         	fcall	___bmul
  5851  072B  3EA0               	addlw	_rfPackets& (0+255)
  5852  072C  0086               	movwf	6
  5853  072D  301C               	movlw	28
  5854  072E  0187               	clrf	7
  5855  072F  1581               	bsf	1,3
  5856                           
  5857                           ;hal.c: 307: rfStatus.isr.txPacket = &(rfPackets[i]);
  5858  0730  00B7               	movwf	___bmul@multiplicand
  5859  0731  083A               	movf	RfHalTxGet@i,w
  5860  0732  273C               	fcall	___bmul
  5861  0733  3EA0               	addlw	_rfPackets& (0+255)
  5862  0734  00A1               	movwf	_rfStatus+1
  5863                           
  5864                           ;hal.c: 308: return 1;
  5865  0735  3401               	retlw	1
  5866  0736                     l2737:	
  5867  0736  3002               	movlw	2
  5868  0737  0ABA               	incf	RfHalTxGet@i,f
  5869  0738  023A               	subwf	RfHalTxGet@i,w
  5870  0739  1803               	btfsc	3,0
  5871                           
  5872                           ;hal.c: 309: }
  5873                           ;hal.c: 310: }
  5874                           ;hal.c: 312: return 0;
  5875  073A  3400               	retlw	0
  5876  073B  2EFF               	goto	l2723
  5877  073C                     __end_of_RfHalTxGet:	
  5878  073C                     __ptext18:	
  5879 ;; *************** function ___bmul *****************
  5880 ;; Defined at:
  5881 ;;		line 2 in file "/opt/microchip/xc8/v1.30/sources/common/bmul.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  multiplier      1    wreg     unsigned char 
  5884 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  multiplier      1    2[BANK0 ] unsigned char 
  5887 ;;  product         1    1[BANK0 ] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  1    wreg      unsigned char 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0
  5892 ;; Tracked objects:
  5893 ;;		On entry : 1F/0
  5894 ;;		On exit  : 1F/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5897 ;;      Params:         0       1       0       0
  5898 ;;      Locals:         0       2       0       0
  5899 ;;      Temps:          0       0       0       0
  5900 ;;      Totals:         0       3       0       0
  5901 ;;Total ram usage:        3 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    8
  5904 ;; This function calls:
  5905 ;;		Nothing
  5906 ;; This function is called by:
  5907 ;;		_RfHalTxGet
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           
  5912                           ;psect for function ___bmul
  5913  073C                     ___bmul:	
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5917                           ;___bmul@multiplier stored from wreg
  5918  073C  00B9               	movwf	___bmul@multiplier
  5919  073D  01B8               	clrf	___bmul@product
  5920  073E                     l3159:	
  5921  073E  0837               	movf	___bmul@multiplicand,w
  5922  073F  1839               	btfsc	___bmul@multiplier,0
  5923  0740  07B8               	addwf	___bmul@product,f
  5924  0741  35B7               	lslf	___bmul@multiplicand,f
  5925  0742  36B9               	lsrf	___bmul@multiplier,f
  5926  0743  08B9               	movf	___bmul@multiplier,f
  5927  0744  1D03               	skipz
  5928  0745  2F3E               	goto	l3159
  5929  0746  0838               	movf	___bmul@product,w
  5930  0747  0008               	return
  5931  0748                     __end_of___bmul:	
  5932                           
  5933                           	psect	text20
  5934  0000                     __ptext20:	
  5935 ;; *************** function __CCBufRdReverse *****************
  5936 ;; Defined at:
  5937 ;;		line 41 in file "../../../src/utilities/ccbuf_static.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  qty             1    wreg     unsigned char 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  qty             1    3[BANK0 ] unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;		None               void
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, pclath, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 1F/0
  5948 ;;		On exit  : 1F/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5951 ;;      Params:         0       0       0       0
  5952 ;;      Locals:         0       1       0       0
  5953 ;;      Temps:          0       0       0       0
  5954 ;;      Totals:         0       1       0       0
  5955 ;;Total ram usage:        1 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    9
  5958 ;; This function calls:
  5959 ;;		__CCBufCalcPt
  5960 ;; This function is called by:
  5961 ;;		_RfHalTickRxTh
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965  0000                     __CCBufRdReverse:	
  5966                           ;psect for function __CCBufRdReverse
  5967                           
  5968  0000                     __end_of__CCBufRdReverse:	
  5969                           ;incstack = 0
  5970                           ; Regs used in __CCBufRdReverse: [wreg+status,2+status,0+pclath+cstack]
  5971                           ;__CCBufRdReverse@qty stored from wreg
  5972                           
  5973                           
  5974                           	psect	text23
  5975  0000                     __ptext23:	
  5976 ;; *************** function __CCBufCanRd *****************
  5977 ;; Defined at:
  5978 ;;		line 46 in file "../../../src/utilities/ccbuf_static.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      unsigned char 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, pclath, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 1F/0
  5989 ;;		On exit  : 1F/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5992 ;;      Params:         0       0       0       0
  5993 ;;      Locals:         0       0       0       0
  5994 ;;      Temps:          0       0       0       0
  5995 ;;      Totals:         0       0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    9
  5999 ;; This function calls:
  6000 ;;		__CCBufCalcPt
  6001 ;; This function is called by:
  6002 ;;		_RfHalTickRxTh
  6003 ;;		__CCBufRdByte
  6004 ;;		__CCBufPeekByte
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008  0000                     __CCBufCanRd:	
  6009                           ;psect for function __CCBufCanRd
  6010                           
  6011  0000                     __end_of__CCBufCanRd:	
  6012                           ;ccbuf_static.c: 51: else return 1;
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in __CCBufCanRd: [wreg+status,2+status,0+pclath+cstack]
  6016                           
  6017                           
  6018                           	psect	text25
  6019  0000                     __ptext25:	
  6020 ;; *************** function _RfTrcvCrcTick *****************
  6021 ;; Defined at:
  6022 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  initial         1    wreg     unsigned char 
  6025 ;;  data            1    0[BANK0 ] unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  initial         1    1[BANK0 ] unsigned char 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  1    wreg      unsigned char 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0
  6032 ;; Tracked objects:
  6033 ;;		On entry : 1F/0
  6034 ;;		On exit  : 1F/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6037 ;;      Params:         0       1       0       0
  6038 ;;      Locals:         0       1       0       0
  6039 ;;      Temps:          0       0       0       0
  6040 ;;      Totals:         0       2       0       0
  6041 ;;Total ram usage:        2 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; Hardware stack levels required when called:    8
  6044 ;; This function calls:
  6045 ;;		Nothing
  6046 ;; This function is called by:
  6047 ;;		_RfHalTickRxTh
  6048 ;;		_RfHalStatemachine
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052  0000                     _RfTrcvCrcTick:	
  6053                           ;psect for function _RfTrcvCrcTick
  6054                           
  6055  0000                     __end_of_RfTrcvCrcTick:	
  6056                           ;mrf49xa.c: 59: return (initial ^ data);
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _RfTrcvCrcTick: [wreg+status,2+status,0]
  6060                           ;RfTrcvCrcTick@initial stored from wreg
  6061                           
  6062                           
  6063                           	psect	text31
  6064  0000                     __ptext31:	
  6065 ;; *************** function __CCBufInit *****************
  6066 ;; Defined at:
  6067 ;;		line 5 in file "../../../src/utilities/ccbuf_static.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;		None               void
  6074 ;; Registers used:
  6075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6076 ;; Tracked objects:
  6077 ;;		On entry : 1F/0
  6078 ;;		On exit  : 1F/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6081 ;;      Params:         0       0       0       0
  6082 ;;      Locals:         0       0       0       0
  6083 ;;      Temps:          0       0       0       0
  6084 ;;      Totals:         0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    9
  6088 ;; This function calls:
  6089 ;;		__CCBufReset
  6090 ;; This function is called by:
  6091 ;;		_RfHalInit
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095  0000                     __CCBufInit:	
  6096                           ;psect for function __CCBufInit
  6097                           
  6098  0000                     __end_of__CCBufInit:	
  6099                           ;ccbuf_static.c: 15: {
  6100                           ;ccbuf_static.c: 16: i--;
  6101                           
  6102                           ;psect for function __CCBufReset
  6103                           
  6104                           ;ccbuf_static.c: 7: _CCBufReset();
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in __CCBufInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6108                           
  6109                           
  6110                           	psect	text32
  6111  0000                     __ptext32:	
  6112 ;; *************** function __CCBufReset *****************
  6113 ;; Defined at:
  6114 ;;		line 10 in file "../../../src/utilities/ccbuf_static.c"
  6115 ;; Parameters:    Size  Location     Type
  6116 ;;		None
  6117 ;; Auto vars:     Size  Location     Type
  6118 ;;  i               1    1[BANK0 ] unsigned char 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;		None               void
  6121 ;; Registers used:
  6122 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6123 ;; Tracked objects:
  6124 ;;		On entry : 1F/0
  6125 ;;		On exit  : 1F/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6128 ;;      Params:         0       0       0       0
  6129 ;;      Locals:         0       1       0       0
  6130 ;;      Temps:          0       1       0       0
  6131 ;;      Totals:         0       2       0       0
  6132 ;;Total ram usage:        2 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    8
  6135 ;; This function calls:
  6136 ;;		Nothing
  6137 ;; This function is called by:
  6138 ;;		__CCBufInit
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142  0000                     __CCBufReset:	
  6143                           ;psect for function __CCBufReset
  6144                           
  6145  0000                     __end_of__CCBufReset:	
  6146                           ;ccbuf_static.c: 15: {
  6147                           ;ccbuf_static.c: 16: i--;
  6148                           
  6149                           ;ccbuf_static.c: 14: while (i > 0)
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in __CCBufReset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6153                           
  6154                           
  6155                           	psect	intentry
  6156  0004                     __pintentry:	
  6157 ;; *************** function _extInt *****************
  6158 ;; Defined at:
  6159 ;;		line 31 in file "../../../src/bsp/pic16/interrupt.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;		None
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;		None
  6164 ;; Return value:  Size  Location     Type
  6165 ;;		None               void
  6166 ;; Registers used:
  6167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6173 ;;      Params:         0       0       0       0
  6174 ;;      Locals:         0       0       0       0
  6175 ;;      Temps:          0       0       0       0
  6176 ;;      Totals:         0       0       0       0
  6177 ;;Total ram usage:        0 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    7
  6180 ;; This function calls:
  6181 ;;		i1_mrf49XaIsr
  6182 ;; This function is called by:
  6183 ;;		Interrupt level 1
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187  0004                     _extInt:	
  6188                           
  6189                           ;incstack = 0
  6190                           ; Regs used in _extInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6191  0004  3180               	pagesel	$
  6192                           
  6193                           ;interrupt.c: 33: if (INTCONbits.INTF != 0)
  6194  0005  1C8B               	btfss	11,1	;volatile
  6195  0006  0009               	retfie
  6196                           
  6197                           ;interrupt.c: 34: {
  6198                           ;interrupt.c: 35: if (mrf49XaIsr())
  6199  0007  3184  2415         	fcall	i1_mrf49XaIsr
  6200  0009  3A00               	xorlw	0
  6201  000A  1D03               	btfss	3,2
  6202                           
  6203                           ;interrupt.c: 36: INTCONbits.INTF = 0;
  6204  000B  108B               	bcf	11,1	;volatile
  6205  000C  0009               	retfie
  6206  000D                     __end_of_extInt:	
  6207                           
  6208                           	psect	swtext2
  6209  075E                     __pswtext2:	
  6210  075E                     i1S3503:	
  6211  075E  3184  2C31         	ljmp	i1l3313
  6212  0760  3184  2C35         	ljmp	i1l3315
  6213  0762  3184  2C35         	ljmp	i1l3315
  6214  0764  3184  2C3A         	ljmp	i1l3319
  6215  0766  3184  2C3C         	ljmp	i1l3323
  6216  0768  3184  2C3E         	ljmp	i1l3327
  6217  076A  3184  2C41         	ljmp	i1l3331
  6218  076C  3184  2C6A         	ljmp	i1l3341
  6219  076E  3184  2C70         	ljmp	i1l3345
  6220  0770  3184  2C70         	ljmp	i1l3345
  6221  0772  3184  2C72         	ljmp	i1l3349
  6222                           
  6223                           	psect	text46
  6224  0000                     __ptext46:	
  6225 ;; *************** function i1__CCBufCanWr *****************
  6226 ;; Defined at:
  6227 ;;		line 34 in file "../../../src/utilities/ccbuf_static.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;		None
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;		None
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      unsigned char 
  6234 ;; Registers used:
  6235 ;;		wreg
  6236 ;; Tracked objects:
  6237 ;;		On entry : 1F/2
  6238 ;;		On exit  : 1F/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6241 ;;      Params:         0       0       0       0
  6242 ;;      Locals:         0       0       0       0
  6243 ;;      Temps:          0       0       0       0
  6244 ;;      Totals:         0       0       0       0
  6245 ;;Total ram usage:        0 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		i1__CCBufWrByte
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254  0000                     __end_ofi1__CCBufCanWr:	
  6255                           ;ccbuf_static.c: 37: else return 1;
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in i1__CCBufCanWr: [wreg]
  6259                           
  6260                           ;psect for function i1__CCBufCanWr
  6261                           
  6262                           
  6263                           	psect	text48
  6264  0405                     __ptext48:	
  6265 ;; *************** function i1_RfTrcvMode *****************
  6266 ;; Defined at:
  6267 ;;		line 59 in file "../../../src/rfstack/hal.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;  tx              1    wreg     unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  tx              1    5[COMMON] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0, pclath, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 1F/0
  6278 ;;		On exit  : 1D/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6281 ;;      Params:         0       0       0       0
  6282 ;;      Locals:         1       0       0       0
  6283 ;;      Temps:          0       0       0       0
  6284 ;;      Totals:         1       0       0       0
  6285 ;;Total ram usage:        1 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    4
  6288 ;; This function calls:
  6289 ;;		i1_RfTrcvSetup
  6290 ;; This function is called by:
  6291 ;;		i1_RfHalStatemachine
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function i1_RfTrcvMode
  6297  0405                     i1_RfTrcvMode:	
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in i1_RfTrcvMode: [wreg+status,2+status,0+pclath+cstack]
  6301                           ;i1RfTrcvMode@tx stored from wreg
  6302  0405  00F5               	movwf	i1RfTrcvMode@tx
  6303                           
  6304                           ;hal.c: 61: rfStatus.inRx = 1 - tx;
  6305  0406  3C01               	sublw	1
  6306  0407  00A3               	movwf	_rfStatus+3
  6307                           
  6308                           ;hal.c: 62: RfTrcvSetup(tx);
  6309  0408  0875               	movf	i1RfTrcvMode@tx,w
  6310  0409  2498  3184         	fcall	i1_RfTrcvSetup
  6311                           
  6312                           ;hal.c: 64: if (tx == 1)
  6313  040B  0B75               	decfsz	i1RfTrcvMode@tx,w
  6314  040C  2C0E               	goto	u245_21
  6315  040D  2C10               	goto	i1l3307
  6316  040E                     u245_21:	
  6317  040E  0020               	movlb	0	; select bank0
  6318  040F  0008               	return
  6319  0410                     i1l3307:	
  6320                           
  6321                           ;hal.c: 65: {
  6322                           ;hal.c: 66: rfStatus.isr.state = TX_PREAMBLE1;
  6323  0410  0020               	movlb	0	; select bank0
  6324  0411  01A2               	clrf	_rfStatus+2
  6325  0412  0AA2               	incf	_rfStatus+2,f
  6326                           
  6327                           ;hal.c: 67: rfStatus.isr.byteCounter = 0;
  6328  0413  01A0               	clrf	_rfStatus
  6329  0414  0008               	return
  6330  0415                     __end_ofi1_RfTrcvMode:	
  6331  0415                     __ptext42:	
  6332 ;; *************** function i1_mrf49XaIsr *****************
  6333 ;; Defined at:
  6334 ;;		line 28 in file "../../../src/node/main.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      unsigned char 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 1F/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6348 ;;      Params:         0       0       0       0
  6349 ;;      Locals:         0       0       0       0
  6350 ;;      Temps:          0       0       0       0
  6351 ;;      Totals:         0       0       0       0
  6352 ;;Total ram usage:        0 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    6
  6355 ;; This function calls:
  6356 ;;		i1_RfHalStatemachine
  6357 ;;		i1_RfTrcvSetup
  6358 ;;		i1_RfTrcvStatus
  6359 ;; This function is called by:
  6360 ;;		_extInt
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           
  6365                           ;psect for function i1_mrf49XaIsr
  6366  0415                     i1_mrf49XaIsr:	
  6367  0415                     i1l644:	
  6368                           ;incstack = 0
  6369                           ; Regs used in i1_mrf49XaIsr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6370                           ;main.c: 30: do
  6371                           
  6372                           
  6373                           ;main.c: 31: {
  6374                           ;main.c: 32: RfTrcvStatus();
  6375  0415  2528  3184         	fcall	i1_RfTrcvStatus
  6376                           
  6377                           ;main.c: 33: isr++;
  6378  0417  0020               	movlb	0	; select bank0
  6379  0418  0AAB               	incf	_isr,f	;volatile
  6380                           
  6381                           ;main.c: 35: if (rfTrcvStatus.flags.msb.fifoTxRx)
  6382  0419  1FB5               	btfss	_rfTrcvStatus,7
  6383  041A  2C22               	goto	i1l3377
  6384                           
  6385                           ;main.c: 36: {
  6386                           ;main.c: 37: if (rfStatus.inRx ==1 && rfTrcvStatus.flags.lsb.dataQualityOK == 0)
  6387  041B  0323               	decf	_rfStatus+3,w
  6388  041C  1D03               	skipz
  6389  041D  2C20               	goto	i1l3375
  6390  041E  1FB6               	btfss	_rfTrcvStatus+1,7
  6391  041F  2C22               	goto	i1l3377
  6392  0420                     i1l3375:	
  6393                           
  6394                           ;main.c: 41: else
  6395                           ;main.c: 42: {
  6396                           ;main.c: 43: RfHalStatemachine();
  6397  0420  2430  3184         	fcall	i1_RfHalStatemachine
  6398  0422                     i1l3377:	
  6399                           
  6400                           ;main.c: 44: }
  6401                           ;main.c: 45: }
  6402                           ;main.c: 46: if (rfTrcvStatus.flags.msb.por)
  6403  0422  0020               	movlb	0	; select bank0
  6404  0423  1F35               	btfss	_rfTrcvStatus,6
  6405  0424  2C28               	goto	i1l3381
  6406                           
  6407                           ;main.c: 47: {
  6408                           ;main.c: 48: RfTrcvSetup(0);
  6409  0425  3000               	movlw	0
  6410  0426  2498  3184         	fcall	i1_RfTrcvSetup
  6411  0428                     i1l3381:	
  6412                           
  6413                           ;main.c: 49: }
  6414                           ;main.c: 51: } while (rfTrcvStatus.flags.msb.por || rfTrcvStatus.flags.msb.fifoTxRx);
  6415  0428  0020               	movlb	0	; select bank0
  6416  0429  1F35               	btfss	_rfTrcvStatus,6
  6417  042A  1BB5               	btfsc	_rfTrcvStatus,7
  6418  042B  2C15               	goto	i1l644
  6419                           
  6420                           ;main.c: 53: return (PORTAbits.RA2 == 1) ? 1 : 0;
  6421  042C  0C0C               	rrf	12,w	;volatile
  6422  042D  0C89               	rrf	9,f
  6423  042E  3901               	andlw	1
  6424  042F  0008               	return
  6425  0430                     __end_ofi1_mrf49XaIsr:	
  6426  0430                     __ptext44:	
  6427 ;; *************** function i1_RfHalStatemachine *****************
  6428 ;; Defined at:
  6429 ;;		line 374 in file "../../../src/rfstack/hal.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;		None               void
  6436 ;; Registers used:
  6437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 1F/0
  6440 ;;		On exit  : 1D/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6443 ;;      Params:         0       0       0       0
  6444 ;;      Locals:         0       0       0       0
  6445 ;;      Temps:          1       0       0       0
  6446 ;;      Totals:         1       0       0       0
  6447 ;;Total ram usage:        1 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    5
  6450 ;; This function calls:
  6451 ;;		i1_RfTrcvCrcTick
  6452 ;;		i1_RfTrcvGet
  6453 ;;		i1_RfTrcvMode
  6454 ;;		i1_RfTrcvPut
  6455 ;;		i1__CCBufWrByte
  6456 ;; This function is called by:
  6457 ;;		i1_mrf49XaIsr
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461                           
  6462                           ;psect for function i1_RfHalStatemachine
  6463  0430                     i1_RfHalStatemachine:	
  6464                           
  6465                           ;hal.c: 376: switch (rfStatus.isr.state)
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in i1_RfHalStatemachine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6469  0430  2C7B               	goto	i1l3357
  6470  0431                     i1l3313:	
  6471                           
  6472                           ;hal.c: 380: _CCBufWrByte(RfTrcvGet());
  6473  0431  248F  3184         	fcall	i1_RfTrcvGet
  6474  0433  256A               	fcall	i1__CCBufWrByte
  6475                           
  6476                           ;hal.c: 381: break;
  6477  0434  0008               	return
  6478  0435                     i1l3315:	
  6479                           
  6480                           ;hal.c: 385: case TX_PREAMBLE2:
  6481                           ;hal.c: 386: RfTrcvPut(0xAA);
  6482  0435  30AA               	movlw	170
  6483  0436                     L5:	
  6484  0436  2486               	fcall	i1_RfTrcvPut
  6485                           
  6486                           ;hal.c: 387: rfStatus.isr.state++;
  6487  0437  0020               	movlb	0	; select bank0
  6488  0438  0AA2               	incf	_rfStatus+2,f
  6489                           
  6490                           ;hal.c: 388: break;
  6491  0439  0008               	return
  6492  043A                     i1l3319:	
  6493                           
  6494                           ;hal.c: 391: RfTrcvPut(0x2D);
  6495  043A  302D               	movlw	45
  6496  043B  2C36               	goto	L5
  6497  043C                     i1l3323:	
  6498                           
  6499                           ;hal.c: 395: RfTrcvPut(0xD4);
  6500  043C  30D4               	movlw	212
  6501  043D  2C36               	goto	L5
  6502  043E                     i1l3327:	
  6503                           
  6504                           ;hal.c: 399: RfTrcvPut(rfStatus.isr.txPacket->size);
  6505  043E  0821               	movf	_rfStatus+1,w
  6506  043F  3E1B               	addlw	27
  6507  0440  2C6C               	goto	L6
  6508  0441                     i1l3331:	
  6509                           
  6510                           ;hal.c: 403: RfTrcvPut(rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  6511  0441  0820               	movf	_rfStatus,w
  6512  0442  0721               	addwf	_rfStatus+1,w
  6513  0443  00F6               	movwf	??i1_RfHalStatemachine
  6514  0444  0A76               	incf	??i1_RfHalStatemachine,w
  6515  0445  0086               	movwf	6
  6516  0446  0187               	clrf	7
  6517  0447  0801               	movf	1,w
  6518  0448  2486  3184         	fcall	i1_RfTrcvPut
  6519                           
  6520                           ;hal.c: 404: rfStatus.isr.txPacket->crcTx = RfTrcvCrcTick(rfStatus.isr.txPacket->crcTx, 
      +                          rfStatus.isr.txPacket->data[rfStatus.isr.byteCounter]);
  6521  044A  0020               	movlb	0	; select bank0
  6522  044B  0821               	movf	_rfStatus+1,w
  6523  044C  3E19               	addlw	25
  6524  044D  0086               	movwf	6
  6525  044E  0187               	clrf	7
  6526  044F  0820               	movf	_rfStatus,w
  6527  0450  0721               	addwf	_rfStatus+1,w
  6528  0451  00F6               	movwf	??i1_RfHalStatemachine
  6529  0452  0084               	movwf	4
  6530  0453  0185               	clrf	5
  6531  0454  3F01               	moviw [1]fsr0
  6532  0455  00F0               	movwf	i1RfTrcvCrcTick@data
  6533  0456  0821               	movf	_rfStatus+1,w
  6534  0457  3E19               	addlw	25
  6535  0458  0084               	movwf	4
  6536  0459  0800               	movf	0,w
  6537  045A                     i13L__ptext55:	
  6538                           
  6539                           ;psect for function i1_RfTrcvCrcTick
  6540  045A                     i13Li1_RfTrcvCrcTick:	
  6541                           
  6542                           ;incstack = 0
  6543                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  6544                           ;i1RfTrcvCrcTick@initial stored from wreg
  6545  045A  00F1               	movwf	i1RfTrcvCrcTick@initial
  6546  045B                     i13Li1l3173:	
  6547                           
  6548                           ;mrf49xa.c: 59: return (initial ^ data);
  6549  045B  0871               	movf	i1RfTrcvCrcTick@initial,w
  6550  045C  0670               	xorwf	i1RfTrcvCrcTick@data,w
  6551  045D                     i13Li1l181:	
  6552  045D  0081               	movwf	1
  6553                           
  6554                           ;hal.c: 405: rfStatus.isr.byteCounter++;
  6555  045E  0AA0               	incf	_rfStatus,f
  6556                           
  6557                           ;hal.c: 406: if(rfStatus.isr.byteCounter >= rfStatus.isr.txPacket->size)
  6558  045F  0821               	movf	_rfStatus+1,w
  6559  0460  3E1B               	addlw	27
  6560  0461  0086               	movwf	6
  6561  0462  0187               	clrf	7
  6562  0463  0801               	movf	1,w
  6563  0464  0220               	subwf	_rfStatus,w
  6564  0465  1C03               	skipc
  6565  0466  0008               	return
  6566                           
  6567                           ;hal.c: 407: rfStatus.isr.state = TX_CRC;
  6568  0467  3007               	movlw	7
  6569  0468  00A2               	movwf	_rfStatus+2
  6570  0469  0008               	return
  6571  046A                     i1l3341:	
  6572                           
  6573                           ;hal.c: 410: RfTrcvPut(rfStatus.isr.txPacket->crcTx);
  6574  046A  0821               	movf	_rfStatus+1,w
  6575  046B  3E19               	addlw	25
  6576  046C                     L6:	
  6577  046C  0086               	movwf	6
  6578  046D  0187               	clrf	7
  6579  046E  0801               	movf	1,w
  6580  046F  2C36               	goto	L5
  6581  0470                     i1l3345:	
  6582                           
  6583                           ;hal.c: 415: case TX_NULL2:
  6584                           ;hal.c: 416: RfTrcvPut(0);
  6585  0470  3000               	movlw	0
  6586  0471  2C36               	goto	L5
  6587  0472                     i1l3349:	
  6588                           
  6589                           ;hal.c: 420: RfTrcvPut(0);
  6590  0472  3000               	movlw	0
  6591  0473  2486  3184         	fcall	i1_RfTrcvPut
  6592                           
  6593                           ;hal.c: 421: rfStatus.isr.state = RX_RECV;
  6594  0475  0020               	movlb	0	; select bank0
  6595  0476  3000               	movlw	0
  6596  0477  01A2               	clrf	_rfStatus+2
  6597                           
  6598                           ;hal.c: 427: RfTrcvMode(0);
  6599  0478  2405               	fcall	i1_RfTrcvMode
  6600                           
  6601                           ;hal.c: 428: break;
  6602  0479  0020               	movlb	0	; select bank0
  6603  047A  0008               	return
  6604  047B                     i1l3357:	
  6605  047B  0822               	movf	_rfStatus+2,w
  6606                           
  6607                           ; Switch size 1, requested type "space"
  6608                           ; Number of cases is 11, Range of values is 0 to 10
  6609                           ; switch strategies available:
  6610                           ; Name         Instructions Cycles
  6611                           ; direct_byte           28     6 (fixed)
  6612                           ; simple_byte           34    18 (average)
  6613                           ; jumptable            260     6 (fixed)
  6614                           ;	Chosen strategy is direct_byte
  6615  047C  0084               	movwf	4
  6616  047D  300B               	movlw	11
  6617  047E  0204               	subwf	4,w
  6618  047F  1803               	skipnc
  6619  0480  0008               	return
  6620  0481  3187               	movlp	high i1S3503
  6621  0482  3504               	lslf	4,w
  6622  0483  3E5E               	addlw	low i1S3503
  6623  0484  0082               	movwf	2
  6624  0485  0008               	return
  6625  0486                     __end_ofi1_RfHalStatemachine:	
  6626  0486                     __ptext50:	
  6627 ;; *************** function i1_RfTrcvPut *****************
  6628 ;; Defined at:
  6629 ;;		line 11 in file "../../../src/devices/mrf49xa.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  byte            1    wreg     unsigned char 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  byte            1    3[COMMON] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, status,2, status,0, pclath, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 1D/0
  6640 ;;		On exit  : 1F/2
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6643 ;;      Params:         0       0       0       0
  6644 ;;      Locals:         1       0       0       0
  6645 ;;      Temps:          0       0       0       0
  6646 ;;      Totals:         1       0       0       0
  6647 ;;Total ram usage:        1 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    2
  6650 ;; This function calls:
  6651 ;;		i1_MRF49XACommand
  6652 ;; This function is called by:
  6653 ;;		i1_RfTrcvSetup
  6654 ;;		i1_RfHalStatemachine
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function i1_RfTrcvPut
  6660  0486                     i1_RfTrcvPut:	
  6661                           
  6662                           ;incstack = 0
  6663                           ; Regs used in i1_RfTrcvPut: [wreg+status,2+status,0+pclath+cstack]
  6664                           ;i1RfTrcvPut@byte stored from wreg
  6665  0486  00F3               	movwf	i1RfTrcvPut@byte
  6666                           
  6667                           ;mrf49xa.c: 13: MRF49XACommand(0xB800 | byte);
  6668  0487  00F1               	movwf	i1MRF49XACommand@cmd
  6669  0488  3000               	movlw	0
  6670  0489  01F2               	clrf	i1MRF49XACommand@cmd+1
  6671  048A  04F1               	iorwf	i1MRF49XACommand@cmd,f
  6672  048B  30B8               	movlw	184
  6673  048C  04F2               	iorwf	i1MRF49XACommand@cmd+1,f
  6674  048D  24D4               	fcall	i1_MRF49XACommand
  6675  048E  0008               	return
  6676  048F                     __end_ofi1_RfTrcvPut:	
  6677  048F                     __ptext52:	
  6678 ;; *************** function i1_RfTrcvGet *****************
  6679 ;; Defined at:
  6680 ;;		line 17 in file "../../../src/devices/mrf49xa.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  RfTrcvGet       1    1[COMMON] unsigned char 
  6685 ;; Return value:  Size  Location     Type
  6686 ;;                  1    wreg      unsigned char 
  6687 ;; Registers used:
  6688 ;;		wreg, status,2, status,0, pclath, cstack
  6689 ;; Tracked objects:
  6690 ;;		On entry : 1F/0
  6691 ;;		On exit  : 1F/2
  6692 ;;		Unchanged: 0/0
  6693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6694 ;;      Params:         0       0       0       0
  6695 ;;      Locals:         1       0       0       0
  6696 ;;      Temps:          0       0       0       0
  6697 ;;      Totals:         1       0       0       0
  6698 ;;Total ram usage:        1 bytes
  6699 ;; Hardware stack levels used:    1
  6700 ;; Hardware stack levels required when called:    1
  6701 ;; This function calls:
  6702 ;;		i1_SPI_Read
  6703 ;;		i1_SPI_Write
  6704 ;; This function is called by:
  6705 ;;		i1_RfHalStatemachine
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           
  6710                           ;psect for function i1_RfTrcvGet
  6711  048F                     i1_RfTrcvGet:	
  6712                           
  6713                           ;mrf49xa.c: 19: LATCbits.LATC6 = 0;;
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in i1_RfTrcvGet: [wreg+status,2+status,0+pclath+cstack]
  6717  048F  0022               	movlb	2	; select bank2
  6718  0490  130E               	bcf	14,6	;volatile
  6719                           
  6720                           ;mrf49xa.c: 21: SPI_Write(0xB0);
  6721  0491  30B0               	movlw	176
  6722  0492  24DD  3184         	fcall	i1_SPI_Write
  6723                           
  6724                           ;mrf49xa.c: 22: UI08_t b = SPI_Read();
  6725  0494  2534               	fcall	i1_SPI_Read
  6726  0495  00F1               	movwf	i1RfTrcvGet@b
  6727                           
  6728                           ;mrf49xa.c: 24: LATCbits.LATC6 = 1;;
  6729  0496  170E               	bsf	14,6	;volatile
  6730                           
  6731                           ;mrf49xa.c: 26: return b;
  6732  0497  0008               	return
  6733  0498                     __end_ofi1_RfTrcvGet:	
  6734  0498                     __ptext49:	
  6735 ;; *************** function i1_RfTrcvSetup *****************
  6736 ;; Defined at:
  6737 ;;		line 61 in file "../../../src/devices/mrf49xa.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  tx              1    wreg     unsigned char 
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  tx              1    4[COMMON] unsigned char 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;		None               void
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0, pclath, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 1F/0
  6748 ;;		On exit  : 1F/2
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6751 ;;      Params:         0       0       0       0
  6752 ;;      Locals:         1       0       0       0
  6753 ;;      Temps:          0       0       0       0
  6754 ;;      Totals:         1       0       0       0
  6755 ;;Total ram usage:        1 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    3
  6758 ;; This function calls:
  6759 ;;		i1_MRF49XACommand
  6760 ;;		i1_RfTrcvPut
  6761 ;; This function is called by:
  6762 ;;		i1_RfTrcvMode
  6763 ;;		i1_mrf49XaIsr
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           
  6768                           ;psect for function i1_RfTrcvSetup
  6769  0498                     i1_RfTrcvSetup:	
  6770                           
  6771                           ;incstack = 0
  6772                           ; Regs used in i1_RfTrcvSetup: [wreg+status,2+status,0+pclath+cstack]
  6773                           ;i1RfTrcvSetup@tx stored from wreg
  6774  0498  00F4               	movwf	i1RfTrcvSetup@tx
  6775                           
  6776                           ;mrf49xa.c: 63: if (tx)
  6777  0499  0874               	movf	i1RfTrcvSetup@tx,w
  6778  049A  1903               	btfsc	3,2
  6779  049B  2CB0               	goto	i1l3299
  6780                           
  6781                           ;mrf49xa.c: 64: {
  6782                           ;mrf49xa.c: 65: MRF49XACommand(0x8200);
  6783  049C  3082               	movlw	130
  6784  049D  01F1               	clrf	i1MRF49XACommand@cmd
  6785  049E  00F2               	movwf	i1MRF49XACommand@cmd+1
  6786  049F  24D4  3184         	fcall	i1_MRF49XACommand
  6787                           
  6788                           ;mrf49xa.c: 66: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0080);
  6789  04A1  30A8               	movlw	168
  6790  04A2  00F1               	movwf	i1MRF49XACommand@cmd
  6791  04A3  3080               	movlw	128
  6792  04A4  00F2               	movwf	i1MRF49XACommand@cmd+1
  6793  04A5  24D4  3184         	fcall	i1_MRF49XACommand
  6794                           
  6795                           ;mrf49xa.c: 67: MRF49XACommand(0x8200 |0x0020);
  6796  04A7  3020               	movlw	32
  6797  04A8  00F1               	movwf	i1MRF49XACommand@cmd
  6798  04A9  3082               	movlw	130
  6799  04AA  00F2               	movwf	i1MRF49XACommand@cmd+1
  6800  04AB  24D4  3184         	fcall	i1_MRF49XACommand
  6801                           
  6802                           ;mrf49xa.c: 70: RfTrcvPut(0x55);
  6803  04AD  3055               	movlw	85
  6804  04AE  2486               	fcall	i1_RfTrcvPut
  6805                           
  6806                           ;mrf49xa.c: 71: }
  6807  04AF  0008               	return
  6808  04B0                     i1l3299:	
  6809                           
  6810                           ;mrf49xa.c: 72: else
  6811                           ;mrf49xa.c: 73: {
  6812                           ;mrf49xa.c: 74: MRF49XACommand(0x8200);
  6813  04B0  3000               	movlw	0
  6814  04B1  00F1               	movwf	i1MRF49XACommand@cmd
  6815  04B2  3082               	movlw	130
  6816  04B3  00F2               	movwf	i1MRF49XACommand@cmd+1
  6817  04B4  24D4  3184         	fcall	i1_MRF49XACommand
  6818                           
  6819                           ;mrf49xa.c: 75: MRF49XACommand(0xCA81);
  6820  04B6  3081               	movlw	129
  6821  04B7  00F1               	movwf	i1MRF49XACommand@cmd
  6822  04B8  30CA               	movlw	202
  6823  04B9  00F2               	movwf	i1MRF49XACommand@cmd+1
  6824  04BA  24D4  3184         	fcall	i1_MRF49XACommand
  6825                           
  6826                           ;mrf49xa.c: 76: MRF49XACommand(0x8000 | 0x0008 | 0x0020);
  6827  04BC  3028               	movlw	40
  6828  04BD  00F1               	movwf	i1MRF49XACommand@cmd
  6829  04BE  3080               	movlw	128
  6830  04BF  00F2               	movwf	i1MRF49XACommand@cmd+1
  6831  04C0  24D4  3184         	fcall	i1_MRF49XACommand
  6832                           
  6833                           ;mrf49xa.c: 77: MRF49XACommand(0x8200 | 0x0080);
  6834  04C2  3080               	movlw	128
  6835  04C3  00F1               	movwf	i1MRF49XACommand@cmd
  6836  04C4  3082               	movlw	130
  6837  04C5  00F2               	movwf	i1MRF49XACommand@cmd+1
  6838  04C6  24D4  3184         	fcall	i1_MRF49XACommand
  6839                           
  6840                           ;mrf49xa.c: 78: MRF49XACommand(0x8000 | 0x0008 | 0x0020 | 0x0040);
  6841  04C8  3068               	movlw	104
  6842  04C9  00F1               	movwf	i1MRF49XACommand@cmd
  6843  04CA  3080               	movlw	128
  6844  04CB  00F2               	movwf	i1MRF49XACommand@cmd+1
  6845  04CC  24D4  3184         	fcall	i1_MRF49XACommand
  6846                           
  6847                           ;mrf49xa.c: 79: MRF49XACommand(0xCA81 | 0x0002);
  6848  04CE  3083               	movlw	131
  6849  04CF  00F1               	movwf	i1MRF49XACommand@cmd
  6850  04D0  30CA               	movlw	202
  6851  04D1  00F2               	movwf	i1MRF49XACommand@cmd+1
  6852  04D2  24D4               	fcall	i1_MRF49XACommand
  6853  04D3  0008               	return
  6854  04D4                     __end_ofi1_RfTrcvSetup:	
  6855  04D4                     __ptext51:	
  6856 ;; *************** function i1_MRF49XACommand *****************
  6857 ;; Defined at:
  6858 ;;		line 30 in file "../../../src/devices/mrf49xa.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  cmd             2    1[COMMON] unsigned int 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;		None
  6863 ;; Return value:  Size  Location     Type
  6864 ;;		None               void
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, status,0, pclath, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 1D/0
  6869 ;;		On exit  : 1F/2
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6872 ;;      Params:         2       0       0       0
  6873 ;;      Locals:         0       0       0       0
  6874 ;;      Temps:          0       0       0       0
  6875 ;;      Totals:         2       0       0       0
  6876 ;;Total ram usage:        2 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    1
  6879 ;; This function calls:
  6880 ;;		i1_SPI_Write
  6881 ;; This function is called by:
  6882 ;;		i1_RfTrcvPut
  6883 ;;		i1_RfTrcvSetup
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           
  6888                           ;psect for function i1_MRF49XACommand
  6889  04D4                     i1_MRF49XACommand:	
  6890                           
  6891                           ;mrf49xa.c: 32: LATCbits.LATC6 = 0;;
  6892                           
  6893                           ;incstack = 0
  6894                           ; Regs used in i1_MRF49XACommand: [wreg+status,2+status,0+pclath+cstack]
  6895  04D4  0022               	movlb	2	; select bank2
  6896  04D5  130E               	bcf	14,6	;volatile
  6897                           
  6898                           ;mrf49xa.c: 34: SPI_Write((cmd & 0xFF00) >> 8);
  6899  04D6  0872               	movf	i1MRF49XACommand@cmd+1,w
  6900  04D7  24DD  3184         	fcall	i1_SPI_Write
  6901                           
  6902                           ;mrf49xa.c: 35: SPI_Write((cmd & 0x00FF));
  6903  04D9  0871               	movf	i1MRF49XACommand@cmd,w
  6904  04DA  24DD               	fcall	i1_SPI_Write
  6905                           
  6906                           ;mrf49xa.c: 37: LATCbits.LATC6 = 1;;
  6907  04DB  170E               	bsf	14,6	;volatile
  6908  04DC  0008               	return
  6909  04DD                     __end_ofi1_MRF49XACommand:	
  6910  04DD                     __ptext53:	
  6911 ;; *************** function i1_SPI_Write *****************
  6912 ;; Defined at:
  6913 ;;		line 191 in file "../../../src/devices/mrf49xa.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  data            1    wreg     unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  data            1    0[COMMON] unsigned char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;		None               void
  6920 ;; Registers used:
  6921 ;;		wreg
  6922 ;; Tracked objects:
  6923 ;;		On entry : 1F/2
  6924 ;;		On exit  : 1F/2
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6927 ;;      Params:         0       0       0       0
  6928 ;;      Locals:         1       0       0       0
  6929 ;;      Temps:          0       0       0       0
  6930 ;;      Totals:         1       0       0       0
  6931 ;;Total ram usage:        1 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; This function calls:
  6934 ;;		Nothing
  6935 ;; This function is called by:
  6936 ;;		i1_RfTrcvGet
  6937 ;;		i1_MRF49XACommand
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           
  6942                           ;psect for function i1_SPI_Write
  6943  04DD                     i1_SPI_Write:	
  6944                           
  6945                           ;incstack = 0
  6946                           ; Regs used in i1_SPI_Write: [wreg]
  6947                           ;i1SPI_Write@data stored from wreg
  6948  04DD  00F0               	movwf	i1SPI_Write@data
  6949                           
  6950                           ;mrf49xa.c: 198: LATCbits.LATC7 = 0;
  6951  04DE  138E               	bcf	14,7	;volatile
  6952  04DF  1BF0               	btfsc	i1SPI_Write@data,7
  6953  04E0  2CE3               	goto	i1l3209
  6954  04E1  0020               	movlb	0	; select bank0
  6955  04E2  2CE5               	goto	i1l228
  6956  04E3                     i1l3209:	
  6957  04E3  178D               	bsf	13,7	;volatile
  6958  04E4  2CE6               	goto	i1l229
  6959  04E5                     i1l228:	
  6960  04E5  138D               	bcf	13,7	;volatile
  6961  04E6                     i1l229:	
  6962  04E6  178E               	bsf	14,7	;volatile
  6963  04E7  138E               	bcf	14,7	;volatile
  6964  04E8  1B70               	btfsc	i1SPI_Write@data,6
  6965  04E9  2CEC               	goto	i1l3213
  6966  04EA  0020               	movlb	0	; select bank0
  6967  04EB  2CEE               	goto	i1l232
  6968  04EC                     i1l3213:	
  6969  04EC  178D               	bsf	13,7	;volatile
  6970  04ED  2CEF               	goto	i1l233
  6971  04EE                     i1l232:	
  6972  04EE  138D               	bcf	13,7	;volatile
  6973  04EF                     i1l233:	
  6974  04EF  178E               	bsf	14,7	;volatile
  6975  04F0  138E               	bcf	14,7	;volatile
  6976  04F1  1AF0               	btfsc	i1SPI_Write@data,5
  6977  04F2  2CF5               	goto	i1l3217
  6978  04F3  0020               	movlb	0	; select bank0
  6979  04F4  2CF7               	goto	i1l236
  6980  04F5                     i1l3217:	
  6981  04F5  178D               	bsf	13,7	;volatile
  6982  04F6  2CF8               	goto	i1l237
  6983  04F7                     i1l236:	
  6984  04F7  138D               	bcf	13,7	;volatile
  6985  04F8                     i1l237:	
  6986  04F8  178E               	bsf	14,7	;volatile
  6987  04F9  138E               	bcf	14,7	;volatile
  6988  04FA  1A70               	btfsc	i1SPI_Write@data,4
  6989  04FB  2CFE               	goto	i1l3221
  6990  04FC  0020               	movlb	0	; select bank0
  6991  04FD  2D00               	goto	i1l240
  6992  04FE                     i1l3221:	
  6993  04FE  178D               	bsf	13,7	;volatile
  6994  04FF  2D01               	goto	i1l241
  6995  0500                     i1l240:	
  6996  0500  138D               	bcf	13,7	;volatile
  6997  0501                     i1l241:	
  6998  0501  178E               	bsf	14,7	;volatile
  6999  0502  138E               	bcf	14,7	;volatile
  7000  0503  19F0               	btfsc	i1SPI_Write@data,3
  7001  0504  2D07               	goto	i1l3225
  7002  0505  0020               	movlb	0	; select bank0
  7003  0506  2D09               	goto	i1l244
  7004  0507                     i1l3225:	
  7005  0507  178D               	bsf	13,7	;volatile
  7006  0508  2D0A               	goto	i1l245
  7007  0509                     i1l244:	
  7008  0509  138D               	bcf	13,7	;volatile
  7009  050A                     i1l245:	
  7010  050A  178E               	bsf	14,7	;volatile
  7011  050B  138E               	bcf	14,7	;volatile
  7012  050C  1970               	btfsc	i1SPI_Write@data,2
  7013  050D  2D10               	goto	i1l3229
  7014  050E  0020               	movlb	0	; select bank0
  7015  050F  2D12               	goto	i1l248
  7016  0510                     i1l3229:	
  7017  0510  178D               	bsf	13,7	;volatile
  7018  0511  2D13               	goto	i1l249
  7019  0512                     i1l248:	
  7020  0512  138D               	bcf	13,7	;volatile
  7021  0513                     i1l249:	
  7022  0513  178E               	bsf	14,7	;volatile
  7023  0514  138E               	bcf	14,7	;volatile
  7024  0515  18F0               	btfsc	i1SPI_Write@data,1
  7025  0516  2D19               	goto	i1l3233
  7026  0517  0020               	movlb	0	; select bank0
  7027  0518  2D1B               	goto	i1l252
  7028  0519                     i1l3233:	
  7029  0519  178D               	bsf	13,7	;volatile
  7030  051A  2D1C               	goto	i1l253
  7031  051B                     i1l252:	
  7032  051B  138D               	bcf	13,7	;volatile
  7033  051C                     i1l253:	
  7034  051C  178E               	bsf	14,7	;volatile
  7035  051D  138E               	bcf	14,7	;volatile
  7036  051E  1870               	btfsc	i1SPI_Write@data,0
  7037  051F  2D22               	goto	i1l3237
  7038  0520  0020               	movlb	0	; select bank0
  7039  0521  2D24               	goto	i1l256
  7040  0522                     i1l3237:	
  7041  0522  178D               	bsf	13,7	;volatile
  7042  0523  2D25               	goto	i1l257
  7043  0524                     i1l256:	
  7044  0524  138D               	bcf	13,7	;volatile
  7045  0525                     i1l257:	
  7046  0525  178E               	bsf	14,7	;volatile
  7047  0526  138E               	bcf	14,7	;volatile
  7048  0527  0008               	return
  7049  0528                     __end_ofi1_SPI_Write:	
  7050  0528                     __ptext43:	
  7051 ;; *************** function i1_RfTrcvStatus *****************
  7052 ;; Defined at:
  7053 ;;		line 41 in file "../../../src/devices/mrf49xa.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;		None               void
  7060 ;; Registers used:
  7061 ;;		wreg, status,2, pclath, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 1F/2
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7067 ;;      Params:         0       0       0       0
  7068 ;;      Locals:         0       0       0       0
  7069 ;;      Temps:          0       0       0       0
  7070 ;;      Totals:         0       0       0       0
  7071 ;;Total ram usage:        0 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    1
  7074 ;; This function calls:
  7075 ;;		i1_SPI_Read
  7076 ;; This function is called by:
  7077 ;;		i1_mrf49XaIsr
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           
  7082                           ;psect for function i1_RfTrcvStatus
  7083  0528                     i1_RfTrcvStatus:	
  7084                           
  7085                           ;mrf49xa.c: 43: LATCbits.LATC6 = 0;;
  7086                           
  7087                           ;incstack = 0
  7088                           ; Regs used in i1_RfTrcvStatus: [wreg+status,2+pclath+cstack]
  7089  0528  0022               	movlb	2	; select bank2
  7090  0529  130E               	bcf	14,6	;volatile
  7091                           
  7092                           ;mrf49xa.c: 45: rfTrcvStatus.byte[0] = SPI_Read();
  7093  052A  2534  3184         	fcall	i1_SPI_Read
  7094  052C  0020               	movlb	0	; select bank0
  7095  052D  00B5               	movwf	_rfTrcvStatus
  7096                           
  7097                           ;mrf49xa.c: 46: rfTrcvStatus.byte[1] = SPI_Read();
  7098  052E  2534               	fcall	i1_SPI_Read
  7099  052F  0020               	movlb	0	; select bank0
  7100  0530  00B6               	movwf	_rfTrcvStatus+1
  7101                           
  7102                           ;mrf49xa.c: 48: LATCbits.LATC6 = 1;;
  7103  0531  0022               	movlb	2	; select bank2
  7104  0532  170E               	bsf	14,6	;volatile
  7105  0533  0008               	return
  7106  0534                     __end_ofi1_RfTrcvStatus:	
  7107  0534                     __ptext54:	
  7108 ;; *************** function i1_SPI_Read *****************
  7109 ;; Defined at:
  7110 ;;		line 145 in file "../../../src/devices/mrf49xa.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  SPI_Read        1    0[COMMON] unsigned char 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      unsigned char 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2
  7119 ;; Tracked objects:
  7120 ;;		On entry : 1D/2
  7121 ;;		On exit  : 1F/2
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7124 ;;      Params:         0       0       0       0
  7125 ;;      Locals:         1       0       0       0
  7126 ;;      Temps:          0       0       0       0
  7127 ;;      Totals:         1       0       0       0
  7128 ;;Total ram usage:        1 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		i1_RfTrcvGet
  7134 ;;		i1_RfTrcvStatus
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function i1_SPI_Read
  7140  0534                     i1_SPI_Read:	
  7141                           
  7142                           ;mrf49xa.c: 150: UI08_t data = 0;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in i1_SPI_Read: [wreg+status,2]
  7146  0534  01F0               	clrf	i1SPI_Read@data
  7147                           
  7148                           ;mrf49xa.c: 151: LATCbits.LATC7 = 0;
  7149  0535  0022               	movlb	2	; select bank2
  7150  0536  138E               	bcf	14,7	;volatile
  7151                           
  7152                           ;mrf49xa.c: 152: LATBbits.LATB7 = 0;
  7153  0537  138D               	bcf	13,7	;volatile
  7154  0538  0020               	movlb	0	; select bank0
  7155  0539  1A8E               	btfsc	14,5	;volatile
  7156  053A  17F0               	bsf	i1SPI_Read@data,7
  7157  053B  0022               	movlb	2	; select bank2
  7158  053C  178E               	bsf	14,7	;volatile
  7159  053D  138E               	bcf	14,7	;volatile
  7160                           
  7161                           ;mrf49xa.c: 159: do { if (PORTCbits.RC5) data |= (1<<6); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7162  053E  0020               	movlb	0	; select bank0
  7163  053F  1A8E               	btfsc	14,5	;volatile
  7164  0540  1770               	bsf	i1SPI_Read@data,6
  7165  0541  0022               	movlb	2	; select bank2
  7166  0542  178E               	bsf	14,7	;volatile
  7167  0543  138E               	bcf	14,7	;volatile
  7168                           
  7169                           ;mrf49xa.c: 160: do { if (PORTCbits.RC5) data |= (1<<5); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7170  0544  0020               	movlb	0	; select bank0
  7171  0545  1A8E               	btfsc	14,5	;volatile
  7172  0546  16F0               	bsf	i1SPI_Read@data,5
  7173  0547  0022               	movlb	2	; select bank2
  7174  0548  178E               	bsf	14,7	;volatile
  7175  0549  138E               	bcf	14,7	;volatile
  7176                           
  7177                           ;mrf49xa.c: 161: do { if (PORTCbits.RC5) data |= (1<<4); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7178  054A  0020               	movlb	0	; select bank0
  7179  054B  1A8E               	btfsc	14,5	;volatile
  7180  054C  1670               	bsf	i1SPI_Read@data,4
  7181  054D  0022               	movlb	2	; select bank2
  7182  054E  178E               	bsf	14,7	;volatile
  7183  054F  138E               	bcf	14,7	;volatile
  7184                           
  7185                           ;mrf49xa.c: 162: do { if (PORTCbits.RC5) data |= (1<<3); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7186  0550  0020               	movlb	0	; select bank0
  7187  0551  1A8E               	btfsc	14,5	;volatile
  7188  0552  15F0               	bsf	i1SPI_Read@data,3
  7189  0553  0022               	movlb	2	; select bank2
  7190  0554  178E               	bsf	14,7	;volatile
  7191  0555  138E               	bcf	14,7	;volatile
  7192                           
  7193                           ;mrf49xa.c: 163: do { if (PORTCbits.RC5) data |= (1<<2); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7194  0556  0020               	movlb	0	; select bank0
  7195  0557  1A8E               	btfsc	14,5	;volatile
  7196  0558  1570               	bsf	i1SPI_Read@data,2
  7197  0559  0022               	movlb	2	; select bank2
  7198  055A  178E               	bsf	14,7	;volatile
  7199  055B  138E               	bcf	14,7	;volatile
  7200                           
  7201                           ;mrf49xa.c: 164: do { if (PORTCbits.RC5) data |= (1<<1); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7202  055C  0020               	movlb	0	; select bank0
  7203  055D  1A8E               	btfsc	14,5	;volatile
  7204  055E  14F0               	bsf	i1SPI_Read@data,1
  7205  055F  0022               	movlb	2	; select bank2
  7206  0560  178E               	bsf	14,7	;volatile
  7207  0561  138E               	bcf	14,7	;volatile
  7208                           
  7209                           ;mrf49xa.c: 165: do { if (PORTCbits.RC5) data |= (1<<0); LATCbits.LATC7 = 1; LATCbits.LA
      +                          TC7 = 0; } while (0);;
  7210  0562  0020               	movlb	0	; select bank0
  7211  0563  1A8E               	btfsc	14,5	;volatile
  7212  0564  1470               	bsf	i1SPI_Read@data,0
  7213  0565  0022               	movlb	2	; select bank2
  7214  0566  178E               	bsf	14,7	;volatile
  7215  0567  138E               	bcf	14,7	;volatile
  7216                           
  7217                           ;mrf49xa.c: 188: return data;
  7218  0568  0870               	movf	i1SPI_Read@data,w
  7219  0569  0008               	return
  7220  056A                     __end_ofi1_SPI_Read:	
  7221  056A                     __ptext45:	
  7222 ;; *************** function i1__CCBufWrByte *****************
  7223 ;; Defined at:
  7224 ;;		line 89 in file "../../../src/utilities/ccbuf_static.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  data            1    wreg     unsigned char 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  data            1    4[COMMON] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;		None               void
  7231 ;; Registers used:
  7232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 1F/2
  7235 ;;		On exit  : 1F/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7238 ;;      Params:         0       0       0       0
  7239 ;;      Locals:         1       0       0       0
  7240 ;;      Temps:          1       0       0       0
  7241 ;;      Totals:         2       0       0       0
  7242 ;;Total ram usage:        2 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    1
  7245 ;; This function calls:
  7246 ;;		i1__CCBufCalcPt
  7247 ;;		i1__CCBufCanWr
  7248 ;; This function is called by:
  7249 ;;		i1_RfHalStatemachine
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           
  7254                           ;psect for function i1__CCBufWrByte
  7255  056A                     i1__CCBufWrByte:	
  7256                           
  7257                           ;incstack = 0
  7258                           ; Regs used in i1__CCBufWrByte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7259                           ;i1__CCBufWrByte@data stored from wreg
  7260  056A  00F4               	movwf	i1__CCBufWrByte@data
  7261  056B                     i14L__ptext46:	
  7262                           ;ccbuf_static.c: 91: if (_CCBufCanWr())
  7263                           
  7264                           
  7265                           ;psect for function i1__CCBufCanWr
  7266  056B                     i14Li1__CCBufCanWr:	
  7267  056B                     i14Li1l3251:	
  7268  056B  0020               	movlb	0	; select bank0
  7269  056C  0844               	movf	_rfRxCC+2,w
  7270  056D  0645               	xorwf	_rfRxCC+3,w
  7271  056E  1D03               	btfss	3,2
  7272  056F  2D74               	ljmp	i14Li1l3259
  7273  0570  2D72               	ljmp	i14Li1l3253
  7274  0571                     i14Lu242_21:	
  7275  0571  2D74               	ljmp	i14Li1l3259
  7276  0572                     i14Lu242_20:	
  7277  0572                     i14Li1l3253:	
  7278  0572  3000               	movlw	0
  7279  0573  2D75               	ljmp	iL118
  7280  0574                     i14Li1l3259:	
  7281                           
  7282                           ;ccbuf_static.c: 37: else return 1;
  7283  0574  3001               	movlw	1
  7284  0575                     i14Li1l543:	
  7285  0575                     iL118:	
  7286  0575  3A00               	xorlw	0
  7287  0576  1903               	skipnz
  7288  0577  0008               	return
  7289  0578  0844               	movf	_rfRxCC+2,w
  7290  0579  0742               	addwf	_rfRxCC,w
  7291  057A  00F3               	movwf	??i1__CCBufWrByte
  7292  057B  0086               	movwf	6
  7293  057C  3001               	movlw	1	; select bank2/3
  7294  057D  0087               	movwf	7
  7295  057E  0874               	movf	i1__CCBufWrByte@data,w
  7296  057F  0081               	movwf	1
  7297  0580  01F0               	clrf	i1__CCBufCalcPt@move
  7298  0581  0AF0               	incf	i1__CCBufCalcPt@move,f
  7299  0582  0844               	movf	_rfRxCC+2,w
  7300  0583  2586               	fcall	i1__CCBufCalcPt
  7301  0584  00C4               	movwf	_rfRxCC+2
  7302  0585  0008               	return
  7303  0586                     __end_ofi1__CCBufWrByte:	
  7304  0586                     __ptext47:	
  7305 ;; *************** function i1__CCBufCalcPt *****************
  7306 ;; Defined at:
  7307 ;;		line 24 in file "../../../src/utilities/ccbuf_static.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  entry           1    wreg     unsigned char 
  7310 ;;  move            1    0[COMMON] unsigned char 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  entry           1    1[COMMON] unsigned char 
  7313 ;;  _CCBufCalcPt    1    2[COMMON] unsigned char 
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  1    wreg      unsigned char 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0
  7318 ;; Tracked objects:
  7319 ;;		On entry : 1F/0
  7320 ;;		On exit  : 1F/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7323 ;;      Params:         1       0       0       0
  7324 ;;      Locals:         2       0       0       0
  7325 ;;      Temps:          0       0       0       0
  7326 ;;      Totals:         3       0       0       0
  7327 ;;Total ram usage:        3 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		i1__CCBufWrByte
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           
  7337                           ;psect for function i1__CCBufCalcPt
  7338  0586                     i1__CCBufCalcPt:	
  7339                           
  7340                           ;incstack = 0
  7341                           ; Regs used in i1__CCBufCalcPt: [wreg+status,2+status,0]
  7342                           ;i1__CCBufCalcPt@entry stored from wreg
  7343  0586  00F1               	movwf	i1__CCBufCalcPt@entry
  7344                           
  7345                           ;ccbuf_static.c: 26: I08_t result = ((I08_t)entry) + move;
  7346  0587  0770               	addwf	i1__CCBufCalcPt@move,w
  7347  0588  00F2               	movwf	i1__CCBufCalcPt@result
  7348  0589                     i1l3245:	
  7349                           ;ccbuf_static.c: 28: while (result < 0) result += CCDef->size;
  7350                           
  7351  0589  0843               	movf	_rfRxCC+1,w
  7352  058A  0272               	subwf	i1__CCBufCalcPt@result,w
  7353  058B  1C03               	btfss	3,0
  7354  058C  2D90               	goto	i1l3247
  7355  058D  0843               	movf	_rfRxCC+1,w
  7356  058E  02F2               	subwf	i1__CCBufCalcPt@result,f
  7357  058F  2D89               	goto	i1l3245
  7358  0590                     i1l3247:	
  7359                           
  7360                           ;ccbuf_static.c: 31: return (UI08_t) result;
  7361  0590  0872               	movf	i1__CCBufCalcPt@result,w
  7362  0591  0008               	return
  7363  0592                     __end_ofi1__CCBufCalcPt:	
  7364                           
  7365                           	psect	text55
  7366  0000                     __ptext55:	
  7367 ;; *************** function i1_RfTrcvCrcTick *****************
  7368 ;; Defined at:
  7369 ;;		line 57 in file "../../../src/devices/mrf49xa.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  initial         1    wreg     unsigned char 
  7372 ;;  data            1    0[COMMON] unsigned char 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  initial         1    1[COMMON] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  1    wreg      unsigned char 
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0
  7379 ;; Tracked objects:
  7380 ;;		On entry : 1F/0
  7381 ;;		On exit  : 1F/0
  7382 ;;		Unchanged: 1F/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7384 ;;      Params:         1       0       0       0
  7385 ;;      Locals:         1       0       0       0
  7386 ;;      Temps:          0       0       0       0
  7387 ;;      Totals:         2       0       0       0
  7388 ;;Total ram usage:        2 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; This function calls:
  7391 ;;		Nothing
  7392 ;; This function is called by:
  7393 ;;		i1_RfHalStatemachine
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397  0000                     __end_ofi1_RfTrcvCrcTick:	
  7398                           ;mrf49xa.c: 59: return (initial ^ data);
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in i1_RfTrcvCrcTick: [wreg+status,2+status,0]
  7402                           ;i1RfTrcvCrcTick@initial stored from wreg
  7403                           
  7404                           ;psect for function i1_RfTrcvCrcTick
  7405                           
  7406                           
  7407                           	psect	functab
  7408  0400                     __pfunctab:	
  7409  0400                     __fptable:	
  7410  0400                     fptable:	
  7411  0400  3184               	movlp	high fptable
  7412  0401  0782               	addwf	2,f
  7413  0402                     fpbase:	
  7414  0402  2C02               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7415  0403                     fp__mrf49XaIsr:	
  7416  0403                     entry__mrf49XaIsr:	
  7417  0403  3186  2E5B         	ljmp	_mrf49XaIsr
  7418  0405                     __end_of__fptable:	
  7419  007E                     btemp	set	126	;btemp
  7420  007E                     wtemp	set	126
  7421  007E                     wtemp0	set	126
  7422  0080                     wtemp1	set	128
  7423  0082                     wtemp2	set	130
  7424  0084                     wtemp3	set	132
  7425  0086                     wtemp4	set	134
  7426  0088                     wtemp5	set	136
  7427  007F                     wtemp6	set	127
  7428  007E                     ttemp	set	126
  7429  007E                     ttemp0	set	126
  7430  0081                     ttemp1	set	129
  7431  0084                     ttemp2	set	132
  7432  0087                     ttemp3	set	135
  7433  007F                     ttemp4	set	127
  7434  007E                     ltemp	set	126
  7435  007E                     ltemp0	set	126
  7436  0082                     ltemp1	set	130
  7437  0086                     ltemp2	set	134
  7438  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         127
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80     11      38
    BANK1            80      0      56
    BANK2            80      0      48

Pointer List with Targets:

    rfPackets.data	PTR unsigned char  size(1) Largest target is 0

    NULL.data	PTR unsigned char  size(1) Largest target is 0

    rfPackets...data	PTR unsigned char  size(1) Largest target is 0

    NULL...data	PTR unsigned char  size(1) Largest target is 0

    NULL...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsTickTh@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsTickTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsTickTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halPkTh(BANK0[2]), 

    RfPacketsHandleClient@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleClient@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfPacketsHandleServer@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketsHandleServer@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketTransmit@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfPacketSimpleReply@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalRxGet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalRxPut@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalRxPut@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    rfPackets...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalGetReturn@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    sp__RfHalGetFree	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    S491$data	PTR unsigned char  size(1) Largest target is 0

    RfHalTickRxTh@packet...frame.data	PTR unsigned char  size(1) Largest target is 0

    RfHalTickRxTh@packet	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> NULL(NULL[0]), rfPackets(BANK1[56]), 

    RfHalTickRxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halRxBfTh(BANK0[2]), 

    RfHalTickTxTh@pt	PTR struct pt size(1) Largest target is 2
		 -> halTxBfTh(BANK0[2]), 

    CCDef	const PTR struct CircBufDef_s size(1) Largest target is 5
		 -> rfRxCC(BANK0[4]), 

    S526CircBufDef_s$bf	const PTR unsigned char  size(1) Largest target is 48
		 -> rfRxBf(BANK2[48]), 

    rfRxCC.bf	const PTR unsigned char  size(1) Largest target is 48
		 -> rfRxBf(BANK2[48]), 

    S518$txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    rfStatus.isr.txPacket	PTR struct RfTransceiverPacket_s size(1) Largest target is 56
		 -> rfPackets(BANK1[56]), 

    cb	PTR FTN(unsigned char ,)unsigned char  size(1) Largest target is 1
		 -> mrf49XaIsr(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _extInt in COMMON

    i1_mrf49XaIsr->i1_RfHalStatemachine
    i1_RfTrcvStatus->i1_SPI_Read
    i1_RfHalStatemachine->i1_RfTrcvMode
    i1__CCBufWrByte->i1__CCBufCalcPt
    i1_RfTrcvMode->i1_RfTrcvSetup
    i1_RfTrcvSetup->i1_RfTrcvPut
    i1_RfTrcvPut->i1_MRF49XACommand
    i1_MRF49XACommand->i1_SPI_Write
    i1_RfTrcvGet->i1_SPI_Read
    i1_RfTrcvGet->i1_SPI_Write

Critical Paths under _main in BANK0

    _main->_RfPacketsTickTh
    _mrf49XaIsr->_RfHalStatemachine
    _RfHalStatemachine->_RfTrcvMode
    __CCBufWrByte->__CCBufCalcPt
    _RfTrcvGet->_SPI_Read
    _RfTrcvGet->_SPI_Write
    _RfPacketsTickTh->_RfPacketsHandleClient
    _RfPacketsHandleClient->_RfPacketSimpleReply
    _RfPacketSimpleReply->_RfHalTxPut
    _RfHalTickTxTh->_RfTrcvMode
    _RfTrcvStatus->_SPI_Read
    _RfHalTxGet->___bmul
    _RfHalTickRxTh->__CCBufPeekByte
    _RfHalTickRxTh->__CCBufRdByte
    __CCBufRdReverse->__CCBufCalcPt
    __CCBufRdByte->__CCBufCalcPt
    __CCBufPeekByte->__CCBufCalcPt
    __CCBufCanRd->__CCBufCalcPt
    _RfHalInit->_RfTrcvMode
    __CCBufInit->__CCBufReset
    _RfTrcvMode->_RfTrcvSetup
    _MRF49XAInit->_RfTrcvSetup
    _RfTrcvSetup->_RfTrcvPut
    _RfTrcvPut->_MRF49XACommand
    _MRF49XACommand->_SPI_Write

Critical Paths under _extInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _extInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _extInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   33067
                            _AdcInit
                         _ExtIntInit
                        _MRF49XAInit
                          _RfHalInit
                      _RfHalTickRxTh
                      _RfHalTickTxTh
                    _RfPacketsTickTh
                       _RfTrcvStatus
                        _SysInitGpio
                         _mrf49XaIsr
 ---------------------------------------------------------------------------------
 (1) _mrf49XaIsr                                           0     0      0   11836
                  _RfHalStatemachine
                        _RfTrcvSetup
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfHalStatemachine                                    1     1      0    7477
                                              6 BANK0      1     1      0
                      _RfTrcvCrcTick
                          _RfTrcvGet
                         _RfTrcvMode
                          _RfTrcvPut
                       __CCBufWrByte
 ---------------------------------------------------------------------------------
 (3) __CCBufWrByte                                         2     2      0     493
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanWr
 ---------------------------------------------------------------------------------
 (4) __CCBufCanWr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvGet                                            1     1      0     230
                                              1 BANK0      1     1      0
                           _SPI_Read
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _SysInitGpio                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfPacketsTickTh                                      4     4      0    1257
                                              8 BANK0      3     3      0
                         _RfHalRxGet
                    _RfHalTxPutAgain
              _RfPacketsHandleClient
 ---------------------------------------------------------------------------------
 (2) _RfPacketsHandleClient                                1     1      0    1141
                                              7 BANK0      1     1      0
                _RfPacketSimpleReply
 ---------------------------------------------------------------------------------
 (3) _RfPacketSimpleReply                                  4     2      2     976
                                              3 BANK0      4     2      2
                         _RfHalTxPut
 ---------------------------------------------------------------------------------
 (4) _RfHalTxPut                                           3     2      1     433
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _RfHalTxPutAgain                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalRxGet                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalTickTxTh                                        4     4      0    5177
                                              6 BANK0      3     3      0
                     _RfHalGetReturn
                         _RfHalTxGet
               _RfTrcvCarrierPresent
                         _RfTrcvMode
 ---------------------------------------------------------------------------------
 (2) _RfTrcvCarrierPresent                                 0     0      0      31
                       _RfTrcvStatus
 ---------------------------------------------------------------------------------
 (2) _RfTrcvStatus                                         0     0      0      31
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SPI_Read                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalTxGet                                           1     1      0     427
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     248
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _RfHalTickRxTh                                        5     5      0    3603
                                              5 BANK0      4     4      0
                       _RfHalAnyFree
                       _RfHalGetFree
                     _RfHalGetReturn
                         _RfHalRxPut
                      _RfTrcvCrcTick
                        __CCBufCanRd
                     __CCBufPeekByte
                       __CCBufRdByte
                    __CCBufRdReverse
 ---------------------------------------------------------------------------------
 (2) __CCBufRdReverse                                      1     1      0     493
                                              3 BANK0      1     1      0
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (2) __CCBufRdByte                                         2     2      0     965
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (2) __CCBufPeekByte                                       2     2      0     965
                                              3 BANK0      2     2      0
                       __CCBufCalcPt
                        __CCBufCanRd
 ---------------------------------------------------------------------------------
 (3) __CCBufCanRd                                          0     0      0     471
                       __CCBufCalcPt
 ---------------------------------------------------------------------------------
 (4) __CCBufCalcPt                                         3     2      1     471
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _RfTrcvCrcTick                                        2     1      1     196
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _RfHalRxPut                                           1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetReturn                                       1     1      0     165
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RfHalGetFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RfHalAnyFree                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RfHalInit                                            1     1      0    4509
                                              6 BANK0      1     1      0
                         _RfTrcvMode
                         __CCBufInit
 ---------------------------------------------------------------------------------
 (2) __CCBufInit                                           0     0      0      46
                        __CCBufReset
 ---------------------------------------------------------------------------------
 (3) __CCBufReset                                          2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RfTrcvMode                                           1     1      0    4394
                                              5 BANK0      1     1      0
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (1) _MRF49XAInit                                          2     2      0    6654
                                              5 BANK0      2     2      0
                     _MRF49XACommand
                        _RfTrcvSetup
 ---------------------------------------------------------------------------------
 (2) _RfTrcvSetup                                          1     1      0    4328
                                              4 BANK0      1     1      0
                     _MRF49XACommand
                          _RfTrcvPut
 ---------------------------------------------------------------------------------
 (3) _RfTrcvPut                                            1     1      0    2164
                                              3 BANK0      1     1      0
                     _MRF49XACommand
 ---------------------------------------------------------------------------------
 (4) _MRF49XACommand                                       2     0      2    2142
                                              1 BANK0      2     0      2
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ExtIntInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _extInt                                               0     0      0   10585
                       i1_mrf49XaIsr
 ---------------------------------------------------------------------------------
 (9) i1_mrf49XaIsr                                         0     0      0   10585
                i1_RfHalStatemachine
                      i1_RfTrcvSetup
                     i1_RfTrcvStatus
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvStatus                                      0     0      0      91
                         i1_SPI_Read
 ---------------------------------------------------------------------------------
 (10) i1_RfHalStatemachine                                 1     1      0    6962
                                              6 COMMON     1     1      0
                    i1_RfTrcvCrcTick
                        i1_RfTrcvGet
                       i1_RfTrcvMode
                        i1_RfTrcvPut
                     i1__CCBufWrByte
 ---------------------------------------------------------------------------------
 (11) i1__CCBufWrByte                                      2     2      0     460
                                              3 COMMON     2     2      0
                     i1__CCBufCalcPt
                      i1__CCBufCanWr
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCanWr                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1__CCBufCalcPt                                      3     2      1     387
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvMode                                        1     1      0    3751
                                              5 COMMON     1     1      0
                      i1_RfTrcvSetup
 ---------------------------------------------------------------------------------
 (10) i1_RfTrcvSetup                                       1     1      0    3532
                                              4 COMMON     1     1      0
                   i1_MRF49XACommand
                        i1_RfTrcvPut
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvPut                                         1     1      0    1766
                                              3 COMMON     1     1      0
                   i1_MRF49XACommand
 ---------------------------------------------------------------------------------
 (12) i1_MRF49XACommand                                    2     0      2    1693
                                              1 COMMON     2     0      2
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvGet                                         1     1      0     750
                                              1 COMMON     1     1      0
                         i1_SPI_Read
                        i1_SPI_Write
 ---------------------------------------------------------------------------------
 (13) i1_SPI_Write                                         1     1      0     584
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_SPI_Read                                          1     1      0      91
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_RfTrcvCrcTick                                     2     1      1     235
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _ExtIntInit
   _MRF49XAInit
     _MRF49XACommand
       _SPI_Write
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
   _RfHalInit
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
     __CCBufInit
       __CCBufReset
   _RfHalTickRxTh
     _RfHalAnyFree
     _RfHalGetFree
     _RfHalGetReturn
     _RfHalRxPut
     _RfTrcvCrcTick
     __CCBufCanRd
       __CCBufCalcPt
     __CCBufPeekByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdByte
       __CCBufCalcPt
       __CCBufCanRd
         __CCBufCalcPt
     __CCBufRdReverse
       __CCBufCalcPt
   _RfHalTickTxTh
     _RfHalGetReturn
     _RfHalTxGet
       ___bmul
     _RfTrcvCarrierPresent
       _RfTrcvStatus
         _SPI_Read
     _RfTrcvMode
       _RfTrcvSetup
         _MRF49XACommand
           _SPI_Write
         _RfTrcvPut
           _MRF49XACommand
             _SPI_Write
   _RfPacketsTickTh
     _RfHalRxGet
     _RfHalTxPutAgain
     _RfPacketsHandleClient
       _RfPacketSimpleReply
         _RfHalTxPut
   _RfTrcvStatus
     _SPI_Read
   _SysInitGpio
   _mrf49XaIsr
     _RfHalStatemachine
       _RfTrcvCrcTick
       _RfTrcvGet
         _SPI_Read
         _SPI_Write
       _RfTrcvMode
         _RfTrcvSetup
           _MRF49XACommand
             _SPI_Write
           _RfTrcvPut
             _MRF49XACommand
               _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
       __CCBufWrByte
         __CCBufCalcPt
         __CCBufCanWr
     _RfTrcvSetup
       _MRF49XACommand
         _SPI_Write
       _RfTrcvPut
         _MRF49XACommand
           _SPI_Write
     _RfTrcvStatus
       _SPI_Read

 _extInt (ROOT)
   i1_mrf49XaIsr
     i1_RfHalStatemachine
       i1_RfTrcvCrcTick
       i1_RfTrcvGet
         i1_SPI_Read
         i1_SPI_Write
       i1_RfTrcvMode
         i1_RfTrcvSetup
           i1_MRF49XACommand
             i1_SPI_Write
           i1_RfTrcvPut
             i1_MRF49XACommand
               i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
       i1__CCBufWrByte
         i1__CCBufCalcPt
         i1__CCBufCanWr
     i1_RfTrcvSetup
       i1_MRF49XACommand
         i1_SPI_Write
       i1_RfTrcvPut
         i1_MRF49XACommand
           i1_SPI_Write
     i1_RfTrcvStatus
       i1_SPI_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       7       2       50.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      95       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      B      26       6       47.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      38       8       70.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      30      10       60.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      95      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Sun Apr  6 10:04:09 2014

        RfHalTickRxTh@pktLength 003E                               pc 0002                 ??i1_RfTrcvSetup 0074  
                ___bmul@product 0038          __size_of_RfTrcvCrcTick 0000               ??i1_RfTrcvCrcTick 0071  
             RfHalTxPut@needAck 0037                ??i1_RfTrcvStatus 0071                      __CCBufInit 0000  
                           l240 015D                             l232 0149                             l241 015F  
                           l233 014B                             l403 02C8                             l252 017B  
                           l244 0167                             l236 0153                             l228 013F  
                           l253 017D                             l245 0169                             l237 0155  
                           l229 0141                             l181 0003                             l191 00B7  
                           l256 0185                             l248 0171                             l408 02D2  
                           l416 05D5                             l257 0187                             l249 0173  
                           l530 0015                             l195 0107                             l524 0002  
                           l547 0008                             l644 065B                             l494 061C  
                           l657 0042           __size_of__CCBufCalcPt 000C                             _dl1 0029  
                           _dl2 002A                             _isr 002B           __size_of__CCBufRdByte 001D  
                           wreg 0009                    ?_MRF49XAInit 0070           __size_of__CCBufWrByte 001C  
                   __CCBufCanRd 0000                            S3495 0748                     __CCBufCanWr 0000  
                          PL130 03BE                            PL140 03DB                            PL132 03C6  
                          PL142 03E1                            PL134 03CB                            PL144 03E6  
                          PL136 03D1                            PL128 0655                            PL138 03D6  
                   __CCBufReset 0000                            l3001 06C0                            l3101 029D  
                          l3005 06C2                            l3103 02A4                            l3043 05FB  
                          l3107 0000                            l3061 05A7                            l3053 0596  
                          l3109 0006                            l3039 05F0                            l3071 05B8  
                          l3055 059C                            l3151 005C                            l3143 0052  
                          l3049 0610                            l3065 05AD                            l3073 05BA  
                          l3145 0055                            l3153 005D                            l3129 003D  
                          l2603 00B6                            l3091 0011                            l3083 0000  
                          l3075 05CC                            l3147 0056                            l3093 0014  
                          l3501 0283                            l2701 036E                            l3087 0004  
                          l3159 073E                            l2625 0106                            l2481 066F  
                          l2491 012A                            l2803 023A                            l2811 0257  
                          l2723 06FF                            l2707 0375                            l2475 0667  
                          l2709 038D                            l2477 0669                            l2583 0001  
                          l2831 026F                            l2751 01BD                            l2593 008E  
                          l2657 0190                            l2809 024E                            l2737 0736  
                          l2923 0001                            l2763 01DD                            l2835 0276  
                          l2691 035E                            l2683 034F                            l2669 0000  
                          l2829 026A                            l2749 01B8                            l2837 0279  
                          l2685 0353                            l2847 0000                            l2839 0297  
                          l2849 000B                            l2689 0359                            l3497 05C4  
                          l2779 01FC                            l3499 037F                            l2971 0685  
                          l2797 01F1                            l2799 022F                            l2983 068E  
                          l2975 068A                            l2969 0682                            l2987 0691  
                          l2979 068C                            l2997 06BA                            _main 0030  
               __end_of_AdcInit 0073                            _rfPk 002C                            fsr0h 0005  
                          fsr1h 0007                            fsr0l 0004                            indf0 0000  
                          indf1 0001                            fsr1l 0006                            btemp 007E  
                          ltemp 007E                            start 000D                            ttemp 007E  
                    RfTrcvGet@b 0038                            wtemp 007E               ___bmul@multiplier 0039  
           i1__CCBufWrByte@data 0074                    __CCBufCalcPt 029A                     ?i1_SPI_Read 0070  
                  __CCBufRdByte 02A6                   ??_RfTrcvSetup 0077          i1RfTrcvCrcTick@initial 0071  
         __size_ofi1_mrf49XaIsr 001B                    __CCBufWrByte 06E1                           ?_main 0070  
               _RfHalTxPutAgain 05DB                           i1l240 0500                           i1l232 04EE  
                         i1l241 0501                           i1l233 04EF                           i1l252 051B  
                         i1l244 0509                           i1l236 04F7                           i1l228 04E5  
                         i1l181 0003                           i1l253 051C                           i1l245 050A  
                         i1l237 04F8                           i1l229 04E6                           i1l256 0524  
                         i1l248 0512                           i1l257 0525                           i1l249 0513  
                         i1l644 0415                      _RfHalRxGet 05CE                      _RfHalTxGet 06FD  
                    _RfHalRxPut 02E3                      _RfHalTxPut 0638                   ?_RfTrcvStatus 0070  
         __end_ofi1__CCBufCanWr 0000                   _RfTrcvCrcTick 0000                           fpbase 0402  
              __end_of_SPI_Read 034D                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F              __size_of_SPI_Write 0055  
       __size_of__CCBufPeekByte 001C                    __end_ofPL130 03C6                    __end_ofPL140 03E1  
                  __end_ofPL132 03CB                    __end_ofPL142 03E6                    __end_ofPL134 03D1  
                  __end_ofPL144 03EB                    __end_ofPL136 03D6                    __end_ofPL128 065B  
                  __end_ofPL138 03DB              __CCBufPeekByte@res 003B                    SPI_Read@data 0037  
          __end_of_RfHalAnyFree 02CC                    i1_mrf49XaIsr 0415            __end_of_RfHalGetFree 02D8  
           i1RfTrcvCrcTick@data 0070                 __initialization 000F                      _ExtIntInit 0073  
                  __end_of_main 0064                  _MRF49XACommand 012A                      _RfTrcvMode 0390  
                i1__CCBufCalcPt 0586            RfTrcvCrcTick@initial 0038                          ??_main 0077  
                   ?__CCBufInit 0070                    ?i1_SPI_Write 0070                  i1__CCBufWrByte 056A  
                ??_RfTrcvStatus 0077             __end_of_RfTrcvSetup 00AB              __size_of_RfHalInit 002B  
                 __CCBufReset@i 0038             __CCBufRdReverse@qty 003A                  ?_RfTrcvCrcTick 0037  
                        _ADCON0 009D                 RfHalTickRxTh@pt 003F                          _ADCON1 009E  
                        _ADCON2 009F                       ??_AdcInit 0077                          i1S3503 075E  
               RfHalTickTxTh@pt 003F     __end_ofi1_RfHalStatemachine 0486                          _ANSELA 018C  
                        _ANSELB 018D                          _ANSELC 018E                          i1l3221 04FE  
                        i1l3213 04EC                          i1l3233 0519                          i1l3225 0507  
                        i1l3217 04F5                          i1l3209 04E3                          i1l3313 0431  
                        i1l3307 0410                          i1l3251 0000                          i1l3331 0441  
                        i1l3323 043C                          i1l3315 0435             __size_ofi1_SPI_Read 0036  
                        i1l3173 0001                          i1l3237 0522                          i1l3229 0510  
                        i1l3245 0589                          i1l3253 0007                          i1l3341 046A  
                        i1l3247 0590                          i1l3327 043E                          i1l3319 043A  
                        i1l3345 0470                          i1l3349 0472                          i1l3357 047B  
                        i1l3381 0428                          i1l3375 0420                          i1l3377 0422  
                        i1l3299 04B0                          _FVRCON 0117                          u245_21 040E  
                        _OSCCON 0099     RfHalTickRxTh@pktRxByteIndex 0025                __end_of__fptable 0405  
            __size_of_RfTrcvGet 000E              __size_of_RfTrcvPut 000A          __end_of_MRF49XACommand 0135  
           _RfPacketSimpleReply 061D                  i1SPI_Read@data 0070                          ___bmul 073C  
       __end_of_RfHalTxPutAgain 05EE          __end_ofi1__CCBufCalcPt 0592                    MRF49XAInit@i 003C  
                  MRF49XAInit@j 003D           RfPacketsTickTh@packet 0027                          _rfRxCC 0042  
                        _rfRxBf 0120                          _extInt 0004          __end_ofi1__CCBufWrByte 0586  
                  ?i1_RfTrcvGet 0070                    ?i1_RfTrcvPut 0070                          fptable 0400  
     RfPacketSimpleReply@packet 003D               __end_of_SPI_Write 018A                          fptotal 0001  
                   ?_RfHalRxGet 0070                     ?_RfHalTxGet 0070                     ?_RfHalRxPut 0070  
                   ?_RfHalTxPut 0037            ?_RfPacketSimpleReply 003A   __size_of_RfTrcvCarrierPresent 0005  
     __size_ofi1_MRF49XACommand 0009        __size_of__CCBufRdReverse 0000            __size_of_MRF49XAInit 007F  
       __end_of__initialization 002E                __CCBufRdByte@res 003B                    RfTrcvMode@tx 003C  
               i1_RfTrcvCrcTick 0000             __size_of__CCBufInit 0000  __size_of_RfPacketsHandleClient 002F  
      __size_of_RfPacketsTickTh 003C   __end_of_RfPacketsHandleClient 061D             ___bmul@multiplicand 0037  
               ?_MRF49XACommand 0038               __end_of_RfHalInit 01B5                     ?_ExtIntInit 0070  
                __pcstackCOMMON 0070                    __pidataBANK0 0000                     ?_RfTrcvMode 0070  
               ?i1__CCBufCalcPt 0070         __size_of_RfHalGetReturn 000B                     _RfTrcvSetup 0078  
                     ?_SPI_Read 0070                 ?i1__CCBufWrByte 0070               __end_of_RfTrcvGet 06E1  
         __end_of_RfHalTickRxTh 029A               __end_of_RfTrcvPut 06D3           __end_of_RfHalTickTxTh 0390  
                _OPTION_REGbits 0095           ??_RfPacketSimpleReply 0077                 ??_RfTrcvCrcTick 0077  
           __CCBufCalcPt@result 0039                    ?__CCBufCanRd 0070                    ?__CCBufCanWr 0070  
   RfPacketsHandleClient@packet 003E                    ?__CCBufReset 0070                   ??_SysInitGpio 0077  
                    __pbssBANK0 0020                      __pbssBANK1 00A0                      __pbssBANK2 0120  
         __size_of_RfHalAnyFree 0009           __size_of_RfHalGetFree 000C                  __CCBufPeekByte 02EF  
             __CCBufCalcPt@move 0037                  i1RfTrcvMode@tx 0075            __end_of_RfTrcvStatus 0315  
           __size_of_RfHalRxGet 000D             __size_of_RfHalTxGet 003F                      __pmaintext 0030  
           __size_of_RfHalRxPut 000C             __size_of_RfHalTxPut 001D                         ?___bmul 0037  
              ?_RfHalTxPutAgain 0070                    ??i1_SPI_Read 0070                      __pintentry 0004  
                       ?_extInt 0070           __end_ofi1_RfTrcvSetup 04D4                      ??_SPI_Read 0077  
                    _mrf49XaIsr 065B            __size_ofi1_SPI_Write 004B                    _RfHalAnyFree 02C3  
                  _RfHalGetFree 02CC                         _AdcInit 0064         __end_ofi1_RfTrcvCrcTick 0000  
           __size_of_ExtIntInit 0005      RfHalTickRxTh@rxByteTimeout 0026             __size_of_RfTrcvMode 000D  
        __end_of__CCBufPeekByte 030B            i1__CCBufCalcPt@entry 0071              __end_ofi1_SPI_Read 056A  
             ??__CCBufRdReverse 0077             __end_of_SysInitGpio 03BE               _RfHalStatemachine 0677  
                 SPI_Write@data 0037              ?_RfHalStatemachine 0070                 __size_of___bmul 000C  
             ??_RfPacketsTickTh 003F                         _halPkTh 002F                 __size_of_extInt 0009  
                  ??__CCBufInit 0077                         __ptext1 065B                         __ptext2 0677  
                       __ptext3 06E1                         __ptext4 0000                         __ptext5 06D3  
                       __ptext6 03A2                         __ptext7 0592                         __ptext8 05EE  
                       __ptext9 061D             ??_RfHalStatemachine 003D                         _rfPkCrc 002D  
        RfPacketsTickTh@timeout 0028            __size_ofi1_RfTrcvGet 0009            __size_ofi1_RfTrcvPut 0009  
              i1_MRF49XACommand 04D4                   ?i1_RfTrcvMode 0070                         clrloop0 0775  
              RfHalRxPut@packet 0037         __size_ofi1_RfTrcvStatus 000C            end_of_initialization 002E  
    RfPacketSimpleReply@needAck 003B                 ?__CCBufPeekByte 0070      RfPacketSimpleReply@nodeTmp 003C  
     __end_of_RfHalStatemachine 06C9          RfPacketSimpleReply@msg 003A              __end_of__CCBufInit 0000  
                _RfHalGetReturn 02D8          __size_ofi1__CCBufCanWr 0000                       _PORTAbits 000C  
                     _PORTCbits 000E                    ??_RfHalRxGet 0077                    ??_RfHalTxGet 0077  
                  ??_RfHalRxPut 0077                     ?_mrf49XaIsr 0070                    ??_RfHalTxPut 0038  
                     _TRISAbits 008C                       _TRISBbits 008D                       _TRISCbits 008E  
                ??i1_RfTrcvMode 0075                       _SPI_Write 0135                ?i1_RfTrcvCrcTick 0070  
              RfHalTxPut@packet 0039            __size_of__CCBufCanRd 0000            __size_of__CCBufCanWr 0000  
                   _SysInitGpio 03A2           __size_of_RfTrcvStatus 000A                ??_MRF49XACommand 0077  
          __size_of__CCBufReset 0000                   RfTrcvPut@byte 003A                   RfTrcvSetup@tx 003B  
              ??i1__CCBufCalcPt 0071    __end_of_RfTrcvCarrierPresent 03A2    __size_ofi1_RfHalStatemachine 0056  
             MRF49XACommand@cmd 0038          __end_of_RfHalGetReturn 02E3                    ??_ExtIntInit 0077  
            __end_of_RfHalRxGet 05DB                ??i1__CCBufWrByte 0073              __end_of_RfHalTxGet 073C  
            __end_of_RfHalRxPut 02EF              __end_of_RfHalTxPut 0655                    ??_RfTrcvMode 0077  
                __end_of___bmul 0748                 i1SPI_Write@data 0070                       _RfHalInit 018A  
                  ?_RfTrcvSetup 0070                  __end_of_extInt 000D               __size_of_SPI_Read 0038  
           start_initialization 000F                   ??_MRF49XAInit 0077                    _RfTrcvStatus 030B  
                     _RfTrcvGet 06D3                       _RfTrcvPut 06C9                      ?_SPI_Write 0070  
                 i1__CCBufCanWr 0000               RfPacketsTickTh@pt 0041              __end_of_ExtIntInit 0078  
            __end_of_RfTrcvMode 039D      __size_of_RfHalStatemachine 0052                 ?_RfHalGetReturn 0070  
           __size_of_mrf49XaIsr 001C                        ??___bmul 0077                   ?__CCBufCalcPt 0037  
         _RfPacketsHandleClient 05EE                   ?__CCBufRdByte 0070                     __pdataBANK0 0042  
                      ??_extInt 0077     __end_of_RfPacketSimpleReply 0638                      ?_RfHalInit 0070  
                 ?__CCBufWrByte 0070                       ___latbits 0001                   __pcstackBANK0 0037  
              entry__mrf49XaIsr 0403                 __CCBufRdReverse 0000                      ?_RfTrcvGet 0070  
             __size_of__fptable 0005                  ?i1__CCBufCanWr 0070                      ?_RfTrcvPut 0070  
         __end_of_RfTrcvCrcTick 0000                  i1_RfTrcvStatus 0528                        ?_AdcInit 0070  
            __CCBufCalcPt@entry 0038                    _rfTrcvStatus 0035             __end_of_MRF49XAInit 012A  
               _RfPacketsTickTh 0592                       _halRxBfTh 0031                       _halTxBfTh 0033  
                 ?i1_mrf49XaIsr 0070          __size_of_RfHalTickRxTh 00E5          __size_of_RfHalTickTxTh 0043  
                ??__CCBufCalcPt 0077        __end_ofi1_MRF49XACommand 04DD                 i1RfTrcvPut@byte 0073  
                     __pfunctab 0400                 i1RfTrcvSetup@tx 0074                  ??__CCBufRdByte 003A  
          __end_ofi1_RfTrcvMode 0415                  ??__CCBufWrByte 003A                   ??i1_SPI_Write 0070  
                     __pswtext1 0748                       __pswtext2 075E             i1__CCBufCalcPt@move 0070  
      __size_of_RfHalTxPutAgain 0013                       _rfPackets 00A0          __end_ofi1_RfTrcvStatus 0534  
          _RfTrcvCarrierPresent 039D                ??__CCBufPeekByte 003A                     ??_SPI_Write 0077  
             __CCBufWrByte@data 003B          __size_ofi1_RfTrcvSetup 003C                        _LATAbits 010C  
                      _LATBbits 010D                        _LATCbits 010E                       clear_ram0 0774  
                ??i1_mrf49XaIsr 0077          ?_RfPacketsHandleClient 0070                     ??_RfHalInit 0077  
           RfHalTickRxTh@packet 0024                        _SPI_Read 0315                   ??i1_RfTrcvGet 0071  
                 ??i1_RfTrcvPut 0073         __end_of__CCBufRdReverse 0000            __size_of_RfTrcvSetup 0033  
                      _WPUAbits 020C                    ??_mrf49XaIsr 0077                   _RfHalTickRxTh 01B5  
           i1_RfHalStatemachine 0430                   _RfHalTickTxTh 034D           ?_RfTrcvCarrierPresent 0070  
               ??i1__CCBufCanWr 0070           i1__CCBufCalcPt@result 0072                 ?i1_RfTrcvStatus 0070  
             RfTrcvCrcTick@data 0037                     _MRF49XAInit 00AB                     ??_RfTrcvGet 0077  
                   ??_RfTrcvPut 0077             __end_ofi1_SPI_Write 0528         __end_of_RfPacketsTickTh 05CE  
              __size_of_AdcInit 000F                    ?_SysInitGpio 0070            ?i1_RfHalStatemachine 0070  
            __end_of_mrf49XaIsr 0677                   i1_RfTrcvSetup 0498                  ?_RfHalTickRxTh 0070  
                ?_RfHalTickTxTh 0070                        __fptable 0400                    i1RfTrcvGet@b 0071  
                 ??__CCBufCanRd 0077                   ??__CCBufCanWr 0077             __end_ofi1_RfTrcvGet 0498  
           __end_ofi1_RfTrcvPut 048F                        __ptext10 0638                        __ptext11 05DB  
                      __ptext20 0000                        __ptext12 05CE                        __ptext21 02A6  
                      __ptext13 034D                        __ptext30 018A                        __ptext22 02EF  
                      __ptext14 039D                        __ptext31 0000                        __ptext23 0000  
                      __ptext15 030B                        __ptext40 0064                        __ptext32 0000  
                      __ptext24 029A                        __ptext16 0315                        __ptext33 0390  
                      __ptext25 0000                        __ptext17 06FD                        __ptext50 0486  
                      __ptext42 0415                        __ptext34 00AB                        __ptext26 02E3  
                      __ptext18 073C                        __ptext51 04D4                        __ptext43 0528  
                      __ptext35 0078                        __ptext27 02D8                        __ptext19 01B5  
                      __ptext52 048F                        __ptext44 0430                        __ptext36 06C9  
                      __ptext28 02CC                        __ptext53 04DD                        __ptext45 056A  
                      __ptext37 012A                        __ptext29 02C3                        __ptext54 0534  
                      __ptext46 0000                        __ptext38 0135                        __ptext55 0000  
                      __ptext47 0586                        __ptext39 0073                        __ptext48 0405  
                      __ptext49 0498            __end_of__CCBufCalcPt 02A6                   ??__CCBufReset 0037  
             ??_RfHalTxPutAgain 0037            __end_of__CCBufRdByte 02C3                        _rfPkTime 002E  
          __end_of__CCBufWrByte 06FD                ??_RfHalGetReturn 0077                   __size_of_main 0034  
                      _rfStatus 0020           ??i1_RfHalStatemachine 0076           __size_ofi1_RfTrcvMode 0010  
      __size_ofi1_RfTrcvCrcTick 0000                  ?i1_RfTrcvSetup 0070                ?__CCBufRdReverse 0070  
                   i1_SPI_Write 04DD          ??_RfTrcvCarrierPresent 0077                      _INTCONbits 000B  
           i1MRF49XACommand@cmd 0071            __end_ofi1_mrf49XaIsr 0430                   ?_RfHalAnyFree 0070  
                 ?_RfHalGetFree 0070                    i1_RfTrcvMode 0405                ?_RfPacketsTickTh 0070  
                      intlevel1 0400             __end_of__CCBufCanRd 0000             __end_of__CCBufCanWr 0000  
           __end_of__CCBufReset 0000            RfHalGetReturn@packet 0037               ?i1_MRF49XACommand 0071  
       __size_of_MRF49XACommand 000B                      i1_SPI_Read 0534              ??i1_MRF49XACommand 0073  
                   RfHalTxGet@i 003A         __size_ofi1__CCBufCalcPt 000C                 ??_RfHalTickRxTh 003C  
               ??_RfHalTickTxTh 003D                     i1_RfTrcvGet 048F                     i1_RfTrcvPut 0486  
                ??_RfHalAnyFree 0077                  ??_RfHalGetFree 0077         __size_ofi1__CCBufWrByte 001C  
  __size_of_RfPacketSimpleReply 001B                      RfHalInit@i 003D                   fp__mrf49XaIsr 0403  
       ??_RfPacketsHandleClient 0077            __size_of_SysInitGpio 001C  
